
NTP_STM32_F407VGT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017d40  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f04  08017ed0  08017ed0  00027ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801add4  0801add4  000301f4  2**0
                  CONTENTS
  4 .ARM          00000008  0801add4  0801add4  0002add4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801addc  0801addc  000301f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801addc  0801addc  0002addc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ade0  0801ade0  0002ade0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0801ade4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c810  200001f4  0801afd8  000301f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000ca04  0801afd8  0003ca04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00050fd3  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009b73  00000000  00000000  000811f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002930  00000000  00000000  0008ad70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002720  00000000  00000000  0008d6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00035b2f  00000000  00000000  0008fdc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003fcf2  00000000  00000000  000c58ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc02e  00000000  00000000  001055e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0020160f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b2a0  00000000  00000000  00201664  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f4 	.word	0x200001f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08017eb8 	.word	0x08017eb8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	08017eb8 	.word	0x08017eb8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <ReadDeviceAddressOffset>:
	/* Lock the Flash to disable the flash control register access (recommended
	to protect the FLASH memory against possible unwanted operation) *********/
	HAL_FLASH_Lock();
}
void ReadDeviceAddressOffset(char* Dout, int size, int offset)
{
 8000568:	b480      	push	{r7}
 800056a:	b087      	sub	sp, #28
 800056c:	af00      	add	r7, sp, #0
 800056e:	60f8      	str	r0, [r7, #12]
 8000570:	60b9      	str	r1, [r7, #8]
 8000572:	607a      	str	r2, [r7, #4]
	uint32_t Address = CONFIGURATION_START_ADDR+offset;
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800057a:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
 800057e:	613b      	str	r3, [r7, #16]

	for (int i = 0; i<size; i++){
 8000580:	2300      	movs	r3, #0
 8000582:	617b      	str	r3, [r7, #20]
 8000584:	e00c      	b.n	80005a0 <ReadDeviceAddressOffset+0x38>
		Dout[i] = *(__IO char*)(Address+i);
 8000586:	697a      	ldr	r2, [r7, #20]
 8000588:	693b      	ldr	r3, [r7, #16]
 800058a:	4413      	add	r3, r2
 800058c:	4619      	mov	r1, r3
 800058e:	697b      	ldr	r3, [r7, #20]
 8000590:	68fa      	ldr	r2, [r7, #12]
 8000592:	4413      	add	r3, r2
 8000594:	780a      	ldrb	r2, [r1, #0]
 8000596:	b2d2      	uxtb	r2, r2
 8000598:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i<size; i++){
 800059a:	697b      	ldr	r3, [r7, #20]
 800059c:	3301      	adds	r3, #1
 800059e:	617b      	str	r3, [r7, #20]
 80005a0:	697a      	ldr	r2, [r7, #20]
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	429a      	cmp	r2, r3
 80005a6:	dbee      	blt.n	8000586 <ReadDeviceAddressOffset+0x1e>
	}
}
 80005a8:	bf00      	nop
 80005aa:	bf00      	nop
 80005ac:	371c      	adds	r7, #28
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
	...

080005b8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	60f8      	str	r0, [r7, #12]
 80005c0:	60b9      	str	r1, [r7, #8]
 80005c2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	4a07      	ldr	r2, [pc, #28]	; (80005e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80005c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ca:	68bb      	ldr	r3, [r7, #8]
 80005cc:	4a06      	ldr	r2, [pc, #24]	; (80005e8 <vApplicationGetIdleTaskMemory+0x30>)
 80005ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	2280      	movs	r2, #128	; 0x80
 80005d4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005d6:	bf00      	nop
 80005d8:	3714      	adds	r7, #20
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	20000210 	.word	0x20000210
 80005e8:	20000264 	.word	0x20000264

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b5b0      	push	{r4, r5, r7, lr}
 80005ee:	b0c0      	sub	sp, #256	; 0x100
 80005f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	memset(&gps,0,sizeof(gps));
 80005f2:	221b      	movs	r2, #27
 80005f4:	2100      	movs	r1, #0
 80005f6:	48a3      	ldr	r0, [pc, #652]	; (8000884 <main+0x298>)
 80005f8:	f016 fc3c 	bl	8016e74 <memset>
		// ZDA-38;RMC-68



		 //включение ZDA
		 char MESZDA[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x08, 0x01, 0x01, 0x00, 0x01, 0x01, 0x00, 0x0B, 0x6B};
 80005fc:	4ba2      	ldr	r3, [pc, #648]	; (8000888 <main+0x29c>)
 80005fe:	f107 04ec 	add.w	r4, r7, #236	; 0xec
 8000602:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000604:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		 char CONZDA[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x08, 0x01, 0x19};
 8000608:	4aa0      	ldr	r2, [pc, #640]	; (800088c <main+0x2a0>)
 800060a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800060e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000610:	c303      	stmia	r3!, {r0, r1}
 8000612:	801a      	strh	r2, [r3, #0]
		 //отключение ZDA
		 //char MESZDA[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x5B};
		 //char CONZDA[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x08, 0x01, 0x19};

		 //отключение остального
		 char MESGGA[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x23};
 8000614:	4b9e      	ldr	r3, [pc, #632]	; (8000890 <main+0x2a4>)
 8000616:	f107 04d0 	add.w	r4, r7, #208	; 0xd0
 800061a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800061c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		 char CONGGA[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x00, 0xF9, 0x11};
 8000620:	4a9c      	ldr	r2, [pc, #624]	; (8000894 <main+0x2a8>)
 8000622:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000626:	ca07      	ldmia	r2, {r0, r1, r2}
 8000628:	c303      	stmia	r3!, {r0, r1}
 800062a:	801a      	strh	r2, [r3, #0]

		 char MESGLL[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2A};
 800062c:	4b9a      	ldr	r3, [pc, #616]	; (8000898 <main+0x2ac>)
 800062e:	f107 04b4 	add.w	r4, r7, #180	; 0xb4
 8000632:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000634:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		 char CONGLL[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x01, 0xFA, 0x12};
 8000638:	4a98      	ldr	r2, [pc, #608]	; (800089c <main+0x2b0>)
 800063a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800063e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000640:	c303      	stmia	r3!, {r0, r1}
 8000642:	801a      	strh	r2, [r3, #0]

		 char MESGSA[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x31};
 8000644:	4b96      	ldr	r3, [pc, #600]	; (80008a0 <main+0x2b4>)
 8000646:	f107 0498 	add.w	r4, r7, #152	; 0x98
 800064a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800064c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		 char CONGSA[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x02, 0xFB, 0x13};
 8000650:	4a94      	ldr	r2, [pc, #592]	; (80008a4 <main+0x2b8>)
 8000652:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000656:	ca07      	ldmia	r2, {r0, r1, r2}
 8000658:	c303      	stmia	r3!, {r0, r1}
 800065a:	801a      	strh	r2, [r3, #0]

		 char MESGSV[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x38};
 800065c:	4b92      	ldr	r3, [pc, #584]	; (80008a8 <main+0x2bc>)
 800065e:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 8000662:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000664:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		 char CONGSV[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x03, 0xFC, 0x14};
 8000668:	4a90      	ldr	r2, [pc, #576]	; (80008ac <main+0x2c0>)
 800066a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800066e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000670:	c303      	stmia	r3!, {r0, r1}
 8000672:	801a      	strh	r2, [r3, #0]

		 char MESVTG[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x46};
 8000674:	4b8e      	ldr	r3, [pc, #568]	; (80008b0 <main+0x2c4>)
 8000676:	f107 0460 	add.w	r4, r7, #96	; 0x60
 800067a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800067c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		 char CONVTG[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x05, 0xFE, 0x16};
 8000680:	4a8c      	ldr	r2, [pc, #560]	; (80008b4 <main+0x2c8>)
 8000682:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000686:	ca07      	ldmia	r2, {r0, r1, r2}
 8000688:	c303      	stmia	r3!, {r0, r1}
 800068a:	801a      	strh	r2, [r3, #0]
		 //отключение RMC на всякий
		 //char MESRMC[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x3F};
		 //char CONRMC[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x04, 0xFD, 0x15};

		 //включение RMC
		 char MESRMC[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x04, 0x01, 0x01, 0x00, 0x01, 0x01, 0x00, 0x07, 0x4F};
 800068c:	4b8a      	ldr	r3, [pc, #552]	; (80008b8 <main+0x2cc>)
 800068e:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8000692:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000694:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		 char CONRMC[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x04, 0xFD, 0x15};
 8000698:	4a88      	ldr	r2, [pc, #544]	; (80008bc <main+0x2d0>)
 800069a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800069e:	ca07      	ldmia	r2, {r0, r1, r2}
 80006a0:	c303      	stmia	r3!, {r0, r1}
 80006a2:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a4:	f000 feea 	bl	800147c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a8:	f000 f91a 	bl	80008e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ac:	f000 faca 	bl	8000c44 <MX_GPIO_Init>
  MX_RTC_Init();
 80006b0:	f000 f998 	bl	80009e4 <MX_RTC_Init>
  MX_USART1_UART_Init();
 80006b4:	f000 fa72 	bl	8000b9c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80006b8:	f000 fa9a 	bl	8000bf0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80006bc:	f000 fa22 	bl	8000b04 <MX_TIM2_Init>
  MX_SPI3_Init();
 80006c0:	f000 f9ea 	bl	8000a98 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  //TIM1
    HAL_TIM_Base_Start_IT(&htim2);
 80006c4:	487e      	ldr	r0, [pc, #504]	; (80008c0 <main+0x2d4>)
 80006c6:	f004 fc21 	bl	8004f0c <HAL_TIM_Base_Start_IT>

    HAL_Delay(5000);
 80006ca:	f241 3088 	movw	r0, #5000	; 0x1388
 80006ce:	f000 ff17 	bl	8001500 <HAL_Delay>

   //ON ZDA
    HAL_UART_Transmit(&huart2,(uint8_t*) MESZDA, 16, 1000);
 80006d2:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 80006d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006da:	2210      	movs	r2, #16
 80006dc:	4879      	ldr	r0, [pc, #484]	; (80008c4 <main+0x2d8>)
 80006de:	f005 f894 	bl	800580a <HAL_UART_Transmit>
    HAL_Delay(100);
 80006e2:	2064      	movs	r0, #100	; 0x64
 80006e4:	f000 ff0c 	bl	8001500 <HAL_Delay>
    HAL_UART_Transmit(&huart2,(uint8_t*) CONZDA, 10, 1000);
 80006e8:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 80006ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006f0:	220a      	movs	r2, #10
 80006f2:	4874      	ldr	r0, [pc, #464]	; (80008c4 <main+0x2d8>)
 80006f4:	f005 f889 	bl	800580a <HAL_UART_Transmit>
    HAL_Delay(100);
 80006f8:	2064      	movs	r0, #100	; 0x64
 80006fa:	f000 ff01 	bl	8001500 <HAL_Delay>

    // OFF protokol
    HAL_UART_Transmit(&huart2,(uint8_t*) MESGGA, 16, 1000);
 80006fe:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8000702:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000706:	2210      	movs	r2, #16
 8000708:	486e      	ldr	r0, [pc, #440]	; (80008c4 <main+0x2d8>)
 800070a:	f005 f87e 	bl	800580a <HAL_UART_Transmit>
    HAL_Delay(100);
 800070e:	2064      	movs	r0, #100	; 0x64
 8000710:	f000 fef6 	bl	8001500 <HAL_Delay>
    HAL_UART_Transmit(&huart2,(uint8_t*) CONGGA, 10, 1000);
 8000714:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 8000718:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800071c:	220a      	movs	r2, #10
 800071e:	4869      	ldr	r0, [pc, #420]	; (80008c4 <main+0x2d8>)
 8000720:	f005 f873 	bl	800580a <HAL_UART_Transmit>
    HAL_Delay(100);
 8000724:	2064      	movs	r0, #100	; 0x64
 8000726:	f000 feeb 	bl	8001500 <HAL_Delay>

    HAL_UART_Transmit(&huart2,(uint8_t*) MESGLL, 16, 1000);
 800072a:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 800072e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000732:	2210      	movs	r2, #16
 8000734:	4863      	ldr	r0, [pc, #396]	; (80008c4 <main+0x2d8>)
 8000736:	f005 f868 	bl	800580a <HAL_UART_Transmit>
    HAL_Delay(100);
 800073a:	2064      	movs	r0, #100	; 0x64
 800073c:	f000 fee0 	bl	8001500 <HAL_Delay>
    HAL_UART_Transmit(&huart2,(uint8_t*) CONGLL, 10, 1000);
 8000740:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8000744:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000748:	220a      	movs	r2, #10
 800074a:	485e      	ldr	r0, [pc, #376]	; (80008c4 <main+0x2d8>)
 800074c:	f005 f85d 	bl	800580a <HAL_UART_Transmit>
    HAL_Delay(100);
 8000750:	2064      	movs	r0, #100	; 0x64
 8000752:	f000 fed5 	bl	8001500 <HAL_Delay>

    HAL_UART_Transmit(&huart2,(uint8_t*) MESGSA, 16, 1000);
 8000756:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800075a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800075e:	2210      	movs	r2, #16
 8000760:	4858      	ldr	r0, [pc, #352]	; (80008c4 <main+0x2d8>)
 8000762:	f005 f852 	bl	800580a <HAL_UART_Transmit>
    HAL_Delay(100);
 8000766:	2064      	movs	r0, #100	; 0x64
 8000768:	f000 feca 	bl	8001500 <HAL_Delay>
    HAL_UART_Transmit(&huart2,(uint8_t*) CONGSA, 10, 1000);
 800076c:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8000770:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000774:	220a      	movs	r2, #10
 8000776:	4853      	ldr	r0, [pc, #332]	; (80008c4 <main+0x2d8>)
 8000778:	f005 f847 	bl	800580a <HAL_UART_Transmit>
    HAL_Delay(100);
 800077c:	2064      	movs	r0, #100	; 0x64
 800077e:	f000 febf 	bl	8001500 <HAL_Delay>

    HAL_UART_Transmit(&huart2,(uint8_t*) MESGSV, 16, 1000);
 8000782:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8000786:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800078a:	2210      	movs	r2, #16
 800078c:	484d      	ldr	r0, [pc, #308]	; (80008c4 <main+0x2d8>)
 800078e:	f005 f83c 	bl	800580a <HAL_UART_Transmit>
    HAL_Delay(100);
 8000792:	2064      	movs	r0, #100	; 0x64
 8000794:	f000 feb4 	bl	8001500 <HAL_Delay>
    HAL_UART_Transmit(&huart2,(uint8_t*) CONGSV, 10, 1000);
 8000798:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800079c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007a0:	220a      	movs	r2, #10
 80007a2:	4848      	ldr	r0, [pc, #288]	; (80008c4 <main+0x2d8>)
 80007a4:	f005 f831 	bl	800580a <HAL_UART_Transmit>
    HAL_Delay(100);
 80007a8:	2064      	movs	r0, #100	; 0x64
 80007aa:	f000 fea9 	bl	8001500 <HAL_Delay>

    HAL_UART_Transmit(&huart2,(uint8_t*) MESVTG, 16, 1000);
 80007ae:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80007b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007b6:	2210      	movs	r2, #16
 80007b8:	4842      	ldr	r0, [pc, #264]	; (80008c4 <main+0x2d8>)
 80007ba:	f005 f826 	bl	800580a <HAL_UART_Transmit>
    HAL_Delay(100);
 80007be:	2064      	movs	r0, #100	; 0x64
 80007c0:	f000 fe9e 	bl	8001500 <HAL_Delay>
    HAL_UART_Transmit(&huart2,(uint8_t*) CONVTG, 10, 1000);
 80007c4:	f107 0154 	add.w	r1, r7, #84	; 0x54
 80007c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007cc:	220a      	movs	r2, #10
 80007ce:	483d      	ldr	r0, [pc, #244]	; (80008c4 <main+0x2d8>)
 80007d0:	f005 f81b 	bl	800580a <HAL_UART_Transmit>
    HAL_Delay(100);
 80007d4:	2064      	movs	r0, #100	; 0x64
 80007d6:	f000 fe93 	bl	8001500 <HAL_Delay>

    //отключение и включение RMC на всякий
    HAL_UART_Transmit(&huart2,(uint8_t*) MESRMC, 16, 1000);
 80007da:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80007de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007e2:	2210      	movs	r2, #16
 80007e4:	4837      	ldr	r0, [pc, #220]	; (80008c4 <main+0x2d8>)
 80007e6:	f005 f810 	bl	800580a <HAL_UART_Transmit>
    HAL_Delay(100);
 80007ea:	2064      	movs	r0, #100	; 0x64
 80007ec:	f000 fe88 	bl	8001500 <HAL_Delay>
    HAL_UART_Transmit(&huart2,(uint8_t*) CONRMC, 10, 1000);
 80007f0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80007f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007f8:	220a      	movs	r2, #10
 80007fa:	4832      	ldr	r0, [pc, #200]	; (80008c4 <main+0x2d8>)
 80007fc:	f005 f805 	bl	800580a <HAL_UART_Transmit>
    HAL_Delay(100);
 8000800:	2064      	movs	r0, #100	; 0x64
 8000802:	f000 fe7d 	bl	8001500 <HAL_Delay>

    //start the web server
    int offset =0;
 8000806:	2300      	movs	r3, #0
 8000808:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
   ReadDeviceAddressOffset((char*) &user_info, sizeof(user_info), offset);
 800080c:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8000810:	f44f 7192 	mov.w	r1, #292	; 0x124
 8000814:	482c      	ldr	r0, [pc, #176]	; (80008c8 <main+0x2dc>)
 8000816:	f7ff fea7 	bl	8000568 <ReadDeviceAddressOffset>
   offset+=sizeof(user_info);
 800081a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800081e:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8000822:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
   //Обнуление PPS
   PPS_count=0;
 8000826:	4b29      	ldr	r3, [pc, #164]	; (80008cc <main+0x2e0>)
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
   gps.year[0]='V';
 800082c:	4b15      	ldr	r3, [pc, #84]	; (8000884 <main+0x298>)
 800082e:	2256      	movs	r2, #86	; 0x56
 8000830:	719a      	strb	r2, [r3, #6]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000832:	4b27      	ldr	r3, [pc, #156]	; (80008d0 <main+0x2e4>)
 8000834:	f107 041c 	add.w	r4, r7, #28
 8000838:	461d      	mov	r5, r3
 800083a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800083c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800083e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000842:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000846:	f107 031c 	add.w	r3, r7, #28
 800084a:	2100      	movs	r1, #0
 800084c:	4618      	mov	r0, r3
 800084e:	f008 ff39 	bl	80096c4 <osThreadCreate>
 8000852:	4603      	mov	r3, r0
 8000854:	4a1f      	ldr	r2, [pc, #124]	; (80008d4 <main+0x2e8>)
 8000856:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, tcpecho_thread, osPriorityIdle, 0, 128);
 8000858:	463b      	mov	r3, r7
 800085a:	4a1f      	ldr	r2, [pc, #124]	; (80008d8 <main+0x2ec>)
 800085c:	461c      	mov	r4, r3
 800085e:	4615      	mov	r5, r2
 8000860:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000862:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000864:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000868:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 800086c:	463b      	mov	r3, r7
 800086e:	2100      	movs	r1, #0
 8000870:	4618      	mov	r0, r3
 8000872:	f008 ff27 	bl	80096c4 <osThreadCreate>
 8000876:	4603      	mov	r3, r0
 8000878:	4a18      	ldr	r2, [pc, #96]	; (80008dc <main+0x2f0>)
 800087a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800087c:	f008 ff0b 	bl	8009696 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000880:	e7fe      	b.n	8000880 <main+0x294>
 8000882:	bf00      	nop
 8000884:	200045a8 	.word	0x200045a8
 8000888:	08017ee8 	.word	0x08017ee8
 800088c:	08017ef8 	.word	0x08017ef8
 8000890:	08017f04 	.word	0x08017f04
 8000894:	08017f14 	.word	0x08017f14
 8000898:	08017f20 	.word	0x08017f20
 800089c:	08017f30 	.word	0x08017f30
 80008a0:	08017f3c 	.word	0x08017f3c
 80008a4:	08017f4c 	.word	0x08017f4c
 80008a8:	08017f58 	.word	0x08017f58
 80008ac:	08017f68 	.word	0x08017f68
 80008b0:	08017f74 	.word	0x08017f74
 80008b4:	08017f84 	.word	0x08017f84
 80008b8:	08017f90 	.word	0x08017f90
 80008bc:	08017fa0 	.word	0x08017fa0
 80008c0:	200047b4 	.word	0x200047b4
 80008c4:	200047fc 	.word	0x200047fc
 80008c8:	200045c4 	.word	0x200045c4
 80008cc:	20000464 	.word	0x20000464
 80008d0:	08017fac 	.word	0x08017fac
 80008d4:	200046e8 	.word	0x200046e8
 80008d8:	08017fc8 	.word	0x08017fc8
 80008dc:	2000478c 	.word	0x2000478c

080008e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b098      	sub	sp, #96	; 0x60
 80008e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008ea:	2230      	movs	r2, #48	; 0x30
 80008ec:	2100      	movs	r1, #0
 80008ee:	4618      	mov	r0, r3
 80008f0:	f016 fac0 	bl	8016e74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f4:	f107 031c 	add.w	r3, r7, #28
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000904:	f107 030c 	add.w	r3, r7, #12
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	60bb      	str	r3, [r7, #8]
 8000916:	4b31      	ldr	r3, [pc, #196]	; (80009dc <SystemClock_Config+0xfc>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091a:	4a30      	ldr	r2, [pc, #192]	; (80009dc <SystemClock_Config+0xfc>)
 800091c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000920:	6413      	str	r3, [r2, #64]	; 0x40
 8000922:	4b2e      	ldr	r3, [pc, #184]	; (80009dc <SystemClock_Config+0xfc>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800092a:	60bb      	str	r3, [r7, #8]
 800092c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800092e:	2300      	movs	r3, #0
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	4b2b      	ldr	r3, [pc, #172]	; (80009e0 <SystemClock_Config+0x100>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4a2a      	ldr	r2, [pc, #168]	; (80009e0 <SystemClock_Config+0x100>)
 8000938:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800093c:	6013      	str	r3, [r2, #0]
 800093e:	4b28      	ldr	r3, [pc, #160]	; (80009e0 <SystemClock_Config+0x100>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800094a:	2309      	movs	r3, #9
 800094c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800094e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000952:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000954:	2301      	movs	r3, #1
 8000956:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000958:	2302      	movs	r3, #2
 800095a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800095c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000960:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000962:	2319      	movs	r3, #25
 8000964:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000966:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800096a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800096c:	2302      	movs	r3, #2
 800096e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000970:	2307      	movs	r3, #7
 8000972:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000974:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000978:	4618      	mov	r0, r3
 800097a:	f003 fa2b 	bl	8003dd4 <HAL_RCC_OscConfig>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000984:	f000 fab0 	bl	8000ee8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000988:	230f      	movs	r3, #15
 800098a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800098c:	2302      	movs	r3, #2
 800098e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000990:	2300      	movs	r3, #0
 8000992:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000994:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000998:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800099a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800099e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009a0:	f107 031c 	add.w	r3, r7, #28
 80009a4:	2105      	movs	r1, #5
 80009a6:	4618      	mov	r0, r3
 80009a8:	f003 fc8c 	bl	80042c4 <HAL_RCC_ClockConfig>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80009b2:	f000 fa99 	bl	8000ee8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80009b6:	2302      	movs	r3, #2
 80009b8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80009ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009be:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009c0:	f107 030c 	add.w	r3, r7, #12
 80009c4:	4618      	mov	r0, r3
 80009c6:	f003 fe7f 	bl	80046c8 <HAL_RCCEx_PeriphCLKConfig>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80009d0:	f000 fa8a 	bl	8000ee8 <Error_Handler>
  }
}
 80009d4:	bf00      	nop
 80009d6:	3760      	adds	r7, #96	; 0x60
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40023800 	.word	0x40023800
 80009e0:	40007000 	.word	0x40007000

080009e4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b086      	sub	sp, #24
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80009f8:	2300      	movs	r3, #0
 80009fa:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80009fc:	4b24      	ldr	r3, [pc, #144]	; (8000a90 <MX_RTC_Init+0xac>)
 80009fe:	4a25      	ldr	r2, [pc, #148]	; (8000a94 <MX_RTC_Init+0xb0>)
 8000a00:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a02:	4b23      	ldr	r3, [pc, #140]	; (8000a90 <MX_RTC_Init+0xac>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a08:	4b21      	ldr	r3, [pc, #132]	; (8000a90 <MX_RTC_Init+0xac>)
 8000a0a:	227f      	movs	r2, #127	; 0x7f
 8000a0c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a0e:	4b20      	ldr	r3, [pc, #128]	; (8000a90 <MX_RTC_Init+0xac>)
 8000a10:	22ff      	movs	r2, #255	; 0xff
 8000a12:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a14:	4b1e      	ldr	r3, [pc, #120]	; (8000a90 <MX_RTC_Init+0xac>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a1a:	4b1d      	ldr	r3, [pc, #116]	; (8000a90 <MX_RTC_Init+0xac>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a20:	4b1b      	ldr	r3, [pc, #108]	; (8000a90 <MX_RTC_Init+0xac>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a26:	481a      	ldr	r0, [pc, #104]	; (8000a90 <MX_RTC_Init+0xac>)
 8000a28:	f003 ff30 	bl	800488c <HAL_RTC_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000a32:	f000 fa59 	bl	8000ee8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 23;
 8000a36:	2317      	movs	r3, #23
 8000a38:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 59;
 8000a3a:	233b      	movs	r3, #59	; 0x3b
 8000a3c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000a42:	2300      	movs	r3, #0
 8000a44:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000a46:	2300      	movs	r3, #0
 8000a48:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000a4a:	1d3b      	adds	r3, r7, #4
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	4619      	mov	r1, r3
 8000a50:	480f      	ldr	r0, [pc, #60]	; (8000a90 <MX_RTC_Init+0xac>)
 8000a52:	f003 ffac 	bl	80049ae <HAL_RTC_SetTime>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000a5c:	f000 fa44 	bl	8000ee8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 8000a60:	2307      	movs	r3, #7
 8000a62:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_DECEMBER;
 8000a64:	2312      	movs	r3, #18
 8000a66:	707b      	strb	r3, [r7, #1]
  sDate.Date = 31;
 8000a68:	231f      	movs	r3, #31
 8000a6a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000a70:	463b      	mov	r3, r7
 8000a72:	2200      	movs	r2, #0
 8000a74:	4619      	mov	r1, r3
 8000a76:	4806      	ldr	r0, [pc, #24]	; (8000a90 <MX_RTC_Init+0xac>)
 8000a78:	f004 f856 	bl	8004b28 <HAL_RTC_SetDate>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000a82:	f000 fa31 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a86:	bf00      	nop
 8000a88:	3718      	adds	r7, #24
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	20004790 	.word	0x20004790
 8000a94:	40002800 	.word	0x40002800

08000a98 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000a9c:	4b17      	ldr	r3, [pc, #92]	; (8000afc <MX_SPI3_Init+0x64>)
 8000a9e:	4a18      	ldr	r2, [pc, #96]	; (8000b00 <MX_SPI3_Init+0x68>)
 8000aa0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000aa2:	4b16      	ldr	r3, [pc, #88]	; (8000afc <MX_SPI3_Init+0x64>)
 8000aa4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000aa8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000aaa:	4b14      	ldr	r3, [pc, #80]	; (8000afc <MX_SPI3_Init+0x64>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ab0:	4b12      	ldr	r3, [pc, #72]	; (8000afc <MX_SPI3_Init+0x64>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ab6:	4b11      	ldr	r3, [pc, #68]	; (8000afc <MX_SPI3_Init+0x64>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000abc:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <MX_SPI3_Init+0x64>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <MX_SPI3_Init+0x64>)
 8000ac4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ac8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000aca:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <MX_SPI3_Init+0x64>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ad0:	4b0a      	ldr	r3, [pc, #40]	; (8000afc <MX_SPI3_Init+0x64>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ad6:	4b09      	ldr	r3, [pc, #36]	; (8000afc <MX_SPI3_Init+0x64>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000adc:	4b07      	ldr	r3, [pc, #28]	; (8000afc <MX_SPI3_Init+0x64>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000ae2:	4b06      	ldr	r3, [pc, #24]	; (8000afc <MX_SPI3_Init+0x64>)
 8000ae4:	220a      	movs	r2, #10
 8000ae6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000ae8:	4804      	ldr	r0, [pc, #16]	; (8000afc <MX_SPI3_Init+0x64>)
 8000aea:	f004 f936 	bl	8004d5a <HAL_SPI_Init>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000af4:	f000 f9f8 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000af8:	bf00      	nop
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	200046ec 	.word	0x200046ec
 8000b00:	40003c00 	.word	0x40003c00

08000b04 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b0a:	f107 0308 	add.w	r3, r7, #8
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b18:	463b      	mov	r3, r7
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b20:	4b1d      	ldr	r3, [pc, #116]	; (8000b98 <MX_TIM2_Init+0x94>)
 8000b22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b26:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000b28:	4b1b      	ldr	r3, [pc, #108]	; (8000b98 <MX_TIM2_Init+0x94>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b2e:	4b1a      	ldr	r3, [pc, #104]	; (8000b98 <MX_TIM2_Init+0x94>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000b34:	4b18      	ldr	r3, [pc, #96]	; (8000b98 <MX_TIM2_Init+0x94>)
 8000b36:	f04f 32ff 	mov.w	r2, #4294967295
 8000b3a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b3c:	4b16      	ldr	r3, [pc, #88]	; (8000b98 <MX_TIM2_Init+0x94>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b42:	4b15      	ldr	r3, [pc, #84]	; (8000b98 <MX_TIM2_Init+0x94>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b48:	4813      	ldr	r0, [pc, #76]	; (8000b98 <MX_TIM2_Init+0x94>)
 8000b4a:	f004 f98f 	bl	8004e6c <HAL_TIM_Base_Init>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000b54:	f000 f9c8 	bl	8000ee8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b5e:	f107 0308 	add.w	r3, r7, #8
 8000b62:	4619      	mov	r1, r3
 8000b64:	480c      	ldr	r0, [pc, #48]	; (8000b98 <MX_TIM2_Init+0x94>)
 8000b66:	f004 fb49 	bl	80051fc <HAL_TIM_ConfigClockSource>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000b70:	f000 f9ba 	bl	8000ee8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b74:	2300      	movs	r3, #0
 8000b76:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b7c:	463b      	mov	r3, r7
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4805      	ldr	r0, [pc, #20]	; (8000b98 <MX_TIM2_Init+0x94>)
 8000b82:	f004 fd65 	bl	8005650 <HAL_TIMEx_MasterConfigSynchronization>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000b8c:	f000 f9ac 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b90:	bf00      	nop
 8000b92:	3718      	adds	r7, #24
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	200047b4 	.word	0x200047b4

08000b9c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ba0:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <MX_USART1_UART_Init+0x4c>)
 8000ba2:	4a12      	ldr	r2, [pc, #72]	; (8000bec <MX_USART1_UART_Init+0x50>)
 8000ba4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ba6:	4b10      	ldr	r3, [pc, #64]	; (8000be8 <MX_USART1_UART_Init+0x4c>)
 8000ba8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bae:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <MX_USART1_UART_Init+0x4c>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <MX_USART1_UART_Init+0x4c>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bba:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <MX_USART1_UART_Init+0x4c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bc0:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <MX_USART1_UART_Init+0x4c>)
 8000bc2:	220c      	movs	r2, #12
 8000bc4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bc6:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <MX_USART1_UART_Init+0x4c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <MX_USART1_UART_Init+0x4c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bd2:	4805      	ldr	r0, [pc, #20]	; (8000be8 <MX_USART1_UART_Init+0x4c>)
 8000bd4:	f004 fdcc 	bl	8005770 <HAL_UART_Init>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000bde:	f000 f983 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20004744 	.word	0x20004744
 8000bec:	40011000 	.word	0x40011000

08000bf0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bf4:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000bf6:	4a12      	ldr	r2, [pc, #72]	; (8000c40 <MX_USART2_UART_Init+0x50>)
 8000bf8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bfa:	4b10      	ldr	r3, [pc, #64]	; (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000bfc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c02:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c08:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c0e:	4b0b      	ldr	r3, [pc, #44]	; (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c14:	4b09      	ldr	r3, [pc, #36]	; (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000c16:	220c      	movs	r2, #12
 8000c18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c1a:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c20:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c26:	4805      	ldr	r0, [pc, #20]	; (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000c28:	f004 fda2 	bl	8005770 <HAL_UART_Init>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c32:	f000 f959 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	200047fc 	.word	0x200047fc
 8000c40:	40004400 	.word	0x40004400

08000c44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08c      	sub	sp, #48	; 0x30
 8000c48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4a:	f107 031c 	add.w	r3, r7, #28
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]
 8000c54:	609a      	str	r2, [r3, #8]
 8000c56:	60da      	str	r2, [r3, #12]
 8000c58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61bb      	str	r3, [r7, #24]
 8000c5e:	4b58      	ldr	r3, [pc, #352]	; (8000dc0 <MX_GPIO_Init+0x17c>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a57      	ldr	r2, [pc, #348]	; (8000dc0 <MX_GPIO_Init+0x17c>)
 8000c64:	f043 0310 	orr.w	r3, r3, #16
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4b55      	ldr	r3, [pc, #340]	; (8000dc0 <MX_GPIO_Init+0x17c>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f003 0310 	and.w	r3, r3, #16
 8000c72:	61bb      	str	r3, [r7, #24]
 8000c74:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	617b      	str	r3, [r7, #20]
 8000c7a:	4b51      	ldr	r3, [pc, #324]	; (8000dc0 <MX_GPIO_Init+0x17c>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	4a50      	ldr	r2, [pc, #320]	; (8000dc0 <MX_GPIO_Init+0x17c>)
 8000c80:	f043 0304 	orr.w	r3, r3, #4
 8000c84:	6313      	str	r3, [r2, #48]	; 0x30
 8000c86:	4b4e      	ldr	r3, [pc, #312]	; (8000dc0 <MX_GPIO_Init+0x17c>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	f003 0304 	and.w	r3, r3, #4
 8000c8e:	617b      	str	r3, [r7, #20]
 8000c90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	613b      	str	r3, [r7, #16]
 8000c96:	4b4a      	ldr	r3, [pc, #296]	; (8000dc0 <MX_GPIO_Init+0x17c>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4a49      	ldr	r2, [pc, #292]	; (8000dc0 <MX_GPIO_Init+0x17c>)
 8000c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca2:	4b47      	ldr	r3, [pc, #284]	; (8000dc0 <MX_GPIO_Init+0x17c>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000caa:	613b      	str	r3, [r7, #16]
 8000cac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	4b43      	ldr	r3, [pc, #268]	; (8000dc0 <MX_GPIO_Init+0x17c>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	4a42      	ldr	r2, [pc, #264]	; (8000dc0 <MX_GPIO_Init+0x17c>)
 8000cb8:	f043 0301 	orr.w	r3, r3, #1
 8000cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbe:	4b40      	ldr	r3, [pc, #256]	; (8000dc0 <MX_GPIO_Init+0x17c>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60bb      	str	r3, [r7, #8]
 8000cce:	4b3c      	ldr	r3, [pc, #240]	; (8000dc0 <MX_GPIO_Init+0x17c>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	4a3b      	ldr	r2, [pc, #236]	; (8000dc0 <MX_GPIO_Init+0x17c>)
 8000cd4:	f043 0302 	orr.w	r3, r3, #2
 8000cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cda:	4b39      	ldr	r3, [pc, #228]	; (8000dc0 <MX_GPIO_Init+0x17c>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	f003 0302 	and.w	r3, r3, #2
 8000ce2:	60bb      	str	r3, [r7, #8]
 8000ce4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	607b      	str	r3, [r7, #4]
 8000cea:	4b35      	ldr	r3, [pc, #212]	; (8000dc0 <MX_GPIO_Init+0x17c>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	4a34      	ldr	r2, [pc, #208]	; (8000dc0 <MX_GPIO_Init+0x17c>)
 8000cf0:	f043 0308 	orr.w	r3, r3, #8
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf6:	4b32      	ldr	r3, [pc, #200]	; (8000dc0 <MX_GPIO_Init+0x17c>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f003 0308 	and.w	r3, r3, #8
 8000cfe:	607b      	str	r3, [r7, #4]
 8000d00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000d02:	2200      	movs	r2, #0
 8000d04:	21c0      	movs	r1, #192	; 0xc0
 8000d06:	482f      	ldr	r0, [pc, #188]	; (8000dc4 <MX_GPIO_Init+0x180>)
 8000d08:	f001 feae 	bl	8002a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000d0c:	2318      	movs	r3, #24
 8000d0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d10:	2300      	movs	r3, #0
 8000d12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d18:	f107 031c 	add.w	r3, r7, #28
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	482a      	ldr	r0, [pc, #168]	; (8000dc8 <MX_GPIO_Init+0x184>)
 8000d20:	f001 fd06 	bl	8002730 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000d24:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d32:	f107 031c 	add.w	r3, r7, #28
 8000d36:	4619      	mov	r1, r3
 8000d38:	4824      	ldr	r0, [pc, #144]	; (8000dcc <MX_GPIO_Init+0x188>)
 8000d3a:	f001 fcf9 	bl	8002730 <HAL_GPIO_Init>

  /*Configure GPIO pin : PPS_Pin */
  GPIO_InitStruct.Pin = PPS_Pin;
 8000d3e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d44:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PPS_GPIO_Port, &GPIO_InitStruct);
 8000d4e:	f107 031c 	add.w	r3, r7, #28
 8000d52:	4619      	mov	r1, r3
 8000d54:	481e      	ldr	r0, [pc, #120]	; (8000dd0 <MX_GPIO_Init+0x18c>)
 8000d56:	f001 fceb 	bl	8002730 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d5a:	23c0      	movs	r3, #192	; 0xc0
 8000d5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d66:	2300      	movs	r3, #0
 8000d68:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d6a:	f107 031c 	add.w	r3, r7, #28
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4814      	ldr	r0, [pc, #80]	; (8000dc4 <MX_GPIO_Init+0x180>)
 8000d72:	f001 fcdd 	bl	8002730 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d84:	f107 031c 	add.w	r3, r7, #28
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4812      	ldr	r0, [pc, #72]	; (8000dd4 <MX_GPIO_Init+0x190>)
 8000d8c:	f001 fcd0 	bl	8002730 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d90:	2310      	movs	r3, #16
 8000d92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d94:	2300      	movs	r3, #0
 8000d96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d9c:	f107 031c 	add.w	r3, r7, #28
 8000da0:	4619      	mov	r1, r3
 8000da2:	480b      	ldr	r0, [pc, #44]	; (8000dd0 <MX_GPIO_Init+0x18c>)
 8000da4:	f001 fcc4 	bl	8002730 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000da8:	2200      	movs	r2, #0
 8000daa:	2105      	movs	r1, #5
 8000dac:	2028      	movs	r0, #40	; 0x28
 8000dae:	f000 fc83 	bl	80016b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000db2:	2028      	movs	r0, #40	; 0x28
 8000db4:	f000 fc9c 	bl	80016f0 <HAL_NVIC_EnableIRQ>

}
 8000db8:	bf00      	nop
 8000dba:	3730      	adds	r7, #48	; 0x30
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40023800 	.word	0x40023800
 8000dc4:	40020800 	.word	0x40020800
 8000dc8:	40021000 	.word	0x40021000
 8000dcc:	40020400 	.word	0x40020400
 8000dd0:	40020c00 	.word	0x40020c00
 8000dd4:	40020000 	.word	0x40020000

08000dd8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	80fb      	strh	r3, [r7, #6]
	int PPS_Counter_period=0;
 8000de2:	2300      	movs	r3, #0
 8000de4:	60fb      	str	r3, [r7, #12]
	//int PPS_count=0;//вынес для проверки
	//int PPS_mass[10]={0};//вынес для проверки
	if(GPIO_Pin == PPS_Pin) {
 8000de6:	88fb      	ldrh	r3, [r7, #6]
 8000de8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000dec:	d13d      	bne.n	8000e6a <HAL_GPIO_EXTI_Callback+0x92>
		if(PPS_count>2&&PPS_count<12){
 8000dee:	4b28      	ldr	r3, [pc, #160]	; (8000e90 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	2b02      	cmp	r3, #2
 8000df4:	dd0d      	ble.n	8000e12 <HAL_GPIO_EXTI_Callback+0x3a>
 8000df6:	4b26      	ldr	r3, [pc, #152]	; (8000e90 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	2b0b      	cmp	r3, #11
 8000dfc:	dc09      	bgt.n	8000e12 <HAL_GPIO_EXTI_Callback+0x3a>
		PPS_mass[PPS_count-2] = TIM2->CNT;
 8000dfe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e04:	4b22      	ldr	r3, [pc, #136]	; (8000e90 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	3b02      	subs	r3, #2
 8000e0a:	4611      	mov	r1, r2
 8000e0c:	4a21      	ldr	r2, [pc, #132]	; (8000e94 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000e0e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
		if(PPS_count==12){
 8000e12:	4b1f      	ldr	r3, [pc, #124]	; (8000e90 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2b0c      	cmp	r3, #12
 8000e18:	d127      	bne.n	8000e6a <HAL_GPIO_EXTI_Callback+0x92>
			//HAL_GPIO_TogglePin(Timled_GPIO_Port, Timled_Pin);
			PPS_Counter_period=(PPS_mass[0]+PPS_mass[1]+PPS_mass[2]+PPS_mass[3]+PPS_mass[4]+PPS_mass[5]+PPS_mass[6]+PPS_mass[7]+PPS_mass[8]+PPS_mass[9])/9;
 8000e1a:	4b1e      	ldr	r3, [pc, #120]	; (8000e94 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	4b1d      	ldr	r3, [pc, #116]	; (8000e94 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	441a      	add	r2, r3
 8000e24:	4b1b      	ldr	r3, [pc, #108]	; (8000e94 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	441a      	add	r2, r3
 8000e2a:	4b1a      	ldr	r3, [pc, #104]	; (8000e94 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000e2c:	68db      	ldr	r3, [r3, #12]
 8000e2e:	441a      	add	r2, r3
 8000e30:	4b18      	ldr	r3, [pc, #96]	; (8000e94 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000e32:	691b      	ldr	r3, [r3, #16]
 8000e34:	441a      	add	r2, r3
 8000e36:	4b17      	ldr	r3, [pc, #92]	; (8000e94 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000e38:	695b      	ldr	r3, [r3, #20]
 8000e3a:	441a      	add	r2, r3
 8000e3c:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	441a      	add	r2, r3
 8000e42:	4b14      	ldr	r3, [pc, #80]	; (8000e94 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000e44:	69db      	ldr	r3, [r3, #28]
 8000e46:	441a      	add	r2, r3
 8000e48:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000e4a:	6a1b      	ldr	r3, [r3, #32]
 8000e4c:	441a      	add	r2, r3
 8000e4e:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e52:	4413      	add	r3, r2
 8000e54:	4a10      	ldr	r2, [pc, #64]	; (8000e98 <HAL_GPIO_EXTI_Callback+0xc0>)
 8000e56:	fb82 1203 	smull	r1, r2, r2, r3
 8000e5a:	1052      	asrs	r2, r2, #1
 8000e5c:	17db      	asrs	r3, r3, #31
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	60fb      	str	r3, [r7, #12]
			TIM2->ARR=PPS_Counter_period;
 8000e62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
	}
	if(PPS_count<13){
 8000e6a:	4b09      	ldr	r3, [pc, #36]	; (8000e90 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	2b0c      	cmp	r3, #12
 8000e70:	dc08      	bgt.n	8000e84 <HAL_GPIO_EXTI_Callback+0xac>
		PPS_count=PPS_count+1;
 8000e72:	4b07      	ldr	r3, [pc, #28]	; (8000e90 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	3301      	adds	r3, #1
 8000e78:	4a05      	ldr	r2, [pc, #20]	; (8000e90 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000e7a:	6013      	str	r3, [r2, #0]
		TIM2->CNT = 0;//обнуление счетчика
 8000e7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e80:	2200      	movs	r2, #0
 8000e82:	625a      	str	r2, [r3, #36]	; 0x24
		}


		}
 8000e84:	bf00      	nop
 8000e86:	3714      	adds	r7, #20
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	20000464 	.word	0x20000464
 8000e94:	20000468 	.word	0x20000468
 8000e98:	38e38e39 	.word	0x38e38e39

08000e9c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000ea4:	f006 faf4 	bl	8007490 <MX_LWIP_Init>

  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000ea8:	f015 faa2 	bl	80163f0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000eac:	2001      	movs	r0, #1
 8000eae:	f008 fc55 	bl	800975c <osDelay>
 8000eb2:	e7fb      	b.n	8000eac <StartDefaultTask+0x10>

08000eb4 <tcpecho_thread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_tcpecho_thread */
void tcpecho_thread(void const * argument)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN tcpecho_thread */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ebc:	2001      	movs	r0, #1
 8000ebe:	f008 fc4d 	bl	800975c <osDelay>
 8000ec2:	e7fb      	b.n	8000ebc <tcpecho_thread+0x8>

08000ec4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a04      	ldr	r2, [pc, #16]	; (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d101      	bne.n	8000eda <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ed6:	f000 faf3 	bl	80014c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40010000 	.word	0x40010000

08000ee8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eec:	b672      	cpsid	i
}
 8000eee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ef0:	e7fe      	b.n	8000ef0 <Error_Handler+0x8>
	...

08000ef4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	607b      	str	r3, [r7, #4]
 8000efe:	4b12      	ldr	r3, [pc, #72]	; (8000f48 <HAL_MspInit+0x54>)
 8000f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f02:	4a11      	ldr	r2, [pc, #68]	; (8000f48 <HAL_MspInit+0x54>)
 8000f04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f08:	6453      	str	r3, [r2, #68]	; 0x44
 8000f0a:	4b0f      	ldr	r3, [pc, #60]	; (8000f48 <HAL_MspInit+0x54>)
 8000f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f12:	607b      	str	r3, [r7, #4]
 8000f14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	603b      	str	r3, [r7, #0]
 8000f1a:	4b0b      	ldr	r3, [pc, #44]	; (8000f48 <HAL_MspInit+0x54>)
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1e:	4a0a      	ldr	r2, [pc, #40]	; (8000f48 <HAL_MspInit+0x54>)
 8000f20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f24:	6413      	str	r3, [r2, #64]	; 0x40
 8000f26:	4b08      	ldr	r3, [pc, #32]	; (8000f48 <HAL_MspInit+0x54>)
 8000f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f2e:	603b      	str	r3, [r7, #0]
 8000f30:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f32:	2200      	movs	r2, #0
 8000f34:	210f      	movs	r1, #15
 8000f36:	f06f 0001 	mvn.w	r0, #1
 8000f3a:	f000 fbbd 	bl	80016b8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40023800 	.word	0x40023800

08000f4c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a05      	ldr	r2, [pc, #20]	; (8000f70 <HAL_RTC_MspInit+0x24>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d102      	bne.n	8000f64 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f5e:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <HAL_RTC_MspInit+0x28>)
 8000f60:	2201      	movs	r2, #1
 8000f62:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	40002800 	.word	0x40002800
 8000f74:	42470e3c 	.word	0x42470e3c

08000f78 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08a      	sub	sp, #40	; 0x28
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a19      	ldr	r2, [pc, #100]	; (8000ffc <HAL_SPI_MspInit+0x84>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d12c      	bne.n	8000ff4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	613b      	str	r3, [r7, #16]
 8000f9e:	4b18      	ldr	r3, [pc, #96]	; (8001000 <HAL_SPI_MspInit+0x88>)
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa2:	4a17      	ldr	r2, [pc, #92]	; (8001000 <HAL_SPI_MspInit+0x88>)
 8000fa4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8000faa:	4b15      	ldr	r3, [pc, #84]	; (8001000 <HAL_SPI_MspInit+0x88>)
 8000fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fb2:	613b      	str	r3, [r7, #16]
 8000fb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	4b11      	ldr	r3, [pc, #68]	; (8001000 <HAL_SPI_MspInit+0x88>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	4a10      	ldr	r2, [pc, #64]	; (8001000 <HAL_SPI_MspInit+0x88>)
 8000fc0:	f043 0304 	orr.w	r3, r3, #4
 8000fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc6:	4b0e      	ldr	r3, [pc, #56]	; (8001000 <HAL_SPI_MspInit+0x88>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	f003 0304 	and.w	r3, r3, #4
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000fd2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000fd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000fe4:	2306      	movs	r3, #6
 8000fe6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	4619      	mov	r1, r3
 8000fee:	4805      	ldr	r0, [pc, #20]	; (8001004 <HAL_SPI_MspInit+0x8c>)
 8000ff0:	f001 fb9e 	bl	8002730 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000ff4:	bf00      	nop
 8000ff6:	3728      	adds	r7, #40	; 0x28
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40003c00 	.word	0x40003c00
 8001000:	40023800 	.word	0x40023800
 8001004:	40020800 	.word	0x40020800

08001008 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001018:	d10d      	bne.n	8001036 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	4b09      	ldr	r3, [pc, #36]	; (8001044 <HAL_TIM_Base_MspInit+0x3c>)
 8001020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001022:	4a08      	ldr	r2, [pc, #32]	; (8001044 <HAL_TIM_Base_MspInit+0x3c>)
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	6413      	str	r3, [r2, #64]	; 0x40
 800102a:	4b06      	ldr	r3, [pc, #24]	; (8001044 <HAL_TIM_Base_MspInit+0x3c>)
 800102c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001036:	bf00      	nop
 8001038:	3714      	adds	r7, #20
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	40023800 	.word	0x40023800

08001048 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08c      	sub	sp, #48	; 0x30
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001050:	f107 031c 	add.w	r3, r7, #28
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a32      	ldr	r2, [pc, #200]	; (8001130 <HAL_UART_MspInit+0xe8>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d12c      	bne.n	80010c4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	61bb      	str	r3, [r7, #24]
 800106e:	4b31      	ldr	r3, [pc, #196]	; (8001134 <HAL_UART_MspInit+0xec>)
 8001070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001072:	4a30      	ldr	r2, [pc, #192]	; (8001134 <HAL_UART_MspInit+0xec>)
 8001074:	f043 0310 	orr.w	r3, r3, #16
 8001078:	6453      	str	r3, [r2, #68]	; 0x44
 800107a:	4b2e      	ldr	r3, [pc, #184]	; (8001134 <HAL_UART_MspInit+0xec>)
 800107c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107e:	f003 0310 	and.w	r3, r3, #16
 8001082:	61bb      	str	r3, [r7, #24]
 8001084:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	617b      	str	r3, [r7, #20]
 800108a:	4b2a      	ldr	r3, [pc, #168]	; (8001134 <HAL_UART_MspInit+0xec>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	4a29      	ldr	r2, [pc, #164]	; (8001134 <HAL_UART_MspInit+0xec>)
 8001090:	f043 0302 	orr.w	r3, r3, #2
 8001094:	6313      	str	r3, [r2, #48]	; 0x30
 8001096:	4b27      	ldr	r3, [pc, #156]	; (8001134 <HAL_UART_MspInit+0xec>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	f003 0302 	and.w	r3, r3, #2
 800109e:	617b      	str	r3, [r7, #20]
 80010a0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010a2:	23c0      	movs	r3, #192	; 0xc0
 80010a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a6:	2302      	movs	r3, #2
 80010a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ae:	2303      	movs	r3, #3
 80010b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010b2:	2307      	movs	r3, #7
 80010b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b6:	f107 031c 	add.w	r3, r7, #28
 80010ba:	4619      	mov	r1, r3
 80010bc:	481e      	ldr	r0, [pc, #120]	; (8001138 <HAL_UART_MspInit+0xf0>)
 80010be:	f001 fb37 	bl	8002730 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010c2:	e030      	b.n	8001126 <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART2)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a1c      	ldr	r2, [pc, #112]	; (800113c <HAL_UART_MspInit+0xf4>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d12b      	bne.n	8001126 <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART2_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	613b      	str	r3, [r7, #16]
 80010d2:	4b18      	ldr	r3, [pc, #96]	; (8001134 <HAL_UART_MspInit+0xec>)
 80010d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d6:	4a17      	ldr	r2, [pc, #92]	; (8001134 <HAL_UART_MspInit+0xec>)
 80010d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010dc:	6413      	str	r3, [r2, #64]	; 0x40
 80010de:	4b15      	ldr	r3, [pc, #84]	; (8001134 <HAL_UART_MspInit+0xec>)
 80010e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e6:	613b      	str	r3, [r7, #16]
 80010e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	4b11      	ldr	r3, [pc, #68]	; (8001134 <HAL_UART_MspInit+0xec>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	4a10      	ldr	r2, [pc, #64]	; (8001134 <HAL_UART_MspInit+0xec>)
 80010f4:	f043 0308 	orr.w	r3, r3, #8
 80010f8:	6313      	str	r3, [r2, #48]	; 0x30
 80010fa:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <HAL_UART_MspInit+0xec>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	f003 0308 	and.w	r3, r3, #8
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001106:	2360      	movs	r3, #96	; 0x60
 8001108:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110a:	2302      	movs	r3, #2
 800110c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001112:	2303      	movs	r3, #3
 8001114:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001116:	2307      	movs	r3, #7
 8001118:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800111a:	f107 031c 	add.w	r3, r7, #28
 800111e:	4619      	mov	r1, r3
 8001120:	4807      	ldr	r0, [pc, #28]	; (8001140 <HAL_UART_MspInit+0xf8>)
 8001122:	f001 fb05 	bl	8002730 <HAL_GPIO_Init>
}
 8001126:	bf00      	nop
 8001128:	3730      	adds	r7, #48	; 0x30
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40011000 	.word	0x40011000
 8001134:	40023800 	.word	0x40023800
 8001138:	40020400 	.word	0x40020400
 800113c:	40004400 	.word	0x40004400
 8001140:	40020c00 	.word	0x40020c00

08001144 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08c      	sub	sp, #48	; 0x30
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800114c:	2300      	movs	r3, #0
 800114e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001150:	2300      	movs	r3, #0
 8001152:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001154:	2200      	movs	r2, #0
 8001156:	6879      	ldr	r1, [r7, #4]
 8001158:	2019      	movs	r0, #25
 800115a:	f000 faad 	bl	80016b8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800115e:	2019      	movs	r0, #25
 8001160:	f000 fac6 	bl	80016f0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001164:	2300      	movs	r3, #0
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	4b1f      	ldr	r3, [pc, #124]	; (80011e8 <HAL_InitTick+0xa4>)
 800116a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116c:	4a1e      	ldr	r2, [pc, #120]	; (80011e8 <HAL_InitTick+0xa4>)
 800116e:	f043 0301 	orr.w	r3, r3, #1
 8001172:	6453      	str	r3, [r2, #68]	; 0x44
 8001174:	4b1c      	ldr	r3, [pc, #112]	; (80011e8 <HAL_InitTick+0xa4>)
 8001176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001178:	f003 0301 	and.w	r3, r3, #1
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001180:	f107 0210 	add.w	r2, r7, #16
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	4611      	mov	r1, r2
 800118a:	4618      	mov	r0, r3
 800118c:	f003 fa6a 	bl	8004664 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001190:	f003 fa54 	bl	800463c <HAL_RCC_GetPCLK2Freq>
 8001194:	4603      	mov	r3, r0
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800119a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800119c:	4a13      	ldr	r2, [pc, #76]	; (80011ec <HAL_InitTick+0xa8>)
 800119e:	fba2 2303 	umull	r2, r3, r2, r3
 80011a2:	0c9b      	lsrs	r3, r3, #18
 80011a4:	3b01      	subs	r3, #1
 80011a6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80011a8:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <HAL_InitTick+0xac>)
 80011aa:	4a12      	ldr	r2, [pc, #72]	; (80011f4 <HAL_InitTick+0xb0>)
 80011ac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80011ae:	4b10      	ldr	r3, [pc, #64]	; (80011f0 <HAL_InitTick+0xac>)
 80011b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011b4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80011b6:	4a0e      	ldr	r2, [pc, #56]	; (80011f0 <HAL_InitTick+0xac>)
 80011b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011ba:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80011bc:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <HAL_InitTick+0xac>)
 80011be:	2200      	movs	r2, #0
 80011c0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c2:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <HAL_InitTick+0xac>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80011c8:	4809      	ldr	r0, [pc, #36]	; (80011f0 <HAL_InitTick+0xac>)
 80011ca:	f003 fe4f 	bl	8004e6c <HAL_TIM_Base_Init>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d104      	bne.n	80011de <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80011d4:	4806      	ldr	r0, [pc, #24]	; (80011f0 <HAL_InitTick+0xac>)
 80011d6:	f003 fe99 	bl	8004f0c <HAL_TIM_Base_Start_IT>
 80011da:	4603      	mov	r3, r0
 80011dc:	e000      	b.n	80011e0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3730      	adds	r7, #48	; 0x30
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40023800 	.word	0x40023800
 80011ec:	431bde83 	.word	0x431bde83
 80011f0:	20004868 	.word	0x20004868
 80011f4:	40010000 	.word	0x40010000

080011f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011fc:	e7fe      	b.n	80011fc <NMI_Handler+0x4>

080011fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011fe:	b480      	push	{r7}
 8001200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001202:	e7fe      	b.n	8001202 <HardFault_Handler+0x4>

08001204 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001208:	e7fe      	b.n	8001208 <MemManage_Handler+0x4>

0800120a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800120a:	b480      	push	{r7}
 800120c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800120e:	e7fe      	b.n	800120e <BusFault_Handler+0x4>

08001210 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001214:	e7fe      	b.n	8001214 <UsageFault_Handler+0x4>

08001216 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001228:	4802      	ldr	r0, [pc, #8]	; (8001234 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800122a:	f003 fedf 	bl	8004fec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	20004868 	.word	0x20004868

08001238 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800123c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001240:	f001 fc2c 	bl	8002a9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}

08001248 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800124c:	4802      	ldr	r0, [pc, #8]	; (8001258 <ETH_IRQHandler+0x10>)
 800124e:	f000 fe41 	bl	8001ed4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	200061cc 	.word	0x200061cc

0800125c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001260:	4802      	ldr	r0, [pc, #8]	; (800126c <OTG_FS_IRQHandler+0x10>)
 8001262:	f001 fd83 	bl	8002d6c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	2000c5f0 	.word	0x2000c5f0

08001270 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
	return 1;
 8001274:	2301      	movs	r3, #1
}
 8001276:	4618      	mov	r0, r3
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <_kill>:

int _kill(int pid, int sig)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800128a:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <_kill+0x20>)
 800128c:	2216      	movs	r2, #22
 800128e:	601a      	str	r2, [r3, #0]
	return -1;
 8001290:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001294:	4618      	mov	r0, r3
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	2000b118 	.word	0x2000b118

080012a4 <_exit>:

void _exit (int status)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80012ac:	f04f 31ff 	mov.w	r1, #4294967295
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f7ff ffe5 	bl	8001280 <_kill>
	while (1) {}		/* Make sure we hang here */
 80012b6:	e7fe      	b.n	80012b6 <_exit+0x12>

080012b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]
 80012c8:	e00a      	b.n	80012e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80012ca:	f3af 8000 	nop.w
 80012ce:	4601      	mov	r1, r0
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	1c5a      	adds	r2, r3, #1
 80012d4:	60ba      	str	r2, [r7, #8]
 80012d6:	b2ca      	uxtb	r2, r1
 80012d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	3301      	adds	r3, #1
 80012de:	617b      	str	r3, [r7, #20]
 80012e0:	697a      	ldr	r2, [r7, #20]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	dbf0      	blt.n	80012ca <_read+0x12>
	}

return len;
 80012e8:	687b      	ldr	r3, [r7, #4]
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3718      	adds	r7, #24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b086      	sub	sp, #24
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	60f8      	str	r0, [r7, #12]
 80012fa:	60b9      	str	r1, [r7, #8]
 80012fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012fe:	2300      	movs	r3, #0
 8001300:	617b      	str	r3, [r7, #20]
 8001302:	e009      	b.n	8001318 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	1c5a      	adds	r2, r3, #1
 8001308:	60ba      	str	r2, [r7, #8]
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	4618      	mov	r0, r3
 800130e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	3301      	adds	r3, #1
 8001316:	617b      	str	r3, [r7, #20]
 8001318:	697a      	ldr	r2, [r7, #20]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	429a      	cmp	r2, r3
 800131e:	dbf1      	blt.n	8001304 <_write+0x12>
	}
	return len;
 8001320:	687b      	ldr	r3, [r7, #4]
}
 8001322:	4618      	mov	r0, r3
 8001324:	3718      	adds	r7, #24
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <_close>:

int _close(int file)
{
 800132a:	b480      	push	{r7}
 800132c:	b083      	sub	sp, #12
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
	return -1;
 8001332:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001336:	4618      	mov	r0, r3
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr

08001342 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001342:	b480      	push	{r7}
 8001344:	b083      	sub	sp, #12
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
 800134a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001352:	605a      	str	r2, [r3, #4]
	return 0;
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr

08001362 <_isatty>:

int _isatty(int file)
{
 8001362:	b480      	push	{r7}
 8001364:	b083      	sub	sp, #12
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
	return 1;
 800136a:	2301      	movs	r3, #1
}
 800136c:	4618      	mov	r0, r3
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
	return 0;
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3714      	adds	r7, #20
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
	...

08001394 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001394:	b480      	push	{r7}
 8001396:	b087      	sub	sp, #28
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800139c:	4a14      	ldr	r2, [pc, #80]	; (80013f0 <_sbrk+0x5c>)
 800139e:	4b15      	ldr	r3, [pc, #84]	; (80013f4 <_sbrk+0x60>)
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013a8:	4b13      	ldr	r3, [pc, #76]	; (80013f8 <_sbrk+0x64>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d102      	bne.n	80013b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013b0:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <_sbrk+0x64>)
 80013b2:	4a12      	ldr	r2, [pc, #72]	; (80013fc <_sbrk+0x68>)
 80013b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013b6:	4b10      	ldr	r3, [pc, #64]	; (80013f8 <_sbrk+0x64>)
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4413      	add	r3, r2
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d205      	bcs.n	80013d0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80013c4:	4b0e      	ldr	r3, [pc, #56]	; (8001400 <_sbrk+0x6c>)
 80013c6:	220c      	movs	r2, #12
 80013c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013ca:	f04f 33ff 	mov.w	r3, #4294967295
 80013ce:	e009      	b.n	80013e4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80013d0:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <_sbrk+0x64>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013d6:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <_sbrk+0x64>)
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4413      	add	r3, r2
 80013de:	4a06      	ldr	r2, [pc, #24]	; (80013f8 <_sbrk+0x64>)
 80013e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013e2:	68fb      	ldr	r3, [r7, #12]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	371c      	adds	r7, #28
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	20020000 	.word	0x20020000
 80013f4:	00000400 	.word	0x00000400
 80013f8:	20000490 	.word	0x20000490
 80013fc:	2000ca08 	.word	0x2000ca08
 8001400:	2000b118 	.word	0x2000b118

08001404 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001408:	4b06      	ldr	r3, [pc, #24]	; (8001424 <SystemInit+0x20>)
 800140a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800140e:	4a05      	ldr	r2, [pc, #20]	; (8001424 <SystemInit+0x20>)
 8001410:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001414:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001428:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001460 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800142c:	480d      	ldr	r0, [pc, #52]	; (8001464 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800142e:	490e      	ldr	r1, [pc, #56]	; (8001468 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001430:	4a0e      	ldr	r2, [pc, #56]	; (800146c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001432:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001434:	e002      	b.n	800143c <LoopCopyDataInit>

08001436 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001436:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001438:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800143a:	3304      	adds	r3, #4

0800143c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800143c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800143e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001440:	d3f9      	bcc.n	8001436 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001442:	4a0b      	ldr	r2, [pc, #44]	; (8001470 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001444:	4c0b      	ldr	r4, [pc, #44]	; (8001474 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001446:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001448:	e001      	b.n	800144e <LoopFillZerobss>

0800144a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800144a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800144c:	3204      	adds	r2, #4

0800144e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800144e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001450:	d3fb      	bcc.n	800144a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001452:	f7ff ffd7 	bl	8001404 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001456:	f015 fccd 	bl	8016df4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800145a:	f7ff f8c7 	bl	80005ec <main>
  bx  lr    
 800145e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001460:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001464:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001468:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 800146c:	0801ade4 	.word	0x0801ade4
  ldr r2, =_sbss
 8001470:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8001474:	2000ca04 	.word	0x2000ca04

08001478 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001478:	e7fe      	b.n	8001478 <ADC_IRQHandler>
	...

0800147c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001480:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <HAL_Init+0x40>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a0d      	ldr	r2, [pc, #52]	; (80014bc <HAL_Init+0x40>)
 8001486:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800148a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800148c:	4b0b      	ldr	r3, [pc, #44]	; (80014bc <HAL_Init+0x40>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a0a      	ldr	r2, [pc, #40]	; (80014bc <HAL_Init+0x40>)
 8001492:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001496:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001498:	4b08      	ldr	r3, [pc, #32]	; (80014bc <HAL_Init+0x40>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a07      	ldr	r2, [pc, #28]	; (80014bc <HAL_Init+0x40>)
 800149e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014a4:	2003      	movs	r0, #3
 80014a6:	f000 f8fc 	bl	80016a2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014aa:	2000      	movs	r0, #0
 80014ac:	f7ff fe4a 	bl	8001144 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014b0:	f7ff fd20 	bl	8000ef4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40023c00 	.word	0x40023c00

080014c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014c4:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <HAL_IncTick+0x20>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	461a      	mov	r2, r3
 80014ca:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <HAL_IncTick+0x24>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4413      	add	r3, r2
 80014d0:	4a04      	ldr	r2, [pc, #16]	; (80014e4 <HAL_IncTick+0x24>)
 80014d2:	6013      	str	r3, [r2, #0]
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	20000008 	.word	0x20000008
 80014e4:	200048b0 	.word	0x200048b0

080014e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  return uwTick;
 80014ec:	4b03      	ldr	r3, [pc, #12]	; (80014fc <HAL_GetTick+0x14>)
 80014ee:	681b      	ldr	r3, [r3, #0]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	200048b0 	.word	0x200048b0

08001500 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001508:	f7ff ffee 	bl	80014e8 <HAL_GetTick>
 800150c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001518:	d005      	beq.n	8001526 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800151a:	4b0a      	ldr	r3, [pc, #40]	; (8001544 <HAL_Delay+0x44>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	461a      	mov	r2, r3
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	4413      	add	r3, r2
 8001524:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001526:	bf00      	nop
 8001528:	f7ff ffde 	bl	80014e8 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	68fa      	ldr	r2, [r7, #12]
 8001534:	429a      	cmp	r2, r3
 8001536:	d8f7      	bhi.n	8001528 <HAL_Delay+0x28>
  {
  }
}
 8001538:	bf00      	nop
 800153a:	bf00      	nop
 800153c:	3710      	adds	r7, #16
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20000008 	.word	0x20000008

08001548 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001548:	b480      	push	{r7}
 800154a:	b085      	sub	sp, #20
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f003 0307 	and.w	r3, r3, #7
 8001556:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001558:	4b0c      	ldr	r3, [pc, #48]	; (800158c <__NVIC_SetPriorityGrouping+0x44>)
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800155e:	68ba      	ldr	r2, [r7, #8]
 8001560:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001564:	4013      	ands	r3, r2
 8001566:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001570:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001574:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001578:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800157a:	4a04      	ldr	r2, [pc, #16]	; (800158c <__NVIC_SetPriorityGrouping+0x44>)
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	60d3      	str	r3, [r2, #12]
}
 8001580:	bf00      	nop
 8001582:	3714      	adds	r7, #20
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	e000ed00 	.word	0xe000ed00

08001590 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001594:	4b04      	ldr	r3, [pc, #16]	; (80015a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	0a1b      	lsrs	r3, r3, #8
 800159a:	f003 0307 	and.w	r3, r3, #7
}
 800159e:	4618      	mov	r0, r3
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr
 80015a8:	e000ed00 	.word	0xe000ed00

080015ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	db0b      	blt.n	80015d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015be:	79fb      	ldrb	r3, [r7, #7]
 80015c0:	f003 021f 	and.w	r2, r3, #31
 80015c4:	4907      	ldr	r1, [pc, #28]	; (80015e4 <__NVIC_EnableIRQ+0x38>)
 80015c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ca:	095b      	lsrs	r3, r3, #5
 80015cc:	2001      	movs	r0, #1
 80015ce:	fa00 f202 	lsl.w	r2, r0, r2
 80015d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	e000e100 	.word	0xe000e100

080015e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	6039      	str	r1, [r7, #0]
 80015f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	db0a      	blt.n	8001612 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	b2da      	uxtb	r2, r3
 8001600:	490c      	ldr	r1, [pc, #48]	; (8001634 <__NVIC_SetPriority+0x4c>)
 8001602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001606:	0112      	lsls	r2, r2, #4
 8001608:	b2d2      	uxtb	r2, r2
 800160a:	440b      	add	r3, r1
 800160c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001610:	e00a      	b.n	8001628 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	b2da      	uxtb	r2, r3
 8001616:	4908      	ldr	r1, [pc, #32]	; (8001638 <__NVIC_SetPriority+0x50>)
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	f003 030f 	and.w	r3, r3, #15
 800161e:	3b04      	subs	r3, #4
 8001620:	0112      	lsls	r2, r2, #4
 8001622:	b2d2      	uxtb	r2, r2
 8001624:	440b      	add	r3, r1
 8001626:	761a      	strb	r2, [r3, #24]
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	e000e100 	.word	0xe000e100
 8001638:	e000ed00 	.word	0xe000ed00

0800163c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800163c:	b480      	push	{r7}
 800163e:	b089      	sub	sp, #36	; 0x24
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f003 0307 	and.w	r3, r3, #7
 800164e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	f1c3 0307 	rsb	r3, r3, #7
 8001656:	2b04      	cmp	r3, #4
 8001658:	bf28      	it	cs
 800165a:	2304      	movcs	r3, #4
 800165c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	3304      	adds	r3, #4
 8001662:	2b06      	cmp	r3, #6
 8001664:	d902      	bls.n	800166c <NVIC_EncodePriority+0x30>
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	3b03      	subs	r3, #3
 800166a:	e000      	b.n	800166e <NVIC_EncodePriority+0x32>
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001670:	f04f 32ff 	mov.w	r2, #4294967295
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	43da      	mvns	r2, r3
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	401a      	ands	r2, r3
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001684:	f04f 31ff 	mov.w	r1, #4294967295
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	fa01 f303 	lsl.w	r3, r1, r3
 800168e:	43d9      	mvns	r1, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001694:	4313      	orrs	r3, r2
         );
}
 8001696:	4618      	mov	r0, r3
 8001698:	3724      	adds	r7, #36	; 0x24
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr

080016a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b082      	sub	sp, #8
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff ff4c 	bl	8001548 <__NVIC_SetPriorityGrouping>
}
 80016b0:	bf00      	nop
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]
 80016c4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016c6:	2300      	movs	r3, #0
 80016c8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016ca:	f7ff ff61 	bl	8001590 <__NVIC_GetPriorityGrouping>
 80016ce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	68b9      	ldr	r1, [r7, #8]
 80016d4:	6978      	ldr	r0, [r7, #20]
 80016d6:	f7ff ffb1 	bl	800163c <NVIC_EncodePriority>
 80016da:	4602      	mov	r2, r0
 80016dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016e0:	4611      	mov	r1, r2
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff ff80 	bl	80015e8 <__NVIC_SetPriority>
}
 80016e8:	bf00      	nop
 80016ea:	3718      	adds	r7, #24
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff ff54 	bl	80015ac <__NVIC_EnableIRQ>
}
 8001704:	bf00      	nop
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b088      	sub	sp, #32
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001714:	2300      	movs	r3, #0
 8001716:	61fb      	str	r3, [r7, #28]
 8001718:	2300      	movs	r3, #0
 800171a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 800171c:	4baa      	ldr	r3, [pc, #680]	; (80019c8 <HAL_ETH_Init+0x2bc>)
 800171e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001720:	2300      	movs	r3, #0
 8001722:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001724:	2300      	movs	r3, #0
 8001726:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d101      	bne.n	8001732 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e183      	b.n	8001a3a <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001738:	b2db      	uxtb	r3, r3
 800173a:	2b00      	cmp	r3, #0
 800173c:	d106      	bne.n	800174c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f005 ffd0 	bl	80076ec <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174c:	2300      	movs	r3, #0
 800174e:	60bb      	str	r3, [r7, #8]
 8001750:	4b9e      	ldr	r3, [pc, #632]	; (80019cc <HAL_ETH_Init+0x2c0>)
 8001752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001754:	4a9d      	ldr	r2, [pc, #628]	; (80019cc <HAL_ETH_Init+0x2c0>)
 8001756:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800175a:	6453      	str	r3, [r2, #68]	; 0x44
 800175c:	4b9b      	ldr	r3, [pc, #620]	; (80019cc <HAL_ETH_Init+0x2c0>)
 800175e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001760:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001764:	60bb      	str	r3, [r7, #8]
 8001766:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001768:	4b99      	ldr	r3, [pc, #612]	; (80019d0 <HAL_ETH_Init+0x2c4>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	4a98      	ldr	r2, [pc, #608]	; (80019d0 <HAL_ETH_Init+0x2c4>)
 800176e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001772:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001774:	4b96      	ldr	r3, [pc, #600]	; (80019d0 <HAL_ETH_Init+0x2c4>)
 8001776:	685a      	ldr	r2, [r3, #4]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a1b      	ldr	r3, [r3, #32]
 800177c:	4994      	ldr	r1, [pc, #592]	; (80019d0 <HAL_ETH_Init+0x2c4>)
 800177e:	4313      	orrs	r3, r2
 8001780:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f042 0201 	orr.w	r2, r2, #1
 8001794:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001798:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800179a:	f7ff fea5 	bl	80014e8 <HAL_GetTick>
 800179e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80017a0:	e011      	b.n	80017c6 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80017a2:	f7ff fea1 	bl	80014e8 <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80017b0:	d909      	bls.n	80017c6 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2203      	movs	r2, #3
 80017b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e139      	b.n	8001a3a <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0301 	and.w	r3, r3, #1
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d1e4      	bne.n	80017a2 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	691b      	ldr	r3, [r3, #16]
 80017de:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	f023 031c 	bic.w	r3, r3, #28
 80017e6:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80017e8:	f002 ff08 	bl	80045fc <HAL_RCC_GetHCLKFreq>
 80017ec:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	4a78      	ldr	r2, [pc, #480]	; (80019d4 <HAL_ETH_Init+0x2c8>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d908      	bls.n	8001808 <HAL_ETH_Init+0xfc>
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	4a77      	ldr	r2, [pc, #476]	; (80019d8 <HAL_ETH_Init+0x2cc>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d804      	bhi.n	8001808 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	f043 0308 	orr.w	r3, r3, #8
 8001804:	61fb      	str	r3, [r7, #28]
 8001806:	e027      	b.n	8001858 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	4a73      	ldr	r2, [pc, #460]	; (80019d8 <HAL_ETH_Init+0x2cc>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d908      	bls.n	8001822 <HAL_ETH_Init+0x116>
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	4a6d      	ldr	r2, [pc, #436]	; (80019c8 <HAL_ETH_Init+0x2bc>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d204      	bcs.n	8001822 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	f043 030c 	orr.w	r3, r3, #12
 800181e:	61fb      	str	r3, [r7, #28]
 8001820:	e01a      	b.n	8001858 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	4a68      	ldr	r2, [pc, #416]	; (80019c8 <HAL_ETH_Init+0x2bc>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d303      	bcc.n	8001832 <HAL_ETH_Init+0x126>
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	4a6b      	ldr	r2, [pc, #428]	; (80019dc <HAL_ETH_Init+0x2d0>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d911      	bls.n	8001856 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	4a69      	ldr	r2, [pc, #420]	; (80019dc <HAL_ETH_Init+0x2d0>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d908      	bls.n	800184c <HAL_ETH_Init+0x140>
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	4a68      	ldr	r2, [pc, #416]	; (80019e0 <HAL_ETH_Init+0x2d4>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d804      	bhi.n	800184c <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	f043 0304 	orr.w	r3, r3, #4
 8001848:	61fb      	str	r3, [r7, #28]
 800184a:	e005      	b.n	8001858 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	f043 0310 	orr.w	r3, r3, #16
 8001852:	61fb      	str	r3, [r7, #28]
 8001854:	e000      	b.n	8001858 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001856:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	69fa      	ldr	r2, [r7, #28]
 800185e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001860:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001864:	2100      	movs	r1, #0
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f000 fc17 	bl	800209a <HAL_ETH_WritePHYRegister>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d00b      	beq.n	800188a <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001876:	6939      	ldr	r1, [r7, #16]
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f000 fca3 	bl	80021c4 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2201      	movs	r2, #1
 8001882:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e0d7      	b.n	8001a3a <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800188a:	20ff      	movs	r0, #255	; 0xff
 800188c:	f7ff fe38 	bl	8001500 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	2b00      	cmp	r3, #0
 8001896:	f000 80a5 	beq.w	80019e4 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800189a:	f7ff fe25 	bl	80014e8 <HAL_GetTick>
 800189e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80018a0:	f107 030c 	add.w	r3, r7, #12
 80018a4:	461a      	mov	r2, r3
 80018a6:	2101      	movs	r1, #1
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f000 fb8e 	bl	8001fca <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80018ae:	f7ff fe1b 	bl	80014e8 <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018bc:	4293      	cmp	r3, r2
 80018be:	d90f      	bls.n	80018e0 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80018c4:	6939      	ldr	r1, [r7, #16]
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f000 fc7c 	bl	80021c4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2201      	movs	r2, #1
 80018d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e0ac      	b.n	8001a3a <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f003 0304 	and.w	r3, r3, #4
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d0da      	beq.n	80018a0 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80018ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018ee:	2100      	movs	r1, #0
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f000 fbd2 	bl	800209a <HAL_ETH_WritePHYRegister>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d00b      	beq.n	8001914 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001900:	6939      	ldr	r1, [r7, #16]
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f000 fc5e 	bl	80021c4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2201      	movs	r2, #1
 800190c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001910:	2301      	movs	r3, #1
 8001912:	e092      	b.n	8001a3a <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001914:	f7ff fde8 	bl	80014e8 <HAL_GetTick>
 8001918:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800191a:	f107 030c 	add.w	r3, r7, #12
 800191e:	461a      	mov	r2, r3
 8001920:	2101      	movs	r1, #1
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f000 fb51 	bl	8001fca <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001928:	f7ff fdde 	bl	80014e8 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	f241 3288 	movw	r2, #5000	; 0x1388
 8001936:	4293      	cmp	r3, r2
 8001938:	d90f      	bls.n	800195a <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800193e:	6939      	ldr	r1, [r7, #16]
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f000 fc3f 	bl	80021c4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2201      	movs	r2, #1
 800194a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e06f      	b.n	8001a3a <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	f003 0320 	and.w	r3, r3, #32
 8001960:	2b00      	cmp	r3, #0
 8001962:	d0da      	beq.n	800191a <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001964:	f107 030c 	add.w	r3, r7, #12
 8001968:	461a      	mov	r2, r3
 800196a:	2110      	movs	r1, #16
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f000 fb2c 	bl	8001fca <HAL_ETH_ReadPHYRegister>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d00b      	beq.n	8001990 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800197c:	6939      	ldr	r1, [r7, #16]
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f000 fc20 	bl	80021c4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2201      	movs	r2, #1
 8001988:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800198c:	2301      	movs	r3, #1
 800198e:	e054      	b.n	8001a3a <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f003 0304 	and.w	r3, r3, #4
 8001996:	2b00      	cmp	r3, #0
 8001998:	d004      	beq.n	80019a4 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019a0:	60da      	str	r2, [r3, #12]
 80019a2:	e002      	b.n	80019aa <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f003 0302 	and.w	r3, r3, #2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d003      	beq.n	80019bc <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	609a      	str	r2, [r3, #8]
 80019ba:	e035      	b.n	8001a28 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019c2:	609a      	str	r2, [r3, #8]
 80019c4:	e030      	b.n	8001a28 <HAL_ETH_Init+0x31c>
 80019c6:	bf00      	nop
 80019c8:	03938700 	.word	0x03938700
 80019cc:	40023800 	.word	0x40023800
 80019d0:	40013800 	.word	0x40013800
 80019d4:	01312cff 	.word	0x01312cff
 80019d8:	02160ebf 	.word	0x02160ebf
 80019dc:	05f5e0ff 	.word	0x05f5e0ff
 80019e0:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	08db      	lsrs	r3, r3, #3
 80019ea:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	085b      	lsrs	r3, r3, #1
 80019f2:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80019f4:	4313      	orrs	r3, r2
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	461a      	mov	r2, r3
 80019fa:	2100      	movs	r1, #0
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f000 fb4c 	bl	800209a <HAL_ETH_WritePHYRegister>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d00b      	beq.n	8001a20 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001a0c:	6939      	ldr	r1, [r7, #16]
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f000 fbd8 	bl	80021c4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2201      	movs	r2, #1
 8001a18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e00c      	b.n	8001a3a <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001a20:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001a24:	f7ff fd6c 	bl	8001500 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001a28:	6939      	ldr	r1, [r7, #16]
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f000 fbca 	bl	80021c4 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2201      	movs	r2, #1
 8001a34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3720      	adds	r7, #32
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop

08001a44 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b087      	sub	sp, #28
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
 8001a50:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001a52:	2300      	movs	r3, #0
 8001a54:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d101      	bne.n	8001a64 <HAL_ETH_DMATxDescListInit+0x20>
 8001a60:	2302      	movs	r3, #2
 8001a62:	e052      	b.n	8001b0a <HAL_ETH_DMATxDescListInit+0xc6>
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2202      	movs	r2, #2
 8001a70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	68ba      	ldr	r2, [r7, #8]
 8001a78:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	617b      	str	r3, [r7, #20]
 8001a7e:	e030      	b.n	8001ae2 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	015b      	lsls	r3, r3, #5
 8001a84:	68ba      	ldr	r2, [r7, #8]
 8001a86:	4413      	add	r3, r2
 8001a88:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001a90:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001a98:	fb02 f303 	mul.w	r3, r2, r3
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	69db      	ldr	r3, [r3, #28]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d105      	bne.n	8001aba <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	3b01      	subs	r3, #1
 8001abe:	697a      	ldr	r2, [r7, #20]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d208      	bcs.n	8001ad6 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	015b      	lsls	r3, r3, #5
 8001aca:	68ba      	ldr	r2, [r7, #8]
 8001acc:	4413      	add	r3, r2
 8001ace:	461a      	mov	r2, r3
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	60da      	str	r2, [r3, #12]
 8001ad4:	e002      	b.n	8001adc <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001ad6:	68ba      	ldr	r2, [r7, #8]
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	617b      	str	r3, [r7, #20]
 8001ae2:	697a      	ldr	r2, [r7, #20]
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d3ca      	bcc.n	8001a80 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	68ba      	ldr	r2, [r7, #8]
 8001af0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001af4:	3310      	adds	r3, #16
 8001af6:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2200      	movs	r2, #0
 8001b04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	371c      	adds	r7, #28
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr

08001b16 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001b16:	b480      	push	{r7}
 8001b18:	b087      	sub	sp, #28
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	60f8      	str	r0, [r7, #12]
 8001b1e:	60b9      	str	r1, [r7, #8]
 8001b20:	607a      	str	r2, [r7, #4]
 8001b22:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001b24:	2300      	movs	r3, #0
 8001b26:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d101      	bne.n	8001b36 <HAL_ETH_DMARxDescListInit+0x20>
 8001b32:	2302      	movs	r3, #2
 8001b34:	e056      	b.n	8001be4 <HAL_ETH_DMARxDescListInit+0xce>
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2202      	movs	r2, #2
 8001b42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	68ba      	ldr	r2, [r7, #8]
 8001b4a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]
 8001b50:	e034      	b.n	8001bbc <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	015b      	lsls	r3, r3, #5
 8001b56:	68ba      	ldr	r2, [r7, #8]
 8001b58:	4413      	add	r3, r2
 8001b5a:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001b62:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001b6a:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001b72:	fb02 f303 	mul.w	r3, r2, r3
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	4413      	add	r3, r2
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d105      	bne.n	8001b94 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	3b01      	subs	r3, #1
 8001b98:	697a      	ldr	r2, [r7, #20]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d208      	bcs.n	8001bb0 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	015b      	lsls	r3, r3, #5
 8001ba4:	68ba      	ldr	r2, [r7, #8]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	461a      	mov	r2, r3
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	60da      	str	r2, [r3, #12]
 8001bae:	e002      	b.n	8001bb6 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001bb0:	68ba      	ldr	r2, [r7, #8]
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	617b      	str	r3, [r7, #20]
 8001bbc:	697a      	ldr	r2, [r7, #20]
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d3c6      	bcc.n	8001b52 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	68ba      	ldr	r2, [r7, #8]
 8001bca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bce:	330c      	adds	r3, #12
 8001bd0:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	371c      	adds	r7, #28
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b087      	sub	sp, #28
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	617b      	str	r3, [r7, #20]
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	2300      	movs	r3, #0
 8001c04:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d101      	bne.n	8001c14 <HAL_ETH_TransmitFrame+0x24>
 8001c10:	2302      	movs	r3, #2
 8001c12:	e0cd      	b.n	8001db0 <HAL_ETH_TransmitFrame+0x1c0>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2202      	movs	r2, #2
 8001c20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d109      	bne.n	8001c3e <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e0b8      	b.n	8001db0 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	da09      	bge.n	8001c5c <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2212      	movs	r2, #18
 8001c4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e0a9      	b.n	8001db0 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d915      	bls.n	8001c92 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	4a54      	ldr	r2, [pc, #336]	; (8001dbc <HAL_ETH_TransmitFrame+0x1cc>)
 8001c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c6e:	0a9b      	lsrs	r3, r3, #10
 8001c70:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001c72:	683a      	ldr	r2, [r7, #0]
 8001c74:	4b51      	ldr	r3, [pc, #324]	; (8001dbc <HAL_ETH_TransmitFrame+0x1cc>)
 8001c76:	fba3 1302 	umull	r1, r3, r3, r2
 8001c7a:	0a9b      	lsrs	r3, r3, #10
 8001c7c:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001c80:	fb01 f303 	mul.w	r3, r1, r3
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d005      	beq.n	8001c96 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	617b      	str	r3, [r7, #20]
 8001c90:	e001      	b.n	8001c96 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8001c92:	2301      	movs	r3, #1
 8001c94:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d11c      	bne.n	8001cd6 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca6:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001caa:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb0:	683a      	ldr	r2, [r7, #0]
 8001cb2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001cb6:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001cc6:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	461a      	mov	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	62da      	str	r2, [r3, #44]	; 0x2c
 8001cd4:	e04b      	b.n	8001d6e <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	613b      	str	r3, [r7, #16]
 8001cda:	e044      	b.n	8001d66 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001cea:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d107      	bne.n	8001d02 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cfc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d00:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d06:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001d0a:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d116      	bne.n	8001d44 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d20:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001d24:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	4a25      	ldr	r2, [pc, #148]	; (8001dc0 <HAL_ETH_TransmitFrame+0x1d0>)
 8001d2a:	fb02 f203 	mul.w	r2, r2, r3
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	4413      	add	r3, r2
 8001d32:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001d36:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3c:	68fa      	ldr	r2, [r7, #12]
 8001d3e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001d42:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001d52:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	3301      	adds	r3, #1
 8001d64:	613b      	str	r3, [r7, #16]
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d3b6      	bcc.n	8001cdc <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d76:	3314      	adds	r3, #20
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0304 	and.w	r3, r3, #4
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d00d      	beq.n	8001d9e <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d8a:	3314      	adds	r3, #20
 8001d8c:	2204      	movs	r2, #4
 8001d8e:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d98:	3304      	adds	r3, #4
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2201      	movs	r2, #1
 8001da2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001dae:	2300      	movs	r3, #0
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	371c      	adds	r7, #28
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	ac02b00b 	.word	0xac02b00b
 8001dc0:	fffffa0c 	.word	0xfffffa0c

08001dc4 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d101      	bne.n	8001dde <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8001dda:	2302      	movs	r3, #2
 8001ddc:	e074      	b.n	8001ec8 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2201      	movs	r2, #1
 8001de2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2202      	movs	r2, #2
 8001dea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001dee:	e05a      	b.n	8001ea6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	3301      	adds	r3, #1
 8001df4:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e04:	d10d      	bne.n	8001e22 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2201      	movs	r2, #1
 8001e12:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	629a      	str	r2, [r3, #40]	; 0x28
 8001e20:	e041      	b.n	8001ea6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d10b      	bne.n	8001e48 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e34:	1c5a      	adds	r2, r3, #1
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	461a      	mov	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	629a      	str	r2, [r3, #40]	; 0x28
 8001e46:	e02e      	b.n	8001ea6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e54:	1c5a      	adds	r2, r3, #1
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d103      	bne.n	8001e6a <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	0c1b      	lsrs	r3, r3, #16
 8001e72:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001e76:	1f1a      	subs	r2, r3, #4
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e80:	689a      	ldr	r2, [r3, #8]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2201      	movs	r2, #1
 8001e96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	e010      	b.n	8001ec8 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	db02      	blt.n	8001eb6 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2b03      	cmp	r3, #3
 8001eb4:	d99c      	bls.n	8001df0 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3714      	adds	r7, #20
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ee4:	3314      	adds	r3, #20
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eec:	2b40      	cmp	r3, #64	; 0x40
 8001eee:	d112      	bne.n	8001f16 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f005 fca9 	bl	8007848 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001efe:	3314      	adds	r3, #20
 8001f00:	2240      	movs	r2, #64	; 0x40
 8001f02:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001f14:	e01b      	b.n	8001f4e <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f1e:	3314      	adds	r3, #20
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d111      	bne.n	8001f4e <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 f839 	bl	8001fa2 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f38:	3314      	adds	r3, #20
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2201      	movs	r2, #1
 8001f42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f56:	3314      	adds	r3, #20
 8001f58:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f5c:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f66:	3314      	adds	r3, #20
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f72:	d112      	bne.n	8001f9a <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 f81e 	bl	8001fb6 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f82:	3314      	adds	r3, #20
 8001f84:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001f88:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001f9a:	bf00      	nop
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	b083      	sub	sp, #12
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b083      	sub	sp, #12
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001fbe:	bf00      	nop
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr

08001fca <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b086      	sub	sp, #24
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	60f8      	str	r0, [r7, #12]
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	607a      	str	r2, [r7, #4]
 8001fd6:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8001fd8:	2300      	movs	r3, #0
 8001fda:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	2b82      	cmp	r3, #130	; 0x82
 8001fea:	d101      	bne.n	8001ff0 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001fec:	2302      	movs	r3, #2
 8001fee:	e050      	b.n	8002092 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2282      	movs	r2, #130	; 0x82
 8001ff4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	f003 031c 	and.w	r3, r3, #28
 8002006:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	8a1b      	ldrh	r3, [r3, #16]
 800200c:	02db      	lsls	r3, r3, #11
 800200e:	b29b      	uxth	r3, r3
 8002010:	697a      	ldr	r2, [r7, #20]
 8002012:	4313      	orrs	r3, r2
 8002014:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8002016:	897b      	ldrh	r3, [r7, #10]
 8002018:	019b      	lsls	r3, r3, #6
 800201a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800201e:	697a      	ldr	r2, [r7, #20]
 8002020:	4313      	orrs	r3, r2
 8002022:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	f023 0302 	bic.w	r3, r3, #2
 800202a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	f043 0301 	orr.w	r3, r3, #1
 8002032:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	697a      	ldr	r2, [r7, #20]
 800203a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800203c:	f7ff fa54 	bl	80014e8 <HAL_GetTick>
 8002040:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002042:	e015      	b.n	8002070 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8002044:	f7ff fa50 	bl	80014e8 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002052:	d309      	bcc.n	8002068 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2201      	movs	r2, #1
 8002058:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2200      	movs	r2, #0
 8002060:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e014      	b.n	8002092 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1e4      	bne.n	8002044 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	695b      	ldr	r3, [r3, #20]
 8002080:	b29b      	uxth	r3, r3
 8002082:	461a      	mov	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3718      	adds	r7, #24
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b086      	sub	sp, #24
 800209e:	af00      	add	r7, sp, #0
 80020a0:	60f8      	str	r0, [r7, #12]
 80020a2:	460b      	mov	r3, r1
 80020a4:	607a      	str	r2, [r7, #4]
 80020a6:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80020a8:	2300      	movs	r3, #0
 80020aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80020ac:	2300      	movs	r3, #0
 80020ae:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	2b42      	cmp	r3, #66	; 0x42
 80020ba:	d101      	bne.n	80020c0 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80020bc:	2302      	movs	r3, #2
 80020be:	e04e      	b.n	800215e <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2242      	movs	r2, #66	; 0x42
 80020c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	f003 031c 	and.w	r3, r3, #28
 80020d6:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	8a1b      	ldrh	r3, [r3, #16]
 80020dc:	02db      	lsls	r3, r3, #11
 80020de:	b29b      	uxth	r3, r3
 80020e0:	697a      	ldr	r2, [r7, #20]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80020e6:	897b      	ldrh	r3, [r7, #10]
 80020e8:	019b      	lsls	r3, r3, #6
 80020ea:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80020ee:	697a      	ldr	r2, [r7, #20]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	f043 0302 	orr.w	r3, r3, #2
 80020fa:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	f043 0301 	orr.w	r3, r3, #1
 8002102:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	b29a      	uxth	r2, r3
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	697a      	ldr	r2, [r7, #20]
 8002114:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002116:	f7ff f9e7 	bl	80014e8 <HAL_GetTick>
 800211a:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800211c:	e015      	b.n	800214a <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800211e:	f7ff f9e3 	bl	80014e8 <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800212c:	d309      	bcc.n	8002142 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2201      	movs	r2, #1
 8002132:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e00d      	b.n	800215e <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	691b      	ldr	r3, [r3, #16]
 8002148:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	f003 0301 	and.w	r3, r3, #1
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1e4      	bne.n	800211e <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3718      	adds	r7, #24
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8002166:	b580      	push	{r7, lr}
 8002168:	b082      	sub	sp, #8
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002174:	2b01      	cmp	r3, #1
 8002176:	d101      	bne.n	800217c <HAL_ETH_Start+0x16>
 8002178:	2302      	movs	r3, #2
 800217a:	e01f      	b.n	80021bc <HAL_ETH_Start+0x56>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2202      	movs	r2, #2
 8002188:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 fa1b 	bl	80025c8 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 fa35 	bl	8002602 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f000 fa7f 	bl	800269c <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 fa4c 	bl	800263c <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f000 fa61 	bl	800266c <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2201      	movs	r2, #1
 80021ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3708      	adds	r7, #8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b0b0      	sub	sp, #192	; 0xc0
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80021ce:	2300      	movs	r3, #0
 80021d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d007      	beq.n	80021ea <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021e0:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021e8:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80021ea:	2300      	movs	r3, #0
 80021ec:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80021ee:	2300      	movs	r3, #0
 80021f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80021f2:	2300      	movs	r3, #0
 80021f4:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80021f6:	2300      	movs	r3, #0
 80021f8:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80021fa:	2300      	movs	r3, #0
 80021fc:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80021fe:	2300      	movs	r3, #0
 8002200:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	69db      	ldr	r3, [r3, #28]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d103      	bne.n	8002212 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800220a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800220e:	663b      	str	r3, [r7, #96]	; 0x60
 8002210:	e001      	b.n	8002216 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002212:	2300      	movs	r3, #0
 8002214:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002216:	f44f 7300 	mov.w	r3, #512	; 0x200
 800221a:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 800221c:	2300      	movs	r3, #0
 800221e:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002220:	2300      	movs	r3, #0
 8002222:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002224:	2300      	movs	r3, #0
 8002226:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002228:	2300      	movs	r3, #0
 800222a:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 800222c:	2300      	movs	r3, #0
 800222e:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002230:	2340      	movs	r3, #64	; 0x40
 8002232:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002234:	2300      	movs	r3, #0
 8002236:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800223a:	2300      	movs	r3, #0
 800223c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002240:	2300      	movs	r3, #0
 8002242:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002246:	2300      	movs	r3, #0
 8002248:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 800224c:	2300      	movs	r3, #0
 800224e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8002252:	2300      	movs	r3, #0
 8002254:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8002258:	2300      	movs	r3, #0
 800225a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 800225e:	2300      	movs	r3, #0
 8002260:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002264:	2380      	movs	r3, #128	; 0x80
 8002266:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800226a:	2300      	movs	r3, #0
 800226c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002270:	2300      	movs	r3, #0
 8002272:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002276:	2300      	movs	r3, #0
 8002278:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 800227c:	2300      	movs	r3, #0
 800227e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002282:	2300      	movs	r3, #0
 8002284:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8002288:	2300      	movs	r3, #0
 800228a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002298:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800229c:	4bac      	ldr	r3, [pc, #688]	; (8002550 <ETH_MACDMAConfig+0x38c>)
 800229e:	4013      	ands	r3, r2
 80022a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80022a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80022a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80022a8:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80022aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80022ac:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80022ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80022b0:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80022b6:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80022b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80022ba:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80022bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80022be:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80022c4:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80022c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80022c8:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80022ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80022cc:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80022ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80022d0:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80022d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80022d4:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80022d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80022d8:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80022da:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022de:	4313      	orrs	r3, r2
 80022e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022ec:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022f8:	2001      	movs	r0, #1
 80022fa:	f7ff f901 	bl	8001500 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002306:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002308:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800230a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800230c:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800230e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002310:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002312:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002316:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002318:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 800231c:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800231e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002322:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002324:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002328:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 800232c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002334:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002336:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002342:	2001      	movs	r0, #1
 8002344:	f7ff f8dc 	bl	8001500 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002350:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800235a:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002364:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	699b      	ldr	r3, [r3, #24]
 800236c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002370:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002374:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002378:	4013      	ands	r3, r2
 800237a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800237e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002382:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002384:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002388:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800238a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800238e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002390:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002394:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002396:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800239a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 800239c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80023a0:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80023a2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023a6:	4313      	orrs	r3, r2
 80023a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023b4:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80023c0:	2001      	movs	r0, #1
 80023c2:	f7ff f89d 	bl	8001500 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023ce:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80023d0:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80023d4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	430a      	orrs	r2, r1
 80023de:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	69db      	ldr	r3, [r3, #28]
 80023e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80023ea:	2001      	movs	r0, #1
 80023ec:	f7ff f888 	bl	8001500 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023f8:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80023fa:	2300      	movs	r3, #0
 80023fc:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80023fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002402:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002404:	2300      	movs	r3, #0
 8002406:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002408:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800240c:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800240e:	2300      	movs	r3, #0
 8002410:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002412:	2300      	movs	r3, #0
 8002414:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002416:	2300      	movs	r3, #0
 8002418:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800241a:	2300      	movs	r3, #0
 800241c:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800241e:	2304      	movs	r3, #4
 8002420:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002422:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002426:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002428:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800242c:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800242e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002432:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002434:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002438:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800243a:	2380      	movs	r3, #128	; 0x80
 800243c:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 800243e:	2300      	movs	r3, #0
 8002440:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002442:	2300      	movs	r3, #0
 8002444:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800244e:	3318      	adds	r3, #24
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002456:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800245a:	4b3e      	ldr	r3, [pc, #248]	; (8002554 <ETH_MACDMAConfig+0x390>)
 800245c:	4013      	ands	r3, r2
 800245e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002462:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002464:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002466:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002468:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800246a:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 800246c:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800246e:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002470:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002472:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002474:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002476:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002478:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800247a:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 800247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800247e:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002480:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002482:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002484:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002488:	4313      	orrs	r3, r2
 800248a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002496:	3318      	adds	r3, #24
 8002498:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800249c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024a6:	3318      	adds	r3, #24
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80024ae:	2001      	movs	r0, #1
 80024b0:	f7ff f826 	bl	8001500 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024bc:	3318      	adds	r3, #24
 80024be:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80024c2:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80024c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80024c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80024c8:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80024ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80024cc:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80024ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80024d0:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80024d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80024d4:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 80024d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024d8:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80024da:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80024dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 80024de:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80024e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024ec:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80024fc:	2001      	movs	r0, #1
 80024fe:	f7fe ffff 	bl	8001500 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800250a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800250e:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d10f      	bne.n	8002538 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002520:	331c      	adds	r3, #28
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800252c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002530:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002534:	331c      	adds	r3, #28
 8002536:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	695b      	ldr	r3, [r3, #20]
 800253c:	461a      	mov	r2, r3
 800253e:	2100      	movs	r1, #0
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f000 f809 	bl	8002558 <ETH_MACAddressConfig>
}
 8002546:	bf00      	nop
 8002548:	37c0      	adds	r7, #192	; 0xc0
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	ff20810f 	.word	0xff20810f
 8002554:	f8de3f23 	.word	0xf8de3f23

08002558 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002558:	b480      	push	{r7}
 800255a:	b087      	sub	sp, #28
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	3305      	adds	r3, #5
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	021b      	lsls	r3, r3, #8
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	3204      	adds	r2, #4
 8002570:	7812      	ldrb	r2, [r2, #0]
 8002572:	4313      	orrs	r3, r2
 8002574:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002576:	68ba      	ldr	r2, [r7, #8]
 8002578:	4b11      	ldr	r3, [pc, #68]	; (80025c0 <ETH_MACAddressConfig+0x68>)
 800257a:	4413      	add	r3, r2
 800257c:	461a      	mov	r2, r3
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	3303      	adds	r3, #3
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	061a      	lsls	r2, r3, #24
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	3302      	adds	r3, #2
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	041b      	lsls	r3, r3, #16
 8002592:	431a      	orrs	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	3301      	adds	r3, #1
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	021b      	lsls	r3, r3, #8
 800259c:	4313      	orrs	r3, r2
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	7812      	ldrb	r2, [r2, #0]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80025a6:	68ba      	ldr	r2, [r7, #8]
 80025a8:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <ETH_MACAddressConfig+0x6c>)
 80025aa:	4413      	add	r3, r2
 80025ac:	461a      	mov	r2, r3
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	6013      	str	r3, [r2, #0]
}
 80025b2:	bf00      	nop
 80025b4:	371c      	adds	r7, #28
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	40028040 	.word	0x40028040
 80025c4:	40028044 	.word	0x40028044

080025c8 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80025d0:	2300      	movs	r3, #0
 80025d2:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f042 0208 	orr.w	r2, r2, #8
 80025e2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80025ec:	2001      	movs	r0, #1
 80025ee:	f000 f87f 	bl	80026f0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	601a      	str	r2, [r3, #0]
}
 80025fa:	bf00      	nop
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002602:	b580      	push	{r7, lr}
 8002604:	b084      	sub	sp, #16
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800260a:	2300      	movs	r3, #0
 800260c:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f042 0204 	orr.w	r2, r2, #4
 800261c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002626:	2001      	movs	r0, #1
 8002628:	f000 f862 	bl	80026f0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68fa      	ldr	r2, [r7, #12]
 8002632:	601a      	str	r2, [r3, #0]
}
 8002634:	bf00      	nop
 8002636:	3710      	adds	r7, #16
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800264c:	3318      	adds	r3, #24
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002658:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800265c:	3318      	adds	r3, #24
 800265e:	601a      	str	r2, [r3, #0]
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800267c:	3318      	adds	r3, #24
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f042 0202 	orr.w	r2, r2, #2
 8002688:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800268c:	3318      	adds	r3, #24
 800268e:	601a      	str	r2, [r3, #0]
}
 8002690:	bf00      	nop
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80026a4:	2300      	movs	r3, #0
 80026a6:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026b0:	3318      	adds	r3, #24
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80026bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026c0:	3318      	adds	r3, #24
 80026c2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026cc:	3318      	adds	r3, #24
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80026d2:	2001      	movs	r0, #1
 80026d4:	f000 f80c 	bl	80026f0 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026e2:	3318      	adds	r3, #24
 80026e4:	601a      	str	r2, [r3, #0]
}
 80026e6:	bf00      	nop
 80026e8:	3710      	adds	r7, #16
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
	...

080026f0 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80026f8:	4b0b      	ldr	r3, [pc, #44]	; (8002728 <ETH_Delay+0x38>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a0b      	ldr	r2, [pc, #44]	; (800272c <ETH_Delay+0x3c>)
 80026fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002702:	0a5b      	lsrs	r3, r3, #9
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	fb02 f303 	mul.w	r3, r2, r3
 800270a:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 800270c:	bf00      	nop
  } 
  while (Delay --);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	1e5a      	subs	r2, r3, #1
 8002712:	60fa      	str	r2, [r7, #12]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1f9      	bne.n	800270c <ETH_Delay+0x1c>
}
 8002718:	bf00      	nop
 800271a:	bf00      	nop
 800271c:	3714      	adds	r7, #20
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	20000000 	.word	0x20000000
 800272c:	10624dd3 	.word	0x10624dd3

08002730 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002730:	b480      	push	{r7}
 8002732:	b089      	sub	sp, #36	; 0x24
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800273a:	2300      	movs	r3, #0
 800273c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800273e:	2300      	movs	r3, #0
 8002740:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002742:	2300      	movs	r3, #0
 8002744:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002746:	2300      	movs	r3, #0
 8002748:	61fb      	str	r3, [r7, #28]
 800274a:	e16b      	b.n	8002a24 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800274c:	2201      	movs	r2, #1
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	697a      	ldr	r2, [r7, #20]
 800275c:	4013      	ands	r3, r2
 800275e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	429a      	cmp	r2, r3
 8002766:	f040 815a 	bne.w	8002a1e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f003 0303 	and.w	r3, r3, #3
 8002772:	2b01      	cmp	r3, #1
 8002774:	d005      	beq.n	8002782 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800277e:	2b02      	cmp	r3, #2
 8002780:	d130      	bne.n	80027e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	2203      	movs	r2, #3
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	43db      	mvns	r3, r3
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	4013      	ands	r3, r2
 8002798:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	68da      	ldr	r2, [r3, #12]
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	fa02 f303 	lsl.w	r3, r2, r3
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027b8:	2201      	movs	r2, #1
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	43db      	mvns	r3, r3
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	4013      	ands	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	091b      	lsrs	r3, r3, #4
 80027ce:	f003 0201 	and.w	r2, r3, #1
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	4313      	orrs	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f003 0303 	and.w	r3, r3, #3
 80027ec:	2b03      	cmp	r3, #3
 80027ee:	d017      	beq.n	8002820 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	2203      	movs	r2, #3
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	43db      	mvns	r3, r3
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	4013      	ands	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	689a      	ldr	r2, [r3, #8]
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	4313      	orrs	r3, r2
 8002818:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f003 0303 	and.w	r3, r3, #3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d123      	bne.n	8002874 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	08da      	lsrs	r2, r3, #3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	3208      	adds	r2, #8
 8002834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002838:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	f003 0307 	and.w	r3, r3, #7
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	220f      	movs	r2, #15
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	43db      	mvns	r3, r3
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	4013      	ands	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	691a      	ldr	r2, [r3, #16]
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	4313      	orrs	r3, r2
 8002864:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	08da      	lsrs	r2, r3, #3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	3208      	adds	r2, #8
 800286e:	69b9      	ldr	r1, [r7, #24]
 8002870:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	2203      	movs	r2, #3
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	43db      	mvns	r3, r3
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	4013      	ands	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f003 0203 	and.w	r2, r3, #3
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	4313      	orrs	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f000 80b4 	beq.w	8002a1e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028b6:	2300      	movs	r3, #0
 80028b8:	60fb      	str	r3, [r7, #12]
 80028ba:	4b60      	ldr	r3, [pc, #384]	; (8002a3c <HAL_GPIO_Init+0x30c>)
 80028bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028be:	4a5f      	ldr	r2, [pc, #380]	; (8002a3c <HAL_GPIO_Init+0x30c>)
 80028c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028c4:	6453      	str	r3, [r2, #68]	; 0x44
 80028c6:	4b5d      	ldr	r3, [pc, #372]	; (8002a3c <HAL_GPIO_Init+0x30c>)
 80028c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028ce:	60fb      	str	r3, [r7, #12]
 80028d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028d2:	4a5b      	ldr	r2, [pc, #364]	; (8002a40 <HAL_GPIO_Init+0x310>)
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	089b      	lsrs	r3, r3, #2
 80028d8:	3302      	adds	r3, #2
 80028da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	f003 0303 	and.w	r3, r3, #3
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	220f      	movs	r2, #15
 80028ea:	fa02 f303 	lsl.w	r3, r2, r3
 80028ee:	43db      	mvns	r3, r3
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	4013      	ands	r3, r2
 80028f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a52      	ldr	r2, [pc, #328]	; (8002a44 <HAL_GPIO_Init+0x314>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d02b      	beq.n	8002956 <HAL_GPIO_Init+0x226>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a51      	ldr	r2, [pc, #324]	; (8002a48 <HAL_GPIO_Init+0x318>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d025      	beq.n	8002952 <HAL_GPIO_Init+0x222>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a50      	ldr	r2, [pc, #320]	; (8002a4c <HAL_GPIO_Init+0x31c>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d01f      	beq.n	800294e <HAL_GPIO_Init+0x21e>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a4f      	ldr	r2, [pc, #316]	; (8002a50 <HAL_GPIO_Init+0x320>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d019      	beq.n	800294a <HAL_GPIO_Init+0x21a>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a4e      	ldr	r2, [pc, #312]	; (8002a54 <HAL_GPIO_Init+0x324>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d013      	beq.n	8002946 <HAL_GPIO_Init+0x216>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a4d      	ldr	r2, [pc, #308]	; (8002a58 <HAL_GPIO_Init+0x328>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d00d      	beq.n	8002942 <HAL_GPIO_Init+0x212>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a4c      	ldr	r2, [pc, #304]	; (8002a5c <HAL_GPIO_Init+0x32c>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d007      	beq.n	800293e <HAL_GPIO_Init+0x20e>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a4b      	ldr	r2, [pc, #300]	; (8002a60 <HAL_GPIO_Init+0x330>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d101      	bne.n	800293a <HAL_GPIO_Init+0x20a>
 8002936:	2307      	movs	r3, #7
 8002938:	e00e      	b.n	8002958 <HAL_GPIO_Init+0x228>
 800293a:	2308      	movs	r3, #8
 800293c:	e00c      	b.n	8002958 <HAL_GPIO_Init+0x228>
 800293e:	2306      	movs	r3, #6
 8002940:	e00a      	b.n	8002958 <HAL_GPIO_Init+0x228>
 8002942:	2305      	movs	r3, #5
 8002944:	e008      	b.n	8002958 <HAL_GPIO_Init+0x228>
 8002946:	2304      	movs	r3, #4
 8002948:	e006      	b.n	8002958 <HAL_GPIO_Init+0x228>
 800294a:	2303      	movs	r3, #3
 800294c:	e004      	b.n	8002958 <HAL_GPIO_Init+0x228>
 800294e:	2302      	movs	r3, #2
 8002950:	e002      	b.n	8002958 <HAL_GPIO_Init+0x228>
 8002952:	2301      	movs	r3, #1
 8002954:	e000      	b.n	8002958 <HAL_GPIO_Init+0x228>
 8002956:	2300      	movs	r3, #0
 8002958:	69fa      	ldr	r2, [r7, #28]
 800295a:	f002 0203 	and.w	r2, r2, #3
 800295e:	0092      	lsls	r2, r2, #2
 8002960:	4093      	lsls	r3, r2
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	4313      	orrs	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002968:	4935      	ldr	r1, [pc, #212]	; (8002a40 <HAL_GPIO_Init+0x310>)
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	089b      	lsrs	r3, r3, #2
 800296e:	3302      	adds	r3, #2
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002976:	4b3b      	ldr	r3, [pc, #236]	; (8002a64 <HAL_GPIO_Init+0x334>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	43db      	mvns	r3, r3
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	4013      	ands	r3, r2
 8002984:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d003      	beq.n	800299a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002992:	69ba      	ldr	r2, [r7, #24]
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	4313      	orrs	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800299a:	4a32      	ldr	r2, [pc, #200]	; (8002a64 <HAL_GPIO_Init+0x334>)
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80029a0:	4b30      	ldr	r3, [pc, #192]	; (8002a64 <HAL_GPIO_Init+0x334>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	43db      	mvns	r3, r3
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	4013      	ands	r3, r2
 80029ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d003      	beq.n	80029c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029c4:	4a27      	ldr	r2, [pc, #156]	; (8002a64 <HAL_GPIO_Init+0x334>)
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029ca:	4b26      	ldr	r3, [pc, #152]	; (8002a64 <HAL_GPIO_Init+0x334>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	43db      	mvns	r3, r3
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	4013      	ands	r3, r2
 80029d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d003      	beq.n	80029ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029ee:	4a1d      	ldr	r2, [pc, #116]	; (8002a64 <HAL_GPIO_Init+0x334>)
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029f4:	4b1b      	ldr	r3, [pc, #108]	; (8002a64 <HAL_GPIO_Init+0x334>)
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	43db      	mvns	r3, r3
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	4013      	ands	r3, r2
 8002a02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d003      	beq.n	8002a18 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a18:	4a12      	ldr	r2, [pc, #72]	; (8002a64 <HAL_GPIO_Init+0x334>)
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	3301      	adds	r3, #1
 8002a22:	61fb      	str	r3, [r7, #28]
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	2b0f      	cmp	r3, #15
 8002a28:	f67f ae90 	bls.w	800274c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a2c:	bf00      	nop
 8002a2e:	bf00      	nop
 8002a30:	3724      	adds	r7, #36	; 0x24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	40023800 	.word	0x40023800
 8002a40:	40013800 	.word	0x40013800
 8002a44:	40020000 	.word	0x40020000
 8002a48:	40020400 	.word	0x40020400
 8002a4c:	40020800 	.word	0x40020800
 8002a50:	40020c00 	.word	0x40020c00
 8002a54:	40021000 	.word	0x40021000
 8002a58:	40021400 	.word	0x40021400
 8002a5c:	40021800 	.word	0x40021800
 8002a60:	40021c00 	.word	0x40021c00
 8002a64:	40013c00 	.word	0x40013c00

08002a68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	460b      	mov	r3, r1
 8002a72:	807b      	strh	r3, [r7, #2]
 8002a74:	4613      	mov	r3, r2
 8002a76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a78:	787b      	ldrb	r3, [r7, #1]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a7e:	887a      	ldrh	r2, [r7, #2]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a84:	e003      	b.n	8002a8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a86:	887b      	ldrh	r3, [r7, #2]
 8002a88:	041a      	lsls	r2, r3, #16
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	619a      	str	r2, [r3, #24]
}
 8002a8e:	bf00      	nop
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
	...

08002a9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002aa6:	4b08      	ldr	r3, [pc, #32]	; (8002ac8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002aa8:	695a      	ldr	r2, [r3, #20]
 8002aaa:	88fb      	ldrh	r3, [r7, #6]
 8002aac:	4013      	ands	r3, r2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d006      	beq.n	8002ac0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ab2:	4a05      	ldr	r2, [pc, #20]	; (8002ac8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ab4:	88fb      	ldrh	r3, [r7, #6]
 8002ab6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ab8:	88fb      	ldrh	r3, [r7, #6]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7fe f98c 	bl	8000dd8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ac0:	bf00      	nop
 8002ac2:	3708      	adds	r7, #8
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	40013c00 	.word	0x40013c00

08002acc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ace:	b08f      	sub	sp, #60	; 0x3c
 8002ad0:	af0a      	add	r7, sp, #40	; 0x28
 8002ad2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e10f      	b.n	8002cfe <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d106      	bne.n	8002afe <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f013 fe59 	bl	80167b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2203      	movs	r2, #3
 8002b02:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d102      	bne.n	8002b18 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f003 fa52 	bl	8005fc6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	603b      	str	r3, [r7, #0]
 8002b28:	687e      	ldr	r6, [r7, #4]
 8002b2a:	466d      	mov	r5, sp
 8002b2c:	f106 0410 	add.w	r4, r6, #16
 8002b30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b38:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b3c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b40:	1d33      	adds	r3, r6, #4
 8002b42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b44:	6838      	ldr	r0, [r7, #0]
 8002b46:	f003 f929 	bl	8005d9c <USB_CoreInit>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d005      	beq.n	8002b5c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2202      	movs	r2, #2
 8002b54:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e0d0      	b.n	8002cfe <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2100      	movs	r1, #0
 8002b62:	4618      	mov	r0, r3
 8002b64:	f003 fa40 	bl	8005fe8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b68:	2300      	movs	r3, #0
 8002b6a:	73fb      	strb	r3, [r7, #15]
 8002b6c:	e04a      	b.n	8002c04 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b6e:	7bfa      	ldrb	r2, [r7, #15]
 8002b70:	6879      	ldr	r1, [r7, #4]
 8002b72:	4613      	mov	r3, r2
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	1a9b      	subs	r3, r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	440b      	add	r3, r1
 8002b7c:	333d      	adds	r3, #61	; 0x3d
 8002b7e:	2201      	movs	r2, #1
 8002b80:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b82:	7bfa      	ldrb	r2, [r7, #15]
 8002b84:	6879      	ldr	r1, [r7, #4]
 8002b86:	4613      	mov	r3, r2
 8002b88:	00db      	lsls	r3, r3, #3
 8002b8a:	1a9b      	subs	r3, r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	440b      	add	r3, r1
 8002b90:	333c      	adds	r3, #60	; 0x3c
 8002b92:	7bfa      	ldrb	r2, [r7, #15]
 8002b94:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b96:	7bfa      	ldrb	r2, [r7, #15]
 8002b98:	7bfb      	ldrb	r3, [r7, #15]
 8002b9a:	b298      	uxth	r0, r3
 8002b9c:	6879      	ldr	r1, [r7, #4]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	1a9b      	subs	r3, r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	440b      	add	r3, r1
 8002ba8:	3342      	adds	r3, #66	; 0x42
 8002baa:	4602      	mov	r2, r0
 8002bac:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002bae:	7bfa      	ldrb	r2, [r7, #15]
 8002bb0:	6879      	ldr	r1, [r7, #4]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	00db      	lsls	r3, r3, #3
 8002bb6:	1a9b      	subs	r3, r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	440b      	add	r3, r1
 8002bbc:	333f      	adds	r3, #63	; 0x3f
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002bc2:	7bfa      	ldrb	r2, [r7, #15]
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	00db      	lsls	r3, r3, #3
 8002bca:	1a9b      	subs	r3, r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	440b      	add	r3, r1
 8002bd0:	3344      	adds	r3, #68	; 0x44
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002bd6:	7bfa      	ldrb	r2, [r7, #15]
 8002bd8:	6879      	ldr	r1, [r7, #4]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	00db      	lsls	r3, r3, #3
 8002bde:	1a9b      	subs	r3, r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	440b      	add	r3, r1
 8002be4:	3348      	adds	r3, #72	; 0x48
 8002be6:	2200      	movs	r2, #0
 8002be8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002bea:	7bfa      	ldrb	r2, [r7, #15]
 8002bec:	6879      	ldr	r1, [r7, #4]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	1a9b      	subs	r3, r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	440b      	add	r3, r1
 8002bf8:	3350      	adds	r3, #80	; 0x50
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bfe:	7bfb      	ldrb	r3, [r7, #15]
 8002c00:	3301      	adds	r3, #1
 8002c02:	73fb      	strb	r3, [r7, #15]
 8002c04:	7bfa      	ldrb	r2, [r7, #15]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d3af      	bcc.n	8002b6e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c0e:	2300      	movs	r3, #0
 8002c10:	73fb      	strb	r3, [r7, #15]
 8002c12:	e044      	b.n	8002c9e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c14:	7bfa      	ldrb	r2, [r7, #15]
 8002c16:	6879      	ldr	r1, [r7, #4]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	1a9b      	subs	r3, r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	440b      	add	r3, r1
 8002c22:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002c26:	2200      	movs	r2, #0
 8002c28:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c2a:	7bfa      	ldrb	r2, [r7, #15]
 8002c2c:	6879      	ldr	r1, [r7, #4]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	00db      	lsls	r3, r3, #3
 8002c32:	1a9b      	subs	r3, r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	440b      	add	r3, r1
 8002c38:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002c3c:	7bfa      	ldrb	r2, [r7, #15]
 8002c3e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c40:	7bfa      	ldrb	r2, [r7, #15]
 8002c42:	6879      	ldr	r1, [r7, #4]
 8002c44:	4613      	mov	r3, r2
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	1a9b      	subs	r3, r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	440b      	add	r3, r1
 8002c4e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002c52:	2200      	movs	r2, #0
 8002c54:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c56:	7bfa      	ldrb	r2, [r7, #15]
 8002c58:	6879      	ldr	r1, [r7, #4]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	1a9b      	subs	r3, r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	440b      	add	r3, r1
 8002c64:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002c68:	2200      	movs	r2, #0
 8002c6a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c6c:	7bfa      	ldrb	r2, [r7, #15]
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	4613      	mov	r3, r2
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	1a9b      	subs	r3, r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	440b      	add	r3, r1
 8002c7a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002c7e:	2200      	movs	r2, #0
 8002c80:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c82:	7bfa      	ldrb	r2, [r7, #15]
 8002c84:	6879      	ldr	r1, [r7, #4]
 8002c86:	4613      	mov	r3, r2
 8002c88:	00db      	lsls	r3, r3, #3
 8002c8a:	1a9b      	subs	r3, r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	440b      	add	r3, r1
 8002c90:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c98:	7bfb      	ldrb	r3, [r7, #15]
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	73fb      	strb	r3, [r7, #15]
 8002c9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d3b5      	bcc.n	8002c14 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	603b      	str	r3, [r7, #0]
 8002cae:	687e      	ldr	r6, [r7, #4]
 8002cb0:	466d      	mov	r5, sp
 8002cb2:	f106 0410 	add.w	r4, r6, #16
 8002cb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cbe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002cc2:	e885 0003 	stmia.w	r5, {r0, r1}
 8002cc6:	1d33      	adds	r3, r6, #4
 8002cc8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cca:	6838      	ldr	r0, [r7, #0]
 8002ccc:	f003 f9d8 	bl	8006080 <USB_DevInit>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d005      	beq.n	8002ce2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2202      	movs	r2, #2
 8002cda:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e00d      	b.n	8002cfe <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2201      	movs	r2, #1
 8002cee:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f004 fa54 	bl	80071a4 <USB_DevDisconnect>

  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3714      	adds	r7, #20
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d06 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b084      	sub	sp, #16
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d101      	bne.n	8002d22 <HAL_PCD_Start+0x1c>
 8002d1e:	2302      	movs	r3, #2
 8002d20:	e020      	b.n	8002d64 <HAL_PCD_Start+0x5e>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d109      	bne.n	8002d46 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d005      	beq.n	8002d46 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d3e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f003 f92a 	bl	8005fa4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f004 fa04 	bl	8007162 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002d6c:	b590      	push	{r4, r7, lr}
 8002d6e:	b08d      	sub	sp, #52	; 0x34
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d7a:	6a3b      	ldr	r3, [r7, #32]
 8002d7c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f004 fac2 	bl	800730c <USB_GetMode>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	f040 839d 	bne.w	80034ca <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f004 fa26 	bl	80071e6 <USB_ReadInterrupts>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	f000 8393 	beq.w	80034c8 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f004 fa1d 	bl	80071e6 <USB_ReadInterrupts>
 8002dac:	4603      	mov	r3, r0
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d107      	bne.n	8002dc6 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	695a      	ldr	r2, [r3, #20]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f002 0202 	and.w	r2, r2, #2
 8002dc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f004 fa0b 	bl	80071e6 <USB_ReadInterrupts>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	f003 0310 	and.w	r3, r3, #16
 8002dd6:	2b10      	cmp	r3, #16
 8002dd8:	d161      	bne.n	8002e9e <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	699a      	ldr	r2, [r3, #24]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 0210 	bic.w	r2, r2, #16
 8002de8:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002dea:	6a3b      	ldr	r3, [r7, #32]
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	f003 020f 	and.w	r2, r3, #15
 8002df6:	4613      	mov	r3, r2
 8002df8:	00db      	lsls	r3, r3, #3
 8002dfa:	1a9b      	subs	r3, r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	4413      	add	r3, r2
 8002e06:	3304      	adds	r3, #4
 8002e08:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	0c5b      	lsrs	r3, r3, #17
 8002e0e:	f003 030f 	and.w	r3, r3, #15
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d124      	bne.n	8002e60 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d035      	beq.n	8002e8e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	091b      	lsrs	r3, r3, #4
 8002e2a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002e2c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	461a      	mov	r2, r3
 8002e34:	6a38      	ldr	r0, [r7, #32]
 8002e36:	f004 f842 	bl	8006ebe <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	68da      	ldr	r2, [r3, #12]
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	091b      	lsrs	r3, r3, #4
 8002e42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e46:	441a      	add	r2, r3
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	699a      	ldr	r2, [r3, #24]
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	091b      	lsrs	r3, r3, #4
 8002e54:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e58:	441a      	add	r2, r3
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	619a      	str	r2, [r3, #24]
 8002e5e:	e016      	b.n	8002e8e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	0c5b      	lsrs	r3, r3, #17
 8002e64:	f003 030f 	and.w	r3, r3, #15
 8002e68:	2b06      	cmp	r3, #6
 8002e6a:	d110      	bne.n	8002e8e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002e72:	2208      	movs	r2, #8
 8002e74:	4619      	mov	r1, r3
 8002e76:	6a38      	ldr	r0, [r7, #32]
 8002e78:	f004 f821 	bl	8006ebe <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	699a      	ldr	r2, [r3, #24]
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	091b      	lsrs	r3, r3, #4
 8002e84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e88:	441a      	add	r2, r3
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	699a      	ldr	r2, [r3, #24]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f042 0210 	orr.w	r2, r2, #16
 8002e9c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f004 f99f 	bl	80071e6 <USB_ReadInterrupts>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002eae:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002eb2:	d16e      	bne.n	8002f92 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f004 f9a5 	bl	800720c <USB_ReadDevAllOutEpInterrupt>
 8002ec2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002ec4:	e062      	b.n	8002f8c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec8:	f003 0301 	and.w	r3, r3, #1
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d057      	beq.n	8002f80 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ed6:	b2d2      	uxtb	r2, r2
 8002ed8:	4611      	mov	r1, r2
 8002eda:	4618      	mov	r0, r3
 8002edc:	f004 f9ca 	bl	8007274 <USB_ReadDevOutEPInterrupt>
 8002ee0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	f003 0301 	and.w	r3, r3, #1
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00c      	beq.n	8002f06 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eee:	015a      	lsls	r2, r3, #5
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ef8:	461a      	mov	r2, r3
 8002efa:	2301      	movs	r3, #1
 8002efc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002efe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f000 fdb1 	bl	8003a68 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	f003 0308 	and.w	r3, r3, #8
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d00c      	beq.n	8002f2a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f12:	015a      	lsls	r2, r3, #5
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	4413      	add	r3, r2
 8002f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	2308      	movs	r3, #8
 8002f20:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002f22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f000 feab 	bl	8003c80 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	f003 0310 	and.w	r3, r3, #16
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d008      	beq.n	8002f46 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f36:	015a      	lsls	r2, r3, #5
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f40:	461a      	mov	r2, r3
 8002f42:	2310      	movs	r3, #16
 8002f44:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	f003 0320 	and.w	r3, r3, #32
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d008      	beq.n	8002f62 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f52:	015a      	lsls	r2, r3, #5
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	4413      	add	r3, r2
 8002f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	2320      	movs	r3, #32
 8002f60:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d009      	beq.n	8002f80 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6e:	015a      	lsls	r2, r3, #5
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	4413      	add	r3, r2
 8002f74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f78:	461a      	mov	r2, r3
 8002f7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f7e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f82:	3301      	adds	r3, #1
 8002f84:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f88:	085b      	lsrs	r3, r3, #1
 8002f8a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d199      	bne.n	8002ec6 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f004 f925 	bl	80071e6 <USB_ReadInterrupts>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fa2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002fa6:	f040 80c0 	bne.w	800312a <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f004 f946 	bl	8007240 <USB_ReadDevAllInEpInterrupt>
 8002fb4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002fba:	e0b2      	b.n	8003122 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	f000 80a7 	beq.w	8003116 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fce:	b2d2      	uxtb	r2, r2
 8002fd0:	4611      	mov	r1, r2
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f004 f96c 	bl	80072b0 <USB_ReadDevInEPInterrupt>
 8002fd8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	f003 0301 	and.w	r3, r3, #1
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d057      	beq.n	8003094 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe6:	f003 030f 	and.w	r3, r3, #15
 8002fea:	2201      	movs	r2, #1
 8002fec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ff8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	43db      	mvns	r3, r3
 8002ffe:	69f9      	ldr	r1, [r7, #28]
 8003000:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003004:	4013      	ands	r3, r2
 8003006:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300a:	015a      	lsls	r2, r3, #5
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	4413      	add	r3, r2
 8003010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003014:	461a      	mov	r2, r3
 8003016:	2301      	movs	r3, #1
 8003018:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	2b01      	cmp	r3, #1
 8003020:	d132      	bne.n	8003088 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003022:	6879      	ldr	r1, [r7, #4]
 8003024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003026:	4613      	mov	r3, r2
 8003028:	00db      	lsls	r3, r3, #3
 800302a:	1a9b      	subs	r3, r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	440b      	add	r3, r1
 8003030:	3348      	adds	r3, #72	; 0x48
 8003032:	6819      	ldr	r1, [r3, #0]
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003038:	4613      	mov	r3, r2
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	1a9b      	subs	r3, r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	4403      	add	r3, r0
 8003042:	3344      	adds	r3, #68	; 0x44
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4419      	add	r1, r3
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800304c:	4613      	mov	r3, r2
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	1a9b      	subs	r3, r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	4403      	add	r3, r0
 8003056:	3348      	adds	r3, #72	; 0x48
 8003058:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800305a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305c:	2b00      	cmp	r3, #0
 800305e:	d113      	bne.n	8003088 <HAL_PCD_IRQHandler+0x31c>
 8003060:	6879      	ldr	r1, [r7, #4]
 8003062:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003064:	4613      	mov	r3, r2
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	1a9b      	subs	r3, r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	440b      	add	r3, r1
 800306e:	3350      	adds	r3, #80	; 0x50
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d108      	bne.n	8003088 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6818      	ldr	r0, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003080:	461a      	mov	r2, r3
 8003082:	2101      	movs	r1, #1
 8003084:	f004 f974 	bl	8007370 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308a:	b2db      	uxtb	r3, r3
 800308c:	4619      	mov	r1, r3
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f013 fc1d 	bl	80168ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	f003 0308 	and.w	r3, r3, #8
 800309a:	2b00      	cmp	r3, #0
 800309c:	d008      	beq.n	80030b0 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800309e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a0:	015a      	lsls	r2, r3, #5
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	4413      	add	r3, r2
 80030a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030aa:	461a      	mov	r2, r3
 80030ac:	2308      	movs	r3, #8
 80030ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	f003 0310 	and.w	r3, r3, #16
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d008      	beq.n	80030cc <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80030ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030bc:	015a      	lsls	r2, r3, #5
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	4413      	add	r3, r2
 80030c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030c6:	461a      	mov	r2, r3
 80030c8:	2310      	movs	r3, #16
 80030ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d008      	beq.n	80030e8 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80030d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d8:	015a      	lsls	r2, r3, #5
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	4413      	add	r3, r2
 80030de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030e2:	461a      	mov	r2, r3
 80030e4:	2340      	movs	r3, #64	; 0x40
 80030e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d008      	beq.n	8003104 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80030f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f4:	015a      	lsls	r2, r3, #5
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	4413      	add	r3, r2
 80030fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030fe:	461a      	mov	r2, r3
 8003100:	2302      	movs	r3, #2
 8003102:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800310a:	2b00      	cmp	r3, #0
 800310c:	d003      	beq.n	8003116 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800310e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f000 fc1b 	bl	800394c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003118:	3301      	adds	r3, #1
 800311a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800311c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800311e:	085b      	lsrs	r3, r3, #1
 8003120:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003124:	2b00      	cmp	r3, #0
 8003126:	f47f af49 	bne.w	8002fbc <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4618      	mov	r0, r3
 8003130:	f004 f859 	bl	80071e6 <USB_ReadInterrupts>
 8003134:	4603      	mov	r3, r0
 8003136:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800313a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800313e:	d122      	bne.n	8003186 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	69fa      	ldr	r2, [r7, #28]
 800314a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800314e:	f023 0301 	bic.w	r3, r3, #1
 8003152:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800315a:	2b01      	cmp	r3, #1
 800315c:	d108      	bne.n	8003170 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003166:	2100      	movs	r1, #0
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f000 fe27 	bl	8003dbc <HAL_PCDEx_LPM_Callback>
 800316e:	e002      	b.n	8003176 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f013 fc23 	bl	80169bc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	695a      	ldr	r2, [r3, #20]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003184:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4618      	mov	r0, r3
 800318c:	f004 f82b 	bl	80071e6 <USB_ReadInterrupts>
 8003190:	4603      	mov	r3, r0
 8003192:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003196:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800319a:	d112      	bne.n	80031c2 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d102      	bne.n	80031b2 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f013 fbdf 	bl	8016970 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	695a      	ldr	r2, [r3, #20]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80031c0:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f004 f80d 	bl	80071e6 <USB_ReadInterrupts>
 80031cc:	4603      	mov	r3, r0
 80031ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031d6:	f040 80c7 	bne.w	8003368 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	69fa      	ldr	r2, [r7, #28]
 80031e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031e8:	f023 0301 	bic.w	r3, r3, #1
 80031ec:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2110      	movs	r1, #16
 80031f4:	4618      	mov	r0, r3
 80031f6:	f003 f8a7 	bl	8006348 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031fa:	2300      	movs	r3, #0
 80031fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031fe:	e056      	b.n	80032ae <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003202:	015a      	lsls	r2, r3, #5
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	4413      	add	r3, r2
 8003208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800320c:	461a      	mov	r2, r3
 800320e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003212:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003216:	015a      	lsls	r2, r3, #5
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	4413      	add	r3, r2
 800321c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003224:	0151      	lsls	r1, r2, #5
 8003226:	69fa      	ldr	r2, [r7, #28]
 8003228:	440a      	add	r2, r1
 800322a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800322e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003232:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003236:	015a      	lsls	r2, r3, #5
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	4413      	add	r3, r2
 800323c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003244:	0151      	lsls	r1, r2, #5
 8003246:	69fa      	ldr	r2, [r7, #28]
 8003248:	440a      	add	r2, r1
 800324a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800324e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003252:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003256:	015a      	lsls	r2, r3, #5
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	4413      	add	r3, r2
 800325c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003260:	461a      	mov	r2, r3
 8003262:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003266:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800326a:	015a      	lsls	r2, r3, #5
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	4413      	add	r3, r2
 8003270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003278:	0151      	lsls	r1, r2, #5
 800327a:	69fa      	ldr	r2, [r7, #28]
 800327c:	440a      	add	r2, r1
 800327e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003282:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003286:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800328a:	015a      	lsls	r2, r3, #5
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	4413      	add	r3, r2
 8003290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003298:	0151      	lsls	r1, r2, #5
 800329a:	69fa      	ldr	r2, [r7, #28]
 800329c:	440a      	add	r2, r1
 800329e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80032a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80032a6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032aa:	3301      	adds	r3, #1
 80032ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d3a3      	bcc.n	8003200 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032be:	69db      	ldr	r3, [r3, #28]
 80032c0:	69fa      	ldr	r2, [r7, #28]
 80032c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032c6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80032ca:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d016      	beq.n	8003302 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032de:	69fa      	ldr	r2, [r7, #28]
 80032e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032e4:	f043 030b 	orr.w	r3, r3, #11
 80032e8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f4:	69fa      	ldr	r2, [r7, #28]
 80032f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032fa:	f043 030b 	orr.w	r3, r3, #11
 80032fe:	6453      	str	r3, [r2, #68]	; 0x44
 8003300:	e015      	b.n	800332e <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	69fa      	ldr	r2, [r7, #28]
 800330c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003310:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003314:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003318:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	69fa      	ldr	r2, [r7, #28]
 8003324:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003328:	f043 030b 	orr.w	r3, r3, #11
 800332c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	69fa      	ldr	r2, [r7, #28]
 8003338:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800333c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003340:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6818      	ldr	r0, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003352:	461a      	mov	r2, r3
 8003354:	f004 f80c 	bl	8007370 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	695a      	ldr	r2, [r3, #20]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003366:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4618      	mov	r0, r3
 800336e:	f003 ff3a 	bl	80071e6 <USB_ReadInterrupts>
 8003372:	4603      	mov	r3, r0
 8003374:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003378:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800337c:	d124      	bne.n	80033c8 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4618      	mov	r0, r3
 8003384:	f003 ffd0 	bl	8007328 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4618      	mov	r0, r3
 800338e:	f003 f838 	bl	8006402 <USB_GetDevSpeed>
 8003392:	4603      	mov	r3, r0
 8003394:	461a      	mov	r2, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681c      	ldr	r4, [r3, #0]
 800339e:	f001 f92d 	bl	80045fc <HAL_RCC_GetHCLKFreq>
 80033a2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	461a      	mov	r2, r3
 80033ac:	4620      	mov	r0, r4
 80033ae:	f002 fd57 	bl	8005e60 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f013 fab3 	bl	801691e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	695a      	ldr	r2, [r3, #20]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80033c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f003 ff0a 	bl	80071e6 <USB_ReadInterrupts>
 80033d2:	4603      	mov	r3, r0
 80033d4:	f003 0308 	and.w	r3, r3, #8
 80033d8:	2b08      	cmp	r3, #8
 80033da:	d10a      	bne.n	80033f2 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f013 fa90 	bl	8016902 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	695a      	ldr	r2, [r3, #20]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f002 0208 	and.w	r2, r2, #8
 80033f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f003 fef5 	bl	80071e6 <USB_ReadInterrupts>
 80033fc:	4603      	mov	r3, r0
 80033fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003402:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003406:	d10f      	bne.n	8003428 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003408:	2300      	movs	r3, #0
 800340a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800340c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340e:	b2db      	uxtb	r3, r3
 8003410:	4619      	mov	r1, r3
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f013 faf2 	bl	80169fc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	695a      	ldr	r2, [r3, #20]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003426:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4618      	mov	r0, r3
 800342e:	f003 feda 	bl	80071e6 <USB_ReadInterrupts>
 8003432:	4603      	mov	r3, r0
 8003434:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003438:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800343c:	d10f      	bne.n	800345e <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800343e:	2300      	movs	r3, #0
 8003440:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003444:	b2db      	uxtb	r3, r3
 8003446:	4619      	mov	r1, r3
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f013 fac5 	bl	80169d8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	695a      	ldr	r2, [r3, #20]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800345c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4618      	mov	r0, r3
 8003464:	f003 febf 	bl	80071e6 <USB_ReadInterrupts>
 8003468:	4603      	mov	r3, r0
 800346a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800346e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003472:	d10a      	bne.n	800348a <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f013 fad3 	bl	8016a20 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	695a      	ldr	r2, [r3, #20]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003488:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4618      	mov	r0, r3
 8003490:	f003 fea9 	bl	80071e6 <USB_ReadInterrupts>
 8003494:	4603      	mov	r3, r0
 8003496:	f003 0304 	and.w	r3, r3, #4
 800349a:	2b04      	cmp	r3, #4
 800349c:	d115      	bne.n	80034ca <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	f003 0304 	and.w	r3, r3, #4
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d002      	beq.n	80034b6 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f013 fac3 	bl	8016a3c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	6859      	ldr	r1, [r3, #4]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	430a      	orrs	r2, r1
 80034c4:	605a      	str	r2, [r3, #4]
 80034c6:	e000      	b.n	80034ca <HAL_PCD_IRQHandler+0x75e>
      return;
 80034c8:	bf00      	nop
    }
  }
}
 80034ca:	3734      	adds	r7, #52	; 0x34
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd90      	pop	{r4, r7, pc}

080034d0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	460b      	mov	r3, r1
 80034da:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d101      	bne.n	80034ea <HAL_PCD_SetAddress+0x1a>
 80034e6:	2302      	movs	r3, #2
 80034e8:	e013      	b.n	8003512 <HAL_PCD_SetAddress+0x42>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	78fa      	ldrb	r2, [r7, #3]
 80034f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	78fa      	ldrb	r2, [r7, #3]
 8003500:	4611      	mov	r1, r2
 8003502:	4618      	mov	r0, r3
 8003504:	f003 fe07 	bl	8007116 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3708      	adds	r7, #8
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b084      	sub	sp, #16
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
 8003522:	4608      	mov	r0, r1
 8003524:	4611      	mov	r1, r2
 8003526:	461a      	mov	r2, r3
 8003528:	4603      	mov	r3, r0
 800352a:	70fb      	strb	r3, [r7, #3]
 800352c:	460b      	mov	r3, r1
 800352e:	803b      	strh	r3, [r7, #0]
 8003530:	4613      	mov	r3, r2
 8003532:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003534:	2300      	movs	r3, #0
 8003536:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003538:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800353c:	2b00      	cmp	r3, #0
 800353e:	da0f      	bge.n	8003560 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003540:	78fb      	ldrb	r3, [r7, #3]
 8003542:	f003 020f 	and.w	r2, r3, #15
 8003546:	4613      	mov	r3, r2
 8003548:	00db      	lsls	r3, r3, #3
 800354a:	1a9b      	subs	r3, r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	3338      	adds	r3, #56	; 0x38
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	4413      	add	r3, r2
 8003554:	3304      	adds	r3, #4
 8003556:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2201      	movs	r2, #1
 800355c:	705a      	strb	r2, [r3, #1]
 800355e:	e00f      	b.n	8003580 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003560:	78fb      	ldrb	r3, [r7, #3]
 8003562:	f003 020f 	and.w	r2, r3, #15
 8003566:	4613      	mov	r3, r2
 8003568:	00db      	lsls	r3, r3, #3
 800356a:	1a9b      	subs	r3, r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	4413      	add	r3, r2
 8003576:	3304      	adds	r3, #4
 8003578:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003580:	78fb      	ldrb	r3, [r7, #3]
 8003582:	f003 030f 	and.w	r3, r3, #15
 8003586:	b2da      	uxtb	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800358c:	883a      	ldrh	r2, [r7, #0]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	78ba      	ldrb	r2, [r7, #2]
 8003596:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	785b      	ldrb	r3, [r3, #1]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d004      	beq.n	80035aa <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	b29a      	uxth	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80035aa:	78bb      	ldrb	r3, [r7, #2]
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d102      	bne.n	80035b6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d101      	bne.n	80035c4 <HAL_PCD_EP_Open+0xaa>
 80035c0:	2302      	movs	r3, #2
 80035c2:	e00e      	b.n	80035e2 <HAL_PCD_EP_Open+0xc8>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68f9      	ldr	r1, [r7, #12]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f002 ff3a 	bl	800644c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80035e0:	7afb      	ldrb	r3, [r7, #11]
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3710      	adds	r7, #16
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}

080035ea <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b084      	sub	sp, #16
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
 80035f2:	460b      	mov	r3, r1
 80035f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80035f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	da0f      	bge.n	800361e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035fe:	78fb      	ldrb	r3, [r7, #3]
 8003600:	f003 020f 	and.w	r2, r3, #15
 8003604:	4613      	mov	r3, r2
 8003606:	00db      	lsls	r3, r3, #3
 8003608:	1a9b      	subs	r3, r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	3338      	adds	r3, #56	; 0x38
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	4413      	add	r3, r2
 8003612:	3304      	adds	r3, #4
 8003614:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2201      	movs	r2, #1
 800361a:	705a      	strb	r2, [r3, #1]
 800361c:	e00f      	b.n	800363e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800361e:	78fb      	ldrb	r3, [r7, #3]
 8003620:	f003 020f 	and.w	r2, r3, #15
 8003624:	4613      	mov	r3, r2
 8003626:	00db      	lsls	r3, r3, #3
 8003628:	1a9b      	subs	r3, r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	4413      	add	r3, r2
 8003634:	3304      	adds	r3, #4
 8003636:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2200      	movs	r2, #0
 800363c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800363e:	78fb      	ldrb	r3, [r7, #3]
 8003640:	f003 030f 	and.w	r3, r3, #15
 8003644:	b2da      	uxtb	r2, r3
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003650:	2b01      	cmp	r3, #1
 8003652:	d101      	bne.n	8003658 <HAL_PCD_EP_Close+0x6e>
 8003654:	2302      	movs	r3, #2
 8003656:	e00e      	b.n	8003676 <HAL_PCD_EP_Close+0x8c>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68f9      	ldr	r1, [r7, #12]
 8003666:	4618      	mov	r0, r3
 8003668:	f002 ff78 	bl	800655c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}

0800367e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800367e:	b580      	push	{r7, lr}
 8003680:	b086      	sub	sp, #24
 8003682:	af00      	add	r7, sp, #0
 8003684:	60f8      	str	r0, [r7, #12]
 8003686:	607a      	str	r2, [r7, #4]
 8003688:	603b      	str	r3, [r7, #0]
 800368a:	460b      	mov	r3, r1
 800368c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800368e:	7afb      	ldrb	r3, [r7, #11]
 8003690:	f003 020f 	and.w	r2, r3, #15
 8003694:	4613      	mov	r3, r2
 8003696:	00db      	lsls	r3, r3, #3
 8003698:	1a9b      	subs	r3, r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	4413      	add	r3, r2
 80036a4:	3304      	adds	r3, #4
 80036a6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	2200      	movs	r2, #0
 80036b8:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	2200      	movs	r2, #0
 80036be:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036c0:	7afb      	ldrb	r3, [r7, #11]
 80036c2:	f003 030f 	and.w	r3, r3, #15
 80036c6:	b2da      	uxtb	r2, r3
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d102      	bne.n	80036da <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80036da:	7afb      	ldrb	r3, [r7, #11]
 80036dc:	f003 030f 	and.w	r3, r3, #15
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d109      	bne.n	80036f8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6818      	ldr	r0, [r3, #0]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	461a      	mov	r2, r3
 80036f0:	6979      	ldr	r1, [r7, #20]
 80036f2:	f003 fa53 	bl	8006b9c <USB_EP0StartXfer>
 80036f6:	e008      	b.n	800370a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6818      	ldr	r0, [r3, #0]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	691b      	ldr	r3, [r3, #16]
 8003700:	b2db      	uxtb	r3, r3
 8003702:	461a      	mov	r2, r3
 8003704:	6979      	ldr	r1, [r7, #20]
 8003706:	f003 f805 	bl	8006714 <USB_EPStartXfer>
  }

  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	3718      	adds	r7, #24
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	460b      	mov	r3, r1
 800371e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003720:	78fb      	ldrb	r3, [r7, #3]
 8003722:	f003 020f 	and.w	r2, r3, #15
 8003726:	6879      	ldr	r1, [r7, #4]
 8003728:	4613      	mov	r3, r2
 800372a:	00db      	lsls	r3, r3, #3
 800372c:	1a9b      	subs	r3, r3, r2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	440b      	add	r3, r1
 8003732:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003736:	681b      	ldr	r3, [r3, #0]
}
 8003738:	4618      	mov	r0, r3
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b086      	sub	sp, #24
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	607a      	str	r2, [r7, #4]
 800374e:	603b      	str	r3, [r7, #0]
 8003750:	460b      	mov	r3, r1
 8003752:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003754:	7afb      	ldrb	r3, [r7, #11]
 8003756:	f003 020f 	and.w	r2, r3, #15
 800375a:	4613      	mov	r3, r2
 800375c:	00db      	lsls	r3, r3, #3
 800375e:	1a9b      	subs	r3, r3, r2
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	3338      	adds	r3, #56	; 0x38
 8003764:	68fa      	ldr	r2, [r7, #12]
 8003766:	4413      	add	r3, r2
 8003768:	3304      	adds	r3, #4
 800376a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	683a      	ldr	r2, [r7, #0]
 8003776:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	2200      	movs	r2, #0
 800377c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	2201      	movs	r2, #1
 8003782:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003784:	7afb      	ldrb	r3, [r7, #11]
 8003786:	f003 030f 	and.w	r3, r3, #15
 800378a:	b2da      	uxtb	r2, r3
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	2b01      	cmp	r3, #1
 8003796:	d102      	bne.n	800379e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800379e:	7afb      	ldrb	r3, [r7, #11]
 80037a0:	f003 030f 	and.w	r3, r3, #15
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d109      	bne.n	80037bc <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6818      	ldr	r0, [r3, #0]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	461a      	mov	r2, r3
 80037b4:	6979      	ldr	r1, [r7, #20]
 80037b6:	f003 f9f1 	bl	8006b9c <USB_EP0StartXfer>
 80037ba:	e008      	b.n	80037ce <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6818      	ldr	r0, [r3, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	691b      	ldr	r3, [r3, #16]
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	461a      	mov	r2, r3
 80037c8:	6979      	ldr	r1, [r7, #20]
 80037ca:	f002 ffa3 	bl	8006714 <USB_EPStartXfer>
  }

  return HAL_OK;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3718      	adds	r7, #24
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	460b      	mov	r3, r1
 80037e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80037e4:	78fb      	ldrb	r3, [r7, #3]
 80037e6:	f003 020f 	and.w	r2, r3, #15
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d901      	bls.n	80037f6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e050      	b.n	8003898 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80037f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	da0f      	bge.n	800381e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037fe:	78fb      	ldrb	r3, [r7, #3]
 8003800:	f003 020f 	and.w	r2, r3, #15
 8003804:	4613      	mov	r3, r2
 8003806:	00db      	lsls	r3, r3, #3
 8003808:	1a9b      	subs	r3, r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	3338      	adds	r3, #56	; 0x38
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	4413      	add	r3, r2
 8003812:	3304      	adds	r3, #4
 8003814:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2201      	movs	r2, #1
 800381a:	705a      	strb	r2, [r3, #1]
 800381c:	e00d      	b.n	800383a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800381e:	78fa      	ldrb	r2, [r7, #3]
 8003820:	4613      	mov	r3, r2
 8003822:	00db      	lsls	r3, r3, #3
 8003824:	1a9b      	subs	r3, r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	4413      	add	r3, r2
 8003830:	3304      	adds	r3, #4
 8003832:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2201      	movs	r2, #1
 800383e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003840:	78fb      	ldrb	r3, [r7, #3]
 8003842:	f003 030f 	and.w	r3, r3, #15
 8003846:	b2da      	uxtb	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003852:	2b01      	cmp	r3, #1
 8003854:	d101      	bne.n	800385a <HAL_PCD_EP_SetStall+0x82>
 8003856:	2302      	movs	r3, #2
 8003858:	e01e      	b.n	8003898 <HAL_PCD_EP_SetStall+0xc0>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2201      	movs	r2, #1
 800385e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68f9      	ldr	r1, [r7, #12]
 8003868:	4618      	mov	r0, r3
 800386a:	f003 fb80 	bl	8006f6e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800386e:	78fb      	ldrb	r3, [r7, #3]
 8003870:	f003 030f 	and.w	r3, r3, #15
 8003874:	2b00      	cmp	r3, #0
 8003876:	d10a      	bne.n	800388e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6818      	ldr	r0, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	691b      	ldr	r3, [r3, #16]
 8003880:	b2d9      	uxtb	r1, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003888:	461a      	mov	r2, r3
 800388a:	f003 fd71 	bl	8007370 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003896:	2300      	movs	r3, #0
}
 8003898:	4618      	mov	r0, r3
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	460b      	mov	r3, r1
 80038aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80038ac:	78fb      	ldrb	r3, [r7, #3]
 80038ae:	f003 020f 	and.w	r2, r3, #15
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d901      	bls.n	80038be <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e042      	b.n	8003944 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80038be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	da0f      	bge.n	80038e6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038c6:	78fb      	ldrb	r3, [r7, #3]
 80038c8:	f003 020f 	and.w	r2, r3, #15
 80038cc:	4613      	mov	r3, r2
 80038ce:	00db      	lsls	r3, r3, #3
 80038d0:	1a9b      	subs	r3, r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	3338      	adds	r3, #56	; 0x38
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	4413      	add	r3, r2
 80038da:	3304      	adds	r3, #4
 80038dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2201      	movs	r2, #1
 80038e2:	705a      	strb	r2, [r3, #1]
 80038e4:	e00f      	b.n	8003906 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038e6:	78fb      	ldrb	r3, [r7, #3]
 80038e8:	f003 020f 	and.w	r2, r3, #15
 80038ec:	4613      	mov	r3, r2
 80038ee:	00db      	lsls	r3, r3, #3
 80038f0:	1a9b      	subs	r3, r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	4413      	add	r3, r2
 80038fc:	3304      	adds	r3, #4
 80038fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800390c:	78fb      	ldrb	r3, [r7, #3]
 800390e:	f003 030f 	and.w	r3, r3, #15
 8003912:	b2da      	uxtb	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800391e:	2b01      	cmp	r3, #1
 8003920:	d101      	bne.n	8003926 <HAL_PCD_EP_ClrStall+0x86>
 8003922:	2302      	movs	r3, #2
 8003924:	e00e      	b.n	8003944 <HAL_PCD_EP_ClrStall+0xa4>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2201      	movs	r2, #1
 800392a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68f9      	ldr	r1, [r7, #12]
 8003934:	4618      	mov	r0, r3
 8003936:	f003 fb88 	bl	800704a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	4618      	mov	r0, r3
 8003946:	3710      	adds	r7, #16
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b08a      	sub	sp, #40	; 0x28
 8003950:	af02      	add	r7, sp, #8
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003960:	683a      	ldr	r2, [r7, #0]
 8003962:	4613      	mov	r3, r2
 8003964:	00db      	lsls	r3, r3, #3
 8003966:	1a9b      	subs	r3, r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	3338      	adds	r3, #56	; 0x38
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	4413      	add	r3, r2
 8003970:	3304      	adds	r3, #4
 8003972:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	699a      	ldr	r2, [r3, #24]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	695b      	ldr	r3, [r3, #20]
 800397c:	429a      	cmp	r2, r3
 800397e:	d901      	bls.n	8003984 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e06c      	b.n	8003a5e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	695a      	ldr	r2, [r3, #20]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	699b      	ldr	r3, [r3, #24]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	69fa      	ldr	r2, [r7, #28]
 8003996:	429a      	cmp	r2, r3
 8003998:	d902      	bls.n	80039a0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	3303      	adds	r3, #3
 80039a4:	089b      	lsrs	r3, r3, #2
 80039a6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80039a8:	e02b      	b.n	8003a02 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	695a      	ldr	r2, [r3, #20]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	69fa      	ldr	r2, [r7, #28]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d902      	bls.n	80039c6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	3303      	adds	r3, #3
 80039ca:	089b      	lsrs	r3, r3, #2
 80039cc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	68d9      	ldr	r1, [r3, #12]
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	b2da      	uxtb	r2, r3
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	9300      	str	r3, [sp, #0]
 80039e2:	4603      	mov	r3, r0
 80039e4:	6978      	ldr	r0, [r7, #20]
 80039e6:	f003 fa2c 	bl	8006e42 <USB_WritePacket>

    ep->xfer_buff  += len;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	68da      	ldr	r2, [r3, #12]
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	441a      	add	r2, r3
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	699a      	ldr	r2, [r3, #24]
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	441a      	add	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	015a      	lsls	r2, r3, #5
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	4413      	add	r3, r2
 8003a0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	69ba      	ldr	r2, [r7, #24]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d809      	bhi.n	8003a2c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	699a      	ldr	r2, [r3, #24]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d203      	bcs.n	8003a2c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	695b      	ldr	r3, [r3, #20]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1be      	bne.n	80039aa <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	695a      	ldr	r2, [r3, #20]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	699b      	ldr	r3, [r3, #24]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d811      	bhi.n	8003a5c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	f003 030f 	and.w	r3, r3, #15
 8003a3e:	2201      	movs	r2, #1
 8003a40:	fa02 f303 	lsl.w	r3, r2, r3
 8003a44:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	43db      	mvns	r3, r3
 8003a52:	6939      	ldr	r1, [r7, #16]
 8003a54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a58:	4013      	ands	r3, r2
 8003a5a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3720      	adds	r7, #32
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
	...

08003a68 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b086      	sub	sp, #24
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	333c      	adds	r3, #60	; 0x3c
 8003a80:	3304      	adds	r3, #4
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	015a      	lsls	r2, r3, #5
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	f040 80a0 	bne.w	8003be0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	f003 0308 	and.w	r3, r3, #8
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d015      	beq.n	8003ad6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	4a72      	ldr	r2, [pc, #456]	; (8003c78 <PCD_EP_OutXfrComplete_int+0x210>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	f240 80dd 	bls.w	8003c6e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	f000 80d7 	beq.w	8003c6e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	015a      	lsls	r2, r3, #5
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003acc:	461a      	mov	r2, r3
 8003ace:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ad2:	6093      	str	r3, [r2, #8]
 8003ad4:	e0cb      	b.n	8003c6e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	f003 0320 	and.w	r3, r3, #32
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d009      	beq.n	8003af4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	015a      	lsls	r2, r3, #5
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aec:	461a      	mov	r2, r3
 8003aee:	2320      	movs	r3, #32
 8003af0:	6093      	str	r3, [r2, #8]
 8003af2:	e0bc      	b.n	8003c6e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	f040 80b7 	bne.w	8003c6e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	4a5d      	ldr	r2, [pc, #372]	; (8003c78 <PCD_EP_OutXfrComplete_int+0x210>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d90f      	bls.n	8003b28 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00a      	beq.n	8003b28 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	015a      	lsls	r2, r3, #5
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	4413      	add	r3, r2
 8003b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b1e:	461a      	mov	r2, r3
 8003b20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b24:	6093      	str	r3, [r2, #8]
 8003b26:	e0a2      	b.n	8003c6e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003b28:	6879      	ldr	r1, [r7, #4]
 8003b2a:	683a      	ldr	r2, [r7, #0]
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	00db      	lsls	r3, r3, #3
 8003b30:	1a9b      	subs	r3, r3, r2
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	440b      	add	r3, r1
 8003b36:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003b3a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	0159      	lsls	r1, r3, #5
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	440b      	add	r3, r1
 8003b44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003b4e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	683a      	ldr	r2, [r7, #0]
 8003b54:	4613      	mov	r3, r2
 8003b56:	00db      	lsls	r3, r3, #3
 8003b58:	1a9b      	subs	r3, r3, r2
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	4403      	add	r3, r0
 8003b5e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003b62:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003b64:	6879      	ldr	r1, [r7, #4]
 8003b66:	683a      	ldr	r2, [r7, #0]
 8003b68:	4613      	mov	r3, r2
 8003b6a:	00db      	lsls	r3, r3, #3
 8003b6c:	1a9b      	subs	r3, r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	440b      	add	r3, r1
 8003b72:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003b76:	6819      	ldr	r1, [r3, #0]
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	683a      	ldr	r2, [r7, #0]
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	00db      	lsls	r3, r3, #3
 8003b80:	1a9b      	subs	r3, r3, r2
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	4403      	add	r3, r0
 8003b86:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4419      	add	r1, r3
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	683a      	ldr	r2, [r7, #0]
 8003b92:	4613      	mov	r3, r2
 8003b94:	00db      	lsls	r3, r3, #3
 8003b96:	1a9b      	subs	r3, r3, r2
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	4403      	add	r3, r0
 8003b9c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003ba0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d114      	bne.n	8003bd2 <PCD_EP_OutXfrComplete_int+0x16a>
 8003ba8:	6879      	ldr	r1, [r7, #4]
 8003baa:	683a      	ldr	r2, [r7, #0]
 8003bac:	4613      	mov	r3, r2
 8003bae:	00db      	lsls	r3, r3, #3
 8003bb0:	1a9b      	subs	r3, r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	440b      	add	r3, r1
 8003bb6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d108      	bne.n	8003bd2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6818      	ldr	r0, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003bca:	461a      	mov	r2, r3
 8003bcc:	2101      	movs	r1, #1
 8003bce:	f003 fbcf 	bl	8007370 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f012 fe5d 	bl	8016898 <HAL_PCD_DataOutStageCallback>
 8003bde:	e046      	b.n	8003c6e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	4a26      	ldr	r2, [pc, #152]	; (8003c7c <PCD_EP_OutXfrComplete_int+0x214>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d124      	bne.n	8003c32 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00a      	beq.n	8003c08 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	015a      	lsls	r2, r3, #5
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bfe:	461a      	mov	r2, r3
 8003c00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c04:	6093      	str	r3, [r2, #8]
 8003c06:	e032      	b.n	8003c6e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	f003 0320 	and.w	r3, r3, #32
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d008      	beq.n	8003c24 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	015a      	lsls	r2, r3, #5
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	4413      	add	r3, r2
 8003c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c1e:	461a      	mov	r2, r3
 8003c20:	2320      	movs	r3, #32
 8003c22:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	4619      	mov	r1, r3
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f012 fe34 	bl	8016898 <HAL_PCD_DataOutStageCallback>
 8003c30:	e01d      	b.n	8003c6e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d114      	bne.n	8003c62 <PCD_EP_OutXfrComplete_int+0x1fa>
 8003c38:	6879      	ldr	r1, [r7, #4]
 8003c3a:	683a      	ldr	r2, [r7, #0]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	00db      	lsls	r3, r3, #3
 8003c40:	1a9b      	subs	r3, r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	440b      	add	r3, r1
 8003c46:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d108      	bne.n	8003c62 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6818      	ldr	r0, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	2100      	movs	r1, #0
 8003c5e:	f003 fb87 	bl	8007370 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	4619      	mov	r1, r3
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f012 fe15 	bl	8016898 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003c6e:	2300      	movs	r3, #0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3718      	adds	r7, #24
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	4f54300a 	.word	0x4f54300a
 8003c7c:	4f54310a 	.word	0x4f54310a

08003c80 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b086      	sub	sp, #24
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	333c      	adds	r3, #60	; 0x3c
 8003c98:	3304      	adds	r3, #4
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	015a      	lsls	r2, r3, #5
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	4a15      	ldr	r2, [pc, #84]	; (8003d08 <PCD_EP_OutSetupPacket_int+0x88>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d90e      	bls.n	8003cd4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d009      	beq.n	8003cd4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	015a      	lsls	r2, r3, #5
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ccc:	461a      	mov	r2, r3
 8003cce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cd2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f012 fdcd 	bl	8016874 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	4a0a      	ldr	r2, [pc, #40]	; (8003d08 <PCD_EP_OutSetupPacket_int+0x88>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d90c      	bls.n	8003cfc <PCD_EP_OutSetupPacket_int+0x7c>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d108      	bne.n	8003cfc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6818      	ldr	r0, [r3, #0]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	2101      	movs	r1, #1
 8003cf8:	f003 fb3a 	bl	8007370 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3718      	adds	r7, #24
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	4f54300a 	.word	0x4f54300a

08003d0c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b085      	sub	sp, #20
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	460b      	mov	r3, r1
 8003d16:	70fb      	strb	r3, [r7, #3]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d22:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003d24:	78fb      	ldrb	r3, [r7, #3]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d107      	bne.n	8003d3a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003d2a:	883b      	ldrh	r3, [r7, #0]
 8003d2c:	0419      	lsls	r1, r3, #16
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68ba      	ldr	r2, [r7, #8]
 8003d34:	430a      	orrs	r2, r1
 8003d36:	629a      	str	r2, [r3, #40]	; 0x28
 8003d38:	e028      	b.n	8003d8c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d40:	0c1b      	lsrs	r3, r3, #16
 8003d42:	68ba      	ldr	r2, [r7, #8]
 8003d44:	4413      	add	r3, r2
 8003d46:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003d48:	2300      	movs	r3, #0
 8003d4a:	73fb      	strb	r3, [r7, #15]
 8003d4c:	e00d      	b.n	8003d6a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	7bfb      	ldrb	r3, [r7, #15]
 8003d54:	3340      	adds	r3, #64	; 0x40
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	4413      	add	r3, r2
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	0c1b      	lsrs	r3, r3, #16
 8003d5e:	68ba      	ldr	r2, [r7, #8]
 8003d60:	4413      	add	r3, r2
 8003d62:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003d64:	7bfb      	ldrb	r3, [r7, #15]
 8003d66:	3301      	adds	r3, #1
 8003d68:	73fb      	strb	r3, [r7, #15]
 8003d6a:	7bfa      	ldrb	r2, [r7, #15]
 8003d6c:	78fb      	ldrb	r3, [r7, #3]
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d3ec      	bcc.n	8003d4e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003d74:	883b      	ldrh	r3, [r7, #0]
 8003d76:	0418      	lsls	r0, r3, #16
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6819      	ldr	r1, [r3, #0]
 8003d7c:	78fb      	ldrb	r3, [r7, #3]
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	68ba      	ldr	r2, [r7, #8]
 8003d82:	4302      	orrs	r2, r0
 8003d84:	3340      	adds	r3, #64	; 0x40
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	440b      	add	r3, r1
 8003d8a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3714      	adds	r7, #20
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr

08003d9a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003d9a:	b480      	push	{r7}
 8003d9c:	b083      	sub	sp, #12
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
 8003da2:	460b      	mov	r3, r1
 8003da4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	887a      	ldrh	r2, [r7, #2]
 8003dac:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003dc8:	bf00      	nop
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b086      	sub	sp, #24
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d101      	bne.n	8003de6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e264      	b.n	80042b0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0301 	and.w	r3, r3, #1
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d075      	beq.n	8003ede <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003df2:	4ba3      	ldr	r3, [pc, #652]	; (8004080 <HAL_RCC_OscConfig+0x2ac>)
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f003 030c 	and.w	r3, r3, #12
 8003dfa:	2b04      	cmp	r3, #4
 8003dfc:	d00c      	beq.n	8003e18 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dfe:	4ba0      	ldr	r3, [pc, #640]	; (8004080 <HAL_RCC_OscConfig+0x2ac>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e06:	2b08      	cmp	r3, #8
 8003e08:	d112      	bne.n	8003e30 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e0a:	4b9d      	ldr	r3, [pc, #628]	; (8004080 <HAL_RCC_OscConfig+0x2ac>)
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e16:	d10b      	bne.n	8003e30 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e18:	4b99      	ldr	r3, [pc, #612]	; (8004080 <HAL_RCC_OscConfig+0x2ac>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d05b      	beq.n	8003edc <HAL_RCC_OscConfig+0x108>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d157      	bne.n	8003edc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e23f      	b.n	80042b0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e38:	d106      	bne.n	8003e48 <HAL_RCC_OscConfig+0x74>
 8003e3a:	4b91      	ldr	r3, [pc, #580]	; (8004080 <HAL_RCC_OscConfig+0x2ac>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a90      	ldr	r2, [pc, #576]	; (8004080 <HAL_RCC_OscConfig+0x2ac>)
 8003e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e44:	6013      	str	r3, [r2, #0]
 8003e46:	e01d      	b.n	8003e84 <HAL_RCC_OscConfig+0xb0>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e50:	d10c      	bne.n	8003e6c <HAL_RCC_OscConfig+0x98>
 8003e52:	4b8b      	ldr	r3, [pc, #556]	; (8004080 <HAL_RCC_OscConfig+0x2ac>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a8a      	ldr	r2, [pc, #552]	; (8004080 <HAL_RCC_OscConfig+0x2ac>)
 8003e58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e5c:	6013      	str	r3, [r2, #0]
 8003e5e:	4b88      	ldr	r3, [pc, #544]	; (8004080 <HAL_RCC_OscConfig+0x2ac>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a87      	ldr	r2, [pc, #540]	; (8004080 <HAL_RCC_OscConfig+0x2ac>)
 8003e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e68:	6013      	str	r3, [r2, #0]
 8003e6a:	e00b      	b.n	8003e84 <HAL_RCC_OscConfig+0xb0>
 8003e6c:	4b84      	ldr	r3, [pc, #528]	; (8004080 <HAL_RCC_OscConfig+0x2ac>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a83      	ldr	r2, [pc, #524]	; (8004080 <HAL_RCC_OscConfig+0x2ac>)
 8003e72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e76:	6013      	str	r3, [r2, #0]
 8003e78:	4b81      	ldr	r3, [pc, #516]	; (8004080 <HAL_RCC_OscConfig+0x2ac>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a80      	ldr	r2, [pc, #512]	; (8004080 <HAL_RCC_OscConfig+0x2ac>)
 8003e7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d013      	beq.n	8003eb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e8c:	f7fd fb2c 	bl	80014e8 <HAL_GetTick>
 8003e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e92:	e008      	b.n	8003ea6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e94:	f7fd fb28 	bl	80014e8 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	2b64      	cmp	r3, #100	; 0x64
 8003ea0:	d901      	bls.n	8003ea6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e204      	b.n	80042b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ea6:	4b76      	ldr	r3, [pc, #472]	; (8004080 <HAL_RCC_OscConfig+0x2ac>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d0f0      	beq.n	8003e94 <HAL_RCC_OscConfig+0xc0>
 8003eb2:	e014      	b.n	8003ede <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb4:	f7fd fb18 	bl	80014e8 <HAL_GetTick>
 8003eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eba:	e008      	b.n	8003ece <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ebc:	f7fd fb14 	bl	80014e8 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b64      	cmp	r3, #100	; 0x64
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e1f0      	b.n	80042b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ece:	4b6c      	ldr	r3, [pc, #432]	; (8004080 <HAL_RCC_OscConfig+0x2ac>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1f0      	bne.n	8003ebc <HAL_RCC_OscConfig+0xe8>
 8003eda:	e000      	b.n	8003ede <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003edc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d063      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003eea:	4b65      	ldr	r3, [pc, #404]	; (8004080 <HAL_RCC_OscConfig+0x2ac>)
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f003 030c 	and.w	r3, r3, #12
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00b      	beq.n	8003f0e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ef6:	4b62      	ldr	r3, [pc, #392]	; (8004080 <HAL_RCC_OscConfig+0x2ac>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003efe:	2b08      	cmp	r3, #8
 8003f00:	d11c      	bne.n	8003f3c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f02:	4b5f      	ldr	r3, [pc, #380]	; (8004080 <HAL_RCC_OscConfig+0x2ac>)
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d116      	bne.n	8003f3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f0e:	4b5c      	ldr	r3, [pc, #368]	; (8004080 <HAL_RCC_OscConfig+0x2ac>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d005      	beq.n	8003f26 <HAL_RCC_OscConfig+0x152>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d001      	beq.n	8003f26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e1c4      	b.n	80042b0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f26:	4b56      	ldr	r3, [pc, #344]	; (8004080 <HAL_RCC_OscConfig+0x2ac>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	00db      	lsls	r3, r3, #3
 8003f34:	4952      	ldr	r1, [pc, #328]	; (8004080 <HAL_RCC_OscConfig+0x2ac>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f3a:	e03a      	b.n	8003fb2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d020      	beq.n	8003f86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f44:	4b4f      	ldr	r3, [pc, #316]	; (8004084 <HAL_RCC_OscConfig+0x2b0>)
 8003f46:	2201      	movs	r2, #1
 8003f48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f4a:	f7fd facd 	bl	80014e8 <HAL_GetTick>
 8003f4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f50:	e008      	b.n	8003f64 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f52:	f7fd fac9 	bl	80014e8 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d901      	bls.n	8003f64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e1a5      	b.n	80042b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f64:	4b46      	ldr	r3, [pc, #280]	; (8004080 <HAL_RCC_OscConfig+0x2ac>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0302 	and.w	r3, r3, #2
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d0f0      	beq.n	8003f52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f70:	4b43      	ldr	r3, [pc, #268]	; (8004080 <HAL_RCC_OscConfig+0x2ac>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	00db      	lsls	r3, r3, #3
 8003f7e:	4940      	ldr	r1, [pc, #256]	; (8004080 <HAL_RCC_OscConfig+0x2ac>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	600b      	str	r3, [r1, #0]
 8003f84:	e015      	b.n	8003fb2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f86:	4b3f      	ldr	r3, [pc, #252]	; (8004084 <HAL_RCC_OscConfig+0x2b0>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f8c:	f7fd faac 	bl	80014e8 <HAL_GetTick>
 8003f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f92:	e008      	b.n	8003fa6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f94:	f7fd faa8 	bl	80014e8 <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e184      	b.n	80042b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fa6:	4b36      	ldr	r3, [pc, #216]	; (8004080 <HAL_RCC_OscConfig+0x2ac>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1f0      	bne.n	8003f94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0308 	and.w	r3, r3, #8
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d030      	beq.n	8004020 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d016      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fc6:	4b30      	ldr	r3, [pc, #192]	; (8004088 <HAL_RCC_OscConfig+0x2b4>)
 8003fc8:	2201      	movs	r2, #1
 8003fca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fcc:	f7fd fa8c 	bl	80014e8 <HAL_GetTick>
 8003fd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fd2:	e008      	b.n	8003fe6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fd4:	f7fd fa88 	bl	80014e8 <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d901      	bls.n	8003fe6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e164      	b.n	80042b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fe6:	4b26      	ldr	r3, [pc, #152]	; (8004080 <HAL_RCC_OscConfig+0x2ac>)
 8003fe8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fea:	f003 0302 	and.w	r3, r3, #2
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d0f0      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x200>
 8003ff2:	e015      	b.n	8004020 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ff4:	4b24      	ldr	r3, [pc, #144]	; (8004088 <HAL_RCC_OscConfig+0x2b4>)
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ffa:	f7fd fa75 	bl	80014e8 <HAL_GetTick>
 8003ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004000:	e008      	b.n	8004014 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004002:	f7fd fa71 	bl	80014e8 <HAL_GetTick>
 8004006:	4602      	mov	r2, r0
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	2b02      	cmp	r3, #2
 800400e:	d901      	bls.n	8004014 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	e14d      	b.n	80042b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004014:	4b1a      	ldr	r3, [pc, #104]	; (8004080 <HAL_RCC_OscConfig+0x2ac>)
 8004016:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004018:	f003 0302 	and.w	r3, r3, #2
 800401c:	2b00      	cmp	r3, #0
 800401e:	d1f0      	bne.n	8004002 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0304 	and.w	r3, r3, #4
 8004028:	2b00      	cmp	r3, #0
 800402a:	f000 80a0 	beq.w	800416e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800402e:	2300      	movs	r3, #0
 8004030:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004032:	4b13      	ldr	r3, [pc, #76]	; (8004080 <HAL_RCC_OscConfig+0x2ac>)
 8004034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d10f      	bne.n	800405e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800403e:	2300      	movs	r3, #0
 8004040:	60bb      	str	r3, [r7, #8]
 8004042:	4b0f      	ldr	r3, [pc, #60]	; (8004080 <HAL_RCC_OscConfig+0x2ac>)
 8004044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004046:	4a0e      	ldr	r2, [pc, #56]	; (8004080 <HAL_RCC_OscConfig+0x2ac>)
 8004048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800404c:	6413      	str	r3, [r2, #64]	; 0x40
 800404e:	4b0c      	ldr	r3, [pc, #48]	; (8004080 <HAL_RCC_OscConfig+0x2ac>)
 8004050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004056:	60bb      	str	r3, [r7, #8]
 8004058:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800405a:	2301      	movs	r3, #1
 800405c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800405e:	4b0b      	ldr	r3, [pc, #44]	; (800408c <HAL_RCC_OscConfig+0x2b8>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004066:	2b00      	cmp	r3, #0
 8004068:	d121      	bne.n	80040ae <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800406a:	4b08      	ldr	r3, [pc, #32]	; (800408c <HAL_RCC_OscConfig+0x2b8>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a07      	ldr	r2, [pc, #28]	; (800408c <HAL_RCC_OscConfig+0x2b8>)
 8004070:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004074:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004076:	f7fd fa37 	bl	80014e8 <HAL_GetTick>
 800407a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800407c:	e011      	b.n	80040a2 <HAL_RCC_OscConfig+0x2ce>
 800407e:	bf00      	nop
 8004080:	40023800 	.word	0x40023800
 8004084:	42470000 	.word	0x42470000
 8004088:	42470e80 	.word	0x42470e80
 800408c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004090:	f7fd fa2a 	bl	80014e8 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b02      	cmp	r3, #2
 800409c:	d901      	bls.n	80040a2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e106      	b.n	80042b0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040a2:	4b85      	ldr	r3, [pc, #532]	; (80042b8 <HAL_RCC_OscConfig+0x4e4>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d0f0      	beq.n	8004090 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d106      	bne.n	80040c4 <HAL_RCC_OscConfig+0x2f0>
 80040b6:	4b81      	ldr	r3, [pc, #516]	; (80042bc <HAL_RCC_OscConfig+0x4e8>)
 80040b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ba:	4a80      	ldr	r2, [pc, #512]	; (80042bc <HAL_RCC_OscConfig+0x4e8>)
 80040bc:	f043 0301 	orr.w	r3, r3, #1
 80040c0:	6713      	str	r3, [r2, #112]	; 0x70
 80040c2:	e01c      	b.n	80040fe <HAL_RCC_OscConfig+0x32a>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	2b05      	cmp	r3, #5
 80040ca:	d10c      	bne.n	80040e6 <HAL_RCC_OscConfig+0x312>
 80040cc:	4b7b      	ldr	r3, [pc, #492]	; (80042bc <HAL_RCC_OscConfig+0x4e8>)
 80040ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d0:	4a7a      	ldr	r2, [pc, #488]	; (80042bc <HAL_RCC_OscConfig+0x4e8>)
 80040d2:	f043 0304 	orr.w	r3, r3, #4
 80040d6:	6713      	str	r3, [r2, #112]	; 0x70
 80040d8:	4b78      	ldr	r3, [pc, #480]	; (80042bc <HAL_RCC_OscConfig+0x4e8>)
 80040da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040dc:	4a77      	ldr	r2, [pc, #476]	; (80042bc <HAL_RCC_OscConfig+0x4e8>)
 80040de:	f043 0301 	orr.w	r3, r3, #1
 80040e2:	6713      	str	r3, [r2, #112]	; 0x70
 80040e4:	e00b      	b.n	80040fe <HAL_RCC_OscConfig+0x32a>
 80040e6:	4b75      	ldr	r3, [pc, #468]	; (80042bc <HAL_RCC_OscConfig+0x4e8>)
 80040e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ea:	4a74      	ldr	r2, [pc, #464]	; (80042bc <HAL_RCC_OscConfig+0x4e8>)
 80040ec:	f023 0301 	bic.w	r3, r3, #1
 80040f0:	6713      	str	r3, [r2, #112]	; 0x70
 80040f2:	4b72      	ldr	r3, [pc, #456]	; (80042bc <HAL_RCC_OscConfig+0x4e8>)
 80040f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f6:	4a71      	ldr	r2, [pc, #452]	; (80042bc <HAL_RCC_OscConfig+0x4e8>)
 80040f8:	f023 0304 	bic.w	r3, r3, #4
 80040fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d015      	beq.n	8004132 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004106:	f7fd f9ef 	bl	80014e8 <HAL_GetTick>
 800410a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800410c:	e00a      	b.n	8004124 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800410e:	f7fd f9eb 	bl	80014e8 <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	f241 3288 	movw	r2, #5000	; 0x1388
 800411c:	4293      	cmp	r3, r2
 800411e:	d901      	bls.n	8004124 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e0c5      	b.n	80042b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004124:	4b65      	ldr	r3, [pc, #404]	; (80042bc <HAL_RCC_OscConfig+0x4e8>)
 8004126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d0ee      	beq.n	800410e <HAL_RCC_OscConfig+0x33a>
 8004130:	e014      	b.n	800415c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004132:	f7fd f9d9 	bl	80014e8 <HAL_GetTick>
 8004136:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004138:	e00a      	b.n	8004150 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800413a:	f7fd f9d5 	bl	80014e8 <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	f241 3288 	movw	r2, #5000	; 0x1388
 8004148:	4293      	cmp	r3, r2
 800414a:	d901      	bls.n	8004150 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e0af      	b.n	80042b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004150:	4b5a      	ldr	r3, [pc, #360]	; (80042bc <HAL_RCC_OscConfig+0x4e8>)
 8004152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004154:	f003 0302 	and.w	r3, r3, #2
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1ee      	bne.n	800413a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800415c:	7dfb      	ldrb	r3, [r7, #23]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d105      	bne.n	800416e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004162:	4b56      	ldr	r3, [pc, #344]	; (80042bc <HAL_RCC_OscConfig+0x4e8>)
 8004164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004166:	4a55      	ldr	r2, [pc, #340]	; (80042bc <HAL_RCC_OscConfig+0x4e8>)
 8004168:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800416c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	2b00      	cmp	r3, #0
 8004174:	f000 809b 	beq.w	80042ae <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004178:	4b50      	ldr	r3, [pc, #320]	; (80042bc <HAL_RCC_OscConfig+0x4e8>)
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f003 030c 	and.w	r3, r3, #12
 8004180:	2b08      	cmp	r3, #8
 8004182:	d05c      	beq.n	800423e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	2b02      	cmp	r3, #2
 800418a:	d141      	bne.n	8004210 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800418c:	4b4c      	ldr	r3, [pc, #304]	; (80042c0 <HAL_RCC_OscConfig+0x4ec>)
 800418e:	2200      	movs	r2, #0
 8004190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004192:	f7fd f9a9 	bl	80014e8 <HAL_GetTick>
 8004196:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004198:	e008      	b.n	80041ac <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800419a:	f7fd f9a5 	bl	80014e8 <HAL_GetTick>
 800419e:	4602      	mov	r2, r0
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d901      	bls.n	80041ac <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e081      	b.n	80042b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ac:	4b43      	ldr	r3, [pc, #268]	; (80042bc <HAL_RCC_OscConfig+0x4e8>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d1f0      	bne.n	800419a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	69da      	ldr	r2, [r3, #28]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a1b      	ldr	r3, [r3, #32]
 80041c0:	431a      	orrs	r2, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c6:	019b      	lsls	r3, r3, #6
 80041c8:	431a      	orrs	r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ce:	085b      	lsrs	r3, r3, #1
 80041d0:	3b01      	subs	r3, #1
 80041d2:	041b      	lsls	r3, r3, #16
 80041d4:	431a      	orrs	r2, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041da:	061b      	lsls	r3, r3, #24
 80041dc:	4937      	ldr	r1, [pc, #220]	; (80042bc <HAL_RCC_OscConfig+0x4e8>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041e2:	4b37      	ldr	r3, [pc, #220]	; (80042c0 <HAL_RCC_OscConfig+0x4ec>)
 80041e4:	2201      	movs	r2, #1
 80041e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041e8:	f7fd f97e 	bl	80014e8 <HAL_GetTick>
 80041ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041ee:	e008      	b.n	8004202 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041f0:	f7fd f97a 	bl	80014e8 <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e056      	b.n	80042b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004202:	4b2e      	ldr	r3, [pc, #184]	; (80042bc <HAL_RCC_OscConfig+0x4e8>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d0f0      	beq.n	80041f0 <HAL_RCC_OscConfig+0x41c>
 800420e:	e04e      	b.n	80042ae <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004210:	4b2b      	ldr	r3, [pc, #172]	; (80042c0 <HAL_RCC_OscConfig+0x4ec>)
 8004212:	2200      	movs	r2, #0
 8004214:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004216:	f7fd f967 	bl	80014e8 <HAL_GetTick>
 800421a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800421c:	e008      	b.n	8004230 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800421e:	f7fd f963 	bl	80014e8 <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	2b02      	cmp	r3, #2
 800422a:	d901      	bls.n	8004230 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e03f      	b.n	80042b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004230:	4b22      	ldr	r3, [pc, #136]	; (80042bc <HAL_RCC_OscConfig+0x4e8>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d1f0      	bne.n	800421e <HAL_RCC_OscConfig+0x44a>
 800423c:	e037      	b.n	80042ae <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	699b      	ldr	r3, [r3, #24]
 8004242:	2b01      	cmp	r3, #1
 8004244:	d101      	bne.n	800424a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e032      	b.n	80042b0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800424a:	4b1c      	ldr	r3, [pc, #112]	; (80042bc <HAL_RCC_OscConfig+0x4e8>)
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	699b      	ldr	r3, [r3, #24]
 8004254:	2b01      	cmp	r3, #1
 8004256:	d028      	beq.n	80042aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004262:	429a      	cmp	r2, r3
 8004264:	d121      	bne.n	80042aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004270:	429a      	cmp	r2, r3
 8004272:	d11a      	bne.n	80042aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800427a:	4013      	ands	r3, r2
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004280:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004282:	4293      	cmp	r3, r2
 8004284:	d111      	bne.n	80042aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004290:	085b      	lsrs	r3, r3, #1
 8004292:	3b01      	subs	r3, #1
 8004294:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004296:	429a      	cmp	r2, r3
 8004298:	d107      	bne.n	80042aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d001      	beq.n	80042ae <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e000      	b.n	80042b0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80042ae:	2300      	movs	r3, #0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3718      	adds	r7, #24
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	40007000 	.word	0x40007000
 80042bc:	40023800 	.word	0x40023800
 80042c0:	42470060 	.word	0x42470060

080042c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d101      	bne.n	80042d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e0cc      	b.n	8004472 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042d8:	4b68      	ldr	r3, [pc, #416]	; (800447c <HAL_RCC_ClockConfig+0x1b8>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0307 	and.w	r3, r3, #7
 80042e0:	683a      	ldr	r2, [r7, #0]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d90c      	bls.n	8004300 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042e6:	4b65      	ldr	r3, [pc, #404]	; (800447c <HAL_RCC_ClockConfig+0x1b8>)
 80042e8:	683a      	ldr	r2, [r7, #0]
 80042ea:	b2d2      	uxtb	r2, r2
 80042ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ee:	4b63      	ldr	r3, [pc, #396]	; (800447c <HAL_RCC_ClockConfig+0x1b8>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0307 	and.w	r3, r3, #7
 80042f6:	683a      	ldr	r2, [r7, #0]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d001      	beq.n	8004300 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e0b8      	b.n	8004472 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0302 	and.w	r3, r3, #2
 8004308:	2b00      	cmp	r3, #0
 800430a:	d020      	beq.n	800434e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0304 	and.w	r3, r3, #4
 8004314:	2b00      	cmp	r3, #0
 8004316:	d005      	beq.n	8004324 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004318:	4b59      	ldr	r3, [pc, #356]	; (8004480 <HAL_RCC_ClockConfig+0x1bc>)
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	4a58      	ldr	r2, [pc, #352]	; (8004480 <HAL_RCC_ClockConfig+0x1bc>)
 800431e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004322:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0308 	and.w	r3, r3, #8
 800432c:	2b00      	cmp	r3, #0
 800432e:	d005      	beq.n	800433c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004330:	4b53      	ldr	r3, [pc, #332]	; (8004480 <HAL_RCC_ClockConfig+0x1bc>)
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	4a52      	ldr	r2, [pc, #328]	; (8004480 <HAL_RCC_ClockConfig+0x1bc>)
 8004336:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800433a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800433c:	4b50      	ldr	r3, [pc, #320]	; (8004480 <HAL_RCC_ClockConfig+0x1bc>)
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	494d      	ldr	r1, [pc, #308]	; (8004480 <HAL_RCC_ClockConfig+0x1bc>)
 800434a:	4313      	orrs	r3, r2
 800434c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	2b00      	cmp	r3, #0
 8004358:	d044      	beq.n	80043e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	2b01      	cmp	r3, #1
 8004360:	d107      	bne.n	8004372 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004362:	4b47      	ldr	r3, [pc, #284]	; (8004480 <HAL_RCC_ClockConfig+0x1bc>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d119      	bne.n	80043a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e07f      	b.n	8004472 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	2b02      	cmp	r3, #2
 8004378:	d003      	beq.n	8004382 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800437e:	2b03      	cmp	r3, #3
 8004380:	d107      	bne.n	8004392 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004382:	4b3f      	ldr	r3, [pc, #252]	; (8004480 <HAL_RCC_ClockConfig+0x1bc>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d109      	bne.n	80043a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e06f      	b.n	8004472 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004392:	4b3b      	ldr	r3, [pc, #236]	; (8004480 <HAL_RCC_ClockConfig+0x1bc>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d101      	bne.n	80043a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e067      	b.n	8004472 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043a2:	4b37      	ldr	r3, [pc, #220]	; (8004480 <HAL_RCC_ClockConfig+0x1bc>)
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f023 0203 	bic.w	r2, r3, #3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	4934      	ldr	r1, [pc, #208]	; (8004480 <HAL_RCC_ClockConfig+0x1bc>)
 80043b0:	4313      	orrs	r3, r2
 80043b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043b4:	f7fd f898 	bl	80014e8 <HAL_GetTick>
 80043b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ba:	e00a      	b.n	80043d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043bc:	f7fd f894 	bl	80014e8 <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e04f      	b.n	8004472 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043d2:	4b2b      	ldr	r3, [pc, #172]	; (8004480 <HAL_RCC_ClockConfig+0x1bc>)
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f003 020c 	and.w	r2, r3, #12
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d1eb      	bne.n	80043bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043e4:	4b25      	ldr	r3, [pc, #148]	; (800447c <HAL_RCC_ClockConfig+0x1b8>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0307 	and.w	r3, r3, #7
 80043ec:	683a      	ldr	r2, [r7, #0]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d20c      	bcs.n	800440c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043f2:	4b22      	ldr	r3, [pc, #136]	; (800447c <HAL_RCC_ClockConfig+0x1b8>)
 80043f4:	683a      	ldr	r2, [r7, #0]
 80043f6:	b2d2      	uxtb	r2, r2
 80043f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043fa:	4b20      	ldr	r3, [pc, #128]	; (800447c <HAL_RCC_ClockConfig+0x1b8>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0307 	and.w	r3, r3, #7
 8004402:	683a      	ldr	r2, [r7, #0]
 8004404:	429a      	cmp	r2, r3
 8004406:	d001      	beq.n	800440c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e032      	b.n	8004472 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0304 	and.w	r3, r3, #4
 8004414:	2b00      	cmp	r3, #0
 8004416:	d008      	beq.n	800442a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004418:	4b19      	ldr	r3, [pc, #100]	; (8004480 <HAL_RCC_ClockConfig+0x1bc>)
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	4916      	ldr	r1, [pc, #88]	; (8004480 <HAL_RCC_ClockConfig+0x1bc>)
 8004426:	4313      	orrs	r3, r2
 8004428:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0308 	and.w	r3, r3, #8
 8004432:	2b00      	cmp	r3, #0
 8004434:	d009      	beq.n	800444a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004436:	4b12      	ldr	r3, [pc, #72]	; (8004480 <HAL_RCC_ClockConfig+0x1bc>)
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	00db      	lsls	r3, r3, #3
 8004444:	490e      	ldr	r1, [pc, #56]	; (8004480 <HAL_RCC_ClockConfig+0x1bc>)
 8004446:	4313      	orrs	r3, r2
 8004448:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800444a:	f000 f821 	bl	8004490 <HAL_RCC_GetSysClockFreq>
 800444e:	4602      	mov	r2, r0
 8004450:	4b0b      	ldr	r3, [pc, #44]	; (8004480 <HAL_RCC_ClockConfig+0x1bc>)
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	091b      	lsrs	r3, r3, #4
 8004456:	f003 030f 	and.w	r3, r3, #15
 800445a:	490a      	ldr	r1, [pc, #40]	; (8004484 <HAL_RCC_ClockConfig+0x1c0>)
 800445c:	5ccb      	ldrb	r3, [r1, r3]
 800445e:	fa22 f303 	lsr.w	r3, r2, r3
 8004462:	4a09      	ldr	r2, [pc, #36]	; (8004488 <HAL_RCC_ClockConfig+0x1c4>)
 8004464:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004466:	4b09      	ldr	r3, [pc, #36]	; (800448c <HAL_RCC_ClockConfig+0x1c8>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4618      	mov	r0, r3
 800446c:	f7fc fe6a 	bl	8001144 <HAL_InitTick>

  return HAL_OK;
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3710      	adds	r7, #16
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	40023c00 	.word	0x40023c00
 8004480:	40023800 	.word	0x40023800
 8004484:	0801ab44 	.word	0x0801ab44
 8004488:	20000000 	.word	0x20000000
 800448c:	20000004 	.word	0x20000004

08004490 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004490:	b5b0      	push	{r4, r5, r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004496:	2100      	movs	r1, #0
 8004498:	6079      	str	r1, [r7, #4]
 800449a:	2100      	movs	r1, #0
 800449c:	60f9      	str	r1, [r7, #12]
 800449e:	2100      	movs	r1, #0
 80044a0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80044a2:	2100      	movs	r1, #0
 80044a4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044a6:	4952      	ldr	r1, [pc, #328]	; (80045f0 <HAL_RCC_GetSysClockFreq+0x160>)
 80044a8:	6889      	ldr	r1, [r1, #8]
 80044aa:	f001 010c 	and.w	r1, r1, #12
 80044ae:	2908      	cmp	r1, #8
 80044b0:	d00d      	beq.n	80044ce <HAL_RCC_GetSysClockFreq+0x3e>
 80044b2:	2908      	cmp	r1, #8
 80044b4:	f200 8094 	bhi.w	80045e0 <HAL_RCC_GetSysClockFreq+0x150>
 80044b8:	2900      	cmp	r1, #0
 80044ba:	d002      	beq.n	80044c2 <HAL_RCC_GetSysClockFreq+0x32>
 80044bc:	2904      	cmp	r1, #4
 80044be:	d003      	beq.n	80044c8 <HAL_RCC_GetSysClockFreq+0x38>
 80044c0:	e08e      	b.n	80045e0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044c2:	4b4c      	ldr	r3, [pc, #304]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x164>)
 80044c4:	60bb      	str	r3, [r7, #8]
       break;
 80044c6:	e08e      	b.n	80045e6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044c8:	4b4b      	ldr	r3, [pc, #300]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x168>)
 80044ca:	60bb      	str	r3, [r7, #8]
      break;
 80044cc:	e08b      	b.n	80045e6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044ce:	4948      	ldr	r1, [pc, #288]	; (80045f0 <HAL_RCC_GetSysClockFreq+0x160>)
 80044d0:	6849      	ldr	r1, [r1, #4]
 80044d2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80044d6:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044d8:	4945      	ldr	r1, [pc, #276]	; (80045f0 <HAL_RCC_GetSysClockFreq+0x160>)
 80044da:	6849      	ldr	r1, [r1, #4]
 80044dc:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80044e0:	2900      	cmp	r1, #0
 80044e2:	d024      	beq.n	800452e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044e4:	4942      	ldr	r1, [pc, #264]	; (80045f0 <HAL_RCC_GetSysClockFreq+0x160>)
 80044e6:	6849      	ldr	r1, [r1, #4]
 80044e8:	0989      	lsrs	r1, r1, #6
 80044ea:	4608      	mov	r0, r1
 80044ec:	f04f 0100 	mov.w	r1, #0
 80044f0:	f240 14ff 	movw	r4, #511	; 0x1ff
 80044f4:	f04f 0500 	mov.w	r5, #0
 80044f8:	ea00 0204 	and.w	r2, r0, r4
 80044fc:	ea01 0305 	and.w	r3, r1, r5
 8004500:	493d      	ldr	r1, [pc, #244]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x168>)
 8004502:	fb01 f003 	mul.w	r0, r1, r3
 8004506:	2100      	movs	r1, #0
 8004508:	fb01 f102 	mul.w	r1, r1, r2
 800450c:	1844      	adds	r4, r0, r1
 800450e:	493a      	ldr	r1, [pc, #232]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x168>)
 8004510:	fba2 0101 	umull	r0, r1, r2, r1
 8004514:	1863      	adds	r3, r4, r1
 8004516:	4619      	mov	r1, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	461a      	mov	r2, r3
 800451c:	f04f 0300 	mov.w	r3, #0
 8004520:	f7fb fea6 	bl	8000270 <__aeabi_uldivmod>
 8004524:	4602      	mov	r2, r0
 8004526:	460b      	mov	r3, r1
 8004528:	4613      	mov	r3, r2
 800452a:	60fb      	str	r3, [r7, #12]
 800452c:	e04a      	b.n	80045c4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800452e:	4b30      	ldr	r3, [pc, #192]	; (80045f0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	099b      	lsrs	r3, r3, #6
 8004534:	461a      	mov	r2, r3
 8004536:	f04f 0300 	mov.w	r3, #0
 800453a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800453e:	f04f 0100 	mov.w	r1, #0
 8004542:	ea02 0400 	and.w	r4, r2, r0
 8004546:	ea03 0501 	and.w	r5, r3, r1
 800454a:	4620      	mov	r0, r4
 800454c:	4629      	mov	r1, r5
 800454e:	f04f 0200 	mov.w	r2, #0
 8004552:	f04f 0300 	mov.w	r3, #0
 8004556:	014b      	lsls	r3, r1, #5
 8004558:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800455c:	0142      	lsls	r2, r0, #5
 800455e:	4610      	mov	r0, r2
 8004560:	4619      	mov	r1, r3
 8004562:	1b00      	subs	r0, r0, r4
 8004564:	eb61 0105 	sbc.w	r1, r1, r5
 8004568:	f04f 0200 	mov.w	r2, #0
 800456c:	f04f 0300 	mov.w	r3, #0
 8004570:	018b      	lsls	r3, r1, #6
 8004572:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004576:	0182      	lsls	r2, r0, #6
 8004578:	1a12      	subs	r2, r2, r0
 800457a:	eb63 0301 	sbc.w	r3, r3, r1
 800457e:	f04f 0000 	mov.w	r0, #0
 8004582:	f04f 0100 	mov.w	r1, #0
 8004586:	00d9      	lsls	r1, r3, #3
 8004588:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800458c:	00d0      	lsls	r0, r2, #3
 800458e:	4602      	mov	r2, r0
 8004590:	460b      	mov	r3, r1
 8004592:	1912      	adds	r2, r2, r4
 8004594:	eb45 0303 	adc.w	r3, r5, r3
 8004598:	f04f 0000 	mov.w	r0, #0
 800459c:	f04f 0100 	mov.w	r1, #0
 80045a0:	0299      	lsls	r1, r3, #10
 80045a2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80045a6:	0290      	lsls	r0, r2, #10
 80045a8:	4602      	mov	r2, r0
 80045aa:	460b      	mov	r3, r1
 80045ac:	4610      	mov	r0, r2
 80045ae:	4619      	mov	r1, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	461a      	mov	r2, r3
 80045b4:	f04f 0300 	mov.w	r3, #0
 80045b8:	f7fb fe5a 	bl	8000270 <__aeabi_uldivmod>
 80045bc:	4602      	mov	r2, r0
 80045be:	460b      	mov	r3, r1
 80045c0:	4613      	mov	r3, r2
 80045c2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80045c4:	4b0a      	ldr	r3, [pc, #40]	; (80045f0 <HAL_RCC_GetSysClockFreq+0x160>)
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	0c1b      	lsrs	r3, r3, #16
 80045ca:	f003 0303 	and.w	r3, r3, #3
 80045ce:	3301      	adds	r3, #1
 80045d0:	005b      	lsls	r3, r3, #1
 80045d2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80045d4:	68fa      	ldr	r2, [r7, #12]
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045dc:	60bb      	str	r3, [r7, #8]
      break;
 80045de:	e002      	b.n	80045e6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045e0:	4b04      	ldr	r3, [pc, #16]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x164>)
 80045e2:	60bb      	str	r3, [r7, #8]
      break;
 80045e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045e6:	68bb      	ldr	r3, [r7, #8]
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3710      	adds	r7, #16
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bdb0      	pop	{r4, r5, r7, pc}
 80045f0:	40023800 	.word	0x40023800
 80045f4:	00f42400 	.word	0x00f42400
 80045f8:	017d7840 	.word	0x017d7840

080045fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045fc:	b480      	push	{r7}
 80045fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004600:	4b03      	ldr	r3, [pc, #12]	; (8004610 <HAL_RCC_GetHCLKFreq+0x14>)
 8004602:	681b      	ldr	r3, [r3, #0]
}
 8004604:	4618      	mov	r0, r3
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	20000000 	.word	0x20000000

08004614 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004618:	f7ff fff0 	bl	80045fc <HAL_RCC_GetHCLKFreq>
 800461c:	4602      	mov	r2, r0
 800461e:	4b05      	ldr	r3, [pc, #20]	; (8004634 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	0a9b      	lsrs	r3, r3, #10
 8004624:	f003 0307 	and.w	r3, r3, #7
 8004628:	4903      	ldr	r1, [pc, #12]	; (8004638 <HAL_RCC_GetPCLK1Freq+0x24>)
 800462a:	5ccb      	ldrb	r3, [r1, r3]
 800462c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004630:	4618      	mov	r0, r3
 8004632:	bd80      	pop	{r7, pc}
 8004634:	40023800 	.word	0x40023800
 8004638:	0801ab54 	.word	0x0801ab54

0800463c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004640:	f7ff ffdc 	bl	80045fc <HAL_RCC_GetHCLKFreq>
 8004644:	4602      	mov	r2, r0
 8004646:	4b05      	ldr	r3, [pc, #20]	; (800465c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	0b5b      	lsrs	r3, r3, #13
 800464c:	f003 0307 	and.w	r3, r3, #7
 8004650:	4903      	ldr	r1, [pc, #12]	; (8004660 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004652:	5ccb      	ldrb	r3, [r1, r3]
 8004654:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004658:	4618      	mov	r0, r3
 800465a:	bd80      	pop	{r7, pc}
 800465c:	40023800 	.word	0x40023800
 8004660:	0801ab54 	.word	0x0801ab54

08004664 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	220f      	movs	r2, #15
 8004672:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004674:	4b12      	ldr	r3, [pc, #72]	; (80046c0 <HAL_RCC_GetClockConfig+0x5c>)
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	f003 0203 	and.w	r2, r3, #3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004680:	4b0f      	ldr	r3, [pc, #60]	; (80046c0 <HAL_RCC_GetClockConfig+0x5c>)
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800468c:	4b0c      	ldr	r3, [pc, #48]	; (80046c0 <HAL_RCC_GetClockConfig+0x5c>)
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004698:	4b09      	ldr	r3, [pc, #36]	; (80046c0 <HAL_RCC_GetClockConfig+0x5c>)
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	08db      	lsrs	r3, r3, #3
 800469e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80046a6:	4b07      	ldr	r3, [pc, #28]	; (80046c4 <HAL_RCC_GetClockConfig+0x60>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0207 	and.w	r2, r3, #7
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	601a      	str	r2, [r3, #0]
}
 80046b2:	bf00      	nop
 80046b4:	370c      	adds	r7, #12
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	40023800 	.word	0x40023800
 80046c4:	40023c00 	.word	0x40023c00

080046c8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b086      	sub	sp, #24
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046d0:	2300      	movs	r3, #0
 80046d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80046d4:	2300      	movs	r3, #0
 80046d6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0301 	and.w	r3, r3, #1
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d105      	bne.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d035      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80046f0:	4b62      	ldr	r3, [pc, #392]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80046f2:	2200      	movs	r2, #0
 80046f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80046f6:	f7fc fef7 	bl	80014e8 <HAL_GetTick>
 80046fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80046fc:	e008      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80046fe:	f7fc fef3 	bl	80014e8 <HAL_GetTick>
 8004702:	4602      	mov	r2, r0
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	2b02      	cmp	r3, #2
 800470a:	d901      	bls.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e0b0      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004710:	4b5b      	ldr	r3, [pc, #364]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d1f0      	bne.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	019a      	lsls	r2, r3, #6
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	071b      	lsls	r3, r3, #28
 8004728:	4955      	ldr	r1, [pc, #340]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800472a:	4313      	orrs	r3, r2
 800472c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004730:	4b52      	ldr	r3, [pc, #328]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004732:	2201      	movs	r2, #1
 8004734:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004736:	f7fc fed7 	bl	80014e8 <HAL_GetTick>
 800473a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800473c:	e008      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800473e:	f7fc fed3 	bl	80014e8 <HAL_GetTick>
 8004742:	4602      	mov	r2, r0
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	2b02      	cmp	r3, #2
 800474a:	d901      	bls.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	e090      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004750:	4b4b      	ldr	r3, [pc, #300]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d0f0      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0302 	and.w	r3, r3, #2
 8004764:	2b00      	cmp	r3, #0
 8004766:	f000 8083 	beq.w	8004870 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800476a:	2300      	movs	r3, #0
 800476c:	60fb      	str	r3, [r7, #12]
 800476e:	4b44      	ldr	r3, [pc, #272]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004772:	4a43      	ldr	r2, [pc, #268]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004778:	6413      	str	r3, [r2, #64]	; 0x40
 800477a:	4b41      	ldr	r3, [pc, #260]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800477c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004782:	60fb      	str	r3, [r7, #12]
 8004784:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004786:	4b3f      	ldr	r3, [pc, #252]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a3e      	ldr	r2, [pc, #248]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800478c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004790:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004792:	f7fc fea9 	bl	80014e8 <HAL_GetTick>
 8004796:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004798:	e008      	b.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800479a:	f7fc fea5 	bl	80014e8 <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d901      	bls.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e062      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80047ac:	4b35      	ldr	r3, [pc, #212]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d0f0      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047b8:	4b31      	ldr	r3, [pc, #196]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047c0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d02f      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d028      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047d6:	4b2a      	ldr	r3, [pc, #168]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047de:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047e0:	4b29      	ldr	r3, [pc, #164]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80047e2:	2201      	movs	r2, #1
 80047e4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047e6:	4b28      	ldr	r3, [pc, #160]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80047e8:	2200      	movs	r2, #0
 80047ea:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80047ec:	4a24      	ldr	r2, [pc, #144]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80047f2:	4b23      	ldr	r3, [pc, #140]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d114      	bne.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80047fe:	f7fc fe73 	bl	80014e8 <HAL_GetTick>
 8004802:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004804:	e00a      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004806:	f7fc fe6f 	bl	80014e8 <HAL_GetTick>
 800480a:	4602      	mov	r2, r0
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	f241 3288 	movw	r2, #5000	; 0x1388
 8004814:	4293      	cmp	r3, r2
 8004816:	d901      	bls.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e02a      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800481c:	4b18      	ldr	r3, [pc, #96]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800481e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004820:	f003 0302 	and.w	r3, r3, #2
 8004824:	2b00      	cmp	r3, #0
 8004826:	d0ee      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004830:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004834:	d10d      	bne.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004836:	4b12      	ldr	r3, [pc, #72]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004846:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800484a:	490d      	ldr	r1, [pc, #52]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800484c:	4313      	orrs	r3, r2
 800484e:	608b      	str	r3, [r1, #8]
 8004850:	e005      	b.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004852:	4b0b      	ldr	r3, [pc, #44]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	4a0a      	ldr	r2, [pc, #40]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004858:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800485c:	6093      	str	r3, [r2, #8]
 800485e:	4b08      	ldr	r3, [pc, #32]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004860:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800486a:	4905      	ldr	r1, [pc, #20]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800486c:	4313      	orrs	r3, r2
 800486e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004870:	2300      	movs	r3, #0
}
 8004872:	4618      	mov	r0, r3
 8004874:	3718      	adds	r7, #24
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	42470068 	.word	0x42470068
 8004880:	40023800 	.word	0x40023800
 8004884:	40007000 	.word	0x40007000
 8004888:	42470e40 	.word	0x42470e40

0800488c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d101      	bne.n	800489e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e083      	b.n	80049a6 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	7f5b      	ldrb	r3, [r3, #29]
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d105      	bne.n	80048b4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f7fc fb4c 	bl	8000f4c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2202      	movs	r2, #2
 80048b8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	22ca      	movs	r2, #202	; 0xca
 80048c0:	625a      	str	r2, [r3, #36]	; 0x24
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2253      	movs	r2, #83	; 0x53
 80048c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 f9fb 	bl	8004cc6 <RTC_EnterInitMode>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d008      	beq.n	80048e8 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	22ff      	movs	r2, #255	; 0xff
 80048dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2204      	movs	r2, #4
 80048e2:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e05e      	b.n	80049a6 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	6812      	ldr	r2, [r2, #0]
 80048f2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80048f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048fa:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	6899      	ldr	r1, [r3, #8]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685a      	ldr	r2, [r3, #4]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	431a      	orrs	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	695b      	ldr	r3, [r3, #20]
 8004910:	431a      	orrs	r2, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	430a      	orrs	r2, r1
 8004918:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	68d2      	ldr	r2, [r2, #12]
 8004922:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	6919      	ldr	r1, [r3, #16]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	041a      	lsls	r2, r3, #16
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	430a      	orrs	r2, r1
 8004936:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68da      	ldr	r2, [r3, #12]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004946:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	f003 0320 	and.w	r3, r3, #32
 8004952:	2b00      	cmp	r3, #0
 8004954:	d10e      	bne.n	8004974 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 f98d 	bl	8004c76 <HAL_RTC_WaitForSynchro>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d008      	beq.n	8004974 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	22ff      	movs	r2, #255	; 0xff
 8004968:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2204      	movs	r2, #4
 800496e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e018      	b.n	80049a6 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004982:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	699a      	ldr	r2, [r3, #24]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	430a      	orrs	r2, r1
 8004994:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	22ff      	movs	r2, #255	; 0xff
 800499c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2201      	movs	r2, #1
 80049a2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80049a4:	2300      	movs	r3, #0
  }
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3708      	adds	r7, #8
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80049ae:	b590      	push	{r4, r7, lr}
 80049b0:	b087      	sub	sp, #28
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	60f8      	str	r0, [r7, #12]
 80049b6:	60b9      	str	r1, [r7, #8]
 80049b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80049ba:	2300      	movs	r3, #0
 80049bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	7f1b      	ldrb	r3, [r3, #28]
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d101      	bne.n	80049ca <HAL_RTC_SetTime+0x1c>
 80049c6:	2302      	movs	r3, #2
 80049c8:	e0aa      	b.n	8004b20 <HAL_RTC_SetTime+0x172>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2201      	movs	r2, #1
 80049ce:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2202      	movs	r2, #2
 80049d4:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d126      	bne.n	8004a2a <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d102      	bne.n	80049f0 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	2200      	movs	r2, #0
 80049ee:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	4618      	mov	r0, r3
 80049f6:	f000 f992 	bl	8004d1e <RTC_ByteToBcd2>
 80049fa:	4603      	mov	r3, r0
 80049fc:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	785b      	ldrb	r3, [r3, #1]
 8004a02:	4618      	mov	r0, r3
 8004a04:	f000 f98b 	bl	8004d1e <RTC_ByteToBcd2>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004a0c:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	789b      	ldrb	r3, [r3, #2]
 8004a12:	4618      	mov	r0, r3
 8004a14:	f000 f983 	bl	8004d1e <RTC_ByteToBcd2>
 8004a18:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004a1a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	78db      	ldrb	r3, [r3, #3]
 8004a22:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004a24:	4313      	orrs	r3, r2
 8004a26:	617b      	str	r3, [r7, #20]
 8004a28:	e018      	b.n	8004a5c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d102      	bne.n	8004a3e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	785b      	ldrb	r3, [r3, #1]
 8004a48:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004a4a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8004a4c:	68ba      	ldr	r2, [r7, #8]
 8004a4e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004a50:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	78db      	ldrb	r3, [r3, #3]
 8004a56:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	22ca      	movs	r2, #202	; 0xca
 8004a62:	625a      	str	r2, [r3, #36]	; 0x24
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2253      	movs	r2, #83	; 0x53
 8004a6a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004a6c:	68f8      	ldr	r0, [r7, #12]
 8004a6e:	f000 f92a 	bl	8004cc6 <RTC_EnterInitMode>
 8004a72:	4603      	mov	r3, r0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d00b      	beq.n	8004a90 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	22ff      	movs	r2, #255	; 0xff
 8004a7e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2204      	movs	r2, #4
 8004a84:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e047      	b.n	8004b20 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004a9a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004a9e:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	689a      	ldr	r2, [r3, #8]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004aae:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	6899      	ldr	r1, [r3, #8]
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	68da      	ldr	r2, [r3, #12]
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	431a      	orrs	r2, r3
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	430a      	orrs	r2, r1
 8004ac6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68da      	ldr	r2, [r3, #12]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ad6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	f003 0320 	and.w	r3, r3, #32
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d111      	bne.n	8004b0a <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004ae6:	68f8      	ldr	r0, [r7, #12]
 8004ae8:	f000 f8c5 	bl	8004c76 <HAL_RTC_WaitForSynchro>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00b      	beq.n	8004b0a <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	22ff      	movs	r2, #255	; 0xff
 8004af8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2204      	movs	r2, #4
 8004afe:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e00a      	b.n	8004b20 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	22ff      	movs	r2, #255	; 0xff
 8004b10:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2201      	movs	r2, #1
 8004b16:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
  }
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	371c      	adds	r7, #28
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd90      	pop	{r4, r7, pc}

08004b28 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004b28:	b590      	push	{r4, r7, lr}
 8004b2a:	b087      	sub	sp, #28
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004b34:	2300      	movs	r3, #0
 8004b36:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	7f1b      	ldrb	r3, [r3, #28]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d101      	bne.n	8004b44 <HAL_RTC_SetDate+0x1c>
 8004b40:	2302      	movs	r3, #2
 8004b42:	e094      	b.n	8004c6e <HAL_RTC_SetDate+0x146>
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2201      	movs	r2, #1
 8004b48:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2202      	movs	r2, #2
 8004b4e:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d10e      	bne.n	8004b74 <HAL_RTC_SetDate+0x4c>
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	785b      	ldrb	r3, [r3, #1]
 8004b5a:	f003 0310 	and.w	r3, r3, #16
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d008      	beq.n	8004b74 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	785b      	ldrb	r3, [r3, #1]
 8004b66:	f023 0310 	bic.w	r3, r3, #16
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	330a      	adds	r3, #10
 8004b6e:	b2da      	uxtb	r2, r3
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d11c      	bne.n	8004bb4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	78db      	ldrb	r3, [r3, #3]
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f000 f8cd 	bl	8004d1e <RTC_ByteToBcd2>
 8004b84:	4603      	mov	r3, r0
 8004b86:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	785b      	ldrb	r3, [r3, #1]
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f000 f8c6 	bl	8004d1e <RTC_ByteToBcd2>
 8004b92:	4603      	mov	r3, r0
 8004b94:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004b96:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	789b      	ldrb	r3, [r3, #2]
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f000 f8be 	bl	8004d1e <RTC_ByteToBcd2>
 8004ba2:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004ba4:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	617b      	str	r3, [r7, #20]
 8004bb2:	e00e      	b.n	8004bd2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	78db      	ldrb	r3, [r3, #3]
 8004bb8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	785b      	ldrb	r3, [r3, #1]
 8004bbe:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004bc0:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8004bc2:	68ba      	ldr	r2, [r7, #8]
 8004bc4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8004bc6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	22ca      	movs	r2, #202	; 0xca
 8004bd8:	625a      	str	r2, [r3, #36]	; 0x24
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2253      	movs	r2, #83	; 0x53
 8004be0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	f000 f86f 	bl	8004cc6 <RTC_EnterInitMode>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00b      	beq.n	8004c06 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	22ff      	movs	r2, #255	; 0xff
 8004bf4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2204      	movs	r2, #4
 8004bfa:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e033      	b.n	8004c6e <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004c10:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004c14:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68da      	ldr	r2, [r3, #12]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c24:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f003 0320 	and.w	r3, r3, #32
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d111      	bne.n	8004c58 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004c34:	68f8      	ldr	r0, [r7, #12]
 8004c36:	f000 f81e 	bl	8004c76 <HAL_RTC_WaitForSynchro>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d00b      	beq.n	8004c58 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	22ff      	movs	r2, #255	; 0xff
 8004c46:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2204      	movs	r2, #4
 8004c4c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2200      	movs	r2, #0
 8004c52:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e00a      	b.n	8004c6e <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	22ff      	movs	r2, #255	; 0xff
 8004c5e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2201      	movs	r2, #1
 8004c64:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
  }
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	371c      	adds	r7, #28
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd90      	pop	{r4, r7, pc}

08004c76 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004c76:	b580      	push	{r7, lr}
 8004c78:	b084      	sub	sp, #16
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	68da      	ldr	r2, [r3, #12]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004c90:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004c92:	f7fc fc29 	bl	80014e8 <HAL_GetTick>
 8004c96:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004c98:	e009      	b.n	8004cae <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004c9a:	f7fc fc25 	bl	80014e8 <HAL_GetTick>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ca8:	d901      	bls.n	8004cae <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e007      	b.n	8004cbe <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	f003 0320 	and.w	r3, r3, #32
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d0ee      	beq.n	8004c9a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3710      	adds	r7, #16
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b084      	sub	sp, #16
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d119      	bne.n	8004d14 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ce8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004cea:	f7fc fbfd 	bl	80014e8 <HAL_GetTick>
 8004cee:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004cf0:	e009      	b.n	8004d06 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004cf2:	f7fc fbf9 	bl	80014e8 <HAL_GetTick>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d00:	d901      	bls.n	8004d06 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e007      	b.n	8004d16 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d0ee      	beq.n	8004cf2 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3710      	adds	r7, #16
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004d1e:	b480      	push	{r7}
 8004d20:	b085      	sub	sp, #20
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	4603      	mov	r3, r0
 8004d26:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8004d2c:	e005      	b.n	8004d3a <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	3301      	adds	r3, #1
 8004d32:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8004d34:	79fb      	ldrb	r3, [r7, #7]
 8004d36:	3b0a      	subs	r3, #10
 8004d38:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8004d3a:	79fb      	ldrb	r3, [r7, #7]
 8004d3c:	2b09      	cmp	r3, #9
 8004d3e:	d8f6      	bhi.n	8004d2e <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	011b      	lsls	r3, r3, #4
 8004d46:	b2da      	uxtb	r2, r3
 8004d48:	79fb      	ldrb	r3, [r7, #7]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	b2db      	uxtb	r3, r3
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3714      	adds	r7, #20
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr

08004d5a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b082      	sub	sp, #8
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d101      	bne.n	8004d6c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e07b      	b.n	8004e64 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d108      	bne.n	8004d86 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d7c:	d009      	beq.n	8004d92 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	61da      	str	r2, [r3, #28]
 8004d84:	e005      	b.n	8004d92 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d106      	bne.n	8004db2 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f7fc f8e3 	bl	8000f78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2202      	movs	r2, #2
 8004db6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dc8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004dda:	431a      	orrs	r2, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004de4:	431a      	orrs	r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	f003 0302 	and.w	r3, r3, #2
 8004dee:	431a      	orrs	r2, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	695b      	ldr	r3, [r3, #20]
 8004df4:	f003 0301 	and.w	r3, r3, #1
 8004df8:	431a      	orrs	r2, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	699b      	ldr	r3, [r3, #24]
 8004dfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e02:	431a      	orrs	r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	69db      	ldr	r3, [r3, #28]
 8004e08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e0c:	431a      	orrs	r2, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a1b      	ldr	r3, [r3, #32]
 8004e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e16:	ea42 0103 	orr.w	r1, r2, r3
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e1e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	430a      	orrs	r2, r1
 8004e28:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	699b      	ldr	r3, [r3, #24]
 8004e2e:	0c1b      	lsrs	r3, r3, #16
 8004e30:	f003 0104 	and.w	r1, r3, #4
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e38:	f003 0210 	and.w	r2, r3, #16
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	430a      	orrs	r2, r1
 8004e42:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	69da      	ldr	r2, [r3, #28]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e52:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004e62:	2300      	movs	r3, #0
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3708      	adds	r7, #8
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e041      	b.n	8004f02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d106      	bne.n	8004e98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f7fc f8b8 	bl	8001008 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2202      	movs	r2, #2
 8004e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	3304      	adds	r3, #4
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	4610      	mov	r0, r2
 8004eac:	f000 fa96 	bl	80053dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3708      	adds	r7, #8
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
	...

08004f0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d001      	beq.n	8004f24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e04e      	b.n	8004fc2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2202      	movs	r2, #2
 8004f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68da      	ldr	r2, [r3, #12]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f042 0201 	orr.w	r2, r2, #1
 8004f3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a23      	ldr	r2, [pc, #140]	; (8004fd0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d022      	beq.n	8004f8c <HAL_TIM_Base_Start_IT+0x80>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f4e:	d01d      	beq.n	8004f8c <HAL_TIM_Base_Start_IT+0x80>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a1f      	ldr	r2, [pc, #124]	; (8004fd4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d018      	beq.n	8004f8c <HAL_TIM_Base_Start_IT+0x80>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a1e      	ldr	r2, [pc, #120]	; (8004fd8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d013      	beq.n	8004f8c <HAL_TIM_Base_Start_IT+0x80>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a1c      	ldr	r2, [pc, #112]	; (8004fdc <HAL_TIM_Base_Start_IT+0xd0>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d00e      	beq.n	8004f8c <HAL_TIM_Base_Start_IT+0x80>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a1b      	ldr	r2, [pc, #108]	; (8004fe0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d009      	beq.n	8004f8c <HAL_TIM_Base_Start_IT+0x80>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a19      	ldr	r2, [pc, #100]	; (8004fe4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d004      	beq.n	8004f8c <HAL_TIM_Base_Start_IT+0x80>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a18      	ldr	r2, [pc, #96]	; (8004fe8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d111      	bne.n	8004fb0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	f003 0307 	and.w	r3, r3, #7
 8004f96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2b06      	cmp	r3, #6
 8004f9c:	d010      	beq.n	8004fc0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f042 0201 	orr.w	r2, r2, #1
 8004fac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fae:	e007      	b.n	8004fc0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f042 0201 	orr.w	r2, r2, #1
 8004fbe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3714      	adds	r7, #20
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr
 8004fce:	bf00      	nop
 8004fd0:	40010000 	.word	0x40010000
 8004fd4:	40000400 	.word	0x40000400
 8004fd8:	40000800 	.word	0x40000800
 8004fdc:	40000c00 	.word	0x40000c00
 8004fe0:	40010400 	.word	0x40010400
 8004fe4:	40014000 	.word	0x40014000
 8004fe8:	40001800 	.word	0x40001800

08004fec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b082      	sub	sp, #8
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	f003 0302 	and.w	r3, r3, #2
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	d122      	bne.n	8005048 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	f003 0302 	and.w	r3, r3, #2
 800500c:	2b02      	cmp	r3, #2
 800500e:	d11b      	bne.n	8005048 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f06f 0202 	mvn.w	r2, #2
 8005018:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2201      	movs	r2, #1
 800501e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	f003 0303 	and.w	r3, r3, #3
 800502a:	2b00      	cmp	r3, #0
 800502c:	d003      	beq.n	8005036 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 f9b5 	bl	800539e <HAL_TIM_IC_CaptureCallback>
 8005034:	e005      	b.n	8005042 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 f9a7 	bl	800538a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f000 f9b8 	bl	80053b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	f003 0304 	and.w	r3, r3, #4
 8005052:	2b04      	cmp	r3, #4
 8005054:	d122      	bne.n	800509c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	f003 0304 	and.w	r3, r3, #4
 8005060:	2b04      	cmp	r3, #4
 8005062:	d11b      	bne.n	800509c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f06f 0204 	mvn.w	r2, #4
 800506c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2202      	movs	r2, #2
 8005072:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	699b      	ldr	r3, [r3, #24]
 800507a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800507e:	2b00      	cmp	r3, #0
 8005080:	d003      	beq.n	800508a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 f98b 	bl	800539e <HAL_TIM_IC_CaptureCallback>
 8005088:	e005      	b.n	8005096 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 f97d 	bl	800538a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f000 f98e 	bl	80053b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	f003 0308 	and.w	r3, r3, #8
 80050a6:	2b08      	cmp	r3, #8
 80050a8:	d122      	bne.n	80050f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	f003 0308 	and.w	r3, r3, #8
 80050b4:	2b08      	cmp	r3, #8
 80050b6:	d11b      	bne.n	80050f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f06f 0208 	mvn.w	r2, #8
 80050c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2204      	movs	r2, #4
 80050c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	69db      	ldr	r3, [r3, #28]
 80050ce:	f003 0303 	and.w	r3, r3, #3
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d003      	beq.n	80050de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 f961 	bl	800539e <HAL_TIM_IC_CaptureCallback>
 80050dc:	e005      	b.n	80050ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 f953 	bl	800538a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f000 f964 	bl	80053b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	f003 0310 	and.w	r3, r3, #16
 80050fa:	2b10      	cmp	r3, #16
 80050fc:	d122      	bne.n	8005144 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	f003 0310 	and.w	r3, r3, #16
 8005108:	2b10      	cmp	r3, #16
 800510a:	d11b      	bne.n	8005144 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f06f 0210 	mvn.w	r2, #16
 8005114:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2208      	movs	r2, #8
 800511a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	69db      	ldr	r3, [r3, #28]
 8005122:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005126:	2b00      	cmp	r3, #0
 8005128:	d003      	beq.n	8005132 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 f937 	bl	800539e <HAL_TIM_IC_CaptureCallback>
 8005130:	e005      	b.n	800513e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 f929 	bl	800538a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f000 f93a 	bl	80053b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	2b01      	cmp	r3, #1
 8005150:	d10e      	bne.n	8005170 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	f003 0301 	and.w	r3, r3, #1
 800515c:	2b01      	cmp	r3, #1
 800515e:	d107      	bne.n	8005170 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f06f 0201 	mvn.w	r2, #1
 8005168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f7fb feaa 	bl	8000ec4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800517a:	2b80      	cmp	r3, #128	; 0x80
 800517c:	d10e      	bne.n	800519c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005188:	2b80      	cmp	r3, #128	; 0x80
 800518a:	d107      	bne.n	800519c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 fae0 	bl	800575c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a6:	2b40      	cmp	r3, #64	; 0x40
 80051a8:	d10e      	bne.n	80051c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051b4:	2b40      	cmp	r3, #64	; 0x40
 80051b6:	d107      	bne.n	80051c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80051c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 f8ff 	bl	80053c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	f003 0320 	and.w	r3, r3, #32
 80051d2:	2b20      	cmp	r3, #32
 80051d4:	d10e      	bne.n	80051f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	f003 0320 	and.w	r3, r3, #32
 80051e0:	2b20      	cmp	r3, #32
 80051e2:	d107      	bne.n	80051f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f06f 0220 	mvn.w	r2, #32
 80051ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 faaa 	bl	8005748 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051f4:	bf00      	nop
 80051f6:	3708      	adds	r7, #8
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005206:	2300      	movs	r3, #0
 8005208:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005210:	2b01      	cmp	r3, #1
 8005212:	d101      	bne.n	8005218 <HAL_TIM_ConfigClockSource+0x1c>
 8005214:	2302      	movs	r3, #2
 8005216:	e0b4      	b.n	8005382 <HAL_TIM_ConfigClockSource+0x186>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2202      	movs	r2, #2
 8005224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005236:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800523e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	68ba      	ldr	r2, [r7, #8]
 8005246:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005250:	d03e      	beq.n	80052d0 <HAL_TIM_ConfigClockSource+0xd4>
 8005252:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005256:	f200 8087 	bhi.w	8005368 <HAL_TIM_ConfigClockSource+0x16c>
 800525a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800525e:	f000 8086 	beq.w	800536e <HAL_TIM_ConfigClockSource+0x172>
 8005262:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005266:	d87f      	bhi.n	8005368 <HAL_TIM_ConfigClockSource+0x16c>
 8005268:	2b70      	cmp	r3, #112	; 0x70
 800526a:	d01a      	beq.n	80052a2 <HAL_TIM_ConfigClockSource+0xa6>
 800526c:	2b70      	cmp	r3, #112	; 0x70
 800526e:	d87b      	bhi.n	8005368 <HAL_TIM_ConfigClockSource+0x16c>
 8005270:	2b60      	cmp	r3, #96	; 0x60
 8005272:	d050      	beq.n	8005316 <HAL_TIM_ConfigClockSource+0x11a>
 8005274:	2b60      	cmp	r3, #96	; 0x60
 8005276:	d877      	bhi.n	8005368 <HAL_TIM_ConfigClockSource+0x16c>
 8005278:	2b50      	cmp	r3, #80	; 0x50
 800527a:	d03c      	beq.n	80052f6 <HAL_TIM_ConfigClockSource+0xfa>
 800527c:	2b50      	cmp	r3, #80	; 0x50
 800527e:	d873      	bhi.n	8005368 <HAL_TIM_ConfigClockSource+0x16c>
 8005280:	2b40      	cmp	r3, #64	; 0x40
 8005282:	d058      	beq.n	8005336 <HAL_TIM_ConfigClockSource+0x13a>
 8005284:	2b40      	cmp	r3, #64	; 0x40
 8005286:	d86f      	bhi.n	8005368 <HAL_TIM_ConfigClockSource+0x16c>
 8005288:	2b30      	cmp	r3, #48	; 0x30
 800528a:	d064      	beq.n	8005356 <HAL_TIM_ConfigClockSource+0x15a>
 800528c:	2b30      	cmp	r3, #48	; 0x30
 800528e:	d86b      	bhi.n	8005368 <HAL_TIM_ConfigClockSource+0x16c>
 8005290:	2b20      	cmp	r3, #32
 8005292:	d060      	beq.n	8005356 <HAL_TIM_ConfigClockSource+0x15a>
 8005294:	2b20      	cmp	r3, #32
 8005296:	d867      	bhi.n	8005368 <HAL_TIM_ConfigClockSource+0x16c>
 8005298:	2b00      	cmp	r3, #0
 800529a:	d05c      	beq.n	8005356 <HAL_TIM_ConfigClockSource+0x15a>
 800529c:	2b10      	cmp	r3, #16
 800529e:	d05a      	beq.n	8005356 <HAL_TIM_ConfigClockSource+0x15a>
 80052a0:	e062      	b.n	8005368 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6818      	ldr	r0, [r3, #0]
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	6899      	ldr	r1, [r3, #8]
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	685a      	ldr	r2, [r3, #4]
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	f000 f9ad 	bl	8005610 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80052c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68ba      	ldr	r2, [r7, #8]
 80052cc:	609a      	str	r2, [r3, #8]
      break;
 80052ce:	e04f      	b.n	8005370 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6818      	ldr	r0, [r3, #0]
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	6899      	ldr	r1, [r3, #8]
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	685a      	ldr	r2, [r3, #4]
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	f000 f996 	bl	8005610 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	689a      	ldr	r2, [r3, #8]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052f2:	609a      	str	r2, [r3, #8]
      break;
 80052f4:	e03c      	b.n	8005370 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6818      	ldr	r0, [r3, #0]
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	6859      	ldr	r1, [r3, #4]
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	461a      	mov	r2, r3
 8005304:	f000 f90a 	bl	800551c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2150      	movs	r1, #80	; 0x50
 800530e:	4618      	mov	r0, r3
 8005310:	f000 f963 	bl	80055da <TIM_ITRx_SetConfig>
      break;
 8005314:	e02c      	b.n	8005370 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6818      	ldr	r0, [r3, #0]
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	6859      	ldr	r1, [r3, #4]
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	461a      	mov	r2, r3
 8005324:	f000 f929 	bl	800557a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2160      	movs	r1, #96	; 0x60
 800532e:	4618      	mov	r0, r3
 8005330:	f000 f953 	bl	80055da <TIM_ITRx_SetConfig>
      break;
 8005334:	e01c      	b.n	8005370 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6818      	ldr	r0, [r3, #0]
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	6859      	ldr	r1, [r3, #4]
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	461a      	mov	r2, r3
 8005344:	f000 f8ea 	bl	800551c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2140      	movs	r1, #64	; 0x40
 800534e:	4618      	mov	r0, r3
 8005350:	f000 f943 	bl	80055da <TIM_ITRx_SetConfig>
      break;
 8005354:	e00c      	b.n	8005370 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4619      	mov	r1, r3
 8005360:	4610      	mov	r0, r2
 8005362:	f000 f93a 	bl	80055da <TIM_ITRx_SetConfig>
      break;
 8005366:	e003      	b.n	8005370 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	73fb      	strb	r3, [r7, #15]
      break;
 800536c:	e000      	b.n	8005370 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800536e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005380:	7bfb      	ldrb	r3, [r7, #15]
}
 8005382:	4618      	mov	r0, r3
 8005384:	3710      	adds	r7, #16
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}

0800538a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800538a:	b480      	push	{r7}
 800538c:	b083      	sub	sp, #12
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005392:	bf00      	nop
 8005394:	370c      	adds	r7, #12
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr

0800539e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800539e:	b480      	push	{r7}
 80053a0:	b083      	sub	sp, #12
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053a6:	bf00      	nop
 80053a8:	370c      	adds	r7, #12
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr

080053b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053b2:	b480      	push	{r7}
 80053b4:	b083      	sub	sp, #12
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053ba:	bf00      	nop
 80053bc:	370c      	adds	r7, #12
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr

080053c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053c6:	b480      	push	{r7}
 80053c8:	b083      	sub	sp, #12
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053ce:	bf00      	nop
 80053d0:	370c      	adds	r7, #12
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr
	...

080053dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4a40      	ldr	r2, [pc, #256]	; (80054f0 <TIM_Base_SetConfig+0x114>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d013      	beq.n	800541c <TIM_Base_SetConfig+0x40>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053fa:	d00f      	beq.n	800541c <TIM_Base_SetConfig+0x40>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4a3d      	ldr	r2, [pc, #244]	; (80054f4 <TIM_Base_SetConfig+0x118>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d00b      	beq.n	800541c <TIM_Base_SetConfig+0x40>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4a3c      	ldr	r2, [pc, #240]	; (80054f8 <TIM_Base_SetConfig+0x11c>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d007      	beq.n	800541c <TIM_Base_SetConfig+0x40>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4a3b      	ldr	r2, [pc, #236]	; (80054fc <TIM_Base_SetConfig+0x120>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d003      	beq.n	800541c <TIM_Base_SetConfig+0x40>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a3a      	ldr	r2, [pc, #232]	; (8005500 <TIM_Base_SetConfig+0x124>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d108      	bne.n	800542e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005422:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	4313      	orrs	r3, r2
 800542c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a2f      	ldr	r2, [pc, #188]	; (80054f0 <TIM_Base_SetConfig+0x114>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d02b      	beq.n	800548e <TIM_Base_SetConfig+0xb2>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800543c:	d027      	beq.n	800548e <TIM_Base_SetConfig+0xb2>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a2c      	ldr	r2, [pc, #176]	; (80054f4 <TIM_Base_SetConfig+0x118>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d023      	beq.n	800548e <TIM_Base_SetConfig+0xb2>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a2b      	ldr	r2, [pc, #172]	; (80054f8 <TIM_Base_SetConfig+0x11c>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d01f      	beq.n	800548e <TIM_Base_SetConfig+0xb2>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a2a      	ldr	r2, [pc, #168]	; (80054fc <TIM_Base_SetConfig+0x120>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d01b      	beq.n	800548e <TIM_Base_SetConfig+0xb2>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a29      	ldr	r2, [pc, #164]	; (8005500 <TIM_Base_SetConfig+0x124>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d017      	beq.n	800548e <TIM_Base_SetConfig+0xb2>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a28      	ldr	r2, [pc, #160]	; (8005504 <TIM_Base_SetConfig+0x128>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d013      	beq.n	800548e <TIM_Base_SetConfig+0xb2>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a27      	ldr	r2, [pc, #156]	; (8005508 <TIM_Base_SetConfig+0x12c>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d00f      	beq.n	800548e <TIM_Base_SetConfig+0xb2>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a26      	ldr	r2, [pc, #152]	; (800550c <TIM_Base_SetConfig+0x130>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d00b      	beq.n	800548e <TIM_Base_SetConfig+0xb2>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a25      	ldr	r2, [pc, #148]	; (8005510 <TIM_Base_SetConfig+0x134>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d007      	beq.n	800548e <TIM_Base_SetConfig+0xb2>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a24      	ldr	r2, [pc, #144]	; (8005514 <TIM_Base_SetConfig+0x138>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d003      	beq.n	800548e <TIM_Base_SetConfig+0xb2>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a23      	ldr	r2, [pc, #140]	; (8005518 <TIM_Base_SetConfig+0x13c>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d108      	bne.n	80054a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005494:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	68fa      	ldr	r2, [r7, #12]
 800549c:	4313      	orrs	r3, r2
 800549e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	695b      	ldr	r3, [r3, #20]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	68fa      	ldr	r2, [r7, #12]
 80054b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	689a      	ldr	r2, [r3, #8]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a0a      	ldr	r2, [pc, #40]	; (80054f0 <TIM_Base_SetConfig+0x114>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d003      	beq.n	80054d4 <TIM_Base_SetConfig+0xf8>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a0c      	ldr	r2, [pc, #48]	; (8005500 <TIM_Base_SetConfig+0x124>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d103      	bne.n	80054dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	691a      	ldr	r2, [r3, #16]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	615a      	str	r2, [r3, #20]
}
 80054e2:	bf00      	nop
 80054e4:	3714      	adds	r7, #20
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr
 80054ee:	bf00      	nop
 80054f0:	40010000 	.word	0x40010000
 80054f4:	40000400 	.word	0x40000400
 80054f8:	40000800 	.word	0x40000800
 80054fc:	40000c00 	.word	0x40000c00
 8005500:	40010400 	.word	0x40010400
 8005504:	40014000 	.word	0x40014000
 8005508:	40014400 	.word	0x40014400
 800550c:	40014800 	.word	0x40014800
 8005510:	40001800 	.word	0x40001800
 8005514:	40001c00 	.word	0x40001c00
 8005518:	40002000 	.word	0x40002000

0800551c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800551c:	b480      	push	{r7}
 800551e:	b087      	sub	sp, #28
 8005520:	af00      	add	r7, sp, #0
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6a1b      	ldr	r3, [r3, #32]
 800552c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6a1b      	ldr	r3, [r3, #32]
 8005532:	f023 0201 	bic.w	r2, r3, #1
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	699b      	ldr	r3, [r3, #24]
 800553e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005546:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	011b      	lsls	r3, r3, #4
 800554c:	693a      	ldr	r2, [r7, #16]
 800554e:	4313      	orrs	r3, r2
 8005550:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	f023 030a 	bic.w	r3, r3, #10
 8005558:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800555a:	697a      	ldr	r2, [r7, #20]
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	4313      	orrs	r3, r2
 8005560:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	693a      	ldr	r2, [r7, #16]
 8005566:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	697a      	ldr	r2, [r7, #20]
 800556c:	621a      	str	r2, [r3, #32]
}
 800556e:	bf00      	nop
 8005570:	371c      	adds	r7, #28
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr

0800557a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800557a:	b480      	push	{r7}
 800557c:	b087      	sub	sp, #28
 800557e:	af00      	add	r7, sp, #0
 8005580:	60f8      	str	r0, [r7, #12]
 8005582:	60b9      	str	r1, [r7, #8]
 8005584:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6a1b      	ldr	r3, [r3, #32]
 800558a:	f023 0210 	bic.w	r2, r3, #16
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	699b      	ldr	r3, [r3, #24]
 8005596:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6a1b      	ldr	r3, [r3, #32]
 800559c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	031b      	lsls	r3, r3, #12
 80055aa:	697a      	ldr	r2, [r7, #20]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80055b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	011b      	lsls	r3, r3, #4
 80055bc:	693a      	ldr	r2, [r7, #16]
 80055be:	4313      	orrs	r3, r2
 80055c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	697a      	ldr	r2, [r7, #20]
 80055c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	693a      	ldr	r2, [r7, #16]
 80055cc:	621a      	str	r2, [r3, #32]
}
 80055ce:	bf00      	nop
 80055d0:	371c      	adds	r7, #28
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr

080055da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055da:	b480      	push	{r7}
 80055dc:	b085      	sub	sp, #20
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
 80055e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055f2:	683a      	ldr	r2, [r7, #0]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	f043 0307 	orr.w	r3, r3, #7
 80055fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	609a      	str	r2, [r3, #8]
}
 8005604:	bf00      	nop
 8005606:	3714      	adds	r7, #20
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005610:	b480      	push	{r7}
 8005612:	b087      	sub	sp, #28
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	607a      	str	r2, [r7, #4]
 800561c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800562a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	021a      	lsls	r2, r3, #8
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	431a      	orrs	r2, r3
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	4313      	orrs	r3, r2
 8005638:	697a      	ldr	r2, [r7, #20]
 800563a:	4313      	orrs	r3, r2
 800563c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	697a      	ldr	r2, [r7, #20]
 8005642:	609a      	str	r2, [r3, #8]
}
 8005644:	bf00      	nop
 8005646:	371c      	adds	r7, #28
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005650:	b480      	push	{r7}
 8005652:	b085      	sub	sp, #20
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005660:	2b01      	cmp	r3, #1
 8005662:	d101      	bne.n	8005668 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005664:	2302      	movs	r3, #2
 8005666:	e05a      	b.n	800571e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2202      	movs	r2, #2
 8005674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800568e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	4313      	orrs	r3, r2
 8005698:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	68fa      	ldr	r2, [r7, #12]
 80056a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a21      	ldr	r2, [pc, #132]	; (800572c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d022      	beq.n	80056f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056b4:	d01d      	beq.n	80056f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a1d      	ldr	r2, [pc, #116]	; (8005730 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d018      	beq.n	80056f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a1b      	ldr	r2, [pc, #108]	; (8005734 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d013      	beq.n	80056f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a1a      	ldr	r2, [pc, #104]	; (8005738 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d00e      	beq.n	80056f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a18      	ldr	r2, [pc, #96]	; (800573c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d009      	beq.n	80056f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a17      	ldr	r2, [pc, #92]	; (8005740 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d004      	beq.n	80056f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a15      	ldr	r2, [pc, #84]	; (8005744 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d10c      	bne.n	800570c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	68ba      	ldr	r2, [r7, #8]
 8005700:	4313      	orrs	r3, r2
 8005702:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	68ba      	ldr	r2, [r7, #8]
 800570a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	3714      	adds	r7, #20
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	40010000 	.word	0x40010000
 8005730:	40000400 	.word	0x40000400
 8005734:	40000800 	.word	0x40000800
 8005738:	40000c00 	.word	0x40000c00
 800573c:	40010400 	.word	0x40010400
 8005740:	40014000 	.word	0x40014000
 8005744:	40001800 	.word	0x40001800

08005748 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005750:	bf00      	nop
 8005752:	370c      	adds	r7, #12
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005764:	bf00      	nop
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b082      	sub	sp, #8
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d101      	bne.n	8005782 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e03f      	b.n	8005802 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005788:	b2db      	uxtb	r3, r3
 800578a:	2b00      	cmp	r3, #0
 800578c:	d106      	bne.n	800579c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f7fb fc56 	bl	8001048 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2224      	movs	r2, #36	; 0x24
 80057a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68da      	ldr	r2, [r3, #12]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 f929 	bl	8005a0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	691a      	ldr	r2, [r3, #16]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	695a      	ldr	r2, [r3, #20]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68da      	ldr	r2, [r3, #12]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2220      	movs	r2, #32
 80057f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2220      	movs	r2, #32
 80057fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	3708      	adds	r7, #8
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}

0800580a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800580a:	b580      	push	{r7, lr}
 800580c:	b08a      	sub	sp, #40	; 0x28
 800580e:	af02      	add	r7, sp, #8
 8005810:	60f8      	str	r0, [r7, #12]
 8005812:	60b9      	str	r1, [r7, #8]
 8005814:	603b      	str	r3, [r7, #0]
 8005816:	4613      	mov	r3, r2
 8005818:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800581a:	2300      	movs	r3, #0
 800581c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005824:	b2db      	uxtb	r3, r3
 8005826:	2b20      	cmp	r3, #32
 8005828:	d17c      	bne.n	8005924 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d002      	beq.n	8005836 <HAL_UART_Transmit+0x2c>
 8005830:	88fb      	ldrh	r3, [r7, #6]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d101      	bne.n	800583a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e075      	b.n	8005926 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005840:	2b01      	cmp	r3, #1
 8005842:	d101      	bne.n	8005848 <HAL_UART_Transmit+0x3e>
 8005844:	2302      	movs	r3, #2
 8005846:	e06e      	b.n	8005926 <HAL_UART_Transmit+0x11c>
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2200      	movs	r2, #0
 8005854:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2221      	movs	r2, #33	; 0x21
 800585a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800585e:	f7fb fe43 	bl	80014e8 <HAL_GetTick>
 8005862:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	88fa      	ldrh	r2, [r7, #6]
 8005868:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	88fa      	ldrh	r2, [r7, #6]
 800586e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005878:	d108      	bne.n	800588c <HAL_UART_Transmit+0x82>
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d104      	bne.n	800588c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005882:	2300      	movs	r3, #0
 8005884:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	61bb      	str	r3, [r7, #24]
 800588a:	e003      	b.n	8005894 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005890:	2300      	movs	r3, #0
 8005892:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2200      	movs	r2, #0
 8005898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800589c:	e02a      	b.n	80058f4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	9300      	str	r3, [sp, #0]
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	2200      	movs	r2, #0
 80058a6:	2180      	movs	r1, #128	; 0x80
 80058a8:	68f8      	ldr	r0, [r7, #12]
 80058aa:	f000 f840 	bl	800592e <UART_WaitOnFlagUntilTimeout>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d001      	beq.n	80058b8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80058b4:	2303      	movs	r3, #3
 80058b6:	e036      	b.n	8005926 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d10b      	bne.n	80058d6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	881b      	ldrh	r3, [r3, #0]
 80058c2:	461a      	mov	r2, r3
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	3302      	adds	r3, #2
 80058d2:	61bb      	str	r3, [r7, #24]
 80058d4:	e007      	b.n	80058e6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	781a      	ldrb	r2, [r3, #0]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	3301      	adds	r3, #1
 80058e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	3b01      	subs	r3, #1
 80058ee:	b29a      	uxth	r2, r3
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d1cf      	bne.n	800589e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	9300      	str	r3, [sp, #0]
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	2200      	movs	r2, #0
 8005906:	2140      	movs	r1, #64	; 0x40
 8005908:	68f8      	ldr	r0, [r7, #12]
 800590a:	f000 f810 	bl	800592e <UART_WaitOnFlagUntilTimeout>
 800590e:	4603      	mov	r3, r0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d001      	beq.n	8005918 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005914:	2303      	movs	r3, #3
 8005916:	e006      	b.n	8005926 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2220      	movs	r2, #32
 800591c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005920:	2300      	movs	r3, #0
 8005922:	e000      	b.n	8005926 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005924:	2302      	movs	r3, #2
  }
}
 8005926:	4618      	mov	r0, r3
 8005928:	3720      	adds	r7, #32
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}

0800592e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800592e:	b580      	push	{r7, lr}
 8005930:	b090      	sub	sp, #64	; 0x40
 8005932:	af00      	add	r7, sp, #0
 8005934:	60f8      	str	r0, [r7, #12]
 8005936:	60b9      	str	r1, [r7, #8]
 8005938:	603b      	str	r3, [r7, #0]
 800593a:	4613      	mov	r3, r2
 800593c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800593e:	e050      	b.n	80059e2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005940:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005946:	d04c      	beq.n	80059e2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005948:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800594a:	2b00      	cmp	r3, #0
 800594c:	d007      	beq.n	800595e <UART_WaitOnFlagUntilTimeout+0x30>
 800594e:	f7fb fdcb 	bl	80014e8 <HAL_GetTick>
 8005952:	4602      	mov	r2, r0
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	1ad3      	subs	r3, r2, r3
 8005958:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800595a:	429a      	cmp	r2, r3
 800595c:	d241      	bcs.n	80059e2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	330c      	adds	r3, #12
 8005964:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005968:	e853 3f00 	ldrex	r3, [r3]
 800596c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800596e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005970:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005974:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	330c      	adds	r3, #12
 800597c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800597e:	637a      	str	r2, [r7, #52]	; 0x34
 8005980:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005982:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005984:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005986:	e841 2300 	strex	r3, r2, [r1]
 800598a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800598c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800598e:	2b00      	cmp	r3, #0
 8005990:	d1e5      	bne.n	800595e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	3314      	adds	r3, #20
 8005998:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	e853 3f00 	ldrex	r3, [r3]
 80059a0:	613b      	str	r3, [r7, #16]
   return(result);
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	f023 0301 	bic.w	r3, r3, #1
 80059a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	3314      	adds	r3, #20
 80059b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059b2:	623a      	str	r2, [r7, #32]
 80059b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b6:	69f9      	ldr	r1, [r7, #28]
 80059b8:	6a3a      	ldr	r2, [r7, #32]
 80059ba:	e841 2300 	strex	r3, r2, [r1]
 80059be:	61bb      	str	r3, [r7, #24]
   return(result);
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d1e5      	bne.n	8005992 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2220      	movs	r2, #32
 80059ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2220      	movs	r2, #32
 80059d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80059de:	2303      	movs	r3, #3
 80059e0:	e00f      	b.n	8005a02 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	4013      	ands	r3, r2
 80059ec:	68ba      	ldr	r2, [r7, #8]
 80059ee:	429a      	cmp	r2, r3
 80059f0:	bf0c      	ite	eq
 80059f2:	2301      	moveq	r3, #1
 80059f4:	2300      	movne	r3, #0
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	461a      	mov	r2, r3
 80059fa:	79fb      	ldrb	r3, [r7, #7]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d09f      	beq.n	8005940 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3740      	adds	r7, #64	; 0x40
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
	...

08005a0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a10:	b09f      	sub	sp, #124	; 0x7c
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	691b      	ldr	r3, [r3, #16]
 8005a1c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005a20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a22:	68d9      	ldr	r1, [r3, #12]
 8005a24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	ea40 0301 	orr.w	r3, r0, r1
 8005a2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a30:	689a      	ldr	r2, [r3, #8]
 8005a32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a34:	691b      	ldr	r3, [r3, #16]
 8005a36:	431a      	orrs	r2, r3
 8005a38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a3a:	695b      	ldr	r3, [r3, #20]
 8005a3c:	431a      	orrs	r2, r3
 8005a3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a40:	69db      	ldr	r3, [r3, #28]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005a46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005a50:	f021 010c 	bic.w	r1, r1, #12
 8005a54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a5a:	430b      	orrs	r3, r1
 8005a5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	695b      	ldr	r3, [r3, #20]
 8005a64:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005a68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a6a:	6999      	ldr	r1, [r3, #24]
 8005a6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	ea40 0301 	orr.w	r3, r0, r1
 8005a74:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	4bc5      	ldr	r3, [pc, #788]	; (8005d90 <UART_SetConfig+0x384>)
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d004      	beq.n	8005a8a <UART_SetConfig+0x7e>
 8005a80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	4bc3      	ldr	r3, [pc, #780]	; (8005d94 <UART_SetConfig+0x388>)
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d103      	bne.n	8005a92 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a8a:	f7fe fdd7 	bl	800463c <HAL_RCC_GetPCLK2Freq>
 8005a8e:	6778      	str	r0, [r7, #116]	; 0x74
 8005a90:	e002      	b.n	8005a98 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a92:	f7fe fdbf 	bl	8004614 <HAL_RCC_GetPCLK1Freq>
 8005a96:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a9a:	69db      	ldr	r3, [r3, #28]
 8005a9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005aa0:	f040 80b6 	bne.w	8005c10 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005aa4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005aa6:	461c      	mov	r4, r3
 8005aa8:	f04f 0500 	mov.w	r5, #0
 8005aac:	4622      	mov	r2, r4
 8005aae:	462b      	mov	r3, r5
 8005ab0:	1891      	adds	r1, r2, r2
 8005ab2:	6439      	str	r1, [r7, #64]	; 0x40
 8005ab4:	415b      	adcs	r3, r3
 8005ab6:	647b      	str	r3, [r7, #68]	; 0x44
 8005ab8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005abc:	1912      	adds	r2, r2, r4
 8005abe:	eb45 0303 	adc.w	r3, r5, r3
 8005ac2:	f04f 0000 	mov.w	r0, #0
 8005ac6:	f04f 0100 	mov.w	r1, #0
 8005aca:	00d9      	lsls	r1, r3, #3
 8005acc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ad0:	00d0      	lsls	r0, r2, #3
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	460b      	mov	r3, r1
 8005ad6:	1911      	adds	r1, r2, r4
 8005ad8:	6639      	str	r1, [r7, #96]	; 0x60
 8005ada:	416b      	adcs	r3, r5
 8005adc:	667b      	str	r3, [r7, #100]	; 0x64
 8005ade:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	f04f 0300 	mov.w	r3, #0
 8005ae8:	1891      	adds	r1, r2, r2
 8005aea:	63b9      	str	r1, [r7, #56]	; 0x38
 8005aec:	415b      	adcs	r3, r3
 8005aee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005af0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005af4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005af8:	f7fa fbba 	bl	8000270 <__aeabi_uldivmod>
 8005afc:	4602      	mov	r2, r0
 8005afe:	460b      	mov	r3, r1
 8005b00:	4ba5      	ldr	r3, [pc, #660]	; (8005d98 <UART_SetConfig+0x38c>)
 8005b02:	fba3 2302 	umull	r2, r3, r3, r2
 8005b06:	095b      	lsrs	r3, r3, #5
 8005b08:	011e      	lsls	r6, r3, #4
 8005b0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b0c:	461c      	mov	r4, r3
 8005b0e:	f04f 0500 	mov.w	r5, #0
 8005b12:	4622      	mov	r2, r4
 8005b14:	462b      	mov	r3, r5
 8005b16:	1891      	adds	r1, r2, r2
 8005b18:	6339      	str	r1, [r7, #48]	; 0x30
 8005b1a:	415b      	adcs	r3, r3
 8005b1c:	637b      	str	r3, [r7, #52]	; 0x34
 8005b1e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005b22:	1912      	adds	r2, r2, r4
 8005b24:	eb45 0303 	adc.w	r3, r5, r3
 8005b28:	f04f 0000 	mov.w	r0, #0
 8005b2c:	f04f 0100 	mov.w	r1, #0
 8005b30:	00d9      	lsls	r1, r3, #3
 8005b32:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005b36:	00d0      	lsls	r0, r2, #3
 8005b38:	4602      	mov	r2, r0
 8005b3a:	460b      	mov	r3, r1
 8005b3c:	1911      	adds	r1, r2, r4
 8005b3e:	65b9      	str	r1, [r7, #88]	; 0x58
 8005b40:	416b      	adcs	r3, r5
 8005b42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	461a      	mov	r2, r3
 8005b4a:	f04f 0300 	mov.w	r3, #0
 8005b4e:	1891      	adds	r1, r2, r2
 8005b50:	62b9      	str	r1, [r7, #40]	; 0x28
 8005b52:	415b      	adcs	r3, r3
 8005b54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b5a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005b5e:	f7fa fb87 	bl	8000270 <__aeabi_uldivmod>
 8005b62:	4602      	mov	r2, r0
 8005b64:	460b      	mov	r3, r1
 8005b66:	4b8c      	ldr	r3, [pc, #560]	; (8005d98 <UART_SetConfig+0x38c>)
 8005b68:	fba3 1302 	umull	r1, r3, r3, r2
 8005b6c:	095b      	lsrs	r3, r3, #5
 8005b6e:	2164      	movs	r1, #100	; 0x64
 8005b70:	fb01 f303 	mul.w	r3, r1, r3
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	00db      	lsls	r3, r3, #3
 8005b78:	3332      	adds	r3, #50	; 0x32
 8005b7a:	4a87      	ldr	r2, [pc, #540]	; (8005d98 <UART_SetConfig+0x38c>)
 8005b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b80:	095b      	lsrs	r3, r3, #5
 8005b82:	005b      	lsls	r3, r3, #1
 8005b84:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005b88:	441e      	add	r6, r3
 8005b8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f04f 0100 	mov.w	r1, #0
 8005b92:	4602      	mov	r2, r0
 8005b94:	460b      	mov	r3, r1
 8005b96:	1894      	adds	r4, r2, r2
 8005b98:	623c      	str	r4, [r7, #32]
 8005b9a:	415b      	adcs	r3, r3
 8005b9c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005ba2:	1812      	adds	r2, r2, r0
 8005ba4:	eb41 0303 	adc.w	r3, r1, r3
 8005ba8:	f04f 0400 	mov.w	r4, #0
 8005bac:	f04f 0500 	mov.w	r5, #0
 8005bb0:	00dd      	lsls	r5, r3, #3
 8005bb2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005bb6:	00d4      	lsls	r4, r2, #3
 8005bb8:	4622      	mov	r2, r4
 8005bba:	462b      	mov	r3, r5
 8005bbc:	1814      	adds	r4, r2, r0
 8005bbe:	653c      	str	r4, [r7, #80]	; 0x50
 8005bc0:	414b      	adcs	r3, r1
 8005bc2:	657b      	str	r3, [r7, #84]	; 0x54
 8005bc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	461a      	mov	r2, r3
 8005bca:	f04f 0300 	mov.w	r3, #0
 8005bce:	1891      	adds	r1, r2, r2
 8005bd0:	61b9      	str	r1, [r7, #24]
 8005bd2:	415b      	adcs	r3, r3
 8005bd4:	61fb      	str	r3, [r7, #28]
 8005bd6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005bda:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005bde:	f7fa fb47 	bl	8000270 <__aeabi_uldivmod>
 8005be2:	4602      	mov	r2, r0
 8005be4:	460b      	mov	r3, r1
 8005be6:	4b6c      	ldr	r3, [pc, #432]	; (8005d98 <UART_SetConfig+0x38c>)
 8005be8:	fba3 1302 	umull	r1, r3, r3, r2
 8005bec:	095b      	lsrs	r3, r3, #5
 8005bee:	2164      	movs	r1, #100	; 0x64
 8005bf0:	fb01 f303 	mul.w	r3, r1, r3
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	00db      	lsls	r3, r3, #3
 8005bf8:	3332      	adds	r3, #50	; 0x32
 8005bfa:	4a67      	ldr	r2, [pc, #412]	; (8005d98 <UART_SetConfig+0x38c>)
 8005bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8005c00:	095b      	lsrs	r3, r3, #5
 8005c02:	f003 0207 	and.w	r2, r3, #7
 8005c06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4432      	add	r2, r6
 8005c0c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005c0e:	e0b9      	b.n	8005d84 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c12:	461c      	mov	r4, r3
 8005c14:	f04f 0500 	mov.w	r5, #0
 8005c18:	4622      	mov	r2, r4
 8005c1a:	462b      	mov	r3, r5
 8005c1c:	1891      	adds	r1, r2, r2
 8005c1e:	6139      	str	r1, [r7, #16]
 8005c20:	415b      	adcs	r3, r3
 8005c22:	617b      	str	r3, [r7, #20]
 8005c24:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005c28:	1912      	adds	r2, r2, r4
 8005c2a:	eb45 0303 	adc.w	r3, r5, r3
 8005c2e:	f04f 0000 	mov.w	r0, #0
 8005c32:	f04f 0100 	mov.w	r1, #0
 8005c36:	00d9      	lsls	r1, r3, #3
 8005c38:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005c3c:	00d0      	lsls	r0, r2, #3
 8005c3e:	4602      	mov	r2, r0
 8005c40:	460b      	mov	r3, r1
 8005c42:	eb12 0804 	adds.w	r8, r2, r4
 8005c46:	eb43 0905 	adc.w	r9, r3, r5
 8005c4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f04f 0100 	mov.w	r1, #0
 8005c54:	f04f 0200 	mov.w	r2, #0
 8005c58:	f04f 0300 	mov.w	r3, #0
 8005c5c:	008b      	lsls	r3, r1, #2
 8005c5e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005c62:	0082      	lsls	r2, r0, #2
 8005c64:	4640      	mov	r0, r8
 8005c66:	4649      	mov	r1, r9
 8005c68:	f7fa fb02 	bl	8000270 <__aeabi_uldivmod>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	460b      	mov	r3, r1
 8005c70:	4b49      	ldr	r3, [pc, #292]	; (8005d98 <UART_SetConfig+0x38c>)
 8005c72:	fba3 2302 	umull	r2, r3, r3, r2
 8005c76:	095b      	lsrs	r3, r3, #5
 8005c78:	011e      	lsls	r6, r3, #4
 8005c7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f04f 0100 	mov.w	r1, #0
 8005c82:	4602      	mov	r2, r0
 8005c84:	460b      	mov	r3, r1
 8005c86:	1894      	adds	r4, r2, r2
 8005c88:	60bc      	str	r4, [r7, #8]
 8005c8a:	415b      	adcs	r3, r3
 8005c8c:	60fb      	str	r3, [r7, #12]
 8005c8e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c92:	1812      	adds	r2, r2, r0
 8005c94:	eb41 0303 	adc.w	r3, r1, r3
 8005c98:	f04f 0400 	mov.w	r4, #0
 8005c9c:	f04f 0500 	mov.w	r5, #0
 8005ca0:	00dd      	lsls	r5, r3, #3
 8005ca2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005ca6:	00d4      	lsls	r4, r2, #3
 8005ca8:	4622      	mov	r2, r4
 8005caa:	462b      	mov	r3, r5
 8005cac:	1814      	adds	r4, r2, r0
 8005cae:	64bc      	str	r4, [r7, #72]	; 0x48
 8005cb0:	414b      	adcs	r3, r1
 8005cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f04f 0100 	mov.w	r1, #0
 8005cbe:	f04f 0200 	mov.w	r2, #0
 8005cc2:	f04f 0300 	mov.w	r3, #0
 8005cc6:	008b      	lsls	r3, r1, #2
 8005cc8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005ccc:	0082      	lsls	r2, r0, #2
 8005cce:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005cd2:	f7fa facd 	bl	8000270 <__aeabi_uldivmod>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	460b      	mov	r3, r1
 8005cda:	4b2f      	ldr	r3, [pc, #188]	; (8005d98 <UART_SetConfig+0x38c>)
 8005cdc:	fba3 1302 	umull	r1, r3, r3, r2
 8005ce0:	095b      	lsrs	r3, r3, #5
 8005ce2:	2164      	movs	r1, #100	; 0x64
 8005ce4:	fb01 f303 	mul.w	r3, r1, r3
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	011b      	lsls	r3, r3, #4
 8005cec:	3332      	adds	r3, #50	; 0x32
 8005cee:	4a2a      	ldr	r2, [pc, #168]	; (8005d98 <UART_SetConfig+0x38c>)
 8005cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8005cf4:	095b      	lsrs	r3, r3, #5
 8005cf6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005cfa:	441e      	add	r6, r3
 8005cfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f04f 0100 	mov.w	r1, #0
 8005d04:	4602      	mov	r2, r0
 8005d06:	460b      	mov	r3, r1
 8005d08:	1894      	adds	r4, r2, r2
 8005d0a:	603c      	str	r4, [r7, #0]
 8005d0c:	415b      	adcs	r3, r3
 8005d0e:	607b      	str	r3, [r7, #4]
 8005d10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d14:	1812      	adds	r2, r2, r0
 8005d16:	eb41 0303 	adc.w	r3, r1, r3
 8005d1a:	f04f 0400 	mov.w	r4, #0
 8005d1e:	f04f 0500 	mov.w	r5, #0
 8005d22:	00dd      	lsls	r5, r3, #3
 8005d24:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005d28:	00d4      	lsls	r4, r2, #3
 8005d2a:	4622      	mov	r2, r4
 8005d2c:	462b      	mov	r3, r5
 8005d2e:	eb12 0a00 	adds.w	sl, r2, r0
 8005d32:	eb43 0b01 	adc.w	fp, r3, r1
 8005d36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f04f 0100 	mov.w	r1, #0
 8005d40:	f04f 0200 	mov.w	r2, #0
 8005d44:	f04f 0300 	mov.w	r3, #0
 8005d48:	008b      	lsls	r3, r1, #2
 8005d4a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005d4e:	0082      	lsls	r2, r0, #2
 8005d50:	4650      	mov	r0, sl
 8005d52:	4659      	mov	r1, fp
 8005d54:	f7fa fa8c 	bl	8000270 <__aeabi_uldivmod>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	460b      	mov	r3, r1
 8005d5c:	4b0e      	ldr	r3, [pc, #56]	; (8005d98 <UART_SetConfig+0x38c>)
 8005d5e:	fba3 1302 	umull	r1, r3, r3, r2
 8005d62:	095b      	lsrs	r3, r3, #5
 8005d64:	2164      	movs	r1, #100	; 0x64
 8005d66:	fb01 f303 	mul.w	r3, r1, r3
 8005d6a:	1ad3      	subs	r3, r2, r3
 8005d6c:	011b      	lsls	r3, r3, #4
 8005d6e:	3332      	adds	r3, #50	; 0x32
 8005d70:	4a09      	ldr	r2, [pc, #36]	; (8005d98 <UART_SetConfig+0x38c>)
 8005d72:	fba2 2303 	umull	r2, r3, r2, r3
 8005d76:	095b      	lsrs	r3, r3, #5
 8005d78:	f003 020f 	and.w	r2, r3, #15
 8005d7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4432      	add	r2, r6
 8005d82:	609a      	str	r2, [r3, #8]
}
 8005d84:	bf00      	nop
 8005d86:	377c      	adds	r7, #124	; 0x7c
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d8e:	bf00      	nop
 8005d90:	40011000 	.word	0x40011000
 8005d94:	40011400 	.word	0x40011400
 8005d98:	51eb851f 	.word	0x51eb851f

08005d9c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d9c:	b084      	sub	sp, #16
 8005d9e:	b580      	push	{r7, lr}
 8005da0:	b084      	sub	sp, #16
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
 8005da6:	f107 001c 	add.w	r0, r7, #28
 8005daa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d122      	bne.n	8005dfa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005dc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005ddc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d105      	bne.n	8005dee <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f001 fb1c 	bl	800742c <USB_CoreReset>
 8005df4:	4603      	mov	r3, r0
 8005df6:	73fb      	strb	r3, [r7, #15]
 8005df8:	e01a      	b.n	8005e30 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f001 fb10 	bl	800742c <USB_CoreReset>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005e10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d106      	bne.n	8005e24 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e1a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	639a      	str	r2, [r3, #56]	; 0x38
 8005e22:	e005      	b.n	8005e30 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e28:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d10b      	bne.n	8005e4e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	f043 0206 	orr.w	r2, r3, #6
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	f043 0220 	orr.w	r2, r3, #32
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3710      	adds	r7, #16
 8005e54:	46bd      	mov	sp, r7
 8005e56:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e5a:	b004      	add	sp, #16
 8005e5c:	4770      	bx	lr
	...

08005e60 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b087      	sub	sp, #28
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005e6e:	79fb      	ldrb	r3, [r7, #7]
 8005e70:	2b02      	cmp	r3, #2
 8005e72:	d165      	bne.n	8005f40 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	4a41      	ldr	r2, [pc, #260]	; (8005f7c <USB_SetTurnaroundTime+0x11c>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d906      	bls.n	8005e8a <USB_SetTurnaroundTime+0x2a>
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	4a40      	ldr	r2, [pc, #256]	; (8005f80 <USB_SetTurnaroundTime+0x120>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d202      	bcs.n	8005e8a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005e84:	230f      	movs	r3, #15
 8005e86:	617b      	str	r3, [r7, #20]
 8005e88:	e062      	b.n	8005f50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	4a3c      	ldr	r2, [pc, #240]	; (8005f80 <USB_SetTurnaroundTime+0x120>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d306      	bcc.n	8005ea0 <USB_SetTurnaroundTime+0x40>
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	4a3b      	ldr	r2, [pc, #236]	; (8005f84 <USB_SetTurnaroundTime+0x124>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d202      	bcs.n	8005ea0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005e9a:	230e      	movs	r3, #14
 8005e9c:	617b      	str	r3, [r7, #20]
 8005e9e:	e057      	b.n	8005f50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	4a38      	ldr	r2, [pc, #224]	; (8005f84 <USB_SetTurnaroundTime+0x124>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d306      	bcc.n	8005eb6 <USB_SetTurnaroundTime+0x56>
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	4a37      	ldr	r2, [pc, #220]	; (8005f88 <USB_SetTurnaroundTime+0x128>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d202      	bcs.n	8005eb6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005eb0:	230d      	movs	r3, #13
 8005eb2:	617b      	str	r3, [r7, #20]
 8005eb4:	e04c      	b.n	8005f50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	4a33      	ldr	r2, [pc, #204]	; (8005f88 <USB_SetTurnaroundTime+0x128>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d306      	bcc.n	8005ecc <USB_SetTurnaroundTime+0x6c>
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	4a32      	ldr	r2, [pc, #200]	; (8005f8c <USB_SetTurnaroundTime+0x12c>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d802      	bhi.n	8005ecc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005ec6:	230c      	movs	r3, #12
 8005ec8:	617b      	str	r3, [r7, #20]
 8005eca:	e041      	b.n	8005f50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	4a2f      	ldr	r2, [pc, #188]	; (8005f8c <USB_SetTurnaroundTime+0x12c>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d906      	bls.n	8005ee2 <USB_SetTurnaroundTime+0x82>
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	4a2e      	ldr	r2, [pc, #184]	; (8005f90 <USB_SetTurnaroundTime+0x130>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d802      	bhi.n	8005ee2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005edc:	230b      	movs	r3, #11
 8005ede:	617b      	str	r3, [r7, #20]
 8005ee0:	e036      	b.n	8005f50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	4a2a      	ldr	r2, [pc, #168]	; (8005f90 <USB_SetTurnaroundTime+0x130>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d906      	bls.n	8005ef8 <USB_SetTurnaroundTime+0x98>
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	4a29      	ldr	r2, [pc, #164]	; (8005f94 <USB_SetTurnaroundTime+0x134>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d802      	bhi.n	8005ef8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005ef2:	230a      	movs	r3, #10
 8005ef4:	617b      	str	r3, [r7, #20]
 8005ef6:	e02b      	b.n	8005f50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	4a26      	ldr	r2, [pc, #152]	; (8005f94 <USB_SetTurnaroundTime+0x134>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d906      	bls.n	8005f0e <USB_SetTurnaroundTime+0xae>
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	4a25      	ldr	r2, [pc, #148]	; (8005f98 <USB_SetTurnaroundTime+0x138>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d202      	bcs.n	8005f0e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005f08:	2309      	movs	r3, #9
 8005f0a:	617b      	str	r3, [r7, #20]
 8005f0c:	e020      	b.n	8005f50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	4a21      	ldr	r2, [pc, #132]	; (8005f98 <USB_SetTurnaroundTime+0x138>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d306      	bcc.n	8005f24 <USB_SetTurnaroundTime+0xc4>
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	4a20      	ldr	r2, [pc, #128]	; (8005f9c <USB_SetTurnaroundTime+0x13c>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d802      	bhi.n	8005f24 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005f1e:	2308      	movs	r3, #8
 8005f20:	617b      	str	r3, [r7, #20]
 8005f22:	e015      	b.n	8005f50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	4a1d      	ldr	r2, [pc, #116]	; (8005f9c <USB_SetTurnaroundTime+0x13c>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d906      	bls.n	8005f3a <USB_SetTurnaroundTime+0xda>
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	4a1c      	ldr	r2, [pc, #112]	; (8005fa0 <USB_SetTurnaroundTime+0x140>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d202      	bcs.n	8005f3a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005f34:	2307      	movs	r3, #7
 8005f36:	617b      	str	r3, [r7, #20]
 8005f38:	e00a      	b.n	8005f50 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005f3a:	2306      	movs	r3, #6
 8005f3c:	617b      	str	r3, [r7, #20]
 8005f3e:	e007      	b.n	8005f50 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005f40:	79fb      	ldrb	r3, [r7, #7]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d102      	bne.n	8005f4c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005f46:	2309      	movs	r3, #9
 8005f48:	617b      	str	r3, [r7, #20]
 8005f4a:	e001      	b.n	8005f50 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005f4c:	2309      	movs	r3, #9
 8005f4e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	68da      	ldr	r2, [r3, #12]
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	029b      	lsls	r3, r3, #10
 8005f64:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005f68:	431a      	orrs	r2, r3
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005f6e:	2300      	movs	r3, #0
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	371c      	adds	r7, #28
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr
 8005f7c:	00d8acbf 	.word	0x00d8acbf
 8005f80:	00e4e1c0 	.word	0x00e4e1c0
 8005f84:	00f42400 	.word	0x00f42400
 8005f88:	01067380 	.word	0x01067380
 8005f8c:	011a499f 	.word	0x011a499f
 8005f90:	01312cff 	.word	0x01312cff
 8005f94:	014ca43f 	.word	0x014ca43f
 8005f98:	016e3600 	.word	0x016e3600
 8005f9c:	01a6ab1f 	.word	0x01a6ab1f
 8005fa0:	01e84800 	.word	0x01e84800

08005fa4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	f043 0201 	orr.w	r2, r3, #1
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005fb8:	2300      	movs	r3, #0
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	370c      	adds	r7, #12
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr

08005fc6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005fc6:	b480      	push	{r7}
 8005fc8:	b083      	sub	sp, #12
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	f023 0201 	bic.w	r2, r3, #1
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005fda:	2300      	movs	r3, #0
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	370c      	adds	r7, #12
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	460b      	mov	r3, r1
 8005ff2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006004:	78fb      	ldrb	r3, [r7, #3]
 8006006:	2b01      	cmp	r3, #1
 8006008:	d115      	bne.n	8006036 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	68db      	ldr	r3, [r3, #12]
 800600e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006016:	2001      	movs	r0, #1
 8006018:	f7fb fa72 	bl	8001500 <HAL_Delay>
      ms++;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	3301      	adds	r3, #1
 8006020:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f001 f972 	bl	800730c <USB_GetMode>
 8006028:	4603      	mov	r3, r0
 800602a:	2b01      	cmp	r3, #1
 800602c:	d01e      	beq.n	800606c <USB_SetCurrentMode+0x84>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2b31      	cmp	r3, #49	; 0x31
 8006032:	d9f0      	bls.n	8006016 <USB_SetCurrentMode+0x2e>
 8006034:	e01a      	b.n	800606c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006036:	78fb      	ldrb	r3, [r7, #3]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d115      	bne.n	8006068 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006048:	2001      	movs	r0, #1
 800604a:	f7fb fa59 	bl	8001500 <HAL_Delay>
      ms++;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	3301      	adds	r3, #1
 8006052:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f001 f959 	bl	800730c <USB_GetMode>
 800605a:	4603      	mov	r3, r0
 800605c:	2b00      	cmp	r3, #0
 800605e:	d005      	beq.n	800606c <USB_SetCurrentMode+0x84>
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2b31      	cmp	r3, #49	; 0x31
 8006064:	d9f0      	bls.n	8006048 <USB_SetCurrentMode+0x60>
 8006066:	e001      	b.n	800606c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	e005      	b.n	8006078 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2b32      	cmp	r3, #50	; 0x32
 8006070:	d101      	bne.n	8006076 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e000      	b.n	8006078 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006076:	2300      	movs	r3, #0
}
 8006078:	4618      	mov	r0, r3
 800607a:	3710      	adds	r7, #16
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006080:	b084      	sub	sp, #16
 8006082:	b580      	push	{r7, lr}
 8006084:	b086      	sub	sp, #24
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
 800608a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800608e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006092:	2300      	movs	r3, #0
 8006094:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800609a:	2300      	movs	r3, #0
 800609c:	613b      	str	r3, [r7, #16]
 800609e:	e009      	b.n	80060b4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	3340      	adds	r3, #64	; 0x40
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	4413      	add	r3, r2
 80060aa:	2200      	movs	r2, #0
 80060ac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	3301      	adds	r3, #1
 80060b2:	613b      	str	r3, [r7, #16]
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	2b0e      	cmp	r3, #14
 80060b8:	d9f2      	bls.n	80060a0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80060ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d11c      	bne.n	80060fa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060ce:	f043 0302 	orr.w	r3, r3, #2
 80060d2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	639a      	str	r2, [r3, #56]	; 0x38
 80060f8:	e00b      	b.n	8006112 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060fe:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800610a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006118:	461a      	mov	r2, r3
 800611a:	2300      	movs	r3, #0
 800611c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006124:	4619      	mov	r1, r3
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800612c:	461a      	mov	r2, r3
 800612e:	680b      	ldr	r3, [r1, #0]
 8006130:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006134:	2b01      	cmp	r3, #1
 8006136:	d10c      	bne.n	8006152 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800613a:	2b00      	cmp	r3, #0
 800613c:	d104      	bne.n	8006148 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800613e:	2100      	movs	r1, #0
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f000 f945 	bl	80063d0 <USB_SetDevSpeed>
 8006146:	e008      	b.n	800615a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006148:	2101      	movs	r1, #1
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 f940 	bl	80063d0 <USB_SetDevSpeed>
 8006150:	e003      	b.n	800615a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006152:	2103      	movs	r1, #3
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 f93b 	bl	80063d0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800615a:	2110      	movs	r1, #16
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f000 f8f3 	bl	8006348 <USB_FlushTxFifo>
 8006162:	4603      	mov	r3, r0
 8006164:	2b00      	cmp	r3, #0
 8006166:	d001      	beq.n	800616c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f000 f90f 	bl	8006390 <USB_FlushRxFifo>
 8006172:	4603      	mov	r3, r0
 8006174:	2b00      	cmp	r3, #0
 8006176:	d001      	beq.n	800617c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006182:	461a      	mov	r2, r3
 8006184:	2300      	movs	r3, #0
 8006186:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800618e:	461a      	mov	r2, r3
 8006190:	2300      	movs	r3, #0
 8006192:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800619a:	461a      	mov	r2, r3
 800619c:	2300      	movs	r3, #0
 800619e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061a0:	2300      	movs	r3, #0
 80061a2:	613b      	str	r3, [r7, #16]
 80061a4:	e043      	b.n	800622e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	015a      	lsls	r2, r3, #5
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	4413      	add	r3, r2
 80061ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061bc:	d118      	bne.n	80061f0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d10a      	bne.n	80061da <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	015a      	lsls	r2, r3, #5
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	4413      	add	r3, r2
 80061cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061d0:	461a      	mov	r2, r3
 80061d2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80061d6:	6013      	str	r3, [r2, #0]
 80061d8:	e013      	b.n	8006202 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	015a      	lsls	r2, r3, #5
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	4413      	add	r3, r2
 80061e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061e6:	461a      	mov	r2, r3
 80061e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80061ec:	6013      	str	r3, [r2, #0]
 80061ee:	e008      	b.n	8006202 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	015a      	lsls	r2, r3, #5
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	4413      	add	r3, r2
 80061f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061fc:	461a      	mov	r2, r3
 80061fe:	2300      	movs	r3, #0
 8006200:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	015a      	lsls	r2, r3, #5
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	4413      	add	r3, r2
 800620a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800620e:	461a      	mov	r2, r3
 8006210:	2300      	movs	r3, #0
 8006212:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	015a      	lsls	r2, r3, #5
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	4413      	add	r3, r2
 800621c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006220:	461a      	mov	r2, r3
 8006222:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006226:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	3301      	adds	r3, #1
 800622c:	613b      	str	r3, [r7, #16]
 800622e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006230:	693a      	ldr	r2, [r7, #16]
 8006232:	429a      	cmp	r2, r3
 8006234:	d3b7      	bcc.n	80061a6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006236:	2300      	movs	r3, #0
 8006238:	613b      	str	r3, [r7, #16]
 800623a:	e043      	b.n	80062c4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	015a      	lsls	r2, r3, #5
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	4413      	add	r3, r2
 8006244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800624e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006252:	d118      	bne.n	8006286 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d10a      	bne.n	8006270 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	015a      	lsls	r2, r3, #5
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	4413      	add	r3, r2
 8006262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006266:	461a      	mov	r2, r3
 8006268:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800626c:	6013      	str	r3, [r2, #0]
 800626e:	e013      	b.n	8006298 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	015a      	lsls	r2, r3, #5
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	4413      	add	r3, r2
 8006278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800627c:	461a      	mov	r2, r3
 800627e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006282:	6013      	str	r3, [r2, #0]
 8006284:	e008      	b.n	8006298 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	015a      	lsls	r2, r3, #5
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	4413      	add	r3, r2
 800628e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006292:	461a      	mov	r2, r3
 8006294:	2300      	movs	r3, #0
 8006296:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	015a      	lsls	r2, r3, #5
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	4413      	add	r3, r2
 80062a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062a4:	461a      	mov	r2, r3
 80062a6:	2300      	movs	r3, #0
 80062a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	015a      	lsls	r2, r3, #5
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	4413      	add	r3, r2
 80062b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062b6:	461a      	mov	r2, r3
 80062b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80062bc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	3301      	adds	r3, #1
 80062c2:	613b      	str	r3, [r7, #16]
 80062c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c6:	693a      	ldr	r2, [r7, #16]
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d3b7      	bcc.n	800623c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062d2:	691b      	ldr	r3, [r3, #16]
 80062d4:	68fa      	ldr	r2, [r7, #12]
 80062d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062de:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80062ec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80062ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d105      	bne.n	8006300 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	699b      	ldr	r3, [r3, #24]
 80062f8:	f043 0210 	orr.w	r2, r3, #16
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	699a      	ldr	r2, [r3, #24]
 8006304:	4b0f      	ldr	r3, [pc, #60]	; (8006344 <USB_DevInit+0x2c4>)
 8006306:	4313      	orrs	r3, r2
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800630c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800630e:	2b00      	cmp	r3, #0
 8006310:	d005      	beq.n	800631e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	699b      	ldr	r3, [r3, #24]
 8006316:	f043 0208 	orr.w	r2, r3, #8
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800631e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006320:	2b01      	cmp	r3, #1
 8006322:	d107      	bne.n	8006334 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	699b      	ldr	r3, [r3, #24]
 8006328:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800632c:	f043 0304 	orr.w	r3, r3, #4
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006334:	7dfb      	ldrb	r3, [r7, #23]
}
 8006336:	4618      	mov	r0, r3
 8006338:	3718      	adds	r7, #24
 800633a:	46bd      	mov	sp, r7
 800633c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006340:	b004      	add	sp, #16
 8006342:	4770      	bx	lr
 8006344:	803c3800 	.word	0x803c3800

08006348 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006348:	b480      	push	{r7}
 800634a:	b085      	sub	sp, #20
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006352:	2300      	movs	r3, #0
 8006354:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	019b      	lsls	r3, r3, #6
 800635a:	f043 0220 	orr.w	r2, r3, #32
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	3301      	adds	r3, #1
 8006366:	60fb      	str	r3, [r7, #12]
 8006368:	4a08      	ldr	r2, [pc, #32]	; (800638c <USB_FlushTxFifo+0x44>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d901      	bls.n	8006372 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800636e:	2303      	movs	r3, #3
 8006370:	e006      	b.n	8006380 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	f003 0320 	and.w	r3, r3, #32
 800637a:	2b20      	cmp	r3, #32
 800637c:	d0f1      	beq.n	8006362 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800637e:	2300      	movs	r3, #0
}
 8006380:	4618      	mov	r0, r3
 8006382:	3714      	adds	r7, #20
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr
 800638c:	00030d40 	.word	0x00030d40

08006390 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006390:	b480      	push	{r7}
 8006392:	b085      	sub	sp, #20
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006398:	2300      	movs	r3, #0
 800639a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2210      	movs	r2, #16
 80063a0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	3301      	adds	r3, #1
 80063a6:	60fb      	str	r3, [r7, #12]
 80063a8:	4a08      	ldr	r2, [pc, #32]	; (80063cc <USB_FlushRxFifo+0x3c>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d901      	bls.n	80063b2 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80063ae:	2303      	movs	r3, #3
 80063b0:	e006      	b.n	80063c0 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	f003 0310 	and.w	r3, r3, #16
 80063ba:	2b10      	cmp	r3, #16
 80063bc:	d0f1      	beq.n	80063a2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80063be:	2300      	movs	r3, #0
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3714      	adds	r7, #20
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr
 80063cc:	00030d40 	.word	0x00030d40

080063d0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b085      	sub	sp, #20
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	460b      	mov	r3, r1
 80063da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	78fb      	ldrb	r3, [r7, #3]
 80063ea:	68f9      	ldr	r1, [r7, #12]
 80063ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063f0:	4313      	orrs	r3, r2
 80063f2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80063f4:	2300      	movs	r3, #0
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3714      	adds	r7, #20
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr

08006402 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006402:	b480      	push	{r7}
 8006404:	b087      	sub	sp, #28
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	f003 0306 	and.w	r3, r3, #6
 800641a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d102      	bne.n	8006428 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006422:	2300      	movs	r3, #0
 8006424:	75fb      	strb	r3, [r7, #23]
 8006426:	e00a      	b.n	800643e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2b02      	cmp	r3, #2
 800642c:	d002      	beq.n	8006434 <USB_GetDevSpeed+0x32>
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2b06      	cmp	r3, #6
 8006432:	d102      	bne.n	800643a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006434:	2302      	movs	r3, #2
 8006436:	75fb      	strb	r3, [r7, #23]
 8006438:	e001      	b.n	800643e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800643a:	230f      	movs	r3, #15
 800643c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800643e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006440:	4618      	mov	r0, r3
 8006442:	371c      	adds	r7, #28
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr

0800644c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800644c:	b480      	push	{r7}
 800644e:	b085      	sub	sp, #20
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	785b      	ldrb	r3, [r3, #1]
 8006464:	2b01      	cmp	r3, #1
 8006466:	d13a      	bne.n	80064de <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800646e:	69da      	ldr	r2, [r3, #28]
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	f003 030f 	and.w	r3, r3, #15
 8006478:	2101      	movs	r1, #1
 800647a:	fa01 f303 	lsl.w	r3, r1, r3
 800647e:	b29b      	uxth	r3, r3
 8006480:	68f9      	ldr	r1, [r7, #12]
 8006482:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006486:	4313      	orrs	r3, r2
 8006488:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	015a      	lsls	r2, r3, #5
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	4413      	add	r3, r2
 8006492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800649c:	2b00      	cmp	r3, #0
 800649e:	d155      	bne.n	800654c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	015a      	lsls	r2, r3, #5
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	4413      	add	r3, r2
 80064a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	78db      	ldrb	r3, [r3, #3]
 80064ba:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80064bc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	059b      	lsls	r3, r3, #22
 80064c2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80064c4:	4313      	orrs	r3, r2
 80064c6:	68ba      	ldr	r2, [r7, #8]
 80064c8:	0151      	lsls	r1, r2, #5
 80064ca:	68fa      	ldr	r2, [r7, #12]
 80064cc:	440a      	add	r2, r1
 80064ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064da:	6013      	str	r3, [r2, #0]
 80064dc:	e036      	b.n	800654c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064e4:	69da      	ldr	r2, [r3, #28]
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	f003 030f 	and.w	r3, r3, #15
 80064ee:	2101      	movs	r1, #1
 80064f0:	fa01 f303 	lsl.w	r3, r1, r3
 80064f4:	041b      	lsls	r3, r3, #16
 80064f6:	68f9      	ldr	r1, [r7, #12]
 80064f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064fc:	4313      	orrs	r3, r2
 80064fe:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	015a      	lsls	r2, r3, #5
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	4413      	add	r3, r2
 8006508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006512:	2b00      	cmp	r3, #0
 8006514:	d11a      	bne.n	800654c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	015a      	lsls	r2, r3, #5
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	4413      	add	r3, r2
 800651e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	78db      	ldrb	r3, [r3, #3]
 8006530:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006532:	430b      	orrs	r3, r1
 8006534:	4313      	orrs	r3, r2
 8006536:	68ba      	ldr	r2, [r7, #8]
 8006538:	0151      	lsls	r1, r2, #5
 800653a:	68fa      	ldr	r2, [r7, #12]
 800653c:	440a      	add	r2, r1
 800653e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006546:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800654a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800654c:	2300      	movs	r3, #0
}
 800654e:	4618      	mov	r0, r3
 8006550:	3714      	adds	r7, #20
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr
	...

0800655c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800655c:	b480      	push	{r7}
 800655e:	b085      	sub	sp, #20
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	785b      	ldrb	r3, [r3, #1]
 8006574:	2b01      	cmp	r3, #1
 8006576:	d161      	bne.n	800663c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	015a      	lsls	r2, r3, #5
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	4413      	add	r3, r2
 8006580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800658a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800658e:	d11f      	bne.n	80065d0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	015a      	lsls	r2, r3, #5
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	4413      	add	r3, r2
 8006598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	68ba      	ldr	r2, [r7, #8]
 80065a0:	0151      	lsls	r1, r2, #5
 80065a2:	68fa      	ldr	r2, [r7, #12]
 80065a4:	440a      	add	r2, r1
 80065a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065aa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80065ae:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	015a      	lsls	r2, r3, #5
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	4413      	add	r3, r2
 80065b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	68ba      	ldr	r2, [r7, #8]
 80065c0:	0151      	lsls	r1, r2, #5
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	440a      	add	r2, r1
 80065c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80065ce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	f003 030f 	and.w	r3, r3, #15
 80065e0:	2101      	movs	r1, #1
 80065e2:	fa01 f303 	lsl.w	r3, r1, r3
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	43db      	mvns	r3, r3
 80065ea:	68f9      	ldr	r1, [r7, #12]
 80065ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065f0:	4013      	ands	r3, r2
 80065f2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065fa:	69da      	ldr	r2, [r3, #28]
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	f003 030f 	and.w	r3, r3, #15
 8006604:	2101      	movs	r1, #1
 8006606:	fa01 f303 	lsl.w	r3, r1, r3
 800660a:	b29b      	uxth	r3, r3
 800660c:	43db      	mvns	r3, r3
 800660e:	68f9      	ldr	r1, [r7, #12]
 8006610:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006614:	4013      	ands	r3, r2
 8006616:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	015a      	lsls	r2, r3, #5
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	4413      	add	r3, r2
 8006620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	0159      	lsls	r1, r3, #5
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	440b      	add	r3, r1
 800662e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006632:	4619      	mov	r1, r3
 8006634:	4b35      	ldr	r3, [pc, #212]	; (800670c <USB_DeactivateEndpoint+0x1b0>)
 8006636:	4013      	ands	r3, r2
 8006638:	600b      	str	r3, [r1, #0]
 800663a:	e060      	b.n	80066fe <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	015a      	lsls	r2, r3, #5
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	4413      	add	r3, r2
 8006644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800664e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006652:	d11f      	bne.n	8006694 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	015a      	lsls	r2, r3, #5
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	4413      	add	r3, r2
 800665c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	68ba      	ldr	r2, [r7, #8]
 8006664:	0151      	lsls	r1, r2, #5
 8006666:	68fa      	ldr	r2, [r7, #12]
 8006668:	440a      	add	r2, r1
 800666a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800666e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006672:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	015a      	lsls	r2, r3, #5
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	4413      	add	r3, r2
 800667c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	68ba      	ldr	r2, [r7, #8]
 8006684:	0151      	lsls	r1, r2, #5
 8006686:	68fa      	ldr	r2, [r7, #12]
 8006688:	440a      	add	r2, r1
 800668a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800668e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006692:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800669a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	f003 030f 	and.w	r3, r3, #15
 80066a4:	2101      	movs	r1, #1
 80066a6:	fa01 f303 	lsl.w	r3, r1, r3
 80066aa:	041b      	lsls	r3, r3, #16
 80066ac:	43db      	mvns	r3, r3
 80066ae:	68f9      	ldr	r1, [r7, #12]
 80066b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066b4:	4013      	ands	r3, r2
 80066b6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066be:	69da      	ldr	r2, [r3, #28]
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	f003 030f 	and.w	r3, r3, #15
 80066c8:	2101      	movs	r1, #1
 80066ca:	fa01 f303 	lsl.w	r3, r1, r3
 80066ce:	041b      	lsls	r3, r3, #16
 80066d0:	43db      	mvns	r3, r3
 80066d2:	68f9      	ldr	r1, [r7, #12]
 80066d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066d8:	4013      	ands	r3, r2
 80066da:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	015a      	lsls	r2, r3, #5
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	4413      	add	r3, r2
 80066e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	0159      	lsls	r1, r3, #5
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	440b      	add	r3, r1
 80066f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066f6:	4619      	mov	r1, r3
 80066f8:	4b05      	ldr	r3, [pc, #20]	; (8006710 <USB_DeactivateEndpoint+0x1b4>)
 80066fa:	4013      	ands	r3, r2
 80066fc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80066fe:	2300      	movs	r3, #0
}
 8006700:	4618      	mov	r0, r3
 8006702:	3714      	adds	r7, #20
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr
 800670c:	ec337800 	.word	0xec337800
 8006710:	eff37800 	.word	0xeff37800

08006714 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b08a      	sub	sp, #40	; 0x28
 8006718:	af02      	add	r7, sp, #8
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	60b9      	str	r1, [r7, #8]
 800671e:	4613      	mov	r3, r2
 8006720:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	781b      	ldrb	r3, [r3, #0]
 800672a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	785b      	ldrb	r3, [r3, #1]
 8006730:	2b01      	cmp	r3, #1
 8006732:	f040 815c 	bne.w	80069ee <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	695b      	ldr	r3, [r3, #20]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d132      	bne.n	80067a4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800673e:	69bb      	ldr	r3, [r7, #24]
 8006740:	015a      	lsls	r2, r3, #5
 8006742:	69fb      	ldr	r3, [r7, #28]
 8006744:	4413      	add	r3, r2
 8006746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800674a:	691b      	ldr	r3, [r3, #16]
 800674c:	69ba      	ldr	r2, [r7, #24]
 800674e:	0151      	lsls	r1, r2, #5
 8006750:	69fa      	ldr	r2, [r7, #28]
 8006752:	440a      	add	r2, r1
 8006754:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006758:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800675c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006760:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006762:	69bb      	ldr	r3, [r7, #24]
 8006764:	015a      	lsls	r2, r3, #5
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	4413      	add	r3, r2
 800676a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800676e:	691b      	ldr	r3, [r3, #16]
 8006770:	69ba      	ldr	r2, [r7, #24]
 8006772:	0151      	lsls	r1, r2, #5
 8006774:	69fa      	ldr	r2, [r7, #28]
 8006776:	440a      	add	r2, r1
 8006778:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800677c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006780:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006782:	69bb      	ldr	r3, [r7, #24]
 8006784:	015a      	lsls	r2, r3, #5
 8006786:	69fb      	ldr	r3, [r7, #28]
 8006788:	4413      	add	r3, r2
 800678a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800678e:	691b      	ldr	r3, [r3, #16]
 8006790:	69ba      	ldr	r2, [r7, #24]
 8006792:	0151      	lsls	r1, r2, #5
 8006794:	69fa      	ldr	r2, [r7, #28]
 8006796:	440a      	add	r2, r1
 8006798:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800679c:	0cdb      	lsrs	r3, r3, #19
 800679e:	04db      	lsls	r3, r3, #19
 80067a0:	6113      	str	r3, [r2, #16]
 80067a2:	e074      	b.n	800688e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80067a4:	69bb      	ldr	r3, [r7, #24]
 80067a6:	015a      	lsls	r2, r3, #5
 80067a8:	69fb      	ldr	r3, [r7, #28]
 80067aa:	4413      	add	r3, r2
 80067ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067b0:	691b      	ldr	r3, [r3, #16]
 80067b2:	69ba      	ldr	r2, [r7, #24]
 80067b4:	0151      	lsls	r1, r2, #5
 80067b6:	69fa      	ldr	r2, [r7, #28]
 80067b8:	440a      	add	r2, r1
 80067ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067be:	0cdb      	lsrs	r3, r3, #19
 80067c0:	04db      	lsls	r3, r3, #19
 80067c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80067c4:	69bb      	ldr	r3, [r7, #24]
 80067c6:	015a      	lsls	r2, r3, #5
 80067c8:	69fb      	ldr	r3, [r7, #28]
 80067ca:	4413      	add	r3, r2
 80067cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067d0:	691b      	ldr	r3, [r3, #16]
 80067d2:	69ba      	ldr	r2, [r7, #24]
 80067d4:	0151      	lsls	r1, r2, #5
 80067d6:	69fa      	ldr	r2, [r7, #28]
 80067d8:	440a      	add	r2, r1
 80067da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067de:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80067e2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80067e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80067e8:	69bb      	ldr	r3, [r7, #24]
 80067ea:	015a      	lsls	r2, r3, #5
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	4413      	add	r3, r2
 80067f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067f4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	6959      	ldr	r1, [r3, #20]
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	440b      	add	r3, r1
 8006800:	1e59      	subs	r1, r3, #1
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	fbb1 f3f3 	udiv	r3, r1, r3
 800680a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800680c:	4b9d      	ldr	r3, [pc, #628]	; (8006a84 <USB_EPStartXfer+0x370>)
 800680e:	400b      	ands	r3, r1
 8006810:	69b9      	ldr	r1, [r7, #24]
 8006812:	0148      	lsls	r0, r1, #5
 8006814:	69f9      	ldr	r1, [r7, #28]
 8006816:	4401      	add	r1, r0
 8006818:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800681c:	4313      	orrs	r3, r2
 800681e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006820:	69bb      	ldr	r3, [r7, #24]
 8006822:	015a      	lsls	r2, r3, #5
 8006824:	69fb      	ldr	r3, [r7, #28]
 8006826:	4413      	add	r3, r2
 8006828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800682c:	691a      	ldr	r2, [r3, #16]
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	695b      	ldr	r3, [r3, #20]
 8006832:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006836:	69b9      	ldr	r1, [r7, #24]
 8006838:	0148      	lsls	r0, r1, #5
 800683a:	69f9      	ldr	r1, [r7, #28]
 800683c:	4401      	add	r1, r0
 800683e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006842:	4313      	orrs	r3, r2
 8006844:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	78db      	ldrb	r3, [r3, #3]
 800684a:	2b01      	cmp	r3, #1
 800684c:	d11f      	bne.n	800688e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800684e:	69bb      	ldr	r3, [r7, #24]
 8006850:	015a      	lsls	r2, r3, #5
 8006852:	69fb      	ldr	r3, [r7, #28]
 8006854:	4413      	add	r3, r2
 8006856:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800685a:	691b      	ldr	r3, [r3, #16]
 800685c:	69ba      	ldr	r2, [r7, #24]
 800685e:	0151      	lsls	r1, r2, #5
 8006860:	69fa      	ldr	r2, [r7, #28]
 8006862:	440a      	add	r2, r1
 8006864:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006868:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800686c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800686e:	69bb      	ldr	r3, [r7, #24]
 8006870:	015a      	lsls	r2, r3, #5
 8006872:	69fb      	ldr	r3, [r7, #28]
 8006874:	4413      	add	r3, r2
 8006876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800687a:	691b      	ldr	r3, [r3, #16]
 800687c:	69ba      	ldr	r2, [r7, #24]
 800687e:	0151      	lsls	r1, r2, #5
 8006880:	69fa      	ldr	r2, [r7, #28]
 8006882:	440a      	add	r2, r1
 8006884:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006888:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800688c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800688e:	79fb      	ldrb	r3, [r7, #7]
 8006890:	2b01      	cmp	r3, #1
 8006892:	d14b      	bne.n	800692c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	691b      	ldr	r3, [r3, #16]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d009      	beq.n	80068b0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800689c:	69bb      	ldr	r3, [r7, #24]
 800689e:	015a      	lsls	r2, r3, #5
 80068a0:	69fb      	ldr	r3, [r7, #28]
 80068a2:	4413      	add	r3, r2
 80068a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068a8:	461a      	mov	r2, r3
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	691b      	ldr	r3, [r3, #16]
 80068ae:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	78db      	ldrb	r3, [r3, #3]
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d128      	bne.n	800690a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d110      	bne.n	80068ea <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	015a      	lsls	r2, r3, #5
 80068cc:	69fb      	ldr	r3, [r7, #28]
 80068ce:	4413      	add	r3, r2
 80068d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	69ba      	ldr	r2, [r7, #24]
 80068d8:	0151      	lsls	r1, r2, #5
 80068da:	69fa      	ldr	r2, [r7, #28]
 80068dc:	440a      	add	r2, r1
 80068de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80068e6:	6013      	str	r3, [r2, #0]
 80068e8:	e00f      	b.n	800690a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80068ea:	69bb      	ldr	r3, [r7, #24]
 80068ec:	015a      	lsls	r2, r3, #5
 80068ee:	69fb      	ldr	r3, [r7, #28]
 80068f0:	4413      	add	r3, r2
 80068f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	69ba      	ldr	r2, [r7, #24]
 80068fa:	0151      	lsls	r1, r2, #5
 80068fc:	69fa      	ldr	r2, [r7, #28]
 80068fe:	440a      	add	r2, r1
 8006900:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006908:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800690a:	69bb      	ldr	r3, [r7, #24]
 800690c:	015a      	lsls	r2, r3, #5
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	4413      	add	r3, r2
 8006912:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	69ba      	ldr	r2, [r7, #24]
 800691a:	0151      	lsls	r1, r2, #5
 800691c:	69fa      	ldr	r2, [r7, #28]
 800691e:	440a      	add	r2, r1
 8006920:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006924:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006928:	6013      	str	r3, [r2, #0]
 800692a:	e12f      	b.n	8006b8c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800692c:	69bb      	ldr	r3, [r7, #24]
 800692e:	015a      	lsls	r2, r3, #5
 8006930:	69fb      	ldr	r3, [r7, #28]
 8006932:	4413      	add	r3, r2
 8006934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	69ba      	ldr	r2, [r7, #24]
 800693c:	0151      	lsls	r1, r2, #5
 800693e:	69fa      	ldr	r2, [r7, #28]
 8006940:	440a      	add	r2, r1
 8006942:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006946:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800694a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	78db      	ldrb	r3, [r3, #3]
 8006950:	2b01      	cmp	r3, #1
 8006952:	d015      	beq.n	8006980 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	695b      	ldr	r3, [r3, #20]
 8006958:	2b00      	cmp	r3, #0
 800695a:	f000 8117 	beq.w	8006b8c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800695e:	69fb      	ldr	r3, [r7, #28]
 8006960:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006964:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	f003 030f 	and.w	r3, r3, #15
 800696e:	2101      	movs	r1, #1
 8006970:	fa01 f303 	lsl.w	r3, r1, r3
 8006974:	69f9      	ldr	r1, [r7, #28]
 8006976:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800697a:	4313      	orrs	r3, r2
 800697c:	634b      	str	r3, [r1, #52]	; 0x34
 800697e:	e105      	b.n	8006b8c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800698c:	2b00      	cmp	r3, #0
 800698e:	d110      	bne.n	80069b2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006990:	69bb      	ldr	r3, [r7, #24]
 8006992:	015a      	lsls	r2, r3, #5
 8006994:	69fb      	ldr	r3, [r7, #28]
 8006996:	4413      	add	r3, r2
 8006998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	69ba      	ldr	r2, [r7, #24]
 80069a0:	0151      	lsls	r1, r2, #5
 80069a2:	69fa      	ldr	r2, [r7, #28]
 80069a4:	440a      	add	r2, r1
 80069a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80069ae:	6013      	str	r3, [r2, #0]
 80069b0:	e00f      	b.n	80069d2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80069b2:	69bb      	ldr	r3, [r7, #24]
 80069b4:	015a      	lsls	r2, r3, #5
 80069b6:	69fb      	ldr	r3, [r7, #28]
 80069b8:	4413      	add	r3, r2
 80069ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	69ba      	ldr	r2, [r7, #24]
 80069c2:	0151      	lsls	r1, r2, #5
 80069c4:	69fa      	ldr	r2, [r7, #28]
 80069c6:	440a      	add	r2, r1
 80069c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069d0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	68d9      	ldr	r1, [r3, #12]
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	781a      	ldrb	r2, [r3, #0]
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	695b      	ldr	r3, [r3, #20]
 80069de:	b298      	uxth	r0, r3
 80069e0:	79fb      	ldrb	r3, [r7, #7]
 80069e2:	9300      	str	r3, [sp, #0]
 80069e4:	4603      	mov	r3, r0
 80069e6:	68f8      	ldr	r0, [r7, #12]
 80069e8:	f000 fa2b 	bl	8006e42 <USB_WritePacket>
 80069ec:	e0ce      	b.n	8006b8c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80069ee:	69bb      	ldr	r3, [r7, #24]
 80069f0:	015a      	lsls	r2, r3, #5
 80069f2:	69fb      	ldr	r3, [r7, #28]
 80069f4:	4413      	add	r3, r2
 80069f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	69ba      	ldr	r2, [r7, #24]
 80069fe:	0151      	lsls	r1, r2, #5
 8006a00:	69fa      	ldr	r2, [r7, #28]
 8006a02:	440a      	add	r2, r1
 8006a04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a08:	0cdb      	lsrs	r3, r3, #19
 8006a0a:	04db      	lsls	r3, r3, #19
 8006a0c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006a0e:	69bb      	ldr	r3, [r7, #24]
 8006a10:	015a      	lsls	r2, r3, #5
 8006a12:	69fb      	ldr	r3, [r7, #28]
 8006a14:	4413      	add	r3, r2
 8006a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	69ba      	ldr	r2, [r7, #24]
 8006a1e:	0151      	lsls	r1, r2, #5
 8006a20:	69fa      	ldr	r2, [r7, #28]
 8006a22:	440a      	add	r2, r1
 8006a24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a28:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006a2c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006a30:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	695b      	ldr	r3, [r3, #20]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d126      	bne.n	8006a88 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006a3a:	69bb      	ldr	r3, [r7, #24]
 8006a3c:	015a      	lsls	r2, r3, #5
 8006a3e:	69fb      	ldr	r3, [r7, #28]
 8006a40:	4413      	add	r3, r2
 8006a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a46:	691a      	ldr	r2, [r3, #16]
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a50:	69b9      	ldr	r1, [r7, #24]
 8006a52:	0148      	lsls	r0, r1, #5
 8006a54:	69f9      	ldr	r1, [r7, #28]
 8006a56:	4401      	add	r1, r0
 8006a58:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006a60:	69bb      	ldr	r3, [r7, #24]
 8006a62:	015a      	lsls	r2, r3, #5
 8006a64:	69fb      	ldr	r3, [r7, #28]
 8006a66:	4413      	add	r3, r2
 8006a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a6c:	691b      	ldr	r3, [r3, #16]
 8006a6e:	69ba      	ldr	r2, [r7, #24]
 8006a70:	0151      	lsls	r1, r2, #5
 8006a72:	69fa      	ldr	r2, [r7, #28]
 8006a74:	440a      	add	r2, r1
 8006a76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a7e:	6113      	str	r3, [r2, #16]
 8006a80:	e036      	b.n	8006af0 <USB_EPStartXfer+0x3dc>
 8006a82:	bf00      	nop
 8006a84:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	695a      	ldr	r2, [r3, #20]
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	4413      	add	r3, r2
 8006a92:	1e5a      	subs	r2, r3, #1
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a9c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006a9e:	69bb      	ldr	r3, [r7, #24]
 8006aa0:	015a      	lsls	r2, r3, #5
 8006aa2:	69fb      	ldr	r3, [r7, #28]
 8006aa4:	4413      	add	r3, r2
 8006aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aaa:	691a      	ldr	r2, [r3, #16]
 8006aac:	8afb      	ldrh	r3, [r7, #22]
 8006aae:	04d9      	lsls	r1, r3, #19
 8006ab0:	4b39      	ldr	r3, [pc, #228]	; (8006b98 <USB_EPStartXfer+0x484>)
 8006ab2:	400b      	ands	r3, r1
 8006ab4:	69b9      	ldr	r1, [r7, #24]
 8006ab6:	0148      	lsls	r0, r1, #5
 8006ab8:	69f9      	ldr	r1, [r7, #28]
 8006aba:	4401      	add	r1, r0
 8006abc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006ac4:	69bb      	ldr	r3, [r7, #24]
 8006ac6:	015a      	lsls	r2, r3, #5
 8006ac8:	69fb      	ldr	r3, [r7, #28]
 8006aca:	4413      	add	r3, r2
 8006acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ad0:	691a      	ldr	r2, [r3, #16]
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	8af9      	ldrh	r1, [r7, #22]
 8006ad8:	fb01 f303 	mul.w	r3, r1, r3
 8006adc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ae0:	69b9      	ldr	r1, [r7, #24]
 8006ae2:	0148      	lsls	r0, r1, #5
 8006ae4:	69f9      	ldr	r1, [r7, #28]
 8006ae6:	4401      	add	r1, r0
 8006ae8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006aec:	4313      	orrs	r3, r2
 8006aee:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006af0:	79fb      	ldrb	r3, [r7, #7]
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d10d      	bne.n	8006b12 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d009      	beq.n	8006b12 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	68d9      	ldr	r1, [r3, #12]
 8006b02:	69bb      	ldr	r3, [r7, #24]
 8006b04:	015a      	lsls	r2, r3, #5
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	4413      	add	r3, r2
 8006b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b0e:	460a      	mov	r2, r1
 8006b10:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	78db      	ldrb	r3, [r3, #3]
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d128      	bne.n	8006b6c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d110      	bne.n	8006b4c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006b2a:	69bb      	ldr	r3, [r7, #24]
 8006b2c:	015a      	lsls	r2, r3, #5
 8006b2e:	69fb      	ldr	r3, [r7, #28]
 8006b30:	4413      	add	r3, r2
 8006b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	69ba      	ldr	r2, [r7, #24]
 8006b3a:	0151      	lsls	r1, r2, #5
 8006b3c:	69fa      	ldr	r2, [r7, #28]
 8006b3e:	440a      	add	r2, r1
 8006b40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b44:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006b48:	6013      	str	r3, [r2, #0]
 8006b4a:	e00f      	b.n	8006b6c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	015a      	lsls	r2, r3, #5
 8006b50:	69fb      	ldr	r3, [r7, #28]
 8006b52:	4413      	add	r3, r2
 8006b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	69ba      	ldr	r2, [r7, #24]
 8006b5c:	0151      	lsls	r1, r2, #5
 8006b5e:	69fa      	ldr	r2, [r7, #28]
 8006b60:	440a      	add	r2, r1
 8006b62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b6a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006b6c:	69bb      	ldr	r3, [r7, #24]
 8006b6e:	015a      	lsls	r2, r3, #5
 8006b70:	69fb      	ldr	r3, [r7, #28]
 8006b72:	4413      	add	r3, r2
 8006b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	69ba      	ldr	r2, [r7, #24]
 8006b7c:	0151      	lsls	r1, r2, #5
 8006b7e:	69fa      	ldr	r2, [r7, #28]
 8006b80:	440a      	add	r2, r1
 8006b82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b86:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006b8a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006b8c:	2300      	movs	r3, #0
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3720      	adds	r7, #32
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop
 8006b98:	1ff80000 	.word	0x1ff80000

08006b9c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b087      	sub	sp, #28
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	60f8      	str	r0, [r7, #12]
 8006ba4:	60b9      	str	r1, [r7, #8]
 8006ba6:	4613      	mov	r3, r2
 8006ba8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	785b      	ldrb	r3, [r3, #1]
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	f040 80cd 	bne.w	8006d58 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	695b      	ldr	r3, [r3, #20]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d132      	bne.n	8006c2c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	015a      	lsls	r2, r3, #5
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	4413      	add	r3, r2
 8006bce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bd2:	691b      	ldr	r3, [r3, #16]
 8006bd4:	693a      	ldr	r2, [r7, #16]
 8006bd6:	0151      	lsls	r1, r2, #5
 8006bd8:	697a      	ldr	r2, [r7, #20]
 8006bda:	440a      	add	r2, r1
 8006bdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006be0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006be4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006be8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	015a      	lsls	r2, r3, #5
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	4413      	add	r3, r2
 8006bf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bf6:	691b      	ldr	r3, [r3, #16]
 8006bf8:	693a      	ldr	r2, [r7, #16]
 8006bfa:	0151      	lsls	r1, r2, #5
 8006bfc:	697a      	ldr	r2, [r7, #20]
 8006bfe:	440a      	add	r2, r1
 8006c00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c08:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	015a      	lsls	r2, r3, #5
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	4413      	add	r3, r2
 8006c12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c16:	691b      	ldr	r3, [r3, #16]
 8006c18:	693a      	ldr	r2, [r7, #16]
 8006c1a:	0151      	lsls	r1, r2, #5
 8006c1c:	697a      	ldr	r2, [r7, #20]
 8006c1e:	440a      	add	r2, r1
 8006c20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c24:	0cdb      	lsrs	r3, r3, #19
 8006c26:	04db      	lsls	r3, r3, #19
 8006c28:	6113      	str	r3, [r2, #16]
 8006c2a:	e04e      	b.n	8006cca <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	015a      	lsls	r2, r3, #5
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	4413      	add	r3, r2
 8006c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c38:	691b      	ldr	r3, [r3, #16]
 8006c3a:	693a      	ldr	r2, [r7, #16]
 8006c3c:	0151      	lsls	r1, r2, #5
 8006c3e:	697a      	ldr	r2, [r7, #20]
 8006c40:	440a      	add	r2, r1
 8006c42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c46:	0cdb      	lsrs	r3, r3, #19
 8006c48:	04db      	lsls	r3, r3, #19
 8006c4a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	015a      	lsls	r2, r3, #5
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	4413      	add	r3, r2
 8006c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	693a      	ldr	r2, [r7, #16]
 8006c5c:	0151      	lsls	r1, r2, #5
 8006c5e:	697a      	ldr	r2, [r7, #20]
 8006c60:	440a      	add	r2, r1
 8006c62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c66:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006c6a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006c6e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	695a      	ldr	r2, [r3, #20]
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d903      	bls.n	8006c84 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	689a      	ldr	r2, [r3, #8]
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	015a      	lsls	r2, r3, #5
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	4413      	add	r3, r2
 8006c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c90:	691b      	ldr	r3, [r3, #16]
 8006c92:	693a      	ldr	r2, [r7, #16]
 8006c94:	0151      	lsls	r1, r2, #5
 8006c96:	697a      	ldr	r2, [r7, #20]
 8006c98:	440a      	add	r2, r1
 8006c9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c9e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ca2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	015a      	lsls	r2, r3, #5
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	4413      	add	r3, r2
 8006cac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cb0:	691a      	ldr	r2, [r3, #16]
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	695b      	ldr	r3, [r3, #20]
 8006cb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cba:	6939      	ldr	r1, [r7, #16]
 8006cbc:	0148      	lsls	r0, r1, #5
 8006cbe:	6979      	ldr	r1, [r7, #20]
 8006cc0:	4401      	add	r1, r0
 8006cc2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006cca:	79fb      	ldrb	r3, [r7, #7]
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d11e      	bne.n	8006d0e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	691b      	ldr	r3, [r3, #16]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d009      	beq.n	8006cec <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	015a      	lsls	r2, r3, #5
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	4413      	add	r3, r2
 8006ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	691b      	ldr	r3, [r3, #16]
 8006cea:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	015a      	lsls	r2, r3, #5
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	4413      	add	r3, r2
 8006cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	693a      	ldr	r2, [r7, #16]
 8006cfc:	0151      	lsls	r1, r2, #5
 8006cfe:	697a      	ldr	r2, [r7, #20]
 8006d00:	440a      	add	r2, r1
 8006d02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d06:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006d0a:	6013      	str	r3, [r2, #0]
 8006d0c:	e092      	b.n	8006e34 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	015a      	lsls	r2, r3, #5
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	4413      	add	r3, r2
 8006d16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	693a      	ldr	r2, [r7, #16]
 8006d1e:	0151      	lsls	r1, r2, #5
 8006d20:	697a      	ldr	r2, [r7, #20]
 8006d22:	440a      	add	r2, r1
 8006d24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d28:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006d2c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	695b      	ldr	r3, [r3, #20]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d07e      	beq.n	8006e34 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	781b      	ldrb	r3, [r3, #0]
 8006d42:	f003 030f 	and.w	r3, r3, #15
 8006d46:	2101      	movs	r1, #1
 8006d48:	fa01 f303 	lsl.w	r3, r1, r3
 8006d4c:	6979      	ldr	r1, [r7, #20]
 8006d4e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d52:	4313      	orrs	r3, r2
 8006d54:	634b      	str	r3, [r1, #52]	; 0x34
 8006d56:	e06d      	b.n	8006e34 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	015a      	lsls	r2, r3, #5
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	4413      	add	r3, r2
 8006d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d64:	691b      	ldr	r3, [r3, #16]
 8006d66:	693a      	ldr	r2, [r7, #16]
 8006d68:	0151      	lsls	r1, r2, #5
 8006d6a:	697a      	ldr	r2, [r7, #20]
 8006d6c:	440a      	add	r2, r1
 8006d6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d72:	0cdb      	lsrs	r3, r3, #19
 8006d74:	04db      	lsls	r3, r3, #19
 8006d76:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	015a      	lsls	r2, r3, #5
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	4413      	add	r3, r2
 8006d80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d84:	691b      	ldr	r3, [r3, #16]
 8006d86:	693a      	ldr	r2, [r7, #16]
 8006d88:	0151      	lsls	r1, r2, #5
 8006d8a:	697a      	ldr	r2, [r7, #20]
 8006d8c:	440a      	add	r2, r1
 8006d8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d92:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006d96:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006d9a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	695b      	ldr	r3, [r3, #20]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d003      	beq.n	8006dac <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	689a      	ldr	r2, [r3, #8]
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	015a      	lsls	r2, r3, #5
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	4413      	add	r3, r2
 8006db4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006db8:	691b      	ldr	r3, [r3, #16]
 8006dba:	693a      	ldr	r2, [r7, #16]
 8006dbc:	0151      	lsls	r1, r2, #5
 8006dbe:	697a      	ldr	r2, [r7, #20]
 8006dc0:	440a      	add	r2, r1
 8006dc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dc6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006dca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	015a      	lsls	r2, r3, #5
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dd8:	691a      	ldr	r2, [r3, #16]
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006de2:	6939      	ldr	r1, [r7, #16]
 8006de4:	0148      	lsls	r0, r1, #5
 8006de6:	6979      	ldr	r1, [r7, #20]
 8006de8:	4401      	add	r1, r0
 8006dea:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006dee:	4313      	orrs	r3, r2
 8006df0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006df2:	79fb      	ldrb	r3, [r7, #7]
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d10d      	bne.n	8006e14 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	68db      	ldr	r3, [r3, #12]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d009      	beq.n	8006e14 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	68d9      	ldr	r1, [r3, #12]
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	015a      	lsls	r2, r3, #5
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	4413      	add	r3, r2
 8006e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e10:	460a      	mov	r2, r1
 8006e12:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	015a      	lsls	r2, r3, #5
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	4413      	add	r3, r2
 8006e1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	693a      	ldr	r2, [r7, #16]
 8006e24:	0151      	lsls	r1, r2, #5
 8006e26:	697a      	ldr	r2, [r7, #20]
 8006e28:	440a      	add	r2, r1
 8006e2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e2e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006e32:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	371c      	adds	r7, #28
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr

08006e42 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006e42:	b480      	push	{r7}
 8006e44:	b089      	sub	sp, #36	; 0x24
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	60f8      	str	r0, [r7, #12]
 8006e4a:	60b9      	str	r1, [r7, #8]
 8006e4c:	4611      	mov	r1, r2
 8006e4e:	461a      	mov	r2, r3
 8006e50:	460b      	mov	r3, r1
 8006e52:	71fb      	strb	r3, [r7, #7]
 8006e54:	4613      	mov	r3, r2
 8006e56:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006e60:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d123      	bne.n	8006eb0 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006e68:	88bb      	ldrh	r3, [r7, #4]
 8006e6a:	3303      	adds	r3, #3
 8006e6c:	089b      	lsrs	r3, r3, #2
 8006e6e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006e70:	2300      	movs	r3, #0
 8006e72:	61bb      	str	r3, [r7, #24]
 8006e74:	e018      	b.n	8006ea8 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006e76:	79fb      	ldrb	r3, [r7, #7]
 8006e78:	031a      	lsls	r2, r3, #12
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	4413      	add	r3, r2
 8006e7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e82:	461a      	mov	r2, r3
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006e8a:	69fb      	ldr	r3, [r7, #28]
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e90:	69fb      	ldr	r3, [r7, #28]
 8006e92:	3301      	adds	r3, #1
 8006e94:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e96:	69fb      	ldr	r3, [r7, #28]
 8006e98:	3301      	adds	r3, #1
 8006e9a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e9c:	69fb      	ldr	r3, [r7, #28]
 8006e9e:	3301      	adds	r3, #1
 8006ea0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006ea2:	69bb      	ldr	r3, [r7, #24]
 8006ea4:	3301      	adds	r3, #1
 8006ea6:	61bb      	str	r3, [r7, #24]
 8006ea8:	69ba      	ldr	r2, [r7, #24]
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d3e2      	bcc.n	8006e76 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006eb0:	2300      	movs	r3, #0
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3724      	adds	r7, #36	; 0x24
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr

08006ebe <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006ebe:	b480      	push	{r7}
 8006ec0:	b08b      	sub	sp, #44	; 0x2c
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	60f8      	str	r0, [r7, #12]
 8006ec6:	60b9      	str	r1, [r7, #8]
 8006ec8:	4613      	mov	r3, r2
 8006eca:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006ed4:	88fb      	ldrh	r3, [r7, #6]
 8006ed6:	089b      	lsrs	r3, r3, #2
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006edc:	88fb      	ldrh	r3, [r7, #6]
 8006ede:	f003 0303 	and.w	r3, r3, #3
 8006ee2:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	623b      	str	r3, [r7, #32]
 8006ee8:	e014      	b.n	8006f14 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006eea:	69bb      	ldr	r3, [r7, #24]
 8006eec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef4:	601a      	str	r2, [r3, #0]
    pDest++;
 8006ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef8:	3301      	adds	r3, #1
 8006efa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efe:	3301      	adds	r3, #1
 8006f00:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f04:	3301      	adds	r3, #1
 8006f06:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006f0e:	6a3b      	ldr	r3, [r7, #32]
 8006f10:	3301      	adds	r3, #1
 8006f12:	623b      	str	r3, [r7, #32]
 8006f14:	6a3a      	ldr	r2, [r7, #32]
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d3e6      	bcc.n	8006eea <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006f1c:	8bfb      	ldrh	r3, [r7, #30]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d01e      	beq.n	8006f60 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006f22:	2300      	movs	r3, #0
 8006f24:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006f26:	69bb      	ldr	r3, [r7, #24]
 8006f28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	f107 0310 	add.w	r3, r7, #16
 8006f32:	6812      	ldr	r2, [r2, #0]
 8006f34:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006f36:	693a      	ldr	r2, [r7, #16]
 8006f38:	6a3b      	ldr	r3, [r7, #32]
 8006f3a:	b2db      	uxtb	r3, r3
 8006f3c:	00db      	lsls	r3, r3, #3
 8006f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8006f42:	b2da      	uxtb	r2, r3
 8006f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f46:	701a      	strb	r2, [r3, #0]
      i++;
 8006f48:	6a3b      	ldr	r3, [r7, #32]
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	623b      	str	r3, [r7, #32]
      pDest++;
 8006f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f50:	3301      	adds	r3, #1
 8006f52:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006f54:	8bfb      	ldrh	r3, [r7, #30]
 8006f56:	3b01      	subs	r3, #1
 8006f58:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006f5a:	8bfb      	ldrh	r3, [r7, #30]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d1ea      	bne.n	8006f36 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	372c      	adds	r7, #44	; 0x2c
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr

08006f6e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006f6e:	b480      	push	{r7}
 8006f70:	b085      	sub	sp, #20
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6078      	str	r0, [r7, #4]
 8006f76:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	785b      	ldrb	r3, [r3, #1]
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d12c      	bne.n	8006fe4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	015a      	lsls	r2, r3, #5
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	4413      	add	r3, r2
 8006f92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	db12      	blt.n	8006fc2 <USB_EPSetStall+0x54>
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d00f      	beq.n	8006fc2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	015a      	lsls	r2, r3, #5
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	4413      	add	r3, r2
 8006faa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	68ba      	ldr	r2, [r7, #8]
 8006fb2:	0151      	lsls	r1, r2, #5
 8006fb4:	68fa      	ldr	r2, [r7, #12]
 8006fb6:	440a      	add	r2, r1
 8006fb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fbc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006fc0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	015a      	lsls	r2, r3, #5
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	4413      	add	r3, r2
 8006fca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	68ba      	ldr	r2, [r7, #8]
 8006fd2:	0151      	lsls	r1, r2, #5
 8006fd4:	68fa      	ldr	r2, [r7, #12]
 8006fd6:	440a      	add	r2, r1
 8006fd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fdc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006fe0:	6013      	str	r3, [r2, #0]
 8006fe2:	e02b      	b.n	800703c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	015a      	lsls	r2, r3, #5
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	4413      	add	r3, r2
 8006fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	db12      	blt.n	800701c <USB_EPSetStall+0xae>
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d00f      	beq.n	800701c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	015a      	lsls	r2, r3, #5
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	4413      	add	r3, r2
 8007004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	68ba      	ldr	r2, [r7, #8]
 800700c:	0151      	lsls	r1, r2, #5
 800700e:	68fa      	ldr	r2, [r7, #12]
 8007010:	440a      	add	r2, r1
 8007012:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007016:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800701a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	015a      	lsls	r2, r3, #5
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	4413      	add	r3, r2
 8007024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	68ba      	ldr	r2, [r7, #8]
 800702c:	0151      	lsls	r1, r2, #5
 800702e:	68fa      	ldr	r2, [r7, #12]
 8007030:	440a      	add	r2, r1
 8007032:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007036:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800703a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	3714      	adds	r7, #20
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr

0800704a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800704a:	b480      	push	{r7}
 800704c:	b085      	sub	sp, #20
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
 8007052:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	785b      	ldrb	r3, [r3, #1]
 8007062:	2b01      	cmp	r3, #1
 8007064:	d128      	bne.n	80070b8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	015a      	lsls	r2, r3, #5
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	4413      	add	r3, r2
 800706e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	68ba      	ldr	r2, [r7, #8]
 8007076:	0151      	lsls	r1, r2, #5
 8007078:	68fa      	ldr	r2, [r7, #12]
 800707a:	440a      	add	r2, r1
 800707c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007080:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007084:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	78db      	ldrb	r3, [r3, #3]
 800708a:	2b03      	cmp	r3, #3
 800708c:	d003      	beq.n	8007096 <USB_EPClearStall+0x4c>
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	78db      	ldrb	r3, [r3, #3]
 8007092:	2b02      	cmp	r3, #2
 8007094:	d138      	bne.n	8007108 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	015a      	lsls	r2, r3, #5
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	4413      	add	r3, r2
 800709e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	68ba      	ldr	r2, [r7, #8]
 80070a6:	0151      	lsls	r1, r2, #5
 80070a8:	68fa      	ldr	r2, [r7, #12]
 80070aa:	440a      	add	r2, r1
 80070ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070b4:	6013      	str	r3, [r2, #0]
 80070b6:	e027      	b.n	8007108 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	015a      	lsls	r2, r3, #5
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	4413      	add	r3, r2
 80070c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	68ba      	ldr	r2, [r7, #8]
 80070c8:	0151      	lsls	r1, r2, #5
 80070ca:	68fa      	ldr	r2, [r7, #12]
 80070cc:	440a      	add	r2, r1
 80070ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80070d6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	78db      	ldrb	r3, [r3, #3]
 80070dc:	2b03      	cmp	r3, #3
 80070de:	d003      	beq.n	80070e8 <USB_EPClearStall+0x9e>
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	78db      	ldrb	r3, [r3, #3]
 80070e4:	2b02      	cmp	r3, #2
 80070e6:	d10f      	bne.n	8007108 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	015a      	lsls	r2, r3, #5
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	4413      	add	r3, r2
 80070f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	68ba      	ldr	r2, [r7, #8]
 80070f8:	0151      	lsls	r1, r2, #5
 80070fa:	68fa      	ldr	r2, [r7, #12]
 80070fc:	440a      	add	r2, r1
 80070fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007102:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007106:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007108:	2300      	movs	r3, #0
}
 800710a:	4618      	mov	r0, r3
 800710c:	3714      	adds	r7, #20
 800710e:	46bd      	mov	sp, r7
 8007110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007114:	4770      	bx	lr

08007116 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007116:	b480      	push	{r7}
 8007118:	b085      	sub	sp, #20
 800711a:	af00      	add	r7, sp, #0
 800711c:	6078      	str	r0, [r7, #4]
 800711e:	460b      	mov	r3, r1
 8007120:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	68fa      	ldr	r2, [r7, #12]
 8007130:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007134:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007138:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	78fb      	ldrb	r3, [r7, #3]
 8007144:	011b      	lsls	r3, r3, #4
 8007146:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800714a:	68f9      	ldr	r1, [r7, #12]
 800714c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007150:	4313      	orrs	r3, r2
 8007152:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007154:	2300      	movs	r3, #0
}
 8007156:	4618      	mov	r0, r3
 8007158:	3714      	adds	r7, #20
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr

08007162 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007162:	b480      	push	{r7}
 8007164:	b085      	sub	sp, #20
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	68fa      	ldr	r2, [r7, #12]
 8007178:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800717c:	f023 0303 	bic.w	r3, r3, #3
 8007180:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	68fa      	ldr	r2, [r7, #12]
 800718c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007190:	f023 0302 	bic.w	r3, r3, #2
 8007194:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007196:	2300      	movs	r3, #0
}
 8007198:	4618      	mov	r0, r3
 800719a:	3714      	adds	r7, #20
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr

080071a4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b085      	sub	sp, #20
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	68fa      	ldr	r2, [r7, #12]
 80071ba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80071be:	f023 0303 	bic.w	r3, r3, #3
 80071c2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	68fa      	ldr	r2, [r7, #12]
 80071ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071d2:	f043 0302 	orr.w	r3, r3, #2
 80071d6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3714      	adds	r7, #20
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr

080071e6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80071e6:	b480      	push	{r7}
 80071e8:	b085      	sub	sp, #20
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	695b      	ldr	r3, [r3, #20]
 80071f2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	699b      	ldr	r3, [r3, #24]
 80071f8:	68fa      	ldr	r2, [r7, #12]
 80071fa:	4013      	ands	r3, r2
 80071fc:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80071fe:	68fb      	ldr	r3, [r7, #12]
}
 8007200:	4618      	mov	r0, r3
 8007202:	3714      	adds	r7, #20
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr

0800720c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800720c:	b480      	push	{r7}
 800720e:	b085      	sub	sp, #20
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800721e:	699b      	ldr	r3, [r3, #24]
 8007220:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007228:	69db      	ldr	r3, [r3, #28]
 800722a:	68ba      	ldr	r2, [r7, #8]
 800722c:	4013      	ands	r3, r2
 800722e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	0c1b      	lsrs	r3, r3, #16
}
 8007234:	4618      	mov	r0, r3
 8007236:	3714      	adds	r7, #20
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr

08007240 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007240:	b480      	push	{r7}
 8007242:	b085      	sub	sp, #20
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007252:	699b      	ldr	r3, [r3, #24]
 8007254:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800725c:	69db      	ldr	r3, [r3, #28]
 800725e:	68ba      	ldr	r2, [r7, #8]
 8007260:	4013      	ands	r3, r2
 8007262:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	b29b      	uxth	r3, r3
}
 8007268:	4618      	mov	r0, r3
 800726a:	3714      	adds	r7, #20
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr

08007274 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007274:	b480      	push	{r7}
 8007276:	b085      	sub	sp, #20
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	460b      	mov	r3, r1
 800727e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007284:	78fb      	ldrb	r3, [r7, #3]
 8007286:	015a      	lsls	r2, r3, #5
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	4413      	add	r3, r2
 800728c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800729a:	695b      	ldr	r3, [r3, #20]
 800729c:	68ba      	ldr	r2, [r7, #8]
 800729e:	4013      	ands	r3, r2
 80072a0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80072a2:	68bb      	ldr	r3, [r7, #8]
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3714      	adds	r7, #20
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr

080072b0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b087      	sub	sp, #28
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	460b      	mov	r3, r1
 80072ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072c6:	691b      	ldr	r3, [r3, #16]
 80072c8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072d2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80072d4:	78fb      	ldrb	r3, [r7, #3]
 80072d6:	f003 030f 	and.w	r3, r3, #15
 80072da:	68fa      	ldr	r2, [r7, #12]
 80072dc:	fa22 f303 	lsr.w	r3, r2, r3
 80072e0:	01db      	lsls	r3, r3, #7
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	693a      	ldr	r2, [r7, #16]
 80072e6:	4313      	orrs	r3, r2
 80072e8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80072ea:	78fb      	ldrb	r3, [r7, #3]
 80072ec:	015a      	lsls	r2, r3, #5
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	4413      	add	r3, r2
 80072f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	693a      	ldr	r2, [r7, #16]
 80072fa:	4013      	ands	r3, r2
 80072fc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80072fe:	68bb      	ldr	r3, [r7, #8]
}
 8007300:	4618      	mov	r0, r3
 8007302:	371c      	adds	r7, #28
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr

0800730c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800730c:	b480      	push	{r7}
 800730e:	b083      	sub	sp, #12
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	695b      	ldr	r3, [r3, #20]
 8007318:	f003 0301 	and.w	r3, r3, #1
}
 800731c:	4618      	mov	r0, r3
 800731e:	370c      	adds	r7, #12
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr

08007328 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007328:	b480      	push	{r7}
 800732a:	b085      	sub	sp, #20
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	68fa      	ldr	r2, [r7, #12]
 800733e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007342:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007346:	f023 0307 	bic.w	r3, r3, #7
 800734a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	68fa      	ldr	r2, [r7, #12]
 8007356:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800735a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800735e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007360:	2300      	movs	r3, #0
}
 8007362:	4618      	mov	r0, r3
 8007364:	3714      	adds	r7, #20
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr
	...

08007370 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007370:	b480      	push	{r7}
 8007372:	b087      	sub	sp, #28
 8007374:	af00      	add	r7, sp, #0
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	460b      	mov	r3, r1
 800737a:	607a      	str	r2, [r7, #4]
 800737c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	333c      	adds	r3, #60	; 0x3c
 8007386:	3304      	adds	r3, #4
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	4a26      	ldr	r2, [pc, #152]	; (8007428 <USB_EP0_OutStart+0xb8>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d90a      	bls.n	80073aa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073a4:	d101      	bne.n	80073aa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80073a6:	2300      	movs	r3, #0
 80073a8:	e037      	b.n	800741a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073b0:	461a      	mov	r2, r3
 80073b2:	2300      	movs	r3, #0
 80073b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073bc:	691b      	ldr	r3, [r3, #16]
 80073be:	697a      	ldr	r2, [r7, #20]
 80073c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80073c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073d0:	691b      	ldr	r3, [r3, #16]
 80073d2:	697a      	ldr	r2, [r7, #20]
 80073d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073d8:	f043 0318 	orr.w	r3, r3, #24
 80073dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073e4:	691b      	ldr	r3, [r3, #16]
 80073e6:	697a      	ldr	r2, [r7, #20]
 80073e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073ec:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80073f0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80073f2:	7afb      	ldrb	r3, [r7, #11]
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d10f      	bne.n	8007418 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073fe:	461a      	mov	r2, r3
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	697a      	ldr	r2, [r7, #20]
 800740e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007412:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007416:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007418:	2300      	movs	r3, #0
}
 800741a:	4618      	mov	r0, r3
 800741c:	371c      	adds	r7, #28
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr
 8007426:	bf00      	nop
 8007428:	4f54300a 	.word	0x4f54300a

0800742c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800742c:	b480      	push	{r7}
 800742e:	b085      	sub	sp, #20
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007434:	2300      	movs	r3, #0
 8007436:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	3301      	adds	r3, #1
 800743c:	60fb      	str	r3, [r7, #12]
 800743e:	4a13      	ldr	r2, [pc, #76]	; (800748c <USB_CoreReset+0x60>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d901      	bls.n	8007448 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8007444:	2303      	movs	r3, #3
 8007446:	e01a      	b.n	800747e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	691b      	ldr	r3, [r3, #16]
 800744c:	2b00      	cmp	r3, #0
 800744e:	daf3      	bge.n	8007438 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007450:	2300      	movs	r3, #0
 8007452:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	691b      	ldr	r3, [r3, #16]
 8007458:	f043 0201 	orr.w	r2, r3, #1
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	3301      	adds	r3, #1
 8007464:	60fb      	str	r3, [r7, #12]
 8007466:	4a09      	ldr	r2, [pc, #36]	; (800748c <USB_CoreReset+0x60>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d901      	bls.n	8007470 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800746c:	2303      	movs	r3, #3
 800746e:	e006      	b.n	800747e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	691b      	ldr	r3, [r3, #16]
 8007474:	f003 0301 	and.w	r3, r3, #1
 8007478:	2b01      	cmp	r3, #1
 800747a:	d0f1      	beq.n	8007460 <USB_CoreReset+0x34>

  return HAL_OK;
 800747c:	2300      	movs	r3, #0
}
 800747e:	4618      	mov	r0, r3
 8007480:	3714      	adds	r7, #20
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr
 800748a:	bf00      	nop
 800748c:	00030d40 	.word	0x00030d40

08007490 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b084      	sub	sp, #16
 8007494:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8007496:	4b8c      	ldr	r3, [pc, #560]	; (80076c8 <MX_LWIP_Init+0x238>)
 8007498:	22c0      	movs	r2, #192	; 0xc0
 800749a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800749c:	4b8a      	ldr	r3, [pc, #552]	; (80076c8 <MX_LWIP_Init+0x238>)
 800749e:	22a8      	movs	r2, #168	; 0xa8
 80074a0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 80074a2:	4b89      	ldr	r3, [pc, #548]	; (80076c8 <MX_LWIP_Init+0x238>)
 80074a4:	2200      	movs	r2, #0
 80074a6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 68;
 80074a8:	4b87      	ldr	r3, [pc, #540]	; (80076c8 <MX_LWIP_Init+0x238>)
 80074aa:	2244      	movs	r2, #68	; 0x44
 80074ac:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80074ae:	4b87      	ldr	r3, [pc, #540]	; (80076cc <MX_LWIP_Init+0x23c>)
 80074b0:	22ff      	movs	r2, #255	; 0xff
 80074b2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80074b4:	4b85      	ldr	r3, [pc, #532]	; (80076cc <MX_LWIP_Init+0x23c>)
 80074b6:	22ff      	movs	r2, #255	; 0xff
 80074b8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80074ba:	4b84      	ldr	r3, [pc, #528]	; (80076cc <MX_LWIP_Init+0x23c>)
 80074bc:	22ff      	movs	r2, #255	; 0xff
 80074be:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80074c0:	4b82      	ldr	r3, [pc, #520]	; (80076cc <MX_LWIP_Init+0x23c>)
 80074c2:	2200      	movs	r2, #0
 80074c4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80074c6:	4b82      	ldr	r3, [pc, #520]	; (80076d0 <MX_LWIP_Init+0x240>)
 80074c8:	22c0      	movs	r2, #192	; 0xc0
 80074ca:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80074cc:	4b80      	ldr	r3, [pc, #512]	; (80076d0 <MX_LWIP_Init+0x240>)
 80074ce:	22a8      	movs	r2, #168	; 0xa8
 80074d0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 80074d2:	4b7f      	ldr	r3, [pc, #508]	; (80076d0 <MX_LWIP_Init+0x240>)
 80074d4:	2200      	movs	r2, #0
 80074d6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80074d8:	4b7d      	ldr	r3, [pc, #500]	; (80076d0 <MX_LWIP_Init+0x240>)
 80074da:	2201      	movs	r2, #1
 80074dc:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80074de:	2100      	movs	r1, #0
 80074e0:	2000      	movs	r0, #0
 80074e2:	f005 f90b 	bl	800c6fc <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80074e6:	4b78      	ldr	r3, [pc, #480]	; (80076c8 <MX_LWIP_Init+0x238>)
 80074e8:	781b      	ldrb	r3, [r3, #0]
 80074ea:	061a      	lsls	r2, r3, #24
 80074ec:	4b76      	ldr	r3, [pc, #472]	; (80076c8 <MX_LWIP_Init+0x238>)
 80074ee:	785b      	ldrb	r3, [r3, #1]
 80074f0:	041b      	lsls	r3, r3, #16
 80074f2:	431a      	orrs	r2, r3
 80074f4:	4b74      	ldr	r3, [pc, #464]	; (80076c8 <MX_LWIP_Init+0x238>)
 80074f6:	789b      	ldrb	r3, [r3, #2]
 80074f8:	021b      	lsls	r3, r3, #8
 80074fa:	4313      	orrs	r3, r2
 80074fc:	4a72      	ldr	r2, [pc, #456]	; (80076c8 <MX_LWIP_Init+0x238>)
 80074fe:	78d2      	ldrb	r2, [r2, #3]
 8007500:	4313      	orrs	r3, r2
 8007502:	061a      	lsls	r2, r3, #24
 8007504:	4b70      	ldr	r3, [pc, #448]	; (80076c8 <MX_LWIP_Init+0x238>)
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	0619      	lsls	r1, r3, #24
 800750a:	4b6f      	ldr	r3, [pc, #444]	; (80076c8 <MX_LWIP_Init+0x238>)
 800750c:	785b      	ldrb	r3, [r3, #1]
 800750e:	041b      	lsls	r3, r3, #16
 8007510:	4319      	orrs	r1, r3
 8007512:	4b6d      	ldr	r3, [pc, #436]	; (80076c8 <MX_LWIP_Init+0x238>)
 8007514:	789b      	ldrb	r3, [r3, #2]
 8007516:	021b      	lsls	r3, r3, #8
 8007518:	430b      	orrs	r3, r1
 800751a:	496b      	ldr	r1, [pc, #428]	; (80076c8 <MX_LWIP_Init+0x238>)
 800751c:	78c9      	ldrb	r1, [r1, #3]
 800751e:	430b      	orrs	r3, r1
 8007520:	021b      	lsls	r3, r3, #8
 8007522:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007526:	431a      	orrs	r2, r3
 8007528:	4b67      	ldr	r3, [pc, #412]	; (80076c8 <MX_LWIP_Init+0x238>)
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	0619      	lsls	r1, r3, #24
 800752e:	4b66      	ldr	r3, [pc, #408]	; (80076c8 <MX_LWIP_Init+0x238>)
 8007530:	785b      	ldrb	r3, [r3, #1]
 8007532:	041b      	lsls	r3, r3, #16
 8007534:	4319      	orrs	r1, r3
 8007536:	4b64      	ldr	r3, [pc, #400]	; (80076c8 <MX_LWIP_Init+0x238>)
 8007538:	789b      	ldrb	r3, [r3, #2]
 800753a:	021b      	lsls	r3, r3, #8
 800753c:	430b      	orrs	r3, r1
 800753e:	4962      	ldr	r1, [pc, #392]	; (80076c8 <MX_LWIP_Init+0x238>)
 8007540:	78c9      	ldrb	r1, [r1, #3]
 8007542:	430b      	orrs	r3, r1
 8007544:	0a1b      	lsrs	r3, r3, #8
 8007546:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800754a:	431a      	orrs	r2, r3
 800754c:	4b5e      	ldr	r3, [pc, #376]	; (80076c8 <MX_LWIP_Init+0x238>)
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	0619      	lsls	r1, r3, #24
 8007552:	4b5d      	ldr	r3, [pc, #372]	; (80076c8 <MX_LWIP_Init+0x238>)
 8007554:	785b      	ldrb	r3, [r3, #1]
 8007556:	041b      	lsls	r3, r3, #16
 8007558:	4319      	orrs	r1, r3
 800755a:	4b5b      	ldr	r3, [pc, #364]	; (80076c8 <MX_LWIP_Init+0x238>)
 800755c:	789b      	ldrb	r3, [r3, #2]
 800755e:	021b      	lsls	r3, r3, #8
 8007560:	430b      	orrs	r3, r1
 8007562:	4959      	ldr	r1, [pc, #356]	; (80076c8 <MX_LWIP_Init+0x238>)
 8007564:	78c9      	ldrb	r1, [r1, #3]
 8007566:	430b      	orrs	r3, r1
 8007568:	0e1b      	lsrs	r3, r3, #24
 800756a:	4313      	orrs	r3, r2
 800756c:	4a59      	ldr	r2, [pc, #356]	; (80076d4 <MX_LWIP_Init+0x244>)
 800756e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8007570:	4b56      	ldr	r3, [pc, #344]	; (80076cc <MX_LWIP_Init+0x23c>)
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	061a      	lsls	r2, r3, #24
 8007576:	4b55      	ldr	r3, [pc, #340]	; (80076cc <MX_LWIP_Init+0x23c>)
 8007578:	785b      	ldrb	r3, [r3, #1]
 800757a:	041b      	lsls	r3, r3, #16
 800757c:	431a      	orrs	r2, r3
 800757e:	4b53      	ldr	r3, [pc, #332]	; (80076cc <MX_LWIP_Init+0x23c>)
 8007580:	789b      	ldrb	r3, [r3, #2]
 8007582:	021b      	lsls	r3, r3, #8
 8007584:	4313      	orrs	r3, r2
 8007586:	4a51      	ldr	r2, [pc, #324]	; (80076cc <MX_LWIP_Init+0x23c>)
 8007588:	78d2      	ldrb	r2, [r2, #3]
 800758a:	4313      	orrs	r3, r2
 800758c:	061a      	lsls	r2, r3, #24
 800758e:	4b4f      	ldr	r3, [pc, #316]	; (80076cc <MX_LWIP_Init+0x23c>)
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	0619      	lsls	r1, r3, #24
 8007594:	4b4d      	ldr	r3, [pc, #308]	; (80076cc <MX_LWIP_Init+0x23c>)
 8007596:	785b      	ldrb	r3, [r3, #1]
 8007598:	041b      	lsls	r3, r3, #16
 800759a:	4319      	orrs	r1, r3
 800759c:	4b4b      	ldr	r3, [pc, #300]	; (80076cc <MX_LWIP_Init+0x23c>)
 800759e:	789b      	ldrb	r3, [r3, #2]
 80075a0:	021b      	lsls	r3, r3, #8
 80075a2:	430b      	orrs	r3, r1
 80075a4:	4949      	ldr	r1, [pc, #292]	; (80076cc <MX_LWIP_Init+0x23c>)
 80075a6:	78c9      	ldrb	r1, [r1, #3]
 80075a8:	430b      	orrs	r3, r1
 80075aa:	021b      	lsls	r3, r3, #8
 80075ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80075b0:	431a      	orrs	r2, r3
 80075b2:	4b46      	ldr	r3, [pc, #280]	; (80076cc <MX_LWIP_Init+0x23c>)
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	0619      	lsls	r1, r3, #24
 80075b8:	4b44      	ldr	r3, [pc, #272]	; (80076cc <MX_LWIP_Init+0x23c>)
 80075ba:	785b      	ldrb	r3, [r3, #1]
 80075bc:	041b      	lsls	r3, r3, #16
 80075be:	4319      	orrs	r1, r3
 80075c0:	4b42      	ldr	r3, [pc, #264]	; (80076cc <MX_LWIP_Init+0x23c>)
 80075c2:	789b      	ldrb	r3, [r3, #2]
 80075c4:	021b      	lsls	r3, r3, #8
 80075c6:	430b      	orrs	r3, r1
 80075c8:	4940      	ldr	r1, [pc, #256]	; (80076cc <MX_LWIP_Init+0x23c>)
 80075ca:	78c9      	ldrb	r1, [r1, #3]
 80075cc:	430b      	orrs	r3, r1
 80075ce:	0a1b      	lsrs	r3, r3, #8
 80075d0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80075d4:	431a      	orrs	r2, r3
 80075d6:	4b3d      	ldr	r3, [pc, #244]	; (80076cc <MX_LWIP_Init+0x23c>)
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	0619      	lsls	r1, r3, #24
 80075dc:	4b3b      	ldr	r3, [pc, #236]	; (80076cc <MX_LWIP_Init+0x23c>)
 80075de:	785b      	ldrb	r3, [r3, #1]
 80075e0:	041b      	lsls	r3, r3, #16
 80075e2:	4319      	orrs	r1, r3
 80075e4:	4b39      	ldr	r3, [pc, #228]	; (80076cc <MX_LWIP_Init+0x23c>)
 80075e6:	789b      	ldrb	r3, [r3, #2]
 80075e8:	021b      	lsls	r3, r3, #8
 80075ea:	430b      	orrs	r3, r1
 80075ec:	4937      	ldr	r1, [pc, #220]	; (80076cc <MX_LWIP_Init+0x23c>)
 80075ee:	78c9      	ldrb	r1, [r1, #3]
 80075f0:	430b      	orrs	r3, r1
 80075f2:	0e1b      	lsrs	r3, r3, #24
 80075f4:	4313      	orrs	r3, r2
 80075f6:	4a38      	ldr	r2, [pc, #224]	; (80076d8 <MX_LWIP_Init+0x248>)
 80075f8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80075fa:	4b35      	ldr	r3, [pc, #212]	; (80076d0 <MX_LWIP_Init+0x240>)
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	061a      	lsls	r2, r3, #24
 8007600:	4b33      	ldr	r3, [pc, #204]	; (80076d0 <MX_LWIP_Init+0x240>)
 8007602:	785b      	ldrb	r3, [r3, #1]
 8007604:	041b      	lsls	r3, r3, #16
 8007606:	431a      	orrs	r2, r3
 8007608:	4b31      	ldr	r3, [pc, #196]	; (80076d0 <MX_LWIP_Init+0x240>)
 800760a:	789b      	ldrb	r3, [r3, #2]
 800760c:	021b      	lsls	r3, r3, #8
 800760e:	4313      	orrs	r3, r2
 8007610:	4a2f      	ldr	r2, [pc, #188]	; (80076d0 <MX_LWIP_Init+0x240>)
 8007612:	78d2      	ldrb	r2, [r2, #3]
 8007614:	4313      	orrs	r3, r2
 8007616:	061a      	lsls	r2, r3, #24
 8007618:	4b2d      	ldr	r3, [pc, #180]	; (80076d0 <MX_LWIP_Init+0x240>)
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	0619      	lsls	r1, r3, #24
 800761e:	4b2c      	ldr	r3, [pc, #176]	; (80076d0 <MX_LWIP_Init+0x240>)
 8007620:	785b      	ldrb	r3, [r3, #1]
 8007622:	041b      	lsls	r3, r3, #16
 8007624:	4319      	orrs	r1, r3
 8007626:	4b2a      	ldr	r3, [pc, #168]	; (80076d0 <MX_LWIP_Init+0x240>)
 8007628:	789b      	ldrb	r3, [r3, #2]
 800762a:	021b      	lsls	r3, r3, #8
 800762c:	430b      	orrs	r3, r1
 800762e:	4928      	ldr	r1, [pc, #160]	; (80076d0 <MX_LWIP_Init+0x240>)
 8007630:	78c9      	ldrb	r1, [r1, #3]
 8007632:	430b      	orrs	r3, r1
 8007634:	021b      	lsls	r3, r3, #8
 8007636:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800763a:	431a      	orrs	r2, r3
 800763c:	4b24      	ldr	r3, [pc, #144]	; (80076d0 <MX_LWIP_Init+0x240>)
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	0619      	lsls	r1, r3, #24
 8007642:	4b23      	ldr	r3, [pc, #140]	; (80076d0 <MX_LWIP_Init+0x240>)
 8007644:	785b      	ldrb	r3, [r3, #1]
 8007646:	041b      	lsls	r3, r3, #16
 8007648:	4319      	orrs	r1, r3
 800764a:	4b21      	ldr	r3, [pc, #132]	; (80076d0 <MX_LWIP_Init+0x240>)
 800764c:	789b      	ldrb	r3, [r3, #2]
 800764e:	021b      	lsls	r3, r3, #8
 8007650:	430b      	orrs	r3, r1
 8007652:	491f      	ldr	r1, [pc, #124]	; (80076d0 <MX_LWIP_Init+0x240>)
 8007654:	78c9      	ldrb	r1, [r1, #3]
 8007656:	430b      	orrs	r3, r1
 8007658:	0a1b      	lsrs	r3, r3, #8
 800765a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800765e:	431a      	orrs	r2, r3
 8007660:	4b1b      	ldr	r3, [pc, #108]	; (80076d0 <MX_LWIP_Init+0x240>)
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	0619      	lsls	r1, r3, #24
 8007666:	4b1a      	ldr	r3, [pc, #104]	; (80076d0 <MX_LWIP_Init+0x240>)
 8007668:	785b      	ldrb	r3, [r3, #1]
 800766a:	041b      	lsls	r3, r3, #16
 800766c:	4319      	orrs	r1, r3
 800766e:	4b18      	ldr	r3, [pc, #96]	; (80076d0 <MX_LWIP_Init+0x240>)
 8007670:	789b      	ldrb	r3, [r3, #2]
 8007672:	021b      	lsls	r3, r3, #8
 8007674:	430b      	orrs	r3, r1
 8007676:	4916      	ldr	r1, [pc, #88]	; (80076d0 <MX_LWIP_Init+0x240>)
 8007678:	78c9      	ldrb	r1, [r1, #3]
 800767a:	430b      	orrs	r3, r1
 800767c:	0e1b      	lsrs	r3, r3, #24
 800767e:	4313      	orrs	r3, r2
 8007680:	4a16      	ldr	r2, [pc, #88]	; (80076dc <MX_LWIP_Init+0x24c>)
 8007682:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8007684:	4b16      	ldr	r3, [pc, #88]	; (80076e0 <MX_LWIP_Init+0x250>)
 8007686:	9302      	str	r3, [sp, #8]
 8007688:	4b16      	ldr	r3, [pc, #88]	; (80076e4 <MX_LWIP_Init+0x254>)
 800768a:	9301      	str	r3, [sp, #4]
 800768c:	2300      	movs	r3, #0
 800768e:	9300      	str	r3, [sp, #0]
 8007690:	4b12      	ldr	r3, [pc, #72]	; (80076dc <MX_LWIP_Init+0x24c>)
 8007692:	4a11      	ldr	r2, [pc, #68]	; (80076d8 <MX_LWIP_Init+0x248>)
 8007694:	490f      	ldr	r1, [pc, #60]	; (80076d4 <MX_LWIP_Init+0x244>)
 8007696:	4814      	ldr	r0, [pc, #80]	; (80076e8 <MX_LWIP_Init+0x258>)
 8007698:	f005 fdb4 	bl	800d204 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800769c:	4812      	ldr	r0, [pc, #72]	; (80076e8 <MX_LWIP_Init+0x258>)
 800769e:	f005 ff61 	bl	800d564 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80076a2:	4b11      	ldr	r3, [pc, #68]	; (80076e8 <MX_LWIP_Init+0x258>)
 80076a4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80076a8:	089b      	lsrs	r3, r3, #2
 80076aa:	f003 0301 	and.w	r3, r3, #1
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d003      	beq.n	80076bc <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80076b4:	480c      	ldr	r0, [pc, #48]	; (80076e8 <MX_LWIP_Init+0x258>)
 80076b6:	f005 ff65 	bl	800d584 <netif_set_up>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80076ba:	e002      	b.n	80076c2 <MX_LWIP_Init+0x232>
    netif_set_down(&gnetif);
 80076bc:	480a      	ldr	r0, [pc, #40]	; (80076e8 <MX_LWIP_Init+0x258>)
 80076be:	f005 ffcd 	bl	800d65c <netif_set_down>
}
 80076c2:	bf00      	nop
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}
 80076c8:	200048f0 	.word	0x200048f0
 80076cc:	200048ec 	.word	0x200048ec
 80076d0:	200048b4 	.word	0x200048b4
 80076d4:	200048e8 	.word	0x200048e8
 80076d8:	200048f4 	.word	0x200048f4
 80076dc:	200048f8 	.word	0x200048f8
 80076e0:	0800c639 	.word	0x0800c639
 80076e4:	08007d1d 	.word	0x08007d1d
 80076e8:	200048b8 	.word	0x200048b8

080076ec <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b08e      	sub	sp, #56	; 0x38
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80076f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076f8:	2200      	movs	r2, #0
 80076fa:	601a      	str	r2, [r3, #0]
 80076fc:	605a      	str	r2, [r3, #4]
 80076fe:	609a      	str	r2, [r3, #8]
 8007700:	60da      	str	r2, [r3, #12]
 8007702:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a4a      	ldr	r2, [pc, #296]	; (8007834 <HAL_ETH_MspInit+0x148>)
 800770a:	4293      	cmp	r3, r2
 800770c:	f040 808d 	bne.w	800782a <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8007710:	2300      	movs	r3, #0
 8007712:	623b      	str	r3, [r7, #32]
 8007714:	4b48      	ldr	r3, [pc, #288]	; (8007838 <HAL_ETH_MspInit+0x14c>)
 8007716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007718:	4a47      	ldr	r2, [pc, #284]	; (8007838 <HAL_ETH_MspInit+0x14c>)
 800771a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800771e:	6313      	str	r3, [r2, #48]	; 0x30
 8007720:	4b45      	ldr	r3, [pc, #276]	; (8007838 <HAL_ETH_MspInit+0x14c>)
 8007722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007728:	623b      	str	r3, [r7, #32]
 800772a:	6a3b      	ldr	r3, [r7, #32]
 800772c:	2300      	movs	r3, #0
 800772e:	61fb      	str	r3, [r7, #28]
 8007730:	4b41      	ldr	r3, [pc, #260]	; (8007838 <HAL_ETH_MspInit+0x14c>)
 8007732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007734:	4a40      	ldr	r2, [pc, #256]	; (8007838 <HAL_ETH_MspInit+0x14c>)
 8007736:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800773a:	6313      	str	r3, [r2, #48]	; 0x30
 800773c:	4b3e      	ldr	r3, [pc, #248]	; (8007838 <HAL_ETH_MspInit+0x14c>)
 800773e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007740:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007744:	61fb      	str	r3, [r7, #28]
 8007746:	69fb      	ldr	r3, [r7, #28]
 8007748:	2300      	movs	r3, #0
 800774a:	61bb      	str	r3, [r7, #24]
 800774c:	4b3a      	ldr	r3, [pc, #232]	; (8007838 <HAL_ETH_MspInit+0x14c>)
 800774e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007750:	4a39      	ldr	r2, [pc, #228]	; (8007838 <HAL_ETH_MspInit+0x14c>)
 8007752:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007756:	6313      	str	r3, [r2, #48]	; 0x30
 8007758:	4b37      	ldr	r3, [pc, #220]	; (8007838 <HAL_ETH_MspInit+0x14c>)
 800775a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800775c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007760:	61bb      	str	r3, [r7, #24]
 8007762:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007764:	2300      	movs	r3, #0
 8007766:	617b      	str	r3, [r7, #20]
 8007768:	4b33      	ldr	r3, [pc, #204]	; (8007838 <HAL_ETH_MspInit+0x14c>)
 800776a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800776c:	4a32      	ldr	r2, [pc, #200]	; (8007838 <HAL_ETH_MspInit+0x14c>)
 800776e:	f043 0304 	orr.w	r3, r3, #4
 8007772:	6313      	str	r3, [r2, #48]	; 0x30
 8007774:	4b30      	ldr	r3, [pc, #192]	; (8007838 <HAL_ETH_MspInit+0x14c>)
 8007776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007778:	f003 0304 	and.w	r3, r3, #4
 800777c:	617b      	str	r3, [r7, #20]
 800777e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007780:	2300      	movs	r3, #0
 8007782:	613b      	str	r3, [r7, #16]
 8007784:	4b2c      	ldr	r3, [pc, #176]	; (8007838 <HAL_ETH_MspInit+0x14c>)
 8007786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007788:	4a2b      	ldr	r2, [pc, #172]	; (8007838 <HAL_ETH_MspInit+0x14c>)
 800778a:	f043 0301 	orr.w	r3, r3, #1
 800778e:	6313      	str	r3, [r2, #48]	; 0x30
 8007790:	4b29      	ldr	r3, [pc, #164]	; (8007838 <HAL_ETH_MspInit+0x14c>)
 8007792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007794:	f003 0301 	and.w	r3, r3, #1
 8007798:	613b      	str	r3, [r7, #16]
 800779a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800779c:	2300      	movs	r3, #0
 800779e:	60fb      	str	r3, [r7, #12]
 80077a0:	4b25      	ldr	r3, [pc, #148]	; (8007838 <HAL_ETH_MspInit+0x14c>)
 80077a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077a4:	4a24      	ldr	r2, [pc, #144]	; (8007838 <HAL_ETH_MspInit+0x14c>)
 80077a6:	f043 0302 	orr.w	r3, r3, #2
 80077aa:	6313      	str	r3, [r2, #48]	; 0x30
 80077ac:	4b22      	ldr	r3, [pc, #136]	; (8007838 <HAL_ETH_MspInit+0x14c>)
 80077ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077b0:	f003 0302 	and.w	r3, r3, #2
 80077b4:	60fb      	str	r3, [r7, #12]
 80077b6:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80077b8:	2332      	movs	r3, #50	; 0x32
 80077ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077bc:	2302      	movs	r3, #2
 80077be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077c0:	2300      	movs	r3, #0
 80077c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80077c4:	2303      	movs	r3, #3
 80077c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80077c8:	230b      	movs	r3, #11
 80077ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80077cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80077d0:	4619      	mov	r1, r3
 80077d2:	481a      	ldr	r0, [pc, #104]	; (800783c <HAL_ETH_MspInit+0x150>)
 80077d4:	f7fa ffac 	bl	8002730 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80077d8:	2386      	movs	r3, #134	; 0x86
 80077da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077dc:	2302      	movs	r3, #2
 80077de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077e0:	2300      	movs	r3, #0
 80077e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80077e4:	2303      	movs	r3, #3
 80077e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80077e8:	230b      	movs	r3, #11
 80077ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80077ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80077f0:	4619      	mov	r1, r3
 80077f2:	4813      	ldr	r0, [pc, #76]	; (8007840 <HAL_ETH_MspInit+0x154>)
 80077f4:	f7fa ff9c 	bl	8002730 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80077f8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80077fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077fe:	2302      	movs	r3, #2
 8007800:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007802:	2300      	movs	r3, #0
 8007804:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007806:	2303      	movs	r3, #3
 8007808:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800780a:	230b      	movs	r3, #11
 800780c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800780e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007812:	4619      	mov	r1, r3
 8007814:	480b      	ldr	r0, [pc, #44]	; (8007844 <HAL_ETH_MspInit+0x158>)
 8007816:	f7fa ff8b 	bl	8002730 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800781a:	2200      	movs	r2, #0
 800781c:	2105      	movs	r1, #5
 800781e:	203d      	movs	r0, #61	; 0x3d
 8007820:	f7f9 ff4a 	bl	80016b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8007824:	203d      	movs	r0, #61	; 0x3d
 8007826:	f7f9 ff63 	bl	80016f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800782a:	bf00      	nop
 800782c:	3738      	adds	r7, #56	; 0x38
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}
 8007832:	bf00      	nop
 8007834:	40028000 	.word	0x40028000
 8007838:	40023800 	.word	0x40023800
 800783c:	40020800 	.word	0x40020800
 8007840:	40020000 	.word	0x40020000
 8007844:	40020400 	.word	0x40020400

08007848 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b082      	sub	sp, #8
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8007850:	4b04      	ldr	r3, [pc, #16]	; (8007864 <HAL_ETH_RxCpltCallback+0x1c>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4618      	mov	r0, r3
 8007856:	f002 f8b1 	bl	80099bc <osSemaphoreRelease>
}
 800785a:	bf00      	nop
 800785c:	3708      	adds	r7, #8
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
 8007862:	bf00      	nop
 8007864:	20000494 	.word	0x20000494

08007868 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8007868:	b5b0      	push	{r4, r5, r7, lr}
 800786a:	b090      	sub	sp, #64	; 0x40
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8007870:	2300      	movs	r3, #0
 8007872:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8007874:	4b60      	ldr	r3, [pc, #384]	; (80079f8 <low_level_init+0x190>)
 8007876:	4a61      	ldr	r2, [pc, #388]	; (80079fc <low_level_init+0x194>)
 8007878:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800787a:	4b5f      	ldr	r3, [pc, #380]	; (80079f8 <low_level_init+0x190>)
 800787c:	2201      	movs	r2, #1
 800787e:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8007880:	4b5d      	ldr	r3, [pc, #372]	; (80079f8 <low_level_init+0x190>)
 8007882:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007886:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8007888:	4b5b      	ldr	r3, [pc, #364]	; (80079f8 <low_level_init+0x190>)
 800788a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800788e:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8007890:	4b59      	ldr	r3, [pc, #356]	; (80079f8 <low_level_init+0x190>)
 8007892:	2201      	movs	r2, #1
 8007894:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8007896:	2300      	movs	r3, #0
 8007898:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 800789c:	2380      	movs	r3, #128	; 0x80
 800789e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 80078a2:	23e1      	movs	r3, #225	; 0xe1
 80078a4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 80078a8:	2300      	movs	r3, #0
 80078aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 80078ae:	2300      	movs	r3, #0
 80078b0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 80078b4:	2300      	movs	r3, #0
 80078b6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 80078ba:	4a4f      	ldr	r2, [pc, #316]	; (80079f8 <low_level_init+0x190>)
 80078bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80078c0:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 80078c2:	4b4d      	ldr	r3, [pc, #308]	; (80079f8 <low_level_init+0x190>)
 80078c4:	2201      	movs	r2, #1
 80078c6:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80078c8:	4b4b      	ldr	r3, [pc, #300]	; (80079f8 <low_level_init+0x190>)
 80078ca:	2200      	movs	r2, #0
 80078cc:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80078ce:	4b4a      	ldr	r3, [pc, #296]	; (80079f8 <low_level_init+0x190>)
 80078d0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80078d4:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80078d6:	4848      	ldr	r0, [pc, #288]	; (80079f8 <low_level_init+0x190>)
 80078d8:	f7f9 ff18 	bl	800170c <HAL_ETH_Init>
 80078dc:	4603      	mov	r3, r0
 80078de:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 80078e2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d108      	bne.n	80078fc <low_level_init+0x94>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80078f0:	f043 0304 	orr.w	r3, r3, #4
 80078f4:	b2da      	uxtb	r2, r3
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80078fc:	2304      	movs	r3, #4
 80078fe:	4a40      	ldr	r2, [pc, #256]	; (8007a00 <low_level_init+0x198>)
 8007900:	4940      	ldr	r1, [pc, #256]	; (8007a04 <low_level_init+0x19c>)
 8007902:	483d      	ldr	r0, [pc, #244]	; (80079f8 <low_level_init+0x190>)
 8007904:	f7fa f89e 	bl	8001a44 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8007908:	2304      	movs	r3, #4
 800790a:	4a3f      	ldr	r2, [pc, #252]	; (8007a08 <low_level_init+0x1a0>)
 800790c:	493f      	ldr	r1, [pc, #252]	; (8007a0c <low_level_init+0x1a4>)
 800790e:	483a      	ldr	r0, [pc, #232]	; (80079f8 <low_level_init+0x190>)
 8007910:	f7fa f901 	bl	8001b16 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2206      	movs	r2, #6
 8007918:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800791c:	4b36      	ldr	r3, [pc, #216]	; (80079f8 <low_level_init+0x190>)
 800791e:	695b      	ldr	r3, [r3, #20]
 8007920:	781a      	ldrb	r2, [r3, #0]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8007928:	4b33      	ldr	r3, [pc, #204]	; (80079f8 <low_level_init+0x190>)
 800792a:	695b      	ldr	r3, [r3, #20]
 800792c:	785a      	ldrb	r2, [r3, #1]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8007934:	4b30      	ldr	r3, [pc, #192]	; (80079f8 <low_level_init+0x190>)
 8007936:	695b      	ldr	r3, [r3, #20]
 8007938:	789a      	ldrb	r2, [r3, #2]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8007940:	4b2d      	ldr	r3, [pc, #180]	; (80079f8 <low_level_init+0x190>)
 8007942:	695b      	ldr	r3, [r3, #20]
 8007944:	78da      	ldrb	r2, [r3, #3]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800794c:	4b2a      	ldr	r3, [pc, #168]	; (80079f8 <low_level_init+0x190>)
 800794e:	695b      	ldr	r3, [r3, #20]
 8007950:	791a      	ldrb	r2, [r3, #4]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8007958:	4b27      	ldr	r3, [pc, #156]	; (80079f8 <low_level_init+0x190>)
 800795a:	695b      	ldr	r3, [r3, #20]
 800795c:	795a      	ldrb	r2, [r3, #5]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  /* maximum transfer unit */
  netif->mtu = 1500;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800796a:	841a      	strh	r2, [r3, #32]

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8007972:	f043 030a 	orr.w	r3, r3, #10
 8007976:	b2da      	uxtb	r2, r3
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 800797e:	2300      	movs	r3, #0
 8007980:	62bb      	str	r3, [r7, #40]	; 0x28
 8007982:	2300      	movs	r3, #0
 8007984:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8007986:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800798a:	2101      	movs	r1, #1
 800798c:	4618      	mov	r0, r3
 800798e:	f001 ff95 	bl	80098bc <osSemaphoreCreate>
 8007992:	4603      	mov	r3, r0
 8007994:	4a1e      	ldr	r2, [pc, #120]	; (8007a10 <low_level_init+0x1a8>)
 8007996:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8007998:	4b1e      	ldr	r3, [pc, #120]	; (8007a14 <low_level_init+0x1ac>)
 800799a:	f107 040c 	add.w	r4, r7, #12
 800799e:	461d      	mov	r5, r3
 80079a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80079a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80079a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 80079ac:	f107 030c 	add.w	r3, r7, #12
 80079b0:	6879      	ldr	r1, [r7, #4]
 80079b2:	4618      	mov	r0, r3
 80079b4:	f001 fe86 	bl	80096c4 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80079b8:	480f      	ldr	r0, [pc, #60]	; (80079f8 <low_level_init+0x190>)
 80079ba:	f7fa fbd4 	bl	8002166 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80079be:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80079c2:	461a      	mov	r2, r3
 80079c4:	211d      	movs	r1, #29
 80079c6:	480c      	ldr	r0, [pc, #48]	; (80079f8 <low_level_init+0x190>)
 80079c8:	f7fa faff 	bl	8001fca <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80079cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ce:	f043 030b 	orr.w	r3, r3, #11
 80079d2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80079d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079d6:	461a      	mov	r2, r3
 80079d8:	211d      	movs	r1, #29
 80079da:	4807      	ldr	r0, [pc, #28]	; (80079f8 <low_level_init+0x190>)
 80079dc:	f7fa fb5d 	bl	800209a <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 80079e0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80079e4:	461a      	mov	r2, r3
 80079e6:	211d      	movs	r1, #29
 80079e8:	4803      	ldr	r0, [pc, #12]	; (80079f8 <low_level_init+0x190>)
 80079ea:	f7fa faee 	bl	8001fca <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80079ee:	bf00      	nop
 80079f0:	3740      	adds	r7, #64	; 0x40
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bdb0      	pop	{r4, r5, r7, pc}
 80079f6:	bf00      	nop
 80079f8:	200061cc 	.word	0x200061cc
 80079fc:	40028000 	.word	0x40028000
 8007a00:	20006214 	.word	0x20006214
 8007a04:	200048fc 	.word	0x200048fc
 8007a08:	2000497c 	.word	0x2000497c
 8007a0c:	2000614c 	.word	0x2000614c
 8007a10:	20000494 	.word	0x20000494
 8007a14:	08017ffc 	.word	0x08017ffc

08007a18 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b08a      	sub	sp, #40	; 0x28
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8007a22:	4b4b      	ldr	r3, [pc, #300]	; (8007b50 <low_level_output+0x138>)
 8007a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8007a32:	2300      	movs	r3, #0
 8007a34:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8007a36:	2300      	movs	r3, #0
 8007a38:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8007a3a:	4b45      	ldr	r3, [pc, #276]	; (8007b50 <low_level_output+0x138>)
 8007a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a3e:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8007a40:	2300      	movs	r3, #0
 8007a42:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	623b      	str	r3, [r7, #32]
 8007a48:	e05a      	b.n	8007b00 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8007a4a:	69bb      	ldr	r3, [r7, #24]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	da03      	bge.n	8007a5a <low_level_output+0x42>
      {
        errval = ERR_USE;
 8007a52:	23f8      	movs	r3, #248	; 0xf8
 8007a54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8007a58:	e05c      	b.n	8007b14 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8007a5a:	6a3b      	ldr	r3, [r7, #32]
 8007a5c:	895b      	ldrh	r3, [r3, #10]
 8007a5e:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8007a60:	2300      	movs	r3, #0
 8007a62:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8007a64:	e02f      	b.n	8007ac6 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8007a66:	69fa      	ldr	r2, [r7, #28]
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	18d0      	adds	r0, r2, r3
 8007a6c:	6a3b      	ldr	r3, [r7, #32]
 8007a6e:	685a      	ldr	r2, [r3, #4]
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	18d1      	adds	r1, r2, r3
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8007a7a:	3304      	adds	r3, #4
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	f00f f9eb 	bl	8016e58 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8007a82:	69bb      	ldr	r3, [r7, #24]
 8007a84:	68db      	ldr	r3, [r3, #12]
 8007a86:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8007a88:	69bb      	ldr	r3, [r7, #24]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	da03      	bge.n	8007a98 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8007a90:	23f8      	movs	r3, #248	; 0xf8
 8007a92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8007a96:	e03d      	b.n	8007b14 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8007a98:	69bb      	ldr	r3, [r7, #24]
 8007a9a:	689b      	ldr	r3, [r3, #8]
 8007a9c:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8007a9e:	693a      	ldr	r2, [r7, #16]
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	4413      	add	r3, r2
 8007aa4:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8007aa8:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8007aaa:	68ba      	ldr	r2, [r7, #8]
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	1ad3      	subs	r3, r2, r3
 8007ab0:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8007ab4:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8007ab6:	697a      	ldr	r2, [r7, #20]
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	1ad3      	subs	r3, r2, r3
 8007abc:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8007ac0:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8007ac6:	68fa      	ldr	r2, [r7, #12]
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	4413      	add	r3, r2
 8007acc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d8c8      	bhi.n	8007a66 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8007ad4:	69fa      	ldr	r2, [r7, #28]
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	18d0      	adds	r0, r2, r3
 8007ada:	6a3b      	ldr	r3, [r7, #32]
 8007adc:	685a      	ldr	r2, [r3, #4]
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	4413      	add	r3, r2
 8007ae2:	68fa      	ldr	r2, [r7, #12]
 8007ae4:	4619      	mov	r1, r3
 8007ae6:	f00f f9b7 	bl	8016e58 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8007aea:	693a      	ldr	r2, [r7, #16]
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	4413      	add	r3, r2
 8007af0:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8007af2:	697a      	ldr	r2, [r7, #20]
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	4413      	add	r3, r2
 8007af8:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8007afa:	6a3b      	ldr	r3, [r7, #32]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	623b      	str	r3, [r7, #32]
 8007b00:	6a3b      	ldr	r3, [r7, #32]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d1a1      	bne.n	8007a4a <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8007b06:	6979      	ldr	r1, [r7, #20]
 8007b08:	4811      	ldr	r0, [pc, #68]	; (8007b50 <low_level_output+0x138>)
 8007b0a:	f7fa f871 	bl	8001bf0 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8007b14:	4b0e      	ldr	r3, [pc, #56]	; (8007b50 <low_level_output+0x138>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b1c:	3314      	adds	r3, #20
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f003 0320 	and.w	r3, r3, #32
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d00d      	beq.n	8007b44 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8007b28:	4b09      	ldr	r3, [pc, #36]	; (8007b50 <low_level_output+0x138>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b30:	3314      	adds	r3, #20
 8007b32:	2220      	movs	r2, #32
 8007b34:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8007b36:	4b06      	ldr	r3, [pc, #24]	; (8007b50 <low_level_output+0x138>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b3e:	3304      	adds	r3, #4
 8007b40:	2200      	movs	r2, #0
 8007b42:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8007b44:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3728      	adds	r7, #40	; 0x28
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}
 8007b50:	200061cc 	.word	0x200061cc

08007b54 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b08c      	sub	sp, #48	; 0x30
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8007b60:	2300      	movs	r3, #0
 8007b62:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8007b64:	2300      	movs	r3, #0
 8007b66:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8007b70:	2300      	movs	r3, #0
 8007b72:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8007b74:	2300      	movs	r3, #0
 8007b76:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8007b78:	484f      	ldr	r0, [pc, #316]	; (8007cb8 <low_level_input+0x164>)
 8007b7a:	f7fa f923 	bl	8001dc4 <HAL_ETH_GetReceivedFrame_IT>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d001      	beq.n	8007b88 <low_level_input+0x34>

    return NULL;
 8007b84:	2300      	movs	r3, #0
 8007b86:	e092      	b.n	8007cae <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8007b88:	4b4b      	ldr	r3, [pc, #300]	; (8007cb8 <low_level_input+0x164>)
 8007b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b8c:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8007b8e:	4b4a      	ldr	r3, [pc, #296]	; (8007cb8 <low_level_input+0x164>)
 8007b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b92:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8007b94:	89fb      	ldrh	r3, [r7, #14]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d007      	beq.n	8007baa <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8007b9a:	89fb      	ldrh	r3, [r7, #14]
 8007b9c:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8007ba0:	4619      	mov	r1, r3
 8007ba2:	2000      	movs	r0, #0
 8007ba4:	f005 fe44 	bl	800d830 <pbuf_alloc>
 8007ba8:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8007baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d04b      	beq.n	8007c48 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8007bb0:	4b41      	ldr	r3, [pc, #260]	; (8007cb8 <low_level_input+0x164>)
 8007bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bb4:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8007bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8007bbe:	e040      	b.n	8007c42 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8007bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc2:	895b      	ldrh	r3, [r3, #10]
 8007bc4:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8007bca:	e021      	b.n	8007c10 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8007bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bce:	685a      	ldr	r2, [r3, #4]
 8007bd0:	69bb      	ldr	r3, [r7, #24]
 8007bd2:	18d0      	adds	r0, r2, r3
 8007bd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bd6:	69fb      	ldr	r3, [r7, #28]
 8007bd8:	18d1      	adds	r1, r2, r3
 8007bda:	69fb      	ldr	r3, [r7, #28]
 8007bdc:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8007be0:	3304      	adds	r3, #4
 8007be2:	461a      	mov	r2, r3
 8007be4:	f00f f938 	bl	8016e58 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8007be8:	6a3b      	ldr	r3, [r7, #32]
 8007bea:	68db      	ldr	r3, [r3, #12]
 8007bec:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8007bee:	6a3b      	ldr	r3, [r7, #32]
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8007bf4:	69fa      	ldr	r2, [r7, #28]
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	4413      	add	r3, r2
 8007bfa:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8007bfe:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8007c00:	69ba      	ldr	r2, [r7, #24]
 8007c02:	69fb      	ldr	r3, [r7, #28]
 8007c04:	1ad3      	subs	r3, r2, r3
 8007c06:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8007c0a:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8007c10:	697a      	ldr	r2, [r7, #20]
 8007c12:	69fb      	ldr	r3, [r7, #28]
 8007c14:	4413      	add	r3, r2
 8007c16:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d8d6      	bhi.n	8007bcc <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8007c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c20:	685a      	ldr	r2, [r3, #4]
 8007c22:	69bb      	ldr	r3, [r7, #24]
 8007c24:	18d0      	adds	r0, r2, r3
 8007c26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c28:	69fb      	ldr	r3, [r7, #28]
 8007c2a:	4413      	add	r3, r2
 8007c2c:	697a      	ldr	r2, [r7, #20]
 8007c2e:	4619      	mov	r1, r3
 8007c30:	f00f f912 	bl	8016e58 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8007c34:	69fa      	ldr	r2, [r7, #28]
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	4413      	add	r3, r2
 8007c3a:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8007c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d1bb      	bne.n	8007bc0 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8007c48:	4b1b      	ldr	r3, [pc, #108]	; (8007cb8 <low_level_input+0x164>)
 8007c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c4c:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8007c4e:	2300      	movs	r3, #0
 8007c50:	613b      	str	r3, [r7, #16]
 8007c52:	e00b      	b.n	8007c6c <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8007c54:	6a3b      	ldr	r3, [r7, #32]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007c5c:	6a3b      	ldr	r3, [r7, #32]
 8007c5e:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8007c60:	6a3b      	ldr	r3, [r7, #32]
 8007c62:	68db      	ldr	r3, [r3, #12]
 8007c64:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	3301      	adds	r3, #1
 8007c6a:	613b      	str	r3, [r7, #16]
 8007c6c:	4b12      	ldr	r3, [pc, #72]	; (8007cb8 <low_level_input+0x164>)
 8007c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c70:	693a      	ldr	r2, [r7, #16]
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d3ee      	bcc.n	8007c54 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8007c76:	4b10      	ldr	r3, [pc, #64]	; (8007cb8 <low_level_input+0x164>)
 8007c78:	2200      	movs	r2, #0
 8007c7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8007c7c:	4b0e      	ldr	r3, [pc, #56]	; (8007cb8 <low_level_input+0x164>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c84:	3314      	adds	r3, #20
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d00d      	beq.n	8007cac <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8007c90:	4b09      	ldr	r3, [pc, #36]	; (8007cb8 <low_level_input+0x164>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c98:	3314      	adds	r3, #20
 8007c9a:	2280      	movs	r2, #128	; 0x80
 8007c9c:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8007c9e:	4b06      	ldr	r3, [pc, #24]	; (8007cb8 <low_level_input+0x164>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ca6:	3308      	adds	r3, #8
 8007ca8:	2200      	movs	r2, #0
 8007caa:	601a      	str	r2, [r3, #0]
  }
  return p;
 8007cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3730      	adds	r7, #48	; 0x30
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	bf00      	nop
 8007cb8:	200061cc 	.word	0x200061cc

08007cbc <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8007cc8:	4b12      	ldr	r3, [pc, #72]	; (8007d14 <ethernetif_input+0x58>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f001 fe25 	bl	8009920 <osSemaphoreWait>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d1f5      	bne.n	8007cc8 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8007cdc:	480e      	ldr	r0, [pc, #56]	; (8007d18 <ethernetif_input+0x5c>)
 8007cde:	f00e fb27 	bl	8016330 <sys_mutex_lock>
        p = low_level_input( netif );
 8007ce2:	68f8      	ldr	r0, [r7, #12]
 8007ce4:	f7ff ff36 	bl	8007b54 <low_level_input>
 8007ce8:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d00a      	beq.n	8007d06 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	691b      	ldr	r3, [r3, #16]
 8007cf4:	68f9      	ldr	r1, [r7, #12]
 8007cf6:	68b8      	ldr	r0, [r7, #8]
 8007cf8:	4798      	blx	r3
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d002      	beq.n	8007d06 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8007d00:	68b8      	ldr	r0, [r7, #8]
 8007d02:	f006 f879 	bl	800ddf8 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8007d06:	4804      	ldr	r0, [pc, #16]	; (8007d18 <ethernetif_input+0x5c>)
 8007d08:	f00e fb21 	bl	801634e <sys_mutex_unlock>
      } while(p!=NULL);
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d1e4      	bne.n	8007cdc <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8007d12:	e7d9      	b.n	8007cc8 <ethernetif_input+0xc>
 8007d14:	20000494 	.word	0x20000494
 8007d18:	200079e4 	.word	0x200079e4

08007d1c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b082      	sub	sp, #8
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d106      	bne.n	8007d38 <ethernetif_init+0x1c>
 8007d2a:	4b0e      	ldr	r3, [pc, #56]	; (8007d64 <ethernetif_init+0x48>)
 8007d2c:	f240 222b 	movw	r2, #555	; 0x22b
 8007d30:	490d      	ldr	r1, [pc, #52]	; (8007d68 <ethernetif_init+0x4c>)
 8007d32:	480e      	ldr	r0, [pc, #56]	; (8007d6c <ethernetif_init+0x50>)
 8007d34:	f00f f8a6 	bl	8016e84 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2273      	movs	r2, #115	; 0x73
 8007d3c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->name[1] = IFNAME1;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2274      	movs	r2, #116	; 0x74
 8007d44:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	4a09      	ldr	r2, [pc, #36]	; (8007d70 <ethernetif_init+0x54>)
 8007d4c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	4a08      	ldr	r2, [pc, #32]	; (8007d74 <ethernetif_init+0x58>)
 8007d52:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f7ff fd87 	bl	8007868 <low_level_init>

  return ERR_OK;
 8007d5a:	2300      	movs	r3, #0
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3708      	adds	r7, #8
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}
 8007d64:	08018018 	.word	0x08018018
 8007d68:	08018034 	.word	0x08018034
 8007d6c:	08018044 	.word	0x08018044
 8007d70:	080144dd 	.word	0x080144dd
 8007d74:	08007a19 	.word	0x08007a19

08007d78 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007d7c:	f7f9 fbb4 	bl	80014e8 <HAL_GetTick>
 8007d80:	4603      	mov	r3, r0
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	bd80      	pop	{r7, pc}

08007d86 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d86:	b580      	push	{r7, lr}
 8007d88:	b084      	sub	sp, #16
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	6078      	str	r0, [r7, #4]
 8007d8e:	460b      	mov	r3, r1
 8007d90:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007d92:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007d96:	f00e ffe9 	bl	8016d6c <USBD_static_malloc>
 8007d9a:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d105      	bne.n	8007dae <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2200      	movs	r2, #0
 8007da6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007daa:	2302      	movs	r3, #2
 8007dac:	e066      	b.n	8007e7c <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	68fa      	ldr	r2, [r7, #12]
 8007db2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	7c1b      	ldrb	r3, [r3, #16]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d119      	bne.n	8007df2 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007dbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007dc2:	2202      	movs	r2, #2
 8007dc4:	2181      	movs	r1, #129	; 0x81
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f00e fead 	bl	8016b26 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2201      	movs	r2, #1
 8007dd0:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007dd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007dd6:	2202      	movs	r2, #2
 8007dd8:	2101      	movs	r1, #1
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f00e fea3 	bl	8016b26 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2201      	movs	r2, #1
 8007de4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2210      	movs	r2, #16
 8007dec:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007df0:	e016      	b.n	8007e20 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007df2:	2340      	movs	r3, #64	; 0x40
 8007df4:	2202      	movs	r2, #2
 8007df6:	2181      	movs	r1, #129	; 0x81
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f00e fe94 	bl	8016b26 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2201      	movs	r2, #1
 8007e02:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007e04:	2340      	movs	r3, #64	; 0x40
 8007e06:	2202      	movs	r2, #2
 8007e08:	2101      	movs	r1, #1
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f00e fe8b 	bl	8016b26 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2201      	movs	r2, #1
 8007e14:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2210      	movs	r2, #16
 8007e1c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007e20:	2308      	movs	r3, #8
 8007e22:	2203      	movs	r2, #3
 8007e24:	2182      	movs	r1, #130	; 0x82
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f00e fe7d 	bl	8016b26 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2201      	movs	r2, #1
 8007e30:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2200      	movs	r2, #0
 8007e42:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	7c1b      	ldrb	r3, [r3, #16]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d109      	bne.n	8007e6a <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e60:	2101      	movs	r1, #1
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f00e ff4e 	bl	8016d04 <USBD_LL_PrepareReceive>
 8007e68:	e007      	b.n	8007e7a <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e70:	2340      	movs	r3, #64	; 0x40
 8007e72:	2101      	movs	r1, #1
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f00e ff45 	bl	8016d04 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007e7a:	2300      	movs	r3, #0
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3710      	adds	r7, #16
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}

08007e84 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b082      	sub	sp, #8
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	460b      	mov	r3, r1
 8007e8e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007e90:	2181      	movs	r1, #129	; 0x81
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f00e fe6d 	bl	8016b72 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007e9e:	2101      	movs	r1, #1
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f00e fe66 	bl	8016b72 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007eae:	2182      	movs	r1, #130	; 0x82
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f00e fe5e 	bl	8016b72 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d00e      	beq.n	8007eee <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f00e ff51 	bl	8016d88 <USBD_static_free>
    pdev->pClassData = NULL;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007eee:	2300      	movs	r3, #0
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3708      	adds	r7, #8
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b086      	sub	sp, #24
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f08:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f12:	2300      	movs	r3, #0
 8007f14:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d101      	bne.n	8007f20 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007f1c:	2303      	movs	r3, #3
 8007f1e:	e0af      	b.n	8008080 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	781b      	ldrb	r3, [r3, #0]
 8007f24:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d03f      	beq.n	8007fac <USBD_CDC_Setup+0xb4>
 8007f2c:	2b20      	cmp	r3, #32
 8007f2e:	f040 809f 	bne.w	8008070 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	88db      	ldrh	r3, [r3, #6]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d02e      	beq.n	8007f98 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	781b      	ldrb	r3, [r3, #0]
 8007f3e:	b25b      	sxtb	r3, r3
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	da16      	bge.n	8007f72 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f4a:	689b      	ldr	r3, [r3, #8]
 8007f4c:	683a      	ldr	r2, [r7, #0]
 8007f4e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007f50:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007f52:	683a      	ldr	r2, [r7, #0]
 8007f54:	88d2      	ldrh	r2, [r2, #6]
 8007f56:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	88db      	ldrh	r3, [r3, #6]
 8007f5c:	2b07      	cmp	r3, #7
 8007f5e:	bf28      	it	cs
 8007f60:	2307      	movcs	r3, #7
 8007f62:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	89fa      	ldrh	r2, [r7, #14]
 8007f68:	4619      	mov	r1, r3
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f001 fae9 	bl	8009542 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007f70:	e085      	b.n	800807e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	785a      	ldrb	r2, [r3, #1]
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	88db      	ldrh	r3, [r3, #6]
 8007f80:	b2da      	uxtb	r2, r3
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007f88:	6939      	ldr	r1, [r7, #16]
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	88db      	ldrh	r3, [r3, #6]
 8007f8e:	461a      	mov	r2, r3
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f001 fb02 	bl	800959a <USBD_CtlPrepareRx>
      break;
 8007f96:	e072      	b.n	800807e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f9e:	689b      	ldr	r3, [r3, #8]
 8007fa0:	683a      	ldr	r2, [r7, #0]
 8007fa2:	7850      	ldrb	r0, [r2, #1]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	6839      	ldr	r1, [r7, #0]
 8007fa8:	4798      	blx	r3
      break;
 8007faa:	e068      	b.n	800807e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	785b      	ldrb	r3, [r3, #1]
 8007fb0:	2b0b      	cmp	r3, #11
 8007fb2:	d852      	bhi.n	800805a <USBD_CDC_Setup+0x162>
 8007fb4:	a201      	add	r2, pc, #4	; (adr r2, 8007fbc <USBD_CDC_Setup+0xc4>)
 8007fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fba:	bf00      	nop
 8007fbc:	08007fed 	.word	0x08007fed
 8007fc0:	08008069 	.word	0x08008069
 8007fc4:	0800805b 	.word	0x0800805b
 8007fc8:	0800805b 	.word	0x0800805b
 8007fcc:	0800805b 	.word	0x0800805b
 8007fd0:	0800805b 	.word	0x0800805b
 8007fd4:	0800805b 	.word	0x0800805b
 8007fd8:	0800805b 	.word	0x0800805b
 8007fdc:	0800805b 	.word	0x0800805b
 8007fe0:	0800805b 	.word	0x0800805b
 8007fe4:	08008017 	.word	0x08008017
 8007fe8:	08008041 	.word	0x08008041
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	2b03      	cmp	r3, #3
 8007ff6:	d107      	bne.n	8008008 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007ff8:	f107 030a 	add.w	r3, r7, #10
 8007ffc:	2202      	movs	r2, #2
 8007ffe:	4619      	mov	r1, r3
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f001 fa9e 	bl	8009542 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008006:	e032      	b.n	800806e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008008:	6839      	ldr	r1, [r7, #0]
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f001 fa28 	bl	8009460 <USBD_CtlError>
            ret = USBD_FAIL;
 8008010:	2303      	movs	r3, #3
 8008012:	75fb      	strb	r3, [r7, #23]
          break;
 8008014:	e02b      	b.n	800806e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800801c:	b2db      	uxtb	r3, r3
 800801e:	2b03      	cmp	r3, #3
 8008020:	d107      	bne.n	8008032 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008022:	f107 030d 	add.w	r3, r7, #13
 8008026:	2201      	movs	r2, #1
 8008028:	4619      	mov	r1, r3
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f001 fa89 	bl	8009542 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008030:	e01d      	b.n	800806e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008032:	6839      	ldr	r1, [r7, #0]
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f001 fa13 	bl	8009460 <USBD_CtlError>
            ret = USBD_FAIL;
 800803a:	2303      	movs	r3, #3
 800803c:	75fb      	strb	r3, [r7, #23]
          break;
 800803e:	e016      	b.n	800806e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008046:	b2db      	uxtb	r3, r3
 8008048:	2b03      	cmp	r3, #3
 800804a:	d00f      	beq.n	800806c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800804c:	6839      	ldr	r1, [r7, #0]
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f001 fa06 	bl	8009460 <USBD_CtlError>
            ret = USBD_FAIL;
 8008054:	2303      	movs	r3, #3
 8008056:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008058:	e008      	b.n	800806c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800805a:	6839      	ldr	r1, [r7, #0]
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f001 f9ff 	bl	8009460 <USBD_CtlError>
          ret = USBD_FAIL;
 8008062:	2303      	movs	r3, #3
 8008064:	75fb      	strb	r3, [r7, #23]
          break;
 8008066:	e002      	b.n	800806e <USBD_CDC_Setup+0x176>
          break;
 8008068:	bf00      	nop
 800806a:	e008      	b.n	800807e <USBD_CDC_Setup+0x186>
          break;
 800806c:	bf00      	nop
      }
      break;
 800806e:	e006      	b.n	800807e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8008070:	6839      	ldr	r1, [r7, #0]
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f001 f9f4 	bl	8009460 <USBD_CtlError>
      ret = USBD_FAIL;
 8008078:	2303      	movs	r3, #3
 800807a:	75fb      	strb	r3, [r7, #23]
      break;
 800807c:	bf00      	nop
  }

  return (uint8_t)ret;
 800807e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008080:	4618      	mov	r0, r3
 8008082:	3718      	adds	r7, #24
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}

08008088 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b084      	sub	sp, #16
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	460b      	mov	r3, r1
 8008092:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800809a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d101      	bne.n	80080aa <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80080a6:	2303      	movs	r3, #3
 80080a8:	e04f      	b.n	800814a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080b0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80080b2:	78fa      	ldrb	r2, [r7, #3]
 80080b4:	6879      	ldr	r1, [r7, #4]
 80080b6:	4613      	mov	r3, r2
 80080b8:	009b      	lsls	r3, r3, #2
 80080ba:	4413      	add	r3, r2
 80080bc:	009b      	lsls	r3, r3, #2
 80080be:	440b      	add	r3, r1
 80080c0:	3318      	adds	r3, #24
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d029      	beq.n	800811c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80080c8:	78fa      	ldrb	r2, [r7, #3]
 80080ca:	6879      	ldr	r1, [r7, #4]
 80080cc:	4613      	mov	r3, r2
 80080ce:	009b      	lsls	r3, r3, #2
 80080d0:	4413      	add	r3, r2
 80080d2:	009b      	lsls	r3, r3, #2
 80080d4:	440b      	add	r3, r1
 80080d6:	3318      	adds	r3, #24
 80080d8:	681a      	ldr	r2, [r3, #0]
 80080da:	78f9      	ldrb	r1, [r7, #3]
 80080dc:	68f8      	ldr	r0, [r7, #12]
 80080de:	460b      	mov	r3, r1
 80080e0:	00db      	lsls	r3, r3, #3
 80080e2:	1a5b      	subs	r3, r3, r1
 80080e4:	009b      	lsls	r3, r3, #2
 80080e6:	4403      	add	r3, r0
 80080e8:	3344      	adds	r3, #68	; 0x44
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	fbb2 f1f3 	udiv	r1, r2, r3
 80080f0:	fb03 f301 	mul.w	r3, r3, r1
 80080f4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d110      	bne.n	800811c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80080fa:	78fa      	ldrb	r2, [r7, #3]
 80080fc:	6879      	ldr	r1, [r7, #4]
 80080fe:	4613      	mov	r3, r2
 8008100:	009b      	lsls	r3, r3, #2
 8008102:	4413      	add	r3, r2
 8008104:	009b      	lsls	r3, r3, #2
 8008106:	440b      	add	r3, r1
 8008108:	3318      	adds	r3, #24
 800810a:	2200      	movs	r2, #0
 800810c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800810e:	78f9      	ldrb	r1, [r7, #3]
 8008110:	2300      	movs	r3, #0
 8008112:	2200      	movs	r2, #0
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f00e fdd4 	bl	8016cc2 <USBD_LL_Transmit>
 800811a:	e015      	b.n	8008148 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	2200      	movs	r2, #0
 8008120:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800812a:	691b      	ldr	r3, [r3, #16]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d00b      	beq.n	8008148 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008136:	691b      	ldr	r3, [r3, #16]
 8008138:	68ba      	ldr	r2, [r7, #8]
 800813a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800813e:	68ba      	ldr	r2, [r7, #8]
 8008140:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008144:	78fa      	ldrb	r2, [r7, #3]
 8008146:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008148:	2300      	movs	r3, #0
}
 800814a:	4618      	mov	r0, r3
 800814c:	3710      	adds	r7, #16
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}

08008152 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008152:	b580      	push	{r7, lr}
 8008154:	b084      	sub	sp, #16
 8008156:	af00      	add	r7, sp, #0
 8008158:	6078      	str	r0, [r7, #4]
 800815a:	460b      	mov	r3, r1
 800815c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008164:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800816c:	2b00      	cmp	r3, #0
 800816e:	d101      	bne.n	8008174 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008170:	2303      	movs	r3, #3
 8008172:	e015      	b.n	80081a0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008174:	78fb      	ldrb	r3, [r7, #3]
 8008176:	4619      	mov	r1, r3
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f00e fde4 	bl	8016d46 <USBD_LL_GetRxDataSize>
 800817e:	4602      	mov	r2, r0
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800818c:	68db      	ldr	r3, [r3, #12]
 800818e:	68fa      	ldr	r2, [r7, #12]
 8008190:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008194:	68fa      	ldr	r2, [r7, #12]
 8008196:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800819a:	4611      	mov	r1, r2
 800819c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800819e:	2300      	movs	r3, #0
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3710      	adds	r7, #16
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b084      	sub	sp, #16
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081b6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d101      	bne.n	80081c2 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80081be:	2303      	movs	r3, #3
 80081c0:	e01b      	b.n	80081fa <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d015      	beq.n	80081f8 <USBD_CDC_EP0_RxReady+0x50>
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80081d2:	2bff      	cmp	r3, #255	; 0xff
 80081d4:	d010      	beq.n	80081f8 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80081dc:	689b      	ldr	r3, [r3, #8]
 80081de:	68fa      	ldr	r2, [r7, #12]
 80081e0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80081e4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80081e6:	68fa      	ldr	r2, [r7, #12]
 80081e8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80081ec:	b292      	uxth	r2, r2
 80081ee:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	22ff      	movs	r2, #255	; 0xff
 80081f4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80081f8:	2300      	movs	r3, #0
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3710      	adds	r7, #16
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}
	...

08008204 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008204:	b480      	push	{r7}
 8008206:	b083      	sub	sp, #12
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2243      	movs	r2, #67	; 0x43
 8008210:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8008212:	4b03      	ldr	r3, [pc, #12]	; (8008220 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008214:	4618      	mov	r0, r3
 8008216:	370c      	adds	r7, #12
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr
 8008220:	20000094 	.word	0x20000094

08008224 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008224:	b480      	push	{r7}
 8008226:	b083      	sub	sp, #12
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2243      	movs	r2, #67	; 0x43
 8008230:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8008232:	4b03      	ldr	r3, [pc, #12]	; (8008240 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008234:	4618      	mov	r0, r3
 8008236:	370c      	adds	r7, #12
 8008238:	46bd      	mov	sp, r7
 800823a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823e:	4770      	bx	lr
 8008240:	20000050 	.word	0x20000050

08008244 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008244:	b480      	push	{r7}
 8008246:	b083      	sub	sp, #12
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2243      	movs	r2, #67	; 0x43
 8008250:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8008252:	4b03      	ldr	r3, [pc, #12]	; (8008260 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008254:	4618      	mov	r0, r3
 8008256:	370c      	adds	r7, #12
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr
 8008260:	200000d8 	.word	0x200000d8

08008264 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008264:	b480      	push	{r7}
 8008266:	b083      	sub	sp, #12
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	220a      	movs	r2, #10
 8008270:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008272:	4b03      	ldr	r3, [pc, #12]	; (8008280 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008274:	4618      	mov	r0, r3
 8008276:	370c      	adds	r7, #12
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr
 8008280:	2000000c 	.word	0x2000000c

08008284 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008284:	b480      	push	{r7}
 8008286:	b083      	sub	sp, #12
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d101      	bne.n	8008298 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008294:	2303      	movs	r3, #3
 8008296:	e004      	b.n	80082a2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	683a      	ldr	r2, [r7, #0]
 800829c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80082a0:	2300      	movs	r3, #0
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	370c      	adds	r7, #12
 80082a6:	46bd      	mov	sp, r7
 80082a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ac:	4770      	bx	lr

080082ae <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80082ae:	b480      	push	{r7}
 80082b0:	b087      	sub	sp, #28
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	60f8      	str	r0, [r7, #12]
 80082b6:	60b9      	str	r1, [r7, #8]
 80082b8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082c0:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d101      	bne.n	80082cc <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80082c8:	2303      	movs	r3, #3
 80082ca:	e008      	b.n	80082de <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	68ba      	ldr	r2, [r7, #8]
 80082d0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	687a      	ldr	r2, [r7, #4]
 80082d8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80082dc:	2300      	movs	r3, #0
}
 80082de:	4618      	mov	r0, r3
 80082e0:	371c      	adds	r7, #28
 80082e2:	46bd      	mov	sp, r7
 80082e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e8:	4770      	bx	lr

080082ea <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80082ea:	b480      	push	{r7}
 80082ec:	b085      	sub	sp, #20
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	6078      	str	r0, [r7, #4]
 80082f2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082fa:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d101      	bne.n	8008306 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8008302:	2303      	movs	r3, #3
 8008304:	e004      	b.n	8008310 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	683a      	ldr	r2, [r7, #0]
 800830a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800830e:	2300      	movs	r3, #0
}
 8008310:	4618      	mov	r0, r3
 8008312:	3714      	adds	r7, #20
 8008314:	46bd      	mov	sp, r7
 8008316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831a:	4770      	bx	lr

0800831c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b084      	sub	sp, #16
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800832a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008332:	2b00      	cmp	r3, #0
 8008334:	d101      	bne.n	800833a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008336:	2303      	movs	r3, #3
 8008338:	e016      	b.n	8008368 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	7c1b      	ldrb	r3, [r3, #16]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d109      	bne.n	8008356 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008348:	f44f 7300 	mov.w	r3, #512	; 0x200
 800834c:	2101      	movs	r1, #1
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f00e fcd8 	bl	8016d04 <USBD_LL_PrepareReceive>
 8008354:	e007      	b.n	8008366 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800835c:	2340      	movs	r3, #64	; 0x40
 800835e:	2101      	movs	r1, #1
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f00e fccf 	bl	8016d04 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008366:	2300      	movs	r3, #0
}
 8008368:	4618      	mov	r0, r3
 800836a:	3710      	adds	r7, #16
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}

08008370 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b086      	sub	sp, #24
 8008374:	af00      	add	r7, sp, #0
 8008376:	60f8      	str	r0, [r7, #12]
 8008378:	60b9      	str	r1, [r7, #8]
 800837a:	4613      	mov	r3, r2
 800837c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d101      	bne.n	8008388 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008384:	2303      	movs	r3, #3
 8008386:	e01f      	b.n	80083c8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2200      	movs	r2, #0
 800838c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	2200      	movs	r2, #0
 8008394:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2200      	movs	r2, #0
 800839c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d003      	beq.n	80083ae <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	68ba      	ldr	r2, [r7, #8]
 80083aa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2201      	movs	r2, #1
 80083b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	79fa      	ldrb	r2, [r7, #7]
 80083ba:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80083bc:	68f8      	ldr	r0, [r7, #12]
 80083be:	f00e fb4b 	bl	8016a58 <USBD_LL_Init>
 80083c2:	4603      	mov	r3, r0
 80083c4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80083c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3718      	adds	r7, #24
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}

080083d0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b084      	sub	sp, #16
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
 80083d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80083da:	2300      	movs	r3, #0
 80083dc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d101      	bne.n	80083e8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80083e4:	2303      	movs	r3, #3
 80083e6:	e016      	b.n	8008416 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	683a      	ldr	r2, [r7, #0]
 80083ec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d00b      	beq.n	8008414 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008404:	f107 020e 	add.w	r2, r7, #14
 8008408:	4610      	mov	r0, r2
 800840a:	4798      	blx	r3
 800840c:	4602      	mov	r2, r0
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008414:	2300      	movs	r3, #0
}
 8008416:	4618      	mov	r0, r3
 8008418:	3710      	adds	r7, #16
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}

0800841e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800841e:	b580      	push	{r7, lr}
 8008420:	b082      	sub	sp, #8
 8008422:	af00      	add	r7, sp, #0
 8008424:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f00e fb62 	bl	8016af0 <USBD_LL_Start>
 800842c:	4603      	mov	r3, r0
}
 800842e:	4618      	mov	r0, r3
 8008430:	3708      	adds	r7, #8
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}

08008436 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008436:	b480      	push	{r7}
 8008438:	b083      	sub	sp, #12
 800843a:	af00      	add	r7, sp, #0
 800843c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800843e:	2300      	movs	r3, #0
}
 8008440:	4618      	mov	r0, r3
 8008442:	370c      	adds	r7, #12
 8008444:	46bd      	mov	sp, r7
 8008446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844a:	4770      	bx	lr

0800844c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b084      	sub	sp, #16
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	460b      	mov	r3, r1
 8008456:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008458:	2303      	movs	r3, #3
 800845a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008462:	2b00      	cmp	r3, #0
 8008464:	d009      	beq.n	800847a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	78fa      	ldrb	r2, [r7, #3]
 8008470:	4611      	mov	r1, r2
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	4798      	blx	r3
 8008476:	4603      	mov	r3, r0
 8008478:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800847a:	7bfb      	ldrb	r3, [r7, #15]
}
 800847c:	4618      	mov	r0, r3
 800847e:	3710      	adds	r7, #16
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b082      	sub	sp, #8
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	460b      	mov	r3, r1
 800848e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008496:	2b00      	cmp	r3, #0
 8008498:	d007      	beq.n	80084aa <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084a0:	685b      	ldr	r3, [r3, #4]
 80084a2:	78fa      	ldrb	r2, [r7, #3]
 80084a4:	4611      	mov	r1, r2
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	4798      	blx	r3
  }

  return USBD_OK;
 80084aa:	2300      	movs	r3, #0
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3708      	adds	r7, #8
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b084      	sub	sp, #16
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80084c4:	6839      	ldr	r1, [r7, #0]
 80084c6:	4618      	mov	r0, r3
 80084c8:	f000 ff90 	bl	80093ec <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2201      	movs	r2, #1
 80084d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80084da:	461a      	mov	r2, r3
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80084e8:	f003 031f 	and.w	r3, r3, #31
 80084ec:	2b02      	cmp	r3, #2
 80084ee:	d01a      	beq.n	8008526 <USBD_LL_SetupStage+0x72>
 80084f0:	2b02      	cmp	r3, #2
 80084f2:	d822      	bhi.n	800853a <USBD_LL_SetupStage+0x86>
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d002      	beq.n	80084fe <USBD_LL_SetupStage+0x4a>
 80084f8:	2b01      	cmp	r3, #1
 80084fa:	d00a      	beq.n	8008512 <USBD_LL_SetupStage+0x5e>
 80084fc:	e01d      	b.n	800853a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008504:	4619      	mov	r1, r3
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f000 fa62 	bl	80089d0 <USBD_StdDevReq>
 800850c:	4603      	mov	r3, r0
 800850e:	73fb      	strb	r3, [r7, #15]
      break;
 8008510:	e020      	b.n	8008554 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008518:	4619      	mov	r1, r3
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f000 fac6 	bl	8008aac <USBD_StdItfReq>
 8008520:	4603      	mov	r3, r0
 8008522:	73fb      	strb	r3, [r7, #15]
      break;
 8008524:	e016      	b.n	8008554 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800852c:	4619      	mov	r1, r3
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 fb05 	bl	8008b3e <USBD_StdEPReq>
 8008534:	4603      	mov	r3, r0
 8008536:	73fb      	strb	r3, [r7, #15]
      break;
 8008538:	e00c      	b.n	8008554 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008540:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008544:	b2db      	uxtb	r3, r3
 8008546:	4619      	mov	r1, r3
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f00e fb31 	bl	8016bb0 <USBD_LL_StallEP>
 800854e:	4603      	mov	r3, r0
 8008550:	73fb      	strb	r3, [r7, #15]
      break;
 8008552:	bf00      	nop
  }

  return ret;
 8008554:	7bfb      	ldrb	r3, [r7, #15]
}
 8008556:	4618      	mov	r0, r3
 8008558:	3710      	adds	r7, #16
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}

0800855e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800855e:	b580      	push	{r7, lr}
 8008560:	b086      	sub	sp, #24
 8008562:	af00      	add	r7, sp, #0
 8008564:	60f8      	str	r0, [r7, #12]
 8008566:	460b      	mov	r3, r1
 8008568:	607a      	str	r2, [r7, #4]
 800856a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800856c:	7afb      	ldrb	r3, [r7, #11]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d138      	bne.n	80085e4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008578:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008580:	2b03      	cmp	r3, #3
 8008582:	d14a      	bne.n	800861a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008584:	693b      	ldr	r3, [r7, #16]
 8008586:	689a      	ldr	r2, [r3, #8]
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	68db      	ldr	r3, [r3, #12]
 800858c:	429a      	cmp	r2, r3
 800858e:	d913      	bls.n	80085b8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	689a      	ldr	r2, [r3, #8]
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	68db      	ldr	r3, [r3, #12]
 8008598:	1ad2      	subs	r2, r2, r3
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	68da      	ldr	r2, [r3, #12]
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	689b      	ldr	r3, [r3, #8]
 80085a6:	4293      	cmp	r3, r2
 80085a8:	bf28      	it	cs
 80085aa:	4613      	movcs	r3, r2
 80085ac:	461a      	mov	r2, r3
 80085ae:	6879      	ldr	r1, [r7, #4]
 80085b0:	68f8      	ldr	r0, [r7, #12]
 80085b2:	f001 f80f 	bl	80095d4 <USBD_CtlContinueRx>
 80085b6:	e030      	b.n	800861a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085be:	b2db      	uxtb	r3, r3
 80085c0:	2b03      	cmp	r3, #3
 80085c2:	d10b      	bne.n	80085dc <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085ca:	691b      	ldr	r3, [r3, #16]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d005      	beq.n	80085dc <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085d6:	691b      	ldr	r3, [r3, #16]
 80085d8:	68f8      	ldr	r0, [r7, #12]
 80085da:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80085dc:	68f8      	ldr	r0, [r7, #12]
 80085de:	f001 f80a 	bl	80095f6 <USBD_CtlSendStatus>
 80085e2:	e01a      	b.n	800861a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085ea:	b2db      	uxtb	r3, r3
 80085ec:	2b03      	cmp	r3, #3
 80085ee:	d114      	bne.n	800861a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085f6:	699b      	ldr	r3, [r3, #24]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d00e      	beq.n	800861a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008602:	699b      	ldr	r3, [r3, #24]
 8008604:	7afa      	ldrb	r2, [r7, #11]
 8008606:	4611      	mov	r1, r2
 8008608:	68f8      	ldr	r0, [r7, #12]
 800860a:	4798      	blx	r3
 800860c:	4603      	mov	r3, r0
 800860e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008610:	7dfb      	ldrb	r3, [r7, #23]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d001      	beq.n	800861a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8008616:	7dfb      	ldrb	r3, [r7, #23]
 8008618:	e000      	b.n	800861c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800861a:	2300      	movs	r3, #0
}
 800861c:	4618      	mov	r0, r3
 800861e:	3718      	adds	r7, #24
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}

08008624 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b086      	sub	sp, #24
 8008628:	af00      	add	r7, sp, #0
 800862a:	60f8      	str	r0, [r7, #12]
 800862c:	460b      	mov	r3, r1
 800862e:	607a      	str	r2, [r7, #4]
 8008630:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008632:	7afb      	ldrb	r3, [r7, #11]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d16b      	bne.n	8008710 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	3314      	adds	r3, #20
 800863c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008644:	2b02      	cmp	r3, #2
 8008646:	d156      	bne.n	80086f6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	689a      	ldr	r2, [r3, #8]
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	68db      	ldr	r3, [r3, #12]
 8008650:	429a      	cmp	r2, r3
 8008652:	d914      	bls.n	800867e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	689a      	ldr	r2, [r3, #8]
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	68db      	ldr	r3, [r3, #12]
 800865c:	1ad2      	subs	r2, r2, r3
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	689b      	ldr	r3, [r3, #8]
 8008666:	461a      	mov	r2, r3
 8008668:	6879      	ldr	r1, [r7, #4]
 800866a:	68f8      	ldr	r0, [r7, #12]
 800866c:	f000 ff84 	bl	8009578 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008670:	2300      	movs	r3, #0
 8008672:	2200      	movs	r2, #0
 8008674:	2100      	movs	r1, #0
 8008676:	68f8      	ldr	r0, [r7, #12]
 8008678:	f00e fb44 	bl	8016d04 <USBD_LL_PrepareReceive>
 800867c:	e03b      	b.n	80086f6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	68da      	ldr	r2, [r3, #12]
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	689b      	ldr	r3, [r3, #8]
 8008686:	429a      	cmp	r2, r3
 8008688:	d11c      	bne.n	80086c4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	685a      	ldr	r2, [r3, #4]
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008692:	429a      	cmp	r2, r3
 8008694:	d316      	bcc.n	80086c4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	685a      	ldr	r2, [r3, #4]
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d20f      	bcs.n	80086c4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80086a4:	2200      	movs	r2, #0
 80086a6:	2100      	movs	r1, #0
 80086a8:	68f8      	ldr	r0, [r7, #12]
 80086aa:	f000 ff65 	bl	8009578 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2200      	movs	r2, #0
 80086b2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80086b6:	2300      	movs	r3, #0
 80086b8:	2200      	movs	r2, #0
 80086ba:	2100      	movs	r1, #0
 80086bc:	68f8      	ldr	r0, [r7, #12]
 80086be:	f00e fb21 	bl	8016d04 <USBD_LL_PrepareReceive>
 80086c2:	e018      	b.n	80086f6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086ca:	b2db      	uxtb	r3, r3
 80086cc:	2b03      	cmp	r3, #3
 80086ce:	d10b      	bne.n	80086e8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086d6:	68db      	ldr	r3, [r3, #12]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d005      	beq.n	80086e8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086e2:	68db      	ldr	r3, [r3, #12]
 80086e4:	68f8      	ldr	r0, [r7, #12]
 80086e6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80086e8:	2180      	movs	r1, #128	; 0x80
 80086ea:	68f8      	ldr	r0, [r7, #12]
 80086ec:	f00e fa60 	bl	8016bb0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80086f0:	68f8      	ldr	r0, [r7, #12]
 80086f2:	f000 ff93 	bl	800961c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80086fc:	2b01      	cmp	r3, #1
 80086fe:	d122      	bne.n	8008746 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008700:	68f8      	ldr	r0, [r7, #12]
 8008702:	f7ff fe98 	bl	8008436 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2200      	movs	r2, #0
 800870a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800870e:	e01a      	b.n	8008746 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008716:	b2db      	uxtb	r3, r3
 8008718:	2b03      	cmp	r3, #3
 800871a:	d114      	bne.n	8008746 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008722:	695b      	ldr	r3, [r3, #20]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d00e      	beq.n	8008746 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800872e:	695b      	ldr	r3, [r3, #20]
 8008730:	7afa      	ldrb	r2, [r7, #11]
 8008732:	4611      	mov	r1, r2
 8008734:	68f8      	ldr	r0, [r7, #12]
 8008736:	4798      	blx	r3
 8008738:	4603      	mov	r3, r0
 800873a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800873c:	7dfb      	ldrb	r3, [r7, #23]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d001      	beq.n	8008746 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8008742:	7dfb      	ldrb	r3, [r7, #23]
 8008744:	e000      	b.n	8008748 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8008746:	2300      	movs	r3, #0
}
 8008748:	4618      	mov	r0, r3
 800874a:	3718      	adds	r7, #24
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}

08008750 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b082      	sub	sp, #8
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2201      	movs	r2, #1
 800875c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2200      	movs	r2, #0
 8008764:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2200      	movs	r2, #0
 800876c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2200      	movs	r2, #0
 8008772:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800877c:	2b00      	cmp	r3, #0
 800877e:	d101      	bne.n	8008784 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008780:	2303      	movs	r3, #3
 8008782:	e02f      	b.n	80087e4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800878a:	2b00      	cmp	r3, #0
 800878c:	d00f      	beq.n	80087ae <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d009      	beq.n	80087ae <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087a0:	685b      	ldr	r3, [r3, #4]
 80087a2:	687a      	ldr	r2, [r7, #4]
 80087a4:	6852      	ldr	r2, [r2, #4]
 80087a6:	b2d2      	uxtb	r2, r2
 80087a8:	4611      	mov	r1, r2
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80087ae:	2340      	movs	r3, #64	; 0x40
 80087b0:	2200      	movs	r2, #0
 80087b2:	2100      	movs	r1, #0
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f00e f9b6 	bl	8016b26 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2201      	movs	r2, #1
 80087be:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2240      	movs	r2, #64	; 0x40
 80087c6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80087ca:	2340      	movs	r3, #64	; 0x40
 80087cc:	2200      	movs	r2, #0
 80087ce:	2180      	movs	r1, #128	; 0x80
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f00e f9a8 	bl	8016b26 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2201      	movs	r2, #1
 80087da:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2240      	movs	r2, #64	; 0x40
 80087e0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80087e2:	2300      	movs	r3, #0
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3708      	adds	r7, #8
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}

080087ec <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b083      	sub	sp, #12
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
 80087f4:	460b      	mov	r3, r1
 80087f6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	78fa      	ldrb	r2, [r7, #3]
 80087fc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80087fe:	2300      	movs	r3, #0
}
 8008800:	4618      	mov	r0, r3
 8008802:	370c      	adds	r7, #12
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr

0800880c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800880c:	b480      	push	{r7}
 800880e:	b083      	sub	sp, #12
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800881a:	b2da      	uxtb	r2, r3
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2204      	movs	r2, #4
 8008826:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800882a:	2300      	movs	r3, #0
}
 800882c:	4618      	mov	r0, r3
 800882e:	370c      	adds	r7, #12
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr

08008838 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008838:	b480      	push	{r7}
 800883a:	b083      	sub	sp, #12
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008846:	b2db      	uxtb	r3, r3
 8008848:	2b04      	cmp	r3, #4
 800884a:	d106      	bne.n	800885a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008852:	b2da      	uxtb	r2, r3
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800885a:	2300      	movs	r3, #0
}
 800885c:	4618      	mov	r0, r3
 800885e:	370c      	adds	r7, #12
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr

08008868 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b082      	sub	sp, #8
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008876:	2b00      	cmp	r3, #0
 8008878:	d101      	bne.n	800887e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800887a:	2303      	movs	r3, #3
 800887c:	e012      	b.n	80088a4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008884:	b2db      	uxtb	r3, r3
 8008886:	2b03      	cmp	r3, #3
 8008888:	d10b      	bne.n	80088a2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008890:	69db      	ldr	r3, [r3, #28]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d005      	beq.n	80088a2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800889c:	69db      	ldr	r3, [r3, #28]
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80088a2:	2300      	movs	r3, #0
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3708      	adds	r7, #8
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}

080088ac <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b082      	sub	sp, #8
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	460b      	mov	r3, r1
 80088b6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d101      	bne.n	80088c6 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80088c2:	2303      	movs	r3, #3
 80088c4:	e014      	b.n	80088f0 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088cc:	b2db      	uxtb	r3, r3
 80088ce:	2b03      	cmp	r3, #3
 80088d0:	d10d      	bne.n	80088ee <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088d8:	6a1b      	ldr	r3, [r3, #32]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d007      	beq.n	80088ee <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088e4:	6a1b      	ldr	r3, [r3, #32]
 80088e6:	78fa      	ldrb	r2, [r7, #3]
 80088e8:	4611      	mov	r1, r2
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80088ee:	2300      	movs	r3, #0
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3708      	adds	r7, #8
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b082      	sub	sp, #8
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	460b      	mov	r3, r1
 8008902:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800890a:	2b00      	cmp	r3, #0
 800890c:	d101      	bne.n	8008912 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800890e:	2303      	movs	r3, #3
 8008910:	e014      	b.n	800893c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008918:	b2db      	uxtb	r3, r3
 800891a:	2b03      	cmp	r3, #3
 800891c:	d10d      	bne.n	800893a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008926:	2b00      	cmp	r3, #0
 8008928:	d007      	beq.n	800893a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008932:	78fa      	ldrb	r2, [r7, #3]
 8008934:	4611      	mov	r1, r2
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800893a:	2300      	movs	r3, #0
}
 800893c:	4618      	mov	r0, r3
 800893e:	3708      	adds	r7, #8
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008944:	b480      	push	{r7}
 8008946:	b083      	sub	sp, #12
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800894c:	2300      	movs	r3, #0
}
 800894e:	4618      	mov	r0, r3
 8008950:	370c      	adds	r7, #12
 8008952:	46bd      	mov	sp, r7
 8008954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008958:	4770      	bx	lr

0800895a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800895a:	b580      	push	{r7, lr}
 800895c:	b082      	sub	sp, #8
 800895e:	af00      	add	r7, sp, #0
 8008960:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2201      	movs	r2, #1
 8008966:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008970:	2b00      	cmp	r3, #0
 8008972:	d009      	beq.n	8008988 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	687a      	ldr	r2, [r7, #4]
 800897e:	6852      	ldr	r2, [r2, #4]
 8008980:	b2d2      	uxtb	r2, r2
 8008982:	4611      	mov	r1, r2
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	4798      	blx	r3
  }

  return USBD_OK;
 8008988:	2300      	movs	r3, #0
}
 800898a:	4618      	mov	r0, r3
 800898c:	3708      	adds	r7, #8
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}

08008992 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008992:	b480      	push	{r7}
 8008994:	b087      	sub	sp, #28
 8008996:	af00      	add	r7, sp, #0
 8008998:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	781b      	ldrb	r3, [r3, #0]
 80089a2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80089a4:	697b      	ldr	r3, [r7, #20]
 80089a6:	3301      	adds	r3, #1
 80089a8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	781b      	ldrb	r3, [r3, #0]
 80089ae:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80089b0:	8a3b      	ldrh	r3, [r7, #16]
 80089b2:	021b      	lsls	r3, r3, #8
 80089b4:	b21a      	sxth	r2, r3
 80089b6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80089ba:	4313      	orrs	r3, r2
 80089bc:	b21b      	sxth	r3, r3
 80089be:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80089c0:	89fb      	ldrh	r3, [r7, #14]
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	371c      	adds	r7, #28
 80089c6:	46bd      	mov	sp, r7
 80089c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089cc:	4770      	bx	lr
	...

080089d0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b084      	sub	sp, #16
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80089da:	2300      	movs	r3, #0
 80089dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	781b      	ldrb	r3, [r3, #0]
 80089e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80089e6:	2b40      	cmp	r3, #64	; 0x40
 80089e8:	d005      	beq.n	80089f6 <USBD_StdDevReq+0x26>
 80089ea:	2b40      	cmp	r3, #64	; 0x40
 80089ec:	d853      	bhi.n	8008a96 <USBD_StdDevReq+0xc6>
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d00b      	beq.n	8008a0a <USBD_StdDevReq+0x3a>
 80089f2:	2b20      	cmp	r3, #32
 80089f4:	d14f      	bne.n	8008a96 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089fc:	689b      	ldr	r3, [r3, #8]
 80089fe:	6839      	ldr	r1, [r7, #0]
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	4798      	blx	r3
 8008a04:	4603      	mov	r3, r0
 8008a06:	73fb      	strb	r3, [r7, #15]
      break;
 8008a08:	e04a      	b.n	8008aa0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	785b      	ldrb	r3, [r3, #1]
 8008a0e:	2b09      	cmp	r3, #9
 8008a10:	d83b      	bhi.n	8008a8a <USBD_StdDevReq+0xba>
 8008a12:	a201      	add	r2, pc, #4	; (adr r2, 8008a18 <USBD_StdDevReq+0x48>)
 8008a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a18:	08008a6d 	.word	0x08008a6d
 8008a1c:	08008a81 	.word	0x08008a81
 8008a20:	08008a8b 	.word	0x08008a8b
 8008a24:	08008a77 	.word	0x08008a77
 8008a28:	08008a8b 	.word	0x08008a8b
 8008a2c:	08008a4b 	.word	0x08008a4b
 8008a30:	08008a41 	.word	0x08008a41
 8008a34:	08008a8b 	.word	0x08008a8b
 8008a38:	08008a63 	.word	0x08008a63
 8008a3c:	08008a55 	.word	0x08008a55
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008a40:	6839      	ldr	r1, [r7, #0]
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f000 f9de 	bl	8008e04 <USBD_GetDescriptor>
          break;
 8008a48:	e024      	b.n	8008a94 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008a4a:	6839      	ldr	r1, [r7, #0]
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f000 fb43 	bl	80090d8 <USBD_SetAddress>
          break;
 8008a52:	e01f      	b.n	8008a94 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008a54:	6839      	ldr	r1, [r7, #0]
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 fb82 	bl	8009160 <USBD_SetConfig>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	73fb      	strb	r3, [r7, #15]
          break;
 8008a60:	e018      	b.n	8008a94 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008a62:	6839      	ldr	r1, [r7, #0]
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f000 fc21 	bl	80092ac <USBD_GetConfig>
          break;
 8008a6a:	e013      	b.n	8008a94 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008a6c:	6839      	ldr	r1, [r7, #0]
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f000 fc52 	bl	8009318 <USBD_GetStatus>
          break;
 8008a74:	e00e      	b.n	8008a94 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008a76:	6839      	ldr	r1, [r7, #0]
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f000 fc81 	bl	8009380 <USBD_SetFeature>
          break;
 8008a7e:	e009      	b.n	8008a94 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008a80:	6839      	ldr	r1, [r7, #0]
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f000 fc90 	bl	80093a8 <USBD_ClrFeature>
          break;
 8008a88:	e004      	b.n	8008a94 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008a8a:	6839      	ldr	r1, [r7, #0]
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f000 fce7 	bl	8009460 <USBD_CtlError>
          break;
 8008a92:	bf00      	nop
      }
      break;
 8008a94:	e004      	b.n	8008aa0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008a96:	6839      	ldr	r1, [r7, #0]
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f000 fce1 	bl	8009460 <USBD_CtlError>
      break;
 8008a9e:	bf00      	nop
  }

  return ret;
 8008aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	3710      	adds	r7, #16
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}
 8008aaa:	bf00      	nop

08008aac <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b084      	sub	sp, #16
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
 8008ab4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	781b      	ldrb	r3, [r3, #0]
 8008abe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ac2:	2b40      	cmp	r3, #64	; 0x40
 8008ac4:	d005      	beq.n	8008ad2 <USBD_StdItfReq+0x26>
 8008ac6:	2b40      	cmp	r3, #64	; 0x40
 8008ac8:	d82f      	bhi.n	8008b2a <USBD_StdItfReq+0x7e>
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d001      	beq.n	8008ad2 <USBD_StdItfReq+0x26>
 8008ace:	2b20      	cmp	r3, #32
 8008ad0:	d12b      	bne.n	8008b2a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ad8:	b2db      	uxtb	r3, r3
 8008ada:	3b01      	subs	r3, #1
 8008adc:	2b02      	cmp	r3, #2
 8008ade:	d81d      	bhi.n	8008b1c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	889b      	ldrh	r3, [r3, #4]
 8008ae4:	b2db      	uxtb	r3, r3
 8008ae6:	2b01      	cmp	r3, #1
 8008ae8:	d813      	bhi.n	8008b12 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008af0:	689b      	ldr	r3, [r3, #8]
 8008af2:	6839      	ldr	r1, [r7, #0]
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	4798      	blx	r3
 8008af8:	4603      	mov	r3, r0
 8008afa:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	88db      	ldrh	r3, [r3, #6]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d110      	bne.n	8008b26 <USBD_StdItfReq+0x7a>
 8008b04:	7bfb      	ldrb	r3, [r7, #15]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d10d      	bne.n	8008b26 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f000 fd73 	bl	80095f6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008b10:	e009      	b.n	8008b26 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008b12:	6839      	ldr	r1, [r7, #0]
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f000 fca3 	bl	8009460 <USBD_CtlError>
          break;
 8008b1a:	e004      	b.n	8008b26 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008b1c:	6839      	ldr	r1, [r7, #0]
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f000 fc9e 	bl	8009460 <USBD_CtlError>
          break;
 8008b24:	e000      	b.n	8008b28 <USBD_StdItfReq+0x7c>
          break;
 8008b26:	bf00      	nop
      }
      break;
 8008b28:	e004      	b.n	8008b34 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008b2a:	6839      	ldr	r1, [r7, #0]
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f000 fc97 	bl	8009460 <USBD_CtlError>
      break;
 8008b32:	bf00      	nop
  }

  return ret;
 8008b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3710      	adds	r7, #16
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}

08008b3e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b3e:	b580      	push	{r7, lr}
 8008b40:	b084      	sub	sp, #16
 8008b42:	af00      	add	r7, sp, #0
 8008b44:	6078      	str	r0, [r7, #4]
 8008b46:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	889b      	ldrh	r3, [r3, #4]
 8008b50:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	781b      	ldrb	r3, [r3, #0]
 8008b56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b5a:	2b40      	cmp	r3, #64	; 0x40
 8008b5c:	d007      	beq.n	8008b6e <USBD_StdEPReq+0x30>
 8008b5e:	2b40      	cmp	r3, #64	; 0x40
 8008b60:	f200 8145 	bhi.w	8008dee <USBD_StdEPReq+0x2b0>
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d00c      	beq.n	8008b82 <USBD_StdEPReq+0x44>
 8008b68:	2b20      	cmp	r3, #32
 8008b6a:	f040 8140 	bne.w	8008dee <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b74:	689b      	ldr	r3, [r3, #8]
 8008b76:	6839      	ldr	r1, [r7, #0]
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	4798      	blx	r3
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	73fb      	strb	r3, [r7, #15]
      break;
 8008b80:	e13a      	b.n	8008df8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	785b      	ldrb	r3, [r3, #1]
 8008b86:	2b03      	cmp	r3, #3
 8008b88:	d007      	beq.n	8008b9a <USBD_StdEPReq+0x5c>
 8008b8a:	2b03      	cmp	r3, #3
 8008b8c:	f300 8129 	bgt.w	8008de2 <USBD_StdEPReq+0x2a4>
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d07f      	beq.n	8008c94 <USBD_StdEPReq+0x156>
 8008b94:	2b01      	cmp	r3, #1
 8008b96:	d03c      	beq.n	8008c12 <USBD_StdEPReq+0xd4>
 8008b98:	e123      	b.n	8008de2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ba0:	b2db      	uxtb	r3, r3
 8008ba2:	2b02      	cmp	r3, #2
 8008ba4:	d002      	beq.n	8008bac <USBD_StdEPReq+0x6e>
 8008ba6:	2b03      	cmp	r3, #3
 8008ba8:	d016      	beq.n	8008bd8 <USBD_StdEPReq+0x9a>
 8008baa:	e02c      	b.n	8008c06 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008bac:	7bbb      	ldrb	r3, [r7, #14]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d00d      	beq.n	8008bce <USBD_StdEPReq+0x90>
 8008bb2:	7bbb      	ldrb	r3, [r7, #14]
 8008bb4:	2b80      	cmp	r3, #128	; 0x80
 8008bb6:	d00a      	beq.n	8008bce <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008bb8:	7bbb      	ldrb	r3, [r7, #14]
 8008bba:	4619      	mov	r1, r3
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f00d fff7 	bl	8016bb0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008bc2:	2180      	movs	r1, #128	; 0x80
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f00d fff3 	bl	8016bb0 <USBD_LL_StallEP>
 8008bca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008bcc:	e020      	b.n	8008c10 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8008bce:	6839      	ldr	r1, [r7, #0]
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f000 fc45 	bl	8009460 <USBD_CtlError>
              break;
 8008bd6:	e01b      	b.n	8008c10 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	885b      	ldrh	r3, [r3, #2]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d10e      	bne.n	8008bfe <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008be0:	7bbb      	ldrb	r3, [r7, #14]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d00b      	beq.n	8008bfe <USBD_StdEPReq+0xc0>
 8008be6:	7bbb      	ldrb	r3, [r7, #14]
 8008be8:	2b80      	cmp	r3, #128	; 0x80
 8008bea:	d008      	beq.n	8008bfe <USBD_StdEPReq+0xc0>
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	88db      	ldrh	r3, [r3, #6]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d104      	bne.n	8008bfe <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008bf4:	7bbb      	ldrb	r3, [r7, #14]
 8008bf6:	4619      	mov	r1, r3
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f00d ffd9 	bl	8016bb0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f000 fcf9 	bl	80095f6 <USBD_CtlSendStatus>

              break;
 8008c04:	e004      	b.n	8008c10 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008c06:	6839      	ldr	r1, [r7, #0]
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f000 fc29 	bl	8009460 <USBD_CtlError>
              break;
 8008c0e:	bf00      	nop
          }
          break;
 8008c10:	e0ec      	b.n	8008dec <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c18:	b2db      	uxtb	r3, r3
 8008c1a:	2b02      	cmp	r3, #2
 8008c1c:	d002      	beq.n	8008c24 <USBD_StdEPReq+0xe6>
 8008c1e:	2b03      	cmp	r3, #3
 8008c20:	d016      	beq.n	8008c50 <USBD_StdEPReq+0x112>
 8008c22:	e030      	b.n	8008c86 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c24:	7bbb      	ldrb	r3, [r7, #14]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d00d      	beq.n	8008c46 <USBD_StdEPReq+0x108>
 8008c2a:	7bbb      	ldrb	r3, [r7, #14]
 8008c2c:	2b80      	cmp	r3, #128	; 0x80
 8008c2e:	d00a      	beq.n	8008c46 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008c30:	7bbb      	ldrb	r3, [r7, #14]
 8008c32:	4619      	mov	r1, r3
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f00d ffbb 	bl	8016bb0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c3a:	2180      	movs	r1, #128	; 0x80
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f00d ffb7 	bl	8016bb0 <USBD_LL_StallEP>
 8008c42:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008c44:	e025      	b.n	8008c92 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008c46:	6839      	ldr	r1, [r7, #0]
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f000 fc09 	bl	8009460 <USBD_CtlError>
              break;
 8008c4e:	e020      	b.n	8008c92 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	885b      	ldrh	r3, [r3, #2]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d11b      	bne.n	8008c90 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008c58:	7bbb      	ldrb	r3, [r7, #14]
 8008c5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d004      	beq.n	8008c6c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008c62:	7bbb      	ldrb	r3, [r7, #14]
 8008c64:	4619      	mov	r1, r3
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f00d ffc1 	bl	8016bee <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f000 fcc2 	bl	80095f6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c78:	689b      	ldr	r3, [r3, #8]
 8008c7a:	6839      	ldr	r1, [r7, #0]
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	4798      	blx	r3
 8008c80:	4603      	mov	r3, r0
 8008c82:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008c84:	e004      	b.n	8008c90 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8008c86:	6839      	ldr	r1, [r7, #0]
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f000 fbe9 	bl	8009460 <USBD_CtlError>
              break;
 8008c8e:	e000      	b.n	8008c92 <USBD_StdEPReq+0x154>
              break;
 8008c90:	bf00      	nop
          }
          break;
 8008c92:	e0ab      	b.n	8008dec <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c9a:	b2db      	uxtb	r3, r3
 8008c9c:	2b02      	cmp	r3, #2
 8008c9e:	d002      	beq.n	8008ca6 <USBD_StdEPReq+0x168>
 8008ca0:	2b03      	cmp	r3, #3
 8008ca2:	d032      	beq.n	8008d0a <USBD_StdEPReq+0x1cc>
 8008ca4:	e097      	b.n	8008dd6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ca6:	7bbb      	ldrb	r3, [r7, #14]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d007      	beq.n	8008cbc <USBD_StdEPReq+0x17e>
 8008cac:	7bbb      	ldrb	r3, [r7, #14]
 8008cae:	2b80      	cmp	r3, #128	; 0x80
 8008cb0:	d004      	beq.n	8008cbc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8008cb2:	6839      	ldr	r1, [r7, #0]
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f000 fbd3 	bl	8009460 <USBD_CtlError>
                break;
 8008cba:	e091      	b.n	8008de0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008cbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	da0b      	bge.n	8008cdc <USBD_StdEPReq+0x19e>
 8008cc4:	7bbb      	ldrb	r3, [r7, #14]
 8008cc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008cca:	4613      	mov	r3, r2
 8008ccc:	009b      	lsls	r3, r3, #2
 8008cce:	4413      	add	r3, r2
 8008cd0:	009b      	lsls	r3, r3, #2
 8008cd2:	3310      	adds	r3, #16
 8008cd4:	687a      	ldr	r2, [r7, #4]
 8008cd6:	4413      	add	r3, r2
 8008cd8:	3304      	adds	r3, #4
 8008cda:	e00b      	b.n	8008cf4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008cdc:	7bbb      	ldrb	r3, [r7, #14]
 8008cde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ce2:	4613      	mov	r3, r2
 8008ce4:	009b      	lsls	r3, r3, #2
 8008ce6:	4413      	add	r3, r2
 8008ce8:	009b      	lsls	r3, r3, #2
 8008cea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008cee:	687a      	ldr	r2, [r7, #4]
 8008cf0:	4413      	add	r3, r2
 8008cf2:	3304      	adds	r3, #4
 8008cf4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	2202      	movs	r2, #2
 8008d00:	4619      	mov	r1, r3
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f000 fc1d 	bl	8009542 <USBD_CtlSendData>
              break;
 8008d08:	e06a      	b.n	8008de0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008d0a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	da11      	bge.n	8008d36 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008d12:	7bbb      	ldrb	r3, [r7, #14]
 8008d14:	f003 020f 	and.w	r2, r3, #15
 8008d18:	6879      	ldr	r1, [r7, #4]
 8008d1a:	4613      	mov	r3, r2
 8008d1c:	009b      	lsls	r3, r3, #2
 8008d1e:	4413      	add	r3, r2
 8008d20:	009b      	lsls	r3, r3, #2
 8008d22:	440b      	add	r3, r1
 8008d24:	3324      	adds	r3, #36	; 0x24
 8008d26:	881b      	ldrh	r3, [r3, #0]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d117      	bne.n	8008d5c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008d2c:	6839      	ldr	r1, [r7, #0]
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f000 fb96 	bl	8009460 <USBD_CtlError>
                  break;
 8008d34:	e054      	b.n	8008de0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008d36:	7bbb      	ldrb	r3, [r7, #14]
 8008d38:	f003 020f 	and.w	r2, r3, #15
 8008d3c:	6879      	ldr	r1, [r7, #4]
 8008d3e:	4613      	mov	r3, r2
 8008d40:	009b      	lsls	r3, r3, #2
 8008d42:	4413      	add	r3, r2
 8008d44:	009b      	lsls	r3, r3, #2
 8008d46:	440b      	add	r3, r1
 8008d48:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008d4c:	881b      	ldrh	r3, [r3, #0]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d104      	bne.n	8008d5c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008d52:	6839      	ldr	r1, [r7, #0]
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f000 fb83 	bl	8009460 <USBD_CtlError>
                  break;
 8008d5a:	e041      	b.n	8008de0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	da0b      	bge.n	8008d7c <USBD_StdEPReq+0x23e>
 8008d64:	7bbb      	ldrb	r3, [r7, #14]
 8008d66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d6a:	4613      	mov	r3, r2
 8008d6c:	009b      	lsls	r3, r3, #2
 8008d6e:	4413      	add	r3, r2
 8008d70:	009b      	lsls	r3, r3, #2
 8008d72:	3310      	adds	r3, #16
 8008d74:	687a      	ldr	r2, [r7, #4]
 8008d76:	4413      	add	r3, r2
 8008d78:	3304      	adds	r3, #4
 8008d7a:	e00b      	b.n	8008d94 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008d7c:	7bbb      	ldrb	r3, [r7, #14]
 8008d7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d82:	4613      	mov	r3, r2
 8008d84:	009b      	lsls	r3, r3, #2
 8008d86:	4413      	add	r3, r2
 8008d88:	009b      	lsls	r3, r3, #2
 8008d8a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008d8e:	687a      	ldr	r2, [r7, #4]
 8008d90:	4413      	add	r3, r2
 8008d92:	3304      	adds	r3, #4
 8008d94:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008d96:	7bbb      	ldrb	r3, [r7, #14]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d002      	beq.n	8008da2 <USBD_StdEPReq+0x264>
 8008d9c:	7bbb      	ldrb	r3, [r7, #14]
 8008d9e:	2b80      	cmp	r3, #128	; 0x80
 8008da0:	d103      	bne.n	8008daa <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	2200      	movs	r2, #0
 8008da6:	601a      	str	r2, [r3, #0]
 8008da8:	e00e      	b.n	8008dc8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008daa:	7bbb      	ldrb	r3, [r7, #14]
 8008dac:	4619      	mov	r1, r3
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f00d ff3c 	bl	8016c2c <USBD_LL_IsStallEP>
 8008db4:	4603      	mov	r3, r0
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d003      	beq.n	8008dc2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	2201      	movs	r2, #1
 8008dbe:	601a      	str	r2, [r3, #0]
 8008dc0:	e002      	b.n	8008dc8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	2202      	movs	r2, #2
 8008dcc:	4619      	mov	r1, r3
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f000 fbb7 	bl	8009542 <USBD_CtlSendData>
              break;
 8008dd4:	e004      	b.n	8008de0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008dd6:	6839      	ldr	r1, [r7, #0]
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f000 fb41 	bl	8009460 <USBD_CtlError>
              break;
 8008dde:	bf00      	nop
          }
          break;
 8008de0:	e004      	b.n	8008dec <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8008de2:	6839      	ldr	r1, [r7, #0]
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f000 fb3b 	bl	8009460 <USBD_CtlError>
          break;
 8008dea:	bf00      	nop
      }
      break;
 8008dec:	e004      	b.n	8008df8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8008dee:	6839      	ldr	r1, [r7, #0]
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f000 fb35 	bl	8009460 <USBD_CtlError>
      break;
 8008df6:	bf00      	nop
  }

  return ret;
 8008df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3710      	adds	r7, #16
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}
	...

08008e04 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b084      	sub	sp, #16
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008e12:	2300      	movs	r3, #0
 8008e14:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008e16:	2300      	movs	r3, #0
 8008e18:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	885b      	ldrh	r3, [r3, #2]
 8008e1e:	0a1b      	lsrs	r3, r3, #8
 8008e20:	b29b      	uxth	r3, r3
 8008e22:	3b01      	subs	r3, #1
 8008e24:	2b06      	cmp	r3, #6
 8008e26:	f200 8128 	bhi.w	800907a <USBD_GetDescriptor+0x276>
 8008e2a:	a201      	add	r2, pc, #4	; (adr r2, 8008e30 <USBD_GetDescriptor+0x2c>)
 8008e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e30:	08008e4d 	.word	0x08008e4d
 8008e34:	08008e65 	.word	0x08008e65
 8008e38:	08008ea5 	.word	0x08008ea5
 8008e3c:	0800907b 	.word	0x0800907b
 8008e40:	0800907b 	.word	0x0800907b
 8008e44:	0800901b 	.word	0x0800901b
 8008e48:	08009047 	.word	0x08009047
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	687a      	ldr	r2, [r7, #4]
 8008e56:	7c12      	ldrb	r2, [r2, #16]
 8008e58:	f107 0108 	add.w	r1, r7, #8
 8008e5c:	4610      	mov	r0, r2
 8008e5e:	4798      	blx	r3
 8008e60:	60f8      	str	r0, [r7, #12]
      break;
 8008e62:	e112      	b.n	800908a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	7c1b      	ldrb	r3, [r3, #16]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d10d      	bne.n	8008e88 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e74:	f107 0208 	add.w	r2, r7, #8
 8008e78:	4610      	mov	r0, r2
 8008e7a:	4798      	blx	r3
 8008e7c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	3301      	adds	r3, #1
 8008e82:	2202      	movs	r2, #2
 8008e84:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008e86:	e100      	b.n	800908a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e90:	f107 0208 	add.w	r2, r7, #8
 8008e94:	4610      	mov	r0, r2
 8008e96:	4798      	blx	r3
 8008e98:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	3301      	adds	r3, #1
 8008e9e:	2202      	movs	r2, #2
 8008ea0:	701a      	strb	r2, [r3, #0]
      break;
 8008ea2:	e0f2      	b.n	800908a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	885b      	ldrh	r3, [r3, #2]
 8008ea8:	b2db      	uxtb	r3, r3
 8008eaa:	2b05      	cmp	r3, #5
 8008eac:	f200 80ac 	bhi.w	8009008 <USBD_GetDescriptor+0x204>
 8008eb0:	a201      	add	r2, pc, #4	; (adr r2, 8008eb8 <USBD_GetDescriptor+0xb4>)
 8008eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eb6:	bf00      	nop
 8008eb8:	08008ed1 	.word	0x08008ed1
 8008ebc:	08008f05 	.word	0x08008f05
 8008ec0:	08008f39 	.word	0x08008f39
 8008ec4:	08008f6d 	.word	0x08008f6d
 8008ec8:	08008fa1 	.word	0x08008fa1
 8008ecc:	08008fd5 	.word	0x08008fd5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ed6:	685b      	ldr	r3, [r3, #4]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d00b      	beq.n	8008ef4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ee2:	685b      	ldr	r3, [r3, #4]
 8008ee4:	687a      	ldr	r2, [r7, #4]
 8008ee6:	7c12      	ldrb	r2, [r2, #16]
 8008ee8:	f107 0108 	add.w	r1, r7, #8
 8008eec:	4610      	mov	r0, r2
 8008eee:	4798      	blx	r3
 8008ef0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ef2:	e091      	b.n	8009018 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ef4:	6839      	ldr	r1, [r7, #0]
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f000 fab2 	bl	8009460 <USBD_CtlError>
            err++;
 8008efc:	7afb      	ldrb	r3, [r7, #11]
 8008efe:	3301      	adds	r3, #1
 8008f00:	72fb      	strb	r3, [r7, #11]
          break;
 8008f02:	e089      	b.n	8009018 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f0a:	689b      	ldr	r3, [r3, #8]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d00b      	beq.n	8008f28 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f16:	689b      	ldr	r3, [r3, #8]
 8008f18:	687a      	ldr	r2, [r7, #4]
 8008f1a:	7c12      	ldrb	r2, [r2, #16]
 8008f1c:	f107 0108 	add.w	r1, r7, #8
 8008f20:	4610      	mov	r0, r2
 8008f22:	4798      	blx	r3
 8008f24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f26:	e077      	b.n	8009018 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f28:	6839      	ldr	r1, [r7, #0]
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f000 fa98 	bl	8009460 <USBD_CtlError>
            err++;
 8008f30:	7afb      	ldrb	r3, [r7, #11]
 8008f32:	3301      	adds	r3, #1
 8008f34:	72fb      	strb	r3, [r7, #11]
          break;
 8008f36:	e06f      	b.n	8009018 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f3e:	68db      	ldr	r3, [r3, #12]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d00b      	beq.n	8008f5c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f4a:	68db      	ldr	r3, [r3, #12]
 8008f4c:	687a      	ldr	r2, [r7, #4]
 8008f4e:	7c12      	ldrb	r2, [r2, #16]
 8008f50:	f107 0108 	add.w	r1, r7, #8
 8008f54:	4610      	mov	r0, r2
 8008f56:	4798      	blx	r3
 8008f58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f5a:	e05d      	b.n	8009018 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f5c:	6839      	ldr	r1, [r7, #0]
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f000 fa7e 	bl	8009460 <USBD_CtlError>
            err++;
 8008f64:	7afb      	ldrb	r3, [r7, #11]
 8008f66:	3301      	adds	r3, #1
 8008f68:	72fb      	strb	r3, [r7, #11]
          break;
 8008f6a:	e055      	b.n	8009018 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f72:	691b      	ldr	r3, [r3, #16]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d00b      	beq.n	8008f90 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f7e:	691b      	ldr	r3, [r3, #16]
 8008f80:	687a      	ldr	r2, [r7, #4]
 8008f82:	7c12      	ldrb	r2, [r2, #16]
 8008f84:	f107 0108 	add.w	r1, r7, #8
 8008f88:	4610      	mov	r0, r2
 8008f8a:	4798      	blx	r3
 8008f8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f8e:	e043      	b.n	8009018 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f90:	6839      	ldr	r1, [r7, #0]
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f000 fa64 	bl	8009460 <USBD_CtlError>
            err++;
 8008f98:	7afb      	ldrb	r3, [r7, #11]
 8008f9a:	3301      	adds	r3, #1
 8008f9c:	72fb      	strb	r3, [r7, #11]
          break;
 8008f9e:	e03b      	b.n	8009018 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fa6:	695b      	ldr	r3, [r3, #20]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d00b      	beq.n	8008fc4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fb2:	695b      	ldr	r3, [r3, #20]
 8008fb4:	687a      	ldr	r2, [r7, #4]
 8008fb6:	7c12      	ldrb	r2, [r2, #16]
 8008fb8:	f107 0108 	add.w	r1, r7, #8
 8008fbc:	4610      	mov	r0, r2
 8008fbe:	4798      	blx	r3
 8008fc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fc2:	e029      	b.n	8009018 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008fc4:	6839      	ldr	r1, [r7, #0]
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f000 fa4a 	bl	8009460 <USBD_CtlError>
            err++;
 8008fcc:	7afb      	ldrb	r3, [r7, #11]
 8008fce:	3301      	adds	r3, #1
 8008fd0:	72fb      	strb	r3, [r7, #11]
          break;
 8008fd2:	e021      	b.n	8009018 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fda:	699b      	ldr	r3, [r3, #24]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d00b      	beq.n	8008ff8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fe6:	699b      	ldr	r3, [r3, #24]
 8008fe8:	687a      	ldr	r2, [r7, #4]
 8008fea:	7c12      	ldrb	r2, [r2, #16]
 8008fec:	f107 0108 	add.w	r1, r7, #8
 8008ff0:	4610      	mov	r0, r2
 8008ff2:	4798      	blx	r3
 8008ff4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ff6:	e00f      	b.n	8009018 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ff8:	6839      	ldr	r1, [r7, #0]
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f000 fa30 	bl	8009460 <USBD_CtlError>
            err++;
 8009000:	7afb      	ldrb	r3, [r7, #11]
 8009002:	3301      	adds	r3, #1
 8009004:	72fb      	strb	r3, [r7, #11]
          break;
 8009006:	e007      	b.n	8009018 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009008:	6839      	ldr	r1, [r7, #0]
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f000 fa28 	bl	8009460 <USBD_CtlError>
          err++;
 8009010:	7afb      	ldrb	r3, [r7, #11]
 8009012:	3301      	adds	r3, #1
 8009014:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8009016:	bf00      	nop
      }
      break;
 8009018:	e037      	b.n	800908a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	7c1b      	ldrb	r3, [r3, #16]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d109      	bne.n	8009036 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800902a:	f107 0208 	add.w	r2, r7, #8
 800902e:	4610      	mov	r0, r2
 8009030:	4798      	blx	r3
 8009032:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009034:	e029      	b.n	800908a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009036:	6839      	ldr	r1, [r7, #0]
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f000 fa11 	bl	8009460 <USBD_CtlError>
        err++;
 800903e:	7afb      	ldrb	r3, [r7, #11]
 8009040:	3301      	adds	r3, #1
 8009042:	72fb      	strb	r3, [r7, #11]
      break;
 8009044:	e021      	b.n	800908a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	7c1b      	ldrb	r3, [r3, #16]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d10d      	bne.n	800906a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009056:	f107 0208 	add.w	r2, r7, #8
 800905a:	4610      	mov	r0, r2
 800905c:	4798      	blx	r3
 800905e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	3301      	adds	r3, #1
 8009064:	2207      	movs	r2, #7
 8009066:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009068:	e00f      	b.n	800908a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800906a:	6839      	ldr	r1, [r7, #0]
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f000 f9f7 	bl	8009460 <USBD_CtlError>
        err++;
 8009072:	7afb      	ldrb	r3, [r7, #11]
 8009074:	3301      	adds	r3, #1
 8009076:	72fb      	strb	r3, [r7, #11]
      break;
 8009078:	e007      	b.n	800908a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800907a:	6839      	ldr	r1, [r7, #0]
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f000 f9ef 	bl	8009460 <USBD_CtlError>
      err++;
 8009082:	7afb      	ldrb	r3, [r7, #11]
 8009084:	3301      	adds	r3, #1
 8009086:	72fb      	strb	r3, [r7, #11]
      break;
 8009088:	bf00      	nop
  }

  if (err != 0U)
 800908a:	7afb      	ldrb	r3, [r7, #11]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d11e      	bne.n	80090ce <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	88db      	ldrh	r3, [r3, #6]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d016      	beq.n	80090c6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009098:	893b      	ldrh	r3, [r7, #8]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d00e      	beq.n	80090bc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	88da      	ldrh	r2, [r3, #6]
 80090a2:	893b      	ldrh	r3, [r7, #8]
 80090a4:	4293      	cmp	r3, r2
 80090a6:	bf28      	it	cs
 80090a8:	4613      	movcs	r3, r2
 80090aa:	b29b      	uxth	r3, r3
 80090ac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80090ae:	893b      	ldrh	r3, [r7, #8]
 80090b0:	461a      	mov	r2, r3
 80090b2:	68f9      	ldr	r1, [r7, #12]
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f000 fa44 	bl	8009542 <USBD_CtlSendData>
 80090ba:	e009      	b.n	80090d0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80090bc:	6839      	ldr	r1, [r7, #0]
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f000 f9ce 	bl	8009460 <USBD_CtlError>
 80090c4:	e004      	b.n	80090d0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f000 fa95 	bl	80095f6 <USBD_CtlSendStatus>
 80090cc:	e000      	b.n	80090d0 <USBD_GetDescriptor+0x2cc>
    return;
 80090ce:	bf00      	nop
  }
}
 80090d0:	3710      	adds	r7, #16
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}
 80090d6:	bf00      	nop

080090d8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b084      	sub	sp, #16
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
 80090e0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	889b      	ldrh	r3, [r3, #4]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d131      	bne.n	800914e <USBD_SetAddress+0x76>
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	88db      	ldrh	r3, [r3, #6]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d12d      	bne.n	800914e <USBD_SetAddress+0x76>
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	885b      	ldrh	r3, [r3, #2]
 80090f6:	2b7f      	cmp	r3, #127	; 0x7f
 80090f8:	d829      	bhi.n	800914e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	885b      	ldrh	r3, [r3, #2]
 80090fe:	b2db      	uxtb	r3, r3
 8009100:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009104:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800910c:	b2db      	uxtb	r3, r3
 800910e:	2b03      	cmp	r3, #3
 8009110:	d104      	bne.n	800911c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009112:	6839      	ldr	r1, [r7, #0]
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f000 f9a3 	bl	8009460 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800911a:	e01d      	b.n	8009158 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	7bfa      	ldrb	r2, [r7, #15]
 8009120:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009124:	7bfb      	ldrb	r3, [r7, #15]
 8009126:	4619      	mov	r1, r3
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f00d fdab 	bl	8016c84 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f000 fa61 	bl	80095f6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009134:	7bfb      	ldrb	r3, [r7, #15]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d004      	beq.n	8009144 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2202      	movs	r2, #2
 800913e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009142:	e009      	b.n	8009158 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2201      	movs	r2, #1
 8009148:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800914c:	e004      	b.n	8009158 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800914e:	6839      	ldr	r1, [r7, #0]
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f000 f985 	bl	8009460 <USBD_CtlError>
  }
}
 8009156:	bf00      	nop
 8009158:	bf00      	nop
 800915a:	3710      	adds	r7, #16
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}

08009160 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b084      	sub	sp, #16
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
 8009168:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800916a:	2300      	movs	r3, #0
 800916c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	885b      	ldrh	r3, [r3, #2]
 8009172:	b2da      	uxtb	r2, r3
 8009174:	4b4c      	ldr	r3, [pc, #304]	; (80092a8 <USBD_SetConfig+0x148>)
 8009176:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009178:	4b4b      	ldr	r3, [pc, #300]	; (80092a8 <USBD_SetConfig+0x148>)
 800917a:	781b      	ldrb	r3, [r3, #0]
 800917c:	2b01      	cmp	r3, #1
 800917e:	d905      	bls.n	800918c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009180:	6839      	ldr	r1, [r7, #0]
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f000 f96c 	bl	8009460 <USBD_CtlError>
    return USBD_FAIL;
 8009188:	2303      	movs	r3, #3
 800918a:	e088      	b.n	800929e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009192:	b2db      	uxtb	r3, r3
 8009194:	2b02      	cmp	r3, #2
 8009196:	d002      	beq.n	800919e <USBD_SetConfig+0x3e>
 8009198:	2b03      	cmp	r3, #3
 800919a:	d025      	beq.n	80091e8 <USBD_SetConfig+0x88>
 800919c:	e071      	b.n	8009282 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800919e:	4b42      	ldr	r3, [pc, #264]	; (80092a8 <USBD_SetConfig+0x148>)
 80091a0:	781b      	ldrb	r3, [r3, #0]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d01c      	beq.n	80091e0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80091a6:	4b40      	ldr	r3, [pc, #256]	; (80092a8 <USBD_SetConfig+0x148>)
 80091a8:	781b      	ldrb	r3, [r3, #0]
 80091aa:	461a      	mov	r2, r3
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80091b0:	4b3d      	ldr	r3, [pc, #244]	; (80092a8 <USBD_SetConfig+0x148>)
 80091b2:	781b      	ldrb	r3, [r3, #0]
 80091b4:	4619      	mov	r1, r3
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f7ff f948 	bl	800844c <USBD_SetClassConfig>
 80091bc:	4603      	mov	r3, r0
 80091be:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80091c0:	7bfb      	ldrb	r3, [r7, #15]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d004      	beq.n	80091d0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80091c6:	6839      	ldr	r1, [r7, #0]
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f000 f949 	bl	8009460 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80091ce:	e065      	b.n	800929c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f000 fa10 	bl	80095f6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2203      	movs	r2, #3
 80091da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80091de:	e05d      	b.n	800929c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f000 fa08 	bl	80095f6 <USBD_CtlSendStatus>
      break;
 80091e6:	e059      	b.n	800929c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80091e8:	4b2f      	ldr	r3, [pc, #188]	; (80092a8 <USBD_SetConfig+0x148>)
 80091ea:	781b      	ldrb	r3, [r3, #0]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d112      	bne.n	8009216 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2202      	movs	r2, #2
 80091f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80091f8:	4b2b      	ldr	r3, [pc, #172]	; (80092a8 <USBD_SetConfig+0x148>)
 80091fa:	781b      	ldrb	r3, [r3, #0]
 80091fc:	461a      	mov	r2, r3
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009202:	4b29      	ldr	r3, [pc, #164]	; (80092a8 <USBD_SetConfig+0x148>)
 8009204:	781b      	ldrb	r3, [r3, #0]
 8009206:	4619      	mov	r1, r3
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f7ff f93b 	bl	8008484 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f000 f9f1 	bl	80095f6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009214:	e042      	b.n	800929c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8009216:	4b24      	ldr	r3, [pc, #144]	; (80092a8 <USBD_SetConfig+0x148>)
 8009218:	781b      	ldrb	r3, [r3, #0]
 800921a:	461a      	mov	r2, r3
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	685b      	ldr	r3, [r3, #4]
 8009220:	429a      	cmp	r2, r3
 8009222:	d02a      	beq.n	800927a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	685b      	ldr	r3, [r3, #4]
 8009228:	b2db      	uxtb	r3, r3
 800922a:	4619      	mov	r1, r3
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f7ff f929 	bl	8008484 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009232:	4b1d      	ldr	r3, [pc, #116]	; (80092a8 <USBD_SetConfig+0x148>)
 8009234:	781b      	ldrb	r3, [r3, #0]
 8009236:	461a      	mov	r2, r3
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800923c:	4b1a      	ldr	r3, [pc, #104]	; (80092a8 <USBD_SetConfig+0x148>)
 800923e:	781b      	ldrb	r3, [r3, #0]
 8009240:	4619      	mov	r1, r3
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f7ff f902 	bl	800844c <USBD_SetClassConfig>
 8009248:	4603      	mov	r3, r0
 800924a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800924c:	7bfb      	ldrb	r3, [r7, #15]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d00f      	beq.n	8009272 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8009252:	6839      	ldr	r1, [r7, #0]
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f000 f903 	bl	8009460 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	b2db      	uxtb	r3, r3
 8009260:	4619      	mov	r1, r3
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f7ff f90e 	bl	8008484 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2202      	movs	r2, #2
 800926c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009270:	e014      	b.n	800929c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f000 f9bf 	bl	80095f6 <USBD_CtlSendStatus>
      break;
 8009278:	e010      	b.n	800929c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f000 f9bb 	bl	80095f6 <USBD_CtlSendStatus>
      break;
 8009280:	e00c      	b.n	800929c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009282:	6839      	ldr	r1, [r7, #0]
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f000 f8eb 	bl	8009460 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800928a:	4b07      	ldr	r3, [pc, #28]	; (80092a8 <USBD_SetConfig+0x148>)
 800928c:	781b      	ldrb	r3, [r3, #0]
 800928e:	4619      	mov	r1, r3
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f7ff f8f7 	bl	8008484 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009296:	2303      	movs	r3, #3
 8009298:	73fb      	strb	r3, [r7, #15]
      break;
 800929a:	bf00      	nop
  }

  return ret;
 800929c:	7bfb      	ldrb	r3, [r7, #15]
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3710      	adds	r7, #16
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}
 80092a6:	bf00      	nop
 80092a8:	20000498 	.word	0x20000498

080092ac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b082      	sub	sp, #8
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	88db      	ldrh	r3, [r3, #6]
 80092ba:	2b01      	cmp	r3, #1
 80092bc:	d004      	beq.n	80092c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80092be:	6839      	ldr	r1, [r7, #0]
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f000 f8cd 	bl	8009460 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80092c6:	e023      	b.n	8009310 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092ce:	b2db      	uxtb	r3, r3
 80092d0:	2b02      	cmp	r3, #2
 80092d2:	dc02      	bgt.n	80092da <USBD_GetConfig+0x2e>
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	dc03      	bgt.n	80092e0 <USBD_GetConfig+0x34>
 80092d8:	e015      	b.n	8009306 <USBD_GetConfig+0x5a>
 80092da:	2b03      	cmp	r3, #3
 80092dc:	d00b      	beq.n	80092f6 <USBD_GetConfig+0x4a>
 80092de:	e012      	b.n	8009306 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2200      	movs	r2, #0
 80092e4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	3308      	adds	r3, #8
 80092ea:	2201      	movs	r2, #1
 80092ec:	4619      	mov	r1, r3
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f000 f927 	bl	8009542 <USBD_CtlSendData>
        break;
 80092f4:	e00c      	b.n	8009310 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	3304      	adds	r3, #4
 80092fa:	2201      	movs	r2, #1
 80092fc:	4619      	mov	r1, r3
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f000 f91f 	bl	8009542 <USBD_CtlSendData>
        break;
 8009304:	e004      	b.n	8009310 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009306:	6839      	ldr	r1, [r7, #0]
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f000 f8a9 	bl	8009460 <USBD_CtlError>
        break;
 800930e:	bf00      	nop
}
 8009310:	bf00      	nop
 8009312:	3708      	adds	r7, #8
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}

08009318 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b082      	sub	sp, #8
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
 8009320:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009328:	b2db      	uxtb	r3, r3
 800932a:	3b01      	subs	r3, #1
 800932c:	2b02      	cmp	r3, #2
 800932e:	d81e      	bhi.n	800936e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	88db      	ldrh	r3, [r3, #6]
 8009334:	2b02      	cmp	r3, #2
 8009336:	d004      	beq.n	8009342 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009338:	6839      	ldr	r1, [r7, #0]
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	f000 f890 	bl	8009460 <USBD_CtlError>
        break;
 8009340:	e01a      	b.n	8009378 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2201      	movs	r2, #1
 8009346:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800934e:	2b00      	cmp	r3, #0
 8009350:	d005      	beq.n	800935e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	68db      	ldr	r3, [r3, #12]
 8009356:	f043 0202 	orr.w	r2, r3, #2
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	330c      	adds	r3, #12
 8009362:	2202      	movs	r2, #2
 8009364:	4619      	mov	r1, r3
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 f8eb 	bl	8009542 <USBD_CtlSendData>
      break;
 800936c:	e004      	b.n	8009378 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800936e:	6839      	ldr	r1, [r7, #0]
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f000 f875 	bl	8009460 <USBD_CtlError>
      break;
 8009376:	bf00      	nop
  }
}
 8009378:	bf00      	nop
 800937a:	3708      	adds	r7, #8
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}

08009380 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b082      	sub	sp, #8
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	885b      	ldrh	r3, [r3, #2]
 800938e:	2b01      	cmp	r3, #1
 8009390:	d106      	bne.n	80093a0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2201      	movs	r2, #1
 8009396:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f000 f92b 	bl	80095f6 <USBD_CtlSendStatus>
  }
}
 80093a0:	bf00      	nop
 80093a2:	3708      	adds	r7, #8
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}

080093a8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b082      	sub	sp, #8
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
 80093b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093b8:	b2db      	uxtb	r3, r3
 80093ba:	3b01      	subs	r3, #1
 80093bc:	2b02      	cmp	r3, #2
 80093be:	d80b      	bhi.n	80093d8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	885b      	ldrh	r3, [r3, #2]
 80093c4:	2b01      	cmp	r3, #1
 80093c6:	d10c      	bne.n	80093e2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2200      	movs	r2, #0
 80093cc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f000 f910 	bl	80095f6 <USBD_CtlSendStatus>
      }
      break;
 80093d6:	e004      	b.n	80093e2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80093d8:	6839      	ldr	r1, [r7, #0]
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f000 f840 	bl	8009460 <USBD_CtlError>
      break;
 80093e0:	e000      	b.n	80093e4 <USBD_ClrFeature+0x3c>
      break;
 80093e2:	bf00      	nop
  }
}
 80093e4:	bf00      	nop
 80093e6:	3708      	adds	r7, #8
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}

080093ec <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b084      	sub	sp, #16
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
 80093f4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	781a      	ldrb	r2, [r3, #0]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	3301      	adds	r3, #1
 8009406:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	781a      	ldrb	r2, [r3, #0]
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	3301      	adds	r3, #1
 8009414:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009416:	68f8      	ldr	r0, [r7, #12]
 8009418:	f7ff fabb 	bl	8008992 <SWAPBYTE>
 800941c:	4603      	mov	r3, r0
 800941e:	461a      	mov	r2, r3
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	3301      	adds	r3, #1
 8009428:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	3301      	adds	r3, #1
 800942e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009430:	68f8      	ldr	r0, [r7, #12]
 8009432:	f7ff faae 	bl	8008992 <SWAPBYTE>
 8009436:	4603      	mov	r3, r0
 8009438:	461a      	mov	r2, r3
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	3301      	adds	r3, #1
 8009442:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	3301      	adds	r3, #1
 8009448:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800944a:	68f8      	ldr	r0, [r7, #12]
 800944c:	f7ff faa1 	bl	8008992 <SWAPBYTE>
 8009450:	4603      	mov	r3, r0
 8009452:	461a      	mov	r2, r3
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	80da      	strh	r2, [r3, #6]
}
 8009458:	bf00      	nop
 800945a:	3710      	adds	r7, #16
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}

08009460 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b082      	sub	sp, #8
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
 8009468:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800946a:	2180      	movs	r1, #128	; 0x80
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f00d fb9f 	bl	8016bb0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009472:	2100      	movs	r1, #0
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f00d fb9b 	bl	8016bb0 <USBD_LL_StallEP>
}
 800947a:	bf00      	nop
 800947c:	3708      	adds	r7, #8
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}

08009482 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009482:	b580      	push	{r7, lr}
 8009484:	b086      	sub	sp, #24
 8009486:	af00      	add	r7, sp, #0
 8009488:	60f8      	str	r0, [r7, #12]
 800948a:	60b9      	str	r1, [r7, #8]
 800948c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800948e:	2300      	movs	r3, #0
 8009490:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d036      	beq.n	8009506 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800949c:	6938      	ldr	r0, [r7, #16]
 800949e:	f000 f836 	bl	800950e <USBD_GetLen>
 80094a2:	4603      	mov	r3, r0
 80094a4:	3301      	adds	r3, #1
 80094a6:	b29b      	uxth	r3, r3
 80094a8:	005b      	lsls	r3, r3, #1
 80094aa:	b29a      	uxth	r2, r3
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80094b0:	7dfb      	ldrb	r3, [r7, #23]
 80094b2:	68ba      	ldr	r2, [r7, #8]
 80094b4:	4413      	add	r3, r2
 80094b6:	687a      	ldr	r2, [r7, #4]
 80094b8:	7812      	ldrb	r2, [r2, #0]
 80094ba:	701a      	strb	r2, [r3, #0]
  idx++;
 80094bc:	7dfb      	ldrb	r3, [r7, #23]
 80094be:	3301      	adds	r3, #1
 80094c0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80094c2:	7dfb      	ldrb	r3, [r7, #23]
 80094c4:	68ba      	ldr	r2, [r7, #8]
 80094c6:	4413      	add	r3, r2
 80094c8:	2203      	movs	r2, #3
 80094ca:	701a      	strb	r2, [r3, #0]
  idx++;
 80094cc:	7dfb      	ldrb	r3, [r7, #23]
 80094ce:	3301      	adds	r3, #1
 80094d0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80094d2:	e013      	b.n	80094fc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80094d4:	7dfb      	ldrb	r3, [r7, #23]
 80094d6:	68ba      	ldr	r2, [r7, #8]
 80094d8:	4413      	add	r3, r2
 80094da:	693a      	ldr	r2, [r7, #16]
 80094dc:	7812      	ldrb	r2, [r2, #0]
 80094de:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	3301      	adds	r3, #1
 80094e4:	613b      	str	r3, [r7, #16]
    idx++;
 80094e6:	7dfb      	ldrb	r3, [r7, #23]
 80094e8:	3301      	adds	r3, #1
 80094ea:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80094ec:	7dfb      	ldrb	r3, [r7, #23]
 80094ee:	68ba      	ldr	r2, [r7, #8]
 80094f0:	4413      	add	r3, r2
 80094f2:	2200      	movs	r2, #0
 80094f4:	701a      	strb	r2, [r3, #0]
    idx++;
 80094f6:	7dfb      	ldrb	r3, [r7, #23]
 80094f8:	3301      	adds	r3, #1
 80094fa:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	781b      	ldrb	r3, [r3, #0]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d1e7      	bne.n	80094d4 <USBD_GetString+0x52>
 8009504:	e000      	b.n	8009508 <USBD_GetString+0x86>
    return;
 8009506:	bf00      	nop
  }
}
 8009508:	3718      	adds	r7, #24
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}

0800950e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800950e:	b480      	push	{r7}
 8009510:	b085      	sub	sp, #20
 8009512:	af00      	add	r7, sp, #0
 8009514:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009516:	2300      	movs	r3, #0
 8009518:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800951e:	e005      	b.n	800952c <USBD_GetLen+0x1e>
  {
    len++;
 8009520:	7bfb      	ldrb	r3, [r7, #15]
 8009522:	3301      	adds	r3, #1
 8009524:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	3301      	adds	r3, #1
 800952a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	781b      	ldrb	r3, [r3, #0]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d1f5      	bne.n	8009520 <USBD_GetLen+0x12>
  }

  return len;
 8009534:	7bfb      	ldrb	r3, [r7, #15]
}
 8009536:	4618      	mov	r0, r3
 8009538:	3714      	adds	r7, #20
 800953a:	46bd      	mov	sp, r7
 800953c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009540:	4770      	bx	lr

08009542 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009542:	b580      	push	{r7, lr}
 8009544:	b084      	sub	sp, #16
 8009546:	af00      	add	r7, sp, #0
 8009548:	60f8      	str	r0, [r7, #12]
 800954a:	60b9      	str	r1, [r7, #8]
 800954c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	2202      	movs	r2, #2
 8009552:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	687a      	ldr	r2, [r7, #4]
 800955a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	687a      	ldr	r2, [r7, #4]
 8009560:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	68ba      	ldr	r2, [r7, #8]
 8009566:	2100      	movs	r1, #0
 8009568:	68f8      	ldr	r0, [r7, #12]
 800956a:	f00d fbaa 	bl	8016cc2 <USBD_LL_Transmit>

  return USBD_OK;
 800956e:	2300      	movs	r3, #0
}
 8009570:	4618      	mov	r0, r3
 8009572:	3710      	adds	r7, #16
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}

08009578 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b084      	sub	sp, #16
 800957c:	af00      	add	r7, sp, #0
 800957e:	60f8      	str	r0, [r7, #12]
 8009580:	60b9      	str	r1, [r7, #8]
 8009582:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	68ba      	ldr	r2, [r7, #8]
 8009588:	2100      	movs	r1, #0
 800958a:	68f8      	ldr	r0, [r7, #12]
 800958c:	f00d fb99 	bl	8016cc2 <USBD_LL_Transmit>

  return USBD_OK;
 8009590:	2300      	movs	r3, #0
}
 8009592:	4618      	mov	r0, r3
 8009594:	3710      	adds	r7, #16
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}

0800959a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800959a:	b580      	push	{r7, lr}
 800959c:	b084      	sub	sp, #16
 800959e:	af00      	add	r7, sp, #0
 80095a0:	60f8      	str	r0, [r7, #12]
 80095a2:	60b9      	str	r1, [r7, #8]
 80095a4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	2203      	movs	r2, #3
 80095aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	687a      	ldr	r2, [r7, #4]
 80095b2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	687a      	ldr	r2, [r7, #4]
 80095ba:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	68ba      	ldr	r2, [r7, #8]
 80095c2:	2100      	movs	r1, #0
 80095c4:	68f8      	ldr	r0, [r7, #12]
 80095c6:	f00d fb9d 	bl	8016d04 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80095ca:	2300      	movs	r3, #0
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	3710      	adds	r7, #16
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}

080095d4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b084      	sub	sp, #16
 80095d8:	af00      	add	r7, sp, #0
 80095da:	60f8      	str	r0, [r7, #12]
 80095dc:	60b9      	str	r1, [r7, #8]
 80095de:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	68ba      	ldr	r2, [r7, #8]
 80095e4:	2100      	movs	r1, #0
 80095e6:	68f8      	ldr	r0, [r7, #12]
 80095e8:	f00d fb8c 	bl	8016d04 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80095ec:	2300      	movs	r3, #0
}
 80095ee:	4618      	mov	r0, r3
 80095f0:	3710      	adds	r7, #16
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}

080095f6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80095f6:	b580      	push	{r7, lr}
 80095f8:	b082      	sub	sp, #8
 80095fa:	af00      	add	r7, sp, #0
 80095fc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2204      	movs	r2, #4
 8009602:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009606:	2300      	movs	r3, #0
 8009608:	2200      	movs	r2, #0
 800960a:	2100      	movs	r1, #0
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f00d fb58 	bl	8016cc2 <USBD_LL_Transmit>

  return USBD_OK;
 8009612:	2300      	movs	r3, #0
}
 8009614:	4618      	mov	r0, r3
 8009616:	3708      	adds	r7, #8
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}

0800961c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b082      	sub	sp, #8
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2205      	movs	r2, #5
 8009628:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800962c:	2300      	movs	r3, #0
 800962e:	2200      	movs	r2, #0
 8009630:	2100      	movs	r1, #0
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f00d fb66 	bl	8016d04 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009638:	2300      	movs	r3, #0
}
 800963a:	4618      	mov	r0, r3
 800963c:	3708      	adds	r7, #8
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}

08009642 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009642:	b480      	push	{r7}
 8009644:	b085      	sub	sp, #20
 8009646:	af00      	add	r7, sp, #0
 8009648:	4603      	mov	r3, r0
 800964a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800964c:	2300      	movs	r3, #0
 800964e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009650:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009654:	2b84      	cmp	r3, #132	; 0x84
 8009656:	d005      	beq.n	8009664 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009658:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	4413      	add	r3, r2
 8009660:	3303      	adds	r3, #3
 8009662:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009664:	68fb      	ldr	r3, [r7, #12]
}
 8009666:	4618      	mov	r0, r3
 8009668:	3714      	adds	r7, #20
 800966a:	46bd      	mov	sp, r7
 800966c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009670:	4770      	bx	lr

08009672 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009672:	b480      	push	{r7}
 8009674:	b083      	sub	sp, #12
 8009676:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009678:	f3ef 8305 	mrs	r3, IPSR
 800967c:	607b      	str	r3, [r7, #4]
  return(result);
 800967e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009680:	2b00      	cmp	r3, #0
 8009682:	bf14      	ite	ne
 8009684:	2301      	movne	r3, #1
 8009686:	2300      	moveq	r3, #0
 8009688:	b2db      	uxtb	r3, r3
}
 800968a:	4618      	mov	r0, r3
 800968c:	370c      	adds	r7, #12
 800968e:	46bd      	mov	sp, r7
 8009690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009694:	4770      	bx	lr

08009696 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009696:	b580      	push	{r7, lr}
 8009698:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800969a:	f001 fc5d 	bl	800af58 <vTaskStartScheduler>
  
  return osOK;
 800969e:	2300      	movs	r3, #0
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	bd80      	pop	{r7, pc}

080096a4 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80096a8:	f7ff ffe3 	bl	8009672 <inHandlerMode>
 80096ac:	4603      	mov	r3, r0
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d003      	beq.n	80096ba <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80096b2:	f001 fd6b 	bl	800b18c <xTaskGetTickCountFromISR>
 80096b6:	4603      	mov	r3, r0
 80096b8:	e002      	b.n	80096c0 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80096ba:	f001 fd57 	bl	800b16c <xTaskGetTickCount>
 80096be:	4603      	mov	r3, r0
  }
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	bd80      	pop	{r7, pc}

080096c4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80096c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096c6:	b089      	sub	sp, #36	; 0x24
 80096c8:	af04      	add	r7, sp, #16
 80096ca:	6078      	str	r0, [r7, #4]
 80096cc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	695b      	ldr	r3, [r3, #20]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d020      	beq.n	8009718 <osThreadCreate+0x54>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	699b      	ldr	r3, [r3, #24]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d01c      	beq.n	8009718 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	685c      	ldr	r4, [r3, #4]
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681d      	ldr	r5, [r3, #0]
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	691e      	ldr	r6, [r3, #16]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80096f0:	4618      	mov	r0, r3
 80096f2:	f7ff ffa6 	bl	8009642 <makeFreeRtosPriority>
 80096f6:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	695b      	ldr	r3, [r3, #20]
 80096fc:	687a      	ldr	r2, [r7, #4]
 80096fe:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009700:	9202      	str	r2, [sp, #8]
 8009702:	9301      	str	r3, [sp, #4]
 8009704:	9100      	str	r1, [sp, #0]
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	4632      	mov	r2, r6
 800970a:	4629      	mov	r1, r5
 800970c:	4620      	mov	r0, r4
 800970e:	f001 fa5b 	bl	800abc8 <xTaskCreateStatic>
 8009712:	4603      	mov	r3, r0
 8009714:	60fb      	str	r3, [r7, #12]
 8009716:	e01c      	b.n	8009752 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	685c      	ldr	r4, [r3, #4]
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009724:	b29e      	uxth	r6, r3
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800972c:	4618      	mov	r0, r3
 800972e:	f7ff ff88 	bl	8009642 <makeFreeRtosPriority>
 8009732:	4602      	mov	r2, r0
 8009734:	f107 030c 	add.w	r3, r7, #12
 8009738:	9301      	str	r3, [sp, #4]
 800973a:	9200      	str	r2, [sp, #0]
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	4632      	mov	r2, r6
 8009740:	4629      	mov	r1, r5
 8009742:	4620      	mov	r0, r4
 8009744:	f001 fa9d 	bl	800ac82 <xTaskCreate>
 8009748:	4603      	mov	r3, r0
 800974a:	2b01      	cmp	r3, #1
 800974c:	d001      	beq.n	8009752 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800974e:	2300      	movs	r3, #0
 8009750:	e000      	b.n	8009754 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009752:	68fb      	ldr	r3, [r7, #12]
}
 8009754:	4618      	mov	r0, r3
 8009756:	3714      	adds	r7, #20
 8009758:	46bd      	mov	sp, r7
 800975a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800975c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b084      	sub	sp, #16
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d001      	beq.n	8009772 <osDelay+0x16>
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	e000      	b.n	8009774 <osDelay+0x18>
 8009772:	2301      	movs	r3, #1
 8009774:	4618      	mov	r0, r3
 8009776:	f001 fbbb 	bl	800aef0 <vTaskDelay>
  
  return osOK;
 800977a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800977c:	4618      	mov	r0, r3
 800977e:	3710      	adds	r7, #16
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}

08009784 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b082      	sub	sp, #8
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	685b      	ldr	r3, [r3, #4]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d007      	beq.n	80097a4 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	685b      	ldr	r3, [r3, #4]
 8009798:	4619      	mov	r1, r3
 800979a:	2001      	movs	r0, #1
 800979c:	f000 fc3f 	bl	800a01e <xQueueCreateMutexStatic>
 80097a0:	4603      	mov	r3, r0
 80097a2:	e003      	b.n	80097ac <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80097a4:	2001      	movs	r0, #1
 80097a6:	f000 fc22 	bl	8009fee <xQueueCreateMutex>
 80097aa:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3708      	adds	r7, #8
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}

080097b4 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b084      	sub	sp, #16
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80097be:	2300      	movs	r3, #0
 80097c0:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d101      	bne.n	80097cc <osMutexWait+0x18>
    return osErrorParameter;
 80097c8:	2380      	movs	r3, #128	; 0x80
 80097ca:	e03a      	b.n	8009842 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80097cc:	2300      	movs	r3, #0
 80097ce:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097d6:	d103      	bne.n	80097e0 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80097d8:	f04f 33ff 	mov.w	r3, #4294967295
 80097dc:	60fb      	str	r3, [r7, #12]
 80097de:	e009      	b.n	80097f4 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d006      	beq.n	80097f4 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d101      	bne.n	80097f4 <osMutexWait+0x40>
      ticks = 1;
 80097f0:	2301      	movs	r3, #1
 80097f2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80097f4:	f7ff ff3d 	bl	8009672 <inHandlerMode>
 80097f8:	4603      	mov	r3, r0
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d017      	beq.n	800982e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80097fe:	f107 0308 	add.w	r3, r7, #8
 8009802:	461a      	mov	r2, r3
 8009804:	2100      	movs	r1, #0
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	f001 f836 	bl	800a878 <xQueueReceiveFromISR>
 800980c:	4603      	mov	r3, r0
 800980e:	2b01      	cmp	r3, #1
 8009810:	d001      	beq.n	8009816 <osMutexWait+0x62>
      return osErrorOS;
 8009812:	23ff      	movs	r3, #255	; 0xff
 8009814:	e015      	b.n	8009842 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d011      	beq.n	8009840 <osMutexWait+0x8c>
 800981c:	4b0b      	ldr	r3, [pc, #44]	; (800984c <osMutexWait+0x98>)
 800981e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009822:	601a      	str	r2, [r3, #0]
 8009824:	f3bf 8f4f 	dsb	sy
 8009828:	f3bf 8f6f 	isb	sy
 800982c:	e008      	b.n	8009840 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800982e:	68f9      	ldr	r1, [r7, #12]
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f000 ff15 	bl	800a660 <xQueueSemaphoreTake>
 8009836:	4603      	mov	r3, r0
 8009838:	2b01      	cmp	r3, #1
 800983a:	d001      	beq.n	8009840 <osMutexWait+0x8c>
    return osErrorOS;
 800983c:	23ff      	movs	r3, #255	; 0xff
 800983e:	e000      	b.n	8009842 <osMutexWait+0x8e>
  }
  
  return osOK;
 8009840:	2300      	movs	r3, #0
}
 8009842:	4618      	mov	r0, r3
 8009844:	3710      	adds	r7, #16
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}
 800984a:	bf00      	nop
 800984c:	e000ed04 	.word	0xe000ed04

08009850 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b084      	sub	sp, #16
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8009858:	2300      	movs	r3, #0
 800985a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800985c:	2300      	movs	r3, #0
 800985e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8009860:	f7ff ff07 	bl	8009672 <inHandlerMode>
 8009864:	4603      	mov	r3, r0
 8009866:	2b00      	cmp	r3, #0
 8009868:	d016      	beq.n	8009898 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800986a:	f107 0308 	add.w	r3, r7, #8
 800986e:	4619      	mov	r1, r3
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f000 fd88 	bl	800a386 <xQueueGiveFromISR>
 8009876:	4603      	mov	r3, r0
 8009878:	2b01      	cmp	r3, #1
 800987a:	d001      	beq.n	8009880 <osMutexRelease+0x30>
      return osErrorOS;
 800987c:	23ff      	movs	r3, #255	; 0xff
 800987e:	e017      	b.n	80098b0 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d013      	beq.n	80098ae <osMutexRelease+0x5e>
 8009886:	4b0c      	ldr	r3, [pc, #48]	; (80098b8 <osMutexRelease+0x68>)
 8009888:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800988c:	601a      	str	r2, [r3, #0]
 800988e:	f3bf 8f4f 	dsb	sy
 8009892:	f3bf 8f6f 	isb	sy
 8009896:	e00a      	b.n	80098ae <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8009898:	2300      	movs	r3, #0
 800989a:	2200      	movs	r2, #0
 800989c:	2100      	movs	r1, #0
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f000 fbd8 	bl	800a054 <xQueueGenericSend>
 80098a4:	4603      	mov	r3, r0
 80098a6:	2b01      	cmp	r3, #1
 80098a8:	d001      	beq.n	80098ae <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80098aa:	23ff      	movs	r3, #255	; 0xff
 80098ac:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80098ae:	68fb      	ldr	r3, [r7, #12]
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	3710      	adds	r7, #16
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}
 80098b8:	e000ed04 	.word	0xe000ed04

080098bc <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80098bc:	b580      	push	{r7, lr}
 80098be:	b086      	sub	sp, #24
 80098c0:	af02      	add	r7, sp, #8
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	685b      	ldr	r3, [r3, #4]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d00f      	beq.n	80098ee <osSemaphoreCreate+0x32>
    if (count == 1) {
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	2b01      	cmp	r3, #1
 80098d2:	d10a      	bne.n	80098ea <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	685b      	ldr	r3, [r3, #4]
 80098d8:	2203      	movs	r2, #3
 80098da:	9200      	str	r2, [sp, #0]
 80098dc:	2200      	movs	r2, #0
 80098de:	2100      	movs	r1, #0
 80098e0:	2001      	movs	r0, #1
 80098e2:	f000 fa99 	bl	8009e18 <xQueueGenericCreateStatic>
 80098e6:	4603      	mov	r3, r0
 80098e8:	e016      	b.n	8009918 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80098ea:	2300      	movs	r3, #0
 80098ec:	e014      	b.n	8009918 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	2b01      	cmp	r3, #1
 80098f2:	d110      	bne.n	8009916 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80098f4:	2203      	movs	r2, #3
 80098f6:	2100      	movs	r1, #0
 80098f8:	2001      	movs	r0, #1
 80098fa:	f000 fb05 	bl	8009f08 <xQueueGenericCreate>
 80098fe:	60f8      	str	r0, [r7, #12]
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d005      	beq.n	8009912 <osSemaphoreCreate+0x56>
 8009906:	2300      	movs	r3, #0
 8009908:	2200      	movs	r2, #0
 800990a:	2100      	movs	r1, #0
 800990c:	68f8      	ldr	r0, [r7, #12]
 800990e:	f000 fba1 	bl	800a054 <xQueueGenericSend>
      return sema;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	e000      	b.n	8009918 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8009916:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8009918:	4618      	mov	r0, r3
 800991a:	3710      	adds	r7, #16
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}

08009920 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b084      	sub	sp, #16
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
 8009928:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800992a:	2300      	movs	r3, #0
 800992c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d101      	bne.n	8009938 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8009934:	2380      	movs	r3, #128	; 0x80
 8009936:	e03a      	b.n	80099ae <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8009938:	2300      	movs	r3, #0
 800993a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009942:	d103      	bne.n	800994c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8009944:	f04f 33ff 	mov.w	r3, #4294967295
 8009948:	60fb      	str	r3, [r7, #12]
 800994a:	e009      	b.n	8009960 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d006      	beq.n	8009960 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d101      	bne.n	8009960 <osSemaphoreWait+0x40>
      ticks = 1;
 800995c:	2301      	movs	r3, #1
 800995e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8009960:	f7ff fe87 	bl	8009672 <inHandlerMode>
 8009964:	4603      	mov	r3, r0
 8009966:	2b00      	cmp	r3, #0
 8009968:	d017      	beq.n	800999a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800996a:	f107 0308 	add.w	r3, r7, #8
 800996e:	461a      	mov	r2, r3
 8009970:	2100      	movs	r1, #0
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f000 ff80 	bl	800a878 <xQueueReceiveFromISR>
 8009978:	4603      	mov	r3, r0
 800997a:	2b01      	cmp	r3, #1
 800997c:	d001      	beq.n	8009982 <osSemaphoreWait+0x62>
      return osErrorOS;
 800997e:	23ff      	movs	r3, #255	; 0xff
 8009980:	e015      	b.n	80099ae <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d011      	beq.n	80099ac <osSemaphoreWait+0x8c>
 8009988:	4b0b      	ldr	r3, [pc, #44]	; (80099b8 <osSemaphoreWait+0x98>)
 800998a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800998e:	601a      	str	r2, [r3, #0]
 8009990:	f3bf 8f4f 	dsb	sy
 8009994:	f3bf 8f6f 	isb	sy
 8009998:	e008      	b.n	80099ac <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800999a:	68f9      	ldr	r1, [r7, #12]
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f000 fe5f 	bl	800a660 <xQueueSemaphoreTake>
 80099a2:	4603      	mov	r3, r0
 80099a4:	2b01      	cmp	r3, #1
 80099a6:	d001      	beq.n	80099ac <osSemaphoreWait+0x8c>
    return osErrorOS;
 80099a8:	23ff      	movs	r3, #255	; 0xff
 80099aa:	e000      	b.n	80099ae <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80099ac:	2300      	movs	r3, #0
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3710      	adds	r7, #16
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}
 80099b6:	bf00      	nop
 80099b8:	e000ed04 	.word	0xe000ed04

080099bc <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b084      	sub	sp, #16
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80099c4:	2300      	movs	r3, #0
 80099c6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80099c8:	2300      	movs	r3, #0
 80099ca:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80099cc:	f7ff fe51 	bl	8009672 <inHandlerMode>
 80099d0:	4603      	mov	r3, r0
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d016      	beq.n	8009a04 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80099d6:	f107 0308 	add.w	r3, r7, #8
 80099da:	4619      	mov	r1, r3
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	f000 fcd2 	bl	800a386 <xQueueGiveFromISR>
 80099e2:	4603      	mov	r3, r0
 80099e4:	2b01      	cmp	r3, #1
 80099e6:	d001      	beq.n	80099ec <osSemaphoreRelease+0x30>
      return osErrorOS;
 80099e8:	23ff      	movs	r3, #255	; 0xff
 80099ea:	e017      	b.n	8009a1c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d013      	beq.n	8009a1a <osSemaphoreRelease+0x5e>
 80099f2:	4b0c      	ldr	r3, [pc, #48]	; (8009a24 <osSemaphoreRelease+0x68>)
 80099f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099f8:	601a      	str	r2, [r3, #0]
 80099fa:	f3bf 8f4f 	dsb	sy
 80099fe:	f3bf 8f6f 	isb	sy
 8009a02:	e00a      	b.n	8009a1a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8009a04:	2300      	movs	r3, #0
 8009a06:	2200      	movs	r2, #0
 8009a08:	2100      	movs	r1, #0
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f000 fb22 	bl	800a054 <xQueueGenericSend>
 8009a10:	4603      	mov	r3, r0
 8009a12:	2b01      	cmp	r3, #1
 8009a14:	d001      	beq.n	8009a1a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8009a16:	23ff      	movs	r3, #255	; 0xff
 8009a18:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3710      	adds	r7, #16
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}
 8009a24:	e000ed04 	.word	0xe000ed04

08009a28 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8009a28:	b590      	push	{r4, r7, lr}
 8009a2a:	b085      	sub	sp, #20
 8009a2c:	af02      	add	r7, sp, #8
 8009a2e:	6078      	str	r0, [r7, #4]
 8009a30:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	689b      	ldr	r3, [r3, #8]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d011      	beq.n	8009a5e <osMessageCreate+0x36>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	68db      	ldr	r3, [r3, #12]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d00d      	beq.n	8009a5e <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6818      	ldr	r0, [r3, #0]
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6859      	ldr	r1, [r3, #4]
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	689a      	ldr	r2, [r3, #8]
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	68db      	ldr	r3, [r3, #12]
 8009a52:	2400      	movs	r4, #0
 8009a54:	9400      	str	r4, [sp, #0]
 8009a56:	f000 f9df 	bl	8009e18 <xQueueGenericCreateStatic>
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	e008      	b.n	8009a70 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6818      	ldr	r0, [r3, #0]
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	685b      	ldr	r3, [r3, #4]
 8009a66:	2200      	movs	r2, #0
 8009a68:	4619      	mov	r1, r3
 8009a6a:	f000 fa4d 	bl	8009f08 <xQueueGenericCreate>
 8009a6e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	370c      	adds	r7, #12
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd90      	pop	{r4, r7, pc}

08009a78 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b086      	sub	sp, #24
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	60f8      	str	r0, [r7, #12]
 8009a80:	60b9      	str	r1, [r7, #8]
 8009a82:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8009a84:	2300      	movs	r3, #0
 8009a86:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8009a8c:	697b      	ldr	r3, [r7, #20]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d101      	bne.n	8009a96 <osMessagePut+0x1e>
    ticks = 1;
 8009a92:	2301      	movs	r3, #1
 8009a94:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8009a96:	f7ff fdec 	bl	8009672 <inHandlerMode>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d018      	beq.n	8009ad2 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8009aa0:	f107 0210 	add.w	r2, r7, #16
 8009aa4:	f107 0108 	add.w	r1, r7, #8
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	68f8      	ldr	r0, [r7, #12]
 8009aac:	f000 fbd0 	bl	800a250 <xQueueGenericSendFromISR>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	2b01      	cmp	r3, #1
 8009ab4:	d001      	beq.n	8009aba <osMessagePut+0x42>
      return osErrorOS;
 8009ab6:	23ff      	movs	r3, #255	; 0xff
 8009ab8:	e018      	b.n	8009aec <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009aba:	693b      	ldr	r3, [r7, #16]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d014      	beq.n	8009aea <osMessagePut+0x72>
 8009ac0:	4b0c      	ldr	r3, [pc, #48]	; (8009af4 <osMessagePut+0x7c>)
 8009ac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ac6:	601a      	str	r2, [r3, #0]
 8009ac8:	f3bf 8f4f 	dsb	sy
 8009acc:	f3bf 8f6f 	isb	sy
 8009ad0:	e00b      	b.n	8009aea <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8009ad2:	f107 0108 	add.w	r1, r7, #8
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	697a      	ldr	r2, [r7, #20]
 8009ada:	68f8      	ldr	r0, [r7, #12]
 8009adc:	f000 faba 	bl	800a054 <xQueueGenericSend>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	2b01      	cmp	r3, #1
 8009ae4:	d001      	beq.n	8009aea <osMessagePut+0x72>
      return osErrorOS;
 8009ae6:	23ff      	movs	r3, #255	; 0xff
 8009ae8:	e000      	b.n	8009aec <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8009aea:	2300      	movs	r3, #0
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	3718      	adds	r7, #24
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}
 8009af4:	e000ed04 	.word	0xe000ed04

08009af8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8009af8:	b590      	push	{r4, r7, lr}
 8009afa:	b08b      	sub	sp, #44	; 0x2c
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	60f8      	str	r0, [r7, #12]
 8009b00:	60b9      	str	r1, [r7, #8]
 8009b02:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d10a      	bne.n	8009b28 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8009b12:	2380      	movs	r3, #128	; 0x80
 8009b14:	617b      	str	r3, [r7, #20]
    return event;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	461c      	mov	r4, r3
 8009b1a:	f107 0314 	add.w	r3, r7, #20
 8009b1e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009b22:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009b26:	e054      	b.n	8009bd2 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b36:	d103      	bne.n	8009b40 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8009b38:	f04f 33ff 	mov.w	r3, #4294967295
 8009b3c:	627b      	str	r3, [r7, #36]	; 0x24
 8009b3e:	e009      	b.n	8009b54 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d006      	beq.n	8009b54 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8009b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d101      	bne.n	8009b54 <osMessageGet+0x5c>
      ticks = 1;
 8009b50:	2301      	movs	r3, #1
 8009b52:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8009b54:	f7ff fd8d 	bl	8009672 <inHandlerMode>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d01c      	beq.n	8009b98 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8009b5e:	f107 0220 	add.w	r2, r7, #32
 8009b62:	f107 0314 	add.w	r3, r7, #20
 8009b66:	3304      	adds	r3, #4
 8009b68:	4619      	mov	r1, r3
 8009b6a:	68b8      	ldr	r0, [r7, #8]
 8009b6c:	f000 fe84 	bl	800a878 <xQueueReceiveFromISR>
 8009b70:	4603      	mov	r3, r0
 8009b72:	2b01      	cmp	r3, #1
 8009b74:	d102      	bne.n	8009b7c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8009b76:	2310      	movs	r3, #16
 8009b78:	617b      	str	r3, [r7, #20]
 8009b7a:	e001      	b.n	8009b80 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009b80:	6a3b      	ldr	r3, [r7, #32]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d01d      	beq.n	8009bc2 <osMessageGet+0xca>
 8009b86:	4b15      	ldr	r3, [pc, #84]	; (8009bdc <osMessageGet+0xe4>)
 8009b88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b8c:	601a      	str	r2, [r3, #0]
 8009b8e:	f3bf 8f4f 	dsb	sy
 8009b92:	f3bf 8f6f 	isb	sy
 8009b96:	e014      	b.n	8009bc2 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8009b98:	f107 0314 	add.w	r3, r7, #20
 8009b9c:	3304      	adds	r3, #4
 8009b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ba0:	4619      	mov	r1, r3
 8009ba2:	68b8      	ldr	r0, [r7, #8]
 8009ba4:	f000 fc7c 	bl	800a4a0 <xQueueReceive>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	2b01      	cmp	r3, #1
 8009bac:	d102      	bne.n	8009bb4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8009bae:	2310      	movs	r3, #16
 8009bb0:	617b      	str	r3, [r7, #20]
 8009bb2:	e006      	b.n	8009bc2 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8009bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d101      	bne.n	8009bbe <osMessageGet+0xc6>
 8009bba:	2300      	movs	r3, #0
 8009bbc:	e000      	b.n	8009bc0 <osMessageGet+0xc8>
 8009bbe:	2340      	movs	r3, #64	; 0x40
 8009bc0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	461c      	mov	r4, r3
 8009bc6:	f107 0314 	add.w	r3, r7, #20
 8009bca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009bce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8009bd2:	68f8      	ldr	r0, [r7, #12]
 8009bd4:	372c      	adds	r7, #44	; 0x2c
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd90      	pop	{r4, r7, pc}
 8009bda:	bf00      	nop
 8009bdc:	e000ed04 	.word	0xe000ed04

08009be0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009be0:	b480      	push	{r7}
 8009be2:	b083      	sub	sp, #12
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f103 0208 	add.w	r2, r3, #8
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8009bf8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f103 0208 	add.w	r2, r3, #8
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f103 0208 	add.w	r2, r3, #8
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2200      	movs	r2, #0
 8009c12:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009c14:	bf00      	nop
 8009c16:	370c      	adds	r7, #12
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1e:	4770      	bx	lr

08009c20 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009c20:	b480      	push	{r7}
 8009c22:	b083      	sub	sp, #12
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009c2e:	bf00      	nop
 8009c30:	370c      	adds	r7, #12
 8009c32:	46bd      	mov	sp, r7
 8009c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c38:	4770      	bx	lr

08009c3a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009c3a:	b480      	push	{r7}
 8009c3c:	b085      	sub	sp, #20
 8009c3e:	af00      	add	r7, sp, #0
 8009c40:	6078      	str	r0, [r7, #4]
 8009c42:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	685b      	ldr	r3, [r3, #4]
 8009c48:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	68fa      	ldr	r2, [r7, #12]
 8009c4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	689a      	ldr	r2, [r3, #8]
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	689b      	ldr	r3, [r3, #8]
 8009c5c:	683a      	ldr	r2, [r7, #0]
 8009c5e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	683a      	ldr	r2, [r7, #0]
 8009c64:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	687a      	ldr	r2, [r7, #4]
 8009c6a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	1c5a      	adds	r2, r3, #1
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	601a      	str	r2, [r3, #0]
}
 8009c76:	bf00      	nop
 8009c78:	3714      	adds	r7, #20
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c80:	4770      	bx	lr

08009c82 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009c82:	b480      	push	{r7}
 8009c84:	b085      	sub	sp, #20
 8009c86:	af00      	add	r7, sp, #0
 8009c88:	6078      	str	r0, [r7, #4]
 8009c8a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c98:	d103      	bne.n	8009ca2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	691b      	ldr	r3, [r3, #16]
 8009c9e:	60fb      	str	r3, [r7, #12]
 8009ca0:	e00c      	b.n	8009cbc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	3308      	adds	r3, #8
 8009ca6:	60fb      	str	r3, [r7, #12]
 8009ca8:	e002      	b.n	8009cb0 <vListInsert+0x2e>
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	685b      	ldr	r3, [r3, #4]
 8009cae:	60fb      	str	r3, [r7, #12]
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	685b      	ldr	r3, [r3, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	68ba      	ldr	r2, [r7, #8]
 8009cb8:	429a      	cmp	r2, r3
 8009cba:	d2f6      	bcs.n	8009caa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	685a      	ldr	r2, [r3, #4]
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	685b      	ldr	r3, [r3, #4]
 8009cc8:	683a      	ldr	r2, [r7, #0]
 8009cca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	68fa      	ldr	r2, [r7, #12]
 8009cd0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	683a      	ldr	r2, [r7, #0]
 8009cd6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	687a      	ldr	r2, [r7, #4]
 8009cdc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	1c5a      	adds	r2, r3, #1
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	601a      	str	r2, [r3, #0]
}
 8009ce8:	bf00      	nop
 8009cea:	3714      	adds	r7, #20
 8009cec:	46bd      	mov	sp, r7
 8009cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf2:	4770      	bx	lr

08009cf4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b085      	sub	sp, #20
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	691b      	ldr	r3, [r3, #16]
 8009d00:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	685b      	ldr	r3, [r3, #4]
 8009d06:	687a      	ldr	r2, [r7, #4]
 8009d08:	6892      	ldr	r2, [r2, #8]
 8009d0a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	689b      	ldr	r3, [r3, #8]
 8009d10:	687a      	ldr	r2, [r7, #4]
 8009d12:	6852      	ldr	r2, [r2, #4]
 8009d14:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	685b      	ldr	r3, [r3, #4]
 8009d1a:	687a      	ldr	r2, [r7, #4]
 8009d1c:	429a      	cmp	r2, r3
 8009d1e:	d103      	bne.n	8009d28 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	689a      	ldr	r2, [r3, #8]
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	1e5a      	subs	r2, r3, #1
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	681b      	ldr	r3, [r3, #0]
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3714      	adds	r7, #20
 8009d40:	46bd      	mov	sp, r7
 8009d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d46:	4770      	bx	lr

08009d48 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b084      	sub	sp, #16
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
 8009d50:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d10a      	bne.n	8009d72 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d60:	f383 8811 	msr	BASEPRI, r3
 8009d64:	f3bf 8f6f 	isb	sy
 8009d68:	f3bf 8f4f 	dsb	sy
 8009d6c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009d6e:	bf00      	nop
 8009d70:	e7fe      	b.n	8009d70 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009d72:	f002 f85f 	bl	800be34 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681a      	ldr	r2, [r3, #0]
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d7e:	68f9      	ldr	r1, [r7, #12]
 8009d80:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009d82:	fb01 f303 	mul.w	r3, r1, r3
 8009d86:	441a      	add	r2, r3
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	681a      	ldr	r2, [r3, #0]
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	681a      	ldr	r2, [r3, #0]
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009da2:	3b01      	subs	r3, #1
 8009da4:	68f9      	ldr	r1, [r7, #12]
 8009da6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009da8:	fb01 f303 	mul.w	r3, r1, r3
 8009dac:	441a      	add	r2, r3
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	22ff      	movs	r2, #255	; 0xff
 8009db6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	22ff      	movs	r2, #255	; 0xff
 8009dbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d114      	bne.n	8009df2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	691b      	ldr	r3, [r3, #16]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d01a      	beq.n	8009e06 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	3310      	adds	r3, #16
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f001 fb23 	bl	800b420 <xTaskRemoveFromEventList>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d012      	beq.n	8009e06 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009de0:	4b0c      	ldr	r3, [pc, #48]	; (8009e14 <xQueueGenericReset+0xcc>)
 8009de2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009de6:	601a      	str	r2, [r3, #0]
 8009de8:	f3bf 8f4f 	dsb	sy
 8009dec:	f3bf 8f6f 	isb	sy
 8009df0:	e009      	b.n	8009e06 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	3310      	adds	r3, #16
 8009df6:	4618      	mov	r0, r3
 8009df8:	f7ff fef2 	bl	8009be0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	3324      	adds	r3, #36	; 0x24
 8009e00:	4618      	mov	r0, r3
 8009e02:	f7ff feed 	bl	8009be0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009e06:	f002 f845 	bl	800be94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009e0a:	2301      	movs	r3, #1
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	3710      	adds	r7, #16
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}
 8009e14:	e000ed04 	.word	0xe000ed04

08009e18 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b08e      	sub	sp, #56	; 0x38
 8009e1c:	af02      	add	r7, sp, #8
 8009e1e:	60f8      	str	r0, [r7, #12]
 8009e20:	60b9      	str	r1, [r7, #8]
 8009e22:	607a      	str	r2, [r7, #4]
 8009e24:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d10a      	bne.n	8009e42 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e30:	f383 8811 	msr	BASEPRI, r3
 8009e34:	f3bf 8f6f 	isb	sy
 8009e38:	f3bf 8f4f 	dsb	sy
 8009e3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009e3e:	bf00      	nop
 8009e40:	e7fe      	b.n	8009e40 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d10a      	bne.n	8009e5e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e4c:	f383 8811 	msr	BASEPRI, r3
 8009e50:	f3bf 8f6f 	isb	sy
 8009e54:	f3bf 8f4f 	dsb	sy
 8009e58:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009e5a:	bf00      	nop
 8009e5c:	e7fe      	b.n	8009e5c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d002      	beq.n	8009e6a <xQueueGenericCreateStatic+0x52>
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d001      	beq.n	8009e6e <xQueueGenericCreateStatic+0x56>
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	e000      	b.n	8009e70 <xQueueGenericCreateStatic+0x58>
 8009e6e:	2300      	movs	r3, #0
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d10a      	bne.n	8009e8a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e78:	f383 8811 	msr	BASEPRI, r3
 8009e7c:	f3bf 8f6f 	isb	sy
 8009e80:	f3bf 8f4f 	dsb	sy
 8009e84:	623b      	str	r3, [r7, #32]
}
 8009e86:	bf00      	nop
 8009e88:	e7fe      	b.n	8009e88 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d102      	bne.n	8009e96 <xQueueGenericCreateStatic+0x7e>
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d101      	bne.n	8009e9a <xQueueGenericCreateStatic+0x82>
 8009e96:	2301      	movs	r3, #1
 8009e98:	e000      	b.n	8009e9c <xQueueGenericCreateStatic+0x84>
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d10a      	bne.n	8009eb6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea4:	f383 8811 	msr	BASEPRI, r3
 8009ea8:	f3bf 8f6f 	isb	sy
 8009eac:	f3bf 8f4f 	dsb	sy
 8009eb0:	61fb      	str	r3, [r7, #28]
}
 8009eb2:	bf00      	nop
 8009eb4:	e7fe      	b.n	8009eb4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009eb6:	2348      	movs	r3, #72	; 0x48
 8009eb8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009eba:	697b      	ldr	r3, [r7, #20]
 8009ebc:	2b48      	cmp	r3, #72	; 0x48
 8009ebe:	d00a      	beq.n	8009ed6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec4:	f383 8811 	msr	BASEPRI, r3
 8009ec8:	f3bf 8f6f 	isb	sy
 8009ecc:	f3bf 8f4f 	dsb	sy
 8009ed0:	61bb      	str	r3, [r7, #24]
}
 8009ed2:	bf00      	nop
 8009ed4:	e7fe      	b.n	8009ed4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009ed6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d00d      	beq.n	8009efe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ee4:	2201      	movs	r2, #1
 8009ee6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009eea:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ef0:	9300      	str	r3, [sp, #0]
 8009ef2:	4613      	mov	r3, r2
 8009ef4:	687a      	ldr	r2, [r7, #4]
 8009ef6:	68b9      	ldr	r1, [r7, #8]
 8009ef8:	68f8      	ldr	r0, [r7, #12]
 8009efa:	f000 f83f 	bl	8009f7c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3730      	adds	r7, #48	; 0x30
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}

08009f08 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b08a      	sub	sp, #40	; 0x28
 8009f0c:	af02      	add	r7, sp, #8
 8009f0e:	60f8      	str	r0, [r7, #12]
 8009f10:	60b9      	str	r1, [r7, #8]
 8009f12:	4613      	mov	r3, r2
 8009f14:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d10a      	bne.n	8009f32 <xQueueGenericCreate+0x2a>
	__asm volatile
 8009f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f20:	f383 8811 	msr	BASEPRI, r3
 8009f24:	f3bf 8f6f 	isb	sy
 8009f28:	f3bf 8f4f 	dsb	sy
 8009f2c:	613b      	str	r3, [r7, #16]
}
 8009f2e:	bf00      	nop
 8009f30:	e7fe      	b.n	8009f30 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	68ba      	ldr	r2, [r7, #8]
 8009f36:	fb02 f303 	mul.w	r3, r2, r3
 8009f3a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009f3c:	69fb      	ldr	r3, [r7, #28]
 8009f3e:	3348      	adds	r3, #72	; 0x48
 8009f40:	4618      	mov	r0, r3
 8009f42:	f002 f899 	bl	800c078 <pvPortMalloc>
 8009f46:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009f48:	69bb      	ldr	r3, [r7, #24]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d011      	beq.n	8009f72 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009f4e:	69bb      	ldr	r3, [r7, #24]
 8009f50:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	3348      	adds	r3, #72	; 0x48
 8009f56:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009f58:	69bb      	ldr	r3, [r7, #24]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009f60:	79fa      	ldrb	r2, [r7, #7]
 8009f62:	69bb      	ldr	r3, [r7, #24]
 8009f64:	9300      	str	r3, [sp, #0]
 8009f66:	4613      	mov	r3, r2
 8009f68:	697a      	ldr	r2, [r7, #20]
 8009f6a:	68b9      	ldr	r1, [r7, #8]
 8009f6c:	68f8      	ldr	r0, [r7, #12]
 8009f6e:	f000 f805 	bl	8009f7c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009f72:	69bb      	ldr	r3, [r7, #24]
	}
 8009f74:	4618      	mov	r0, r3
 8009f76:	3720      	adds	r7, #32
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}

08009f7c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b084      	sub	sp, #16
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	60f8      	str	r0, [r7, #12]
 8009f84:	60b9      	str	r1, [r7, #8]
 8009f86:	607a      	str	r2, [r7, #4]
 8009f88:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009f8a:	68bb      	ldr	r3, [r7, #8]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d103      	bne.n	8009f98 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009f90:	69bb      	ldr	r3, [r7, #24]
 8009f92:	69ba      	ldr	r2, [r7, #24]
 8009f94:	601a      	str	r2, [r3, #0]
 8009f96:	e002      	b.n	8009f9e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009f98:	69bb      	ldr	r3, [r7, #24]
 8009f9a:	687a      	ldr	r2, [r7, #4]
 8009f9c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009f9e:	69bb      	ldr	r3, [r7, #24]
 8009fa0:	68fa      	ldr	r2, [r7, #12]
 8009fa2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009fa4:	69bb      	ldr	r3, [r7, #24]
 8009fa6:	68ba      	ldr	r2, [r7, #8]
 8009fa8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009faa:	2101      	movs	r1, #1
 8009fac:	69b8      	ldr	r0, [r7, #24]
 8009fae:	f7ff fecb 	bl	8009d48 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009fb2:	bf00      	nop
 8009fb4:	3710      	adds	r7, #16
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}

08009fba <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009fba:	b580      	push	{r7, lr}
 8009fbc:	b082      	sub	sp, #8
 8009fbe:	af00      	add	r7, sp, #0
 8009fc0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d00e      	beq.n	8009fe6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009fda:	2300      	movs	r3, #0
 8009fdc:	2200      	movs	r2, #0
 8009fde:	2100      	movs	r1, #0
 8009fe0:	6878      	ldr	r0, [r7, #4]
 8009fe2:	f000 f837 	bl	800a054 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009fe6:	bf00      	nop
 8009fe8:	3708      	adds	r7, #8
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}

08009fee <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8009fee:	b580      	push	{r7, lr}
 8009ff0:	b086      	sub	sp, #24
 8009ff2:	af00      	add	r7, sp, #0
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009ff8:	2301      	movs	r3, #1
 8009ffa:	617b      	str	r3, [r7, #20]
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a000:	79fb      	ldrb	r3, [r7, #7]
 800a002:	461a      	mov	r2, r3
 800a004:	6939      	ldr	r1, [r7, #16]
 800a006:	6978      	ldr	r0, [r7, #20]
 800a008:	f7ff ff7e 	bl	8009f08 <xQueueGenericCreate>
 800a00c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a00e:	68f8      	ldr	r0, [r7, #12]
 800a010:	f7ff ffd3 	bl	8009fba <prvInitialiseMutex>

		return xNewQueue;
 800a014:	68fb      	ldr	r3, [r7, #12]
	}
 800a016:	4618      	mov	r0, r3
 800a018:	3718      	adds	r7, #24
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}

0800a01e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a01e:	b580      	push	{r7, lr}
 800a020:	b088      	sub	sp, #32
 800a022:	af02      	add	r7, sp, #8
 800a024:	4603      	mov	r3, r0
 800a026:	6039      	str	r1, [r7, #0]
 800a028:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a02a:	2301      	movs	r3, #1
 800a02c:	617b      	str	r3, [r7, #20]
 800a02e:	2300      	movs	r3, #0
 800a030:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a032:	79fb      	ldrb	r3, [r7, #7]
 800a034:	9300      	str	r3, [sp, #0]
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	2200      	movs	r2, #0
 800a03a:	6939      	ldr	r1, [r7, #16]
 800a03c:	6978      	ldr	r0, [r7, #20]
 800a03e:	f7ff feeb 	bl	8009e18 <xQueueGenericCreateStatic>
 800a042:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a044:	68f8      	ldr	r0, [r7, #12]
 800a046:	f7ff ffb8 	bl	8009fba <prvInitialiseMutex>

		return xNewQueue;
 800a04a:	68fb      	ldr	r3, [r7, #12]
	}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3718      	adds	r7, #24
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}

0800a054 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b08e      	sub	sp, #56	; 0x38
 800a058:	af00      	add	r7, sp, #0
 800a05a:	60f8      	str	r0, [r7, #12]
 800a05c:	60b9      	str	r1, [r7, #8]
 800a05e:	607a      	str	r2, [r7, #4]
 800a060:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a062:	2300      	movs	r3, #0
 800a064:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d10a      	bne.n	800a086 <xQueueGenericSend+0x32>
	__asm volatile
 800a070:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a074:	f383 8811 	msr	BASEPRI, r3
 800a078:	f3bf 8f6f 	isb	sy
 800a07c:	f3bf 8f4f 	dsb	sy
 800a080:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a082:	bf00      	nop
 800a084:	e7fe      	b.n	800a084 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a086:	68bb      	ldr	r3, [r7, #8]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d103      	bne.n	800a094 <xQueueGenericSend+0x40>
 800a08c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a08e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a090:	2b00      	cmp	r3, #0
 800a092:	d101      	bne.n	800a098 <xQueueGenericSend+0x44>
 800a094:	2301      	movs	r3, #1
 800a096:	e000      	b.n	800a09a <xQueueGenericSend+0x46>
 800a098:	2300      	movs	r3, #0
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d10a      	bne.n	800a0b4 <xQueueGenericSend+0x60>
	__asm volatile
 800a09e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0a2:	f383 8811 	msr	BASEPRI, r3
 800a0a6:	f3bf 8f6f 	isb	sy
 800a0aa:	f3bf 8f4f 	dsb	sy
 800a0ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a0b0:	bf00      	nop
 800a0b2:	e7fe      	b.n	800a0b2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	2b02      	cmp	r3, #2
 800a0b8:	d103      	bne.n	800a0c2 <xQueueGenericSend+0x6e>
 800a0ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0be:	2b01      	cmp	r3, #1
 800a0c0:	d101      	bne.n	800a0c6 <xQueueGenericSend+0x72>
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	e000      	b.n	800a0c8 <xQueueGenericSend+0x74>
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d10a      	bne.n	800a0e2 <xQueueGenericSend+0x8e>
	__asm volatile
 800a0cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0d0:	f383 8811 	msr	BASEPRI, r3
 800a0d4:	f3bf 8f6f 	isb	sy
 800a0d8:	f3bf 8f4f 	dsb	sy
 800a0dc:	623b      	str	r3, [r7, #32]
}
 800a0de:	bf00      	nop
 800a0e0:	e7fe      	b.n	800a0e0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a0e2:	f001 fb59 	bl	800b798 <xTaskGetSchedulerState>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d102      	bne.n	800a0f2 <xQueueGenericSend+0x9e>
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d101      	bne.n	800a0f6 <xQueueGenericSend+0xa2>
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	e000      	b.n	800a0f8 <xQueueGenericSend+0xa4>
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d10a      	bne.n	800a112 <xQueueGenericSend+0xbe>
	__asm volatile
 800a0fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a100:	f383 8811 	msr	BASEPRI, r3
 800a104:	f3bf 8f6f 	isb	sy
 800a108:	f3bf 8f4f 	dsb	sy
 800a10c:	61fb      	str	r3, [r7, #28]
}
 800a10e:	bf00      	nop
 800a110:	e7fe      	b.n	800a110 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a112:	f001 fe8f 	bl	800be34 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a118:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a11a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a11c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a11e:	429a      	cmp	r2, r3
 800a120:	d302      	bcc.n	800a128 <xQueueGenericSend+0xd4>
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	2b02      	cmp	r3, #2
 800a126:	d129      	bne.n	800a17c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a128:	683a      	ldr	r2, [r7, #0]
 800a12a:	68b9      	ldr	r1, [r7, #8]
 800a12c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a12e:	f000 fc3b 	bl	800a9a8 <prvCopyDataToQueue>
 800a132:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d010      	beq.n	800a15e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a13c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a13e:	3324      	adds	r3, #36	; 0x24
 800a140:	4618      	mov	r0, r3
 800a142:	f001 f96d 	bl	800b420 <xTaskRemoveFromEventList>
 800a146:	4603      	mov	r3, r0
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d013      	beq.n	800a174 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a14c:	4b3f      	ldr	r3, [pc, #252]	; (800a24c <xQueueGenericSend+0x1f8>)
 800a14e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a152:	601a      	str	r2, [r3, #0]
 800a154:	f3bf 8f4f 	dsb	sy
 800a158:	f3bf 8f6f 	isb	sy
 800a15c:	e00a      	b.n	800a174 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a15e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a160:	2b00      	cmp	r3, #0
 800a162:	d007      	beq.n	800a174 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a164:	4b39      	ldr	r3, [pc, #228]	; (800a24c <xQueueGenericSend+0x1f8>)
 800a166:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a16a:	601a      	str	r2, [r3, #0]
 800a16c:	f3bf 8f4f 	dsb	sy
 800a170:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a174:	f001 fe8e 	bl	800be94 <vPortExitCritical>
				return pdPASS;
 800a178:	2301      	movs	r3, #1
 800a17a:	e063      	b.n	800a244 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d103      	bne.n	800a18a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a182:	f001 fe87 	bl	800be94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a186:	2300      	movs	r3, #0
 800a188:	e05c      	b.n	800a244 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a18a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d106      	bne.n	800a19e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a190:	f107 0314 	add.w	r3, r7, #20
 800a194:	4618      	mov	r0, r3
 800a196:	f001 f9a5 	bl	800b4e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a19a:	2301      	movs	r3, #1
 800a19c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a19e:	f001 fe79 	bl	800be94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a1a2:	f000 ff39 	bl	800b018 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a1a6:	f001 fe45 	bl	800be34 <vPortEnterCritical>
 800a1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a1b0:	b25b      	sxtb	r3, r3
 800a1b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1b6:	d103      	bne.n	800a1c0 <xQueueGenericSend+0x16c>
 800a1b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a1c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a1c6:	b25b      	sxtb	r3, r3
 800a1c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1cc:	d103      	bne.n	800a1d6 <xQueueGenericSend+0x182>
 800a1ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a1d6:	f001 fe5d 	bl	800be94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a1da:	1d3a      	adds	r2, r7, #4
 800a1dc:	f107 0314 	add.w	r3, r7, #20
 800a1e0:	4611      	mov	r1, r2
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f001 f994 	bl	800b510 <xTaskCheckForTimeOut>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d124      	bne.n	800a238 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a1ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a1f0:	f000 fcd2 	bl	800ab98 <prvIsQueueFull>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d018      	beq.n	800a22c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a1fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1fc:	3310      	adds	r3, #16
 800a1fe:	687a      	ldr	r2, [r7, #4]
 800a200:	4611      	mov	r1, r2
 800a202:	4618      	mov	r0, r3
 800a204:	f001 f8e8 	bl	800b3d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a208:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a20a:	f000 fc5d 	bl	800aac8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a20e:	f000 ff11 	bl	800b034 <xTaskResumeAll>
 800a212:	4603      	mov	r3, r0
 800a214:	2b00      	cmp	r3, #0
 800a216:	f47f af7c 	bne.w	800a112 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a21a:	4b0c      	ldr	r3, [pc, #48]	; (800a24c <xQueueGenericSend+0x1f8>)
 800a21c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a220:	601a      	str	r2, [r3, #0]
 800a222:	f3bf 8f4f 	dsb	sy
 800a226:	f3bf 8f6f 	isb	sy
 800a22a:	e772      	b.n	800a112 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a22c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a22e:	f000 fc4b 	bl	800aac8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a232:	f000 feff 	bl	800b034 <xTaskResumeAll>
 800a236:	e76c      	b.n	800a112 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a238:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a23a:	f000 fc45 	bl	800aac8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a23e:	f000 fef9 	bl	800b034 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a242:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a244:	4618      	mov	r0, r3
 800a246:	3738      	adds	r7, #56	; 0x38
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}
 800a24c:	e000ed04 	.word	0xe000ed04

0800a250 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b090      	sub	sp, #64	; 0x40
 800a254:	af00      	add	r7, sp, #0
 800a256:	60f8      	str	r0, [r7, #12]
 800a258:	60b9      	str	r1, [r7, #8]
 800a25a:	607a      	str	r2, [r7, #4]
 800a25c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a264:	2b00      	cmp	r3, #0
 800a266:	d10a      	bne.n	800a27e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a26c:	f383 8811 	msr	BASEPRI, r3
 800a270:	f3bf 8f6f 	isb	sy
 800a274:	f3bf 8f4f 	dsb	sy
 800a278:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a27a:	bf00      	nop
 800a27c:	e7fe      	b.n	800a27c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d103      	bne.n	800a28c <xQueueGenericSendFromISR+0x3c>
 800a284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d101      	bne.n	800a290 <xQueueGenericSendFromISR+0x40>
 800a28c:	2301      	movs	r3, #1
 800a28e:	e000      	b.n	800a292 <xQueueGenericSendFromISR+0x42>
 800a290:	2300      	movs	r3, #0
 800a292:	2b00      	cmp	r3, #0
 800a294:	d10a      	bne.n	800a2ac <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a29a:	f383 8811 	msr	BASEPRI, r3
 800a29e:	f3bf 8f6f 	isb	sy
 800a2a2:	f3bf 8f4f 	dsb	sy
 800a2a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a2a8:	bf00      	nop
 800a2aa:	e7fe      	b.n	800a2aa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	2b02      	cmp	r3, #2
 800a2b0:	d103      	bne.n	800a2ba <xQueueGenericSendFromISR+0x6a>
 800a2b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2b6:	2b01      	cmp	r3, #1
 800a2b8:	d101      	bne.n	800a2be <xQueueGenericSendFromISR+0x6e>
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	e000      	b.n	800a2c0 <xQueueGenericSendFromISR+0x70>
 800a2be:	2300      	movs	r3, #0
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d10a      	bne.n	800a2da <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a2c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2c8:	f383 8811 	msr	BASEPRI, r3
 800a2cc:	f3bf 8f6f 	isb	sy
 800a2d0:	f3bf 8f4f 	dsb	sy
 800a2d4:	623b      	str	r3, [r7, #32]
}
 800a2d6:	bf00      	nop
 800a2d8:	e7fe      	b.n	800a2d8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a2da:	f001 fe8d 	bl	800bff8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a2de:	f3ef 8211 	mrs	r2, BASEPRI
 800a2e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2e6:	f383 8811 	msr	BASEPRI, r3
 800a2ea:	f3bf 8f6f 	isb	sy
 800a2ee:	f3bf 8f4f 	dsb	sy
 800a2f2:	61fa      	str	r2, [r7, #28]
 800a2f4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a2f6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a2f8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a2fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a302:	429a      	cmp	r2, r3
 800a304:	d302      	bcc.n	800a30c <xQueueGenericSendFromISR+0xbc>
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	2b02      	cmp	r3, #2
 800a30a:	d12f      	bne.n	800a36c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a30c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a30e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a312:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a31a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a31c:	683a      	ldr	r2, [r7, #0]
 800a31e:	68b9      	ldr	r1, [r7, #8]
 800a320:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a322:	f000 fb41 	bl	800a9a8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a326:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a32a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a32e:	d112      	bne.n	800a356 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a334:	2b00      	cmp	r3, #0
 800a336:	d016      	beq.n	800a366 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a33a:	3324      	adds	r3, #36	; 0x24
 800a33c:	4618      	mov	r0, r3
 800a33e:	f001 f86f 	bl	800b420 <xTaskRemoveFromEventList>
 800a342:	4603      	mov	r3, r0
 800a344:	2b00      	cmp	r3, #0
 800a346:	d00e      	beq.n	800a366 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d00b      	beq.n	800a366 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2201      	movs	r2, #1
 800a352:	601a      	str	r2, [r3, #0]
 800a354:	e007      	b.n	800a366 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a356:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a35a:	3301      	adds	r3, #1
 800a35c:	b2db      	uxtb	r3, r3
 800a35e:	b25a      	sxtb	r2, r3
 800a360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a362:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a366:	2301      	movs	r3, #1
 800a368:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a36a:	e001      	b.n	800a370 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a36c:	2300      	movs	r3, #0
 800a36e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a372:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a374:	697b      	ldr	r3, [r7, #20]
 800a376:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a37a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a37c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a37e:	4618      	mov	r0, r3
 800a380:	3740      	adds	r7, #64	; 0x40
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}

0800a386 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a386:	b580      	push	{r7, lr}
 800a388:	b08e      	sub	sp, #56	; 0x38
 800a38a:	af00      	add	r7, sp, #0
 800a38c:	6078      	str	r0, [r7, #4]
 800a38e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a396:	2b00      	cmp	r3, #0
 800a398:	d10a      	bne.n	800a3b0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800a39a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a39e:	f383 8811 	msr	BASEPRI, r3
 800a3a2:	f3bf 8f6f 	isb	sy
 800a3a6:	f3bf 8f4f 	dsb	sy
 800a3aa:	623b      	str	r3, [r7, #32]
}
 800a3ac:	bf00      	nop
 800a3ae:	e7fe      	b.n	800a3ae <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a3b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d00a      	beq.n	800a3ce <xQueueGiveFromISR+0x48>
	__asm volatile
 800a3b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3bc:	f383 8811 	msr	BASEPRI, r3
 800a3c0:	f3bf 8f6f 	isb	sy
 800a3c4:	f3bf 8f4f 	dsb	sy
 800a3c8:	61fb      	str	r3, [r7, #28]
}
 800a3ca:	bf00      	nop
 800a3cc:	e7fe      	b.n	800a3cc <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a3ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d103      	bne.n	800a3de <xQueueGiveFromISR+0x58>
 800a3d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3d8:	689b      	ldr	r3, [r3, #8]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d101      	bne.n	800a3e2 <xQueueGiveFromISR+0x5c>
 800a3de:	2301      	movs	r3, #1
 800a3e0:	e000      	b.n	800a3e4 <xQueueGiveFromISR+0x5e>
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d10a      	bne.n	800a3fe <xQueueGiveFromISR+0x78>
	__asm volatile
 800a3e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ec:	f383 8811 	msr	BASEPRI, r3
 800a3f0:	f3bf 8f6f 	isb	sy
 800a3f4:	f3bf 8f4f 	dsb	sy
 800a3f8:	61bb      	str	r3, [r7, #24]
}
 800a3fa:	bf00      	nop
 800a3fc:	e7fe      	b.n	800a3fc <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a3fe:	f001 fdfb 	bl	800bff8 <vPortValidateInterruptPriority>
	__asm volatile
 800a402:	f3ef 8211 	mrs	r2, BASEPRI
 800a406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a40a:	f383 8811 	msr	BASEPRI, r3
 800a40e:	f3bf 8f6f 	isb	sy
 800a412:	f3bf 8f4f 	dsb	sy
 800a416:	617a      	str	r2, [r7, #20]
 800a418:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a41a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a41c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a422:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a428:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a42a:	429a      	cmp	r2, r3
 800a42c:	d22b      	bcs.n	800a486 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a430:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a434:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a43a:	1c5a      	adds	r2, r3, #1
 800a43c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a43e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a440:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a444:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a448:	d112      	bne.n	800a470 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a44c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d016      	beq.n	800a480 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a454:	3324      	adds	r3, #36	; 0x24
 800a456:	4618      	mov	r0, r3
 800a458:	f000 ffe2 	bl	800b420 <xTaskRemoveFromEventList>
 800a45c:	4603      	mov	r3, r0
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d00e      	beq.n	800a480 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d00b      	beq.n	800a480 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	2201      	movs	r2, #1
 800a46c:	601a      	str	r2, [r3, #0]
 800a46e:	e007      	b.n	800a480 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a470:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a474:	3301      	adds	r3, #1
 800a476:	b2db      	uxtb	r3, r3
 800a478:	b25a      	sxtb	r2, r3
 800a47a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a47c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a480:	2301      	movs	r3, #1
 800a482:	637b      	str	r3, [r7, #52]	; 0x34
 800a484:	e001      	b.n	800a48a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a486:	2300      	movs	r3, #0
 800a488:	637b      	str	r3, [r7, #52]	; 0x34
 800a48a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a48c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	f383 8811 	msr	BASEPRI, r3
}
 800a494:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a498:	4618      	mov	r0, r3
 800a49a:	3738      	adds	r7, #56	; 0x38
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd80      	pop	{r7, pc}

0800a4a0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b08c      	sub	sp, #48	; 0x30
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	60f8      	str	r0, [r7, #12]
 800a4a8:	60b9      	str	r1, [r7, #8]
 800a4aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d10a      	bne.n	800a4d0 <xQueueReceive+0x30>
	__asm volatile
 800a4ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4be:	f383 8811 	msr	BASEPRI, r3
 800a4c2:	f3bf 8f6f 	isb	sy
 800a4c6:	f3bf 8f4f 	dsb	sy
 800a4ca:	623b      	str	r3, [r7, #32]
}
 800a4cc:	bf00      	nop
 800a4ce:	e7fe      	b.n	800a4ce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d103      	bne.n	800a4de <xQueueReceive+0x3e>
 800a4d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d101      	bne.n	800a4e2 <xQueueReceive+0x42>
 800a4de:	2301      	movs	r3, #1
 800a4e0:	e000      	b.n	800a4e4 <xQueueReceive+0x44>
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d10a      	bne.n	800a4fe <xQueueReceive+0x5e>
	__asm volatile
 800a4e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ec:	f383 8811 	msr	BASEPRI, r3
 800a4f0:	f3bf 8f6f 	isb	sy
 800a4f4:	f3bf 8f4f 	dsb	sy
 800a4f8:	61fb      	str	r3, [r7, #28]
}
 800a4fa:	bf00      	nop
 800a4fc:	e7fe      	b.n	800a4fc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a4fe:	f001 f94b 	bl	800b798 <xTaskGetSchedulerState>
 800a502:	4603      	mov	r3, r0
 800a504:	2b00      	cmp	r3, #0
 800a506:	d102      	bne.n	800a50e <xQueueReceive+0x6e>
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d101      	bne.n	800a512 <xQueueReceive+0x72>
 800a50e:	2301      	movs	r3, #1
 800a510:	e000      	b.n	800a514 <xQueueReceive+0x74>
 800a512:	2300      	movs	r3, #0
 800a514:	2b00      	cmp	r3, #0
 800a516:	d10a      	bne.n	800a52e <xQueueReceive+0x8e>
	__asm volatile
 800a518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a51c:	f383 8811 	msr	BASEPRI, r3
 800a520:	f3bf 8f6f 	isb	sy
 800a524:	f3bf 8f4f 	dsb	sy
 800a528:	61bb      	str	r3, [r7, #24]
}
 800a52a:	bf00      	nop
 800a52c:	e7fe      	b.n	800a52c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a52e:	f001 fc81 	bl	800be34 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a536:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d01f      	beq.n	800a57e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a53e:	68b9      	ldr	r1, [r7, #8]
 800a540:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a542:	f000 fa9b 	bl	800aa7c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a548:	1e5a      	subs	r2, r3, #1
 800a54a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a54c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a54e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a550:	691b      	ldr	r3, [r3, #16]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d00f      	beq.n	800a576 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a558:	3310      	adds	r3, #16
 800a55a:	4618      	mov	r0, r3
 800a55c:	f000 ff60 	bl	800b420 <xTaskRemoveFromEventList>
 800a560:	4603      	mov	r3, r0
 800a562:	2b00      	cmp	r3, #0
 800a564:	d007      	beq.n	800a576 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a566:	4b3d      	ldr	r3, [pc, #244]	; (800a65c <xQueueReceive+0x1bc>)
 800a568:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a56c:	601a      	str	r2, [r3, #0]
 800a56e:	f3bf 8f4f 	dsb	sy
 800a572:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a576:	f001 fc8d 	bl	800be94 <vPortExitCritical>
				return pdPASS;
 800a57a:	2301      	movs	r3, #1
 800a57c:	e069      	b.n	800a652 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d103      	bne.n	800a58c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a584:	f001 fc86 	bl	800be94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a588:	2300      	movs	r3, #0
 800a58a:	e062      	b.n	800a652 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a58c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d106      	bne.n	800a5a0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a592:	f107 0310 	add.w	r3, r7, #16
 800a596:	4618      	mov	r0, r3
 800a598:	f000 ffa4 	bl	800b4e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a59c:	2301      	movs	r3, #1
 800a59e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a5a0:	f001 fc78 	bl	800be94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a5a4:	f000 fd38 	bl	800b018 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a5a8:	f001 fc44 	bl	800be34 <vPortEnterCritical>
 800a5ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a5b2:	b25b      	sxtb	r3, r3
 800a5b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5b8:	d103      	bne.n	800a5c2 <xQueueReceive+0x122>
 800a5ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5bc:	2200      	movs	r2, #0
 800a5be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a5c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a5c8:	b25b      	sxtb	r3, r3
 800a5ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5ce:	d103      	bne.n	800a5d8 <xQueueReceive+0x138>
 800a5d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a5d8:	f001 fc5c 	bl	800be94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a5dc:	1d3a      	adds	r2, r7, #4
 800a5de:	f107 0310 	add.w	r3, r7, #16
 800a5e2:	4611      	mov	r1, r2
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	f000 ff93 	bl	800b510 <xTaskCheckForTimeOut>
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d123      	bne.n	800a638 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a5f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5f2:	f000 fabb 	bl	800ab6c <prvIsQueueEmpty>
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d017      	beq.n	800a62c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a5fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5fe:	3324      	adds	r3, #36	; 0x24
 800a600:	687a      	ldr	r2, [r7, #4]
 800a602:	4611      	mov	r1, r2
 800a604:	4618      	mov	r0, r3
 800a606:	f000 fee7 	bl	800b3d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a60a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a60c:	f000 fa5c 	bl	800aac8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a610:	f000 fd10 	bl	800b034 <xTaskResumeAll>
 800a614:	4603      	mov	r3, r0
 800a616:	2b00      	cmp	r3, #0
 800a618:	d189      	bne.n	800a52e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a61a:	4b10      	ldr	r3, [pc, #64]	; (800a65c <xQueueReceive+0x1bc>)
 800a61c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a620:	601a      	str	r2, [r3, #0]
 800a622:	f3bf 8f4f 	dsb	sy
 800a626:	f3bf 8f6f 	isb	sy
 800a62a:	e780      	b.n	800a52e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a62c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a62e:	f000 fa4b 	bl	800aac8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a632:	f000 fcff 	bl	800b034 <xTaskResumeAll>
 800a636:	e77a      	b.n	800a52e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a638:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a63a:	f000 fa45 	bl	800aac8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a63e:	f000 fcf9 	bl	800b034 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a642:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a644:	f000 fa92 	bl	800ab6c <prvIsQueueEmpty>
 800a648:	4603      	mov	r3, r0
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	f43f af6f 	beq.w	800a52e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a650:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a652:	4618      	mov	r0, r3
 800a654:	3730      	adds	r7, #48	; 0x30
 800a656:	46bd      	mov	sp, r7
 800a658:	bd80      	pop	{r7, pc}
 800a65a:	bf00      	nop
 800a65c:	e000ed04 	.word	0xe000ed04

0800a660 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b08e      	sub	sp, #56	; 0x38
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
 800a668:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a66a:	2300      	movs	r3, #0
 800a66c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a672:	2300      	movs	r3, #0
 800a674:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d10a      	bne.n	800a692 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a67c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a680:	f383 8811 	msr	BASEPRI, r3
 800a684:	f3bf 8f6f 	isb	sy
 800a688:	f3bf 8f4f 	dsb	sy
 800a68c:	623b      	str	r3, [r7, #32]
}
 800a68e:	bf00      	nop
 800a690:	e7fe      	b.n	800a690 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a696:	2b00      	cmp	r3, #0
 800a698:	d00a      	beq.n	800a6b0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a69a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a69e:	f383 8811 	msr	BASEPRI, r3
 800a6a2:	f3bf 8f6f 	isb	sy
 800a6a6:	f3bf 8f4f 	dsb	sy
 800a6aa:	61fb      	str	r3, [r7, #28]
}
 800a6ac:	bf00      	nop
 800a6ae:	e7fe      	b.n	800a6ae <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a6b0:	f001 f872 	bl	800b798 <xTaskGetSchedulerState>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d102      	bne.n	800a6c0 <xQueueSemaphoreTake+0x60>
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d101      	bne.n	800a6c4 <xQueueSemaphoreTake+0x64>
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	e000      	b.n	800a6c6 <xQueueSemaphoreTake+0x66>
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d10a      	bne.n	800a6e0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a6ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ce:	f383 8811 	msr	BASEPRI, r3
 800a6d2:	f3bf 8f6f 	isb	sy
 800a6d6:	f3bf 8f4f 	dsb	sy
 800a6da:	61bb      	str	r3, [r7, #24]
}
 800a6dc:	bf00      	nop
 800a6de:	e7fe      	b.n	800a6de <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a6e0:	f001 fba8 	bl	800be34 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a6e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6e8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a6ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d024      	beq.n	800a73a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a6f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6f2:	1e5a      	subs	r2, r3, #1
 800a6f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6f6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a6f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d104      	bne.n	800a70a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a700:	f001 f9f2 	bl	800bae8 <pvTaskIncrementMutexHeldCount>
 800a704:	4602      	mov	r2, r0
 800a706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a708:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a70a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a70c:	691b      	ldr	r3, [r3, #16]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d00f      	beq.n	800a732 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a714:	3310      	adds	r3, #16
 800a716:	4618      	mov	r0, r3
 800a718:	f000 fe82 	bl	800b420 <xTaskRemoveFromEventList>
 800a71c:	4603      	mov	r3, r0
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d007      	beq.n	800a732 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a722:	4b54      	ldr	r3, [pc, #336]	; (800a874 <xQueueSemaphoreTake+0x214>)
 800a724:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a728:	601a      	str	r2, [r3, #0]
 800a72a:	f3bf 8f4f 	dsb	sy
 800a72e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a732:	f001 fbaf 	bl	800be94 <vPortExitCritical>
				return pdPASS;
 800a736:	2301      	movs	r3, #1
 800a738:	e097      	b.n	800a86a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d111      	bne.n	800a764 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a742:	2b00      	cmp	r3, #0
 800a744:	d00a      	beq.n	800a75c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a74a:	f383 8811 	msr	BASEPRI, r3
 800a74e:	f3bf 8f6f 	isb	sy
 800a752:	f3bf 8f4f 	dsb	sy
 800a756:	617b      	str	r3, [r7, #20]
}
 800a758:	bf00      	nop
 800a75a:	e7fe      	b.n	800a75a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a75c:	f001 fb9a 	bl	800be94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a760:	2300      	movs	r3, #0
 800a762:	e082      	b.n	800a86a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a766:	2b00      	cmp	r3, #0
 800a768:	d106      	bne.n	800a778 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a76a:	f107 030c 	add.w	r3, r7, #12
 800a76e:	4618      	mov	r0, r3
 800a770:	f000 feb8 	bl	800b4e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a774:	2301      	movs	r3, #1
 800a776:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a778:	f001 fb8c 	bl	800be94 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a77c:	f000 fc4c 	bl	800b018 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a780:	f001 fb58 	bl	800be34 <vPortEnterCritical>
 800a784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a786:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a78a:	b25b      	sxtb	r3, r3
 800a78c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a790:	d103      	bne.n	800a79a <xQueueSemaphoreTake+0x13a>
 800a792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a794:	2200      	movs	r2, #0
 800a796:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a79a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a79c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a7a0:	b25b      	sxtb	r3, r3
 800a7a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7a6:	d103      	bne.n	800a7b0 <xQueueSemaphoreTake+0x150>
 800a7a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a7b0:	f001 fb70 	bl	800be94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a7b4:	463a      	mov	r2, r7
 800a7b6:	f107 030c 	add.w	r3, r7, #12
 800a7ba:	4611      	mov	r1, r2
 800a7bc:	4618      	mov	r0, r3
 800a7be:	f000 fea7 	bl	800b510 <xTaskCheckForTimeOut>
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d132      	bne.n	800a82e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a7c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a7ca:	f000 f9cf 	bl	800ab6c <prvIsQueueEmpty>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d026      	beq.n	800a822 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a7d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d109      	bne.n	800a7f0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a7dc:	f001 fb2a 	bl	800be34 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a7e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7e2:	689b      	ldr	r3, [r3, #8]
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	f000 fff5 	bl	800b7d4 <xTaskPriorityInherit>
 800a7ea:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a7ec:	f001 fb52 	bl	800be94 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a7f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7f2:	3324      	adds	r3, #36	; 0x24
 800a7f4:	683a      	ldr	r2, [r7, #0]
 800a7f6:	4611      	mov	r1, r2
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f000 fded 	bl	800b3d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a7fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a800:	f000 f962 	bl	800aac8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a804:	f000 fc16 	bl	800b034 <xTaskResumeAll>
 800a808:	4603      	mov	r3, r0
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	f47f af68 	bne.w	800a6e0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a810:	4b18      	ldr	r3, [pc, #96]	; (800a874 <xQueueSemaphoreTake+0x214>)
 800a812:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a816:	601a      	str	r2, [r3, #0]
 800a818:	f3bf 8f4f 	dsb	sy
 800a81c:	f3bf 8f6f 	isb	sy
 800a820:	e75e      	b.n	800a6e0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a822:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a824:	f000 f950 	bl	800aac8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a828:	f000 fc04 	bl	800b034 <xTaskResumeAll>
 800a82c:	e758      	b.n	800a6e0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a82e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a830:	f000 f94a 	bl	800aac8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a834:	f000 fbfe 	bl	800b034 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a838:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a83a:	f000 f997 	bl	800ab6c <prvIsQueueEmpty>
 800a83e:	4603      	mov	r3, r0
 800a840:	2b00      	cmp	r3, #0
 800a842:	f43f af4d 	beq.w	800a6e0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d00d      	beq.n	800a868 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a84c:	f001 faf2 	bl	800be34 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a850:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a852:	f000 f891 	bl	800a978 <prvGetDisinheritPriorityAfterTimeout>
 800a856:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a85a:	689b      	ldr	r3, [r3, #8]
 800a85c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a85e:	4618      	mov	r0, r3
 800a860:	f001 f8b4 	bl	800b9cc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a864:	f001 fb16 	bl	800be94 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a868:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	3738      	adds	r7, #56	; 0x38
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}
 800a872:	bf00      	nop
 800a874:	e000ed04 	.word	0xe000ed04

0800a878 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b08e      	sub	sp, #56	; 0x38
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	60f8      	str	r0, [r7, #12]
 800a880:	60b9      	str	r1, [r7, #8]
 800a882:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d10a      	bne.n	800a8a4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a88e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a892:	f383 8811 	msr	BASEPRI, r3
 800a896:	f3bf 8f6f 	isb	sy
 800a89a:	f3bf 8f4f 	dsb	sy
 800a89e:	623b      	str	r3, [r7, #32]
}
 800a8a0:	bf00      	nop
 800a8a2:	e7fe      	b.n	800a8a2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d103      	bne.n	800a8b2 <xQueueReceiveFromISR+0x3a>
 800a8aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d101      	bne.n	800a8b6 <xQueueReceiveFromISR+0x3e>
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	e000      	b.n	800a8b8 <xQueueReceiveFromISR+0x40>
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d10a      	bne.n	800a8d2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a8bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c0:	f383 8811 	msr	BASEPRI, r3
 800a8c4:	f3bf 8f6f 	isb	sy
 800a8c8:	f3bf 8f4f 	dsb	sy
 800a8cc:	61fb      	str	r3, [r7, #28]
}
 800a8ce:	bf00      	nop
 800a8d0:	e7fe      	b.n	800a8d0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a8d2:	f001 fb91 	bl	800bff8 <vPortValidateInterruptPriority>
	__asm volatile
 800a8d6:	f3ef 8211 	mrs	r2, BASEPRI
 800a8da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8de:	f383 8811 	msr	BASEPRI, r3
 800a8e2:	f3bf 8f6f 	isb	sy
 800a8e6:	f3bf 8f4f 	dsb	sy
 800a8ea:	61ba      	str	r2, [r7, #24]
 800a8ec:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a8ee:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a8f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a8f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8f6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a8f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d02f      	beq.n	800a95e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a8fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a900:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a904:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a908:	68b9      	ldr	r1, [r7, #8]
 800a90a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a90c:	f000 f8b6 	bl	800aa7c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a912:	1e5a      	subs	r2, r3, #1
 800a914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a916:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a918:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a91c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a920:	d112      	bne.n	800a948 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a924:	691b      	ldr	r3, [r3, #16]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d016      	beq.n	800a958 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a92a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a92c:	3310      	adds	r3, #16
 800a92e:	4618      	mov	r0, r3
 800a930:	f000 fd76 	bl	800b420 <xTaskRemoveFromEventList>
 800a934:	4603      	mov	r3, r0
 800a936:	2b00      	cmp	r3, #0
 800a938:	d00e      	beq.n	800a958 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d00b      	beq.n	800a958 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2201      	movs	r2, #1
 800a944:	601a      	str	r2, [r3, #0]
 800a946:	e007      	b.n	800a958 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a948:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a94c:	3301      	adds	r3, #1
 800a94e:	b2db      	uxtb	r3, r3
 800a950:	b25a      	sxtb	r2, r3
 800a952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a954:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a958:	2301      	movs	r3, #1
 800a95a:	637b      	str	r3, [r7, #52]	; 0x34
 800a95c:	e001      	b.n	800a962 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a95e:	2300      	movs	r3, #0
 800a960:	637b      	str	r3, [r7, #52]	; 0x34
 800a962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a964:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a966:	693b      	ldr	r3, [r7, #16]
 800a968:	f383 8811 	msr	BASEPRI, r3
}
 800a96c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a96e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a970:	4618      	mov	r0, r3
 800a972:	3738      	adds	r7, #56	; 0x38
 800a974:	46bd      	mov	sp, r7
 800a976:	bd80      	pop	{r7, pc}

0800a978 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a978:	b480      	push	{r7}
 800a97a:	b085      	sub	sp, #20
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a984:	2b00      	cmp	r3, #0
 800a986:	d006      	beq.n	800a996 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	f1c3 0307 	rsb	r3, r3, #7
 800a992:	60fb      	str	r3, [r7, #12]
 800a994:	e001      	b.n	800a99a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a996:	2300      	movs	r3, #0
 800a998:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a99a:	68fb      	ldr	r3, [r7, #12]
	}
 800a99c:	4618      	mov	r0, r3
 800a99e:	3714      	adds	r7, #20
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a6:	4770      	bx	lr

0800a9a8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b086      	sub	sp, #24
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	60f8      	str	r0, [r7, #12]
 800a9b0:	60b9      	str	r1, [r7, #8]
 800a9b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9bc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d10d      	bne.n	800a9e2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d14d      	bne.n	800aa6a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	689b      	ldr	r3, [r3, #8]
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f000 ff74 	bl	800b8c0 <xTaskPriorityDisinherit>
 800a9d8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	2200      	movs	r2, #0
 800a9de:	609a      	str	r2, [r3, #8]
 800a9e0:	e043      	b.n	800aa6a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d119      	bne.n	800aa1c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	6858      	ldr	r0, [r3, #4]
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9f0:	461a      	mov	r2, r3
 800a9f2:	68b9      	ldr	r1, [r7, #8]
 800a9f4:	f00c fa30 	bl	8016e58 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	685a      	ldr	r2, [r3, #4]
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa00:	441a      	add	r2, r3
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	685a      	ldr	r2, [r3, #4]
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	689b      	ldr	r3, [r3, #8]
 800aa0e:	429a      	cmp	r2, r3
 800aa10:	d32b      	bcc.n	800aa6a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	681a      	ldr	r2, [r3, #0]
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	605a      	str	r2, [r3, #4]
 800aa1a:	e026      	b.n	800aa6a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	68d8      	ldr	r0, [r3, #12]
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa24:	461a      	mov	r2, r3
 800aa26:	68b9      	ldr	r1, [r7, #8]
 800aa28:	f00c fa16 	bl	8016e58 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	68da      	ldr	r2, [r3, #12]
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa34:	425b      	negs	r3, r3
 800aa36:	441a      	add	r2, r3
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	68da      	ldr	r2, [r3, #12]
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	429a      	cmp	r2, r3
 800aa46:	d207      	bcs.n	800aa58 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	689a      	ldr	r2, [r3, #8]
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa50:	425b      	negs	r3, r3
 800aa52:	441a      	add	r2, r3
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2b02      	cmp	r3, #2
 800aa5c:	d105      	bne.n	800aa6a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aa5e:	693b      	ldr	r3, [r7, #16]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d002      	beq.n	800aa6a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800aa64:	693b      	ldr	r3, [r7, #16]
 800aa66:	3b01      	subs	r3, #1
 800aa68:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800aa6a:	693b      	ldr	r3, [r7, #16]
 800aa6c:	1c5a      	adds	r2, r3, #1
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800aa72:	697b      	ldr	r3, [r7, #20]
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	3718      	adds	r7, #24
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}

0800aa7c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b082      	sub	sp, #8
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
 800aa84:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d018      	beq.n	800aac0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	68da      	ldr	r2, [r3, #12]
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa96:	441a      	add	r2, r3
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	68da      	ldr	r2, [r3, #12]
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	689b      	ldr	r3, [r3, #8]
 800aaa4:	429a      	cmp	r2, r3
 800aaa6:	d303      	bcc.n	800aab0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681a      	ldr	r2, [r3, #0]
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	68d9      	ldr	r1, [r3, #12]
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aab8:	461a      	mov	r2, r3
 800aaba:	6838      	ldr	r0, [r7, #0]
 800aabc:	f00c f9cc 	bl	8016e58 <memcpy>
	}
}
 800aac0:	bf00      	nop
 800aac2:	3708      	adds	r7, #8
 800aac4:	46bd      	mov	sp, r7
 800aac6:	bd80      	pop	{r7, pc}

0800aac8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b084      	sub	sp, #16
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800aad0:	f001 f9b0 	bl	800be34 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aada:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aadc:	e011      	b.n	800ab02 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d012      	beq.n	800ab0c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	3324      	adds	r3, #36	; 0x24
 800aaea:	4618      	mov	r0, r3
 800aaec:	f000 fc98 	bl	800b420 <xTaskRemoveFromEventList>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d001      	beq.n	800aafa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800aaf6:	f000 fd6d 	bl	800b5d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800aafa:	7bfb      	ldrb	r3, [r7, #15]
 800aafc:	3b01      	subs	r3, #1
 800aafe:	b2db      	uxtb	r3, r3
 800ab00:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ab02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	dce9      	bgt.n	800aade <prvUnlockQueue+0x16>
 800ab0a:	e000      	b.n	800ab0e <prvUnlockQueue+0x46>
					break;
 800ab0c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	22ff      	movs	r2, #255	; 0xff
 800ab12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ab16:	f001 f9bd 	bl	800be94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ab1a:	f001 f98b 	bl	800be34 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab24:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ab26:	e011      	b.n	800ab4c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	691b      	ldr	r3, [r3, #16]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d012      	beq.n	800ab56 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	3310      	adds	r3, #16
 800ab34:	4618      	mov	r0, r3
 800ab36:	f000 fc73 	bl	800b420 <xTaskRemoveFromEventList>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d001      	beq.n	800ab44 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ab40:	f000 fd48 	bl	800b5d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ab44:	7bbb      	ldrb	r3, [r7, #14]
 800ab46:	3b01      	subs	r3, #1
 800ab48:	b2db      	uxtb	r3, r3
 800ab4a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ab4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	dce9      	bgt.n	800ab28 <prvUnlockQueue+0x60>
 800ab54:	e000      	b.n	800ab58 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ab56:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	22ff      	movs	r2, #255	; 0xff
 800ab5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ab60:	f001 f998 	bl	800be94 <vPortExitCritical>
}
 800ab64:	bf00      	nop
 800ab66:	3710      	adds	r7, #16
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bd80      	pop	{r7, pc}

0800ab6c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b084      	sub	sp, #16
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ab74:	f001 f95e 	bl	800be34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d102      	bne.n	800ab86 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ab80:	2301      	movs	r3, #1
 800ab82:	60fb      	str	r3, [r7, #12]
 800ab84:	e001      	b.n	800ab8a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ab86:	2300      	movs	r3, #0
 800ab88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ab8a:	f001 f983 	bl	800be94 <vPortExitCritical>

	return xReturn;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
}
 800ab90:	4618      	mov	r0, r3
 800ab92:	3710      	adds	r7, #16
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bd80      	pop	{r7, pc}

0800ab98 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b084      	sub	sp, #16
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aba0:	f001 f948 	bl	800be34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abac:	429a      	cmp	r2, r3
 800abae:	d102      	bne.n	800abb6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800abb0:	2301      	movs	r3, #1
 800abb2:	60fb      	str	r3, [r7, #12]
 800abb4:	e001      	b.n	800abba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800abb6:	2300      	movs	r3, #0
 800abb8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800abba:	f001 f96b 	bl	800be94 <vPortExitCritical>

	return xReturn;
 800abbe:	68fb      	ldr	r3, [r7, #12]
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	3710      	adds	r7, #16
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}

0800abc8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b08e      	sub	sp, #56	; 0x38
 800abcc:	af04      	add	r7, sp, #16
 800abce:	60f8      	str	r0, [r7, #12]
 800abd0:	60b9      	str	r1, [r7, #8]
 800abd2:	607a      	str	r2, [r7, #4]
 800abd4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800abd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d10a      	bne.n	800abf2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800abdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abe0:	f383 8811 	msr	BASEPRI, r3
 800abe4:	f3bf 8f6f 	isb	sy
 800abe8:	f3bf 8f4f 	dsb	sy
 800abec:	623b      	str	r3, [r7, #32]
}
 800abee:	bf00      	nop
 800abf0:	e7fe      	b.n	800abf0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800abf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d10a      	bne.n	800ac0e <xTaskCreateStatic+0x46>
	__asm volatile
 800abf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abfc:	f383 8811 	msr	BASEPRI, r3
 800ac00:	f3bf 8f6f 	isb	sy
 800ac04:	f3bf 8f4f 	dsb	sy
 800ac08:	61fb      	str	r3, [r7, #28]
}
 800ac0a:	bf00      	nop
 800ac0c:	e7fe      	b.n	800ac0c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ac0e:	2354      	movs	r3, #84	; 0x54
 800ac10:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ac12:	693b      	ldr	r3, [r7, #16]
 800ac14:	2b54      	cmp	r3, #84	; 0x54
 800ac16:	d00a      	beq.n	800ac2e <xTaskCreateStatic+0x66>
	__asm volatile
 800ac18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac1c:	f383 8811 	msr	BASEPRI, r3
 800ac20:	f3bf 8f6f 	isb	sy
 800ac24:	f3bf 8f4f 	dsb	sy
 800ac28:	61bb      	str	r3, [r7, #24]
}
 800ac2a:	bf00      	nop
 800ac2c:	e7fe      	b.n	800ac2c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ac2e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ac30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d01e      	beq.n	800ac74 <xTaskCreateStatic+0xac>
 800ac36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d01b      	beq.n	800ac74 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ac3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac3e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ac40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac44:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ac46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac48:	2202      	movs	r2, #2
 800ac4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ac4e:	2300      	movs	r3, #0
 800ac50:	9303      	str	r3, [sp, #12]
 800ac52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac54:	9302      	str	r3, [sp, #8]
 800ac56:	f107 0314 	add.w	r3, r7, #20
 800ac5a:	9301      	str	r3, [sp, #4]
 800ac5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac5e:	9300      	str	r3, [sp, #0]
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	687a      	ldr	r2, [r7, #4]
 800ac64:	68b9      	ldr	r1, [r7, #8]
 800ac66:	68f8      	ldr	r0, [r7, #12]
 800ac68:	f000 f850 	bl	800ad0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ac6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ac6e:	f000 f8d5 	bl	800ae1c <prvAddNewTaskToReadyList>
 800ac72:	e001      	b.n	800ac78 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ac74:	2300      	movs	r3, #0
 800ac76:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ac78:	697b      	ldr	r3, [r7, #20]
	}
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	3728      	adds	r7, #40	; 0x28
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bd80      	pop	{r7, pc}

0800ac82 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ac82:	b580      	push	{r7, lr}
 800ac84:	b08c      	sub	sp, #48	; 0x30
 800ac86:	af04      	add	r7, sp, #16
 800ac88:	60f8      	str	r0, [r7, #12]
 800ac8a:	60b9      	str	r1, [r7, #8]
 800ac8c:	603b      	str	r3, [r7, #0]
 800ac8e:	4613      	mov	r3, r2
 800ac90:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ac92:	88fb      	ldrh	r3, [r7, #6]
 800ac94:	009b      	lsls	r3, r3, #2
 800ac96:	4618      	mov	r0, r3
 800ac98:	f001 f9ee 	bl	800c078 <pvPortMalloc>
 800ac9c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ac9e:	697b      	ldr	r3, [r7, #20]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d00e      	beq.n	800acc2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800aca4:	2054      	movs	r0, #84	; 0x54
 800aca6:	f001 f9e7 	bl	800c078 <pvPortMalloc>
 800acaa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800acac:	69fb      	ldr	r3, [r7, #28]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d003      	beq.n	800acba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800acb2:	69fb      	ldr	r3, [r7, #28]
 800acb4:	697a      	ldr	r2, [r7, #20]
 800acb6:	631a      	str	r2, [r3, #48]	; 0x30
 800acb8:	e005      	b.n	800acc6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800acba:	6978      	ldr	r0, [r7, #20]
 800acbc:	f001 faa8 	bl	800c210 <vPortFree>
 800acc0:	e001      	b.n	800acc6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800acc2:	2300      	movs	r3, #0
 800acc4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800acc6:	69fb      	ldr	r3, [r7, #28]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d017      	beq.n	800acfc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800accc:	69fb      	ldr	r3, [r7, #28]
 800acce:	2200      	movs	r2, #0
 800acd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800acd4:	88fa      	ldrh	r2, [r7, #6]
 800acd6:	2300      	movs	r3, #0
 800acd8:	9303      	str	r3, [sp, #12]
 800acda:	69fb      	ldr	r3, [r7, #28]
 800acdc:	9302      	str	r3, [sp, #8]
 800acde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ace0:	9301      	str	r3, [sp, #4]
 800ace2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ace4:	9300      	str	r3, [sp, #0]
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	68b9      	ldr	r1, [r7, #8]
 800acea:	68f8      	ldr	r0, [r7, #12]
 800acec:	f000 f80e 	bl	800ad0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800acf0:	69f8      	ldr	r0, [r7, #28]
 800acf2:	f000 f893 	bl	800ae1c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800acf6:	2301      	movs	r3, #1
 800acf8:	61bb      	str	r3, [r7, #24]
 800acfa:	e002      	b.n	800ad02 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800acfc:	f04f 33ff 	mov.w	r3, #4294967295
 800ad00:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ad02:	69bb      	ldr	r3, [r7, #24]
	}
 800ad04:	4618      	mov	r0, r3
 800ad06:	3720      	adds	r7, #32
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	bd80      	pop	{r7, pc}

0800ad0c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b088      	sub	sp, #32
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	60f8      	str	r0, [r7, #12]
 800ad14:	60b9      	str	r1, [r7, #8]
 800ad16:	607a      	str	r2, [r7, #4]
 800ad18:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ad1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ad24:	3b01      	subs	r3, #1
 800ad26:	009b      	lsls	r3, r3, #2
 800ad28:	4413      	add	r3, r2
 800ad2a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ad2c:	69bb      	ldr	r3, [r7, #24]
 800ad2e:	f023 0307 	bic.w	r3, r3, #7
 800ad32:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ad34:	69bb      	ldr	r3, [r7, #24]
 800ad36:	f003 0307 	and.w	r3, r3, #7
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d00a      	beq.n	800ad54 <prvInitialiseNewTask+0x48>
	__asm volatile
 800ad3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad42:	f383 8811 	msr	BASEPRI, r3
 800ad46:	f3bf 8f6f 	isb	sy
 800ad4a:	f3bf 8f4f 	dsb	sy
 800ad4e:	617b      	str	r3, [r7, #20]
}
 800ad50:	bf00      	nop
 800ad52:	e7fe      	b.n	800ad52 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d01f      	beq.n	800ad9a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	61fb      	str	r3, [r7, #28]
 800ad5e:	e012      	b.n	800ad86 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ad60:	68ba      	ldr	r2, [r7, #8]
 800ad62:	69fb      	ldr	r3, [r7, #28]
 800ad64:	4413      	add	r3, r2
 800ad66:	7819      	ldrb	r1, [r3, #0]
 800ad68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad6a:	69fb      	ldr	r3, [r7, #28]
 800ad6c:	4413      	add	r3, r2
 800ad6e:	3334      	adds	r3, #52	; 0x34
 800ad70:	460a      	mov	r2, r1
 800ad72:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ad74:	68ba      	ldr	r2, [r7, #8]
 800ad76:	69fb      	ldr	r3, [r7, #28]
 800ad78:	4413      	add	r3, r2
 800ad7a:	781b      	ldrb	r3, [r3, #0]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d006      	beq.n	800ad8e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ad80:	69fb      	ldr	r3, [r7, #28]
 800ad82:	3301      	adds	r3, #1
 800ad84:	61fb      	str	r3, [r7, #28]
 800ad86:	69fb      	ldr	r3, [r7, #28]
 800ad88:	2b0f      	cmp	r3, #15
 800ad8a:	d9e9      	bls.n	800ad60 <prvInitialiseNewTask+0x54>
 800ad8c:	e000      	b.n	800ad90 <prvInitialiseNewTask+0x84>
			{
				break;
 800ad8e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ad90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad92:	2200      	movs	r2, #0
 800ad94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ad98:	e003      	b.n	800ada2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ad9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ada2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ada4:	2b06      	cmp	r3, #6
 800ada6:	d901      	bls.n	800adac <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ada8:	2306      	movs	r3, #6
 800adaa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800adac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800adb0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800adb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800adb6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800adb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adba:	2200      	movs	r2, #0
 800adbc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800adbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc0:	3304      	adds	r3, #4
 800adc2:	4618      	mov	r0, r3
 800adc4:	f7fe ff2c 	bl	8009c20 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800adc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adca:	3318      	adds	r3, #24
 800adcc:	4618      	mov	r0, r3
 800adce:	f7fe ff27 	bl	8009c20 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800add2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800add4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800add6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800add8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adda:	f1c3 0207 	rsb	r2, r3, #7
 800adde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ade0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ade2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ade4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ade6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ade8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adea:	2200      	movs	r2, #0
 800adec:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800adee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adf0:	2200      	movs	r2, #0
 800adf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800adf6:	683a      	ldr	r2, [r7, #0]
 800adf8:	68f9      	ldr	r1, [r7, #12]
 800adfa:	69b8      	ldr	r0, [r7, #24]
 800adfc:	f000 feee 	bl	800bbdc <pxPortInitialiseStack>
 800ae00:	4602      	mov	r2, r0
 800ae02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae04:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ae06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d002      	beq.n	800ae12 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ae0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ae12:	bf00      	nop
 800ae14:	3720      	adds	r7, #32
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}
	...

0800ae1c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b082      	sub	sp, #8
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ae24:	f001 f806 	bl	800be34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ae28:	4b2a      	ldr	r3, [pc, #168]	; (800aed4 <prvAddNewTaskToReadyList+0xb8>)
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	3301      	adds	r3, #1
 800ae2e:	4a29      	ldr	r2, [pc, #164]	; (800aed4 <prvAddNewTaskToReadyList+0xb8>)
 800ae30:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ae32:	4b29      	ldr	r3, [pc, #164]	; (800aed8 <prvAddNewTaskToReadyList+0xbc>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d109      	bne.n	800ae4e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ae3a:	4a27      	ldr	r2, [pc, #156]	; (800aed8 <prvAddNewTaskToReadyList+0xbc>)
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ae40:	4b24      	ldr	r3, [pc, #144]	; (800aed4 <prvAddNewTaskToReadyList+0xb8>)
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	2b01      	cmp	r3, #1
 800ae46:	d110      	bne.n	800ae6a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ae48:	f000 fbe8 	bl	800b61c <prvInitialiseTaskLists>
 800ae4c:	e00d      	b.n	800ae6a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ae4e:	4b23      	ldr	r3, [pc, #140]	; (800aedc <prvAddNewTaskToReadyList+0xc0>)
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d109      	bne.n	800ae6a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ae56:	4b20      	ldr	r3, [pc, #128]	; (800aed8 <prvAddNewTaskToReadyList+0xbc>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae60:	429a      	cmp	r2, r3
 800ae62:	d802      	bhi.n	800ae6a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ae64:	4a1c      	ldr	r2, [pc, #112]	; (800aed8 <prvAddNewTaskToReadyList+0xbc>)
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ae6a:	4b1d      	ldr	r3, [pc, #116]	; (800aee0 <prvAddNewTaskToReadyList+0xc4>)
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	3301      	adds	r3, #1
 800ae70:	4a1b      	ldr	r2, [pc, #108]	; (800aee0 <prvAddNewTaskToReadyList+0xc4>)
 800ae72:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae78:	2201      	movs	r2, #1
 800ae7a:	409a      	lsls	r2, r3
 800ae7c:	4b19      	ldr	r3, [pc, #100]	; (800aee4 <prvAddNewTaskToReadyList+0xc8>)
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	4313      	orrs	r3, r2
 800ae82:	4a18      	ldr	r2, [pc, #96]	; (800aee4 <prvAddNewTaskToReadyList+0xc8>)
 800ae84:	6013      	str	r3, [r2, #0]
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae8a:	4613      	mov	r3, r2
 800ae8c:	009b      	lsls	r3, r3, #2
 800ae8e:	4413      	add	r3, r2
 800ae90:	009b      	lsls	r3, r3, #2
 800ae92:	4a15      	ldr	r2, [pc, #84]	; (800aee8 <prvAddNewTaskToReadyList+0xcc>)
 800ae94:	441a      	add	r2, r3
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	3304      	adds	r3, #4
 800ae9a:	4619      	mov	r1, r3
 800ae9c:	4610      	mov	r0, r2
 800ae9e:	f7fe fecc 	bl	8009c3a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800aea2:	f000 fff7 	bl	800be94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800aea6:	4b0d      	ldr	r3, [pc, #52]	; (800aedc <prvAddNewTaskToReadyList+0xc0>)
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d00e      	beq.n	800aecc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800aeae:	4b0a      	ldr	r3, [pc, #40]	; (800aed8 <prvAddNewTaskToReadyList+0xbc>)
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeb8:	429a      	cmp	r2, r3
 800aeba:	d207      	bcs.n	800aecc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800aebc:	4b0b      	ldr	r3, [pc, #44]	; (800aeec <prvAddNewTaskToReadyList+0xd0>)
 800aebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aec2:	601a      	str	r2, [r3, #0]
 800aec4:	f3bf 8f4f 	dsb	sy
 800aec8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aecc:	bf00      	nop
 800aece:	3708      	adds	r7, #8
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}
 800aed4:	2000059c 	.word	0x2000059c
 800aed8:	2000049c 	.word	0x2000049c
 800aedc:	200005a8 	.word	0x200005a8
 800aee0:	200005b8 	.word	0x200005b8
 800aee4:	200005a4 	.word	0x200005a4
 800aee8:	200004a0 	.word	0x200004a0
 800aeec:	e000ed04 	.word	0xe000ed04

0800aef0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b084      	sub	sp, #16
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800aef8:	2300      	movs	r3, #0
 800aefa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d017      	beq.n	800af32 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800af02:	4b13      	ldr	r3, [pc, #76]	; (800af50 <vTaskDelay+0x60>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d00a      	beq.n	800af20 <vTaskDelay+0x30>
	__asm volatile
 800af0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af0e:	f383 8811 	msr	BASEPRI, r3
 800af12:	f3bf 8f6f 	isb	sy
 800af16:	f3bf 8f4f 	dsb	sy
 800af1a:	60bb      	str	r3, [r7, #8]
}
 800af1c:	bf00      	nop
 800af1e:	e7fe      	b.n	800af1e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800af20:	f000 f87a 	bl	800b018 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800af24:	2100      	movs	r1, #0
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f000 fdf2 	bl	800bb10 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800af2c:	f000 f882 	bl	800b034 <xTaskResumeAll>
 800af30:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d107      	bne.n	800af48 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800af38:	4b06      	ldr	r3, [pc, #24]	; (800af54 <vTaskDelay+0x64>)
 800af3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af3e:	601a      	str	r2, [r3, #0]
 800af40:	f3bf 8f4f 	dsb	sy
 800af44:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800af48:	bf00      	nop
 800af4a:	3710      	adds	r7, #16
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}
 800af50:	200005c4 	.word	0x200005c4
 800af54:	e000ed04 	.word	0xe000ed04

0800af58 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b08a      	sub	sp, #40	; 0x28
 800af5c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800af5e:	2300      	movs	r3, #0
 800af60:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800af62:	2300      	movs	r3, #0
 800af64:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800af66:	463a      	mov	r2, r7
 800af68:	1d39      	adds	r1, r7, #4
 800af6a:	f107 0308 	add.w	r3, r7, #8
 800af6e:	4618      	mov	r0, r3
 800af70:	f7f5 fb22 	bl	80005b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800af74:	6839      	ldr	r1, [r7, #0]
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	68ba      	ldr	r2, [r7, #8]
 800af7a:	9202      	str	r2, [sp, #8]
 800af7c:	9301      	str	r3, [sp, #4]
 800af7e:	2300      	movs	r3, #0
 800af80:	9300      	str	r3, [sp, #0]
 800af82:	2300      	movs	r3, #0
 800af84:	460a      	mov	r2, r1
 800af86:	491e      	ldr	r1, [pc, #120]	; (800b000 <vTaskStartScheduler+0xa8>)
 800af88:	481e      	ldr	r0, [pc, #120]	; (800b004 <vTaskStartScheduler+0xac>)
 800af8a:	f7ff fe1d 	bl	800abc8 <xTaskCreateStatic>
 800af8e:	4603      	mov	r3, r0
 800af90:	4a1d      	ldr	r2, [pc, #116]	; (800b008 <vTaskStartScheduler+0xb0>)
 800af92:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800af94:	4b1c      	ldr	r3, [pc, #112]	; (800b008 <vTaskStartScheduler+0xb0>)
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d002      	beq.n	800afa2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800af9c:	2301      	movs	r3, #1
 800af9e:	617b      	str	r3, [r7, #20]
 800afa0:	e001      	b.n	800afa6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800afa2:	2300      	movs	r3, #0
 800afa4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800afa6:	697b      	ldr	r3, [r7, #20]
 800afa8:	2b01      	cmp	r3, #1
 800afaa:	d116      	bne.n	800afda <vTaskStartScheduler+0x82>
	__asm volatile
 800afac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afb0:	f383 8811 	msr	BASEPRI, r3
 800afb4:	f3bf 8f6f 	isb	sy
 800afb8:	f3bf 8f4f 	dsb	sy
 800afbc:	613b      	str	r3, [r7, #16]
}
 800afbe:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800afc0:	4b12      	ldr	r3, [pc, #72]	; (800b00c <vTaskStartScheduler+0xb4>)
 800afc2:	f04f 32ff 	mov.w	r2, #4294967295
 800afc6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800afc8:	4b11      	ldr	r3, [pc, #68]	; (800b010 <vTaskStartScheduler+0xb8>)
 800afca:	2201      	movs	r2, #1
 800afcc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800afce:	4b11      	ldr	r3, [pc, #68]	; (800b014 <vTaskStartScheduler+0xbc>)
 800afd0:	2200      	movs	r2, #0
 800afd2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800afd4:	f000 fe8c 	bl	800bcf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800afd8:	e00e      	b.n	800aff8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800afda:	697b      	ldr	r3, [r7, #20]
 800afdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afe0:	d10a      	bne.n	800aff8 <vTaskStartScheduler+0xa0>
	__asm volatile
 800afe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afe6:	f383 8811 	msr	BASEPRI, r3
 800afea:	f3bf 8f6f 	isb	sy
 800afee:	f3bf 8f4f 	dsb	sy
 800aff2:	60fb      	str	r3, [r7, #12]
}
 800aff4:	bf00      	nop
 800aff6:	e7fe      	b.n	800aff6 <vTaskStartScheduler+0x9e>
}
 800aff8:	bf00      	nop
 800affa:	3718      	adds	r7, #24
 800affc:	46bd      	mov	sp, r7
 800affe:	bd80      	pop	{r7, pc}
 800b000:	0801806c 	.word	0x0801806c
 800b004:	0800b5ed 	.word	0x0800b5ed
 800b008:	200005c0 	.word	0x200005c0
 800b00c:	200005bc 	.word	0x200005bc
 800b010:	200005a8 	.word	0x200005a8
 800b014:	200005a0 	.word	0x200005a0

0800b018 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b018:	b480      	push	{r7}
 800b01a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b01c:	4b04      	ldr	r3, [pc, #16]	; (800b030 <vTaskSuspendAll+0x18>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	3301      	adds	r3, #1
 800b022:	4a03      	ldr	r2, [pc, #12]	; (800b030 <vTaskSuspendAll+0x18>)
 800b024:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b026:	bf00      	nop
 800b028:	46bd      	mov	sp, r7
 800b02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02e:	4770      	bx	lr
 800b030:	200005c4 	.word	0x200005c4

0800b034 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b084      	sub	sp, #16
 800b038:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b03a:	2300      	movs	r3, #0
 800b03c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b03e:	2300      	movs	r3, #0
 800b040:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b042:	4b41      	ldr	r3, [pc, #260]	; (800b148 <xTaskResumeAll+0x114>)
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d10a      	bne.n	800b060 <xTaskResumeAll+0x2c>
	__asm volatile
 800b04a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b04e:	f383 8811 	msr	BASEPRI, r3
 800b052:	f3bf 8f6f 	isb	sy
 800b056:	f3bf 8f4f 	dsb	sy
 800b05a:	603b      	str	r3, [r7, #0]
}
 800b05c:	bf00      	nop
 800b05e:	e7fe      	b.n	800b05e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b060:	f000 fee8 	bl	800be34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b064:	4b38      	ldr	r3, [pc, #224]	; (800b148 <xTaskResumeAll+0x114>)
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	3b01      	subs	r3, #1
 800b06a:	4a37      	ldr	r2, [pc, #220]	; (800b148 <xTaskResumeAll+0x114>)
 800b06c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b06e:	4b36      	ldr	r3, [pc, #216]	; (800b148 <xTaskResumeAll+0x114>)
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d161      	bne.n	800b13a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b076:	4b35      	ldr	r3, [pc, #212]	; (800b14c <xTaskResumeAll+0x118>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d05d      	beq.n	800b13a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b07e:	e02e      	b.n	800b0de <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b080:	4b33      	ldr	r3, [pc, #204]	; (800b150 <xTaskResumeAll+0x11c>)
 800b082:	68db      	ldr	r3, [r3, #12]
 800b084:	68db      	ldr	r3, [r3, #12]
 800b086:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	3318      	adds	r3, #24
 800b08c:	4618      	mov	r0, r3
 800b08e:	f7fe fe31 	bl	8009cf4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	3304      	adds	r3, #4
 800b096:	4618      	mov	r0, r3
 800b098:	f7fe fe2c 	bl	8009cf4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0a0:	2201      	movs	r2, #1
 800b0a2:	409a      	lsls	r2, r3
 800b0a4:	4b2b      	ldr	r3, [pc, #172]	; (800b154 <xTaskResumeAll+0x120>)
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	4313      	orrs	r3, r2
 800b0aa:	4a2a      	ldr	r2, [pc, #168]	; (800b154 <xTaskResumeAll+0x120>)
 800b0ac:	6013      	str	r3, [r2, #0]
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0b2:	4613      	mov	r3, r2
 800b0b4:	009b      	lsls	r3, r3, #2
 800b0b6:	4413      	add	r3, r2
 800b0b8:	009b      	lsls	r3, r3, #2
 800b0ba:	4a27      	ldr	r2, [pc, #156]	; (800b158 <xTaskResumeAll+0x124>)
 800b0bc:	441a      	add	r2, r3
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	3304      	adds	r3, #4
 800b0c2:	4619      	mov	r1, r3
 800b0c4:	4610      	mov	r0, r2
 800b0c6:	f7fe fdb8 	bl	8009c3a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0ce:	4b23      	ldr	r3, [pc, #140]	; (800b15c <xTaskResumeAll+0x128>)
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0d4:	429a      	cmp	r2, r3
 800b0d6:	d302      	bcc.n	800b0de <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800b0d8:	4b21      	ldr	r3, [pc, #132]	; (800b160 <xTaskResumeAll+0x12c>)
 800b0da:	2201      	movs	r2, #1
 800b0dc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b0de:	4b1c      	ldr	r3, [pc, #112]	; (800b150 <xTaskResumeAll+0x11c>)
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d1cc      	bne.n	800b080 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d001      	beq.n	800b0f0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b0ec:	f000 fb34 	bl	800b758 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b0f0:	4b1c      	ldr	r3, [pc, #112]	; (800b164 <xTaskResumeAll+0x130>)
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d010      	beq.n	800b11e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b0fc:	f000 f858 	bl	800b1b0 <xTaskIncrementTick>
 800b100:	4603      	mov	r3, r0
 800b102:	2b00      	cmp	r3, #0
 800b104:	d002      	beq.n	800b10c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800b106:	4b16      	ldr	r3, [pc, #88]	; (800b160 <xTaskResumeAll+0x12c>)
 800b108:	2201      	movs	r2, #1
 800b10a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	3b01      	subs	r3, #1
 800b110:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d1f1      	bne.n	800b0fc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800b118:	4b12      	ldr	r3, [pc, #72]	; (800b164 <xTaskResumeAll+0x130>)
 800b11a:	2200      	movs	r2, #0
 800b11c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b11e:	4b10      	ldr	r3, [pc, #64]	; (800b160 <xTaskResumeAll+0x12c>)
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d009      	beq.n	800b13a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b126:	2301      	movs	r3, #1
 800b128:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b12a:	4b0f      	ldr	r3, [pc, #60]	; (800b168 <xTaskResumeAll+0x134>)
 800b12c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b130:	601a      	str	r2, [r3, #0]
 800b132:	f3bf 8f4f 	dsb	sy
 800b136:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b13a:	f000 feab 	bl	800be94 <vPortExitCritical>

	return xAlreadyYielded;
 800b13e:	68bb      	ldr	r3, [r7, #8]
}
 800b140:	4618      	mov	r0, r3
 800b142:	3710      	adds	r7, #16
 800b144:	46bd      	mov	sp, r7
 800b146:	bd80      	pop	{r7, pc}
 800b148:	200005c4 	.word	0x200005c4
 800b14c:	2000059c 	.word	0x2000059c
 800b150:	2000055c 	.word	0x2000055c
 800b154:	200005a4 	.word	0x200005a4
 800b158:	200004a0 	.word	0x200004a0
 800b15c:	2000049c 	.word	0x2000049c
 800b160:	200005b0 	.word	0x200005b0
 800b164:	200005ac 	.word	0x200005ac
 800b168:	e000ed04 	.word	0xe000ed04

0800b16c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b16c:	b480      	push	{r7}
 800b16e:	b083      	sub	sp, #12
 800b170:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b172:	4b05      	ldr	r3, [pc, #20]	; (800b188 <xTaskGetTickCount+0x1c>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b178:	687b      	ldr	r3, [r7, #4]
}
 800b17a:	4618      	mov	r0, r3
 800b17c:	370c      	adds	r7, #12
 800b17e:	46bd      	mov	sp, r7
 800b180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b184:	4770      	bx	lr
 800b186:	bf00      	nop
 800b188:	200005a0 	.word	0x200005a0

0800b18c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b082      	sub	sp, #8
 800b190:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b192:	f000 ff31 	bl	800bff8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b196:	2300      	movs	r3, #0
 800b198:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b19a:	4b04      	ldr	r3, [pc, #16]	; (800b1ac <xTaskGetTickCountFromISR+0x20>)
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b1a0:	683b      	ldr	r3, [r7, #0]
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	3708      	adds	r7, #8
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}
 800b1aa:	bf00      	nop
 800b1ac:	200005a0 	.word	0x200005a0

0800b1b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b086      	sub	sp, #24
 800b1b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b1ba:	4b4e      	ldr	r3, [pc, #312]	; (800b2f4 <xTaskIncrementTick+0x144>)
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	f040 808e 	bne.w	800b2e0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b1c4:	4b4c      	ldr	r3, [pc, #304]	; (800b2f8 <xTaskIncrementTick+0x148>)
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	3301      	adds	r3, #1
 800b1ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b1cc:	4a4a      	ldr	r2, [pc, #296]	; (800b2f8 <xTaskIncrementTick+0x148>)
 800b1ce:	693b      	ldr	r3, [r7, #16]
 800b1d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b1d2:	693b      	ldr	r3, [r7, #16]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d120      	bne.n	800b21a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b1d8:	4b48      	ldr	r3, [pc, #288]	; (800b2fc <xTaskIncrementTick+0x14c>)
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d00a      	beq.n	800b1f8 <xTaskIncrementTick+0x48>
	__asm volatile
 800b1e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1e6:	f383 8811 	msr	BASEPRI, r3
 800b1ea:	f3bf 8f6f 	isb	sy
 800b1ee:	f3bf 8f4f 	dsb	sy
 800b1f2:	603b      	str	r3, [r7, #0]
}
 800b1f4:	bf00      	nop
 800b1f6:	e7fe      	b.n	800b1f6 <xTaskIncrementTick+0x46>
 800b1f8:	4b40      	ldr	r3, [pc, #256]	; (800b2fc <xTaskIncrementTick+0x14c>)
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	60fb      	str	r3, [r7, #12]
 800b1fe:	4b40      	ldr	r3, [pc, #256]	; (800b300 <xTaskIncrementTick+0x150>)
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	4a3e      	ldr	r2, [pc, #248]	; (800b2fc <xTaskIncrementTick+0x14c>)
 800b204:	6013      	str	r3, [r2, #0]
 800b206:	4a3e      	ldr	r2, [pc, #248]	; (800b300 <xTaskIncrementTick+0x150>)
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	6013      	str	r3, [r2, #0]
 800b20c:	4b3d      	ldr	r3, [pc, #244]	; (800b304 <xTaskIncrementTick+0x154>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	3301      	adds	r3, #1
 800b212:	4a3c      	ldr	r2, [pc, #240]	; (800b304 <xTaskIncrementTick+0x154>)
 800b214:	6013      	str	r3, [r2, #0]
 800b216:	f000 fa9f 	bl	800b758 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b21a:	4b3b      	ldr	r3, [pc, #236]	; (800b308 <xTaskIncrementTick+0x158>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	693a      	ldr	r2, [r7, #16]
 800b220:	429a      	cmp	r2, r3
 800b222:	d348      	bcc.n	800b2b6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b224:	4b35      	ldr	r3, [pc, #212]	; (800b2fc <xTaskIncrementTick+0x14c>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d104      	bne.n	800b238 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b22e:	4b36      	ldr	r3, [pc, #216]	; (800b308 <xTaskIncrementTick+0x158>)
 800b230:	f04f 32ff 	mov.w	r2, #4294967295
 800b234:	601a      	str	r2, [r3, #0]
					break;
 800b236:	e03e      	b.n	800b2b6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b238:	4b30      	ldr	r3, [pc, #192]	; (800b2fc <xTaskIncrementTick+0x14c>)
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	68db      	ldr	r3, [r3, #12]
 800b23e:	68db      	ldr	r3, [r3, #12]
 800b240:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b242:	68bb      	ldr	r3, [r7, #8]
 800b244:	685b      	ldr	r3, [r3, #4]
 800b246:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b248:	693a      	ldr	r2, [r7, #16]
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	429a      	cmp	r2, r3
 800b24e:	d203      	bcs.n	800b258 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b250:	4a2d      	ldr	r2, [pc, #180]	; (800b308 <xTaskIncrementTick+0x158>)
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b256:	e02e      	b.n	800b2b6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b258:	68bb      	ldr	r3, [r7, #8]
 800b25a:	3304      	adds	r3, #4
 800b25c:	4618      	mov	r0, r3
 800b25e:	f7fe fd49 	bl	8009cf4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b262:	68bb      	ldr	r3, [r7, #8]
 800b264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b266:	2b00      	cmp	r3, #0
 800b268:	d004      	beq.n	800b274 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	3318      	adds	r3, #24
 800b26e:	4618      	mov	r0, r3
 800b270:	f7fe fd40 	bl	8009cf4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b274:	68bb      	ldr	r3, [r7, #8]
 800b276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b278:	2201      	movs	r2, #1
 800b27a:	409a      	lsls	r2, r3
 800b27c:	4b23      	ldr	r3, [pc, #140]	; (800b30c <xTaskIncrementTick+0x15c>)
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	4313      	orrs	r3, r2
 800b282:	4a22      	ldr	r2, [pc, #136]	; (800b30c <xTaskIncrementTick+0x15c>)
 800b284:	6013      	str	r3, [r2, #0]
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b28a:	4613      	mov	r3, r2
 800b28c:	009b      	lsls	r3, r3, #2
 800b28e:	4413      	add	r3, r2
 800b290:	009b      	lsls	r3, r3, #2
 800b292:	4a1f      	ldr	r2, [pc, #124]	; (800b310 <xTaskIncrementTick+0x160>)
 800b294:	441a      	add	r2, r3
 800b296:	68bb      	ldr	r3, [r7, #8]
 800b298:	3304      	adds	r3, #4
 800b29a:	4619      	mov	r1, r3
 800b29c:	4610      	mov	r0, r2
 800b29e:	f7fe fccc 	bl	8009c3a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b2a2:	68bb      	ldr	r3, [r7, #8]
 800b2a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2a6:	4b1b      	ldr	r3, [pc, #108]	; (800b314 <xTaskIncrementTick+0x164>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2ac:	429a      	cmp	r2, r3
 800b2ae:	d3b9      	bcc.n	800b224 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b2b0:	2301      	movs	r3, #1
 800b2b2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b2b4:	e7b6      	b.n	800b224 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b2b6:	4b17      	ldr	r3, [pc, #92]	; (800b314 <xTaskIncrementTick+0x164>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2bc:	4914      	ldr	r1, [pc, #80]	; (800b310 <xTaskIncrementTick+0x160>)
 800b2be:	4613      	mov	r3, r2
 800b2c0:	009b      	lsls	r3, r3, #2
 800b2c2:	4413      	add	r3, r2
 800b2c4:	009b      	lsls	r3, r3, #2
 800b2c6:	440b      	add	r3, r1
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	2b01      	cmp	r3, #1
 800b2cc:	d901      	bls.n	800b2d2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800b2ce:	2301      	movs	r3, #1
 800b2d0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b2d2:	4b11      	ldr	r3, [pc, #68]	; (800b318 <xTaskIncrementTick+0x168>)
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d007      	beq.n	800b2ea <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800b2da:	2301      	movs	r3, #1
 800b2dc:	617b      	str	r3, [r7, #20]
 800b2de:	e004      	b.n	800b2ea <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b2e0:	4b0e      	ldr	r3, [pc, #56]	; (800b31c <xTaskIncrementTick+0x16c>)
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	3301      	adds	r3, #1
 800b2e6:	4a0d      	ldr	r2, [pc, #52]	; (800b31c <xTaskIncrementTick+0x16c>)
 800b2e8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b2ea:	697b      	ldr	r3, [r7, #20]
}
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	3718      	adds	r7, #24
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	bd80      	pop	{r7, pc}
 800b2f4:	200005c4 	.word	0x200005c4
 800b2f8:	200005a0 	.word	0x200005a0
 800b2fc:	20000554 	.word	0x20000554
 800b300:	20000558 	.word	0x20000558
 800b304:	200005b4 	.word	0x200005b4
 800b308:	200005bc 	.word	0x200005bc
 800b30c:	200005a4 	.word	0x200005a4
 800b310:	200004a0 	.word	0x200004a0
 800b314:	2000049c 	.word	0x2000049c
 800b318:	200005b0 	.word	0x200005b0
 800b31c:	200005ac 	.word	0x200005ac

0800b320 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b320:	b480      	push	{r7}
 800b322:	b087      	sub	sp, #28
 800b324:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b326:	4b27      	ldr	r3, [pc, #156]	; (800b3c4 <vTaskSwitchContext+0xa4>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d003      	beq.n	800b336 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b32e:	4b26      	ldr	r3, [pc, #152]	; (800b3c8 <vTaskSwitchContext+0xa8>)
 800b330:	2201      	movs	r2, #1
 800b332:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b334:	e03f      	b.n	800b3b6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800b336:	4b24      	ldr	r3, [pc, #144]	; (800b3c8 <vTaskSwitchContext+0xa8>)
 800b338:	2200      	movs	r2, #0
 800b33a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b33c:	4b23      	ldr	r3, [pc, #140]	; (800b3cc <vTaskSwitchContext+0xac>)
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	fab3 f383 	clz	r3, r3
 800b348:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b34a:	7afb      	ldrb	r3, [r7, #11]
 800b34c:	f1c3 031f 	rsb	r3, r3, #31
 800b350:	617b      	str	r3, [r7, #20]
 800b352:	491f      	ldr	r1, [pc, #124]	; (800b3d0 <vTaskSwitchContext+0xb0>)
 800b354:	697a      	ldr	r2, [r7, #20]
 800b356:	4613      	mov	r3, r2
 800b358:	009b      	lsls	r3, r3, #2
 800b35a:	4413      	add	r3, r2
 800b35c:	009b      	lsls	r3, r3, #2
 800b35e:	440b      	add	r3, r1
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d10a      	bne.n	800b37c <vTaskSwitchContext+0x5c>
	__asm volatile
 800b366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b36a:	f383 8811 	msr	BASEPRI, r3
 800b36e:	f3bf 8f6f 	isb	sy
 800b372:	f3bf 8f4f 	dsb	sy
 800b376:	607b      	str	r3, [r7, #4]
}
 800b378:	bf00      	nop
 800b37a:	e7fe      	b.n	800b37a <vTaskSwitchContext+0x5a>
 800b37c:	697a      	ldr	r2, [r7, #20]
 800b37e:	4613      	mov	r3, r2
 800b380:	009b      	lsls	r3, r3, #2
 800b382:	4413      	add	r3, r2
 800b384:	009b      	lsls	r3, r3, #2
 800b386:	4a12      	ldr	r2, [pc, #72]	; (800b3d0 <vTaskSwitchContext+0xb0>)
 800b388:	4413      	add	r3, r2
 800b38a:	613b      	str	r3, [r7, #16]
 800b38c:	693b      	ldr	r3, [r7, #16]
 800b38e:	685b      	ldr	r3, [r3, #4]
 800b390:	685a      	ldr	r2, [r3, #4]
 800b392:	693b      	ldr	r3, [r7, #16]
 800b394:	605a      	str	r2, [r3, #4]
 800b396:	693b      	ldr	r3, [r7, #16]
 800b398:	685a      	ldr	r2, [r3, #4]
 800b39a:	693b      	ldr	r3, [r7, #16]
 800b39c:	3308      	adds	r3, #8
 800b39e:	429a      	cmp	r2, r3
 800b3a0:	d104      	bne.n	800b3ac <vTaskSwitchContext+0x8c>
 800b3a2:	693b      	ldr	r3, [r7, #16]
 800b3a4:	685b      	ldr	r3, [r3, #4]
 800b3a6:	685a      	ldr	r2, [r3, #4]
 800b3a8:	693b      	ldr	r3, [r7, #16]
 800b3aa:	605a      	str	r2, [r3, #4]
 800b3ac:	693b      	ldr	r3, [r7, #16]
 800b3ae:	685b      	ldr	r3, [r3, #4]
 800b3b0:	68db      	ldr	r3, [r3, #12]
 800b3b2:	4a08      	ldr	r2, [pc, #32]	; (800b3d4 <vTaskSwitchContext+0xb4>)
 800b3b4:	6013      	str	r3, [r2, #0]
}
 800b3b6:	bf00      	nop
 800b3b8:	371c      	adds	r7, #28
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c0:	4770      	bx	lr
 800b3c2:	bf00      	nop
 800b3c4:	200005c4 	.word	0x200005c4
 800b3c8:	200005b0 	.word	0x200005b0
 800b3cc:	200005a4 	.word	0x200005a4
 800b3d0:	200004a0 	.word	0x200004a0
 800b3d4:	2000049c 	.word	0x2000049c

0800b3d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b084      	sub	sp, #16
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
 800b3e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d10a      	bne.n	800b3fe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b3e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3ec:	f383 8811 	msr	BASEPRI, r3
 800b3f0:	f3bf 8f6f 	isb	sy
 800b3f4:	f3bf 8f4f 	dsb	sy
 800b3f8:	60fb      	str	r3, [r7, #12]
}
 800b3fa:	bf00      	nop
 800b3fc:	e7fe      	b.n	800b3fc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b3fe:	4b07      	ldr	r3, [pc, #28]	; (800b41c <vTaskPlaceOnEventList+0x44>)
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	3318      	adds	r3, #24
 800b404:	4619      	mov	r1, r3
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	f7fe fc3b 	bl	8009c82 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b40c:	2101      	movs	r1, #1
 800b40e:	6838      	ldr	r0, [r7, #0]
 800b410:	f000 fb7e 	bl	800bb10 <prvAddCurrentTaskToDelayedList>
}
 800b414:	bf00      	nop
 800b416:	3710      	adds	r7, #16
 800b418:	46bd      	mov	sp, r7
 800b41a:	bd80      	pop	{r7, pc}
 800b41c:	2000049c 	.word	0x2000049c

0800b420 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b086      	sub	sp, #24
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	68db      	ldr	r3, [r3, #12]
 800b42c:	68db      	ldr	r3, [r3, #12]
 800b42e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b430:	693b      	ldr	r3, [r7, #16]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d10a      	bne.n	800b44c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b43a:	f383 8811 	msr	BASEPRI, r3
 800b43e:	f3bf 8f6f 	isb	sy
 800b442:	f3bf 8f4f 	dsb	sy
 800b446:	60fb      	str	r3, [r7, #12]
}
 800b448:	bf00      	nop
 800b44a:	e7fe      	b.n	800b44a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b44c:	693b      	ldr	r3, [r7, #16]
 800b44e:	3318      	adds	r3, #24
 800b450:	4618      	mov	r0, r3
 800b452:	f7fe fc4f 	bl	8009cf4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b456:	4b1d      	ldr	r3, [pc, #116]	; (800b4cc <xTaskRemoveFromEventList+0xac>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d11c      	bne.n	800b498 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b45e:	693b      	ldr	r3, [r7, #16]
 800b460:	3304      	adds	r3, #4
 800b462:	4618      	mov	r0, r3
 800b464:	f7fe fc46 	bl	8009cf4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b468:	693b      	ldr	r3, [r7, #16]
 800b46a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b46c:	2201      	movs	r2, #1
 800b46e:	409a      	lsls	r2, r3
 800b470:	4b17      	ldr	r3, [pc, #92]	; (800b4d0 <xTaskRemoveFromEventList+0xb0>)
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	4313      	orrs	r3, r2
 800b476:	4a16      	ldr	r2, [pc, #88]	; (800b4d0 <xTaskRemoveFromEventList+0xb0>)
 800b478:	6013      	str	r3, [r2, #0]
 800b47a:	693b      	ldr	r3, [r7, #16]
 800b47c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b47e:	4613      	mov	r3, r2
 800b480:	009b      	lsls	r3, r3, #2
 800b482:	4413      	add	r3, r2
 800b484:	009b      	lsls	r3, r3, #2
 800b486:	4a13      	ldr	r2, [pc, #76]	; (800b4d4 <xTaskRemoveFromEventList+0xb4>)
 800b488:	441a      	add	r2, r3
 800b48a:	693b      	ldr	r3, [r7, #16]
 800b48c:	3304      	adds	r3, #4
 800b48e:	4619      	mov	r1, r3
 800b490:	4610      	mov	r0, r2
 800b492:	f7fe fbd2 	bl	8009c3a <vListInsertEnd>
 800b496:	e005      	b.n	800b4a4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b498:	693b      	ldr	r3, [r7, #16]
 800b49a:	3318      	adds	r3, #24
 800b49c:	4619      	mov	r1, r3
 800b49e:	480e      	ldr	r0, [pc, #56]	; (800b4d8 <xTaskRemoveFromEventList+0xb8>)
 800b4a0:	f7fe fbcb 	bl	8009c3a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b4a4:	693b      	ldr	r3, [r7, #16]
 800b4a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4a8:	4b0c      	ldr	r3, [pc, #48]	; (800b4dc <xTaskRemoveFromEventList+0xbc>)
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4ae:	429a      	cmp	r2, r3
 800b4b0:	d905      	bls.n	800b4be <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b4b2:	2301      	movs	r3, #1
 800b4b4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b4b6:	4b0a      	ldr	r3, [pc, #40]	; (800b4e0 <xTaskRemoveFromEventList+0xc0>)
 800b4b8:	2201      	movs	r2, #1
 800b4ba:	601a      	str	r2, [r3, #0]
 800b4bc:	e001      	b.n	800b4c2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b4c2:	697b      	ldr	r3, [r7, #20]
}
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	3718      	adds	r7, #24
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	bd80      	pop	{r7, pc}
 800b4cc:	200005c4 	.word	0x200005c4
 800b4d0:	200005a4 	.word	0x200005a4
 800b4d4:	200004a0 	.word	0x200004a0
 800b4d8:	2000055c 	.word	0x2000055c
 800b4dc:	2000049c 	.word	0x2000049c
 800b4e0:	200005b0 	.word	0x200005b0

0800b4e4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b4e4:	b480      	push	{r7}
 800b4e6:	b083      	sub	sp, #12
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b4ec:	4b06      	ldr	r3, [pc, #24]	; (800b508 <vTaskInternalSetTimeOutState+0x24>)
 800b4ee:	681a      	ldr	r2, [r3, #0]
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b4f4:	4b05      	ldr	r3, [pc, #20]	; (800b50c <vTaskInternalSetTimeOutState+0x28>)
 800b4f6:	681a      	ldr	r2, [r3, #0]
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	605a      	str	r2, [r3, #4]
}
 800b4fc:	bf00      	nop
 800b4fe:	370c      	adds	r7, #12
 800b500:	46bd      	mov	sp, r7
 800b502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b506:	4770      	bx	lr
 800b508:	200005b4 	.word	0x200005b4
 800b50c:	200005a0 	.word	0x200005a0

0800b510 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b088      	sub	sp, #32
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
 800b518:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d10a      	bne.n	800b536 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b520:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b524:	f383 8811 	msr	BASEPRI, r3
 800b528:	f3bf 8f6f 	isb	sy
 800b52c:	f3bf 8f4f 	dsb	sy
 800b530:	613b      	str	r3, [r7, #16]
}
 800b532:	bf00      	nop
 800b534:	e7fe      	b.n	800b534 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d10a      	bne.n	800b552 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b53c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b540:	f383 8811 	msr	BASEPRI, r3
 800b544:	f3bf 8f6f 	isb	sy
 800b548:	f3bf 8f4f 	dsb	sy
 800b54c:	60fb      	str	r3, [r7, #12]
}
 800b54e:	bf00      	nop
 800b550:	e7fe      	b.n	800b550 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b552:	f000 fc6f 	bl	800be34 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b556:	4b1d      	ldr	r3, [pc, #116]	; (800b5cc <xTaskCheckForTimeOut+0xbc>)
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	685b      	ldr	r3, [r3, #4]
 800b560:	69ba      	ldr	r2, [r7, #24]
 800b562:	1ad3      	subs	r3, r2, r3
 800b564:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b56e:	d102      	bne.n	800b576 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b570:	2300      	movs	r3, #0
 800b572:	61fb      	str	r3, [r7, #28]
 800b574:	e023      	b.n	800b5be <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681a      	ldr	r2, [r3, #0]
 800b57a:	4b15      	ldr	r3, [pc, #84]	; (800b5d0 <xTaskCheckForTimeOut+0xc0>)
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	429a      	cmp	r2, r3
 800b580:	d007      	beq.n	800b592 <xTaskCheckForTimeOut+0x82>
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	685b      	ldr	r3, [r3, #4]
 800b586:	69ba      	ldr	r2, [r7, #24]
 800b588:	429a      	cmp	r2, r3
 800b58a:	d302      	bcc.n	800b592 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b58c:	2301      	movs	r3, #1
 800b58e:	61fb      	str	r3, [r7, #28]
 800b590:	e015      	b.n	800b5be <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	697a      	ldr	r2, [r7, #20]
 800b598:	429a      	cmp	r2, r3
 800b59a:	d20b      	bcs.n	800b5b4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	681a      	ldr	r2, [r3, #0]
 800b5a0:	697b      	ldr	r3, [r7, #20]
 800b5a2:	1ad2      	subs	r2, r2, r3
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b5a8:	6878      	ldr	r0, [r7, #4]
 800b5aa:	f7ff ff9b 	bl	800b4e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	61fb      	str	r3, [r7, #28]
 800b5b2:	e004      	b.n	800b5be <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b5ba:	2301      	movs	r3, #1
 800b5bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b5be:	f000 fc69 	bl	800be94 <vPortExitCritical>

	return xReturn;
 800b5c2:	69fb      	ldr	r3, [r7, #28]
}
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	3720      	adds	r7, #32
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	bd80      	pop	{r7, pc}
 800b5cc:	200005a0 	.word	0x200005a0
 800b5d0:	200005b4 	.word	0x200005b4

0800b5d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b5d4:	b480      	push	{r7}
 800b5d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b5d8:	4b03      	ldr	r3, [pc, #12]	; (800b5e8 <vTaskMissedYield+0x14>)
 800b5da:	2201      	movs	r2, #1
 800b5dc:	601a      	str	r2, [r3, #0]
}
 800b5de:	bf00      	nop
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e6:	4770      	bx	lr
 800b5e8:	200005b0 	.word	0x200005b0

0800b5ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b082      	sub	sp, #8
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b5f4:	f000 f852 	bl	800b69c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b5f8:	4b06      	ldr	r3, [pc, #24]	; (800b614 <prvIdleTask+0x28>)
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	2b01      	cmp	r3, #1
 800b5fe:	d9f9      	bls.n	800b5f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b600:	4b05      	ldr	r3, [pc, #20]	; (800b618 <prvIdleTask+0x2c>)
 800b602:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b606:	601a      	str	r2, [r3, #0]
 800b608:	f3bf 8f4f 	dsb	sy
 800b60c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b610:	e7f0      	b.n	800b5f4 <prvIdleTask+0x8>
 800b612:	bf00      	nop
 800b614:	200004a0 	.word	0x200004a0
 800b618:	e000ed04 	.word	0xe000ed04

0800b61c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b082      	sub	sp, #8
 800b620:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b622:	2300      	movs	r3, #0
 800b624:	607b      	str	r3, [r7, #4]
 800b626:	e00c      	b.n	800b642 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b628:	687a      	ldr	r2, [r7, #4]
 800b62a:	4613      	mov	r3, r2
 800b62c:	009b      	lsls	r3, r3, #2
 800b62e:	4413      	add	r3, r2
 800b630:	009b      	lsls	r3, r3, #2
 800b632:	4a12      	ldr	r2, [pc, #72]	; (800b67c <prvInitialiseTaskLists+0x60>)
 800b634:	4413      	add	r3, r2
 800b636:	4618      	mov	r0, r3
 800b638:	f7fe fad2 	bl	8009be0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	3301      	adds	r3, #1
 800b640:	607b      	str	r3, [r7, #4]
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2b06      	cmp	r3, #6
 800b646:	d9ef      	bls.n	800b628 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b648:	480d      	ldr	r0, [pc, #52]	; (800b680 <prvInitialiseTaskLists+0x64>)
 800b64a:	f7fe fac9 	bl	8009be0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b64e:	480d      	ldr	r0, [pc, #52]	; (800b684 <prvInitialiseTaskLists+0x68>)
 800b650:	f7fe fac6 	bl	8009be0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b654:	480c      	ldr	r0, [pc, #48]	; (800b688 <prvInitialiseTaskLists+0x6c>)
 800b656:	f7fe fac3 	bl	8009be0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b65a:	480c      	ldr	r0, [pc, #48]	; (800b68c <prvInitialiseTaskLists+0x70>)
 800b65c:	f7fe fac0 	bl	8009be0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b660:	480b      	ldr	r0, [pc, #44]	; (800b690 <prvInitialiseTaskLists+0x74>)
 800b662:	f7fe fabd 	bl	8009be0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b666:	4b0b      	ldr	r3, [pc, #44]	; (800b694 <prvInitialiseTaskLists+0x78>)
 800b668:	4a05      	ldr	r2, [pc, #20]	; (800b680 <prvInitialiseTaskLists+0x64>)
 800b66a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b66c:	4b0a      	ldr	r3, [pc, #40]	; (800b698 <prvInitialiseTaskLists+0x7c>)
 800b66e:	4a05      	ldr	r2, [pc, #20]	; (800b684 <prvInitialiseTaskLists+0x68>)
 800b670:	601a      	str	r2, [r3, #0]
}
 800b672:	bf00      	nop
 800b674:	3708      	adds	r7, #8
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}
 800b67a:	bf00      	nop
 800b67c:	200004a0 	.word	0x200004a0
 800b680:	2000052c 	.word	0x2000052c
 800b684:	20000540 	.word	0x20000540
 800b688:	2000055c 	.word	0x2000055c
 800b68c:	20000570 	.word	0x20000570
 800b690:	20000588 	.word	0x20000588
 800b694:	20000554 	.word	0x20000554
 800b698:	20000558 	.word	0x20000558

0800b69c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b082      	sub	sp, #8
 800b6a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b6a2:	e019      	b.n	800b6d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b6a4:	f000 fbc6 	bl	800be34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6a8:	4b10      	ldr	r3, [pc, #64]	; (800b6ec <prvCheckTasksWaitingTermination+0x50>)
 800b6aa:	68db      	ldr	r3, [r3, #12]
 800b6ac:	68db      	ldr	r3, [r3, #12]
 800b6ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	3304      	adds	r3, #4
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	f7fe fb1d 	bl	8009cf4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b6ba:	4b0d      	ldr	r3, [pc, #52]	; (800b6f0 <prvCheckTasksWaitingTermination+0x54>)
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	3b01      	subs	r3, #1
 800b6c0:	4a0b      	ldr	r2, [pc, #44]	; (800b6f0 <prvCheckTasksWaitingTermination+0x54>)
 800b6c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b6c4:	4b0b      	ldr	r3, [pc, #44]	; (800b6f4 <prvCheckTasksWaitingTermination+0x58>)
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	3b01      	subs	r3, #1
 800b6ca:	4a0a      	ldr	r2, [pc, #40]	; (800b6f4 <prvCheckTasksWaitingTermination+0x58>)
 800b6cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b6ce:	f000 fbe1 	bl	800be94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f000 f810 	bl	800b6f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b6d8:	4b06      	ldr	r3, [pc, #24]	; (800b6f4 <prvCheckTasksWaitingTermination+0x58>)
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d1e1      	bne.n	800b6a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b6e0:	bf00      	nop
 800b6e2:	bf00      	nop
 800b6e4:	3708      	adds	r7, #8
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bd80      	pop	{r7, pc}
 800b6ea:	bf00      	nop
 800b6ec:	20000570 	.word	0x20000570
 800b6f0:	2000059c 	.word	0x2000059c
 800b6f4:	20000584 	.word	0x20000584

0800b6f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b084      	sub	sp, #16
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b706:	2b00      	cmp	r3, #0
 800b708:	d108      	bne.n	800b71c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b70e:	4618      	mov	r0, r3
 800b710:	f000 fd7e 	bl	800c210 <vPortFree>
				vPortFree( pxTCB );
 800b714:	6878      	ldr	r0, [r7, #4]
 800b716:	f000 fd7b 	bl	800c210 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b71a:	e018      	b.n	800b74e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b722:	2b01      	cmp	r3, #1
 800b724:	d103      	bne.n	800b72e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b726:	6878      	ldr	r0, [r7, #4]
 800b728:	f000 fd72 	bl	800c210 <vPortFree>
	}
 800b72c:	e00f      	b.n	800b74e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b734:	2b02      	cmp	r3, #2
 800b736:	d00a      	beq.n	800b74e <prvDeleteTCB+0x56>
	__asm volatile
 800b738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b73c:	f383 8811 	msr	BASEPRI, r3
 800b740:	f3bf 8f6f 	isb	sy
 800b744:	f3bf 8f4f 	dsb	sy
 800b748:	60fb      	str	r3, [r7, #12]
}
 800b74a:	bf00      	nop
 800b74c:	e7fe      	b.n	800b74c <prvDeleteTCB+0x54>
	}
 800b74e:	bf00      	nop
 800b750:	3710      	adds	r7, #16
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}
	...

0800b758 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b758:	b480      	push	{r7}
 800b75a:	b083      	sub	sp, #12
 800b75c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b75e:	4b0c      	ldr	r3, [pc, #48]	; (800b790 <prvResetNextTaskUnblockTime+0x38>)
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d104      	bne.n	800b772 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b768:	4b0a      	ldr	r3, [pc, #40]	; (800b794 <prvResetNextTaskUnblockTime+0x3c>)
 800b76a:	f04f 32ff 	mov.w	r2, #4294967295
 800b76e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b770:	e008      	b.n	800b784 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b772:	4b07      	ldr	r3, [pc, #28]	; (800b790 <prvResetNextTaskUnblockTime+0x38>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	68db      	ldr	r3, [r3, #12]
 800b778:	68db      	ldr	r3, [r3, #12]
 800b77a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	685b      	ldr	r3, [r3, #4]
 800b780:	4a04      	ldr	r2, [pc, #16]	; (800b794 <prvResetNextTaskUnblockTime+0x3c>)
 800b782:	6013      	str	r3, [r2, #0]
}
 800b784:	bf00      	nop
 800b786:	370c      	adds	r7, #12
 800b788:	46bd      	mov	sp, r7
 800b78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78e:	4770      	bx	lr
 800b790:	20000554 	.word	0x20000554
 800b794:	200005bc 	.word	0x200005bc

0800b798 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b798:	b480      	push	{r7}
 800b79a:	b083      	sub	sp, #12
 800b79c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b79e:	4b0b      	ldr	r3, [pc, #44]	; (800b7cc <xTaskGetSchedulerState+0x34>)
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d102      	bne.n	800b7ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b7a6:	2301      	movs	r3, #1
 800b7a8:	607b      	str	r3, [r7, #4]
 800b7aa:	e008      	b.n	800b7be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b7ac:	4b08      	ldr	r3, [pc, #32]	; (800b7d0 <xTaskGetSchedulerState+0x38>)
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d102      	bne.n	800b7ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b7b4:	2302      	movs	r3, #2
 800b7b6:	607b      	str	r3, [r7, #4]
 800b7b8:	e001      	b.n	800b7be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b7be:	687b      	ldr	r3, [r7, #4]
	}
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	370c      	adds	r7, #12
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ca:	4770      	bx	lr
 800b7cc:	200005a8 	.word	0x200005a8
 800b7d0:	200005c4 	.word	0x200005c4

0800b7d4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b084      	sub	sp, #16
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d05e      	beq.n	800b8a8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b7ea:	68bb      	ldr	r3, [r7, #8]
 800b7ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7ee:	4b31      	ldr	r3, [pc, #196]	; (800b8b4 <xTaskPriorityInherit+0xe0>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7f4:	429a      	cmp	r2, r3
 800b7f6:	d24e      	bcs.n	800b896 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b7f8:	68bb      	ldr	r3, [r7, #8]
 800b7fa:	699b      	ldr	r3, [r3, #24]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	db06      	blt.n	800b80e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b800:	4b2c      	ldr	r3, [pc, #176]	; (800b8b4 <xTaskPriorityInherit+0xe0>)
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b806:	f1c3 0207 	rsb	r2, r3, #7
 800b80a:	68bb      	ldr	r3, [r7, #8]
 800b80c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b80e:	68bb      	ldr	r3, [r7, #8]
 800b810:	6959      	ldr	r1, [r3, #20]
 800b812:	68bb      	ldr	r3, [r7, #8]
 800b814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b816:	4613      	mov	r3, r2
 800b818:	009b      	lsls	r3, r3, #2
 800b81a:	4413      	add	r3, r2
 800b81c:	009b      	lsls	r3, r3, #2
 800b81e:	4a26      	ldr	r2, [pc, #152]	; (800b8b8 <xTaskPriorityInherit+0xe4>)
 800b820:	4413      	add	r3, r2
 800b822:	4299      	cmp	r1, r3
 800b824:	d12f      	bne.n	800b886 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b826:	68bb      	ldr	r3, [r7, #8]
 800b828:	3304      	adds	r3, #4
 800b82a:	4618      	mov	r0, r3
 800b82c:	f7fe fa62 	bl	8009cf4 <uxListRemove>
 800b830:	4603      	mov	r3, r0
 800b832:	2b00      	cmp	r3, #0
 800b834:	d10a      	bne.n	800b84c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800b836:	68bb      	ldr	r3, [r7, #8]
 800b838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b83a:	2201      	movs	r2, #1
 800b83c:	fa02 f303 	lsl.w	r3, r2, r3
 800b840:	43da      	mvns	r2, r3
 800b842:	4b1e      	ldr	r3, [pc, #120]	; (800b8bc <xTaskPriorityInherit+0xe8>)
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	4013      	ands	r3, r2
 800b848:	4a1c      	ldr	r2, [pc, #112]	; (800b8bc <xTaskPriorityInherit+0xe8>)
 800b84a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b84c:	4b19      	ldr	r3, [pc, #100]	; (800b8b4 <xTaskPriorityInherit+0xe0>)
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b852:	68bb      	ldr	r3, [r7, #8]
 800b854:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b856:	68bb      	ldr	r3, [r7, #8]
 800b858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b85a:	2201      	movs	r2, #1
 800b85c:	409a      	lsls	r2, r3
 800b85e:	4b17      	ldr	r3, [pc, #92]	; (800b8bc <xTaskPriorityInherit+0xe8>)
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	4313      	orrs	r3, r2
 800b864:	4a15      	ldr	r2, [pc, #84]	; (800b8bc <xTaskPriorityInherit+0xe8>)
 800b866:	6013      	str	r3, [r2, #0]
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b86c:	4613      	mov	r3, r2
 800b86e:	009b      	lsls	r3, r3, #2
 800b870:	4413      	add	r3, r2
 800b872:	009b      	lsls	r3, r3, #2
 800b874:	4a10      	ldr	r2, [pc, #64]	; (800b8b8 <xTaskPriorityInherit+0xe4>)
 800b876:	441a      	add	r2, r3
 800b878:	68bb      	ldr	r3, [r7, #8]
 800b87a:	3304      	adds	r3, #4
 800b87c:	4619      	mov	r1, r3
 800b87e:	4610      	mov	r0, r2
 800b880:	f7fe f9db 	bl	8009c3a <vListInsertEnd>
 800b884:	e004      	b.n	800b890 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b886:	4b0b      	ldr	r3, [pc, #44]	; (800b8b4 <xTaskPriorityInherit+0xe0>)
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b890:	2301      	movs	r3, #1
 800b892:	60fb      	str	r3, [r7, #12]
 800b894:	e008      	b.n	800b8a8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b896:	68bb      	ldr	r3, [r7, #8]
 800b898:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b89a:	4b06      	ldr	r3, [pc, #24]	; (800b8b4 <xTaskPriorityInherit+0xe0>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8a0:	429a      	cmp	r2, r3
 800b8a2:	d201      	bcs.n	800b8a8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b8a4:	2301      	movs	r3, #1
 800b8a6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
	}
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	3710      	adds	r7, #16
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	bd80      	pop	{r7, pc}
 800b8b2:	bf00      	nop
 800b8b4:	2000049c 	.word	0x2000049c
 800b8b8:	200004a0 	.word	0x200004a0
 800b8bc:	200005a4 	.word	0x200005a4

0800b8c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b086      	sub	sp, #24
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d06e      	beq.n	800b9b4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b8d6:	4b3a      	ldr	r3, [pc, #232]	; (800b9c0 <xTaskPriorityDisinherit+0x100>)
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	693a      	ldr	r2, [r7, #16]
 800b8dc:	429a      	cmp	r2, r3
 800b8de:	d00a      	beq.n	800b8f6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b8e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8e4:	f383 8811 	msr	BASEPRI, r3
 800b8e8:	f3bf 8f6f 	isb	sy
 800b8ec:	f3bf 8f4f 	dsb	sy
 800b8f0:	60fb      	str	r3, [r7, #12]
}
 800b8f2:	bf00      	nop
 800b8f4:	e7fe      	b.n	800b8f4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b8f6:	693b      	ldr	r3, [r7, #16]
 800b8f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d10a      	bne.n	800b914 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b8fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b902:	f383 8811 	msr	BASEPRI, r3
 800b906:	f3bf 8f6f 	isb	sy
 800b90a:	f3bf 8f4f 	dsb	sy
 800b90e:	60bb      	str	r3, [r7, #8]
}
 800b910:	bf00      	nop
 800b912:	e7fe      	b.n	800b912 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b914:	693b      	ldr	r3, [r7, #16]
 800b916:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b918:	1e5a      	subs	r2, r3, #1
 800b91a:	693b      	ldr	r3, [r7, #16]
 800b91c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b91e:	693b      	ldr	r3, [r7, #16]
 800b920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b922:	693b      	ldr	r3, [r7, #16]
 800b924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b926:	429a      	cmp	r2, r3
 800b928:	d044      	beq.n	800b9b4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b92a:	693b      	ldr	r3, [r7, #16]
 800b92c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d140      	bne.n	800b9b4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b932:	693b      	ldr	r3, [r7, #16]
 800b934:	3304      	adds	r3, #4
 800b936:	4618      	mov	r0, r3
 800b938:	f7fe f9dc 	bl	8009cf4 <uxListRemove>
 800b93c:	4603      	mov	r3, r0
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d115      	bne.n	800b96e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b942:	693b      	ldr	r3, [r7, #16]
 800b944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b946:	491f      	ldr	r1, [pc, #124]	; (800b9c4 <xTaskPriorityDisinherit+0x104>)
 800b948:	4613      	mov	r3, r2
 800b94a:	009b      	lsls	r3, r3, #2
 800b94c:	4413      	add	r3, r2
 800b94e:	009b      	lsls	r3, r3, #2
 800b950:	440b      	add	r3, r1
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d10a      	bne.n	800b96e <xTaskPriorityDisinherit+0xae>
 800b958:	693b      	ldr	r3, [r7, #16]
 800b95a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b95c:	2201      	movs	r2, #1
 800b95e:	fa02 f303 	lsl.w	r3, r2, r3
 800b962:	43da      	mvns	r2, r3
 800b964:	4b18      	ldr	r3, [pc, #96]	; (800b9c8 <xTaskPriorityDisinherit+0x108>)
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	4013      	ands	r3, r2
 800b96a:	4a17      	ldr	r2, [pc, #92]	; (800b9c8 <xTaskPriorityDisinherit+0x108>)
 800b96c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b96e:	693b      	ldr	r3, [r7, #16]
 800b970:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b972:	693b      	ldr	r3, [r7, #16]
 800b974:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b976:	693b      	ldr	r3, [r7, #16]
 800b978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b97a:	f1c3 0207 	rsb	r2, r3, #7
 800b97e:	693b      	ldr	r3, [r7, #16]
 800b980:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b982:	693b      	ldr	r3, [r7, #16]
 800b984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b986:	2201      	movs	r2, #1
 800b988:	409a      	lsls	r2, r3
 800b98a:	4b0f      	ldr	r3, [pc, #60]	; (800b9c8 <xTaskPriorityDisinherit+0x108>)
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	4313      	orrs	r3, r2
 800b990:	4a0d      	ldr	r2, [pc, #52]	; (800b9c8 <xTaskPriorityDisinherit+0x108>)
 800b992:	6013      	str	r3, [r2, #0]
 800b994:	693b      	ldr	r3, [r7, #16]
 800b996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b998:	4613      	mov	r3, r2
 800b99a:	009b      	lsls	r3, r3, #2
 800b99c:	4413      	add	r3, r2
 800b99e:	009b      	lsls	r3, r3, #2
 800b9a0:	4a08      	ldr	r2, [pc, #32]	; (800b9c4 <xTaskPriorityDisinherit+0x104>)
 800b9a2:	441a      	add	r2, r3
 800b9a4:	693b      	ldr	r3, [r7, #16]
 800b9a6:	3304      	adds	r3, #4
 800b9a8:	4619      	mov	r1, r3
 800b9aa:	4610      	mov	r0, r2
 800b9ac:	f7fe f945 	bl	8009c3a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b9b0:	2301      	movs	r3, #1
 800b9b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b9b4:	697b      	ldr	r3, [r7, #20]
	}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	3718      	adds	r7, #24
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}
 800b9be:	bf00      	nop
 800b9c0:	2000049c 	.word	0x2000049c
 800b9c4:	200004a0 	.word	0x200004a0
 800b9c8:	200005a4 	.word	0x200005a4

0800b9cc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b088      	sub	sp, #32
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
 800b9d4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b9da:	2301      	movs	r3, #1
 800b9dc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d077      	beq.n	800bad4 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b9e4:	69bb      	ldr	r3, [r7, #24]
 800b9e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d10a      	bne.n	800ba02 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800b9ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9f0:	f383 8811 	msr	BASEPRI, r3
 800b9f4:	f3bf 8f6f 	isb	sy
 800b9f8:	f3bf 8f4f 	dsb	sy
 800b9fc:	60fb      	str	r3, [r7, #12]
}
 800b9fe:	bf00      	nop
 800ba00:	e7fe      	b.n	800ba00 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ba02:	69bb      	ldr	r3, [r7, #24]
 800ba04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba06:	683a      	ldr	r2, [r7, #0]
 800ba08:	429a      	cmp	r2, r3
 800ba0a:	d902      	bls.n	800ba12 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	61fb      	str	r3, [r7, #28]
 800ba10:	e002      	b.n	800ba18 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ba12:	69bb      	ldr	r3, [r7, #24]
 800ba14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba16:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ba18:	69bb      	ldr	r3, [r7, #24]
 800ba1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba1c:	69fa      	ldr	r2, [r7, #28]
 800ba1e:	429a      	cmp	r2, r3
 800ba20:	d058      	beq.n	800bad4 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ba22:	69bb      	ldr	r3, [r7, #24]
 800ba24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba26:	697a      	ldr	r2, [r7, #20]
 800ba28:	429a      	cmp	r2, r3
 800ba2a:	d153      	bne.n	800bad4 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ba2c:	4b2b      	ldr	r3, [pc, #172]	; (800badc <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	69ba      	ldr	r2, [r7, #24]
 800ba32:	429a      	cmp	r2, r3
 800ba34:	d10a      	bne.n	800ba4c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800ba36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba3a:	f383 8811 	msr	BASEPRI, r3
 800ba3e:	f3bf 8f6f 	isb	sy
 800ba42:	f3bf 8f4f 	dsb	sy
 800ba46:	60bb      	str	r3, [r7, #8]
}
 800ba48:	bf00      	nop
 800ba4a:	e7fe      	b.n	800ba4a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ba4c:	69bb      	ldr	r3, [r7, #24]
 800ba4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba50:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ba52:	69bb      	ldr	r3, [r7, #24]
 800ba54:	69fa      	ldr	r2, [r7, #28]
 800ba56:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ba58:	69bb      	ldr	r3, [r7, #24]
 800ba5a:	699b      	ldr	r3, [r3, #24]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	db04      	blt.n	800ba6a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba60:	69fb      	ldr	r3, [r7, #28]
 800ba62:	f1c3 0207 	rsb	r2, r3, #7
 800ba66:	69bb      	ldr	r3, [r7, #24]
 800ba68:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ba6a:	69bb      	ldr	r3, [r7, #24]
 800ba6c:	6959      	ldr	r1, [r3, #20]
 800ba6e:	693a      	ldr	r2, [r7, #16]
 800ba70:	4613      	mov	r3, r2
 800ba72:	009b      	lsls	r3, r3, #2
 800ba74:	4413      	add	r3, r2
 800ba76:	009b      	lsls	r3, r3, #2
 800ba78:	4a19      	ldr	r2, [pc, #100]	; (800bae0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800ba7a:	4413      	add	r3, r2
 800ba7c:	4299      	cmp	r1, r3
 800ba7e:	d129      	bne.n	800bad4 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba80:	69bb      	ldr	r3, [r7, #24]
 800ba82:	3304      	adds	r3, #4
 800ba84:	4618      	mov	r0, r3
 800ba86:	f7fe f935 	bl	8009cf4 <uxListRemove>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d10a      	bne.n	800baa6 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800ba90:	69bb      	ldr	r3, [r7, #24]
 800ba92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba94:	2201      	movs	r2, #1
 800ba96:	fa02 f303 	lsl.w	r3, r2, r3
 800ba9a:	43da      	mvns	r2, r3
 800ba9c:	4b11      	ldr	r3, [pc, #68]	; (800bae4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	4013      	ands	r3, r2
 800baa2:	4a10      	ldr	r2, [pc, #64]	; (800bae4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800baa4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800baa6:	69bb      	ldr	r3, [r7, #24]
 800baa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baaa:	2201      	movs	r2, #1
 800baac:	409a      	lsls	r2, r3
 800baae:	4b0d      	ldr	r3, [pc, #52]	; (800bae4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	4313      	orrs	r3, r2
 800bab4:	4a0b      	ldr	r2, [pc, #44]	; (800bae4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800bab6:	6013      	str	r3, [r2, #0]
 800bab8:	69bb      	ldr	r3, [r7, #24]
 800baba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800babc:	4613      	mov	r3, r2
 800babe:	009b      	lsls	r3, r3, #2
 800bac0:	4413      	add	r3, r2
 800bac2:	009b      	lsls	r3, r3, #2
 800bac4:	4a06      	ldr	r2, [pc, #24]	; (800bae0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800bac6:	441a      	add	r2, r3
 800bac8:	69bb      	ldr	r3, [r7, #24]
 800baca:	3304      	adds	r3, #4
 800bacc:	4619      	mov	r1, r3
 800bace:	4610      	mov	r0, r2
 800bad0:	f7fe f8b3 	bl	8009c3a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bad4:	bf00      	nop
 800bad6:	3720      	adds	r7, #32
 800bad8:	46bd      	mov	sp, r7
 800bada:	bd80      	pop	{r7, pc}
 800badc:	2000049c 	.word	0x2000049c
 800bae0:	200004a0 	.word	0x200004a0
 800bae4:	200005a4 	.word	0x200005a4

0800bae8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bae8:	b480      	push	{r7}
 800baea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800baec:	4b07      	ldr	r3, [pc, #28]	; (800bb0c <pvTaskIncrementMutexHeldCount+0x24>)
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d004      	beq.n	800bafe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800baf4:	4b05      	ldr	r3, [pc, #20]	; (800bb0c <pvTaskIncrementMutexHeldCount+0x24>)
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bafa:	3201      	adds	r2, #1
 800bafc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800bafe:	4b03      	ldr	r3, [pc, #12]	; (800bb0c <pvTaskIncrementMutexHeldCount+0x24>)
 800bb00:	681b      	ldr	r3, [r3, #0]
	}
 800bb02:	4618      	mov	r0, r3
 800bb04:	46bd      	mov	sp, r7
 800bb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0a:	4770      	bx	lr
 800bb0c:	2000049c 	.word	0x2000049c

0800bb10 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b084      	sub	sp, #16
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
 800bb18:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bb1a:	4b29      	ldr	r3, [pc, #164]	; (800bbc0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb20:	4b28      	ldr	r3, [pc, #160]	; (800bbc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	3304      	adds	r3, #4
 800bb26:	4618      	mov	r0, r3
 800bb28:	f7fe f8e4 	bl	8009cf4 <uxListRemove>
 800bb2c:	4603      	mov	r3, r0
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d10b      	bne.n	800bb4a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800bb32:	4b24      	ldr	r3, [pc, #144]	; (800bbc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb38:	2201      	movs	r2, #1
 800bb3a:	fa02 f303 	lsl.w	r3, r2, r3
 800bb3e:	43da      	mvns	r2, r3
 800bb40:	4b21      	ldr	r3, [pc, #132]	; (800bbc8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	4013      	ands	r3, r2
 800bb46:	4a20      	ldr	r2, [pc, #128]	; (800bbc8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bb48:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb50:	d10a      	bne.n	800bb68 <prvAddCurrentTaskToDelayedList+0x58>
 800bb52:	683b      	ldr	r3, [r7, #0]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d007      	beq.n	800bb68 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bb58:	4b1a      	ldr	r3, [pc, #104]	; (800bbc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	3304      	adds	r3, #4
 800bb5e:	4619      	mov	r1, r3
 800bb60:	481a      	ldr	r0, [pc, #104]	; (800bbcc <prvAddCurrentTaskToDelayedList+0xbc>)
 800bb62:	f7fe f86a 	bl	8009c3a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bb66:	e026      	b.n	800bbb6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bb68:	68fa      	ldr	r2, [r7, #12]
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	4413      	add	r3, r2
 800bb6e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bb70:	4b14      	ldr	r3, [pc, #80]	; (800bbc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	68ba      	ldr	r2, [r7, #8]
 800bb76:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bb78:	68ba      	ldr	r2, [r7, #8]
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	429a      	cmp	r2, r3
 800bb7e:	d209      	bcs.n	800bb94 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bb80:	4b13      	ldr	r3, [pc, #76]	; (800bbd0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800bb82:	681a      	ldr	r2, [r3, #0]
 800bb84:	4b0f      	ldr	r3, [pc, #60]	; (800bbc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	3304      	adds	r3, #4
 800bb8a:	4619      	mov	r1, r3
 800bb8c:	4610      	mov	r0, r2
 800bb8e:	f7fe f878 	bl	8009c82 <vListInsert>
}
 800bb92:	e010      	b.n	800bbb6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bb94:	4b0f      	ldr	r3, [pc, #60]	; (800bbd4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800bb96:	681a      	ldr	r2, [r3, #0]
 800bb98:	4b0a      	ldr	r3, [pc, #40]	; (800bbc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	3304      	adds	r3, #4
 800bb9e:	4619      	mov	r1, r3
 800bba0:	4610      	mov	r0, r2
 800bba2:	f7fe f86e 	bl	8009c82 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bba6:	4b0c      	ldr	r3, [pc, #48]	; (800bbd8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	68ba      	ldr	r2, [r7, #8]
 800bbac:	429a      	cmp	r2, r3
 800bbae:	d202      	bcs.n	800bbb6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800bbb0:	4a09      	ldr	r2, [pc, #36]	; (800bbd8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800bbb2:	68bb      	ldr	r3, [r7, #8]
 800bbb4:	6013      	str	r3, [r2, #0]
}
 800bbb6:	bf00      	nop
 800bbb8:	3710      	adds	r7, #16
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}
 800bbbe:	bf00      	nop
 800bbc0:	200005a0 	.word	0x200005a0
 800bbc4:	2000049c 	.word	0x2000049c
 800bbc8:	200005a4 	.word	0x200005a4
 800bbcc:	20000588 	.word	0x20000588
 800bbd0:	20000558 	.word	0x20000558
 800bbd4:	20000554 	.word	0x20000554
 800bbd8:	200005bc 	.word	0x200005bc

0800bbdc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bbdc:	b480      	push	{r7}
 800bbde:	b085      	sub	sp, #20
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	60f8      	str	r0, [r7, #12]
 800bbe4:	60b9      	str	r1, [r7, #8]
 800bbe6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	3b04      	subs	r3, #4
 800bbec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bbf4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	3b04      	subs	r3, #4
 800bbfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bbfc:	68bb      	ldr	r3, [r7, #8]
 800bbfe:	f023 0201 	bic.w	r2, r3, #1
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	3b04      	subs	r3, #4
 800bc0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bc0c:	4a0c      	ldr	r2, [pc, #48]	; (800bc40 <pxPortInitialiseStack+0x64>)
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	3b14      	subs	r3, #20
 800bc16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bc18:	687a      	ldr	r2, [r7, #4]
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	3b04      	subs	r3, #4
 800bc22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	f06f 0202 	mvn.w	r2, #2
 800bc2a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	3b20      	subs	r3, #32
 800bc30:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bc32:	68fb      	ldr	r3, [r7, #12]
}
 800bc34:	4618      	mov	r0, r3
 800bc36:	3714      	adds	r7, #20
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3e:	4770      	bx	lr
 800bc40:	0800bc45 	.word	0x0800bc45

0800bc44 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bc44:	b480      	push	{r7}
 800bc46:	b085      	sub	sp, #20
 800bc48:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bc4e:	4b12      	ldr	r3, [pc, #72]	; (800bc98 <prvTaskExitError+0x54>)
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc56:	d00a      	beq.n	800bc6e <prvTaskExitError+0x2a>
	__asm volatile
 800bc58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc5c:	f383 8811 	msr	BASEPRI, r3
 800bc60:	f3bf 8f6f 	isb	sy
 800bc64:	f3bf 8f4f 	dsb	sy
 800bc68:	60fb      	str	r3, [r7, #12]
}
 800bc6a:	bf00      	nop
 800bc6c:	e7fe      	b.n	800bc6c <prvTaskExitError+0x28>
	__asm volatile
 800bc6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc72:	f383 8811 	msr	BASEPRI, r3
 800bc76:	f3bf 8f6f 	isb	sy
 800bc7a:	f3bf 8f4f 	dsb	sy
 800bc7e:	60bb      	str	r3, [r7, #8]
}
 800bc80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bc82:	bf00      	nop
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d0fc      	beq.n	800bc84 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bc8a:	bf00      	nop
 800bc8c:	bf00      	nop
 800bc8e:	3714      	adds	r7, #20
 800bc90:	46bd      	mov	sp, r7
 800bc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc96:	4770      	bx	lr
 800bc98:	2000011c 	.word	0x2000011c
 800bc9c:	00000000 	.word	0x00000000

0800bca0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bca0:	4b07      	ldr	r3, [pc, #28]	; (800bcc0 <pxCurrentTCBConst2>)
 800bca2:	6819      	ldr	r1, [r3, #0]
 800bca4:	6808      	ldr	r0, [r1, #0]
 800bca6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcaa:	f380 8809 	msr	PSP, r0
 800bcae:	f3bf 8f6f 	isb	sy
 800bcb2:	f04f 0000 	mov.w	r0, #0
 800bcb6:	f380 8811 	msr	BASEPRI, r0
 800bcba:	4770      	bx	lr
 800bcbc:	f3af 8000 	nop.w

0800bcc0 <pxCurrentTCBConst2>:
 800bcc0:	2000049c 	.word	0x2000049c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bcc4:	bf00      	nop
 800bcc6:	bf00      	nop

0800bcc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bcc8:	4808      	ldr	r0, [pc, #32]	; (800bcec <prvPortStartFirstTask+0x24>)
 800bcca:	6800      	ldr	r0, [r0, #0]
 800bccc:	6800      	ldr	r0, [r0, #0]
 800bcce:	f380 8808 	msr	MSP, r0
 800bcd2:	f04f 0000 	mov.w	r0, #0
 800bcd6:	f380 8814 	msr	CONTROL, r0
 800bcda:	b662      	cpsie	i
 800bcdc:	b661      	cpsie	f
 800bcde:	f3bf 8f4f 	dsb	sy
 800bce2:	f3bf 8f6f 	isb	sy
 800bce6:	df00      	svc	0
 800bce8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bcea:	bf00      	nop
 800bcec:	e000ed08 	.word	0xe000ed08

0800bcf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b086      	sub	sp, #24
 800bcf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bcf6:	4b46      	ldr	r3, [pc, #280]	; (800be10 <xPortStartScheduler+0x120>)
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	4a46      	ldr	r2, [pc, #280]	; (800be14 <xPortStartScheduler+0x124>)
 800bcfc:	4293      	cmp	r3, r2
 800bcfe:	d10a      	bne.n	800bd16 <xPortStartScheduler+0x26>
	__asm volatile
 800bd00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd04:	f383 8811 	msr	BASEPRI, r3
 800bd08:	f3bf 8f6f 	isb	sy
 800bd0c:	f3bf 8f4f 	dsb	sy
 800bd10:	613b      	str	r3, [r7, #16]
}
 800bd12:	bf00      	nop
 800bd14:	e7fe      	b.n	800bd14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bd16:	4b3e      	ldr	r3, [pc, #248]	; (800be10 <xPortStartScheduler+0x120>)
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	4a3f      	ldr	r2, [pc, #252]	; (800be18 <xPortStartScheduler+0x128>)
 800bd1c:	4293      	cmp	r3, r2
 800bd1e:	d10a      	bne.n	800bd36 <xPortStartScheduler+0x46>
	__asm volatile
 800bd20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd24:	f383 8811 	msr	BASEPRI, r3
 800bd28:	f3bf 8f6f 	isb	sy
 800bd2c:	f3bf 8f4f 	dsb	sy
 800bd30:	60fb      	str	r3, [r7, #12]
}
 800bd32:	bf00      	nop
 800bd34:	e7fe      	b.n	800bd34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bd36:	4b39      	ldr	r3, [pc, #228]	; (800be1c <xPortStartScheduler+0x12c>)
 800bd38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bd3a:	697b      	ldr	r3, [r7, #20]
 800bd3c:	781b      	ldrb	r3, [r3, #0]
 800bd3e:	b2db      	uxtb	r3, r3
 800bd40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bd42:	697b      	ldr	r3, [r7, #20]
 800bd44:	22ff      	movs	r2, #255	; 0xff
 800bd46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bd48:	697b      	ldr	r3, [r7, #20]
 800bd4a:	781b      	ldrb	r3, [r3, #0]
 800bd4c:	b2db      	uxtb	r3, r3
 800bd4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bd50:	78fb      	ldrb	r3, [r7, #3]
 800bd52:	b2db      	uxtb	r3, r3
 800bd54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bd58:	b2da      	uxtb	r2, r3
 800bd5a:	4b31      	ldr	r3, [pc, #196]	; (800be20 <xPortStartScheduler+0x130>)
 800bd5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bd5e:	4b31      	ldr	r3, [pc, #196]	; (800be24 <xPortStartScheduler+0x134>)
 800bd60:	2207      	movs	r2, #7
 800bd62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bd64:	e009      	b.n	800bd7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800bd66:	4b2f      	ldr	r3, [pc, #188]	; (800be24 <xPortStartScheduler+0x134>)
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	3b01      	subs	r3, #1
 800bd6c:	4a2d      	ldr	r2, [pc, #180]	; (800be24 <xPortStartScheduler+0x134>)
 800bd6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bd70:	78fb      	ldrb	r3, [r7, #3]
 800bd72:	b2db      	uxtb	r3, r3
 800bd74:	005b      	lsls	r3, r3, #1
 800bd76:	b2db      	uxtb	r3, r3
 800bd78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bd7a:	78fb      	ldrb	r3, [r7, #3]
 800bd7c:	b2db      	uxtb	r3, r3
 800bd7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd82:	2b80      	cmp	r3, #128	; 0x80
 800bd84:	d0ef      	beq.n	800bd66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bd86:	4b27      	ldr	r3, [pc, #156]	; (800be24 <xPortStartScheduler+0x134>)
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	f1c3 0307 	rsb	r3, r3, #7
 800bd8e:	2b04      	cmp	r3, #4
 800bd90:	d00a      	beq.n	800bda8 <xPortStartScheduler+0xb8>
	__asm volatile
 800bd92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd96:	f383 8811 	msr	BASEPRI, r3
 800bd9a:	f3bf 8f6f 	isb	sy
 800bd9e:	f3bf 8f4f 	dsb	sy
 800bda2:	60bb      	str	r3, [r7, #8]
}
 800bda4:	bf00      	nop
 800bda6:	e7fe      	b.n	800bda6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bda8:	4b1e      	ldr	r3, [pc, #120]	; (800be24 <xPortStartScheduler+0x134>)
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	021b      	lsls	r3, r3, #8
 800bdae:	4a1d      	ldr	r2, [pc, #116]	; (800be24 <xPortStartScheduler+0x134>)
 800bdb0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bdb2:	4b1c      	ldr	r3, [pc, #112]	; (800be24 <xPortStartScheduler+0x134>)
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bdba:	4a1a      	ldr	r2, [pc, #104]	; (800be24 <xPortStartScheduler+0x134>)
 800bdbc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	b2da      	uxtb	r2, r3
 800bdc2:	697b      	ldr	r3, [r7, #20]
 800bdc4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bdc6:	4b18      	ldr	r3, [pc, #96]	; (800be28 <xPortStartScheduler+0x138>)
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	4a17      	ldr	r2, [pc, #92]	; (800be28 <xPortStartScheduler+0x138>)
 800bdcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bdd0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bdd2:	4b15      	ldr	r3, [pc, #84]	; (800be28 <xPortStartScheduler+0x138>)
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	4a14      	ldr	r2, [pc, #80]	; (800be28 <xPortStartScheduler+0x138>)
 800bdd8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bddc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bdde:	f000 f8dd 	bl	800bf9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bde2:	4b12      	ldr	r3, [pc, #72]	; (800be2c <xPortStartScheduler+0x13c>)
 800bde4:	2200      	movs	r2, #0
 800bde6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bde8:	f000 f8fc 	bl	800bfe4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bdec:	4b10      	ldr	r3, [pc, #64]	; (800be30 <xPortStartScheduler+0x140>)
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	4a0f      	ldr	r2, [pc, #60]	; (800be30 <xPortStartScheduler+0x140>)
 800bdf2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bdf6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bdf8:	f7ff ff66 	bl	800bcc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bdfc:	f7ff fa90 	bl	800b320 <vTaskSwitchContext>
	prvTaskExitError();
 800be00:	f7ff ff20 	bl	800bc44 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800be04:	2300      	movs	r3, #0
}
 800be06:	4618      	mov	r0, r3
 800be08:	3718      	adds	r7, #24
 800be0a:	46bd      	mov	sp, r7
 800be0c:	bd80      	pop	{r7, pc}
 800be0e:	bf00      	nop
 800be10:	e000ed00 	.word	0xe000ed00
 800be14:	410fc271 	.word	0x410fc271
 800be18:	410fc270 	.word	0x410fc270
 800be1c:	e000e400 	.word	0xe000e400
 800be20:	200005c8 	.word	0x200005c8
 800be24:	200005cc 	.word	0x200005cc
 800be28:	e000ed20 	.word	0xe000ed20
 800be2c:	2000011c 	.word	0x2000011c
 800be30:	e000ef34 	.word	0xe000ef34

0800be34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800be34:	b480      	push	{r7}
 800be36:	b083      	sub	sp, #12
 800be38:	af00      	add	r7, sp, #0
	__asm volatile
 800be3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be3e:	f383 8811 	msr	BASEPRI, r3
 800be42:	f3bf 8f6f 	isb	sy
 800be46:	f3bf 8f4f 	dsb	sy
 800be4a:	607b      	str	r3, [r7, #4]
}
 800be4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800be4e:	4b0f      	ldr	r3, [pc, #60]	; (800be8c <vPortEnterCritical+0x58>)
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	3301      	adds	r3, #1
 800be54:	4a0d      	ldr	r2, [pc, #52]	; (800be8c <vPortEnterCritical+0x58>)
 800be56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800be58:	4b0c      	ldr	r3, [pc, #48]	; (800be8c <vPortEnterCritical+0x58>)
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	2b01      	cmp	r3, #1
 800be5e:	d10f      	bne.n	800be80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800be60:	4b0b      	ldr	r3, [pc, #44]	; (800be90 <vPortEnterCritical+0x5c>)
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	b2db      	uxtb	r3, r3
 800be66:	2b00      	cmp	r3, #0
 800be68:	d00a      	beq.n	800be80 <vPortEnterCritical+0x4c>
	__asm volatile
 800be6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be6e:	f383 8811 	msr	BASEPRI, r3
 800be72:	f3bf 8f6f 	isb	sy
 800be76:	f3bf 8f4f 	dsb	sy
 800be7a:	603b      	str	r3, [r7, #0]
}
 800be7c:	bf00      	nop
 800be7e:	e7fe      	b.n	800be7e <vPortEnterCritical+0x4a>
	}
}
 800be80:	bf00      	nop
 800be82:	370c      	adds	r7, #12
 800be84:	46bd      	mov	sp, r7
 800be86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8a:	4770      	bx	lr
 800be8c:	2000011c 	.word	0x2000011c
 800be90:	e000ed04 	.word	0xe000ed04

0800be94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800be94:	b480      	push	{r7}
 800be96:	b083      	sub	sp, #12
 800be98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800be9a:	4b12      	ldr	r3, [pc, #72]	; (800bee4 <vPortExitCritical+0x50>)
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d10a      	bne.n	800beb8 <vPortExitCritical+0x24>
	__asm volatile
 800bea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bea6:	f383 8811 	msr	BASEPRI, r3
 800beaa:	f3bf 8f6f 	isb	sy
 800beae:	f3bf 8f4f 	dsb	sy
 800beb2:	607b      	str	r3, [r7, #4]
}
 800beb4:	bf00      	nop
 800beb6:	e7fe      	b.n	800beb6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800beb8:	4b0a      	ldr	r3, [pc, #40]	; (800bee4 <vPortExitCritical+0x50>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	3b01      	subs	r3, #1
 800bebe:	4a09      	ldr	r2, [pc, #36]	; (800bee4 <vPortExitCritical+0x50>)
 800bec0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bec2:	4b08      	ldr	r3, [pc, #32]	; (800bee4 <vPortExitCritical+0x50>)
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d105      	bne.n	800bed6 <vPortExitCritical+0x42>
 800beca:	2300      	movs	r3, #0
 800becc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	f383 8811 	msr	BASEPRI, r3
}
 800bed4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bed6:	bf00      	nop
 800bed8:	370c      	adds	r7, #12
 800beda:	46bd      	mov	sp, r7
 800bedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee0:	4770      	bx	lr
 800bee2:	bf00      	nop
 800bee4:	2000011c 	.word	0x2000011c
	...

0800bef0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bef0:	f3ef 8009 	mrs	r0, PSP
 800bef4:	f3bf 8f6f 	isb	sy
 800bef8:	4b15      	ldr	r3, [pc, #84]	; (800bf50 <pxCurrentTCBConst>)
 800befa:	681a      	ldr	r2, [r3, #0]
 800befc:	f01e 0f10 	tst.w	lr, #16
 800bf00:	bf08      	it	eq
 800bf02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bf06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf0a:	6010      	str	r0, [r2, #0]
 800bf0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bf10:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bf14:	f380 8811 	msr	BASEPRI, r0
 800bf18:	f3bf 8f4f 	dsb	sy
 800bf1c:	f3bf 8f6f 	isb	sy
 800bf20:	f7ff f9fe 	bl	800b320 <vTaskSwitchContext>
 800bf24:	f04f 0000 	mov.w	r0, #0
 800bf28:	f380 8811 	msr	BASEPRI, r0
 800bf2c:	bc09      	pop	{r0, r3}
 800bf2e:	6819      	ldr	r1, [r3, #0]
 800bf30:	6808      	ldr	r0, [r1, #0]
 800bf32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf36:	f01e 0f10 	tst.w	lr, #16
 800bf3a:	bf08      	it	eq
 800bf3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bf40:	f380 8809 	msr	PSP, r0
 800bf44:	f3bf 8f6f 	isb	sy
 800bf48:	4770      	bx	lr
 800bf4a:	bf00      	nop
 800bf4c:	f3af 8000 	nop.w

0800bf50 <pxCurrentTCBConst>:
 800bf50:	2000049c 	.word	0x2000049c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bf54:	bf00      	nop
 800bf56:	bf00      	nop

0800bf58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b082      	sub	sp, #8
 800bf5c:	af00      	add	r7, sp, #0
	__asm volatile
 800bf5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf62:	f383 8811 	msr	BASEPRI, r3
 800bf66:	f3bf 8f6f 	isb	sy
 800bf6a:	f3bf 8f4f 	dsb	sy
 800bf6e:	607b      	str	r3, [r7, #4]
}
 800bf70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bf72:	f7ff f91d 	bl	800b1b0 <xTaskIncrementTick>
 800bf76:	4603      	mov	r3, r0
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d003      	beq.n	800bf84 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bf7c:	4b06      	ldr	r3, [pc, #24]	; (800bf98 <SysTick_Handler+0x40>)
 800bf7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf82:	601a      	str	r2, [r3, #0]
 800bf84:	2300      	movs	r3, #0
 800bf86:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bf88:	683b      	ldr	r3, [r7, #0]
 800bf8a:	f383 8811 	msr	BASEPRI, r3
}
 800bf8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bf90:	bf00      	nop
 800bf92:	3708      	adds	r7, #8
 800bf94:	46bd      	mov	sp, r7
 800bf96:	bd80      	pop	{r7, pc}
 800bf98:	e000ed04 	.word	0xe000ed04

0800bf9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bf9c:	b480      	push	{r7}
 800bf9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bfa0:	4b0b      	ldr	r3, [pc, #44]	; (800bfd0 <vPortSetupTimerInterrupt+0x34>)
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bfa6:	4b0b      	ldr	r3, [pc, #44]	; (800bfd4 <vPortSetupTimerInterrupt+0x38>)
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bfac:	4b0a      	ldr	r3, [pc, #40]	; (800bfd8 <vPortSetupTimerInterrupt+0x3c>)
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	4a0a      	ldr	r2, [pc, #40]	; (800bfdc <vPortSetupTimerInterrupt+0x40>)
 800bfb2:	fba2 2303 	umull	r2, r3, r2, r3
 800bfb6:	099b      	lsrs	r3, r3, #6
 800bfb8:	4a09      	ldr	r2, [pc, #36]	; (800bfe0 <vPortSetupTimerInterrupt+0x44>)
 800bfba:	3b01      	subs	r3, #1
 800bfbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bfbe:	4b04      	ldr	r3, [pc, #16]	; (800bfd0 <vPortSetupTimerInterrupt+0x34>)
 800bfc0:	2207      	movs	r2, #7
 800bfc2:	601a      	str	r2, [r3, #0]
}
 800bfc4:	bf00      	nop
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfcc:	4770      	bx	lr
 800bfce:	bf00      	nop
 800bfd0:	e000e010 	.word	0xe000e010
 800bfd4:	e000e018 	.word	0xe000e018
 800bfd8:	20000000 	.word	0x20000000
 800bfdc:	10624dd3 	.word	0x10624dd3
 800bfe0:	e000e014 	.word	0xe000e014

0800bfe4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bfe4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bff4 <vPortEnableVFP+0x10>
 800bfe8:	6801      	ldr	r1, [r0, #0]
 800bfea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bfee:	6001      	str	r1, [r0, #0]
 800bff0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bff2:	bf00      	nop
 800bff4:	e000ed88 	.word	0xe000ed88

0800bff8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bff8:	b480      	push	{r7}
 800bffa:	b085      	sub	sp, #20
 800bffc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bffe:	f3ef 8305 	mrs	r3, IPSR
 800c002:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	2b0f      	cmp	r3, #15
 800c008:	d914      	bls.n	800c034 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c00a:	4a17      	ldr	r2, [pc, #92]	; (800c068 <vPortValidateInterruptPriority+0x70>)
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	4413      	add	r3, r2
 800c010:	781b      	ldrb	r3, [r3, #0]
 800c012:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c014:	4b15      	ldr	r3, [pc, #84]	; (800c06c <vPortValidateInterruptPriority+0x74>)
 800c016:	781b      	ldrb	r3, [r3, #0]
 800c018:	7afa      	ldrb	r2, [r7, #11]
 800c01a:	429a      	cmp	r2, r3
 800c01c:	d20a      	bcs.n	800c034 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c022:	f383 8811 	msr	BASEPRI, r3
 800c026:	f3bf 8f6f 	isb	sy
 800c02a:	f3bf 8f4f 	dsb	sy
 800c02e:	607b      	str	r3, [r7, #4]
}
 800c030:	bf00      	nop
 800c032:	e7fe      	b.n	800c032 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c034:	4b0e      	ldr	r3, [pc, #56]	; (800c070 <vPortValidateInterruptPriority+0x78>)
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c03c:	4b0d      	ldr	r3, [pc, #52]	; (800c074 <vPortValidateInterruptPriority+0x7c>)
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	429a      	cmp	r2, r3
 800c042:	d90a      	bls.n	800c05a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c044:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c048:	f383 8811 	msr	BASEPRI, r3
 800c04c:	f3bf 8f6f 	isb	sy
 800c050:	f3bf 8f4f 	dsb	sy
 800c054:	603b      	str	r3, [r7, #0]
}
 800c056:	bf00      	nop
 800c058:	e7fe      	b.n	800c058 <vPortValidateInterruptPriority+0x60>
	}
 800c05a:	bf00      	nop
 800c05c:	3714      	adds	r7, #20
 800c05e:	46bd      	mov	sp, r7
 800c060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c064:	4770      	bx	lr
 800c066:	bf00      	nop
 800c068:	e000e3f0 	.word	0xe000e3f0
 800c06c:	200005c8 	.word	0x200005c8
 800c070:	e000ed0c 	.word	0xe000ed0c
 800c074:	200005cc 	.word	0x200005cc

0800c078 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b08a      	sub	sp, #40	; 0x28
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c080:	2300      	movs	r3, #0
 800c082:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c084:	f7fe ffc8 	bl	800b018 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c088:	4b5b      	ldr	r3, [pc, #364]	; (800c1f8 <pvPortMalloc+0x180>)
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d101      	bne.n	800c094 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c090:	f000 f920 	bl	800c2d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c094:	4b59      	ldr	r3, [pc, #356]	; (800c1fc <pvPortMalloc+0x184>)
 800c096:	681a      	ldr	r2, [r3, #0]
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	4013      	ands	r3, r2
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	f040 8093 	bne.w	800c1c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d01d      	beq.n	800c0e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c0a8:	2208      	movs	r2, #8
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	4413      	add	r3, r2
 800c0ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	f003 0307 	and.w	r3, r3, #7
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d014      	beq.n	800c0e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	f023 0307 	bic.w	r3, r3, #7
 800c0c0:	3308      	adds	r3, #8
 800c0c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	f003 0307 	and.w	r3, r3, #7
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d00a      	beq.n	800c0e4 <pvPortMalloc+0x6c>
	__asm volatile
 800c0ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0d2:	f383 8811 	msr	BASEPRI, r3
 800c0d6:	f3bf 8f6f 	isb	sy
 800c0da:	f3bf 8f4f 	dsb	sy
 800c0de:	617b      	str	r3, [r7, #20]
}
 800c0e0:	bf00      	nop
 800c0e2:	e7fe      	b.n	800c0e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d06e      	beq.n	800c1c8 <pvPortMalloc+0x150>
 800c0ea:	4b45      	ldr	r3, [pc, #276]	; (800c200 <pvPortMalloc+0x188>)
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	687a      	ldr	r2, [r7, #4]
 800c0f0:	429a      	cmp	r2, r3
 800c0f2:	d869      	bhi.n	800c1c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c0f4:	4b43      	ldr	r3, [pc, #268]	; (800c204 <pvPortMalloc+0x18c>)
 800c0f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c0f8:	4b42      	ldr	r3, [pc, #264]	; (800c204 <pvPortMalloc+0x18c>)
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c0fe:	e004      	b.n	800c10a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c102:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c10c:	685b      	ldr	r3, [r3, #4]
 800c10e:	687a      	ldr	r2, [r7, #4]
 800c110:	429a      	cmp	r2, r3
 800c112:	d903      	bls.n	800c11c <pvPortMalloc+0xa4>
 800c114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d1f1      	bne.n	800c100 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c11c:	4b36      	ldr	r3, [pc, #216]	; (800c1f8 <pvPortMalloc+0x180>)
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c122:	429a      	cmp	r2, r3
 800c124:	d050      	beq.n	800c1c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c126:	6a3b      	ldr	r3, [r7, #32]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	2208      	movs	r2, #8
 800c12c:	4413      	add	r3, r2
 800c12e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c132:	681a      	ldr	r2, [r3, #0]
 800c134:	6a3b      	ldr	r3, [r7, #32]
 800c136:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c13a:	685a      	ldr	r2, [r3, #4]
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	1ad2      	subs	r2, r2, r3
 800c140:	2308      	movs	r3, #8
 800c142:	005b      	lsls	r3, r3, #1
 800c144:	429a      	cmp	r2, r3
 800c146:	d91f      	bls.n	800c188 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	4413      	add	r3, r2
 800c14e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c150:	69bb      	ldr	r3, [r7, #24]
 800c152:	f003 0307 	and.w	r3, r3, #7
 800c156:	2b00      	cmp	r3, #0
 800c158:	d00a      	beq.n	800c170 <pvPortMalloc+0xf8>
	__asm volatile
 800c15a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c15e:	f383 8811 	msr	BASEPRI, r3
 800c162:	f3bf 8f6f 	isb	sy
 800c166:	f3bf 8f4f 	dsb	sy
 800c16a:	613b      	str	r3, [r7, #16]
}
 800c16c:	bf00      	nop
 800c16e:	e7fe      	b.n	800c16e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c172:	685a      	ldr	r2, [r3, #4]
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	1ad2      	subs	r2, r2, r3
 800c178:	69bb      	ldr	r3, [r7, #24]
 800c17a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c17e:	687a      	ldr	r2, [r7, #4]
 800c180:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c182:	69b8      	ldr	r0, [r7, #24]
 800c184:	f000 f908 	bl	800c398 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c188:	4b1d      	ldr	r3, [pc, #116]	; (800c200 <pvPortMalloc+0x188>)
 800c18a:	681a      	ldr	r2, [r3, #0]
 800c18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c18e:	685b      	ldr	r3, [r3, #4]
 800c190:	1ad3      	subs	r3, r2, r3
 800c192:	4a1b      	ldr	r2, [pc, #108]	; (800c200 <pvPortMalloc+0x188>)
 800c194:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c196:	4b1a      	ldr	r3, [pc, #104]	; (800c200 <pvPortMalloc+0x188>)
 800c198:	681a      	ldr	r2, [r3, #0]
 800c19a:	4b1b      	ldr	r3, [pc, #108]	; (800c208 <pvPortMalloc+0x190>)
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	429a      	cmp	r2, r3
 800c1a0:	d203      	bcs.n	800c1aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c1a2:	4b17      	ldr	r3, [pc, #92]	; (800c200 <pvPortMalloc+0x188>)
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	4a18      	ldr	r2, [pc, #96]	; (800c208 <pvPortMalloc+0x190>)
 800c1a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ac:	685a      	ldr	r2, [r3, #4]
 800c1ae:	4b13      	ldr	r3, [pc, #76]	; (800c1fc <pvPortMalloc+0x184>)
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	431a      	orrs	r2, r3
 800c1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c1be:	4b13      	ldr	r3, [pc, #76]	; (800c20c <pvPortMalloc+0x194>)
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	3301      	adds	r3, #1
 800c1c4:	4a11      	ldr	r2, [pc, #68]	; (800c20c <pvPortMalloc+0x194>)
 800c1c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c1c8:	f7fe ff34 	bl	800b034 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c1cc:	69fb      	ldr	r3, [r7, #28]
 800c1ce:	f003 0307 	and.w	r3, r3, #7
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d00a      	beq.n	800c1ec <pvPortMalloc+0x174>
	__asm volatile
 800c1d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1da:	f383 8811 	msr	BASEPRI, r3
 800c1de:	f3bf 8f6f 	isb	sy
 800c1e2:	f3bf 8f4f 	dsb	sy
 800c1e6:	60fb      	str	r3, [r7, #12]
}
 800c1e8:	bf00      	nop
 800c1ea:	e7fe      	b.n	800c1ea <pvPortMalloc+0x172>
	return pvReturn;
 800c1ec:	69fb      	ldr	r3, [r7, #28]
}
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	3728      	adds	r7, #40	; 0x28
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	bd80      	pop	{r7, pc}
 800c1f6:	bf00      	nop
 800c1f8:	200041d8 	.word	0x200041d8
 800c1fc:	200041ec 	.word	0x200041ec
 800c200:	200041dc 	.word	0x200041dc
 800c204:	200041d0 	.word	0x200041d0
 800c208:	200041e0 	.word	0x200041e0
 800c20c:	200041e4 	.word	0x200041e4

0800c210 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b086      	sub	sp, #24
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d04d      	beq.n	800c2be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c222:	2308      	movs	r3, #8
 800c224:	425b      	negs	r3, r3
 800c226:	697a      	ldr	r2, [r7, #20]
 800c228:	4413      	add	r3, r2
 800c22a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c22c:	697b      	ldr	r3, [r7, #20]
 800c22e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c230:	693b      	ldr	r3, [r7, #16]
 800c232:	685a      	ldr	r2, [r3, #4]
 800c234:	4b24      	ldr	r3, [pc, #144]	; (800c2c8 <vPortFree+0xb8>)
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	4013      	ands	r3, r2
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d10a      	bne.n	800c254 <vPortFree+0x44>
	__asm volatile
 800c23e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c242:	f383 8811 	msr	BASEPRI, r3
 800c246:	f3bf 8f6f 	isb	sy
 800c24a:	f3bf 8f4f 	dsb	sy
 800c24e:	60fb      	str	r3, [r7, #12]
}
 800c250:	bf00      	nop
 800c252:	e7fe      	b.n	800c252 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c254:	693b      	ldr	r3, [r7, #16]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d00a      	beq.n	800c272 <vPortFree+0x62>
	__asm volatile
 800c25c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c260:	f383 8811 	msr	BASEPRI, r3
 800c264:	f3bf 8f6f 	isb	sy
 800c268:	f3bf 8f4f 	dsb	sy
 800c26c:	60bb      	str	r3, [r7, #8]
}
 800c26e:	bf00      	nop
 800c270:	e7fe      	b.n	800c270 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c272:	693b      	ldr	r3, [r7, #16]
 800c274:	685a      	ldr	r2, [r3, #4]
 800c276:	4b14      	ldr	r3, [pc, #80]	; (800c2c8 <vPortFree+0xb8>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	4013      	ands	r3, r2
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d01e      	beq.n	800c2be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c280:	693b      	ldr	r3, [r7, #16]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d11a      	bne.n	800c2be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c288:	693b      	ldr	r3, [r7, #16]
 800c28a:	685a      	ldr	r2, [r3, #4]
 800c28c:	4b0e      	ldr	r3, [pc, #56]	; (800c2c8 <vPortFree+0xb8>)
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	43db      	mvns	r3, r3
 800c292:	401a      	ands	r2, r3
 800c294:	693b      	ldr	r3, [r7, #16]
 800c296:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c298:	f7fe febe 	bl	800b018 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c29c:	693b      	ldr	r3, [r7, #16]
 800c29e:	685a      	ldr	r2, [r3, #4]
 800c2a0:	4b0a      	ldr	r3, [pc, #40]	; (800c2cc <vPortFree+0xbc>)
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	4413      	add	r3, r2
 800c2a6:	4a09      	ldr	r2, [pc, #36]	; (800c2cc <vPortFree+0xbc>)
 800c2a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c2aa:	6938      	ldr	r0, [r7, #16]
 800c2ac:	f000 f874 	bl	800c398 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c2b0:	4b07      	ldr	r3, [pc, #28]	; (800c2d0 <vPortFree+0xc0>)
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	3301      	adds	r3, #1
 800c2b6:	4a06      	ldr	r2, [pc, #24]	; (800c2d0 <vPortFree+0xc0>)
 800c2b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c2ba:	f7fe febb 	bl	800b034 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c2be:	bf00      	nop
 800c2c0:	3718      	adds	r7, #24
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	bd80      	pop	{r7, pc}
 800c2c6:	bf00      	nop
 800c2c8:	200041ec 	.word	0x200041ec
 800c2cc:	200041dc 	.word	0x200041dc
 800c2d0:	200041e8 	.word	0x200041e8

0800c2d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c2d4:	b480      	push	{r7}
 800c2d6:	b085      	sub	sp, #20
 800c2d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c2da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c2de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c2e0:	4b27      	ldr	r3, [pc, #156]	; (800c380 <prvHeapInit+0xac>)
 800c2e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	f003 0307 	and.w	r3, r3, #7
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d00c      	beq.n	800c308 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	3307      	adds	r3, #7
 800c2f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	f023 0307 	bic.w	r3, r3, #7
 800c2fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c2fc:	68ba      	ldr	r2, [r7, #8]
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	1ad3      	subs	r3, r2, r3
 800c302:	4a1f      	ldr	r2, [pc, #124]	; (800c380 <prvHeapInit+0xac>)
 800c304:	4413      	add	r3, r2
 800c306:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c30c:	4a1d      	ldr	r2, [pc, #116]	; (800c384 <prvHeapInit+0xb0>)
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c312:	4b1c      	ldr	r3, [pc, #112]	; (800c384 <prvHeapInit+0xb0>)
 800c314:	2200      	movs	r2, #0
 800c316:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	68ba      	ldr	r2, [r7, #8]
 800c31c:	4413      	add	r3, r2
 800c31e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c320:	2208      	movs	r2, #8
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	1a9b      	subs	r3, r3, r2
 800c326:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	f023 0307 	bic.w	r3, r3, #7
 800c32e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	4a15      	ldr	r2, [pc, #84]	; (800c388 <prvHeapInit+0xb4>)
 800c334:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c336:	4b14      	ldr	r3, [pc, #80]	; (800c388 <prvHeapInit+0xb4>)
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	2200      	movs	r2, #0
 800c33c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c33e:	4b12      	ldr	r3, [pc, #72]	; (800c388 <prvHeapInit+0xb4>)
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	2200      	movs	r2, #0
 800c344:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c34a:	683b      	ldr	r3, [r7, #0]
 800c34c:	68fa      	ldr	r2, [r7, #12]
 800c34e:	1ad2      	subs	r2, r2, r3
 800c350:	683b      	ldr	r3, [r7, #0]
 800c352:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c354:	4b0c      	ldr	r3, [pc, #48]	; (800c388 <prvHeapInit+0xb4>)
 800c356:	681a      	ldr	r2, [r3, #0]
 800c358:	683b      	ldr	r3, [r7, #0]
 800c35a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c35c:	683b      	ldr	r3, [r7, #0]
 800c35e:	685b      	ldr	r3, [r3, #4]
 800c360:	4a0a      	ldr	r2, [pc, #40]	; (800c38c <prvHeapInit+0xb8>)
 800c362:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c364:	683b      	ldr	r3, [r7, #0]
 800c366:	685b      	ldr	r3, [r3, #4]
 800c368:	4a09      	ldr	r2, [pc, #36]	; (800c390 <prvHeapInit+0xbc>)
 800c36a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c36c:	4b09      	ldr	r3, [pc, #36]	; (800c394 <prvHeapInit+0xc0>)
 800c36e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c372:	601a      	str	r2, [r3, #0]
}
 800c374:	bf00      	nop
 800c376:	3714      	adds	r7, #20
 800c378:	46bd      	mov	sp, r7
 800c37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37e:	4770      	bx	lr
 800c380:	200005d0 	.word	0x200005d0
 800c384:	200041d0 	.word	0x200041d0
 800c388:	200041d8 	.word	0x200041d8
 800c38c:	200041e0 	.word	0x200041e0
 800c390:	200041dc 	.word	0x200041dc
 800c394:	200041ec 	.word	0x200041ec

0800c398 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c398:	b480      	push	{r7}
 800c39a:	b085      	sub	sp, #20
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c3a0:	4b28      	ldr	r3, [pc, #160]	; (800c444 <prvInsertBlockIntoFreeList+0xac>)
 800c3a2:	60fb      	str	r3, [r7, #12]
 800c3a4:	e002      	b.n	800c3ac <prvInsertBlockIntoFreeList+0x14>
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	60fb      	str	r3, [r7, #12]
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	687a      	ldr	r2, [r7, #4]
 800c3b2:	429a      	cmp	r2, r3
 800c3b4:	d8f7      	bhi.n	800c3a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	685b      	ldr	r3, [r3, #4]
 800c3be:	68ba      	ldr	r2, [r7, #8]
 800c3c0:	4413      	add	r3, r2
 800c3c2:	687a      	ldr	r2, [r7, #4]
 800c3c4:	429a      	cmp	r2, r3
 800c3c6:	d108      	bne.n	800c3da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	685a      	ldr	r2, [r3, #4]
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	685b      	ldr	r3, [r3, #4]
 800c3d0:	441a      	add	r2, r3
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	685b      	ldr	r3, [r3, #4]
 800c3e2:	68ba      	ldr	r2, [r7, #8]
 800c3e4:	441a      	add	r2, r3
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	429a      	cmp	r2, r3
 800c3ec:	d118      	bne.n	800c420 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	681a      	ldr	r2, [r3, #0]
 800c3f2:	4b15      	ldr	r3, [pc, #84]	; (800c448 <prvInsertBlockIntoFreeList+0xb0>)
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	429a      	cmp	r2, r3
 800c3f8:	d00d      	beq.n	800c416 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	685a      	ldr	r2, [r3, #4]
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	685b      	ldr	r3, [r3, #4]
 800c404:	441a      	add	r2, r3
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	681a      	ldr	r2, [r3, #0]
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	601a      	str	r2, [r3, #0]
 800c414:	e008      	b.n	800c428 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c416:	4b0c      	ldr	r3, [pc, #48]	; (800c448 <prvInsertBlockIntoFreeList+0xb0>)
 800c418:	681a      	ldr	r2, [r3, #0]
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	601a      	str	r2, [r3, #0]
 800c41e:	e003      	b.n	800c428 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	681a      	ldr	r2, [r3, #0]
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c428:	68fa      	ldr	r2, [r7, #12]
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	429a      	cmp	r2, r3
 800c42e:	d002      	beq.n	800c436 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	687a      	ldr	r2, [r7, #4]
 800c434:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c436:	bf00      	nop
 800c438:	3714      	adds	r7, #20
 800c43a:	46bd      	mov	sp, r7
 800c43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c440:	4770      	bx	lr
 800c442:	bf00      	nop
 800c444:	200041d0 	.word	0x200041d0
 800c448:	200041d8 	.word	0x200041d8

0800c44c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b084      	sub	sp, #16
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
 800c454:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800c456:	f007 fa03 	bl	8013860 <sys_timeouts_sleeptime>
 800c45a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c462:	d10b      	bne.n	800c47c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800c464:	4813      	ldr	r0, [pc, #76]	; (800c4b4 <tcpip_timeouts_mbox_fetch+0x68>)
 800c466:	f009 ff72 	bl	801634e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800c46a:	2200      	movs	r2, #0
 800c46c:	6839      	ldr	r1, [r7, #0]
 800c46e:	6878      	ldr	r0, [r7, #4]
 800c470:	f009 fee4 	bl	801623c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800c474:	480f      	ldr	r0, [pc, #60]	; (800c4b4 <tcpip_timeouts_mbox_fetch+0x68>)
 800c476:	f009 ff5b 	bl	8016330 <sys_mutex_lock>
    return;
 800c47a:	e018      	b.n	800c4ae <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d102      	bne.n	800c488 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800c482:	f007 f9b3 	bl	80137ec <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800c486:	e7e6      	b.n	800c456 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800c488:	480a      	ldr	r0, [pc, #40]	; (800c4b4 <tcpip_timeouts_mbox_fetch+0x68>)
 800c48a:	f009 ff60 	bl	801634e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800c48e:	68fa      	ldr	r2, [r7, #12]
 800c490:	6839      	ldr	r1, [r7, #0]
 800c492:	6878      	ldr	r0, [r7, #4]
 800c494:	f009 fed2 	bl	801623c <sys_arch_mbox_fetch>
 800c498:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800c49a:	4806      	ldr	r0, [pc, #24]	; (800c4b4 <tcpip_timeouts_mbox_fetch+0x68>)
 800c49c:	f009 ff48 	bl	8016330 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800c4a0:	68bb      	ldr	r3, [r7, #8]
 800c4a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4a6:	d102      	bne.n	800c4ae <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800c4a8:	f007 f9a0 	bl	80137ec <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800c4ac:	e7d3      	b.n	800c456 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800c4ae:	3710      	adds	r7, #16
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	bd80      	pop	{r7, pc}
 800c4b4:	200079e4 	.word	0x200079e4

0800c4b8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b084      	sub	sp, #16
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800c4c0:	4810      	ldr	r0, [pc, #64]	; (800c504 <tcpip_thread+0x4c>)
 800c4c2:	f009 ff35 	bl	8016330 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800c4c6:	4b10      	ldr	r3, [pc, #64]	; (800c508 <tcpip_thread+0x50>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d005      	beq.n	800c4da <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800c4ce:	4b0e      	ldr	r3, [pc, #56]	; (800c508 <tcpip_thread+0x50>)
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	4a0e      	ldr	r2, [pc, #56]	; (800c50c <tcpip_thread+0x54>)
 800c4d4:	6812      	ldr	r2, [r2, #0]
 800c4d6:	4610      	mov	r0, r2
 800c4d8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800c4da:	f107 030c 	add.w	r3, r7, #12
 800c4de:	4619      	mov	r1, r3
 800c4e0:	480b      	ldr	r0, [pc, #44]	; (800c510 <tcpip_thread+0x58>)
 800c4e2:	f7ff ffb3 	bl	800c44c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d106      	bne.n	800c4fa <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800c4ec:	4b09      	ldr	r3, [pc, #36]	; (800c514 <tcpip_thread+0x5c>)
 800c4ee:	2291      	movs	r2, #145	; 0x91
 800c4f0:	4909      	ldr	r1, [pc, #36]	; (800c518 <tcpip_thread+0x60>)
 800c4f2:	480a      	ldr	r0, [pc, #40]	; (800c51c <tcpip_thread+0x64>)
 800c4f4:	f00a fcc6 	bl	8016e84 <iprintf>
      continue;
 800c4f8:	e003      	b.n	800c502 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	f000 f80f 	bl	800c520 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800c502:	e7ea      	b.n	800c4da <tcpip_thread+0x22>
 800c504:	200079e4 	.word	0x200079e4
 800c508:	200041f0 	.word	0x200041f0
 800c50c:	200041f4 	.word	0x200041f4
 800c510:	200041f8 	.word	0x200041f8
 800c514:	08018074 	.word	0x08018074
 800c518:	080180a4 	.word	0x080180a4
 800c51c:	080180c4 	.word	0x080180c4

0800c520 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b082      	sub	sp, #8
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	781b      	ldrb	r3, [r3, #0]
 800c52c:	2b02      	cmp	r3, #2
 800c52e:	d026      	beq.n	800c57e <tcpip_thread_handle_msg+0x5e>
 800c530:	2b02      	cmp	r3, #2
 800c532:	dc2b      	bgt.n	800c58c <tcpip_thread_handle_msg+0x6c>
 800c534:	2b00      	cmp	r3, #0
 800c536:	d002      	beq.n	800c53e <tcpip_thread_handle_msg+0x1e>
 800c538:	2b01      	cmp	r3, #1
 800c53a:	d015      	beq.n	800c568 <tcpip_thread_handle_msg+0x48>
 800c53c:	e026      	b.n	800c58c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	68db      	ldr	r3, [r3, #12]
 800c542:	687a      	ldr	r2, [r7, #4]
 800c544:	6850      	ldr	r0, [r2, #4]
 800c546:	687a      	ldr	r2, [r7, #4]
 800c548:	6892      	ldr	r2, [r2, #8]
 800c54a:	4611      	mov	r1, r2
 800c54c:	4798      	blx	r3
 800c54e:	4603      	mov	r3, r0
 800c550:	2b00      	cmp	r3, #0
 800c552:	d004      	beq.n	800c55e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	685b      	ldr	r3, [r3, #4]
 800c558:	4618      	mov	r0, r3
 800c55a:	f001 fc4d 	bl	800ddf8 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800c55e:	6879      	ldr	r1, [r7, #4]
 800c560:	2009      	movs	r0, #9
 800c562:	f000 fe1d 	bl	800d1a0 <memp_free>
      break;
 800c566:	e018      	b.n	800c59a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	685b      	ldr	r3, [r3, #4]
 800c56c:	687a      	ldr	r2, [r7, #4]
 800c56e:	6892      	ldr	r2, [r2, #8]
 800c570:	4610      	mov	r0, r2
 800c572:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800c574:	6879      	ldr	r1, [r7, #4]
 800c576:	2008      	movs	r0, #8
 800c578:	f000 fe12 	bl	800d1a0 <memp_free>
      break;
 800c57c:	e00d      	b.n	800c59a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	685b      	ldr	r3, [r3, #4]
 800c582:	687a      	ldr	r2, [r7, #4]
 800c584:	6892      	ldr	r2, [r2, #8]
 800c586:	4610      	mov	r0, r2
 800c588:	4798      	blx	r3
      break;
 800c58a:	e006      	b.n	800c59a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800c58c:	4b05      	ldr	r3, [pc, #20]	; (800c5a4 <tcpip_thread_handle_msg+0x84>)
 800c58e:	22cf      	movs	r2, #207	; 0xcf
 800c590:	4905      	ldr	r1, [pc, #20]	; (800c5a8 <tcpip_thread_handle_msg+0x88>)
 800c592:	4806      	ldr	r0, [pc, #24]	; (800c5ac <tcpip_thread_handle_msg+0x8c>)
 800c594:	f00a fc76 	bl	8016e84 <iprintf>
      break;
 800c598:	bf00      	nop
  }
}
 800c59a:	bf00      	nop
 800c59c:	3708      	adds	r7, #8
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	bd80      	pop	{r7, pc}
 800c5a2:	bf00      	nop
 800c5a4:	08018074 	.word	0x08018074
 800c5a8:	080180a4 	.word	0x080180a4
 800c5ac:	080180c4 	.word	0x080180c4

0800c5b0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b086      	sub	sp, #24
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	60f8      	str	r0, [r7, #12]
 800c5b8:	60b9      	str	r1, [r7, #8]
 800c5ba:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800c5bc:	481a      	ldr	r0, [pc, #104]	; (800c628 <tcpip_inpkt+0x78>)
 800c5be:	f009 fe7c 	bl	80162ba <sys_mbox_valid>
 800c5c2:	4603      	mov	r3, r0
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d105      	bne.n	800c5d4 <tcpip_inpkt+0x24>
 800c5c8:	4b18      	ldr	r3, [pc, #96]	; (800c62c <tcpip_inpkt+0x7c>)
 800c5ca:	22fc      	movs	r2, #252	; 0xfc
 800c5cc:	4918      	ldr	r1, [pc, #96]	; (800c630 <tcpip_inpkt+0x80>)
 800c5ce:	4819      	ldr	r0, [pc, #100]	; (800c634 <tcpip_inpkt+0x84>)
 800c5d0:	f00a fc58 	bl	8016e84 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800c5d4:	2009      	movs	r0, #9
 800c5d6:	f000 fd91 	bl	800d0fc <memp_malloc>
 800c5da:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800c5dc:	697b      	ldr	r3, [r7, #20]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d102      	bne.n	800c5e8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800c5e2:	f04f 33ff 	mov.w	r3, #4294967295
 800c5e6:	e01a      	b.n	800c61e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800c5e8:	697b      	ldr	r3, [r7, #20]
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800c5ee:	697b      	ldr	r3, [r7, #20]
 800c5f0:	68fa      	ldr	r2, [r7, #12]
 800c5f2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800c5f4:	697b      	ldr	r3, [r7, #20]
 800c5f6:	68ba      	ldr	r2, [r7, #8]
 800c5f8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800c5fa:	697b      	ldr	r3, [r7, #20]
 800c5fc:	687a      	ldr	r2, [r7, #4]
 800c5fe:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800c600:	6979      	ldr	r1, [r7, #20]
 800c602:	4809      	ldr	r0, [pc, #36]	; (800c628 <tcpip_inpkt+0x78>)
 800c604:	f009 fe00 	bl	8016208 <sys_mbox_trypost>
 800c608:	4603      	mov	r3, r0
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d006      	beq.n	800c61c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800c60e:	6979      	ldr	r1, [r7, #20]
 800c610:	2009      	movs	r0, #9
 800c612:	f000 fdc5 	bl	800d1a0 <memp_free>
    return ERR_MEM;
 800c616:	f04f 33ff 	mov.w	r3, #4294967295
 800c61a:	e000      	b.n	800c61e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800c61c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800c61e:	4618      	mov	r0, r3
 800c620:	3718      	adds	r7, #24
 800c622:	46bd      	mov	sp, r7
 800c624:	bd80      	pop	{r7, pc}
 800c626:	bf00      	nop
 800c628:	200041f8 	.word	0x200041f8
 800c62c:	08018074 	.word	0x08018074
 800c630:	080180ec 	.word	0x080180ec
 800c634:	080180c4 	.word	0x080180c4

0800c638 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b082      	sub	sp, #8
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
 800c640:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800c642:	683b      	ldr	r3, [r7, #0]
 800c644:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800c648:	f003 0318 	and.w	r3, r3, #24
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d006      	beq.n	800c65e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800c650:	4a08      	ldr	r2, [pc, #32]	; (800c674 <tcpip_input+0x3c>)
 800c652:	6839      	ldr	r1, [r7, #0]
 800c654:	6878      	ldr	r0, [r7, #4]
 800c656:	f7ff ffab 	bl	800c5b0 <tcpip_inpkt>
 800c65a:	4603      	mov	r3, r0
 800c65c:	e005      	b.n	800c66a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800c65e:	4a06      	ldr	r2, [pc, #24]	; (800c678 <tcpip_input+0x40>)
 800c660:	6839      	ldr	r1, [r7, #0]
 800c662:	6878      	ldr	r0, [r7, #4]
 800c664:	f7ff ffa4 	bl	800c5b0 <tcpip_inpkt>
 800c668:	4603      	mov	r3, r0
}
 800c66a:	4618      	mov	r0, r3
 800c66c:	3708      	adds	r7, #8
 800c66e:	46bd      	mov	sp, r7
 800c670:	bd80      	pop	{r7, pc}
 800c672:	bf00      	nop
 800c674:	08016019 	.word	0x08016019
 800c678:	08014f2d 	.word	0x08014f2d

0800c67c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b084      	sub	sp, #16
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
 800c684:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800c686:	4819      	ldr	r0, [pc, #100]	; (800c6ec <tcpip_try_callback+0x70>)
 800c688:	f009 fe17 	bl	80162ba <sys_mbox_valid>
 800c68c:	4603      	mov	r3, r0
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d106      	bne.n	800c6a0 <tcpip_try_callback+0x24>
 800c692:	4b17      	ldr	r3, [pc, #92]	; (800c6f0 <tcpip_try_callback+0x74>)
 800c694:	f240 125d 	movw	r2, #349	; 0x15d
 800c698:	4916      	ldr	r1, [pc, #88]	; (800c6f4 <tcpip_try_callback+0x78>)
 800c69a:	4817      	ldr	r0, [pc, #92]	; (800c6f8 <tcpip_try_callback+0x7c>)
 800c69c:	f00a fbf2 	bl	8016e84 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800c6a0:	2008      	movs	r0, #8
 800c6a2:	f000 fd2b 	bl	800d0fc <memp_malloc>
 800c6a6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d102      	bne.n	800c6b4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800c6ae:	f04f 33ff 	mov.w	r3, #4294967295
 800c6b2:	e017      	b.n	800c6e4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	2201      	movs	r2, #1
 800c6b8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	687a      	ldr	r2, [r7, #4]
 800c6be:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	683a      	ldr	r2, [r7, #0]
 800c6c4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800c6c6:	68f9      	ldr	r1, [r7, #12]
 800c6c8:	4808      	ldr	r0, [pc, #32]	; (800c6ec <tcpip_try_callback+0x70>)
 800c6ca:	f009 fd9d 	bl	8016208 <sys_mbox_trypost>
 800c6ce:	4603      	mov	r3, r0
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d006      	beq.n	800c6e2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800c6d4:	68f9      	ldr	r1, [r7, #12]
 800c6d6:	2008      	movs	r0, #8
 800c6d8:	f000 fd62 	bl	800d1a0 <memp_free>
    return ERR_MEM;
 800c6dc:	f04f 33ff 	mov.w	r3, #4294967295
 800c6e0:	e000      	b.n	800c6e4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800c6e2:	2300      	movs	r3, #0
}
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	3710      	adds	r7, #16
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	bd80      	pop	{r7, pc}
 800c6ec:	200041f8 	.word	0x200041f8
 800c6f0:	08018074 	.word	0x08018074
 800c6f4:	080180ec 	.word	0x080180ec
 800c6f8:	080180c4 	.word	0x080180c4

0800c6fc <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b084      	sub	sp, #16
 800c700:	af02      	add	r7, sp, #8
 800c702:	6078      	str	r0, [r7, #4]
 800c704:	6039      	str	r1, [r7, #0]
  lwip_init();
 800c706:	f000 f871 	bl	800c7ec <lwip_init>

  tcpip_init_done = initfunc;
 800c70a:	4a17      	ldr	r2, [pc, #92]	; (800c768 <tcpip_init+0x6c>)
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800c710:	4a16      	ldr	r2, [pc, #88]	; (800c76c <tcpip_init+0x70>)
 800c712:	683b      	ldr	r3, [r7, #0]
 800c714:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800c716:	2106      	movs	r1, #6
 800c718:	4815      	ldr	r0, [pc, #84]	; (800c770 <tcpip_init+0x74>)
 800c71a:	f009 fd53 	bl	80161c4 <sys_mbox_new>
 800c71e:	4603      	mov	r3, r0
 800c720:	2b00      	cmp	r3, #0
 800c722:	d006      	beq.n	800c732 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800c724:	4b13      	ldr	r3, [pc, #76]	; (800c774 <tcpip_init+0x78>)
 800c726:	f240 2261 	movw	r2, #609	; 0x261
 800c72a:	4913      	ldr	r1, [pc, #76]	; (800c778 <tcpip_init+0x7c>)
 800c72c:	4813      	ldr	r0, [pc, #76]	; (800c77c <tcpip_init+0x80>)
 800c72e:	f00a fba9 	bl	8016e84 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800c732:	4813      	ldr	r0, [pc, #76]	; (800c780 <tcpip_init+0x84>)
 800c734:	f009 fde0 	bl	80162f8 <sys_mutex_new>
 800c738:	4603      	mov	r3, r0
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d006      	beq.n	800c74c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800c73e:	4b0d      	ldr	r3, [pc, #52]	; (800c774 <tcpip_init+0x78>)
 800c740:	f240 2265 	movw	r2, #613	; 0x265
 800c744:	490f      	ldr	r1, [pc, #60]	; (800c784 <tcpip_init+0x88>)
 800c746:	480d      	ldr	r0, [pc, #52]	; (800c77c <tcpip_init+0x80>)
 800c748:	f00a fb9c 	bl	8016e84 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800c74c:	2300      	movs	r3, #0
 800c74e:	9300      	str	r3, [sp, #0]
 800c750:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c754:	2200      	movs	r2, #0
 800c756:	490c      	ldr	r1, [pc, #48]	; (800c788 <tcpip_init+0x8c>)
 800c758:	480c      	ldr	r0, [pc, #48]	; (800c78c <tcpip_init+0x90>)
 800c75a:	f009 fe05 	bl	8016368 <sys_thread_new>
}
 800c75e:	bf00      	nop
 800c760:	3708      	adds	r7, #8
 800c762:	46bd      	mov	sp, r7
 800c764:	bd80      	pop	{r7, pc}
 800c766:	bf00      	nop
 800c768:	200041f0 	.word	0x200041f0
 800c76c:	200041f4 	.word	0x200041f4
 800c770:	200041f8 	.word	0x200041f8
 800c774:	08018074 	.word	0x08018074
 800c778:	080180fc 	.word	0x080180fc
 800c77c:	080180c4 	.word	0x080180c4
 800c780:	200079e4 	.word	0x200079e4
 800c784:	08018120 	.word	0x08018120
 800c788:	0800c4b9 	.word	0x0800c4b9
 800c78c:	08018144 	.word	0x08018144

0800c790 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800c790:	b480      	push	{r7}
 800c792:	b083      	sub	sp, #12
 800c794:	af00      	add	r7, sp, #0
 800c796:	4603      	mov	r3, r0
 800c798:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800c79a:	88fb      	ldrh	r3, [r7, #6]
 800c79c:	021b      	lsls	r3, r3, #8
 800c79e:	b21a      	sxth	r2, r3
 800c7a0:	88fb      	ldrh	r3, [r7, #6]
 800c7a2:	0a1b      	lsrs	r3, r3, #8
 800c7a4:	b29b      	uxth	r3, r3
 800c7a6:	b21b      	sxth	r3, r3
 800c7a8:	4313      	orrs	r3, r2
 800c7aa:	b21b      	sxth	r3, r3
 800c7ac:	b29b      	uxth	r3, r3
}
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	370c      	adds	r7, #12
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b8:	4770      	bx	lr

0800c7ba <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800c7ba:	b480      	push	{r7}
 800c7bc:	b083      	sub	sp, #12
 800c7be:	af00      	add	r7, sp, #0
 800c7c0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	061a      	lsls	r2, r3, #24
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	021b      	lsls	r3, r3, #8
 800c7ca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c7ce:	431a      	orrs	r2, r3
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	0a1b      	lsrs	r3, r3, #8
 800c7d4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c7d8:	431a      	orrs	r2, r3
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	0e1b      	lsrs	r3, r3, #24
 800c7de:	4313      	orrs	r3, r2
}
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	370c      	adds	r7, #12
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ea:	4770      	bx	lr

0800c7ec <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b082      	sub	sp, #8
 800c7f0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800c7f6:	f009 fd71 	bl	80162dc <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800c7fa:	f000 f8d5 	bl	800c9a8 <mem_init>
  memp_init();
 800c7fe:	f000 fc31 	bl	800d064 <memp_init>
  pbuf_init();
  netif_init();
 800c802:	f000 fcf7 	bl	800d1f4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800c806:	f007 f863 	bl	80138d0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800c80a:	f001 fd8f 	bl	800e32c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800c80e:	f006 ffa5 	bl	801375c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800c812:	bf00      	nop
 800c814:	3708      	adds	r7, #8
 800c816:	46bd      	mov	sp, r7
 800c818:	bd80      	pop	{r7, pc}
	...

0800c81c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800c81c:	b480      	push	{r7}
 800c81e:	b083      	sub	sp, #12
 800c820:	af00      	add	r7, sp, #0
 800c822:	4603      	mov	r3, r0
 800c824:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800c826:	4b05      	ldr	r3, [pc, #20]	; (800c83c <ptr_to_mem+0x20>)
 800c828:	681a      	ldr	r2, [r3, #0]
 800c82a:	88fb      	ldrh	r3, [r7, #6]
 800c82c:	4413      	add	r3, r2
}
 800c82e:	4618      	mov	r0, r3
 800c830:	370c      	adds	r7, #12
 800c832:	46bd      	mov	sp, r7
 800c834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c838:	4770      	bx	lr
 800c83a:	bf00      	nop
 800c83c:	200041fc 	.word	0x200041fc

0800c840 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800c840:	b480      	push	{r7}
 800c842:	b083      	sub	sp, #12
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800c848:	4b05      	ldr	r3, [pc, #20]	; (800c860 <mem_to_ptr+0x20>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	687a      	ldr	r2, [r7, #4]
 800c84e:	1ad3      	subs	r3, r2, r3
 800c850:	b29b      	uxth	r3, r3
}
 800c852:	4618      	mov	r0, r3
 800c854:	370c      	adds	r7, #12
 800c856:	46bd      	mov	sp, r7
 800c858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85c:	4770      	bx	lr
 800c85e:	bf00      	nop
 800c860:	200041fc 	.word	0x200041fc

0800c864 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800c864:	b590      	push	{r4, r7, lr}
 800c866:	b085      	sub	sp, #20
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800c86c:	4b45      	ldr	r3, [pc, #276]	; (800c984 <plug_holes+0x120>)
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	687a      	ldr	r2, [r7, #4]
 800c872:	429a      	cmp	r2, r3
 800c874:	d206      	bcs.n	800c884 <plug_holes+0x20>
 800c876:	4b44      	ldr	r3, [pc, #272]	; (800c988 <plug_holes+0x124>)
 800c878:	f240 12df 	movw	r2, #479	; 0x1df
 800c87c:	4943      	ldr	r1, [pc, #268]	; (800c98c <plug_holes+0x128>)
 800c87e:	4844      	ldr	r0, [pc, #272]	; (800c990 <plug_holes+0x12c>)
 800c880:	f00a fb00 	bl	8016e84 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800c884:	4b43      	ldr	r3, [pc, #268]	; (800c994 <plug_holes+0x130>)
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	687a      	ldr	r2, [r7, #4]
 800c88a:	429a      	cmp	r2, r3
 800c88c:	d306      	bcc.n	800c89c <plug_holes+0x38>
 800c88e:	4b3e      	ldr	r3, [pc, #248]	; (800c988 <plug_holes+0x124>)
 800c890:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800c894:	4940      	ldr	r1, [pc, #256]	; (800c998 <plug_holes+0x134>)
 800c896:	483e      	ldr	r0, [pc, #248]	; (800c990 <plug_holes+0x12c>)
 800c898:	f00a faf4 	bl	8016e84 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	791b      	ldrb	r3, [r3, #4]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d006      	beq.n	800c8b2 <plug_holes+0x4e>
 800c8a4:	4b38      	ldr	r3, [pc, #224]	; (800c988 <plug_holes+0x124>)
 800c8a6:	f240 12e1 	movw	r2, #481	; 0x1e1
 800c8aa:	493c      	ldr	r1, [pc, #240]	; (800c99c <plug_holes+0x138>)
 800c8ac:	4838      	ldr	r0, [pc, #224]	; (800c990 <plug_holes+0x12c>)
 800c8ae:	f00a fae9 	bl	8016e84 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	881b      	ldrh	r3, [r3, #0]
 800c8b6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c8ba:	d906      	bls.n	800c8ca <plug_holes+0x66>
 800c8bc:	4b32      	ldr	r3, [pc, #200]	; (800c988 <plug_holes+0x124>)
 800c8be:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800c8c2:	4937      	ldr	r1, [pc, #220]	; (800c9a0 <plug_holes+0x13c>)
 800c8c4:	4832      	ldr	r0, [pc, #200]	; (800c990 <plug_holes+0x12c>)
 800c8c6:	f00a fadd 	bl	8016e84 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	881b      	ldrh	r3, [r3, #0]
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	f7ff ffa4 	bl	800c81c <ptr_to_mem>
 800c8d4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800c8d6:	687a      	ldr	r2, [r7, #4]
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	429a      	cmp	r2, r3
 800c8dc:	d024      	beq.n	800c928 <plug_holes+0xc4>
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	791b      	ldrb	r3, [r3, #4]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d120      	bne.n	800c928 <plug_holes+0xc4>
 800c8e6:	4b2b      	ldr	r3, [pc, #172]	; (800c994 <plug_holes+0x130>)
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	68fa      	ldr	r2, [r7, #12]
 800c8ec:	429a      	cmp	r2, r3
 800c8ee:	d01b      	beq.n	800c928 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800c8f0:	4b2c      	ldr	r3, [pc, #176]	; (800c9a4 <plug_holes+0x140>)
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	68fa      	ldr	r2, [r7, #12]
 800c8f6:	429a      	cmp	r2, r3
 800c8f8:	d102      	bne.n	800c900 <plug_holes+0x9c>
      lfree = mem;
 800c8fa:	4a2a      	ldr	r2, [pc, #168]	; (800c9a4 <plug_holes+0x140>)
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	881a      	ldrh	r2, [r3, #0]
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	881b      	ldrh	r3, [r3, #0]
 800c90c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c910:	d00a      	beq.n	800c928 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	881b      	ldrh	r3, [r3, #0]
 800c916:	4618      	mov	r0, r3
 800c918:	f7ff ff80 	bl	800c81c <ptr_to_mem>
 800c91c:	4604      	mov	r4, r0
 800c91e:	6878      	ldr	r0, [r7, #4]
 800c920:	f7ff ff8e 	bl	800c840 <mem_to_ptr>
 800c924:	4603      	mov	r3, r0
 800c926:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	885b      	ldrh	r3, [r3, #2]
 800c92c:	4618      	mov	r0, r3
 800c92e:	f7ff ff75 	bl	800c81c <ptr_to_mem>
 800c932:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800c934:	68ba      	ldr	r2, [r7, #8]
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	429a      	cmp	r2, r3
 800c93a:	d01f      	beq.n	800c97c <plug_holes+0x118>
 800c93c:	68bb      	ldr	r3, [r7, #8]
 800c93e:	791b      	ldrb	r3, [r3, #4]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d11b      	bne.n	800c97c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800c944:	4b17      	ldr	r3, [pc, #92]	; (800c9a4 <plug_holes+0x140>)
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	687a      	ldr	r2, [r7, #4]
 800c94a:	429a      	cmp	r2, r3
 800c94c:	d102      	bne.n	800c954 <plug_holes+0xf0>
      lfree = pmem;
 800c94e:	4a15      	ldr	r2, [pc, #84]	; (800c9a4 <plug_holes+0x140>)
 800c950:	68bb      	ldr	r3, [r7, #8]
 800c952:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	881a      	ldrh	r2, [r3, #0]
 800c958:	68bb      	ldr	r3, [r7, #8]
 800c95a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	881b      	ldrh	r3, [r3, #0]
 800c960:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c964:	d00a      	beq.n	800c97c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	881b      	ldrh	r3, [r3, #0]
 800c96a:	4618      	mov	r0, r3
 800c96c:	f7ff ff56 	bl	800c81c <ptr_to_mem>
 800c970:	4604      	mov	r4, r0
 800c972:	68b8      	ldr	r0, [r7, #8]
 800c974:	f7ff ff64 	bl	800c840 <mem_to_ptr>
 800c978:	4603      	mov	r3, r0
 800c97a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800c97c:	bf00      	nop
 800c97e:	3714      	adds	r7, #20
 800c980:	46bd      	mov	sp, r7
 800c982:	bd90      	pop	{r4, r7, pc}
 800c984:	200041fc 	.word	0x200041fc
 800c988:	08018154 	.word	0x08018154
 800c98c:	08018184 	.word	0x08018184
 800c990:	0801819c 	.word	0x0801819c
 800c994:	20004200 	.word	0x20004200
 800c998:	080181c4 	.word	0x080181c4
 800c99c:	080181e0 	.word	0x080181e0
 800c9a0:	080181fc 	.word	0x080181fc
 800c9a4:	20004208 	.word	0x20004208

0800c9a8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b082      	sub	sp, #8
 800c9ac:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800c9ae:	4b1f      	ldr	r3, [pc, #124]	; (800ca2c <mem_init+0x84>)
 800c9b0:	3303      	adds	r3, #3
 800c9b2:	f023 0303 	bic.w	r3, r3, #3
 800c9b6:	461a      	mov	r2, r3
 800c9b8:	4b1d      	ldr	r3, [pc, #116]	; (800ca30 <mem_init+0x88>)
 800c9ba:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800c9bc:	4b1c      	ldr	r3, [pc, #112]	; (800ca30 <mem_init+0x88>)
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c9c8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800c9d6:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800c9da:	f7ff ff1f 	bl	800c81c <ptr_to_mem>
 800c9de:	4603      	mov	r3, r0
 800c9e0:	4a14      	ldr	r2, [pc, #80]	; (800ca34 <mem_init+0x8c>)
 800c9e2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800c9e4:	4b13      	ldr	r3, [pc, #76]	; (800ca34 <mem_init+0x8c>)
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	2201      	movs	r2, #1
 800c9ea:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800c9ec:	4b11      	ldr	r3, [pc, #68]	; (800ca34 <mem_init+0x8c>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c9f4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800c9f6:	4b0f      	ldr	r3, [pc, #60]	; (800ca34 <mem_init+0x8c>)
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c9fe:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800ca00:	4b0b      	ldr	r3, [pc, #44]	; (800ca30 <mem_init+0x88>)
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	4a0c      	ldr	r2, [pc, #48]	; (800ca38 <mem_init+0x90>)
 800ca06:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800ca08:	480c      	ldr	r0, [pc, #48]	; (800ca3c <mem_init+0x94>)
 800ca0a:	f009 fc75 	bl	80162f8 <sys_mutex_new>
 800ca0e:	4603      	mov	r3, r0
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d006      	beq.n	800ca22 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800ca14:	4b0a      	ldr	r3, [pc, #40]	; (800ca40 <mem_init+0x98>)
 800ca16:	f240 221f 	movw	r2, #543	; 0x21f
 800ca1a:	490a      	ldr	r1, [pc, #40]	; (800ca44 <mem_init+0x9c>)
 800ca1c:	480a      	ldr	r0, [pc, #40]	; (800ca48 <mem_init+0xa0>)
 800ca1e:	f00a fa31 	bl	8016e84 <iprintf>
  }
}
 800ca22:	bf00      	nop
 800ca24:	3708      	adds	r7, #8
 800ca26:	46bd      	mov	sp, r7
 800ca28:	bd80      	pop	{r7, pc}
 800ca2a:	bf00      	nop
 800ca2c:	20007a00 	.word	0x20007a00
 800ca30:	200041fc 	.word	0x200041fc
 800ca34:	20004200 	.word	0x20004200
 800ca38:	20004208 	.word	0x20004208
 800ca3c:	20004204 	.word	0x20004204
 800ca40:	08018154 	.word	0x08018154
 800ca44:	08018228 	.word	0x08018228
 800ca48:	0801819c 	.word	0x0801819c

0800ca4c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b086      	sub	sp, #24
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800ca54:	6878      	ldr	r0, [r7, #4]
 800ca56:	f7ff fef3 	bl	800c840 <mem_to_ptr>
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	881b      	ldrh	r3, [r3, #0]
 800ca62:	4618      	mov	r0, r3
 800ca64:	f7ff feda 	bl	800c81c <ptr_to_mem>
 800ca68:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	885b      	ldrh	r3, [r3, #2]
 800ca6e:	4618      	mov	r0, r3
 800ca70:	f7ff fed4 	bl	800c81c <ptr_to_mem>
 800ca74:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	881b      	ldrh	r3, [r3, #0]
 800ca7a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ca7e:	d818      	bhi.n	800cab2 <mem_link_valid+0x66>
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	885b      	ldrh	r3, [r3, #2]
 800ca84:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ca88:	d813      	bhi.n	800cab2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ca8e:	8afa      	ldrh	r2, [r7, #22]
 800ca90:	429a      	cmp	r2, r3
 800ca92:	d004      	beq.n	800ca9e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	881b      	ldrh	r3, [r3, #0]
 800ca98:	8afa      	ldrh	r2, [r7, #22]
 800ca9a:	429a      	cmp	r2, r3
 800ca9c:	d109      	bne.n	800cab2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ca9e:	4b08      	ldr	r3, [pc, #32]	; (800cac0 <mem_link_valid+0x74>)
 800caa0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800caa2:	693a      	ldr	r2, [r7, #16]
 800caa4:	429a      	cmp	r2, r3
 800caa6:	d006      	beq.n	800cab6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800caa8:	693b      	ldr	r3, [r7, #16]
 800caaa:	885b      	ldrh	r3, [r3, #2]
 800caac:	8afa      	ldrh	r2, [r7, #22]
 800caae:	429a      	cmp	r2, r3
 800cab0:	d001      	beq.n	800cab6 <mem_link_valid+0x6a>
    return 0;
 800cab2:	2300      	movs	r3, #0
 800cab4:	e000      	b.n	800cab8 <mem_link_valid+0x6c>
  }
  return 1;
 800cab6:	2301      	movs	r3, #1
}
 800cab8:	4618      	mov	r0, r3
 800caba:	3718      	adds	r7, #24
 800cabc:	46bd      	mov	sp, r7
 800cabe:	bd80      	pop	{r7, pc}
 800cac0:	20004200 	.word	0x20004200

0800cac4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b088      	sub	sp, #32
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d070      	beq.n	800cbb4 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	f003 0303 	and.w	r3, r3, #3
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d00d      	beq.n	800caf8 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800cadc:	4b37      	ldr	r3, [pc, #220]	; (800cbbc <mem_free+0xf8>)
 800cade:	f240 2273 	movw	r2, #627	; 0x273
 800cae2:	4937      	ldr	r1, [pc, #220]	; (800cbc0 <mem_free+0xfc>)
 800cae4:	4837      	ldr	r0, [pc, #220]	; (800cbc4 <mem_free+0x100>)
 800cae6:	f00a f9cd 	bl	8016e84 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800caea:	f009 fc63 	bl	80163b4 <sys_arch_protect>
 800caee:	60f8      	str	r0, [r7, #12]
 800caf0:	68f8      	ldr	r0, [r7, #12]
 800caf2:	f009 fc6d 	bl	80163d0 <sys_arch_unprotect>
    return;
 800caf6:	e05e      	b.n	800cbb6 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	3b08      	subs	r3, #8
 800cafc:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800cafe:	4b32      	ldr	r3, [pc, #200]	; (800cbc8 <mem_free+0x104>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	69fa      	ldr	r2, [r7, #28]
 800cb04:	429a      	cmp	r2, r3
 800cb06:	d306      	bcc.n	800cb16 <mem_free+0x52>
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	f103 020c 	add.w	r2, r3, #12
 800cb0e:	4b2f      	ldr	r3, [pc, #188]	; (800cbcc <mem_free+0x108>)
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	429a      	cmp	r2, r3
 800cb14:	d90d      	bls.n	800cb32 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800cb16:	4b29      	ldr	r3, [pc, #164]	; (800cbbc <mem_free+0xf8>)
 800cb18:	f240 227f 	movw	r2, #639	; 0x27f
 800cb1c:	492c      	ldr	r1, [pc, #176]	; (800cbd0 <mem_free+0x10c>)
 800cb1e:	4829      	ldr	r0, [pc, #164]	; (800cbc4 <mem_free+0x100>)
 800cb20:	f00a f9b0 	bl	8016e84 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800cb24:	f009 fc46 	bl	80163b4 <sys_arch_protect>
 800cb28:	6138      	str	r0, [r7, #16]
 800cb2a:	6938      	ldr	r0, [r7, #16]
 800cb2c:	f009 fc50 	bl	80163d0 <sys_arch_unprotect>
    return;
 800cb30:	e041      	b.n	800cbb6 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800cb32:	4828      	ldr	r0, [pc, #160]	; (800cbd4 <mem_free+0x110>)
 800cb34:	f009 fbfc 	bl	8016330 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800cb38:	69fb      	ldr	r3, [r7, #28]
 800cb3a:	791b      	ldrb	r3, [r3, #4]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d110      	bne.n	800cb62 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800cb40:	4b1e      	ldr	r3, [pc, #120]	; (800cbbc <mem_free+0xf8>)
 800cb42:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800cb46:	4924      	ldr	r1, [pc, #144]	; (800cbd8 <mem_free+0x114>)
 800cb48:	481e      	ldr	r0, [pc, #120]	; (800cbc4 <mem_free+0x100>)
 800cb4a:	f00a f99b 	bl	8016e84 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800cb4e:	4821      	ldr	r0, [pc, #132]	; (800cbd4 <mem_free+0x110>)
 800cb50:	f009 fbfd 	bl	801634e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800cb54:	f009 fc2e 	bl	80163b4 <sys_arch_protect>
 800cb58:	6178      	str	r0, [r7, #20]
 800cb5a:	6978      	ldr	r0, [r7, #20]
 800cb5c:	f009 fc38 	bl	80163d0 <sys_arch_unprotect>
    return;
 800cb60:	e029      	b.n	800cbb6 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800cb62:	69f8      	ldr	r0, [r7, #28]
 800cb64:	f7ff ff72 	bl	800ca4c <mem_link_valid>
 800cb68:	4603      	mov	r3, r0
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d110      	bne.n	800cb90 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800cb6e:	4b13      	ldr	r3, [pc, #76]	; (800cbbc <mem_free+0xf8>)
 800cb70:	f240 2295 	movw	r2, #661	; 0x295
 800cb74:	4919      	ldr	r1, [pc, #100]	; (800cbdc <mem_free+0x118>)
 800cb76:	4813      	ldr	r0, [pc, #76]	; (800cbc4 <mem_free+0x100>)
 800cb78:	f00a f984 	bl	8016e84 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800cb7c:	4815      	ldr	r0, [pc, #84]	; (800cbd4 <mem_free+0x110>)
 800cb7e:	f009 fbe6 	bl	801634e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800cb82:	f009 fc17 	bl	80163b4 <sys_arch_protect>
 800cb86:	61b8      	str	r0, [r7, #24]
 800cb88:	69b8      	ldr	r0, [r7, #24]
 800cb8a:	f009 fc21 	bl	80163d0 <sys_arch_unprotect>
    return;
 800cb8e:	e012      	b.n	800cbb6 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800cb90:	69fb      	ldr	r3, [r7, #28]
 800cb92:	2200      	movs	r2, #0
 800cb94:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800cb96:	4b12      	ldr	r3, [pc, #72]	; (800cbe0 <mem_free+0x11c>)
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	69fa      	ldr	r2, [r7, #28]
 800cb9c:	429a      	cmp	r2, r3
 800cb9e:	d202      	bcs.n	800cba6 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800cba0:	4a0f      	ldr	r2, [pc, #60]	; (800cbe0 <mem_free+0x11c>)
 800cba2:	69fb      	ldr	r3, [r7, #28]
 800cba4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800cba6:	69f8      	ldr	r0, [r7, #28]
 800cba8:	f7ff fe5c 	bl	800c864 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800cbac:	4809      	ldr	r0, [pc, #36]	; (800cbd4 <mem_free+0x110>)
 800cbae:	f009 fbce 	bl	801634e <sys_mutex_unlock>
 800cbb2:	e000      	b.n	800cbb6 <mem_free+0xf2>
    return;
 800cbb4:	bf00      	nop
}
 800cbb6:	3720      	adds	r7, #32
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	bd80      	pop	{r7, pc}
 800cbbc:	08018154 	.word	0x08018154
 800cbc0:	08018244 	.word	0x08018244
 800cbc4:	0801819c 	.word	0x0801819c
 800cbc8:	200041fc 	.word	0x200041fc
 800cbcc:	20004200 	.word	0x20004200
 800cbd0:	08018268 	.word	0x08018268
 800cbd4:	20004204 	.word	0x20004204
 800cbd8:	08018284 	.word	0x08018284
 800cbdc:	080182ac 	.word	0x080182ac
 800cbe0:	20004208 	.word	0x20004208

0800cbe4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	b088      	sub	sp, #32
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	6078      	str	r0, [r7, #4]
 800cbec:	460b      	mov	r3, r1
 800cbee:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800cbf0:	887b      	ldrh	r3, [r7, #2]
 800cbf2:	3303      	adds	r3, #3
 800cbf4:	b29b      	uxth	r3, r3
 800cbf6:	f023 0303 	bic.w	r3, r3, #3
 800cbfa:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800cbfc:	8bfb      	ldrh	r3, [r7, #30]
 800cbfe:	2b0b      	cmp	r3, #11
 800cc00:	d801      	bhi.n	800cc06 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800cc02:	230c      	movs	r3, #12
 800cc04:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800cc06:	8bfb      	ldrh	r3, [r7, #30]
 800cc08:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cc0c:	d803      	bhi.n	800cc16 <mem_trim+0x32>
 800cc0e:	8bfa      	ldrh	r2, [r7, #30]
 800cc10:	887b      	ldrh	r3, [r7, #2]
 800cc12:	429a      	cmp	r2, r3
 800cc14:	d201      	bcs.n	800cc1a <mem_trim+0x36>
    return NULL;
 800cc16:	2300      	movs	r3, #0
 800cc18:	e0d8      	b.n	800cdcc <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800cc1a:	4b6e      	ldr	r3, [pc, #440]	; (800cdd4 <mem_trim+0x1f0>)
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	687a      	ldr	r2, [r7, #4]
 800cc20:	429a      	cmp	r2, r3
 800cc22:	d304      	bcc.n	800cc2e <mem_trim+0x4a>
 800cc24:	4b6c      	ldr	r3, [pc, #432]	; (800cdd8 <mem_trim+0x1f4>)
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	687a      	ldr	r2, [r7, #4]
 800cc2a:	429a      	cmp	r2, r3
 800cc2c:	d306      	bcc.n	800cc3c <mem_trim+0x58>
 800cc2e:	4b6b      	ldr	r3, [pc, #428]	; (800cddc <mem_trim+0x1f8>)
 800cc30:	f240 22d1 	movw	r2, #721	; 0x2d1
 800cc34:	496a      	ldr	r1, [pc, #424]	; (800cde0 <mem_trim+0x1fc>)
 800cc36:	486b      	ldr	r0, [pc, #428]	; (800cde4 <mem_trim+0x200>)
 800cc38:	f00a f924 	bl	8016e84 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800cc3c:	4b65      	ldr	r3, [pc, #404]	; (800cdd4 <mem_trim+0x1f0>)
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	687a      	ldr	r2, [r7, #4]
 800cc42:	429a      	cmp	r2, r3
 800cc44:	d304      	bcc.n	800cc50 <mem_trim+0x6c>
 800cc46:	4b64      	ldr	r3, [pc, #400]	; (800cdd8 <mem_trim+0x1f4>)
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	687a      	ldr	r2, [r7, #4]
 800cc4c:	429a      	cmp	r2, r3
 800cc4e:	d307      	bcc.n	800cc60 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800cc50:	f009 fbb0 	bl	80163b4 <sys_arch_protect>
 800cc54:	60b8      	str	r0, [r7, #8]
 800cc56:	68b8      	ldr	r0, [r7, #8]
 800cc58:	f009 fbba 	bl	80163d0 <sys_arch_unprotect>
    return rmem;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	e0b5      	b.n	800cdcc <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	3b08      	subs	r3, #8
 800cc64:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800cc66:	69b8      	ldr	r0, [r7, #24]
 800cc68:	f7ff fdea 	bl	800c840 <mem_to_ptr>
 800cc6c:	4603      	mov	r3, r0
 800cc6e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800cc70:	69bb      	ldr	r3, [r7, #24]
 800cc72:	881a      	ldrh	r2, [r3, #0]
 800cc74:	8afb      	ldrh	r3, [r7, #22]
 800cc76:	1ad3      	subs	r3, r2, r3
 800cc78:	b29b      	uxth	r3, r3
 800cc7a:	3b08      	subs	r3, #8
 800cc7c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800cc7e:	8bfa      	ldrh	r2, [r7, #30]
 800cc80:	8abb      	ldrh	r3, [r7, #20]
 800cc82:	429a      	cmp	r2, r3
 800cc84:	d906      	bls.n	800cc94 <mem_trim+0xb0>
 800cc86:	4b55      	ldr	r3, [pc, #340]	; (800cddc <mem_trim+0x1f8>)
 800cc88:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800cc8c:	4956      	ldr	r1, [pc, #344]	; (800cde8 <mem_trim+0x204>)
 800cc8e:	4855      	ldr	r0, [pc, #340]	; (800cde4 <mem_trim+0x200>)
 800cc90:	f00a f8f8 	bl	8016e84 <iprintf>
  if (newsize > size) {
 800cc94:	8bfa      	ldrh	r2, [r7, #30]
 800cc96:	8abb      	ldrh	r3, [r7, #20]
 800cc98:	429a      	cmp	r2, r3
 800cc9a:	d901      	bls.n	800cca0 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	e095      	b.n	800cdcc <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800cca0:	8bfa      	ldrh	r2, [r7, #30]
 800cca2:	8abb      	ldrh	r3, [r7, #20]
 800cca4:	429a      	cmp	r2, r3
 800cca6:	d101      	bne.n	800ccac <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	e08f      	b.n	800cdcc <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800ccac:	484f      	ldr	r0, [pc, #316]	; (800cdec <mem_trim+0x208>)
 800ccae:	f009 fb3f 	bl	8016330 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800ccb2:	69bb      	ldr	r3, [r7, #24]
 800ccb4:	881b      	ldrh	r3, [r3, #0]
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	f7ff fdb0 	bl	800c81c <ptr_to_mem>
 800ccbc:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800ccbe:	693b      	ldr	r3, [r7, #16]
 800ccc0:	791b      	ldrb	r3, [r3, #4]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d13f      	bne.n	800cd46 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800ccc6:	69bb      	ldr	r3, [r7, #24]
 800ccc8:	881b      	ldrh	r3, [r3, #0]
 800ccca:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ccce:	d106      	bne.n	800ccde <mem_trim+0xfa>
 800ccd0:	4b42      	ldr	r3, [pc, #264]	; (800cddc <mem_trim+0x1f8>)
 800ccd2:	f240 22f5 	movw	r2, #757	; 0x2f5
 800ccd6:	4946      	ldr	r1, [pc, #280]	; (800cdf0 <mem_trim+0x20c>)
 800ccd8:	4842      	ldr	r0, [pc, #264]	; (800cde4 <mem_trim+0x200>)
 800ccda:	f00a f8d3 	bl	8016e84 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800ccde:	693b      	ldr	r3, [r7, #16]
 800cce0:	881b      	ldrh	r3, [r3, #0]
 800cce2:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800cce4:	8afa      	ldrh	r2, [r7, #22]
 800cce6:	8bfb      	ldrh	r3, [r7, #30]
 800cce8:	4413      	add	r3, r2
 800ccea:	b29b      	uxth	r3, r3
 800ccec:	3308      	adds	r3, #8
 800ccee:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800ccf0:	4b40      	ldr	r3, [pc, #256]	; (800cdf4 <mem_trim+0x210>)
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	693a      	ldr	r2, [r7, #16]
 800ccf6:	429a      	cmp	r2, r3
 800ccf8:	d106      	bne.n	800cd08 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800ccfa:	89fb      	ldrh	r3, [r7, #14]
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	f7ff fd8d 	bl	800c81c <ptr_to_mem>
 800cd02:	4603      	mov	r3, r0
 800cd04:	4a3b      	ldr	r2, [pc, #236]	; (800cdf4 <mem_trim+0x210>)
 800cd06:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800cd08:	89fb      	ldrh	r3, [r7, #14]
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	f7ff fd86 	bl	800c81c <ptr_to_mem>
 800cd10:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800cd12:	693b      	ldr	r3, [r7, #16]
 800cd14:	2200      	movs	r2, #0
 800cd16:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800cd18:	693b      	ldr	r3, [r7, #16]
 800cd1a:	89ba      	ldrh	r2, [r7, #12]
 800cd1c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800cd1e:	693b      	ldr	r3, [r7, #16]
 800cd20:	8afa      	ldrh	r2, [r7, #22]
 800cd22:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800cd24:	69bb      	ldr	r3, [r7, #24]
 800cd26:	89fa      	ldrh	r2, [r7, #14]
 800cd28:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800cd2a:	693b      	ldr	r3, [r7, #16]
 800cd2c:	881b      	ldrh	r3, [r3, #0]
 800cd2e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cd32:	d047      	beq.n	800cdc4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800cd34:	693b      	ldr	r3, [r7, #16]
 800cd36:	881b      	ldrh	r3, [r3, #0]
 800cd38:	4618      	mov	r0, r3
 800cd3a:	f7ff fd6f 	bl	800c81c <ptr_to_mem>
 800cd3e:	4602      	mov	r2, r0
 800cd40:	89fb      	ldrh	r3, [r7, #14]
 800cd42:	8053      	strh	r3, [r2, #2]
 800cd44:	e03e      	b.n	800cdc4 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800cd46:	8bfb      	ldrh	r3, [r7, #30]
 800cd48:	f103 0214 	add.w	r2, r3, #20
 800cd4c:	8abb      	ldrh	r3, [r7, #20]
 800cd4e:	429a      	cmp	r2, r3
 800cd50:	d838      	bhi.n	800cdc4 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800cd52:	8afa      	ldrh	r2, [r7, #22]
 800cd54:	8bfb      	ldrh	r3, [r7, #30]
 800cd56:	4413      	add	r3, r2
 800cd58:	b29b      	uxth	r3, r3
 800cd5a:	3308      	adds	r3, #8
 800cd5c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800cd5e:	69bb      	ldr	r3, [r7, #24]
 800cd60:	881b      	ldrh	r3, [r3, #0]
 800cd62:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cd66:	d106      	bne.n	800cd76 <mem_trim+0x192>
 800cd68:	4b1c      	ldr	r3, [pc, #112]	; (800cddc <mem_trim+0x1f8>)
 800cd6a:	f240 3216 	movw	r2, #790	; 0x316
 800cd6e:	4920      	ldr	r1, [pc, #128]	; (800cdf0 <mem_trim+0x20c>)
 800cd70:	481c      	ldr	r0, [pc, #112]	; (800cde4 <mem_trim+0x200>)
 800cd72:	f00a f887 	bl	8016e84 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800cd76:	89fb      	ldrh	r3, [r7, #14]
 800cd78:	4618      	mov	r0, r3
 800cd7a:	f7ff fd4f 	bl	800c81c <ptr_to_mem>
 800cd7e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800cd80:	4b1c      	ldr	r3, [pc, #112]	; (800cdf4 <mem_trim+0x210>)
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	693a      	ldr	r2, [r7, #16]
 800cd86:	429a      	cmp	r2, r3
 800cd88:	d202      	bcs.n	800cd90 <mem_trim+0x1ac>
      lfree = mem2;
 800cd8a:	4a1a      	ldr	r2, [pc, #104]	; (800cdf4 <mem_trim+0x210>)
 800cd8c:	693b      	ldr	r3, [r7, #16]
 800cd8e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800cd90:	693b      	ldr	r3, [r7, #16]
 800cd92:	2200      	movs	r2, #0
 800cd94:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800cd96:	69bb      	ldr	r3, [r7, #24]
 800cd98:	881a      	ldrh	r2, [r3, #0]
 800cd9a:	693b      	ldr	r3, [r7, #16]
 800cd9c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800cd9e:	693b      	ldr	r3, [r7, #16]
 800cda0:	8afa      	ldrh	r2, [r7, #22]
 800cda2:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800cda4:	69bb      	ldr	r3, [r7, #24]
 800cda6:	89fa      	ldrh	r2, [r7, #14]
 800cda8:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800cdaa:	693b      	ldr	r3, [r7, #16]
 800cdac:	881b      	ldrh	r3, [r3, #0]
 800cdae:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cdb2:	d007      	beq.n	800cdc4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800cdb4:	693b      	ldr	r3, [r7, #16]
 800cdb6:	881b      	ldrh	r3, [r3, #0]
 800cdb8:	4618      	mov	r0, r3
 800cdba:	f7ff fd2f 	bl	800c81c <ptr_to_mem>
 800cdbe:	4602      	mov	r2, r0
 800cdc0:	89fb      	ldrh	r3, [r7, #14]
 800cdc2:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800cdc4:	4809      	ldr	r0, [pc, #36]	; (800cdec <mem_trim+0x208>)
 800cdc6:	f009 fac2 	bl	801634e <sys_mutex_unlock>
  return rmem;
 800cdca:	687b      	ldr	r3, [r7, #4]
}
 800cdcc:	4618      	mov	r0, r3
 800cdce:	3720      	adds	r7, #32
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	bd80      	pop	{r7, pc}
 800cdd4:	200041fc 	.word	0x200041fc
 800cdd8:	20004200 	.word	0x20004200
 800cddc:	08018154 	.word	0x08018154
 800cde0:	080182e0 	.word	0x080182e0
 800cde4:	0801819c 	.word	0x0801819c
 800cde8:	080182f8 	.word	0x080182f8
 800cdec:	20004204 	.word	0x20004204
 800cdf0:	08018318 	.word	0x08018318
 800cdf4:	20004208 	.word	0x20004208

0800cdf8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	b088      	sub	sp, #32
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	4603      	mov	r3, r0
 800ce00:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800ce02:	88fb      	ldrh	r3, [r7, #6]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d101      	bne.n	800ce0c <mem_malloc+0x14>
    return NULL;
 800ce08:	2300      	movs	r3, #0
 800ce0a:	e0e2      	b.n	800cfd2 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800ce0c:	88fb      	ldrh	r3, [r7, #6]
 800ce0e:	3303      	adds	r3, #3
 800ce10:	b29b      	uxth	r3, r3
 800ce12:	f023 0303 	bic.w	r3, r3, #3
 800ce16:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800ce18:	8bbb      	ldrh	r3, [r7, #28]
 800ce1a:	2b0b      	cmp	r3, #11
 800ce1c:	d801      	bhi.n	800ce22 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800ce1e:	230c      	movs	r3, #12
 800ce20:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800ce22:	8bbb      	ldrh	r3, [r7, #28]
 800ce24:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ce28:	d803      	bhi.n	800ce32 <mem_malloc+0x3a>
 800ce2a:	8bba      	ldrh	r2, [r7, #28]
 800ce2c:	88fb      	ldrh	r3, [r7, #6]
 800ce2e:	429a      	cmp	r2, r3
 800ce30:	d201      	bcs.n	800ce36 <mem_malloc+0x3e>
    return NULL;
 800ce32:	2300      	movs	r3, #0
 800ce34:	e0cd      	b.n	800cfd2 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800ce36:	4869      	ldr	r0, [pc, #420]	; (800cfdc <mem_malloc+0x1e4>)
 800ce38:	f009 fa7a 	bl	8016330 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800ce3c:	4b68      	ldr	r3, [pc, #416]	; (800cfe0 <mem_malloc+0x1e8>)
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	4618      	mov	r0, r3
 800ce42:	f7ff fcfd 	bl	800c840 <mem_to_ptr>
 800ce46:	4603      	mov	r3, r0
 800ce48:	83fb      	strh	r3, [r7, #30]
 800ce4a:	e0b7      	b.n	800cfbc <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800ce4c:	8bfb      	ldrh	r3, [r7, #30]
 800ce4e:	4618      	mov	r0, r3
 800ce50:	f7ff fce4 	bl	800c81c <ptr_to_mem>
 800ce54:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800ce56:	697b      	ldr	r3, [r7, #20]
 800ce58:	791b      	ldrb	r3, [r3, #4]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	f040 80a7 	bne.w	800cfae <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800ce60:	697b      	ldr	r3, [r7, #20]
 800ce62:	881b      	ldrh	r3, [r3, #0]
 800ce64:	461a      	mov	r2, r3
 800ce66:	8bfb      	ldrh	r3, [r7, #30]
 800ce68:	1ad3      	subs	r3, r2, r3
 800ce6a:	f1a3 0208 	sub.w	r2, r3, #8
 800ce6e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800ce70:	429a      	cmp	r2, r3
 800ce72:	f0c0 809c 	bcc.w	800cfae <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800ce76:	697b      	ldr	r3, [r7, #20]
 800ce78:	881b      	ldrh	r3, [r3, #0]
 800ce7a:	461a      	mov	r2, r3
 800ce7c:	8bfb      	ldrh	r3, [r7, #30]
 800ce7e:	1ad3      	subs	r3, r2, r3
 800ce80:	f1a3 0208 	sub.w	r2, r3, #8
 800ce84:	8bbb      	ldrh	r3, [r7, #28]
 800ce86:	3314      	adds	r3, #20
 800ce88:	429a      	cmp	r2, r3
 800ce8a:	d333      	bcc.n	800cef4 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800ce8c:	8bfa      	ldrh	r2, [r7, #30]
 800ce8e:	8bbb      	ldrh	r3, [r7, #28]
 800ce90:	4413      	add	r3, r2
 800ce92:	b29b      	uxth	r3, r3
 800ce94:	3308      	adds	r3, #8
 800ce96:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800ce98:	8a7b      	ldrh	r3, [r7, #18]
 800ce9a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ce9e:	d106      	bne.n	800ceae <mem_malloc+0xb6>
 800cea0:	4b50      	ldr	r3, [pc, #320]	; (800cfe4 <mem_malloc+0x1ec>)
 800cea2:	f240 3287 	movw	r2, #903	; 0x387
 800cea6:	4950      	ldr	r1, [pc, #320]	; (800cfe8 <mem_malloc+0x1f0>)
 800cea8:	4850      	ldr	r0, [pc, #320]	; (800cfec <mem_malloc+0x1f4>)
 800ceaa:	f009 ffeb 	bl	8016e84 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800ceae:	8a7b      	ldrh	r3, [r7, #18]
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	f7ff fcb3 	bl	800c81c <ptr_to_mem>
 800ceb6:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	2200      	movs	r2, #0
 800cebc:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800cebe:	697b      	ldr	r3, [r7, #20]
 800cec0:	881a      	ldrh	r2, [r3, #0]
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	8bfa      	ldrh	r2, [r7, #30]
 800ceca:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800cecc:	697b      	ldr	r3, [r7, #20]
 800cece:	8a7a      	ldrh	r2, [r7, #18]
 800ced0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800ced2:	697b      	ldr	r3, [r7, #20]
 800ced4:	2201      	movs	r2, #1
 800ced6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	881b      	ldrh	r3, [r3, #0]
 800cedc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cee0:	d00b      	beq.n	800cefa <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	881b      	ldrh	r3, [r3, #0]
 800cee6:	4618      	mov	r0, r3
 800cee8:	f7ff fc98 	bl	800c81c <ptr_to_mem>
 800ceec:	4602      	mov	r2, r0
 800ceee:	8a7b      	ldrh	r3, [r7, #18]
 800cef0:	8053      	strh	r3, [r2, #2]
 800cef2:	e002      	b.n	800cefa <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800cef4:	697b      	ldr	r3, [r7, #20]
 800cef6:	2201      	movs	r2, #1
 800cef8:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800cefa:	4b39      	ldr	r3, [pc, #228]	; (800cfe0 <mem_malloc+0x1e8>)
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	697a      	ldr	r2, [r7, #20]
 800cf00:	429a      	cmp	r2, r3
 800cf02:	d127      	bne.n	800cf54 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800cf04:	4b36      	ldr	r3, [pc, #216]	; (800cfe0 <mem_malloc+0x1e8>)
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800cf0a:	e005      	b.n	800cf18 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800cf0c:	69bb      	ldr	r3, [r7, #24]
 800cf0e:	881b      	ldrh	r3, [r3, #0]
 800cf10:	4618      	mov	r0, r3
 800cf12:	f7ff fc83 	bl	800c81c <ptr_to_mem>
 800cf16:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800cf18:	69bb      	ldr	r3, [r7, #24]
 800cf1a:	791b      	ldrb	r3, [r3, #4]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d004      	beq.n	800cf2a <mem_malloc+0x132>
 800cf20:	4b33      	ldr	r3, [pc, #204]	; (800cff0 <mem_malloc+0x1f8>)
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	69ba      	ldr	r2, [r7, #24]
 800cf26:	429a      	cmp	r2, r3
 800cf28:	d1f0      	bne.n	800cf0c <mem_malloc+0x114>
          }
          lfree = cur;
 800cf2a:	4a2d      	ldr	r2, [pc, #180]	; (800cfe0 <mem_malloc+0x1e8>)
 800cf2c:	69bb      	ldr	r3, [r7, #24]
 800cf2e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800cf30:	4b2b      	ldr	r3, [pc, #172]	; (800cfe0 <mem_malloc+0x1e8>)
 800cf32:	681a      	ldr	r2, [r3, #0]
 800cf34:	4b2e      	ldr	r3, [pc, #184]	; (800cff0 <mem_malloc+0x1f8>)
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	429a      	cmp	r2, r3
 800cf3a:	d00b      	beq.n	800cf54 <mem_malloc+0x15c>
 800cf3c:	4b28      	ldr	r3, [pc, #160]	; (800cfe0 <mem_malloc+0x1e8>)
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	791b      	ldrb	r3, [r3, #4]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d006      	beq.n	800cf54 <mem_malloc+0x15c>
 800cf46:	4b27      	ldr	r3, [pc, #156]	; (800cfe4 <mem_malloc+0x1ec>)
 800cf48:	f240 32b5 	movw	r2, #949	; 0x3b5
 800cf4c:	4929      	ldr	r1, [pc, #164]	; (800cff4 <mem_malloc+0x1fc>)
 800cf4e:	4827      	ldr	r0, [pc, #156]	; (800cfec <mem_malloc+0x1f4>)
 800cf50:	f009 ff98 	bl	8016e84 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800cf54:	4821      	ldr	r0, [pc, #132]	; (800cfdc <mem_malloc+0x1e4>)
 800cf56:	f009 f9fa 	bl	801634e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800cf5a:	8bba      	ldrh	r2, [r7, #28]
 800cf5c:	697b      	ldr	r3, [r7, #20]
 800cf5e:	4413      	add	r3, r2
 800cf60:	3308      	adds	r3, #8
 800cf62:	4a23      	ldr	r2, [pc, #140]	; (800cff0 <mem_malloc+0x1f8>)
 800cf64:	6812      	ldr	r2, [r2, #0]
 800cf66:	4293      	cmp	r3, r2
 800cf68:	d906      	bls.n	800cf78 <mem_malloc+0x180>
 800cf6a:	4b1e      	ldr	r3, [pc, #120]	; (800cfe4 <mem_malloc+0x1ec>)
 800cf6c:	f240 32b9 	movw	r2, #953	; 0x3b9
 800cf70:	4921      	ldr	r1, [pc, #132]	; (800cff8 <mem_malloc+0x200>)
 800cf72:	481e      	ldr	r0, [pc, #120]	; (800cfec <mem_malloc+0x1f4>)
 800cf74:	f009 ff86 	bl	8016e84 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800cf78:	697b      	ldr	r3, [r7, #20]
 800cf7a:	f003 0303 	and.w	r3, r3, #3
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d006      	beq.n	800cf90 <mem_malloc+0x198>
 800cf82:	4b18      	ldr	r3, [pc, #96]	; (800cfe4 <mem_malloc+0x1ec>)
 800cf84:	f240 32bb 	movw	r2, #955	; 0x3bb
 800cf88:	491c      	ldr	r1, [pc, #112]	; (800cffc <mem_malloc+0x204>)
 800cf8a:	4818      	ldr	r0, [pc, #96]	; (800cfec <mem_malloc+0x1f4>)
 800cf8c:	f009 ff7a 	bl	8016e84 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800cf90:	697b      	ldr	r3, [r7, #20]
 800cf92:	f003 0303 	and.w	r3, r3, #3
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d006      	beq.n	800cfa8 <mem_malloc+0x1b0>
 800cf9a:	4b12      	ldr	r3, [pc, #72]	; (800cfe4 <mem_malloc+0x1ec>)
 800cf9c:	f240 32bd 	movw	r2, #957	; 0x3bd
 800cfa0:	4917      	ldr	r1, [pc, #92]	; (800d000 <mem_malloc+0x208>)
 800cfa2:	4812      	ldr	r0, [pc, #72]	; (800cfec <mem_malloc+0x1f4>)
 800cfa4:	f009 ff6e 	bl	8016e84 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800cfa8:	697b      	ldr	r3, [r7, #20]
 800cfaa:	3308      	adds	r3, #8
 800cfac:	e011      	b.n	800cfd2 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800cfae:	8bfb      	ldrh	r3, [r7, #30]
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	f7ff fc33 	bl	800c81c <ptr_to_mem>
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	881b      	ldrh	r3, [r3, #0]
 800cfba:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800cfbc:	8bfa      	ldrh	r2, [r7, #30]
 800cfbe:	8bbb      	ldrh	r3, [r7, #28]
 800cfc0:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800cfc4:	429a      	cmp	r2, r3
 800cfc6:	f4ff af41 	bcc.w	800ce4c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800cfca:	4804      	ldr	r0, [pc, #16]	; (800cfdc <mem_malloc+0x1e4>)
 800cfcc:	f009 f9bf 	bl	801634e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800cfd0:	2300      	movs	r3, #0
}
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	3720      	adds	r7, #32
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	bd80      	pop	{r7, pc}
 800cfda:	bf00      	nop
 800cfdc:	20004204 	.word	0x20004204
 800cfe0:	20004208 	.word	0x20004208
 800cfe4:	08018154 	.word	0x08018154
 800cfe8:	08018318 	.word	0x08018318
 800cfec:	0801819c 	.word	0x0801819c
 800cff0:	20004200 	.word	0x20004200
 800cff4:	0801832c 	.word	0x0801832c
 800cff8:	08018348 	.word	0x08018348
 800cffc:	08018378 	.word	0x08018378
 800d000:	080183a8 	.word	0x080183a8

0800d004 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800d004:	b480      	push	{r7}
 800d006:	b085      	sub	sp, #20
 800d008:	af00      	add	r7, sp, #0
 800d00a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	689b      	ldr	r3, [r3, #8]
 800d010:	2200      	movs	r2, #0
 800d012:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	685b      	ldr	r3, [r3, #4]
 800d018:	3303      	adds	r3, #3
 800d01a:	f023 0303 	bic.w	r3, r3, #3
 800d01e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800d020:	2300      	movs	r3, #0
 800d022:	60fb      	str	r3, [r7, #12]
 800d024:	e011      	b.n	800d04a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	689b      	ldr	r3, [r3, #8]
 800d02a:	681a      	ldr	r2, [r3, #0]
 800d02c:	68bb      	ldr	r3, [r7, #8]
 800d02e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	689b      	ldr	r3, [r3, #8]
 800d034:	68ba      	ldr	r2, [r7, #8]
 800d036:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	881b      	ldrh	r3, [r3, #0]
 800d03c:	461a      	mov	r2, r3
 800d03e:	68bb      	ldr	r3, [r7, #8]
 800d040:	4413      	add	r3, r2
 800d042:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	3301      	adds	r3, #1
 800d048:	60fb      	str	r3, [r7, #12]
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	885b      	ldrh	r3, [r3, #2]
 800d04e:	461a      	mov	r2, r3
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	4293      	cmp	r3, r2
 800d054:	dbe7      	blt.n	800d026 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800d056:	bf00      	nop
 800d058:	bf00      	nop
 800d05a:	3714      	adds	r7, #20
 800d05c:	46bd      	mov	sp, r7
 800d05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d062:	4770      	bx	lr

0800d064 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b082      	sub	sp, #8
 800d068:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d06a:	2300      	movs	r3, #0
 800d06c:	80fb      	strh	r3, [r7, #6]
 800d06e:	e009      	b.n	800d084 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800d070:	88fb      	ldrh	r3, [r7, #6]
 800d072:	4a08      	ldr	r2, [pc, #32]	; (800d094 <memp_init+0x30>)
 800d074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d078:	4618      	mov	r0, r3
 800d07a:	f7ff ffc3 	bl	800d004 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d07e:	88fb      	ldrh	r3, [r7, #6]
 800d080:	3301      	adds	r3, #1
 800d082:	80fb      	strh	r3, [r7, #6]
 800d084:	88fb      	ldrh	r3, [r7, #6]
 800d086:	2b0c      	cmp	r3, #12
 800d088:	d9f2      	bls.n	800d070 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800d08a:	bf00      	nop
 800d08c:	bf00      	nop
 800d08e:	3708      	adds	r7, #8
 800d090:	46bd      	mov	sp, r7
 800d092:	bd80      	pop	{r7, pc}
 800d094:	0801abf8 	.word	0x0801abf8

0800d098 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b084      	sub	sp, #16
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800d0a0:	f009 f988 	bl	80163b4 <sys_arch_protect>
 800d0a4:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	689b      	ldr	r3, [r3, #8]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800d0ae:	68bb      	ldr	r3, [r7, #8]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d015      	beq.n	800d0e0 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	689b      	ldr	r3, [r3, #8]
 800d0b8:	68ba      	ldr	r2, [r7, #8]
 800d0ba:	6812      	ldr	r2, [r2, #0]
 800d0bc:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800d0be:	68bb      	ldr	r3, [r7, #8]
 800d0c0:	f003 0303 	and.w	r3, r3, #3
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d006      	beq.n	800d0d6 <do_memp_malloc_pool+0x3e>
 800d0c8:	4b09      	ldr	r3, [pc, #36]	; (800d0f0 <do_memp_malloc_pool+0x58>)
 800d0ca:	f44f 728c 	mov.w	r2, #280	; 0x118
 800d0ce:	4909      	ldr	r1, [pc, #36]	; (800d0f4 <do_memp_malloc_pool+0x5c>)
 800d0d0:	4809      	ldr	r0, [pc, #36]	; (800d0f8 <do_memp_malloc_pool+0x60>)
 800d0d2:	f009 fed7 	bl	8016e84 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d0d6:	68f8      	ldr	r0, [r7, #12]
 800d0d8:	f009 f97a 	bl	80163d0 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800d0dc:	68bb      	ldr	r3, [r7, #8]
 800d0de:	e003      	b.n	800d0e8 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d0e0:	68f8      	ldr	r0, [r7, #12]
 800d0e2:	f009 f975 	bl	80163d0 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800d0e6:	2300      	movs	r3, #0
}
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	3710      	adds	r7, #16
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	bd80      	pop	{r7, pc}
 800d0f0:	080183cc 	.word	0x080183cc
 800d0f4:	080183fc 	.word	0x080183fc
 800d0f8:	08018420 	.word	0x08018420

0800d0fc <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b084      	sub	sp, #16
 800d100:	af00      	add	r7, sp, #0
 800d102:	4603      	mov	r3, r0
 800d104:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800d106:	79fb      	ldrb	r3, [r7, #7]
 800d108:	2b0c      	cmp	r3, #12
 800d10a:	d908      	bls.n	800d11e <memp_malloc+0x22>
 800d10c:	4b0a      	ldr	r3, [pc, #40]	; (800d138 <memp_malloc+0x3c>)
 800d10e:	f240 1257 	movw	r2, #343	; 0x157
 800d112:	490a      	ldr	r1, [pc, #40]	; (800d13c <memp_malloc+0x40>)
 800d114:	480a      	ldr	r0, [pc, #40]	; (800d140 <memp_malloc+0x44>)
 800d116:	f009 feb5 	bl	8016e84 <iprintf>
 800d11a:	2300      	movs	r3, #0
 800d11c:	e008      	b.n	800d130 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800d11e:	79fb      	ldrb	r3, [r7, #7]
 800d120:	4a08      	ldr	r2, [pc, #32]	; (800d144 <memp_malloc+0x48>)
 800d122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d126:	4618      	mov	r0, r3
 800d128:	f7ff ffb6 	bl	800d098 <do_memp_malloc_pool>
 800d12c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800d12e:	68fb      	ldr	r3, [r7, #12]
}
 800d130:	4618      	mov	r0, r3
 800d132:	3710      	adds	r7, #16
 800d134:	46bd      	mov	sp, r7
 800d136:	bd80      	pop	{r7, pc}
 800d138:	080183cc 	.word	0x080183cc
 800d13c:	0801845c 	.word	0x0801845c
 800d140:	08018420 	.word	0x08018420
 800d144:	0801abf8 	.word	0x0801abf8

0800d148 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b084      	sub	sp, #16
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
 800d150:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800d152:	683b      	ldr	r3, [r7, #0]
 800d154:	f003 0303 	and.w	r3, r3, #3
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d006      	beq.n	800d16a <do_memp_free_pool+0x22>
 800d15c:	4b0d      	ldr	r3, [pc, #52]	; (800d194 <do_memp_free_pool+0x4c>)
 800d15e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800d162:	490d      	ldr	r1, [pc, #52]	; (800d198 <do_memp_free_pool+0x50>)
 800d164:	480d      	ldr	r0, [pc, #52]	; (800d19c <do_memp_free_pool+0x54>)
 800d166:	f009 fe8d 	bl	8016e84 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800d16a:	683b      	ldr	r3, [r7, #0]
 800d16c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800d16e:	f009 f921 	bl	80163b4 <sys_arch_protect>
 800d172:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	689b      	ldr	r3, [r3, #8]
 800d178:	681a      	ldr	r2, [r3, #0]
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	689b      	ldr	r3, [r3, #8]
 800d182:	68fa      	ldr	r2, [r7, #12]
 800d184:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800d186:	68b8      	ldr	r0, [r7, #8]
 800d188:	f009 f922 	bl	80163d0 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800d18c:	bf00      	nop
 800d18e:	3710      	adds	r7, #16
 800d190:	46bd      	mov	sp, r7
 800d192:	bd80      	pop	{r7, pc}
 800d194:	080183cc 	.word	0x080183cc
 800d198:	0801847c 	.word	0x0801847c
 800d19c:	08018420 	.word	0x08018420

0800d1a0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800d1a0:	b580      	push	{r7, lr}
 800d1a2:	b082      	sub	sp, #8
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	6039      	str	r1, [r7, #0]
 800d1aa:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800d1ac:	79fb      	ldrb	r3, [r7, #7]
 800d1ae:	2b0c      	cmp	r3, #12
 800d1b0:	d907      	bls.n	800d1c2 <memp_free+0x22>
 800d1b2:	4b0c      	ldr	r3, [pc, #48]	; (800d1e4 <memp_free+0x44>)
 800d1b4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800d1b8:	490b      	ldr	r1, [pc, #44]	; (800d1e8 <memp_free+0x48>)
 800d1ba:	480c      	ldr	r0, [pc, #48]	; (800d1ec <memp_free+0x4c>)
 800d1bc:	f009 fe62 	bl	8016e84 <iprintf>
 800d1c0:	e00c      	b.n	800d1dc <memp_free+0x3c>

  if (mem == NULL) {
 800d1c2:	683b      	ldr	r3, [r7, #0]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d008      	beq.n	800d1da <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800d1c8:	79fb      	ldrb	r3, [r7, #7]
 800d1ca:	4a09      	ldr	r2, [pc, #36]	; (800d1f0 <memp_free+0x50>)
 800d1cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d1d0:	6839      	ldr	r1, [r7, #0]
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	f7ff ffb8 	bl	800d148 <do_memp_free_pool>
 800d1d8:	e000      	b.n	800d1dc <memp_free+0x3c>
    return;
 800d1da:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800d1dc:	3708      	adds	r7, #8
 800d1de:	46bd      	mov	sp, r7
 800d1e0:	bd80      	pop	{r7, pc}
 800d1e2:	bf00      	nop
 800d1e4:	080183cc 	.word	0x080183cc
 800d1e8:	0801849c 	.word	0x0801849c
 800d1ec:	08018420 	.word	0x08018420
 800d1f0:	0801abf8 	.word	0x0801abf8

0800d1f4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800d1f4:	b480      	push	{r7}
 800d1f6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800d1f8:	bf00      	nop
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d200:	4770      	bx	lr
	...

0800d204 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800d204:	b580      	push	{r7, lr}
 800d206:	b086      	sub	sp, #24
 800d208:	af00      	add	r7, sp, #0
 800d20a:	60f8      	str	r0, [r7, #12]
 800d20c:	60b9      	str	r1, [r7, #8]
 800d20e:	607a      	str	r2, [r7, #4]
 800d210:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	2b00      	cmp	r3, #0
 800d216:	d108      	bne.n	800d22a <netif_add+0x26>
 800d218:	4b56      	ldr	r3, [pc, #344]	; (800d374 <netif_add+0x170>)
 800d21a:	f240 1227 	movw	r2, #295	; 0x127
 800d21e:	4956      	ldr	r1, [pc, #344]	; (800d378 <netif_add+0x174>)
 800d220:	4856      	ldr	r0, [pc, #344]	; (800d37c <netif_add+0x178>)
 800d222:	f009 fe2f 	bl	8016e84 <iprintf>
 800d226:	2300      	movs	r3, #0
 800d228:	e09f      	b.n	800d36a <netif_add+0x166>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800d22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d108      	bne.n	800d242 <netif_add+0x3e>
 800d230:	4b50      	ldr	r3, [pc, #320]	; (800d374 <netif_add+0x170>)
 800d232:	f44f 7294 	mov.w	r2, #296	; 0x128
 800d236:	4952      	ldr	r1, [pc, #328]	; (800d380 <netif_add+0x17c>)
 800d238:	4850      	ldr	r0, [pc, #320]	; (800d37c <netif_add+0x178>)
 800d23a:	f009 fe23 	bl	8016e84 <iprintf>
 800d23e:	2300      	movs	r3, #0
 800d240:	e093      	b.n	800d36a <netif_add+0x166>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800d242:	68bb      	ldr	r3, [r7, #8]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d101      	bne.n	800d24c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800d248:	4b4e      	ldr	r3, [pc, #312]	; (800d384 <netif_add+0x180>)
 800d24a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d101      	bne.n	800d256 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800d252:	4b4c      	ldr	r3, [pc, #304]	; (800d384 <netif_add+0x180>)
 800d254:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d256:	683b      	ldr	r3, [r7, #0]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d101      	bne.n	800d260 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800d25c:	4b49      	ldr	r3, [pc, #292]	; (800d384 <netif_add+0x180>)
 800d25e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	2200      	movs	r2, #0
 800d264:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	2200      	movs	r2, #0
 800d26a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	2200      	movs	r2, #0
 800d270:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	4a44      	ldr	r2, [pc, #272]	; (800d388 <netif_add+0x184>)
 800d276:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	2200      	movs	r2, #0
 800d27c:	841a      	strh	r2, [r3, #32]
  netif->flags = 0;
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	2200      	movs	r2, #0
 800d282:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	6a3a      	ldr	r2, [r7, #32]
 800d28a:	61da      	str	r2, [r3, #28]
  netif->num = netif_num;
 800d28c:	4b3f      	ldr	r3, [pc, #252]	; (800d38c <netif_add+0x188>)
 800d28e:	781a      	ldrb	r2, [r3, #0]
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->input = input;
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d29a:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800d29c:	683b      	ldr	r3, [r7, #0]
 800d29e:	687a      	ldr	r2, [r7, #4]
 800d2a0:	68b9      	ldr	r1, [r7, #8]
 800d2a2:	68f8      	ldr	r0, [r7, #12]
 800d2a4:	f000 f914 	bl	800d4d0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800d2a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2aa:	68f8      	ldr	r0, [r7, #12]
 800d2ac:	4798      	blx	r3
 800d2ae:	4603      	mov	r3, r0
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d001      	beq.n	800d2b8 <netif_add+0xb4>
    return NULL;
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	e058      	b.n	800d36a <netif_add+0x166>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d2be:	2bff      	cmp	r3, #255	; 0xff
 800d2c0:	d103      	bne.n	800d2ca <netif_add+0xc6>
        netif->num = 0;
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
      }
      num_netifs = 0;
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d2ce:	4b30      	ldr	r3, [pc, #192]	; (800d390 <netif_add+0x18c>)
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	617b      	str	r3, [r7, #20]
 800d2d4:	e02b      	b.n	800d32e <netif_add+0x12a>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800d2d6:	697a      	ldr	r2, [r7, #20]
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	429a      	cmp	r2, r3
 800d2dc:	d106      	bne.n	800d2ec <netif_add+0xe8>
 800d2de:	4b25      	ldr	r3, [pc, #148]	; (800d374 <netif_add+0x170>)
 800d2e0:	f240 128b 	movw	r2, #395	; 0x18b
 800d2e4:	492b      	ldr	r1, [pc, #172]	; (800d394 <netif_add+0x190>)
 800d2e6:	4825      	ldr	r0, [pc, #148]	; (800d37c <netif_add+0x178>)
 800d2e8:	f009 fdcc 	bl	8016e84 <iprintf>
        num_netifs++;
 800d2ec:	693b      	ldr	r3, [r7, #16]
 800d2ee:	3301      	adds	r3, #1
 800d2f0:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800d2f2:	693b      	ldr	r3, [r7, #16]
 800d2f4:	2bff      	cmp	r3, #255	; 0xff
 800d2f6:	dd06      	ble.n	800d306 <netif_add+0x102>
 800d2f8:	4b1e      	ldr	r3, [pc, #120]	; (800d374 <netif_add+0x170>)
 800d2fa:	f240 128d 	movw	r2, #397	; 0x18d
 800d2fe:	4926      	ldr	r1, [pc, #152]	; (800d398 <netif_add+0x194>)
 800d300:	481e      	ldr	r0, [pc, #120]	; (800d37c <netif_add+0x178>)
 800d302:	f009 fdbf 	bl	8016e84 <iprintf>
        if (netif2->num == netif->num) {
 800d306:	697b      	ldr	r3, [r7, #20]
 800d308:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d312:	429a      	cmp	r2, r3
 800d314:	d108      	bne.n	800d328 <netif_add+0x124>
          netif->num++;
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d31c:	3301      	adds	r3, #1
 800d31e:	b2da      	uxtb	r2, r3
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
          break;
 800d326:	e005      	b.n	800d334 <netif_add+0x130>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d328:	697b      	ldr	r3, [r7, #20]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	617b      	str	r3, [r7, #20]
 800d32e:	697b      	ldr	r3, [r7, #20]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d1d0      	bne.n	800d2d6 <netif_add+0xd2>
        }
      }
    } while (netif2 != NULL);
 800d334:	697b      	ldr	r3, [r7, #20]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d1be      	bne.n	800d2b8 <netif_add+0xb4>
  }
  if (netif->num == 254) {
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d340:	2bfe      	cmp	r3, #254	; 0xfe
 800d342:	d103      	bne.n	800d34c <netif_add+0x148>
    netif_num = 0;
 800d344:	4b11      	ldr	r3, [pc, #68]	; (800d38c <netif_add+0x188>)
 800d346:	2200      	movs	r2, #0
 800d348:	701a      	strb	r2, [r3, #0]
 800d34a:	e006      	b.n	800d35a <netif_add+0x156>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d352:	3301      	adds	r3, #1
 800d354:	b2da      	uxtb	r2, r3
 800d356:	4b0d      	ldr	r3, [pc, #52]	; (800d38c <netif_add+0x188>)
 800d358:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800d35a:	4b0d      	ldr	r3, [pc, #52]	; (800d390 <netif_add+0x18c>)
 800d35c:	681a      	ldr	r2, [r3, #0]
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800d362:	4a0b      	ldr	r2, [pc, #44]	; (800d390 <netif_add+0x18c>)
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800d368:	68fb      	ldr	r3, [r7, #12]
}
 800d36a:	4618      	mov	r0, r3
 800d36c:	3718      	adds	r7, #24
 800d36e:	46bd      	mov	sp, r7
 800d370:	bd80      	pop	{r7, pc}
 800d372:	bf00      	nop
 800d374:	080184b8 	.word	0x080184b8
 800d378:	0801854c 	.word	0x0801854c
 800d37c:	08018508 	.word	0x08018508
 800d380:	08018568 	.word	0x08018568
 800d384:	0801ac6c 	.word	0x0801ac6c
 800d388:	0800d6c1 	.word	0x0800d6c1
 800d38c:	20004240 	.word	0x20004240
 800d390:	2000b0ec 	.word	0x2000b0ec
 800d394:	0801858c 	.word	0x0801858c
 800d398:	080185a0 	.word	0x080185a0

0800d39c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d39c:	b580      	push	{r7, lr}
 800d39e:	b082      	sub	sp, #8
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	6078      	str	r0, [r7, #4]
 800d3a4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800d3a6:	6839      	ldr	r1, [r7, #0]
 800d3a8:	6878      	ldr	r0, [r7, #4]
 800d3aa:	f002 fb07 	bl	800f9bc <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800d3ae:	6839      	ldr	r1, [r7, #0]
 800d3b0:	6878      	ldr	r0, [r7, #4]
 800d3b2:	f006 fc17 	bl	8013be4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800d3b6:	bf00      	nop
 800d3b8:	3708      	adds	r7, #8
 800d3ba:	46bd      	mov	sp, r7
 800d3bc:	bd80      	pop	{r7, pc}
	...

0800d3c0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b086      	sub	sp, #24
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	60f8      	str	r0, [r7, #12]
 800d3c8:	60b9      	str	r1, [r7, #8]
 800d3ca:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800d3cc:	68bb      	ldr	r3, [r7, #8]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d106      	bne.n	800d3e0 <netif_do_set_ipaddr+0x20>
 800d3d2:	4b1d      	ldr	r3, [pc, #116]	; (800d448 <netif_do_set_ipaddr+0x88>)
 800d3d4:	f240 12cb 	movw	r2, #459	; 0x1cb
 800d3d8:	491c      	ldr	r1, [pc, #112]	; (800d44c <netif_do_set_ipaddr+0x8c>)
 800d3da:	481d      	ldr	r0, [pc, #116]	; (800d450 <netif_do_set_ipaddr+0x90>)
 800d3dc:	f009 fd52 	bl	8016e84 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d106      	bne.n	800d3f4 <netif_do_set_ipaddr+0x34>
 800d3e6:	4b18      	ldr	r3, [pc, #96]	; (800d448 <netif_do_set_ipaddr+0x88>)
 800d3e8:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800d3ec:	4917      	ldr	r1, [pc, #92]	; (800d44c <netif_do_set_ipaddr+0x8c>)
 800d3ee:	4818      	ldr	r0, [pc, #96]	; (800d450 <netif_do_set_ipaddr+0x90>)
 800d3f0:	f009 fd48 	bl	8016e84 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800d3f4:	68bb      	ldr	r3, [r7, #8]
 800d3f6:	681a      	ldr	r2, [r3, #0]
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	3304      	adds	r3, #4
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	429a      	cmp	r2, r3
 800d400:	d01c      	beq.n	800d43c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800d402:	68bb      	ldr	r3, [r7, #8]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	3304      	adds	r3, #4
 800d40c:	681a      	ldr	r2, [r3, #0]
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800d412:	f107 0314 	add.w	r3, r7, #20
 800d416:	4619      	mov	r1, r3
 800d418:	6878      	ldr	r0, [r7, #4]
 800d41a:	f7ff ffbf 	bl	800d39c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800d41e:	68bb      	ldr	r3, [r7, #8]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d002      	beq.n	800d42a <netif_do_set_ipaddr+0x6a>
 800d424:	68bb      	ldr	r3, [r7, #8]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	e000      	b.n	800d42c <netif_do_set_ipaddr+0x6c>
 800d42a:	2300      	movs	r3, #0
 800d42c:	68fa      	ldr	r2, [r7, #12]
 800d42e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800d430:	2101      	movs	r1, #1
 800d432:	68f8      	ldr	r0, [r7, #12]
 800d434:	f000 f8d2 	bl	800d5dc <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800d438:	2301      	movs	r3, #1
 800d43a:	e000      	b.n	800d43e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800d43c:	2300      	movs	r3, #0
}
 800d43e:	4618      	mov	r0, r3
 800d440:	3718      	adds	r7, #24
 800d442:	46bd      	mov	sp, r7
 800d444:	bd80      	pop	{r7, pc}
 800d446:	bf00      	nop
 800d448:	080184b8 	.word	0x080184b8
 800d44c:	080185d0 	.word	0x080185d0
 800d450:	08018508 	.word	0x08018508

0800d454 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800d454:	b480      	push	{r7}
 800d456:	b085      	sub	sp, #20
 800d458:	af00      	add	r7, sp, #0
 800d45a:	60f8      	str	r0, [r7, #12]
 800d45c:	60b9      	str	r1, [r7, #8]
 800d45e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800d460:	68bb      	ldr	r3, [r7, #8]
 800d462:	681a      	ldr	r2, [r3, #0]
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	3308      	adds	r3, #8
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	429a      	cmp	r2, r3
 800d46c:	d00a      	beq.n	800d484 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800d46e:	68bb      	ldr	r3, [r7, #8]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d002      	beq.n	800d47a <netif_do_set_netmask+0x26>
 800d474:	68bb      	ldr	r3, [r7, #8]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	e000      	b.n	800d47c <netif_do_set_netmask+0x28>
 800d47a:	2300      	movs	r3, #0
 800d47c:	68fa      	ldr	r2, [r7, #12]
 800d47e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800d480:	2301      	movs	r3, #1
 800d482:	e000      	b.n	800d486 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800d484:	2300      	movs	r3, #0
}
 800d486:	4618      	mov	r0, r3
 800d488:	3714      	adds	r7, #20
 800d48a:	46bd      	mov	sp, r7
 800d48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d490:	4770      	bx	lr

0800d492 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800d492:	b480      	push	{r7}
 800d494:	b085      	sub	sp, #20
 800d496:	af00      	add	r7, sp, #0
 800d498:	60f8      	str	r0, [r7, #12]
 800d49a:	60b9      	str	r1, [r7, #8]
 800d49c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800d49e:	68bb      	ldr	r3, [r7, #8]
 800d4a0:	681a      	ldr	r2, [r3, #0]
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	330c      	adds	r3, #12
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	429a      	cmp	r2, r3
 800d4aa:	d00a      	beq.n	800d4c2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800d4ac:	68bb      	ldr	r3, [r7, #8]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d002      	beq.n	800d4b8 <netif_do_set_gw+0x26>
 800d4b2:	68bb      	ldr	r3, [r7, #8]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	e000      	b.n	800d4ba <netif_do_set_gw+0x28>
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	68fa      	ldr	r2, [r7, #12]
 800d4bc:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800d4be:	2301      	movs	r3, #1
 800d4c0:	e000      	b.n	800d4c4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800d4c2:	2300      	movs	r3, #0
}
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	3714      	adds	r7, #20
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ce:	4770      	bx	lr

0800d4d0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b088      	sub	sp, #32
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	60f8      	str	r0, [r7, #12]
 800d4d8:	60b9      	str	r1, [r7, #8]
 800d4da:	607a      	str	r2, [r7, #4]
 800d4dc:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800d4de:	2300      	movs	r3, #0
 800d4e0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d4e6:	68bb      	ldr	r3, [r7, #8]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d101      	bne.n	800d4f0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800d4ec:	4b1c      	ldr	r3, [pc, #112]	; (800d560 <netif_set_addr+0x90>)
 800d4ee:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d101      	bne.n	800d4fa <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800d4f6:	4b1a      	ldr	r3, [pc, #104]	; (800d560 <netif_set_addr+0x90>)
 800d4f8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d4fa:	683b      	ldr	r3, [r7, #0]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d101      	bne.n	800d504 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800d500:	4b17      	ldr	r3, [pc, #92]	; (800d560 <netif_set_addr+0x90>)
 800d502:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800d504:	68bb      	ldr	r3, [r7, #8]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d003      	beq.n	800d512 <netif_set_addr+0x42>
 800d50a:	68bb      	ldr	r3, [r7, #8]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d101      	bne.n	800d516 <netif_set_addr+0x46>
 800d512:	2301      	movs	r3, #1
 800d514:	e000      	b.n	800d518 <netif_set_addr+0x48>
 800d516:	2300      	movs	r3, #0
 800d518:	617b      	str	r3, [r7, #20]
  if (remove) {
 800d51a:	697b      	ldr	r3, [r7, #20]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d006      	beq.n	800d52e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d520:	f107 0310 	add.w	r3, r7, #16
 800d524:	461a      	mov	r2, r3
 800d526:	68b9      	ldr	r1, [r7, #8]
 800d528:	68f8      	ldr	r0, [r7, #12]
 800d52a:	f7ff ff49 	bl	800d3c0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800d52e:	69fa      	ldr	r2, [r7, #28]
 800d530:	6879      	ldr	r1, [r7, #4]
 800d532:	68f8      	ldr	r0, [r7, #12]
 800d534:	f7ff ff8e 	bl	800d454 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800d538:	69ba      	ldr	r2, [r7, #24]
 800d53a:	6839      	ldr	r1, [r7, #0]
 800d53c:	68f8      	ldr	r0, [r7, #12]
 800d53e:	f7ff ffa8 	bl	800d492 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800d542:	697b      	ldr	r3, [r7, #20]
 800d544:	2b00      	cmp	r3, #0
 800d546:	d106      	bne.n	800d556 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d548:	f107 0310 	add.w	r3, r7, #16
 800d54c:	461a      	mov	r2, r3
 800d54e:	68b9      	ldr	r1, [r7, #8]
 800d550:	68f8      	ldr	r0, [r7, #12]
 800d552:	f7ff ff35 	bl	800d3c0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800d556:	bf00      	nop
 800d558:	3720      	adds	r7, #32
 800d55a:	46bd      	mov	sp, r7
 800d55c:	bd80      	pop	{r7, pc}
 800d55e:	bf00      	nop
 800d560:	0801ac6c 	.word	0x0801ac6c

0800d564 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800d564:	b480      	push	{r7}
 800d566:	b083      	sub	sp, #12
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800d56c:	4a04      	ldr	r2, [pc, #16]	; (800d580 <netif_set_default+0x1c>)
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800d572:	bf00      	nop
 800d574:	370c      	adds	r7, #12
 800d576:	46bd      	mov	sp, r7
 800d578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d57c:	4770      	bx	lr
 800d57e:	bf00      	nop
 800d580:	2000b0f0 	.word	0x2000b0f0

0800d584 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b082      	sub	sp, #8
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d107      	bne.n	800d5a2 <netif_set_up+0x1e>
 800d592:	4b0f      	ldr	r3, [pc, #60]	; (800d5d0 <netif_set_up+0x4c>)
 800d594:	f44f 7254 	mov.w	r2, #848	; 0x350
 800d598:	490e      	ldr	r1, [pc, #56]	; (800d5d4 <netif_set_up+0x50>)
 800d59a:	480f      	ldr	r0, [pc, #60]	; (800d5d8 <netif_set_up+0x54>)
 800d59c:	f009 fc72 	bl	8016e84 <iprintf>
 800d5a0:	e013      	b.n	800d5ca <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800d5a8:	f003 0301 	and.w	r3, r3, #1
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d10c      	bne.n	800d5ca <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800d5b6:	f043 0301 	orr.w	r3, r3, #1
 800d5ba:	b2da      	uxtb	r2, r3
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d5c2:	2103      	movs	r1, #3
 800d5c4:	6878      	ldr	r0, [r7, #4]
 800d5c6:	f000 f809 	bl	800d5dc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800d5ca:	3708      	adds	r7, #8
 800d5cc:	46bd      	mov	sp, r7
 800d5ce:	bd80      	pop	{r7, pc}
 800d5d0:	080184b8 	.word	0x080184b8
 800d5d4:	08018640 	.word	0x08018640
 800d5d8:	08018508 	.word	0x08018508

0800d5dc <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b082      	sub	sp, #8
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	6078      	str	r0, [r7, #4]
 800d5e4:	460b      	mov	r3, r1
 800d5e6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d106      	bne.n	800d5fc <netif_issue_reports+0x20>
 800d5ee:	4b18      	ldr	r3, [pc, #96]	; (800d650 <netif_issue_reports+0x74>)
 800d5f0:	f240 326d 	movw	r2, #877	; 0x36d
 800d5f4:	4917      	ldr	r1, [pc, #92]	; (800d654 <netif_issue_reports+0x78>)
 800d5f6:	4818      	ldr	r0, [pc, #96]	; (800d658 <netif_issue_reports+0x7c>)
 800d5f8:	f009 fc44 	bl	8016e84 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800d602:	f003 0304 	and.w	r3, r3, #4
 800d606:	2b00      	cmp	r3, #0
 800d608:	d01e      	beq.n	800d648 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800d610:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d614:	2b00      	cmp	r3, #0
 800d616:	d017      	beq.n	800d648 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d618:	78fb      	ldrb	r3, [r7, #3]
 800d61a:	f003 0301 	and.w	r3, r3, #1
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d013      	beq.n	800d64a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	3304      	adds	r3, #4
 800d626:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d00e      	beq.n	800d64a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800d632:	f003 0308 	and.w	r3, r3, #8
 800d636:	2b00      	cmp	r3, #0
 800d638:	d007      	beq.n	800d64a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	3304      	adds	r3, #4
 800d63e:	4619      	mov	r1, r3
 800d640:	6878      	ldr	r0, [r7, #4]
 800d642:	f007 fa39 	bl	8014ab8 <etharp_request>
 800d646:	e000      	b.n	800d64a <netif_issue_reports+0x6e>
    return;
 800d648:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800d64a:	3708      	adds	r7, #8
 800d64c:	46bd      	mov	sp, r7
 800d64e:	bd80      	pop	{r7, pc}
 800d650:	080184b8 	.word	0x080184b8
 800d654:	0801865c 	.word	0x0801865c
 800d658:	08018508 	.word	0x08018508

0800d65c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800d65c:	b580      	push	{r7, lr}
 800d65e:	b082      	sub	sp, #8
 800d660:	af00      	add	r7, sp, #0
 800d662:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d107      	bne.n	800d67a <netif_set_down+0x1e>
 800d66a:	4b12      	ldr	r3, [pc, #72]	; (800d6b4 <netif_set_down+0x58>)
 800d66c:	f240 329b 	movw	r2, #923	; 0x39b
 800d670:	4911      	ldr	r1, [pc, #68]	; (800d6b8 <netif_set_down+0x5c>)
 800d672:	4812      	ldr	r0, [pc, #72]	; (800d6bc <netif_set_down+0x60>)
 800d674:	f009 fc06 	bl	8016e84 <iprintf>
 800d678:	e019      	b.n	800d6ae <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800d680:	f003 0301 	and.w	r3, r3, #1
 800d684:	2b00      	cmp	r3, #0
 800d686:	d012      	beq.n	800d6ae <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800d68e:	f023 0301 	bic.w	r3, r3, #1
 800d692:	b2da      	uxtb	r2, r3
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800d6a0:	f003 0308 	and.w	r3, r3, #8
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d002      	beq.n	800d6ae <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800d6a8:	6878      	ldr	r0, [r7, #4]
 800d6aa:	f006 fdc3 	bl	8014234 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800d6ae:	3708      	adds	r7, #8
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	bd80      	pop	{r7, pc}
 800d6b4:	080184b8 	.word	0x080184b8
 800d6b8:	08018680 	.word	0x08018680
 800d6bc:	08018508 	.word	0x08018508

0800d6c0 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800d6c0:	b480      	push	{r7}
 800d6c2:	b085      	sub	sp, #20
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	60f8      	str	r0, [r7, #12]
 800d6c8:	60b9      	str	r1, [r7, #8]
 800d6ca:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800d6cc:	f06f 030b 	mvn.w	r3, #11
}
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	3714      	adds	r7, #20
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6da:	4770      	bx	lr

0800d6dc <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800d6dc:	b480      	push	{r7}
 800d6de:	b085      	sub	sp, #20
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	4603      	mov	r3, r0
 800d6e4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800d6e6:	79fb      	ldrb	r3, [r7, #7]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d013      	beq.n	800d714 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800d6ec:	4b0d      	ldr	r3, [pc, #52]	; (800d724 <netif_get_by_index+0x48>)
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	60fb      	str	r3, [r7, #12]
 800d6f2:	e00c      	b.n	800d70e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d6fa:	3301      	adds	r3, #1
 800d6fc:	b2db      	uxtb	r3, r3
 800d6fe:	79fa      	ldrb	r2, [r7, #7]
 800d700:	429a      	cmp	r2, r3
 800d702:	d101      	bne.n	800d708 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	e006      	b.n	800d716 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	60fb      	str	r3, [r7, #12]
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d1ef      	bne.n	800d6f4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800d714:	2300      	movs	r3, #0
}
 800d716:	4618      	mov	r0, r3
 800d718:	3714      	adds	r7, #20
 800d71a:	46bd      	mov	sp, r7
 800d71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d720:	4770      	bx	lr
 800d722:	bf00      	nop
 800d724:	2000b0ec 	.word	0x2000b0ec

0800d728 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b082      	sub	sp, #8
 800d72c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800d72e:	f008 fe41 	bl	80163b4 <sys_arch_protect>
 800d732:	6038      	str	r0, [r7, #0]
 800d734:	4b0d      	ldr	r3, [pc, #52]	; (800d76c <pbuf_free_ooseq+0x44>)
 800d736:	2200      	movs	r2, #0
 800d738:	701a      	strb	r2, [r3, #0]
 800d73a:	6838      	ldr	r0, [r7, #0]
 800d73c:	f008 fe48 	bl	80163d0 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d740:	4b0b      	ldr	r3, [pc, #44]	; (800d770 <pbuf_free_ooseq+0x48>)
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	607b      	str	r3, [r7, #4]
 800d746:	e00a      	b.n	800d75e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d003      	beq.n	800d758 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800d750:	6878      	ldr	r0, [r7, #4]
 800d752:	f002 f971 	bl	800fa38 <tcp_free_ooseq>
      return;
 800d756:	e005      	b.n	800d764 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	68db      	ldr	r3, [r3, #12]
 800d75c:	607b      	str	r3, [r7, #4]
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d1f1      	bne.n	800d748 <pbuf_free_ooseq+0x20>
    }
  }
}
 800d764:	3708      	adds	r7, #8
 800d766:	46bd      	mov	sp, r7
 800d768:	bd80      	pop	{r7, pc}
 800d76a:	bf00      	nop
 800d76c:	2000b0f4 	.word	0x2000b0f4
 800d770:	2000b0fc 	.word	0x2000b0fc

0800d774 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800d774:	b580      	push	{r7, lr}
 800d776:	b082      	sub	sp, #8
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800d77c:	f7ff ffd4 	bl	800d728 <pbuf_free_ooseq>
}
 800d780:	bf00      	nop
 800d782:	3708      	adds	r7, #8
 800d784:	46bd      	mov	sp, r7
 800d786:	bd80      	pop	{r7, pc}

0800d788 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800d788:	b580      	push	{r7, lr}
 800d78a:	b082      	sub	sp, #8
 800d78c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800d78e:	f008 fe11 	bl	80163b4 <sys_arch_protect>
 800d792:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800d794:	4b0f      	ldr	r3, [pc, #60]	; (800d7d4 <pbuf_pool_is_empty+0x4c>)
 800d796:	781b      	ldrb	r3, [r3, #0]
 800d798:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800d79a:	4b0e      	ldr	r3, [pc, #56]	; (800d7d4 <pbuf_pool_is_empty+0x4c>)
 800d79c:	2201      	movs	r2, #1
 800d79e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800d7a0:	6878      	ldr	r0, [r7, #4]
 800d7a2:	f008 fe15 	bl	80163d0 <sys_arch_unprotect>

  if (!queued) {
 800d7a6:	78fb      	ldrb	r3, [r7, #3]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d10f      	bne.n	800d7cc <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800d7ac:	2100      	movs	r1, #0
 800d7ae:	480a      	ldr	r0, [pc, #40]	; (800d7d8 <pbuf_pool_is_empty+0x50>)
 800d7b0:	f7fe ff64 	bl	800c67c <tcpip_try_callback>
 800d7b4:	4603      	mov	r3, r0
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d008      	beq.n	800d7cc <pbuf_pool_is_empty+0x44>
 800d7ba:	f008 fdfb 	bl	80163b4 <sys_arch_protect>
 800d7be:	6078      	str	r0, [r7, #4]
 800d7c0:	4b04      	ldr	r3, [pc, #16]	; (800d7d4 <pbuf_pool_is_empty+0x4c>)
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	701a      	strb	r2, [r3, #0]
 800d7c6:	6878      	ldr	r0, [r7, #4]
 800d7c8:	f008 fe02 	bl	80163d0 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800d7cc:	bf00      	nop
 800d7ce:	3708      	adds	r7, #8
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	bd80      	pop	{r7, pc}
 800d7d4:	2000b0f4 	.word	0x2000b0f4
 800d7d8:	0800d775 	.word	0x0800d775

0800d7dc <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800d7dc:	b480      	push	{r7}
 800d7de:	b085      	sub	sp, #20
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	60f8      	str	r0, [r7, #12]
 800d7e4:	60b9      	str	r1, [r7, #8]
 800d7e6:	4611      	mov	r1, r2
 800d7e8:	461a      	mov	r2, r3
 800d7ea:	460b      	mov	r3, r1
 800d7ec:	80fb      	strh	r3, [r7, #6]
 800d7ee:	4613      	mov	r3, r2
 800d7f0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	68ba      	ldr	r2, [r7, #8]
 800d7fc:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	88fa      	ldrh	r2, [r7, #6]
 800d802:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	88ba      	ldrh	r2, [r7, #4]
 800d808:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800d80a:	8b3b      	ldrh	r3, [r7, #24]
 800d80c:	b2da      	uxtb	r2, r3
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	7f3a      	ldrb	r2, [r7, #28]
 800d816:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	2201      	movs	r2, #1
 800d81c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	2200      	movs	r2, #0
 800d822:	73da      	strb	r2, [r3, #15]
}
 800d824:	bf00      	nop
 800d826:	3714      	adds	r7, #20
 800d828:	46bd      	mov	sp, r7
 800d82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82e:	4770      	bx	lr

0800d830 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b08c      	sub	sp, #48	; 0x30
 800d834:	af02      	add	r7, sp, #8
 800d836:	4603      	mov	r3, r0
 800d838:	71fb      	strb	r3, [r7, #7]
 800d83a:	460b      	mov	r3, r1
 800d83c:	80bb      	strh	r3, [r7, #4]
 800d83e:	4613      	mov	r3, r2
 800d840:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800d842:	79fb      	ldrb	r3, [r7, #7]
 800d844:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800d846:	887b      	ldrh	r3, [r7, #2]
 800d848:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800d84c:	d07f      	beq.n	800d94e <pbuf_alloc+0x11e>
 800d84e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800d852:	f300 80c8 	bgt.w	800d9e6 <pbuf_alloc+0x1b6>
 800d856:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800d85a:	d010      	beq.n	800d87e <pbuf_alloc+0x4e>
 800d85c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800d860:	f300 80c1 	bgt.w	800d9e6 <pbuf_alloc+0x1b6>
 800d864:	2b01      	cmp	r3, #1
 800d866:	d002      	beq.n	800d86e <pbuf_alloc+0x3e>
 800d868:	2b41      	cmp	r3, #65	; 0x41
 800d86a:	f040 80bc 	bne.w	800d9e6 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800d86e:	887a      	ldrh	r2, [r7, #2]
 800d870:	88bb      	ldrh	r3, [r7, #4]
 800d872:	4619      	mov	r1, r3
 800d874:	2000      	movs	r0, #0
 800d876:	f000 f8d1 	bl	800da1c <pbuf_alloc_reference>
 800d87a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800d87c:	e0bd      	b.n	800d9fa <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800d87e:	2300      	movs	r3, #0
 800d880:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800d882:	2300      	movs	r3, #0
 800d884:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800d886:	88bb      	ldrh	r3, [r7, #4]
 800d888:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800d88a:	200c      	movs	r0, #12
 800d88c:	f7ff fc36 	bl	800d0fc <memp_malloc>
 800d890:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800d892:	693b      	ldr	r3, [r7, #16]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d109      	bne.n	800d8ac <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800d898:	f7ff ff76 	bl	800d788 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800d89c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d002      	beq.n	800d8a8 <pbuf_alloc+0x78>
            pbuf_free(p);
 800d8a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d8a4:	f000 faa8 	bl	800ddf8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	e0a7      	b.n	800d9fc <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800d8ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d8ae:	3303      	adds	r3, #3
 800d8b0:	b29b      	uxth	r3, r3
 800d8b2:	f023 0303 	bic.w	r3, r3, #3
 800d8b6:	b29b      	uxth	r3, r3
 800d8b8:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800d8bc:	b29b      	uxth	r3, r3
 800d8be:	8b7a      	ldrh	r2, [r7, #26]
 800d8c0:	4293      	cmp	r3, r2
 800d8c2:	bf28      	it	cs
 800d8c4:	4613      	movcs	r3, r2
 800d8c6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800d8c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d8ca:	3310      	adds	r3, #16
 800d8cc:	693a      	ldr	r2, [r7, #16]
 800d8ce:	4413      	add	r3, r2
 800d8d0:	3303      	adds	r3, #3
 800d8d2:	f023 0303 	bic.w	r3, r3, #3
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	89f9      	ldrh	r1, [r7, #14]
 800d8da:	8b7a      	ldrh	r2, [r7, #26]
 800d8dc:	2300      	movs	r3, #0
 800d8de:	9301      	str	r3, [sp, #4]
 800d8e0:	887b      	ldrh	r3, [r7, #2]
 800d8e2:	9300      	str	r3, [sp, #0]
 800d8e4:	460b      	mov	r3, r1
 800d8e6:	4601      	mov	r1, r0
 800d8e8:	6938      	ldr	r0, [r7, #16]
 800d8ea:	f7ff ff77 	bl	800d7dc <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800d8ee:	693b      	ldr	r3, [r7, #16]
 800d8f0:	685b      	ldr	r3, [r3, #4]
 800d8f2:	f003 0303 	and.w	r3, r3, #3
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d006      	beq.n	800d908 <pbuf_alloc+0xd8>
 800d8fa:	4b42      	ldr	r3, [pc, #264]	; (800da04 <pbuf_alloc+0x1d4>)
 800d8fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d900:	4941      	ldr	r1, [pc, #260]	; (800da08 <pbuf_alloc+0x1d8>)
 800d902:	4842      	ldr	r0, [pc, #264]	; (800da0c <pbuf_alloc+0x1dc>)
 800d904:	f009 fabe 	bl	8016e84 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800d908:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d90a:	3303      	adds	r3, #3
 800d90c:	f023 0303 	bic.w	r3, r3, #3
 800d910:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800d914:	d106      	bne.n	800d924 <pbuf_alloc+0xf4>
 800d916:	4b3b      	ldr	r3, [pc, #236]	; (800da04 <pbuf_alloc+0x1d4>)
 800d918:	f44f 7281 	mov.w	r2, #258	; 0x102
 800d91c:	493c      	ldr	r1, [pc, #240]	; (800da10 <pbuf_alloc+0x1e0>)
 800d91e:	483b      	ldr	r0, [pc, #236]	; (800da0c <pbuf_alloc+0x1dc>)
 800d920:	f009 fab0 	bl	8016e84 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800d924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d926:	2b00      	cmp	r3, #0
 800d928:	d102      	bne.n	800d930 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800d92a:	693b      	ldr	r3, [r7, #16]
 800d92c:	627b      	str	r3, [r7, #36]	; 0x24
 800d92e:	e002      	b.n	800d936 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800d930:	69fb      	ldr	r3, [r7, #28]
 800d932:	693a      	ldr	r2, [r7, #16]
 800d934:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800d936:	693b      	ldr	r3, [r7, #16]
 800d938:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800d93a:	8b7a      	ldrh	r2, [r7, #26]
 800d93c:	89fb      	ldrh	r3, [r7, #14]
 800d93e:	1ad3      	subs	r3, r2, r3
 800d940:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800d942:	2300      	movs	r3, #0
 800d944:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800d946:	8b7b      	ldrh	r3, [r7, #26]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d19e      	bne.n	800d88a <pbuf_alloc+0x5a>
      break;
 800d94c:	e055      	b.n	800d9fa <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800d94e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d950:	3303      	adds	r3, #3
 800d952:	b29b      	uxth	r3, r3
 800d954:	f023 0303 	bic.w	r3, r3, #3
 800d958:	b29a      	uxth	r2, r3
 800d95a:	88bb      	ldrh	r3, [r7, #4]
 800d95c:	3303      	adds	r3, #3
 800d95e:	b29b      	uxth	r3, r3
 800d960:	f023 0303 	bic.w	r3, r3, #3
 800d964:	b29b      	uxth	r3, r3
 800d966:	4413      	add	r3, r2
 800d968:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800d96a:	8b3b      	ldrh	r3, [r7, #24]
 800d96c:	3310      	adds	r3, #16
 800d96e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d970:	8b3a      	ldrh	r2, [r7, #24]
 800d972:	88bb      	ldrh	r3, [r7, #4]
 800d974:	3303      	adds	r3, #3
 800d976:	f023 0303 	bic.w	r3, r3, #3
 800d97a:	429a      	cmp	r2, r3
 800d97c:	d306      	bcc.n	800d98c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800d97e:	8afa      	ldrh	r2, [r7, #22]
 800d980:	88bb      	ldrh	r3, [r7, #4]
 800d982:	3303      	adds	r3, #3
 800d984:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d988:	429a      	cmp	r2, r3
 800d98a:	d201      	bcs.n	800d990 <pbuf_alloc+0x160>
        return NULL;
 800d98c:	2300      	movs	r3, #0
 800d98e:	e035      	b.n	800d9fc <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800d990:	8afb      	ldrh	r3, [r7, #22]
 800d992:	4618      	mov	r0, r3
 800d994:	f7ff fa30 	bl	800cdf8 <mem_malloc>
 800d998:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800d99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d101      	bne.n	800d9a4 <pbuf_alloc+0x174>
        return NULL;
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	e02b      	b.n	800d9fc <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800d9a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d9a6:	3310      	adds	r3, #16
 800d9a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9aa:	4413      	add	r3, r2
 800d9ac:	3303      	adds	r3, #3
 800d9ae:	f023 0303 	bic.w	r3, r3, #3
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	88b9      	ldrh	r1, [r7, #4]
 800d9b6:	88ba      	ldrh	r2, [r7, #4]
 800d9b8:	2300      	movs	r3, #0
 800d9ba:	9301      	str	r3, [sp, #4]
 800d9bc:	887b      	ldrh	r3, [r7, #2]
 800d9be:	9300      	str	r3, [sp, #0]
 800d9c0:	460b      	mov	r3, r1
 800d9c2:	4601      	mov	r1, r0
 800d9c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d9c6:	f7ff ff09 	bl	800d7dc <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800d9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9cc:	685b      	ldr	r3, [r3, #4]
 800d9ce:	f003 0303 	and.w	r3, r3, #3
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d010      	beq.n	800d9f8 <pbuf_alloc+0x1c8>
 800d9d6:	4b0b      	ldr	r3, [pc, #44]	; (800da04 <pbuf_alloc+0x1d4>)
 800d9d8:	f44f 7291 	mov.w	r2, #290	; 0x122
 800d9dc:	490d      	ldr	r1, [pc, #52]	; (800da14 <pbuf_alloc+0x1e4>)
 800d9de:	480b      	ldr	r0, [pc, #44]	; (800da0c <pbuf_alloc+0x1dc>)
 800d9e0:	f009 fa50 	bl	8016e84 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800d9e4:	e008      	b.n	800d9f8 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800d9e6:	4b07      	ldr	r3, [pc, #28]	; (800da04 <pbuf_alloc+0x1d4>)
 800d9e8:	f240 1227 	movw	r2, #295	; 0x127
 800d9ec:	490a      	ldr	r1, [pc, #40]	; (800da18 <pbuf_alloc+0x1e8>)
 800d9ee:	4807      	ldr	r0, [pc, #28]	; (800da0c <pbuf_alloc+0x1dc>)
 800d9f0:	f009 fa48 	bl	8016e84 <iprintf>
      return NULL;
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	e001      	b.n	800d9fc <pbuf_alloc+0x1cc>
      break;
 800d9f8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800d9fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	3728      	adds	r7, #40	; 0x28
 800da00:	46bd      	mov	sp, r7
 800da02:	bd80      	pop	{r7, pc}
 800da04:	080186e8 	.word	0x080186e8
 800da08:	08018718 	.word	0x08018718
 800da0c:	08018748 	.word	0x08018748
 800da10:	08018770 	.word	0x08018770
 800da14:	080187a4 	.word	0x080187a4
 800da18:	080187d0 	.word	0x080187d0

0800da1c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800da1c:	b580      	push	{r7, lr}
 800da1e:	b086      	sub	sp, #24
 800da20:	af02      	add	r7, sp, #8
 800da22:	6078      	str	r0, [r7, #4]
 800da24:	460b      	mov	r3, r1
 800da26:	807b      	strh	r3, [r7, #2]
 800da28:	4613      	mov	r3, r2
 800da2a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800da2c:	883b      	ldrh	r3, [r7, #0]
 800da2e:	2b41      	cmp	r3, #65	; 0x41
 800da30:	d009      	beq.n	800da46 <pbuf_alloc_reference+0x2a>
 800da32:	883b      	ldrh	r3, [r7, #0]
 800da34:	2b01      	cmp	r3, #1
 800da36:	d006      	beq.n	800da46 <pbuf_alloc_reference+0x2a>
 800da38:	4b0f      	ldr	r3, [pc, #60]	; (800da78 <pbuf_alloc_reference+0x5c>)
 800da3a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800da3e:	490f      	ldr	r1, [pc, #60]	; (800da7c <pbuf_alloc_reference+0x60>)
 800da40:	480f      	ldr	r0, [pc, #60]	; (800da80 <pbuf_alloc_reference+0x64>)
 800da42:	f009 fa1f 	bl	8016e84 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800da46:	200b      	movs	r0, #11
 800da48:	f7ff fb58 	bl	800d0fc <memp_malloc>
 800da4c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	2b00      	cmp	r3, #0
 800da52:	d101      	bne.n	800da58 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800da54:	2300      	movs	r3, #0
 800da56:	e00b      	b.n	800da70 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800da58:	8879      	ldrh	r1, [r7, #2]
 800da5a:	887a      	ldrh	r2, [r7, #2]
 800da5c:	2300      	movs	r3, #0
 800da5e:	9301      	str	r3, [sp, #4]
 800da60:	883b      	ldrh	r3, [r7, #0]
 800da62:	9300      	str	r3, [sp, #0]
 800da64:	460b      	mov	r3, r1
 800da66:	6879      	ldr	r1, [r7, #4]
 800da68:	68f8      	ldr	r0, [r7, #12]
 800da6a:	f7ff feb7 	bl	800d7dc <pbuf_init_alloced_pbuf>
  return p;
 800da6e:	68fb      	ldr	r3, [r7, #12]
}
 800da70:	4618      	mov	r0, r3
 800da72:	3710      	adds	r7, #16
 800da74:	46bd      	mov	sp, r7
 800da76:	bd80      	pop	{r7, pc}
 800da78:	080186e8 	.word	0x080186e8
 800da7c:	080187ec 	.word	0x080187ec
 800da80:	08018748 	.word	0x08018748

0800da84 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800da84:	b580      	push	{r7, lr}
 800da86:	b088      	sub	sp, #32
 800da88:	af02      	add	r7, sp, #8
 800da8a:	607b      	str	r3, [r7, #4]
 800da8c:	4603      	mov	r3, r0
 800da8e:	73fb      	strb	r3, [r7, #15]
 800da90:	460b      	mov	r3, r1
 800da92:	81bb      	strh	r3, [r7, #12]
 800da94:	4613      	mov	r3, r2
 800da96:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800da98:	7bfb      	ldrb	r3, [r7, #15]
 800da9a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800da9c:	8a7b      	ldrh	r3, [r7, #18]
 800da9e:	3303      	adds	r3, #3
 800daa0:	f023 0203 	bic.w	r2, r3, #3
 800daa4:	89bb      	ldrh	r3, [r7, #12]
 800daa6:	441a      	add	r2, r3
 800daa8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800daaa:	429a      	cmp	r2, r3
 800daac:	d901      	bls.n	800dab2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800daae:	2300      	movs	r3, #0
 800dab0:	e018      	b.n	800dae4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800dab2:	6a3b      	ldr	r3, [r7, #32]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d007      	beq.n	800dac8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800dab8:	8a7b      	ldrh	r3, [r7, #18]
 800daba:	3303      	adds	r3, #3
 800dabc:	f023 0303 	bic.w	r3, r3, #3
 800dac0:	6a3a      	ldr	r2, [r7, #32]
 800dac2:	4413      	add	r3, r2
 800dac4:	617b      	str	r3, [r7, #20]
 800dac6:	e001      	b.n	800dacc <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800dac8:	2300      	movs	r3, #0
 800daca:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800dacc:	6878      	ldr	r0, [r7, #4]
 800dace:	89b9      	ldrh	r1, [r7, #12]
 800dad0:	89ba      	ldrh	r2, [r7, #12]
 800dad2:	2302      	movs	r3, #2
 800dad4:	9301      	str	r3, [sp, #4]
 800dad6:	897b      	ldrh	r3, [r7, #10]
 800dad8:	9300      	str	r3, [sp, #0]
 800dada:	460b      	mov	r3, r1
 800dadc:	6979      	ldr	r1, [r7, #20]
 800dade:	f7ff fe7d 	bl	800d7dc <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800dae2:	687b      	ldr	r3, [r7, #4]
}
 800dae4:	4618      	mov	r0, r3
 800dae6:	3718      	adds	r7, #24
 800dae8:	46bd      	mov	sp, r7
 800daea:	bd80      	pop	{r7, pc}

0800daec <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800daec:	b580      	push	{r7, lr}
 800daee:	b084      	sub	sp, #16
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]
 800daf4:	460b      	mov	r3, r1
 800daf6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d106      	bne.n	800db0c <pbuf_realloc+0x20>
 800dafe:	4b3a      	ldr	r3, [pc, #232]	; (800dbe8 <pbuf_realloc+0xfc>)
 800db00:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800db04:	4939      	ldr	r1, [pc, #228]	; (800dbec <pbuf_realloc+0x100>)
 800db06:	483a      	ldr	r0, [pc, #232]	; (800dbf0 <pbuf_realloc+0x104>)
 800db08:	f009 f9bc 	bl	8016e84 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	891b      	ldrh	r3, [r3, #8]
 800db10:	887a      	ldrh	r2, [r7, #2]
 800db12:	429a      	cmp	r2, r3
 800db14:	d263      	bcs.n	800dbde <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	891a      	ldrh	r2, [r3, #8]
 800db1a:	887b      	ldrh	r3, [r7, #2]
 800db1c:	1ad3      	subs	r3, r2, r3
 800db1e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800db20:	887b      	ldrh	r3, [r7, #2]
 800db22:	817b      	strh	r3, [r7, #10]
  q = p;
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800db28:	e018      	b.n	800db5c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	895b      	ldrh	r3, [r3, #10]
 800db2e:	897a      	ldrh	r2, [r7, #10]
 800db30:	1ad3      	subs	r3, r2, r3
 800db32:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	891a      	ldrh	r2, [r3, #8]
 800db38:	893b      	ldrh	r3, [r7, #8]
 800db3a:	1ad3      	subs	r3, r2, r3
 800db3c:	b29a      	uxth	r2, r3
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d106      	bne.n	800db5c <pbuf_realloc+0x70>
 800db4e:	4b26      	ldr	r3, [pc, #152]	; (800dbe8 <pbuf_realloc+0xfc>)
 800db50:	f240 12af 	movw	r2, #431	; 0x1af
 800db54:	4927      	ldr	r1, [pc, #156]	; (800dbf4 <pbuf_realloc+0x108>)
 800db56:	4826      	ldr	r0, [pc, #152]	; (800dbf0 <pbuf_realloc+0x104>)
 800db58:	f009 f994 	bl	8016e84 <iprintf>
  while (rem_len > q->len) {
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	895b      	ldrh	r3, [r3, #10]
 800db60:	897a      	ldrh	r2, [r7, #10]
 800db62:	429a      	cmp	r2, r3
 800db64:	d8e1      	bhi.n	800db2a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	7b1b      	ldrb	r3, [r3, #12]
 800db6a:	f003 030f 	and.w	r3, r3, #15
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d121      	bne.n	800dbb6 <pbuf_realloc+0xca>
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	895b      	ldrh	r3, [r3, #10]
 800db76:	897a      	ldrh	r2, [r7, #10]
 800db78:	429a      	cmp	r2, r3
 800db7a:	d01c      	beq.n	800dbb6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	7b5b      	ldrb	r3, [r3, #13]
 800db80:	f003 0302 	and.w	r3, r3, #2
 800db84:	2b00      	cmp	r3, #0
 800db86:	d116      	bne.n	800dbb6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	685a      	ldr	r2, [r3, #4]
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	1ad3      	subs	r3, r2, r3
 800db90:	b29a      	uxth	r2, r3
 800db92:	897b      	ldrh	r3, [r7, #10]
 800db94:	4413      	add	r3, r2
 800db96:	b29b      	uxth	r3, r3
 800db98:	4619      	mov	r1, r3
 800db9a:	68f8      	ldr	r0, [r7, #12]
 800db9c:	f7ff f822 	bl	800cbe4 <mem_trim>
 800dba0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d106      	bne.n	800dbb6 <pbuf_realloc+0xca>
 800dba8:	4b0f      	ldr	r3, [pc, #60]	; (800dbe8 <pbuf_realloc+0xfc>)
 800dbaa:	f240 12bd 	movw	r2, #445	; 0x1bd
 800dbae:	4912      	ldr	r1, [pc, #72]	; (800dbf8 <pbuf_realloc+0x10c>)
 800dbb0:	480f      	ldr	r0, [pc, #60]	; (800dbf0 <pbuf_realloc+0x104>)
 800dbb2:	f009 f967 	bl	8016e84 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	897a      	ldrh	r2, [r7, #10]
 800dbba:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	895a      	ldrh	r2, [r3, #10]
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d004      	beq.n	800dbd6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	f000 f911 	bl	800ddf8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	2200      	movs	r2, #0
 800dbda:	601a      	str	r2, [r3, #0]
 800dbdc:	e000      	b.n	800dbe0 <pbuf_realloc+0xf4>
    return;
 800dbde:	bf00      	nop

}
 800dbe0:	3710      	adds	r7, #16
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	bd80      	pop	{r7, pc}
 800dbe6:	bf00      	nop
 800dbe8:	080186e8 	.word	0x080186e8
 800dbec:	08018800 	.word	0x08018800
 800dbf0:	08018748 	.word	0x08018748
 800dbf4:	08018818 	.word	0x08018818
 800dbf8:	08018830 	.word	0x08018830

0800dbfc <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b086      	sub	sp, #24
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	60f8      	str	r0, [r7, #12]
 800dc04:	60b9      	str	r1, [r7, #8]
 800dc06:	4613      	mov	r3, r2
 800dc08:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d106      	bne.n	800dc1e <pbuf_add_header_impl+0x22>
 800dc10:	4b2b      	ldr	r3, [pc, #172]	; (800dcc0 <pbuf_add_header_impl+0xc4>)
 800dc12:	f240 12df 	movw	r2, #479	; 0x1df
 800dc16:	492b      	ldr	r1, [pc, #172]	; (800dcc4 <pbuf_add_header_impl+0xc8>)
 800dc18:	482b      	ldr	r0, [pc, #172]	; (800dcc8 <pbuf_add_header_impl+0xcc>)
 800dc1a:	f009 f933 	bl	8016e84 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d003      	beq.n	800dc2c <pbuf_add_header_impl+0x30>
 800dc24:	68bb      	ldr	r3, [r7, #8]
 800dc26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dc2a:	d301      	bcc.n	800dc30 <pbuf_add_header_impl+0x34>
    return 1;
 800dc2c:	2301      	movs	r3, #1
 800dc2e:	e043      	b.n	800dcb8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800dc30:	68bb      	ldr	r3, [r7, #8]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d101      	bne.n	800dc3a <pbuf_add_header_impl+0x3e>
    return 0;
 800dc36:	2300      	movs	r3, #0
 800dc38:	e03e      	b.n	800dcb8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800dc3a:	68bb      	ldr	r3, [r7, #8]
 800dc3c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	891a      	ldrh	r2, [r3, #8]
 800dc42:	8a7b      	ldrh	r3, [r7, #18]
 800dc44:	4413      	add	r3, r2
 800dc46:	b29b      	uxth	r3, r3
 800dc48:	8a7a      	ldrh	r2, [r7, #18]
 800dc4a:	429a      	cmp	r2, r3
 800dc4c:	d901      	bls.n	800dc52 <pbuf_add_header_impl+0x56>
    return 1;
 800dc4e:	2301      	movs	r3, #1
 800dc50:	e032      	b.n	800dcb8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	7b1b      	ldrb	r3, [r3, #12]
 800dc56:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800dc58:	8a3b      	ldrh	r3, [r7, #16]
 800dc5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d00c      	beq.n	800dc7c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	685a      	ldr	r2, [r3, #4]
 800dc66:	68bb      	ldr	r3, [r7, #8]
 800dc68:	425b      	negs	r3, r3
 800dc6a:	4413      	add	r3, r2
 800dc6c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	3310      	adds	r3, #16
 800dc72:	697a      	ldr	r2, [r7, #20]
 800dc74:	429a      	cmp	r2, r3
 800dc76:	d20d      	bcs.n	800dc94 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800dc78:	2301      	movs	r3, #1
 800dc7a:	e01d      	b.n	800dcb8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800dc7c:	79fb      	ldrb	r3, [r7, #7]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d006      	beq.n	800dc90 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	685a      	ldr	r2, [r3, #4]
 800dc86:	68bb      	ldr	r3, [r7, #8]
 800dc88:	425b      	negs	r3, r3
 800dc8a:	4413      	add	r3, r2
 800dc8c:	617b      	str	r3, [r7, #20]
 800dc8e:	e001      	b.n	800dc94 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800dc90:	2301      	movs	r3, #1
 800dc92:	e011      	b.n	800dcb8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	697a      	ldr	r2, [r7, #20]
 800dc98:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	895a      	ldrh	r2, [r3, #10]
 800dc9e:	8a7b      	ldrh	r3, [r7, #18]
 800dca0:	4413      	add	r3, r2
 800dca2:	b29a      	uxth	r2, r3
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	891a      	ldrh	r2, [r3, #8]
 800dcac:	8a7b      	ldrh	r3, [r7, #18]
 800dcae:	4413      	add	r3, r2
 800dcb0:	b29a      	uxth	r2, r3
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	811a      	strh	r2, [r3, #8]


  return 0;
 800dcb6:	2300      	movs	r3, #0
}
 800dcb8:	4618      	mov	r0, r3
 800dcba:	3718      	adds	r7, #24
 800dcbc:	46bd      	mov	sp, r7
 800dcbe:	bd80      	pop	{r7, pc}
 800dcc0:	080186e8 	.word	0x080186e8
 800dcc4:	0801884c 	.word	0x0801884c
 800dcc8:	08018748 	.word	0x08018748

0800dccc <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800dccc:	b580      	push	{r7, lr}
 800dcce:	b082      	sub	sp, #8
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]
 800dcd4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	6839      	ldr	r1, [r7, #0]
 800dcda:	6878      	ldr	r0, [r7, #4]
 800dcdc:	f7ff ff8e 	bl	800dbfc <pbuf_add_header_impl>
 800dce0:	4603      	mov	r3, r0
}
 800dce2:	4618      	mov	r0, r3
 800dce4:	3708      	adds	r7, #8
 800dce6:	46bd      	mov	sp, r7
 800dce8:	bd80      	pop	{r7, pc}
	...

0800dcec <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b084      	sub	sp, #16
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
 800dcf4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d106      	bne.n	800dd0a <pbuf_remove_header+0x1e>
 800dcfc:	4b20      	ldr	r3, [pc, #128]	; (800dd80 <pbuf_remove_header+0x94>)
 800dcfe:	f240 224b 	movw	r2, #587	; 0x24b
 800dd02:	4920      	ldr	r1, [pc, #128]	; (800dd84 <pbuf_remove_header+0x98>)
 800dd04:	4820      	ldr	r0, [pc, #128]	; (800dd88 <pbuf_remove_header+0x9c>)
 800dd06:	f009 f8bd 	bl	8016e84 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d003      	beq.n	800dd18 <pbuf_remove_header+0x2c>
 800dd10:	683b      	ldr	r3, [r7, #0]
 800dd12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dd16:	d301      	bcc.n	800dd1c <pbuf_remove_header+0x30>
    return 1;
 800dd18:	2301      	movs	r3, #1
 800dd1a:	e02c      	b.n	800dd76 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800dd1c:	683b      	ldr	r3, [r7, #0]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d101      	bne.n	800dd26 <pbuf_remove_header+0x3a>
    return 0;
 800dd22:	2300      	movs	r3, #0
 800dd24:	e027      	b.n	800dd76 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800dd26:	683b      	ldr	r3, [r7, #0]
 800dd28:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	895b      	ldrh	r3, [r3, #10]
 800dd2e:	89fa      	ldrh	r2, [r7, #14]
 800dd30:	429a      	cmp	r2, r3
 800dd32:	d908      	bls.n	800dd46 <pbuf_remove_header+0x5a>
 800dd34:	4b12      	ldr	r3, [pc, #72]	; (800dd80 <pbuf_remove_header+0x94>)
 800dd36:	f240 2255 	movw	r2, #597	; 0x255
 800dd3a:	4914      	ldr	r1, [pc, #80]	; (800dd8c <pbuf_remove_header+0xa0>)
 800dd3c:	4812      	ldr	r0, [pc, #72]	; (800dd88 <pbuf_remove_header+0x9c>)
 800dd3e:	f009 f8a1 	bl	8016e84 <iprintf>
 800dd42:	2301      	movs	r3, #1
 800dd44:	e017      	b.n	800dd76 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	685b      	ldr	r3, [r3, #4]
 800dd4a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	685a      	ldr	r2, [r3, #4]
 800dd50:	683b      	ldr	r3, [r7, #0]
 800dd52:	441a      	add	r2, r3
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	895a      	ldrh	r2, [r3, #10]
 800dd5c:	89fb      	ldrh	r3, [r7, #14]
 800dd5e:	1ad3      	subs	r3, r2, r3
 800dd60:	b29a      	uxth	r2, r3
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	891a      	ldrh	r2, [r3, #8]
 800dd6a:	89fb      	ldrh	r3, [r7, #14]
 800dd6c:	1ad3      	subs	r3, r2, r3
 800dd6e:	b29a      	uxth	r2, r3
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800dd74:	2300      	movs	r3, #0
}
 800dd76:	4618      	mov	r0, r3
 800dd78:	3710      	adds	r7, #16
 800dd7a:	46bd      	mov	sp, r7
 800dd7c:	bd80      	pop	{r7, pc}
 800dd7e:	bf00      	nop
 800dd80:	080186e8 	.word	0x080186e8
 800dd84:	0801884c 	.word	0x0801884c
 800dd88:	08018748 	.word	0x08018748
 800dd8c:	08018858 	.word	0x08018858

0800dd90 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b082      	sub	sp, #8
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]
 800dd98:	460b      	mov	r3, r1
 800dd9a:	807b      	strh	r3, [r7, #2]
 800dd9c:	4613      	mov	r3, r2
 800dd9e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800dda0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	da08      	bge.n	800ddba <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800dda8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ddac:	425b      	negs	r3, r3
 800ddae:	4619      	mov	r1, r3
 800ddb0:	6878      	ldr	r0, [r7, #4]
 800ddb2:	f7ff ff9b 	bl	800dcec <pbuf_remove_header>
 800ddb6:	4603      	mov	r3, r0
 800ddb8:	e007      	b.n	800ddca <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800ddba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ddbe:	787a      	ldrb	r2, [r7, #1]
 800ddc0:	4619      	mov	r1, r3
 800ddc2:	6878      	ldr	r0, [r7, #4]
 800ddc4:	f7ff ff1a 	bl	800dbfc <pbuf_add_header_impl>
 800ddc8:	4603      	mov	r3, r0
  }
}
 800ddca:	4618      	mov	r0, r3
 800ddcc:	3708      	adds	r7, #8
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	bd80      	pop	{r7, pc}

0800ddd2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800ddd2:	b580      	push	{r7, lr}
 800ddd4:	b082      	sub	sp, #8
 800ddd6:	af00      	add	r7, sp, #0
 800ddd8:	6078      	str	r0, [r7, #4]
 800ddda:	460b      	mov	r3, r1
 800dddc:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800ddde:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dde2:	2201      	movs	r2, #1
 800dde4:	4619      	mov	r1, r3
 800dde6:	6878      	ldr	r0, [r7, #4]
 800dde8:	f7ff ffd2 	bl	800dd90 <pbuf_header_impl>
 800ddec:	4603      	mov	r3, r0
}
 800ddee:	4618      	mov	r0, r3
 800ddf0:	3708      	adds	r7, #8
 800ddf2:	46bd      	mov	sp, r7
 800ddf4:	bd80      	pop	{r7, pc}
	...

0800ddf8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	b088      	sub	sp, #32
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d10b      	bne.n	800de1e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d106      	bne.n	800de1a <pbuf_free+0x22>
 800de0c:	4b3b      	ldr	r3, [pc, #236]	; (800defc <pbuf_free+0x104>)
 800de0e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800de12:	493b      	ldr	r1, [pc, #236]	; (800df00 <pbuf_free+0x108>)
 800de14:	483b      	ldr	r0, [pc, #236]	; (800df04 <pbuf_free+0x10c>)
 800de16:	f009 f835 	bl	8016e84 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800de1a:	2300      	movs	r3, #0
 800de1c:	e069      	b.n	800def2 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800de1e:	2300      	movs	r3, #0
 800de20:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800de22:	e062      	b.n	800deea <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800de24:	f008 fac6 	bl	80163b4 <sys_arch_protect>
 800de28:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	7b9b      	ldrb	r3, [r3, #14]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d106      	bne.n	800de40 <pbuf_free+0x48>
 800de32:	4b32      	ldr	r3, [pc, #200]	; (800defc <pbuf_free+0x104>)
 800de34:	f240 22f1 	movw	r2, #753	; 0x2f1
 800de38:	4933      	ldr	r1, [pc, #204]	; (800df08 <pbuf_free+0x110>)
 800de3a:	4832      	ldr	r0, [pc, #200]	; (800df04 <pbuf_free+0x10c>)
 800de3c:	f009 f822 	bl	8016e84 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	7b9b      	ldrb	r3, [r3, #14]
 800de44:	3b01      	subs	r3, #1
 800de46:	b2da      	uxtb	r2, r3
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	739a      	strb	r2, [r3, #14]
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	7b9b      	ldrb	r3, [r3, #14]
 800de50:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800de52:	69b8      	ldr	r0, [r7, #24]
 800de54:	f008 fabc 	bl	80163d0 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800de58:	7dfb      	ldrb	r3, [r7, #23]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d143      	bne.n	800dee6 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	7b1b      	ldrb	r3, [r3, #12]
 800de68:	f003 030f 	and.w	r3, r3, #15
 800de6c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	7b5b      	ldrb	r3, [r3, #13]
 800de72:	f003 0302 	and.w	r3, r3, #2
 800de76:	2b00      	cmp	r3, #0
 800de78:	d011      	beq.n	800de9e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800de7e:	68bb      	ldr	r3, [r7, #8]
 800de80:	691b      	ldr	r3, [r3, #16]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d106      	bne.n	800de94 <pbuf_free+0x9c>
 800de86:	4b1d      	ldr	r3, [pc, #116]	; (800defc <pbuf_free+0x104>)
 800de88:	f240 22ff 	movw	r2, #767	; 0x2ff
 800de8c:	491f      	ldr	r1, [pc, #124]	; (800df0c <pbuf_free+0x114>)
 800de8e:	481d      	ldr	r0, [pc, #116]	; (800df04 <pbuf_free+0x10c>)
 800de90:	f008 fff8 	bl	8016e84 <iprintf>
        pc->custom_free_function(p);
 800de94:	68bb      	ldr	r3, [r7, #8]
 800de96:	691b      	ldr	r3, [r3, #16]
 800de98:	6878      	ldr	r0, [r7, #4]
 800de9a:	4798      	blx	r3
 800de9c:	e01d      	b.n	800deda <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800de9e:	7bfb      	ldrb	r3, [r7, #15]
 800dea0:	2b02      	cmp	r3, #2
 800dea2:	d104      	bne.n	800deae <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800dea4:	6879      	ldr	r1, [r7, #4]
 800dea6:	200c      	movs	r0, #12
 800dea8:	f7ff f97a 	bl	800d1a0 <memp_free>
 800deac:	e015      	b.n	800deda <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800deae:	7bfb      	ldrb	r3, [r7, #15]
 800deb0:	2b01      	cmp	r3, #1
 800deb2:	d104      	bne.n	800debe <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800deb4:	6879      	ldr	r1, [r7, #4]
 800deb6:	200b      	movs	r0, #11
 800deb8:	f7ff f972 	bl	800d1a0 <memp_free>
 800debc:	e00d      	b.n	800deda <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800debe:	7bfb      	ldrb	r3, [r7, #15]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d103      	bne.n	800decc <pbuf_free+0xd4>
          mem_free(p);
 800dec4:	6878      	ldr	r0, [r7, #4]
 800dec6:	f7fe fdfd 	bl	800cac4 <mem_free>
 800deca:	e006      	b.n	800deda <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800decc:	4b0b      	ldr	r3, [pc, #44]	; (800defc <pbuf_free+0x104>)
 800dece:	f240 320f 	movw	r2, #783	; 0x30f
 800ded2:	490f      	ldr	r1, [pc, #60]	; (800df10 <pbuf_free+0x118>)
 800ded4:	480b      	ldr	r0, [pc, #44]	; (800df04 <pbuf_free+0x10c>)
 800ded6:	f008 ffd5 	bl	8016e84 <iprintf>
        }
      }
      count++;
 800deda:	7ffb      	ldrb	r3, [r7, #31]
 800dedc:	3301      	adds	r3, #1
 800dede:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800dee0:	693b      	ldr	r3, [r7, #16]
 800dee2:	607b      	str	r3, [r7, #4]
 800dee4:	e001      	b.n	800deea <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800dee6:	2300      	movs	r3, #0
 800dee8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	2b00      	cmp	r3, #0
 800deee:	d199      	bne.n	800de24 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800def0:	7ffb      	ldrb	r3, [r7, #31]
}
 800def2:	4618      	mov	r0, r3
 800def4:	3720      	adds	r7, #32
 800def6:	46bd      	mov	sp, r7
 800def8:	bd80      	pop	{r7, pc}
 800defa:	bf00      	nop
 800defc:	080186e8 	.word	0x080186e8
 800df00:	0801884c 	.word	0x0801884c
 800df04:	08018748 	.word	0x08018748
 800df08:	08018878 	.word	0x08018878
 800df0c:	08018890 	.word	0x08018890
 800df10:	080188b4 	.word	0x080188b4

0800df14 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800df14:	b480      	push	{r7}
 800df16:	b085      	sub	sp, #20
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800df1c:	2300      	movs	r3, #0
 800df1e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800df20:	e005      	b.n	800df2e <pbuf_clen+0x1a>
    ++len;
 800df22:	89fb      	ldrh	r3, [r7, #14]
 800df24:	3301      	adds	r3, #1
 800df26:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d1f6      	bne.n	800df22 <pbuf_clen+0xe>
  }
  return len;
 800df34:	89fb      	ldrh	r3, [r7, #14]
}
 800df36:	4618      	mov	r0, r3
 800df38:	3714      	adds	r7, #20
 800df3a:	46bd      	mov	sp, r7
 800df3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df40:	4770      	bx	lr
	...

0800df44 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800df44:	b580      	push	{r7, lr}
 800df46:	b084      	sub	sp, #16
 800df48:	af00      	add	r7, sp, #0
 800df4a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d016      	beq.n	800df80 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800df52:	f008 fa2f 	bl	80163b4 <sys_arch_protect>
 800df56:	60f8      	str	r0, [r7, #12]
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	7b9b      	ldrb	r3, [r3, #14]
 800df5c:	3301      	adds	r3, #1
 800df5e:	b2da      	uxtb	r2, r3
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	739a      	strb	r2, [r3, #14]
 800df64:	68f8      	ldr	r0, [r7, #12]
 800df66:	f008 fa33 	bl	80163d0 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	7b9b      	ldrb	r3, [r3, #14]
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d106      	bne.n	800df80 <pbuf_ref+0x3c>
 800df72:	4b05      	ldr	r3, [pc, #20]	; (800df88 <pbuf_ref+0x44>)
 800df74:	f240 3242 	movw	r2, #834	; 0x342
 800df78:	4904      	ldr	r1, [pc, #16]	; (800df8c <pbuf_ref+0x48>)
 800df7a:	4805      	ldr	r0, [pc, #20]	; (800df90 <pbuf_ref+0x4c>)
 800df7c:	f008 ff82 	bl	8016e84 <iprintf>
  }
}
 800df80:	bf00      	nop
 800df82:	3710      	adds	r7, #16
 800df84:	46bd      	mov	sp, r7
 800df86:	bd80      	pop	{r7, pc}
 800df88:	080186e8 	.word	0x080186e8
 800df8c:	080188c8 	.word	0x080188c8
 800df90:	08018748 	.word	0x08018748

0800df94 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800df94:	b580      	push	{r7, lr}
 800df96:	b084      	sub	sp, #16
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
 800df9c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d002      	beq.n	800dfaa <pbuf_cat+0x16>
 800dfa4:	683b      	ldr	r3, [r7, #0]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d107      	bne.n	800dfba <pbuf_cat+0x26>
 800dfaa:	4b20      	ldr	r3, [pc, #128]	; (800e02c <pbuf_cat+0x98>)
 800dfac:	f240 3259 	movw	r2, #857	; 0x359
 800dfb0:	491f      	ldr	r1, [pc, #124]	; (800e030 <pbuf_cat+0x9c>)
 800dfb2:	4820      	ldr	r0, [pc, #128]	; (800e034 <pbuf_cat+0xa0>)
 800dfb4:	f008 ff66 	bl	8016e84 <iprintf>
 800dfb8:	e034      	b.n	800e024 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	60fb      	str	r3, [r7, #12]
 800dfbe:	e00a      	b.n	800dfd6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	891a      	ldrh	r2, [r3, #8]
 800dfc4:	683b      	ldr	r3, [r7, #0]
 800dfc6:	891b      	ldrh	r3, [r3, #8]
 800dfc8:	4413      	add	r3, r2
 800dfca:	b29a      	uxth	r2, r3
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	60fb      	str	r3, [r7, #12]
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d1f0      	bne.n	800dfc0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	891a      	ldrh	r2, [r3, #8]
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	895b      	ldrh	r3, [r3, #10]
 800dfe6:	429a      	cmp	r2, r3
 800dfe8:	d006      	beq.n	800dff8 <pbuf_cat+0x64>
 800dfea:	4b10      	ldr	r3, [pc, #64]	; (800e02c <pbuf_cat+0x98>)
 800dfec:	f240 3262 	movw	r2, #866	; 0x362
 800dff0:	4911      	ldr	r1, [pc, #68]	; (800e038 <pbuf_cat+0xa4>)
 800dff2:	4810      	ldr	r0, [pc, #64]	; (800e034 <pbuf_cat+0xa0>)
 800dff4:	f008 ff46 	bl	8016e84 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d006      	beq.n	800e00e <pbuf_cat+0x7a>
 800e000:	4b0a      	ldr	r3, [pc, #40]	; (800e02c <pbuf_cat+0x98>)
 800e002:	f240 3263 	movw	r2, #867	; 0x363
 800e006:	490d      	ldr	r1, [pc, #52]	; (800e03c <pbuf_cat+0xa8>)
 800e008:	480a      	ldr	r0, [pc, #40]	; (800e034 <pbuf_cat+0xa0>)
 800e00a:	f008 ff3b 	bl	8016e84 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	891a      	ldrh	r2, [r3, #8]
 800e012:	683b      	ldr	r3, [r7, #0]
 800e014:	891b      	ldrh	r3, [r3, #8]
 800e016:	4413      	add	r3, r2
 800e018:	b29a      	uxth	r2, r3
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	683a      	ldr	r2, [r7, #0]
 800e022:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800e024:	3710      	adds	r7, #16
 800e026:	46bd      	mov	sp, r7
 800e028:	bd80      	pop	{r7, pc}
 800e02a:	bf00      	nop
 800e02c:	080186e8 	.word	0x080186e8
 800e030:	080188dc 	.word	0x080188dc
 800e034:	08018748 	.word	0x08018748
 800e038:	08018914 	.word	0x08018914
 800e03c:	08018944 	.word	0x08018944

0800e040 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800e040:	b580      	push	{r7, lr}
 800e042:	b086      	sub	sp, #24
 800e044:	af00      	add	r7, sp, #0
 800e046:	6078      	str	r0, [r7, #4]
 800e048:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800e04a:	2300      	movs	r3, #0
 800e04c:	617b      	str	r3, [r7, #20]
 800e04e:	2300      	movs	r3, #0
 800e050:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	2b00      	cmp	r3, #0
 800e056:	d008      	beq.n	800e06a <pbuf_copy+0x2a>
 800e058:	683b      	ldr	r3, [r7, #0]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d005      	beq.n	800e06a <pbuf_copy+0x2a>
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	891a      	ldrh	r2, [r3, #8]
 800e062:	683b      	ldr	r3, [r7, #0]
 800e064:	891b      	ldrh	r3, [r3, #8]
 800e066:	429a      	cmp	r2, r3
 800e068:	d209      	bcs.n	800e07e <pbuf_copy+0x3e>
 800e06a:	4b57      	ldr	r3, [pc, #348]	; (800e1c8 <pbuf_copy+0x188>)
 800e06c:	f240 32c9 	movw	r2, #969	; 0x3c9
 800e070:	4956      	ldr	r1, [pc, #344]	; (800e1cc <pbuf_copy+0x18c>)
 800e072:	4857      	ldr	r0, [pc, #348]	; (800e1d0 <pbuf_copy+0x190>)
 800e074:	f008 ff06 	bl	8016e84 <iprintf>
 800e078:	f06f 030f 	mvn.w	r3, #15
 800e07c:	e09f      	b.n	800e1be <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	895b      	ldrh	r3, [r3, #10]
 800e082:	461a      	mov	r2, r3
 800e084:	697b      	ldr	r3, [r7, #20]
 800e086:	1ad2      	subs	r2, r2, r3
 800e088:	683b      	ldr	r3, [r7, #0]
 800e08a:	895b      	ldrh	r3, [r3, #10]
 800e08c:	4619      	mov	r1, r3
 800e08e:	693b      	ldr	r3, [r7, #16]
 800e090:	1acb      	subs	r3, r1, r3
 800e092:	429a      	cmp	r2, r3
 800e094:	d306      	bcc.n	800e0a4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800e096:	683b      	ldr	r3, [r7, #0]
 800e098:	895b      	ldrh	r3, [r3, #10]
 800e09a:	461a      	mov	r2, r3
 800e09c:	693b      	ldr	r3, [r7, #16]
 800e09e:	1ad3      	subs	r3, r2, r3
 800e0a0:	60fb      	str	r3, [r7, #12]
 800e0a2:	e005      	b.n	800e0b0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	895b      	ldrh	r3, [r3, #10]
 800e0a8:	461a      	mov	r2, r3
 800e0aa:	697b      	ldr	r3, [r7, #20]
 800e0ac:	1ad3      	subs	r3, r2, r3
 800e0ae:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	685a      	ldr	r2, [r3, #4]
 800e0b4:	697b      	ldr	r3, [r7, #20]
 800e0b6:	18d0      	adds	r0, r2, r3
 800e0b8:	683b      	ldr	r3, [r7, #0]
 800e0ba:	685a      	ldr	r2, [r3, #4]
 800e0bc:	693b      	ldr	r3, [r7, #16]
 800e0be:	4413      	add	r3, r2
 800e0c0:	68fa      	ldr	r2, [r7, #12]
 800e0c2:	4619      	mov	r1, r3
 800e0c4:	f008 fec8 	bl	8016e58 <memcpy>
    offset_to += len;
 800e0c8:	697a      	ldr	r2, [r7, #20]
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	4413      	add	r3, r2
 800e0ce:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800e0d0:	693a      	ldr	r2, [r7, #16]
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	4413      	add	r3, r2
 800e0d6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	895b      	ldrh	r3, [r3, #10]
 800e0dc:	461a      	mov	r2, r3
 800e0de:	697b      	ldr	r3, [r7, #20]
 800e0e0:	4293      	cmp	r3, r2
 800e0e2:	d906      	bls.n	800e0f2 <pbuf_copy+0xb2>
 800e0e4:	4b38      	ldr	r3, [pc, #224]	; (800e1c8 <pbuf_copy+0x188>)
 800e0e6:	f240 32d9 	movw	r2, #985	; 0x3d9
 800e0ea:	493a      	ldr	r1, [pc, #232]	; (800e1d4 <pbuf_copy+0x194>)
 800e0ec:	4838      	ldr	r0, [pc, #224]	; (800e1d0 <pbuf_copy+0x190>)
 800e0ee:	f008 fec9 	bl	8016e84 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800e0f2:	683b      	ldr	r3, [r7, #0]
 800e0f4:	895b      	ldrh	r3, [r3, #10]
 800e0f6:	461a      	mov	r2, r3
 800e0f8:	693b      	ldr	r3, [r7, #16]
 800e0fa:	4293      	cmp	r3, r2
 800e0fc:	d906      	bls.n	800e10c <pbuf_copy+0xcc>
 800e0fe:	4b32      	ldr	r3, [pc, #200]	; (800e1c8 <pbuf_copy+0x188>)
 800e100:	f240 32da 	movw	r2, #986	; 0x3da
 800e104:	4934      	ldr	r1, [pc, #208]	; (800e1d8 <pbuf_copy+0x198>)
 800e106:	4832      	ldr	r0, [pc, #200]	; (800e1d0 <pbuf_copy+0x190>)
 800e108:	f008 febc 	bl	8016e84 <iprintf>
    if (offset_from >= p_from->len) {
 800e10c:	683b      	ldr	r3, [r7, #0]
 800e10e:	895b      	ldrh	r3, [r3, #10]
 800e110:	461a      	mov	r2, r3
 800e112:	693b      	ldr	r3, [r7, #16]
 800e114:	4293      	cmp	r3, r2
 800e116:	d304      	bcc.n	800e122 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800e118:	2300      	movs	r3, #0
 800e11a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800e11c:	683b      	ldr	r3, [r7, #0]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	895b      	ldrh	r3, [r3, #10]
 800e126:	461a      	mov	r2, r3
 800e128:	697b      	ldr	r3, [r7, #20]
 800e12a:	4293      	cmp	r3, r2
 800e12c:	d114      	bne.n	800e158 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800e12e:	2300      	movs	r3, #0
 800e130:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d10c      	bne.n	800e158 <pbuf_copy+0x118>
 800e13e:	683b      	ldr	r3, [r7, #0]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d009      	beq.n	800e158 <pbuf_copy+0x118>
 800e144:	4b20      	ldr	r3, [pc, #128]	; (800e1c8 <pbuf_copy+0x188>)
 800e146:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800e14a:	4924      	ldr	r1, [pc, #144]	; (800e1dc <pbuf_copy+0x19c>)
 800e14c:	4820      	ldr	r0, [pc, #128]	; (800e1d0 <pbuf_copy+0x190>)
 800e14e:	f008 fe99 	bl	8016e84 <iprintf>
 800e152:	f06f 030f 	mvn.w	r3, #15
 800e156:	e032      	b.n	800e1be <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800e158:	683b      	ldr	r3, [r7, #0]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d013      	beq.n	800e186 <pbuf_copy+0x146>
 800e15e:	683b      	ldr	r3, [r7, #0]
 800e160:	895a      	ldrh	r2, [r3, #10]
 800e162:	683b      	ldr	r3, [r7, #0]
 800e164:	891b      	ldrh	r3, [r3, #8]
 800e166:	429a      	cmp	r2, r3
 800e168:	d10d      	bne.n	800e186 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e16a:	683b      	ldr	r3, [r7, #0]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d009      	beq.n	800e186 <pbuf_copy+0x146>
 800e172:	4b15      	ldr	r3, [pc, #84]	; (800e1c8 <pbuf_copy+0x188>)
 800e174:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800e178:	4919      	ldr	r1, [pc, #100]	; (800e1e0 <pbuf_copy+0x1a0>)
 800e17a:	4815      	ldr	r0, [pc, #84]	; (800e1d0 <pbuf_copy+0x190>)
 800e17c:	f008 fe82 	bl	8016e84 <iprintf>
 800e180:	f06f 0305 	mvn.w	r3, #5
 800e184:	e01b      	b.n	800e1be <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d013      	beq.n	800e1b4 <pbuf_copy+0x174>
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	895a      	ldrh	r2, [r3, #10]
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	891b      	ldrh	r3, [r3, #8]
 800e194:	429a      	cmp	r2, r3
 800e196:	d10d      	bne.n	800e1b4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d009      	beq.n	800e1b4 <pbuf_copy+0x174>
 800e1a0:	4b09      	ldr	r3, [pc, #36]	; (800e1c8 <pbuf_copy+0x188>)
 800e1a2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800e1a6:	490e      	ldr	r1, [pc, #56]	; (800e1e0 <pbuf_copy+0x1a0>)
 800e1a8:	4809      	ldr	r0, [pc, #36]	; (800e1d0 <pbuf_copy+0x190>)
 800e1aa:	f008 fe6b 	bl	8016e84 <iprintf>
 800e1ae:	f06f 0305 	mvn.w	r3, #5
 800e1b2:	e004      	b.n	800e1be <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800e1b4:	683b      	ldr	r3, [r7, #0]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	f47f af61 	bne.w	800e07e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800e1bc:	2300      	movs	r3, #0
}
 800e1be:	4618      	mov	r0, r3
 800e1c0:	3718      	adds	r7, #24
 800e1c2:	46bd      	mov	sp, r7
 800e1c4:	bd80      	pop	{r7, pc}
 800e1c6:	bf00      	nop
 800e1c8:	080186e8 	.word	0x080186e8
 800e1cc:	08018990 	.word	0x08018990
 800e1d0:	08018748 	.word	0x08018748
 800e1d4:	080189c0 	.word	0x080189c0
 800e1d8:	080189d8 	.word	0x080189d8
 800e1dc:	080189f4 	.word	0x080189f4
 800e1e0:	08018a04 	.word	0x08018a04

0800e1e4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800e1e4:	b580      	push	{r7, lr}
 800e1e6:	b088      	sub	sp, #32
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	60f8      	str	r0, [r7, #12]
 800e1ec:	60b9      	str	r1, [r7, #8]
 800e1ee:	4611      	mov	r1, r2
 800e1f0:	461a      	mov	r2, r3
 800e1f2:	460b      	mov	r3, r1
 800e1f4:	80fb      	strh	r3, [r7, #6]
 800e1f6:	4613      	mov	r3, r2
 800e1f8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800e1fe:	2300      	movs	r3, #0
 800e200:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	2b00      	cmp	r3, #0
 800e206:	d108      	bne.n	800e21a <pbuf_copy_partial+0x36>
 800e208:	4b2b      	ldr	r3, [pc, #172]	; (800e2b8 <pbuf_copy_partial+0xd4>)
 800e20a:	f240 420a 	movw	r2, #1034	; 0x40a
 800e20e:	492b      	ldr	r1, [pc, #172]	; (800e2bc <pbuf_copy_partial+0xd8>)
 800e210:	482b      	ldr	r0, [pc, #172]	; (800e2c0 <pbuf_copy_partial+0xdc>)
 800e212:	f008 fe37 	bl	8016e84 <iprintf>
 800e216:	2300      	movs	r3, #0
 800e218:	e04a      	b.n	800e2b0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800e21a:	68bb      	ldr	r3, [r7, #8]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d108      	bne.n	800e232 <pbuf_copy_partial+0x4e>
 800e220:	4b25      	ldr	r3, [pc, #148]	; (800e2b8 <pbuf_copy_partial+0xd4>)
 800e222:	f240 420b 	movw	r2, #1035	; 0x40b
 800e226:	4927      	ldr	r1, [pc, #156]	; (800e2c4 <pbuf_copy_partial+0xe0>)
 800e228:	4825      	ldr	r0, [pc, #148]	; (800e2c0 <pbuf_copy_partial+0xdc>)
 800e22a:	f008 fe2b 	bl	8016e84 <iprintf>
 800e22e:	2300      	movs	r3, #0
 800e230:	e03e      	b.n	800e2b0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	61fb      	str	r3, [r7, #28]
 800e236:	e034      	b.n	800e2a2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800e238:	88bb      	ldrh	r3, [r7, #4]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d00a      	beq.n	800e254 <pbuf_copy_partial+0x70>
 800e23e:	69fb      	ldr	r3, [r7, #28]
 800e240:	895b      	ldrh	r3, [r3, #10]
 800e242:	88ba      	ldrh	r2, [r7, #4]
 800e244:	429a      	cmp	r2, r3
 800e246:	d305      	bcc.n	800e254 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800e248:	69fb      	ldr	r3, [r7, #28]
 800e24a:	895b      	ldrh	r3, [r3, #10]
 800e24c:	88ba      	ldrh	r2, [r7, #4]
 800e24e:	1ad3      	subs	r3, r2, r3
 800e250:	80bb      	strh	r3, [r7, #4]
 800e252:	e023      	b.n	800e29c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800e254:	69fb      	ldr	r3, [r7, #28]
 800e256:	895a      	ldrh	r2, [r3, #10]
 800e258:	88bb      	ldrh	r3, [r7, #4]
 800e25a:	1ad3      	subs	r3, r2, r3
 800e25c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800e25e:	8b3a      	ldrh	r2, [r7, #24]
 800e260:	88fb      	ldrh	r3, [r7, #6]
 800e262:	429a      	cmp	r2, r3
 800e264:	d901      	bls.n	800e26a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800e266:	88fb      	ldrh	r3, [r7, #6]
 800e268:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800e26a:	8b7b      	ldrh	r3, [r7, #26]
 800e26c:	68ba      	ldr	r2, [r7, #8]
 800e26e:	18d0      	adds	r0, r2, r3
 800e270:	69fb      	ldr	r3, [r7, #28]
 800e272:	685a      	ldr	r2, [r3, #4]
 800e274:	88bb      	ldrh	r3, [r7, #4]
 800e276:	4413      	add	r3, r2
 800e278:	8b3a      	ldrh	r2, [r7, #24]
 800e27a:	4619      	mov	r1, r3
 800e27c:	f008 fdec 	bl	8016e58 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800e280:	8afa      	ldrh	r2, [r7, #22]
 800e282:	8b3b      	ldrh	r3, [r7, #24]
 800e284:	4413      	add	r3, r2
 800e286:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800e288:	8b7a      	ldrh	r2, [r7, #26]
 800e28a:	8b3b      	ldrh	r3, [r7, #24]
 800e28c:	4413      	add	r3, r2
 800e28e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800e290:	88fa      	ldrh	r2, [r7, #6]
 800e292:	8b3b      	ldrh	r3, [r7, #24]
 800e294:	1ad3      	subs	r3, r2, r3
 800e296:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800e298:	2300      	movs	r3, #0
 800e29a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e29c:	69fb      	ldr	r3, [r7, #28]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	61fb      	str	r3, [r7, #28]
 800e2a2:	88fb      	ldrh	r3, [r7, #6]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d002      	beq.n	800e2ae <pbuf_copy_partial+0xca>
 800e2a8:	69fb      	ldr	r3, [r7, #28]
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d1c4      	bne.n	800e238 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800e2ae:	8afb      	ldrh	r3, [r7, #22]
}
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	3720      	adds	r7, #32
 800e2b4:	46bd      	mov	sp, r7
 800e2b6:	bd80      	pop	{r7, pc}
 800e2b8:	080186e8 	.word	0x080186e8
 800e2bc:	08018a30 	.word	0x08018a30
 800e2c0:	08018748 	.word	0x08018748
 800e2c4:	08018a50 	.word	0x08018a50

0800e2c8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800e2c8:	b580      	push	{r7, lr}
 800e2ca:	b084      	sub	sp, #16
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	4603      	mov	r3, r0
 800e2d0:	603a      	str	r2, [r7, #0]
 800e2d2:	71fb      	strb	r3, [r7, #7]
 800e2d4:	460b      	mov	r3, r1
 800e2d6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800e2d8:	683b      	ldr	r3, [r7, #0]
 800e2da:	8919      	ldrh	r1, [r3, #8]
 800e2dc:	88ba      	ldrh	r2, [r7, #4]
 800e2de:	79fb      	ldrb	r3, [r7, #7]
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	f7ff faa5 	bl	800d830 <pbuf_alloc>
 800e2e6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d101      	bne.n	800e2f2 <pbuf_clone+0x2a>
    return NULL;
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	e011      	b.n	800e316 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800e2f2:	6839      	ldr	r1, [r7, #0]
 800e2f4:	68f8      	ldr	r0, [r7, #12]
 800e2f6:	f7ff fea3 	bl	800e040 <pbuf_copy>
 800e2fa:	4603      	mov	r3, r0
 800e2fc:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800e2fe:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d006      	beq.n	800e314 <pbuf_clone+0x4c>
 800e306:	4b06      	ldr	r3, [pc, #24]	; (800e320 <pbuf_clone+0x58>)
 800e308:	f240 5224 	movw	r2, #1316	; 0x524
 800e30c:	4905      	ldr	r1, [pc, #20]	; (800e324 <pbuf_clone+0x5c>)
 800e30e:	4806      	ldr	r0, [pc, #24]	; (800e328 <pbuf_clone+0x60>)
 800e310:	f008 fdb8 	bl	8016e84 <iprintf>
  return q;
 800e314:	68fb      	ldr	r3, [r7, #12]
}
 800e316:	4618      	mov	r0, r3
 800e318:	3710      	adds	r7, #16
 800e31a:	46bd      	mov	sp, r7
 800e31c:	bd80      	pop	{r7, pc}
 800e31e:	bf00      	nop
 800e320:	080186e8 	.word	0x080186e8
 800e324:	08018b5c 	.word	0x08018b5c
 800e328:	08018748 	.word	0x08018748

0800e32c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800e32c:	b580      	push	{r7, lr}
 800e32e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e330:	f008 fdc0 	bl	8016eb4 <rand>
 800e334:	4603      	mov	r3, r0
 800e336:	b29b      	uxth	r3, r3
 800e338:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e33c:	b29b      	uxth	r3, r3
 800e33e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800e342:	b29a      	uxth	r2, r3
 800e344:	4b01      	ldr	r3, [pc, #4]	; (800e34c <tcp_init+0x20>)
 800e346:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e348:	bf00      	nop
 800e34a:	bd80      	pop	{r7, pc}
 800e34c:	20000120 	.word	0x20000120

0800e350 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800e350:	b580      	push	{r7, lr}
 800e352:	b082      	sub	sp, #8
 800e354:	af00      	add	r7, sp, #0
 800e356:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	7d1b      	ldrb	r3, [r3, #20]
 800e35c:	2b01      	cmp	r3, #1
 800e35e:	d105      	bne.n	800e36c <tcp_free+0x1c>
 800e360:	4b06      	ldr	r3, [pc, #24]	; (800e37c <tcp_free+0x2c>)
 800e362:	22d4      	movs	r2, #212	; 0xd4
 800e364:	4906      	ldr	r1, [pc, #24]	; (800e380 <tcp_free+0x30>)
 800e366:	4807      	ldr	r0, [pc, #28]	; (800e384 <tcp_free+0x34>)
 800e368:	f008 fd8c 	bl	8016e84 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800e36c:	6879      	ldr	r1, [r7, #4]
 800e36e:	2001      	movs	r0, #1
 800e370:	f7fe ff16 	bl	800d1a0 <memp_free>
}
 800e374:	bf00      	nop
 800e376:	3708      	adds	r7, #8
 800e378:	46bd      	mov	sp, r7
 800e37a:	bd80      	pop	{r7, pc}
 800e37c:	08018be8 	.word	0x08018be8
 800e380:	08018c18 	.word	0x08018c18
 800e384:	08018c2c 	.word	0x08018c2c

0800e388 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800e388:	b580      	push	{r7, lr}
 800e38a:	b082      	sub	sp, #8
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	7d1b      	ldrb	r3, [r3, #20]
 800e394:	2b01      	cmp	r3, #1
 800e396:	d105      	bne.n	800e3a4 <tcp_free_listen+0x1c>
 800e398:	4b06      	ldr	r3, [pc, #24]	; (800e3b4 <tcp_free_listen+0x2c>)
 800e39a:	22df      	movs	r2, #223	; 0xdf
 800e39c:	4906      	ldr	r1, [pc, #24]	; (800e3b8 <tcp_free_listen+0x30>)
 800e39e:	4807      	ldr	r0, [pc, #28]	; (800e3bc <tcp_free_listen+0x34>)
 800e3a0:	f008 fd70 	bl	8016e84 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800e3a4:	6879      	ldr	r1, [r7, #4]
 800e3a6:	2002      	movs	r0, #2
 800e3a8:	f7fe fefa 	bl	800d1a0 <memp_free>
}
 800e3ac:	bf00      	nop
 800e3ae:	3708      	adds	r7, #8
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	bd80      	pop	{r7, pc}
 800e3b4:	08018be8 	.word	0x08018be8
 800e3b8:	08018c54 	.word	0x08018c54
 800e3bc:	08018c2c 	.word	0x08018c2c

0800e3c0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800e3c4:	f000 fea2 	bl	800f10c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800e3c8:	4b07      	ldr	r3, [pc, #28]	; (800e3e8 <tcp_tmr+0x28>)
 800e3ca:	781b      	ldrb	r3, [r3, #0]
 800e3cc:	3301      	adds	r3, #1
 800e3ce:	b2da      	uxtb	r2, r3
 800e3d0:	4b05      	ldr	r3, [pc, #20]	; (800e3e8 <tcp_tmr+0x28>)
 800e3d2:	701a      	strb	r2, [r3, #0]
 800e3d4:	4b04      	ldr	r3, [pc, #16]	; (800e3e8 <tcp_tmr+0x28>)
 800e3d6:	781b      	ldrb	r3, [r3, #0]
 800e3d8:	f003 0301 	and.w	r3, r3, #1
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d001      	beq.n	800e3e4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800e3e0:	f000 fb54 	bl	800ea8c <tcp_slowtmr>
  }
}
 800e3e4:	bf00      	nop
 800e3e6:	bd80      	pop	{r7, pc}
 800e3e8:	20004241 	.word	0x20004241

0800e3ec <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800e3ec:	b580      	push	{r7, lr}
 800e3ee:	b084      	sub	sp, #16
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	6078      	str	r0, [r7, #4]
 800e3f4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800e3f6:	683b      	ldr	r3, [r7, #0]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d105      	bne.n	800e408 <tcp_remove_listener+0x1c>
 800e3fc:	4b0d      	ldr	r3, [pc, #52]	; (800e434 <tcp_remove_listener+0x48>)
 800e3fe:	22ff      	movs	r2, #255	; 0xff
 800e400:	490d      	ldr	r1, [pc, #52]	; (800e438 <tcp_remove_listener+0x4c>)
 800e402:	480e      	ldr	r0, [pc, #56]	; (800e43c <tcp_remove_listener+0x50>)
 800e404:	f008 fd3e 	bl	8016e84 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	60fb      	str	r3, [r7, #12]
 800e40c:	e00a      	b.n	800e424 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e412:	683a      	ldr	r2, [r7, #0]
 800e414:	429a      	cmp	r2, r3
 800e416:	d102      	bne.n	800e41e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	2200      	movs	r2, #0
 800e41c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	68db      	ldr	r3, [r3, #12]
 800e422:	60fb      	str	r3, [r7, #12]
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	2b00      	cmp	r3, #0
 800e428:	d1f1      	bne.n	800e40e <tcp_remove_listener+0x22>
    }
  }
}
 800e42a:	bf00      	nop
 800e42c:	bf00      	nop
 800e42e:	3710      	adds	r7, #16
 800e430:	46bd      	mov	sp, r7
 800e432:	bd80      	pop	{r7, pc}
 800e434:	08018be8 	.word	0x08018be8
 800e438:	08018c70 	.word	0x08018c70
 800e43c:	08018c2c 	.word	0x08018c2c

0800e440 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800e440:	b580      	push	{r7, lr}
 800e442:	b084      	sub	sp, #16
 800e444:	af00      	add	r7, sp, #0
 800e446:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d106      	bne.n	800e45c <tcp_listen_closed+0x1c>
 800e44e:	4b14      	ldr	r3, [pc, #80]	; (800e4a0 <tcp_listen_closed+0x60>)
 800e450:	f240 1211 	movw	r2, #273	; 0x111
 800e454:	4913      	ldr	r1, [pc, #76]	; (800e4a4 <tcp_listen_closed+0x64>)
 800e456:	4814      	ldr	r0, [pc, #80]	; (800e4a8 <tcp_listen_closed+0x68>)
 800e458:	f008 fd14 	bl	8016e84 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	7d1b      	ldrb	r3, [r3, #20]
 800e460:	2b01      	cmp	r3, #1
 800e462:	d006      	beq.n	800e472 <tcp_listen_closed+0x32>
 800e464:	4b0e      	ldr	r3, [pc, #56]	; (800e4a0 <tcp_listen_closed+0x60>)
 800e466:	f44f 7289 	mov.w	r2, #274	; 0x112
 800e46a:	4910      	ldr	r1, [pc, #64]	; (800e4ac <tcp_listen_closed+0x6c>)
 800e46c:	480e      	ldr	r0, [pc, #56]	; (800e4a8 <tcp_listen_closed+0x68>)
 800e46e:	f008 fd09 	bl	8016e84 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e472:	2301      	movs	r3, #1
 800e474:	60fb      	str	r3, [r7, #12]
 800e476:	e00b      	b.n	800e490 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800e478:	4a0d      	ldr	r2, [pc, #52]	; (800e4b0 <tcp_listen_closed+0x70>)
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	6879      	ldr	r1, [r7, #4]
 800e484:	4618      	mov	r0, r3
 800e486:	f7ff ffb1 	bl	800e3ec <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	3301      	adds	r3, #1
 800e48e:	60fb      	str	r3, [r7, #12]
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	2b03      	cmp	r3, #3
 800e494:	d9f0      	bls.n	800e478 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800e496:	bf00      	nop
 800e498:	bf00      	nop
 800e49a:	3710      	adds	r7, #16
 800e49c:	46bd      	mov	sp, r7
 800e49e:	bd80      	pop	{r7, pc}
 800e4a0:	08018be8 	.word	0x08018be8
 800e4a4:	08018c98 	.word	0x08018c98
 800e4a8:	08018c2c 	.word	0x08018c2c
 800e4ac:	08018ca4 	.word	0x08018ca4
 800e4b0:	0801ac44 	.word	0x0801ac44

0800e4b4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800e4b4:	b5b0      	push	{r4, r5, r7, lr}
 800e4b6:	b088      	sub	sp, #32
 800e4b8:	af04      	add	r7, sp, #16
 800e4ba:	6078      	str	r0, [r7, #4]
 800e4bc:	460b      	mov	r3, r1
 800e4be:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d106      	bne.n	800e4d4 <tcp_close_shutdown+0x20>
 800e4c6:	4b63      	ldr	r3, [pc, #396]	; (800e654 <tcp_close_shutdown+0x1a0>)
 800e4c8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800e4cc:	4962      	ldr	r1, [pc, #392]	; (800e658 <tcp_close_shutdown+0x1a4>)
 800e4ce:	4863      	ldr	r0, [pc, #396]	; (800e65c <tcp_close_shutdown+0x1a8>)
 800e4d0:	f008 fcd8 	bl	8016e84 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800e4d4:	78fb      	ldrb	r3, [r7, #3]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d066      	beq.n	800e5a8 <tcp_close_shutdown+0xf4>
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	7d1b      	ldrb	r3, [r3, #20]
 800e4de:	2b04      	cmp	r3, #4
 800e4e0:	d003      	beq.n	800e4ea <tcp_close_shutdown+0x36>
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	7d1b      	ldrb	r3, [r3, #20]
 800e4e6:	2b07      	cmp	r3, #7
 800e4e8:	d15e      	bne.n	800e5a8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d104      	bne.n	800e4fc <tcp_close_shutdown+0x48>
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e4f6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e4fa:	d055      	beq.n	800e5a8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	8b5b      	ldrh	r3, [r3, #26]
 800e500:	f003 0310 	and.w	r3, r3, #16
 800e504:	2b00      	cmp	r3, #0
 800e506:	d106      	bne.n	800e516 <tcp_close_shutdown+0x62>
 800e508:	4b52      	ldr	r3, [pc, #328]	; (800e654 <tcp_close_shutdown+0x1a0>)
 800e50a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800e50e:	4954      	ldr	r1, [pc, #336]	; (800e660 <tcp_close_shutdown+0x1ac>)
 800e510:	4852      	ldr	r0, [pc, #328]	; (800e65c <tcp_close_shutdown+0x1a8>)
 800e512:	f008 fcb7 	bl	8016e84 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e51e:	687d      	ldr	r5, [r7, #4]
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	3304      	adds	r3, #4
 800e524:	687a      	ldr	r2, [r7, #4]
 800e526:	8ad2      	ldrh	r2, [r2, #22]
 800e528:	6879      	ldr	r1, [r7, #4]
 800e52a:	8b09      	ldrh	r1, [r1, #24]
 800e52c:	9102      	str	r1, [sp, #8]
 800e52e:	9201      	str	r2, [sp, #4]
 800e530:	9300      	str	r3, [sp, #0]
 800e532:	462b      	mov	r3, r5
 800e534:	4622      	mov	r2, r4
 800e536:	4601      	mov	r1, r0
 800e538:	6878      	ldr	r0, [r7, #4]
 800e53a:	f004 fe8d 	bl	8013258 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800e53e:	6878      	ldr	r0, [r7, #4]
 800e540:	f001 f8c6 	bl	800f6d0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800e544:	4b47      	ldr	r3, [pc, #284]	; (800e664 <tcp_close_shutdown+0x1b0>)
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	687a      	ldr	r2, [r7, #4]
 800e54a:	429a      	cmp	r2, r3
 800e54c:	d105      	bne.n	800e55a <tcp_close_shutdown+0xa6>
 800e54e:	4b45      	ldr	r3, [pc, #276]	; (800e664 <tcp_close_shutdown+0x1b0>)
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	68db      	ldr	r3, [r3, #12]
 800e554:	4a43      	ldr	r2, [pc, #268]	; (800e664 <tcp_close_shutdown+0x1b0>)
 800e556:	6013      	str	r3, [r2, #0]
 800e558:	e013      	b.n	800e582 <tcp_close_shutdown+0xce>
 800e55a:	4b42      	ldr	r3, [pc, #264]	; (800e664 <tcp_close_shutdown+0x1b0>)
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	60fb      	str	r3, [r7, #12]
 800e560:	e00c      	b.n	800e57c <tcp_close_shutdown+0xc8>
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	68db      	ldr	r3, [r3, #12]
 800e566:	687a      	ldr	r2, [r7, #4]
 800e568:	429a      	cmp	r2, r3
 800e56a:	d104      	bne.n	800e576 <tcp_close_shutdown+0xc2>
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	68da      	ldr	r2, [r3, #12]
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	60da      	str	r2, [r3, #12]
 800e574:	e005      	b.n	800e582 <tcp_close_shutdown+0xce>
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	68db      	ldr	r3, [r3, #12]
 800e57a:	60fb      	str	r3, [r7, #12]
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d1ef      	bne.n	800e562 <tcp_close_shutdown+0xae>
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	2200      	movs	r2, #0
 800e586:	60da      	str	r2, [r3, #12]
 800e588:	4b37      	ldr	r3, [pc, #220]	; (800e668 <tcp_close_shutdown+0x1b4>)
 800e58a:	2201      	movs	r2, #1
 800e58c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800e58e:	4b37      	ldr	r3, [pc, #220]	; (800e66c <tcp_close_shutdown+0x1b8>)
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	687a      	ldr	r2, [r7, #4]
 800e594:	429a      	cmp	r2, r3
 800e596:	d102      	bne.n	800e59e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800e598:	f003 fd5a 	bl	8012050 <tcp_trigger_input_pcb_close>
 800e59c:	e002      	b.n	800e5a4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800e59e:	6878      	ldr	r0, [r7, #4]
 800e5a0:	f7ff fed6 	bl	800e350 <tcp_free>
      }
      return ERR_OK;
 800e5a4:	2300      	movs	r3, #0
 800e5a6:	e050      	b.n	800e64a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	7d1b      	ldrb	r3, [r3, #20]
 800e5ac:	2b02      	cmp	r3, #2
 800e5ae:	d03b      	beq.n	800e628 <tcp_close_shutdown+0x174>
 800e5b0:	2b02      	cmp	r3, #2
 800e5b2:	dc44      	bgt.n	800e63e <tcp_close_shutdown+0x18a>
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d002      	beq.n	800e5be <tcp_close_shutdown+0x10a>
 800e5b8:	2b01      	cmp	r3, #1
 800e5ba:	d02a      	beq.n	800e612 <tcp_close_shutdown+0x15e>
 800e5bc:	e03f      	b.n	800e63e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	8adb      	ldrh	r3, [r3, #22]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d021      	beq.n	800e60a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e5c6:	4b2a      	ldr	r3, [pc, #168]	; (800e670 <tcp_close_shutdown+0x1bc>)
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	687a      	ldr	r2, [r7, #4]
 800e5cc:	429a      	cmp	r2, r3
 800e5ce:	d105      	bne.n	800e5dc <tcp_close_shutdown+0x128>
 800e5d0:	4b27      	ldr	r3, [pc, #156]	; (800e670 <tcp_close_shutdown+0x1bc>)
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	68db      	ldr	r3, [r3, #12]
 800e5d6:	4a26      	ldr	r2, [pc, #152]	; (800e670 <tcp_close_shutdown+0x1bc>)
 800e5d8:	6013      	str	r3, [r2, #0]
 800e5da:	e013      	b.n	800e604 <tcp_close_shutdown+0x150>
 800e5dc:	4b24      	ldr	r3, [pc, #144]	; (800e670 <tcp_close_shutdown+0x1bc>)
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	60bb      	str	r3, [r7, #8]
 800e5e2:	e00c      	b.n	800e5fe <tcp_close_shutdown+0x14a>
 800e5e4:	68bb      	ldr	r3, [r7, #8]
 800e5e6:	68db      	ldr	r3, [r3, #12]
 800e5e8:	687a      	ldr	r2, [r7, #4]
 800e5ea:	429a      	cmp	r2, r3
 800e5ec:	d104      	bne.n	800e5f8 <tcp_close_shutdown+0x144>
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	68da      	ldr	r2, [r3, #12]
 800e5f2:	68bb      	ldr	r3, [r7, #8]
 800e5f4:	60da      	str	r2, [r3, #12]
 800e5f6:	e005      	b.n	800e604 <tcp_close_shutdown+0x150>
 800e5f8:	68bb      	ldr	r3, [r7, #8]
 800e5fa:	68db      	ldr	r3, [r3, #12]
 800e5fc:	60bb      	str	r3, [r7, #8]
 800e5fe:	68bb      	ldr	r3, [r7, #8]
 800e600:	2b00      	cmp	r3, #0
 800e602:	d1ef      	bne.n	800e5e4 <tcp_close_shutdown+0x130>
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	2200      	movs	r2, #0
 800e608:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800e60a:	6878      	ldr	r0, [r7, #4]
 800e60c:	f7ff fea0 	bl	800e350 <tcp_free>
      break;
 800e610:	e01a      	b.n	800e648 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800e612:	6878      	ldr	r0, [r7, #4]
 800e614:	f7ff ff14 	bl	800e440 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800e618:	6879      	ldr	r1, [r7, #4]
 800e61a:	4816      	ldr	r0, [pc, #88]	; (800e674 <tcp_close_shutdown+0x1c0>)
 800e61c:	f001 f8a8 	bl	800f770 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800e620:	6878      	ldr	r0, [r7, #4]
 800e622:	f7ff feb1 	bl	800e388 <tcp_free_listen>
      break;
 800e626:	e00f      	b.n	800e648 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e628:	6879      	ldr	r1, [r7, #4]
 800e62a:	480e      	ldr	r0, [pc, #56]	; (800e664 <tcp_close_shutdown+0x1b0>)
 800e62c:	f001 f8a0 	bl	800f770 <tcp_pcb_remove>
 800e630:	4b0d      	ldr	r3, [pc, #52]	; (800e668 <tcp_close_shutdown+0x1b4>)
 800e632:	2201      	movs	r2, #1
 800e634:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800e636:	6878      	ldr	r0, [r7, #4]
 800e638:	f7ff fe8a 	bl	800e350 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800e63c:	e004      	b.n	800e648 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800e63e:	6878      	ldr	r0, [r7, #4]
 800e640:	f000 f81a 	bl	800e678 <tcp_close_shutdown_fin>
 800e644:	4603      	mov	r3, r0
 800e646:	e000      	b.n	800e64a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800e648:	2300      	movs	r3, #0
}
 800e64a:	4618      	mov	r0, r3
 800e64c:	3710      	adds	r7, #16
 800e64e:	46bd      	mov	sp, r7
 800e650:	bdb0      	pop	{r4, r5, r7, pc}
 800e652:	bf00      	nop
 800e654:	08018be8 	.word	0x08018be8
 800e658:	08018cbc 	.word	0x08018cbc
 800e65c:	08018c2c 	.word	0x08018c2c
 800e660:	08018cdc 	.word	0x08018cdc
 800e664:	2000b0fc 	.word	0x2000b0fc
 800e668:	2000b0f8 	.word	0x2000b0f8
 800e66c:	2000b110 	.word	0x2000b110
 800e670:	2000b108 	.word	0x2000b108
 800e674:	2000b104 	.word	0x2000b104

0800e678 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800e678:	b580      	push	{r7, lr}
 800e67a:	b084      	sub	sp, #16
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	2b00      	cmp	r3, #0
 800e684:	d106      	bne.n	800e694 <tcp_close_shutdown_fin+0x1c>
 800e686:	4b2e      	ldr	r3, [pc, #184]	; (800e740 <tcp_close_shutdown_fin+0xc8>)
 800e688:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800e68c:	492d      	ldr	r1, [pc, #180]	; (800e744 <tcp_close_shutdown_fin+0xcc>)
 800e68e:	482e      	ldr	r0, [pc, #184]	; (800e748 <tcp_close_shutdown_fin+0xd0>)
 800e690:	f008 fbf8 	bl	8016e84 <iprintf>

  switch (pcb->state) {
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	7d1b      	ldrb	r3, [r3, #20]
 800e698:	2b07      	cmp	r3, #7
 800e69a:	d020      	beq.n	800e6de <tcp_close_shutdown_fin+0x66>
 800e69c:	2b07      	cmp	r3, #7
 800e69e:	dc2b      	bgt.n	800e6f8 <tcp_close_shutdown_fin+0x80>
 800e6a0:	2b03      	cmp	r3, #3
 800e6a2:	d002      	beq.n	800e6aa <tcp_close_shutdown_fin+0x32>
 800e6a4:	2b04      	cmp	r3, #4
 800e6a6:	d00d      	beq.n	800e6c4 <tcp_close_shutdown_fin+0x4c>
 800e6a8:	e026      	b.n	800e6f8 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800e6aa:	6878      	ldr	r0, [r7, #4]
 800e6ac:	f003 fee2 	bl	8012474 <tcp_send_fin>
 800e6b0:	4603      	mov	r3, r0
 800e6b2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e6b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d11f      	bne.n	800e6fc <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	2205      	movs	r2, #5
 800e6c0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e6c2:	e01b      	b.n	800e6fc <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800e6c4:	6878      	ldr	r0, [r7, #4]
 800e6c6:	f003 fed5 	bl	8012474 <tcp_send_fin>
 800e6ca:	4603      	mov	r3, r0
 800e6cc:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e6ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d114      	bne.n	800e700 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	2205      	movs	r2, #5
 800e6da:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e6dc:	e010      	b.n	800e700 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800e6de:	6878      	ldr	r0, [r7, #4]
 800e6e0:	f003 fec8 	bl	8012474 <tcp_send_fin>
 800e6e4:	4603      	mov	r3, r0
 800e6e6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e6e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d109      	bne.n	800e704 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	2209      	movs	r2, #9
 800e6f4:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e6f6:	e005      	b.n	800e704 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800e6f8:	2300      	movs	r3, #0
 800e6fa:	e01c      	b.n	800e736 <tcp_close_shutdown_fin+0xbe>
      break;
 800e6fc:	bf00      	nop
 800e6fe:	e002      	b.n	800e706 <tcp_close_shutdown_fin+0x8e>
      break;
 800e700:	bf00      	nop
 800e702:	e000      	b.n	800e706 <tcp_close_shutdown_fin+0x8e>
      break;
 800e704:	bf00      	nop
  }

  if (err == ERR_OK) {
 800e706:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d103      	bne.n	800e716 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800e70e:	6878      	ldr	r0, [r7, #4]
 800e710:	f003 ffee 	bl	80126f0 <tcp_output>
 800e714:	e00d      	b.n	800e732 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800e716:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e71a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e71e:	d108      	bne.n	800e732 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	8b5b      	ldrh	r3, [r3, #26]
 800e724:	f043 0308 	orr.w	r3, r3, #8
 800e728:	b29a      	uxth	r2, r3
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800e72e:	2300      	movs	r3, #0
 800e730:	e001      	b.n	800e736 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800e732:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e736:	4618      	mov	r0, r3
 800e738:	3710      	adds	r7, #16
 800e73a:	46bd      	mov	sp, r7
 800e73c:	bd80      	pop	{r7, pc}
 800e73e:	bf00      	nop
 800e740:	08018be8 	.word	0x08018be8
 800e744:	08018c98 	.word	0x08018c98
 800e748:	08018c2c 	.word	0x08018c2c

0800e74c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b082      	sub	sp, #8
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d109      	bne.n	800e76e <tcp_close+0x22>
 800e75a:	4b0f      	ldr	r3, [pc, #60]	; (800e798 <tcp_close+0x4c>)
 800e75c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800e760:	490e      	ldr	r1, [pc, #56]	; (800e79c <tcp_close+0x50>)
 800e762:	480f      	ldr	r0, [pc, #60]	; (800e7a0 <tcp_close+0x54>)
 800e764:	f008 fb8e 	bl	8016e84 <iprintf>
 800e768:	f06f 030f 	mvn.w	r3, #15
 800e76c:	e00f      	b.n	800e78e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	7d1b      	ldrb	r3, [r3, #20]
 800e772:	2b01      	cmp	r3, #1
 800e774:	d006      	beq.n	800e784 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	8b5b      	ldrh	r3, [r3, #26]
 800e77a:	f043 0310 	orr.w	r3, r3, #16
 800e77e:	b29a      	uxth	r2, r3
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800e784:	2101      	movs	r1, #1
 800e786:	6878      	ldr	r0, [r7, #4]
 800e788:	f7ff fe94 	bl	800e4b4 <tcp_close_shutdown>
 800e78c:	4603      	mov	r3, r0
}
 800e78e:	4618      	mov	r0, r3
 800e790:	3708      	adds	r7, #8
 800e792:	46bd      	mov	sp, r7
 800e794:	bd80      	pop	{r7, pc}
 800e796:	bf00      	nop
 800e798:	08018be8 	.word	0x08018be8
 800e79c:	08018cf8 	.word	0x08018cf8
 800e7a0:	08018c2c 	.word	0x08018c2c

0800e7a4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	b08e      	sub	sp, #56	; 0x38
 800e7a8:	af04      	add	r7, sp, #16
 800e7aa:	6078      	str	r0, [r7, #4]
 800e7ac:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d107      	bne.n	800e7c4 <tcp_abandon+0x20>
 800e7b4:	4b52      	ldr	r3, [pc, #328]	; (800e900 <tcp_abandon+0x15c>)
 800e7b6:	f240 223d 	movw	r2, #573	; 0x23d
 800e7ba:	4952      	ldr	r1, [pc, #328]	; (800e904 <tcp_abandon+0x160>)
 800e7bc:	4852      	ldr	r0, [pc, #328]	; (800e908 <tcp_abandon+0x164>)
 800e7be:	f008 fb61 	bl	8016e84 <iprintf>
 800e7c2:	e099      	b.n	800e8f8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	7d1b      	ldrb	r3, [r3, #20]
 800e7c8:	2b01      	cmp	r3, #1
 800e7ca:	d106      	bne.n	800e7da <tcp_abandon+0x36>
 800e7cc:	4b4c      	ldr	r3, [pc, #304]	; (800e900 <tcp_abandon+0x15c>)
 800e7ce:	f44f 7210 	mov.w	r2, #576	; 0x240
 800e7d2:	494e      	ldr	r1, [pc, #312]	; (800e90c <tcp_abandon+0x168>)
 800e7d4:	484c      	ldr	r0, [pc, #304]	; (800e908 <tcp_abandon+0x164>)
 800e7d6:	f008 fb55 	bl	8016e84 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	7d1b      	ldrb	r3, [r3, #20]
 800e7de:	2b0a      	cmp	r3, #10
 800e7e0:	d107      	bne.n	800e7f2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800e7e2:	6879      	ldr	r1, [r7, #4]
 800e7e4:	484a      	ldr	r0, [pc, #296]	; (800e910 <tcp_abandon+0x16c>)
 800e7e6:	f000 ffc3 	bl	800f770 <tcp_pcb_remove>
    tcp_free(pcb);
 800e7ea:	6878      	ldr	r0, [r7, #4]
 800e7ec:	f7ff fdb0 	bl	800e350 <tcp_free>
 800e7f0:	e082      	b.n	800e8f8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e7fe:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e804:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e80c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	691b      	ldr	r3, [r3, #16]
 800e812:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	7d1b      	ldrb	r3, [r3, #20]
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d126      	bne.n	800e86a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	8adb      	ldrh	r3, [r3, #22]
 800e820:	2b00      	cmp	r3, #0
 800e822:	d02e      	beq.n	800e882 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e824:	4b3b      	ldr	r3, [pc, #236]	; (800e914 <tcp_abandon+0x170>)
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	687a      	ldr	r2, [r7, #4]
 800e82a:	429a      	cmp	r2, r3
 800e82c:	d105      	bne.n	800e83a <tcp_abandon+0x96>
 800e82e:	4b39      	ldr	r3, [pc, #228]	; (800e914 <tcp_abandon+0x170>)
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	68db      	ldr	r3, [r3, #12]
 800e834:	4a37      	ldr	r2, [pc, #220]	; (800e914 <tcp_abandon+0x170>)
 800e836:	6013      	str	r3, [r2, #0]
 800e838:	e013      	b.n	800e862 <tcp_abandon+0xbe>
 800e83a:	4b36      	ldr	r3, [pc, #216]	; (800e914 <tcp_abandon+0x170>)
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	61fb      	str	r3, [r7, #28]
 800e840:	e00c      	b.n	800e85c <tcp_abandon+0xb8>
 800e842:	69fb      	ldr	r3, [r7, #28]
 800e844:	68db      	ldr	r3, [r3, #12]
 800e846:	687a      	ldr	r2, [r7, #4]
 800e848:	429a      	cmp	r2, r3
 800e84a:	d104      	bne.n	800e856 <tcp_abandon+0xb2>
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	68da      	ldr	r2, [r3, #12]
 800e850:	69fb      	ldr	r3, [r7, #28]
 800e852:	60da      	str	r2, [r3, #12]
 800e854:	e005      	b.n	800e862 <tcp_abandon+0xbe>
 800e856:	69fb      	ldr	r3, [r7, #28]
 800e858:	68db      	ldr	r3, [r3, #12]
 800e85a:	61fb      	str	r3, [r7, #28]
 800e85c:	69fb      	ldr	r3, [r7, #28]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d1ef      	bne.n	800e842 <tcp_abandon+0x9e>
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	2200      	movs	r2, #0
 800e866:	60da      	str	r2, [r3, #12]
 800e868:	e00b      	b.n	800e882 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800e86a:	683b      	ldr	r3, [r7, #0]
 800e86c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	8adb      	ldrh	r3, [r3, #22]
 800e872:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e874:	6879      	ldr	r1, [r7, #4]
 800e876:	4828      	ldr	r0, [pc, #160]	; (800e918 <tcp_abandon+0x174>)
 800e878:	f000 ff7a 	bl	800f770 <tcp_pcb_remove>
 800e87c:	4b27      	ldr	r3, [pc, #156]	; (800e91c <tcp_abandon+0x178>)
 800e87e:	2201      	movs	r2, #1
 800e880:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e886:	2b00      	cmp	r3, #0
 800e888:	d004      	beq.n	800e894 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e88e:	4618      	mov	r0, r3
 800e890:	f000 fd1c 	bl	800f2cc <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d004      	beq.n	800e8a6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	f000 fd13 	bl	800f2cc <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d004      	beq.n	800e8b8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	f000 fd0a 	bl	800f2cc <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800e8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d00e      	beq.n	800e8dc <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800e8be:	6879      	ldr	r1, [r7, #4]
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	3304      	adds	r3, #4
 800e8c4:	687a      	ldr	r2, [r7, #4]
 800e8c6:	8b12      	ldrh	r2, [r2, #24]
 800e8c8:	9202      	str	r2, [sp, #8]
 800e8ca:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e8cc:	9201      	str	r2, [sp, #4]
 800e8ce:	9300      	str	r3, [sp, #0]
 800e8d0:	460b      	mov	r3, r1
 800e8d2:	697a      	ldr	r2, [r7, #20]
 800e8d4:	69b9      	ldr	r1, [r7, #24]
 800e8d6:	6878      	ldr	r0, [r7, #4]
 800e8d8:	f004 fcbe 	bl	8013258 <tcp_rst>
    }
    last_state = pcb->state;
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	7d1b      	ldrb	r3, [r3, #20]
 800e8e0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800e8e2:	6878      	ldr	r0, [r7, #4]
 800e8e4:	f7ff fd34 	bl	800e350 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800e8e8:	693b      	ldr	r3, [r7, #16]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d004      	beq.n	800e8f8 <tcp_abandon+0x154>
 800e8ee:	693b      	ldr	r3, [r7, #16]
 800e8f0:	f06f 010c 	mvn.w	r1, #12
 800e8f4:	68f8      	ldr	r0, [r7, #12]
 800e8f6:	4798      	blx	r3
  }
}
 800e8f8:	3728      	adds	r7, #40	; 0x28
 800e8fa:	46bd      	mov	sp, r7
 800e8fc:	bd80      	pop	{r7, pc}
 800e8fe:	bf00      	nop
 800e900:	08018be8 	.word	0x08018be8
 800e904:	08018d2c 	.word	0x08018d2c
 800e908:	08018c2c 	.word	0x08018c2c
 800e90c:	08018d48 	.word	0x08018d48
 800e910:	2000b10c 	.word	0x2000b10c
 800e914:	2000b108 	.word	0x2000b108
 800e918:	2000b0fc 	.word	0x2000b0fc
 800e91c:	2000b0f8 	.word	0x2000b0f8

0800e920 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800e920:	b580      	push	{r7, lr}
 800e922:	b082      	sub	sp, #8
 800e924:	af00      	add	r7, sp, #0
 800e926:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800e928:	2101      	movs	r1, #1
 800e92a:	6878      	ldr	r0, [r7, #4]
 800e92c:	f7ff ff3a 	bl	800e7a4 <tcp_abandon>
}
 800e930:	bf00      	nop
 800e932:	3708      	adds	r7, #8
 800e934:	46bd      	mov	sp, r7
 800e936:	bd80      	pop	{r7, pc}

0800e938 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800e938:	b580      	push	{r7, lr}
 800e93a:	b084      	sub	sp, #16
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	2b00      	cmp	r3, #0
 800e944:	d106      	bne.n	800e954 <tcp_update_rcv_ann_wnd+0x1c>
 800e946:	4b25      	ldr	r3, [pc, #148]	; (800e9dc <tcp_update_rcv_ann_wnd+0xa4>)
 800e948:	f240 32a6 	movw	r2, #934	; 0x3a6
 800e94c:	4924      	ldr	r1, [pc, #144]	; (800e9e0 <tcp_update_rcv_ann_wnd+0xa8>)
 800e94e:	4825      	ldr	r0, [pc, #148]	; (800e9e4 <tcp_update_rcv_ann_wnd+0xac>)
 800e950:	f008 fa98 	bl	8016e84 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e958:	687a      	ldr	r2, [r7, #4]
 800e95a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800e95c:	4413      	add	r3, r2
 800e95e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e964:	687a      	ldr	r2, [r7, #4]
 800e966:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800e968:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800e96c:	bf28      	it	cs
 800e96e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800e972:	b292      	uxth	r2, r2
 800e974:	4413      	add	r3, r2
 800e976:	68fa      	ldr	r2, [r7, #12]
 800e978:	1ad3      	subs	r3, r2, r3
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	db08      	blt.n	800e990 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e98a:	68fa      	ldr	r2, [r7, #12]
 800e98c:	1ad3      	subs	r3, r2, r3
 800e98e:	e020      	b.n	800e9d2 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e998:	1ad3      	subs	r3, r2, r3
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	dd03      	ble.n	800e9a6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	2200      	movs	r2, #0
 800e9a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e9a4:	e014      	b.n	800e9d0 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9ae:	1ad3      	subs	r3, r2, r3
 800e9b0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800e9b2:	68bb      	ldr	r3, [r7, #8]
 800e9b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e9b8:	d306      	bcc.n	800e9c8 <tcp_update_rcv_ann_wnd+0x90>
 800e9ba:	4b08      	ldr	r3, [pc, #32]	; (800e9dc <tcp_update_rcv_ann_wnd+0xa4>)
 800e9bc:	f240 32b6 	movw	r2, #950	; 0x3b6
 800e9c0:	4909      	ldr	r1, [pc, #36]	; (800e9e8 <tcp_update_rcv_ann_wnd+0xb0>)
 800e9c2:	4808      	ldr	r0, [pc, #32]	; (800e9e4 <tcp_update_rcv_ann_wnd+0xac>)
 800e9c4:	f008 fa5e 	bl	8016e84 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800e9c8:	68bb      	ldr	r3, [r7, #8]
 800e9ca:	b29a      	uxth	r2, r3
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800e9d0:	2300      	movs	r3, #0
  }
}
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	3710      	adds	r7, #16
 800e9d6:	46bd      	mov	sp, r7
 800e9d8:	bd80      	pop	{r7, pc}
 800e9da:	bf00      	nop
 800e9dc:	08018be8 	.word	0x08018be8
 800e9e0:	08018e44 	.word	0x08018e44
 800e9e4:	08018c2c 	.word	0x08018c2c
 800e9e8:	08018e68 	.word	0x08018e68

0800e9ec <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800e9ec:	b580      	push	{r7, lr}
 800e9ee:	b084      	sub	sp, #16
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	6078      	str	r0, [r7, #4]
 800e9f4:	460b      	mov	r3, r1
 800e9f6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d107      	bne.n	800ea0e <tcp_recved+0x22>
 800e9fe:	4b1f      	ldr	r3, [pc, #124]	; (800ea7c <tcp_recved+0x90>)
 800ea00:	f240 32cf 	movw	r2, #975	; 0x3cf
 800ea04:	491e      	ldr	r1, [pc, #120]	; (800ea80 <tcp_recved+0x94>)
 800ea06:	481f      	ldr	r0, [pc, #124]	; (800ea84 <tcp_recved+0x98>)
 800ea08:	f008 fa3c 	bl	8016e84 <iprintf>
 800ea0c:	e032      	b.n	800ea74 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	7d1b      	ldrb	r3, [r3, #20]
 800ea12:	2b01      	cmp	r3, #1
 800ea14:	d106      	bne.n	800ea24 <tcp_recved+0x38>
 800ea16:	4b19      	ldr	r3, [pc, #100]	; (800ea7c <tcp_recved+0x90>)
 800ea18:	f240 32d2 	movw	r2, #978	; 0x3d2
 800ea1c:	491a      	ldr	r1, [pc, #104]	; (800ea88 <tcp_recved+0x9c>)
 800ea1e:	4819      	ldr	r0, [pc, #100]	; (800ea84 <tcp_recved+0x98>)
 800ea20:	f008 fa30 	bl	8016e84 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ea28:	887b      	ldrh	r3, [r7, #2]
 800ea2a:	4413      	add	r3, r2
 800ea2c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800ea2e:	89fb      	ldrh	r3, [r7, #14]
 800ea30:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ea34:	d804      	bhi.n	800ea40 <tcp_recved+0x54>
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ea3a:	89fa      	ldrh	r2, [r7, #14]
 800ea3c:	429a      	cmp	r2, r3
 800ea3e:	d204      	bcs.n	800ea4a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ea46:	851a      	strh	r2, [r3, #40]	; 0x28
 800ea48:	e002      	b.n	800ea50 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	89fa      	ldrh	r2, [r7, #14]
 800ea4e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800ea50:	6878      	ldr	r0, [r7, #4]
 800ea52:	f7ff ff71 	bl	800e938 <tcp_update_rcv_ann_wnd>
 800ea56:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800ea58:	68bb      	ldr	r3, [r7, #8]
 800ea5a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800ea5e:	d309      	bcc.n	800ea74 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	8b5b      	ldrh	r3, [r3, #26]
 800ea64:	f043 0302 	orr.w	r3, r3, #2
 800ea68:	b29a      	uxth	r2, r3
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ea6e:	6878      	ldr	r0, [r7, #4]
 800ea70:	f003 fe3e 	bl	80126f0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800ea74:	3710      	adds	r7, #16
 800ea76:	46bd      	mov	sp, r7
 800ea78:	bd80      	pop	{r7, pc}
 800ea7a:	bf00      	nop
 800ea7c:	08018be8 	.word	0x08018be8
 800ea80:	08018e84 	.word	0x08018e84
 800ea84:	08018c2c 	.word	0x08018c2c
 800ea88:	08018e9c 	.word	0x08018e9c

0800ea8c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800ea8c:	b5b0      	push	{r4, r5, r7, lr}
 800ea8e:	b090      	sub	sp, #64	; 0x40
 800ea90:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800ea92:	2300      	movs	r3, #0
 800ea94:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800ea98:	4b94      	ldr	r3, [pc, #592]	; (800ecec <tcp_slowtmr+0x260>)
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	3301      	adds	r3, #1
 800ea9e:	4a93      	ldr	r2, [pc, #588]	; (800ecec <tcp_slowtmr+0x260>)
 800eaa0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800eaa2:	4b93      	ldr	r3, [pc, #588]	; (800ecf0 <tcp_slowtmr+0x264>)
 800eaa4:	781b      	ldrb	r3, [r3, #0]
 800eaa6:	3301      	adds	r3, #1
 800eaa8:	b2da      	uxtb	r2, r3
 800eaaa:	4b91      	ldr	r3, [pc, #580]	; (800ecf0 <tcp_slowtmr+0x264>)
 800eaac:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800eaae:	2300      	movs	r3, #0
 800eab0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800eab2:	4b90      	ldr	r3, [pc, #576]	; (800ecf4 <tcp_slowtmr+0x268>)
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800eab8:	e29f      	b.n	800effa <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800eaba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eabc:	7d1b      	ldrb	r3, [r3, #20]
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d106      	bne.n	800ead0 <tcp_slowtmr+0x44>
 800eac2:	4b8d      	ldr	r3, [pc, #564]	; (800ecf8 <tcp_slowtmr+0x26c>)
 800eac4:	f240 42be 	movw	r2, #1214	; 0x4be
 800eac8:	498c      	ldr	r1, [pc, #560]	; (800ecfc <tcp_slowtmr+0x270>)
 800eaca:	488d      	ldr	r0, [pc, #564]	; (800ed00 <tcp_slowtmr+0x274>)
 800eacc:	f008 f9da 	bl	8016e84 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800ead0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ead2:	7d1b      	ldrb	r3, [r3, #20]
 800ead4:	2b01      	cmp	r3, #1
 800ead6:	d106      	bne.n	800eae6 <tcp_slowtmr+0x5a>
 800ead8:	4b87      	ldr	r3, [pc, #540]	; (800ecf8 <tcp_slowtmr+0x26c>)
 800eada:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800eade:	4989      	ldr	r1, [pc, #548]	; (800ed04 <tcp_slowtmr+0x278>)
 800eae0:	4887      	ldr	r0, [pc, #540]	; (800ed00 <tcp_slowtmr+0x274>)
 800eae2:	f008 f9cf 	bl	8016e84 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800eae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eae8:	7d1b      	ldrb	r3, [r3, #20]
 800eaea:	2b0a      	cmp	r3, #10
 800eaec:	d106      	bne.n	800eafc <tcp_slowtmr+0x70>
 800eaee:	4b82      	ldr	r3, [pc, #520]	; (800ecf8 <tcp_slowtmr+0x26c>)
 800eaf0:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800eaf4:	4984      	ldr	r1, [pc, #528]	; (800ed08 <tcp_slowtmr+0x27c>)
 800eaf6:	4882      	ldr	r0, [pc, #520]	; (800ed00 <tcp_slowtmr+0x274>)
 800eaf8:	f008 f9c4 	bl	8016e84 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800eafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eafe:	7f9a      	ldrb	r2, [r3, #30]
 800eb00:	4b7b      	ldr	r3, [pc, #492]	; (800ecf0 <tcp_slowtmr+0x264>)
 800eb02:	781b      	ldrb	r3, [r3, #0]
 800eb04:	429a      	cmp	r2, r3
 800eb06:	d105      	bne.n	800eb14 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800eb08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb0a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800eb0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb0e:	68db      	ldr	r3, [r3, #12]
 800eb10:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800eb12:	e272      	b.n	800effa <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800eb14:	4b76      	ldr	r3, [pc, #472]	; (800ecf0 <tcp_slowtmr+0x264>)
 800eb16:	781a      	ldrb	r2, [r3, #0]
 800eb18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb1a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800eb22:	2300      	movs	r3, #0
 800eb24:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800eb28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb2a:	7d1b      	ldrb	r3, [r3, #20]
 800eb2c:	2b02      	cmp	r3, #2
 800eb2e:	d10a      	bne.n	800eb46 <tcp_slowtmr+0xba>
 800eb30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800eb36:	2b05      	cmp	r3, #5
 800eb38:	d905      	bls.n	800eb46 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800eb3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb3e:	3301      	adds	r3, #1
 800eb40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800eb44:	e11e      	b.n	800ed84 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800eb46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb48:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800eb4c:	2b0b      	cmp	r3, #11
 800eb4e:	d905      	bls.n	800eb5c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800eb50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb54:	3301      	adds	r3, #1
 800eb56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800eb5a:	e113      	b.n	800ed84 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800eb5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb5e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d075      	beq.n	800ec52 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800eb66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d006      	beq.n	800eb7c <tcp_slowtmr+0xf0>
 800eb6e:	4b62      	ldr	r3, [pc, #392]	; (800ecf8 <tcp_slowtmr+0x26c>)
 800eb70:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800eb74:	4965      	ldr	r1, [pc, #404]	; (800ed0c <tcp_slowtmr+0x280>)
 800eb76:	4862      	ldr	r0, [pc, #392]	; (800ed00 <tcp_slowtmr+0x274>)
 800eb78:	f008 f984 	bl	8016e84 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800eb7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d106      	bne.n	800eb92 <tcp_slowtmr+0x106>
 800eb84:	4b5c      	ldr	r3, [pc, #368]	; (800ecf8 <tcp_slowtmr+0x26c>)
 800eb86:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800eb8a:	4961      	ldr	r1, [pc, #388]	; (800ed10 <tcp_slowtmr+0x284>)
 800eb8c:	485c      	ldr	r0, [pc, #368]	; (800ed00 <tcp_slowtmr+0x274>)
 800eb8e:	f008 f979 	bl	8016e84 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800eb92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb94:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800eb98:	2b0b      	cmp	r3, #11
 800eb9a:	d905      	bls.n	800eba8 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800eb9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eba0:	3301      	adds	r3, #1
 800eba2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800eba6:	e0ed      	b.n	800ed84 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800eba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebaa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ebae:	3b01      	subs	r3, #1
 800ebb0:	4a58      	ldr	r2, [pc, #352]	; (800ed14 <tcp_slowtmr+0x288>)
 800ebb2:	5cd3      	ldrb	r3, [r2, r3]
 800ebb4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800ebb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebb8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ebbc:	7c7a      	ldrb	r2, [r7, #17]
 800ebbe:	429a      	cmp	r2, r3
 800ebc0:	d907      	bls.n	800ebd2 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800ebc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebc4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ebc8:	3301      	adds	r3, #1
 800ebca:	b2da      	uxtb	r2, r3
 800ebcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebce:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800ebd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebd4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ebd8:	7c7a      	ldrb	r2, [r7, #17]
 800ebda:	429a      	cmp	r2, r3
 800ebdc:	f200 80d2 	bhi.w	800ed84 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800ebe0:	2301      	movs	r3, #1
 800ebe2:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800ebe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebe6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d108      	bne.n	800ec00 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800ebee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ebf0:	f004 fc26 	bl	8013440 <tcp_zero_window_probe>
 800ebf4:	4603      	mov	r3, r0
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d014      	beq.n	800ec24 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	623b      	str	r3, [r7, #32]
 800ebfe:	e011      	b.n	800ec24 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800ec00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec02:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ec06:	4619      	mov	r1, r3
 800ec08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ec0a:	f003 faeb 	bl	80121e4 <tcp_split_unsent_seg>
 800ec0e:	4603      	mov	r3, r0
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d107      	bne.n	800ec24 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800ec14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ec16:	f003 fd6b 	bl	80126f0 <tcp_output>
 800ec1a:	4603      	mov	r3, r0
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d101      	bne.n	800ec24 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800ec20:	2300      	movs	r3, #0
 800ec22:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800ec24:	6a3b      	ldr	r3, [r7, #32]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	f000 80ac 	beq.w	800ed84 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800ec2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec2e:	2200      	movs	r2, #0
 800ec30:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800ec34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec36:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ec3a:	2b06      	cmp	r3, #6
 800ec3c:	f200 80a2 	bhi.w	800ed84 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800ec40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec42:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ec46:	3301      	adds	r3, #1
 800ec48:	b2da      	uxtb	r2, r3
 800ec4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec4c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800ec50:	e098      	b.n	800ed84 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800ec52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec54:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	db0f      	blt.n	800ec7c <tcp_slowtmr+0x1f0>
 800ec5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec5e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ec62:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ec66:	4293      	cmp	r3, r2
 800ec68:	d008      	beq.n	800ec7c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800ec6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec6c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ec70:	b29b      	uxth	r3, r3
 800ec72:	3301      	adds	r3, #1
 800ec74:	b29b      	uxth	r3, r3
 800ec76:	b21a      	sxth	r2, r3
 800ec78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec7a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800ec7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec7e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800ec82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec84:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800ec88:	429a      	cmp	r2, r3
 800ec8a:	db7b      	blt.n	800ed84 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800ec8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ec8e:	f004 f821 	bl	8012cd4 <tcp_rexmit_rto_prepare>
 800ec92:	4603      	mov	r3, r0
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d007      	beq.n	800eca8 <tcp_slowtmr+0x21c>
 800ec98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d171      	bne.n	800ed84 <tcp_slowtmr+0x2f8>
 800eca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eca2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d06d      	beq.n	800ed84 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800eca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecaa:	7d1b      	ldrb	r3, [r3, #20]
 800ecac:	2b02      	cmp	r3, #2
 800ecae:	d03a      	beq.n	800ed26 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800ecb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecb2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ecb6:	2b0c      	cmp	r3, #12
 800ecb8:	bf28      	it	cs
 800ecba:	230c      	movcs	r3, #12
 800ecbc:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800ecbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecc0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ecc4:	10db      	asrs	r3, r3, #3
 800ecc6:	b21b      	sxth	r3, r3
 800ecc8:	461a      	mov	r2, r3
 800ecca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eccc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ecd0:	4413      	add	r3, r2
 800ecd2:	7efa      	ldrb	r2, [r7, #27]
 800ecd4:	4910      	ldr	r1, [pc, #64]	; (800ed18 <tcp_slowtmr+0x28c>)
 800ecd6:	5c8a      	ldrb	r2, [r1, r2]
 800ecd8:	4093      	lsls	r3, r2
 800ecda:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800ecdc:	697b      	ldr	r3, [r7, #20]
 800ecde:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800ece2:	4293      	cmp	r3, r2
 800ece4:	dc1a      	bgt.n	800ed1c <tcp_slowtmr+0x290>
 800ece6:	697b      	ldr	r3, [r7, #20]
 800ece8:	b21a      	sxth	r2, r3
 800ecea:	e019      	b.n	800ed20 <tcp_slowtmr+0x294>
 800ecec:	2000b100 	.word	0x2000b100
 800ecf0:	20004242 	.word	0x20004242
 800ecf4:	2000b0fc 	.word	0x2000b0fc
 800ecf8:	08018be8 	.word	0x08018be8
 800ecfc:	08018f2c 	.word	0x08018f2c
 800ed00:	08018c2c 	.word	0x08018c2c
 800ed04:	08018f58 	.word	0x08018f58
 800ed08:	08018f84 	.word	0x08018f84
 800ed0c:	08018fb4 	.word	0x08018fb4
 800ed10:	08018fe8 	.word	0x08018fe8
 800ed14:	0801ac3c 	.word	0x0801ac3c
 800ed18:	0801ac2c 	.word	0x0801ac2c
 800ed1c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ed20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed22:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800ed26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed28:	2200      	movs	r2, #0
 800ed2a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800ed2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed2e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ed32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed34:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ed38:	4293      	cmp	r3, r2
 800ed3a:	bf28      	it	cs
 800ed3c:	4613      	movcs	r3, r2
 800ed3e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800ed40:	8a7b      	ldrh	r3, [r7, #18]
 800ed42:	085b      	lsrs	r3, r3, #1
 800ed44:	b29a      	uxth	r2, r3
 800ed46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed48:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800ed4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed4e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ed52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ed56:	005b      	lsls	r3, r3, #1
 800ed58:	b29b      	uxth	r3, r3
 800ed5a:	429a      	cmp	r2, r3
 800ed5c:	d206      	bcs.n	800ed6c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800ed5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ed62:	005b      	lsls	r3, r3, #1
 800ed64:	b29a      	uxth	r2, r3
 800ed66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed68:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800ed6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed6e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800ed70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed72:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800ed76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed78:	2200      	movs	r2, #0
 800ed7a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800ed7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ed80:	f004 f818 	bl	8012db4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800ed84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed86:	7d1b      	ldrb	r3, [r3, #20]
 800ed88:	2b06      	cmp	r3, #6
 800ed8a:	d111      	bne.n	800edb0 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800ed8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed8e:	8b5b      	ldrh	r3, [r3, #26]
 800ed90:	f003 0310 	and.w	r3, r3, #16
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d00b      	beq.n	800edb0 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ed98:	4b9d      	ldr	r3, [pc, #628]	; (800f010 <tcp_slowtmr+0x584>)
 800ed9a:	681a      	ldr	r2, [r3, #0]
 800ed9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed9e:	6a1b      	ldr	r3, [r3, #32]
 800eda0:	1ad3      	subs	r3, r2, r3
 800eda2:	2b28      	cmp	r3, #40	; 0x28
 800eda4:	d904      	bls.n	800edb0 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800eda6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800edaa:	3301      	adds	r3, #1
 800edac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800edb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edb2:	7a5b      	ldrb	r3, [r3, #9]
 800edb4:	f003 0308 	and.w	r3, r3, #8
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d04c      	beq.n	800ee56 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800edbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edbe:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800edc0:	2b04      	cmp	r3, #4
 800edc2:	d003      	beq.n	800edcc <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800edc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edc6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800edc8:	2b07      	cmp	r3, #7
 800edca:	d144      	bne.n	800ee56 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800edcc:	4b90      	ldr	r3, [pc, #576]	; (800f010 <tcp_slowtmr+0x584>)
 800edce:	681a      	ldr	r2, [r3, #0]
 800edd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edd2:	6a1b      	ldr	r3, [r3, #32]
 800edd4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800edd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800eddc:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800ede0:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800ede4:	498b      	ldr	r1, [pc, #556]	; (800f014 <tcp_slowtmr+0x588>)
 800ede6:	fba1 1303 	umull	r1, r3, r1, r3
 800edea:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800edec:	429a      	cmp	r2, r3
 800edee:	d90a      	bls.n	800ee06 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800edf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800edf4:	3301      	adds	r3, #1
 800edf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800edfa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800edfe:	3301      	adds	r3, #1
 800ee00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ee04:	e027      	b.n	800ee56 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ee06:	4b82      	ldr	r3, [pc, #520]	; (800f010 <tcp_slowtmr+0x584>)
 800ee08:	681a      	ldr	r2, [r3, #0]
 800ee0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee0c:	6a1b      	ldr	r3, [r3, #32]
 800ee0e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800ee10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee12:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800ee16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee18:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	4b7e      	ldr	r3, [pc, #504]	; (800f018 <tcp_slowtmr+0x58c>)
 800ee20:	fb03 f300 	mul.w	r3, r3, r0
 800ee24:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800ee26:	497b      	ldr	r1, [pc, #492]	; (800f014 <tcp_slowtmr+0x588>)
 800ee28:	fba1 1303 	umull	r1, r3, r1, r3
 800ee2c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ee2e:	429a      	cmp	r2, r3
 800ee30:	d911      	bls.n	800ee56 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800ee32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ee34:	f004 fac4 	bl	80133c0 <tcp_keepalive>
 800ee38:	4603      	mov	r3, r0
 800ee3a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800ee3e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d107      	bne.n	800ee56 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800ee46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee48:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800ee4c:	3301      	adds	r3, #1
 800ee4e:	b2da      	uxtb	r2, r3
 800ee50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee52:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800ee56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d011      	beq.n	800ee82 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800ee5e:	4b6c      	ldr	r3, [pc, #432]	; (800f010 <tcp_slowtmr+0x584>)
 800ee60:	681a      	ldr	r2, [r3, #0]
 800ee62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee64:	6a1b      	ldr	r3, [r3, #32]
 800ee66:	1ad2      	subs	r2, r2, r3
 800ee68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee6a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800ee6e:	4619      	mov	r1, r3
 800ee70:	460b      	mov	r3, r1
 800ee72:	005b      	lsls	r3, r3, #1
 800ee74:	440b      	add	r3, r1
 800ee76:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800ee78:	429a      	cmp	r2, r3
 800ee7a:	d302      	bcc.n	800ee82 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800ee7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ee7e:	f000 fddb 	bl	800fa38 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800ee82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee84:	7d1b      	ldrb	r3, [r3, #20]
 800ee86:	2b03      	cmp	r3, #3
 800ee88:	d10b      	bne.n	800eea2 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ee8a:	4b61      	ldr	r3, [pc, #388]	; (800f010 <tcp_slowtmr+0x584>)
 800ee8c:	681a      	ldr	r2, [r3, #0]
 800ee8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee90:	6a1b      	ldr	r3, [r3, #32]
 800ee92:	1ad3      	subs	r3, r2, r3
 800ee94:	2b28      	cmp	r3, #40	; 0x28
 800ee96:	d904      	bls.n	800eea2 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800ee98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee9c:	3301      	adds	r3, #1
 800ee9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800eea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eea4:	7d1b      	ldrb	r3, [r3, #20]
 800eea6:	2b09      	cmp	r3, #9
 800eea8:	d10b      	bne.n	800eec2 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800eeaa:	4b59      	ldr	r3, [pc, #356]	; (800f010 <tcp_slowtmr+0x584>)
 800eeac:	681a      	ldr	r2, [r3, #0]
 800eeae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeb0:	6a1b      	ldr	r3, [r3, #32]
 800eeb2:	1ad3      	subs	r3, r2, r3
 800eeb4:	2bf0      	cmp	r3, #240	; 0xf0
 800eeb6:	d904      	bls.n	800eec2 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800eeb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eebc:	3301      	adds	r3, #1
 800eebe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800eec2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d060      	beq.n	800ef8c <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800eeca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eed0:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800eed2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eed4:	f000 fbfc 	bl	800f6d0 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800eed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d010      	beq.n	800ef00 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800eede:	4b4f      	ldr	r3, [pc, #316]	; (800f01c <tcp_slowtmr+0x590>)
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eee4:	429a      	cmp	r2, r3
 800eee6:	d106      	bne.n	800eef6 <tcp_slowtmr+0x46a>
 800eee8:	4b4d      	ldr	r3, [pc, #308]	; (800f020 <tcp_slowtmr+0x594>)
 800eeea:	f240 526d 	movw	r2, #1389	; 0x56d
 800eeee:	494d      	ldr	r1, [pc, #308]	; (800f024 <tcp_slowtmr+0x598>)
 800eef0:	484d      	ldr	r0, [pc, #308]	; (800f028 <tcp_slowtmr+0x59c>)
 800eef2:	f007 ffc7 	bl	8016e84 <iprintf>
        prev->next = pcb->next;
 800eef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eef8:	68da      	ldr	r2, [r3, #12]
 800eefa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eefc:	60da      	str	r2, [r3, #12]
 800eefe:	e00f      	b.n	800ef20 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800ef00:	4b46      	ldr	r3, [pc, #280]	; (800f01c <tcp_slowtmr+0x590>)
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ef06:	429a      	cmp	r2, r3
 800ef08:	d006      	beq.n	800ef18 <tcp_slowtmr+0x48c>
 800ef0a:	4b45      	ldr	r3, [pc, #276]	; (800f020 <tcp_slowtmr+0x594>)
 800ef0c:	f240 5271 	movw	r2, #1393	; 0x571
 800ef10:	4946      	ldr	r1, [pc, #280]	; (800f02c <tcp_slowtmr+0x5a0>)
 800ef12:	4845      	ldr	r0, [pc, #276]	; (800f028 <tcp_slowtmr+0x59c>)
 800ef14:	f007 ffb6 	bl	8016e84 <iprintf>
        tcp_active_pcbs = pcb->next;
 800ef18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef1a:	68db      	ldr	r3, [r3, #12]
 800ef1c:	4a3f      	ldr	r2, [pc, #252]	; (800f01c <tcp_slowtmr+0x590>)
 800ef1e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800ef20:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d013      	beq.n	800ef50 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ef28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef2a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800ef2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef2e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ef30:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800ef32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef34:	3304      	adds	r3, #4
 800ef36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ef38:	8ad2      	ldrh	r2, [r2, #22]
 800ef3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ef3c:	8b09      	ldrh	r1, [r1, #24]
 800ef3e:	9102      	str	r1, [sp, #8]
 800ef40:	9201      	str	r2, [sp, #4]
 800ef42:	9300      	str	r3, [sp, #0]
 800ef44:	462b      	mov	r3, r5
 800ef46:	4622      	mov	r2, r4
 800ef48:	4601      	mov	r1, r0
 800ef4a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ef4c:	f004 f984 	bl	8013258 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800ef50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef52:	691b      	ldr	r3, [r3, #16]
 800ef54:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800ef56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef58:	7d1b      	ldrb	r3, [r3, #20]
 800ef5a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800ef5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef5e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800ef60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef62:	68db      	ldr	r3, [r3, #12]
 800ef64:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800ef66:	6838      	ldr	r0, [r7, #0]
 800ef68:	f7ff f9f2 	bl	800e350 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800ef6c:	4b30      	ldr	r3, [pc, #192]	; (800f030 <tcp_slowtmr+0x5a4>)
 800ef6e:	2200      	movs	r2, #0
 800ef70:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d004      	beq.n	800ef82 <tcp_slowtmr+0x4f6>
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	f06f 010c 	mvn.w	r1, #12
 800ef7e:	68b8      	ldr	r0, [r7, #8]
 800ef80:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800ef82:	4b2b      	ldr	r3, [pc, #172]	; (800f030 <tcp_slowtmr+0x5a4>)
 800ef84:	781b      	ldrb	r3, [r3, #0]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d037      	beq.n	800effa <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800ef8a:	e590      	b.n	800eaae <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800ef8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef8e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ef90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef92:	68db      	ldr	r3, [r3, #12]
 800ef94:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800ef96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef98:	7f1b      	ldrb	r3, [r3, #28]
 800ef9a:	3301      	adds	r3, #1
 800ef9c:	b2da      	uxtb	r2, r3
 800ef9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efa0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800efa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efa4:	7f1a      	ldrb	r2, [r3, #28]
 800efa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efa8:	7f5b      	ldrb	r3, [r3, #29]
 800efaa:	429a      	cmp	r2, r3
 800efac:	d325      	bcc.n	800effa <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800efae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efb0:	2200      	movs	r2, #0
 800efb2:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800efb4:	4b1e      	ldr	r3, [pc, #120]	; (800f030 <tcp_slowtmr+0x5a4>)
 800efb6:	2200      	movs	r2, #0
 800efb8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800efba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d00b      	beq.n	800efdc <tcp_slowtmr+0x550>
 800efc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800efca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800efcc:	6912      	ldr	r2, [r2, #16]
 800efce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800efd0:	4610      	mov	r0, r2
 800efd2:	4798      	blx	r3
 800efd4:	4603      	mov	r3, r0
 800efd6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800efda:	e002      	b.n	800efe2 <tcp_slowtmr+0x556>
 800efdc:	2300      	movs	r3, #0
 800efde:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800efe2:	4b13      	ldr	r3, [pc, #76]	; (800f030 <tcp_slowtmr+0x5a4>)
 800efe4:	781b      	ldrb	r3, [r3, #0]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d000      	beq.n	800efec <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800efea:	e560      	b.n	800eaae <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800efec:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d102      	bne.n	800effa <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800eff4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eff6:	f003 fb7b 	bl	80126f0 <tcp_output>
  while (pcb != NULL) {
 800effa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800effc:	2b00      	cmp	r3, #0
 800effe:	f47f ad5c 	bne.w	800eaba <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800f002:	2300      	movs	r3, #0
 800f004:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800f006:	4b0b      	ldr	r3, [pc, #44]	; (800f034 <tcp_slowtmr+0x5a8>)
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800f00c:	e067      	b.n	800f0de <tcp_slowtmr+0x652>
 800f00e:	bf00      	nop
 800f010:	2000b100 	.word	0x2000b100
 800f014:	10624dd3 	.word	0x10624dd3
 800f018:	000124f8 	.word	0x000124f8
 800f01c:	2000b0fc 	.word	0x2000b0fc
 800f020:	08018be8 	.word	0x08018be8
 800f024:	08019020 	.word	0x08019020
 800f028:	08018c2c 	.word	0x08018c2c
 800f02c:	0801904c 	.word	0x0801904c
 800f030:	2000b0f8 	.word	0x2000b0f8
 800f034:	2000b10c 	.word	0x2000b10c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f03a:	7d1b      	ldrb	r3, [r3, #20]
 800f03c:	2b0a      	cmp	r3, #10
 800f03e:	d006      	beq.n	800f04e <tcp_slowtmr+0x5c2>
 800f040:	4b2b      	ldr	r3, [pc, #172]	; (800f0f0 <tcp_slowtmr+0x664>)
 800f042:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800f046:	492b      	ldr	r1, [pc, #172]	; (800f0f4 <tcp_slowtmr+0x668>)
 800f048:	482b      	ldr	r0, [pc, #172]	; (800f0f8 <tcp_slowtmr+0x66c>)
 800f04a:	f007 ff1b 	bl	8016e84 <iprintf>
    pcb_remove = 0;
 800f04e:	2300      	movs	r3, #0
 800f050:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f054:	4b29      	ldr	r3, [pc, #164]	; (800f0fc <tcp_slowtmr+0x670>)
 800f056:	681a      	ldr	r2, [r3, #0]
 800f058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f05a:	6a1b      	ldr	r3, [r3, #32]
 800f05c:	1ad3      	subs	r3, r2, r3
 800f05e:	2bf0      	cmp	r3, #240	; 0xf0
 800f060:	d904      	bls.n	800f06c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800f062:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f066:	3301      	adds	r3, #1
 800f068:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f06c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f070:	2b00      	cmp	r3, #0
 800f072:	d02f      	beq.n	800f0d4 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800f074:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f076:	f000 fb2b 	bl	800f6d0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800f07a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d010      	beq.n	800f0a2 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800f080:	4b1f      	ldr	r3, [pc, #124]	; (800f100 <tcp_slowtmr+0x674>)
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f086:	429a      	cmp	r2, r3
 800f088:	d106      	bne.n	800f098 <tcp_slowtmr+0x60c>
 800f08a:	4b19      	ldr	r3, [pc, #100]	; (800f0f0 <tcp_slowtmr+0x664>)
 800f08c:	f240 52af 	movw	r2, #1455	; 0x5af
 800f090:	491c      	ldr	r1, [pc, #112]	; (800f104 <tcp_slowtmr+0x678>)
 800f092:	4819      	ldr	r0, [pc, #100]	; (800f0f8 <tcp_slowtmr+0x66c>)
 800f094:	f007 fef6 	bl	8016e84 <iprintf>
        prev->next = pcb->next;
 800f098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f09a:	68da      	ldr	r2, [r3, #12]
 800f09c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f09e:	60da      	str	r2, [r3, #12]
 800f0a0:	e00f      	b.n	800f0c2 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800f0a2:	4b17      	ldr	r3, [pc, #92]	; (800f100 <tcp_slowtmr+0x674>)
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f0a8:	429a      	cmp	r2, r3
 800f0aa:	d006      	beq.n	800f0ba <tcp_slowtmr+0x62e>
 800f0ac:	4b10      	ldr	r3, [pc, #64]	; (800f0f0 <tcp_slowtmr+0x664>)
 800f0ae:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800f0b2:	4915      	ldr	r1, [pc, #84]	; (800f108 <tcp_slowtmr+0x67c>)
 800f0b4:	4810      	ldr	r0, [pc, #64]	; (800f0f8 <tcp_slowtmr+0x66c>)
 800f0b6:	f007 fee5 	bl	8016e84 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800f0ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0bc:	68db      	ldr	r3, [r3, #12]
 800f0be:	4a10      	ldr	r2, [pc, #64]	; (800f100 <tcp_slowtmr+0x674>)
 800f0c0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800f0c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0c4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800f0c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0c8:	68db      	ldr	r3, [r3, #12]
 800f0ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800f0cc:	69f8      	ldr	r0, [r7, #28]
 800f0ce:	f7ff f93f 	bl	800e350 <tcp_free>
 800f0d2:	e004      	b.n	800f0de <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800f0d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0d6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f0d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0da:	68db      	ldr	r3, [r3, #12]
 800f0dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800f0de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d1a9      	bne.n	800f038 <tcp_slowtmr+0x5ac>
    }
  }
}
 800f0e4:	bf00      	nop
 800f0e6:	bf00      	nop
 800f0e8:	3730      	adds	r7, #48	; 0x30
 800f0ea:	46bd      	mov	sp, r7
 800f0ec:	bdb0      	pop	{r4, r5, r7, pc}
 800f0ee:	bf00      	nop
 800f0f0:	08018be8 	.word	0x08018be8
 800f0f4:	08019078 	.word	0x08019078
 800f0f8:	08018c2c 	.word	0x08018c2c
 800f0fc:	2000b100 	.word	0x2000b100
 800f100:	2000b10c 	.word	0x2000b10c
 800f104:	080190a8 	.word	0x080190a8
 800f108:	080190d0 	.word	0x080190d0

0800f10c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800f10c:	b580      	push	{r7, lr}
 800f10e:	b082      	sub	sp, #8
 800f110:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800f112:	4b2d      	ldr	r3, [pc, #180]	; (800f1c8 <tcp_fasttmr+0xbc>)
 800f114:	781b      	ldrb	r3, [r3, #0]
 800f116:	3301      	adds	r3, #1
 800f118:	b2da      	uxtb	r2, r3
 800f11a:	4b2b      	ldr	r3, [pc, #172]	; (800f1c8 <tcp_fasttmr+0xbc>)
 800f11c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800f11e:	4b2b      	ldr	r3, [pc, #172]	; (800f1cc <tcp_fasttmr+0xc0>)
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f124:	e048      	b.n	800f1b8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	7f9a      	ldrb	r2, [r3, #30]
 800f12a:	4b27      	ldr	r3, [pc, #156]	; (800f1c8 <tcp_fasttmr+0xbc>)
 800f12c:	781b      	ldrb	r3, [r3, #0]
 800f12e:	429a      	cmp	r2, r3
 800f130:	d03f      	beq.n	800f1b2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800f132:	4b25      	ldr	r3, [pc, #148]	; (800f1c8 <tcp_fasttmr+0xbc>)
 800f134:	781a      	ldrb	r2, [r3, #0]
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	8b5b      	ldrh	r3, [r3, #26]
 800f13e:	f003 0301 	and.w	r3, r3, #1
 800f142:	2b00      	cmp	r3, #0
 800f144:	d010      	beq.n	800f168 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	8b5b      	ldrh	r3, [r3, #26]
 800f14a:	f043 0302 	orr.w	r3, r3, #2
 800f14e:	b29a      	uxth	r2, r3
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800f154:	6878      	ldr	r0, [r7, #4]
 800f156:	f003 facb 	bl	80126f0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	8b5b      	ldrh	r3, [r3, #26]
 800f15e:	f023 0303 	bic.w	r3, r3, #3
 800f162:	b29a      	uxth	r2, r3
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	8b5b      	ldrh	r3, [r3, #26]
 800f16c:	f003 0308 	and.w	r3, r3, #8
 800f170:	2b00      	cmp	r3, #0
 800f172:	d009      	beq.n	800f188 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	8b5b      	ldrh	r3, [r3, #26]
 800f178:	f023 0308 	bic.w	r3, r3, #8
 800f17c:	b29a      	uxth	r2, r3
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800f182:	6878      	ldr	r0, [r7, #4]
 800f184:	f7ff fa78 	bl	800e678 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	68db      	ldr	r3, [r3, #12]
 800f18c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f192:	2b00      	cmp	r3, #0
 800f194:	d00a      	beq.n	800f1ac <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800f196:	4b0e      	ldr	r3, [pc, #56]	; (800f1d0 <tcp_fasttmr+0xc4>)
 800f198:	2200      	movs	r2, #0
 800f19a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800f19c:	6878      	ldr	r0, [r7, #4]
 800f19e:	f000 f819 	bl	800f1d4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800f1a2:	4b0b      	ldr	r3, [pc, #44]	; (800f1d0 <tcp_fasttmr+0xc4>)
 800f1a4:	781b      	ldrb	r3, [r3, #0]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d000      	beq.n	800f1ac <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800f1aa:	e7b8      	b.n	800f11e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800f1ac:	683b      	ldr	r3, [r7, #0]
 800f1ae:	607b      	str	r3, [r7, #4]
 800f1b0:	e002      	b.n	800f1b8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	68db      	ldr	r3, [r3, #12]
 800f1b6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d1b3      	bne.n	800f126 <tcp_fasttmr+0x1a>
    }
  }
}
 800f1be:	bf00      	nop
 800f1c0:	bf00      	nop
 800f1c2:	3708      	adds	r7, #8
 800f1c4:	46bd      	mov	sp, r7
 800f1c6:	bd80      	pop	{r7, pc}
 800f1c8:	20004242 	.word	0x20004242
 800f1cc:	2000b0fc 	.word	0x2000b0fc
 800f1d0:	2000b0f8 	.word	0x2000b0f8

0800f1d4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800f1d4:	b590      	push	{r4, r7, lr}
 800f1d6:	b085      	sub	sp, #20
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d109      	bne.n	800f1f6 <tcp_process_refused_data+0x22>
 800f1e2:	4b37      	ldr	r3, [pc, #220]	; (800f2c0 <tcp_process_refused_data+0xec>)
 800f1e4:	f240 6209 	movw	r2, #1545	; 0x609
 800f1e8:	4936      	ldr	r1, [pc, #216]	; (800f2c4 <tcp_process_refused_data+0xf0>)
 800f1ea:	4837      	ldr	r0, [pc, #220]	; (800f2c8 <tcp_process_refused_data+0xf4>)
 800f1ec:	f007 fe4a 	bl	8016e84 <iprintf>
 800f1f0:	f06f 030f 	mvn.w	r3, #15
 800f1f4:	e060      	b.n	800f2b8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f1fa:	7b5b      	ldrb	r3, [r3, #13]
 800f1fc:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f202:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	2200      	movs	r2, #0
 800f208:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f210:	2b00      	cmp	r3, #0
 800f212:	d00b      	beq.n	800f22c <tcp_process_refused_data+0x58>
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	6918      	ldr	r0, [r3, #16]
 800f21e:	2300      	movs	r3, #0
 800f220:	68ba      	ldr	r2, [r7, #8]
 800f222:	6879      	ldr	r1, [r7, #4]
 800f224:	47a0      	blx	r4
 800f226:	4603      	mov	r3, r0
 800f228:	73fb      	strb	r3, [r7, #15]
 800f22a:	e007      	b.n	800f23c <tcp_process_refused_data+0x68>
 800f22c:	2300      	movs	r3, #0
 800f22e:	68ba      	ldr	r2, [r7, #8]
 800f230:	6879      	ldr	r1, [r7, #4]
 800f232:	2000      	movs	r0, #0
 800f234:	f000 f8a4 	bl	800f380 <tcp_recv_null>
 800f238:	4603      	mov	r3, r0
 800f23a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800f23c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d12a      	bne.n	800f29a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800f244:	7bbb      	ldrb	r3, [r7, #14]
 800f246:	f003 0320 	and.w	r3, r3, #32
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d033      	beq.n	800f2b6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f252:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f256:	d005      	beq.n	800f264 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f25c:	3301      	adds	r3, #1
 800f25e:	b29a      	uxth	r2, r3
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d00b      	beq.n	800f286 <tcp_process_refused_data+0xb2>
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	6918      	ldr	r0, [r3, #16]
 800f278:	2300      	movs	r3, #0
 800f27a:	2200      	movs	r2, #0
 800f27c:	6879      	ldr	r1, [r7, #4]
 800f27e:	47a0      	blx	r4
 800f280:	4603      	mov	r3, r0
 800f282:	73fb      	strb	r3, [r7, #15]
 800f284:	e001      	b.n	800f28a <tcp_process_refused_data+0xb6>
 800f286:	2300      	movs	r3, #0
 800f288:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800f28a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f28e:	f113 0f0d 	cmn.w	r3, #13
 800f292:	d110      	bne.n	800f2b6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800f294:	f06f 030c 	mvn.w	r3, #12
 800f298:	e00e      	b.n	800f2b8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800f29a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f29e:	f113 0f0d 	cmn.w	r3, #13
 800f2a2:	d102      	bne.n	800f2aa <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800f2a4:	f06f 030c 	mvn.w	r3, #12
 800f2a8:	e006      	b.n	800f2b8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	68ba      	ldr	r2, [r7, #8]
 800f2ae:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800f2b0:	f06f 0304 	mvn.w	r3, #4
 800f2b4:	e000      	b.n	800f2b8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800f2b6:	2300      	movs	r3, #0
}
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	3714      	adds	r7, #20
 800f2bc:	46bd      	mov	sp, r7
 800f2be:	bd90      	pop	{r4, r7, pc}
 800f2c0:	08018be8 	.word	0x08018be8
 800f2c4:	080190f8 	.word	0x080190f8
 800f2c8:	08018c2c 	.word	0x08018c2c

0800f2cc <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800f2cc:	b580      	push	{r7, lr}
 800f2ce:	b084      	sub	sp, #16
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800f2d4:	e007      	b.n	800f2e6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800f2dc:	6878      	ldr	r0, [r7, #4]
 800f2de:	f000 f80a 	bl	800f2f6 <tcp_seg_free>
    seg = next;
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d1f4      	bne.n	800f2d6 <tcp_segs_free+0xa>
  }
}
 800f2ec:	bf00      	nop
 800f2ee:	bf00      	nop
 800f2f0:	3710      	adds	r7, #16
 800f2f2:	46bd      	mov	sp, r7
 800f2f4:	bd80      	pop	{r7, pc}

0800f2f6 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800f2f6:	b580      	push	{r7, lr}
 800f2f8:	b082      	sub	sp, #8
 800f2fa:	af00      	add	r7, sp, #0
 800f2fc:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	2b00      	cmp	r3, #0
 800f302:	d00c      	beq.n	800f31e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	685b      	ldr	r3, [r3, #4]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d004      	beq.n	800f316 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	685b      	ldr	r3, [r3, #4]
 800f310:	4618      	mov	r0, r3
 800f312:	f7fe fd71 	bl	800ddf8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800f316:	6879      	ldr	r1, [r7, #4]
 800f318:	2003      	movs	r0, #3
 800f31a:	f7fd ff41 	bl	800d1a0 <memp_free>
  }
}
 800f31e:	bf00      	nop
 800f320:	3708      	adds	r7, #8
 800f322:	46bd      	mov	sp, r7
 800f324:	bd80      	pop	{r7, pc}
	...

0800f328 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800f328:	b580      	push	{r7, lr}
 800f32a:	b084      	sub	sp, #16
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	2b00      	cmp	r3, #0
 800f334:	d106      	bne.n	800f344 <tcp_seg_copy+0x1c>
 800f336:	4b0f      	ldr	r3, [pc, #60]	; (800f374 <tcp_seg_copy+0x4c>)
 800f338:	f240 6282 	movw	r2, #1666	; 0x682
 800f33c:	490e      	ldr	r1, [pc, #56]	; (800f378 <tcp_seg_copy+0x50>)
 800f33e:	480f      	ldr	r0, [pc, #60]	; (800f37c <tcp_seg_copy+0x54>)
 800f340:	f007 fda0 	bl	8016e84 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800f344:	2003      	movs	r0, #3
 800f346:	f7fd fed9 	bl	800d0fc <memp_malloc>
 800f34a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d101      	bne.n	800f356 <tcp_seg_copy+0x2e>
    return NULL;
 800f352:	2300      	movs	r3, #0
 800f354:	e00a      	b.n	800f36c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800f356:	2210      	movs	r2, #16
 800f358:	6879      	ldr	r1, [r7, #4]
 800f35a:	68f8      	ldr	r0, [r7, #12]
 800f35c:	f007 fd7c 	bl	8016e58 <memcpy>
  pbuf_ref(cseg->p);
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	685b      	ldr	r3, [r3, #4]
 800f364:	4618      	mov	r0, r3
 800f366:	f7fe fded 	bl	800df44 <pbuf_ref>
  return cseg;
 800f36a:	68fb      	ldr	r3, [r7, #12]
}
 800f36c:	4618      	mov	r0, r3
 800f36e:	3710      	adds	r7, #16
 800f370:	46bd      	mov	sp, r7
 800f372:	bd80      	pop	{r7, pc}
 800f374:	08018be8 	.word	0x08018be8
 800f378:	0801913c 	.word	0x0801913c
 800f37c:	08018c2c 	.word	0x08018c2c

0800f380 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800f380:	b580      	push	{r7, lr}
 800f382:	b084      	sub	sp, #16
 800f384:	af00      	add	r7, sp, #0
 800f386:	60f8      	str	r0, [r7, #12]
 800f388:	60b9      	str	r1, [r7, #8]
 800f38a:	607a      	str	r2, [r7, #4]
 800f38c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800f38e:	68bb      	ldr	r3, [r7, #8]
 800f390:	2b00      	cmp	r3, #0
 800f392:	d109      	bne.n	800f3a8 <tcp_recv_null+0x28>
 800f394:	4b12      	ldr	r3, [pc, #72]	; (800f3e0 <tcp_recv_null+0x60>)
 800f396:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800f39a:	4912      	ldr	r1, [pc, #72]	; (800f3e4 <tcp_recv_null+0x64>)
 800f39c:	4812      	ldr	r0, [pc, #72]	; (800f3e8 <tcp_recv_null+0x68>)
 800f39e:	f007 fd71 	bl	8016e84 <iprintf>
 800f3a2:	f06f 030f 	mvn.w	r3, #15
 800f3a6:	e016      	b.n	800f3d6 <tcp_recv_null+0x56>

  if (p != NULL) {
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d009      	beq.n	800f3c2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	891b      	ldrh	r3, [r3, #8]
 800f3b2:	4619      	mov	r1, r3
 800f3b4:	68b8      	ldr	r0, [r7, #8]
 800f3b6:	f7ff fb19 	bl	800e9ec <tcp_recved>
    pbuf_free(p);
 800f3ba:	6878      	ldr	r0, [r7, #4]
 800f3bc:	f7fe fd1c 	bl	800ddf8 <pbuf_free>
 800f3c0:	e008      	b.n	800f3d4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800f3c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d104      	bne.n	800f3d4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800f3ca:	68b8      	ldr	r0, [r7, #8]
 800f3cc:	f7ff f9be 	bl	800e74c <tcp_close>
 800f3d0:	4603      	mov	r3, r0
 800f3d2:	e000      	b.n	800f3d6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800f3d4:	2300      	movs	r3, #0
}
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	3710      	adds	r7, #16
 800f3da:	46bd      	mov	sp, r7
 800f3dc:	bd80      	pop	{r7, pc}
 800f3de:	bf00      	nop
 800f3e0:	08018be8 	.word	0x08018be8
 800f3e4:	08019158 	.word	0x08019158
 800f3e8:	08018c2c 	.word	0x08018c2c

0800f3ec <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800f3ec:	b580      	push	{r7, lr}
 800f3ee:	b086      	sub	sp, #24
 800f3f0:	af00      	add	r7, sp, #0
 800f3f2:	4603      	mov	r3, r0
 800f3f4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800f3f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	db01      	blt.n	800f402 <tcp_kill_prio+0x16>
 800f3fe:	79fb      	ldrb	r3, [r7, #7]
 800f400:	e000      	b.n	800f404 <tcp_kill_prio+0x18>
 800f402:	237f      	movs	r3, #127	; 0x7f
 800f404:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800f406:	7afb      	ldrb	r3, [r7, #11]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d034      	beq.n	800f476 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800f40c:	7afb      	ldrb	r3, [r7, #11]
 800f40e:	3b01      	subs	r3, #1
 800f410:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800f412:	2300      	movs	r3, #0
 800f414:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f416:	2300      	movs	r3, #0
 800f418:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f41a:	4b19      	ldr	r3, [pc, #100]	; (800f480 <tcp_kill_prio+0x94>)
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	617b      	str	r3, [r7, #20]
 800f420:	e01f      	b.n	800f462 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800f422:	697b      	ldr	r3, [r7, #20]
 800f424:	7d5b      	ldrb	r3, [r3, #21]
 800f426:	7afa      	ldrb	r2, [r7, #11]
 800f428:	429a      	cmp	r2, r3
 800f42a:	d80c      	bhi.n	800f446 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f42c:	697b      	ldr	r3, [r7, #20]
 800f42e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800f430:	7afa      	ldrb	r2, [r7, #11]
 800f432:	429a      	cmp	r2, r3
 800f434:	d112      	bne.n	800f45c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f436:	4b13      	ldr	r3, [pc, #76]	; (800f484 <tcp_kill_prio+0x98>)
 800f438:	681a      	ldr	r2, [r3, #0]
 800f43a:	697b      	ldr	r3, [r7, #20]
 800f43c:	6a1b      	ldr	r3, [r3, #32]
 800f43e:	1ad3      	subs	r3, r2, r3
 800f440:	68fa      	ldr	r2, [r7, #12]
 800f442:	429a      	cmp	r2, r3
 800f444:	d80a      	bhi.n	800f45c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800f446:	4b0f      	ldr	r3, [pc, #60]	; (800f484 <tcp_kill_prio+0x98>)
 800f448:	681a      	ldr	r2, [r3, #0]
 800f44a:	697b      	ldr	r3, [r7, #20]
 800f44c:	6a1b      	ldr	r3, [r3, #32]
 800f44e:	1ad3      	subs	r3, r2, r3
 800f450:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800f452:	697b      	ldr	r3, [r7, #20]
 800f454:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800f456:	697b      	ldr	r3, [r7, #20]
 800f458:	7d5b      	ldrb	r3, [r3, #21]
 800f45a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f45c:	697b      	ldr	r3, [r7, #20]
 800f45e:	68db      	ldr	r3, [r3, #12]
 800f460:	617b      	str	r3, [r7, #20]
 800f462:	697b      	ldr	r3, [r7, #20]
 800f464:	2b00      	cmp	r3, #0
 800f466:	d1dc      	bne.n	800f422 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800f468:	693b      	ldr	r3, [r7, #16]
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d004      	beq.n	800f478 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f46e:	6938      	ldr	r0, [r7, #16]
 800f470:	f7ff fa56 	bl	800e920 <tcp_abort>
 800f474:	e000      	b.n	800f478 <tcp_kill_prio+0x8c>
    return;
 800f476:	bf00      	nop
  }
}
 800f478:	3718      	adds	r7, #24
 800f47a:	46bd      	mov	sp, r7
 800f47c:	bd80      	pop	{r7, pc}
 800f47e:	bf00      	nop
 800f480:	2000b0fc 	.word	0x2000b0fc
 800f484:	2000b100 	.word	0x2000b100

0800f488 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800f488:	b580      	push	{r7, lr}
 800f48a:	b086      	sub	sp, #24
 800f48c:	af00      	add	r7, sp, #0
 800f48e:	4603      	mov	r3, r0
 800f490:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800f492:	79fb      	ldrb	r3, [r7, #7]
 800f494:	2b08      	cmp	r3, #8
 800f496:	d009      	beq.n	800f4ac <tcp_kill_state+0x24>
 800f498:	79fb      	ldrb	r3, [r7, #7]
 800f49a:	2b09      	cmp	r3, #9
 800f49c:	d006      	beq.n	800f4ac <tcp_kill_state+0x24>
 800f49e:	4b1a      	ldr	r3, [pc, #104]	; (800f508 <tcp_kill_state+0x80>)
 800f4a0:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800f4a4:	4919      	ldr	r1, [pc, #100]	; (800f50c <tcp_kill_state+0x84>)
 800f4a6:	481a      	ldr	r0, [pc, #104]	; (800f510 <tcp_kill_state+0x88>)
 800f4a8:	f007 fcec 	bl	8016e84 <iprintf>

  inactivity = 0;
 800f4ac:	2300      	movs	r3, #0
 800f4ae:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f4b0:	2300      	movs	r3, #0
 800f4b2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f4b4:	4b17      	ldr	r3, [pc, #92]	; (800f514 <tcp_kill_state+0x8c>)
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	617b      	str	r3, [r7, #20]
 800f4ba:	e017      	b.n	800f4ec <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800f4bc:	697b      	ldr	r3, [r7, #20]
 800f4be:	7d1b      	ldrb	r3, [r3, #20]
 800f4c0:	79fa      	ldrb	r2, [r7, #7]
 800f4c2:	429a      	cmp	r2, r3
 800f4c4:	d10f      	bne.n	800f4e6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f4c6:	4b14      	ldr	r3, [pc, #80]	; (800f518 <tcp_kill_state+0x90>)
 800f4c8:	681a      	ldr	r2, [r3, #0]
 800f4ca:	697b      	ldr	r3, [r7, #20]
 800f4cc:	6a1b      	ldr	r3, [r3, #32]
 800f4ce:	1ad3      	subs	r3, r2, r3
 800f4d0:	68fa      	ldr	r2, [r7, #12]
 800f4d2:	429a      	cmp	r2, r3
 800f4d4:	d807      	bhi.n	800f4e6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800f4d6:	4b10      	ldr	r3, [pc, #64]	; (800f518 <tcp_kill_state+0x90>)
 800f4d8:	681a      	ldr	r2, [r3, #0]
 800f4da:	697b      	ldr	r3, [r7, #20]
 800f4dc:	6a1b      	ldr	r3, [r3, #32]
 800f4de:	1ad3      	subs	r3, r2, r3
 800f4e0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800f4e2:	697b      	ldr	r3, [r7, #20]
 800f4e4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f4e6:	697b      	ldr	r3, [r7, #20]
 800f4e8:	68db      	ldr	r3, [r3, #12]
 800f4ea:	617b      	str	r3, [r7, #20]
 800f4ec:	697b      	ldr	r3, [r7, #20]
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d1e4      	bne.n	800f4bc <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800f4f2:	693b      	ldr	r3, [r7, #16]
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d003      	beq.n	800f500 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800f4f8:	2100      	movs	r1, #0
 800f4fa:	6938      	ldr	r0, [r7, #16]
 800f4fc:	f7ff f952 	bl	800e7a4 <tcp_abandon>
  }
}
 800f500:	bf00      	nop
 800f502:	3718      	adds	r7, #24
 800f504:	46bd      	mov	sp, r7
 800f506:	bd80      	pop	{r7, pc}
 800f508:	08018be8 	.word	0x08018be8
 800f50c:	08019174 	.word	0x08019174
 800f510:	08018c2c 	.word	0x08018c2c
 800f514:	2000b0fc 	.word	0x2000b0fc
 800f518:	2000b100 	.word	0x2000b100

0800f51c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800f51c:	b580      	push	{r7, lr}
 800f51e:	b084      	sub	sp, #16
 800f520:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800f522:	2300      	movs	r3, #0
 800f524:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800f526:	2300      	movs	r3, #0
 800f528:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f52a:	4b12      	ldr	r3, [pc, #72]	; (800f574 <tcp_kill_timewait+0x58>)
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	60fb      	str	r3, [r7, #12]
 800f530:	e012      	b.n	800f558 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f532:	4b11      	ldr	r3, [pc, #68]	; (800f578 <tcp_kill_timewait+0x5c>)
 800f534:	681a      	ldr	r2, [r3, #0]
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	6a1b      	ldr	r3, [r3, #32]
 800f53a:	1ad3      	subs	r3, r2, r3
 800f53c:	687a      	ldr	r2, [r7, #4]
 800f53e:	429a      	cmp	r2, r3
 800f540:	d807      	bhi.n	800f552 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800f542:	4b0d      	ldr	r3, [pc, #52]	; (800f578 <tcp_kill_timewait+0x5c>)
 800f544:	681a      	ldr	r2, [r3, #0]
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	6a1b      	ldr	r3, [r3, #32]
 800f54a:	1ad3      	subs	r3, r2, r3
 800f54c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	68db      	ldr	r3, [r3, #12]
 800f556:	60fb      	str	r3, [r7, #12]
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d1e9      	bne.n	800f532 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800f55e:	68bb      	ldr	r3, [r7, #8]
 800f560:	2b00      	cmp	r3, #0
 800f562:	d002      	beq.n	800f56a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f564:	68b8      	ldr	r0, [r7, #8]
 800f566:	f7ff f9db 	bl	800e920 <tcp_abort>
  }
}
 800f56a:	bf00      	nop
 800f56c:	3710      	adds	r7, #16
 800f56e:	46bd      	mov	sp, r7
 800f570:	bd80      	pop	{r7, pc}
 800f572:	bf00      	nop
 800f574:	2000b10c 	.word	0x2000b10c
 800f578:	2000b100 	.word	0x2000b100

0800f57c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800f57c:	b580      	push	{r7, lr}
 800f57e:	b082      	sub	sp, #8
 800f580:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800f582:	4b10      	ldr	r3, [pc, #64]	; (800f5c4 <tcp_handle_closepend+0x48>)
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f588:	e014      	b.n	800f5b4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	68db      	ldr	r3, [r3, #12]
 800f58e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	8b5b      	ldrh	r3, [r3, #26]
 800f594:	f003 0308 	and.w	r3, r3, #8
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d009      	beq.n	800f5b0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	8b5b      	ldrh	r3, [r3, #26]
 800f5a0:	f023 0308 	bic.w	r3, r3, #8
 800f5a4:	b29a      	uxth	r2, r3
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800f5aa:	6878      	ldr	r0, [r7, #4]
 800f5ac:	f7ff f864 	bl	800e678 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800f5b0:	683b      	ldr	r3, [r7, #0]
 800f5b2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d1e7      	bne.n	800f58a <tcp_handle_closepend+0xe>
  }
}
 800f5ba:	bf00      	nop
 800f5bc:	bf00      	nop
 800f5be:	3708      	adds	r7, #8
 800f5c0:	46bd      	mov	sp, r7
 800f5c2:	bd80      	pop	{r7, pc}
 800f5c4:	2000b0fc 	.word	0x2000b0fc

0800f5c8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800f5c8:	b580      	push	{r7, lr}
 800f5ca:	b084      	sub	sp, #16
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	4603      	mov	r3, r0
 800f5d0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f5d2:	2001      	movs	r0, #1
 800f5d4:	f7fd fd92 	bl	800d0fc <memp_malloc>
 800f5d8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d126      	bne.n	800f62e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800f5e0:	f7ff ffcc 	bl	800f57c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800f5e4:	f7ff ff9a 	bl	800f51c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f5e8:	2001      	movs	r0, #1
 800f5ea:	f7fd fd87 	bl	800d0fc <memp_malloc>
 800f5ee:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d11b      	bne.n	800f62e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800f5f6:	2009      	movs	r0, #9
 800f5f8:	f7ff ff46 	bl	800f488 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f5fc:	2001      	movs	r0, #1
 800f5fe:	f7fd fd7d 	bl	800d0fc <memp_malloc>
 800f602:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	2b00      	cmp	r3, #0
 800f608:	d111      	bne.n	800f62e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800f60a:	2008      	movs	r0, #8
 800f60c:	f7ff ff3c 	bl	800f488 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f610:	2001      	movs	r0, #1
 800f612:	f7fd fd73 	bl	800d0fc <memp_malloc>
 800f616:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d107      	bne.n	800f62e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800f61e:	79fb      	ldrb	r3, [r7, #7]
 800f620:	4618      	mov	r0, r3
 800f622:	f7ff fee3 	bl	800f3ec <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f626:	2001      	movs	r0, #1
 800f628:	f7fd fd68 	bl	800d0fc <memp_malloc>
 800f62c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	2b00      	cmp	r3, #0
 800f632:	d03f      	beq.n	800f6b4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800f634:	229c      	movs	r2, #156	; 0x9c
 800f636:	2100      	movs	r1, #0
 800f638:	68f8      	ldr	r0, [r7, #12]
 800f63a:	f007 fc1b 	bl	8016e74 <memset>
    pcb->prio = prio;
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	79fa      	ldrb	r2, [r7, #7]
 800f642:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f64a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f654:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	22ff      	movs	r2, #255	; 0xff
 800f662:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f66a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	2206      	movs	r2, #6
 800f670:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	2206      	movs	r2, #6
 800f678:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f680:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	2201      	movs	r2, #1
 800f686:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800f68a:	4b0d      	ldr	r3, [pc, #52]	; (800f6c0 <tcp_alloc+0xf8>)
 800f68c:	681a      	ldr	r2, [r3, #0]
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800f692:	4b0c      	ldr	r3, [pc, #48]	; (800f6c4 <tcp_alloc+0xfc>)
 800f694:	781a      	ldrb	r2, [r3, #0]
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f6a0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	4a08      	ldr	r2, [pc, #32]	; (800f6c8 <tcp_alloc+0x100>)
 800f6a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	4a07      	ldr	r2, [pc, #28]	; (800f6cc <tcp_alloc+0x104>)
 800f6b0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800f6b4:	68fb      	ldr	r3, [r7, #12]
}
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	3710      	adds	r7, #16
 800f6ba:	46bd      	mov	sp, r7
 800f6bc:	bd80      	pop	{r7, pc}
 800f6be:	bf00      	nop
 800f6c0:	2000b100 	.word	0x2000b100
 800f6c4:	20004242 	.word	0x20004242
 800f6c8:	0800f381 	.word	0x0800f381
 800f6cc:	006ddd00 	.word	0x006ddd00

0800f6d0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800f6d0:	b580      	push	{r7, lr}
 800f6d2:	b082      	sub	sp, #8
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d107      	bne.n	800f6ee <tcp_pcb_purge+0x1e>
 800f6de:	4b21      	ldr	r3, [pc, #132]	; (800f764 <tcp_pcb_purge+0x94>)
 800f6e0:	f640 0251 	movw	r2, #2129	; 0x851
 800f6e4:	4920      	ldr	r1, [pc, #128]	; (800f768 <tcp_pcb_purge+0x98>)
 800f6e6:	4821      	ldr	r0, [pc, #132]	; (800f76c <tcp_pcb_purge+0x9c>)
 800f6e8:	f007 fbcc 	bl	8016e84 <iprintf>
 800f6ec:	e037      	b.n	800f75e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	7d1b      	ldrb	r3, [r3, #20]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d033      	beq.n	800f75e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800f6fa:	2b0a      	cmp	r3, #10
 800f6fc:	d02f      	beq.n	800f75e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800f702:	2b01      	cmp	r3, #1
 800f704:	d02b      	beq.n	800f75e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d007      	beq.n	800f71e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f712:	4618      	mov	r0, r3
 800f714:	f7fe fb70 	bl	800ddf8 <pbuf_free>
      pcb->refused_data = NULL;
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	2200      	movs	r2, #0
 800f71c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f722:	2b00      	cmp	r3, #0
 800f724:	d002      	beq.n	800f72c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800f726:	6878      	ldr	r0, [r7, #4]
 800f728:	f000 f986 	bl	800fa38 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f732:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f738:	4618      	mov	r0, r3
 800f73a:	f7ff fdc7 	bl	800f2cc <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f742:	4618      	mov	r0, r3
 800f744:	f7ff fdc2 	bl	800f2cc <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	2200      	movs	r2, #0
 800f74c:	66da      	str	r2, [r3, #108]	; 0x6c
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	2200      	movs	r2, #0
 800f75a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800f75e:	3708      	adds	r7, #8
 800f760:	46bd      	mov	sp, r7
 800f762:	bd80      	pop	{r7, pc}
 800f764:	08018be8 	.word	0x08018be8
 800f768:	08019234 	.word	0x08019234
 800f76c:	08018c2c 	.word	0x08018c2c

0800f770 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800f770:	b580      	push	{r7, lr}
 800f772:	b084      	sub	sp, #16
 800f774:	af00      	add	r7, sp, #0
 800f776:	6078      	str	r0, [r7, #4]
 800f778:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800f77a:	683b      	ldr	r3, [r7, #0]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d106      	bne.n	800f78e <tcp_pcb_remove+0x1e>
 800f780:	4b3e      	ldr	r3, [pc, #248]	; (800f87c <tcp_pcb_remove+0x10c>)
 800f782:	f640 0283 	movw	r2, #2179	; 0x883
 800f786:	493e      	ldr	r1, [pc, #248]	; (800f880 <tcp_pcb_remove+0x110>)
 800f788:	483e      	ldr	r0, [pc, #248]	; (800f884 <tcp_pcb_remove+0x114>)
 800f78a:	f007 fb7b 	bl	8016e84 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	2b00      	cmp	r3, #0
 800f792:	d106      	bne.n	800f7a2 <tcp_pcb_remove+0x32>
 800f794:	4b39      	ldr	r3, [pc, #228]	; (800f87c <tcp_pcb_remove+0x10c>)
 800f796:	f640 0284 	movw	r2, #2180	; 0x884
 800f79a:	493b      	ldr	r1, [pc, #236]	; (800f888 <tcp_pcb_remove+0x118>)
 800f79c:	4839      	ldr	r0, [pc, #228]	; (800f884 <tcp_pcb_remove+0x114>)
 800f79e:	f007 fb71 	bl	8016e84 <iprintf>

  TCP_RMV(pcblist, pcb);
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	683a      	ldr	r2, [r7, #0]
 800f7a8:	429a      	cmp	r2, r3
 800f7aa:	d105      	bne.n	800f7b8 <tcp_pcb_remove+0x48>
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	68da      	ldr	r2, [r3, #12]
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	601a      	str	r2, [r3, #0]
 800f7b6:	e013      	b.n	800f7e0 <tcp_pcb_remove+0x70>
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	60fb      	str	r3, [r7, #12]
 800f7be:	e00c      	b.n	800f7da <tcp_pcb_remove+0x6a>
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	68db      	ldr	r3, [r3, #12]
 800f7c4:	683a      	ldr	r2, [r7, #0]
 800f7c6:	429a      	cmp	r2, r3
 800f7c8:	d104      	bne.n	800f7d4 <tcp_pcb_remove+0x64>
 800f7ca:	683b      	ldr	r3, [r7, #0]
 800f7cc:	68da      	ldr	r2, [r3, #12]
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	60da      	str	r2, [r3, #12]
 800f7d2:	e005      	b.n	800f7e0 <tcp_pcb_remove+0x70>
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	68db      	ldr	r3, [r3, #12]
 800f7d8:	60fb      	str	r3, [r7, #12]
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d1ef      	bne.n	800f7c0 <tcp_pcb_remove+0x50>
 800f7e0:	683b      	ldr	r3, [r7, #0]
 800f7e2:	2200      	movs	r2, #0
 800f7e4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800f7e6:	6838      	ldr	r0, [r7, #0]
 800f7e8:	f7ff ff72 	bl	800f6d0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800f7ec:	683b      	ldr	r3, [r7, #0]
 800f7ee:	7d1b      	ldrb	r3, [r3, #20]
 800f7f0:	2b0a      	cmp	r3, #10
 800f7f2:	d013      	beq.n	800f81c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800f7f4:	683b      	ldr	r3, [r7, #0]
 800f7f6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800f7f8:	2b01      	cmp	r3, #1
 800f7fa:	d00f      	beq.n	800f81c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800f7fc:	683b      	ldr	r3, [r7, #0]
 800f7fe:	8b5b      	ldrh	r3, [r3, #26]
 800f800:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800f804:	2b00      	cmp	r3, #0
 800f806:	d009      	beq.n	800f81c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800f808:	683b      	ldr	r3, [r7, #0]
 800f80a:	8b5b      	ldrh	r3, [r3, #26]
 800f80c:	f043 0302 	orr.w	r3, r3, #2
 800f810:	b29a      	uxth	r2, r3
 800f812:	683b      	ldr	r3, [r7, #0]
 800f814:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f816:	6838      	ldr	r0, [r7, #0]
 800f818:	f002 ff6a 	bl	80126f0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800f81c:	683b      	ldr	r3, [r7, #0]
 800f81e:	7d1b      	ldrb	r3, [r3, #20]
 800f820:	2b01      	cmp	r3, #1
 800f822:	d020      	beq.n	800f866 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800f824:	683b      	ldr	r3, [r7, #0]
 800f826:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d006      	beq.n	800f83a <tcp_pcb_remove+0xca>
 800f82c:	4b13      	ldr	r3, [pc, #76]	; (800f87c <tcp_pcb_remove+0x10c>)
 800f82e:	f640 0293 	movw	r2, #2195	; 0x893
 800f832:	4916      	ldr	r1, [pc, #88]	; (800f88c <tcp_pcb_remove+0x11c>)
 800f834:	4813      	ldr	r0, [pc, #76]	; (800f884 <tcp_pcb_remove+0x114>)
 800f836:	f007 fb25 	bl	8016e84 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800f83a:	683b      	ldr	r3, [r7, #0]
 800f83c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d006      	beq.n	800f850 <tcp_pcb_remove+0xe0>
 800f842:	4b0e      	ldr	r3, [pc, #56]	; (800f87c <tcp_pcb_remove+0x10c>)
 800f844:	f640 0294 	movw	r2, #2196	; 0x894
 800f848:	4911      	ldr	r1, [pc, #68]	; (800f890 <tcp_pcb_remove+0x120>)
 800f84a:	480e      	ldr	r0, [pc, #56]	; (800f884 <tcp_pcb_remove+0x114>)
 800f84c:	f007 fb1a 	bl	8016e84 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800f850:	683b      	ldr	r3, [r7, #0]
 800f852:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f854:	2b00      	cmp	r3, #0
 800f856:	d006      	beq.n	800f866 <tcp_pcb_remove+0xf6>
 800f858:	4b08      	ldr	r3, [pc, #32]	; (800f87c <tcp_pcb_remove+0x10c>)
 800f85a:	f640 0296 	movw	r2, #2198	; 0x896
 800f85e:	490d      	ldr	r1, [pc, #52]	; (800f894 <tcp_pcb_remove+0x124>)
 800f860:	4808      	ldr	r0, [pc, #32]	; (800f884 <tcp_pcb_remove+0x114>)
 800f862:	f007 fb0f 	bl	8016e84 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800f866:	683b      	ldr	r3, [r7, #0]
 800f868:	2200      	movs	r2, #0
 800f86a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800f86c:	683b      	ldr	r3, [r7, #0]
 800f86e:	2200      	movs	r2, #0
 800f870:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800f872:	bf00      	nop
 800f874:	3710      	adds	r7, #16
 800f876:	46bd      	mov	sp, r7
 800f878:	bd80      	pop	{r7, pc}
 800f87a:	bf00      	nop
 800f87c:	08018be8 	.word	0x08018be8
 800f880:	08019250 	.word	0x08019250
 800f884:	08018c2c 	.word	0x08018c2c
 800f888:	0801926c 	.word	0x0801926c
 800f88c:	0801928c 	.word	0x0801928c
 800f890:	080192a4 	.word	0x080192a4
 800f894:	080192c0 	.word	0x080192c0

0800f898 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800f898:	b580      	push	{r7, lr}
 800f89a:	b082      	sub	sp, #8
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d106      	bne.n	800f8b4 <tcp_next_iss+0x1c>
 800f8a6:	4b0a      	ldr	r3, [pc, #40]	; (800f8d0 <tcp_next_iss+0x38>)
 800f8a8:	f640 02af 	movw	r2, #2223	; 0x8af
 800f8ac:	4909      	ldr	r1, [pc, #36]	; (800f8d4 <tcp_next_iss+0x3c>)
 800f8ae:	480a      	ldr	r0, [pc, #40]	; (800f8d8 <tcp_next_iss+0x40>)
 800f8b0:	f007 fae8 	bl	8016e84 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800f8b4:	4b09      	ldr	r3, [pc, #36]	; (800f8dc <tcp_next_iss+0x44>)
 800f8b6:	681a      	ldr	r2, [r3, #0]
 800f8b8:	4b09      	ldr	r3, [pc, #36]	; (800f8e0 <tcp_next_iss+0x48>)
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	4413      	add	r3, r2
 800f8be:	4a07      	ldr	r2, [pc, #28]	; (800f8dc <tcp_next_iss+0x44>)
 800f8c0:	6013      	str	r3, [r2, #0]
  return iss;
 800f8c2:	4b06      	ldr	r3, [pc, #24]	; (800f8dc <tcp_next_iss+0x44>)
 800f8c4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800f8c6:	4618      	mov	r0, r3
 800f8c8:	3708      	adds	r7, #8
 800f8ca:	46bd      	mov	sp, r7
 800f8cc:	bd80      	pop	{r7, pc}
 800f8ce:	bf00      	nop
 800f8d0:	08018be8 	.word	0x08018be8
 800f8d4:	080192d8 	.word	0x080192d8
 800f8d8:	08018c2c 	.word	0x08018c2c
 800f8dc:	20000124 	.word	0x20000124
 800f8e0:	2000b100 	.word	0x2000b100

0800f8e4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800f8e4:	b580      	push	{r7, lr}
 800f8e6:	b086      	sub	sp, #24
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	4603      	mov	r3, r0
 800f8ec:	60b9      	str	r1, [r7, #8]
 800f8ee:	607a      	str	r2, [r7, #4]
 800f8f0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d106      	bne.n	800f906 <tcp_eff_send_mss_netif+0x22>
 800f8f8:	4b14      	ldr	r3, [pc, #80]	; (800f94c <tcp_eff_send_mss_netif+0x68>)
 800f8fa:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800f8fe:	4914      	ldr	r1, [pc, #80]	; (800f950 <tcp_eff_send_mss_netif+0x6c>)
 800f900:	4814      	ldr	r0, [pc, #80]	; (800f954 <tcp_eff_send_mss_netif+0x70>)
 800f902:	f007 fabf 	bl	8016e84 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800f906:	68bb      	ldr	r3, [r7, #8]
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d101      	bne.n	800f910 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800f90c:	89fb      	ldrh	r3, [r7, #14]
 800f90e:	e019      	b.n	800f944 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800f910:	68bb      	ldr	r3, [r7, #8]
 800f912:	8c1b      	ldrh	r3, [r3, #32]
 800f914:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800f916:	8afb      	ldrh	r3, [r7, #22]
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d012      	beq.n	800f942 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800f91c:	2328      	movs	r3, #40	; 0x28
 800f91e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800f920:	8afa      	ldrh	r2, [r7, #22]
 800f922:	8abb      	ldrh	r3, [r7, #20]
 800f924:	429a      	cmp	r2, r3
 800f926:	d904      	bls.n	800f932 <tcp_eff_send_mss_netif+0x4e>
 800f928:	8afa      	ldrh	r2, [r7, #22]
 800f92a:	8abb      	ldrh	r3, [r7, #20]
 800f92c:	1ad3      	subs	r3, r2, r3
 800f92e:	b29b      	uxth	r3, r3
 800f930:	e000      	b.n	800f934 <tcp_eff_send_mss_netif+0x50>
 800f932:	2300      	movs	r3, #0
 800f934:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800f936:	8a7a      	ldrh	r2, [r7, #18]
 800f938:	89fb      	ldrh	r3, [r7, #14]
 800f93a:	4293      	cmp	r3, r2
 800f93c:	bf28      	it	cs
 800f93e:	4613      	movcs	r3, r2
 800f940:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800f942:	89fb      	ldrh	r3, [r7, #14]
}
 800f944:	4618      	mov	r0, r3
 800f946:	3718      	adds	r7, #24
 800f948:	46bd      	mov	sp, r7
 800f94a:	bd80      	pop	{r7, pc}
 800f94c:	08018be8 	.word	0x08018be8
 800f950:	080192f4 	.word	0x080192f4
 800f954:	08018c2c 	.word	0x08018c2c

0800f958 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800f958:	b580      	push	{r7, lr}
 800f95a:	b084      	sub	sp, #16
 800f95c:	af00      	add	r7, sp, #0
 800f95e:	6078      	str	r0, [r7, #4]
 800f960:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800f962:	683b      	ldr	r3, [r7, #0]
 800f964:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d119      	bne.n	800f9a0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800f96c:	4b10      	ldr	r3, [pc, #64]	; (800f9b0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800f96e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800f972:	4910      	ldr	r1, [pc, #64]	; (800f9b4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800f974:	4810      	ldr	r0, [pc, #64]	; (800f9b8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800f976:	f007 fa85 	bl	8016e84 <iprintf>

  while (pcb != NULL) {
 800f97a:	e011      	b.n	800f9a0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	681a      	ldr	r2, [r3, #0]
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	429a      	cmp	r2, r3
 800f986:	d108      	bne.n	800f99a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	68db      	ldr	r3, [r3, #12]
 800f98c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800f98e:	68f8      	ldr	r0, [r7, #12]
 800f990:	f7fe ffc6 	bl	800e920 <tcp_abort>
      pcb = next;
 800f994:	68bb      	ldr	r3, [r7, #8]
 800f996:	60fb      	str	r3, [r7, #12]
 800f998:	e002      	b.n	800f9a0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	68db      	ldr	r3, [r3, #12]
 800f99e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d1ea      	bne.n	800f97c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800f9a6:	bf00      	nop
 800f9a8:	bf00      	nop
 800f9aa:	3710      	adds	r7, #16
 800f9ac:	46bd      	mov	sp, r7
 800f9ae:	bd80      	pop	{r7, pc}
 800f9b0:	08018be8 	.word	0x08018be8
 800f9b4:	0801931c 	.word	0x0801931c
 800f9b8:	08018c2c 	.word	0x08018c2c

0800f9bc <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f9bc:	b580      	push	{r7, lr}
 800f9be:	b084      	sub	sp, #16
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	6078      	str	r0, [r7, #4]
 800f9c4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d02a      	beq.n	800fa22 <tcp_netif_ip_addr_changed+0x66>
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d026      	beq.n	800fa22 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800f9d4:	4b15      	ldr	r3, [pc, #84]	; (800fa2c <tcp_netif_ip_addr_changed+0x70>)
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	4619      	mov	r1, r3
 800f9da:	6878      	ldr	r0, [r7, #4]
 800f9dc:	f7ff ffbc 	bl	800f958 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800f9e0:	4b13      	ldr	r3, [pc, #76]	; (800fa30 <tcp_netif_ip_addr_changed+0x74>)
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	4619      	mov	r1, r3
 800f9e6:	6878      	ldr	r0, [r7, #4]
 800f9e8:	f7ff ffb6 	bl	800f958 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800f9ec:	683b      	ldr	r3, [r7, #0]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d017      	beq.n	800fa22 <tcp_netif_ip_addr_changed+0x66>
 800f9f2:	683b      	ldr	r3, [r7, #0]
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d013      	beq.n	800fa22 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f9fa:	4b0e      	ldr	r3, [pc, #56]	; (800fa34 <tcp_netif_ip_addr_changed+0x78>)
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	60fb      	str	r3, [r7, #12]
 800fa00:	e00c      	b.n	800fa1c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	681a      	ldr	r2, [r3, #0]
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	429a      	cmp	r2, r3
 800fa0c:	d103      	bne.n	800fa16 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800fa0e:	683b      	ldr	r3, [r7, #0]
 800fa10:	681a      	ldr	r2, [r3, #0]
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	68db      	ldr	r3, [r3, #12]
 800fa1a:	60fb      	str	r3, [r7, #12]
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d1ef      	bne.n	800fa02 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800fa22:	bf00      	nop
 800fa24:	3710      	adds	r7, #16
 800fa26:	46bd      	mov	sp, r7
 800fa28:	bd80      	pop	{r7, pc}
 800fa2a:	bf00      	nop
 800fa2c:	2000b0fc 	.word	0x2000b0fc
 800fa30:	2000b108 	.word	0x2000b108
 800fa34:	2000b104 	.word	0x2000b104

0800fa38 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800fa38:	b580      	push	{r7, lr}
 800fa3a:	b082      	sub	sp, #8
 800fa3c:	af00      	add	r7, sp, #0
 800fa3e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d007      	beq.n	800fa58 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa4c:	4618      	mov	r0, r3
 800fa4e:	f7ff fc3d 	bl	800f2cc <tcp_segs_free>
    pcb->ooseq = NULL;
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	2200      	movs	r2, #0
 800fa56:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800fa58:	bf00      	nop
 800fa5a:	3708      	adds	r7, #8
 800fa5c:	46bd      	mov	sp, r7
 800fa5e:	bd80      	pop	{r7, pc}

0800fa60 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800fa60:	b590      	push	{r4, r7, lr}
 800fa62:	b08d      	sub	sp, #52	; 0x34
 800fa64:	af04      	add	r7, sp, #16
 800fa66:	6078      	str	r0, [r7, #4]
 800fa68:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d105      	bne.n	800fa7c <tcp_input+0x1c>
 800fa70:	4b9b      	ldr	r3, [pc, #620]	; (800fce0 <tcp_input+0x280>)
 800fa72:	2283      	movs	r2, #131	; 0x83
 800fa74:	499b      	ldr	r1, [pc, #620]	; (800fce4 <tcp_input+0x284>)
 800fa76:	489c      	ldr	r0, [pc, #624]	; (800fce8 <tcp_input+0x288>)
 800fa78:	f007 fa04 	bl	8016e84 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	685b      	ldr	r3, [r3, #4]
 800fa80:	4a9a      	ldr	r2, [pc, #616]	; (800fcec <tcp_input+0x28c>)
 800fa82:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	895b      	ldrh	r3, [r3, #10]
 800fa88:	2b13      	cmp	r3, #19
 800fa8a:	f240 83c4 	bls.w	8010216 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800fa8e:	4b98      	ldr	r3, [pc, #608]	; (800fcf0 <tcp_input+0x290>)
 800fa90:	695b      	ldr	r3, [r3, #20]
 800fa92:	4a97      	ldr	r2, [pc, #604]	; (800fcf0 <tcp_input+0x290>)
 800fa94:	6812      	ldr	r2, [r2, #0]
 800fa96:	4611      	mov	r1, r2
 800fa98:	4618      	mov	r0, r3
 800fa9a:	f005 fc43 	bl	8015324 <ip4_addr_isbroadcast_u32>
 800fa9e:	4603      	mov	r3, r0
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	f040 83ba 	bne.w	801021a <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800faa6:	4b92      	ldr	r3, [pc, #584]	; (800fcf0 <tcp_input+0x290>)
 800faa8:	695b      	ldr	r3, [r3, #20]
 800faaa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800faae:	2be0      	cmp	r3, #224	; 0xe0
 800fab0:	f000 83b3 	beq.w	801021a <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800fab4:	4b8d      	ldr	r3, [pc, #564]	; (800fcec <tcp_input+0x28c>)
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	899b      	ldrh	r3, [r3, #12]
 800faba:	b29b      	uxth	r3, r3
 800fabc:	4618      	mov	r0, r3
 800fabe:	f7fc fe67 	bl	800c790 <lwip_htons>
 800fac2:	4603      	mov	r3, r0
 800fac4:	0b1b      	lsrs	r3, r3, #12
 800fac6:	b29b      	uxth	r3, r3
 800fac8:	b2db      	uxtb	r3, r3
 800faca:	009b      	lsls	r3, r3, #2
 800facc:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800face:	7cbb      	ldrb	r3, [r7, #18]
 800fad0:	2b13      	cmp	r3, #19
 800fad2:	f240 83a4 	bls.w	801021e <tcp_input+0x7be>
 800fad6:	7cbb      	ldrb	r3, [r7, #18]
 800fad8:	b29a      	uxth	r2, r3
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	891b      	ldrh	r3, [r3, #8]
 800fade:	429a      	cmp	r2, r3
 800fae0:	f200 839d 	bhi.w	801021e <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800fae4:	7cbb      	ldrb	r3, [r7, #18]
 800fae6:	b29b      	uxth	r3, r3
 800fae8:	3b14      	subs	r3, #20
 800faea:	b29a      	uxth	r2, r3
 800faec:	4b81      	ldr	r3, [pc, #516]	; (800fcf4 <tcp_input+0x294>)
 800faee:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800faf0:	4b81      	ldr	r3, [pc, #516]	; (800fcf8 <tcp_input+0x298>)
 800faf2:	2200      	movs	r2, #0
 800faf4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	895a      	ldrh	r2, [r3, #10]
 800fafa:	7cbb      	ldrb	r3, [r7, #18]
 800fafc:	b29b      	uxth	r3, r3
 800fafe:	429a      	cmp	r2, r3
 800fb00:	d309      	bcc.n	800fb16 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800fb02:	4b7c      	ldr	r3, [pc, #496]	; (800fcf4 <tcp_input+0x294>)
 800fb04:	881a      	ldrh	r2, [r3, #0]
 800fb06:	4b7d      	ldr	r3, [pc, #500]	; (800fcfc <tcp_input+0x29c>)
 800fb08:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800fb0a:	7cbb      	ldrb	r3, [r7, #18]
 800fb0c:	4619      	mov	r1, r3
 800fb0e:	6878      	ldr	r0, [r7, #4]
 800fb10:	f7fe f8ec 	bl	800dcec <pbuf_remove_header>
 800fb14:	e04e      	b.n	800fbb4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d105      	bne.n	800fb2a <tcp_input+0xca>
 800fb1e:	4b70      	ldr	r3, [pc, #448]	; (800fce0 <tcp_input+0x280>)
 800fb20:	22c2      	movs	r2, #194	; 0xc2
 800fb22:	4977      	ldr	r1, [pc, #476]	; (800fd00 <tcp_input+0x2a0>)
 800fb24:	4870      	ldr	r0, [pc, #448]	; (800fce8 <tcp_input+0x288>)
 800fb26:	f007 f9ad 	bl	8016e84 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800fb2a:	2114      	movs	r1, #20
 800fb2c:	6878      	ldr	r0, [r7, #4]
 800fb2e:	f7fe f8dd 	bl	800dcec <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	895a      	ldrh	r2, [r3, #10]
 800fb36:	4b71      	ldr	r3, [pc, #452]	; (800fcfc <tcp_input+0x29c>)
 800fb38:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800fb3a:	4b6e      	ldr	r3, [pc, #440]	; (800fcf4 <tcp_input+0x294>)
 800fb3c:	881a      	ldrh	r2, [r3, #0]
 800fb3e:	4b6f      	ldr	r3, [pc, #444]	; (800fcfc <tcp_input+0x29c>)
 800fb40:	881b      	ldrh	r3, [r3, #0]
 800fb42:	1ad3      	subs	r3, r2, r3
 800fb44:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800fb46:	4b6d      	ldr	r3, [pc, #436]	; (800fcfc <tcp_input+0x29c>)
 800fb48:	881b      	ldrh	r3, [r3, #0]
 800fb4a:	4619      	mov	r1, r3
 800fb4c:	6878      	ldr	r0, [r7, #4]
 800fb4e:	f7fe f8cd 	bl	800dcec <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	895b      	ldrh	r3, [r3, #10]
 800fb58:	8a3a      	ldrh	r2, [r7, #16]
 800fb5a:	429a      	cmp	r2, r3
 800fb5c:	f200 8361 	bhi.w	8010222 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	685b      	ldr	r3, [r3, #4]
 800fb66:	4a64      	ldr	r2, [pc, #400]	; (800fcf8 <tcp_input+0x298>)
 800fb68:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	8a3a      	ldrh	r2, [r7, #16]
 800fb70:	4611      	mov	r1, r2
 800fb72:	4618      	mov	r0, r3
 800fb74:	f7fe f8ba 	bl	800dcec <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	891a      	ldrh	r2, [r3, #8]
 800fb7c:	8a3b      	ldrh	r3, [r7, #16]
 800fb7e:	1ad3      	subs	r3, r2, r3
 800fb80:	b29a      	uxth	r2, r3
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	895b      	ldrh	r3, [r3, #10]
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d005      	beq.n	800fb9a <tcp_input+0x13a>
 800fb8e:	4b54      	ldr	r3, [pc, #336]	; (800fce0 <tcp_input+0x280>)
 800fb90:	22df      	movs	r2, #223	; 0xdf
 800fb92:	495c      	ldr	r1, [pc, #368]	; (800fd04 <tcp_input+0x2a4>)
 800fb94:	4854      	ldr	r0, [pc, #336]	; (800fce8 <tcp_input+0x288>)
 800fb96:	f007 f975 	bl	8016e84 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	891a      	ldrh	r2, [r3, #8]
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	891b      	ldrh	r3, [r3, #8]
 800fba4:	429a      	cmp	r2, r3
 800fba6:	d005      	beq.n	800fbb4 <tcp_input+0x154>
 800fba8:	4b4d      	ldr	r3, [pc, #308]	; (800fce0 <tcp_input+0x280>)
 800fbaa:	22e0      	movs	r2, #224	; 0xe0
 800fbac:	4956      	ldr	r1, [pc, #344]	; (800fd08 <tcp_input+0x2a8>)
 800fbae:	484e      	ldr	r0, [pc, #312]	; (800fce8 <tcp_input+0x288>)
 800fbb0:	f007 f968 	bl	8016e84 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800fbb4:	4b4d      	ldr	r3, [pc, #308]	; (800fcec <tcp_input+0x28c>)
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	881b      	ldrh	r3, [r3, #0]
 800fbba:	b29b      	uxth	r3, r3
 800fbbc:	4a4b      	ldr	r2, [pc, #300]	; (800fcec <tcp_input+0x28c>)
 800fbbe:	6814      	ldr	r4, [r2, #0]
 800fbc0:	4618      	mov	r0, r3
 800fbc2:	f7fc fde5 	bl	800c790 <lwip_htons>
 800fbc6:	4603      	mov	r3, r0
 800fbc8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800fbca:	4b48      	ldr	r3, [pc, #288]	; (800fcec <tcp_input+0x28c>)
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	885b      	ldrh	r3, [r3, #2]
 800fbd0:	b29b      	uxth	r3, r3
 800fbd2:	4a46      	ldr	r2, [pc, #280]	; (800fcec <tcp_input+0x28c>)
 800fbd4:	6814      	ldr	r4, [r2, #0]
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	f7fc fdda 	bl	800c790 <lwip_htons>
 800fbdc:	4603      	mov	r3, r0
 800fbde:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800fbe0:	4b42      	ldr	r3, [pc, #264]	; (800fcec <tcp_input+0x28c>)
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	685b      	ldr	r3, [r3, #4]
 800fbe6:	4a41      	ldr	r2, [pc, #260]	; (800fcec <tcp_input+0x28c>)
 800fbe8:	6814      	ldr	r4, [r2, #0]
 800fbea:	4618      	mov	r0, r3
 800fbec:	f7fc fde5 	bl	800c7ba <lwip_htonl>
 800fbf0:	4603      	mov	r3, r0
 800fbf2:	6063      	str	r3, [r4, #4]
 800fbf4:	6863      	ldr	r3, [r4, #4]
 800fbf6:	4a45      	ldr	r2, [pc, #276]	; (800fd0c <tcp_input+0x2ac>)
 800fbf8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800fbfa:	4b3c      	ldr	r3, [pc, #240]	; (800fcec <tcp_input+0x28c>)
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	689b      	ldr	r3, [r3, #8]
 800fc00:	4a3a      	ldr	r2, [pc, #232]	; (800fcec <tcp_input+0x28c>)
 800fc02:	6814      	ldr	r4, [r2, #0]
 800fc04:	4618      	mov	r0, r3
 800fc06:	f7fc fdd8 	bl	800c7ba <lwip_htonl>
 800fc0a:	4603      	mov	r3, r0
 800fc0c:	60a3      	str	r3, [r4, #8]
 800fc0e:	68a3      	ldr	r3, [r4, #8]
 800fc10:	4a3f      	ldr	r2, [pc, #252]	; (800fd10 <tcp_input+0x2b0>)
 800fc12:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800fc14:	4b35      	ldr	r3, [pc, #212]	; (800fcec <tcp_input+0x28c>)
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	89db      	ldrh	r3, [r3, #14]
 800fc1a:	b29b      	uxth	r3, r3
 800fc1c:	4a33      	ldr	r2, [pc, #204]	; (800fcec <tcp_input+0x28c>)
 800fc1e:	6814      	ldr	r4, [r2, #0]
 800fc20:	4618      	mov	r0, r3
 800fc22:	f7fc fdb5 	bl	800c790 <lwip_htons>
 800fc26:	4603      	mov	r3, r0
 800fc28:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800fc2a:	4b30      	ldr	r3, [pc, #192]	; (800fcec <tcp_input+0x28c>)
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	899b      	ldrh	r3, [r3, #12]
 800fc30:	b29b      	uxth	r3, r3
 800fc32:	4618      	mov	r0, r3
 800fc34:	f7fc fdac 	bl	800c790 <lwip_htons>
 800fc38:	4603      	mov	r3, r0
 800fc3a:	b2db      	uxtb	r3, r3
 800fc3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fc40:	b2da      	uxtb	r2, r3
 800fc42:	4b34      	ldr	r3, [pc, #208]	; (800fd14 <tcp_input+0x2b4>)
 800fc44:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	891a      	ldrh	r2, [r3, #8]
 800fc4a:	4b33      	ldr	r3, [pc, #204]	; (800fd18 <tcp_input+0x2b8>)
 800fc4c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800fc4e:	4b31      	ldr	r3, [pc, #196]	; (800fd14 <tcp_input+0x2b4>)
 800fc50:	781b      	ldrb	r3, [r3, #0]
 800fc52:	f003 0303 	and.w	r3, r3, #3
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d00c      	beq.n	800fc74 <tcp_input+0x214>
    tcplen++;
 800fc5a:	4b2f      	ldr	r3, [pc, #188]	; (800fd18 <tcp_input+0x2b8>)
 800fc5c:	881b      	ldrh	r3, [r3, #0]
 800fc5e:	3301      	adds	r3, #1
 800fc60:	b29a      	uxth	r2, r3
 800fc62:	4b2d      	ldr	r3, [pc, #180]	; (800fd18 <tcp_input+0x2b8>)
 800fc64:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	891a      	ldrh	r2, [r3, #8]
 800fc6a:	4b2b      	ldr	r3, [pc, #172]	; (800fd18 <tcp_input+0x2b8>)
 800fc6c:	881b      	ldrh	r3, [r3, #0]
 800fc6e:	429a      	cmp	r2, r3
 800fc70:	f200 82d9 	bhi.w	8010226 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800fc74:	2300      	movs	r3, #0
 800fc76:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fc78:	4b28      	ldr	r3, [pc, #160]	; (800fd1c <tcp_input+0x2bc>)
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	61fb      	str	r3, [r7, #28]
 800fc7e:	e09d      	b.n	800fdbc <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800fc80:	69fb      	ldr	r3, [r7, #28]
 800fc82:	7d1b      	ldrb	r3, [r3, #20]
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d105      	bne.n	800fc94 <tcp_input+0x234>
 800fc88:	4b15      	ldr	r3, [pc, #84]	; (800fce0 <tcp_input+0x280>)
 800fc8a:	22fb      	movs	r2, #251	; 0xfb
 800fc8c:	4924      	ldr	r1, [pc, #144]	; (800fd20 <tcp_input+0x2c0>)
 800fc8e:	4816      	ldr	r0, [pc, #88]	; (800fce8 <tcp_input+0x288>)
 800fc90:	f007 f8f8 	bl	8016e84 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800fc94:	69fb      	ldr	r3, [r7, #28]
 800fc96:	7d1b      	ldrb	r3, [r3, #20]
 800fc98:	2b0a      	cmp	r3, #10
 800fc9a:	d105      	bne.n	800fca8 <tcp_input+0x248>
 800fc9c:	4b10      	ldr	r3, [pc, #64]	; (800fce0 <tcp_input+0x280>)
 800fc9e:	22fc      	movs	r2, #252	; 0xfc
 800fca0:	4920      	ldr	r1, [pc, #128]	; (800fd24 <tcp_input+0x2c4>)
 800fca2:	4811      	ldr	r0, [pc, #68]	; (800fce8 <tcp_input+0x288>)
 800fca4:	f007 f8ee 	bl	8016e84 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800fca8:	69fb      	ldr	r3, [r7, #28]
 800fcaa:	7d1b      	ldrb	r3, [r3, #20]
 800fcac:	2b01      	cmp	r3, #1
 800fcae:	d105      	bne.n	800fcbc <tcp_input+0x25c>
 800fcb0:	4b0b      	ldr	r3, [pc, #44]	; (800fce0 <tcp_input+0x280>)
 800fcb2:	22fd      	movs	r2, #253	; 0xfd
 800fcb4:	491c      	ldr	r1, [pc, #112]	; (800fd28 <tcp_input+0x2c8>)
 800fcb6:	480c      	ldr	r0, [pc, #48]	; (800fce8 <tcp_input+0x288>)
 800fcb8:	f007 f8e4 	bl	8016e84 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fcbc:	69fb      	ldr	r3, [r7, #28]
 800fcbe:	7a1b      	ldrb	r3, [r3, #8]
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d033      	beq.n	800fd2c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fcc4:	69fb      	ldr	r3, [r7, #28]
 800fcc6:	7a1a      	ldrb	r2, [r3, #8]
 800fcc8:	4b09      	ldr	r3, [pc, #36]	; (800fcf0 <tcp_input+0x290>)
 800fcca:	685b      	ldr	r3, [r3, #4]
 800fccc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800fcd0:	3301      	adds	r3, #1
 800fcd2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fcd4:	429a      	cmp	r2, r3
 800fcd6:	d029      	beq.n	800fd2c <tcp_input+0x2cc>
      prev = pcb;
 800fcd8:	69fb      	ldr	r3, [r7, #28]
 800fcda:	61bb      	str	r3, [r7, #24]
      continue;
 800fcdc:	e06b      	b.n	800fdb6 <tcp_input+0x356>
 800fcde:	bf00      	nop
 800fce0:	08019350 	.word	0x08019350
 800fce4:	08019384 	.word	0x08019384
 800fce8:	0801939c 	.word	0x0801939c
 800fcec:	20004254 	.word	0x20004254
 800fcf0:	200079e8 	.word	0x200079e8
 800fcf4:	20004258 	.word	0x20004258
 800fcf8:	2000425c 	.word	0x2000425c
 800fcfc:	2000425a 	.word	0x2000425a
 800fd00:	080193c4 	.word	0x080193c4
 800fd04:	080193d4 	.word	0x080193d4
 800fd08:	080193e0 	.word	0x080193e0
 800fd0c:	20004264 	.word	0x20004264
 800fd10:	20004268 	.word	0x20004268
 800fd14:	20004270 	.word	0x20004270
 800fd18:	2000426e 	.word	0x2000426e
 800fd1c:	2000b0fc 	.word	0x2000b0fc
 800fd20:	08019400 	.word	0x08019400
 800fd24:	08019428 	.word	0x08019428
 800fd28:	08019454 	.word	0x08019454
    }

    if (pcb->remote_port == tcphdr->src &&
 800fd2c:	69fb      	ldr	r3, [r7, #28]
 800fd2e:	8b1a      	ldrh	r2, [r3, #24]
 800fd30:	4b94      	ldr	r3, [pc, #592]	; (800ff84 <tcp_input+0x524>)
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	881b      	ldrh	r3, [r3, #0]
 800fd36:	b29b      	uxth	r3, r3
 800fd38:	429a      	cmp	r2, r3
 800fd3a:	d13a      	bne.n	800fdb2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800fd3c:	69fb      	ldr	r3, [r7, #28]
 800fd3e:	8ada      	ldrh	r2, [r3, #22]
 800fd40:	4b90      	ldr	r3, [pc, #576]	; (800ff84 <tcp_input+0x524>)
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	885b      	ldrh	r3, [r3, #2]
 800fd46:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800fd48:	429a      	cmp	r2, r3
 800fd4a:	d132      	bne.n	800fdb2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fd4c:	69fb      	ldr	r3, [r7, #28]
 800fd4e:	685a      	ldr	r2, [r3, #4]
 800fd50:	4b8d      	ldr	r3, [pc, #564]	; (800ff88 <tcp_input+0x528>)
 800fd52:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800fd54:	429a      	cmp	r2, r3
 800fd56:	d12c      	bne.n	800fdb2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800fd58:	69fb      	ldr	r3, [r7, #28]
 800fd5a:	681a      	ldr	r2, [r3, #0]
 800fd5c:	4b8a      	ldr	r3, [pc, #552]	; (800ff88 <tcp_input+0x528>)
 800fd5e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fd60:	429a      	cmp	r2, r3
 800fd62:	d126      	bne.n	800fdb2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800fd64:	69fb      	ldr	r3, [r7, #28]
 800fd66:	68db      	ldr	r3, [r3, #12]
 800fd68:	69fa      	ldr	r2, [r7, #28]
 800fd6a:	429a      	cmp	r2, r3
 800fd6c:	d106      	bne.n	800fd7c <tcp_input+0x31c>
 800fd6e:	4b87      	ldr	r3, [pc, #540]	; (800ff8c <tcp_input+0x52c>)
 800fd70:	f240 120d 	movw	r2, #269	; 0x10d
 800fd74:	4986      	ldr	r1, [pc, #536]	; (800ff90 <tcp_input+0x530>)
 800fd76:	4887      	ldr	r0, [pc, #540]	; (800ff94 <tcp_input+0x534>)
 800fd78:	f007 f884 	bl	8016e84 <iprintf>
      if (prev != NULL) {
 800fd7c:	69bb      	ldr	r3, [r7, #24]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d00a      	beq.n	800fd98 <tcp_input+0x338>
        prev->next = pcb->next;
 800fd82:	69fb      	ldr	r3, [r7, #28]
 800fd84:	68da      	ldr	r2, [r3, #12]
 800fd86:	69bb      	ldr	r3, [r7, #24]
 800fd88:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800fd8a:	4b83      	ldr	r3, [pc, #524]	; (800ff98 <tcp_input+0x538>)
 800fd8c:	681a      	ldr	r2, [r3, #0]
 800fd8e:	69fb      	ldr	r3, [r7, #28]
 800fd90:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800fd92:	4a81      	ldr	r2, [pc, #516]	; (800ff98 <tcp_input+0x538>)
 800fd94:	69fb      	ldr	r3, [r7, #28]
 800fd96:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800fd98:	69fb      	ldr	r3, [r7, #28]
 800fd9a:	68db      	ldr	r3, [r3, #12]
 800fd9c:	69fa      	ldr	r2, [r7, #28]
 800fd9e:	429a      	cmp	r2, r3
 800fda0:	d111      	bne.n	800fdc6 <tcp_input+0x366>
 800fda2:	4b7a      	ldr	r3, [pc, #488]	; (800ff8c <tcp_input+0x52c>)
 800fda4:	f240 1215 	movw	r2, #277	; 0x115
 800fda8:	497c      	ldr	r1, [pc, #496]	; (800ff9c <tcp_input+0x53c>)
 800fdaa:	487a      	ldr	r0, [pc, #488]	; (800ff94 <tcp_input+0x534>)
 800fdac:	f007 f86a 	bl	8016e84 <iprintf>
      break;
 800fdb0:	e009      	b.n	800fdc6 <tcp_input+0x366>
    }
    prev = pcb;
 800fdb2:	69fb      	ldr	r3, [r7, #28]
 800fdb4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fdb6:	69fb      	ldr	r3, [r7, #28]
 800fdb8:	68db      	ldr	r3, [r3, #12]
 800fdba:	61fb      	str	r3, [r7, #28]
 800fdbc:	69fb      	ldr	r3, [r7, #28]
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	f47f af5e 	bne.w	800fc80 <tcp_input+0x220>
 800fdc4:	e000      	b.n	800fdc8 <tcp_input+0x368>
      break;
 800fdc6:	bf00      	nop
  }

  if (pcb == NULL) {
 800fdc8:	69fb      	ldr	r3, [r7, #28]
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	f040 8095 	bne.w	800fefa <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fdd0:	4b73      	ldr	r3, [pc, #460]	; (800ffa0 <tcp_input+0x540>)
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	61fb      	str	r3, [r7, #28]
 800fdd6:	e03f      	b.n	800fe58 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800fdd8:	69fb      	ldr	r3, [r7, #28]
 800fdda:	7d1b      	ldrb	r3, [r3, #20]
 800fddc:	2b0a      	cmp	r3, #10
 800fdde:	d006      	beq.n	800fdee <tcp_input+0x38e>
 800fde0:	4b6a      	ldr	r3, [pc, #424]	; (800ff8c <tcp_input+0x52c>)
 800fde2:	f240 121f 	movw	r2, #287	; 0x11f
 800fde6:	496f      	ldr	r1, [pc, #444]	; (800ffa4 <tcp_input+0x544>)
 800fde8:	486a      	ldr	r0, [pc, #424]	; (800ff94 <tcp_input+0x534>)
 800fdea:	f007 f84b 	bl	8016e84 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fdee:	69fb      	ldr	r3, [r7, #28]
 800fdf0:	7a1b      	ldrb	r3, [r3, #8]
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d009      	beq.n	800fe0a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fdf6:	69fb      	ldr	r3, [r7, #28]
 800fdf8:	7a1a      	ldrb	r2, [r3, #8]
 800fdfa:	4b63      	ldr	r3, [pc, #396]	; (800ff88 <tcp_input+0x528>)
 800fdfc:	685b      	ldr	r3, [r3, #4]
 800fdfe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800fe02:	3301      	adds	r3, #1
 800fe04:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fe06:	429a      	cmp	r2, r3
 800fe08:	d122      	bne.n	800fe50 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800fe0a:	69fb      	ldr	r3, [r7, #28]
 800fe0c:	8b1a      	ldrh	r2, [r3, #24]
 800fe0e:	4b5d      	ldr	r3, [pc, #372]	; (800ff84 <tcp_input+0x524>)
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	881b      	ldrh	r3, [r3, #0]
 800fe14:	b29b      	uxth	r3, r3
 800fe16:	429a      	cmp	r2, r3
 800fe18:	d11b      	bne.n	800fe52 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800fe1a:	69fb      	ldr	r3, [r7, #28]
 800fe1c:	8ada      	ldrh	r2, [r3, #22]
 800fe1e:	4b59      	ldr	r3, [pc, #356]	; (800ff84 <tcp_input+0x524>)
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	885b      	ldrh	r3, [r3, #2]
 800fe24:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800fe26:	429a      	cmp	r2, r3
 800fe28:	d113      	bne.n	800fe52 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fe2a:	69fb      	ldr	r3, [r7, #28]
 800fe2c:	685a      	ldr	r2, [r3, #4]
 800fe2e:	4b56      	ldr	r3, [pc, #344]	; (800ff88 <tcp_input+0x528>)
 800fe30:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800fe32:	429a      	cmp	r2, r3
 800fe34:	d10d      	bne.n	800fe52 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800fe36:	69fb      	ldr	r3, [r7, #28]
 800fe38:	681a      	ldr	r2, [r3, #0]
 800fe3a:	4b53      	ldr	r3, [pc, #332]	; (800ff88 <tcp_input+0x528>)
 800fe3c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fe3e:	429a      	cmp	r2, r3
 800fe40:	d107      	bne.n	800fe52 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800fe42:	69f8      	ldr	r0, [r7, #28]
 800fe44:	f000 fb54 	bl	80104f0 <tcp_timewait_input>
        }
        pbuf_free(p);
 800fe48:	6878      	ldr	r0, [r7, #4]
 800fe4a:	f7fd ffd5 	bl	800ddf8 <pbuf_free>
        return;
 800fe4e:	e1f0      	b.n	8010232 <tcp_input+0x7d2>
        continue;
 800fe50:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fe52:	69fb      	ldr	r3, [r7, #28]
 800fe54:	68db      	ldr	r3, [r3, #12]
 800fe56:	61fb      	str	r3, [r7, #28]
 800fe58:	69fb      	ldr	r3, [r7, #28]
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d1bc      	bne.n	800fdd8 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800fe5e:	2300      	movs	r3, #0
 800fe60:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fe62:	4b51      	ldr	r3, [pc, #324]	; (800ffa8 <tcp_input+0x548>)
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	617b      	str	r3, [r7, #20]
 800fe68:	e02a      	b.n	800fec0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800fe6a:	697b      	ldr	r3, [r7, #20]
 800fe6c:	7a1b      	ldrb	r3, [r3, #8]
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d00c      	beq.n	800fe8c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fe72:	697b      	ldr	r3, [r7, #20]
 800fe74:	7a1a      	ldrb	r2, [r3, #8]
 800fe76:	4b44      	ldr	r3, [pc, #272]	; (800ff88 <tcp_input+0x528>)
 800fe78:	685b      	ldr	r3, [r3, #4]
 800fe7a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800fe7e:	3301      	adds	r3, #1
 800fe80:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800fe82:	429a      	cmp	r2, r3
 800fe84:	d002      	beq.n	800fe8c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800fe86:	697b      	ldr	r3, [r7, #20]
 800fe88:	61bb      	str	r3, [r7, #24]
        continue;
 800fe8a:	e016      	b.n	800feba <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800fe8c:	697b      	ldr	r3, [r7, #20]
 800fe8e:	8ada      	ldrh	r2, [r3, #22]
 800fe90:	4b3c      	ldr	r3, [pc, #240]	; (800ff84 <tcp_input+0x524>)
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	885b      	ldrh	r3, [r3, #2]
 800fe96:	b29b      	uxth	r3, r3
 800fe98:	429a      	cmp	r2, r3
 800fe9a:	d10c      	bne.n	800feb6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800fe9c:	697b      	ldr	r3, [r7, #20]
 800fe9e:	681a      	ldr	r2, [r3, #0]
 800fea0:	4b39      	ldr	r3, [pc, #228]	; (800ff88 <tcp_input+0x528>)
 800fea2:	695b      	ldr	r3, [r3, #20]
 800fea4:	429a      	cmp	r2, r3
 800fea6:	d00f      	beq.n	800fec8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800fea8:	697b      	ldr	r3, [r7, #20]
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d00d      	beq.n	800feca <tcp_input+0x46a>
 800feae:	697b      	ldr	r3, [r7, #20]
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d009      	beq.n	800feca <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800feb6:	697b      	ldr	r3, [r7, #20]
 800feb8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800feba:	697b      	ldr	r3, [r7, #20]
 800febc:	68db      	ldr	r3, [r3, #12]
 800febe:	617b      	str	r3, [r7, #20]
 800fec0:	697b      	ldr	r3, [r7, #20]
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d1d1      	bne.n	800fe6a <tcp_input+0x40a>
 800fec6:	e000      	b.n	800feca <tcp_input+0x46a>
            break;
 800fec8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800feca:	697b      	ldr	r3, [r7, #20]
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d014      	beq.n	800fefa <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800fed0:	69bb      	ldr	r3, [r7, #24]
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d00a      	beq.n	800feec <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800fed6:	697b      	ldr	r3, [r7, #20]
 800fed8:	68da      	ldr	r2, [r3, #12]
 800feda:	69bb      	ldr	r3, [r7, #24]
 800fedc:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800fede:	4b32      	ldr	r3, [pc, #200]	; (800ffa8 <tcp_input+0x548>)
 800fee0:	681a      	ldr	r2, [r3, #0]
 800fee2:	697b      	ldr	r3, [r7, #20]
 800fee4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800fee6:	4a30      	ldr	r2, [pc, #192]	; (800ffa8 <tcp_input+0x548>)
 800fee8:	697b      	ldr	r3, [r7, #20]
 800feea:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800feec:	6978      	ldr	r0, [r7, #20]
 800feee:	f000 fa01 	bl	80102f4 <tcp_listen_input>
      }
      pbuf_free(p);
 800fef2:	6878      	ldr	r0, [r7, #4]
 800fef4:	f7fd ff80 	bl	800ddf8 <pbuf_free>
      return;
 800fef8:	e19b      	b.n	8010232 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800fefa:	69fb      	ldr	r3, [r7, #28]
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	f000 8160 	beq.w	80101c2 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800ff02:	4b2a      	ldr	r3, [pc, #168]	; (800ffac <tcp_input+0x54c>)
 800ff04:	2200      	movs	r2, #0
 800ff06:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	891a      	ldrh	r2, [r3, #8]
 800ff0c:	4b27      	ldr	r3, [pc, #156]	; (800ffac <tcp_input+0x54c>)
 800ff0e:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800ff10:	4a26      	ldr	r2, [pc, #152]	; (800ffac <tcp_input+0x54c>)
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800ff16:	4b1b      	ldr	r3, [pc, #108]	; (800ff84 <tcp_input+0x524>)
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	4a24      	ldr	r2, [pc, #144]	; (800ffac <tcp_input+0x54c>)
 800ff1c:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800ff1e:	4b24      	ldr	r3, [pc, #144]	; (800ffb0 <tcp_input+0x550>)
 800ff20:	2200      	movs	r2, #0
 800ff22:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800ff24:	4b23      	ldr	r3, [pc, #140]	; (800ffb4 <tcp_input+0x554>)
 800ff26:	2200      	movs	r2, #0
 800ff28:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800ff2a:	4b23      	ldr	r3, [pc, #140]	; (800ffb8 <tcp_input+0x558>)
 800ff2c:	2200      	movs	r2, #0
 800ff2e:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800ff30:	4b22      	ldr	r3, [pc, #136]	; (800ffbc <tcp_input+0x55c>)
 800ff32:	781b      	ldrb	r3, [r3, #0]
 800ff34:	f003 0308 	and.w	r3, r3, #8
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d006      	beq.n	800ff4a <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	7b5b      	ldrb	r3, [r3, #13]
 800ff40:	f043 0301 	orr.w	r3, r3, #1
 800ff44:	b2da      	uxtb	r2, r3
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800ff4a:	69fb      	ldr	r3, [r7, #28]
 800ff4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d038      	beq.n	800ffc4 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800ff52:	69f8      	ldr	r0, [r7, #28]
 800ff54:	f7ff f93e 	bl	800f1d4 <tcp_process_refused_data>
 800ff58:	4603      	mov	r3, r0
 800ff5a:	f113 0f0d 	cmn.w	r3, #13
 800ff5e:	d007      	beq.n	800ff70 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800ff60:	69fb      	ldr	r3, [r7, #28]
 800ff62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d02d      	beq.n	800ffc4 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800ff68:	4b15      	ldr	r3, [pc, #84]	; (800ffc0 <tcp_input+0x560>)
 800ff6a:	881b      	ldrh	r3, [r3, #0]
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d029      	beq.n	800ffc4 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800ff70:	69fb      	ldr	r3, [r7, #28]
 800ff72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	f040 8104 	bne.w	8010182 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800ff7a:	69f8      	ldr	r0, [r7, #28]
 800ff7c:	f003 f9be 	bl	80132fc <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800ff80:	e0ff      	b.n	8010182 <tcp_input+0x722>
 800ff82:	bf00      	nop
 800ff84:	20004254 	.word	0x20004254
 800ff88:	200079e8 	.word	0x200079e8
 800ff8c:	08019350 	.word	0x08019350
 800ff90:	0801947c 	.word	0x0801947c
 800ff94:	0801939c 	.word	0x0801939c
 800ff98:	2000b0fc 	.word	0x2000b0fc
 800ff9c:	080194a8 	.word	0x080194a8
 800ffa0:	2000b10c 	.word	0x2000b10c
 800ffa4:	080194d4 	.word	0x080194d4
 800ffa8:	2000b104 	.word	0x2000b104
 800ffac:	20004244 	.word	0x20004244
 800ffb0:	20004274 	.word	0x20004274
 800ffb4:	20004271 	.word	0x20004271
 800ffb8:	2000426c 	.word	0x2000426c
 800ffbc:	20004270 	.word	0x20004270
 800ffc0:	2000426e 	.word	0x2000426e
      }
    }
    tcp_input_pcb = pcb;
 800ffc4:	4a9c      	ldr	r2, [pc, #624]	; (8010238 <tcp_input+0x7d8>)
 800ffc6:	69fb      	ldr	r3, [r7, #28]
 800ffc8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800ffca:	69f8      	ldr	r0, [r7, #28]
 800ffcc:	f000 fb0a 	bl	80105e4 <tcp_process>
 800ffd0:	4603      	mov	r3, r0
 800ffd2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800ffd4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ffd8:	f113 0f0d 	cmn.w	r3, #13
 800ffdc:	f000 80d3 	beq.w	8010186 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800ffe0:	4b96      	ldr	r3, [pc, #600]	; (801023c <tcp_input+0x7dc>)
 800ffe2:	781b      	ldrb	r3, [r3, #0]
 800ffe4:	f003 0308 	and.w	r3, r3, #8
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d015      	beq.n	8010018 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800ffec:	69fb      	ldr	r3, [r7, #28]
 800ffee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d008      	beq.n	8010008 <tcp_input+0x5a8>
 800fff6:	69fb      	ldr	r3, [r7, #28]
 800fff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fffc:	69fa      	ldr	r2, [r7, #28]
 800fffe:	6912      	ldr	r2, [r2, #16]
 8010000:	f06f 010d 	mvn.w	r1, #13
 8010004:	4610      	mov	r0, r2
 8010006:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010008:	69f9      	ldr	r1, [r7, #28]
 801000a:	488d      	ldr	r0, [pc, #564]	; (8010240 <tcp_input+0x7e0>)
 801000c:	f7ff fbb0 	bl	800f770 <tcp_pcb_remove>
        tcp_free(pcb);
 8010010:	69f8      	ldr	r0, [r7, #28]
 8010012:	f7fe f99d 	bl	800e350 <tcp_free>
 8010016:	e0c1      	b.n	801019c <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8010018:	2300      	movs	r3, #0
 801001a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801001c:	4b89      	ldr	r3, [pc, #548]	; (8010244 <tcp_input+0x7e4>)
 801001e:	881b      	ldrh	r3, [r3, #0]
 8010020:	2b00      	cmp	r3, #0
 8010022:	d01d      	beq.n	8010060 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8010024:	4b87      	ldr	r3, [pc, #540]	; (8010244 <tcp_input+0x7e4>)
 8010026:	881b      	ldrh	r3, [r3, #0]
 8010028:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801002a:	69fb      	ldr	r3, [r7, #28]
 801002c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010030:	2b00      	cmp	r3, #0
 8010032:	d00a      	beq.n	801004a <tcp_input+0x5ea>
 8010034:	69fb      	ldr	r3, [r7, #28]
 8010036:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801003a:	69fa      	ldr	r2, [r7, #28]
 801003c:	6910      	ldr	r0, [r2, #16]
 801003e:	89fa      	ldrh	r2, [r7, #14]
 8010040:	69f9      	ldr	r1, [r7, #28]
 8010042:	4798      	blx	r3
 8010044:	4603      	mov	r3, r0
 8010046:	74fb      	strb	r3, [r7, #19]
 8010048:	e001      	b.n	801004e <tcp_input+0x5ee>
 801004a:	2300      	movs	r3, #0
 801004c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801004e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010052:	f113 0f0d 	cmn.w	r3, #13
 8010056:	f000 8098 	beq.w	801018a <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 801005a:	4b7a      	ldr	r3, [pc, #488]	; (8010244 <tcp_input+0x7e4>)
 801005c:	2200      	movs	r2, #0
 801005e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8010060:	69f8      	ldr	r0, [r7, #28]
 8010062:	f000 f907 	bl	8010274 <tcp_input_delayed_close>
 8010066:	4603      	mov	r3, r0
 8010068:	2b00      	cmp	r3, #0
 801006a:	f040 8090 	bne.w	801018e <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801006e:	4b76      	ldr	r3, [pc, #472]	; (8010248 <tcp_input+0x7e8>)
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	2b00      	cmp	r3, #0
 8010074:	d041      	beq.n	80100fa <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8010076:	69fb      	ldr	r3, [r7, #28]
 8010078:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801007a:	2b00      	cmp	r3, #0
 801007c:	d006      	beq.n	801008c <tcp_input+0x62c>
 801007e:	4b73      	ldr	r3, [pc, #460]	; (801024c <tcp_input+0x7ec>)
 8010080:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8010084:	4972      	ldr	r1, [pc, #456]	; (8010250 <tcp_input+0x7f0>)
 8010086:	4873      	ldr	r0, [pc, #460]	; (8010254 <tcp_input+0x7f4>)
 8010088:	f006 fefc 	bl	8016e84 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801008c:	69fb      	ldr	r3, [r7, #28]
 801008e:	8b5b      	ldrh	r3, [r3, #26]
 8010090:	f003 0310 	and.w	r3, r3, #16
 8010094:	2b00      	cmp	r3, #0
 8010096:	d008      	beq.n	80100aa <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8010098:	4b6b      	ldr	r3, [pc, #428]	; (8010248 <tcp_input+0x7e8>)
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	4618      	mov	r0, r3
 801009e:	f7fd feab 	bl	800ddf8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80100a2:	69f8      	ldr	r0, [r7, #28]
 80100a4:	f7fe fc3c 	bl	800e920 <tcp_abort>
            goto aborted;
 80100a8:	e078      	b.n	801019c <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80100aa:	69fb      	ldr	r3, [r7, #28]
 80100ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d00c      	beq.n	80100ce <tcp_input+0x66e>
 80100b4:	69fb      	ldr	r3, [r7, #28]
 80100b6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80100ba:	69fb      	ldr	r3, [r7, #28]
 80100bc:	6918      	ldr	r0, [r3, #16]
 80100be:	4b62      	ldr	r3, [pc, #392]	; (8010248 <tcp_input+0x7e8>)
 80100c0:	681a      	ldr	r2, [r3, #0]
 80100c2:	2300      	movs	r3, #0
 80100c4:	69f9      	ldr	r1, [r7, #28]
 80100c6:	47a0      	blx	r4
 80100c8:	4603      	mov	r3, r0
 80100ca:	74fb      	strb	r3, [r7, #19]
 80100cc:	e008      	b.n	80100e0 <tcp_input+0x680>
 80100ce:	4b5e      	ldr	r3, [pc, #376]	; (8010248 <tcp_input+0x7e8>)
 80100d0:	681a      	ldr	r2, [r3, #0]
 80100d2:	2300      	movs	r3, #0
 80100d4:	69f9      	ldr	r1, [r7, #28]
 80100d6:	2000      	movs	r0, #0
 80100d8:	f7ff f952 	bl	800f380 <tcp_recv_null>
 80100dc:	4603      	mov	r3, r0
 80100de:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80100e0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80100e4:	f113 0f0d 	cmn.w	r3, #13
 80100e8:	d053      	beq.n	8010192 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80100ea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d003      	beq.n	80100fa <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80100f2:	4b55      	ldr	r3, [pc, #340]	; (8010248 <tcp_input+0x7e8>)
 80100f4:	681a      	ldr	r2, [r3, #0]
 80100f6:	69fb      	ldr	r3, [r7, #28]
 80100f8:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80100fa:	4b50      	ldr	r3, [pc, #320]	; (801023c <tcp_input+0x7dc>)
 80100fc:	781b      	ldrb	r3, [r3, #0]
 80100fe:	f003 0320 	and.w	r3, r3, #32
 8010102:	2b00      	cmp	r3, #0
 8010104:	d030      	beq.n	8010168 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8010106:	69fb      	ldr	r3, [r7, #28]
 8010108:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801010a:	2b00      	cmp	r3, #0
 801010c:	d009      	beq.n	8010122 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801010e:	69fb      	ldr	r3, [r7, #28]
 8010110:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010112:	7b5a      	ldrb	r2, [r3, #13]
 8010114:	69fb      	ldr	r3, [r7, #28]
 8010116:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010118:	f042 0220 	orr.w	r2, r2, #32
 801011c:	b2d2      	uxtb	r2, r2
 801011e:	735a      	strb	r2, [r3, #13]
 8010120:	e022      	b.n	8010168 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8010122:	69fb      	ldr	r3, [r7, #28]
 8010124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010126:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801012a:	d005      	beq.n	8010138 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 801012c:	69fb      	ldr	r3, [r7, #28]
 801012e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010130:	3301      	adds	r3, #1
 8010132:	b29a      	uxth	r2, r3
 8010134:	69fb      	ldr	r3, [r7, #28]
 8010136:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8010138:	69fb      	ldr	r3, [r7, #28]
 801013a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801013e:	2b00      	cmp	r3, #0
 8010140:	d00b      	beq.n	801015a <tcp_input+0x6fa>
 8010142:	69fb      	ldr	r3, [r7, #28]
 8010144:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010148:	69fb      	ldr	r3, [r7, #28]
 801014a:	6918      	ldr	r0, [r3, #16]
 801014c:	2300      	movs	r3, #0
 801014e:	2200      	movs	r2, #0
 8010150:	69f9      	ldr	r1, [r7, #28]
 8010152:	47a0      	blx	r4
 8010154:	4603      	mov	r3, r0
 8010156:	74fb      	strb	r3, [r7, #19]
 8010158:	e001      	b.n	801015e <tcp_input+0x6fe>
 801015a:	2300      	movs	r3, #0
 801015c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801015e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010162:	f113 0f0d 	cmn.w	r3, #13
 8010166:	d016      	beq.n	8010196 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8010168:	4b33      	ldr	r3, [pc, #204]	; (8010238 <tcp_input+0x7d8>)
 801016a:	2200      	movs	r2, #0
 801016c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801016e:	69f8      	ldr	r0, [r7, #28]
 8010170:	f000 f880 	bl	8010274 <tcp_input_delayed_close>
 8010174:	4603      	mov	r3, r0
 8010176:	2b00      	cmp	r3, #0
 8010178:	d10f      	bne.n	801019a <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801017a:	69f8      	ldr	r0, [r7, #28]
 801017c:	f002 fab8 	bl	80126f0 <tcp_output>
 8010180:	e00c      	b.n	801019c <tcp_input+0x73c>
        goto aborted;
 8010182:	bf00      	nop
 8010184:	e00a      	b.n	801019c <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8010186:	bf00      	nop
 8010188:	e008      	b.n	801019c <tcp_input+0x73c>
              goto aborted;
 801018a:	bf00      	nop
 801018c:	e006      	b.n	801019c <tcp_input+0x73c>
          goto aborted;
 801018e:	bf00      	nop
 8010190:	e004      	b.n	801019c <tcp_input+0x73c>
            goto aborted;
 8010192:	bf00      	nop
 8010194:	e002      	b.n	801019c <tcp_input+0x73c>
              goto aborted;
 8010196:	bf00      	nop
 8010198:	e000      	b.n	801019c <tcp_input+0x73c>
          goto aborted;
 801019a:	bf00      	nop
    tcp_input_pcb = NULL;
 801019c:	4b26      	ldr	r3, [pc, #152]	; (8010238 <tcp_input+0x7d8>)
 801019e:	2200      	movs	r2, #0
 80101a0:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80101a2:	4b29      	ldr	r3, [pc, #164]	; (8010248 <tcp_input+0x7e8>)
 80101a4:	2200      	movs	r2, #0
 80101a6:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80101a8:	4b2b      	ldr	r3, [pc, #172]	; (8010258 <tcp_input+0x7f8>)
 80101aa:	685b      	ldr	r3, [r3, #4]
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d03f      	beq.n	8010230 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 80101b0:	4b29      	ldr	r3, [pc, #164]	; (8010258 <tcp_input+0x7f8>)
 80101b2:	685b      	ldr	r3, [r3, #4]
 80101b4:	4618      	mov	r0, r3
 80101b6:	f7fd fe1f 	bl	800ddf8 <pbuf_free>
      inseg.p = NULL;
 80101ba:	4b27      	ldr	r3, [pc, #156]	; (8010258 <tcp_input+0x7f8>)
 80101bc:	2200      	movs	r2, #0
 80101be:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80101c0:	e036      	b.n	8010230 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80101c2:	4b26      	ldr	r3, [pc, #152]	; (801025c <tcp_input+0x7fc>)
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	899b      	ldrh	r3, [r3, #12]
 80101c8:	b29b      	uxth	r3, r3
 80101ca:	4618      	mov	r0, r3
 80101cc:	f7fc fae0 	bl	800c790 <lwip_htons>
 80101d0:	4603      	mov	r3, r0
 80101d2:	b2db      	uxtb	r3, r3
 80101d4:	f003 0304 	and.w	r3, r3, #4
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d118      	bne.n	801020e <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80101dc:	4b20      	ldr	r3, [pc, #128]	; (8010260 <tcp_input+0x800>)
 80101de:	6819      	ldr	r1, [r3, #0]
 80101e0:	4b20      	ldr	r3, [pc, #128]	; (8010264 <tcp_input+0x804>)
 80101e2:	881b      	ldrh	r3, [r3, #0]
 80101e4:	461a      	mov	r2, r3
 80101e6:	4b20      	ldr	r3, [pc, #128]	; (8010268 <tcp_input+0x808>)
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80101ec:	4b1b      	ldr	r3, [pc, #108]	; (801025c <tcp_input+0x7fc>)
 80101ee:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80101f0:	885b      	ldrh	r3, [r3, #2]
 80101f2:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80101f4:	4a19      	ldr	r2, [pc, #100]	; (801025c <tcp_input+0x7fc>)
 80101f6:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80101f8:	8812      	ldrh	r2, [r2, #0]
 80101fa:	b292      	uxth	r2, r2
 80101fc:	9202      	str	r2, [sp, #8]
 80101fe:	9301      	str	r3, [sp, #4]
 8010200:	4b1a      	ldr	r3, [pc, #104]	; (801026c <tcp_input+0x80c>)
 8010202:	9300      	str	r3, [sp, #0]
 8010204:	4b1a      	ldr	r3, [pc, #104]	; (8010270 <tcp_input+0x810>)
 8010206:	4602      	mov	r2, r0
 8010208:	2000      	movs	r0, #0
 801020a:	f003 f825 	bl	8013258 <tcp_rst>
    pbuf_free(p);
 801020e:	6878      	ldr	r0, [r7, #4]
 8010210:	f7fd fdf2 	bl	800ddf8 <pbuf_free>
  return;
 8010214:	e00c      	b.n	8010230 <tcp_input+0x7d0>
    goto dropped;
 8010216:	bf00      	nop
 8010218:	e006      	b.n	8010228 <tcp_input+0x7c8>
    goto dropped;
 801021a:	bf00      	nop
 801021c:	e004      	b.n	8010228 <tcp_input+0x7c8>
    goto dropped;
 801021e:	bf00      	nop
 8010220:	e002      	b.n	8010228 <tcp_input+0x7c8>
      goto dropped;
 8010222:	bf00      	nop
 8010224:	e000      	b.n	8010228 <tcp_input+0x7c8>
      goto dropped;
 8010226:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8010228:	6878      	ldr	r0, [r7, #4]
 801022a:	f7fd fde5 	bl	800ddf8 <pbuf_free>
 801022e:	e000      	b.n	8010232 <tcp_input+0x7d2>
  return;
 8010230:	bf00      	nop
}
 8010232:	3724      	adds	r7, #36	; 0x24
 8010234:	46bd      	mov	sp, r7
 8010236:	bd90      	pop	{r4, r7, pc}
 8010238:	2000b110 	.word	0x2000b110
 801023c:	20004271 	.word	0x20004271
 8010240:	2000b0fc 	.word	0x2000b0fc
 8010244:	2000426c 	.word	0x2000426c
 8010248:	20004274 	.word	0x20004274
 801024c:	08019350 	.word	0x08019350
 8010250:	08019504 	.word	0x08019504
 8010254:	0801939c 	.word	0x0801939c
 8010258:	20004244 	.word	0x20004244
 801025c:	20004254 	.word	0x20004254
 8010260:	20004268 	.word	0x20004268
 8010264:	2000426e 	.word	0x2000426e
 8010268:	20004264 	.word	0x20004264
 801026c:	200079f8 	.word	0x200079f8
 8010270:	200079fc 	.word	0x200079fc

08010274 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8010274:	b580      	push	{r7, lr}
 8010276:	b082      	sub	sp, #8
 8010278:	af00      	add	r7, sp, #0
 801027a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	2b00      	cmp	r3, #0
 8010280:	d106      	bne.n	8010290 <tcp_input_delayed_close+0x1c>
 8010282:	4b17      	ldr	r3, [pc, #92]	; (80102e0 <tcp_input_delayed_close+0x6c>)
 8010284:	f240 225a 	movw	r2, #602	; 0x25a
 8010288:	4916      	ldr	r1, [pc, #88]	; (80102e4 <tcp_input_delayed_close+0x70>)
 801028a:	4817      	ldr	r0, [pc, #92]	; (80102e8 <tcp_input_delayed_close+0x74>)
 801028c:	f006 fdfa 	bl	8016e84 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8010290:	4b16      	ldr	r3, [pc, #88]	; (80102ec <tcp_input_delayed_close+0x78>)
 8010292:	781b      	ldrb	r3, [r3, #0]
 8010294:	f003 0310 	and.w	r3, r3, #16
 8010298:	2b00      	cmp	r3, #0
 801029a:	d01c      	beq.n	80102d6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	8b5b      	ldrh	r3, [r3, #26]
 80102a0:	f003 0310 	and.w	r3, r3, #16
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d10d      	bne.n	80102c4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d008      	beq.n	80102c4 <tcp_input_delayed_close+0x50>
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80102b8:	687a      	ldr	r2, [r7, #4]
 80102ba:	6912      	ldr	r2, [r2, #16]
 80102bc:	f06f 010e 	mvn.w	r1, #14
 80102c0:	4610      	mov	r0, r2
 80102c2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80102c4:	6879      	ldr	r1, [r7, #4]
 80102c6:	480a      	ldr	r0, [pc, #40]	; (80102f0 <tcp_input_delayed_close+0x7c>)
 80102c8:	f7ff fa52 	bl	800f770 <tcp_pcb_remove>
    tcp_free(pcb);
 80102cc:	6878      	ldr	r0, [r7, #4]
 80102ce:	f7fe f83f 	bl	800e350 <tcp_free>
    return 1;
 80102d2:	2301      	movs	r3, #1
 80102d4:	e000      	b.n	80102d8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80102d6:	2300      	movs	r3, #0
}
 80102d8:	4618      	mov	r0, r3
 80102da:	3708      	adds	r7, #8
 80102dc:	46bd      	mov	sp, r7
 80102de:	bd80      	pop	{r7, pc}
 80102e0:	08019350 	.word	0x08019350
 80102e4:	08019520 	.word	0x08019520
 80102e8:	0801939c 	.word	0x0801939c
 80102ec:	20004271 	.word	0x20004271
 80102f0:	2000b0fc 	.word	0x2000b0fc

080102f4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80102f4:	b590      	push	{r4, r7, lr}
 80102f6:	b08b      	sub	sp, #44	; 0x2c
 80102f8:	af04      	add	r7, sp, #16
 80102fa:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80102fc:	4b6f      	ldr	r3, [pc, #444]	; (80104bc <tcp_listen_input+0x1c8>)
 80102fe:	781b      	ldrb	r3, [r3, #0]
 8010300:	f003 0304 	and.w	r3, r3, #4
 8010304:	2b00      	cmp	r3, #0
 8010306:	f040 80d2 	bne.w	80104ae <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	2b00      	cmp	r3, #0
 801030e:	d106      	bne.n	801031e <tcp_listen_input+0x2a>
 8010310:	4b6b      	ldr	r3, [pc, #428]	; (80104c0 <tcp_listen_input+0x1cc>)
 8010312:	f240 2281 	movw	r2, #641	; 0x281
 8010316:	496b      	ldr	r1, [pc, #428]	; (80104c4 <tcp_listen_input+0x1d0>)
 8010318:	486b      	ldr	r0, [pc, #428]	; (80104c8 <tcp_listen_input+0x1d4>)
 801031a:	f006 fdb3 	bl	8016e84 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801031e:	4b67      	ldr	r3, [pc, #412]	; (80104bc <tcp_listen_input+0x1c8>)
 8010320:	781b      	ldrb	r3, [r3, #0]
 8010322:	f003 0310 	and.w	r3, r3, #16
 8010326:	2b00      	cmp	r3, #0
 8010328:	d019      	beq.n	801035e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801032a:	4b68      	ldr	r3, [pc, #416]	; (80104cc <tcp_listen_input+0x1d8>)
 801032c:	6819      	ldr	r1, [r3, #0]
 801032e:	4b68      	ldr	r3, [pc, #416]	; (80104d0 <tcp_listen_input+0x1dc>)
 8010330:	881b      	ldrh	r3, [r3, #0]
 8010332:	461a      	mov	r2, r3
 8010334:	4b67      	ldr	r3, [pc, #412]	; (80104d4 <tcp_listen_input+0x1e0>)
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801033a:	4b67      	ldr	r3, [pc, #412]	; (80104d8 <tcp_listen_input+0x1e4>)
 801033c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801033e:	885b      	ldrh	r3, [r3, #2]
 8010340:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010342:	4a65      	ldr	r2, [pc, #404]	; (80104d8 <tcp_listen_input+0x1e4>)
 8010344:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010346:	8812      	ldrh	r2, [r2, #0]
 8010348:	b292      	uxth	r2, r2
 801034a:	9202      	str	r2, [sp, #8]
 801034c:	9301      	str	r3, [sp, #4]
 801034e:	4b63      	ldr	r3, [pc, #396]	; (80104dc <tcp_listen_input+0x1e8>)
 8010350:	9300      	str	r3, [sp, #0]
 8010352:	4b63      	ldr	r3, [pc, #396]	; (80104e0 <tcp_listen_input+0x1ec>)
 8010354:	4602      	mov	r2, r0
 8010356:	6878      	ldr	r0, [r7, #4]
 8010358:	f002 ff7e 	bl	8013258 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801035c:	e0a9      	b.n	80104b2 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801035e:	4b57      	ldr	r3, [pc, #348]	; (80104bc <tcp_listen_input+0x1c8>)
 8010360:	781b      	ldrb	r3, [r3, #0]
 8010362:	f003 0302 	and.w	r3, r3, #2
 8010366:	2b00      	cmp	r3, #0
 8010368:	f000 80a3 	beq.w	80104b2 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	7d5b      	ldrb	r3, [r3, #21]
 8010370:	4618      	mov	r0, r3
 8010372:	f7ff f929 	bl	800f5c8 <tcp_alloc>
 8010376:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8010378:	697b      	ldr	r3, [r7, #20]
 801037a:	2b00      	cmp	r3, #0
 801037c:	d111      	bne.n	80103a2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	699b      	ldr	r3, [r3, #24]
 8010382:	2b00      	cmp	r3, #0
 8010384:	d00a      	beq.n	801039c <tcp_listen_input+0xa8>
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	699b      	ldr	r3, [r3, #24]
 801038a:	687a      	ldr	r2, [r7, #4]
 801038c:	6910      	ldr	r0, [r2, #16]
 801038e:	f04f 32ff 	mov.w	r2, #4294967295
 8010392:	2100      	movs	r1, #0
 8010394:	4798      	blx	r3
 8010396:	4603      	mov	r3, r0
 8010398:	73bb      	strb	r3, [r7, #14]
      return;
 801039a:	e08b      	b.n	80104b4 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801039c:	23f0      	movs	r3, #240	; 0xf0
 801039e:	73bb      	strb	r3, [r7, #14]
      return;
 80103a0:	e088      	b.n	80104b4 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80103a2:	4b50      	ldr	r3, [pc, #320]	; (80104e4 <tcp_listen_input+0x1f0>)
 80103a4:	695a      	ldr	r2, [r3, #20]
 80103a6:	697b      	ldr	r3, [r7, #20]
 80103a8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80103aa:	4b4e      	ldr	r3, [pc, #312]	; (80104e4 <tcp_listen_input+0x1f0>)
 80103ac:	691a      	ldr	r2, [r3, #16]
 80103ae:	697b      	ldr	r3, [r7, #20]
 80103b0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	8ada      	ldrh	r2, [r3, #22]
 80103b6:	697b      	ldr	r3, [r7, #20]
 80103b8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80103ba:	4b47      	ldr	r3, [pc, #284]	; (80104d8 <tcp_listen_input+0x1e4>)
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	881b      	ldrh	r3, [r3, #0]
 80103c0:	b29a      	uxth	r2, r3
 80103c2:	697b      	ldr	r3, [r7, #20]
 80103c4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80103c6:	697b      	ldr	r3, [r7, #20]
 80103c8:	2203      	movs	r2, #3
 80103ca:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80103cc:	4b41      	ldr	r3, [pc, #260]	; (80104d4 <tcp_listen_input+0x1e0>)
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	1c5a      	adds	r2, r3, #1
 80103d2:	697b      	ldr	r3, [r7, #20]
 80103d4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80103d6:	697b      	ldr	r3, [r7, #20]
 80103d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80103da:	697b      	ldr	r3, [r7, #20]
 80103dc:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80103de:	6978      	ldr	r0, [r7, #20]
 80103e0:	f7ff fa5a 	bl	800f898 <tcp_next_iss>
 80103e4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80103e6:	697b      	ldr	r3, [r7, #20]
 80103e8:	693a      	ldr	r2, [r7, #16]
 80103ea:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80103ec:	697b      	ldr	r3, [r7, #20]
 80103ee:	693a      	ldr	r2, [r7, #16]
 80103f0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80103f2:	697b      	ldr	r3, [r7, #20]
 80103f4:	693a      	ldr	r2, [r7, #16]
 80103f6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80103f8:	697b      	ldr	r3, [r7, #20]
 80103fa:	693a      	ldr	r2, [r7, #16]
 80103fc:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80103fe:	4b35      	ldr	r3, [pc, #212]	; (80104d4 <tcp_listen_input+0x1e0>)
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	1e5a      	subs	r2, r3, #1
 8010404:	697b      	ldr	r3, [r7, #20]
 8010406:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	691a      	ldr	r2, [r3, #16]
 801040c:	697b      	ldr	r3, [r7, #20]
 801040e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8010410:	697b      	ldr	r3, [r7, #20]
 8010412:	687a      	ldr	r2, [r7, #4]
 8010414:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	7a5b      	ldrb	r3, [r3, #9]
 801041a:	f003 030c 	and.w	r3, r3, #12
 801041e:	b2da      	uxtb	r2, r3
 8010420:	697b      	ldr	r3, [r7, #20]
 8010422:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	7a1a      	ldrb	r2, [r3, #8]
 8010428:	697b      	ldr	r3, [r7, #20]
 801042a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 801042c:	4b2e      	ldr	r3, [pc, #184]	; (80104e8 <tcp_listen_input+0x1f4>)
 801042e:	681a      	ldr	r2, [r3, #0]
 8010430:	697b      	ldr	r3, [r7, #20]
 8010432:	60da      	str	r2, [r3, #12]
 8010434:	4a2c      	ldr	r2, [pc, #176]	; (80104e8 <tcp_listen_input+0x1f4>)
 8010436:	697b      	ldr	r3, [r7, #20]
 8010438:	6013      	str	r3, [r2, #0]
 801043a:	f003 f8cf 	bl	80135dc <tcp_timer_needed>
 801043e:	4b2b      	ldr	r3, [pc, #172]	; (80104ec <tcp_listen_input+0x1f8>)
 8010440:	2201      	movs	r2, #1
 8010442:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8010444:	6978      	ldr	r0, [r7, #20]
 8010446:	f001 fd8d 	bl	8011f64 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801044a:	4b23      	ldr	r3, [pc, #140]	; (80104d8 <tcp_listen_input+0x1e4>)
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	89db      	ldrh	r3, [r3, #14]
 8010450:	b29a      	uxth	r2, r3
 8010452:	697b      	ldr	r3, [r7, #20]
 8010454:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8010458:	697b      	ldr	r3, [r7, #20]
 801045a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801045e:	697b      	ldr	r3, [r7, #20]
 8010460:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8010464:	697b      	ldr	r3, [r7, #20]
 8010466:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010468:	697b      	ldr	r3, [r7, #20]
 801046a:	3304      	adds	r3, #4
 801046c:	4618      	mov	r0, r3
 801046e:	f004 fcc3 	bl	8014df8 <ip4_route>
 8010472:	4601      	mov	r1, r0
 8010474:	697b      	ldr	r3, [r7, #20]
 8010476:	3304      	adds	r3, #4
 8010478:	461a      	mov	r2, r3
 801047a:	4620      	mov	r0, r4
 801047c:	f7ff fa32 	bl	800f8e4 <tcp_eff_send_mss_netif>
 8010480:	4603      	mov	r3, r0
 8010482:	461a      	mov	r2, r3
 8010484:	697b      	ldr	r3, [r7, #20]
 8010486:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8010488:	2112      	movs	r1, #18
 801048a:	6978      	ldr	r0, [r7, #20]
 801048c:	f002 f842 	bl	8012514 <tcp_enqueue_flags>
 8010490:	4603      	mov	r3, r0
 8010492:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8010494:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010498:	2b00      	cmp	r3, #0
 801049a:	d004      	beq.n	80104a6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 801049c:	2100      	movs	r1, #0
 801049e:	6978      	ldr	r0, [r7, #20]
 80104a0:	f7fe f980 	bl	800e7a4 <tcp_abandon>
      return;
 80104a4:	e006      	b.n	80104b4 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80104a6:	6978      	ldr	r0, [r7, #20]
 80104a8:	f002 f922 	bl	80126f0 <tcp_output>
  return;
 80104ac:	e001      	b.n	80104b2 <tcp_listen_input+0x1be>
    return;
 80104ae:	bf00      	nop
 80104b0:	e000      	b.n	80104b4 <tcp_listen_input+0x1c0>
  return;
 80104b2:	bf00      	nop
}
 80104b4:	371c      	adds	r7, #28
 80104b6:	46bd      	mov	sp, r7
 80104b8:	bd90      	pop	{r4, r7, pc}
 80104ba:	bf00      	nop
 80104bc:	20004270 	.word	0x20004270
 80104c0:	08019350 	.word	0x08019350
 80104c4:	08019548 	.word	0x08019548
 80104c8:	0801939c 	.word	0x0801939c
 80104cc:	20004268 	.word	0x20004268
 80104d0:	2000426e 	.word	0x2000426e
 80104d4:	20004264 	.word	0x20004264
 80104d8:	20004254 	.word	0x20004254
 80104dc:	200079f8 	.word	0x200079f8
 80104e0:	200079fc 	.word	0x200079fc
 80104e4:	200079e8 	.word	0x200079e8
 80104e8:	2000b0fc 	.word	0x2000b0fc
 80104ec:	2000b0f8 	.word	0x2000b0f8

080104f0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80104f0:	b580      	push	{r7, lr}
 80104f2:	b086      	sub	sp, #24
 80104f4:	af04      	add	r7, sp, #16
 80104f6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80104f8:	4b2f      	ldr	r3, [pc, #188]	; (80105b8 <tcp_timewait_input+0xc8>)
 80104fa:	781b      	ldrb	r3, [r3, #0]
 80104fc:	f003 0304 	and.w	r3, r3, #4
 8010500:	2b00      	cmp	r3, #0
 8010502:	d153      	bne.n	80105ac <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	2b00      	cmp	r3, #0
 8010508:	d106      	bne.n	8010518 <tcp_timewait_input+0x28>
 801050a:	4b2c      	ldr	r3, [pc, #176]	; (80105bc <tcp_timewait_input+0xcc>)
 801050c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8010510:	492b      	ldr	r1, [pc, #172]	; (80105c0 <tcp_timewait_input+0xd0>)
 8010512:	482c      	ldr	r0, [pc, #176]	; (80105c4 <tcp_timewait_input+0xd4>)
 8010514:	f006 fcb6 	bl	8016e84 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8010518:	4b27      	ldr	r3, [pc, #156]	; (80105b8 <tcp_timewait_input+0xc8>)
 801051a:	781b      	ldrb	r3, [r3, #0]
 801051c:	f003 0302 	and.w	r3, r3, #2
 8010520:	2b00      	cmp	r3, #0
 8010522:	d02a      	beq.n	801057a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8010524:	4b28      	ldr	r3, [pc, #160]	; (80105c8 <tcp_timewait_input+0xd8>)
 8010526:	681a      	ldr	r2, [r3, #0]
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801052c:	1ad3      	subs	r3, r2, r3
 801052e:	2b00      	cmp	r3, #0
 8010530:	db2d      	blt.n	801058e <tcp_timewait_input+0x9e>
 8010532:	4b25      	ldr	r3, [pc, #148]	; (80105c8 <tcp_timewait_input+0xd8>)
 8010534:	681a      	ldr	r2, [r3, #0]
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801053a:	6879      	ldr	r1, [r7, #4]
 801053c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801053e:	440b      	add	r3, r1
 8010540:	1ad3      	subs	r3, r2, r3
 8010542:	2b00      	cmp	r3, #0
 8010544:	dc23      	bgt.n	801058e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010546:	4b21      	ldr	r3, [pc, #132]	; (80105cc <tcp_timewait_input+0xdc>)
 8010548:	6819      	ldr	r1, [r3, #0]
 801054a:	4b21      	ldr	r3, [pc, #132]	; (80105d0 <tcp_timewait_input+0xe0>)
 801054c:	881b      	ldrh	r3, [r3, #0]
 801054e:	461a      	mov	r2, r3
 8010550:	4b1d      	ldr	r3, [pc, #116]	; (80105c8 <tcp_timewait_input+0xd8>)
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010556:	4b1f      	ldr	r3, [pc, #124]	; (80105d4 <tcp_timewait_input+0xe4>)
 8010558:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801055a:	885b      	ldrh	r3, [r3, #2]
 801055c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801055e:	4a1d      	ldr	r2, [pc, #116]	; (80105d4 <tcp_timewait_input+0xe4>)
 8010560:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010562:	8812      	ldrh	r2, [r2, #0]
 8010564:	b292      	uxth	r2, r2
 8010566:	9202      	str	r2, [sp, #8]
 8010568:	9301      	str	r3, [sp, #4]
 801056a:	4b1b      	ldr	r3, [pc, #108]	; (80105d8 <tcp_timewait_input+0xe8>)
 801056c:	9300      	str	r3, [sp, #0]
 801056e:	4b1b      	ldr	r3, [pc, #108]	; (80105dc <tcp_timewait_input+0xec>)
 8010570:	4602      	mov	r2, r0
 8010572:	6878      	ldr	r0, [r7, #4]
 8010574:	f002 fe70 	bl	8013258 <tcp_rst>
      return;
 8010578:	e01b      	b.n	80105b2 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801057a:	4b0f      	ldr	r3, [pc, #60]	; (80105b8 <tcp_timewait_input+0xc8>)
 801057c:	781b      	ldrb	r3, [r3, #0]
 801057e:	f003 0301 	and.w	r3, r3, #1
 8010582:	2b00      	cmp	r3, #0
 8010584:	d003      	beq.n	801058e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8010586:	4b16      	ldr	r3, [pc, #88]	; (80105e0 <tcp_timewait_input+0xf0>)
 8010588:	681a      	ldr	r2, [r3, #0]
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801058e:	4b10      	ldr	r3, [pc, #64]	; (80105d0 <tcp_timewait_input+0xe0>)
 8010590:	881b      	ldrh	r3, [r3, #0]
 8010592:	2b00      	cmp	r3, #0
 8010594:	d00c      	beq.n	80105b0 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	8b5b      	ldrh	r3, [r3, #26]
 801059a:	f043 0302 	orr.w	r3, r3, #2
 801059e:	b29a      	uxth	r2, r3
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80105a4:	6878      	ldr	r0, [r7, #4]
 80105a6:	f002 f8a3 	bl	80126f0 <tcp_output>
  }
  return;
 80105aa:	e001      	b.n	80105b0 <tcp_timewait_input+0xc0>
    return;
 80105ac:	bf00      	nop
 80105ae:	e000      	b.n	80105b2 <tcp_timewait_input+0xc2>
  return;
 80105b0:	bf00      	nop
}
 80105b2:	3708      	adds	r7, #8
 80105b4:	46bd      	mov	sp, r7
 80105b6:	bd80      	pop	{r7, pc}
 80105b8:	20004270 	.word	0x20004270
 80105bc:	08019350 	.word	0x08019350
 80105c0:	08019568 	.word	0x08019568
 80105c4:	0801939c 	.word	0x0801939c
 80105c8:	20004264 	.word	0x20004264
 80105cc:	20004268 	.word	0x20004268
 80105d0:	2000426e 	.word	0x2000426e
 80105d4:	20004254 	.word	0x20004254
 80105d8:	200079f8 	.word	0x200079f8
 80105dc:	200079fc 	.word	0x200079fc
 80105e0:	2000b100 	.word	0x2000b100

080105e4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80105e4:	b590      	push	{r4, r7, lr}
 80105e6:	b08d      	sub	sp, #52	; 0x34
 80105e8:	af04      	add	r7, sp, #16
 80105ea:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80105ec:	2300      	movs	r3, #0
 80105ee:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80105f0:	2300      	movs	r3, #0
 80105f2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d106      	bne.n	8010608 <tcp_process+0x24>
 80105fa:	4ba5      	ldr	r3, [pc, #660]	; (8010890 <tcp_process+0x2ac>)
 80105fc:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8010600:	49a4      	ldr	r1, [pc, #656]	; (8010894 <tcp_process+0x2b0>)
 8010602:	48a5      	ldr	r0, [pc, #660]	; (8010898 <tcp_process+0x2b4>)
 8010604:	f006 fc3e 	bl	8016e84 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8010608:	4ba4      	ldr	r3, [pc, #656]	; (801089c <tcp_process+0x2b8>)
 801060a:	781b      	ldrb	r3, [r3, #0]
 801060c:	f003 0304 	and.w	r3, r3, #4
 8010610:	2b00      	cmp	r3, #0
 8010612:	d04e      	beq.n	80106b2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	7d1b      	ldrb	r3, [r3, #20]
 8010618:	2b02      	cmp	r3, #2
 801061a:	d108      	bne.n	801062e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010620:	4b9f      	ldr	r3, [pc, #636]	; (80108a0 <tcp_process+0x2bc>)
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	429a      	cmp	r2, r3
 8010626:	d123      	bne.n	8010670 <tcp_process+0x8c>
        acceptable = 1;
 8010628:	2301      	movs	r3, #1
 801062a:	76fb      	strb	r3, [r7, #27]
 801062c:	e020      	b.n	8010670 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010632:	4b9c      	ldr	r3, [pc, #624]	; (80108a4 <tcp_process+0x2c0>)
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	429a      	cmp	r2, r3
 8010638:	d102      	bne.n	8010640 <tcp_process+0x5c>
        acceptable = 1;
 801063a:	2301      	movs	r3, #1
 801063c:	76fb      	strb	r3, [r7, #27]
 801063e:	e017      	b.n	8010670 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010640:	4b98      	ldr	r3, [pc, #608]	; (80108a4 <tcp_process+0x2c0>)
 8010642:	681a      	ldr	r2, [r3, #0]
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010648:	1ad3      	subs	r3, r2, r3
 801064a:	2b00      	cmp	r3, #0
 801064c:	db10      	blt.n	8010670 <tcp_process+0x8c>
 801064e:	4b95      	ldr	r3, [pc, #596]	; (80108a4 <tcp_process+0x2c0>)
 8010650:	681a      	ldr	r2, [r3, #0]
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010656:	6879      	ldr	r1, [r7, #4]
 8010658:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801065a:	440b      	add	r3, r1
 801065c:	1ad3      	subs	r3, r2, r3
 801065e:	2b00      	cmp	r3, #0
 8010660:	dc06      	bgt.n	8010670 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	8b5b      	ldrh	r3, [r3, #26]
 8010666:	f043 0302 	orr.w	r3, r3, #2
 801066a:	b29a      	uxth	r2, r3
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8010670:	7efb      	ldrb	r3, [r7, #27]
 8010672:	2b00      	cmp	r3, #0
 8010674:	d01b      	beq.n	80106ae <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	7d1b      	ldrb	r3, [r3, #20]
 801067a:	2b00      	cmp	r3, #0
 801067c:	d106      	bne.n	801068c <tcp_process+0xa8>
 801067e:	4b84      	ldr	r3, [pc, #528]	; (8010890 <tcp_process+0x2ac>)
 8010680:	f44f 724e 	mov.w	r2, #824	; 0x338
 8010684:	4988      	ldr	r1, [pc, #544]	; (80108a8 <tcp_process+0x2c4>)
 8010686:	4884      	ldr	r0, [pc, #528]	; (8010898 <tcp_process+0x2b4>)
 8010688:	f006 fbfc 	bl	8016e84 <iprintf>
      recv_flags |= TF_RESET;
 801068c:	4b87      	ldr	r3, [pc, #540]	; (80108ac <tcp_process+0x2c8>)
 801068e:	781b      	ldrb	r3, [r3, #0]
 8010690:	f043 0308 	orr.w	r3, r3, #8
 8010694:	b2da      	uxtb	r2, r3
 8010696:	4b85      	ldr	r3, [pc, #532]	; (80108ac <tcp_process+0x2c8>)
 8010698:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	8b5b      	ldrh	r3, [r3, #26]
 801069e:	f023 0301 	bic.w	r3, r3, #1
 80106a2:	b29a      	uxth	r2, r3
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80106a8:	f06f 030d 	mvn.w	r3, #13
 80106ac:	e37a      	b.n	8010da4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80106ae:	2300      	movs	r3, #0
 80106b0:	e378      	b.n	8010da4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80106b2:	4b7a      	ldr	r3, [pc, #488]	; (801089c <tcp_process+0x2b8>)
 80106b4:	781b      	ldrb	r3, [r3, #0]
 80106b6:	f003 0302 	and.w	r3, r3, #2
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d010      	beq.n	80106e0 <tcp_process+0xfc>
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	7d1b      	ldrb	r3, [r3, #20]
 80106c2:	2b02      	cmp	r3, #2
 80106c4:	d00c      	beq.n	80106e0 <tcp_process+0xfc>
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	7d1b      	ldrb	r3, [r3, #20]
 80106ca:	2b03      	cmp	r3, #3
 80106cc:	d008      	beq.n	80106e0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	8b5b      	ldrh	r3, [r3, #26]
 80106d2:	f043 0302 	orr.w	r3, r3, #2
 80106d6:	b29a      	uxth	r2, r3
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80106dc:	2300      	movs	r3, #0
 80106de:	e361      	b.n	8010da4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	8b5b      	ldrh	r3, [r3, #26]
 80106e4:	f003 0310 	and.w	r3, r3, #16
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d103      	bne.n	80106f4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80106ec:	4b70      	ldr	r3, [pc, #448]	; (80108b0 <tcp_process+0x2cc>)
 80106ee:	681a      	ldr	r2, [r3, #0]
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	2200      	movs	r2, #0
 80106f8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	2200      	movs	r2, #0
 8010700:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8010704:	6878      	ldr	r0, [r7, #4]
 8010706:	f001 fc2d 	bl	8011f64 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	7d1b      	ldrb	r3, [r3, #20]
 801070e:	3b02      	subs	r3, #2
 8010710:	2b07      	cmp	r3, #7
 8010712:	f200 8337 	bhi.w	8010d84 <tcp_process+0x7a0>
 8010716:	a201      	add	r2, pc, #4	; (adr r2, 801071c <tcp_process+0x138>)
 8010718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801071c:	0801073d 	.word	0x0801073d
 8010720:	0801096d 	.word	0x0801096d
 8010724:	08010ae5 	.word	0x08010ae5
 8010728:	08010b0f 	.word	0x08010b0f
 801072c:	08010c33 	.word	0x08010c33
 8010730:	08010ae5 	.word	0x08010ae5
 8010734:	08010cbf 	.word	0x08010cbf
 8010738:	08010d4f 	.word	0x08010d4f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801073c:	4b57      	ldr	r3, [pc, #348]	; (801089c <tcp_process+0x2b8>)
 801073e:	781b      	ldrb	r3, [r3, #0]
 8010740:	f003 0310 	and.w	r3, r3, #16
 8010744:	2b00      	cmp	r3, #0
 8010746:	f000 80e4 	beq.w	8010912 <tcp_process+0x32e>
 801074a:	4b54      	ldr	r3, [pc, #336]	; (801089c <tcp_process+0x2b8>)
 801074c:	781b      	ldrb	r3, [r3, #0]
 801074e:	f003 0302 	and.w	r3, r3, #2
 8010752:	2b00      	cmp	r3, #0
 8010754:	f000 80dd 	beq.w	8010912 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801075c:	1c5a      	adds	r2, r3, #1
 801075e:	4b50      	ldr	r3, [pc, #320]	; (80108a0 <tcp_process+0x2bc>)
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	429a      	cmp	r2, r3
 8010764:	f040 80d5 	bne.w	8010912 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8010768:	4b4e      	ldr	r3, [pc, #312]	; (80108a4 <tcp_process+0x2c0>)
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	1c5a      	adds	r2, r3, #1
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 801077a:	4b49      	ldr	r3, [pc, #292]	; (80108a0 <tcp_process+0x2bc>)
 801077c:	681a      	ldr	r2, [r3, #0]
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8010782:	4b4c      	ldr	r3, [pc, #304]	; (80108b4 <tcp_process+0x2d0>)
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	89db      	ldrh	r3, [r3, #14]
 8010788:	b29a      	uxth	r2, r3
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801079c:	4b41      	ldr	r3, [pc, #260]	; (80108a4 <tcp_process+0x2c0>)
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	1e5a      	subs	r2, r3, #1
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	2204      	movs	r2, #4
 80107aa:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	3304      	adds	r3, #4
 80107b4:	4618      	mov	r0, r3
 80107b6:	f004 fb1f 	bl	8014df8 <ip4_route>
 80107ba:	4601      	mov	r1, r0
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	3304      	adds	r3, #4
 80107c0:	461a      	mov	r2, r3
 80107c2:	4620      	mov	r0, r4
 80107c4:	f7ff f88e 	bl	800f8e4 <tcp_eff_send_mss_netif>
 80107c8:	4603      	mov	r3, r0
 80107ca:	461a      	mov	r2, r3
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80107d4:	009a      	lsls	r2, r3, #2
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80107da:	005b      	lsls	r3, r3, #1
 80107dc:	f241 111c 	movw	r1, #4380	; 0x111c
 80107e0:	428b      	cmp	r3, r1
 80107e2:	bf38      	it	cc
 80107e4:	460b      	movcc	r3, r1
 80107e6:	429a      	cmp	r2, r3
 80107e8:	d204      	bcs.n	80107f4 <tcp_process+0x210>
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80107ee:	009b      	lsls	r3, r3, #2
 80107f0:	b29b      	uxth	r3, r3
 80107f2:	e00d      	b.n	8010810 <tcp_process+0x22c>
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80107f8:	005b      	lsls	r3, r3, #1
 80107fa:	f241 121c 	movw	r2, #4380	; 0x111c
 80107fe:	4293      	cmp	r3, r2
 8010800:	d904      	bls.n	801080c <tcp_process+0x228>
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010806:	005b      	lsls	r3, r3, #1
 8010808:	b29b      	uxth	r3, r3
 801080a:	e001      	b.n	8010810 <tcp_process+0x22c>
 801080c:	f241 131c 	movw	r3, #4380	; 0x111c
 8010810:	687a      	ldr	r2, [r7, #4]
 8010812:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801081c:	2b00      	cmp	r3, #0
 801081e:	d106      	bne.n	801082e <tcp_process+0x24a>
 8010820:	4b1b      	ldr	r3, [pc, #108]	; (8010890 <tcp_process+0x2ac>)
 8010822:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8010826:	4924      	ldr	r1, [pc, #144]	; (80108b8 <tcp_process+0x2d4>)
 8010828:	481b      	ldr	r0, [pc, #108]	; (8010898 <tcp_process+0x2b4>)
 801082a:	f006 fb2b 	bl	8016e84 <iprintf>
        --pcb->snd_queuelen;
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010834:	3b01      	subs	r3, #1
 8010836:	b29a      	uxth	r2, r3
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010842:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8010844:	69fb      	ldr	r3, [r7, #28]
 8010846:	2b00      	cmp	r3, #0
 8010848:	d111      	bne.n	801086e <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801084e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8010850:	69fb      	ldr	r3, [r7, #28]
 8010852:	2b00      	cmp	r3, #0
 8010854:	d106      	bne.n	8010864 <tcp_process+0x280>
 8010856:	4b0e      	ldr	r3, [pc, #56]	; (8010890 <tcp_process+0x2ac>)
 8010858:	f44f 725d 	mov.w	r2, #884	; 0x374
 801085c:	4917      	ldr	r1, [pc, #92]	; (80108bc <tcp_process+0x2d8>)
 801085e:	480e      	ldr	r0, [pc, #56]	; (8010898 <tcp_process+0x2b4>)
 8010860:	f006 fb10 	bl	8016e84 <iprintf>
          pcb->unsent = rseg->next;
 8010864:	69fb      	ldr	r3, [r7, #28]
 8010866:	681a      	ldr	r2, [r3, #0]
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	66da      	str	r2, [r3, #108]	; 0x6c
 801086c:	e003      	b.n	8010876 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 801086e:	69fb      	ldr	r3, [r7, #28]
 8010870:	681a      	ldr	r2, [r3, #0]
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8010876:	69f8      	ldr	r0, [r7, #28]
 8010878:	f7fe fd3d 	bl	800f2f6 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010880:	2b00      	cmp	r3, #0
 8010882:	d11d      	bne.n	80108c0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801088a:	861a      	strh	r2, [r3, #48]	; 0x30
 801088c:	e01f      	b.n	80108ce <tcp_process+0x2ea>
 801088e:	bf00      	nop
 8010890:	08019350 	.word	0x08019350
 8010894:	08019588 	.word	0x08019588
 8010898:	0801939c 	.word	0x0801939c
 801089c:	20004270 	.word	0x20004270
 80108a0:	20004268 	.word	0x20004268
 80108a4:	20004264 	.word	0x20004264
 80108a8:	080195a4 	.word	0x080195a4
 80108ac:	20004271 	.word	0x20004271
 80108b0:	2000b100 	.word	0x2000b100
 80108b4:	20004254 	.word	0x20004254
 80108b8:	080195c4 	.word	0x080195c4
 80108bc:	080195dc 	.word	0x080195dc
        } else {
          pcb->rtime = 0;
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	2200      	movs	r2, #0
 80108c4:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	2200      	movs	r2, #0
 80108ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d00a      	beq.n	80108ee <tcp_process+0x30a>
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80108de:	687a      	ldr	r2, [r7, #4]
 80108e0:	6910      	ldr	r0, [r2, #16]
 80108e2:	2200      	movs	r2, #0
 80108e4:	6879      	ldr	r1, [r7, #4]
 80108e6:	4798      	blx	r3
 80108e8:	4603      	mov	r3, r0
 80108ea:	76bb      	strb	r3, [r7, #26]
 80108ec:	e001      	b.n	80108f2 <tcp_process+0x30e>
 80108ee:	2300      	movs	r3, #0
 80108f0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80108f2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80108f6:	f113 0f0d 	cmn.w	r3, #13
 80108fa:	d102      	bne.n	8010902 <tcp_process+0x31e>
          return ERR_ABRT;
 80108fc:	f06f 030c 	mvn.w	r3, #12
 8010900:	e250      	b.n	8010da4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	8b5b      	ldrh	r3, [r3, #26]
 8010906:	f043 0302 	orr.w	r3, r3, #2
 801090a:	b29a      	uxth	r2, r3
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8010910:	e23a      	b.n	8010d88 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8010912:	4b9d      	ldr	r3, [pc, #628]	; (8010b88 <tcp_process+0x5a4>)
 8010914:	781b      	ldrb	r3, [r3, #0]
 8010916:	f003 0310 	and.w	r3, r3, #16
 801091a:	2b00      	cmp	r3, #0
 801091c:	f000 8234 	beq.w	8010d88 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010920:	4b9a      	ldr	r3, [pc, #616]	; (8010b8c <tcp_process+0x5a8>)
 8010922:	6819      	ldr	r1, [r3, #0]
 8010924:	4b9a      	ldr	r3, [pc, #616]	; (8010b90 <tcp_process+0x5ac>)
 8010926:	881b      	ldrh	r3, [r3, #0]
 8010928:	461a      	mov	r2, r3
 801092a:	4b9a      	ldr	r3, [pc, #616]	; (8010b94 <tcp_process+0x5b0>)
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010930:	4b99      	ldr	r3, [pc, #612]	; (8010b98 <tcp_process+0x5b4>)
 8010932:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010934:	885b      	ldrh	r3, [r3, #2]
 8010936:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010938:	4a97      	ldr	r2, [pc, #604]	; (8010b98 <tcp_process+0x5b4>)
 801093a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801093c:	8812      	ldrh	r2, [r2, #0]
 801093e:	b292      	uxth	r2, r2
 8010940:	9202      	str	r2, [sp, #8]
 8010942:	9301      	str	r3, [sp, #4]
 8010944:	4b95      	ldr	r3, [pc, #596]	; (8010b9c <tcp_process+0x5b8>)
 8010946:	9300      	str	r3, [sp, #0]
 8010948:	4b95      	ldr	r3, [pc, #596]	; (8010ba0 <tcp_process+0x5bc>)
 801094a:	4602      	mov	r2, r0
 801094c:	6878      	ldr	r0, [r7, #4]
 801094e:	f002 fc83 	bl	8013258 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010958:	2b05      	cmp	r3, #5
 801095a:	f200 8215 	bhi.w	8010d88 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	2200      	movs	r2, #0
 8010962:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8010964:	6878      	ldr	r0, [r7, #4]
 8010966:	f002 fa4d 	bl	8012e04 <tcp_rexmit_rto>
      break;
 801096a:	e20d      	b.n	8010d88 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801096c:	4b86      	ldr	r3, [pc, #536]	; (8010b88 <tcp_process+0x5a4>)
 801096e:	781b      	ldrb	r3, [r3, #0]
 8010970:	f003 0310 	and.w	r3, r3, #16
 8010974:	2b00      	cmp	r3, #0
 8010976:	f000 80a1 	beq.w	8010abc <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801097a:	4b84      	ldr	r3, [pc, #528]	; (8010b8c <tcp_process+0x5a8>)
 801097c:	681a      	ldr	r2, [r3, #0]
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010982:	1ad3      	subs	r3, r2, r3
 8010984:	3b01      	subs	r3, #1
 8010986:	2b00      	cmp	r3, #0
 8010988:	db7e      	blt.n	8010a88 <tcp_process+0x4a4>
 801098a:	4b80      	ldr	r3, [pc, #512]	; (8010b8c <tcp_process+0x5a8>)
 801098c:	681a      	ldr	r2, [r3, #0]
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010992:	1ad3      	subs	r3, r2, r3
 8010994:	2b00      	cmp	r3, #0
 8010996:	dc77      	bgt.n	8010a88 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	2204      	movs	r2, #4
 801099c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d102      	bne.n	80109ac <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80109a6:	23fa      	movs	r3, #250	; 0xfa
 80109a8:	76bb      	strb	r3, [r7, #26]
 80109aa:	e01d      	b.n	80109e8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80109b0:	699b      	ldr	r3, [r3, #24]
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d106      	bne.n	80109c4 <tcp_process+0x3e0>
 80109b6:	4b7b      	ldr	r3, [pc, #492]	; (8010ba4 <tcp_process+0x5c0>)
 80109b8:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80109bc:	497a      	ldr	r1, [pc, #488]	; (8010ba8 <tcp_process+0x5c4>)
 80109be:	487b      	ldr	r0, [pc, #492]	; (8010bac <tcp_process+0x5c8>)
 80109c0:	f006 fa60 	bl	8016e84 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80109c8:	699b      	ldr	r3, [r3, #24]
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d00a      	beq.n	80109e4 <tcp_process+0x400>
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80109d2:	699b      	ldr	r3, [r3, #24]
 80109d4:	687a      	ldr	r2, [r7, #4]
 80109d6:	6910      	ldr	r0, [r2, #16]
 80109d8:	2200      	movs	r2, #0
 80109da:	6879      	ldr	r1, [r7, #4]
 80109dc:	4798      	blx	r3
 80109de:	4603      	mov	r3, r0
 80109e0:	76bb      	strb	r3, [r7, #26]
 80109e2:	e001      	b.n	80109e8 <tcp_process+0x404>
 80109e4:	23f0      	movs	r3, #240	; 0xf0
 80109e6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80109e8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d00a      	beq.n	8010a06 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80109f0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80109f4:	f113 0f0d 	cmn.w	r3, #13
 80109f8:	d002      	beq.n	8010a00 <tcp_process+0x41c>
              tcp_abort(pcb);
 80109fa:	6878      	ldr	r0, [r7, #4]
 80109fc:	f7fd ff90 	bl	800e920 <tcp_abort>
            }
            return ERR_ABRT;
 8010a00:	f06f 030c 	mvn.w	r3, #12
 8010a04:	e1ce      	b.n	8010da4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8010a06:	6878      	ldr	r0, [r7, #4]
 8010a08:	f000 fae0 	bl	8010fcc <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8010a0c:	4b68      	ldr	r3, [pc, #416]	; (8010bb0 <tcp_process+0x5cc>)
 8010a0e:	881b      	ldrh	r3, [r3, #0]
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d005      	beq.n	8010a20 <tcp_process+0x43c>
            recv_acked--;
 8010a14:	4b66      	ldr	r3, [pc, #408]	; (8010bb0 <tcp_process+0x5cc>)
 8010a16:	881b      	ldrh	r3, [r3, #0]
 8010a18:	3b01      	subs	r3, #1
 8010a1a:	b29a      	uxth	r2, r3
 8010a1c:	4b64      	ldr	r3, [pc, #400]	; (8010bb0 <tcp_process+0x5cc>)
 8010a1e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010a24:	009a      	lsls	r2, r3, #2
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010a2a:	005b      	lsls	r3, r3, #1
 8010a2c:	f241 111c 	movw	r1, #4380	; 0x111c
 8010a30:	428b      	cmp	r3, r1
 8010a32:	bf38      	it	cc
 8010a34:	460b      	movcc	r3, r1
 8010a36:	429a      	cmp	r2, r3
 8010a38:	d204      	bcs.n	8010a44 <tcp_process+0x460>
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010a3e:	009b      	lsls	r3, r3, #2
 8010a40:	b29b      	uxth	r3, r3
 8010a42:	e00d      	b.n	8010a60 <tcp_process+0x47c>
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010a48:	005b      	lsls	r3, r3, #1
 8010a4a:	f241 121c 	movw	r2, #4380	; 0x111c
 8010a4e:	4293      	cmp	r3, r2
 8010a50:	d904      	bls.n	8010a5c <tcp_process+0x478>
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010a56:	005b      	lsls	r3, r3, #1
 8010a58:	b29b      	uxth	r3, r3
 8010a5a:	e001      	b.n	8010a60 <tcp_process+0x47c>
 8010a5c:	f241 131c 	movw	r3, #4380	; 0x111c
 8010a60:	687a      	ldr	r2, [r7, #4]
 8010a62:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8010a66:	4b53      	ldr	r3, [pc, #332]	; (8010bb4 <tcp_process+0x5d0>)
 8010a68:	781b      	ldrb	r3, [r3, #0]
 8010a6a:	f003 0320 	and.w	r3, r3, #32
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d037      	beq.n	8010ae2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	8b5b      	ldrh	r3, [r3, #26]
 8010a76:	f043 0302 	orr.w	r3, r3, #2
 8010a7a:	b29a      	uxth	r2, r3
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	2207      	movs	r2, #7
 8010a84:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8010a86:	e02c      	b.n	8010ae2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010a88:	4b40      	ldr	r3, [pc, #256]	; (8010b8c <tcp_process+0x5a8>)
 8010a8a:	6819      	ldr	r1, [r3, #0]
 8010a8c:	4b40      	ldr	r3, [pc, #256]	; (8010b90 <tcp_process+0x5ac>)
 8010a8e:	881b      	ldrh	r3, [r3, #0]
 8010a90:	461a      	mov	r2, r3
 8010a92:	4b40      	ldr	r3, [pc, #256]	; (8010b94 <tcp_process+0x5b0>)
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010a98:	4b3f      	ldr	r3, [pc, #252]	; (8010b98 <tcp_process+0x5b4>)
 8010a9a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010a9c:	885b      	ldrh	r3, [r3, #2]
 8010a9e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010aa0:	4a3d      	ldr	r2, [pc, #244]	; (8010b98 <tcp_process+0x5b4>)
 8010aa2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010aa4:	8812      	ldrh	r2, [r2, #0]
 8010aa6:	b292      	uxth	r2, r2
 8010aa8:	9202      	str	r2, [sp, #8]
 8010aaa:	9301      	str	r3, [sp, #4]
 8010aac:	4b3b      	ldr	r3, [pc, #236]	; (8010b9c <tcp_process+0x5b8>)
 8010aae:	9300      	str	r3, [sp, #0]
 8010ab0:	4b3b      	ldr	r3, [pc, #236]	; (8010ba0 <tcp_process+0x5bc>)
 8010ab2:	4602      	mov	r2, r0
 8010ab4:	6878      	ldr	r0, [r7, #4]
 8010ab6:	f002 fbcf 	bl	8013258 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8010aba:	e167      	b.n	8010d8c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8010abc:	4b32      	ldr	r3, [pc, #200]	; (8010b88 <tcp_process+0x5a4>)
 8010abe:	781b      	ldrb	r3, [r3, #0]
 8010ac0:	f003 0302 	and.w	r3, r3, #2
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	f000 8161 	beq.w	8010d8c <tcp_process+0x7a8>
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ace:	1e5a      	subs	r2, r3, #1
 8010ad0:	4b30      	ldr	r3, [pc, #192]	; (8010b94 <tcp_process+0x5b0>)
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	429a      	cmp	r2, r3
 8010ad6:	f040 8159 	bne.w	8010d8c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8010ada:	6878      	ldr	r0, [r7, #4]
 8010adc:	f002 f9b4 	bl	8012e48 <tcp_rexmit>
      break;
 8010ae0:	e154      	b.n	8010d8c <tcp_process+0x7a8>
 8010ae2:	e153      	b.n	8010d8c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8010ae4:	6878      	ldr	r0, [r7, #4]
 8010ae6:	f000 fa71 	bl	8010fcc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8010aea:	4b32      	ldr	r3, [pc, #200]	; (8010bb4 <tcp_process+0x5d0>)
 8010aec:	781b      	ldrb	r3, [r3, #0]
 8010aee:	f003 0320 	and.w	r3, r3, #32
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	f000 814c 	beq.w	8010d90 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	8b5b      	ldrh	r3, [r3, #26]
 8010afc:	f043 0302 	orr.w	r3, r3, #2
 8010b00:	b29a      	uxth	r2, r3
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	2207      	movs	r2, #7
 8010b0a:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010b0c:	e140      	b.n	8010d90 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8010b0e:	6878      	ldr	r0, [r7, #4]
 8010b10:	f000 fa5c 	bl	8010fcc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010b14:	4b27      	ldr	r3, [pc, #156]	; (8010bb4 <tcp_process+0x5d0>)
 8010b16:	781b      	ldrb	r3, [r3, #0]
 8010b18:	f003 0320 	and.w	r3, r3, #32
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d071      	beq.n	8010c04 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010b20:	4b19      	ldr	r3, [pc, #100]	; (8010b88 <tcp_process+0x5a4>)
 8010b22:	781b      	ldrb	r3, [r3, #0]
 8010b24:	f003 0310 	and.w	r3, r3, #16
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d060      	beq.n	8010bee <tcp_process+0x60a>
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010b30:	4b16      	ldr	r3, [pc, #88]	; (8010b8c <tcp_process+0x5a8>)
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	429a      	cmp	r2, r3
 8010b36:	d15a      	bne.n	8010bee <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d156      	bne.n	8010bee <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	8b5b      	ldrh	r3, [r3, #26]
 8010b44:	f043 0302 	orr.w	r3, r3, #2
 8010b48:	b29a      	uxth	r2, r3
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8010b4e:	6878      	ldr	r0, [r7, #4]
 8010b50:	f7fe fdbe 	bl	800f6d0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8010b54:	4b18      	ldr	r3, [pc, #96]	; (8010bb8 <tcp_process+0x5d4>)
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	687a      	ldr	r2, [r7, #4]
 8010b5a:	429a      	cmp	r2, r3
 8010b5c:	d105      	bne.n	8010b6a <tcp_process+0x586>
 8010b5e:	4b16      	ldr	r3, [pc, #88]	; (8010bb8 <tcp_process+0x5d4>)
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	68db      	ldr	r3, [r3, #12]
 8010b64:	4a14      	ldr	r2, [pc, #80]	; (8010bb8 <tcp_process+0x5d4>)
 8010b66:	6013      	str	r3, [r2, #0]
 8010b68:	e02e      	b.n	8010bc8 <tcp_process+0x5e4>
 8010b6a:	4b13      	ldr	r3, [pc, #76]	; (8010bb8 <tcp_process+0x5d4>)
 8010b6c:	681b      	ldr	r3, [r3, #0]
 8010b6e:	617b      	str	r3, [r7, #20]
 8010b70:	e027      	b.n	8010bc2 <tcp_process+0x5de>
 8010b72:	697b      	ldr	r3, [r7, #20]
 8010b74:	68db      	ldr	r3, [r3, #12]
 8010b76:	687a      	ldr	r2, [r7, #4]
 8010b78:	429a      	cmp	r2, r3
 8010b7a:	d11f      	bne.n	8010bbc <tcp_process+0x5d8>
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	68da      	ldr	r2, [r3, #12]
 8010b80:	697b      	ldr	r3, [r7, #20]
 8010b82:	60da      	str	r2, [r3, #12]
 8010b84:	e020      	b.n	8010bc8 <tcp_process+0x5e4>
 8010b86:	bf00      	nop
 8010b88:	20004270 	.word	0x20004270
 8010b8c:	20004268 	.word	0x20004268
 8010b90:	2000426e 	.word	0x2000426e
 8010b94:	20004264 	.word	0x20004264
 8010b98:	20004254 	.word	0x20004254
 8010b9c:	200079f8 	.word	0x200079f8
 8010ba0:	200079fc 	.word	0x200079fc
 8010ba4:	08019350 	.word	0x08019350
 8010ba8:	080195f0 	.word	0x080195f0
 8010bac:	0801939c 	.word	0x0801939c
 8010bb0:	2000426c 	.word	0x2000426c
 8010bb4:	20004271 	.word	0x20004271
 8010bb8:	2000b0fc 	.word	0x2000b0fc
 8010bbc:	697b      	ldr	r3, [r7, #20]
 8010bbe:	68db      	ldr	r3, [r3, #12]
 8010bc0:	617b      	str	r3, [r7, #20]
 8010bc2:	697b      	ldr	r3, [r7, #20]
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d1d4      	bne.n	8010b72 <tcp_process+0x58e>
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	2200      	movs	r2, #0
 8010bcc:	60da      	str	r2, [r3, #12]
 8010bce:	4b77      	ldr	r3, [pc, #476]	; (8010dac <tcp_process+0x7c8>)
 8010bd0:	2201      	movs	r2, #1
 8010bd2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	220a      	movs	r2, #10
 8010bd8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8010bda:	4b75      	ldr	r3, [pc, #468]	; (8010db0 <tcp_process+0x7cc>)
 8010bdc:	681a      	ldr	r2, [r3, #0]
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	60da      	str	r2, [r3, #12]
 8010be2:	4a73      	ldr	r2, [pc, #460]	; (8010db0 <tcp_process+0x7cc>)
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	6013      	str	r3, [r2, #0]
 8010be8:	f002 fcf8 	bl	80135dc <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8010bec:	e0d2      	b.n	8010d94 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	8b5b      	ldrh	r3, [r3, #26]
 8010bf2:	f043 0302 	orr.w	r3, r3, #2
 8010bf6:	b29a      	uxth	r2, r3
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	2208      	movs	r2, #8
 8010c00:	751a      	strb	r2, [r3, #20]
      break;
 8010c02:	e0c7      	b.n	8010d94 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010c04:	4b6b      	ldr	r3, [pc, #428]	; (8010db4 <tcp_process+0x7d0>)
 8010c06:	781b      	ldrb	r3, [r3, #0]
 8010c08:	f003 0310 	and.w	r3, r3, #16
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	f000 80c1 	beq.w	8010d94 <tcp_process+0x7b0>
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010c16:	4b68      	ldr	r3, [pc, #416]	; (8010db8 <tcp_process+0x7d4>)
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	429a      	cmp	r2, r3
 8010c1c:	f040 80ba 	bne.w	8010d94 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	f040 80b5 	bne.w	8010d94 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	2206      	movs	r2, #6
 8010c2e:	751a      	strb	r2, [r3, #20]
      break;
 8010c30:	e0b0      	b.n	8010d94 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8010c32:	6878      	ldr	r0, [r7, #4]
 8010c34:	f000 f9ca 	bl	8010fcc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010c38:	4b60      	ldr	r3, [pc, #384]	; (8010dbc <tcp_process+0x7d8>)
 8010c3a:	781b      	ldrb	r3, [r3, #0]
 8010c3c:	f003 0320 	and.w	r3, r3, #32
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	f000 80a9 	beq.w	8010d98 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	8b5b      	ldrh	r3, [r3, #26]
 8010c4a:	f043 0302 	orr.w	r3, r3, #2
 8010c4e:	b29a      	uxth	r2, r3
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8010c54:	6878      	ldr	r0, [r7, #4]
 8010c56:	f7fe fd3b 	bl	800f6d0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010c5a:	4b59      	ldr	r3, [pc, #356]	; (8010dc0 <tcp_process+0x7dc>)
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	687a      	ldr	r2, [r7, #4]
 8010c60:	429a      	cmp	r2, r3
 8010c62:	d105      	bne.n	8010c70 <tcp_process+0x68c>
 8010c64:	4b56      	ldr	r3, [pc, #344]	; (8010dc0 <tcp_process+0x7dc>)
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	68db      	ldr	r3, [r3, #12]
 8010c6a:	4a55      	ldr	r2, [pc, #340]	; (8010dc0 <tcp_process+0x7dc>)
 8010c6c:	6013      	str	r3, [r2, #0]
 8010c6e:	e013      	b.n	8010c98 <tcp_process+0x6b4>
 8010c70:	4b53      	ldr	r3, [pc, #332]	; (8010dc0 <tcp_process+0x7dc>)
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	613b      	str	r3, [r7, #16]
 8010c76:	e00c      	b.n	8010c92 <tcp_process+0x6ae>
 8010c78:	693b      	ldr	r3, [r7, #16]
 8010c7a:	68db      	ldr	r3, [r3, #12]
 8010c7c:	687a      	ldr	r2, [r7, #4]
 8010c7e:	429a      	cmp	r2, r3
 8010c80:	d104      	bne.n	8010c8c <tcp_process+0x6a8>
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	68da      	ldr	r2, [r3, #12]
 8010c86:	693b      	ldr	r3, [r7, #16]
 8010c88:	60da      	str	r2, [r3, #12]
 8010c8a:	e005      	b.n	8010c98 <tcp_process+0x6b4>
 8010c8c:	693b      	ldr	r3, [r7, #16]
 8010c8e:	68db      	ldr	r3, [r3, #12]
 8010c90:	613b      	str	r3, [r7, #16]
 8010c92:	693b      	ldr	r3, [r7, #16]
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d1ef      	bne.n	8010c78 <tcp_process+0x694>
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	2200      	movs	r2, #0
 8010c9c:	60da      	str	r2, [r3, #12]
 8010c9e:	4b43      	ldr	r3, [pc, #268]	; (8010dac <tcp_process+0x7c8>)
 8010ca0:	2201      	movs	r2, #1
 8010ca2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	220a      	movs	r2, #10
 8010ca8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010caa:	4b41      	ldr	r3, [pc, #260]	; (8010db0 <tcp_process+0x7cc>)
 8010cac:	681a      	ldr	r2, [r3, #0]
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	60da      	str	r2, [r3, #12]
 8010cb2:	4a3f      	ldr	r2, [pc, #252]	; (8010db0 <tcp_process+0x7cc>)
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	6013      	str	r3, [r2, #0]
 8010cb8:	f002 fc90 	bl	80135dc <tcp_timer_needed>
      }
      break;
 8010cbc:	e06c      	b.n	8010d98 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8010cbe:	6878      	ldr	r0, [r7, #4]
 8010cc0:	f000 f984 	bl	8010fcc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010cc4:	4b3b      	ldr	r3, [pc, #236]	; (8010db4 <tcp_process+0x7d0>)
 8010cc6:	781b      	ldrb	r3, [r3, #0]
 8010cc8:	f003 0310 	and.w	r3, r3, #16
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d065      	beq.n	8010d9c <tcp_process+0x7b8>
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010cd4:	4b38      	ldr	r3, [pc, #224]	; (8010db8 <tcp_process+0x7d4>)
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	429a      	cmp	r2, r3
 8010cda:	d15f      	bne.n	8010d9c <tcp_process+0x7b8>
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d15b      	bne.n	8010d9c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8010ce4:	6878      	ldr	r0, [r7, #4]
 8010ce6:	f7fe fcf3 	bl	800f6d0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010cea:	4b35      	ldr	r3, [pc, #212]	; (8010dc0 <tcp_process+0x7dc>)
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	687a      	ldr	r2, [r7, #4]
 8010cf0:	429a      	cmp	r2, r3
 8010cf2:	d105      	bne.n	8010d00 <tcp_process+0x71c>
 8010cf4:	4b32      	ldr	r3, [pc, #200]	; (8010dc0 <tcp_process+0x7dc>)
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	68db      	ldr	r3, [r3, #12]
 8010cfa:	4a31      	ldr	r2, [pc, #196]	; (8010dc0 <tcp_process+0x7dc>)
 8010cfc:	6013      	str	r3, [r2, #0]
 8010cfe:	e013      	b.n	8010d28 <tcp_process+0x744>
 8010d00:	4b2f      	ldr	r3, [pc, #188]	; (8010dc0 <tcp_process+0x7dc>)
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	60fb      	str	r3, [r7, #12]
 8010d06:	e00c      	b.n	8010d22 <tcp_process+0x73e>
 8010d08:	68fb      	ldr	r3, [r7, #12]
 8010d0a:	68db      	ldr	r3, [r3, #12]
 8010d0c:	687a      	ldr	r2, [r7, #4]
 8010d0e:	429a      	cmp	r2, r3
 8010d10:	d104      	bne.n	8010d1c <tcp_process+0x738>
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	68da      	ldr	r2, [r3, #12]
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	60da      	str	r2, [r3, #12]
 8010d1a:	e005      	b.n	8010d28 <tcp_process+0x744>
 8010d1c:	68fb      	ldr	r3, [r7, #12]
 8010d1e:	68db      	ldr	r3, [r3, #12]
 8010d20:	60fb      	str	r3, [r7, #12]
 8010d22:	68fb      	ldr	r3, [r7, #12]
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d1ef      	bne.n	8010d08 <tcp_process+0x724>
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	2200      	movs	r2, #0
 8010d2c:	60da      	str	r2, [r3, #12]
 8010d2e:	4b1f      	ldr	r3, [pc, #124]	; (8010dac <tcp_process+0x7c8>)
 8010d30:	2201      	movs	r2, #1
 8010d32:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	220a      	movs	r2, #10
 8010d38:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010d3a:	4b1d      	ldr	r3, [pc, #116]	; (8010db0 <tcp_process+0x7cc>)
 8010d3c:	681a      	ldr	r2, [r3, #0]
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	60da      	str	r2, [r3, #12]
 8010d42:	4a1b      	ldr	r2, [pc, #108]	; (8010db0 <tcp_process+0x7cc>)
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	6013      	str	r3, [r2, #0]
 8010d48:	f002 fc48 	bl	80135dc <tcp_timer_needed>
      }
      break;
 8010d4c:	e026      	b.n	8010d9c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8010d4e:	6878      	ldr	r0, [r7, #4]
 8010d50:	f000 f93c 	bl	8010fcc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010d54:	4b17      	ldr	r3, [pc, #92]	; (8010db4 <tcp_process+0x7d0>)
 8010d56:	781b      	ldrb	r3, [r3, #0]
 8010d58:	f003 0310 	and.w	r3, r3, #16
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d01f      	beq.n	8010da0 <tcp_process+0x7bc>
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010d64:	4b14      	ldr	r3, [pc, #80]	; (8010db8 <tcp_process+0x7d4>)
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	429a      	cmp	r2, r3
 8010d6a:	d119      	bne.n	8010da0 <tcp_process+0x7bc>
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d115      	bne.n	8010da0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8010d74:	4b11      	ldr	r3, [pc, #68]	; (8010dbc <tcp_process+0x7d8>)
 8010d76:	781b      	ldrb	r3, [r3, #0]
 8010d78:	f043 0310 	orr.w	r3, r3, #16
 8010d7c:	b2da      	uxtb	r2, r3
 8010d7e:	4b0f      	ldr	r3, [pc, #60]	; (8010dbc <tcp_process+0x7d8>)
 8010d80:	701a      	strb	r2, [r3, #0]
      }
      break;
 8010d82:	e00d      	b.n	8010da0 <tcp_process+0x7bc>
    default:
      break;
 8010d84:	bf00      	nop
 8010d86:	e00c      	b.n	8010da2 <tcp_process+0x7be>
      break;
 8010d88:	bf00      	nop
 8010d8a:	e00a      	b.n	8010da2 <tcp_process+0x7be>
      break;
 8010d8c:	bf00      	nop
 8010d8e:	e008      	b.n	8010da2 <tcp_process+0x7be>
      break;
 8010d90:	bf00      	nop
 8010d92:	e006      	b.n	8010da2 <tcp_process+0x7be>
      break;
 8010d94:	bf00      	nop
 8010d96:	e004      	b.n	8010da2 <tcp_process+0x7be>
      break;
 8010d98:	bf00      	nop
 8010d9a:	e002      	b.n	8010da2 <tcp_process+0x7be>
      break;
 8010d9c:	bf00      	nop
 8010d9e:	e000      	b.n	8010da2 <tcp_process+0x7be>
      break;
 8010da0:	bf00      	nop
  }
  return ERR_OK;
 8010da2:	2300      	movs	r3, #0
}
 8010da4:	4618      	mov	r0, r3
 8010da6:	3724      	adds	r7, #36	; 0x24
 8010da8:	46bd      	mov	sp, r7
 8010daa:	bd90      	pop	{r4, r7, pc}
 8010dac:	2000b0f8 	.word	0x2000b0f8
 8010db0:	2000b10c 	.word	0x2000b10c
 8010db4:	20004270 	.word	0x20004270
 8010db8:	20004268 	.word	0x20004268
 8010dbc:	20004271 	.word	0x20004271
 8010dc0:	2000b0fc 	.word	0x2000b0fc

08010dc4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8010dc4:	b590      	push	{r4, r7, lr}
 8010dc6:	b085      	sub	sp, #20
 8010dc8:	af00      	add	r7, sp, #0
 8010dca:	6078      	str	r0, [r7, #4]
 8010dcc:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d106      	bne.n	8010de2 <tcp_oos_insert_segment+0x1e>
 8010dd4:	4b3b      	ldr	r3, [pc, #236]	; (8010ec4 <tcp_oos_insert_segment+0x100>)
 8010dd6:	f240 421f 	movw	r2, #1055	; 0x41f
 8010dda:	493b      	ldr	r1, [pc, #236]	; (8010ec8 <tcp_oos_insert_segment+0x104>)
 8010ddc:	483b      	ldr	r0, [pc, #236]	; (8010ecc <tcp_oos_insert_segment+0x108>)
 8010dde:	f006 f851 	bl	8016e84 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	68db      	ldr	r3, [r3, #12]
 8010de6:	899b      	ldrh	r3, [r3, #12]
 8010de8:	b29b      	uxth	r3, r3
 8010dea:	4618      	mov	r0, r3
 8010dec:	f7fb fcd0 	bl	800c790 <lwip_htons>
 8010df0:	4603      	mov	r3, r0
 8010df2:	b2db      	uxtb	r3, r3
 8010df4:	f003 0301 	and.w	r3, r3, #1
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d028      	beq.n	8010e4e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8010dfc:	6838      	ldr	r0, [r7, #0]
 8010dfe:	f7fe fa65 	bl	800f2cc <tcp_segs_free>
    next = NULL;
 8010e02:	2300      	movs	r3, #0
 8010e04:	603b      	str	r3, [r7, #0]
 8010e06:	e056      	b.n	8010eb6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010e08:	683b      	ldr	r3, [r7, #0]
 8010e0a:	68db      	ldr	r3, [r3, #12]
 8010e0c:	899b      	ldrh	r3, [r3, #12]
 8010e0e:	b29b      	uxth	r3, r3
 8010e10:	4618      	mov	r0, r3
 8010e12:	f7fb fcbd 	bl	800c790 <lwip_htons>
 8010e16:	4603      	mov	r3, r0
 8010e18:	b2db      	uxtb	r3, r3
 8010e1a:	f003 0301 	and.w	r3, r3, #1
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d00d      	beq.n	8010e3e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	68db      	ldr	r3, [r3, #12]
 8010e26:	899b      	ldrh	r3, [r3, #12]
 8010e28:	b29c      	uxth	r4, r3
 8010e2a:	2001      	movs	r0, #1
 8010e2c:	f7fb fcb0 	bl	800c790 <lwip_htons>
 8010e30:	4603      	mov	r3, r0
 8010e32:	461a      	mov	r2, r3
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	68db      	ldr	r3, [r3, #12]
 8010e38:	4322      	orrs	r2, r4
 8010e3a:	b292      	uxth	r2, r2
 8010e3c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8010e3e:	683b      	ldr	r3, [r7, #0]
 8010e40:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8010e42:	683b      	ldr	r3, [r7, #0]
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8010e48:	68f8      	ldr	r0, [r7, #12]
 8010e4a:	f7fe fa54 	bl	800f2f6 <tcp_seg_free>
    while (next &&
 8010e4e:	683b      	ldr	r3, [r7, #0]
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d00e      	beq.n	8010e72 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	891b      	ldrh	r3, [r3, #8]
 8010e58:	461a      	mov	r2, r3
 8010e5a:	4b1d      	ldr	r3, [pc, #116]	; (8010ed0 <tcp_oos_insert_segment+0x10c>)
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	441a      	add	r2, r3
 8010e60:	683b      	ldr	r3, [r7, #0]
 8010e62:	68db      	ldr	r3, [r3, #12]
 8010e64:	685b      	ldr	r3, [r3, #4]
 8010e66:	6839      	ldr	r1, [r7, #0]
 8010e68:	8909      	ldrh	r1, [r1, #8]
 8010e6a:	440b      	add	r3, r1
 8010e6c:	1ad3      	subs	r3, r2, r3
    while (next &&
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	daca      	bge.n	8010e08 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8010e72:	683b      	ldr	r3, [r7, #0]
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d01e      	beq.n	8010eb6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	891b      	ldrh	r3, [r3, #8]
 8010e7c:	461a      	mov	r2, r3
 8010e7e:	4b14      	ldr	r3, [pc, #80]	; (8010ed0 <tcp_oos_insert_segment+0x10c>)
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	441a      	add	r2, r3
 8010e84:	683b      	ldr	r3, [r7, #0]
 8010e86:	68db      	ldr	r3, [r3, #12]
 8010e88:	685b      	ldr	r3, [r3, #4]
 8010e8a:	1ad3      	subs	r3, r2, r3
    if (next &&
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	dd12      	ble.n	8010eb6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8010e90:	683b      	ldr	r3, [r7, #0]
 8010e92:	68db      	ldr	r3, [r3, #12]
 8010e94:	685b      	ldr	r3, [r3, #4]
 8010e96:	b29a      	uxth	r2, r3
 8010e98:	4b0d      	ldr	r3, [pc, #52]	; (8010ed0 <tcp_oos_insert_segment+0x10c>)
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	b29b      	uxth	r3, r3
 8010e9e:	1ad3      	subs	r3, r2, r3
 8010ea0:	b29a      	uxth	r2, r3
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	685a      	ldr	r2, [r3, #4]
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	891b      	ldrh	r3, [r3, #8]
 8010eae:	4619      	mov	r1, r3
 8010eb0:	4610      	mov	r0, r2
 8010eb2:	f7fc fe1b 	bl	800daec <pbuf_realloc>
    }
  }
  cseg->next = next;
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	683a      	ldr	r2, [r7, #0]
 8010eba:	601a      	str	r2, [r3, #0]
}
 8010ebc:	bf00      	nop
 8010ebe:	3714      	adds	r7, #20
 8010ec0:	46bd      	mov	sp, r7
 8010ec2:	bd90      	pop	{r4, r7, pc}
 8010ec4:	08019350 	.word	0x08019350
 8010ec8:	08019610 	.word	0x08019610
 8010ecc:	0801939c 	.word	0x0801939c
 8010ed0:	20004264 	.word	0x20004264

08010ed4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8010ed4:	b5b0      	push	{r4, r5, r7, lr}
 8010ed6:	b086      	sub	sp, #24
 8010ed8:	af00      	add	r7, sp, #0
 8010eda:	60f8      	str	r0, [r7, #12]
 8010edc:	60b9      	str	r1, [r7, #8]
 8010ede:	607a      	str	r2, [r7, #4]
 8010ee0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8010ee2:	e03e      	b.n	8010f62 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8010ee4:	68bb      	ldr	r3, [r7, #8]
 8010ee6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8010ee8:	68bb      	ldr	r3, [r7, #8]
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8010eee:	697b      	ldr	r3, [r7, #20]
 8010ef0:	685b      	ldr	r3, [r3, #4]
 8010ef2:	4618      	mov	r0, r3
 8010ef4:	f7fd f80e 	bl	800df14 <pbuf_clen>
 8010ef8:	4603      	mov	r3, r0
 8010efa:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010f02:	8a7a      	ldrh	r2, [r7, #18]
 8010f04:	429a      	cmp	r2, r3
 8010f06:	d906      	bls.n	8010f16 <tcp_free_acked_segments+0x42>
 8010f08:	4b2a      	ldr	r3, [pc, #168]	; (8010fb4 <tcp_free_acked_segments+0xe0>)
 8010f0a:	f240 4257 	movw	r2, #1111	; 0x457
 8010f0e:	492a      	ldr	r1, [pc, #168]	; (8010fb8 <tcp_free_acked_segments+0xe4>)
 8010f10:	482a      	ldr	r0, [pc, #168]	; (8010fbc <tcp_free_acked_segments+0xe8>)
 8010f12:	f005 ffb7 	bl	8016e84 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8010f16:	68fb      	ldr	r3, [r7, #12]
 8010f18:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8010f1c:	8a7b      	ldrh	r3, [r7, #18]
 8010f1e:	1ad3      	subs	r3, r2, r3
 8010f20:	b29a      	uxth	r2, r3
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8010f28:	697b      	ldr	r3, [r7, #20]
 8010f2a:	891a      	ldrh	r2, [r3, #8]
 8010f2c:	4b24      	ldr	r3, [pc, #144]	; (8010fc0 <tcp_free_acked_segments+0xec>)
 8010f2e:	881b      	ldrh	r3, [r3, #0]
 8010f30:	4413      	add	r3, r2
 8010f32:	b29a      	uxth	r2, r3
 8010f34:	4b22      	ldr	r3, [pc, #136]	; (8010fc0 <tcp_free_acked_segments+0xec>)
 8010f36:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8010f38:	6978      	ldr	r0, [r7, #20]
 8010f3a:	f7fe f9dc 	bl	800f2f6 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8010f3e:	68fb      	ldr	r3, [r7, #12]
 8010f40:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d00c      	beq.n	8010f62 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8010f48:	68bb      	ldr	r3, [r7, #8]
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d109      	bne.n	8010f62 <tcp_free_acked_segments+0x8e>
 8010f4e:	683b      	ldr	r3, [r7, #0]
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d106      	bne.n	8010f62 <tcp_free_acked_segments+0x8e>
 8010f54:	4b17      	ldr	r3, [pc, #92]	; (8010fb4 <tcp_free_acked_segments+0xe0>)
 8010f56:	f240 4261 	movw	r2, #1121	; 0x461
 8010f5a:	491a      	ldr	r1, [pc, #104]	; (8010fc4 <tcp_free_acked_segments+0xf0>)
 8010f5c:	4817      	ldr	r0, [pc, #92]	; (8010fbc <tcp_free_acked_segments+0xe8>)
 8010f5e:	f005 ff91 	bl	8016e84 <iprintf>
  while (seg_list != NULL &&
 8010f62:	68bb      	ldr	r3, [r7, #8]
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d020      	beq.n	8010faa <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8010f68:	68bb      	ldr	r3, [r7, #8]
 8010f6a:	68db      	ldr	r3, [r3, #12]
 8010f6c:	685b      	ldr	r3, [r3, #4]
 8010f6e:	4618      	mov	r0, r3
 8010f70:	f7fb fc23 	bl	800c7ba <lwip_htonl>
 8010f74:	4604      	mov	r4, r0
 8010f76:	68bb      	ldr	r3, [r7, #8]
 8010f78:	891b      	ldrh	r3, [r3, #8]
 8010f7a:	461d      	mov	r5, r3
 8010f7c:	68bb      	ldr	r3, [r7, #8]
 8010f7e:	68db      	ldr	r3, [r3, #12]
 8010f80:	899b      	ldrh	r3, [r3, #12]
 8010f82:	b29b      	uxth	r3, r3
 8010f84:	4618      	mov	r0, r3
 8010f86:	f7fb fc03 	bl	800c790 <lwip_htons>
 8010f8a:	4603      	mov	r3, r0
 8010f8c:	b2db      	uxtb	r3, r3
 8010f8e:	f003 0303 	and.w	r3, r3, #3
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d001      	beq.n	8010f9a <tcp_free_acked_segments+0xc6>
 8010f96:	2301      	movs	r3, #1
 8010f98:	e000      	b.n	8010f9c <tcp_free_acked_segments+0xc8>
 8010f9a:	2300      	movs	r3, #0
 8010f9c:	442b      	add	r3, r5
 8010f9e:	18e2      	adds	r2, r4, r3
 8010fa0:	4b09      	ldr	r3, [pc, #36]	; (8010fc8 <tcp_free_acked_segments+0xf4>)
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	dd9c      	ble.n	8010ee4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8010faa:	68bb      	ldr	r3, [r7, #8]
}
 8010fac:	4618      	mov	r0, r3
 8010fae:	3718      	adds	r7, #24
 8010fb0:	46bd      	mov	sp, r7
 8010fb2:	bdb0      	pop	{r4, r5, r7, pc}
 8010fb4:	08019350 	.word	0x08019350
 8010fb8:	08019638 	.word	0x08019638
 8010fbc:	0801939c 	.word	0x0801939c
 8010fc0:	2000426c 	.word	0x2000426c
 8010fc4:	08019660 	.word	0x08019660
 8010fc8:	20004268 	.word	0x20004268

08010fcc <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8010fcc:	b5b0      	push	{r4, r5, r7, lr}
 8010fce:	b094      	sub	sp, #80	; 0x50
 8010fd0:	af00      	add	r7, sp, #0
 8010fd2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8010fd4:	2300      	movs	r3, #0
 8010fd6:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d106      	bne.n	8010fec <tcp_receive+0x20>
 8010fde:	4ba6      	ldr	r3, [pc, #664]	; (8011278 <tcp_receive+0x2ac>)
 8010fe0:	f240 427b 	movw	r2, #1147	; 0x47b
 8010fe4:	49a5      	ldr	r1, [pc, #660]	; (801127c <tcp_receive+0x2b0>)
 8010fe6:	48a6      	ldr	r0, [pc, #664]	; (8011280 <tcp_receive+0x2b4>)
 8010fe8:	f005 ff4c 	bl	8016e84 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	7d1b      	ldrb	r3, [r3, #20]
 8010ff0:	2b03      	cmp	r3, #3
 8010ff2:	d806      	bhi.n	8011002 <tcp_receive+0x36>
 8010ff4:	4ba0      	ldr	r3, [pc, #640]	; (8011278 <tcp_receive+0x2ac>)
 8010ff6:	f240 427c 	movw	r2, #1148	; 0x47c
 8010ffa:	49a2      	ldr	r1, [pc, #648]	; (8011284 <tcp_receive+0x2b8>)
 8010ffc:	48a0      	ldr	r0, [pc, #640]	; (8011280 <tcp_receive+0x2b4>)
 8010ffe:	f005 ff41 	bl	8016e84 <iprintf>

  if (flags & TCP_ACK) {
 8011002:	4ba1      	ldr	r3, [pc, #644]	; (8011288 <tcp_receive+0x2bc>)
 8011004:	781b      	ldrb	r3, [r3, #0]
 8011006:	f003 0310 	and.w	r3, r3, #16
 801100a:	2b00      	cmp	r3, #0
 801100c:	f000 8263 	beq.w	80114d6 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011016:	461a      	mov	r2, r3
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801101c:	4413      	add	r3, r2
 801101e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011024:	4b99      	ldr	r3, [pc, #612]	; (801128c <tcp_receive+0x2c0>)
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	1ad3      	subs	r3, r2, r3
 801102a:	2b00      	cmp	r3, #0
 801102c:	db1b      	blt.n	8011066 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011032:	4b96      	ldr	r3, [pc, #600]	; (801128c <tcp_receive+0x2c0>)
 8011034:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011036:	429a      	cmp	r2, r3
 8011038:	d106      	bne.n	8011048 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801103e:	4b94      	ldr	r3, [pc, #592]	; (8011290 <tcp_receive+0x2c4>)
 8011040:	681b      	ldr	r3, [r3, #0]
 8011042:	1ad3      	subs	r3, r2, r3
 8011044:	2b00      	cmp	r3, #0
 8011046:	db0e      	blt.n	8011066 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801104c:	4b90      	ldr	r3, [pc, #576]	; (8011290 <tcp_receive+0x2c4>)
 801104e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011050:	429a      	cmp	r2, r3
 8011052:	d125      	bne.n	80110a0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011054:	4b8f      	ldr	r3, [pc, #572]	; (8011294 <tcp_receive+0x2c8>)
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	89db      	ldrh	r3, [r3, #14]
 801105a:	b29a      	uxth	r2, r3
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011062:	429a      	cmp	r2, r3
 8011064:	d91c      	bls.n	80110a0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8011066:	4b8b      	ldr	r3, [pc, #556]	; (8011294 <tcp_receive+0x2c8>)
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	89db      	ldrh	r3, [r3, #14]
 801106c:	b29a      	uxth	r2, r3
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011080:	429a      	cmp	r2, r3
 8011082:	d205      	bcs.n	8011090 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8011090:	4b7e      	ldr	r3, [pc, #504]	; (801128c <tcp_receive+0x2c0>)
 8011092:	681a      	ldr	r2, [r3, #0]
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8011098:	4b7d      	ldr	r3, [pc, #500]	; (8011290 <tcp_receive+0x2c4>)
 801109a:	681a      	ldr	r2, [r3, #0]
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80110a0:	4b7b      	ldr	r3, [pc, #492]	; (8011290 <tcp_receive+0x2c4>)
 80110a2:	681a      	ldr	r2, [r3, #0]
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80110a8:	1ad3      	subs	r3, r2, r3
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	dc58      	bgt.n	8011160 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80110ae:	4b7a      	ldr	r3, [pc, #488]	; (8011298 <tcp_receive+0x2cc>)
 80110b0:	881b      	ldrh	r3, [r3, #0]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d14b      	bne.n	801114e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80110ba:	687a      	ldr	r2, [r7, #4]
 80110bc:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80110c0:	4413      	add	r3, r2
 80110c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80110c4:	429a      	cmp	r2, r3
 80110c6:	d142      	bne.n	801114e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	db3d      	blt.n	801114e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80110d6:	4b6e      	ldr	r3, [pc, #440]	; (8011290 <tcp_receive+0x2c4>)
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	429a      	cmp	r2, r3
 80110dc:	d137      	bne.n	801114e <tcp_receive+0x182>
              found_dupack = 1;
 80110de:	2301      	movs	r3, #1
 80110e0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80110e8:	2bff      	cmp	r3, #255	; 0xff
 80110ea:	d007      	beq.n	80110fc <tcp_receive+0x130>
                ++pcb->dupacks;
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80110f2:	3301      	adds	r3, #1
 80110f4:	b2da      	uxtb	r2, r3
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011102:	2b03      	cmp	r3, #3
 8011104:	d91b      	bls.n	801113e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011110:	4413      	add	r3, r2
 8011112:	b29a      	uxth	r2, r3
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801111a:	429a      	cmp	r2, r3
 801111c:	d30a      	bcc.n	8011134 <tcp_receive+0x168>
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011128:	4413      	add	r3, r2
 801112a:	b29a      	uxth	r2, r3
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011132:	e004      	b.n	801113e <tcp_receive+0x172>
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801113a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011144:	2b02      	cmp	r3, #2
 8011146:	d902      	bls.n	801114e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8011148:	6878      	ldr	r0, [r7, #4]
 801114a:	f001 fee9 	bl	8012f20 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801114e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011150:	2b00      	cmp	r3, #0
 8011152:	f040 8160 	bne.w	8011416 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	2200      	movs	r2, #0
 801115a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801115e:	e15a      	b.n	8011416 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011160:	4b4b      	ldr	r3, [pc, #300]	; (8011290 <tcp_receive+0x2c4>)
 8011162:	681a      	ldr	r2, [r3, #0]
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011168:	1ad3      	subs	r3, r2, r3
 801116a:	3b01      	subs	r3, #1
 801116c:	2b00      	cmp	r3, #0
 801116e:	f2c0 814d 	blt.w	801140c <tcp_receive+0x440>
 8011172:	4b47      	ldr	r3, [pc, #284]	; (8011290 <tcp_receive+0x2c4>)
 8011174:	681a      	ldr	r2, [r3, #0]
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801117a:	1ad3      	subs	r3, r2, r3
 801117c:	2b00      	cmp	r3, #0
 801117e:	f300 8145 	bgt.w	801140c <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	8b5b      	ldrh	r3, [r3, #26]
 8011186:	f003 0304 	and.w	r3, r3, #4
 801118a:	2b00      	cmp	r3, #0
 801118c:	d010      	beq.n	80111b0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	8b5b      	ldrh	r3, [r3, #26]
 8011192:	f023 0304 	bic.w	r3, r3, #4
 8011196:	b29a      	uxth	r2, r3
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	2200      	movs	r2, #0
 80111ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	2200      	movs	r2, #0
 80111b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80111be:	10db      	asrs	r3, r3, #3
 80111c0:	b21b      	sxth	r3, r3
 80111c2:	b29a      	uxth	r2, r3
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80111ca:	b29b      	uxth	r3, r3
 80111cc:	4413      	add	r3, r2
 80111ce:	b29b      	uxth	r3, r3
 80111d0:	b21a      	sxth	r2, r3
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80111d8:	4b2d      	ldr	r3, [pc, #180]	; (8011290 <tcp_receive+0x2c4>)
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	b29a      	uxth	r2, r3
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80111e2:	b29b      	uxth	r3, r3
 80111e4:	1ad3      	subs	r3, r2, r3
 80111e6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	2200      	movs	r2, #0
 80111ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80111f0:	4b27      	ldr	r3, [pc, #156]	; (8011290 <tcp_receive+0x2c4>)
 80111f2:	681a      	ldr	r2, [r3, #0]
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	7d1b      	ldrb	r3, [r3, #20]
 80111fc:	2b03      	cmp	r3, #3
 80111fe:	f240 8096 	bls.w	801132e <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801120e:	429a      	cmp	r2, r3
 8011210:	d244      	bcs.n	801129c <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	8b5b      	ldrh	r3, [r3, #26]
 8011216:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801121a:	2b00      	cmp	r3, #0
 801121c:	d001      	beq.n	8011222 <tcp_receive+0x256>
 801121e:	2301      	movs	r3, #1
 8011220:	e000      	b.n	8011224 <tcp_receive+0x258>
 8011222:	2302      	movs	r3, #2
 8011224:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8011228:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801122c:	b29a      	uxth	r2, r3
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011232:	fb12 f303 	smulbb	r3, r2, r3
 8011236:	b29b      	uxth	r3, r3
 8011238:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801123a:	4293      	cmp	r3, r2
 801123c:	bf28      	it	cs
 801123e:	4613      	movcs	r3, r2
 8011240:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011248:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801124a:	4413      	add	r3, r2
 801124c:	b29a      	uxth	r2, r3
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011254:	429a      	cmp	r2, r3
 8011256:	d309      	bcc.n	801126c <tcp_receive+0x2a0>
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801125e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011260:	4413      	add	r3, r2
 8011262:	b29a      	uxth	r2, r3
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801126a:	e060      	b.n	801132e <tcp_receive+0x362>
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011272:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011276:	e05a      	b.n	801132e <tcp_receive+0x362>
 8011278:	08019350 	.word	0x08019350
 801127c:	08019680 	.word	0x08019680
 8011280:	0801939c 	.word	0x0801939c
 8011284:	0801969c 	.word	0x0801969c
 8011288:	20004270 	.word	0x20004270
 801128c:	20004264 	.word	0x20004264
 8011290:	20004268 	.word	0x20004268
 8011294:	20004254 	.word	0x20004254
 8011298:	2000426e 	.word	0x2000426e
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80112a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80112a4:	4413      	add	r3, r2
 80112a6:	b29a      	uxth	r2, r3
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80112ae:	429a      	cmp	r2, r3
 80112b0:	d309      	bcc.n	80112c6 <tcp_receive+0x2fa>
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80112b8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80112ba:	4413      	add	r3, r2
 80112bc:	b29a      	uxth	r2, r3
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80112c4:	e004      	b.n	80112d0 <tcp_receive+0x304>
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80112cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80112dc:	429a      	cmp	r2, r3
 80112de:	d326      	bcc.n	801132e <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80112ec:	1ad3      	subs	r3, r2, r3
 80112ee:	b29a      	uxth	r2, r3
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011300:	4413      	add	r3, r2
 8011302:	b29a      	uxth	r2, r3
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801130a:	429a      	cmp	r2, r3
 801130c:	d30a      	bcc.n	8011324 <tcp_receive+0x358>
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011318:	4413      	add	r3, r2
 801131a:	b29a      	uxth	r2, r3
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011322:	e004      	b.n	801132e <tcp_receive+0x362>
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801132a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011336:	4a98      	ldr	r2, [pc, #608]	; (8011598 <tcp_receive+0x5cc>)
 8011338:	6878      	ldr	r0, [r7, #4]
 801133a:	f7ff fdcb 	bl	8010ed4 <tcp_free_acked_segments>
 801133e:	4602      	mov	r2, r0
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801134c:	4a93      	ldr	r2, [pc, #588]	; (801159c <tcp_receive+0x5d0>)
 801134e:	6878      	ldr	r0, [r7, #4]
 8011350:	f7ff fdc0 	bl	8010ed4 <tcp_free_acked_segments>
 8011354:	4602      	mov	r2, r0
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801135e:	2b00      	cmp	r3, #0
 8011360:	d104      	bne.n	801136c <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011368:	861a      	strh	r2, [r3, #48]	; 0x30
 801136a:	e002      	b.n	8011372 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	2200      	movs	r2, #0
 8011370:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	2200      	movs	r2, #0
 8011376:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801137c:	2b00      	cmp	r3, #0
 801137e:	d103      	bne.n	8011388 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	2200      	movs	r2, #0
 8011384:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801138e:	4b84      	ldr	r3, [pc, #528]	; (80115a0 <tcp_receive+0x5d4>)
 8011390:	881b      	ldrh	r3, [r3, #0]
 8011392:	4413      	add	r3, r2
 8011394:	b29a      	uxth	r2, r3
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	8b5b      	ldrh	r3, [r3, #26]
 80113a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d035      	beq.n	8011414 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d118      	bne.n	80113e2 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d00c      	beq.n	80113d2 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80113c0:	68db      	ldr	r3, [r3, #12]
 80113c2:	685b      	ldr	r3, [r3, #4]
 80113c4:	4618      	mov	r0, r3
 80113c6:	f7fb f9f8 	bl	800c7ba <lwip_htonl>
 80113ca:	4603      	mov	r3, r0
 80113cc:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	dc20      	bgt.n	8011414 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	8b5b      	ldrh	r3, [r3, #26]
 80113d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80113da:	b29a      	uxth	r2, r3
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80113e0:	e018      	b.n	8011414 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80113ea:	68db      	ldr	r3, [r3, #12]
 80113ec:	685b      	ldr	r3, [r3, #4]
 80113ee:	4618      	mov	r0, r3
 80113f0:	f7fb f9e3 	bl	800c7ba <lwip_htonl>
 80113f4:	4603      	mov	r3, r0
 80113f6:	1ae3      	subs	r3, r4, r3
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	dc0b      	bgt.n	8011414 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	8b5b      	ldrh	r3, [r3, #26]
 8011400:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011404:	b29a      	uxth	r2, r3
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801140a:	e003      	b.n	8011414 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801140c:	6878      	ldr	r0, [r7, #4]
 801140e:	f001 ff75 	bl	80132fc <tcp_send_empty_ack>
 8011412:	e000      	b.n	8011416 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011414:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801141a:	2b00      	cmp	r3, #0
 801141c:	d05b      	beq.n	80114d6 <tcp_receive+0x50a>
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011422:	4b60      	ldr	r3, [pc, #384]	; (80115a4 <tcp_receive+0x5d8>)
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	1ad3      	subs	r3, r2, r3
 8011428:	2b00      	cmp	r3, #0
 801142a:	da54      	bge.n	80114d6 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801142c:	4b5e      	ldr	r3, [pc, #376]	; (80115a8 <tcp_receive+0x5dc>)
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	b29a      	uxth	r2, r3
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011436:	b29b      	uxth	r3, r3
 8011438:	1ad3      	subs	r3, r2, r3
 801143a:	b29b      	uxth	r3, r3
 801143c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8011440:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801144a:	10db      	asrs	r3, r3, #3
 801144c:	b21b      	sxth	r3, r3
 801144e:	b29b      	uxth	r3, r3
 8011450:	1ad3      	subs	r3, r2, r3
 8011452:	b29b      	uxth	r3, r3
 8011454:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801145e:	b29a      	uxth	r2, r3
 8011460:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011464:	4413      	add	r3, r2
 8011466:	b29b      	uxth	r3, r3
 8011468:	b21a      	sxth	r2, r3
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801146e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011472:	2b00      	cmp	r3, #0
 8011474:	da05      	bge.n	8011482 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8011476:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801147a:	425b      	negs	r3, r3
 801147c:	b29b      	uxth	r3, r3
 801147e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8011482:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801148c:	109b      	asrs	r3, r3, #2
 801148e:	b21b      	sxth	r3, r3
 8011490:	b29b      	uxth	r3, r3
 8011492:	1ad3      	subs	r3, r2, r3
 8011494:	b29b      	uxth	r3, r3
 8011496:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80114a0:	b29a      	uxth	r2, r3
 80114a2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80114a6:	4413      	add	r3, r2
 80114a8:	b29b      	uxth	r3, r3
 80114aa:	b21a      	sxth	r2, r3
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80114b6:	10db      	asrs	r3, r3, #3
 80114b8:	b21b      	sxth	r3, r3
 80114ba:	b29a      	uxth	r2, r3
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80114c2:	b29b      	uxth	r3, r3
 80114c4:	4413      	add	r3, r2
 80114c6:	b29b      	uxth	r3, r3
 80114c8:	b21a      	sxth	r2, r3
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	2200      	movs	r2, #0
 80114d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80114d6:	4b35      	ldr	r3, [pc, #212]	; (80115ac <tcp_receive+0x5e0>)
 80114d8:	881b      	ldrh	r3, [r3, #0]
 80114da:	2b00      	cmp	r3, #0
 80114dc:	f000 84e1 	beq.w	8011ea2 <tcp_receive+0xed6>
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	7d1b      	ldrb	r3, [r3, #20]
 80114e4:	2b06      	cmp	r3, #6
 80114e6:	f200 84dc 	bhi.w	8011ea2 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80114ee:	4b30      	ldr	r3, [pc, #192]	; (80115b0 <tcp_receive+0x5e4>)
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	1ad3      	subs	r3, r2, r3
 80114f4:	3b01      	subs	r3, #1
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	f2c0 808e 	blt.w	8011618 <tcp_receive+0x64c>
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011500:	4b2a      	ldr	r3, [pc, #168]	; (80115ac <tcp_receive+0x5e0>)
 8011502:	881b      	ldrh	r3, [r3, #0]
 8011504:	4619      	mov	r1, r3
 8011506:	4b2a      	ldr	r3, [pc, #168]	; (80115b0 <tcp_receive+0x5e4>)
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	440b      	add	r3, r1
 801150c:	1ad3      	subs	r3, r2, r3
 801150e:	3301      	adds	r3, #1
 8011510:	2b00      	cmp	r3, #0
 8011512:	f300 8081 	bgt.w	8011618 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8011516:	4b27      	ldr	r3, [pc, #156]	; (80115b4 <tcp_receive+0x5e8>)
 8011518:	685b      	ldr	r3, [r3, #4]
 801151a:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011520:	4b23      	ldr	r3, [pc, #140]	; (80115b0 <tcp_receive+0x5e4>)
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	1ad3      	subs	r3, r2, r3
 8011526:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8011528:	4b22      	ldr	r3, [pc, #136]	; (80115b4 <tcp_receive+0x5e8>)
 801152a:	685b      	ldr	r3, [r3, #4]
 801152c:	2b00      	cmp	r3, #0
 801152e:	d106      	bne.n	801153e <tcp_receive+0x572>
 8011530:	4b21      	ldr	r3, [pc, #132]	; (80115b8 <tcp_receive+0x5ec>)
 8011532:	f240 5294 	movw	r2, #1428	; 0x594
 8011536:	4921      	ldr	r1, [pc, #132]	; (80115bc <tcp_receive+0x5f0>)
 8011538:	4821      	ldr	r0, [pc, #132]	; (80115c0 <tcp_receive+0x5f4>)
 801153a:	f005 fca3 	bl	8016e84 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801153e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011540:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8011544:	4293      	cmp	r3, r2
 8011546:	d906      	bls.n	8011556 <tcp_receive+0x58a>
 8011548:	4b1b      	ldr	r3, [pc, #108]	; (80115b8 <tcp_receive+0x5ec>)
 801154a:	f240 5295 	movw	r2, #1429	; 0x595
 801154e:	491d      	ldr	r1, [pc, #116]	; (80115c4 <tcp_receive+0x5f8>)
 8011550:	481b      	ldr	r0, [pc, #108]	; (80115c0 <tcp_receive+0x5f4>)
 8011552:	f005 fc97 	bl	8016e84 <iprintf>
      off = (u16_t)off32;
 8011556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011558:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801155c:	4b15      	ldr	r3, [pc, #84]	; (80115b4 <tcp_receive+0x5e8>)
 801155e:	685b      	ldr	r3, [r3, #4]
 8011560:	891b      	ldrh	r3, [r3, #8]
 8011562:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011566:	429a      	cmp	r2, r3
 8011568:	d906      	bls.n	8011578 <tcp_receive+0x5ac>
 801156a:	4b13      	ldr	r3, [pc, #76]	; (80115b8 <tcp_receive+0x5ec>)
 801156c:	f240 5297 	movw	r2, #1431	; 0x597
 8011570:	4915      	ldr	r1, [pc, #84]	; (80115c8 <tcp_receive+0x5fc>)
 8011572:	4813      	ldr	r0, [pc, #76]	; (80115c0 <tcp_receive+0x5f4>)
 8011574:	f005 fc86 	bl	8016e84 <iprintf>
      inseg.len -= off;
 8011578:	4b0e      	ldr	r3, [pc, #56]	; (80115b4 <tcp_receive+0x5e8>)
 801157a:	891a      	ldrh	r2, [r3, #8]
 801157c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011580:	1ad3      	subs	r3, r2, r3
 8011582:	b29a      	uxth	r2, r3
 8011584:	4b0b      	ldr	r3, [pc, #44]	; (80115b4 <tcp_receive+0x5e8>)
 8011586:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8011588:	4b0a      	ldr	r3, [pc, #40]	; (80115b4 <tcp_receive+0x5e8>)
 801158a:	685b      	ldr	r3, [r3, #4]
 801158c:	891a      	ldrh	r2, [r3, #8]
 801158e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011592:	1ad3      	subs	r3, r2, r3
 8011594:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8011596:	e029      	b.n	80115ec <tcp_receive+0x620>
 8011598:	080196b8 	.word	0x080196b8
 801159c:	080196c0 	.word	0x080196c0
 80115a0:	2000426c 	.word	0x2000426c
 80115a4:	20004268 	.word	0x20004268
 80115a8:	2000b100 	.word	0x2000b100
 80115ac:	2000426e 	.word	0x2000426e
 80115b0:	20004264 	.word	0x20004264
 80115b4:	20004244 	.word	0x20004244
 80115b8:	08019350 	.word	0x08019350
 80115bc:	080196c8 	.word	0x080196c8
 80115c0:	0801939c 	.word	0x0801939c
 80115c4:	080196d8 	.word	0x080196d8
 80115c8:	080196e8 	.word	0x080196e8
        off -= p->len;
 80115cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80115ce:	895b      	ldrh	r3, [r3, #10]
 80115d0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80115d4:	1ad3      	subs	r3, r2, r3
 80115d6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80115da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80115dc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80115de:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80115e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80115e2:	2200      	movs	r2, #0
 80115e4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80115e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80115ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80115ee:	895b      	ldrh	r3, [r3, #10]
 80115f0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80115f4:	429a      	cmp	r2, r3
 80115f6:	d8e9      	bhi.n	80115cc <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80115f8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80115fc:	4619      	mov	r1, r3
 80115fe:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8011600:	f7fc fb74 	bl	800dcec <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011608:	4a91      	ldr	r2, [pc, #580]	; (8011850 <tcp_receive+0x884>)
 801160a:	6013      	str	r3, [r2, #0]
 801160c:	4b91      	ldr	r3, [pc, #580]	; (8011854 <tcp_receive+0x888>)
 801160e:	68db      	ldr	r3, [r3, #12]
 8011610:	4a8f      	ldr	r2, [pc, #572]	; (8011850 <tcp_receive+0x884>)
 8011612:	6812      	ldr	r2, [r2, #0]
 8011614:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011616:	e00d      	b.n	8011634 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8011618:	4b8d      	ldr	r3, [pc, #564]	; (8011850 <tcp_receive+0x884>)
 801161a:	681a      	ldr	r2, [r3, #0]
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011620:	1ad3      	subs	r3, r2, r3
 8011622:	2b00      	cmp	r3, #0
 8011624:	da06      	bge.n	8011634 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	8b5b      	ldrh	r3, [r3, #26]
 801162a:	f043 0302 	orr.w	r3, r3, #2
 801162e:	b29a      	uxth	r2, r3
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011634:	4b86      	ldr	r3, [pc, #536]	; (8011850 <tcp_receive+0x884>)
 8011636:	681a      	ldr	r2, [r3, #0]
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801163c:	1ad3      	subs	r3, r2, r3
 801163e:	2b00      	cmp	r3, #0
 8011640:	f2c0 842a 	blt.w	8011e98 <tcp_receive+0xecc>
 8011644:	4b82      	ldr	r3, [pc, #520]	; (8011850 <tcp_receive+0x884>)
 8011646:	681a      	ldr	r2, [r3, #0]
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801164c:	6879      	ldr	r1, [r7, #4]
 801164e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011650:	440b      	add	r3, r1
 8011652:	1ad3      	subs	r3, r2, r3
 8011654:	3301      	adds	r3, #1
 8011656:	2b00      	cmp	r3, #0
 8011658:	f300 841e 	bgt.w	8011e98 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011660:	4b7b      	ldr	r3, [pc, #492]	; (8011850 <tcp_receive+0x884>)
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	429a      	cmp	r2, r3
 8011666:	f040 829a 	bne.w	8011b9e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801166a:	4b7a      	ldr	r3, [pc, #488]	; (8011854 <tcp_receive+0x888>)
 801166c:	891c      	ldrh	r4, [r3, #8]
 801166e:	4b79      	ldr	r3, [pc, #484]	; (8011854 <tcp_receive+0x888>)
 8011670:	68db      	ldr	r3, [r3, #12]
 8011672:	899b      	ldrh	r3, [r3, #12]
 8011674:	b29b      	uxth	r3, r3
 8011676:	4618      	mov	r0, r3
 8011678:	f7fb f88a 	bl	800c790 <lwip_htons>
 801167c:	4603      	mov	r3, r0
 801167e:	b2db      	uxtb	r3, r3
 8011680:	f003 0303 	and.w	r3, r3, #3
 8011684:	2b00      	cmp	r3, #0
 8011686:	d001      	beq.n	801168c <tcp_receive+0x6c0>
 8011688:	2301      	movs	r3, #1
 801168a:	e000      	b.n	801168e <tcp_receive+0x6c2>
 801168c:	2300      	movs	r3, #0
 801168e:	4423      	add	r3, r4
 8011690:	b29a      	uxth	r2, r3
 8011692:	4b71      	ldr	r3, [pc, #452]	; (8011858 <tcp_receive+0x88c>)
 8011694:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801169a:	4b6f      	ldr	r3, [pc, #444]	; (8011858 <tcp_receive+0x88c>)
 801169c:	881b      	ldrh	r3, [r3, #0]
 801169e:	429a      	cmp	r2, r3
 80116a0:	d275      	bcs.n	801178e <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80116a2:	4b6c      	ldr	r3, [pc, #432]	; (8011854 <tcp_receive+0x888>)
 80116a4:	68db      	ldr	r3, [r3, #12]
 80116a6:	899b      	ldrh	r3, [r3, #12]
 80116a8:	b29b      	uxth	r3, r3
 80116aa:	4618      	mov	r0, r3
 80116ac:	f7fb f870 	bl	800c790 <lwip_htons>
 80116b0:	4603      	mov	r3, r0
 80116b2:	b2db      	uxtb	r3, r3
 80116b4:	f003 0301 	and.w	r3, r3, #1
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d01f      	beq.n	80116fc <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80116bc:	4b65      	ldr	r3, [pc, #404]	; (8011854 <tcp_receive+0x888>)
 80116be:	68db      	ldr	r3, [r3, #12]
 80116c0:	899b      	ldrh	r3, [r3, #12]
 80116c2:	b29b      	uxth	r3, r3
 80116c4:	b21b      	sxth	r3, r3
 80116c6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80116ca:	b21c      	sxth	r4, r3
 80116cc:	4b61      	ldr	r3, [pc, #388]	; (8011854 <tcp_receive+0x888>)
 80116ce:	68db      	ldr	r3, [r3, #12]
 80116d0:	899b      	ldrh	r3, [r3, #12]
 80116d2:	b29b      	uxth	r3, r3
 80116d4:	4618      	mov	r0, r3
 80116d6:	f7fb f85b 	bl	800c790 <lwip_htons>
 80116da:	4603      	mov	r3, r0
 80116dc:	b2db      	uxtb	r3, r3
 80116de:	b29b      	uxth	r3, r3
 80116e0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80116e4:	b29b      	uxth	r3, r3
 80116e6:	4618      	mov	r0, r3
 80116e8:	f7fb f852 	bl	800c790 <lwip_htons>
 80116ec:	4603      	mov	r3, r0
 80116ee:	b21b      	sxth	r3, r3
 80116f0:	4323      	orrs	r3, r4
 80116f2:	b21a      	sxth	r2, r3
 80116f4:	4b57      	ldr	r3, [pc, #348]	; (8011854 <tcp_receive+0x888>)
 80116f6:	68db      	ldr	r3, [r3, #12]
 80116f8:	b292      	uxth	r2, r2
 80116fa:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011700:	4b54      	ldr	r3, [pc, #336]	; (8011854 <tcp_receive+0x888>)
 8011702:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011704:	4b53      	ldr	r3, [pc, #332]	; (8011854 <tcp_receive+0x888>)
 8011706:	68db      	ldr	r3, [r3, #12]
 8011708:	899b      	ldrh	r3, [r3, #12]
 801170a:	b29b      	uxth	r3, r3
 801170c:	4618      	mov	r0, r3
 801170e:	f7fb f83f 	bl	800c790 <lwip_htons>
 8011712:	4603      	mov	r3, r0
 8011714:	b2db      	uxtb	r3, r3
 8011716:	f003 0302 	and.w	r3, r3, #2
 801171a:	2b00      	cmp	r3, #0
 801171c:	d005      	beq.n	801172a <tcp_receive+0x75e>
            inseg.len -= 1;
 801171e:	4b4d      	ldr	r3, [pc, #308]	; (8011854 <tcp_receive+0x888>)
 8011720:	891b      	ldrh	r3, [r3, #8]
 8011722:	3b01      	subs	r3, #1
 8011724:	b29a      	uxth	r2, r3
 8011726:	4b4b      	ldr	r3, [pc, #300]	; (8011854 <tcp_receive+0x888>)
 8011728:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801172a:	4b4a      	ldr	r3, [pc, #296]	; (8011854 <tcp_receive+0x888>)
 801172c:	685b      	ldr	r3, [r3, #4]
 801172e:	4a49      	ldr	r2, [pc, #292]	; (8011854 <tcp_receive+0x888>)
 8011730:	8912      	ldrh	r2, [r2, #8]
 8011732:	4611      	mov	r1, r2
 8011734:	4618      	mov	r0, r3
 8011736:	f7fc f9d9 	bl	800daec <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801173a:	4b46      	ldr	r3, [pc, #280]	; (8011854 <tcp_receive+0x888>)
 801173c:	891c      	ldrh	r4, [r3, #8]
 801173e:	4b45      	ldr	r3, [pc, #276]	; (8011854 <tcp_receive+0x888>)
 8011740:	68db      	ldr	r3, [r3, #12]
 8011742:	899b      	ldrh	r3, [r3, #12]
 8011744:	b29b      	uxth	r3, r3
 8011746:	4618      	mov	r0, r3
 8011748:	f7fb f822 	bl	800c790 <lwip_htons>
 801174c:	4603      	mov	r3, r0
 801174e:	b2db      	uxtb	r3, r3
 8011750:	f003 0303 	and.w	r3, r3, #3
 8011754:	2b00      	cmp	r3, #0
 8011756:	d001      	beq.n	801175c <tcp_receive+0x790>
 8011758:	2301      	movs	r3, #1
 801175a:	e000      	b.n	801175e <tcp_receive+0x792>
 801175c:	2300      	movs	r3, #0
 801175e:	4423      	add	r3, r4
 8011760:	b29a      	uxth	r2, r3
 8011762:	4b3d      	ldr	r3, [pc, #244]	; (8011858 <tcp_receive+0x88c>)
 8011764:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011766:	4b3c      	ldr	r3, [pc, #240]	; (8011858 <tcp_receive+0x88c>)
 8011768:	881b      	ldrh	r3, [r3, #0]
 801176a:	461a      	mov	r2, r3
 801176c:	4b38      	ldr	r3, [pc, #224]	; (8011850 <tcp_receive+0x884>)
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	441a      	add	r2, r3
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011776:	6879      	ldr	r1, [r7, #4]
 8011778:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801177a:	440b      	add	r3, r1
 801177c:	429a      	cmp	r2, r3
 801177e:	d006      	beq.n	801178e <tcp_receive+0x7c2>
 8011780:	4b36      	ldr	r3, [pc, #216]	; (801185c <tcp_receive+0x890>)
 8011782:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8011786:	4936      	ldr	r1, [pc, #216]	; (8011860 <tcp_receive+0x894>)
 8011788:	4836      	ldr	r0, [pc, #216]	; (8011864 <tcp_receive+0x898>)
 801178a:	f005 fb7b 	bl	8016e84 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011792:	2b00      	cmp	r3, #0
 8011794:	f000 80e7 	beq.w	8011966 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011798:	4b2e      	ldr	r3, [pc, #184]	; (8011854 <tcp_receive+0x888>)
 801179a:	68db      	ldr	r3, [r3, #12]
 801179c:	899b      	ldrh	r3, [r3, #12]
 801179e:	b29b      	uxth	r3, r3
 80117a0:	4618      	mov	r0, r3
 80117a2:	f7fa fff5 	bl	800c790 <lwip_htons>
 80117a6:	4603      	mov	r3, r0
 80117a8:	b2db      	uxtb	r3, r3
 80117aa:	f003 0301 	and.w	r3, r3, #1
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d010      	beq.n	80117d4 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80117b2:	e00a      	b.n	80117ca <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80117b8:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80117be:	681a      	ldr	r2, [r3, #0]
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80117c4:	68f8      	ldr	r0, [r7, #12]
 80117c6:	f7fd fd96 	bl	800f2f6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d1f0      	bne.n	80117b4 <tcp_receive+0x7e8>
 80117d2:	e0c8      	b.n	8011966 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80117d8:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80117da:	e052      	b.n	8011882 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80117dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117de:	68db      	ldr	r3, [r3, #12]
 80117e0:	899b      	ldrh	r3, [r3, #12]
 80117e2:	b29b      	uxth	r3, r3
 80117e4:	4618      	mov	r0, r3
 80117e6:	f7fa ffd3 	bl	800c790 <lwip_htons>
 80117ea:	4603      	mov	r3, r0
 80117ec:	b2db      	uxtb	r3, r3
 80117ee:	f003 0301 	and.w	r3, r3, #1
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d03d      	beq.n	8011872 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80117f6:	4b17      	ldr	r3, [pc, #92]	; (8011854 <tcp_receive+0x888>)
 80117f8:	68db      	ldr	r3, [r3, #12]
 80117fa:	899b      	ldrh	r3, [r3, #12]
 80117fc:	b29b      	uxth	r3, r3
 80117fe:	4618      	mov	r0, r3
 8011800:	f7fa ffc6 	bl	800c790 <lwip_htons>
 8011804:	4603      	mov	r3, r0
 8011806:	b2db      	uxtb	r3, r3
 8011808:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801180c:	2b00      	cmp	r3, #0
 801180e:	d130      	bne.n	8011872 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8011810:	4b10      	ldr	r3, [pc, #64]	; (8011854 <tcp_receive+0x888>)
 8011812:	68db      	ldr	r3, [r3, #12]
 8011814:	899b      	ldrh	r3, [r3, #12]
 8011816:	b29c      	uxth	r4, r3
 8011818:	2001      	movs	r0, #1
 801181a:	f7fa ffb9 	bl	800c790 <lwip_htons>
 801181e:	4603      	mov	r3, r0
 8011820:	461a      	mov	r2, r3
 8011822:	4b0c      	ldr	r3, [pc, #48]	; (8011854 <tcp_receive+0x888>)
 8011824:	68db      	ldr	r3, [r3, #12]
 8011826:	4322      	orrs	r2, r4
 8011828:	b292      	uxth	r2, r2
 801182a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801182c:	4b09      	ldr	r3, [pc, #36]	; (8011854 <tcp_receive+0x888>)
 801182e:	891c      	ldrh	r4, [r3, #8]
 8011830:	4b08      	ldr	r3, [pc, #32]	; (8011854 <tcp_receive+0x888>)
 8011832:	68db      	ldr	r3, [r3, #12]
 8011834:	899b      	ldrh	r3, [r3, #12]
 8011836:	b29b      	uxth	r3, r3
 8011838:	4618      	mov	r0, r3
 801183a:	f7fa ffa9 	bl	800c790 <lwip_htons>
 801183e:	4603      	mov	r3, r0
 8011840:	b2db      	uxtb	r3, r3
 8011842:	f003 0303 	and.w	r3, r3, #3
 8011846:	2b00      	cmp	r3, #0
 8011848:	d00e      	beq.n	8011868 <tcp_receive+0x89c>
 801184a:	2301      	movs	r3, #1
 801184c:	e00d      	b.n	801186a <tcp_receive+0x89e>
 801184e:	bf00      	nop
 8011850:	20004264 	.word	0x20004264
 8011854:	20004244 	.word	0x20004244
 8011858:	2000426e 	.word	0x2000426e
 801185c:	08019350 	.word	0x08019350
 8011860:	080196f8 	.word	0x080196f8
 8011864:	0801939c 	.word	0x0801939c
 8011868:	2300      	movs	r3, #0
 801186a:	4423      	add	r3, r4
 801186c:	b29a      	uxth	r2, r3
 801186e:	4b98      	ldr	r3, [pc, #608]	; (8011ad0 <tcp_receive+0xb04>)
 8011870:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8011872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011874:	613b      	str	r3, [r7, #16]
              next = next->next;
 8011876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 801187c:	6938      	ldr	r0, [r7, #16]
 801187e:	f7fd fd3a 	bl	800f2f6 <tcp_seg_free>
            while (next &&
 8011882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011884:	2b00      	cmp	r3, #0
 8011886:	d00e      	beq.n	80118a6 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8011888:	4b91      	ldr	r3, [pc, #580]	; (8011ad0 <tcp_receive+0xb04>)
 801188a:	881b      	ldrh	r3, [r3, #0]
 801188c:	461a      	mov	r2, r3
 801188e:	4b91      	ldr	r3, [pc, #580]	; (8011ad4 <tcp_receive+0xb08>)
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	441a      	add	r2, r3
 8011894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011896:	68db      	ldr	r3, [r3, #12]
 8011898:	685b      	ldr	r3, [r3, #4]
 801189a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801189c:	8909      	ldrh	r1, [r1, #8]
 801189e:	440b      	add	r3, r1
 80118a0:	1ad3      	subs	r3, r2, r3
            while (next &&
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	da9a      	bge.n	80117dc <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80118a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d059      	beq.n	8011960 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80118ac:	4b88      	ldr	r3, [pc, #544]	; (8011ad0 <tcp_receive+0xb04>)
 80118ae:	881b      	ldrh	r3, [r3, #0]
 80118b0:	461a      	mov	r2, r3
 80118b2:	4b88      	ldr	r3, [pc, #544]	; (8011ad4 <tcp_receive+0xb08>)
 80118b4:	681b      	ldr	r3, [r3, #0]
 80118b6:	441a      	add	r2, r3
 80118b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118ba:	68db      	ldr	r3, [r3, #12]
 80118bc:	685b      	ldr	r3, [r3, #4]
 80118be:	1ad3      	subs	r3, r2, r3
            if (next &&
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	dd4d      	ble.n	8011960 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80118c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118c6:	68db      	ldr	r3, [r3, #12]
 80118c8:	685b      	ldr	r3, [r3, #4]
 80118ca:	b29a      	uxth	r2, r3
 80118cc:	4b81      	ldr	r3, [pc, #516]	; (8011ad4 <tcp_receive+0xb08>)
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	b29b      	uxth	r3, r3
 80118d2:	1ad3      	subs	r3, r2, r3
 80118d4:	b29a      	uxth	r2, r3
 80118d6:	4b80      	ldr	r3, [pc, #512]	; (8011ad8 <tcp_receive+0xb0c>)
 80118d8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80118da:	4b7f      	ldr	r3, [pc, #508]	; (8011ad8 <tcp_receive+0xb0c>)
 80118dc:	68db      	ldr	r3, [r3, #12]
 80118de:	899b      	ldrh	r3, [r3, #12]
 80118e0:	b29b      	uxth	r3, r3
 80118e2:	4618      	mov	r0, r3
 80118e4:	f7fa ff54 	bl	800c790 <lwip_htons>
 80118e8:	4603      	mov	r3, r0
 80118ea:	b2db      	uxtb	r3, r3
 80118ec:	f003 0302 	and.w	r3, r3, #2
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d005      	beq.n	8011900 <tcp_receive+0x934>
                inseg.len -= 1;
 80118f4:	4b78      	ldr	r3, [pc, #480]	; (8011ad8 <tcp_receive+0xb0c>)
 80118f6:	891b      	ldrh	r3, [r3, #8]
 80118f8:	3b01      	subs	r3, #1
 80118fa:	b29a      	uxth	r2, r3
 80118fc:	4b76      	ldr	r3, [pc, #472]	; (8011ad8 <tcp_receive+0xb0c>)
 80118fe:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8011900:	4b75      	ldr	r3, [pc, #468]	; (8011ad8 <tcp_receive+0xb0c>)
 8011902:	685b      	ldr	r3, [r3, #4]
 8011904:	4a74      	ldr	r2, [pc, #464]	; (8011ad8 <tcp_receive+0xb0c>)
 8011906:	8912      	ldrh	r2, [r2, #8]
 8011908:	4611      	mov	r1, r2
 801190a:	4618      	mov	r0, r3
 801190c:	f7fc f8ee 	bl	800daec <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8011910:	4b71      	ldr	r3, [pc, #452]	; (8011ad8 <tcp_receive+0xb0c>)
 8011912:	891c      	ldrh	r4, [r3, #8]
 8011914:	4b70      	ldr	r3, [pc, #448]	; (8011ad8 <tcp_receive+0xb0c>)
 8011916:	68db      	ldr	r3, [r3, #12]
 8011918:	899b      	ldrh	r3, [r3, #12]
 801191a:	b29b      	uxth	r3, r3
 801191c:	4618      	mov	r0, r3
 801191e:	f7fa ff37 	bl	800c790 <lwip_htons>
 8011922:	4603      	mov	r3, r0
 8011924:	b2db      	uxtb	r3, r3
 8011926:	f003 0303 	and.w	r3, r3, #3
 801192a:	2b00      	cmp	r3, #0
 801192c:	d001      	beq.n	8011932 <tcp_receive+0x966>
 801192e:	2301      	movs	r3, #1
 8011930:	e000      	b.n	8011934 <tcp_receive+0x968>
 8011932:	2300      	movs	r3, #0
 8011934:	4423      	add	r3, r4
 8011936:	b29a      	uxth	r2, r3
 8011938:	4b65      	ldr	r3, [pc, #404]	; (8011ad0 <tcp_receive+0xb04>)
 801193a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801193c:	4b64      	ldr	r3, [pc, #400]	; (8011ad0 <tcp_receive+0xb04>)
 801193e:	881b      	ldrh	r3, [r3, #0]
 8011940:	461a      	mov	r2, r3
 8011942:	4b64      	ldr	r3, [pc, #400]	; (8011ad4 <tcp_receive+0xb08>)
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	441a      	add	r2, r3
 8011948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801194a:	68db      	ldr	r3, [r3, #12]
 801194c:	685b      	ldr	r3, [r3, #4]
 801194e:	429a      	cmp	r2, r3
 8011950:	d006      	beq.n	8011960 <tcp_receive+0x994>
 8011952:	4b62      	ldr	r3, [pc, #392]	; (8011adc <tcp_receive+0xb10>)
 8011954:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8011958:	4961      	ldr	r1, [pc, #388]	; (8011ae0 <tcp_receive+0xb14>)
 801195a:	4862      	ldr	r0, [pc, #392]	; (8011ae4 <tcp_receive+0xb18>)
 801195c:	f005 fa92 	bl	8016e84 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011964:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8011966:	4b5a      	ldr	r3, [pc, #360]	; (8011ad0 <tcp_receive+0xb04>)
 8011968:	881b      	ldrh	r3, [r3, #0]
 801196a:	461a      	mov	r2, r3
 801196c:	4b59      	ldr	r3, [pc, #356]	; (8011ad4 <tcp_receive+0xb08>)
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	441a      	add	r2, r3
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801197a:	4b55      	ldr	r3, [pc, #340]	; (8011ad0 <tcp_receive+0xb04>)
 801197c:	881b      	ldrh	r3, [r3, #0]
 801197e:	429a      	cmp	r2, r3
 8011980:	d206      	bcs.n	8011990 <tcp_receive+0x9c4>
 8011982:	4b56      	ldr	r3, [pc, #344]	; (8011adc <tcp_receive+0xb10>)
 8011984:	f240 6207 	movw	r2, #1543	; 0x607
 8011988:	4957      	ldr	r1, [pc, #348]	; (8011ae8 <tcp_receive+0xb1c>)
 801198a:	4856      	ldr	r0, [pc, #344]	; (8011ae4 <tcp_receive+0xb18>)
 801198c:	f005 fa7a 	bl	8016e84 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011994:	4b4e      	ldr	r3, [pc, #312]	; (8011ad0 <tcp_receive+0xb04>)
 8011996:	881b      	ldrh	r3, [r3, #0]
 8011998:	1ad3      	subs	r3, r2, r3
 801199a:	b29a      	uxth	r2, r3
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80119a0:	6878      	ldr	r0, [r7, #4]
 80119a2:	f7fc ffc9 	bl	800e938 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80119a6:	4b4c      	ldr	r3, [pc, #304]	; (8011ad8 <tcp_receive+0xb0c>)
 80119a8:	685b      	ldr	r3, [r3, #4]
 80119aa:	891b      	ldrh	r3, [r3, #8]
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d006      	beq.n	80119be <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80119b0:	4b49      	ldr	r3, [pc, #292]	; (8011ad8 <tcp_receive+0xb0c>)
 80119b2:	685b      	ldr	r3, [r3, #4]
 80119b4:	4a4d      	ldr	r2, [pc, #308]	; (8011aec <tcp_receive+0xb20>)
 80119b6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80119b8:	4b47      	ldr	r3, [pc, #284]	; (8011ad8 <tcp_receive+0xb0c>)
 80119ba:	2200      	movs	r2, #0
 80119bc:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80119be:	4b46      	ldr	r3, [pc, #280]	; (8011ad8 <tcp_receive+0xb0c>)
 80119c0:	68db      	ldr	r3, [r3, #12]
 80119c2:	899b      	ldrh	r3, [r3, #12]
 80119c4:	b29b      	uxth	r3, r3
 80119c6:	4618      	mov	r0, r3
 80119c8:	f7fa fee2 	bl	800c790 <lwip_htons>
 80119cc:	4603      	mov	r3, r0
 80119ce:	b2db      	uxtb	r3, r3
 80119d0:	f003 0301 	and.w	r3, r3, #1
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	f000 80b8 	beq.w	8011b4a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80119da:	4b45      	ldr	r3, [pc, #276]	; (8011af0 <tcp_receive+0xb24>)
 80119dc:	781b      	ldrb	r3, [r3, #0]
 80119de:	f043 0320 	orr.w	r3, r3, #32
 80119e2:	b2da      	uxtb	r2, r3
 80119e4:	4b42      	ldr	r3, [pc, #264]	; (8011af0 <tcp_receive+0xb24>)
 80119e6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80119e8:	e0af      	b.n	8011b4a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80119ee:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80119f4:	68db      	ldr	r3, [r3, #12]
 80119f6:	685b      	ldr	r3, [r3, #4]
 80119f8:	4a36      	ldr	r2, [pc, #216]	; (8011ad4 <tcp_receive+0xb08>)
 80119fa:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80119fc:	68bb      	ldr	r3, [r7, #8]
 80119fe:	891b      	ldrh	r3, [r3, #8]
 8011a00:	461c      	mov	r4, r3
 8011a02:	68bb      	ldr	r3, [r7, #8]
 8011a04:	68db      	ldr	r3, [r3, #12]
 8011a06:	899b      	ldrh	r3, [r3, #12]
 8011a08:	b29b      	uxth	r3, r3
 8011a0a:	4618      	mov	r0, r3
 8011a0c:	f7fa fec0 	bl	800c790 <lwip_htons>
 8011a10:	4603      	mov	r3, r0
 8011a12:	b2db      	uxtb	r3, r3
 8011a14:	f003 0303 	and.w	r3, r3, #3
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d001      	beq.n	8011a20 <tcp_receive+0xa54>
 8011a1c:	2301      	movs	r3, #1
 8011a1e:	e000      	b.n	8011a22 <tcp_receive+0xa56>
 8011a20:	2300      	movs	r3, #0
 8011a22:	191a      	adds	r2, r3, r4
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a28:	441a      	add	r2, r3
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011a32:	461c      	mov	r4, r3
 8011a34:	68bb      	ldr	r3, [r7, #8]
 8011a36:	891b      	ldrh	r3, [r3, #8]
 8011a38:	461d      	mov	r5, r3
 8011a3a:	68bb      	ldr	r3, [r7, #8]
 8011a3c:	68db      	ldr	r3, [r3, #12]
 8011a3e:	899b      	ldrh	r3, [r3, #12]
 8011a40:	b29b      	uxth	r3, r3
 8011a42:	4618      	mov	r0, r3
 8011a44:	f7fa fea4 	bl	800c790 <lwip_htons>
 8011a48:	4603      	mov	r3, r0
 8011a4a:	b2db      	uxtb	r3, r3
 8011a4c:	f003 0303 	and.w	r3, r3, #3
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d001      	beq.n	8011a58 <tcp_receive+0xa8c>
 8011a54:	2301      	movs	r3, #1
 8011a56:	e000      	b.n	8011a5a <tcp_receive+0xa8e>
 8011a58:	2300      	movs	r3, #0
 8011a5a:	442b      	add	r3, r5
 8011a5c:	429c      	cmp	r4, r3
 8011a5e:	d206      	bcs.n	8011a6e <tcp_receive+0xaa2>
 8011a60:	4b1e      	ldr	r3, [pc, #120]	; (8011adc <tcp_receive+0xb10>)
 8011a62:	f240 622b 	movw	r2, #1579	; 0x62b
 8011a66:	4923      	ldr	r1, [pc, #140]	; (8011af4 <tcp_receive+0xb28>)
 8011a68:	481e      	ldr	r0, [pc, #120]	; (8011ae4 <tcp_receive+0xb18>)
 8011a6a:	f005 fa0b 	bl	8016e84 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8011a6e:	68bb      	ldr	r3, [r7, #8]
 8011a70:	891b      	ldrh	r3, [r3, #8]
 8011a72:	461c      	mov	r4, r3
 8011a74:	68bb      	ldr	r3, [r7, #8]
 8011a76:	68db      	ldr	r3, [r3, #12]
 8011a78:	899b      	ldrh	r3, [r3, #12]
 8011a7a:	b29b      	uxth	r3, r3
 8011a7c:	4618      	mov	r0, r3
 8011a7e:	f7fa fe87 	bl	800c790 <lwip_htons>
 8011a82:	4603      	mov	r3, r0
 8011a84:	b2db      	uxtb	r3, r3
 8011a86:	f003 0303 	and.w	r3, r3, #3
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d001      	beq.n	8011a92 <tcp_receive+0xac6>
 8011a8e:	2301      	movs	r3, #1
 8011a90:	e000      	b.n	8011a94 <tcp_receive+0xac8>
 8011a92:	2300      	movs	r3, #0
 8011a94:	1919      	adds	r1, r3, r4
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011a9a:	b28b      	uxth	r3, r1
 8011a9c:	1ad3      	subs	r3, r2, r3
 8011a9e:	b29a      	uxth	r2, r3
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8011aa4:	6878      	ldr	r0, [r7, #4]
 8011aa6:	f7fc ff47 	bl	800e938 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8011aaa:	68bb      	ldr	r3, [r7, #8]
 8011aac:	685b      	ldr	r3, [r3, #4]
 8011aae:	891b      	ldrh	r3, [r3, #8]
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d028      	beq.n	8011b06 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8011ab4:	4b0d      	ldr	r3, [pc, #52]	; (8011aec <tcp_receive+0xb20>)
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d01d      	beq.n	8011af8 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8011abc:	4b0b      	ldr	r3, [pc, #44]	; (8011aec <tcp_receive+0xb20>)
 8011abe:	681a      	ldr	r2, [r3, #0]
 8011ac0:	68bb      	ldr	r3, [r7, #8]
 8011ac2:	685b      	ldr	r3, [r3, #4]
 8011ac4:	4619      	mov	r1, r3
 8011ac6:	4610      	mov	r0, r2
 8011ac8:	f7fc fa64 	bl	800df94 <pbuf_cat>
 8011acc:	e018      	b.n	8011b00 <tcp_receive+0xb34>
 8011ace:	bf00      	nop
 8011ad0:	2000426e 	.word	0x2000426e
 8011ad4:	20004264 	.word	0x20004264
 8011ad8:	20004244 	.word	0x20004244
 8011adc:	08019350 	.word	0x08019350
 8011ae0:	08019730 	.word	0x08019730
 8011ae4:	0801939c 	.word	0x0801939c
 8011ae8:	0801976c 	.word	0x0801976c
 8011aec:	20004274 	.word	0x20004274
 8011af0:	20004271 	.word	0x20004271
 8011af4:	0801978c 	.word	0x0801978c
            } else {
              recv_data = cseg->p;
 8011af8:	68bb      	ldr	r3, [r7, #8]
 8011afa:	685b      	ldr	r3, [r3, #4]
 8011afc:	4a70      	ldr	r2, [pc, #448]	; (8011cc0 <tcp_receive+0xcf4>)
 8011afe:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8011b00:	68bb      	ldr	r3, [r7, #8]
 8011b02:	2200      	movs	r2, #0
 8011b04:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011b06:	68bb      	ldr	r3, [r7, #8]
 8011b08:	68db      	ldr	r3, [r3, #12]
 8011b0a:	899b      	ldrh	r3, [r3, #12]
 8011b0c:	b29b      	uxth	r3, r3
 8011b0e:	4618      	mov	r0, r3
 8011b10:	f7fa fe3e 	bl	800c790 <lwip_htons>
 8011b14:	4603      	mov	r3, r0
 8011b16:	b2db      	uxtb	r3, r3
 8011b18:	f003 0301 	and.w	r3, r3, #1
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d00d      	beq.n	8011b3c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8011b20:	4b68      	ldr	r3, [pc, #416]	; (8011cc4 <tcp_receive+0xcf8>)
 8011b22:	781b      	ldrb	r3, [r3, #0]
 8011b24:	f043 0320 	orr.w	r3, r3, #32
 8011b28:	b2da      	uxtb	r2, r3
 8011b2a:	4b66      	ldr	r3, [pc, #408]	; (8011cc4 <tcp_receive+0xcf8>)
 8011b2c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	7d1b      	ldrb	r3, [r3, #20]
 8011b32:	2b04      	cmp	r3, #4
 8011b34:	d102      	bne.n	8011b3c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	2207      	movs	r2, #7
 8011b3a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8011b3c:	68bb      	ldr	r3, [r7, #8]
 8011b3e:	681a      	ldr	r2, [r3, #0]
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8011b44:	68b8      	ldr	r0, [r7, #8]
 8011b46:	f7fd fbd6 	bl	800f2f6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d008      	beq.n	8011b64 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011b56:	68db      	ldr	r3, [r3, #12]
 8011b58:	685a      	ldr	r2, [r3, #4]
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8011b5e:	429a      	cmp	r2, r3
 8011b60:	f43f af43 	beq.w	80119ea <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	8b5b      	ldrh	r3, [r3, #26]
 8011b68:	f003 0301 	and.w	r3, r3, #1
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d00e      	beq.n	8011b8e <tcp_receive+0xbc2>
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	8b5b      	ldrh	r3, [r3, #26]
 8011b74:	f023 0301 	bic.w	r3, r3, #1
 8011b78:	b29a      	uxth	r2, r3
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	835a      	strh	r2, [r3, #26]
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	8b5b      	ldrh	r3, [r3, #26]
 8011b82:	f043 0302 	orr.w	r3, r3, #2
 8011b86:	b29a      	uxth	r2, r3
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011b8c:	e188      	b.n	8011ea0 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	8b5b      	ldrh	r3, [r3, #26]
 8011b92:	f043 0301 	orr.w	r3, r3, #1
 8011b96:	b29a      	uxth	r2, r3
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011b9c:	e180      	b.n	8011ea0 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d106      	bne.n	8011bb4 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8011ba6:	4848      	ldr	r0, [pc, #288]	; (8011cc8 <tcp_receive+0xcfc>)
 8011ba8:	f7fd fbbe 	bl	800f328 <tcp_seg_copy>
 8011bac:	4602      	mov	r2, r0
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	675a      	str	r2, [r3, #116]	; 0x74
 8011bb2:	e16d      	b.n	8011e90 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8011bb4:	2300      	movs	r3, #0
 8011bb6:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011bbc:	63bb      	str	r3, [r7, #56]	; 0x38
 8011bbe:	e157      	b.n	8011e70 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8011bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bc2:	68db      	ldr	r3, [r3, #12]
 8011bc4:	685a      	ldr	r2, [r3, #4]
 8011bc6:	4b41      	ldr	r3, [pc, #260]	; (8011ccc <tcp_receive+0xd00>)
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	429a      	cmp	r2, r3
 8011bcc:	d11d      	bne.n	8011c0a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8011bce:	4b3e      	ldr	r3, [pc, #248]	; (8011cc8 <tcp_receive+0xcfc>)
 8011bd0:	891a      	ldrh	r2, [r3, #8]
 8011bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bd4:	891b      	ldrh	r3, [r3, #8]
 8011bd6:	429a      	cmp	r2, r3
 8011bd8:	f240 814f 	bls.w	8011e7a <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011bdc:	483a      	ldr	r0, [pc, #232]	; (8011cc8 <tcp_receive+0xcfc>)
 8011bde:	f7fd fba3 	bl	800f328 <tcp_seg_copy>
 8011be2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8011be4:	697b      	ldr	r3, [r7, #20]
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	f000 8149 	beq.w	8011e7e <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8011bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d003      	beq.n	8011bfa <tcp_receive+0xc2e>
                    prev->next = cseg;
 8011bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bf4:	697a      	ldr	r2, [r7, #20]
 8011bf6:	601a      	str	r2, [r3, #0]
 8011bf8:	e002      	b.n	8011c00 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	697a      	ldr	r2, [r7, #20]
 8011bfe:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8011c00:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011c02:	6978      	ldr	r0, [r7, #20]
 8011c04:	f7ff f8de 	bl	8010dc4 <tcp_oos_insert_segment>
                }
                break;
 8011c08:	e139      	b.n	8011e7e <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8011c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d117      	bne.n	8011c40 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8011c10:	4b2e      	ldr	r3, [pc, #184]	; (8011ccc <tcp_receive+0xd00>)
 8011c12:	681a      	ldr	r2, [r3, #0]
 8011c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c16:	68db      	ldr	r3, [r3, #12]
 8011c18:	685b      	ldr	r3, [r3, #4]
 8011c1a:	1ad3      	subs	r3, r2, r3
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	da57      	bge.n	8011cd0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011c20:	4829      	ldr	r0, [pc, #164]	; (8011cc8 <tcp_receive+0xcfc>)
 8011c22:	f7fd fb81 	bl	800f328 <tcp_seg_copy>
 8011c26:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8011c28:	69bb      	ldr	r3, [r7, #24]
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	f000 8129 	beq.w	8011e82 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	69ba      	ldr	r2, [r7, #24]
 8011c34:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8011c36:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011c38:	69b8      	ldr	r0, [r7, #24]
 8011c3a:	f7ff f8c3 	bl	8010dc4 <tcp_oos_insert_segment>
                  }
                  break;
 8011c3e:	e120      	b.n	8011e82 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8011c40:	4b22      	ldr	r3, [pc, #136]	; (8011ccc <tcp_receive+0xd00>)
 8011c42:	681a      	ldr	r2, [r3, #0]
 8011c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c46:	68db      	ldr	r3, [r3, #12]
 8011c48:	685b      	ldr	r3, [r3, #4]
 8011c4a:	1ad3      	subs	r3, r2, r3
 8011c4c:	3b01      	subs	r3, #1
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	db3e      	blt.n	8011cd0 <tcp_receive+0xd04>
 8011c52:	4b1e      	ldr	r3, [pc, #120]	; (8011ccc <tcp_receive+0xd00>)
 8011c54:	681a      	ldr	r2, [r3, #0]
 8011c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c58:	68db      	ldr	r3, [r3, #12]
 8011c5a:	685b      	ldr	r3, [r3, #4]
 8011c5c:	1ad3      	subs	r3, r2, r3
 8011c5e:	3301      	adds	r3, #1
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	dc35      	bgt.n	8011cd0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011c64:	4818      	ldr	r0, [pc, #96]	; (8011cc8 <tcp_receive+0xcfc>)
 8011c66:	f7fd fb5f 	bl	800f328 <tcp_seg_copy>
 8011c6a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8011c6c:	69fb      	ldr	r3, [r7, #28]
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	f000 8109 	beq.w	8011e86 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8011c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c76:	68db      	ldr	r3, [r3, #12]
 8011c78:	685b      	ldr	r3, [r3, #4]
 8011c7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011c7c:	8912      	ldrh	r2, [r2, #8]
 8011c7e:	441a      	add	r2, r3
 8011c80:	4b12      	ldr	r3, [pc, #72]	; (8011ccc <tcp_receive+0xd00>)
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	1ad3      	subs	r3, r2, r3
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	dd12      	ble.n	8011cb0 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8011c8a:	4b10      	ldr	r3, [pc, #64]	; (8011ccc <tcp_receive+0xd00>)
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	b29a      	uxth	r2, r3
 8011c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c92:	68db      	ldr	r3, [r3, #12]
 8011c94:	685b      	ldr	r3, [r3, #4]
 8011c96:	b29b      	uxth	r3, r3
 8011c98:	1ad3      	subs	r3, r2, r3
 8011c9a:	b29a      	uxth	r2, r3
 8011c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c9e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8011ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ca2:	685a      	ldr	r2, [r3, #4]
 8011ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ca6:	891b      	ldrh	r3, [r3, #8]
 8011ca8:	4619      	mov	r1, r3
 8011caa:	4610      	mov	r0, r2
 8011cac:	f7fb ff1e 	bl	800daec <pbuf_realloc>
                    }
                    prev->next = cseg;
 8011cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011cb2:	69fa      	ldr	r2, [r7, #28]
 8011cb4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8011cb6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011cb8:	69f8      	ldr	r0, [r7, #28]
 8011cba:	f7ff f883 	bl	8010dc4 <tcp_oos_insert_segment>
                  }
                  break;
 8011cbe:	e0e2      	b.n	8011e86 <tcp_receive+0xeba>
 8011cc0:	20004274 	.word	0x20004274
 8011cc4:	20004271 	.word	0x20004271
 8011cc8:	20004244 	.word	0x20004244
 8011ccc:	20004264 	.word	0x20004264
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8011cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cd2:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8011cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	f040 80c6 	bne.w	8011e6a <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8011cde:	4b80      	ldr	r3, [pc, #512]	; (8011ee0 <tcp_receive+0xf14>)
 8011ce0:	681a      	ldr	r2, [r3, #0]
 8011ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ce4:	68db      	ldr	r3, [r3, #12]
 8011ce6:	685b      	ldr	r3, [r3, #4]
 8011ce8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	f340 80bd 	ble.w	8011e6a <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cf2:	68db      	ldr	r3, [r3, #12]
 8011cf4:	899b      	ldrh	r3, [r3, #12]
 8011cf6:	b29b      	uxth	r3, r3
 8011cf8:	4618      	mov	r0, r3
 8011cfa:	f7fa fd49 	bl	800c790 <lwip_htons>
 8011cfe:	4603      	mov	r3, r0
 8011d00:	b2db      	uxtb	r3, r3
 8011d02:	f003 0301 	and.w	r3, r3, #1
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	f040 80bf 	bne.w	8011e8a <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8011d0c:	4875      	ldr	r0, [pc, #468]	; (8011ee4 <tcp_receive+0xf18>)
 8011d0e:	f7fd fb0b 	bl	800f328 <tcp_seg_copy>
 8011d12:	4602      	mov	r2, r0
 8011d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d16:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8011d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d1a:	681b      	ldr	r3, [r3, #0]
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	f000 80b6 	beq.w	8011e8e <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8011d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d24:	68db      	ldr	r3, [r3, #12]
 8011d26:	685b      	ldr	r3, [r3, #4]
 8011d28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011d2a:	8912      	ldrh	r2, [r2, #8]
 8011d2c:	441a      	add	r2, r3
 8011d2e:	4b6c      	ldr	r3, [pc, #432]	; (8011ee0 <tcp_receive+0xf14>)
 8011d30:	681b      	ldr	r3, [r3, #0]
 8011d32:	1ad3      	subs	r3, r2, r3
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	dd12      	ble.n	8011d5e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8011d38:	4b69      	ldr	r3, [pc, #420]	; (8011ee0 <tcp_receive+0xf14>)
 8011d3a:	681b      	ldr	r3, [r3, #0]
 8011d3c:	b29a      	uxth	r2, r3
 8011d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d40:	68db      	ldr	r3, [r3, #12]
 8011d42:	685b      	ldr	r3, [r3, #4]
 8011d44:	b29b      	uxth	r3, r3
 8011d46:	1ad3      	subs	r3, r2, r3
 8011d48:	b29a      	uxth	r2, r3
 8011d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d4c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8011d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d50:	685a      	ldr	r2, [r3, #4]
 8011d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d54:	891b      	ldrh	r3, [r3, #8]
 8011d56:	4619      	mov	r1, r3
 8011d58:	4610      	mov	r0, r2
 8011d5a:	f7fb fec7 	bl	800daec <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8011d5e:	4b62      	ldr	r3, [pc, #392]	; (8011ee8 <tcp_receive+0xf1c>)
 8011d60:	881b      	ldrh	r3, [r3, #0]
 8011d62:	461a      	mov	r2, r3
 8011d64:	4b5e      	ldr	r3, [pc, #376]	; (8011ee0 <tcp_receive+0xf14>)
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	441a      	add	r2, r3
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d6e:	6879      	ldr	r1, [r7, #4]
 8011d70:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011d72:	440b      	add	r3, r1
 8011d74:	1ad3      	subs	r3, r2, r3
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	f340 8089 	ble.w	8011e8e <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8011d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	68db      	ldr	r3, [r3, #12]
 8011d82:	899b      	ldrh	r3, [r3, #12]
 8011d84:	b29b      	uxth	r3, r3
 8011d86:	4618      	mov	r0, r3
 8011d88:	f7fa fd02 	bl	800c790 <lwip_htons>
 8011d8c:	4603      	mov	r3, r0
 8011d8e:	b2db      	uxtb	r3, r3
 8011d90:	f003 0301 	and.w	r3, r3, #1
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d022      	beq.n	8011dde <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8011d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	68db      	ldr	r3, [r3, #12]
 8011d9e:	899b      	ldrh	r3, [r3, #12]
 8011da0:	b29b      	uxth	r3, r3
 8011da2:	b21b      	sxth	r3, r3
 8011da4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011da8:	b21c      	sxth	r4, r3
 8011daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dac:	681b      	ldr	r3, [r3, #0]
 8011dae:	68db      	ldr	r3, [r3, #12]
 8011db0:	899b      	ldrh	r3, [r3, #12]
 8011db2:	b29b      	uxth	r3, r3
 8011db4:	4618      	mov	r0, r3
 8011db6:	f7fa fceb 	bl	800c790 <lwip_htons>
 8011dba:	4603      	mov	r3, r0
 8011dbc:	b2db      	uxtb	r3, r3
 8011dbe:	b29b      	uxth	r3, r3
 8011dc0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011dc4:	b29b      	uxth	r3, r3
 8011dc6:	4618      	mov	r0, r3
 8011dc8:	f7fa fce2 	bl	800c790 <lwip_htons>
 8011dcc:	4603      	mov	r3, r0
 8011dce:	b21b      	sxth	r3, r3
 8011dd0:	4323      	orrs	r3, r4
 8011dd2:	b21a      	sxth	r2, r3
 8011dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dd6:	681b      	ldr	r3, [r3, #0]
 8011dd8:	68db      	ldr	r3, [r3, #12]
 8011dda:	b292      	uxth	r2, r2
 8011ddc:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011de2:	b29a      	uxth	r2, r3
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011de8:	4413      	add	r3, r2
 8011dea:	b299      	uxth	r1, r3
 8011dec:	4b3c      	ldr	r3, [pc, #240]	; (8011ee0 <tcp_receive+0xf14>)
 8011dee:	681b      	ldr	r3, [r3, #0]
 8011df0:	b29a      	uxth	r2, r3
 8011df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011df4:	681b      	ldr	r3, [r3, #0]
 8011df6:	1a8a      	subs	r2, r1, r2
 8011df8:	b292      	uxth	r2, r2
 8011dfa:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8011dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	685a      	ldr	r2, [r3, #4]
 8011e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	891b      	ldrh	r3, [r3, #8]
 8011e08:	4619      	mov	r1, r3
 8011e0a:	4610      	mov	r0, r2
 8011e0c:	f7fb fe6e 	bl	800daec <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8011e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e12:	681b      	ldr	r3, [r3, #0]
 8011e14:	891c      	ldrh	r4, [r3, #8]
 8011e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	68db      	ldr	r3, [r3, #12]
 8011e1c:	899b      	ldrh	r3, [r3, #12]
 8011e1e:	b29b      	uxth	r3, r3
 8011e20:	4618      	mov	r0, r3
 8011e22:	f7fa fcb5 	bl	800c790 <lwip_htons>
 8011e26:	4603      	mov	r3, r0
 8011e28:	b2db      	uxtb	r3, r3
 8011e2a:	f003 0303 	and.w	r3, r3, #3
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d001      	beq.n	8011e36 <tcp_receive+0xe6a>
 8011e32:	2301      	movs	r3, #1
 8011e34:	e000      	b.n	8011e38 <tcp_receive+0xe6c>
 8011e36:	2300      	movs	r3, #0
 8011e38:	4423      	add	r3, r4
 8011e3a:	b29a      	uxth	r2, r3
 8011e3c:	4b2a      	ldr	r3, [pc, #168]	; (8011ee8 <tcp_receive+0xf1c>)
 8011e3e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011e40:	4b29      	ldr	r3, [pc, #164]	; (8011ee8 <tcp_receive+0xf1c>)
 8011e42:	881b      	ldrh	r3, [r3, #0]
 8011e44:	461a      	mov	r2, r3
 8011e46:	4b26      	ldr	r3, [pc, #152]	; (8011ee0 <tcp_receive+0xf14>)
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	441a      	add	r2, r3
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e50:	6879      	ldr	r1, [r7, #4]
 8011e52:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011e54:	440b      	add	r3, r1
 8011e56:	429a      	cmp	r2, r3
 8011e58:	d019      	beq.n	8011e8e <tcp_receive+0xec2>
 8011e5a:	4b24      	ldr	r3, [pc, #144]	; (8011eec <tcp_receive+0xf20>)
 8011e5c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8011e60:	4923      	ldr	r1, [pc, #140]	; (8011ef0 <tcp_receive+0xf24>)
 8011e62:	4824      	ldr	r0, [pc, #144]	; (8011ef4 <tcp_receive+0xf28>)
 8011e64:	f005 f80e 	bl	8016e84 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8011e68:	e011      	b.n	8011e8e <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e6c:	681b      	ldr	r3, [r3, #0]
 8011e6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8011e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	f47f aea4 	bne.w	8011bc0 <tcp_receive+0xbf4>
 8011e78:	e00a      	b.n	8011e90 <tcp_receive+0xec4>
                break;
 8011e7a:	bf00      	nop
 8011e7c:	e008      	b.n	8011e90 <tcp_receive+0xec4>
                break;
 8011e7e:	bf00      	nop
 8011e80:	e006      	b.n	8011e90 <tcp_receive+0xec4>
                  break;
 8011e82:	bf00      	nop
 8011e84:	e004      	b.n	8011e90 <tcp_receive+0xec4>
                  break;
 8011e86:	bf00      	nop
 8011e88:	e002      	b.n	8011e90 <tcp_receive+0xec4>
                  break;
 8011e8a:	bf00      	nop
 8011e8c:	e000      	b.n	8011e90 <tcp_receive+0xec4>
                break;
 8011e8e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8011e90:	6878      	ldr	r0, [r7, #4]
 8011e92:	f001 fa33 	bl	80132fc <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8011e96:	e003      	b.n	8011ea0 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8011e98:	6878      	ldr	r0, [r7, #4]
 8011e9a:	f001 fa2f 	bl	80132fc <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011e9e:	e01a      	b.n	8011ed6 <tcp_receive+0xf0a>
 8011ea0:	e019      	b.n	8011ed6 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8011ea2:	4b0f      	ldr	r3, [pc, #60]	; (8011ee0 <tcp_receive+0xf14>)
 8011ea4:	681a      	ldr	r2, [r3, #0]
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011eaa:	1ad3      	subs	r3, r2, r3
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	db0a      	blt.n	8011ec6 <tcp_receive+0xefa>
 8011eb0:	4b0b      	ldr	r3, [pc, #44]	; (8011ee0 <tcp_receive+0xf14>)
 8011eb2:	681a      	ldr	r2, [r3, #0]
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011eb8:	6879      	ldr	r1, [r7, #4]
 8011eba:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011ebc:	440b      	add	r3, r1
 8011ebe:	1ad3      	subs	r3, r2, r3
 8011ec0:	3301      	adds	r3, #1
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	dd07      	ble.n	8011ed6 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	8b5b      	ldrh	r3, [r3, #26]
 8011eca:	f043 0302 	orr.w	r3, r3, #2
 8011ece:	b29a      	uxth	r2, r3
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8011ed4:	e7ff      	b.n	8011ed6 <tcp_receive+0xf0a>
 8011ed6:	bf00      	nop
 8011ed8:	3750      	adds	r7, #80	; 0x50
 8011eda:	46bd      	mov	sp, r7
 8011edc:	bdb0      	pop	{r4, r5, r7, pc}
 8011ede:	bf00      	nop
 8011ee0:	20004264 	.word	0x20004264
 8011ee4:	20004244 	.word	0x20004244
 8011ee8:	2000426e 	.word	0x2000426e
 8011eec:	08019350 	.word	0x08019350
 8011ef0:	080196f8 	.word	0x080196f8
 8011ef4:	0801939c 	.word	0x0801939c

08011ef8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8011ef8:	b480      	push	{r7}
 8011efa:	b083      	sub	sp, #12
 8011efc:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8011efe:	4b15      	ldr	r3, [pc, #84]	; (8011f54 <tcp_get_next_optbyte+0x5c>)
 8011f00:	881b      	ldrh	r3, [r3, #0]
 8011f02:	1c5a      	adds	r2, r3, #1
 8011f04:	b291      	uxth	r1, r2
 8011f06:	4a13      	ldr	r2, [pc, #76]	; (8011f54 <tcp_get_next_optbyte+0x5c>)
 8011f08:	8011      	strh	r1, [r2, #0]
 8011f0a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8011f0c:	4b12      	ldr	r3, [pc, #72]	; (8011f58 <tcp_get_next_optbyte+0x60>)
 8011f0e:	681b      	ldr	r3, [r3, #0]
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	d004      	beq.n	8011f1e <tcp_get_next_optbyte+0x26>
 8011f14:	4b11      	ldr	r3, [pc, #68]	; (8011f5c <tcp_get_next_optbyte+0x64>)
 8011f16:	881b      	ldrh	r3, [r3, #0]
 8011f18:	88fa      	ldrh	r2, [r7, #6]
 8011f1a:	429a      	cmp	r2, r3
 8011f1c:	d208      	bcs.n	8011f30 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8011f1e:	4b10      	ldr	r3, [pc, #64]	; (8011f60 <tcp_get_next_optbyte+0x68>)
 8011f20:	681b      	ldr	r3, [r3, #0]
 8011f22:	3314      	adds	r3, #20
 8011f24:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8011f26:	88fb      	ldrh	r3, [r7, #6]
 8011f28:	683a      	ldr	r2, [r7, #0]
 8011f2a:	4413      	add	r3, r2
 8011f2c:	781b      	ldrb	r3, [r3, #0]
 8011f2e:	e00b      	b.n	8011f48 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8011f30:	88fb      	ldrh	r3, [r7, #6]
 8011f32:	b2da      	uxtb	r2, r3
 8011f34:	4b09      	ldr	r3, [pc, #36]	; (8011f5c <tcp_get_next_optbyte+0x64>)
 8011f36:	881b      	ldrh	r3, [r3, #0]
 8011f38:	b2db      	uxtb	r3, r3
 8011f3a:	1ad3      	subs	r3, r2, r3
 8011f3c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8011f3e:	4b06      	ldr	r3, [pc, #24]	; (8011f58 <tcp_get_next_optbyte+0x60>)
 8011f40:	681a      	ldr	r2, [r3, #0]
 8011f42:	797b      	ldrb	r3, [r7, #5]
 8011f44:	4413      	add	r3, r2
 8011f46:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011f48:	4618      	mov	r0, r3
 8011f4a:	370c      	adds	r7, #12
 8011f4c:	46bd      	mov	sp, r7
 8011f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f52:	4770      	bx	lr
 8011f54:	20004260 	.word	0x20004260
 8011f58:	2000425c 	.word	0x2000425c
 8011f5c:	2000425a 	.word	0x2000425a
 8011f60:	20004254 	.word	0x20004254

08011f64 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8011f64:	b580      	push	{r7, lr}
 8011f66:	b084      	sub	sp, #16
 8011f68:	af00      	add	r7, sp, #0
 8011f6a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d106      	bne.n	8011f80 <tcp_parseopt+0x1c>
 8011f72:	4b32      	ldr	r3, [pc, #200]	; (801203c <tcp_parseopt+0xd8>)
 8011f74:	f240 727d 	movw	r2, #1917	; 0x77d
 8011f78:	4931      	ldr	r1, [pc, #196]	; (8012040 <tcp_parseopt+0xdc>)
 8011f7a:	4832      	ldr	r0, [pc, #200]	; (8012044 <tcp_parseopt+0xe0>)
 8011f7c:	f004 ff82 	bl	8016e84 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8011f80:	4b31      	ldr	r3, [pc, #196]	; (8012048 <tcp_parseopt+0xe4>)
 8011f82:	881b      	ldrh	r3, [r3, #0]
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d055      	beq.n	8012034 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011f88:	4b30      	ldr	r3, [pc, #192]	; (801204c <tcp_parseopt+0xe8>)
 8011f8a:	2200      	movs	r2, #0
 8011f8c:	801a      	strh	r2, [r3, #0]
 8011f8e:	e045      	b.n	801201c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8011f90:	f7ff ffb2 	bl	8011ef8 <tcp_get_next_optbyte>
 8011f94:	4603      	mov	r3, r0
 8011f96:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8011f98:	7bfb      	ldrb	r3, [r7, #15]
 8011f9a:	2b02      	cmp	r3, #2
 8011f9c:	d006      	beq.n	8011fac <tcp_parseopt+0x48>
 8011f9e:	2b02      	cmp	r3, #2
 8011fa0:	dc2b      	bgt.n	8011ffa <tcp_parseopt+0x96>
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d041      	beq.n	801202a <tcp_parseopt+0xc6>
 8011fa6:	2b01      	cmp	r3, #1
 8011fa8:	d127      	bne.n	8011ffa <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8011faa:	e037      	b.n	801201c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8011fac:	f7ff ffa4 	bl	8011ef8 <tcp_get_next_optbyte>
 8011fb0:	4603      	mov	r3, r0
 8011fb2:	2b04      	cmp	r3, #4
 8011fb4:	d13b      	bne.n	801202e <tcp_parseopt+0xca>
 8011fb6:	4b25      	ldr	r3, [pc, #148]	; (801204c <tcp_parseopt+0xe8>)
 8011fb8:	881b      	ldrh	r3, [r3, #0]
 8011fba:	3301      	adds	r3, #1
 8011fbc:	4a22      	ldr	r2, [pc, #136]	; (8012048 <tcp_parseopt+0xe4>)
 8011fbe:	8812      	ldrh	r2, [r2, #0]
 8011fc0:	4293      	cmp	r3, r2
 8011fc2:	da34      	bge.n	801202e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8011fc4:	f7ff ff98 	bl	8011ef8 <tcp_get_next_optbyte>
 8011fc8:	4603      	mov	r3, r0
 8011fca:	b29b      	uxth	r3, r3
 8011fcc:	021b      	lsls	r3, r3, #8
 8011fce:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8011fd0:	f7ff ff92 	bl	8011ef8 <tcp_get_next_optbyte>
 8011fd4:	4603      	mov	r3, r0
 8011fd6:	b29a      	uxth	r2, r3
 8011fd8:	89bb      	ldrh	r3, [r7, #12]
 8011fda:	4313      	orrs	r3, r2
 8011fdc:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8011fde:	89bb      	ldrh	r3, [r7, #12]
 8011fe0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8011fe4:	d804      	bhi.n	8011ff0 <tcp_parseopt+0x8c>
 8011fe6:	89bb      	ldrh	r3, [r7, #12]
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d001      	beq.n	8011ff0 <tcp_parseopt+0x8c>
 8011fec:	89ba      	ldrh	r2, [r7, #12]
 8011fee:	e001      	b.n	8011ff4 <tcp_parseopt+0x90>
 8011ff0:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8011ff8:	e010      	b.n	801201c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8011ffa:	f7ff ff7d 	bl	8011ef8 <tcp_get_next_optbyte>
 8011ffe:	4603      	mov	r3, r0
 8012000:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8012002:	7afb      	ldrb	r3, [r7, #11]
 8012004:	2b01      	cmp	r3, #1
 8012006:	d914      	bls.n	8012032 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8012008:	7afb      	ldrb	r3, [r7, #11]
 801200a:	b29a      	uxth	r2, r3
 801200c:	4b0f      	ldr	r3, [pc, #60]	; (801204c <tcp_parseopt+0xe8>)
 801200e:	881b      	ldrh	r3, [r3, #0]
 8012010:	4413      	add	r3, r2
 8012012:	b29b      	uxth	r3, r3
 8012014:	3b02      	subs	r3, #2
 8012016:	b29a      	uxth	r2, r3
 8012018:	4b0c      	ldr	r3, [pc, #48]	; (801204c <tcp_parseopt+0xe8>)
 801201a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801201c:	4b0b      	ldr	r3, [pc, #44]	; (801204c <tcp_parseopt+0xe8>)
 801201e:	881a      	ldrh	r2, [r3, #0]
 8012020:	4b09      	ldr	r3, [pc, #36]	; (8012048 <tcp_parseopt+0xe4>)
 8012022:	881b      	ldrh	r3, [r3, #0]
 8012024:	429a      	cmp	r2, r3
 8012026:	d3b3      	bcc.n	8011f90 <tcp_parseopt+0x2c>
 8012028:	e004      	b.n	8012034 <tcp_parseopt+0xd0>
          return;
 801202a:	bf00      	nop
 801202c:	e002      	b.n	8012034 <tcp_parseopt+0xd0>
            return;
 801202e:	bf00      	nop
 8012030:	e000      	b.n	8012034 <tcp_parseopt+0xd0>
            return;
 8012032:	bf00      	nop
      }
    }
  }
}
 8012034:	3710      	adds	r7, #16
 8012036:	46bd      	mov	sp, r7
 8012038:	bd80      	pop	{r7, pc}
 801203a:	bf00      	nop
 801203c:	08019350 	.word	0x08019350
 8012040:	080197b4 	.word	0x080197b4
 8012044:	0801939c 	.word	0x0801939c
 8012048:	20004258 	.word	0x20004258
 801204c:	20004260 	.word	0x20004260

08012050 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8012050:	b480      	push	{r7}
 8012052:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8012054:	4b05      	ldr	r3, [pc, #20]	; (801206c <tcp_trigger_input_pcb_close+0x1c>)
 8012056:	781b      	ldrb	r3, [r3, #0]
 8012058:	f043 0310 	orr.w	r3, r3, #16
 801205c:	b2da      	uxtb	r2, r3
 801205e:	4b03      	ldr	r3, [pc, #12]	; (801206c <tcp_trigger_input_pcb_close+0x1c>)
 8012060:	701a      	strb	r2, [r3, #0]
}
 8012062:	bf00      	nop
 8012064:	46bd      	mov	sp, r7
 8012066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801206a:	4770      	bx	lr
 801206c:	20004271 	.word	0x20004271

08012070 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8012070:	b580      	push	{r7, lr}
 8012072:	b084      	sub	sp, #16
 8012074:	af00      	add	r7, sp, #0
 8012076:	60f8      	str	r0, [r7, #12]
 8012078:	60b9      	str	r1, [r7, #8]
 801207a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	2b00      	cmp	r3, #0
 8012080:	d00a      	beq.n	8012098 <tcp_route+0x28>
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	7a1b      	ldrb	r3, [r3, #8]
 8012086:	2b00      	cmp	r3, #0
 8012088:	d006      	beq.n	8012098 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801208a:	68fb      	ldr	r3, [r7, #12]
 801208c:	7a1b      	ldrb	r3, [r3, #8]
 801208e:	4618      	mov	r0, r3
 8012090:	f7fb fb24 	bl	800d6dc <netif_get_by_index>
 8012094:	4603      	mov	r3, r0
 8012096:	e003      	b.n	80120a0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8012098:	6878      	ldr	r0, [r7, #4]
 801209a:	f002 fead 	bl	8014df8 <ip4_route>
 801209e:	4603      	mov	r3, r0
  }
}
 80120a0:	4618      	mov	r0, r3
 80120a2:	3710      	adds	r7, #16
 80120a4:	46bd      	mov	sp, r7
 80120a6:	bd80      	pop	{r7, pc}

080120a8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80120a8:	b590      	push	{r4, r7, lr}
 80120aa:	b087      	sub	sp, #28
 80120ac:	af00      	add	r7, sp, #0
 80120ae:	60f8      	str	r0, [r7, #12]
 80120b0:	60b9      	str	r1, [r7, #8]
 80120b2:	603b      	str	r3, [r7, #0]
 80120b4:	4613      	mov	r3, r2
 80120b6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80120b8:	68fb      	ldr	r3, [r7, #12]
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d105      	bne.n	80120ca <tcp_create_segment+0x22>
 80120be:	4b44      	ldr	r3, [pc, #272]	; (80121d0 <tcp_create_segment+0x128>)
 80120c0:	22a3      	movs	r2, #163	; 0xa3
 80120c2:	4944      	ldr	r1, [pc, #272]	; (80121d4 <tcp_create_segment+0x12c>)
 80120c4:	4844      	ldr	r0, [pc, #272]	; (80121d8 <tcp_create_segment+0x130>)
 80120c6:	f004 fedd 	bl	8016e84 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80120ca:	68bb      	ldr	r3, [r7, #8]
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d105      	bne.n	80120dc <tcp_create_segment+0x34>
 80120d0:	4b3f      	ldr	r3, [pc, #252]	; (80121d0 <tcp_create_segment+0x128>)
 80120d2:	22a4      	movs	r2, #164	; 0xa4
 80120d4:	4941      	ldr	r1, [pc, #260]	; (80121dc <tcp_create_segment+0x134>)
 80120d6:	4840      	ldr	r0, [pc, #256]	; (80121d8 <tcp_create_segment+0x130>)
 80120d8:	f004 fed4 	bl	8016e84 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80120dc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80120e0:	009b      	lsls	r3, r3, #2
 80120e2:	b2db      	uxtb	r3, r3
 80120e4:	f003 0304 	and.w	r3, r3, #4
 80120e8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80120ea:	2003      	movs	r0, #3
 80120ec:	f7fb f806 	bl	800d0fc <memp_malloc>
 80120f0:	6138      	str	r0, [r7, #16]
 80120f2:	693b      	ldr	r3, [r7, #16]
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d104      	bne.n	8012102 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80120f8:	68b8      	ldr	r0, [r7, #8]
 80120fa:	f7fb fe7d 	bl	800ddf8 <pbuf_free>
    return NULL;
 80120fe:	2300      	movs	r3, #0
 8012100:	e061      	b.n	80121c6 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8012102:	693b      	ldr	r3, [r7, #16]
 8012104:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012108:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801210a:	693b      	ldr	r3, [r7, #16]
 801210c:	2200      	movs	r2, #0
 801210e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8012110:	693b      	ldr	r3, [r7, #16]
 8012112:	68ba      	ldr	r2, [r7, #8]
 8012114:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8012116:	68bb      	ldr	r3, [r7, #8]
 8012118:	891a      	ldrh	r2, [r3, #8]
 801211a:	7dfb      	ldrb	r3, [r7, #23]
 801211c:	b29b      	uxth	r3, r3
 801211e:	429a      	cmp	r2, r3
 8012120:	d205      	bcs.n	801212e <tcp_create_segment+0x86>
 8012122:	4b2b      	ldr	r3, [pc, #172]	; (80121d0 <tcp_create_segment+0x128>)
 8012124:	22b0      	movs	r2, #176	; 0xb0
 8012126:	492e      	ldr	r1, [pc, #184]	; (80121e0 <tcp_create_segment+0x138>)
 8012128:	482b      	ldr	r0, [pc, #172]	; (80121d8 <tcp_create_segment+0x130>)
 801212a:	f004 feab 	bl	8016e84 <iprintf>
  seg->len = p->tot_len - optlen;
 801212e:	68bb      	ldr	r3, [r7, #8]
 8012130:	891a      	ldrh	r2, [r3, #8]
 8012132:	7dfb      	ldrb	r3, [r7, #23]
 8012134:	b29b      	uxth	r3, r3
 8012136:	1ad3      	subs	r3, r2, r3
 8012138:	b29a      	uxth	r2, r3
 801213a:	693b      	ldr	r3, [r7, #16]
 801213c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801213e:	2114      	movs	r1, #20
 8012140:	68b8      	ldr	r0, [r7, #8]
 8012142:	f7fb fdc3 	bl	800dccc <pbuf_add_header>
 8012146:	4603      	mov	r3, r0
 8012148:	2b00      	cmp	r3, #0
 801214a:	d004      	beq.n	8012156 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801214c:	6938      	ldr	r0, [r7, #16]
 801214e:	f7fd f8d2 	bl	800f2f6 <tcp_seg_free>
    return NULL;
 8012152:	2300      	movs	r3, #0
 8012154:	e037      	b.n	80121c6 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8012156:	693b      	ldr	r3, [r7, #16]
 8012158:	685b      	ldr	r3, [r3, #4]
 801215a:	685a      	ldr	r2, [r3, #4]
 801215c:	693b      	ldr	r3, [r7, #16]
 801215e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8012160:	68fb      	ldr	r3, [r7, #12]
 8012162:	8ada      	ldrh	r2, [r3, #22]
 8012164:	693b      	ldr	r3, [r7, #16]
 8012166:	68dc      	ldr	r4, [r3, #12]
 8012168:	4610      	mov	r0, r2
 801216a:	f7fa fb11 	bl	800c790 <lwip_htons>
 801216e:	4603      	mov	r3, r0
 8012170:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8012172:	68fb      	ldr	r3, [r7, #12]
 8012174:	8b1a      	ldrh	r2, [r3, #24]
 8012176:	693b      	ldr	r3, [r7, #16]
 8012178:	68dc      	ldr	r4, [r3, #12]
 801217a:	4610      	mov	r0, r2
 801217c:	f7fa fb08 	bl	800c790 <lwip_htons>
 8012180:	4603      	mov	r3, r0
 8012182:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8012184:	693b      	ldr	r3, [r7, #16]
 8012186:	68dc      	ldr	r4, [r3, #12]
 8012188:	6838      	ldr	r0, [r7, #0]
 801218a:	f7fa fb16 	bl	800c7ba <lwip_htonl>
 801218e:	4603      	mov	r3, r0
 8012190:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8012192:	7dfb      	ldrb	r3, [r7, #23]
 8012194:	089b      	lsrs	r3, r3, #2
 8012196:	b2db      	uxtb	r3, r3
 8012198:	b29b      	uxth	r3, r3
 801219a:	3305      	adds	r3, #5
 801219c:	b29b      	uxth	r3, r3
 801219e:	031b      	lsls	r3, r3, #12
 80121a0:	b29a      	uxth	r2, r3
 80121a2:	79fb      	ldrb	r3, [r7, #7]
 80121a4:	b29b      	uxth	r3, r3
 80121a6:	4313      	orrs	r3, r2
 80121a8:	b29a      	uxth	r2, r3
 80121aa:	693b      	ldr	r3, [r7, #16]
 80121ac:	68dc      	ldr	r4, [r3, #12]
 80121ae:	4610      	mov	r0, r2
 80121b0:	f7fa faee 	bl	800c790 <lwip_htons>
 80121b4:	4603      	mov	r3, r0
 80121b6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80121b8:	693b      	ldr	r3, [r7, #16]
 80121ba:	68db      	ldr	r3, [r3, #12]
 80121bc:	2200      	movs	r2, #0
 80121be:	749a      	strb	r2, [r3, #18]
 80121c0:	2200      	movs	r2, #0
 80121c2:	74da      	strb	r2, [r3, #19]
  return seg;
 80121c4:	693b      	ldr	r3, [r7, #16]
}
 80121c6:	4618      	mov	r0, r3
 80121c8:	371c      	adds	r7, #28
 80121ca:	46bd      	mov	sp, r7
 80121cc:	bd90      	pop	{r4, r7, pc}
 80121ce:	bf00      	nop
 80121d0:	080197d0 	.word	0x080197d0
 80121d4:	08019804 	.word	0x08019804
 80121d8:	08019824 	.word	0x08019824
 80121dc:	0801984c 	.word	0x0801984c
 80121e0:	08019870 	.word	0x08019870

080121e4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80121e4:	b590      	push	{r4, r7, lr}
 80121e6:	b08b      	sub	sp, #44	; 0x2c
 80121e8:	af02      	add	r7, sp, #8
 80121ea:	6078      	str	r0, [r7, #4]
 80121ec:	460b      	mov	r3, r1
 80121ee:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80121f0:	2300      	movs	r3, #0
 80121f2:	61fb      	str	r3, [r7, #28]
 80121f4:	2300      	movs	r3, #0
 80121f6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80121f8:	2300      	movs	r3, #0
 80121fa:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d106      	bne.n	8012210 <tcp_split_unsent_seg+0x2c>
 8012202:	4b95      	ldr	r3, [pc, #596]	; (8012458 <tcp_split_unsent_seg+0x274>)
 8012204:	f240 324b 	movw	r2, #843	; 0x34b
 8012208:	4994      	ldr	r1, [pc, #592]	; (801245c <tcp_split_unsent_seg+0x278>)
 801220a:	4895      	ldr	r0, [pc, #596]	; (8012460 <tcp_split_unsent_seg+0x27c>)
 801220c:	f004 fe3a 	bl	8016e84 <iprintf>

  useg = pcb->unsent;
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012214:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8012216:	697b      	ldr	r3, [r7, #20]
 8012218:	2b00      	cmp	r3, #0
 801221a:	d102      	bne.n	8012222 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801221c:	f04f 33ff 	mov.w	r3, #4294967295
 8012220:	e116      	b.n	8012450 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8012222:	887b      	ldrh	r3, [r7, #2]
 8012224:	2b00      	cmp	r3, #0
 8012226:	d109      	bne.n	801223c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8012228:	4b8b      	ldr	r3, [pc, #556]	; (8012458 <tcp_split_unsent_seg+0x274>)
 801222a:	f240 3253 	movw	r2, #851	; 0x353
 801222e:	498d      	ldr	r1, [pc, #564]	; (8012464 <tcp_split_unsent_seg+0x280>)
 8012230:	488b      	ldr	r0, [pc, #556]	; (8012460 <tcp_split_unsent_seg+0x27c>)
 8012232:	f004 fe27 	bl	8016e84 <iprintf>
    return ERR_VAL;
 8012236:	f06f 0305 	mvn.w	r3, #5
 801223a:	e109      	b.n	8012450 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801223c:	697b      	ldr	r3, [r7, #20]
 801223e:	891b      	ldrh	r3, [r3, #8]
 8012240:	887a      	ldrh	r2, [r7, #2]
 8012242:	429a      	cmp	r2, r3
 8012244:	d301      	bcc.n	801224a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8012246:	2300      	movs	r3, #0
 8012248:	e102      	b.n	8012450 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801224e:	887a      	ldrh	r2, [r7, #2]
 8012250:	429a      	cmp	r2, r3
 8012252:	d906      	bls.n	8012262 <tcp_split_unsent_seg+0x7e>
 8012254:	4b80      	ldr	r3, [pc, #512]	; (8012458 <tcp_split_unsent_seg+0x274>)
 8012256:	f240 325b 	movw	r2, #859	; 0x35b
 801225a:	4983      	ldr	r1, [pc, #524]	; (8012468 <tcp_split_unsent_seg+0x284>)
 801225c:	4880      	ldr	r0, [pc, #512]	; (8012460 <tcp_split_unsent_seg+0x27c>)
 801225e:	f004 fe11 	bl	8016e84 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8012262:	697b      	ldr	r3, [r7, #20]
 8012264:	891b      	ldrh	r3, [r3, #8]
 8012266:	2b00      	cmp	r3, #0
 8012268:	d106      	bne.n	8012278 <tcp_split_unsent_seg+0x94>
 801226a:	4b7b      	ldr	r3, [pc, #492]	; (8012458 <tcp_split_unsent_seg+0x274>)
 801226c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8012270:	497e      	ldr	r1, [pc, #504]	; (801246c <tcp_split_unsent_seg+0x288>)
 8012272:	487b      	ldr	r0, [pc, #492]	; (8012460 <tcp_split_unsent_seg+0x27c>)
 8012274:	f004 fe06 	bl	8016e84 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8012278:	697b      	ldr	r3, [r7, #20]
 801227a:	7a9b      	ldrb	r3, [r3, #10]
 801227c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801227e:	7bfb      	ldrb	r3, [r7, #15]
 8012280:	009b      	lsls	r3, r3, #2
 8012282:	b2db      	uxtb	r3, r3
 8012284:	f003 0304 	and.w	r3, r3, #4
 8012288:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801228a:	697b      	ldr	r3, [r7, #20]
 801228c:	891a      	ldrh	r2, [r3, #8]
 801228e:	887b      	ldrh	r3, [r7, #2]
 8012290:	1ad3      	subs	r3, r2, r3
 8012292:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8012294:	7bbb      	ldrb	r3, [r7, #14]
 8012296:	b29a      	uxth	r2, r3
 8012298:	89bb      	ldrh	r3, [r7, #12]
 801229a:	4413      	add	r3, r2
 801229c:	b29b      	uxth	r3, r3
 801229e:	f44f 7220 	mov.w	r2, #640	; 0x280
 80122a2:	4619      	mov	r1, r3
 80122a4:	2036      	movs	r0, #54	; 0x36
 80122a6:	f7fb fac3 	bl	800d830 <pbuf_alloc>
 80122aa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80122ac:	693b      	ldr	r3, [r7, #16]
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	f000 80b7 	beq.w	8012422 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80122b4:	697b      	ldr	r3, [r7, #20]
 80122b6:	685b      	ldr	r3, [r3, #4]
 80122b8:	891a      	ldrh	r2, [r3, #8]
 80122ba:	697b      	ldr	r3, [r7, #20]
 80122bc:	891b      	ldrh	r3, [r3, #8]
 80122be:	1ad3      	subs	r3, r2, r3
 80122c0:	b29a      	uxth	r2, r3
 80122c2:	887b      	ldrh	r3, [r7, #2]
 80122c4:	4413      	add	r3, r2
 80122c6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80122c8:	697b      	ldr	r3, [r7, #20]
 80122ca:	6858      	ldr	r0, [r3, #4]
 80122cc:	693b      	ldr	r3, [r7, #16]
 80122ce:	685a      	ldr	r2, [r3, #4]
 80122d0:	7bbb      	ldrb	r3, [r7, #14]
 80122d2:	18d1      	adds	r1, r2, r3
 80122d4:	897b      	ldrh	r3, [r7, #10]
 80122d6:	89ba      	ldrh	r2, [r7, #12]
 80122d8:	f7fb ff84 	bl	800e1e4 <pbuf_copy_partial>
 80122dc:	4603      	mov	r3, r0
 80122de:	461a      	mov	r2, r3
 80122e0:	89bb      	ldrh	r3, [r7, #12]
 80122e2:	4293      	cmp	r3, r2
 80122e4:	f040 809f 	bne.w	8012426 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80122e8:	697b      	ldr	r3, [r7, #20]
 80122ea:	68db      	ldr	r3, [r3, #12]
 80122ec:	899b      	ldrh	r3, [r3, #12]
 80122ee:	b29b      	uxth	r3, r3
 80122f0:	4618      	mov	r0, r3
 80122f2:	f7fa fa4d 	bl	800c790 <lwip_htons>
 80122f6:	4603      	mov	r3, r0
 80122f8:	b2db      	uxtb	r3, r3
 80122fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80122fe:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8012300:	2300      	movs	r3, #0
 8012302:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8012304:	7efb      	ldrb	r3, [r7, #27]
 8012306:	f003 0308 	and.w	r3, r3, #8
 801230a:	2b00      	cmp	r3, #0
 801230c:	d007      	beq.n	801231e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801230e:	7efb      	ldrb	r3, [r7, #27]
 8012310:	f023 0308 	bic.w	r3, r3, #8
 8012314:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8012316:	7ebb      	ldrb	r3, [r7, #26]
 8012318:	f043 0308 	orr.w	r3, r3, #8
 801231c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801231e:	7efb      	ldrb	r3, [r7, #27]
 8012320:	f003 0301 	and.w	r3, r3, #1
 8012324:	2b00      	cmp	r3, #0
 8012326:	d007      	beq.n	8012338 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8012328:	7efb      	ldrb	r3, [r7, #27]
 801232a:	f023 0301 	bic.w	r3, r3, #1
 801232e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8012330:	7ebb      	ldrb	r3, [r7, #26]
 8012332:	f043 0301 	orr.w	r3, r3, #1
 8012336:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8012338:	697b      	ldr	r3, [r7, #20]
 801233a:	68db      	ldr	r3, [r3, #12]
 801233c:	685b      	ldr	r3, [r3, #4]
 801233e:	4618      	mov	r0, r3
 8012340:	f7fa fa3b 	bl	800c7ba <lwip_htonl>
 8012344:	4602      	mov	r2, r0
 8012346:	887b      	ldrh	r3, [r7, #2]
 8012348:	18d1      	adds	r1, r2, r3
 801234a:	7eba      	ldrb	r2, [r7, #26]
 801234c:	7bfb      	ldrb	r3, [r7, #15]
 801234e:	9300      	str	r3, [sp, #0]
 8012350:	460b      	mov	r3, r1
 8012352:	6939      	ldr	r1, [r7, #16]
 8012354:	6878      	ldr	r0, [r7, #4]
 8012356:	f7ff fea7 	bl	80120a8 <tcp_create_segment>
 801235a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801235c:	69fb      	ldr	r3, [r7, #28]
 801235e:	2b00      	cmp	r3, #0
 8012360:	d063      	beq.n	801242a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8012362:	697b      	ldr	r3, [r7, #20]
 8012364:	685b      	ldr	r3, [r3, #4]
 8012366:	4618      	mov	r0, r3
 8012368:	f7fb fdd4 	bl	800df14 <pbuf_clen>
 801236c:	4603      	mov	r3, r0
 801236e:	461a      	mov	r2, r3
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012376:	1a9b      	subs	r3, r3, r2
 8012378:	b29a      	uxth	r2, r3
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8012380:	697b      	ldr	r3, [r7, #20]
 8012382:	6858      	ldr	r0, [r3, #4]
 8012384:	697b      	ldr	r3, [r7, #20]
 8012386:	685b      	ldr	r3, [r3, #4]
 8012388:	891a      	ldrh	r2, [r3, #8]
 801238a:	89bb      	ldrh	r3, [r7, #12]
 801238c:	1ad3      	subs	r3, r2, r3
 801238e:	b29b      	uxth	r3, r3
 8012390:	4619      	mov	r1, r3
 8012392:	f7fb fbab 	bl	800daec <pbuf_realloc>
  useg->len -= remainder;
 8012396:	697b      	ldr	r3, [r7, #20]
 8012398:	891a      	ldrh	r2, [r3, #8]
 801239a:	89bb      	ldrh	r3, [r7, #12]
 801239c:	1ad3      	subs	r3, r2, r3
 801239e:	b29a      	uxth	r2, r3
 80123a0:	697b      	ldr	r3, [r7, #20]
 80123a2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80123a4:	697b      	ldr	r3, [r7, #20]
 80123a6:	68db      	ldr	r3, [r3, #12]
 80123a8:	899b      	ldrh	r3, [r3, #12]
 80123aa:	b29c      	uxth	r4, r3
 80123ac:	7efb      	ldrb	r3, [r7, #27]
 80123ae:	b29b      	uxth	r3, r3
 80123b0:	4618      	mov	r0, r3
 80123b2:	f7fa f9ed 	bl	800c790 <lwip_htons>
 80123b6:	4603      	mov	r3, r0
 80123b8:	461a      	mov	r2, r3
 80123ba:	697b      	ldr	r3, [r7, #20]
 80123bc:	68db      	ldr	r3, [r3, #12]
 80123be:	4322      	orrs	r2, r4
 80123c0:	b292      	uxth	r2, r2
 80123c2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80123c4:	697b      	ldr	r3, [r7, #20]
 80123c6:	685b      	ldr	r3, [r3, #4]
 80123c8:	4618      	mov	r0, r3
 80123ca:	f7fb fda3 	bl	800df14 <pbuf_clen>
 80123ce:	4603      	mov	r3, r0
 80123d0:	461a      	mov	r2, r3
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80123d8:	4413      	add	r3, r2
 80123da:	b29a      	uxth	r2, r3
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80123e2:	69fb      	ldr	r3, [r7, #28]
 80123e4:	685b      	ldr	r3, [r3, #4]
 80123e6:	4618      	mov	r0, r3
 80123e8:	f7fb fd94 	bl	800df14 <pbuf_clen>
 80123ec:	4603      	mov	r3, r0
 80123ee:	461a      	mov	r2, r3
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80123f6:	4413      	add	r3, r2
 80123f8:	b29a      	uxth	r2, r3
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8012400:	697b      	ldr	r3, [r7, #20]
 8012402:	681a      	ldr	r2, [r3, #0]
 8012404:	69fb      	ldr	r3, [r7, #28]
 8012406:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8012408:	697b      	ldr	r3, [r7, #20]
 801240a:	69fa      	ldr	r2, [r7, #28]
 801240c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801240e:	69fb      	ldr	r3, [r7, #28]
 8012410:	681b      	ldr	r3, [r3, #0]
 8012412:	2b00      	cmp	r3, #0
 8012414:	d103      	bne.n	801241e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	2200      	movs	r2, #0
 801241a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801241e:	2300      	movs	r3, #0
 8012420:	e016      	b.n	8012450 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8012422:	bf00      	nop
 8012424:	e002      	b.n	801242c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012426:	bf00      	nop
 8012428:	e000      	b.n	801242c <tcp_split_unsent_seg+0x248>
    goto memerr;
 801242a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801242c:	69fb      	ldr	r3, [r7, #28]
 801242e:	2b00      	cmp	r3, #0
 8012430:	d006      	beq.n	8012440 <tcp_split_unsent_seg+0x25c>
 8012432:	4b09      	ldr	r3, [pc, #36]	; (8012458 <tcp_split_unsent_seg+0x274>)
 8012434:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8012438:	490d      	ldr	r1, [pc, #52]	; (8012470 <tcp_split_unsent_seg+0x28c>)
 801243a:	4809      	ldr	r0, [pc, #36]	; (8012460 <tcp_split_unsent_seg+0x27c>)
 801243c:	f004 fd22 	bl	8016e84 <iprintf>
  if (p != NULL) {
 8012440:	693b      	ldr	r3, [r7, #16]
 8012442:	2b00      	cmp	r3, #0
 8012444:	d002      	beq.n	801244c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8012446:	6938      	ldr	r0, [r7, #16]
 8012448:	f7fb fcd6 	bl	800ddf8 <pbuf_free>
  }

  return ERR_MEM;
 801244c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012450:	4618      	mov	r0, r3
 8012452:	3724      	adds	r7, #36	; 0x24
 8012454:	46bd      	mov	sp, r7
 8012456:	bd90      	pop	{r4, r7, pc}
 8012458:	080197d0 	.word	0x080197d0
 801245c:	08019b64 	.word	0x08019b64
 8012460:	08019824 	.word	0x08019824
 8012464:	08019b88 	.word	0x08019b88
 8012468:	08019bac 	.word	0x08019bac
 801246c:	08019bbc 	.word	0x08019bbc
 8012470:	08019bcc 	.word	0x08019bcc

08012474 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8012474:	b590      	push	{r4, r7, lr}
 8012476:	b085      	sub	sp, #20
 8012478:	af00      	add	r7, sp, #0
 801247a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	2b00      	cmp	r3, #0
 8012480:	d106      	bne.n	8012490 <tcp_send_fin+0x1c>
 8012482:	4b21      	ldr	r3, [pc, #132]	; (8012508 <tcp_send_fin+0x94>)
 8012484:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8012488:	4920      	ldr	r1, [pc, #128]	; (801250c <tcp_send_fin+0x98>)
 801248a:	4821      	ldr	r0, [pc, #132]	; (8012510 <tcp_send_fin+0x9c>)
 801248c:	f004 fcfa 	bl	8016e84 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012494:	2b00      	cmp	r3, #0
 8012496:	d02e      	beq.n	80124f6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801249c:	60fb      	str	r3, [r7, #12]
 801249e:	e002      	b.n	80124a6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80124a0:	68fb      	ldr	r3, [r7, #12]
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d1f8      	bne.n	80124a0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80124ae:	68fb      	ldr	r3, [r7, #12]
 80124b0:	68db      	ldr	r3, [r3, #12]
 80124b2:	899b      	ldrh	r3, [r3, #12]
 80124b4:	b29b      	uxth	r3, r3
 80124b6:	4618      	mov	r0, r3
 80124b8:	f7fa f96a 	bl	800c790 <lwip_htons>
 80124bc:	4603      	mov	r3, r0
 80124be:	b2db      	uxtb	r3, r3
 80124c0:	f003 0307 	and.w	r3, r3, #7
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d116      	bne.n	80124f6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80124c8:	68fb      	ldr	r3, [r7, #12]
 80124ca:	68db      	ldr	r3, [r3, #12]
 80124cc:	899b      	ldrh	r3, [r3, #12]
 80124ce:	b29c      	uxth	r4, r3
 80124d0:	2001      	movs	r0, #1
 80124d2:	f7fa f95d 	bl	800c790 <lwip_htons>
 80124d6:	4603      	mov	r3, r0
 80124d8:	461a      	mov	r2, r3
 80124da:	68fb      	ldr	r3, [r7, #12]
 80124dc:	68db      	ldr	r3, [r3, #12]
 80124de:	4322      	orrs	r2, r4
 80124e0:	b292      	uxth	r2, r2
 80124e2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	8b5b      	ldrh	r3, [r3, #26]
 80124e8:	f043 0320 	orr.w	r3, r3, #32
 80124ec:	b29a      	uxth	r2, r3
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80124f2:	2300      	movs	r3, #0
 80124f4:	e004      	b.n	8012500 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80124f6:	2101      	movs	r1, #1
 80124f8:	6878      	ldr	r0, [r7, #4]
 80124fa:	f000 f80b 	bl	8012514 <tcp_enqueue_flags>
 80124fe:	4603      	mov	r3, r0
}
 8012500:	4618      	mov	r0, r3
 8012502:	3714      	adds	r7, #20
 8012504:	46bd      	mov	sp, r7
 8012506:	bd90      	pop	{r4, r7, pc}
 8012508:	080197d0 	.word	0x080197d0
 801250c:	08019bd8 	.word	0x08019bd8
 8012510:	08019824 	.word	0x08019824

08012514 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8012514:	b580      	push	{r7, lr}
 8012516:	b08a      	sub	sp, #40	; 0x28
 8012518:	af02      	add	r7, sp, #8
 801251a:	6078      	str	r0, [r7, #4]
 801251c:	460b      	mov	r3, r1
 801251e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8012520:	2300      	movs	r3, #0
 8012522:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8012524:	2300      	movs	r3, #0
 8012526:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8012528:	78fb      	ldrb	r3, [r7, #3]
 801252a:	f003 0303 	and.w	r3, r3, #3
 801252e:	2b00      	cmp	r3, #0
 8012530:	d106      	bne.n	8012540 <tcp_enqueue_flags+0x2c>
 8012532:	4b67      	ldr	r3, [pc, #412]	; (80126d0 <tcp_enqueue_flags+0x1bc>)
 8012534:	f240 4211 	movw	r2, #1041	; 0x411
 8012538:	4966      	ldr	r1, [pc, #408]	; (80126d4 <tcp_enqueue_flags+0x1c0>)
 801253a:	4867      	ldr	r0, [pc, #412]	; (80126d8 <tcp_enqueue_flags+0x1c4>)
 801253c:	f004 fca2 	bl	8016e84 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	2b00      	cmp	r3, #0
 8012544:	d106      	bne.n	8012554 <tcp_enqueue_flags+0x40>
 8012546:	4b62      	ldr	r3, [pc, #392]	; (80126d0 <tcp_enqueue_flags+0x1bc>)
 8012548:	f240 4213 	movw	r2, #1043	; 0x413
 801254c:	4963      	ldr	r1, [pc, #396]	; (80126dc <tcp_enqueue_flags+0x1c8>)
 801254e:	4862      	ldr	r0, [pc, #392]	; (80126d8 <tcp_enqueue_flags+0x1c4>)
 8012550:	f004 fc98 	bl	8016e84 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8012554:	78fb      	ldrb	r3, [r7, #3]
 8012556:	f003 0302 	and.w	r3, r3, #2
 801255a:	2b00      	cmp	r3, #0
 801255c:	d001      	beq.n	8012562 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801255e:	2301      	movs	r3, #1
 8012560:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012562:	7ffb      	ldrb	r3, [r7, #31]
 8012564:	009b      	lsls	r3, r3, #2
 8012566:	b2db      	uxtb	r3, r3
 8012568:	f003 0304 	and.w	r3, r3, #4
 801256c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801256e:	7dfb      	ldrb	r3, [r7, #23]
 8012570:	b29b      	uxth	r3, r3
 8012572:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012576:	4619      	mov	r1, r3
 8012578:	2036      	movs	r0, #54	; 0x36
 801257a:	f7fb f959 	bl	800d830 <pbuf_alloc>
 801257e:	6138      	str	r0, [r7, #16]
 8012580:	693b      	ldr	r3, [r7, #16]
 8012582:	2b00      	cmp	r3, #0
 8012584:	d109      	bne.n	801259a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	8b5b      	ldrh	r3, [r3, #26]
 801258a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801258e:	b29a      	uxth	r2, r3
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012594:	f04f 33ff 	mov.w	r3, #4294967295
 8012598:	e095      	b.n	80126c6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801259a:	693b      	ldr	r3, [r7, #16]
 801259c:	895a      	ldrh	r2, [r3, #10]
 801259e:	7dfb      	ldrb	r3, [r7, #23]
 80125a0:	b29b      	uxth	r3, r3
 80125a2:	429a      	cmp	r2, r3
 80125a4:	d206      	bcs.n	80125b4 <tcp_enqueue_flags+0xa0>
 80125a6:	4b4a      	ldr	r3, [pc, #296]	; (80126d0 <tcp_enqueue_flags+0x1bc>)
 80125a8:	f240 4239 	movw	r2, #1081	; 0x439
 80125ac:	494c      	ldr	r1, [pc, #304]	; (80126e0 <tcp_enqueue_flags+0x1cc>)
 80125ae:	484a      	ldr	r0, [pc, #296]	; (80126d8 <tcp_enqueue_flags+0x1c4>)
 80125b0:	f004 fc68 	bl	8016e84 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80125b8:	78fa      	ldrb	r2, [r7, #3]
 80125ba:	7ffb      	ldrb	r3, [r7, #31]
 80125bc:	9300      	str	r3, [sp, #0]
 80125be:	460b      	mov	r3, r1
 80125c0:	6939      	ldr	r1, [r7, #16]
 80125c2:	6878      	ldr	r0, [r7, #4]
 80125c4:	f7ff fd70 	bl	80120a8 <tcp_create_segment>
 80125c8:	60f8      	str	r0, [r7, #12]
 80125ca:	68fb      	ldr	r3, [r7, #12]
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d109      	bne.n	80125e4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	8b5b      	ldrh	r3, [r3, #26]
 80125d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80125d8:	b29a      	uxth	r2, r3
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80125de:	f04f 33ff 	mov.w	r3, #4294967295
 80125e2:	e070      	b.n	80126c6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80125e4:	68fb      	ldr	r3, [r7, #12]
 80125e6:	68db      	ldr	r3, [r3, #12]
 80125e8:	f003 0303 	and.w	r3, r3, #3
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d006      	beq.n	80125fe <tcp_enqueue_flags+0xea>
 80125f0:	4b37      	ldr	r3, [pc, #220]	; (80126d0 <tcp_enqueue_flags+0x1bc>)
 80125f2:	f240 4242 	movw	r2, #1090	; 0x442
 80125f6:	493b      	ldr	r1, [pc, #236]	; (80126e4 <tcp_enqueue_flags+0x1d0>)
 80125f8:	4837      	ldr	r0, [pc, #220]	; (80126d8 <tcp_enqueue_flags+0x1c4>)
 80125fa:	f004 fc43 	bl	8016e84 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	891b      	ldrh	r3, [r3, #8]
 8012602:	2b00      	cmp	r3, #0
 8012604:	d006      	beq.n	8012614 <tcp_enqueue_flags+0x100>
 8012606:	4b32      	ldr	r3, [pc, #200]	; (80126d0 <tcp_enqueue_flags+0x1bc>)
 8012608:	f240 4243 	movw	r2, #1091	; 0x443
 801260c:	4936      	ldr	r1, [pc, #216]	; (80126e8 <tcp_enqueue_flags+0x1d4>)
 801260e:	4832      	ldr	r0, [pc, #200]	; (80126d8 <tcp_enqueue_flags+0x1c4>)
 8012610:	f004 fc38 	bl	8016e84 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012618:	2b00      	cmp	r3, #0
 801261a:	d103      	bne.n	8012624 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	68fa      	ldr	r2, [r7, #12]
 8012620:	66da      	str	r2, [r3, #108]	; 0x6c
 8012622:	e00d      	b.n	8012640 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012628:	61bb      	str	r3, [r7, #24]
 801262a:	e002      	b.n	8012632 <tcp_enqueue_flags+0x11e>
 801262c:	69bb      	ldr	r3, [r7, #24]
 801262e:	681b      	ldr	r3, [r3, #0]
 8012630:	61bb      	str	r3, [r7, #24]
 8012632:	69bb      	ldr	r3, [r7, #24]
 8012634:	681b      	ldr	r3, [r3, #0]
 8012636:	2b00      	cmp	r3, #0
 8012638:	d1f8      	bne.n	801262c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801263a:	69bb      	ldr	r3, [r7, #24]
 801263c:	68fa      	ldr	r2, [r7, #12]
 801263e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	2200      	movs	r2, #0
 8012644:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8012648:	78fb      	ldrb	r3, [r7, #3]
 801264a:	f003 0302 	and.w	r3, r3, #2
 801264e:	2b00      	cmp	r3, #0
 8012650:	d104      	bne.n	801265c <tcp_enqueue_flags+0x148>
 8012652:	78fb      	ldrb	r3, [r7, #3]
 8012654:	f003 0301 	and.w	r3, r3, #1
 8012658:	2b00      	cmp	r3, #0
 801265a:	d004      	beq.n	8012666 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012660:	1c5a      	adds	r2, r3, #1
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8012666:	78fb      	ldrb	r3, [r7, #3]
 8012668:	f003 0301 	and.w	r3, r3, #1
 801266c:	2b00      	cmp	r3, #0
 801266e:	d006      	beq.n	801267e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	8b5b      	ldrh	r3, [r3, #26]
 8012674:	f043 0320 	orr.w	r3, r3, #32
 8012678:	b29a      	uxth	r2, r3
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801267e:	68fb      	ldr	r3, [r7, #12]
 8012680:	685b      	ldr	r3, [r3, #4]
 8012682:	4618      	mov	r0, r3
 8012684:	f7fb fc46 	bl	800df14 <pbuf_clen>
 8012688:	4603      	mov	r3, r0
 801268a:	461a      	mov	r2, r3
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012692:	4413      	add	r3, r2
 8012694:	b29a      	uxth	r2, r3
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d00e      	beq.n	80126c4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d10a      	bne.n	80126c4 <tcp_enqueue_flags+0x1b0>
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d106      	bne.n	80126c4 <tcp_enqueue_flags+0x1b0>
 80126b6:	4b06      	ldr	r3, [pc, #24]	; (80126d0 <tcp_enqueue_flags+0x1bc>)
 80126b8:	f240 4265 	movw	r2, #1125	; 0x465
 80126bc:	490b      	ldr	r1, [pc, #44]	; (80126ec <tcp_enqueue_flags+0x1d8>)
 80126be:	4806      	ldr	r0, [pc, #24]	; (80126d8 <tcp_enqueue_flags+0x1c4>)
 80126c0:	f004 fbe0 	bl	8016e84 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80126c4:	2300      	movs	r3, #0
}
 80126c6:	4618      	mov	r0, r3
 80126c8:	3720      	adds	r7, #32
 80126ca:	46bd      	mov	sp, r7
 80126cc:	bd80      	pop	{r7, pc}
 80126ce:	bf00      	nop
 80126d0:	080197d0 	.word	0x080197d0
 80126d4:	08019bf4 	.word	0x08019bf4
 80126d8:	08019824 	.word	0x08019824
 80126dc:	08019c4c 	.word	0x08019c4c
 80126e0:	08019c6c 	.word	0x08019c6c
 80126e4:	08019ca8 	.word	0x08019ca8
 80126e8:	08019cc0 	.word	0x08019cc0
 80126ec:	08019cec 	.word	0x08019cec

080126f0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80126f0:	b5b0      	push	{r4, r5, r7, lr}
 80126f2:	b08a      	sub	sp, #40	; 0x28
 80126f4:	af00      	add	r7, sp, #0
 80126f6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d106      	bne.n	801270c <tcp_output+0x1c>
 80126fe:	4b9e      	ldr	r3, [pc, #632]	; (8012978 <tcp_output+0x288>)
 8012700:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8012704:	499d      	ldr	r1, [pc, #628]	; (801297c <tcp_output+0x28c>)
 8012706:	489e      	ldr	r0, [pc, #632]	; (8012980 <tcp_output+0x290>)
 8012708:	f004 fbbc 	bl	8016e84 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	7d1b      	ldrb	r3, [r3, #20]
 8012710:	2b01      	cmp	r3, #1
 8012712:	d106      	bne.n	8012722 <tcp_output+0x32>
 8012714:	4b98      	ldr	r3, [pc, #608]	; (8012978 <tcp_output+0x288>)
 8012716:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801271a:	499a      	ldr	r1, [pc, #616]	; (8012984 <tcp_output+0x294>)
 801271c:	4898      	ldr	r0, [pc, #608]	; (8012980 <tcp_output+0x290>)
 801271e:	f004 fbb1 	bl	8016e84 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8012722:	4b99      	ldr	r3, [pc, #612]	; (8012988 <tcp_output+0x298>)
 8012724:	681b      	ldr	r3, [r3, #0]
 8012726:	687a      	ldr	r2, [r7, #4]
 8012728:	429a      	cmp	r2, r3
 801272a:	d101      	bne.n	8012730 <tcp_output+0x40>
    return ERR_OK;
 801272c:	2300      	movs	r3, #0
 801272e:	e1ce      	b.n	8012ace <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801273c:	4293      	cmp	r3, r2
 801273e:	bf28      	it	cs
 8012740:	4613      	movcs	r3, r2
 8012742:	b29b      	uxth	r3, r3
 8012744:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801274a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801274e:	2b00      	cmp	r3, #0
 8012750:	d10b      	bne.n	801276a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	8b5b      	ldrh	r3, [r3, #26]
 8012756:	f003 0302 	and.w	r3, r3, #2
 801275a:	2b00      	cmp	r3, #0
 801275c:	f000 81aa 	beq.w	8012ab4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8012760:	6878      	ldr	r0, [r7, #4]
 8012762:	f000 fdcb 	bl	80132fc <tcp_send_empty_ack>
 8012766:	4603      	mov	r3, r0
 8012768:	e1b1      	b.n	8012ace <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801276a:	6879      	ldr	r1, [r7, #4]
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	3304      	adds	r3, #4
 8012770:	461a      	mov	r2, r3
 8012772:	6878      	ldr	r0, [r7, #4]
 8012774:	f7ff fc7c 	bl	8012070 <tcp_route>
 8012778:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801277a:	697b      	ldr	r3, [r7, #20]
 801277c:	2b00      	cmp	r3, #0
 801277e:	d102      	bne.n	8012786 <tcp_output+0x96>
    return ERR_RTE;
 8012780:	f06f 0303 	mvn.w	r3, #3
 8012784:	e1a3      	b.n	8012ace <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	2b00      	cmp	r3, #0
 801278a:	d003      	beq.n	8012794 <tcp_output+0xa4>
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	2b00      	cmp	r3, #0
 8012792:	d111      	bne.n	80127b8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8012794:	697b      	ldr	r3, [r7, #20]
 8012796:	2b00      	cmp	r3, #0
 8012798:	d002      	beq.n	80127a0 <tcp_output+0xb0>
 801279a:	697b      	ldr	r3, [r7, #20]
 801279c:	3304      	adds	r3, #4
 801279e:	e000      	b.n	80127a2 <tcp_output+0xb2>
 80127a0:	2300      	movs	r3, #0
 80127a2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80127a4:	693b      	ldr	r3, [r7, #16]
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	d102      	bne.n	80127b0 <tcp_output+0xc0>
      return ERR_RTE;
 80127aa:	f06f 0303 	mvn.w	r3, #3
 80127ae:	e18e      	b.n	8012ace <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80127b0:	693b      	ldr	r3, [r7, #16]
 80127b2:	681a      	ldr	r2, [r3, #0]
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80127b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127ba:	68db      	ldr	r3, [r3, #12]
 80127bc:	685b      	ldr	r3, [r3, #4]
 80127be:	4618      	mov	r0, r3
 80127c0:	f7f9 fffb 	bl	800c7ba <lwip_htonl>
 80127c4:	4602      	mov	r2, r0
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80127ca:	1ad3      	subs	r3, r2, r3
 80127cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80127ce:	8912      	ldrh	r2, [r2, #8]
 80127d0:	4413      	add	r3, r2
 80127d2:	69ba      	ldr	r2, [r7, #24]
 80127d4:	429a      	cmp	r2, r3
 80127d6:	d227      	bcs.n	8012828 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80127de:	461a      	mov	r2, r3
 80127e0:	69bb      	ldr	r3, [r7, #24]
 80127e2:	4293      	cmp	r3, r2
 80127e4:	d114      	bne.n	8012810 <tcp_output+0x120>
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	d110      	bne.n	8012810 <tcp_output+0x120>
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d10b      	bne.n	8012810 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	2200      	movs	r2, #0
 80127fc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	2201      	movs	r2, #1
 8012804:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	2200      	movs	r2, #0
 801280c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	8b5b      	ldrh	r3, [r3, #26]
 8012814:	f003 0302 	and.w	r3, r3, #2
 8012818:	2b00      	cmp	r3, #0
 801281a:	f000 814d 	beq.w	8012ab8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801281e:	6878      	ldr	r0, [r7, #4]
 8012820:	f000 fd6c 	bl	80132fc <tcp_send_empty_ack>
 8012824:	4603      	mov	r3, r0
 8012826:	e152      	b.n	8012ace <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	2200      	movs	r2, #0
 801282c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012834:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8012836:	6a3b      	ldr	r3, [r7, #32]
 8012838:	2b00      	cmp	r3, #0
 801283a:	f000 811c 	beq.w	8012a76 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801283e:	e002      	b.n	8012846 <tcp_output+0x156>
 8012840:	6a3b      	ldr	r3, [r7, #32]
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	623b      	str	r3, [r7, #32]
 8012846:	6a3b      	ldr	r3, [r7, #32]
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	2b00      	cmp	r3, #0
 801284c:	d1f8      	bne.n	8012840 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801284e:	e112      	b.n	8012a76 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8012850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012852:	68db      	ldr	r3, [r3, #12]
 8012854:	899b      	ldrh	r3, [r3, #12]
 8012856:	b29b      	uxth	r3, r3
 8012858:	4618      	mov	r0, r3
 801285a:	f7f9 ff99 	bl	800c790 <lwip_htons>
 801285e:	4603      	mov	r3, r0
 8012860:	b2db      	uxtb	r3, r3
 8012862:	f003 0304 	and.w	r3, r3, #4
 8012866:	2b00      	cmp	r3, #0
 8012868:	d006      	beq.n	8012878 <tcp_output+0x188>
 801286a:	4b43      	ldr	r3, [pc, #268]	; (8012978 <tcp_output+0x288>)
 801286c:	f240 5236 	movw	r2, #1334	; 0x536
 8012870:	4946      	ldr	r1, [pc, #280]	; (801298c <tcp_output+0x29c>)
 8012872:	4843      	ldr	r0, [pc, #268]	; (8012980 <tcp_output+0x290>)
 8012874:	f004 fb06 	bl	8016e84 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801287c:	2b00      	cmp	r3, #0
 801287e:	d01f      	beq.n	80128c0 <tcp_output+0x1d0>
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	8b5b      	ldrh	r3, [r3, #26]
 8012884:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8012888:	2b00      	cmp	r3, #0
 801288a:	d119      	bne.n	80128c0 <tcp_output+0x1d0>
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012890:	2b00      	cmp	r3, #0
 8012892:	d00b      	beq.n	80128ac <tcp_output+0x1bc>
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012898:	681b      	ldr	r3, [r3, #0]
 801289a:	2b00      	cmp	r3, #0
 801289c:	d110      	bne.n	80128c0 <tcp_output+0x1d0>
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80128a2:	891a      	ldrh	r2, [r3, #8]
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80128a8:	429a      	cmp	r2, r3
 80128aa:	d209      	bcs.n	80128c0 <tcp_output+0x1d0>
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d004      	beq.n	80128c0 <tcp_output+0x1d0>
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80128bc:	2b08      	cmp	r3, #8
 80128be:	d901      	bls.n	80128c4 <tcp_output+0x1d4>
 80128c0:	2301      	movs	r3, #1
 80128c2:	e000      	b.n	80128c6 <tcp_output+0x1d6>
 80128c4:	2300      	movs	r3, #0
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d106      	bne.n	80128d8 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	8b5b      	ldrh	r3, [r3, #26]
 80128ce:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	f000 80e4 	beq.w	8012aa0 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	7d1b      	ldrb	r3, [r3, #20]
 80128dc:	2b02      	cmp	r3, #2
 80128de:	d00d      	beq.n	80128fc <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80128e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128e2:	68db      	ldr	r3, [r3, #12]
 80128e4:	899b      	ldrh	r3, [r3, #12]
 80128e6:	b29c      	uxth	r4, r3
 80128e8:	2010      	movs	r0, #16
 80128ea:	f7f9 ff51 	bl	800c790 <lwip_htons>
 80128ee:	4603      	mov	r3, r0
 80128f0:	461a      	mov	r2, r3
 80128f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128f4:	68db      	ldr	r3, [r3, #12]
 80128f6:	4322      	orrs	r2, r4
 80128f8:	b292      	uxth	r2, r2
 80128fa:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80128fc:	697a      	ldr	r2, [r7, #20]
 80128fe:	6879      	ldr	r1, [r7, #4]
 8012900:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012902:	f000 f909 	bl	8012b18 <tcp_output_segment>
 8012906:	4603      	mov	r3, r0
 8012908:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801290a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801290e:	2b00      	cmp	r3, #0
 8012910:	d009      	beq.n	8012926 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	8b5b      	ldrh	r3, [r3, #26]
 8012916:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801291a:	b29a      	uxth	r2, r3
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	835a      	strh	r2, [r3, #26]
      return err;
 8012920:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012924:	e0d3      	b.n	8012ace <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8012926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012928:	681a      	ldr	r2, [r3, #0]
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	7d1b      	ldrb	r3, [r3, #20]
 8012932:	2b02      	cmp	r3, #2
 8012934:	d006      	beq.n	8012944 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	8b5b      	ldrh	r3, [r3, #26]
 801293a:	f023 0303 	bic.w	r3, r3, #3
 801293e:	b29a      	uxth	r2, r3
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012946:	68db      	ldr	r3, [r3, #12]
 8012948:	685b      	ldr	r3, [r3, #4]
 801294a:	4618      	mov	r0, r3
 801294c:	f7f9 ff35 	bl	800c7ba <lwip_htonl>
 8012950:	4604      	mov	r4, r0
 8012952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012954:	891b      	ldrh	r3, [r3, #8]
 8012956:	461d      	mov	r5, r3
 8012958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801295a:	68db      	ldr	r3, [r3, #12]
 801295c:	899b      	ldrh	r3, [r3, #12]
 801295e:	b29b      	uxth	r3, r3
 8012960:	4618      	mov	r0, r3
 8012962:	f7f9 ff15 	bl	800c790 <lwip_htons>
 8012966:	4603      	mov	r3, r0
 8012968:	b2db      	uxtb	r3, r3
 801296a:	f003 0303 	and.w	r3, r3, #3
 801296e:	2b00      	cmp	r3, #0
 8012970:	d00e      	beq.n	8012990 <tcp_output+0x2a0>
 8012972:	2301      	movs	r3, #1
 8012974:	e00d      	b.n	8012992 <tcp_output+0x2a2>
 8012976:	bf00      	nop
 8012978:	080197d0 	.word	0x080197d0
 801297c:	08019d14 	.word	0x08019d14
 8012980:	08019824 	.word	0x08019824
 8012984:	08019d2c 	.word	0x08019d2c
 8012988:	2000b110 	.word	0x2000b110
 801298c:	08019d54 	.word	0x08019d54
 8012990:	2300      	movs	r3, #0
 8012992:	442b      	add	r3, r5
 8012994:	4423      	add	r3, r4
 8012996:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801299c:	68bb      	ldr	r3, [r7, #8]
 801299e:	1ad3      	subs	r3, r2, r3
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	da02      	bge.n	80129aa <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	68ba      	ldr	r2, [r7, #8]
 80129a8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80129aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129ac:	891b      	ldrh	r3, [r3, #8]
 80129ae:	461c      	mov	r4, r3
 80129b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129b2:	68db      	ldr	r3, [r3, #12]
 80129b4:	899b      	ldrh	r3, [r3, #12]
 80129b6:	b29b      	uxth	r3, r3
 80129b8:	4618      	mov	r0, r3
 80129ba:	f7f9 fee9 	bl	800c790 <lwip_htons>
 80129be:	4603      	mov	r3, r0
 80129c0:	b2db      	uxtb	r3, r3
 80129c2:	f003 0303 	and.w	r3, r3, #3
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d001      	beq.n	80129ce <tcp_output+0x2de>
 80129ca:	2301      	movs	r3, #1
 80129cc:	e000      	b.n	80129d0 <tcp_output+0x2e0>
 80129ce:	2300      	movs	r3, #0
 80129d0:	4423      	add	r3, r4
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d049      	beq.n	8012a6a <tcp_output+0x37a>
      seg->next = NULL;
 80129d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129d8:	2200      	movs	r2, #0
 80129da:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d105      	bne.n	80129f0 <tcp_output+0x300>
        pcb->unacked = seg;
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80129e8:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80129ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129ec:	623b      	str	r3, [r7, #32]
 80129ee:	e03f      	b.n	8012a70 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80129f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129f2:	68db      	ldr	r3, [r3, #12]
 80129f4:	685b      	ldr	r3, [r3, #4]
 80129f6:	4618      	mov	r0, r3
 80129f8:	f7f9 fedf 	bl	800c7ba <lwip_htonl>
 80129fc:	4604      	mov	r4, r0
 80129fe:	6a3b      	ldr	r3, [r7, #32]
 8012a00:	68db      	ldr	r3, [r3, #12]
 8012a02:	685b      	ldr	r3, [r3, #4]
 8012a04:	4618      	mov	r0, r3
 8012a06:	f7f9 fed8 	bl	800c7ba <lwip_htonl>
 8012a0a:	4603      	mov	r3, r0
 8012a0c:	1ae3      	subs	r3, r4, r3
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	da24      	bge.n	8012a5c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	3370      	adds	r3, #112	; 0x70
 8012a16:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012a18:	e002      	b.n	8012a20 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8012a1a:	69fb      	ldr	r3, [r7, #28]
 8012a1c:	681b      	ldr	r3, [r3, #0]
 8012a1e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012a20:	69fb      	ldr	r3, [r7, #28]
 8012a22:	681b      	ldr	r3, [r3, #0]
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d011      	beq.n	8012a4c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012a28:	69fb      	ldr	r3, [r7, #28]
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	68db      	ldr	r3, [r3, #12]
 8012a2e:	685b      	ldr	r3, [r3, #4]
 8012a30:	4618      	mov	r0, r3
 8012a32:	f7f9 fec2 	bl	800c7ba <lwip_htonl>
 8012a36:	4604      	mov	r4, r0
 8012a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a3a:	68db      	ldr	r3, [r3, #12]
 8012a3c:	685b      	ldr	r3, [r3, #4]
 8012a3e:	4618      	mov	r0, r3
 8012a40:	f7f9 febb 	bl	800c7ba <lwip_htonl>
 8012a44:	4603      	mov	r3, r0
 8012a46:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	dbe6      	blt.n	8012a1a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8012a4c:	69fb      	ldr	r3, [r7, #28]
 8012a4e:	681a      	ldr	r2, [r3, #0]
 8012a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a52:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8012a54:	69fb      	ldr	r3, [r7, #28]
 8012a56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012a58:	601a      	str	r2, [r3, #0]
 8012a5a:	e009      	b.n	8012a70 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8012a5c:	6a3b      	ldr	r3, [r7, #32]
 8012a5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012a60:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8012a62:	6a3b      	ldr	r3, [r7, #32]
 8012a64:	681b      	ldr	r3, [r3, #0]
 8012a66:	623b      	str	r3, [r7, #32]
 8012a68:	e002      	b.n	8012a70 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8012a6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012a6c:	f7fc fc43 	bl	800f2f6 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a74:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8012a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d012      	beq.n	8012aa2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a7e:	68db      	ldr	r3, [r3, #12]
 8012a80:	685b      	ldr	r3, [r3, #4]
 8012a82:	4618      	mov	r0, r3
 8012a84:	f7f9 fe99 	bl	800c7ba <lwip_htonl>
 8012a88:	4602      	mov	r2, r0
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012a8e:	1ad3      	subs	r3, r2, r3
 8012a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012a92:	8912      	ldrh	r2, [r2, #8]
 8012a94:	4413      	add	r3, r2
  while (seg != NULL &&
 8012a96:	69ba      	ldr	r2, [r7, #24]
 8012a98:	429a      	cmp	r2, r3
 8012a9a:	f4bf aed9 	bcs.w	8012850 <tcp_output+0x160>
 8012a9e:	e000      	b.n	8012aa2 <tcp_output+0x3b2>
      break;
 8012aa0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d108      	bne.n	8012abc <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	2200      	movs	r2, #0
 8012aae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8012ab2:	e004      	b.n	8012abe <tcp_output+0x3ce>
    goto output_done;
 8012ab4:	bf00      	nop
 8012ab6:	e002      	b.n	8012abe <tcp_output+0x3ce>
    goto output_done;
 8012ab8:	bf00      	nop
 8012aba:	e000      	b.n	8012abe <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8012abc:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	8b5b      	ldrh	r3, [r3, #26]
 8012ac2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012ac6:	b29a      	uxth	r2, r3
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8012acc:	2300      	movs	r3, #0
}
 8012ace:	4618      	mov	r0, r3
 8012ad0:	3728      	adds	r7, #40	; 0x28
 8012ad2:	46bd      	mov	sp, r7
 8012ad4:	bdb0      	pop	{r4, r5, r7, pc}
 8012ad6:	bf00      	nop

08012ad8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8012ad8:	b580      	push	{r7, lr}
 8012ada:	b082      	sub	sp, #8
 8012adc:	af00      	add	r7, sp, #0
 8012ade:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	d106      	bne.n	8012af4 <tcp_output_segment_busy+0x1c>
 8012ae6:	4b09      	ldr	r3, [pc, #36]	; (8012b0c <tcp_output_segment_busy+0x34>)
 8012ae8:	f240 529a 	movw	r2, #1434	; 0x59a
 8012aec:	4908      	ldr	r1, [pc, #32]	; (8012b10 <tcp_output_segment_busy+0x38>)
 8012aee:	4809      	ldr	r0, [pc, #36]	; (8012b14 <tcp_output_segment_busy+0x3c>)
 8012af0:	f004 f9c8 	bl	8016e84 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	685b      	ldr	r3, [r3, #4]
 8012af8:	7b9b      	ldrb	r3, [r3, #14]
 8012afa:	2b01      	cmp	r3, #1
 8012afc:	d001      	beq.n	8012b02 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8012afe:	2301      	movs	r3, #1
 8012b00:	e000      	b.n	8012b04 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8012b02:	2300      	movs	r3, #0
}
 8012b04:	4618      	mov	r0, r3
 8012b06:	3708      	adds	r7, #8
 8012b08:	46bd      	mov	sp, r7
 8012b0a:	bd80      	pop	{r7, pc}
 8012b0c:	080197d0 	.word	0x080197d0
 8012b10:	08019d6c 	.word	0x08019d6c
 8012b14:	08019824 	.word	0x08019824

08012b18 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012b18:	b5b0      	push	{r4, r5, r7, lr}
 8012b1a:	b08c      	sub	sp, #48	; 0x30
 8012b1c:	af04      	add	r7, sp, #16
 8012b1e:	60f8      	str	r0, [r7, #12]
 8012b20:	60b9      	str	r1, [r7, #8]
 8012b22:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8012b24:	68fb      	ldr	r3, [r7, #12]
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d106      	bne.n	8012b38 <tcp_output_segment+0x20>
 8012b2a:	4b63      	ldr	r3, [pc, #396]	; (8012cb8 <tcp_output_segment+0x1a0>)
 8012b2c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8012b30:	4962      	ldr	r1, [pc, #392]	; (8012cbc <tcp_output_segment+0x1a4>)
 8012b32:	4863      	ldr	r0, [pc, #396]	; (8012cc0 <tcp_output_segment+0x1a8>)
 8012b34:	f004 f9a6 	bl	8016e84 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8012b38:	68bb      	ldr	r3, [r7, #8]
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	d106      	bne.n	8012b4c <tcp_output_segment+0x34>
 8012b3e:	4b5e      	ldr	r3, [pc, #376]	; (8012cb8 <tcp_output_segment+0x1a0>)
 8012b40:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8012b44:	495f      	ldr	r1, [pc, #380]	; (8012cc4 <tcp_output_segment+0x1ac>)
 8012b46:	485e      	ldr	r0, [pc, #376]	; (8012cc0 <tcp_output_segment+0x1a8>)
 8012b48:	f004 f99c 	bl	8016e84 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d106      	bne.n	8012b60 <tcp_output_segment+0x48>
 8012b52:	4b59      	ldr	r3, [pc, #356]	; (8012cb8 <tcp_output_segment+0x1a0>)
 8012b54:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8012b58:	495b      	ldr	r1, [pc, #364]	; (8012cc8 <tcp_output_segment+0x1b0>)
 8012b5a:	4859      	ldr	r0, [pc, #356]	; (8012cc0 <tcp_output_segment+0x1a8>)
 8012b5c:	f004 f992 	bl	8016e84 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8012b60:	68f8      	ldr	r0, [r7, #12]
 8012b62:	f7ff ffb9 	bl	8012ad8 <tcp_output_segment_busy>
 8012b66:	4603      	mov	r3, r0
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	d001      	beq.n	8012b70 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8012b6c:	2300      	movs	r3, #0
 8012b6e:	e09f      	b.n	8012cb0 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8012b70:	68bb      	ldr	r3, [r7, #8]
 8012b72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012b74:	68fb      	ldr	r3, [r7, #12]
 8012b76:	68dc      	ldr	r4, [r3, #12]
 8012b78:	4610      	mov	r0, r2
 8012b7a:	f7f9 fe1e 	bl	800c7ba <lwip_htonl>
 8012b7e:	4603      	mov	r3, r0
 8012b80:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8012b82:	68bb      	ldr	r3, [r7, #8]
 8012b84:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012b86:	68fb      	ldr	r3, [r7, #12]
 8012b88:	68dc      	ldr	r4, [r3, #12]
 8012b8a:	4610      	mov	r0, r2
 8012b8c:	f7f9 fe00 	bl	800c790 <lwip_htons>
 8012b90:	4603      	mov	r3, r0
 8012b92:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012b94:	68bb      	ldr	r3, [r7, #8]
 8012b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b98:	68ba      	ldr	r2, [r7, #8]
 8012b9a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012b9c:	441a      	add	r2, r3
 8012b9e:	68bb      	ldr	r3, [r7, #8]
 8012ba0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8012ba2:	68fb      	ldr	r3, [r7, #12]
 8012ba4:	68db      	ldr	r3, [r3, #12]
 8012ba6:	3314      	adds	r3, #20
 8012ba8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8012baa:	68fb      	ldr	r3, [r7, #12]
 8012bac:	7a9b      	ldrb	r3, [r3, #10]
 8012bae:	f003 0301 	and.w	r3, r3, #1
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d015      	beq.n	8012be2 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8012bb6:	68bb      	ldr	r3, [r7, #8]
 8012bb8:	3304      	adds	r3, #4
 8012bba:	461a      	mov	r2, r3
 8012bbc:	6879      	ldr	r1, [r7, #4]
 8012bbe:	f44f 7006 	mov.w	r0, #536	; 0x218
 8012bc2:	f7fc fe8f 	bl	800f8e4 <tcp_eff_send_mss_netif>
 8012bc6:	4603      	mov	r3, r0
 8012bc8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8012bca:	8b7b      	ldrh	r3, [r7, #26]
 8012bcc:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8012bd0:	4618      	mov	r0, r3
 8012bd2:	f7f9 fdf2 	bl	800c7ba <lwip_htonl>
 8012bd6:	4602      	mov	r2, r0
 8012bd8:	69fb      	ldr	r3, [r7, #28]
 8012bda:	601a      	str	r2, [r3, #0]
    opts += 1;
 8012bdc:	69fb      	ldr	r3, [r7, #28]
 8012bde:	3304      	adds	r3, #4
 8012be0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8012be2:	68bb      	ldr	r3, [r7, #8]
 8012be4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	da02      	bge.n	8012bf2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8012bec:	68bb      	ldr	r3, [r7, #8]
 8012bee:	2200      	movs	r2, #0
 8012bf0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8012bf2:	68bb      	ldr	r3, [r7, #8]
 8012bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	d10c      	bne.n	8012c14 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8012bfa:	4b34      	ldr	r3, [pc, #208]	; (8012ccc <tcp_output_segment+0x1b4>)
 8012bfc:	681a      	ldr	r2, [r3, #0]
 8012bfe:	68bb      	ldr	r3, [r7, #8]
 8012c00:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	68db      	ldr	r3, [r3, #12]
 8012c06:	685b      	ldr	r3, [r3, #4]
 8012c08:	4618      	mov	r0, r3
 8012c0a:	f7f9 fdd6 	bl	800c7ba <lwip_htonl>
 8012c0e:	4602      	mov	r2, r0
 8012c10:	68bb      	ldr	r3, [r7, #8]
 8012c12:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012c14:	68fb      	ldr	r3, [r7, #12]
 8012c16:	68da      	ldr	r2, [r3, #12]
 8012c18:	68fb      	ldr	r3, [r7, #12]
 8012c1a:	685b      	ldr	r3, [r3, #4]
 8012c1c:	685b      	ldr	r3, [r3, #4]
 8012c1e:	1ad3      	subs	r3, r2, r3
 8012c20:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8012c22:	68fb      	ldr	r3, [r7, #12]
 8012c24:	685b      	ldr	r3, [r3, #4]
 8012c26:	8959      	ldrh	r1, [r3, #10]
 8012c28:	68fb      	ldr	r3, [r7, #12]
 8012c2a:	685b      	ldr	r3, [r3, #4]
 8012c2c:	8b3a      	ldrh	r2, [r7, #24]
 8012c2e:	1a8a      	subs	r2, r1, r2
 8012c30:	b292      	uxth	r2, r2
 8012c32:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8012c34:	68fb      	ldr	r3, [r7, #12]
 8012c36:	685b      	ldr	r3, [r3, #4]
 8012c38:	8919      	ldrh	r1, [r3, #8]
 8012c3a:	68fb      	ldr	r3, [r7, #12]
 8012c3c:	685b      	ldr	r3, [r3, #4]
 8012c3e:	8b3a      	ldrh	r2, [r7, #24]
 8012c40:	1a8a      	subs	r2, r1, r2
 8012c42:	b292      	uxth	r2, r2
 8012c44:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8012c46:	68fb      	ldr	r3, [r7, #12]
 8012c48:	685b      	ldr	r3, [r3, #4]
 8012c4a:	68fa      	ldr	r2, [r7, #12]
 8012c4c:	68d2      	ldr	r2, [r2, #12]
 8012c4e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8012c50:	68fb      	ldr	r3, [r7, #12]
 8012c52:	68db      	ldr	r3, [r3, #12]
 8012c54:	2200      	movs	r2, #0
 8012c56:	741a      	strb	r2, [r3, #16]
 8012c58:	2200      	movs	r2, #0
 8012c5a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8012c5c:	68fb      	ldr	r3, [r7, #12]
 8012c5e:	68db      	ldr	r3, [r3, #12]
 8012c60:	f103 0214 	add.w	r2, r3, #20
 8012c64:	68fb      	ldr	r3, [r7, #12]
 8012c66:	7a9b      	ldrb	r3, [r3, #10]
 8012c68:	009b      	lsls	r3, r3, #2
 8012c6a:	f003 0304 	and.w	r3, r3, #4
 8012c6e:	4413      	add	r3, r2
 8012c70:	69fa      	ldr	r2, [r7, #28]
 8012c72:	429a      	cmp	r2, r3
 8012c74:	d006      	beq.n	8012c84 <tcp_output_segment+0x16c>
 8012c76:	4b10      	ldr	r3, [pc, #64]	; (8012cb8 <tcp_output_segment+0x1a0>)
 8012c78:	f240 621c 	movw	r2, #1564	; 0x61c
 8012c7c:	4914      	ldr	r1, [pc, #80]	; (8012cd0 <tcp_output_segment+0x1b8>)
 8012c7e:	4810      	ldr	r0, [pc, #64]	; (8012cc0 <tcp_output_segment+0x1a8>)
 8012c80:	f004 f900 	bl	8016e84 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8012c84:	68fb      	ldr	r3, [r7, #12]
 8012c86:	6858      	ldr	r0, [r3, #4]
 8012c88:	68b9      	ldr	r1, [r7, #8]
 8012c8a:	68bb      	ldr	r3, [r7, #8]
 8012c8c:	1d1c      	adds	r4, r3, #4
 8012c8e:	68bb      	ldr	r3, [r7, #8]
 8012c90:	7add      	ldrb	r5, [r3, #11]
 8012c92:	68bb      	ldr	r3, [r7, #8]
 8012c94:	7a9b      	ldrb	r3, [r3, #10]
 8012c96:	687a      	ldr	r2, [r7, #4]
 8012c98:	9202      	str	r2, [sp, #8]
 8012c9a:	2206      	movs	r2, #6
 8012c9c:	9201      	str	r2, [sp, #4]
 8012c9e:	9300      	str	r3, [sp, #0]
 8012ca0:	462b      	mov	r3, r5
 8012ca2:	4622      	mov	r2, r4
 8012ca4:	f002 fa66 	bl	8015174 <ip4_output_if>
 8012ca8:	4603      	mov	r3, r0
 8012caa:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8012cac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012cb0:	4618      	mov	r0, r3
 8012cb2:	3720      	adds	r7, #32
 8012cb4:	46bd      	mov	sp, r7
 8012cb6:	bdb0      	pop	{r4, r5, r7, pc}
 8012cb8:	080197d0 	.word	0x080197d0
 8012cbc:	08019d94 	.word	0x08019d94
 8012cc0:	08019824 	.word	0x08019824
 8012cc4:	08019db4 	.word	0x08019db4
 8012cc8:	08019dd4 	.word	0x08019dd4
 8012ccc:	2000b100 	.word	0x2000b100
 8012cd0:	08019df8 	.word	0x08019df8

08012cd4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8012cd4:	b5b0      	push	{r4, r5, r7, lr}
 8012cd6:	b084      	sub	sp, #16
 8012cd8:	af00      	add	r7, sp, #0
 8012cda:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	d106      	bne.n	8012cf0 <tcp_rexmit_rto_prepare+0x1c>
 8012ce2:	4b31      	ldr	r3, [pc, #196]	; (8012da8 <tcp_rexmit_rto_prepare+0xd4>)
 8012ce4:	f240 6263 	movw	r2, #1635	; 0x663
 8012ce8:	4930      	ldr	r1, [pc, #192]	; (8012dac <tcp_rexmit_rto_prepare+0xd8>)
 8012cea:	4831      	ldr	r0, [pc, #196]	; (8012db0 <tcp_rexmit_rto_prepare+0xdc>)
 8012cec:	f004 f8ca 	bl	8016e84 <iprintf>

  if (pcb->unacked == NULL) {
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d102      	bne.n	8012cfe <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8012cf8:	f06f 0305 	mvn.w	r3, #5
 8012cfc:	e050      	b.n	8012da0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012d02:	60fb      	str	r3, [r7, #12]
 8012d04:	e00b      	b.n	8012d1e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8012d06:	68f8      	ldr	r0, [r7, #12]
 8012d08:	f7ff fee6 	bl	8012ad8 <tcp_output_segment_busy>
 8012d0c:	4603      	mov	r3, r0
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	d002      	beq.n	8012d18 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8012d12:	f06f 0305 	mvn.w	r3, #5
 8012d16:	e043      	b.n	8012da0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012d18:	68fb      	ldr	r3, [r7, #12]
 8012d1a:	681b      	ldr	r3, [r3, #0]
 8012d1c:	60fb      	str	r3, [r7, #12]
 8012d1e:	68fb      	ldr	r3, [r7, #12]
 8012d20:	681b      	ldr	r3, [r3, #0]
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d1ef      	bne.n	8012d06 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8012d26:	68f8      	ldr	r0, [r7, #12]
 8012d28:	f7ff fed6 	bl	8012ad8 <tcp_output_segment_busy>
 8012d2c:	4603      	mov	r3, r0
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d002      	beq.n	8012d38 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8012d32:	f06f 0305 	mvn.w	r3, #5
 8012d36:	e033      	b.n	8012da0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8012d3c:	68fb      	ldr	r3, [r7, #12]
 8012d3e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	2200      	movs	r2, #0
 8012d4c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	8b5b      	ldrh	r3, [r3, #26]
 8012d52:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8012d56:	b29a      	uxth	r2, r3
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012d5c:	68fb      	ldr	r3, [r7, #12]
 8012d5e:	68db      	ldr	r3, [r3, #12]
 8012d60:	685b      	ldr	r3, [r3, #4]
 8012d62:	4618      	mov	r0, r3
 8012d64:	f7f9 fd29 	bl	800c7ba <lwip_htonl>
 8012d68:	4604      	mov	r4, r0
 8012d6a:	68fb      	ldr	r3, [r7, #12]
 8012d6c:	891b      	ldrh	r3, [r3, #8]
 8012d6e:	461d      	mov	r5, r3
 8012d70:	68fb      	ldr	r3, [r7, #12]
 8012d72:	68db      	ldr	r3, [r3, #12]
 8012d74:	899b      	ldrh	r3, [r3, #12]
 8012d76:	b29b      	uxth	r3, r3
 8012d78:	4618      	mov	r0, r3
 8012d7a:	f7f9 fd09 	bl	800c790 <lwip_htons>
 8012d7e:	4603      	mov	r3, r0
 8012d80:	b2db      	uxtb	r3, r3
 8012d82:	f003 0303 	and.w	r3, r3, #3
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d001      	beq.n	8012d8e <tcp_rexmit_rto_prepare+0xba>
 8012d8a:	2301      	movs	r3, #1
 8012d8c:	e000      	b.n	8012d90 <tcp_rexmit_rto_prepare+0xbc>
 8012d8e:	2300      	movs	r3, #0
 8012d90:	442b      	add	r3, r5
 8012d92:	18e2      	adds	r2, r4, r3
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	2200      	movs	r2, #0
 8012d9c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8012d9e:	2300      	movs	r3, #0
}
 8012da0:	4618      	mov	r0, r3
 8012da2:	3710      	adds	r7, #16
 8012da4:	46bd      	mov	sp, r7
 8012da6:	bdb0      	pop	{r4, r5, r7, pc}
 8012da8:	080197d0 	.word	0x080197d0
 8012dac:	08019e0c 	.word	0x08019e0c
 8012db0:	08019824 	.word	0x08019824

08012db4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8012db4:	b580      	push	{r7, lr}
 8012db6:	b082      	sub	sp, #8
 8012db8:	af00      	add	r7, sp, #0
 8012dba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	2b00      	cmp	r3, #0
 8012dc0:	d106      	bne.n	8012dd0 <tcp_rexmit_rto_commit+0x1c>
 8012dc2:	4b0d      	ldr	r3, [pc, #52]	; (8012df8 <tcp_rexmit_rto_commit+0x44>)
 8012dc4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8012dc8:	490c      	ldr	r1, [pc, #48]	; (8012dfc <tcp_rexmit_rto_commit+0x48>)
 8012dca:	480d      	ldr	r0, [pc, #52]	; (8012e00 <tcp_rexmit_rto_commit+0x4c>)
 8012dcc:	f004 f85a 	bl	8016e84 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012dd6:	2bff      	cmp	r3, #255	; 0xff
 8012dd8:	d007      	beq.n	8012dea <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012de0:	3301      	adds	r3, #1
 8012de2:	b2da      	uxtb	r2, r3
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8012dea:	6878      	ldr	r0, [r7, #4]
 8012dec:	f7ff fc80 	bl	80126f0 <tcp_output>
}
 8012df0:	bf00      	nop
 8012df2:	3708      	adds	r7, #8
 8012df4:	46bd      	mov	sp, r7
 8012df6:	bd80      	pop	{r7, pc}
 8012df8:	080197d0 	.word	0x080197d0
 8012dfc:	08019e30 	.word	0x08019e30
 8012e00:	08019824 	.word	0x08019824

08012e04 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8012e04:	b580      	push	{r7, lr}
 8012e06:	b082      	sub	sp, #8
 8012e08:	af00      	add	r7, sp, #0
 8012e0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d106      	bne.n	8012e20 <tcp_rexmit_rto+0x1c>
 8012e12:	4b0a      	ldr	r3, [pc, #40]	; (8012e3c <tcp_rexmit_rto+0x38>)
 8012e14:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8012e18:	4909      	ldr	r1, [pc, #36]	; (8012e40 <tcp_rexmit_rto+0x3c>)
 8012e1a:	480a      	ldr	r0, [pc, #40]	; (8012e44 <tcp_rexmit_rto+0x40>)
 8012e1c:	f004 f832 	bl	8016e84 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8012e20:	6878      	ldr	r0, [r7, #4]
 8012e22:	f7ff ff57 	bl	8012cd4 <tcp_rexmit_rto_prepare>
 8012e26:	4603      	mov	r3, r0
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	d102      	bne.n	8012e32 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8012e2c:	6878      	ldr	r0, [r7, #4]
 8012e2e:	f7ff ffc1 	bl	8012db4 <tcp_rexmit_rto_commit>
  }
}
 8012e32:	bf00      	nop
 8012e34:	3708      	adds	r7, #8
 8012e36:	46bd      	mov	sp, r7
 8012e38:	bd80      	pop	{r7, pc}
 8012e3a:	bf00      	nop
 8012e3c:	080197d0 	.word	0x080197d0
 8012e40:	08019e54 	.word	0x08019e54
 8012e44:	08019824 	.word	0x08019824

08012e48 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8012e48:	b590      	push	{r4, r7, lr}
 8012e4a:	b085      	sub	sp, #20
 8012e4c:	af00      	add	r7, sp, #0
 8012e4e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d106      	bne.n	8012e64 <tcp_rexmit+0x1c>
 8012e56:	4b2f      	ldr	r3, [pc, #188]	; (8012f14 <tcp_rexmit+0xcc>)
 8012e58:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8012e5c:	492e      	ldr	r1, [pc, #184]	; (8012f18 <tcp_rexmit+0xd0>)
 8012e5e:	482f      	ldr	r0, [pc, #188]	; (8012f1c <tcp_rexmit+0xd4>)
 8012e60:	f004 f810 	bl	8016e84 <iprintf>

  if (pcb->unacked == NULL) {
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	d102      	bne.n	8012e72 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8012e6c:	f06f 0305 	mvn.w	r3, #5
 8012e70:	e04c      	b.n	8012f0c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012e76:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8012e78:	68b8      	ldr	r0, [r7, #8]
 8012e7a:	f7ff fe2d 	bl	8012ad8 <tcp_output_segment_busy>
 8012e7e:	4603      	mov	r3, r0
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d002      	beq.n	8012e8a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8012e84:	f06f 0305 	mvn.w	r3, #5
 8012e88:	e040      	b.n	8012f0c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8012e8a:	68bb      	ldr	r3, [r7, #8]
 8012e8c:	681a      	ldr	r2, [r3, #0]
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	336c      	adds	r3, #108	; 0x6c
 8012e96:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012e98:	e002      	b.n	8012ea0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8012e9a:	68fb      	ldr	r3, [r7, #12]
 8012e9c:	681b      	ldr	r3, [r3, #0]
 8012e9e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012ea0:	68fb      	ldr	r3, [r7, #12]
 8012ea2:	681b      	ldr	r3, [r3, #0]
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d011      	beq.n	8012ecc <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	681b      	ldr	r3, [r3, #0]
 8012eac:	68db      	ldr	r3, [r3, #12]
 8012eae:	685b      	ldr	r3, [r3, #4]
 8012eb0:	4618      	mov	r0, r3
 8012eb2:	f7f9 fc82 	bl	800c7ba <lwip_htonl>
 8012eb6:	4604      	mov	r4, r0
 8012eb8:	68bb      	ldr	r3, [r7, #8]
 8012eba:	68db      	ldr	r3, [r3, #12]
 8012ebc:	685b      	ldr	r3, [r3, #4]
 8012ebe:	4618      	mov	r0, r3
 8012ec0:	f7f9 fc7b 	bl	800c7ba <lwip_htonl>
 8012ec4:	4603      	mov	r3, r0
 8012ec6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	dbe6      	blt.n	8012e9a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8012ecc:	68fb      	ldr	r3, [r7, #12]
 8012ece:	681a      	ldr	r2, [r3, #0]
 8012ed0:	68bb      	ldr	r3, [r7, #8]
 8012ed2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8012ed4:	68fb      	ldr	r3, [r7, #12]
 8012ed6:	68ba      	ldr	r2, [r7, #8]
 8012ed8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8012eda:	68bb      	ldr	r3, [r7, #8]
 8012edc:	681b      	ldr	r3, [r3, #0]
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	d103      	bne.n	8012eea <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	2200      	movs	r2, #0
 8012ee6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012ef0:	2bff      	cmp	r3, #255	; 0xff
 8012ef2:	d007      	beq.n	8012f04 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012efa:	3301      	adds	r3, #1
 8012efc:	b2da      	uxtb	r2, r3
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	2200      	movs	r2, #0
 8012f08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8012f0a:	2300      	movs	r3, #0
}
 8012f0c:	4618      	mov	r0, r3
 8012f0e:	3714      	adds	r7, #20
 8012f10:	46bd      	mov	sp, r7
 8012f12:	bd90      	pop	{r4, r7, pc}
 8012f14:	080197d0 	.word	0x080197d0
 8012f18:	08019e70 	.word	0x08019e70
 8012f1c:	08019824 	.word	0x08019824

08012f20 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8012f20:	b580      	push	{r7, lr}
 8012f22:	b082      	sub	sp, #8
 8012f24:	af00      	add	r7, sp, #0
 8012f26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d106      	bne.n	8012f3c <tcp_rexmit_fast+0x1c>
 8012f2e:	4b2a      	ldr	r3, [pc, #168]	; (8012fd8 <tcp_rexmit_fast+0xb8>)
 8012f30:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8012f34:	4929      	ldr	r1, [pc, #164]	; (8012fdc <tcp_rexmit_fast+0xbc>)
 8012f36:	482a      	ldr	r0, [pc, #168]	; (8012fe0 <tcp_rexmit_fast+0xc0>)
 8012f38:	f003 ffa4 	bl	8016e84 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d044      	beq.n	8012fce <tcp_rexmit_fast+0xae>
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	8b5b      	ldrh	r3, [r3, #26]
 8012f48:	f003 0304 	and.w	r3, r3, #4
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d13e      	bne.n	8012fce <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8012f50:	6878      	ldr	r0, [r7, #4]
 8012f52:	f7ff ff79 	bl	8012e48 <tcp_rexmit>
 8012f56:	4603      	mov	r3, r0
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	d138      	bne.n	8012fce <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012f68:	4293      	cmp	r3, r2
 8012f6a:	bf28      	it	cs
 8012f6c:	4613      	movcs	r3, r2
 8012f6e:	b29b      	uxth	r3, r3
 8012f70:	0fda      	lsrs	r2, r3, #31
 8012f72:	4413      	add	r3, r2
 8012f74:	105b      	asrs	r3, r3, #1
 8012f76:	b29a      	uxth	r2, r3
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8012f84:	461a      	mov	r2, r3
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012f8a:	005b      	lsls	r3, r3, #1
 8012f8c:	429a      	cmp	r2, r3
 8012f8e:	d206      	bcs.n	8012f9e <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012f94:	005b      	lsls	r3, r3, #1
 8012f96:	b29a      	uxth	r2, r3
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012fa8:	4619      	mov	r1, r3
 8012faa:	0049      	lsls	r1, r1, #1
 8012fac:	440b      	add	r3, r1
 8012fae:	b29b      	uxth	r3, r3
 8012fb0:	4413      	add	r3, r2
 8012fb2:	b29a      	uxth	r2, r3
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	8b5b      	ldrh	r3, [r3, #26]
 8012fbe:	f043 0304 	orr.w	r3, r3, #4
 8012fc2:	b29a      	uxth	r2, r3
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	2200      	movs	r2, #0
 8012fcc:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8012fce:	bf00      	nop
 8012fd0:	3708      	adds	r7, #8
 8012fd2:	46bd      	mov	sp, r7
 8012fd4:	bd80      	pop	{r7, pc}
 8012fd6:	bf00      	nop
 8012fd8:	080197d0 	.word	0x080197d0
 8012fdc:	08019e88 	.word	0x08019e88
 8012fe0:	08019824 	.word	0x08019824

08012fe4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8012fe4:	b580      	push	{r7, lr}
 8012fe6:	b086      	sub	sp, #24
 8012fe8:	af00      	add	r7, sp, #0
 8012fea:	60f8      	str	r0, [r7, #12]
 8012fec:	607b      	str	r3, [r7, #4]
 8012fee:	460b      	mov	r3, r1
 8012ff0:	817b      	strh	r3, [r7, #10]
 8012ff2:	4613      	mov	r3, r2
 8012ff4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8012ff6:	897a      	ldrh	r2, [r7, #10]
 8012ff8:	893b      	ldrh	r3, [r7, #8]
 8012ffa:	4413      	add	r3, r2
 8012ffc:	b29b      	uxth	r3, r3
 8012ffe:	3314      	adds	r3, #20
 8013000:	b29b      	uxth	r3, r3
 8013002:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013006:	4619      	mov	r1, r3
 8013008:	2022      	movs	r0, #34	; 0x22
 801300a:	f7fa fc11 	bl	800d830 <pbuf_alloc>
 801300e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8013010:	697b      	ldr	r3, [r7, #20]
 8013012:	2b00      	cmp	r3, #0
 8013014:	d04d      	beq.n	80130b2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8013016:	897b      	ldrh	r3, [r7, #10]
 8013018:	3313      	adds	r3, #19
 801301a:	697a      	ldr	r2, [r7, #20]
 801301c:	8952      	ldrh	r2, [r2, #10]
 801301e:	4293      	cmp	r3, r2
 8013020:	db06      	blt.n	8013030 <tcp_output_alloc_header_common+0x4c>
 8013022:	4b26      	ldr	r3, [pc, #152]	; (80130bc <tcp_output_alloc_header_common+0xd8>)
 8013024:	f240 7223 	movw	r2, #1827	; 0x723
 8013028:	4925      	ldr	r1, [pc, #148]	; (80130c0 <tcp_output_alloc_header_common+0xdc>)
 801302a:	4826      	ldr	r0, [pc, #152]	; (80130c4 <tcp_output_alloc_header_common+0xe0>)
 801302c:	f003 ff2a 	bl	8016e84 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8013030:	697b      	ldr	r3, [r7, #20]
 8013032:	685b      	ldr	r3, [r3, #4]
 8013034:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8013036:	8c3b      	ldrh	r3, [r7, #32]
 8013038:	4618      	mov	r0, r3
 801303a:	f7f9 fba9 	bl	800c790 <lwip_htons>
 801303e:	4603      	mov	r3, r0
 8013040:	461a      	mov	r2, r3
 8013042:	693b      	ldr	r3, [r7, #16]
 8013044:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8013046:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013048:	4618      	mov	r0, r3
 801304a:	f7f9 fba1 	bl	800c790 <lwip_htons>
 801304e:	4603      	mov	r3, r0
 8013050:	461a      	mov	r2, r3
 8013052:	693b      	ldr	r3, [r7, #16]
 8013054:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8013056:	693b      	ldr	r3, [r7, #16]
 8013058:	687a      	ldr	r2, [r7, #4]
 801305a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801305c:	68f8      	ldr	r0, [r7, #12]
 801305e:	f7f9 fbac 	bl	800c7ba <lwip_htonl>
 8013062:	4602      	mov	r2, r0
 8013064:	693b      	ldr	r3, [r7, #16]
 8013066:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8013068:	897b      	ldrh	r3, [r7, #10]
 801306a:	089b      	lsrs	r3, r3, #2
 801306c:	b29b      	uxth	r3, r3
 801306e:	3305      	adds	r3, #5
 8013070:	b29b      	uxth	r3, r3
 8013072:	031b      	lsls	r3, r3, #12
 8013074:	b29a      	uxth	r2, r3
 8013076:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801307a:	b29b      	uxth	r3, r3
 801307c:	4313      	orrs	r3, r2
 801307e:	b29b      	uxth	r3, r3
 8013080:	4618      	mov	r0, r3
 8013082:	f7f9 fb85 	bl	800c790 <lwip_htons>
 8013086:	4603      	mov	r3, r0
 8013088:	461a      	mov	r2, r3
 801308a:	693b      	ldr	r3, [r7, #16]
 801308c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801308e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013090:	4618      	mov	r0, r3
 8013092:	f7f9 fb7d 	bl	800c790 <lwip_htons>
 8013096:	4603      	mov	r3, r0
 8013098:	461a      	mov	r2, r3
 801309a:	693b      	ldr	r3, [r7, #16]
 801309c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801309e:	693b      	ldr	r3, [r7, #16]
 80130a0:	2200      	movs	r2, #0
 80130a2:	741a      	strb	r2, [r3, #16]
 80130a4:	2200      	movs	r2, #0
 80130a6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80130a8:	693b      	ldr	r3, [r7, #16]
 80130aa:	2200      	movs	r2, #0
 80130ac:	749a      	strb	r2, [r3, #18]
 80130ae:	2200      	movs	r2, #0
 80130b0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80130b2:	697b      	ldr	r3, [r7, #20]
}
 80130b4:	4618      	mov	r0, r3
 80130b6:	3718      	adds	r7, #24
 80130b8:	46bd      	mov	sp, r7
 80130ba:	bd80      	pop	{r7, pc}
 80130bc:	080197d0 	.word	0x080197d0
 80130c0:	08019ea8 	.word	0x08019ea8
 80130c4:	08019824 	.word	0x08019824

080130c8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80130c8:	b5b0      	push	{r4, r5, r7, lr}
 80130ca:	b08a      	sub	sp, #40	; 0x28
 80130cc:	af04      	add	r7, sp, #16
 80130ce:	60f8      	str	r0, [r7, #12]
 80130d0:	607b      	str	r3, [r7, #4]
 80130d2:	460b      	mov	r3, r1
 80130d4:	817b      	strh	r3, [r7, #10]
 80130d6:	4613      	mov	r3, r2
 80130d8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80130da:	68fb      	ldr	r3, [r7, #12]
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d106      	bne.n	80130ee <tcp_output_alloc_header+0x26>
 80130e0:	4b15      	ldr	r3, [pc, #84]	; (8013138 <tcp_output_alloc_header+0x70>)
 80130e2:	f240 7242 	movw	r2, #1858	; 0x742
 80130e6:	4915      	ldr	r1, [pc, #84]	; (801313c <tcp_output_alloc_header+0x74>)
 80130e8:	4815      	ldr	r0, [pc, #84]	; (8013140 <tcp_output_alloc_header+0x78>)
 80130ea:	f003 fecb 	bl	8016e84 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80130ee:	68fb      	ldr	r3, [r7, #12]
 80130f0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80130f2:	68fb      	ldr	r3, [r7, #12]
 80130f4:	8adb      	ldrh	r3, [r3, #22]
 80130f6:	68fa      	ldr	r2, [r7, #12]
 80130f8:	8b12      	ldrh	r2, [r2, #24]
 80130fa:	68f9      	ldr	r1, [r7, #12]
 80130fc:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80130fe:	893d      	ldrh	r5, [r7, #8]
 8013100:	897c      	ldrh	r4, [r7, #10]
 8013102:	9103      	str	r1, [sp, #12]
 8013104:	2110      	movs	r1, #16
 8013106:	9102      	str	r1, [sp, #8]
 8013108:	9201      	str	r2, [sp, #4]
 801310a:	9300      	str	r3, [sp, #0]
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	462a      	mov	r2, r5
 8013110:	4621      	mov	r1, r4
 8013112:	f7ff ff67 	bl	8012fe4 <tcp_output_alloc_header_common>
 8013116:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8013118:	697b      	ldr	r3, [r7, #20]
 801311a:	2b00      	cmp	r3, #0
 801311c:	d006      	beq.n	801312c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801311e:	68fb      	ldr	r3, [r7, #12]
 8013120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013122:	68fa      	ldr	r2, [r7, #12]
 8013124:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013126:	441a      	add	r2, r3
 8013128:	68fb      	ldr	r3, [r7, #12]
 801312a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801312c:	697b      	ldr	r3, [r7, #20]
}
 801312e:	4618      	mov	r0, r3
 8013130:	3718      	adds	r7, #24
 8013132:	46bd      	mov	sp, r7
 8013134:	bdb0      	pop	{r4, r5, r7, pc}
 8013136:	bf00      	nop
 8013138:	080197d0 	.word	0x080197d0
 801313c:	08019ed8 	.word	0x08019ed8
 8013140:	08019824 	.word	0x08019824

08013144 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8013144:	b580      	push	{r7, lr}
 8013146:	b088      	sub	sp, #32
 8013148:	af00      	add	r7, sp, #0
 801314a:	60f8      	str	r0, [r7, #12]
 801314c:	60b9      	str	r1, [r7, #8]
 801314e:	4611      	mov	r1, r2
 8013150:	461a      	mov	r2, r3
 8013152:	460b      	mov	r3, r1
 8013154:	71fb      	strb	r3, [r7, #7]
 8013156:	4613      	mov	r3, r2
 8013158:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801315a:	2300      	movs	r3, #0
 801315c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801315e:	68bb      	ldr	r3, [r7, #8]
 8013160:	2b00      	cmp	r3, #0
 8013162:	d106      	bne.n	8013172 <tcp_output_fill_options+0x2e>
 8013164:	4b13      	ldr	r3, [pc, #76]	; (80131b4 <tcp_output_fill_options+0x70>)
 8013166:	f240 7256 	movw	r2, #1878	; 0x756
 801316a:	4913      	ldr	r1, [pc, #76]	; (80131b8 <tcp_output_fill_options+0x74>)
 801316c:	4813      	ldr	r0, [pc, #76]	; (80131bc <tcp_output_fill_options+0x78>)
 801316e:	f003 fe89 	bl	8016e84 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8013172:	68bb      	ldr	r3, [r7, #8]
 8013174:	685b      	ldr	r3, [r3, #4]
 8013176:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8013178:	69bb      	ldr	r3, [r7, #24]
 801317a:	3314      	adds	r3, #20
 801317c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801317e:	69bb      	ldr	r3, [r7, #24]
 8013180:	f103 0214 	add.w	r2, r3, #20
 8013184:	8bfb      	ldrh	r3, [r7, #30]
 8013186:	009b      	lsls	r3, r3, #2
 8013188:	4619      	mov	r1, r3
 801318a:	79fb      	ldrb	r3, [r7, #7]
 801318c:	009b      	lsls	r3, r3, #2
 801318e:	f003 0304 	and.w	r3, r3, #4
 8013192:	440b      	add	r3, r1
 8013194:	4413      	add	r3, r2
 8013196:	697a      	ldr	r2, [r7, #20]
 8013198:	429a      	cmp	r2, r3
 801319a:	d006      	beq.n	80131aa <tcp_output_fill_options+0x66>
 801319c:	4b05      	ldr	r3, [pc, #20]	; (80131b4 <tcp_output_fill_options+0x70>)
 801319e:	f240 7275 	movw	r2, #1909	; 0x775
 80131a2:	4907      	ldr	r1, [pc, #28]	; (80131c0 <tcp_output_fill_options+0x7c>)
 80131a4:	4805      	ldr	r0, [pc, #20]	; (80131bc <tcp_output_fill_options+0x78>)
 80131a6:	f003 fe6d 	bl	8016e84 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80131aa:	bf00      	nop
 80131ac:	3720      	adds	r7, #32
 80131ae:	46bd      	mov	sp, r7
 80131b0:	bd80      	pop	{r7, pc}
 80131b2:	bf00      	nop
 80131b4:	080197d0 	.word	0x080197d0
 80131b8:	08019f00 	.word	0x08019f00
 80131bc:	08019824 	.word	0x08019824
 80131c0:	08019df8 	.word	0x08019df8

080131c4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80131c4:	b580      	push	{r7, lr}
 80131c6:	b08a      	sub	sp, #40	; 0x28
 80131c8:	af04      	add	r7, sp, #16
 80131ca:	60f8      	str	r0, [r7, #12]
 80131cc:	60b9      	str	r1, [r7, #8]
 80131ce:	607a      	str	r2, [r7, #4]
 80131d0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80131d2:	68bb      	ldr	r3, [r7, #8]
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d106      	bne.n	80131e6 <tcp_output_control_segment+0x22>
 80131d8:	4b1c      	ldr	r3, [pc, #112]	; (801324c <tcp_output_control_segment+0x88>)
 80131da:	f240 7287 	movw	r2, #1927	; 0x787
 80131de:	491c      	ldr	r1, [pc, #112]	; (8013250 <tcp_output_control_segment+0x8c>)
 80131e0:	481c      	ldr	r0, [pc, #112]	; (8013254 <tcp_output_control_segment+0x90>)
 80131e2:	f003 fe4f 	bl	8016e84 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80131e6:	683a      	ldr	r2, [r7, #0]
 80131e8:	6879      	ldr	r1, [r7, #4]
 80131ea:	68f8      	ldr	r0, [r7, #12]
 80131ec:	f7fe ff40 	bl	8012070 <tcp_route>
 80131f0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80131f2:	693b      	ldr	r3, [r7, #16]
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d102      	bne.n	80131fe <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80131f8:	23fc      	movs	r3, #252	; 0xfc
 80131fa:	75fb      	strb	r3, [r7, #23]
 80131fc:	e01c      	b.n	8013238 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80131fe:	68fb      	ldr	r3, [r7, #12]
 8013200:	2b00      	cmp	r3, #0
 8013202:	d006      	beq.n	8013212 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8013204:	68fb      	ldr	r3, [r7, #12]
 8013206:	7adb      	ldrb	r3, [r3, #11]
 8013208:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801320a:	68fb      	ldr	r3, [r7, #12]
 801320c:	7a9b      	ldrb	r3, [r3, #10]
 801320e:	757b      	strb	r3, [r7, #21]
 8013210:	e003      	b.n	801321a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8013212:	23ff      	movs	r3, #255	; 0xff
 8013214:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8013216:	2300      	movs	r3, #0
 8013218:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801321a:	7dba      	ldrb	r2, [r7, #22]
 801321c:	693b      	ldr	r3, [r7, #16]
 801321e:	9302      	str	r3, [sp, #8]
 8013220:	2306      	movs	r3, #6
 8013222:	9301      	str	r3, [sp, #4]
 8013224:	7d7b      	ldrb	r3, [r7, #21]
 8013226:	9300      	str	r3, [sp, #0]
 8013228:	4613      	mov	r3, r2
 801322a:	683a      	ldr	r2, [r7, #0]
 801322c:	6879      	ldr	r1, [r7, #4]
 801322e:	68b8      	ldr	r0, [r7, #8]
 8013230:	f001 ffa0 	bl	8015174 <ip4_output_if>
 8013234:	4603      	mov	r3, r0
 8013236:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8013238:	68b8      	ldr	r0, [r7, #8]
 801323a:	f7fa fddd 	bl	800ddf8 <pbuf_free>
  return err;
 801323e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013242:	4618      	mov	r0, r3
 8013244:	3718      	adds	r7, #24
 8013246:	46bd      	mov	sp, r7
 8013248:	bd80      	pop	{r7, pc}
 801324a:	bf00      	nop
 801324c:	080197d0 	.word	0x080197d0
 8013250:	08019f28 	.word	0x08019f28
 8013254:	08019824 	.word	0x08019824

08013258 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8013258:	b590      	push	{r4, r7, lr}
 801325a:	b08b      	sub	sp, #44	; 0x2c
 801325c:	af04      	add	r7, sp, #16
 801325e:	60f8      	str	r0, [r7, #12]
 8013260:	60b9      	str	r1, [r7, #8]
 8013262:	607a      	str	r2, [r7, #4]
 8013264:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8013266:	683b      	ldr	r3, [r7, #0]
 8013268:	2b00      	cmp	r3, #0
 801326a:	d106      	bne.n	801327a <tcp_rst+0x22>
 801326c:	4b1f      	ldr	r3, [pc, #124]	; (80132ec <tcp_rst+0x94>)
 801326e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8013272:	491f      	ldr	r1, [pc, #124]	; (80132f0 <tcp_rst+0x98>)
 8013274:	481f      	ldr	r0, [pc, #124]	; (80132f4 <tcp_rst+0x9c>)
 8013276:	f003 fe05 	bl	8016e84 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801327a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801327c:	2b00      	cmp	r3, #0
 801327e:	d106      	bne.n	801328e <tcp_rst+0x36>
 8013280:	4b1a      	ldr	r3, [pc, #104]	; (80132ec <tcp_rst+0x94>)
 8013282:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8013286:	491c      	ldr	r1, [pc, #112]	; (80132f8 <tcp_rst+0xa0>)
 8013288:	481a      	ldr	r0, [pc, #104]	; (80132f4 <tcp_rst+0x9c>)
 801328a:	f003 fdfb 	bl	8016e84 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801328e:	2300      	movs	r3, #0
 8013290:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8013292:	f246 0308 	movw	r3, #24584	; 0x6008
 8013296:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8013298:	7dfb      	ldrb	r3, [r7, #23]
 801329a:	b29c      	uxth	r4, r3
 801329c:	68b8      	ldr	r0, [r7, #8]
 801329e:	f7f9 fa8c 	bl	800c7ba <lwip_htonl>
 80132a2:	4602      	mov	r2, r0
 80132a4:	8abb      	ldrh	r3, [r7, #20]
 80132a6:	9303      	str	r3, [sp, #12]
 80132a8:	2314      	movs	r3, #20
 80132aa:	9302      	str	r3, [sp, #8]
 80132ac:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80132ae:	9301      	str	r3, [sp, #4]
 80132b0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80132b2:	9300      	str	r3, [sp, #0]
 80132b4:	4613      	mov	r3, r2
 80132b6:	2200      	movs	r2, #0
 80132b8:	4621      	mov	r1, r4
 80132ba:	6878      	ldr	r0, [r7, #4]
 80132bc:	f7ff fe92 	bl	8012fe4 <tcp_output_alloc_header_common>
 80132c0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80132c2:	693b      	ldr	r3, [r7, #16]
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d00c      	beq.n	80132e2 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80132c8:	7dfb      	ldrb	r3, [r7, #23]
 80132ca:	2200      	movs	r2, #0
 80132cc:	6939      	ldr	r1, [r7, #16]
 80132ce:	68f8      	ldr	r0, [r7, #12]
 80132d0:	f7ff ff38 	bl	8013144 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80132d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132d6:	683a      	ldr	r2, [r7, #0]
 80132d8:	6939      	ldr	r1, [r7, #16]
 80132da:	68f8      	ldr	r0, [r7, #12]
 80132dc:	f7ff ff72 	bl	80131c4 <tcp_output_control_segment>
 80132e0:	e000      	b.n	80132e4 <tcp_rst+0x8c>
    return;
 80132e2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80132e4:	371c      	adds	r7, #28
 80132e6:	46bd      	mov	sp, r7
 80132e8:	bd90      	pop	{r4, r7, pc}
 80132ea:	bf00      	nop
 80132ec:	080197d0 	.word	0x080197d0
 80132f0:	08019f54 	.word	0x08019f54
 80132f4:	08019824 	.word	0x08019824
 80132f8:	08019f70 	.word	0x08019f70

080132fc <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80132fc:	b590      	push	{r4, r7, lr}
 80132fe:	b087      	sub	sp, #28
 8013300:	af00      	add	r7, sp, #0
 8013302:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8013304:	2300      	movs	r3, #0
 8013306:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8013308:	2300      	movs	r3, #0
 801330a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	2b00      	cmp	r3, #0
 8013310:	d106      	bne.n	8013320 <tcp_send_empty_ack+0x24>
 8013312:	4b28      	ldr	r3, [pc, #160]	; (80133b4 <tcp_send_empty_ack+0xb8>)
 8013314:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8013318:	4927      	ldr	r1, [pc, #156]	; (80133b8 <tcp_send_empty_ack+0xbc>)
 801331a:	4828      	ldr	r0, [pc, #160]	; (80133bc <tcp_send_empty_ack+0xc0>)
 801331c:	f003 fdb2 	bl	8016e84 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013320:	7dfb      	ldrb	r3, [r7, #23]
 8013322:	009b      	lsls	r3, r3, #2
 8013324:	b2db      	uxtb	r3, r3
 8013326:	f003 0304 	and.w	r3, r3, #4
 801332a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801332c:	7d7b      	ldrb	r3, [r7, #21]
 801332e:	b29c      	uxth	r4, r3
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013334:	4618      	mov	r0, r3
 8013336:	f7f9 fa40 	bl	800c7ba <lwip_htonl>
 801333a:	4603      	mov	r3, r0
 801333c:	2200      	movs	r2, #0
 801333e:	4621      	mov	r1, r4
 8013340:	6878      	ldr	r0, [r7, #4]
 8013342:	f7ff fec1 	bl	80130c8 <tcp_output_alloc_header>
 8013346:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013348:	693b      	ldr	r3, [r7, #16]
 801334a:	2b00      	cmp	r3, #0
 801334c:	d109      	bne.n	8013362 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	8b5b      	ldrh	r3, [r3, #26]
 8013352:	f043 0303 	orr.w	r3, r3, #3
 8013356:	b29a      	uxth	r2, r3
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801335c:	f06f 0301 	mvn.w	r3, #1
 8013360:	e023      	b.n	80133aa <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8013362:	7dbb      	ldrb	r3, [r7, #22]
 8013364:	7dfa      	ldrb	r2, [r7, #23]
 8013366:	6939      	ldr	r1, [r7, #16]
 8013368:	6878      	ldr	r0, [r7, #4]
 801336a:	f7ff feeb 	bl	8013144 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801336e:	687a      	ldr	r2, [r7, #4]
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	3304      	adds	r3, #4
 8013374:	6939      	ldr	r1, [r7, #16]
 8013376:	6878      	ldr	r0, [r7, #4]
 8013378:	f7ff ff24 	bl	80131c4 <tcp_output_control_segment>
 801337c:	4603      	mov	r3, r0
 801337e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8013380:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013384:	2b00      	cmp	r3, #0
 8013386:	d007      	beq.n	8013398 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	8b5b      	ldrh	r3, [r3, #26]
 801338c:	f043 0303 	orr.w	r3, r3, #3
 8013390:	b29a      	uxth	r2, r3
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	835a      	strh	r2, [r3, #26]
 8013396:	e006      	b.n	80133a6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	8b5b      	ldrh	r3, [r3, #26]
 801339c:	f023 0303 	bic.w	r3, r3, #3
 80133a0:	b29a      	uxth	r2, r3
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80133a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80133aa:	4618      	mov	r0, r3
 80133ac:	371c      	adds	r7, #28
 80133ae:	46bd      	mov	sp, r7
 80133b0:	bd90      	pop	{r4, r7, pc}
 80133b2:	bf00      	nop
 80133b4:	080197d0 	.word	0x080197d0
 80133b8:	08019f8c 	.word	0x08019f8c
 80133bc:	08019824 	.word	0x08019824

080133c0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80133c0:	b590      	push	{r4, r7, lr}
 80133c2:	b087      	sub	sp, #28
 80133c4:	af00      	add	r7, sp, #0
 80133c6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80133c8:	2300      	movs	r3, #0
 80133ca:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d106      	bne.n	80133e0 <tcp_keepalive+0x20>
 80133d2:	4b18      	ldr	r3, [pc, #96]	; (8013434 <tcp_keepalive+0x74>)
 80133d4:	f640 0224 	movw	r2, #2084	; 0x824
 80133d8:	4917      	ldr	r1, [pc, #92]	; (8013438 <tcp_keepalive+0x78>)
 80133da:	4818      	ldr	r0, [pc, #96]	; (801343c <tcp_keepalive+0x7c>)
 80133dc:	f003 fd52 	bl	8016e84 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80133e0:	7dfb      	ldrb	r3, [r7, #23]
 80133e2:	b29c      	uxth	r4, r3
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80133e8:	3b01      	subs	r3, #1
 80133ea:	4618      	mov	r0, r3
 80133ec:	f7f9 f9e5 	bl	800c7ba <lwip_htonl>
 80133f0:	4603      	mov	r3, r0
 80133f2:	2200      	movs	r2, #0
 80133f4:	4621      	mov	r1, r4
 80133f6:	6878      	ldr	r0, [r7, #4]
 80133f8:	f7ff fe66 	bl	80130c8 <tcp_output_alloc_header>
 80133fc:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80133fe:	693b      	ldr	r3, [r7, #16]
 8013400:	2b00      	cmp	r3, #0
 8013402:	d102      	bne.n	801340a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8013404:	f04f 33ff 	mov.w	r3, #4294967295
 8013408:	e010      	b.n	801342c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801340a:	7dfb      	ldrb	r3, [r7, #23]
 801340c:	2200      	movs	r2, #0
 801340e:	6939      	ldr	r1, [r7, #16]
 8013410:	6878      	ldr	r0, [r7, #4]
 8013412:	f7ff fe97 	bl	8013144 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013416:	687a      	ldr	r2, [r7, #4]
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	3304      	adds	r3, #4
 801341c:	6939      	ldr	r1, [r7, #16]
 801341e:	6878      	ldr	r0, [r7, #4]
 8013420:	f7ff fed0 	bl	80131c4 <tcp_output_control_segment>
 8013424:	4603      	mov	r3, r0
 8013426:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013428:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801342c:	4618      	mov	r0, r3
 801342e:	371c      	adds	r7, #28
 8013430:	46bd      	mov	sp, r7
 8013432:	bd90      	pop	{r4, r7, pc}
 8013434:	080197d0 	.word	0x080197d0
 8013438:	08019fac 	.word	0x08019fac
 801343c:	08019824 	.word	0x08019824

08013440 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8013440:	b590      	push	{r4, r7, lr}
 8013442:	b08b      	sub	sp, #44	; 0x2c
 8013444:	af00      	add	r7, sp, #0
 8013446:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013448:	2300      	movs	r3, #0
 801344a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	2b00      	cmp	r3, #0
 8013452:	d106      	bne.n	8013462 <tcp_zero_window_probe+0x22>
 8013454:	4b4c      	ldr	r3, [pc, #304]	; (8013588 <tcp_zero_window_probe+0x148>)
 8013456:	f640 024f 	movw	r2, #2127	; 0x84f
 801345a:	494c      	ldr	r1, [pc, #304]	; (801358c <tcp_zero_window_probe+0x14c>)
 801345c:	484c      	ldr	r0, [pc, #304]	; (8013590 <tcp_zero_window_probe+0x150>)
 801345e:	f003 fd11 	bl	8016e84 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013466:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8013468:	6a3b      	ldr	r3, [r7, #32]
 801346a:	2b00      	cmp	r3, #0
 801346c:	d101      	bne.n	8013472 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801346e:	2300      	movs	r3, #0
 8013470:	e086      	b.n	8013580 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013478:	2bff      	cmp	r3, #255	; 0xff
 801347a:	d007      	beq.n	801348c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013482:	3301      	adds	r3, #1
 8013484:	b2da      	uxtb	r2, r3
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801348c:	6a3b      	ldr	r3, [r7, #32]
 801348e:	68db      	ldr	r3, [r3, #12]
 8013490:	899b      	ldrh	r3, [r3, #12]
 8013492:	b29b      	uxth	r3, r3
 8013494:	4618      	mov	r0, r3
 8013496:	f7f9 f97b 	bl	800c790 <lwip_htons>
 801349a:	4603      	mov	r3, r0
 801349c:	b2db      	uxtb	r3, r3
 801349e:	f003 0301 	and.w	r3, r3, #1
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	d005      	beq.n	80134b2 <tcp_zero_window_probe+0x72>
 80134a6:	6a3b      	ldr	r3, [r7, #32]
 80134a8:	891b      	ldrh	r3, [r3, #8]
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	d101      	bne.n	80134b2 <tcp_zero_window_probe+0x72>
 80134ae:	2301      	movs	r3, #1
 80134b0:	e000      	b.n	80134b4 <tcp_zero_window_probe+0x74>
 80134b2:	2300      	movs	r3, #0
 80134b4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80134b6:	7ffb      	ldrb	r3, [r7, #31]
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	bf0c      	ite	eq
 80134bc:	2301      	moveq	r3, #1
 80134be:	2300      	movne	r3, #0
 80134c0:	b2db      	uxtb	r3, r3
 80134c2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80134c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80134c8:	b299      	uxth	r1, r3
 80134ca:	6a3b      	ldr	r3, [r7, #32]
 80134cc:	68db      	ldr	r3, [r3, #12]
 80134ce:	685b      	ldr	r3, [r3, #4]
 80134d0:	8bba      	ldrh	r2, [r7, #28]
 80134d2:	6878      	ldr	r0, [r7, #4]
 80134d4:	f7ff fdf8 	bl	80130c8 <tcp_output_alloc_header>
 80134d8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80134da:	69bb      	ldr	r3, [r7, #24]
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d102      	bne.n	80134e6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80134e0:	f04f 33ff 	mov.w	r3, #4294967295
 80134e4:	e04c      	b.n	8013580 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80134e6:	69bb      	ldr	r3, [r7, #24]
 80134e8:	685b      	ldr	r3, [r3, #4]
 80134ea:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80134ec:	7ffb      	ldrb	r3, [r7, #31]
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	d011      	beq.n	8013516 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80134f2:	697b      	ldr	r3, [r7, #20]
 80134f4:	899b      	ldrh	r3, [r3, #12]
 80134f6:	b29b      	uxth	r3, r3
 80134f8:	b21b      	sxth	r3, r3
 80134fa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80134fe:	b21c      	sxth	r4, r3
 8013500:	2011      	movs	r0, #17
 8013502:	f7f9 f945 	bl	800c790 <lwip_htons>
 8013506:	4603      	mov	r3, r0
 8013508:	b21b      	sxth	r3, r3
 801350a:	4323      	orrs	r3, r4
 801350c:	b21b      	sxth	r3, r3
 801350e:	b29a      	uxth	r2, r3
 8013510:	697b      	ldr	r3, [r7, #20]
 8013512:	819a      	strh	r2, [r3, #12]
 8013514:	e010      	b.n	8013538 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8013516:	69bb      	ldr	r3, [r7, #24]
 8013518:	685b      	ldr	r3, [r3, #4]
 801351a:	3314      	adds	r3, #20
 801351c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801351e:	6a3b      	ldr	r3, [r7, #32]
 8013520:	6858      	ldr	r0, [r3, #4]
 8013522:	6a3b      	ldr	r3, [r7, #32]
 8013524:	685b      	ldr	r3, [r3, #4]
 8013526:	891a      	ldrh	r2, [r3, #8]
 8013528:	6a3b      	ldr	r3, [r7, #32]
 801352a:	891b      	ldrh	r3, [r3, #8]
 801352c:	1ad3      	subs	r3, r2, r3
 801352e:	b29b      	uxth	r3, r3
 8013530:	2201      	movs	r2, #1
 8013532:	6939      	ldr	r1, [r7, #16]
 8013534:	f7fa fe56 	bl	800e1e4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8013538:	6a3b      	ldr	r3, [r7, #32]
 801353a:	68db      	ldr	r3, [r3, #12]
 801353c:	685b      	ldr	r3, [r3, #4]
 801353e:	4618      	mov	r0, r3
 8013540:	f7f9 f93b 	bl	800c7ba <lwip_htonl>
 8013544:	4603      	mov	r3, r0
 8013546:	3301      	adds	r3, #1
 8013548:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801354e:	68fb      	ldr	r3, [r7, #12]
 8013550:	1ad3      	subs	r3, r2, r3
 8013552:	2b00      	cmp	r3, #0
 8013554:	da02      	bge.n	801355c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	68fa      	ldr	r2, [r7, #12]
 801355a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801355c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013560:	2200      	movs	r2, #0
 8013562:	69b9      	ldr	r1, [r7, #24]
 8013564:	6878      	ldr	r0, [r7, #4]
 8013566:	f7ff fded 	bl	8013144 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801356a:	687a      	ldr	r2, [r7, #4]
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	3304      	adds	r3, #4
 8013570:	69b9      	ldr	r1, [r7, #24]
 8013572:	6878      	ldr	r0, [r7, #4]
 8013574:	f7ff fe26 	bl	80131c4 <tcp_output_control_segment>
 8013578:	4603      	mov	r3, r0
 801357a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801357c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013580:	4618      	mov	r0, r3
 8013582:	372c      	adds	r7, #44	; 0x2c
 8013584:	46bd      	mov	sp, r7
 8013586:	bd90      	pop	{r4, r7, pc}
 8013588:	080197d0 	.word	0x080197d0
 801358c:	08019fc8 	.word	0x08019fc8
 8013590:	08019824 	.word	0x08019824

08013594 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8013594:	b580      	push	{r7, lr}
 8013596:	b082      	sub	sp, #8
 8013598:	af00      	add	r7, sp, #0
 801359a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801359c:	f7fa ff10 	bl	800e3c0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80135a0:	4b0a      	ldr	r3, [pc, #40]	; (80135cc <tcpip_tcp_timer+0x38>)
 80135a2:	681b      	ldr	r3, [r3, #0]
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d103      	bne.n	80135b0 <tcpip_tcp_timer+0x1c>
 80135a8:	4b09      	ldr	r3, [pc, #36]	; (80135d0 <tcpip_tcp_timer+0x3c>)
 80135aa:	681b      	ldr	r3, [r3, #0]
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d005      	beq.n	80135bc <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80135b0:	2200      	movs	r2, #0
 80135b2:	4908      	ldr	r1, [pc, #32]	; (80135d4 <tcpip_tcp_timer+0x40>)
 80135b4:	20fa      	movs	r0, #250	; 0xfa
 80135b6:	f000 f8f3 	bl	80137a0 <sys_timeout>
 80135ba:	e003      	b.n	80135c4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80135bc:	4b06      	ldr	r3, [pc, #24]	; (80135d8 <tcpip_tcp_timer+0x44>)
 80135be:	2200      	movs	r2, #0
 80135c0:	601a      	str	r2, [r3, #0]
  }
}
 80135c2:	bf00      	nop
 80135c4:	bf00      	nop
 80135c6:	3708      	adds	r7, #8
 80135c8:	46bd      	mov	sp, r7
 80135ca:	bd80      	pop	{r7, pc}
 80135cc:	2000b0fc 	.word	0x2000b0fc
 80135d0:	2000b10c 	.word	0x2000b10c
 80135d4:	08013595 	.word	0x08013595
 80135d8:	20004280 	.word	0x20004280

080135dc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80135dc:	b580      	push	{r7, lr}
 80135de:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80135e0:	4b0a      	ldr	r3, [pc, #40]	; (801360c <tcp_timer_needed+0x30>)
 80135e2:	681b      	ldr	r3, [r3, #0]
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d10f      	bne.n	8013608 <tcp_timer_needed+0x2c>
 80135e8:	4b09      	ldr	r3, [pc, #36]	; (8013610 <tcp_timer_needed+0x34>)
 80135ea:	681b      	ldr	r3, [r3, #0]
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d103      	bne.n	80135f8 <tcp_timer_needed+0x1c>
 80135f0:	4b08      	ldr	r3, [pc, #32]	; (8013614 <tcp_timer_needed+0x38>)
 80135f2:	681b      	ldr	r3, [r3, #0]
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d007      	beq.n	8013608 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80135f8:	4b04      	ldr	r3, [pc, #16]	; (801360c <tcp_timer_needed+0x30>)
 80135fa:	2201      	movs	r2, #1
 80135fc:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80135fe:	2200      	movs	r2, #0
 8013600:	4905      	ldr	r1, [pc, #20]	; (8013618 <tcp_timer_needed+0x3c>)
 8013602:	20fa      	movs	r0, #250	; 0xfa
 8013604:	f000 f8cc 	bl	80137a0 <sys_timeout>
  }
}
 8013608:	bf00      	nop
 801360a:	bd80      	pop	{r7, pc}
 801360c:	20004280 	.word	0x20004280
 8013610:	2000b0fc 	.word	0x2000b0fc
 8013614:	2000b10c 	.word	0x2000b10c
 8013618:	08013595 	.word	0x08013595

0801361c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801361c:	b580      	push	{r7, lr}
 801361e:	b086      	sub	sp, #24
 8013620:	af00      	add	r7, sp, #0
 8013622:	60f8      	str	r0, [r7, #12]
 8013624:	60b9      	str	r1, [r7, #8]
 8013626:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8013628:	200a      	movs	r0, #10
 801362a:	f7f9 fd67 	bl	800d0fc <memp_malloc>
 801362e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8013630:	693b      	ldr	r3, [r7, #16]
 8013632:	2b00      	cmp	r3, #0
 8013634:	d109      	bne.n	801364a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8013636:	693b      	ldr	r3, [r7, #16]
 8013638:	2b00      	cmp	r3, #0
 801363a:	d151      	bne.n	80136e0 <sys_timeout_abs+0xc4>
 801363c:	4b2a      	ldr	r3, [pc, #168]	; (80136e8 <sys_timeout_abs+0xcc>)
 801363e:	22be      	movs	r2, #190	; 0xbe
 8013640:	492a      	ldr	r1, [pc, #168]	; (80136ec <sys_timeout_abs+0xd0>)
 8013642:	482b      	ldr	r0, [pc, #172]	; (80136f0 <sys_timeout_abs+0xd4>)
 8013644:	f003 fc1e 	bl	8016e84 <iprintf>
    return;
 8013648:	e04a      	b.n	80136e0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801364a:	693b      	ldr	r3, [r7, #16]
 801364c:	2200      	movs	r2, #0
 801364e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8013650:	693b      	ldr	r3, [r7, #16]
 8013652:	68ba      	ldr	r2, [r7, #8]
 8013654:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8013656:	693b      	ldr	r3, [r7, #16]
 8013658:	687a      	ldr	r2, [r7, #4]
 801365a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801365c:	693b      	ldr	r3, [r7, #16]
 801365e:	68fa      	ldr	r2, [r7, #12]
 8013660:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8013662:	4b24      	ldr	r3, [pc, #144]	; (80136f4 <sys_timeout_abs+0xd8>)
 8013664:	681b      	ldr	r3, [r3, #0]
 8013666:	2b00      	cmp	r3, #0
 8013668:	d103      	bne.n	8013672 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801366a:	4a22      	ldr	r2, [pc, #136]	; (80136f4 <sys_timeout_abs+0xd8>)
 801366c:	693b      	ldr	r3, [r7, #16]
 801366e:	6013      	str	r3, [r2, #0]
    return;
 8013670:	e037      	b.n	80136e2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8013672:	693b      	ldr	r3, [r7, #16]
 8013674:	685a      	ldr	r2, [r3, #4]
 8013676:	4b1f      	ldr	r3, [pc, #124]	; (80136f4 <sys_timeout_abs+0xd8>)
 8013678:	681b      	ldr	r3, [r3, #0]
 801367a:	685b      	ldr	r3, [r3, #4]
 801367c:	1ad3      	subs	r3, r2, r3
 801367e:	0fdb      	lsrs	r3, r3, #31
 8013680:	f003 0301 	and.w	r3, r3, #1
 8013684:	b2db      	uxtb	r3, r3
 8013686:	2b00      	cmp	r3, #0
 8013688:	d007      	beq.n	801369a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801368a:	4b1a      	ldr	r3, [pc, #104]	; (80136f4 <sys_timeout_abs+0xd8>)
 801368c:	681a      	ldr	r2, [r3, #0]
 801368e:	693b      	ldr	r3, [r7, #16]
 8013690:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8013692:	4a18      	ldr	r2, [pc, #96]	; (80136f4 <sys_timeout_abs+0xd8>)
 8013694:	693b      	ldr	r3, [r7, #16]
 8013696:	6013      	str	r3, [r2, #0]
 8013698:	e023      	b.n	80136e2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801369a:	4b16      	ldr	r3, [pc, #88]	; (80136f4 <sys_timeout_abs+0xd8>)
 801369c:	681b      	ldr	r3, [r3, #0]
 801369e:	617b      	str	r3, [r7, #20]
 80136a0:	e01a      	b.n	80136d8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80136a2:	697b      	ldr	r3, [r7, #20]
 80136a4:	681b      	ldr	r3, [r3, #0]
 80136a6:	2b00      	cmp	r3, #0
 80136a8:	d00b      	beq.n	80136c2 <sys_timeout_abs+0xa6>
 80136aa:	693b      	ldr	r3, [r7, #16]
 80136ac:	685a      	ldr	r2, [r3, #4]
 80136ae:	697b      	ldr	r3, [r7, #20]
 80136b0:	681b      	ldr	r3, [r3, #0]
 80136b2:	685b      	ldr	r3, [r3, #4]
 80136b4:	1ad3      	subs	r3, r2, r3
 80136b6:	0fdb      	lsrs	r3, r3, #31
 80136b8:	f003 0301 	and.w	r3, r3, #1
 80136bc:	b2db      	uxtb	r3, r3
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d007      	beq.n	80136d2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80136c2:	697b      	ldr	r3, [r7, #20]
 80136c4:	681a      	ldr	r2, [r3, #0]
 80136c6:	693b      	ldr	r3, [r7, #16]
 80136c8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80136ca:	697b      	ldr	r3, [r7, #20]
 80136cc:	693a      	ldr	r2, [r7, #16]
 80136ce:	601a      	str	r2, [r3, #0]
        break;
 80136d0:	e007      	b.n	80136e2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80136d2:	697b      	ldr	r3, [r7, #20]
 80136d4:	681b      	ldr	r3, [r3, #0]
 80136d6:	617b      	str	r3, [r7, #20]
 80136d8:	697b      	ldr	r3, [r7, #20]
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d1e1      	bne.n	80136a2 <sys_timeout_abs+0x86>
 80136de:	e000      	b.n	80136e2 <sys_timeout_abs+0xc6>
    return;
 80136e0:	bf00      	nop
      }
    }
  }
}
 80136e2:	3718      	adds	r7, #24
 80136e4:	46bd      	mov	sp, r7
 80136e6:	bd80      	pop	{r7, pc}
 80136e8:	08019fec 	.word	0x08019fec
 80136ec:	0801a020 	.word	0x0801a020
 80136f0:	0801a060 	.word	0x0801a060
 80136f4:	20004278 	.word	0x20004278

080136f8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80136f8:	b580      	push	{r7, lr}
 80136fa:	b086      	sub	sp, #24
 80136fc:	af00      	add	r7, sp, #0
 80136fe:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8013704:	697b      	ldr	r3, [r7, #20]
 8013706:	685b      	ldr	r3, [r3, #4]
 8013708:	4798      	blx	r3

  now = sys_now();
 801370a:	f7f4 fb35 	bl	8007d78 <sys_now>
 801370e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8013710:	697b      	ldr	r3, [r7, #20]
 8013712:	681a      	ldr	r2, [r3, #0]
 8013714:	4b0f      	ldr	r3, [pc, #60]	; (8013754 <lwip_cyclic_timer+0x5c>)
 8013716:	681b      	ldr	r3, [r3, #0]
 8013718:	4413      	add	r3, r2
 801371a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801371c:	68fa      	ldr	r2, [r7, #12]
 801371e:	693b      	ldr	r3, [r7, #16]
 8013720:	1ad3      	subs	r3, r2, r3
 8013722:	0fdb      	lsrs	r3, r3, #31
 8013724:	f003 0301 	and.w	r3, r3, #1
 8013728:	b2db      	uxtb	r3, r3
 801372a:	2b00      	cmp	r3, #0
 801372c:	d009      	beq.n	8013742 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801372e:	697b      	ldr	r3, [r7, #20]
 8013730:	681a      	ldr	r2, [r3, #0]
 8013732:	693b      	ldr	r3, [r7, #16]
 8013734:	4413      	add	r3, r2
 8013736:	687a      	ldr	r2, [r7, #4]
 8013738:	4907      	ldr	r1, [pc, #28]	; (8013758 <lwip_cyclic_timer+0x60>)
 801373a:	4618      	mov	r0, r3
 801373c:	f7ff ff6e 	bl	801361c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8013740:	e004      	b.n	801374c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8013742:	687a      	ldr	r2, [r7, #4]
 8013744:	4904      	ldr	r1, [pc, #16]	; (8013758 <lwip_cyclic_timer+0x60>)
 8013746:	68f8      	ldr	r0, [r7, #12]
 8013748:	f7ff ff68 	bl	801361c <sys_timeout_abs>
}
 801374c:	bf00      	nop
 801374e:	3718      	adds	r7, #24
 8013750:	46bd      	mov	sp, r7
 8013752:	bd80      	pop	{r7, pc}
 8013754:	2000427c 	.word	0x2000427c
 8013758:	080136f9 	.word	0x080136f9

0801375c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801375c:	b580      	push	{r7, lr}
 801375e:	b082      	sub	sp, #8
 8013760:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013762:	2301      	movs	r3, #1
 8013764:	607b      	str	r3, [r7, #4]
 8013766:	e00e      	b.n	8013786 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8013768:	4a0b      	ldr	r2, [pc, #44]	; (8013798 <sys_timeouts_init+0x3c>)
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	00db      	lsls	r3, r3, #3
 8013774:	4a08      	ldr	r2, [pc, #32]	; (8013798 <sys_timeouts_init+0x3c>)
 8013776:	4413      	add	r3, r2
 8013778:	461a      	mov	r2, r3
 801377a:	4908      	ldr	r1, [pc, #32]	; (801379c <sys_timeouts_init+0x40>)
 801377c:	f000 f810 	bl	80137a0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	3301      	adds	r3, #1
 8013784:	607b      	str	r3, [r7, #4]
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	2b02      	cmp	r3, #2
 801378a:	d9ed      	bls.n	8013768 <sys_timeouts_init+0xc>
  }
}
 801378c:	bf00      	nop
 801378e:	bf00      	nop
 8013790:	3708      	adds	r7, #8
 8013792:	46bd      	mov	sp, r7
 8013794:	bd80      	pop	{r7, pc}
 8013796:	bf00      	nop
 8013798:	0801ac54 	.word	0x0801ac54
 801379c:	080136f9 	.word	0x080136f9

080137a0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80137a0:	b580      	push	{r7, lr}
 80137a2:	b086      	sub	sp, #24
 80137a4:	af00      	add	r7, sp, #0
 80137a6:	60f8      	str	r0, [r7, #12]
 80137a8:	60b9      	str	r1, [r7, #8]
 80137aa:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80137ac:	68fb      	ldr	r3, [r7, #12]
 80137ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80137b2:	d306      	bcc.n	80137c2 <sys_timeout+0x22>
 80137b4:	4b0a      	ldr	r3, [pc, #40]	; (80137e0 <sys_timeout+0x40>)
 80137b6:	f240 1229 	movw	r2, #297	; 0x129
 80137ba:	490a      	ldr	r1, [pc, #40]	; (80137e4 <sys_timeout+0x44>)
 80137bc:	480a      	ldr	r0, [pc, #40]	; (80137e8 <sys_timeout+0x48>)
 80137be:	f003 fb61 	bl	8016e84 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80137c2:	f7f4 fad9 	bl	8007d78 <sys_now>
 80137c6:	4602      	mov	r2, r0
 80137c8:	68fb      	ldr	r3, [r7, #12]
 80137ca:	4413      	add	r3, r2
 80137cc:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80137ce:	687a      	ldr	r2, [r7, #4]
 80137d0:	68b9      	ldr	r1, [r7, #8]
 80137d2:	6978      	ldr	r0, [r7, #20]
 80137d4:	f7ff ff22 	bl	801361c <sys_timeout_abs>
#endif
}
 80137d8:	bf00      	nop
 80137da:	3718      	adds	r7, #24
 80137dc:	46bd      	mov	sp, r7
 80137de:	bd80      	pop	{r7, pc}
 80137e0:	08019fec 	.word	0x08019fec
 80137e4:	0801a088 	.word	0x0801a088
 80137e8:	0801a060 	.word	0x0801a060

080137ec <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80137ec:	b580      	push	{r7, lr}
 80137ee:	b084      	sub	sp, #16
 80137f0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80137f2:	f7f4 fac1 	bl	8007d78 <sys_now>
 80137f6:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80137f8:	4b17      	ldr	r3, [pc, #92]	; (8013858 <sys_check_timeouts+0x6c>)
 80137fa:	681b      	ldr	r3, [r3, #0]
 80137fc:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80137fe:	68bb      	ldr	r3, [r7, #8]
 8013800:	2b00      	cmp	r3, #0
 8013802:	d022      	beq.n	801384a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8013804:	68bb      	ldr	r3, [r7, #8]
 8013806:	685b      	ldr	r3, [r3, #4]
 8013808:	68fa      	ldr	r2, [r7, #12]
 801380a:	1ad3      	subs	r3, r2, r3
 801380c:	0fdb      	lsrs	r3, r3, #31
 801380e:	f003 0301 	and.w	r3, r3, #1
 8013812:	b2db      	uxtb	r3, r3
 8013814:	2b00      	cmp	r3, #0
 8013816:	d11a      	bne.n	801384e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8013818:	68bb      	ldr	r3, [r7, #8]
 801381a:	681b      	ldr	r3, [r3, #0]
 801381c:	4a0e      	ldr	r2, [pc, #56]	; (8013858 <sys_check_timeouts+0x6c>)
 801381e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8013820:	68bb      	ldr	r3, [r7, #8]
 8013822:	689b      	ldr	r3, [r3, #8]
 8013824:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8013826:	68bb      	ldr	r3, [r7, #8]
 8013828:	68db      	ldr	r3, [r3, #12]
 801382a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801382c:	68bb      	ldr	r3, [r7, #8]
 801382e:	685b      	ldr	r3, [r3, #4]
 8013830:	4a0a      	ldr	r2, [pc, #40]	; (801385c <sys_check_timeouts+0x70>)
 8013832:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8013834:	68b9      	ldr	r1, [r7, #8]
 8013836:	200a      	movs	r0, #10
 8013838:	f7f9 fcb2 	bl	800d1a0 <memp_free>
    if (handler != NULL) {
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	2b00      	cmp	r3, #0
 8013840:	d0da      	beq.n	80137f8 <sys_check_timeouts+0xc>
      handler(arg);
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	6838      	ldr	r0, [r7, #0]
 8013846:	4798      	blx	r3
  do {
 8013848:	e7d6      	b.n	80137f8 <sys_check_timeouts+0xc>
      return;
 801384a:	bf00      	nop
 801384c:	e000      	b.n	8013850 <sys_check_timeouts+0x64>
      return;
 801384e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8013850:	3710      	adds	r7, #16
 8013852:	46bd      	mov	sp, r7
 8013854:	bd80      	pop	{r7, pc}
 8013856:	bf00      	nop
 8013858:	20004278 	.word	0x20004278
 801385c:	2000427c 	.word	0x2000427c

08013860 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8013860:	b580      	push	{r7, lr}
 8013862:	b082      	sub	sp, #8
 8013864:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8013866:	4b16      	ldr	r3, [pc, #88]	; (80138c0 <sys_timeouts_sleeptime+0x60>)
 8013868:	681b      	ldr	r3, [r3, #0]
 801386a:	2b00      	cmp	r3, #0
 801386c:	d102      	bne.n	8013874 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801386e:	f04f 33ff 	mov.w	r3, #4294967295
 8013872:	e020      	b.n	80138b6 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8013874:	f7f4 fa80 	bl	8007d78 <sys_now>
 8013878:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801387a:	4b11      	ldr	r3, [pc, #68]	; (80138c0 <sys_timeouts_sleeptime+0x60>)
 801387c:	681b      	ldr	r3, [r3, #0]
 801387e:	685a      	ldr	r2, [r3, #4]
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	1ad3      	subs	r3, r2, r3
 8013884:	0fdb      	lsrs	r3, r3, #31
 8013886:	f003 0301 	and.w	r3, r3, #1
 801388a:	b2db      	uxtb	r3, r3
 801388c:	2b00      	cmp	r3, #0
 801388e:	d001      	beq.n	8013894 <sys_timeouts_sleeptime+0x34>
    return 0;
 8013890:	2300      	movs	r3, #0
 8013892:	e010      	b.n	80138b6 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8013894:	4b0a      	ldr	r3, [pc, #40]	; (80138c0 <sys_timeouts_sleeptime+0x60>)
 8013896:	681b      	ldr	r3, [r3, #0]
 8013898:	685a      	ldr	r2, [r3, #4]
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	1ad3      	subs	r3, r2, r3
 801389e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80138a0:	683b      	ldr	r3, [r7, #0]
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	da06      	bge.n	80138b4 <sys_timeouts_sleeptime+0x54>
 80138a6:	4b07      	ldr	r3, [pc, #28]	; (80138c4 <sys_timeouts_sleeptime+0x64>)
 80138a8:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80138ac:	4906      	ldr	r1, [pc, #24]	; (80138c8 <sys_timeouts_sleeptime+0x68>)
 80138ae:	4807      	ldr	r0, [pc, #28]	; (80138cc <sys_timeouts_sleeptime+0x6c>)
 80138b0:	f003 fae8 	bl	8016e84 <iprintf>
    return ret;
 80138b4:	683b      	ldr	r3, [r7, #0]
  }
}
 80138b6:	4618      	mov	r0, r3
 80138b8:	3708      	adds	r7, #8
 80138ba:	46bd      	mov	sp, r7
 80138bc:	bd80      	pop	{r7, pc}
 80138be:	bf00      	nop
 80138c0:	20004278 	.word	0x20004278
 80138c4:	08019fec 	.word	0x08019fec
 80138c8:	0801a0c0 	.word	0x0801a0c0
 80138cc:	0801a060 	.word	0x0801a060

080138d0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80138d0:	b580      	push	{r7, lr}
 80138d2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80138d4:	f003 faee 	bl	8016eb4 <rand>
 80138d8:	4603      	mov	r3, r0
 80138da:	b29b      	uxth	r3, r3
 80138dc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80138e0:	b29b      	uxth	r3, r3
 80138e2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80138e6:	b29a      	uxth	r2, r3
 80138e8:	4b01      	ldr	r3, [pc, #4]	; (80138f0 <udp_init+0x20>)
 80138ea:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80138ec:	bf00      	nop
 80138ee:	bd80      	pop	{r7, pc}
 80138f0:	20000128 	.word	0x20000128

080138f4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80138f4:	b580      	push	{r7, lr}
 80138f6:	b084      	sub	sp, #16
 80138f8:	af00      	add	r7, sp, #0
 80138fa:	60f8      	str	r0, [r7, #12]
 80138fc:	60b9      	str	r1, [r7, #8]
 80138fe:	4613      	mov	r3, r2
 8013900:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8013902:	68fb      	ldr	r3, [r7, #12]
 8013904:	2b00      	cmp	r3, #0
 8013906:	d105      	bne.n	8013914 <udp_input_local_match+0x20>
 8013908:	4b27      	ldr	r3, [pc, #156]	; (80139a8 <udp_input_local_match+0xb4>)
 801390a:	2287      	movs	r2, #135	; 0x87
 801390c:	4927      	ldr	r1, [pc, #156]	; (80139ac <udp_input_local_match+0xb8>)
 801390e:	4828      	ldr	r0, [pc, #160]	; (80139b0 <udp_input_local_match+0xbc>)
 8013910:	f003 fab8 	bl	8016e84 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8013914:	68bb      	ldr	r3, [r7, #8]
 8013916:	2b00      	cmp	r3, #0
 8013918:	d105      	bne.n	8013926 <udp_input_local_match+0x32>
 801391a:	4b23      	ldr	r3, [pc, #140]	; (80139a8 <udp_input_local_match+0xb4>)
 801391c:	2288      	movs	r2, #136	; 0x88
 801391e:	4925      	ldr	r1, [pc, #148]	; (80139b4 <udp_input_local_match+0xc0>)
 8013920:	4823      	ldr	r0, [pc, #140]	; (80139b0 <udp_input_local_match+0xbc>)
 8013922:	f003 faaf 	bl	8016e84 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013926:	68fb      	ldr	r3, [r7, #12]
 8013928:	7a1b      	ldrb	r3, [r3, #8]
 801392a:	2b00      	cmp	r3, #0
 801392c:	d00b      	beq.n	8013946 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801392e:	68fb      	ldr	r3, [r7, #12]
 8013930:	7a1a      	ldrb	r2, [r3, #8]
 8013932:	4b21      	ldr	r3, [pc, #132]	; (80139b8 <udp_input_local_match+0xc4>)
 8013934:	685b      	ldr	r3, [r3, #4]
 8013936:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801393a:	3301      	adds	r3, #1
 801393c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801393e:	429a      	cmp	r2, r3
 8013940:	d001      	beq.n	8013946 <udp_input_local_match+0x52>
    return 0;
 8013942:	2300      	movs	r3, #0
 8013944:	e02b      	b.n	801399e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8013946:	79fb      	ldrb	r3, [r7, #7]
 8013948:	2b00      	cmp	r3, #0
 801394a:	d018      	beq.n	801397e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801394c:	68fb      	ldr	r3, [r7, #12]
 801394e:	2b00      	cmp	r3, #0
 8013950:	d013      	beq.n	801397a <udp_input_local_match+0x86>
 8013952:	68fb      	ldr	r3, [r7, #12]
 8013954:	681b      	ldr	r3, [r3, #0]
 8013956:	2b00      	cmp	r3, #0
 8013958:	d00f      	beq.n	801397a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801395a:	4b17      	ldr	r3, [pc, #92]	; (80139b8 <udp_input_local_match+0xc4>)
 801395c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801395e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013962:	d00a      	beq.n	801397a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8013964:	68fb      	ldr	r3, [r7, #12]
 8013966:	681a      	ldr	r2, [r3, #0]
 8013968:	4b13      	ldr	r3, [pc, #76]	; (80139b8 <udp_input_local_match+0xc4>)
 801396a:	695b      	ldr	r3, [r3, #20]
 801396c:	405a      	eors	r2, r3
 801396e:	68bb      	ldr	r3, [r7, #8]
 8013970:	3308      	adds	r3, #8
 8013972:	681b      	ldr	r3, [r3, #0]
 8013974:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013976:	2b00      	cmp	r3, #0
 8013978:	d110      	bne.n	801399c <udp_input_local_match+0xa8>
          return 1;
 801397a:	2301      	movs	r3, #1
 801397c:	e00f      	b.n	801399e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801397e:	68fb      	ldr	r3, [r7, #12]
 8013980:	2b00      	cmp	r3, #0
 8013982:	d009      	beq.n	8013998 <udp_input_local_match+0xa4>
 8013984:	68fb      	ldr	r3, [r7, #12]
 8013986:	681b      	ldr	r3, [r3, #0]
 8013988:	2b00      	cmp	r3, #0
 801398a:	d005      	beq.n	8013998 <udp_input_local_match+0xa4>
 801398c:	68fb      	ldr	r3, [r7, #12]
 801398e:	681a      	ldr	r2, [r3, #0]
 8013990:	4b09      	ldr	r3, [pc, #36]	; (80139b8 <udp_input_local_match+0xc4>)
 8013992:	695b      	ldr	r3, [r3, #20]
 8013994:	429a      	cmp	r2, r3
 8013996:	d101      	bne.n	801399c <udp_input_local_match+0xa8>
        return 1;
 8013998:	2301      	movs	r3, #1
 801399a:	e000      	b.n	801399e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801399c:	2300      	movs	r3, #0
}
 801399e:	4618      	mov	r0, r3
 80139a0:	3710      	adds	r7, #16
 80139a2:	46bd      	mov	sp, r7
 80139a4:	bd80      	pop	{r7, pc}
 80139a6:	bf00      	nop
 80139a8:	0801a0d4 	.word	0x0801a0d4
 80139ac:	0801a104 	.word	0x0801a104
 80139b0:	0801a128 	.word	0x0801a128
 80139b4:	0801a150 	.word	0x0801a150
 80139b8:	200079e8 	.word	0x200079e8

080139bc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80139bc:	b590      	push	{r4, r7, lr}
 80139be:	b08d      	sub	sp, #52	; 0x34
 80139c0:	af02      	add	r7, sp, #8
 80139c2:	6078      	str	r0, [r7, #4]
 80139c4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80139c6:	2300      	movs	r3, #0
 80139c8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	d105      	bne.n	80139dc <udp_input+0x20>
 80139d0:	4b7c      	ldr	r3, [pc, #496]	; (8013bc4 <udp_input+0x208>)
 80139d2:	22cf      	movs	r2, #207	; 0xcf
 80139d4:	497c      	ldr	r1, [pc, #496]	; (8013bc8 <udp_input+0x20c>)
 80139d6:	487d      	ldr	r0, [pc, #500]	; (8013bcc <udp_input+0x210>)
 80139d8:	f003 fa54 	bl	8016e84 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80139dc:	683b      	ldr	r3, [r7, #0]
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d105      	bne.n	80139ee <udp_input+0x32>
 80139e2:	4b78      	ldr	r3, [pc, #480]	; (8013bc4 <udp_input+0x208>)
 80139e4:	22d0      	movs	r2, #208	; 0xd0
 80139e6:	497a      	ldr	r1, [pc, #488]	; (8013bd0 <udp_input+0x214>)
 80139e8:	4878      	ldr	r0, [pc, #480]	; (8013bcc <udp_input+0x210>)
 80139ea:	f003 fa4b 	bl	8016e84 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	895b      	ldrh	r3, [r3, #10]
 80139f2:	2b07      	cmp	r3, #7
 80139f4:	d803      	bhi.n	80139fe <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80139f6:	6878      	ldr	r0, [r7, #4]
 80139f8:	f7fa f9fe 	bl	800ddf8 <pbuf_free>
    goto end;
 80139fc:	e0de      	b.n	8013bbc <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	685b      	ldr	r3, [r3, #4]
 8013a02:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8013a04:	4b73      	ldr	r3, [pc, #460]	; (8013bd4 <udp_input+0x218>)
 8013a06:	695b      	ldr	r3, [r3, #20]
 8013a08:	4a72      	ldr	r2, [pc, #456]	; (8013bd4 <udp_input+0x218>)
 8013a0a:	6812      	ldr	r2, [r2, #0]
 8013a0c:	4611      	mov	r1, r2
 8013a0e:	4618      	mov	r0, r3
 8013a10:	f001 fc88 	bl	8015324 <ip4_addr_isbroadcast_u32>
 8013a14:	4603      	mov	r3, r0
 8013a16:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8013a18:	697b      	ldr	r3, [r7, #20]
 8013a1a:	881b      	ldrh	r3, [r3, #0]
 8013a1c:	b29b      	uxth	r3, r3
 8013a1e:	4618      	mov	r0, r3
 8013a20:	f7f8 feb6 	bl	800c790 <lwip_htons>
 8013a24:	4603      	mov	r3, r0
 8013a26:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8013a28:	697b      	ldr	r3, [r7, #20]
 8013a2a:	885b      	ldrh	r3, [r3, #2]
 8013a2c:	b29b      	uxth	r3, r3
 8013a2e:	4618      	mov	r0, r3
 8013a30:	f7f8 feae 	bl	800c790 <lwip_htons>
 8013a34:	4603      	mov	r3, r0
 8013a36:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8013a38:	2300      	movs	r3, #0
 8013a3a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8013a3c:	2300      	movs	r3, #0
 8013a3e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8013a40:	2300      	movs	r3, #0
 8013a42:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013a44:	4b64      	ldr	r3, [pc, #400]	; (8013bd8 <udp_input+0x21c>)
 8013a46:	681b      	ldr	r3, [r3, #0]
 8013a48:	627b      	str	r3, [r7, #36]	; 0x24
 8013a4a:	e054      	b.n	8013af6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8013a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a4e:	8a5b      	ldrh	r3, [r3, #18]
 8013a50:	89fa      	ldrh	r2, [r7, #14]
 8013a52:	429a      	cmp	r2, r3
 8013a54:	d14a      	bne.n	8013aec <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8013a56:	7cfb      	ldrb	r3, [r7, #19]
 8013a58:	461a      	mov	r2, r3
 8013a5a:	6839      	ldr	r1, [r7, #0]
 8013a5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013a5e:	f7ff ff49 	bl	80138f4 <udp_input_local_match>
 8013a62:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	d041      	beq.n	8013aec <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8013a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a6a:	7c1b      	ldrb	r3, [r3, #16]
 8013a6c:	f003 0304 	and.w	r3, r3, #4
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d11d      	bne.n	8013ab0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8013a74:	69fb      	ldr	r3, [r7, #28]
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d102      	bne.n	8013a80 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8013a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a7c:	61fb      	str	r3, [r7, #28]
 8013a7e:	e017      	b.n	8013ab0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8013a80:	7cfb      	ldrb	r3, [r7, #19]
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d014      	beq.n	8013ab0 <udp_input+0xf4>
 8013a86:	4b53      	ldr	r3, [pc, #332]	; (8013bd4 <udp_input+0x218>)
 8013a88:	695b      	ldr	r3, [r3, #20]
 8013a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a8e:	d10f      	bne.n	8013ab0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8013a90:	69fb      	ldr	r3, [r7, #28]
 8013a92:	681a      	ldr	r2, [r3, #0]
 8013a94:	683b      	ldr	r3, [r7, #0]
 8013a96:	3304      	adds	r3, #4
 8013a98:	681b      	ldr	r3, [r3, #0]
 8013a9a:	429a      	cmp	r2, r3
 8013a9c:	d008      	beq.n	8013ab0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8013a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013aa0:	681a      	ldr	r2, [r3, #0]
 8013aa2:	683b      	ldr	r3, [r7, #0]
 8013aa4:	3304      	adds	r3, #4
 8013aa6:	681b      	ldr	r3, [r3, #0]
 8013aa8:	429a      	cmp	r2, r3
 8013aaa:	d101      	bne.n	8013ab0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8013aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013aae:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8013ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ab2:	8a9b      	ldrh	r3, [r3, #20]
 8013ab4:	8a3a      	ldrh	r2, [r7, #16]
 8013ab6:	429a      	cmp	r2, r3
 8013ab8:	d118      	bne.n	8013aec <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013abc:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	d005      	beq.n	8013ace <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8013ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ac4:	685a      	ldr	r2, [r3, #4]
 8013ac6:	4b43      	ldr	r3, [pc, #268]	; (8013bd4 <udp_input+0x218>)
 8013ac8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013aca:	429a      	cmp	r2, r3
 8013acc:	d10e      	bne.n	8013aec <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8013ace:	6a3b      	ldr	r3, [r7, #32]
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	d014      	beq.n	8013afe <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8013ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ad6:	68da      	ldr	r2, [r3, #12]
 8013ad8:	6a3b      	ldr	r3, [r7, #32]
 8013ada:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8013adc:	4b3e      	ldr	r3, [pc, #248]	; (8013bd8 <udp_input+0x21c>)
 8013ade:	681a      	ldr	r2, [r3, #0]
 8013ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ae2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8013ae4:	4a3c      	ldr	r2, [pc, #240]	; (8013bd8 <udp_input+0x21c>)
 8013ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ae8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8013aea:	e008      	b.n	8013afe <udp_input+0x142>
      }
    }

    prev = pcb;
 8013aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013aee:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013af2:	68db      	ldr	r3, [r3, #12]
 8013af4:	627b      	str	r3, [r7, #36]	; 0x24
 8013af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d1a7      	bne.n	8013a4c <udp_input+0x90>
 8013afc:	e000      	b.n	8013b00 <udp_input+0x144>
        break;
 8013afe:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8013b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d101      	bne.n	8013b0a <udp_input+0x14e>
    pcb = uncon_pcb;
 8013b06:	69fb      	ldr	r3, [r7, #28]
 8013b08:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8013b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	d002      	beq.n	8013b16 <udp_input+0x15a>
    for_us = 1;
 8013b10:	2301      	movs	r3, #1
 8013b12:	76fb      	strb	r3, [r7, #27]
 8013b14:	e00a      	b.n	8013b2c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8013b16:	683b      	ldr	r3, [r7, #0]
 8013b18:	3304      	adds	r3, #4
 8013b1a:	681a      	ldr	r2, [r3, #0]
 8013b1c:	4b2d      	ldr	r3, [pc, #180]	; (8013bd4 <udp_input+0x218>)
 8013b1e:	695b      	ldr	r3, [r3, #20]
 8013b20:	429a      	cmp	r2, r3
 8013b22:	bf0c      	ite	eq
 8013b24:	2301      	moveq	r3, #1
 8013b26:	2300      	movne	r3, #0
 8013b28:	b2db      	uxtb	r3, r3
 8013b2a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8013b2c:	7efb      	ldrb	r3, [r7, #27]
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	d041      	beq.n	8013bb6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8013b32:	2108      	movs	r1, #8
 8013b34:	6878      	ldr	r0, [r7, #4]
 8013b36:	f7fa f8d9 	bl	800dcec <pbuf_remove_header>
 8013b3a:	4603      	mov	r3, r0
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	d00a      	beq.n	8013b56 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8013b40:	4b20      	ldr	r3, [pc, #128]	; (8013bc4 <udp_input+0x208>)
 8013b42:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8013b46:	4925      	ldr	r1, [pc, #148]	; (8013bdc <udp_input+0x220>)
 8013b48:	4820      	ldr	r0, [pc, #128]	; (8013bcc <udp_input+0x210>)
 8013b4a:	f003 f99b 	bl	8016e84 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8013b4e:	6878      	ldr	r0, [r7, #4]
 8013b50:	f7fa f952 	bl	800ddf8 <pbuf_free>
      goto end;
 8013b54:	e032      	b.n	8013bbc <udp_input+0x200>
    }

    if (pcb != NULL) {
 8013b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d012      	beq.n	8013b82 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8013b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b5e:	699b      	ldr	r3, [r3, #24]
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d00a      	beq.n	8013b7a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8013b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b66:	699c      	ldr	r4, [r3, #24]
 8013b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b6a:	69d8      	ldr	r0, [r3, #28]
 8013b6c:	8a3b      	ldrh	r3, [r7, #16]
 8013b6e:	9300      	str	r3, [sp, #0]
 8013b70:	4b1b      	ldr	r3, [pc, #108]	; (8013be0 <udp_input+0x224>)
 8013b72:	687a      	ldr	r2, [r7, #4]
 8013b74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013b76:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8013b78:	e021      	b.n	8013bbe <udp_input+0x202>
        pbuf_free(p);
 8013b7a:	6878      	ldr	r0, [r7, #4]
 8013b7c:	f7fa f93c 	bl	800ddf8 <pbuf_free>
        goto end;
 8013b80:	e01c      	b.n	8013bbc <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8013b82:	7cfb      	ldrb	r3, [r7, #19]
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	d112      	bne.n	8013bae <udp_input+0x1f2>
 8013b88:	4b12      	ldr	r3, [pc, #72]	; (8013bd4 <udp_input+0x218>)
 8013b8a:	695b      	ldr	r3, [r3, #20]
 8013b8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013b90:	2be0      	cmp	r3, #224	; 0xe0
 8013b92:	d00c      	beq.n	8013bae <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8013b94:	4b0f      	ldr	r3, [pc, #60]	; (8013bd4 <udp_input+0x218>)
 8013b96:	899b      	ldrh	r3, [r3, #12]
 8013b98:	3308      	adds	r3, #8
 8013b9a:	b29b      	uxth	r3, r3
 8013b9c:	b21b      	sxth	r3, r3
 8013b9e:	4619      	mov	r1, r3
 8013ba0:	6878      	ldr	r0, [r7, #4]
 8013ba2:	f7fa f916 	bl	800ddd2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8013ba6:	2103      	movs	r1, #3
 8013ba8:	6878      	ldr	r0, [r7, #4]
 8013baa:	f001 f89b 	bl	8014ce4 <icmp_dest_unreach>
      pbuf_free(p);
 8013bae:	6878      	ldr	r0, [r7, #4]
 8013bb0:	f7fa f922 	bl	800ddf8 <pbuf_free>
  return;
 8013bb4:	e003      	b.n	8013bbe <udp_input+0x202>
    pbuf_free(p);
 8013bb6:	6878      	ldr	r0, [r7, #4]
 8013bb8:	f7fa f91e 	bl	800ddf8 <pbuf_free>
  return;
 8013bbc:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8013bbe:	372c      	adds	r7, #44	; 0x2c
 8013bc0:	46bd      	mov	sp, r7
 8013bc2:	bd90      	pop	{r4, r7, pc}
 8013bc4:	0801a0d4 	.word	0x0801a0d4
 8013bc8:	0801a178 	.word	0x0801a178
 8013bcc:	0801a128 	.word	0x0801a128
 8013bd0:	0801a190 	.word	0x0801a190
 8013bd4:	200079e8 	.word	0x200079e8
 8013bd8:	2000b114 	.word	0x2000b114
 8013bdc:	0801a1ac 	.word	0x0801a1ac
 8013be0:	200079f8 	.word	0x200079f8

08013be4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013be4:	b480      	push	{r7}
 8013be6:	b085      	sub	sp, #20
 8013be8:	af00      	add	r7, sp, #0
 8013bea:	6078      	str	r0, [r7, #4]
 8013bec:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	d01e      	beq.n	8013c32 <udp_netif_ip_addr_changed+0x4e>
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	681b      	ldr	r3, [r3, #0]
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	d01a      	beq.n	8013c32 <udp_netif_ip_addr_changed+0x4e>
 8013bfc:	683b      	ldr	r3, [r7, #0]
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	d017      	beq.n	8013c32 <udp_netif_ip_addr_changed+0x4e>
 8013c02:	683b      	ldr	r3, [r7, #0]
 8013c04:	681b      	ldr	r3, [r3, #0]
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	d013      	beq.n	8013c32 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013c0a:	4b0d      	ldr	r3, [pc, #52]	; (8013c40 <udp_netif_ip_addr_changed+0x5c>)
 8013c0c:	681b      	ldr	r3, [r3, #0]
 8013c0e:	60fb      	str	r3, [r7, #12]
 8013c10:	e00c      	b.n	8013c2c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8013c12:	68fb      	ldr	r3, [r7, #12]
 8013c14:	681a      	ldr	r2, [r3, #0]
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	681b      	ldr	r3, [r3, #0]
 8013c1a:	429a      	cmp	r2, r3
 8013c1c:	d103      	bne.n	8013c26 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8013c1e:	683b      	ldr	r3, [r7, #0]
 8013c20:	681a      	ldr	r2, [r3, #0]
 8013c22:	68fb      	ldr	r3, [r7, #12]
 8013c24:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013c26:	68fb      	ldr	r3, [r7, #12]
 8013c28:	68db      	ldr	r3, [r3, #12]
 8013c2a:	60fb      	str	r3, [r7, #12]
 8013c2c:	68fb      	ldr	r3, [r7, #12]
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d1ef      	bne.n	8013c12 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8013c32:	bf00      	nop
 8013c34:	3714      	adds	r7, #20
 8013c36:	46bd      	mov	sp, r7
 8013c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c3c:	4770      	bx	lr
 8013c3e:	bf00      	nop
 8013c40:	2000b114 	.word	0x2000b114

08013c44 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8013c44:	b580      	push	{r7, lr}
 8013c46:	b082      	sub	sp, #8
 8013c48:	af00      	add	r7, sp, #0
 8013c4a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8013c4c:	4915      	ldr	r1, [pc, #84]	; (8013ca4 <etharp_free_entry+0x60>)
 8013c4e:	687a      	ldr	r2, [r7, #4]
 8013c50:	4613      	mov	r3, r2
 8013c52:	005b      	lsls	r3, r3, #1
 8013c54:	4413      	add	r3, r2
 8013c56:	00db      	lsls	r3, r3, #3
 8013c58:	440b      	add	r3, r1
 8013c5a:	681b      	ldr	r3, [r3, #0]
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	d013      	beq.n	8013c88 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8013c60:	4910      	ldr	r1, [pc, #64]	; (8013ca4 <etharp_free_entry+0x60>)
 8013c62:	687a      	ldr	r2, [r7, #4]
 8013c64:	4613      	mov	r3, r2
 8013c66:	005b      	lsls	r3, r3, #1
 8013c68:	4413      	add	r3, r2
 8013c6a:	00db      	lsls	r3, r3, #3
 8013c6c:	440b      	add	r3, r1
 8013c6e:	681b      	ldr	r3, [r3, #0]
 8013c70:	4618      	mov	r0, r3
 8013c72:	f7fa f8c1 	bl	800ddf8 <pbuf_free>
    arp_table[i].q = NULL;
 8013c76:	490b      	ldr	r1, [pc, #44]	; (8013ca4 <etharp_free_entry+0x60>)
 8013c78:	687a      	ldr	r2, [r7, #4]
 8013c7a:	4613      	mov	r3, r2
 8013c7c:	005b      	lsls	r3, r3, #1
 8013c7e:	4413      	add	r3, r2
 8013c80:	00db      	lsls	r3, r3, #3
 8013c82:	440b      	add	r3, r1
 8013c84:	2200      	movs	r2, #0
 8013c86:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8013c88:	4906      	ldr	r1, [pc, #24]	; (8013ca4 <etharp_free_entry+0x60>)
 8013c8a:	687a      	ldr	r2, [r7, #4]
 8013c8c:	4613      	mov	r3, r2
 8013c8e:	005b      	lsls	r3, r3, #1
 8013c90:	4413      	add	r3, r2
 8013c92:	00db      	lsls	r3, r3, #3
 8013c94:	440b      	add	r3, r1
 8013c96:	3314      	adds	r3, #20
 8013c98:	2200      	movs	r2, #0
 8013c9a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8013c9c:	bf00      	nop
 8013c9e:	3708      	adds	r7, #8
 8013ca0:	46bd      	mov	sp, r7
 8013ca2:	bd80      	pop	{r7, pc}
 8013ca4:	20004284 	.word	0x20004284

08013ca8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8013ca8:	b580      	push	{r7, lr}
 8013caa:	b082      	sub	sp, #8
 8013cac:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013cae:	2300      	movs	r3, #0
 8013cb0:	607b      	str	r3, [r7, #4]
 8013cb2:	e096      	b.n	8013de2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8013cb4:	494f      	ldr	r1, [pc, #316]	; (8013df4 <etharp_tmr+0x14c>)
 8013cb6:	687a      	ldr	r2, [r7, #4]
 8013cb8:	4613      	mov	r3, r2
 8013cba:	005b      	lsls	r3, r3, #1
 8013cbc:	4413      	add	r3, r2
 8013cbe:	00db      	lsls	r3, r3, #3
 8013cc0:	440b      	add	r3, r1
 8013cc2:	3314      	adds	r3, #20
 8013cc4:	781b      	ldrb	r3, [r3, #0]
 8013cc6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8013cc8:	78fb      	ldrb	r3, [r7, #3]
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	f000 8086 	beq.w	8013ddc <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8013cd0:	4948      	ldr	r1, [pc, #288]	; (8013df4 <etharp_tmr+0x14c>)
 8013cd2:	687a      	ldr	r2, [r7, #4]
 8013cd4:	4613      	mov	r3, r2
 8013cd6:	005b      	lsls	r3, r3, #1
 8013cd8:	4413      	add	r3, r2
 8013cda:	00db      	lsls	r3, r3, #3
 8013cdc:	440b      	add	r3, r1
 8013cde:	3312      	adds	r3, #18
 8013ce0:	881b      	ldrh	r3, [r3, #0]
 8013ce2:	3301      	adds	r3, #1
 8013ce4:	b298      	uxth	r0, r3
 8013ce6:	4943      	ldr	r1, [pc, #268]	; (8013df4 <etharp_tmr+0x14c>)
 8013ce8:	687a      	ldr	r2, [r7, #4]
 8013cea:	4613      	mov	r3, r2
 8013cec:	005b      	lsls	r3, r3, #1
 8013cee:	4413      	add	r3, r2
 8013cf0:	00db      	lsls	r3, r3, #3
 8013cf2:	440b      	add	r3, r1
 8013cf4:	3312      	adds	r3, #18
 8013cf6:	4602      	mov	r2, r0
 8013cf8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013cfa:	493e      	ldr	r1, [pc, #248]	; (8013df4 <etharp_tmr+0x14c>)
 8013cfc:	687a      	ldr	r2, [r7, #4]
 8013cfe:	4613      	mov	r3, r2
 8013d00:	005b      	lsls	r3, r3, #1
 8013d02:	4413      	add	r3, r2
 8013d04:	00db      	lsls	r3, r3, #3
 8013d06:	440b      	add	r3, r1
 8013d08:	3312      	adds	r3, #18
 8013d0a:	881b      	ldrh	r3, [r3, #0]
 8013d0c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8013d10:	d215      	bcs.n	8013d3e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013d12:	4938      	ldr	r1, [pc, #224]	; (8013df4 <etharp_tmr+0x14c>)
 8013d14:	687a      	ldr	r2, [r7, #4]
 8013d16:	4613      	mov	r3, r2
 8013d18:	005b      	lsls	r3, r3, #1
 8013d1a:	4413      	add	r3, r2
 8013d1c:	00db      	lsls	r3, r3, #3
 8013d1e:	440b      	add	r3, r1
 8013d20:	3314      	adds	r3, #20
 8013d22:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013d24:	2b01      	cmp	r3, #1
 8013d26:	d10e      	bne.n	8013d46 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8013d28:	4932      	ldr	r1, [pc, #200]	; (8013df4 <etharp_tmr+0x14c>)
 8013d2a:	687a      	ldr	r2, [r7, #4]
 8013d2c:	4613      	mov	r3, r2
 8013d2e:	005b      	lsls	r3, r3, #1
 8013d30:	4413      	add	r3, r2
 8013d32:	00db      	lsls	r3, r3, #3
 8013d34:	440b      	add	r3, r1
 8013d36:	3312      	adds	r3, #18
 8013d38:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013d3a:	2b04      	cmp	r3, #4
 8013d3c:	d903      	bls.n	8013d46 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8013d3e:	6878      	ldr	r0, [r7, #4]
 8013d40:	f7ff ff80 	bl	8013c44 <etharp_free_entry>
 8013d44:	e04a      	b.n	8013ddc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8013d46:	492b      	ldr	r1, [pc, #172]	; (8013df4 <etharp_tmr+0x14c>)
 8013d48:	687a      	ldr	r2, [r7, #4]
 8013d4a:	4613      	mov	r3, r2
 8013d4c:	005b      	lsls	r3, r3, #1
 8013d4e:	4413      	add	r3, r2
 8013d50:	00db      	lsls	r3, r3, #3
 8013d52:	440b      	add	r3, r1
 8013d54:	3314      	adds	r3, #20
 8013d56:	781b      	ldrb	r3, [r3, #0]
 8013d58:	2b03      	cmp	r3, #3
 8013d5a:	d10a      	bne.n	8013d72 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8013d5c:	4925      	ldr	r1, [pc, #148]	; (8013df4 <etharp_tmr+0x14c>)
 8013d5e:	687a      	ldr	r2, [r7, #4]
 8013d60:	4613      	mov	r3, r2
 8013d62:	005b      	lsls	r3, r3, #1
 8013d64:	4413      	add	r3, r2
 8013d66:	00db      	lsls	r3, r3, #3
 8013d68:	440b      	add	r3, r1
 8013d6a:	3314      	adds	r3, #20
 8013d6c:	2204      	movs	r2, #4
 8013d6e:	701a      	strb	r2, [r3, #0]
 8013d70:	e034      	b.n	8013ddc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8013d72:	4920      	ldr	r1, [pc, #128]	; (8013df4 <etharp_tmr+0x14c>)
 8013d74:	687a      	ldr	r2, [r7, #4]
 8013d76:	4613      	mov	r3, r2
 8013d78:	005b      	lsls	r3, r3, #1
 8013d7a:	4413      	add	r3, r2
 8013d7c:	00db      	lsls	r3, r3, #3
 8013d7e:	440b      	add	r3, r1
 8013d80:	3314      	adds	r3, #20
 8013d82:	781b      	ldrb	r3, [r3, #0]
 8013d84:	2b04      	cmp	r3, #4
 8013d86:	d10a      	bne.n	8013d9e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8013d88:	491a      	ldr	r1, [pc, #104]	; (8013df4 <etharp_tmr+0x14c>)
 8013d8a:	687a      	ldr	r2, [r7, #4]
 8013d8c:	4613      	mov	r3, r2
 8013d8e:	005b      	lsls	r3, r3, #1
 8013d90:	4413      	add	r3, r2
 8013d92:	00db      	lsls	r3, r3, #3
 8013d94:	440b      	add	r3, r1
 8013d96:	3314      	adds	r3, #20
 8013d98:	2202      	movs	r2, #2
 8013d9a:	701a      	strb	r2, [r3, #0]
 8013d9c:	e01e      	b.n	8013ddc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8013d9e:	4915      	ldr	r1, [pc, #84]	; (8013df4 <etharp_tmr+0x14c>)
 8013da0:	687a      	ldr	r2, [r7, #4]
 8013da2:	4613      	mov	r3, r2
 8013da4:	005b      	lsls	r3, r3, #1
 8013da6:	4413      	add	r3, r2
 8013da8:	00db      	lsls	r3, r3, #3
 8013daa:	440b      	add	r3, r1
 8013dac:	3314      	adds	r3, #20
 8013dae:	781b      	ldrb	r3, [r3, #0]
 8013db0:	2b01      	cmp	r3, #1
 8013db2:	d113      	bne.n	8013ddc <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8013db4:	490f      	ldr	r1, [pc, #60]	; (8013df4 <etharp_tmr+0x14c>)
 8013db6:	687a      	ldr	r2, [r7, #4]
 8013db8:	4613      	mov	r3, r2
 8013dba:	005b      	lsls	r3, r3, #1
 8013dbc:	4413      	add	r3, r2
 8013dbe:	00db      	lsls	r3, r3, #3
 8013dc0:	440b      	add	r3, r1
 8013dc2:	3308      	adds	r3, #8
 8013dc4:	6818      	ldr	r0, [r3, #0]
 8013dc6:	687a      	ldr	r2, [r7, #4]
 8013dc8:	4613      	mov	r3, r2
 8013dca:	005b      	lsls	r3, r3, #1
 8013dcc:	4413      	add	r3, r2
 8013dce:	00db      	lsls	r3, r3, #3
 8013dd0:	4a08      	ldr	r2, [pc, #32]	; (8013df4 <etharp_tmr+0x14c>)
 8013dd2:	4413      	add	r3, r2
 8013dd4:	3304      	adds	r3, #4
 8013dd6:	4619      	mov	r1, r3
 8013dd8:	f000 fe6e 	bl	8014ab8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	3301      	adds	r3, #1
 8013de0:	607b      	str	r3, [r7, #4]
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	2b09      	cmp	r3, #9
 8013de6:	f77f af65 	ble.w	8013cb4 <etharp_tmr+0xc>
      }
    }
  }
}
 8013dea:	bf00      	nop
 8013dec:	bf00      	nop
 8013dee:	3708      	adds	r7, #8
 8013df0:	46bd      	mov	sp, r7
 8013df2:	bd80      	pop	{r7, pc}
 8013df4:	20004284 	.word	0x20004284

08013df8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8013df8:	b580      	push	{r7, lr}
 8013dfa:	b08a      	sub	sp, #40	; 0x28
 8013dfc:	af00      	add	r7, sp, #0
 8013dfe:	60f8      	str	r0, [r7, #12]
 8013e00:	460b      	mov	r3, r1
 8013e02:	607a      	str	r2, [r7, #4]
 8013e04:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8013e06:	230a      	movs	r3, #10
 8013e08:	84fb      	strh	r3, [r7, #38]	; 0x26
 8013e0a:	230a      	movs	r3, #10
 8013e0c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8013e0e:	230a      	movs	r3, #10
 8013e10:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8013e12:	2300      	movs	r3, #0
 8013e14:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8013e16:	230a      	movs	r3, #10
 8013e18:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8013e1a:	2300      	movs	r3, #0
 8013e1c:	83bb      	strh	r3, [r7, #28]
 8013e1e:	2300      	movs	r3, #0
 8013e20:	837b      	strh	r3, [r7, #26]
 8013e22:	2300      	movs	r3, #0
 8013e24:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013e26:	2300      	movs	r3, #0
 8013e28:	843b      	strh	r3, [r7, #32]
 8013e2a:	e0ae      	b.n	8013f8a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8013e2c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013e30:	49a6      	ldr	r1, [pc, #664]	; (80140cc <etharp_find_entry+0x2d4>)
 8013e32:	4613      	mov	r3, r2
 8013e34:	005b      	lsls	r3, r3, #1
 8013e36:	4413      	add	r3, r2
 8013e38:	00db      	lsls	r3, r3, #3
 8013e3a:	440b      	add	r3, r1
 8013e3c:	3314      	adds	r3, #20
 8013e3e:	781b      	ldrb	r3, [r3, #0]
 8013e40:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8013e42:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013e46:	2b0a      	cmp	r3, #10
 8013e48:	d105      	bne.n	8013e56 <etharp_find_entry+0x5e>
 8013e4a:	7dfb      	ldrb	r3, [r7, #23]
 8013e4c:	2b00      	cmp	r3, #0
 8013e4e:	d102      	bne.n	8013e56 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8013e50:	8c3b      	ldrh	r3, [r7, #32]
 8013e52:	847b      	strh	r3, [r7, #34]	; 0x22
 8013e54:	e095      	b.n	8013f82 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8013e56:	7dfb      	ldrb	r3, [r7, #23]
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	f000 8092 	beq.w	8013f82 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8013e5e:	7dfb      	ldrb	r3, [r7, #23]
 8013e60:	2b01      	cmp	r3, #1
 8013e62:	d009      	beq.n	8013e78 <etharp_find_entry+0x80>
 8013e64:	7dfb      	ldrb	r3, [r7, #23]
 8013e66:	2b01      	cmp	r3, #1
 8013e68:	d806      	bhi.n	8013e78 <etharp_find_entry+0x80>
 8013e6a:	4b99      	ldr	r3, [pc, #612]	; (80140d0 <etharp_find_entry+0x2d8>)
 8013e6c:	f240 1223 	movw	r2, #291	; 0x123
 8013e70:	4998      	ldr	r1, [pc, #608]	; (80140d4 <etharp_find_entry+0x2dc>)
 8013e72:	4899      	ldr	r0, [pc, #612]	; (80140d8 <etharp_find_entry+0x2e0>)
 8013e74:	f003 f806 	bl	8016e84 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8013e78:	68fb      	ldr	r3, [r7, #12]
 8013e7a:	2b00      	cmp	r3, #0
 8013e7c:	d020      	beq.n	8013ec0 <etharp_find_entry+0xc8>
 8013e7e:	68fb      	ldr	r3, [r7, #12]
 8013e80:	6819      	ldr	r1, [r3, #0]
 8013e82:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013e86:	4891      	ldr	r0, [pc, #580]	; (80140cc <etharp_find_entry+0x2d4>)
 8013e88:	4613      	mov	r3, r2
 8013e8a:	005b      	lsls	r3, r3, #1
 8013e8c:	4413      	add	r3, r2
 8013e8e:	00db      	lsls	r3, r3, #3
 8013e90:	4403      	add	r3, r0
 8013e92:	3304      	adds	r3, #4
 8013e94:	681b      	ldr	r3, [r3, #0]
 8013e96:	4299      	cmp	r1, r3
 8013e98:	d112      	bne.n	8013ec0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	2b00      	cmp	r3, #0
 8013e9e:	d00c      	beq.n	8013eba <etharp_find_entry+0xc2>
 8013ea0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013ea4:	4989      	ldr	r1, [pc, #548]	; (80140cc <etharp_find_entry+0x2d4>)
 8013ea6:	4613      	mov	r3, r2
 8013ea8:	005b      	lsls	r3, r3, #1
 8013eaa:	4413      	add	r3, r2
 8013eac:	00db      	lsls	r3, r3, #3
 8013eae:	440b      	add	r3, r1
 8013eb0:	3308      	adds	r3, #8
 8013eb2:	681b      	ldr	r3, [r3, #0]
 8013eb4:	687a      	ldr	r2, [r7, #4]
 8013eb6:	429a      	cmp	r2, r3
 8013eb8:	d102      	bne.n	8013ec0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8013eba:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013ebe:	e100      	b.n	80140c2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8013ec0:	7dfb      	ldrb	r3, [r7, #23]
 8013ec2:	2b01      	cmp	r3, #1
 8013ec4:	d140      	bne.n	8013f48 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8013ec6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013eca:	4980      	ldr	r1, [pc, #512]	; (80140cc <etharp_find_entry+0x2d4>)
 8013ecc:	4613      	mov	r3, r2
 8013ece:	005b      	lsls	r3, r3, #1
 8013ed0:	4413      	add	r3, r2
 8013ed2:	00db      	lsls	r3, r3, #3
 8013ed4:	440b      	add	r3, r1
 8013ed6:	681b      	ldr	r3, [r3, #0]
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	d01a      	beq.n	8013f12 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8013edc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013ee0:	497a      	ldr	r1, [pc, #488]	; (80140cc <etharp_find_entry+0x2d4>)
 8013ee2:	4613      	mov	r3, r2
 8013ee4:	005b      	lsls	r3, r3, #1
 8013ee6:	4413      	add	r3, r2
 8013ee8:	00db      	lsls	r3, r3, #3
 8013eea:	440b      	add	r3, r1
 8013eec:	3312      	adds	r3, #18
 8013eee:	881b      	ldrh	r3, [r3, #0]
 8013ef0:	8bba      	ldrh	r2, [r7, #28]
 8013ef2:	429a      	cmp	r2, r3
 8013ef4:	d845      	bhi.n	8013f82 <etharp_find_entry+0x18a>
            old_queue = i;
 8013ef6:	8c3b      	ldrh	r3, [r7, #32]
 8013ef8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8013efa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013efe:	4973      	ldr	r1, [pc, #460]	; (80140cc <etharp_find_entry+0x2d4>)
 8013f00:	4613      	mov	r3, r2
 8013f02:	005b      	lsls	r3, r3, #1
 8013f04:	4413      	add	r3, r2
 8013f06:	00db      	lsls	r3, r3, #3
 8013f08:	440b      	add	r3, r1
 8013f0a:	3312      	adds	r3, #18
 8013f0c:	881b      	ldrh	r3, [r3, #0]
 8013f0e:	83bb      	strh	r3, [r7, #28]
 8013f10:	e037      	b.n	8013f82 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8013f12:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013f16:	496d      	ldr	r1, [pc, #436]	; (80140cc <etharp_find_entry+0x2d4>)
 8013f18:	4613      	mov	r3, r2
 8013f1a:	005b      	lsls	r3, r3, #1
 8013f1c:	4413      	add	r3, r2
 8013f1e:	00db      	lsls	r3, r3, #3
 8013f20:	440b      	add	r3, r1
 8013f22:	3312      	adds	r3, #18
 8013f24:	881b      	ldrh	r3, [r3, #0]
 8013f26:	8b7a      	ldrh	r2, [r7, #26]
 8013f28:	429a      	cmp	r2, r3
 8013f2a:	d82a      	bhi.n	8013f82 <etharp_find_entry+0x18a>
            old_pending = i;
 8013f2c:	8c3b      	ldrh	r3, [r7, #32]
 8013f2e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8013f30:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013f34:	4965      	ldr	r1, [pc, #404]	; (80140cc <etharp_find_entry+0x2d4>)
 8013f36:	4613      	mov	r3, r2
 8013f38:	005b      	lsls	r3, r3, #1
 8013f3a:	4413      	add	r3, r2
 8013f3c:	00db      	lsls	r3, r3, #3
 8013f3e:	440b      	add	r3, r1
 8013f40:	3312      	adds	r3, #18
 8013f42:	881b      	ldrh	r3, [r3, #0]
 8013f44:	837b      	strh	r3, [r7, #26]
 8013f46:	e01c      	b.n	8013f82 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8013f48:	7dfb      	ldrb	r3, [r7, #23]
 8013f4a:	2b01      	cmp	r3, #1
 8013f4c:	d919      	bls.n	8013f82 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8013f4e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013f52:	495e      	ldr	r1, [pc, #376]	; (80140cc <etharp_find_entry+0x2d4>)
 8013f54:	4613      	mov	r3, r2
 8013f56:	005b      	lsls	r3, r3, #1
 8013f58:	4413      	add	r3, r2
 8013f5a:	00db      	lsls	r3, r3, #3
 8013f5c:	440b      	add	r3, r1
 8013f5e:	3312      	adds	r3, #18
 8013f60:	881b      	ldrh	r3, [r3, #0]
 8013f62:	8b3a      	ldrh	r2, [r7, #24]
 8013f64:	429a      	cmp	r2, r3
 8013f66:	d80c      	bhi.n	8013f82 <etharp_find_entry+0x18a>
            old_stable = i;
 8013f68:	8c3b      	ldrh	r3, [r7, #32]
 8013f6a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8013f6c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013f70:	4956      	ldr	r1, [pc, #344]	; (80140cc <etharp_find_entry+0x2d4>)
 8013f72:	4613      	mov	r3, r2
 8013f74:	005b      	lsls	r3, r3, #1
 8013f76:	4413      	add	r3, r2
 8013f78:	00db      	lsls	r3, r3, #3
 8013f7a:	440b      	add	r3, r1
 8013f7c:	3312      	adds	r3, #18
 8013f7e:	881b      	ldrh	r3, [r3, #0]
 8013f80:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013f82:	8c3b      	ldrh	r3, [r7, #32]
 8013f84:	3301      	adds	r3, #1
 8013f86:	b29b      	uxth	r3, r3
 8013f88:	843b      	strh	r3, [r7, #32]
 8013f8a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013f8e:	2b09      	cmp	r3, #9
 8013f90:	f77f af4c 	ble.w	8013e2c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8013f94:	7afb      	ldrb	r3, [r7, #11]
 8013f96:	f003 0302 	and.w	r3, r3, #2
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	d108      	bne.n	8013fb0 <etharp_find_entry+0x1b8>
 8013f9e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013fa2:	2b0a      	cmp	r3, #10
 8013fa4:	d107      	bne.n	8013fb6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8013fa6:	7afb      	ldrb	r3, [r7, #11]
 8013fa8:	f003 0301 	and.w	r3, r3, #1
 8013fac:	2b00      	cmp	r3, #0
 8013fae:	d102      	bne.n	8013fb6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8013fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8013fb4:	e085      	b.n	80140c2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8013fb6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013fba:	2b09      	cmp	r3, #9
 8013fbc:	dc02      	bgt.n	8013fc4 <etharp_find_entry+0x1cc>
    i = empty;
 8013fbe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013fc0:	843b      	strh	r3, [r7, #32]
 8013fc2:	e039      	b.n	8014038 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8013fc4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8013fc8:	2b09      	cmp	r3, #9
 8013fca:	dc14      	bgt.n	8013ff6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8013fcc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013fce:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8013fd0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013fd4:	493d      	ldr	r1, [pc, #244]	; (80140cc <etharp_find_entry+0x2d4>)
 8013fd6:	4613      	mov	r3, r2
 8013fd8:	005b      	lsls	r3, r3, #1
 8013fda:	4413      	add	r3, r2
 8013fdc:	00db      	lsls	r3, r3, #3
 8013fde:	440b      	add	r3, r1
 8013fe0:	681b      	ldr	r3, [r3, #0]
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	d018      	beq.n	8014018 <etharp_find_entry+0x220>
 8013fe6:	4b3a      	ldr	r3, [pc, #232]	; (80140d0 <etharp_find_entry+0x2d8>)
 8013fe8:	f240 126d 	movw	r2, #365	; 0x16d
 8013fec:	493b      	ldr	r1, [pc, #236]	; (80140dc <etharp_find_entry+0x2e4>)
 8013fee:	483a      	ldr	r0, [pc, #232]	; (80140d8 <etharp_find_entry+0x2e0>)
 8013ff0:	f002 ff48 	bl	8016e84 <iprintf>
 8013ff4:	e010      	b.n	8014018 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8013ff6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8013ffa:	2b09      	cmp	r3, #9
 8013ffc:	dc02      	bgt.n	8014004 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8013ffe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014000:	843b      	strh	r3, [r7, #32]
 8014002:	e009      	b.n	8014018 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8014004:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8014008:	2b09      	cmp	r3, #9
 801400a:	dc02      	bgt.n	8014012 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801400c:	8bfb      	ldrh	r3, [r7, #30]
 801400e:	843b      	strh	r3, [r7, #32]
 8014010:	e002      	b.n	8014018 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8014012:	f04f 33ff 	mov.w	r3, #4294967295
 8014016:	e054      	b.n	80140c2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014018:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801401c:	2b09      	cmp	r3, #9
 801401e:	dd06      	ble.n	801402e <etharp_find_entry+0x236>
 8014020:	4b2b      	ldr	r3, [pc, #172]	; (80140d0 <etharp_find_entry+0x2d8>)
 8014022:	f240 127f 	movw	r2, #383	; 0x17f
 8014026:	492e      	ldr	r1, [pc, #184]	; (80140e0 <etharp_find_entry+0x2e8>)
 8014028:	482b      	ldr	r0, [pc, #172]	; (80140d8 <etharp_find_entry+0x2e0>)
 801402a:	f002 ff2b 	bl	8016e84 <iprintf>
    etharp_free_entry(i);
 801402e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014032:	4618      	mov	r0, r3
 8014034:	f7ff fe06 	bl	8013c44 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014038:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801403c:	2b09      	cmp	r3, #9
 801403e:	dd06      	ble.n	801404e <etharp_find_entry+0x256>
 8014040:	4b23      	ldr	r3, [pc, #140]	; (80140d0 <etharp_find_entry+0x2d8>)
 8014042:	f240 1283 	movw	r2, #387	; 0x183
 8014046:	4926      	ldr	r1, [pc, #152]	; (80140e0 <etharp_find_entry+0x2e8>)
 8014048:	4823      	ldr	r0, [pc, #140]	; (80140d8 <etharp_find_entry+0x2e0>)
 801404a:	f002 ff1b 	bl	8016e84 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801404e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014052:	491e      	ldr	r1, [pc, #120]	; (80140cc <etharp_find_entry+0x2d4>)
 8014054:	4613      	mov	r3, r2
 8014056:	005b      	lsls	r3, r3, #1
 8014058:	4413      	add	r3, r2
 801405a:	00db      	lsls	r3, r3, #3
 801405c:	440b      	add	r3, r1
 801405e:	3314      	adds	r3, #20
 8014060:	781b      	ldrb	r3, [r3, #0]
 8014062:	2b00      	cmp	r3, #0
 8014064:	d006      	beq.n	8014074 <etharp_find_entry+0x27c>
 8014066:	4b1a      	ldr	r3, [pc, #104]	; (80140d0 <etharp_find_entry+0x2d8>)
 8014068:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801406c:	491d      	ldr	r1, [pc, #116]	; (80140e4 <etharp_find_entry+0x2ec>)
 801406e:	481a      	ldr	r0, [pc, #104]	; (80140d8 <etharp_find_entry+0x2e0>)
 8014070:	f002 ff08 	bl	8016e84 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8014074:	68fb      	ldr	r3, [r7, #12]
 8014076:	2b00      	cmp	r3, #0
 8014078:	d00b      	beq.n	8014092 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801407a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801407e:	68fb      	ldr	r3, [r7, #12]
 8014080:	6819      	ldr	r1, [r3, #0]
 8014082:	4812      	ldr	r0, [pc, #72]	; (80140cc <etharp_find_entry+0x2d4>)
 8014084:	4613      	mov	r3, r2
 8014086:	005b      	lsls	r3, r3, #1
 8014088:	4413      	add	r3, r2
 801408a:	00db      	lsls	r3, r3, #3
 801408c:	4403      	add	r3, r0
 801408e:	3304      	adds	r3, #4
 8014090:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8014092:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014096:	490d      	ldr	r1, [pc, #52]	; (80140cc <etharp_find_entry+0x2d4>)
 8014098:	4613      	mov	r3, r2
 801409a:	005b      	lsls	r3, r3, #1
 801409c:	4413      	add	r3, r2
 801409e:	00db      	lsls	r3, r3, #3
 80140a0:	440b      	add	r3, r1
 80140a2:	3312      	adds	r3, #18
 80140a4:	2200      	movs	r2, #0
 80140a6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80140a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80140ac:	4907      	ldr	r1, [pc, #28]	; (80140cc <etharp_find_entry+0x2d4>)
 80140ae:	4613      	mov	r3, r2
 80140b0:	005b      	lsls	r3, r3, #1
 80140b2:	4413      	add	r3, r2
 80140b4:	00db      	lsls	r3, r3, #3
 80140b6:	440b      	add	r3, r1
 80140b8:	3308      	adds	r3, #8
 80140ba:	687a      	ldr	r2, [r7, #4]
 80140bc:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80140be:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80140c2:	4618      	mov	r0, r3
 80140c4:	3728      	adds	r7, #40	; 0x28
 80140c6:	46bd      	mov	sp, r7
 80140c8:	bd80      	pop	{r7, pc}
 80140ca:	bf00      	nop
 80140cc:	20004284 	.word	0x20004284
 80140d0:	0801a438 	.word	0x0801a438
 80140d4:	0801a470 	.word	0x0801a470
 80140d8:	0801a4b0 	.word	0x0801a4b0
 80140dc:	0801a4d8 	.word	0x0801a4d8
 80140e0:	0801a4f0 	.word	0x0801a4f0
 80140e4:	0801a504 	.word	0x0801a504

080140e8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80140e8:	b580      	push	{r7, lr}
 80140ea:	b088      	sub	sp, #32
 80140ec:	af02      	add	r7, sp, #8
 80140ee:	60f8      	str	r0, [r7, #12]
 80140f0:	60b9      	str	r1, [r7, #8]
 80140f2:	607a      	str	r2, [r7, #4]
 80140f4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80140f6:	68fb      	ldr	r3, [r7, #12]
 80140f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80140fc:	2b06      	cmp	r3, #6
 80140fe:	d006      	beq.n	801410e <etharp_update_arp_entry+0x26>
 8014100:	4b48      	ldr	r3, [pc, #288]	; (8014224 <etharp_update_arp_entry+0x13c>)
 8014102:	f240 12a9 	movw	r2, #425	; 0x1a9
 8014106:	4948      	ldr	r1, [pc, #288]	; (8014228 <etharp_update_arp_entry+0x140>)
 8014108:	4848      	ldr	r0, [pc, #288]	; (801422c <etharp_update_arp_entry+0x144>)
 801410a:	f002 febb 	bl	8016e84 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801410e:	68bb      	ldr	r3, [r7, #8]
 8014110:	2b00      	cmp	r3, #0
 8014112:	d012      	beq.n	801413a <etharp_update_arp_entry+0x52>
 8014114:	68bb      	ldr	r3, [r7, #8]
 8014116:	681b      	ldr	r3, [r3, #0]
 8014118:	2b00      	cmp	r3, #0
 801411a:	d00e      	beq.n	801413a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801411c:	68bb      	ldr	r3, [r7, #8]
 801411e:	681b      	ldr	r3, [r3, #0]
 8014120:	68f9      	ldr	r1, [r7, #12]
 8014122:	4618      	mov	r0, r3
 8014124:	f001 f8fe 	bl	8015324 <ip4_addr_isbroadcast_u32>
 8014128:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801412a:	2b00      	cmp	r3, #0
 801412c:	d105      	bne.n	801413a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801412e:	68bb      	ldr	r3, [r7, #8]
 8014130:	681b      	ldr	r3, [r3, #0]
 8014132:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014136:	2be0      	cmp	r3, #224	; 0xe0
 8014138:	d102      	bne.n	8014140 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801413a:	f06f 030f 	mvn.w	r3, #15
 801413e:	e06c      	b.n	801421a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8014140:	78fb      	ldrb	r3, [r7, #3]
 8014142:	68fa      	ldr	r2, [r7, #12]
 8014144:	4619      	mov	r1, r3
 8014146:	68b8      	ldr	r0, [r7, #8]
 8014148:	f7ff fe56 	bl	8013df8 <etharp_find_entry>
 801414c:	4603      	mov	r3, r0
 801414e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8014150:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014154:	2b00      	cmp	r3, #0
 8014156:	da02      	bge.n	801415e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8014158:	8afb      	ldrh	r3, [r7, #22]
 801415a:	b25b      	sxtb	r3, r3
 801415c:	e05d      	b.n	801421a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801415e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014162:	4933      	ldr	r1, [pc, #204]	; (8014230 <etharp_update_arp_entry+0x148>)
 8014164:	4613      	mov	r3, r2
 8014166:	005b      	lsls	r3, r3, #1
 8014168:	4413      	add	r3, r2
 801416a:	00db      	lsls	r3, r3, #3
 801416c:	440b      	add	r3, r1
 801416e:	3314      	adds	r3, #20
 8014170:	2202      	movs	r2, #2
 8014172:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8014174:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014178:	492d      	ldr	r1, [pc, #180]	; (8014230 <etharp_update_arp_entry+0x148>)
 801417a:	4613      	mov	r3, r2
 801417c:	005b      	lsls	r3, r3, #1
 801417e:	4413      	add	r3, r2
 8014180:	00db      	lsls	r3, r3, #3
 8014182:	440b      	add	r3, r1
 8014184:	3308      	adds	r3, #8
 8014186:	68fa      	ldr	r2, [r7, #12]
 8014188:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801418a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801418e:	4613      	mov	r3, r2
 8014190:	005b      	lsls	r3, r3, #1
 8014192:	4413      	add	r3, r2
 8014194:	00db      	lsls	r3, r3, #3
 8014196:	3308      	adds	r3, #8
 8014198:	4a25      	ldr	r2, [pc, #148]	; (8014230 <etharp_update_arp_entry+0x148>)
 801419a:	4413      	add	r3, r2
 801419c:	3304      	adds	r3, #4
 801419e:	2206      	movs	r2, #6
 80141a0:	6879      	ldr	r1, [r7, #4]
 80141a2:	4618      	mov	r0, r3
 80141a4:	f002 fe58 	bl	8016e58 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80141a8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80141ac:	4920      	ldr	r1, [pc, #128]	; (8014230 <etharp_update_arp_entry+0x148>)
 80141ae:	4613      	mov	r3, r2
 80141b0:	005b      	lsls	r3, r3, #1
 80141b2:	4413      	add	r3, r2
 80141b4:	00db      	lsls	r3, r3, #3
 80141b6:	440b      	add	r3, r1
 80141b8:	3312      	adds	r3, #18
 80141ba:	2200      	movs	r2, #0
 80141bc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80141be:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80141c2:	491b      	ldr	r1, [pc, #108]	; (8014230 <etharp_update_arp_entry+0x148>)
 80141c4:	4613      	mov	r3, r2
 80141c6:	005b      	lsls	r3, r3, #1
 80141c8:	4413      	add	r3, r2
 80141ca:	00db      	lsls	r3, r3, #3
 80141cc:	440b      	add	r3, r1
 80141ce:	681b      	ldr	r3, [r3, #0]
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	d021      	beq.n	8014218 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80141d4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80141d8:	4915      	ldr	r1, [pc, #84]	; (8014230 <etharp_update_arp_entry+0x148>)
 80141da:	4613      	mov	r3, r2
 80141dc:	005b      	lsls	r3, r3, #1
 80141de:	4413      	add	r3, r2
 80141e0:	00db      	lsls	r3, r3, #3
 80141e2:	440b      	add	r3, r1
 80141e4:	681b      	ldr	r3, [r3, #0]
 80141e6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80141e8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80141ec:	4910      	ldr	r1, [pc, #64]	; (8014230 <etharp_update_arp_entry+0x148>)
 80141ee:	4613      	mov	r3, r2
 80141f0:	005b      	lsls	r3, r3, #1
 80141f2:	4413      	add	r3, r2
 80141f4:	00db      	lsls	r3, r3, #3
 80141f6:	440b      	add	r3, r1
 80141f8:	2200      	movs	r2, #0
 80141fa:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80141fc:	68fb      	ldr	r3, [r7, #12]
 80141fe:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8014202:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014206:	9300      	str	r3, [sp, #0]
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	6939      	ldr	r1, [r7, #16]
 801420c:	68f8      	ldr	r0, [r7, #12]
 801420e:	f001 ff91 	bl	8016134 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8014212:	6938      	ldr	r0, [r7, #16]
 8014214:	f7f9 fdf0 	bl	800ddf8 <pbuf_free>
  }
  return ERR_OK;
 8014218:	2300      	movs	r3, #0
}
 801421a:	4618      	mov	r0, r3
 801421c:	3718      	adds	r7, #24
 801421e:	46bd      	mov	sp, r7
 8014220:	bd80      	pop	{r7, pc}
 8014222:	bf00      	nop
 8014224:	0801a438 	.word	0x0801a438
 8014228:	0801a530 	.word	0x0801a530
 801422c:	0801a4b0 	.word	0x0801a4b0
 8014230:	20004284 	.word	0x20004284

08014234 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8014234:	b580      	push	{r7, lr}
 8014236:	b084      	sub	sp, #16
 8014238:	af00      	add	r7, sp, #0
 801423a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801423c:	2300      	movs	r3, #0
 801423e:	60fb      	str	r3, [r7, #12]
 8014240:	e01e      	b.n	8014280 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8014242:	4913      	ldr	r1, [pc, #76]	; (8014290 <etharp_cleanup_netif+0x5c>)
 8014244:	68fa      	ldr	r2, [r7, #12]
 8014246:	4613      	mov	r3, r2
 8014248:	005b      	lsls	r3, r3, #1
 801424a:	4413      	add	r3, r2
 801424c:	00db      	lsls	r3, r3, #3
 801424e:	440b      	add	r3, r1
 8014250:	3314      	adds	r3, #20
 8014252:	781b      	ldrb	r3, [r3, #0]
 8014254:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8014256:	7afb      	ldrb	r3, [r7, #11]
 8014258:	2b00      	cmp	r3, #0
 801425a:	d00e      	beq.n	801427a <etharp_cleanup_netif+0x46>
 801425c:	490c      	ldr	r1, [pc, #48]	; (8014290 <etharp_cleanup_netif+0x5c>)
 801425e:	68fa      	ldr	r2, [r7, #12]
 8014260:	4613      	mov	r3, r2
 8014262:	005b      	lsls	r3, r3, #1
 8014264:	4413      	add	r3, r2
 8014266:	00db      	lsls	r3, r3, #3
 8014268:	440b      	add	r3, r1
 801426a:	3308      	adds	r3, #8
 801426c:	681b      	ldr	r3, [r3, #0]
 801426e:	687a      	ldr	r2, [r7, #4]
 8014270:	429a      	cmp	r2, r3
 8014272:	d102      	bne.n	801427a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8014274:	68f8      	ldr	r0, [r7, #12]
 8014276:	f7ff fce5 	bl	8013c44 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801427a:	68fb      	ldr	r3, [r7, #12]
 801427c:	3301      	adds	r3, #1
 801427e:	60fb      	str	r3, [r7, #12]
 8014280:	68fb      	ldr	r3, [r7, #12]
 8014282:	2b09      	cmp	r3, #9
 8014284:	dddd      	ble.n	8014242 <etharp_cleanup_netif+0xe>
    }
  }
}
 8014286:	bf00      	nop
 8014288:	bf00      	nop
 801428a:	3710      	adds	r7, #16
 801428c:	46bd      	mov	sp, r7
 801428e:	bd80      	pop	{r7, pc}
 8014290:	20004284 	.word	0x20004284

08014294 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8014294:	b5b0      	push	{r4, r5, r7, lr}
 8014296:	b08a      	sub	sp, #40	; 0x28
 8014298:	af04      	add	r7, sp, #16
 801429a:	6078      	str	r0, [r7, #4]
 801429c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801429e:	683b      	ldr	r3, [r7, #0]
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d107      	bne.n	80142b4 <etharp_input+0x20>
 80142a4:	4b3d      	ldr	r3, [pc, #244]	; (801439c <etharp_input+0x108>)
 80142a6:	f240 228a 	movw	r2, #650	; 0x28a
 80142aa:	493d      	ldr	r1, [pc, #244]	; (80143a0 <etharp_input+0x10c>)
 80142ac:	483d      	ldr	r0, [pc, #244]	; (80143a4 <etharp_input+0x110>)
 80142ae:	f002 fde9 	bl	8016e84 <iprintf>
 80142b2:	e06f      	b.n	8014394 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	685b      	ldr	r3, [r3, #4]
 80142b8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80142ba:	693b      	ldr	r3, [r7, #16]
 80142bc:	881b      	ldrh	r3, [r3, #0]
 80142be:	b29b      	uxth	r3, r3
 80142c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80142c4:	d10c      	bne.n	80142e0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80142c6:	693b      	ldr	r3, [r7, #16]
 80142c8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80142ca:	2b06      	cmp	r3, #6
 80142cc:	d108      	bne.n	80142e0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80142ce:	693b      	ldr	r3, [r7, #16]
 80142d0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80142d2:	2b04      	cmp	r3, #4
 80142d4:	d104      	bne.n	80142e0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80142d6:	693b      	ldr	r3, [r7, #16]
 80142d8:	885b      	ldrh	r3, [r3, #2]
 80142da:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80142dc:	2b08      	cmp	r3, #8
 80142de:	d003      	beq.n	80142e8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80142e0:	6878      	ldr	r0, [r7, #4]
 80142e2:	f7f9 fd89 	bl	800ddf8 <pbuf_free>
    return;
 80142e6:	e055      	b.n	8014394 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80142e8:	693b      	ldr	r3, [r7, #16]
 80142ea:	330e      	adds	r3, #14
 80142ec:	681b      	ldr	r3, [r3, #0]
 80142ee:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80142f0:	693b      	ldr	r3, [r7, #16]
 80142f2:	3318      	adds	r3, #24
 80142f4:	681b      	ldr	r3, [r3, #0]
 80142f6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80142f8:	683b      	ldr	r3, [r7, #0]
 80142fa:	3304      	adds	r3, #4
 80142fc:	681b      	ldr	r3, [r3, #0]
 80142fe:	2b00      	cmp	r3, #0
 8014300:	d102      	bne.n	8014308 <etharp_input+0x74>
    for_us = 0;
 8014302:	2300      	movs	r3, #0
 8014304:	75fb      	strb	r3, [r7, #23]
 8014306:	e009      	b.n	801431c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8014308:	68ba      	ldr	r2, [r7, #8]
 801430a:	683b      	ldr	r3, [r7, #0]
 801430c:	3304      	adds	r3, #4
 801430e:	681b      	ldr	r3, [r3, #0]
 8014310:	429a      	cmp	r2, r3
 8014312:	bf0c      	ite	eq
 8014314:	2301      	moveq	r3, #1
 8014316:	2300      	movne	r3, #0
 8014318:	b2db      	uxtb	r3, r3
 801431a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801431c:	693b      	ldr	r3, [r7, #16]
 801431e:	f103 0208 	add.w	r2, r3, #8
 8014322:	7dfb      	ldrb	r3, [r7, #23]
 8014324:	2b00      	cmp	r3, #0
 8014326:	d001      	beq.n	801432c <etharp_input+0x98>
 8014328:	2301      	movs	r3, #1
 801432a:	e000      	b.n	801432e <etharp_input+0x9a>
 801432c:	2302      	movs	r3, #2
 801432e:	f107 010c 	add.w	r1, r7, #12
 8014332:	6838      	ldr	r0, [r7, #0]
 8014334:	f7ff fed8 	bl	80140e8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8014338:	693b      	ldr	r3, [r7, #16]
 801433a:	88db      	ldrh	r3, [r3, #6]
 801433c:	b29b      	uxth	r3, r3
 801433e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014342:	d003      	beq.n	801434c <etharp_input+0xb8>
 8014344:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014348:	d01e      	beq.n	8014388 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801434a:	e020      	b.n	801438e <etharp_input+0xfa>
      if (for_us) {
 801434c:	7dfb      	ldrb	r3, [r7, #23]
 801434e:	2b00      	cmp	r3, #0
 8014350:	d01c      	beq.n	801438c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8014352:	683b      	ldr	r3, [r7, #0]
 8014354:	f103 0022 	add.w	r0, r3, #34	; 0x22
 8014358:	693b      	ldr	r3, [r7, #16]
 801435a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801435e:	683b      	ldr	r3, [r7, #0]
 8014360:	f103 0522 	add.w	r5, r3, #34	; 0x22
 8014364:	683b      	ldr	r3, [r7, #0]
 8014366:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8014368:	693a      	ldr	r2, [r7, #16]
 801436a:	3208      	adds	r2, #8
        etharp_raw(netif,
 801436c:	2102      	movs	r1, #2
 801436e:	9103      	str	r1, [sp, #12]
 8014370:	f107 010c 	add.w	r1, r7, #12
 8014374:	9102      	str	r1, [sp, #8]
 8014376:	9201      	str	r2, [sp, #4]
 8014378:	9300      	str	r3, [sp, #0]
 801437a:	462b      	mov	r3, r5
 801437c:	4622      	mov	r2, r4
 801437e:	4601      	mov	r1, r0
 8014380:	6838      	ldr	r0, [r7, #0]
 8014382:	f000 faeb 	bl	801495c <etharp_raw>
      break;
 8014386:	e001      	b.n	801438c <etharp_input+0xf8>
      break;
 8014388:	bf00      	nop
 801438a:	e000      	b.n	801438e <etharp_input+0xfa>
      break;
 801438c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801438e:	6878      	ldr	r0, [r7, #4]
 8014390:	f7f9 fd32 	bl	800ddf8 <pbuf_free>
}
 8014394:	3718      	adds	r7, #24
 8014396:	46bd      	mov	sp, r7
 8014398:	bdb0      	pop	{r4, r5, r7, pc}
 801439a:	bf00      	nop
 801439c:	0801a438 	.word	0x0801a438
 80143a0:	0801a588 	.word	0x0801a588
 80143a4:	0801a4b0 	.word	0x0801a4b0

080143a8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80143a8:	b580      	push	{r7, lr}
 80143aa:	b086      	sub	sp, #24
 80143ac:	af02      	add	r7, sp, #8
 80143ae:	60f8      	str	r0, [r7, #12]
 80143b0:	60b9      	str	r1, [r7, #8]
 80143b2:	4613      	mov	r3, r2
 80143b4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80143b6:	79fa      	ldrb	r2, [r7, #7]
 80143b8:	4944      	ldr	r1, [pc, #272]	; (80144cc <etharp_output_to_arp_index+0x124>)
 80143ba:	4613      	mov	r3, r2
 80143bc:	005b      	lsls	r3, r3, #1
 80143be:	4413      	add	r3, r2
 80143c0:	00db      	lsls	r3, r3, #3
 80143c2:	440b      	add	r3, r1
 80143c4:	3314      	adds	r3, #20
 80143c6:	781b      	ldrb	r3, [r3, #0]
 80143c8:	2b01      	cmp	r3, #1
 80143ca:	d806      	bhi.n	80143da <etharp_output_to_arp_index+0x32>
 80143cc:	4b40      	ldr	r3, [pc, #256]	; (80144d0 <etharp_output_to_arp_index+0x128>)
 80143ce:	f240 22ee 	movw	r2, #750	; 0x2ee
 80143d2:	4940      	ldr	r1, [pc, #256]	; (80144d4 <etharp_output_to_arp_index+0x12c>)
 80143d4:	4840      	ldr	r0, [pc, #256]	; (80144d8 <etharp_output_to_arp_index+0x130>)
 80143d6:	f002 fd55 	bl	8016e84 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80143da:	79fa      	ldrb	r2, [r7, #7]
 80143dc:	493b      	ldr	r1, [pc, #236]	; (80144cc <etharp_output_to_arp_index+0x124>)
 80143de:	4613      	mov	r3, r2
 80143e0:	005b      	lsls	r3, r3, #1
 80143e2:	4413      	add	r3, r2
 80143e4:	00db      	lsls	r3, r3, #3
 80143e6:	440b      	add	r3, r1
 80143e8:	3314      	adds	r3, #20
 80143ea:	781b      	ldrb	r3, [r3, #0]
 80143ec:	2b02      	cmp	r3, #2
 80143ee:	d153      	bne.n	8014498 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80143f0:	79fa      	ldrb	r2, [r7, #7]
 80143f2:	4936      	ldr	r1, [pc, #216]	; (80144cc <etharp_output_to_arp_index+0x124>)
 80143f4:	4613      	mov	r3, r2
 80143f6:	005b      	lsls	r3, r3, #1
 80143f8:	4413      	add	r3, r2
 80143fa:	00db      	lsls	r3, r3, #3
 80143fc:	440b      	add	r3, r1
 80143fe:	3312      	adds	r3, #18
 8014400:	881b      	ldrh	r3, [r3, #0]
 8014402:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8014406:	d919      	bls.n	801443c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8014408:	79fa      	ldrb	r2, [r7, #7]
 801440a:	4613      	mov	r3, r2
 801440c:	005b      	lsls	r3, r3, #1
 801440e:	4413      	add	r3, r2
 8014410:	00db      	lsls	r3, r3, #3
 8014412:	4a2e      	ldr	r2, [pc, #184]	; (80144cc <etharp_output_to_arp_index+0x124>)
 8014414:	4413      	add	r3, r2
 8014416:	3304      	adds	r3, #4
 8014418:	4619      	mov	r1, r3
 801441a:	68f8      	ldr	r0, [r7, #12]
 801441c:	f000 fb4c 	bl	8014ab8 <etharp_request>
 8014420:	4603      	mov	r3, r0
 8014422:	2b00      	cmp	r3, #0
 8014424:	d138      	bne.n	8014498 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014426:	79fa      	ldrb	r2, [r7, #7]
 8014428:	4928      	ldr	r1, [pc, #160]	; (80144cc <etharp_output_to_arp_index+0x124>)
 801442a:	4613      	mov	r3, r2
 801442c:	005b      	lsls	r3, r3, #1
 801442e:	4413      	add	r3, r2
 8014430:	00db      	lsls	r3, r3, #3
 8014432:	440b      	add	r3, r1
 8014434:	3314      	adds	r3, #20
 8014436:	2203      	movs	r2, #3
 8014438:	701a      	strb	r2, [r3, #0]
 801443a:	e02d      	b.n	8014498 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801443c:	79fa      	ldrb	r2, [r7, #7]
 801443e:	4923      	ldr	r1, [pc, #140]	; (80144cc <etharp_output_to_arp_index+0x124>)
 8014440:	4613      	mov	r3, r2
 8014442:	005b      	lsls	r3, r3, #1
 8014444:	4413      	add	r3, r2
 8014446:	00db      	lsls	r3, r3, #3
 8014448:	440b      	add	r3, r1
 801444a:	3312      	adds	r3, #18
 801444c:	881b      	ldrh	r3, [r3, #0]
 801444e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8014452:	d321      	bcc.n	8014498 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8014454:	79fa      	ldrb	r2, [r7, #7]
 8014456:	4613      	mov	r3, r2
 8014458:	005b      	lsls	r3, r3, #1
 801445a:	4413      	add	r3, r2
 801445c:	00db      	lsls	r3, r3, #3
 801445e:	4a1b      	ldr	r2, [pc, #108]	; (80144cc <etharp_output_to_arp_index+0x124>)
 8014460:	4413      	add	r3, r2
 8014462:	1d19      	adds	r1, r3, #4
 8014464:	79fa      	ldrb	r2, [r7, #7]
 8014466:	4613      	mov	r3, r2
 8014468:	005b      	lsls	r3, r3, #1
 801446a:	4413      	add	r3, r2
 801446c:	00db      	lsls	r3, r3, #3
 801446e:	3308      	adds	r3, #8
 8014470:	4a16      	ldr	r2, [pc, #88]	; (80144cc <etharp_output_to_arp_index+0x124>)
 8014472:	4413      	add	r3, r2
 8014474:	3304      	adds	r3, #4
 8014476:	461a      	mov	r2, r3
 8014478:	68f8      	ldr	r0, [r7, #12]
 801447a:	f000 fafb 	bl	8014a74 <etharp_request_dst>
 801447e:	4603      	mov	r3, r0
 8014480:	2b00      	cmp	r3, #0
 8014482:	d109      	bne.n	8014498 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014484:	79fa      	ldrb	r2, [r7, #7]
 8014486:	4911      	ldr	r1, [pc, #68]	; (80144cc <etharp_output_to_arp_index+0x124>)
 8014488:	4613      	mov	r3, r2
 801448a:	005b      	lsls	r3, r3, #1
 801448c:	4413      	add	r3, r2
 801448e:	00db      	lsls	r3, r3, #3
 8014490:	440b      	add	r3, r1
 8014492:	3314      	adds	r3, #20
 8014494:	2203      	movs	r2, #3
 8014496:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8014498:	68fb      	ldr	r3, [r7, #12]
 801449a:	f103 0122 	add.w	r1, r3, #34	; 0x22
 801449e:	79fa      	ldrb	r2, [r7, #7]
 80144a0:	4613      	mov	r3, r2
 80144a2:	005b      	lsls	r3, r3, #1
 80144a4:	4413      	add	r3, r2
 80144a6:	00db      	lsls	r3, r3, #3
 80144a8:	3308      	adds	r3, #8
 80144aa:	4a08      	ldr	r2, [pc, #32]	; (80144cc <etharp_output_to_arp_index+0x124>)
 80144ac:	4413      	add	r3, r2
 80144ae:	3304      	adds	r3, #4
 80144b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80144b4:	9200      	str	r2, [sp, #0]
 80144b6:	460a      	mov	r2, r1
 80144b8:	68b9      	ldr	r1, [r7, #8]
 80144ba:	68f8      	ldr	r0, [r7, #12]
 80144bc:	f001 fe3a 	bl	8016134 <ethernet_output>
 80144c0:	4603      	mov	r3, r0
}
 80144c2:	4618      	mov	r0, r3
 80144c4:	3710      	adds	r7, #16
 80144c6:	46bd      	mov	sp, r7
 80144c8:	bd80      	pop	{r7, pc}
 80144ca:	bf00      	nop
 80144cc:	20004284 	.word	0x20004284
 80144d0:	0801a438 	.word	0x0801a438
 80144d4:	0801a5a8 	.word	0x0801a5a8
 80144d8:	0801a4b0 	.word	0x0801a4b0

080144dc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80144dc:	b580      	push	{r7, lr}
 80144de:	b08a      	sub	sp, #40	; 0x28
 80144e0:	af02      	add	r7, sp, #8
 80144e2:	60f8      	str	r0, [r7, #12]
 80144e4:	60b9      	str	r1, [r7, #8]
 80144e6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80144ec:	68fb      	ldr	r3, [r7, #12]
 80144ee:	2b00      	cmp	r3, #0
 80144f0:	d106      	bne.n	8014500 <etharp_output+0x24>
 80144f2:	4b73      	ldr	r3, [pc, #460]	; (80146c0 <etharp_output+0x1e4>)
 80144f4:	f240 321e 	movw	r2, #798	; 0x31e
 80144f8:	4972      	ldr	r1, [pc, #456]	; (80146c4 <etharp_output+0x1e8>)
 80144fa:	4873      	ldr	r0, [pc, #460]	; (80146c8 <etharp_output+0x1ec>)
 80144fc:	f002 fcc2 	bl	8016e84 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8014500:	68bb      	ldr	r3, [r7, #8]
 8014502:	2b00      	cmp	r3, #0
 8014504:	d106      	bne.n	8014514 <etharp_output+0x38>
 8014506:	4b6e      	ldr	r3, [pc, #440]	; (80146c0 <etharp_output+0x1e4>)
 8014508:	f240 321f 	movw	r2, #799	; 0x31f
 801450c:	496f      	ldr	r1, [pc, #444]	; (80146cc <etharp_output+0x1f0>)
 801450e:	486e      	ldr	r0, [pc, #440]	; (80146c8 <etharp_output+0x1ec>)
 8014510:	f002 fcb8 	bl	8016e84 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	2b00      	cmp	r3, #0
 8014518:	d106      	bne.n	8014528 <etharp_output+0x4c>
 801451a:	4b69      	ldr	r3, [pc, #420]	; (80146c0 <etharp_output+0x1e4>)
 801451c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8014520:	496b      	ldr	r1, [pc, #428]	; (80146d0 <etharp_output+0x1f4>)
 8014522:	4869      	ldr	r0, [pc, #420]	; (80146c8 <etharp_output+0x1ec>)
 8014524:	f002 fcae 	bl	8016e84 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	681b      	ldr	r3, [r3, #0]
 801452c:	68f9      	ldr	r1, [r7, #12]
 801452e:	4618      	mov	r0, r3
 8014530:	f000 fef8 	bl	8015324 <ip4_addr_isbroadcast_u32>
 8014534:	4603      	mov	r3, r0
 8014536:	2b00      	cmp	r3, #0
 8014538:	d002      	beq.n	8014540 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801453a:	4b66      	ldr	r3, [pc, #408]	; (80146d4 <etharp_output+0x1f8>)
 801453c:	61fb      	str	r3, [r7, #28]
 801453e:	e0af      	b.n	80146a0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	681b      	ldr	r3, [r3, #0]
 8014544:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014548:	2be0      	cmp	r3, #224	; 0xe0
 801454a:	d118      	bne.n	801457e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801454c:	2301      	movs	r3, #1
 801454e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8014550:	2300      	movs	r3, #0
 8014552:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8014554:	235e      	movs	r3, #94	; 0x5e
 8014556:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	3301      	adds	r3, #1
 801455c:	781b      	ldrb	r3, [r3, #0]
 801455e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014562:	b2db      	uxtb	r3, r3
 8014564:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8014566:	687b      	ldr	r3, [r7, #4]
 8014568:	3302      	adds	r3, #2
 801456a:	781b      	ldrb	r3, [r3, #0]
 801456c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	3303      	adds	r3, #3
 8014572:	781b      	ldrb	r3, [r3, #0]
 8014574:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8014576:	f107 0310 	add.w	r3, r7, #16
 801457a:	61fb      	str	r3, [r7, #28]
 801457c:	e090      	b.n	80146a0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	681a      	ldr	r2, [r3, #0]
 8014582:	68fb      	ldr	r3, [r7, #12]
 8014584:	3304      	adds	r3, #4
 8014586:	681b      	ldr	r3, [r3, #0]
 8014588:	405a      	eors	r2, r3
 801458a:	68fb      	ldr	r3, [r7, #12]
 801458c:	3308      	adds	r3, #8
 801458e:	681b      	ldr	r3, [r3, #0]
 8014590:	4013      	ands	r3, r2
 8014592:	2b00      	cmp	r3, #0
 8014594:	d012      	beq.n	80145bc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8014596:	687b      	ldr	r3, [r7, #4]
 8014598:	681b      	ldr	r3, [r3, #0]
 801459a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801459c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80145a0:	4293      	cmp	r3, r2
 80145a2:	d00b      	beq.n	80145bc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80145a4:	68fb      	ldr	r3, [r7, #12]
 80145a6:	330c      	adds	r3, #12
 80145a8:	681b      	ldr	r3, [r3, #0]
 80145aa:	2b00      	cmp	r3, #0
 80145ac:	d003      	beq.n	80145b6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80145ae:	68fb      	ldr	r3, [r7, #12]
 80145b0:	330c      	adds	r3, #12
 80145b2:	61bb      	str	r3, [r7, #24]
 80145b4:	e002      	b.n	80145bc <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80145b6:	f06f 0303 	mvn.w	r3, #3
 80145ba:	e07d      	b.n	80146b8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80145bc:	4b46      	ldr	r3, [pc, #280]	; (80146d8 <etharp_output+0x1fc>)
 80145be:	781b      	ldrb	r3, [r3, #0]
 80145c0:	4619      	mov	r1, r3
 80145c2:	4a46      	ldr	r2, [pc, #280]	; (80146dc <etharp_output+0x200>)
 80145c4:	460b      	mov	r3, r1
 80145c6:	005b      	lsls	r3, r3, #1
 80145c8:	440b      	add	r3, r1
 80145ca:	00db      	lsls	r3, r3, #3
 80145cc:	4413      	add	r3, r2
 80145ce:	3314      	adds	r3, #20
 80145d0:	781b      	ldrb	r3, [r3, #0]
 80145d2:	2b01      	cmp	r3, #1
 80145d4:	d925      	bls.n	8014622 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80145d6:	4b40      	ldr	r3, [pc, #256]	; (80146d8 <etharp_output+0x1fc>)
 80145d8:	781b      	ldrb	r3, [r3, #0]
 80145da:	4619      	mov	r1, r3
 80145dc:	4a3f      	ldr	r2, [pc, #252]	; (80146dc <etharp_output+0x200>)
 80145de:	460b      	mov	r3, r1
 80145e0:	005b      	lsls	r3, r3, #1
 80145e2:	440b      	add	r3, r1
 80145e4:	00db      	lsls	r3, r3, #3
 80145e6:	4413      	add	r3, r2
 80145e8:	3308      	adds	r3, #8
 80145ea:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80145ec:	68fa      	ldr	r2, [r7, #12]
 80145ee:	429a      	cmp	r2, r3
 80145f0:	d117      	bne.n	8014622 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80145f2:	69bb      	ldr	r3, [r7, #24]
 80145f4:	681a      	ldr	r2, [r3, #0]
 80145f6:	4b38      	ldr	r3, [pc, #224]	; (80146d8 <etharp_output+0x1fc>)
 80145f8:	781b      	ldrb	r3, [r3, #0]
 80145fa:	4618      	mov	r0, r3
 80145fc:	4937      	ldr	r1, [pc, #220]	; (80146dc <etharp_output+0x200>)
 80145fe:	4603      	mov	r3, r0
 8014600:	005b      	lsls	r3, r3, #1
 8014602:	4403      	add	r3, r0
 8014604:	00db      	lsls	r3, r3, #3
 8014606:	440b      	add	r3, r1
 8014608:	3304      	adds	r3, #4
 801460a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801460c:	429a      	cmp	r2, r3
 801460e:	d108      	bne.n	8014622 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8014610:	4b31      	ldr	r3, [pc, #196]	; (80146d8 <etharp_output+0x1fc>)
 8014612:	781b      	ldrb	r3, [r3, #0]
 8014614:	461a      	mov	r2, r3
 8014616:	68b9      	ldr	r1, [r7, #8]
 8014618:	68f8      	ldr	r0, [r7, #12]
 801461a:	f7ff fec5 	bl	80143a8 <etharp_output_to_arp_index>
 801461e:	4603      	mov	r3, r0
 8014620:	e04a      	b.n	80146b8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014622:	2300      	movs	r3, #0
 8014624:	75fb      	strb	r3, [r7, #23]
 8014626:	e031      	b.n	801468c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014628:	7dfa      	ldrb	r2, [r7, #23]
 801462a:	492c      	ldr	r1, [pc, #176]	; (80146dc <etharp_output+0x200>)
 801462c:	4613      	mov	r3, r2
 801462e:	005b      	lsls	r3, r3, #1
 8014630:	4413      	add	r3, r2
 8014632:	00db      	lsls	r3, r3, #3
 8014634:	440b      	add	r3, r1
 8014636:	3314      	adds	r3, #20
 8014638:	781b      	ldrb	r3, [r3, #0]
 801463a:	2b01      	cmp	r3, #1
 801463c:	d923      	bls.n	8014686 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801463e:	7dfa      	ldrb	r2, [r7, #23]
 8014640:	4926      	ldr	r1, [pc, #152]	; (80146dc <etharp_output+0x200>)
 8014642:	4613      	mov	r3, r2
 8014644:	005b      	lsls	r3, r3, #1
 8014646:	4413      	add	r3, r2
 8014648:	00db      	lsls	r3, r3, #3
 801464a:	440b      	add	r3, r1
 801464c:	3308      	adds	r3, #8
 801464e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014650:	68fa      	ldr	r2, [r7, #12]
 8014652:	429a      	cmp	r2, r3
 8014654:	d117      	bne.n	8014686 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8014656:	69bb      	ldr	r3, [r7, #24]
 8014658:	6819      	ldr	r1, [r3, #0]
 801465a:	7dfa      	ldrb	r2, [r7, #23]
 801465c:	481f      	ldr	r0, [pc, #124]	; (80146dc <etharp_output+0x200>)
 801465e:	4613      	mov	r3, r2
 8014660:	005b      	lsls	r3, r3, #1
 8014662:	4413      	add	r3, r2
 8014664:	00db      	lsls	r3, r3, #3
 8014666:	4403      	add	r3, r0
 8014668:	3304      	adds	r3, #4
 801466a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801466c:	4299      	cmp	r1, r3
 801466e:	d10a      	bne.n	8014686 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8014670:	4a19      	ldr	r2, [pc, #100]	; (80146d8 <etharp_output+0x1fc>)
 8014672:	7dfb      	ldrb	r3, [r7, #23]
 8014674:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8014676:	7dfb      	ldrb	r3, [r7, #23]
 8014678:	461a      	mov	r2, r3
 801467a:	68b9      	ldr	r1, [r7, #8]
 801467c:	68f8      	ldr	r0, [r7, #12]
 801467e:	f7ff fe93 	bl	80143a8 <etharp_output_to_arp_index>
 8014682:	4603      	mov	r3, r0
 8014684:	e018      	b.n	80146b8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014686:	7dfb      	ldrb	r3, [r7, #23]
 8014688:	3301      	adds	r3, #1
 801468a:	75fb      	strb	r3, [r7, #23]
 801468c:	7dfb      	ldrb	r3, [r7, #23]
 801468e:	2b09      	cmp	r3, #9
 8014690:	d9ca      	bls.n	8014628 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8014692:	68ba      	ldr	r2, [r7, #8]
 8014694:	69b9      	ldr	r1, [r7, #24]
 8014696:	68f8      	ldr	r0, [r7, #12]
 8014698:	f000 f822 	bl	80146e0 <etharp_query>
 801469c:	4603      	mov	r3, r0
 801469e:	e00b      	b.n	80146b8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80146a0:	68fb      	ldr	r3, [r7, #12]
 80146a2:	f103 0222 	add.w	r2, r3, #34	; 0x22
 80146a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80146aa:	9300      	str	r3, [sp, #0]
 80146ac:	69fb      	ldr	r3, [r7, #28]
 80146ae:	68b9      	ldr	r1, [r7, #8]
 80146b0:	68f8      	ldr	r0, [r7, #12]
 80146b2:	f001 fd3f 	bl	8016134 <ethernet_output>
 80146b6:	4603      	mov	r3, r0
}
 80146b8:	4618      	mov	r0, r3
 80146ba:	3720      	adds	r7, #32
 80146bc:	46bd      	mov	sp, r7
 80146be:	bd80      	pop	{r7, pc}
 80146c0:	0801a438 	.word	0x0801a438
 80146c4:	0801a588 	.word	0x0801a588
 80146c8:	0801a4b0 	.word	0x0801a4b0
 80146cc:	0801a5d8 	.word	0x0801a5d8
 80146d0:	0801a578 	.word	0x0801a578
 80146d4:	0801ac70 	.word	0x0801ac70
 80146d8:	20004374 	.word	0x20004374
 80146dc:	20004284 	.word	0x20004284

080146e0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80146e0:	b580      	push	{r7, lr}
 80146e2:	b08c      	sub	sp, #48	; 0x30
 80146e4:	af02      	add	r7, sp, #8
 80146e6:	60f8      	str	r0, [r7, #12]
 80146e8:	60b9      	str	r1, [r7, #8]
 80146ea:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80146ec:	68fb      	ldr	r3, [r7, #12]
 80146ee:	3322      	adds	r3, #34	; 0x22
 80146f0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80146f2:	23ff      	movs	r3, #255	; 0xff
 80146f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80146f8:	2300      	movs	r3, #0
 80146fa:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80146fc:	68bb      	ldr	r3, [r7, #8]
 80146fe:	681b      	ldr	r3, [r3, #0]
 8014700:	68f9      	ldr	r1, [r7, #12]
 8014702:	4618      	mov	r0, r3
 8014704:	f000 fe0e 	bl	8015324 <ip4_addr_isbroadcast_u32>
 8014708:	4603      	mov	r3, r0
 801470a:	2b00      	cmp	r3, #0
 801470c:	d10c      	bne.n	8014728 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801470e:	68bb      	ldr	r3, [r7, #8]
 8014710:	681b      	ldr	r3, [r3, #0]
 8014712:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014716:	2be0      	cmp	r3, #224	; 0xe0
 8014718:	d006      	beq.n	8014728 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801471a:	68bb      	ldr	r3, [r7, #8]
 801471c:	2b00      	cmp	r3, #0
 801471e:	d003      	beq.n	8014728 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8014720:	68bb      	ldr	r3, [r7, #8]
 8014722:	681b      	ldr	r3, [r3, #0]
 8014724:	2b00      	cmp	r3, #0
 8014726:	d102      	bne.n	801472e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014728:	f06f 030f 	mvn.w	r3, #15
 801472c:	e101      	b.n	8014932 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801472e:	68fa      	ldr	r2, [r7, #12]
 8014730:	2101      	movs	r1, #1
 8014732:	68b8      	ldr	r0, [r7, #8]
 8014734:	f7ff fb60 	bl	8013df8 <etharp_find_entry>
 8014738:	4603      	mov	r3, r0
 801473a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801473c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014740:	2b00      	cmp	r3, #0
 8014742:	da02      	bge.n	801474a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8014744:	8a7b      	ldrh	r3, [r7, #18]
 8014746:	b25b      	sxtb	r3, r3
 8014748:	e0f3      	b.n	8014932 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801474a:	8a7b      	ldrh	r3, [r7, #18]
 801474c:	2b7e      	cmp	r3, #126	; 0x7e
 801474e:	d906      	bls.n	801475e <etharp_query+0x7e>
 8014750:	4b7a      	ldr	r3, [pc, #488]	; (801493c <etharp_query+0x25c>)
 8014752:	f240 32c1 	movw	r2, #961	; 0x3c1
 8014756:	497a      	ldr	r1, [pc, #488]	; (8014940 <etharp_query+0x260>)
 8014758:	487a      	ldr	r0, [pc, #488]	; (8014944 <etharp_query+0x264>)
 801475a:	f002 fb93 	bl	8016e84 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801475e:	8a7b      	ldrh	r3, [r7, #18]
 8014760:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8014762:	7c7a      	ldrb	r2, [r7, #17]
 8014764:	4978      	ldr	r1, [pc, #480]	; (8014948 <etharp_query+0x268>)
 8014766:	4613      	mov	r3, r2
 8014768:	005b      	lsls	r3, r3, #1
 801476a:	4413      	add	r3, r2
 801476c:	00db      	lsls	r3, r3, #3
 801476e:	440b      	add	r3, r1
 8014770:	3314      	adds	r3, #20
 8014772:	781b      	ldrb	r3, [r3, #0]
 8014774:	2b00      	cmp	r3, #0
 8014776:	d115      	bne.n	80147a4 <etharp_query+0xc4>
    is_new_entry = 1;
 8014778:	2301      	movs	r3, #1
 801477a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801477c:	7c7a      	ldrb	r2, [r7, #17]
 801477e:	4972      	ldr	r1, [pc, #456]	; (8014948 <etharp_query+0x268>)
 8014780:	4613      	mov	r3, r2
 8014782:	005b      	lsls	r3, r3, #1
 8014784:	4413      	add	r3, r2
 8014786:	00db      	lsls	r3, r3, #3
 8014788:	440b      	add	r3, r1
 801478a:	3314      	adds	r3, #20
 801478c:	2201      	movs	r2, #1
 801478e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8014790:	7c7a      	ldrb	r2, [r7, #17]
 8014792:	496d      	ldr	r1, [pc, #436]	; (8014948 <etharp_query+0x268>)
 8014794:	4613      	mov	r3, r2
 8014796:	005b      	lsls	r3, r3, #1
 8014798:	4413      	add	r3, r2
 801479a:	00db      	lsls	r3, r3, #3
 801479c:	440b      	add	r3, r1
 801479e:	3308      	adds	r3, #8
 80147a0:	68fa      	ldr	r2, [r7, #12]
 80147a2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80147a4:	7c7a      	ldrb	r2, [r7, #17]
 80147a6:	4968      	ldr	r1, [pc, #416]	; (8014948 <etharp_query+0x268>)
 80147a8:	4613      	mov	r3, r2
 80147aa:	005b      	lsls	r3, r3, #1
 80147ac:	4413      	add	r3, r2
 80147ae:	00db      	lsls	r3, r3, #3
 80147b0:	440b      	add	r3, r1
 80147b2:	3314      	adds	r3, #20
 80147b4:	781b      	ldrb	r3, [r3, #0]
 80147b6:	2b01      	cmp	r3, #1
 80147b8:	d011      	beq.n	80147de <etharp_query+0xfe>
 80147ba:	7c7a      	ldrb	r2, [r7, #17]
 80147bc:	4962      	ldr	r1, [pc, #392]	; (8014948 <etharp_query+0x268>)
 80147be:	4613      	mov	r3, r2
 80147c0:	005b      	lsls	r3, r3, #1
 80147c2:	4413      	add	r3, r2
 80147c4:	00db      	lsls	r3, r3, #3
 80147c6:	440b      	add	r3, r1
 80147c8:	3314      	adds	r3, #20
 80147ca:	781b      	ldrb	r3, [r3, #0]
 80147cc:	2b01      	cmp	r3, #1
 80147ce:	d806      	bhi.n	80147de <etharp_query+0xfe>
 80147d0:	4b5a      	ldr	r3, [pc, #360]	; (801493c <etharp_query+0x25c>)
 80147d2:	f240 32cd 	movw	r2, #973	; 0x3cd
 80147d6:	495d      	ldr	r1, [pc, #372]	; (801494c <etharp_query+0x26c>)
 80147d8:	485a      	ldr	r0, [pc, #360]	; (8014944 <etharp_query+0x264>)
 80147da:	f002 fb53 	bl	8016e84 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80147de:	6a3b      	ldr	r3, [r7, #32]
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	d102      	bne.n	80147ea <etharp_query+0x10a>
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	d10c      	bne.n	8014804 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80147ea:	68b9      	ldr	r1, [r7, #8]
 80147ec:	68f8      	ldr	r0, [r7, #12]
 80147ee:	f000 f963 	bl	8014ab8 <etharp_request>
 80147f2:	4603      	mov	r3, r0
 80147f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	2b00      	cmp	r3, #0
 80147fc:	d102      	bne.n	8014804 <etharp_query+0x124>
      return result;
 80147fe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014802:	e096      	b.n	8014932 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	2b00      	cmp	r3, #0
 8014808:	d106      	bne.n	8014818 <etharp_query+0x138>
 801480a:	4b4c      	ldr	r3, [pc, #304]	; (801493c <etharp_query+0x25c>)
 801480c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8014810:	494f      	ldr	r1, [pc, #316]	; (8014950 <etharp_query+0x270>)
 8014812:	484c      	ldr	r0, [pc, #304]	; (8014944 <etharp_query+0x264>)
 8014814:	f002 fb36 	bl	8016e84 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8014818:	7c7a      	ldrb	r2, [r7, #17]
 801481a:	494b      	ldr	r1, [pc, #300]	; (8014948 <etharp_query+0x268>)
 801481c:	4613      	mov	r3, r2
 801481e:	005b      	lsls	r3, r3, #1
 8014820:	4413      	add	r3, r2
 8014822:	00db      	lsls	r3, r3, #3
 8014824:	440b      	add	r3, r1
 8014826:	3314      	adds	r3, #20
 8014828:	781b      	ldrb	r3, [r3, #0]
 801482a:	2b01      	cmp	r3, #1
 801482c:	d917      	bls.n	801485e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801482e:	4a49      	ldr	r2, [pc, #292]	; (8014954 <etharp_query+0x274>)
 8014830:	7c7b      	ldrb	r3, [r7, #17]
 8014832:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8014834:	7c7a      	ldrb	r2, [r7, #17]
 8014836:	4613      	mov	r3, r2
 8014838:	005b      	lsls	r3, r3, #1
 801483a:	4413      	add	r3, r2
 801483c:	00db      	lsls	r3, r3, #3
 801483e:	3308      	adds	r3, #8
 8014840:	4a41      	ldr	r2, [pc, #260]	; (8014948 <etharp_query+0x268>)
 8014842:	4413      	add	r3, r2
 8014844:	3304      	adds	r3, #4
 8014846:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801484a:	9200      	str	r2, [sp, #0]
 801484c:	697a      	ldr	r2, [r7, #20]
 801484e:	6879      	ldr	r1, [r7, #4]
 8014850:	68f8      	ldr	r0, [r7, #12]
 8014852:	f001 fc6f 	bl	8016134 <ethernet_output>
 8014856:	4603      	mov	r3, r0
 8014858:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801485c:	e067      	b.n	801492e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801485e:	7c7a      	ldrb	r2, [r7, #17]
 8014860:	4939      	ldr	r1, [pc, #228]	; (8014948 <etharp_query+0x268>)
 8014862:	4613      	mov	r3, r2
 8014864:	005b      	lsls	r3, r3, #1
 8014866:	4413      	add	r3, r2
 8014868:	00db      	lsls	r3, r3, #3
 801486a:	440b      	add	r3, r1
 801486c:	3314      	adds	r3, #20
 801486e:	781b      	ldrb	r3, [r3, #0]
 8014870:	2b01      	cmp	r3, #1
 8014872:	d15c      	bne.n	801492e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8014874:	2300      	movs	r3, #0
 8014876:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801487c:	e01c      	b.n	80148b8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801487e:	69fb      	ldr	r3, [r7, #28]
 8014880:	895a      	ldrh	r2, [r3, #10]
 8014882:	69fb      	ldr	r3, [r7, #28]
 8014884:	891b      	ldrh	r3, [r3, #8]
 8014886:	429a      	cmp	r2, r3
 8014888:	d10a      	bne.n	80148a0 <etharp_query+0x1c0>
 801488a:	69fb      	ldr	r3, [r7, #28]
 801488c:	681b      	ldr	r3, [r3, #0]
 801488e:	2b00      	cmp	r3, #0
 8014890:	d006      	beq.n	80148a0 <etharp_query+0x1c0>
 8014892:	4b2a      	ldr	r3, [pc, #168]	; (801493c <etharp_query+0x25c>)
 8014894:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8014898:	492f      	ldr	r1, [pc, #188]	; (8014958 <etharp_query+0x278>)
 801489a:	482a      	ldr	r0, [pc, #168]	; (8014944 <etharp_query+0x264>)
 801489c:	f002 faf2 	bl	8016e84 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80148a0:	69fb      	ldr	r3, [r7, #28]
 80148a2:	7b1b      	ldrb	r3, [r3, #12]
 80148a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	d002      	beq.n	80148b2 <etharp_query+0x1d2>
        copy_needed = 1;
 80148ac:	2301      	movs	r3, #1
 80148ae:	61bb      	str	r3, [r7, #24]
        break;
 80148b0:	e005      	b.n	80148be <etharp_query+0x1de>
      }
      p = p->next;
 80148b2:	69fb      	ldr	r3, [r7, #28]
 80148b4:	681b      	ldr	r3, [r3, #0]
 80148b6:	61fb      	str	r3, [r7, #28]
    while (p) {
 80148b8:	69fb      	ldr	r3, [r7, #28]
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	d1df      	bne.n	801487e <etharp_query+0x19e>
    }
    if (copy_needed) {
 80148be:	69bb      	ldr	r3, [r7, #24]
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	d007      	beq.n	80148d4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80148c4:	687a      	ldr	r2, [r7, #4]
 80148c6:	f44f 7120 	mov.w	r1, #640	; 0x280
 80148ca:	200e      	movs	r0, #14
 80148cc:	f7f9 fcfc 	bl	800e2c8 <pbuf_clone>
 80148d0:	61f8      	str	r0, [r7, #28]
 80148d2:	e004      	b.n	80148de <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80148d8:	69f8      	ldr	r0, [r7, #28]
 80148da:	f7f9 fb33 	bl	800df44 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80148de:	69fb      	ldr	r3, [r7, #28]
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	d021      	beq.n	8014928 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80148e4:	7c7a      	ldrb	r2, [r7, #17]
 80148e6:	4918      	ldr	r1, [pc, #96]	; (8014948 <etharp_query+0x268>)
 80148e8:	4613      	mov	r3, r2
 80148ea:	005b      	lsls	r3, r3, #1
 80148ec:	4413      	add	r3, r2
 80148ee:	00db      	lsls	r3, r3, #3
 80148f0:	440b      	add	r3, r1
 80148f2:	681b      	ldr	r3, [r3, #0]
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	d00a      	beq.n	801490e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80148f8:	7c7a      	ldrb	r2, [r7, #17]
 80148fa:	4913      	ldr	r1, [pc, #76]	; (8014948 <etharp_query+0x268>)
 80148fc:	4613      	mov	r3, r2
 80148fe:	005b      	lsls	r3, r3, #1
 8014900:	4413      	add	r3, r2
 8014902:	00db      	lsls	r3, r3, #3
 8014904:	440b      	add	r3, r1
 8014906:	681b      	ldr	r3, [r3, #0]
 8014908:	4618      	mov	r0, r3
 801490a:	f7f9 fa75 	bl	800ddf8 <pbuf_free>
      }
      arp_table[i].q = p;
 801490e:	7c7a      	ldrb	r2, [r7, #17]
 8014910:	490d      	ldr	r1, [pc, #52]	; (8014948 <etharp_query+0x268>)
 8014912:	4613      	mov	r3, r2
 8014914:	005b      	lsls	r3, r3, #1
 8014916:	4413      	add	r3, r2
 8014918:	00db      	lsls	r3, r3, #3
 801491a:	440b      	add	r3, r1
 801491c:	69fa      	ldr	r2, [r7, #28]
 801491e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8014920:	2300      	movs	r3, #0
 8014922:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014926:	e002      	b.n	801492e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8014928:	23ff      	movs	r3, #255	; 0xff
 801492a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801492e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8014932:	4618      	mov	r0, r3
 8014934:	3728      	adds	r7, #40	; 0x28
 8014936:	46bd      	mov	sp, r7
 8014938:	bd80      	pop	{r7, pc}
 801493a:	bf00      	nop
 801493c:	0801a438 	.word	0x0801a438
 8014940:	0801a5e4 	.word	0x0801a5e4
 8014944:	0801a4b0 	.word	0x0801a4b0
 8014948:	20004284 	.word	0x20004284
 801494c:	0801a5f4 	.word	0x0801a5f4
 8014950:	0801a5d8 	.word	0x0801a5d8
 8014954:	20004374 	.word	0x20004374
 8014958:	0801a61c 	.word	0x0801a61c

0801495c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801495c:	b580      	push	{r7, lr}
 801495e:	b08a      	sub	sp, #40	; 0x28
 8014960:	af02      	add	r7, sp, #8
 8014962:	60f8      	str	r0, [r7, #12]
 8014964:	60b9      	str	r1, [r7, #8]
 8014966:	607a      	str	r2, [r7, #4]
 8014968:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801496a:	2300      	movs	r3, #0
 801496c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801496e:	68fb      	ldr	r3, [r7, #12]
 8014970:	2b00      	cmp	r3, #0
 8014972:	d106      	bne.n	8014982 <etharp_raw+0x26>
 8014974:	4b3a      	ldr	r3, [pc, #232]	; (8014a60 <etharp_raw+0x104>)
 8014976:	f240 4257 	movw	r2, #1111	; 0x457
 801497a:	493a      	ldr	r1, [pc, #232]	; (8014a64 <etharp_raw+0x108>)
 801497c:	483a      	ldr	r0, [pc, #232]	; (8014a68 <etharp_raw+0x10c>)
 801497e:	f002 fa81 	bl	8016e84 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8014982:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014986:	211c      	movs	r1, #28
 8014988:	200e      	movs	r0, #14
 801498a:	f7f8 ff51 	bl	800d830 <pbuf_alloc>
 801498e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8014990:	69bb      	ldr	r3, [r7, #24]
 8014992:	2b00      	cmp	r3, #0
 8014994:	d102      	bne.n	801499c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8014996:	f04f 33ff 	mov.w	r3, #4294967295
 801499a:	e05d      	b.n	8014a58 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801499c:	69bb      	ldr	r3, [r7, #24]
 801499e:	895b      	ldrh	r3, [r3, #10]
 80149a0:	2b1b      	cmp	r3, #27
 80149a2:	d806      	bhi.n	80149b2 <etharp_raw+0x56>
 80149a4:	4b2e      	ldr	r3, [pc, #184]	; (8014a60 <etharp_raw+0x104>)
 80149a6:	f240 4262 	movw	r2, #1122	; 0x462
 80149aa:	4930      	ldr	r1, [pc, #192]	; (8014a6c <etharp_raw+0x110>)
 80149ac:	482e      	ldr	r0, [pc, #184]	; (8014a68 <etharp_raw+0x10c>)
 80149ae:	f002 fa69 	bl	8016e84 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80149b2:	69bb      	ldr	r3, [r7, #24]
 80149b4:	685b      	ldr	r3, [r3, #4]
 80149b6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80149b8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80149ba:	4618      	mov	r0, r3
 80149bc:	f7f7 fee8 	bl	800c790 <lwip_htons>
 80149c0:	4603      	mov	r3, r0
 80149c2:	461a      	mov	r2, r3
 80149c4:	697b      	ldr	r3, [r7, #20]
 80149c6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80149c8:	68fb      	ldr	r3, [r7, #12]
 80149ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80149ce:	2b06      	cmp	r3, #6
 80149d0:	d006      	beq.n	80149e0 <etharp_raw+0x84>
 80149d2:	4b23      	ldr	r3, [pc, #140]	; (8014a60 <etharp_raw+0x104>)
 80149d4:	f240 4269 	movw	r2, #1129	; 0x469
 80149d8:	4925      	ldr	r1, [pc, #148]	; (8014a70 <etharp_raw+0x114>)
 80149da:	4823      	ldr	r0, [pc, #140]	; (8014a68 <etharp_raw+0x10c>)
 80149dc:	f002 fa52 	bl	8016e84 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80149e0:	697b      	ldr	r3, [r7, #20]
 80149e2:	3308      	adds	r3, #8
 80149e4:	2206      	movs	r2, #6
 80149e6:	6839      	ldr	r1, [r7, #0]
 80149e8:	4618      	mov	r0, r3
 80149ea:	f002 fa35 	bl	8016e58 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80149ee:	697b      	ldr	r3, [r7, #20]
 80149f0:	3312      	adds	r3, #18
 80149f2:	2206      	movs	r2, #6
 80149f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80149f6:	4618      	mov	r0, r3
 80149f8:	f002 fa2e 	bl	8016e58 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80149fc:	697b      	ldr	r3, [r7, #20]
 80149fe:	330e      	adds	r3, #14
 8014a00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014a02:	6812      	ldr	r2, [r2, #0]
 8014a04:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8014a06:	697b      	ldr	r3, [r7, #20]
 8014a08:	3318      	adds	r3, #24
 8014a0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014a0c:	6812      	ldr	r2, [r2, #0]
 8014a0e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8014a10:	697b      	ldr	r3, [r7, #20]
 8014a12:	2200      	movs	r2, #0
 8014a14:	701a      	strb	r2, [r3, #0]
 8014a16:	2200      	movs	r2, #0
 8014a18:	f042 0201 	orr.w	r2, r2, #1
 8014a1c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8014a1e:	697b      	ldr	r3, [r7, #20]
 8014a20:	2200      	movs	r2, #0
 8014a22:	f042 0208 	orr.w	r2, r2, #8
 8014a26:	709a      	strb	r2, [r3, #2]
 8014a28:	2200      	movs	r2, #0
 8014a2a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8014a2c:	697b      	ldr	r3, [r7, #20]
 8014a2e:	2206      	movs	r2, #6
 8014a30:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8014a32:	697b      	ldr	r3, [r7, #20]
 8014a34:	2204      	movs	r2, #4
 8014a36:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8014a38:	f640 0306 	movw	r3, #2054	; 0x806
 8014a3c:	9300      	str	r3, [sp, #0]
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	68ba      	ldr	r2, [r7, #8]
 8014a42:	69b9      	ldr	r1, [r7, #24]
 8014a44:	68f8      	ldr	r0, [r7, #12]
 8014a46:	f001 fb75 	bl	8016134 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8014a4a:	69b8      	ldr	r0, [r7, #24]
 8014a4c:	f7f9 f9d4 	bl	800ddf8 <pbuf_free>
  p = NULL;
 8014a50:	2300      	movs	r3, #0
 8014a52:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8014a54:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014a58:	4618      	mov	r0, r3
 8014a5a:	3720      	adds	r7, #32
 8014a5c:	46bd      	mov	sp, r7
 8014a5e:	bd80      	pop	{r7, pc}
 8014a60:	0801a438 	.word	0x0801a438
 8014a64:	0801a588 	.word	0x0801a588
 8014a68:	0801a4b0 	.word	0x0801a4b0
 8014a6c:	0801a638 	.word	0x0801a638
 8014a70:	0801a66c 	.word	0x0801a66c

08014a74 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8014a74:	b580      	push	{r7, lr}
 8014a76:	b088      	sub	sp, #32
 8014a78:	af04      	add	r7, sp, #16
 8014a7a:	60f8      	str	r0, [r7, #12]
 8014a7c:	60b9      	str	r1, [r7, #8]
 8014a7e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014a80:	68fb      	ldr	r3, [r7, #12]
 8014a82:	f103 0122 	add.w	r1, r3, #34	; 0x22
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8014a86:	68fb      	ldr	r3, [r7, #12]
 8014a88:	f103 0022 	add.w	r0, r3, #34	; 0x22
 8014a8c:	68fb      	ldr	r3, [r7, #12]
 8014a8e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014a90:	2201      	movs	r2, #1
 8014a92:	9203      	str	r2, [sp, #12]
 8014a94:	68ba      	ldr	r2, [r7, #8]
 8014a96:	9202      	str	r2, [sp, #8]
 8014a98:	4a06      	ldr	r2, [pc, #24]	; (8014ab4 <etharp_request_dst+0x40>)
 8014a9a:	9201      	str	r2, [sp, #4]
 8014a9c:	9300      	str	r3, [sp, #0]
 8014a9e:	4603      	mov	r3, r0
 8014aa0:	687a      	ldr	r2, [r7, #4]
 8014aa2:	68f8      	ldr	r0, [r7, #12]
 8014aa4:	f7ff ff5a 	bl	801495c <etharp_raw>
 8014aa8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8014aaa:	4618      	mov	r0, r3
 8014aac:	3710      	adds	r7, #16
 8014aae:	46bd      	mov	sp, r7
 8014ab0:	bd80      	pop	{r7, pc}
 8014ab2:	bf00      	nop
 8014ab4:	0801ac78 	.word	0x0801ac78

08014ab8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8014ab8:	b580      	push	{r7, lr}
 8014aba:	b082      	sub	sp, #8
 8014abc:	af00      	add	r7, sp, #0
 8014abe:	6078      	str	r0, [r7, #4]
 8014ac0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8014ac2:	4a05      	ldr	r2, [pc, #20]	; (8014ad8 <etharp_request+0x20>)
 8014ac4:	6839      	ldr	r1, [r7, #0]
 8014ac6:	6878      	ldr	r0, [r7, #4]
 8014ac8:	f7ff ffd4 	bl	8014a74 <etharp_request_dst>
 8014acc:	4603      	mov	r3, r0
}
 8014ace:	4618      	mov	r0, r3
 8014ad0:	3708      	adds	r7, #8
 8014ad2:	46bd      	mov	sp, r7
 8014ad4:	bd80      	pop	{r7, pc}
 8014ad6:	bf00      	nop
 8014ad8:	0801ac70 	.word	0x0801ac70

08014adc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8014adc:	b580      	push	{r7, lr}
 8014ade:	b08e      	sub	sp, #56	; 0x38
 8014ae0:	af04      	add	r7, sp, #16
 8014ae2:	6078      	str	r0, [r7, #4]
 8014ae4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8014ae6:	4b79      	ldr	r3, [pc, #484]	; (8014ccc <icmp_input+0x1f0>)
 8014ae8:	689b      	ldr	r3, [r3, #8]
 8014aea:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8014aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014aee:	781b      	ldrb	r3, [r3, #0]
 8014af0:	f003 030f 	and.w	r3, r3, #15
 8014af4:	b2db      	uxtb	r3, r3
 8014af6:	009b      	lsls	r3, r3, #2
 8014af8:	b2db      	uxtb	r3, r3
 8014afa:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8014afc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014afe:	2b13      	cmp	r3, #19
 8014b00:	f240 80cd 	bls.w	8014c9e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	895b      	ldrh	r3, [r3, #10]
 8014b08:	2b03      	cmp	r3, #3
 8014b0a:	f240 80ca 	bls.w	8014ca2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	685b      	ldr	r3, [r3, #4]
 8014b12:	781b      	ldrb	r3, [r3, #0]
 8014b14:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8014b18:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	f000 80b7 	beq.w	8014c90 <icmp_input+0x1b4>
 8014b22:	2b08      	cmp	r3, #8
 8014b24:	f040 80b7 	bne.w	8014c96 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8014b28:	4b69      	ldr	r3, [pc, #420]	; (8014cd0 <icmp_input+0x1f4>)
 8014b2a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014b2c:	4b67      	ldr	r3, [pc, #412]	; (8014ccc <icmp_input+0x1f0>)
 8014b2e:	695b      	ldr	r3, [r3, #20]
 8014b30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014b34:	2be0      	cmp	r3, #224	; 0xe0
 8014b36:	f000 80bb 	beq.w	8014cb0 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8014b3a:	4b64      	ldr	r3, [pc, #400]	; (8014ccc <icmp_input+0x1f0>)
 8014b3c:	695b      	ldr	r3, [r3, #20]
 8014b3e:	4a63      	ldr	r2, [pc, #396]	; (8014ccc <icmp_input+0x1f0>)
 8014b40:	6812      	ldr	r2, [r2, #0]
 8014b42:	4611      	mov	r1, r2
 8014b44:	4618      	mov	r0, r3
 8014b46:	f000 fbed 	bl	8015324 <ip4_addr_isbroadcast_u32>
 8014b4a:	4603      	mov	r3, r0
 8014b4c:	2b00      	cmp	r3, #0
 8014b4e:	f040 80b1 	bne.w	8014cb4 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8014b52:	687b      	ldr	r3, [r7, #4]
 8014b54:	891b      	ldrh	r3, [r3, #8]
 8014b56:	2b07      	cmp	r3, #7
 8014b58:	f240 80a5 	bls.w	8014ca6 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014b5c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014b5e:	330e      	adds	r3, #14
 8014b60:	4619      	mov	r1, r3
 8014b62:	6878      	ldr	r0, [r7, #4]
 8014b64:	f7f9 f8b2 	bl	800dccc <pbuf_add_header>
 8014b68:	4603      	mov	r3, r0
 8014b6a:	2b00      	cmp	r3, #0
 8014b6c:	d04b      	beq.n	8014c06 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8014b6e:	687b      	ldr	r3, [r7, #4]
 8014b70:	891a      	ldrh	r2, [r3, #8]
 8014b72:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014b74:	4413      	add	r3, r2
 8014b76:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	891b      	ldrh	r3, [r3, #8]
 8014b7c:	8b7a      	ldrh	r2, [r7, #26]
 8014b7e:	429a      	cmp	r2, r3
 8014b80:	f0c0 809a 	bcc.w	8014cb8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8014b84:	8b7b      	ldrh	r3, [r7, #26]
 8014b86:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014b8a:	4619      	mov	r1, r3
 8014b8c:	200e      	movs	r0, #14
 8014b8e:	f7f8 fe4f 	bl	800d830 <pbuf_alloc>
 8014b92:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8014b94:	697b      	ldr	r3, [r7, #20]
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	f000 8090 	beq.w	8014cbc <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8014b9c:	697b      	ldr	r3, [r7, #20]
 8014b9e:	895b      	ldrh	r3, [r3, #10]
 8014ba0:	461a      	mov	r2, r3
 8014ba2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014ba4:	3308      	adds	r3, #8
 8014ba6:	429a      	cmp	r2, r3
 8014ba8:	d203      	bcs.n	8014bb2 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8014baa:	6978      	ldr	r0, [r7, #20]
 8014bac:	f7f9 f924 	bl	800ddf8 <pbuf_free>
          goto icmperr;
 8014bb0:	e085      	b.n	8014cbe <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8014bb2:	697b      	ldr	r3, [r7, #20]
 8014bb4:	685b      	ldr	r3, [r3, #4]
 8014bb6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014bb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014bba:	4618      	mov	r0, r3
 8014bbc:	f002 f94c 	bl	8016e58 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8014bc0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014bc2:	4619      	mov	r1, r3
 8014bc4:	6978      	ldr	r0, [r7, #20]
 8014bc6:	f7f9 f891 	bl	800dcec <pbuf_remove_header>
 8014bca:	4603      	mov	r3, r0
 8014bcc:	2b00      	cmp	r3, #0
 8014bce:	d009      	beq.n	8014be4 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8014bd0:	4b40      	ldr	r3, [pc, #256]	; (8014cd4 <icmp_input+0x1f8>)
 8014bd2:	22b6      	movs	r2, #182	; 0xb6
 8014bd4:	4940      	ldr	r1, [pc, #256]	; (8014cd8 <icmp_input+0x1fc>)
 8014bd6:	4841      	ldr	r0, [pc, #260]	; (8014cdc <icmp_input+0x200>)
 8014bd8:	f002 f954 	bl	8016e84 <iprintf>
          pbuf_free(r);
 8014bdc:	6978      	ldr	r0, [r7, #20]
 8014bde:	f7f9 f90b 	bl	800ddf8 <pbuf_free>
          goto icmperr;
 8014be2:	e06c      	b.n	8014cbe <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8014be4:	6879      	ldr	r1, [r7, #4]
 8014be6:	6978      	ldr	r0, [r7, #20]
 8014be8:	f7f9 fa2a 	bl	800e040 <pbuf_copy>
 8014bec:	4603      	mov	r3, r0
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	d003      	beq.n	8014bfa <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8014bf2:	6978      	ldr	r0, [r7, #20]
 8014bf4:	f7f9 f900 	bl	800ddf8 <pbuf_free>
          goto icmperr;
 8014bf8:	e061      	b.n	8014cbe <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8014bfa:	6878      	ldr	r0, [r7, #4]
 8014bfc:	f7f9 f8fc 	bl	800ddf8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8014c00:	697b      	ldr	r3, [r7, #20]
 8014c02:	607b      	str	r3, [r7, #4]
 8014c04:	e00f      	b.n	8014c26 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014c06:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014c08:	330e      	adds	r3, #14
 8014c0a:	4619      	mov	r1, r3
 8014c0c:	6878      	ldr	r0, [r7, #4]
 8014c0e:	f7f9 f86d 	bl	800dcec <pbuf_remove_header>
 8014c12:	4603      	mov	r3, r0
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d006      	beq.n	8014c26 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8014c18:	4b2e      	ldr	r3, [pc, #184]	; (8014cd4 <icmp_input+0x1f8>)
 8014c1a:	22c7      	movs	r2, #199	; 0xc7
 8014c1c:	4930      	ldr	r1, [pc, #192]	; (8014ce0 <icmp_input+0x204>)
 8014c1e:	482f      	ldr	r0, [pc, #188]	; (8014cdc <icmp_input+0x200>)
 8014c20:	f002 f930 	bl	8016e84 <iprintf>
          goto icmperr;
 8014c24:	e04b      	b.n	8014cbe <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8014c26:	687b      	ldr	r3, [r7, #4]
 8014c28:	685b      	ldr	r3, [r3, #4]
 8014c2a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8014c2c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014c2e:	4619      	mov	r1, r3
 8014c30:	6878      	ldr	r0, [r7, #4]
 8014c32:	f7f9 f84b 	bl	800dccc <pbuf_add_header>
 8014c36:	4603      	mov	r3, r0
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	d12b      	bne.n	8014c94 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	685b      	ldr	r3, [r3, #4]
 8014c40:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8014c42:	69fb      	ldr	r3, [r7, #28]
 8014c44:	681a      	ldr	r2, [r3, #0]
 8014c46:	68fb      	ldr	r3, [r7, #12]
 8014c48:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8014c4a:	4b20      	ldr	r3, [pc, #128]	; (8014ccc <icmp_input+0x1f0>)
 8014c4c:	691a      	ldr	r2, [r3, #16]
 8014c4e:	68fb      	ldr	r3, [r7, #12]
 8014c50:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8014c52:	693b      	ldr	r3, [r7, #16]
 8014c54:	2200      	movs	r2, #0
 8014c56:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8014c58:	693b      	ldr	r3, [r7, #16]
 8014c5a:	2200      	movs	r2, #0
 8014c5c:	709a      	strb	r2, [r3, #2]
 8014c5e:	2200      	movs	r2, #0
 8014c60:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8014c62:	68fb      	ldr	r3, [r7, #12]
 8014c64:	22ff      	movs	r2, #255	; 0xff
 8014c66:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8014c68:	68fb      	ldr	r3, [r7, #12]
 8014c6a:	2200      	movs	r2, #0
 8014c6c:	729a      	strb	r2, [r3, #10]
 8014c6e:	2200      	movs	r2, #0
 8014c70:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8014c72:	683b      	ldr	r3, [r7, #0]
 8014c74:	9302      	str	r3, [sp, #8]
 8014c76:	2301      	movs	r3, #1
 8014c78:	9301      	str	r3, [sp, #4]
 8014c7a:	2300      	movs	r3, #0
 8014c7c:	9300      	str	r3, [sp, #0]
 8014c7e:	23ff      	movs	r3, #255	; 0xff
 8014c80:	2200      	movs	r2, #0
 8014c82:	69f9      	ldr	r1, [r7, #28]
 8014c84:	6878      	ldr	r0, [r7, #4]
 8014c86:	f000 fa75 	bl	8015174 <ip4_output_if>
 8014c8a:	4603      	mov	r3, r0
 8014c8c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8014c8e:	e001      	b.n	8014c94 <icmp_input+0x1b8>
      break;
 8014c90:	bf00      	nop
 8014c92:	e000      	b.n	8014c96 <icmp_input+0x1ba>
      break;
 8014c94:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8014c96:	6878      	ldr	r0, [r7, #4]
 8014c98:	f7f9 f8ae 	bl	800ddf8 <pbuf_free>
  return;
 8014c9c:	e013      	b.n	8014cc6 <icmp_input+0x1ea>
    goto lenerr;
 8014c9e:	bf00      	nop
 8014ca0:	e002      	b.n	8014ca8 <icmp_input+0x1cc>
    goto lenerr;
 8014ca2:	bf00      	nop
 8014ca4:	e000      	b.n	8014ca8 <icmp_input+0x1cc>
        goto lenerr;
 8014ca6:	bf00      	nop
lenerr:
  pbuf_free(p);
 8014ca8:	6878      	ldr	r0, [r7, #4]
 8014caa:	f7f9 f8a5 	bl	800ddf8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014cae:	e00a      	b.n	8014cc6 <icmp_input+0x1ea>
        goto icmperr;
 8014cb0:	bf00      	nop
 8014cb2:	e004      	b.n	8014cbe <icmp_input+0x1e2>
        goto icmperr;
 8014cb4:	bf00      	nop
 8014cb6:	e002      	b.n	8014cbe <icmp_input+0x1e2>
          goto icmperr;
 8014cb8:	bf00      	nop
 8014cba:	e000      	b.n	8014cbe <icmp_input+0x1e2>
          goto icmperr;
 8014cbc:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8014cbe:	6878      	ldr	r0, [r7, #4]
 8014cc0:	f7f9 f89a 	bl	800ddf8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014cc4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8014cc6:	3728      	adds	r7, #40	; 0x28
 8014cc8:	46bd      	mov	sp, r7
 8014cca:	bd80      	pop	{r7, pc}
 8014ccc:	200079e8 	.word	0x200079e8
 8014cd0:	200079fc 	.word	0x200079fc
 8014cd4:	0801a6b0 	.word	0x0801a6b0
 8014cd8:	0801a6e8 	.word	0x0801a6e8
 8014cdc:	0801a720 	.word	0x0801a720
 8014ce0:	0801a748 	.word	0x0801a748

08014ce4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8014ce4:	b580      	push	{r7, lr}
 8014ce6:	b082      	sub	sp, #8
 8014ce8:	af00      	add	r7, sp, #0
 8014cea:	6078      	str	r0, [r7, #4]
 8014cec:	460b      	mov	r3, r1
 8014cee:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8014cf0:	78fb      	ldrb	r3, [r7, #3]
 8014cf2:	461a      	mov	r2, r3
 8014cf4:	2103      	movs	r1, #3
 8014cf6:	6878      	ldr	r0, [r7, #4]
 8014cf8:	f000 f814 	bl	8014d24 <icmp_send_response>
}
 8014cfc:	bf00      	nop
 8014cfe:	3708      	adds	r7, #8
 8014d00:	46bd      	mov	sp, r7
 8014d02:	bd80      	pop	{r7, pc}

08014d04 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8014d04:	b580      	push	{r7, lr}
 8014d06:	b082      	sub	sp, #8
 8014d08:	af00      	add	r7, sp, #0
 8014d0a:	6078      	str	r0, [r7, #4]
 8014d0c:	460b      	mov	r3, r1
 8014d0e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8014d10:	78fb      	ldrb	r3, [r7, #3]
 8014d12:	461a      	mov	r2, r3
 8014d14:	210b      	movs	r1, #11
 8014d16:	6878      	ldr	r0, [r7, #4]
 8014d18:	f000 f804 	bl	8014d24 <icmp_send_response>
}
 8014d1c:	bf00      	nop
 8014d1e:	3708      	adds	r7, #8
 8014d20:	46bd      	mov	sp, r7
 8014d22:	bd80      	pop	{r7, pc}

08014d24 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8014d24:	b580      	push	{r7, lr}
 8014d26:	b08c      	sub	sp, #48	; 0x30
 8014d28:	af04      	add	r7, sp, #16
 8014d2a:	6078      	str	r0, [r7, #4]
 8014d2c:	460b      	mov	r3, r1
 8014d2e:	70fb      	strb	r3, [r7, #3]
 8014d30:	4613      	mov	r3, r2
 8014d32:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8014d34:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014d38:	2124      	movs	r1, #36	; 0x24
 8014d3a:	2022      	movs	r0, #34	; 0x22
 8014d3c:	f7f8 fd78 	bl	800d830 <pbuf_alloc>
 8014d40:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8014d42:	69fb      	ldr	r3, [r7, #28]
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	d04c      	beq.n	8014de2 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8014d48:	69fb      	ldr	r3, [r7, #28]
 8014d4a:	895b      	ldrh	r3, [r3, #10]
 8014d4c:	2b23      	cmp	r3, #35	; 0x23
 8014d4e:	d806      	bhi.n	8014d5e <icmp_send_response+0x3a>
 8014d50:	4b26      	ldr	r3, [pc, #152]	; (8014dec <icmp_send_response+0xc8>)
 8014d52:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8014d56:	4926      	ldr	r1, [pc, #152]	; (8014df0 <icmp_send_response+0xcc>)
 8014d58:	4826      	ldr	r0, [pc, #152]	; (8014df4 <icmp_send_response+0xd0>)
 8014d5a:	f002 f893 	bl	8016e84 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	685b      	ldr	r3, [r3, #4]
 8014d62:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8014d64:	69fb      	ldr	r3, [r7, #28]
 8014d66:	685b      	ldr	r3, [r3, #4]
 8014d68:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8014d6a:	697b      	ldr	r3, [r7, #20]
 8014d6c:	78fa      	ldrb	r2, [r7, #3]
 8014d6e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8014d70:	697b      	ldr	r3, [r7, #20]
 8014d72:	78ba      	ldrb	r2, [r7, #2]
 8014d74:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8014d76:	697b      	ldr	r3, [r7, #20]
 8014d78:	2200      	movs	r2, #0
 8014d7a:	711a      	strb	r2, [r3, #4]
 8014d7c:	2200      	movs	r2, #0
 8014d7e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8014d80:	697b      	ldr	r3, [r7, #20]
 8014d82:	2200      	movs	r2, #0
 8014d84:	719a      	strb	r2, [r3, #6]
 8014d86:	2200      	movs	r2, #0
 8014d88:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8014d8a:	69fb      	ldr	r3, [r7, #28]
 8014d8c:	685b      	ldr	r3, [r3, #4]
 8014d8e:	f103 0008 	add.w	r0, r3, #8
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	685b      	ldr	r3, [r3, #4]
 8014d96:	221c      	movs	r2, #28
 8014d98:	4619      	mov	r1, r3
 8014d9a:	f002 f85d 	bl	8016e58 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8014d9e:	69bb      	ldr	r3, [r7, #24]
 8014da0:	68db      	ldr	r3, [r3, #12]
 8014da2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8014da4:	f107 030c 	add.w	r3, r7, #12
 8014da8:	4618      	mov	r0, r3
 8014daa:	f000 f825 	bl	8014df8 <ip4_route>
 8014dae:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8014db0:	693b      	ldr	r3, [r7, #16]
 8014db2:	2b00      	cmp	r3, #0
 8014db4:	d011      	beq.n	8014dda <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8014db6:	697b      	ldr	r3, [r7, #20]
 8014db8:	2200      	movs	r2, #0
 8014dba:	709a      	strb	r2, [r3, #2]
 8014dbc:	2200      	movs	r2, #0
 8014dbe:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8014dc0:	f107 020c 	add.w	r2, r7, #12
 8014dc4:	693b      	ldr	r3, [r7, #16]
 8014dc6:	9302      	str	r3, [sp, #8]
 8014dc8:	2301      	movs	r3, #1
 8014dca:	9301      	str	r3, [sp, #4]
 8014dcc:	2300      	movs	r3, #0
 8014dce:	9300      	str	r3, [sp, #0]
 8014dd0:	23ff      	movs	r3, #255	; 0xff
 8014dd2:	2100      	movs	r1, #0
 8014dd4:	69f8      	ldr	r0, [r7, #28]
 8014dd6:	f000 f9cd 	bl	8015174 <ip4_output_if>
  }
  pbuf_free(q);
 8014dda:	69f8      	ldr	r0, [r7, #28]
 8014ddc:	f7f9 f80c 	bl	800ddf8 <pbuf_free>
 8014de0:	e000      	b.n	8014de4 <icmp_send_response+0xc0>
    return;
 8014de2:	bf00      	nop
}
 8014de4:	3720      	adds	r7, #32
 8014de6:	46bd      	mov	sp, r7
 8014de8:	bd80      	pop	{r7, pc}
 8014dea:	bf00      	nop
 8014dec:	0801a6b0 	.word	0x0801a6b0
 8014df0:	0801a77c 	.word	0x0801a77c
 8014df4:	0801a720 	.word	0x0801a720

08014df8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8014df8:	b480      	push	{r7}
 8014dfa:	b085      	sub	sp, #20
 8014dfc:	af00      	add	r7, sp, #0
 8014dfe:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8014e00:	4b33      	ldr	r3, [pc, #204]	; (8014ed0 <ip4_route+0xd8>)
 8014e02:	681b      	ldr	r3, [r3, #0]
 8014e04:	60fb      	str	r3, [r7, #12]
 8014e06:	e036      	b.n	8014e76 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014e08:	68fb      	ldr	r3, [r7, #12]
 8014e0a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8014e0e:	f003 0301 	and.w	r3, r3, #1
 8014e12:	b2db      	uxtb	r3, r3
 8014e14:	2b00      	cmp	r3, #0
 8014e16:	d02b      	beq.n	8014e70 <ip4_route+0x78>
 8014e18:	68fb      	ldr	r3, [r7, #12]
 8014e1a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8014e1e:	089b      	lsrs	r3, r3, #2
 8014e20:	f003 0301 	and.w	r3, r3, #1
 8014e24:	b2db      	uxtb	r3, r3
 8014e26:	2b00      	cmp	r3, #0
 8014e28:	d022      	beq.n	8014e70 <ip4_route+0x78>
 8014e2a:	68fb      	ldr	r3, [r7, #12]
 8014e2c:	3304      	adds	r3, #4
 8014e2e:	681b      	ldr	r3, [r3, #0]
 8014e30:	2b00      	cmp	r3, #0
 8014e32:	d01d      	beq.n	8014e70 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	681a      	ldr	r2, [r3, #0]
 8014e38:	68fb      	ldr	r3, [r7, #12]
 8014e3a:	3304      	adds	r3, #4
 8014e3c:	681b      	ldr	r3, [r3, #0]
 8014e3e:	405a      	eors	r2, r3
 8014e40:	68fb      	ldr	r3, [r7, #12]
 8014e42:	3308      	adds	r3, #8
 8014e44:	681b      	ldr	r3, [r3, #0]
 8014e46:	4013      	ands	r3, r2
 8014e48:	2b00      	cmp	r3, #0
 8014e4a:	d101      	bne.n	8014e50 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8014e4c:	68fb      	ldr	r3, [r7, #12]
 8014e4e:	e038      	b.n	8014ec2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8014e50:	68fb      	ldr	r3, [r7, #12]
 8014e52:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8014e56:	f003 0302 	and.w	r3, r3, #2
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	d108      	bne.n	8014e70 <ip4_route+0x78>
 8014e5e:	687b      	ldr	r3, [r7, #4]
 8014e60:	681a      	ldr	r2, [r3, #0]
 8014e62:	68fb      	ldr	r3, [r7, #12]
 8014e64:	330c      	adds	r3, #12
 8014e66:	681b      	ldr	r3, [r3, #0]
 8014e68:	429a      	cmp	r2, r3
 8014e6a:	d101      	bne.n	8014e70 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8014e6c:	68fb      	ldr	r3, [r7, #12]
 8014e6e:	e028      	b.n	8014ec2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8014e70:	68fb      	ldr	r3, [r7, #12]
 8014e72:	681b      	ldr	r3, [r3, #0]
 8014e74:	60fb      	str	r3, [r7, #12]
 8014e76:	68fb      	ldr	r3, [r7, #12]
 8014e78:	2b00      	cmp	r3, #0
 8014e7a:	d1c5      	bne.n	8014e08 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014e7c:	4b15      	ldr	r3, [pc, #84]	; (8014ed4 <ip4_route+0xdc>)
 8014e7e:	681b      	ldr	r3, [r3, #0]
 8014e80:	2b00      	cmp	r3, #0
 8014e82:	d01a      	beq.n	8014eba <ip4_route+0xc2>
 8014e84:	4b13      	ldr	r3, [pc, #76]	; (8014ed4 <ip4_route+0xdc>)
 8014e86:	681b      	ldr	r3, [r3, #0]
 8014e88:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8014e8c:	f003 0301 	and.w	r3, r3, #1
 8014e90:	2b00      	cmp	r3, #0
 8014e92:	d012      	beq.n	8014eba <ip4_route+0xc2>
 8014e94:	4b0f      	ldr	r3, [pc, #60]	; (8014ed4 <ip4_route+0xdc>)
 8014e96:	681b      	ldr	r3, [r3, #0]
 8014e98:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8014e9c:	f003 0304 	and.w	r3, r3, #4
 8014ea0:	2b00      	cmp	r3, #0
 8014ea2:	d00a      	beq.n	8014eba <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8014ea4:	4b0b      	ldr	r3, [pc, #44]	; (8014ed4 <ip4_route+0xdc>)
 8014ea6:	681b      	ldr	r3, [r3, #0]
 8014ea8:	3304      	adds	r3, #4
 8014eaa:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014eac:	2b00      	cmp	r3, #0
 8014eae:	d004      	beq.n	8014eba <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	681b      	ldr	r3, [r3, #0]
 8014eb4:	b2db      	uxtb	r3, r3
 8014eb6:	2b7f      	cmp	r3, #127	; 0x7f
 8014eb8:	d101      	bne.n	8014ebe <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8014eba:	2300      	movs	r3, #0
 8014ebc:	e001      	b.n	8014ec2 <ip4_route+0xca>
  }

  return netif_default;
 8014ebe:	4b05      	ldr	r3, [pc, #20]	; (8014ed4 <ip4_route+0xdc>)
 8014ec0:	681b      	ldr	r3, [r3, #0]
}
 8014ec2:	4618      	mov	r0, r3
 8014ec4:	3714      	adds	r7, #20
 8014ec6:	46bd      	mov	sp, r7
 8014ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ecc:	4770      	bx	lr
 8014ece:	bf00      	nop
 8014ed0:	2000b0ec 	.word	0x2000b0ec
 8014ed4:	2000b0f0 	.word	0x2000b0f0

08014ed8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8014ed8:	b580      	push	{r7, lr}
 8014eda:	b082      	sub	sp, #8
 8014edc:	af00      	add	r7, sp, #0
 8014ede:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8014ee6:	f003 0301 	and.w	r3, r3, #1
 8014eea:	b2db      	uxtb	r3, r3
 8014eec:	2b00      	cmp	r3, #0
 8014eee:	d016      	beq.n	8014f1e <ip4_input_accept+0x46>
 8014ef0:	687b      	ldr	r3, [r7, #4]
 8014ef2:	3304      	adds	r3, #4
 8014ef4:	681b      	ldr	r3, [r3, #0]
 8014ef6:	2b00      	cmp	r3, #0
 8014ef8:	d011      	beq.n	8014f1e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8014efa:	4b0b      	ldr	r3, [pc, #44]	; (8014f28 <ip4_input_accept+0x50>)
 8014efc:	695a      	ldr	r2, [r3, #20]
 8014efe:	687b      	ldr	r3, [r7, #4]
 8014f00:	3304      	adds	r3, #4
 8014f02:	681b      	ldr	r3, [r3, #0]
 8014f04:	429a      	cmp	r2, r3
 8014f06:	d008      	beq.n	8014f1a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8014f08:	4b07      	ldr	r3, [pc, #28]	; (8014f28 <ip4_input_accept+0x50>)
 8014f0a:	695b      	ldr	r3, [r3, #20]
 8014f0c:	6879      	ldr	r1, [r7, #4]
 8014f0e:	4618      	mov	r0, r3
 8014f10:	f000 fa08 	bl	8015324 <ip4_addr_isbroadcast_u32>
 8014f14:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8014f16:	2b00      	cmp	r3, #0
 8014f18:	d001      	beq.n	8014f1e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8014f1a:	2301      	movs	r3, #1
 8014f1c:	e000      	b.n	8014f20 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8014f1e:	2300      	movs	r3, #0
}
 8014f20:	4618      	mov	r0, r3
 8014f22:	3708      	adds	r7, #8
 8014f24:	46bd      	mov	sp, r7
 8014f26:	bd80      	pop	{r7, pc}
 8014f28:	200079e8 	.word	0x200079e8

08014f2c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8014f2c:	b580      	push	{r7, lr}
 8014f2e:	b086      	sub	sp, #24
 8014f30:	af00      	add	r7, sp, #0
 8014f32:	6078      	str	r0, [r7, #4]
 8014f34:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	685b      	ldr	r3, [r3, #4]
 8014f3a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8014f3c:	697b      	ldr	r3, [r7, #20]
 8014f3e:	781b      	ldrb	r3, [r3, #0]
 8014f40:	091b      	lsrs	r3, r3, #4
 8014f42:	b2db      	uxtb	r3, r3
 8014f44:	2b04      	cmp	r3, #4
 8014f46:	d004      	beq.n	8014f52 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8014f48:	6878      	ldr	r0, [r7, #4]
 8014f4a:	f7f8 ff55 	bl	800ddf8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8014f4e:	2300      	movs	r3, #0
 8014f50:	e107      	b.n	8015162 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8014f52:	697b      	ldr	r3, [r7, #20]
 8014f54:	781b      	ldrb	r3, [r3, #0]
 8014f56:	f003 030f 	and.w	r3, r3, #15
 8014f5a:	b2db      	uxtb	r3, r3
 8014f5c:	009b      	lsls	r3, r3, #2
 8014f5e:	b2db      	uxtb	r3, r3
 8014f60:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8014f62:	697b      	ldr	r3, [r7, #20]
 8014f64:	885b      	ldrh	r3, [r3, #2]
 8014f66:	b29b      	uxth	r3, r3
 8014f68:	4618      	mov	r0, r3
 8014f6a:	f7f7 fc11 	bl	800c790 <lwip_htons>
 8014f6e:	4603      	mov	r3, r0
 8014f70:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	891b      	ldrh	r3, [r3, #8]
 8014f76:	89ba      	ldrh	r2, [r7, #12]
 8014f78:	429a      	cmp	r2, r3
 8014f7a:	d204      	bcs.n	8014f86 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8014f7c:	89bb      	ldrh	r3, [r7, #12]
 8014f7e:	4619      	mov	r1, r3
 8014f80:	6878      	ldr	r0, [r7, #4]
 8014f82:	f7f8 fdb3 	bl	800daec <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	895b      	ldrh	r3, [r3, #10]
 8014f8a:	89fa      	ldrh	r2, [r7, #14]
 8014f8c:	429a      	cmp	r2, r3
 8014f8e:	d807      	bhi.n	8014fa0 <ip4_input+0x74>
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	891b      	ldrh	r3, [r3, #8]
 8014f94:	89ba      	ldrh	r2, [r7, #12]
 8014f96:	429a      	cmp	r2, r3
 8014f98:	d802      	bhi.n	8014fa0 <ip4_input+0x74>
 8014f9a:	89fb      	ldrh	r3, [r7, #14]
 8014f9c:	2b13      	cmp	r3, #19
 8014f9e:	d804      	bhi.n	8014faa <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8014fa0:	6878      	ldr	r0, [r7, #4]
 8014fa2:	f7f8 ff29 	bl	800ddf8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8014fa6:	2300      	movs	r3, #0
 8014fa8:	e0db      	b.n	8015162 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8014faa:	697b      	ldr	r3, [r7, #20]
 8014fac:	691b      	ldr	r3, [r3, #16]
 8014fae:	4a6f      	ldr	r2, [pc, #444]	; (801516c <ip4_input+0x240>)
 8014fb0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8014fb2:	697b      	ldr	r3, [r7, #20]
 8014fb4:	68db      	ldr	r3, [r3, #12]
 8014fb6:	4a6d      	ldr	r2, [pc, #436]	; (801516c <ip4_input+0x240>)
 8014fb8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014fba:	4b6c      	ldr	r3, [pc, #432]	; (801516c <ip4_input+0x240>)
 8014fbc:	695b      	ldr	r3, [r3, #20]
 8014fbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014fc2:	2be0      	cmp	r3, #224	; 0xe0
 8014fc4:	d112      	bne.n	8014fec <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8014fc6:	683b      	ldr	r3, [r7, #0]
 8014fc8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8014fcc:	f003 0301 	and.w	r3, r3, #1
 8014fd0:	b2db      	uxtb	r3, r3
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	d007      	beq.n	8014fe6 <ip4_input+0xba>
 8014fd6:	683b      	ldr	r3, [r7, #0]
 8014fd8:	3304      	adds	r3, #4
 8014fda:	681b      	ldr	r3, [r3, #0]
 8014fdc:	2b00      	cmp	r3, #0
 8014fde:	d002      	beq.n	8014fe6 <ip4_input+0xba>
      netif = inp;
 8014fe0:	683b      	ldr	r3, [r7, #0]
 8014fe2:	613b      	str	r3, [r7, #16]
 8014fe4:	e02a      	b.n	801503c <ip4_input+0x110>
    } else {
      netif = NULL;
 8014fe6:	2300      	movs	r3, #0
 8014fe8:	613b      	str	r3, [r7, #16]
 8014fea:	e027      	b.n	801503c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8014fec:	6838      	ldr	r0, [r7, #0]
 8014fee:	f7ff ff73 	bl	8014ed8 <ip4_input_accept>
 8014ff2:	4603      	mov	r3, r0
 8014ff4:	2b00      	cmp	r3, #0
 8014ff6:	d002      	beq.n	8014ffe <ip4_input+0xd2>
      netif = inp;
 8014ff8:	683b      	ldr	r3, [r7, #0]
 8014ffa:	613b      	str	r3, [r7, #16]
 8014ffc:	e01e      	b.n	801503c <ip4_input+0x110>
    } else {
      netif = NULL;
 8014ffe:	2300      	movs	r3, #0
 8015000:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8015002:	4b5a      	ldr	r3, [pc, #360]	; (801516c <ip4_input+0x240>)
 8015004:	695b      	ldr	r3, [r3, #20]
 8015006:	b2db      	uxtb	r3, r3
 8015008:	2b7f      	cmp	r3, #127	; 0x7f
 801500a:	d017      	beq.n	801503c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801500c:	4b58      	ldr	r3, [pc, #352]	; (8015170 <ip4_input+0x244>)
 801500e:	681b      	ldr	r3, [r3, #0]
 8015010:	613b      	str	r3, [r7, #16]
 8015012:	e00e      	b.n	8015032 <ip4_input+0x106>
          if (netif == inp) {
 8015014:	693a      	ldr	r2, [r7, #16]
 8015016:	683b      	ldr	r3, [r7, #0]
 8015018:	429a      	cmp	r2, r3
 801501a:	d006      	beq.n	801502a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801501c:	6938      	ldr	r0, [r7, #16]
 801501e:	f7ff ff5b 	bl	8014ed8 <ip4_input_accept>
 8015022:	4603      	mov	r3, r0
 8015024:	2b00      	cmp	r3, #0
 8015026:	d108      	bne.n	801503a <ip4_input+0x10e>
 8015028:	e000      	b.n	801502c <ip4_input+0x100>
            continue;
 801502a:	bf00      	nop
        NETIF_FOREACH(netif) {
 801502c:	693b      	ldr	r3, [r7, #16]
 801502e:	681b      	ldr	r3, [r3, #0]
 8015030:	613b      	str	r3, [r7, #16]
 8015032:	693b      	ldr	r3, [r7, #16]
 8015034:	2b00      	cmp	r3, #0
 8015036:	d1ed      	bne.n	8015014 <ip4_input+0xe8>
 8015038:	e000      	b.n	801503c <ip4_input+0x110>
            break;
 801503a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801503c:	4b4b      	ldr	r3, [pc, #300]	; (801516c <ip4_input+0x240>)
 801503e:	691b      	ldr	r3, [r3, #16]
 8015040:	6839      	ldr	r1, [r7, #0]
 8015042:	4618      	mov	r0, r3
 8015044:	f000 f96e 	bl	8015324 <ip4_addr_isbroadcast_u32>
 8015048:	4603      	mov	r3, r0
 801504a:	2b00      	cmp	r3, #0
 801504c:	d105      	bne.n	801505a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801504e:	4b47      	ldr	r3, [pc, #284]	; (801516c <ip4_input+0x240>)
 8015050:	691b      	ldr	r3, [r3, #16]
 8015052:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015056:	2be0      	cmp	r3, #224	; 0xe0
 8015058:	d104      	bne.n	8015064 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801505a:	6878      	ldr	r0, [r7, #4]
 801505c:	f7f8 fecc 	bl	800ddf8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8015060:	2300      	movs	r3, #0
 8015062:	e07e      	b.n	8015162 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8015064:	693b      	ldr	r3, [r7, #16]
 8015066:	2b00      	cmp	r3, #0
 8015068:	d104      	bne.n	8015074 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801506a:	6878      	ldr	r0, [r7, #4]
 801506c:	f7f8 fec4 	bl	800ddf8 <pbuf_free>
    return ERR_OK;
 8015070:	2300      	movs	r3, #0
 8015072:	e076      	b.n	8015162 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8015074:	697b      	ldr	r3, [r7, #20]
 8015076:	88db      	ldrh	r3, [r3, #6]
 8015078:	b29b      	uxth	r3, r3
 801507a:	461a      	mov	r2, r3
 801507c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8015080:	4013      	ands	r3, r2
 8015082:	2b00      	cmp	r3, #0
 8015084:	d00b      	beq.n	801509e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8015086:	6878      	ldr	r0, [r7, #4]
 8015088:	f000 fc92 	bl	80159b0 <ip4_reass>
 801508c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	2b00      	cmp	r3, #0
 8015092:	d101      	bne.n	8015098 <ip4_input+0x16c>
      return ERR_OK;
 8015094:	2300      	movs	r3, #0
 8015096:	e064      	b.n	8015162 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	685b      	ldr	r3, [r3, #4]
 801509c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801509e:	4a33      	ldr	r2, [pc, #204]	; (801516c <ip4_input+0x240>)
 80150a0:	693b      	ldr	r3, [r7, #16]
 80150a2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80150a4:	4a31      	ldr	r2, [pc, #196]	; (801516c <ip4_input+0x240>)
 80150a6:	683b      	ldr	r3, [r7, #0]
 80150a8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80150aa:	4a30      	ldr	r2, [pc, #192]	; (801516c <ip4_input+0x240>)
 80150ac:	697b      	ldr	r3, [r7, #20]
 80150ae:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80150b0:	697b      	ldr	r3, [r7, #20]
 80150b2:	781b      	ldrb	r3, [r3, #0]
 80150b4:	f003 030f 	and.w	r3, r3, #15
 80150b8:	b2db      	uxtb	r3, r3
 80150ba:	009b      	lsls	r3, r3, #2
 80150bc:	b2db      	uxtb	r3, r3
 80150be:	b29a      	uxth	r2, r3
 80150c0:	4b2a      	ldr	r3, [pc, #168]	; (801516c <ip4_input+0x240>)
 80150c2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80150c4:	89fb      	ldrh	r3, [r7, #14]
 80150c6:	4619      	mov	r1, r3
 80150c8:	6878      	ldr	r0, [r7, #4]
 80150ca:	f7f8 fe0f 	bl	800dcec <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80150ce:	697b      	ldr	r3, [r7, #20]
 80150d0:	7a5b      	ldrb	r3, [r3, #9]
 80150d2:	2b11      	cmp	r3, #17
 80150d4:	d006      	beq.n	80150e4 <ip4_input+0x1b8>
 80150d6:	2b11      	cmp	r3, #17
 80150d8:	dc13      	bgt.n	8015102 <ip4_input+0x1d6>
 80150da:	2b01      	cmp	r3, #1
 80150dc:	d00c      	beq.n	80150f8 <ip4_input+0x1cc>
 80150de:	2b06      	cmp	r3, #6
 80150e0:	d005      	beq.n	80150ee <ip4_input+0x1c2>
 80150e2:	e00e      	b.n	8015102 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80150e4:	6839      	ldr	r1, [r7, #0]
 80150e6:	6878      	ldr	r0, [r7, #4]
 80150e8:	f7fe fc68 	bl	80139bc <udp_input>
        break;
 80150ec:	e026      	b.n	801513c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80150ee:	6839      	ldr	r1, [r7, #0]
 80150f0:	6878      	ldr	r0, [r7, #4]
 80150f2:	f7fa fcb5 	bl	800fa60 <tcp_input>
        break;
 80150f6:	e021      	b.n	801513c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80150f8:	6839      	ldr	r1, [r7, #0]
 80150fa:	6878      	ldr	r0, [r7, #4]
 80150fc:	f7ff fcee 	bl	8014adc <icmp_input>
        break;
 8015100:	e01c      	b.n	801513c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015102:	4b1a      	ldr	r3, [pc, #104]	; (801516c <ip4_input+0x240>)
 8015104:	695b      	ldr	r3, [r3, #20]
 8015106:	6939      	ldr	r1, [r7, #16]
 8015108:	4618      	mov	r0, r3
 801510a:	f000 f90b 	bl	8015324 <ip4_addr_isbroadcast_u32>
 801510e:	4603      	mov	r3, r0
 8015110:	2b00      	cmp	r3, #0
 8015112:	d10f      	bne.n	8015134 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015114:	4b15      	ldr	r3, [pc, #84]	; (801516c <ip4_input+0x240>)
 8015116:	695b      	ldr	r3, [r3, #20]
 8015118:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801511c:	2be0      	cmp	r3, #224	; 0xe0
 801511e:	d009      	beq.n	8015134 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8015120:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015124:	4619      	mov	r1, r3
 8015126:	6878      	ldr	r0, [r7, #4]
 8015128:	f7f8 fe53 	bl	800ddd2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801512c:	2102      	movs	r1, #2
 801512e:	6878      	ldr	r0, [r7, #4]
 8015130:	f7ff fdd8 	bl	8014ce4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8015134:	6878      	ldr	r0, [r7, #4]
 8015136:	f7f8 fe5f 	bl	800ddf8 <pbuf_free>
        break;
 801513a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801513c:	4b0b      	ldr	r3, [pc, #44]	; (801516c <ip4_input+0x240>)
 801513e:	2200      	movs	r2, #0
 8015140:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8015142:	4b0a      	ldr	r3, [pc, #40]	; (801516c <ip4_input+0x240>)
 8015144:	2200      	movs	r2, #0
 8015146:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8015148:	4b08      	ldr	r3, [pc, #32]	; (801516c <ip4_input+0x240>)
 801514a:	2200      	movs	r2, #0
 801514c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801514e:	4b07      	ldr	r3, [pc, #28]	; (801516c <ip4_input+0x240>)
 8015150:	2200      	movs	r2, #0
 8015152:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8015154:	4b05      	ldr	r3, [pc, #20]	; (801516c <ip4_input+0x240>)
 8015156:	2200      	movs	r2, #0
 8015158:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801515a:	4b04      	ldr	r3, [pc, #16]	; (801516c <ip4_input+0x240>)
 801515c:	2200      	movs	r2, #0
 801515e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8015160:	2300      	movs	r3, #0
}
 8015162:	4618      	mov	r0, r3
 8015164:	3718      	adds	r7, #24
 8015166:	46bd      	mov	sp, r7
 8015168:	bd80      	pop	{r7, pc}
 801516a:	bf00      	nop
 801516c:	200079e8 	.word	0x200079e8
 8015170:	2000b0ec 	.word	0x2000b0ec

08015174 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8015174:	b580      	push	{r7, lr}
 8015176:	b08a      	sub	sp, #40	; 0x28
 8015178:	af04      	add	r7, sp, #16
 801517a:	60f8      	str	r0, [r7, #12]
 801517c:	60b9      	str	r1, [r7, #8]
 801517e:	607a      	str	r2, [r7, #4]
 8015180:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8015182:	68bb      	ldr	r3, [r7, #8]
 8015184:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8015186:	687b      	ldr	r3, [r7, #4]
 8015188:	2b00      	cmp	r3, #0
 801518a:	d009      	beq.n	80151a0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801518c:	68bb      	ldr	r3, [r7, #8]
 801518e:	2b00      	cmp	r3, #0
 8015190:	d003      	beq.n	801519a <ip4_output_if+0x26>
 8015192:	68bb      	ldr	r3, [r7, #8]
 8015194:	681b      	ldr	r3, [r3, #0]
 8015196:	2b00      	cmp	r3, #0
 8015198:	d102      	bne.n	80151a0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801519a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801519c:	3304      	adds	r3, #4
 801519e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80151a0:	78fa      	ldrb	r2, [r7, #3]
 80151a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151a4:	9302      	str	r3, [sp, #8]
 80151a6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80151aa:	9301      	str	r3, [sp, #4]
 80151ac:	f897 3020 	ldrb.w	r3, [r7, #32]
 80151b0:	9300      	str	r3, [sp, #0]
 80151b2:	4613      	mov	r3, r2
 80151b4:	687a      	ldr	r2, [r7, #4]
 80151b6:	6979      	ldr	r1, [r7, #20]
 80151b8:	68f8      	ldr	r0, [r7, #12]
 80151ba:	f000 f805 	bl	80151c8 <ip4_output_if_src>
 80151be:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80151c0:	4618      	mov	r0, r3
 80151c2:	3718      	adds	r7, #24
 80151c4:	46bd      	mov	sp, r7
 80151c6:	bd80      	pop	{r7, pc}

080151c8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80151c8:	b580      	push	{r7, lr}
 80151ca:	b088      	sub	sp, #32
 80151cc:	af00      	add	r7, sp, #0
 80151ce:	60f8      	str	r0, [r7, #12]
 80151d0:	60b9      	str	r1, [r7, #8]
 80151d2:	607a      	str	r2, [r7, #4]
 80151d4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80151d6:	68fb      	ldr	r3, [r7, #12]
 80151d8:	7b9b      	ldrb	r3, [r3, #14]
 80151da:	2b01      	cmp	r3, #1
 80151dc:	d006      	beq.n	80151ec <ip4_output_if_src+0x24>
 80151de:	4b4b      	ldr	r3, [pc, #300]	; (801530c <ip4_output_if_src+0x144>)
 80151e0:	f44f 7255 	mov.w	r2, #852	; 0x354
 80151e4:	494a      	ldr	r1, [pc, #296]	; (8015310 <ip4_output_if_src+0x148>)
 80151e6:	484b      	ldr	r0, [pc, #300]	; (8015314 <ip4_output_if_src+0x14c>)
 80151e8:	f001 fe4c 	bl	8016e84 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	2b00      	cmp	r3, #0
 80151f0:	d060      	beq.n	80152b4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80151f2:	2314      	movs	r3, #20
 80151f4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80151f6:	2114      	movs	r1, #20
 80151f8:	68f8      	ldr	r0, [r7, #12]
 80151fa:	f7f8 fd67 	bl	800dccc <pbuf_add_header>
 80151fe:	4603      	mov	r3, r0
 8015200:	2b00      	cmp	r3, #0
 8015202:	d002      	beq.n	801520a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015204:	f06f 0301 	mvn.w	r3, #1
 8015208:	e07c      	b.n	8015304 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801520a:	68fb      	ldr	r3, [r7, #12]
 801520c:	685b      	ldr	r3, [r3, #4]
 801520e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8015210:	68fb      	ldr	r3, [r7, #12]
 8015212:	895b      	ldrh	r3, [r3, #10]
 8015214:	2b13      	cmp	r3, #19
 8015216:	d806      	bhi.n	8015226 <ip4_output_if_src+0x5e>
 8015218:	4b3c      	ldr	r3, [pc, #240]	; (801530c <ip4_output_if_src+0x144>)
 801521a:	f44f 7262 	mov.w	r2, #904	; 0x388
 801521e:	493e      	ldr	r1, [pc, #248]	; (8015318 <ip4_output_if_src+0x150>)
 8015220:	483c      	ldr	r0, [pc, #240]	; (8015314 <ip4_output_if_src+0x14c>)
 8015222:	f001 fe2f 	bl	8016e84 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8015226:	69fb      	ldr	r3, [r7, #28]
 8015228:	78fa      	ldrb	r2, [r7, #3]
 801522a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801522c:	69fb      	ldr	r3, [r7, #28]
 801522e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8015232:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8015234:	687b      	ldr	r3, [r7, #4]
 8015236:	681a      	ldr	r2, [r3, #0]
 8015238:	69fb      	ldr	r3, [r7, #28]
 801523a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801523c:	8b7b      	ldrh	r3, [r7, #26]
 801523e:	089b      	lsrs	r3, r3, #2
 8015240:	b29b      	uxth	r3, r3
 8015242:	b2db      	uxtb	r3, r3
 8015244:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015248:	b2da      	uxtb	r2, r3
 801524a:	69fb      	ldr	r3, [r7, #28]
 801524c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801524e:	69fb      	ldr	r3, [r7, #28]
 8015250:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015254:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8015256:	68fb      	ldr	r3, [r7, #12]
 8015258:	891b      	ldrh	r3, [r3, #8]
 801525a:	4618      	mov	r0, r3
 801525c:	f7f7 fa98 	bl	800c790 <lwip_htons>
 8015260:	4603      	mov	r3, r0
 8015262:	461a      	mov	r2, r3
 8015264:	69fb      	ldr	r3, [r7, #28]
 8015266:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8015268:	69fb      	ldr	r3, [r7, #28]
 801526a:	2200      	movs	r2, #0
 801526c:	719a      	strb	r2, [r3, #6]
 801526e:	2200      	movs	r2, #0
 8015270:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8015272:	4b2a      	ldr	r3, [pc, #168]	; (801531c <ip4_output_if_src+0x154>)
 8015274:	881b      	ldrh	r3, [r3, #0]
 8015276:	4618      	mov	r0, r3
 8015278:	f7f7 fa8a 	bl	800c790 <lwip_htons>
 801527c:	4603      	mov	r3, r0
 801527e:	461a      	mov	r2, r3
 8015280:	69fb      	ldr	r3, [r7, #28]
 8015282:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8015284:	4b25      	ldr	r3, [pc, #148]	; (801531c <ip4_output_if_src+0x154>)
 8015286:	881b      	ldrh	r3, [r3, #0]
 8015288:	3301      	adds	r3, #1
 801528a:	b29a      	uxth	r2, r3
 801528c:	4b23      	ldr	r3, [pc, #140]	; (801531c <ip4_output_if_src+0x154>)
 801528e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8015290:	68bb      	ldr	r3, [r7, #8]
 8015292:	2b00      	cmp	r3, #0
 8015294:	d104      	bne.n	80152a0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8015296:	4b22      	ldr	r3, [pc, #136]	; (8015320 <ip4_output_if_src+0x158>)
 8015298:	681a      	ldr	r2, [r3, #0]
 801529a:	69fb      	ldr	r3, [r7, #28]
 801529c:	60da      	str	r2, [r3, #12]
 801529e:	e003      	b.n	80152a8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80152a0:	68bb      	ldr	r3, [r7, #8]
 80152a2:	681a      	ldr	r2, [r3, #0]
 80152a4:	69fb      	ldr	r3, [r7, #28]
 80152a6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80152a8:	69fb      	ldr	r3, [r7, #28]
 80152aa:	2200      	movs	r2, #0
 80152ac:	729a      	strb	r2, [r3, #10]
 80152ae:	2200      	movs	r2, #0
 80152b0:	72da      	strb	r2, [r3, #11]
 80152b2:	e00f      	b.n	80152d4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80152b4:	68fb      	ldr	r3, [r7, #12]
 80152b6:	895b      	ldrh	r3, [r3, #10]
 80152b8:	2b13      	cmp	r3, #19
 80152ba:	d802      	bhi.n	80152c2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80152bc:	f06f 0301 	mvn.w	r3, #1
 80152c0:	e020      	b.n	8015304 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80152c2:	68fb      	ldr	r3, [r7, #12]
 80152c4:	685b      	ldr	r3, [r3, #4]
 80152c6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80152c8:	69fb      	ldr	r3, [r7, #28]
 80152ca:	691b      	ldr	r3, [r3, #16]
 80152cc:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80152ce:	f107 0314 	add.w	r3, r7, #20
 80152d2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80152d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152d6:	8c1b      	ldrh	r3, [r3, #32]
 80152d8:	2b00      	cmp	r3, #0
 80152da:	d00c      	beq.n	80152f6 <ip4_output_if_src+0x12e>
 80152dc:	68fb      	ldr	r3, [r7, #12]
 80152de:	891a      	ldrh	r2, [r3, #8]
 80152e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152e2:	8c1b      	ldrh	r3, [r3, #32]
 80152e4:	429a      	cmp	r2, r3
 80152e6:	d906      	bls.n	80152f6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80152e8:	687a      	ldr	r2, [r7, #4]
 80152ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80152ec:	68f8      	ldr	r0, [r7, #12]
 80152ee:	f000 fd4d 	bl	8015d8c <ip4_frag>
 80152f2:	4603      	mov	r3, r0
 80152f4:	e006      	b.n	8015304 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80152f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152f8:	695b      	ldr	r3, [r3, #20]
 80152fa:	687a      	ldr	r2, [r7, #4]
 80152fc:	68f9      	ldr	r1, [r7, #12]
 80152fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015300:	4798      	blx	r3
 8015302:	4603      	mov	r3, r0
}
 8015304:	4618      	mov	r0, r3
 8015306:	3720      	adds	r7, #32
 8015308:	46bd      	mov	sp, r7
 801530a:	bd80      	pop	{r7, pc}
 801530c:	0801a7a8 	.word	0x0801a7a8
 8015310:	0801a7dc 	.word	0x0801a7dc
 8015314:	0801a7e8 	.word	0x0801a7e8
 8015318:	0801a810 	.word	0x0801a810
 801531c:	20004376 	.word	0x20004376
 8015320:	0801ac6c 	.word	0x0801ac6c

08015324 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8015324:	b480      	push	{r7}
 8015326:	b085      	sub	sp, #20
 8015328:	af00      	add	r7, sp, #0
 801532a:	6078      	str	r0, [r7, #4]
 801532c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015338:	d002      	beq.n	8015340 <ip4_addr_isbroadcast_u32+0x1c>
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	2b00      	cmp	r3, #0
 801533e:	d101      	bne.n	8015344 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8015340:	2301      	movs	r3, #1
 8015342:	e02a      	b.n	801539a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8015344:	683b      	ldr	r3, [r7, #0]
 8015346:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801534a:	f003 0302 	and.w	r3, r3, #2
 801534e:	2b00      	cmp	r3, #0
 8015350:	d101      	bne.n	8015356 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8015352:	2300      	movs	r3, #0
 8015354:	e021      	b.n	801539a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8015356:	683b      	ldr	r3, [r7, #0]
 8015358:	3304      	adds	r3, #4
 801535a:	681b      	ldr	r3, [r3, #0]
 801535c:	687a      	ldr	r2, [r7, #4]
 801535e:	429a      	cmp	r2, r3
 8015360:	d101      	bne.n	8015366 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8015362:	2300      	movs	r3, #0
 8015364:	e019      	b.n	801539a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8015366:	68fa      	ldr	r2, [r7, #12]
 8015368:	683b      	ldr	r3, [r7, #0]
 801536a:	3304      	adds	r3, #4
 801536c:	681b      	ldr	r3, [r3, #0]
 801536e:	405a      	eors	r2, r3
 8015370:	683b      	ldr	r3, [r7, #0]
 8015372:	3308      	adds	r3, #8
 8015374:	681b      	ldr	r3, [r3, #0]
 8015376:	4013      	ands	r3, r2
 8015378:	2b00      	cmp	r3, #0
 801537a:	d10d      	bne.n	8015398 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801537c:	683b      	ldr	r3, [r7, #0]
 801537e:	3308      	adds	r3, #8
 8015380:	681b      	ldr	r3, [r3, #0]
 8015382:	43da      	mvns	r2, r3
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8015388:	683b      	ldr	r3, [r7, #0]
 801538a:	3308      	adds	r3, #8
 801538c:	681b      	ldr	r3, [r3, #0]
 801538e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015390:	429a      	cmp	r2, r3
 8015392:	d101      	bne.n	8015398 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8015394:	2301      	movs	r3, #1
 8015396:	e000      	b.n	801539a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8015398:	2300      	movs	r3, #0
  }
}
 801539a:	4618      	mov	r0, r3
 801539c:	3714      	adds	r7, #20
 801539e:	46bd      	mov	sp, r7
 80153a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153a4:	4770      	bx	lr
	...

080153a8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80153a8:	b580      	push	{r7, lr}
 80153aa:	b084      	sub	sp, #16
 80153ac:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80153ae:	2300      	movs	r3, #0
 80153b0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80153b2:	4b12      	ldr	r3, [pc, #72]	; (80153fc <ip_reass_tmr+0x54>)
 80153b4:	681b      	ldr	r3, [r3, #0]
 80153b6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80153b8:	e018      	b.n	80153ec <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80153ba:	68fb      	ldr	r3, [r7, #12]
 80153bc:	7fdb      	ldrb	r3, [r3, #31]
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d00b      	beq.n	80153da <ip_reass_tmr+0x32>
      r->timer--;
 80153c2:	68fb      	ldr	r3, [r7, #12]
 80153c4:	7fdb      	ldrb	r3, [r3, #31]
 80153c6:	3b01      	subs	r3, #1
 80153c8:	b2da      	uxtb	r2, r3
 80153ca:	68fb      	ldr	r3, [r7, #12]
 80153cc:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80153ce:	68fb      	ldr	r3, [r7, #12]
 80153d0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80153d2:	68fb      	ldr	r3, [r7, #12]
 80153d4:	681b      	ldr	r3, [r3, #0]
 80153d6:	60fb      	str	r3, [r7, #12]
 80153d8:	e008      	b.n	80153ec <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80153da:	68fb      	ldr	r3, [r7, #12]
 80153dc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80153de:	68fb      	ldr	r3, [r7, #12]
 80153e0:	681b      	ldr	r3, [r3, #0]
 80153e2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80153e4:	68b9      	ldr	r1, [r7, #8]
 80153e6:	6878      	ldr	r0, [r7, #4]
 80153e8:	f000 f80a 	bl	8015400 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80153ec:	68fb      	ldr	r3, [r7, #12]
 80153ee:	2b00      	cmp	r3, #0
 80153f0:	d1e3      	bne.n	80153ba <ip_reass_tmr+0x12>
    }
  }
}
 80153f2:	bf00      	nop
 80153f4:	bf00      	nop
 80153f6:	3710      	adds	r7, #16
 80153f8:	46bd      	mov	sp, r7
 80153fa:	bd80      	pop	{r7, pc}
 80153fc:	20004378 	.word	0x20004378

08015400 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015400:	b580      	push	{r7, lr}
 8015402:	b088      	sub	sp, #32
 8015404:	af00      	add	r7, sp, #0
 8015406:	6078      	str	r0, [r7, #4]
 8015408:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801540a:	2300      	movs	r3, #0
 801540c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801540e:	683a      	ldr	r2, [r7, #0]
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	429a      	cmp	r2, r3
 8015414:	d105      	bne.n	8015422 <ip_reass_free_complete_datagram+0x22>
 8015416:	4b45      	ldr	r3, [pc, #276]	; (801552c <ip_reass_free_complete_datagram+0x12c>)
 8015418:	22ab      	movs	r2, #171	; 0xab
 801541a:	4945      	ldr	r1, [pc, #276]	; (8015530 <ip_reass_free_complete_datagram+0x130>)
 801541c:	4845      	ldr	r0, [pc, #276]	; (8015534 <ip_reass_free_complete_datagram+0x134>)
 801541e:	f001 fd31 	bl	8016e84 <iprintf>
  if (prev != NULL) {
 8015422:	683b      	ldr	r3, [r7, #0]
 8015424:	2b00      	cmp	r3, #0
 8015426:	d00a      	beq.n	801543e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8015428:	683b      	ldr	r3, [r7, #0]
 801542a:	681b      	ldr	r3, [r3, #0]
 801542c:	687a      	ldr	r2, [r7, #4]
 801542e:	429a      	cmp	r2, r3
 8015430:	d005      	beq.n	801543e <ip_reass_free_complete_datagram+0x3e>
 8015432:	4b3e      	ldr	r3, [pc, #248]	; (801552c <ip_reass_free_complete_datagram+0x12c>)
 8015434:	22ad      	movs	r2, #173	; 0xad
 8015436:	4940      	ldr	r1, [pc, #256]	; (8015538 <ip_reass_free_complete_datagram+0x138>)
 8015438:	483e      	ldr	r0, [pc, #248]	; (8015534 <ip_reass_free_complete_datagram+0x134>)
 801543a:	f001 fd23 	bl	8016e84 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801543e:	687b      	ldr	r3, [r7, #4]
 8015440:	685b      	ldr	r3, [r3, #4]
 8015442:	685b      	ldr	r3, [r3, #4]
 8015444:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8015446:	697b      	ldr	r3, [r7, #20]
 8015448:	889b      	ldrh	r3, [r3, #4]
 801544a:	b29b      	uxth	r3, r3
 801544c:	2b00      	cmp	r3, #0
 801544e:	d12a      	bne.n	80154a6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8015450:	687b      	ldr	r3, [r7, #4]
 8015452:	685b      	ldr	r3, [r3, #4]
 8015454:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8015456:	697b      	ldr	r3, [r7, #20]
 8015458:	681a      	ldr	r2, [r3, #0]
 801545a:	687b      	ldr	r3, [r7, #4]
 801545c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801545e:	69bb      	ldr	r3, [r7, #24]
 8015460:	6858      	ldr	r0, [r3, #4]
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	3308      	adds	r3, #8
 8015466:	2214      	movs	r2, #20
 8015468:	4619      	mov	r1, r3
 801546a:	f001 fcf5 	bl	8016e58 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801546e:	2101      	movs	r1, #1
 8015470:	69b8      	ldr	r0, [r7, #24]
 8015472:	f7ff fc47 	bl	8014d04 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8015476:	69b8      	ldr	r0, [r7, #24]
 8015478:	f7f8 fd4c 	bl	800df14 <pbuf_clen>
 801547c:	4603      	mov	r3, r0
 801547e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015480:	8bfa      	ldrh	r2, [r7, #30]
 8015482:	8a7b      	ldrh	r3, [r7, #18]
 8015484:	4413      	add	r3, r2
 8015486:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801548a:	db05      	blt.n	8015498 <ip_reass_free_complete_datagram+0x98>
 801548c:	4b27      	ldr	r3, [pc, #156]	; (801552c <ip_reass_free_complete_datagram+0x12c>)
 801548e:	22bc      	movs	r2, #188	; 0xbc
 8015490:	492a      	ldr	r1, [pc, #168]	; (801553c <ip_reass_free_complete_datagram+0x13c>)
 8015492:	4828      	ldr	r0, [pc, #160]	; (8015534 <ip_reass_free_complete_datagram+0x134>)
 8015494:	f001 fcf6 	bl	8016e84 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015498:	8bfa      	ldrh	r2, [r7, #30]
 801549a:	8a7b      	ldrh	r3, [r7, #18]
 801549c:	4413      	add	r3, r2
 801549e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80154a0:	69b8      	ldr	r0, [r7, #24]
 80154a2:	f7f8 fca9 	bl	800ddf8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	685b      	ldr	r3, [r3, #4]
 80154aa:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80154ac:	e01f      	b.n	80154ee <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80154ae:	69bb      	ldr	r3, [r7, #24]
 80154b0:	685b      	ldr	r3, [r3, #4]
 80154b2:	617b      	str	r3, [r7, #20]
    pcur = p;
 80154b4:	69bb      	ldr	r3, [r7, #24]
 80154b6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80154b8:	697b      	ldr	r3, [r7, #20]
 80154ba:	681b      	ldr	r3, [r3, #0]
 80154bc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80154be:	68f8      	ldr	r0, [r7, #12]
 80154c0:	f7f8 fd28 	bl	800df14 <pbuf_clen>
 80154c4:	4603      	mov	r3, r0
 80154c6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80154c8:	8bfa      	ldrh	r2, [r7, #30]
 80154ca:	8a7b      	ldrh	r3, [r7, #18]
 80154cc:	4413      	add	r3, r2
 80154ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80154d2:	db05      	blt.n	80154e0 <ip_reass_free_complete_datagram+0xe0>
 80154d4:	4b15      	ldr	r3, [pc, #84]	; (801552c <ip_reass_free_complete_datagram+0x12c>)
 80154d6:	22cc      	movs	r2, #204	; 0xcc
 80154d8:	4918      	ldr	r1, [pc, #96]	; (801553c <ip_reass_free_complete_datagram+0x13c>)
 80154da:	4816      	ldr	r0, [pc, #88]	; (8015534 <ip_reass_free_complete_datagram+0x134>)
 80154dc:	f001 fcd2 	bl	8016e84 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80154e0:	8bfa      	ldrh	r2, [r7, #30]
 80154e2:	8a7b      	ldrh	r3, [r7, #18]
 80154e4:	4413      	add	r3, r2
 80154e6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80154e8:	68f8      	ldr	r0, [r7, #12]
 80154ea:	f7f8 fc85 	bl	800ddf8 <pbuf_free>
  while (p != NULL) {
 80154ee:	69bb      	ldr	r3, [r7, #24]
 80154f0:	2b00      	cmp	r3, #0
 80154f2:	d1dc      	bne.n	80154ae <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80154f4:	6839      	ldr	r1, [r7, #0]
 80154f6:	6878      	ldr	r0, [r7, #4]
 80154f8:	f000 f8c2 	bl	8015680 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80154fc:	4b10      	ldr	r3, [pc, #64]	; (8015540 <ip_reass_free_complete_datagram+0x140>)
 80154fe:	881b      	ldrh	r3, [r3, #0]
 8015500:	8bfa      	ldrh	r2, [r7, #30]
 8015502:	429a      	cmp	r2, r3
 8015504:	d905      	bls.n	8015512 <ip_reass_free_complete_datagram+0x112>
 8015506:	4b09      	ldr	r3, [pc, #36]	; (801552c <ip_reass_free_complete_datagram+0x12c>)
 8015508:	22d2      	movs	r2, #210	; 0xd2
 801550a:	490e      	ldr	r1, [pc, #56]	; (8015544 <ip_reass_free_complete_datagram+0x144>)
 801550c:	4809      	ldr	r0, [pc, #36]	; (8015534 <ip_reass_free_complete_datagram+0x134>)
 801550e:	f001 fcb9 	bl	8016e84 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8015512:	4b0b      	ldr	r3, [pc, #44]	; (8015540 <ip_reass_free_complete_datagram+0x140>)
 8015514:	881a      	ldrh	r2, [r3, #0]
 8015516:	8bfb      	ldrh	r3, [r7, #30]
 8015518:	1ad3      	subs	r3, r2, r3
 801551a:	b29a      	uxth	r2, r3
 801551c:	4b08      	ldr	r3, [pc, #32]	; (8015540 <ip_reass_free_complete_datagram+0x140>)
 801551e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8015520:	8bfb      	ldrh	r3, [r7, #30]
}
 8015522:	4618      	mov	r0, r3
 8015524:	3720      	adds	r7, #32
 8015526:	46bd      	mov	sp, r7
 8015528:	bd80      	pop	{r7, pc}
 801552a:	bf00      	nop
 801552c:	0801a840 	.word	0x0801a840
 8015530:	0801a87c 	.word	0x0801a87c
 8015534:	0801a888 	.word	0x0801a888
 8015538:	0801a8b0 	.word	0x0801a8b0
 801553c:	0801a8c4 	.word	0x0801a8c4
 8015540:	2000437c 	.word	0x2000437c
 8015544:	0801a8e4 	.word	0x0801a8e4

08015548 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8015548:	b580      	push	{r7, lr}
 801554a:	b08a      	sub	sp, #40	; 0x28
 801554c:	af00      	add	r7, sp, #0
 801554e:	6078      	str	r0, [r7, #4]
 8015550:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8015552:	2300      	movs	r3, #0
 8015554:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8015556:	2300      	movs	r3, #0
 8015558:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801555a:	2300      	movs	r3, #0
 801555c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801555e:	2300      	movs	r3, #0
 8015560:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8015562:	2300      	movs	r3, #0
 8015564:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8015566:	4b28      	ldr	r3, [pc, #160]	; (8015608 <ip_reass_remove_oldest_datagram+0xc0>)
 8015568:	681b      	ldr	r3, [r3, #0]
 801556a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801556c:	e030      	b.n	80155d0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801556e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015570:	695a      	ldr	r2, [r3, #20]
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	68db      	ldr	r3, [r3, #12]
 8015576:	429a      	cmp	r2, r3
 8015578:	d10c      	bne.n	8015594 <ip_reass_remove_oldest_datagram+0x4c>
 801557a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801557c:	699a      	ldr	r2, [r3, #24]
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	691b      	ldr	r3, [r3, #16]
 8015582:	429a      	cmp	r2, r3
 8015584:	d106      	bne.n	8015594 <ip_reass_remove_oldest_datagram+0x4c>
 8015586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015588:	899a      	ldrh	r2, [r3, #12]
 801558a:	687b      	ldr	r3, [r7, #4]
 801558c:	889b      	ldrh	r3, [r3, #4]
 801558e:	b29b      	uxth	r3, r3
 8015590:	429a      	cmp	r2, r3
 8015592:	d014      	beq.n	80155be <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8015594:	693b      	ldr	r3, [r7, #16]
 8015596:	3301      	adds	r3, #1
 8015598:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801559a:	6a3b      	ldr	r3, [r7, #32]
 801559c:	2b00      	cmp	r3, #0
 801559e:	d104      	bne.n	80155aa <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80155a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155a2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80155a4:	69fb      	ldr	r3, [r7, #28]
 80155a6:	61bb      	str	r3, [r7, #24]
 80155a8:	e009      	b.n	80155be <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80155aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155ac:	7fda      	ldrb	r2, [r3, #31]
 80155ae:	6a3b      	ldr	r3, [r7, #32]
 80155b0:	7fdb      	ldrb	r3, [r3, #31]
 80155b2:	429a      	cmp	r2, r3
 80155b4:	d803      	bhi.n	80155be <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80155b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155b8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80155ba:	69fb      	ldr	r3, [r7, #28]
 80155bc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80155be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155c0:	681b      	ldr	r3, [r3, #0]
 80155c2:	2b00      	cmp	r3, #0
 80155c4:	d001      	beq.n	80155ca <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80155c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155c8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80155ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155cc:	681b      	ldr	r3, [r3, #0]
 80155ce:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80155d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155d2:	2b00      	cmp	r3, #0
 80155d4:	d1cb      	bne.n	801556e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80155d6:	6a3b      	ldr	r3, [r7, #32]
 80155d8:	2b00      	cmp	r3, #0
 80155da:	d008      	beq.n	80155ee <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80155dc:	69b9      	ldr	r1, [r7, #24]
 80155de:	6a38      	ldr	r0, [r7, #32]
 80155e0:	f7ff ff0e 	bl	8015400 <ip_reass_free_complete_datagram>
 80155e4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80155e6:	697a      	ldr	r2, [r7, #20]
 80155e8:	68fb      	ldr	r3, [r7, #12]
 80155ea:	4413      	add	r3, r2
 80155ec:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80155ee:	697a      	ldr	r2, [r7, #20]
 80155f0:	683b      	ldr	r3, [r7, #0]
 80155f2:	429a      	cmp	r2, r3
 80155f4:	da02      	bge.n	80155fc <ip_reass_remove_oldest_datagram+0xb4>
 80155f6:	693b      	ldr	r3, [r7, #16]
 80155f8:	2b01      	cmp	r3, #1
 80155fa:	dcac      	bgt.n	8015556 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80155fc:	697b      	ldr	r3, [r7, #20]
}
 80155fe:	4618      	mov	r0, r3
 8015600:	3728      	adds	r7, #40	; 0x28
 8015602:	46bd      	mov	sp, r7
 8015604:	bd80      	pop	{r7, pc}
 8015606:	bf00      	nop
 8015608:	20004378 	.word	0x20004378

0801560c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801560c:	b580      	push	{r7, lr}
 801560e:	b084      	sub	sp, #16
 8015610:	af00      	add	r7, sp, #0
 8015612:	6078      	str	r0, [r7, #4]
 8015614:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015616:	2004      	movs	r0, #4
 8015618:	f7f7 fd70 	bl	800d0fc <memp_malloc>
 801561c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801561e:	68fb      	ldr	r3, [r7, #12]
 8015620:	2b00      	cmp	r3, #0
 8015622:	d110      	bne.n	8015646 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8015624:	6839      	ldr	r1, [r7, #0]
 8015626:	6878      	ldr	r0, [r7, #4]
 8015628:	f7ff ff8e 	bl	8015548 <ip_reass_remove_oldest_datagram>
 801562c:	4602      	mov	r2, r0
 801562e:	683b      	ldr	r3, [r7, #0]
 8015630:	4293      	cmp	r3, r2
 8015632:	dc03      	bgt.n	801563c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015634:	2004      	movs	r0, #4
 8015636:	f7f7 fd61 	bl	800d0fc <memp_malloc>
 801563a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801563c:	68fb      	ldr	r3, [r7, #12]
 801563e:	2b00      	cmp	r3, #0
 8015640:	d101      	bne.n	8015646 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8015642:	2300      	movs	r3, #0
 8015644:	e016      	b.n	8015674 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8015646:	2220      	movs	r2, #32
 8015648:	2100      	movs	r1, #0
 801564a:	68f8      	ldr	r0, [r7, #12]
 801564c:	f001 fc12 	bl	8016e74 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8015650:	68fb      	ldr	r3, [r7, #12]
 8015652:	220f      	movs	r2, #15
 8015654:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8015656:	4b09      	ldr	r3, [pc, #36]	; (801567c <ip_reass_enqueue_new_datagram+0x70>)
 8015658:	681a      	ldr	r2, [r3, #0]
 801565a:	68fb      	ldr	r3, [r7, #12]
 801565c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801565e:	4a07      	ldr	r2, [pc, #28]	; (801567c <ip_reass_enqueue_new_datagram+0x70>)
 8015660:	68fb      	ldr	r3, [r7, #12]
 8015662:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8015664:	68fb      	ldr	r3, [r7, #12]
 8015666:	3308      	adds	r3, #8
 8015668:	2214      	movs	r2, #20
 801566a:	6879      	ldr	r1, [r7, #4]
 801566c:	4618      	mov	r0, r3
 801566e:	f001 fbf3 	bl	8016e58 <memcpy>
  return ipr;
 8015672:	68fb      	ldr	r3, [r7, #12]
}
 8015674:	4618      	mov	r0, r3
 8015676:	3710      	adds	r7, #16
 8015678:	46bd      	mov	sp, r7
 801567a:	bd80      	pop	{r7, pc}
 801567c:	20004378 	.word	0x20004378

08015680 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015680:	b580      	push	{r7, lr}
 8015682:	b082      	sub	sp, #8
 8015684:	af00      	add	r7, sp, #0
 8015686:	6078      	str	r0, [r7, #4]
 8015688:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801568a:	4b10      	ldr	r3, [pc, #64]	; (80156cc <ip_reass_dequeue_datagram+0x4c>)
 801568c:	681b      	ldr	r3, [r3, #0]
 801568e:	687a      	ldr	r2, [r7, #4]
 8015690:	429a      	cmp	r2, r3
 8015692:	d104      	bne.n	801569e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	681b      	ldr	r3, [r3, #0]
 8015698:	4a0c      	ldr	r2, [pc, #48]	; (80156cc <ip_reass_dequeue_datagram+0x4c>)
 801569a:	6013      	str	r3, [r2, #0]
 801569c:	e00d      	b.n	80156ba <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801569e:	683b      	ldr	r3, [r7, #0]
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	d106      	bne.n	80156b2 <ip_reass_dequeue_datagram+0x32>
 80156a4:	4b0a      	ldr	r3, [pc, #40]	; (80156d0 <ip_reass_dequeue_datagram+0x50>)
 80156a6:	f240 1245 	movw	r2, #325	; 0x145
 80156aa:	490a      	ldr	r1, [pc, #40]	; (80156d4 <ip_reass_dequeue_datagram+0x54>)
 80156ac:	480a      	ldr	r0, [pc, #40]	; (80156d8 <ip_reass_dequeue_datagram+0x58>)
 80156ae:	f001 fbe9 	bl	8016e84 <iprintf>
    prev->next = ipr->next;
 80156b2:	687b      	ldr	r3, [r7, #4]
 80156b4:	681a      	ldr	r2, [r3, #0]
 80156b6:	683b      	ldr	r3, [r7, #0]
 80156b8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80156ba:	6879      	ldr	r1, [r7, #4]
 80156bc:	2004      	movs	r0, #4
 80156be:	f7f7 fd6f 	bl	800d1a0 <memp_free>
}
 80156c2:	bf00      	nop
 80156c4:	3708      	adds	r7, #8
 80156c6:	46bd      	mov	sp, r7
 80156c8:	bd80      	pop	{r7, pc}
 80156ca:	bf00      	nop
 80156cc:	20004378 	.word	0x20004378
 80156d0:	0801a840 	.word	0x0801a840
 80156d4:	0801a908 	.word	0x0801a908
 80156d8:	0801a888 	.word	0x0801a888

080156dc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80156dc:	b580      	push	{r7, lr}
 80156de:	b08c      	sub	sp, #48	; 0x30
 80156e0:	af00      	add	r7, sp, #0
 80156e2:	60f8      	str	r0, [r7, #12]
 80156e4:	60b9      	str	r1, [r7, #8]
 80156e6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80156e8:	2300      	movs	r3, #0
 80156ea:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80156ec:	2301      	movs	r3, #1
 80156ee:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80156f0:	68bb      	ldr	r3, [r7, #8]
 80156f2:	685b      	ldr	r3, [r3, #4]
 80156f4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80156f6:	69fb      	ldr	r3, [r7, #28]
 80156f8:	885b      	ldrh	r3, [r3, #2]
 80156fa:	b29b      	uxth	r3, r3
 80156fc:	4618      	mov	r0, r3
 80156fe:	f7f7 f847 	bl	800c790 <lwip_htons>
 8015702:	4603      	mov	r3, r0
 8015704:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8015706:	69fb      	ldr	r3, [r7, #28]
 8015708:	781b      	ldrb	r3, [r3, #0]
 801570a:	f003 030f 	and.w	r3, r3, #15
 801570e:	b2db      	uxtb	r3, r3
 8015710:	009b      	lsls	r3, r3, #2
 8015712:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8015714:	7e7b      	ldrb	r3, [r7, #25]
 8015716:	b29b      	uxth	r3, r3
 8015718:	8b7a      	ldrh	r2, [r7, #26]
 801571a:	429a      	cmp	r2, r3
 801571c:	d202      	bcs.n	8015724 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801571e:	f04f 33ff 	mov.w	r3, #4294967295
 8015722:	e135      	b.n	8015990 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8015724:	7e7b      	ldrb	r3, [r7, #25]
 8015726:	b29b      	uxth	r3, r3
 8015728:	8b7a      	ldrh	r2, [r7, #26]
 801572a:	1ad3      	subs	r3, r2, r3
 801572c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801572e:	69fb      	ldr	r3, [r7, #28]
 8015730:	88db      	ldrh	r3, [r3, #6]
 8015732:	b29b      	uxth	r3, r3
 8015734:	4618      	mov	r0, r3
 8015736:	f7f7 f82b 	bl	800c790 <lwip_htons>
 801573a:	4603      	mov	r3, r0
 801573c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015740:	b29b      	uxth	r3, r3
 8015742:	00db      	lsls	r3, r3, #3
 8015744:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8015746:	68bb      	ldr	r3, [r7, #8]
 8015748:	685b      	ldr	r3, [r3, #4]
 801574a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801574c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801574e:	2200      	movs	r2, #0
 8015750:	701a      	strb	r2, [r3, #0]
 8015752:	2200      	movs	r2, #0
 8015754:	705a      	strb	r2, [r3, #1]
 8015756:	2200      	movs	r2, #0
 8015758:	709a      	strb	r2, [r3, #2]
 801575a:	2200      	movs	r2, #0
 801575c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801575e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015760:	8afa      	ldrh	r2, [r7, #22]
 8015762:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8015764:	8afa      	ldrh	r2, [r7, #22]
 8015766:	8b7b      	ldrh	r3, [r7, #26]
 8015768:	4413      	add	r3, r2
 801576a:	b29a      	uxth	r2, r3
 801576c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801576e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8015770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015772:	88db      	ldrh	r3, [r3, #6]
 8015774:	b29b      	uxth	r3, r3
 8015776:	8afa      	ldrh	r2, [r7, #22]
 8015778:	429a      	cmp	r2, r3
 801577a:	d902      	bls.n	8015782 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801577c:	f04f 33ff 	mov.w	r3, #4294967295
 8015780:	e106      	b.n	8015990 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8015782:	68fb      	ldr	r3, [r7, #12]
 8015784:	685b      	ldr	r3, [r3, #4]
 8015786:	627b      	str	r3, [r7, #36]	; 0x24
 8015788:	e068      	b.n	801585c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801578a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801578c:	685b      	ldr	r3, [r3, #4]
 801578e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8015790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015792:	889b      	ldrh	r3, [r3, #4]
 8015794:	b29a      	uxth	r2, r3
 8015796:	693b      	ldr	r3, [r7, #16]
 8015798:	889b      	ldrh	r3, [r3, #4]
 801579a:	b29b      	uxth	r3, r3
 801579c:	429a      	cmp	r2, r3
 801579e:	d235      	bcs.n	801580c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80157a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80157a4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80157a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	d020      	beq.n	80157ee <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80157ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157ae:	889b      	ldrh	r3, [r3, #4]
 80157b0:	b29a      	uxth	r2, r3
 80157b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157b4:	88db      	ldrh	r3, [r3, #6]
 80157b6:	b29b      	uxth	r3, r3
 80157b8:	429a      	cmp	r2, r3
 80157ba:	d307      	bcc.n	80157cc <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80157bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157be:	88db      	ldrh	r3, [r3, #6]
 80157c0:	b29a      	uxth	r2, r3
 80157c2:	693b      	ldr	r3, [r7, #16]
 80157c4:	889b      	ldrh	r3, [r3, #4]
 80157c6:	b29b      	uxth	r3, r3
 80157c8:	429a      	cmp	r2, r3
 80157ca:	d902      	bls.n	80157d2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80157cc:	f04f 33ff 	mov.w	r3, #4294967295
 80157d0:	e0de      	b.n	8015990 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80157d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157d4:	68ba      	ldr	r2, [r7, #8]
 80157d6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80157d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157da:	88db      	ldrh	r3, [r3, #6]
 80157dc:	b29a      	uxth	r2, r3
 80157de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157e0:	889b      	ldrh	r3, [r3, #4]
 80157e2:	b29b      	uxth	r3, r3
 80157e4:	429a      	cmp	r2, r3
 80157e6:	d03d      	beq.n	8015864 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80157e8:	2300      	movs	r3, #0
 80157ea:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80157ec:	e03a      	b.n	8015864 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80157ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157f0:	88db      	ldrh	r3, [r3, #6]
 80157f2:	b29a      	uxth	r2, r3
 80157f4:	693b      	ldr	r3, [r7, #16]
 80157f6:	889b      	ldrh	r3, [r3, #4]
 80157f8:	b29b      	uxth	r3, r3
 80157fa:	429a      	cmp	r2, r3
 80157fc:	d902      	bls.n	8015804 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80157fe:	f04f 33ff 	mov.w	r3, #4294967295
 8015802:	e0c5      	b.n	8015990 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8015804:	68fb      	ldr	r3, [r7, #12]
 8015806:	68ba      	ldr	r2, [r7, #8]
 8015808:	605a      	str	r2, [r3, #4]
      break;
 801580a:	e02b      	b.n	8015864 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801580c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801580e:	889b      	ldrh	r3, [r3, #4]
 8015810:	b29a      	uxth	r2, r3
 8015812:	693b      	ldr	r3, [r7, #16]
 8015814:	889b      	ldrh	r3, [r3, #4]
 8015816:	b29b      	uxth	r3, r3
 8015818:	429a      	cmp	r2, r3
 801581a:	d102      	bne.n	8015822 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801581c:	f04f 33ff 	mov.w	r3, #4294967295
 8015820:	e0b6      	b.n	8015990 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8015822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015824:	889b      	ldrh	r3, [r3, #4]
 8015826:	b29a      	uxth	r2, r3
 8015828:	693b      	ldr	r3, [r7, #16]
 801582a:	88db      	ldrh	r3, [r3, #6]
 801582c:	b29b      	uxth	r3, r3
 801582e:	429a      	cmp	r2, r3
 8015830:	d202      	bcs.n	8015838 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015832:	f04f 33ff 	mov.w	r3, #4294967295
 8015836:	e0ab      	b.n	8015990 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8015838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801583a:	2b00      	cmp	r3, #0
 801583c:	d009      	beq.n	8015852 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801583e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015840:	88db      	ldrh	r3, [r3, #6]
 8015842:	b29a      	uxth	r2, r3
 8015844:	693b      	ldr	r3, [r7, #16]
 8015846:	889b      	ldrh	r3, [r3, #4]
 8015848:	b29b      	uxth	r3, r3
 801584a:	429a      	cmp	r2, r3
 801584c:	d001      	beq.n	8015852 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801584e:	2300      	movs	r3, #0
 8015850:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8015852:	693b      	ldr	r3, [r7, #16]
 8015854:	681b      	ldr	r3, [r3, #0]
 8015856:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8015858:	693b      	ldr	r3, [r7, #16]
 801585a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801585c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801585e:	2b00      	cmp	r3, #0
 8015860:	d193      	bne.n	801578a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8015862:	e000      	b.n	8015866 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8015864:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8015866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015868:	2b00      	cmp	r3, #0
 801586a:	d12d      	bne.n	80158c8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801586c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801586e:	2b00      	cmp	r3, #0
 8015870:	d01c      	beq.n	80158ac <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8015872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015874:	88db      	ldrh	r3, [r3, #6]
 8015876:	b29a      	uxth	r2, r3
 8015878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801587a:	889b      	ldrh	r3, [r3, #4]
 801587c:	b29b      	uxth	r3, r3
 801587e:	429a      	cmp	r2, r3
 8015880:	d906      	bls.n	8015890 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8015882:	4b45      	ldr	r3, [pc, #276]	; (8015998 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015884:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8015888:	4944      	ldr	r1, [pc, #272]	; (801599c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801588a:	4845      	ldr	r0, [pc, #276]	; (80159a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801588c:	f001 fafa 	bl	8016e84 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8015890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015892:	68ba      	ldr	r2, [r7, #8]
 8015894:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8015896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015898:	88db      	ldrh	r3, [r3, #6]
 801589a:	b29a      	uxth	r2, r3
 801589c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801589e:	889b      	ldrh	r3, [r3, #4]
 80158a0:	b29b      	uxth	r3, r3
 80158a2:	429a      	cmp	r2, r3
 80158a4:	d010      	beq.n	80158c8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80158a6:	2300      	movs	r3, #0
 80158a8:	623b      	str	r3, [r7, #32]
 80158aa:	e00d      	b.n	80158c8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80158ac:	68fb      	ldr	r3, [r7, #12]
 80158ae:	685b      	ldr	r3, [r3, #4]
 80158b0:	2b00      	cmp	r3, #0
 80158b2:	d006      	beq.n	80158c2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80158b4:	4b38      	ldr	r3, [pc, #224]	; (8015998 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80158b6:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80158ba:	493a      	ldr	r1, [pc, #232]	; (80159a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80158bc:	4838      	ldr	r0, [pc, #224]	; (80159a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80158be:	f001 fae1 	bl	8016e84 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80158c2:	68fb      	ldr	r3, [r7, #12]
 80158c4:	68ba      	ldr	r2, [r7, #8]
 80158c6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	2b00      	cmp	r3, #0
 80158cc:	d105      	bne.n	80158da <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80158ce:	68fb      	ldr	r3, [r7, #12]
 80158d0:	7f9b      	ldrb	r3, [r3, #30]
 80158d2:	f003 0301 	and.w	r3, r3, #1
 80158d6:	2b00      	cmp	r3, #0
 80158d8:	d059      	beq.n	801598e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80158da:	6a3b      	ldr	r3, [r7, #32]
 80158dc:	2b00      	cmp	r3, #0
 80158de:	d04f      	beq.n	8015980 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80158e0:	68fb      	ldr	r3, [r7, #12]
 80158e2:	685b      	ldr	r3, [r3, #4]
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	d006      	beq.n	80158f6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80158e8:	68fb      	ldr	r3, [r7, #12]
 80158ea:	685b      	ldr	r3, [r3, #4]
 80158ec:	685b      	ldr	r3, [r3, #4]
 80158ee:	889b      	ldrh	r3, [r3, #4]
 80158f0:	b29b      	uxth	r3, r3
 80158f2:	2b00      	cmp	r3, #0
 80158f4:	d002      	beq.n	80158fc <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80158f6:	2300      	movs	r3, #0
 80158f8:	623b      	str	r3, [r7, #32]
 80158fa:	e041      	b.n	8015980 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80158fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158fe:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8015900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015902:	681b      	ldr	r3, [r3, #0]
 8015904:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015906:	e012      	b.n	801592e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8015908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801590a:	685b      	ldr	r3, [r3, #4]
 801590c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801590e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015910:	88db      	ldrh	r3, [r3, #6]
 8015912:	b29a      	uxth	r2, r3
 8015914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015916:	889b      	ldrh	r3, [r3, #4]
 8015918:	b29b      	uxth	r3, r3
 801591a:	429a      	cmp	r2, r3
 801591c:	d002      	beq.n	8015924 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801591e:	2300      	movs	r3, #0
 8015920:	623b      	str	r3, [r7, #32]
            break;
 8015922:	e007      	b.n	8015934 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8015924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015926:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8015928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801592a:	681b      	ldr	r3, [r3, #0]
 801592c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801592e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015930:	2b00      	cmp	r3, #0
 8015932:	d1e9      	bne.n	8015908 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8015934:	6a3b      	ldr	r3, [r7, #32]
 8015936:	2b00      	cmp	r3, #0
 8015938:	d022      	beq.n	8015980 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801593a:	68fb      	ldr	r3, [r7, #12]
 801593c:	685b      	ldr	r3, [r3, #4]
 801593e:	2b00      	cmp	r3, #0
 8015940:	d106      	bne.n	8015950 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8015942:	4b15      	ldr	r3, [pc, #84]	; (8015998 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015944:	f240 12df 	movw	r2, #479	; 0x1df
 8015948:	4917      	ldr	r1, [pc, #92]	; (80159a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801594a:	4815      	ldr	r0, [pc, #84]	; (80159a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801594c:	f001 fa9a 	bl	8016e84 <iprintf>
          LWIP_ASSERT("sanity check",
 8015950:	68fb      	ldr	r3, [r7, #12]
 8015952:	685b      	ldr	r3, [r3, #4]
 8015954:	685b      	ldr	r3, [r3, #4]
 8015956:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015958:	429a      	cmp	r2, r3
 801595a:	d106      	bne.n	801596a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801595c:	4b0e      	ldr	r3, [pc, #56]	; (8015998 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801595e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8015962:	4911      	ldr	r1, [pc, #68]	; (80159a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015964:	480e      	ldr	r0, [pc, #56]	; (80159a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015966:	f001 fa8d 	bl	8016e84 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801596a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801596c:	681b      	ldr	r3, [r3, #0]
 801596e:	2b00      	cmp	r3, #0
 8015970:	d006      	beq.n	8015980 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8015972:	4b09      	ldr	r3, [pc, #36]	; (8015998 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015974:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8015978:	490c      	ldr	r1, [pc, #48]	; (80159ac <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801597a:	4809      	ldr	r0, [pc, #36]	; (80159a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801597c:	f001 fa82 	bl	8016e84 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8015980:	6a3b      	ldr	r3, [r7, #32]
 8015982:	2b00      	cmp	r3, #0
 8015984:	bf14      	ite	ne
 8015986:	2301      	movne	r3, #1
 8015988:	2300      	moveq	r3, #0
 801598a:	b2db      	uxtb	r3, r3
 801598c:	e000      	b.n	8015990 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801598e:	2300      	movs	r3, #0
}
 8015990:	4618      	mov	r0, r3
 8015992:	3730      	adds	r7, #48	; 0x30
 8015994:	46bd      	mov	sp, r7
 8015996:	bd80      	pop	{r7, pc}
 8015998:	0801a840 	.word	0x0801a840
 801599c:	0801a924 	.word	0x0801a924
 80159a0:	0801a888 	.word	0x0801a888
 80159a4:	0801a944 	.word	0x0801a944
 80159a8:	0801a97c 	.word	0x0801a97c
 80159ac:	0801a98c 	.word	0x0801a98c

080159b0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80159b0:	b580      	push	{r7, lr}
 80159b2:	b08e      	sub	sp, #56	; 0x38
 80159b4:	af00      	add	r7, sp, #0
 80159b6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	685b      	ldr	r3, [r3, #4]
 80159bc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80159be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159c0:	781b      	ldrb	r3, [r3, #0]
 80159c2:	f003 030f 	and.w	r3, r3, #15
 80159c6:	b2db      	uxtb	r3, r3
 80159c8:	009b      	lsls	r3, r3, #2
 80159ca:	b2db      	uxtb	r3, r3
 80159cc:	2b14      	cmp	r3, #20
 80159ce:	f040 8167 	bne.w	8015ca0 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80159d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159d4:	88db      	ldrh	r3, [r3, #6]
 80159d6:	b29b      	uxth	r3, r3
 80159d8:	4618      	mov	r0, r3
 80159da:	f7f6 fed9 	bl	800c790 <lwip_htons>
 80159de:	4603      	mov	r3, r0
 80159e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80159e4:	b29b      	uxth	r3, r3
 80159e6:	00db      	lsls	r3, r3, #3
 80159e8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80159ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159ec:	885b      	ldrh	r3, [r3, #2]
 80159ee:	b29b      	uxth	r3, r3
 80159f0:	4618      	mov	r0, r3
 80159f2:	f7f6 fecd 	bl	800c790 <lwip_htons>
 80159f6:	4603      	mov	r3, r0
 80159f8:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80159fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159fc:	781b      	ldrb	r3, [r3, #0]
 80159fe:	f003 030f 	and.w	r3, r3, #15
 8015a02:	b2db      	uxtb	r3, r3
 8015a04:	009b      	lsls	r3, r3, #2
 8015a06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8015a0a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015a0e:	b29b      	uxth	r3, r3
 8015a10:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015a12:	429a      	cmp	r2, r3
 8015a14:	f0c0 8146 	bcc.w	8015ca4 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8015a18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015a1c:	b29b      	uxth	r3, r3
 8015a1e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015a20:	1ad3      	subs	r3, r2, r3
 8015a22:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8015a24:	6878      	ldr	r0, [r7, #4]
 8015a26:	f7f8 fa75 	bl	800df14 <pbuf_clen>
 8015a2a:	4603      	mov	r3, r0
 8015a2c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8015a2e:	4b9f      	ldr	r3, [pc, #636]	; (8015cac <ip4_reass+0x2fc>)
 8015a30:	881b      	ldrh	r3, [r3, #0]
 8015a32:	461a      	mov	r2, r3
 8015a34:	8c3b      	ldrh	r3, [r7, #32]
 8015a36:	4413      	add	r3, r2
 8015a38:	2b0a      	cmp	r3, #10
 8015a3a:	dd10      	ble.n	8015a5e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015a3c:	8c3b      	ldrh	r3, [r7, #32]
 8015a3e:	4619      	mov	r1, r3
 8015a40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015a42:	f7ff fd81 	bl	8015548 <ip_reass_remove_oldest_datagram>
 8015a46:	4603      	mov	r3, r0
 8015a48:	2b00      	cmp	r3, #0
 8015a4a:	f000 812d 	beq.w	8015ca8 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8015a4e:	4b97      	ldr	r3, [pc, #604]	; (8015cac <ip4_reass+0x2fc>)
 8015a50:	881b      	ldrh	r3, [r3, #0]
 8015a52:	461a      	mov	r2, r3
 8015a54:	8c3b      	ldrh	r3, [r7, #32]
 8015a56:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015a58:	2b0a      	cmp	r3, #10
 8015a5a:	f300 8125 	bgt.w	8015ca8 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015a5e:	4b94      	ldr	r3, [pc, #592]	; (8015cb0 <ip4_reass+0x300>)
 8015a60:	681b      	ldr	r3, [r3, #0]
 8015a62:	633b      	str	r3, [r7, #48]	; 0x30
 8015a64:	e015      	b.n	8015a92 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8015a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a68:	695a      	ldr	r2, [r3, #20]
 8015a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a6c:	68db      	ldr	r3, [r3, #12]
 8015a6e:	429a      	cmp	r2, r3
 8015a70:	d10c      	bne.n	8015a8c <ip4_reass+0xdc>
 8015a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a74:	699a      	ldr	r2, [r3, #24]
 8015a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a78:	691b      	ldr	r3, [r3, #16]
 8015a7a:	429a      	cmp	r2, r3
 8015a7c:	d106      	bne.n	8015a8c <ip4_reass+0xdc>
 8015a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a80:	899a      	ldrh	r2, [r3, #12]
 8015a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a84:	889b      	ldrh	r3, [r3, #4]
 8015a86:	b29b      	uxth	r3, r3
 8015a88:	429a      	cmp	r2, r3
 8015a8a:	d006      	beq.n	8015a9a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a8e:	681b      	ldr	r3, [r3, #0]
 8015a90:	633b      	str	r3, [r7, #48]	; 0x30
 8015a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a94:	2b00      	cmp	r3, #0
 8015a96:	d1e6      	bne.n	8015a66 <ip4_reass+0xb6>
 8015a98:	e000      	b.n	8015a9c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8015a9a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8015a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a9e:	2b00      	cmp	r3, #0
 8015aa0:	d109      	bne.n	8015ab6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8015aa2:	8c3b      	ldrh	r3, [r7, #32]
 8015aa4:	4619      	mov	r1, r3
 8015aa6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015aa8:	f7ff fdb0 	bl	801560c <ip_reass_enqueue_new_datagram>
 8015aac:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8015aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ab0:	2b00      	cmp	r3, #0
 8015ab2:	d11c      	bne.n	8015aee <ip4_reass+0x13e>
      goto nullreturn;
 8015ab4:	e109      	b.n	8015cca <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ab8:	88db      	ldrh	r3, [r3, #6]
 8015aba:	b29b      	uxth	r3, r3
 8015abc:	4618      	mov	r0, r3
 8015abe:	f7f6 fe67 	bl	800c790 <lwip_htons>
 8015ac2:	4603      	mov	r3, r0
 8015ac4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015ac8:	2b00      	cmp	r3, #0
 8015aca:	d110      	bne.n	8015aee <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8015acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ace:	89db      	ldrh	r3, [r3, #14]
 8015ad0:	4618      	mov	r0, r3
 8015ad2:	f7f6 fe5d 	bl	800c790 <lwip_htons>
 8015ad6:	4603      	mov	r3, r0
 8015ad8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015adc:	2b00      	cmp	r3, #0
 8015ade:	d006      	beq.n	8015aee <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8015ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ae2:	3308      	adds	r3, #8
 8015ae4:	2214      	movs	r2, #20
 8015ae6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015ae8:	4618      	mov	r0, r3
 8015aea:	f001 f9b5 	bl	8016e58 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8015aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015af0:	88db      	ldrh	r3, [r3, #6]
 8015af2:	b29b      	uxth	r3, r3
 8015af4:	f003 0320 	and.w	r3, r3, #32
 8015af8:	2b00      	cmp	r3, #0
 8015afa:	bf0c      	ite	eq
 8015afc:	2301      	moveq	r3, #1
 8015afe:	2300      	movne	r3, #0
 8015b00:	b2db      	uxtb	r3, r3
 8015b02:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8015b04:	69fb      	ldr	r3, [r7, #28]
 8015b06:	2b00      	cmp	r3, #0
 8015b08:	d00e      	beq.n	8015b28 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8015b0a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015b0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015b0e:	4413      	add	r3, r2
 8015b10:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8015b12:	8b7a      	ldrh	r2, [r7, #26]
 8015b14:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015b16:	429a      	cmp	r2, r3
 8015b18:	f0c0 80a0 	bcc.w	8015c5c <ip4_reass+0x2ac>
 8015b1c:	8b7b      	ldrh	r3, [r7, #26]
 8015b1e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8015b22:	4293      	cmp	r3, r2
 8015b24:	f200 809a 	bhi.w	8015c5c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8015b28:	69fa      	ldr	r2, [r7, #28]
 8015b2a:	6879      	ldr	r1, [r7, #4]
 8015b2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015b2e:	f7ff fdd5 	bl	80156dc <ip_reass_chain_frag_into_datagram_and_validate>
 8015b32:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8015b34:	697b      	ldr	r3, [r7, #20]
 8015b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b3a:	f000 8091 	beq.w	8015c60 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8015b3e:	4b5b      	ldr	r3, [pc, #364]	; (8015cac <ip4_reass+0x2fc>)
 8015b40:	881a      	ldrh	r2, [r3, #0]
 8015b42:	8c3b      	ldrh	r3, [r7, #32]
 8015b44:	4413      	add	r3, r2
 8015b46:	b29a      	uxth	r2, r3
 8015b48:	4b58      	ldr	r3, [pc, #352]	; (8015cac <ip4_reass+0x2fc>)
 8015b4a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8015b4c:	69fb      	ldr	r3, [r7, #28]
 8015b4e:	2b00      	cmp	r3, #0
 8015b50:	d00d      	beq.n	8015b6e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8015b52:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015b54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015b56:	4413      	add	r3, r2
 8015b58:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8015b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b5c:	8a7a      	ldrh	r2, [r7, #18]
 8015b5e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8015b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b62:	7f9b      	ldrb	r3, [r3, #30]
 8015b64:	f043 0301 	orr.w	r3, r3, #1
 8015b68:	b2da      	uxtb	r2, r3
 8015b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b6c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8015b6e:	697b      	ldr	r3, [r7, #20]
 8015b70:	2b01      	cmp	r3, #1
 8015b72:	d171      	bne.n	8015c58 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8015b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b76:	8b9b      	ldrh	r3, [r3, #28]
 8015b78:	3314      	adds	r3, #20
 8015b7a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8015b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b7e:	685b      	ldr	r3, [r3, #4]
 8015b80:	685b      	ldr	r3, [r3, #4]
 8015b82:	681b      	ldr	r3, [r3, #0]
 8015b84:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8015b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b88:	685b      	ldr	r3, [r3, #4]
 8015b8a:	685b      	ldr	r3, [r3, #4]
 8015b8c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8015b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b90:	3308      	adds	r3, #8
 8015b92:	2214      	movs	r2, #20
 8015b94:	4619      	mov	r1, r3
 8015b96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015b98:	f001 f95e 	bl	8016e58 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8015b9c:	8a3b      	ldrh	r3, [r7, #16]
 8015b9e:	4618      	mov	r0, r3
 8015ba0:	f7f6 fdf6 	bl	800c790 <lwip_htons>
 8015ba4:	4603      	mov	r3, r0
 8015ba6:	461a      	mov	r2, r3
 8015ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015baa:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8015bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bae:	2200      	movs	r2, #0
 8015bb0:	719a      	strb	r2, [r3, #6]
 8015bb2:	2200      	movs	r2, #0
 8015bb4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8015bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bb8:	2200      	movs	r2, #0
 8015bba:	729a      	strb	r2, [r3, #10]
 8015bbc:	2200      	movs	r2, #0
 8015bbe:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8015bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bc2:	685b      	ldr	r3, [r3, #4]
 8015bc4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8015bc6:	e00d      	b.n	8015be4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8015bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015bca:	685b      	ldr	r3, [r3, #4]
 8015bcc:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8015bce:	2114      	movs	r1, #20
 8015bd0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8015bd2:	f7f8 f88b 	bl	800dcec <pbuf_remove_header>
      pbuf_cat(p, r);
 8015bd6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015bd8:	6878      	ldr	r0, [r7, #4]
 8015bda:	f7f8 f9db 	bl	800df94 <pbuf_cat>
      r = iprh->next_pbuf;
 8015bde:	68fb      	ldr	r3, [r7, #12]
 8015be0:	681b      	ldr	r3, [r3, #0]
 8015be2:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8015be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	d1ee      	bne.n	8015bc8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8015bea:	4b31      	ldr	r3, [pc, #196]	; (8015cb0 <ip4_reass+0x300>)
 8015bec:	681b      	ldr	r3, [r3, #0]
 8015bee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015bf0:	429a      	cmp	r2, r3
 8015bf2:	d102      	bne.n	8015bfa <ip4_reass+0x24a>
      ipr_prev = NULL;
 8015bf4:	2300      	movs	r3, #0
 8015bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015bf8:	e010      	b.n	8015c1c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015bfa:	4b2d      	ldr	r3, [pc, #180]	; (8015cb0 <ip4_reass+0x300>)
 8015bfc:	681b      	ldr	r3, [r3, #0]
 8015bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015c00:	e007      	b.n	8015c12 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8015c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c04:	681b      	ldr	r3, [r3, #0]
 8015c06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015c08:	429a      	cmp	r2, r3
 8015c0a:	d006      	beq.n	8015c1a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c0e:	681b      	ldr	r3, [r3, #0]
 8015c10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c14:	2b00      	cmp	r3, #0
 8015c16:	d1f4      	bne.n	8015c02 <ip4_reass+0x252>
 8015c18:	e000      	b.n	8015c1c <ip4_reass+0x26c>
          break;
 8015c1a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8015c1c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015c1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015c20:	f7ff fd2e 	bl	8015680 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8015c24:	6878      	ldr	r0, [r7, #4]
 8015c26:	f7f8 f975 	bl	800df14 <pbuf_clen>
 8015c2a:	4603      	mov	r3, r0
 8015c2c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8015c2e:	4b1f      	ldr	r3, [pc, #124]	; (8015cac <ip4_reass+0x2fc>)
 8015c30:	881b      	ldrh	r3, [r3, #0]
 8015c32:	8c3a      	ldrh	r2, [r7, #32]
 8015c34:	429a      	cmp	r2, r3
 8015c36:	d906      	bls.n	8015c46 <ip4_reass+0x296>
 8015c38:	4b1e      	ldr	r3, [pc, #120]	; (8015cb4 <ip4_reass+0x304>)
 8015c3a:	f240 229b 	movw	r2, #667	; 0x29b
 8015c3e:	491e      	ldr	r1, [pc, #120]	; (8015cb8 <ip4_reass+0x308>)
 8015c40:	481e      	ldr	r0, [pc, #120]	; (8015cbc <ip4_reass+0x30c>)
 8015c42:	f001 f91f 	bl	8016e84 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8015c46:	4b19      	ldr	r3, [pc, #100]	; (8015cac <ip4_reass+0x2fc>)
 8015c48:	881a      	ldrh	r2, [r3, #0]
 8015c4a:	8c3b      	ldrh	r3, [r7, #32]
 8015c4c:	1ad3      	subs	r3, r2, r3
 8015c4e:	b29a      	uxth	r2, r3
 8015c50:	4b16      	ldr	r3, [pc, #88]	; (8015cac <ip4_reass+0x2fc>)
 8015c52:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	e03c      	b.n	8015cd2 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8015c58:	2300      	movs	r3, #0
 8015c5a:	e03a      	b.n	8015cd2 <ip4_reass+0x322>
      goto nullreturn_ipr;
 8015c5c:	bf00      	nop
 8015c5e:	e000      	b.n	8015c62 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8015c60:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8015c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c64:	2b00      	cmp	r3, #0
 8015c66:	d106      	bne.n	8015c76 <ip4_reass+0x2c6>
 8015c68:	4b12      	ldr	r3, [pc, #72]	; (8015cb4 <ip4_reass+0x304>)
 8015c6a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8015c6e:	4914      	ldr	r1, [pc, #80]	; (8015cc0 <ip4_reass+0x310>)
 8015c70:	4812      	ldr	r0, [pc, #72]	; (8015cbc <ip4_reass+0x30c>)
 8015c72:	f001 f907 	bl	8016e84 <iprintf>
  if (ipr->p == NULL) {
 8015c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c78:	685b      	ldr	r3, [r3, #4]
 8015c7a:	2b00      	cmp	r3, #0
 8015c7c:	d124      	bne.n	8015cc8 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8015c7e:	4b0c      	ldr	r3, [pc, #48]	; (8015cb0 <ip4_reass+0x300>)
 8015c80:	681b      	ldr	r3, [r3, #0]
 8015c82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015c84:	429a      	cmp	r2, r3
 8015c86:	d006      	beq.n	8015c96 <ip4_reass+0x2e6>
 8015c88:	4b0a      	ldr	r3, [pc, #40]	; (8015cb4 <ip4_reass+0x304>)
 8015c8a:	f240 22ab 	movw	r2, #683	; 0x2ab
 8015c8e:	490d      	ldr	r1, [pc, #52]	; (8015cc4 <ip4_reass+0x314>)
 8015c90:	480a      	ldr	r0, [pc, #40]	; (8015cbc <ip4_reass+0x30c>)
 8015c92:	f001 f8f7 	bl	8016e84 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8015c96:	2100      	movs	r1, #0
 8015c98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015c9a:	f7ff fcf1 	bl	8015680 <ip_reass_dequeue_datagram>
 8015c9e:	e014      	b.n	8015cca <ip4_reass+0x31a>
    goto nullreturn;
 8015ca0:	bf00      	nop
 8015ca2:	e012      	b.n	8015cca <ip4_reass+0x31a>
    goto nullreturn;
 8015ca4:	bf00      	nop
 8015ca6:	e010      	b.n	8015cca <ip4_reass+0x31a>
      goto nullreturn;
 8015ca8:	bf00      	nop
 8015caa:	e00e      	b.n	8015cca <ip4_reass+0x31a>
 8015cac:	2000437c 	.word	0x2000437c
 8015cb0:	20004378 	.word	0x20004378
 8015cb4:	0801a840 	.word	0x0801a840
 8015cb8:	0801a9b0 	.word	0x0801a9b0
 8015cbc:	0801a888 	.word	0x0801a888
 8015cc0:	0801a9cc 	.word	0x0801a9cc
 8015cc4:	0801a9d8 	.word	0x0801a9d8
  }

nullreturn:
 8015cc8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8015cca:	6878      	ldr	r0, [r7, #4]
 8015ccc:	f7f8 f894 	bl	800ddf8 <pbuf_free>
  return NULL;
 8015cd0:	2300      	movs	r3, #0
}
 8015cd2:	4618      	mov	r0, r3
 8015cd4:	3738      	adds	r7, #56	; 0x38
 8015cd6:	46bd      	mov	sp, r7
 8015cd8:	bd80      	pop	{r7, pc}
 8015cda:	bf00      	nop

08015cdc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8015cdc:	b580      	push	{r7, lr}
 8015cde:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8015ce0:	2005      	movs	r0, #5
 8015ce2:	f7f7 fa0b 	bl	800d0fc <memp_malloc>
 8015ce6:	4603      	mov	r3, r0
}
 8015ce8:	4618      	mov	r0, r3
 8015cea:	bd80      	pop	{r7, pc}

08015cec <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8015cec:	b580      	push	{r7, lr}
 8015cee:	b082      	sub	sp, #8
 8015cf0:	af00      	add	r7, sp, #0
 8015cf2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	2b00      	cmp	r3, #0
 8015cf8:	d106      	bne.n	8015d08 <ip_frag_free_pbuf_custom_ref+0x1c>
 8015cfa:	4b07      	ldr	r3, [pc, #28]	; (8015d18 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8015cfc:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8015d00:	4906      	ldr	r1, [pc, #24]	; (8015d1c <ip_frag_free_pbuf_custom_ref+0x30>)
 8015d02:	4807      	ldr	r0, [pc, #28]	; (8015d20 <ip_frag_free_pbuf_custom_ref+0x34>)
 8015d04:	f001 f8be 	bl	8016e84 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8015d08:	6879      	ldr	r1, [r7, #4]
 8015d0a:	2005      	movs	r0, #5
 8015d0c:	f7f7 fa48 	bl	800d1a0 <memp_free>
}
 8015d10:	bf00      	nop
 8015d12:	3708      	adds	r7, #8
 8015d14:	46bd      	mov	sp, r7
 8015d16:	bd80      	pop	{r7, pc}
 8015d18:	0801a840 	.word	0x0801a840
 8015d1c:	0801a9f8 	.word	0x0801a9f8
 8015d20:	0801a888 	.word	0x0801a888

08015d24 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8015d24:	b580      	push	{r7, lr}
 8015d26:	b084      	sub	sp, #16
 8015d28:	af00      	add	r7, sp, #0
 8015d2a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8015d30:	68fb      	ldr	r3, [r7, #12]
 8015d32:	2b00      	cmp	r3, #0
 8015d34:	d106      	bne.n	8015d44 <ipfrag_free_pbuf_custom+0x20>
 8015d36:	4b11      	ldr	r3, [pc, #68]	; (8015d7c <ipfrag_free_pbuf_custom+0x58>)
 8015d38:	f240 22ce 	movw	r2, #718	; 0x2ce
 8015d3c:	4910      	ldr	r1, [pc, #64]	; (8015d80 <ipfrag_free_pbuf_custom+0x5c>)
 8015d3e:	4811      	ldr	r0, [pc, #68]	; (8015d84 <ipfrag_free_pbuf_custom+0x60>)
 8015d40:	f001 f8a0 	bl	8016e84 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8015d44:	68fa      	ldr	r2, [r7, #12]
 8015d46:	687b      	ldr	r3, [r7, #4]
 8015d48:	429a      	cmp	r2, r3
 8015d4a:	d006      	beq.n	8015d5a <ipfrag_free_pbuf_custom+0x36>
 8015d4c:	4b0b      	ldr	r3, [pc, #44]	; (8015d7c <ipfrag_free_pbuf_custom+0x58>)
 8015d4e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8015d52:	490d      	ldr	r1, [pc, #52]	; (8015d88 <ipfrag_free_pbuf_custom+0x64>)
 8015d54:	480b      	ldr	r0, [pc, #44]	; (8015d84 <ipfrag_free_pbuf_custom+0x60>)
 8015d56:	f001 f895 	bl	8016e84 <iprintf>
  if (pcr->original != NULL) {
 8015d5a:	68fb      	ldr	r3, [r7, #12]
 8015d5c:	695b      	ldr	r3, [r3, #20]
 8015d5e:	2b00      	cmp	r3, #0
 8015d60:	d004      	beq.n	8015d6c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8015d62:	68fb      	ldr	r3, [r7, #12]
 8015d64:	695b      	ldr	r3, [r3, #20]
 8015d66:	4618      	mov	r0, r3
 8015d68:	f7f8 f846 	bl	800ddf8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8015d6c:	68f8      	ldr	r0, [r7, #12]
 8015d6e:	f7ff ffbd 	bl	8015cec <ip_frag_free_pbuf_custom_ref>
}
 8015d72:	bf00      	nop
 8015d74:	3710      	adds	r7, #16
 8015d76:	46bd      	mov	sp, r7
 8015d78:	bd80      	pop	{r7, pc}
 8015d7a:	bf00      	nop
 8015d7c:	0801a840 	.word	0x0801a840
 8015d80:	0801aa04 	.word	0x0801aa04
 8015d84:	0801a888 	.word	0x0801a888
 8015d88:	0801aa10 	.word	0x0801aa10

08015d8c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8015d8c:	b580      	push	{r7, lr}
 8015d8e:	b094      	sub	sp, #80	; 0x50
 8015d90:	af02      	add	r7, sp, #8
 8015d92:	60f8      	str	r0, [r7, #12]
 8015d94:	60b9      	str	r1, [r7, #8]
 8015d96:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8015d98:	2300      	movs	r3, #0
 8015d9a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8015d9e:	68bb      	ldr	r3, [r7, #8]
 8015da0:	8c1b      	ldrh	r3, [r3, #32]
 8015da2:	3b14      	subs	r3, #20
 8015da4:	2b00      	cmp	r3, #0
 8015da6:	da00      	bge.n	8015daa <ip4_frag+0x1e>
 8015da8:	3307      	adds	r3, #7
 8015daa:	10db      	asrs	r3, r3, #3
 8015dac:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8015dae:	2314      	movs	r3, #20
 8015db0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8015db2:	68fb      	ldr	r3, [r7, #12]
 8015db4:	685b      	ldr	r3, [r3, #4]
 8015db6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8015db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015dba:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8015dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dbe:	781b      	ldrb	r3, [r3, #0]
 8015dc0:	f003 030f 	and.w	r3, r3, #15
 8015dc4:	b2db      	uxtb	r3, r3
 8015dc6:	009b      	lsls	r3, r3, #2
 8015dc8:	b2db      	uxtb	r3, r3
 8015dca:	2b14      	cmp	r3, #20
 8015dcc:	d002      	beq.n	8015dd4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8015dce:	f06f 0305 	mvn.w	r3, #5
 8015dd2:	e110      	b.n	8015ff6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8015dd4:	68fb      	ldr	r3, [r7, #12]
 8015dd6:	895b      	ldrh	r3, [r3, #10]
 8015dd8:	2b13      	cmp	r3, #19
 8015dda:	d809      	bhi.n	8015df0 <ip4_frag+0x64>
 8015ddc:	4b88      	ldr	r3, [pc, #544]	; (8016000 <ip4_frag+0x274>)
 8015dde:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8015de2:	4988      	ldr	r1, [pc, #544]	; (8016004 <ip4_frag+0x278>)
 8015de4:	4888      	ldr	r0, [pc, #544]	; (8016008 <ip4_frag+0x27c>)
 8015de6:	f001 f84d 	bl	8016e84 <iprintf>
 8015dea:	f06f 0305 	mvn.w	r3, #5
 8015dee:	e102      	b.n	8015ff6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8015df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015df2:	88db      	ldrh	r3, [r3, #6]
 8015df4:	b29b      	uxth	r3, r3
 8015df6:	4618      	mov	r0, r3
 8015df8:	f7f6 fcca 	bl	800c790 <lwip_htons>
 8015dfc:	4603      	mov	r3, r0
 8015dfe:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8015e00:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015e02:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015e06:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8015e0a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015e0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015e10:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8015e12:	68fb      	ldr	r3, [r7, #12]
 8015e14:	891b      	ldrh	r3, [r3, #8]
 8015e16:	3b14      	subs	r3, #20
 8015e18:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8015e1c:	e0e1      	b.n	8015fe2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8015e1e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015e20:	00db      	lsls	r3, r3, #3
 8015e22:	b29b      	uxth	r3, r3
 8015e24:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015e28:	4293      	cmp	r3, r2
 8015e2a:	bf28      	it	cs
 8015e2c:	4613      	movcs	r3, r2
 8015e2e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8015e30:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015e34:	2114      	movs	r1, #20
 8015e36:	200e      	movs	r0, #14
 8015e38:	f7f7 fcfa 	bl	800d830 <pbuf_alloc>
 8015e3c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8015e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e40:	2b00      	cmp	r3, #0
 8015e42:	f000 80d5 	beq.w	8015ff0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8015e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e48:	895b      	ldrh	r3, [r3, #10]
 8015e4a:	2b13      	cmp	r3, #19
 8015e4c:	d806      	bhi.n	8015e5c <ip4_frag+0xd0>
 8015e4e:	4b6c      	ldr	r3, [pc, #432]	; (8016000 <ip4_frag+0x274>)
 8015e50:	f44f 7249 	mov.w	r2, #804	; 0x324
 8015e54:	496d      	ldr	r1, [pc, #436]	; (801600c <ip4_frag+0x280>)
 8015e56:	486c      	ldr	r0, [pc, #432]	; (8016008 <ip4_frag+0x27c>)
 8015e58:	f001 f814 	bl	8016e84 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8015e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e5e:	685b      	ldr	r3, [r3, #4]
 8015e60:	2214      	movs	r2, #20
 8015e62:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015e64:	4618      	mov	r0, r3
 8015e66:	f000 fff7 	bl	8016e58 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8015e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e6c:	685b      	ldr	r3, [r3, #4]
 8015e6e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8015e70:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015e72:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8015e76:	e064      	b.n	8015f42 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8015e78:	68fb      	ldr	r3, [r7, #12]
 8015e7a:	895a      	ldrh	r2, [r3, #10]
 8015e7c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015e7e:	1ad3      	subs	r3, r2, r3
 8015e80:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8015e82:	68fb      	ldr	r3, [r7, #12]
 8015e84:	895b      	ldrh	r3, [r3, #10]
 8015e86:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8015e88:	429a      	cmp	r2, r3
 8015e8a:	d906      	bls.n	8015e9a <ip4_frag+0x10e>
 8015e8c:	4b5c      	ldr	r3, [pc, #368]	; (8016000 <ip4_frag+0x274>)
 8015e8e:	f240 322d 	movw	r2, #813	; 0x32d
 8015e92:	495f      	ldr	r1, [pc, #380]	; (8016010 <ip4_frag+0x284>)
 8015e94:	485c      	ldr	r0, [pc, #368]	; (8016008 <ip4_frag+0x27c>)
 8015e96:	f000 fff5 	bl	8016e84 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8015e9a:	8bfa      	ldrh	r2, [r7, #30]
 8015e9c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015ea0:	4293      	cmp	r3, r2
 8015ea2:	bf28      	it	cs
 8015ea4:	4613      	movcs	r3, r2
 8015ea6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8015eaa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8015eae:	2b00      	cmp	r3, #0
 8015eb0:	d105      	bne.n	8015ebe <ip4_frag+0x132>
        poff = 0;
 8015eb2:	2300      	movs	r3, #0
 8015eb4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8015eb6:	68fb      	ldr	r3, [r7, #12]
 8015eb8:	681b      	ldr	r3, [r3, #0]
 8015eba:	60fb      	str	r3, [r7, #12]
        continue;
 8015ebc:	e041      	b.n	8015f42 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8015ebe:	f7ff ff0d 	bl	8015cdc <ip_frag_alloc_pbuf_custom_ref>
 8015ec2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8015ec4:	69bb      	ldr	r3, [r7, #24]
 8015ec6:	2b00      	cmp	r3, #0
 8015ec8:	d103      	bne.n	8015ed2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8015eca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015ecc:	f7f7 ff94 	bl	800ddf8 <pbuf_free>
        goto memerr;
 8015ed0:	e08f      	b.n	8015ff2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015ed2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8015ed4:	68fb      	ldr	r3, [r7, #12]
 8015ed6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015ed8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015eda:	4413      	add	r3, r2
 8015edc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8015ee0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8015ee4:	9201      	str	r2, [sp, #4]
 8015ee6:	9300      	str	r3, [sp, #0]
 8015ee8:	4603      	mov	r3, r0
 8015eea:	2241      	movs	r2, #65	; 0x41
 8015eec:	2000      	movs	r0, #0
 8015eee:	f7f7 fdc9 	bl	800da84 <pbuf_alloced_custom>
 8015ef2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8015ef4:	697b      	ldr	r3, [r7, #20]
 8015ef6:	2b00      	cmp	r3, #0
 8015ef8:	d106      	bne.n	8015f08 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8015efa:	69b8      	ldr	r0, [r7, #24]
 8015efc:	f7ff fef6 	bl	8015cec <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8015f00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015f02:	f7f7 ff79 	bl	800ddf8 <pbuf_free>
        goto memerr;
 8015f06:	e074      	b.n	8015ff2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8015f08:	68f8      	ldr	r0, [r7, #12]
 8015f0a:	f7f8 f81b 	bl	800df44 <pbuf_ref>
      pcr->original = p;
 8015f0e:	69bb      	ldr	r3, [r7, #24]
 8015f10:	68fa      	ldr	r2, [r7, #12]
 8015f12:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8015f14:	69bb      	ldr	r3, [r7, #24]
 8015f16:	4a3f      	ldr	r2, [pc, #252]	; (8016014 <ip4_frag+0x288>)
 8015f18:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8015f1a:	6979      	ldr	r1, [r7, #20]
 8015f1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015f1e:	f7f8 f839 	bl	800df94 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8015f22:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8015f26:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8015f2a:	1ad3      	subs	r3, r2, r3
 8015f2c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8015f30:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015f34:	2b00      	cmp	r3, #0
 8015f36:	d004      	beq.n	8015f42 <ip4_frag+0x1b6>
        poff = 0;
 8015f38:	2300      	movs	r3, #0
 8015f3a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8015f3c:	68fb      	ldr	r3, [r7, #12]
 8015f3e:	681b      	ldr	r3, [r3, #0]
 8015f40:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8015f42:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015f46:	2b00      	cmp	r3, #0
 8015f48:	d196      	bne.n	8015e78 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8015f4a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8015f4c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8015f50:	4413      	add	r3, r2
 8015f52:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8015f54:	68bb      	ldr	r3, [r7, #8]
 8015f56:	8c1b      	ldrh	r3, [r3, #32]
 8015f58:	f1a3 0213 	sub.w	r2, r3, #19
 8015f5c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015f60:	429a      	cmp	r2, r3
 8015f62:	bfcc      	ite	gt
 8015f64:	2301      	movgt	r3, #1
 8015f66:	2300      	movle	r3, #0
 8015f68:	b2db      	uxtb	r3, r3
 8015f6a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8015f6c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015f70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015f74:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8015f76:	6a3b      	ldr	r3, [r7, #32]
 8015f78:	2b00      	cmp	r3, #0
 8015f7a:	d002      	beq.n	8015f82 <ip4_frag+0x1f6>
 8015f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f7e:	2b00      	cmp	r3, #0
 8015f80:	d003      	beq.n	8015f8a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8015f82:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015f84:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8015f88:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8015f8a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015f8c:	4618      	mov	r0, r3
 8015f8e:	f7f6 fbff 	bl	800c790 <lwip_htons>
 8015f92:	4603      	mov	r3, r0
 8015f94:	461a      	mov	r2, r3
 8015f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f98:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8015f9a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015f9c:	3314      	adds	r3, #20
 8015f9e:	b29b      	uxth	r3, r3
 8015fa0:	4618      	mov	r0, r3
 8015fa2:	f7f6 fbf5 	bl	800c790 <lwip_htons>
 8015fa6:	4603      	mov	r3, r0
 8015fa8:	461a      	mov	r2, r3
 8015faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fac:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8015fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fb0:	2200      	movs	r2, #0
 8015fb2:	729a      	strb	r2, [r3, #10]
 8015fb4:	2200      	movs	r2, #0
 8015fb6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8015fb8:	68bb      	ldr	r3, [r7, #8]
 8015fba:	695b      	ldr	r3, [r3, #20]
 8015fbc:	687a      	ldr	r2, [r7, #4]
 8015fbe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015fc0:	68b8      	ldr	r0, [r7, #8]
 8015fc2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8015fc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015fc6:	f7f7 ff17 	bl	800ddf8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8015fca:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015fce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015fd0:	1ad3      	subs	r3, r2, r3
 8015fd2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8015fd6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8015fda:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015fdc:	4413      	add	r3, r2
 8015fde:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8015fe2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015fe6:	2b00      	cmp	r3, #0
 8015fe8:	f47f af19 	bne.w	8015e1e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8015fec:	2300      	movs	r3, #0
 8015fee:	e002      	b.n	8015ff6 <ip4_frag+0x26a>
      goto memerr;
 8015ff0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8015ff2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015ff6:	4618      	mov	r0, r3
 8015ff8:	3748      	adds	r7, #72	; 0x48
 8015ffa:	46bd      	mov	sp, r7
 8015ffc:	bd80      	pop	{r7, pc}
 8015ffe:	bf00      	nop
 8016000:	0801a840 	.word	0x0801a840
 8016004:	0801aa1c 	.word	0x0801aa1c
 8016008:	0801a888 	.word	0x0801a888
 801600c:	0801aa38 	.word	0x0801aa38
 8016010:	0801aa58 	.word	0x0801aa58
 8016014:	08015d25 	.word	0x08015d25

08016018 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8016018:	b580      	push	{r7, lr}
 801601a:	b086      	sub	sp, #24
 801601c:	af00      	add	r7, sp, #0
 801601e:	6078      	str	r0, [r7, #4]
 8016020:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8016022:	230e      	movs	r3, #14
 8016024:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	895b      	ldrh	r3, [r3, #10]
 801602a:	2b0e      	cmp	r3, #14
 801602c:	d96e      	bls.n	801610c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	7bdb      	ldrb	r3, [r3, #15]
 8016032:	2b00      	cmp	r3, #0
 8016034:	d106      	bne.n	8016044 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8016036:	683b      	ldr	r3, [r7, #0]
 8016038:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801603c:	3301      	adds	r3, #1
 801603e:	b2da      	uxtb	r2, r3
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	685b      	ldr	r3, [r3, #4]
 8016048:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801604a:	693b      	ldr	r3, [r7, #16]
 801604c:	7b1a      	ldrb	r2, [r3, #12]
 801604e:	7b5b      	ldrb	r3, [r3, #13]
 8016050:	021b      	lsls	r3, r3, #8
 8016052:	4313      	orrs	r3, r2
 8016054:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8016056:	693b      	ldr	r3, [r7, #16]
 8016058:	781b      	ldrb	r3, [r3, #0]
 801605a:	f003 0301 	and.w	r3, r3, #1
 801605e:	2b00      	cmp	r3, #0
 8016060:	d023      	beq.n	80160aa <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8016062:	693b      	ldr	r3, [r7, #16]
 8016064:	781b      	ldrb	r3, [r3, #0]
 8016066:	2b01      	cmp	r3, #1
 8016068:	d10f      	bne.n	801608a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801606a:	693b      	ldr	r3, [r7, #16]
 801606c:	785b      	ldrb	r3, [r3, #1]
 801606e:	2b00      	cmp	r3, #0
 8016070:	d11b      	bne.n	80160aa <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8016072:	693b      	ldr	r3, [r7, #16]
 8016074:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016076:	2b5e      	cmp	r3, #94	; 0x5e
 8016078:	d117      	bne.n	80160aa <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801607a:	687b      	ldr	r3, [r7, #4]
 801607c:	7b5b      	ldrb	r3, [r3, #13]
 801607e:	f043 0310 	orr.w	r3, r3, #16
 8016082:	b2da      	uxtb	r2, r3
 8016084:	687b      	ldr	r3, [r7, #4]
 8016086:	735a      	strb	r2, [r3, #13]
 8016088:	e00f      	b.n	80160aa <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801608a:	693b      	ldr	r3, [r7, #16]
 801608c:	2206      	movs	r2, #6
 801608e:	4928      	ldr	r1, [pc, #160]	; (8016130 <ethernet_input+0x118>)
 8016090:	4618      	mov	r0, r3
 8016092:	f000 fed3 	bl	8016e3c <memcmp>
 8016096:	4603      	mov	r3, r0
 8016098:	2b00      	cmp	r3, #0
 801609a:	d106      	bne.n	80160aa <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	7b5b      	ldrb	r3, [r3, #13]
 80160a0:	f043 0308 	orr.w	r3, r3, #8
 80160a4:	b2da      	uxtb	r2, r3
 80160a6:	687b      	ldr	r3, [r7, #4]
 80160a8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80160aa:	89fb      	ldrh	r3, [r7, #14]
 80160ac:	2b08      	cmp	r3, #8
 80160ae:	d003      	beq.n	80160b8 <ethernet_input+0xa0>
 80160b0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80160b4:	d014      	beq.n	80160e0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80160b6:	e032      	b.n	801611e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80160b8:	683b      	ldr	r3, [r7, #0]
 80160ba:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80160be:	f003 0308 	and.w	r3, r3, #8
 80160c2:	2b00      	cmp	r3, #0
 80160c4:	d024      	beq.n	8016110 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80160c6:	8afb      	ldrh	r3, [r7, #22]
 80160c8:	4619      	mov	r1, r3
 80160ca:	6878      	ldr	r0, [r7, #4]
 80160cc:	f7f7 fe0e 	bl	800dcec <pbuf_remove_header>
 80160d0:	4603      	mov	r3, r0
 80160d2:	2b00      	cmp	r3, #0
 80160d4:	d11e      	bne.n	8016114 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80160d6:	6839      	ldr	r1, [r7, #0]
 80160d8:	6878      	ldr	r0, [r7, #4]
 80160da:	f7fe ff27 	bl	8014f2c <ip4_input>
      break;
 80160de:	e013      	b.n	8016108 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80160e0:	683b      	ldr	r3, [r7, #0]
 80160e2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80160e6:	f003 0308 	and.w	r3, r3, #8
 80160ea:	2b00      	cmp	r3, #0
 80160ec:	d014      	beq.n	8016118 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80160ee:	8afb      	ldrh	r3, [r7, #22]
 80160f0:	4619      	mov	r1, r3
 80160f2:	6878      	ldr	r0, [r7, #4]
 80160f4:	f7f7 fdfa 	bl	800dcec <pbuf_remove_header>
 80160f8:	4603      	mov	r3, r0
 80160fa:	2b00      	cmp	r3, #0
 80160fc:	d10e      	bne.n	801611c <ethernet_input+0x104>
        etharp_input(p, netif);
 80160fe:	6839      	ldr	r1, [r7, #0]
 8016100:	6878      	ldr	r0, [r7, #4]
 8016102:	f7fe f8c7 	bl	8014294 <etharp_input>
      break;
 8016106:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8016108:	2300      	movs	r3, #0
 801610a:	e00c      	b.n	8016126 <ethernet_input+0x10e>
    goto free_and_return;
 801610c:	bf00      	nop
 801610e:	e006      	b.n	801611e <ethernet_input+0x106>
        goto free_and_return;
 8016110:	bf00      	nop
 8016112:	e004      	b.n	801611e <ethernet_input+0x106>
        goto free_and_return;
 8016114:	bf00      	nop
 8016116:	e002      	b.n	801611e <ethernet_input+0x106>
        goto free_and_return;
 8016118:	bf00      	nop
 801611a:	e000      	b.n	801611e <ethernet_input+0x106>
        goto free_and_return;
 801611c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801611e:	6878      	ldr	r0, [r7, #4]
 8016120:	f7f7 fe6a 	bl	800ddf8 <pbuf_free>
  return ERR_OK;
 8016124:	2300      	movs	r3, #0
}
 8016126:	4618      	mov	r0, r3
 8016128:	3718      	adds	r7, #24
 801612a:	46bd      	mov	sp, r7
 801612c:	bd80      	pop	{r7, pc}
 801612e:	bf00      	nop
 8016130:	0801ac70 	.word	0x0801ac70

08016134 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8016134:	b580      	push	{r7, lr}
 8016136:	b086      	sub	sp, #24
 8016138:	af00      	add	r7, sp, #0
 801613a:	60f8      	str	r0, [r7, #12]
 801613c:	60b9      	str	r1, [r7, #8]
 801613e:	607a      	str	r2, [r7, #4]
 8016140:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8016142:	8c3b      	ldrh	r3, [r7, #32]
 8016144:	4618      	mov	r0, r3
 8016146:	f7f6 fb23 	bl	800c790 <lwip_htons>
 801614a:	4603      	mov	r3, r0
 801614c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801614e:	210e      	movs	r1, #14
 8016150:	68b8      	ldr	r0, [r7, #8]
 8016152:	f7f7 fdbb 	bl	800dccc <pbuf_add_header>
 8016156:	4603      	mov	r3, r0
 8016158:	2b00      	cmp	r3, #0
 801615a:	d125      	bne.n	80161a8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801615c:	68bb      	ldr	r3, [r7, #8]
 801615e:	685b      	ldr	r3, [r3, #4]
 8016160:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8016162:	693b      	ldr	r3, [r7, #16]
 8016164:	8afa      	ldrh	r2, [r7, #22]
 8016166:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8016168:	693b      	ldr	r3, [r7, #16]
 801616a:	2206      	movs	r2, #6
 801616c:	6839      	ldr	r1, [r7, #0]
 801616e:	4618      	mov	r0, r3
 8016170:	f000 fe72 	bl	8016e58 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8016174:	693b      	ldr	r3, [r7, #16]
 8016176:	3306      	adds	r3, #6
 8016178:	2206      	movs	r2, #6
 801617a:	6879      	ldr	r1, [r7, #4]
 801617c:	4618      	mov	r0, r3
 801617e:	f000 fe6b 	bl	8016e58 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8016182:	68fb      	ldr	r3, [r7, #12]
 8016184:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016188:	2b06      	cmp	r3, #6
 801618a:	d006      	beq.n	801619a <ethernet_output+0x66>
 801618c:	4b0a      	ldr	r3, [pc, #40]	; (80161b8 <ethernet_output+0x84>)
 801618e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8016192:	490a      	ldr	r1, [pc, #40]	; (80161bc <ethernet_output+0x88>)
 8016194:	480a      	ldr	r0, [pc, #40]	; (80161c0 <ethernet_output+0x8c>)
 8016196:	f000 fe75 	bl	8016e84 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801619a:	68fb      	ldr	r3, [r7, #12]
 801619c:	699b      	ldr	r3, [r3, #24]
 801619e:	68b9      	ldr	r1, [r7, #8]
 80161a0:	68f8      	ldr	r0, [r7, #12]
 80161a2:	4798      	blx	r3
 80161a4:	4603      	mov	r3, r0
 80161a6:	e002      	b.n	80161ae <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80161a8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80161aa:	f06f 0301 	mvn.w	r3, #1
}
 80161ae:	4618      	mov	r0, r3
 80161b0:	3718      	adds	r7, #24
 80161b2:	46bd      	mov	sp, r7
 80161b4:	bd80      	pop	{r7, pc}
 80161b6:	bf00      	nop
 80161b8:	0801aa68 	.word	0x0801aa68
 80161bc:	0801aaa0 	.word	0x0801aaa0
 80161c0:	0801aad4 	.word	0x0801aad4

080161c4 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80161c4:	b580      	push	{r7, lr}
 80161c6:	b086      	sub	sp, #24
 80161c8:	af00      	add	r7, sp, #0
 80161ca:	6078      	str	r0, [r7, #4]
 80161cc:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 80161ce:	683b      	ldr	r3, [r7, #0]
 80161d0:	60bb      	str	r3, [r7, #8]
 80161d2:	2304      	movs	r3, #4
 80161d4:	60fb      	str	r3, [r7, #12]
 80161d6:	2300      	movs	r3, #0
 80161d8:	613b      	str	r3, [r7, #16]
 80161da:	2300      	movs	r3, #0
 80161dc:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80161de:	f107 0308 	add.w	r3, r7, #8
 80161e2:	2100      	movs	r1, #0
 80161e4:	4618      	mov	r0, r3
 80161e6:	f7f3 fc1f 	bl	8009a28 <osMessageCreate>
 80161ea:	4602      	mov	r2, r0
 80161ec:	687b      	ldr	r3, [r7, #4]
 80161ee:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80161f0:	687b      	ldr	r3, [r7, #4]
 80161f2:	681b      	ldr	r3, [r3, #0]
 80161f4:	2b00      	cmp	r3, #0
 80161f6:	d102      	bne.n	80161fe <sys_mbox_new+0x3a>
    return ERR_MEM;
 80161f8:	f04f 33ff 	mov.w	r3, #4294967295
 80161fc:	e000      	b.n	8016200 <sys_mbox_new+0x3c>

  return ERR_OK;
 80161fe:	2300      	movs	r3, #0
}
 8016200:	4618      	mov	r0, r3
 8016202:	3718      	adds	r7, #24
 8016204:	46bd      	mov	sp, r7
 8016206:	bd80      	pop	{r7, pc}

08016208 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8016208:	b580      	push	{r7, lr}
 801620a:	b084      	sub	sp, #16
 801620c:	af00      	add	r7, sp, #0
 801620e:	6078      	str	r0, [r7, #4]
 8016210:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8016212:	687b      	ldr	r3, [r7, #4]
 8016214:	681b      	ldr	r3, [r3, #0]
 8016216:	6839      	ldr	r1, [r7, #0]
 8016218:	2200      	movs	r2, #0
 801621a:	4618      	mov	r0, r3
 801621c:	f7f3 fc2c 	bl	8009a78 <osMessagePut>
 8016220:	4603      	mov	r3, r0
 8016222:	2b00      	cmp	r3, #0
 8016224:	d102      	bne.n	801622c <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8016226:	2300      	movs	r3, #0
 8016228:	73fb      	strb	r3, [r7, #15]
 801622a:	e001      	b.n	8016230 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801622c:	23ff      	movs	r3, #255	; 0xff
 801622e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8016230:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016234:	4618      	mov	r0, r3
 8016236:	3710      	adds	r7, #16
 8016238:	46bd      	mov	sp, r7
 801623a:	bd80      	pop	{r7, pc}

0801623c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801623c:	b580      	push	{r7, lr}
 801623e:	b08c      	sub	sp, #48	; 0x30
 8016240:	af00      	add	r7, sp, #0
 8016242:	61f8      	str	r0, [r7, #28]
 8016244:	61b9      	str	r1, [r7, #24]
 8016246:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8016248:	f7f3 fa2c 	bl	80096a4 <osKernelSysTick>
 801624c:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801624e:	697b      	ldr	r3, [r7, #20]
 8016250:	2b00      	cmp	r3, #0
 8016252:	d017      	beq.n	8016284 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8016254:	69fb      	ldr	r3, [r7, #28]
 8016256:	6819      	ldr	r1, [r3, #0]
 8016258:	f107 0320 	add.w	r3, r7, #32
 801625c:	697a      	ldr	r2, [r7, #20]
 801625e:	4618      	mov	r0, r3
 8016260:	f7f3 fc4a 	bl	8009af8 <osMessageGet>

    if(event.status == osEventMessage)
 8016264:	6a3b      	ldr	r3, [r7, #32]
 8016266:	2b10      	cmp	r3, #16
 8016268:	d109      	bne.n	801627e <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801626a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801626c:	461a      	mov	r2, r3
 801626e:	69bb      	ldr	r3, [r7, #24]
 8016270:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8016272:	f7f3 fa17 	bl	80096a4 <osKernelSysTick>
 8016276:	4602      	mov	r2, r0
 8016278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801627a:	1ad3      	subs	r3, r2, r3
 801627c:	e019      	b.n	80162b2 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801627e:	f04f 33ff 	mov.w	r3, #4294967295
 8016282:	e016      	b.n	80162b2 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8016284:	69fb      	ldr	r3, [r7, #28]
 8016286:	6819      	ldr	r1, [r3, #0]
 8016288:	463b      	mov	r3, r7
 801628a:	f04f 32ff 	mov.w	r2, #4294967295
 801628e:	4618      	mov	r0, r3
 8016290:	f7f3 fc32 	bl	8009af8 <osMessageGet>
 8016294:	f107 0320 	add.w	r3, r7, #32
 8016298:	463a      	mov	r2, r7
 801629a:	ca07      	ldmia	r2, {r0, r1, r2}
 801629c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 80162a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162a2:	461a      	mov	r2, r3
 80162a4:	69bb      	ldr	r3, [r7, #24]
 80162a6:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 80162a8:	f7f3 f9fc 	bl	80096a4 <osKernelSysTick>
 80162ac:	4602      	mov	r2, r0
 80162ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162b0:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80162b2:	4618      	mov	r0, r3
 80162b4:	3730      	adds	r7, #48	; 0x30
 80162b6:	46bd      	mov	sp, r7
 80162b8:	bd80      	pop	{r7, pc}

080162ba <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80162ba:	b480      	push	{r7}
 80162bc:	b083      	sub	sp, #12
 80162be:	af00      	add	r7, sp, #0
 80162c0:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80162c2:	687b      	ldr	r3, [r7, #4]
 80162c4:	681b      	ldr	r3, [r3, #0]
 80162c6:	2b00      	cmp	r3, #0
 80162c8:	d101      	bne.n	80162ce <sys_mbox_valid+0x14>
    return 0;
 80162ca:	2300      	movs	r3, #0
 80162cc:	e000      	b.n	80162d0 <sys_mbox_valid+0x16>
  else
    return 1;
 80162ce:	2301      	movs	r3, #1
}
 80162d0:	4618      	mov	r0, r3
 80162d2:	370c      	adds	r7, #12
 80162d4:	46bd      	mov	sp, r7
 80162d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162da:	4770      	bx	lr

080162dc <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80162dc:	b580      	push	{r7, lr}
 80162de:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 80162e0:	4803      	ldr	r0, [pc, #12]	; (80162f0 <sys_init+0x14>)
 80162e2:	f7f3 fa4f 	bl	8009784 <osMutexCreate>
 80162e6:	4603      	mov	r3, r0
 80162e8:	4a02      	ldr	r2, [pc, #8]	; (80162f4 <sys_init+0x18>)
 80162ea:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 80162ec:	bf00      	nop
 80162ee:	bd80      	pop	{r7, pc}
 80162f0:	0801ac80 	.word	0x0801ac80
 80162f4:	2000b11c 	.word	0x2000b11c

080162f8 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80162f8:	b580      	push	{r7, lr}
 80162fa:	b084      	sub	sp, #16
 80162fc:	af00      	add	r7, sp, #0
 80162fe:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8016300:	2300      	movs	r3, #0
 8016302:	60bb      	str	r3, [r7, #8]
 8016304:	2300      	movs	r3, #0
 8016306:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8016308:	f107 0308 	add.w	r3, r7, #8
 801630c:	4618      	mov	r0, r3
 801630e:	f7f3 fa39 	bl	8009784 <osMutexCreate>
 8016312:	4602      	mov	r2, r0
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8016318:	687b      	ldr	r3, [r7, #4]
 801631a:	681b      	ldr	r3, [r3, #0]
 801631c:	2b00      	cmp	r3, #0
 801631e:	d102      	bne.n	8016326 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8016320:	f04f 33ff 	mov.w	r3, #4294967295
 8016324:	e000      	b.n	8016328 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8016326:	2300      	movs	r3, #0
}
 8016328:	4618      	mov	r0, r3
 801632a:	3710      	adds	r7, #16
 801632c:	46bd      	mov	sp, r7
 801632e:	bd80      	pop	{r7, pc}

08016330 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8016330:	b580      	push	{r7, lr}
 8016332:	b082      	sub	sp, #8
 8016334:	af00      	add	r7, sp, #0
 8016336:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8016338:	687b      	ldr	r3, [r7, #4]
 801633a:	681b      	ldr	r3, [r3, #0]
 801633c:	f04f 31ff 	mov.w	r1, #4294967295
 8016340:	4618      	mov	r0, r3
 8016342:	f7f3 fa37 	bl	80097b4 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8016346:	bf00      	nop
 8016348:	3708      	adds	r7, #8
 801634a:	46bd      	mov	sp, r7
 801634c:	bd80      	pop	{r7, pc}

0801634e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801634e:	b580      	push	{r7, lr}
 8016350:	b082      	sub	sp, #8
 8016352:	af00      	add	r7, sp, #0
 8016354:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8016356:	687b      	ldr	r3, [r7, #4]
 8016358:	681b      	ldr	r3, [r3, #0]
 801635a:	4618      	mov	r0, r3
 801635c:	f7f3 fa78 	bl	8009850 <osMutexRelease>
}
 8016360:	bf00      	nop
 8016362:	3708      	adds	r7, #8
 8016364:	46bd      	mov	sp, r7
 8016366:	bd80      	pop	{r7, pc}

08016368 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8016368:	b580      	push	{r7, lr}
 801636a:	b08c      	sub	sp, #48	; 0x30
 801636c:	af00      	add	r7, sp, #0
 801636e:	60f8      	str	r0, [r7, #12]
 8016370:	60b9      	str	r1, [r7, #8]
 8016372:	607a      	str	r2, [r7, #4]
 8016374:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8016376:	f107 0314 	add.w	r3, r7, #20
 801637a:	2200      	movs	r2, #0
 801637c:	601a      	str	r2, [r3, #0]
 801637e:	605a      	str	r2, [r3, #4]
 8016380:	609a      	str	r2, [r3, #8]
 8016382:	60da      	str	r2, [r3, #12]
 8016384:	611a      	str	r2, [r3, #16]
 8016386:	615a      	str	r2, [r3, #20]
 8016388:	619a      	str	r2, [r3, #24]
 801638a:	68fb      	ldr	r3, [r7, #12]
 801638c:	617b      	str	r3, [r7, #20]
 801638e:	68bb      	ldr	r3, [r7, #8]
 8016390:	61bb      	str	r3, [r7, #24]
 8016392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016394:	b21b      	sxth	r3, r3
 8016396:	83bb      	strh	r3, [r7, #28]
 8016398:	683b      	ldr	r3, [r7, #0]
 801639a:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 801639c:	f107 0314 	add.w	r3, r7, #20
 80163a0:	6879      	ldr	r1, [r7, #4]
 80163a2:	4618      	mov	r0, r3
 80163a4:	f7f3 f98e 	bl	80096c4 <osThreadCreate>
 80163a8:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 80163aa:	4618      	mov	r0, r3
 80163ac:	3730      	adds	r7, #48	; 0x30
 80163ae:	46bd      	mov	sp, r7
 80163b0:	bd80      	pop	{r7, pc}
	...

080163b4 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80163b4:	b580      	push	{r7, lr}
 80163b6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 80163b8:	4b04      	ldr	r3, [pc, #16]	; (80163cc <sys_arch_protect+0x18>)
 80163ba:	681b      	ldr	r3, [r3, #0]
 80163bc:	f04f 31ff 	mov.w	r1, #4294967295
 80163c0:	4618      	mov	r0, r3
 80163c2:	f7f3 f9f7 	bl	80097b4 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 80163c6:	2301      	movs	r3, #1
}
 80163c8:	4618      	mov	r0, r3
 80163ca:	bd80      	pop	{r7, pc}
 80163cc:	2000b11c 	.word	0x2000b11c

080163d0 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80163d0:	b580      	push	{r7, lr}
 80163d2:	b082      	sub	sp, #8
 80163d4:	af00      	add	r7, sp, #0
 80163d6:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80163d8:	4b04      	ldr	r3, [pc, #16]	; (80163ec <sys_arch_unprotect+0x1c>)
 80163da:	681b      	ldr	r3, [r3, #0]
 80163dc:	4618      	mov	r0, r3
 80163de:	f7f3 fa37 	bl	8009850 <osMutexRelease>
}
 80163e2:	bf00      	nop
 80163e4:	3708      	adds	r7, #8
 80163e6:	46bd      	mov	sp, r7
 80163e8:	bd80      	pop	{r7, pc}
 80163ea:	bf00      	nop
 80163ec:	2000b11c 	.word	0x2000b11c

080163f0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80163f0:	b580      	push	{r7, lr}
 80163f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80163f4:	2200      	movs	r2, #0
 80163f6:	4912      	ldr	r1, [pc, #72]	; (8016440 <MX_USB_DEVICE_Init+0x50>)
 80163f8:	4812      	ldr	r0, [pc, #72]	; (8016444 <MX_USB_DEVICE_Init+0x54>)
 80163fa:	f7f1 ffb9 	bl	8008370 <USBD_Init>
 80163fe:	4603      	mov	r3, r0
 8016400:	2b00      	cmp	r3, #0
 8016402:	d001      	beq.n	8016408 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8016404:	f7ea fd70 	bl	8000ee8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8016408:	490f      	ldr	r1, [pc, #60]	; (8016448 <MX_USB_DEVICE_Init+0x58>)
 801640a:	480e      	ldr	r0, [pc, #56]	; (8016444 <MX_USB_DEVICE_Init+0x54>)
 801640c:	f7f1 ffe0 	bl	80083d0 <USBD_RegisterClass>
 8016410:	4603      	mov	r3, r0
 8016412:	2b00      	cmp	r3, #0
 8016414:	d001      	beq.n	801641a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8016416:	f7ea fd67 	bl	8000ee8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801641a:	490c      	ldr	r1, [pc, #48]	; (801644c <MX_USB_DEVICE_Init+0x5c>)
 801641c:	4809      	ldr	r0, [pc, #36]	; (8016444 <MX_USB_DEVICE_Init+0x54>)
 801641e:	f7f1 ff31 	bl	8008284 <USBD_CDC_RegisterInterface>
 8016422:	4603      	mov	r3, r0
 8016424:	2b00      	cmp	r3, #0
 8016426:	d001      	beq.n	801642c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8016428:	f7ea fd5e 	bl	8000ee8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801642c:	4805      	ldr	r0, [pc, #20]	; (8016444 <MX_USB_DEVICE_Init+0x54>)
 801642e:	f7f1 fff6 	bl	800841e <USBD_Start>
 8016432:	4603      	mov	r3, r0
 8016434:	2b00      	cmp	r3, #0
 8016436:	d001      	beq.n	801643c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8016438:	f7ea fd56 	bl	8000ee8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801643c:	bf00      	nop
 801643e:	bd80      	pop	{r7, pc}
 8016440:	20000140 	.word	0x20000140
 8016444:	2000b120 	.word	0x2000b120
 8016448:	20000018 	.word	0x20000018
 801644c:	2000012c 	.word	0x2000012c

08016450 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8016450:	b580      	push	{r7, lr}
 8016452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8016454:	2200      	movs	r2, #0
 8016456:	4905      	ldr	r1, [pc, #20]	; (801646c <CDC_Init_FS+0x1c>)
 8016458:	4805      	ldr	r0, [pc, #20]	; (8016470 <CDC_Init_FS+0x20>)
 801645a:	f7f1 ff28 	bl	80082ae <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801645e:	4905      	ldr	r1, [pc, #20]	; (8016474 <CDC_Init_FS+0x24>)
 8016460:	4803      	ldr	r0, [pc, #12]	; (8016470 <CDC_Init_FS+0x20>)
 8016462:	f7f1 ff42 	bl	80082ea <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8016466:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8016468:	4618      	mov	r0, r3
 801646a:	bd80      	pop	{r7, pc}
 801646c:	2000bbf0 	.word	0x2000bbf0
 8016470:	2000b120 	.word	0x2000b120
 8016474:	2000b3f0 	.word	0x2000b3f0

08016478 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8016478:	b480      	push	{r7}
 801647a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801647c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801647e:	4618      	mov	r0, r3
 8016480:	46bd      	mov	sp, r7
 8016482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016486:	4770      	bx	lr

08016488 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8016488:	b480      	push	{r7}
 801648a:	b083      	sub	sp, #12
 801648c:	af00      	add	r7, sp, #0
 801648e:	4603      	mov	r3, r0
 8016490:	6039      	str	r1, [r7, #0]
 8016492:	71fb      	strb	r3, [r7, #7]
 8016494:	4613      	mov	r3, r2
 8016496:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8016498:	79fb      	ldrb	r3, [r7, #7]
 801649a:	2b23      	cmp	r3, #35	; 0x23
 801649c:	d84a      	bhi.n	8016534 <CDC_Control_FS+0xac>
 801649e:	a201      	add	r2, pc, #4	; (adr r2, 80164a4 <CDC_Control_FS+0x1c>)
 80164a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80164a4:	08016535 	.word	0x08016535
 80164a8:	08016535 	.word	0x08016535
 80164ac:	08016535 	.word	0x08016535
 80164b0:	08016535 	.word	0x08016535
 80164b4:	08016535 	.word	0x08016535
 80164b8:	08016535 	.word	0x08016535
 80164bc:	08016535 	.word	0x08016535
 80164c0:	08016535 	.word	0x08016535
 80164c4:	08016535 	.word	0x08016535
 80164c8:	08016535 	.word	0x08016535
 80164cc:	08016535 	.word	0x08016535
 80164d0:	08016535 	.word	0x08016535
 80164d4:	08016535 	.word	0x08016535
 80164d8:	08016535 	.word	0x08016535
 80164dc:	08016535 	.word	0x08016535
 80164e0:	08016535 	.word	0x08016535
 80164e4:	08016535 	.word	0x08016535
 80164e8:	08016535 	.word	0x08016535
 80164ec:	08016535 	.word	0x08016535
 80164f0:	08016535 	.word	0x08016535
 80164f4:	08016535 	.word	0x08016535
 80164f8:	08016535 	.word	0x08016535
 80164fc:	08016535 	.word	0x08016535
 8016500:	08016535 	.word	0x08016535
 8016504:	08016535 	.word	0x08016535
 8016508:	08016535 	.word	0x08016535
 801650c:	08016535 	.word	0x08016535
 8016510:	08016535 	.word	0x08016535
 8016514:	08016535 	.word	0x08016535
 8016518:	08016535 	.word	0x08016535
 801651c:	08016535 	.word	0x08016535
 8016520:	08016535 	.word	0x08016535
 8016524:	08016535 	.word	0x08016535
 8016528:	08016535 	.word	0x08016535
 801652c:	08016535 	.word	0x08016535
 8016530:	08016535 	.word	0x08016535
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8016534:	bf00      	nop
  }

  return (USBD_OK);
 8016536:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8016538:	4618      	mov	r0, r3
 801653a:	370c      	adds	r7, #12
 801653c:	46bd      	mov	sp, r7
 801653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016542:	4770      	bx	lr

08016544 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8016544:	b580      	push	{r7, lr}
 8016546:	b082      	sub	sp, #8
 8016548:	af00      	add	r7, sp, #0
 801654a:	6078      	str	r0, [r7, #4]
 801654c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801654e:	6879      	ldr	r1, [r7, #4]
 8016550:	4805      	ldr	r0, [pc, #20]	; (8016568 <CDC_Receive_FS+0x24>)
 8016552:	f7f1 feca 	bl	80082ea <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8016556:	4804      	ldr	r0, [pc, #16]	; (8016568 <CDC_Receive_FS+0x24>)
 8016558:	f7f1 fee0 	bl	800831c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801655c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801655e:	4618      	mov	r0, r3
 8016560:	3708      	adds	r7, #8
 8016562:	46bd      	mov	sp, r7
 8016564:	bd80      	pop	{r7, pc}
 8016566:	bf00      	nop
 8016568:	2000b120 	.word	0x2000b120

0801656c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801656c:	b480      	push	{r7}
 801656e:	b087      	sub	sp, #28
 8016570:	af00      	add	r7, sp, #0
 8016572:	60f8      	str	r0, [r7, #12]
 8016574:	60b9      	str	r1, [r7, #8]
 8016576:	4613      	mov	r3, r2
 8016578:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801657a:	2300      	movs	r3, #0
 801657c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801657e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016582:	4618      	mov	r0, r3
 8016584:	371c      	adds	r7, #28
 8016586:	46bd      	mov	sp, r7
 8016588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801658c:	4770      	bx	lr
	...

08016590 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016590:	b480      	push	{r7}
 8016592:	b083      	sub	sp, #12
 8016594:	af00      	add	r7, sp, #0
 8016596:	4603      	mov	r3, r0
 8016598:	6039      	str	r1, [r7, #0]
 801659a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801659c:	683b      	ldr	r3, [r7, #0]
 801659e:	2212      	movs	r2, #18
 80165a0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80165a2:	4b03      	ldr	r3, [pc, #12]	; (80165b0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80165a4:	4618      	mov	r0, r3
 80165a6:	370c      	adds	r7, #12
 80165a8:	46bd      	mov	sp, r7
 80165aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165ae:	4770      	bx	lr
 80165b0:	2000015c 	.word	0x2000015c

080165b4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80165b4:	b480      	push	{r7}
 80165b6:	b083      	sub	sp, #12
 80165b8:	af00      	add	r7, sp, #0
 80165ba:	4603      	mov	r3, r0
 80165bc:	6039      	str	r1, [r7, #0]
 80165be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80165c0:	683b      	ldr	r3, [r7, #0]
 80165c2:	2204      	movs	r2, #4
 80165c4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80165c6:	4b03      	ldr	r3, [pc, #12]	; (80165d4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80165c8:	4618      	mov	r0, r3
 80165ca:	370c      	adds	r7, #12
 80165cc:	46bd      	mov	sp, r7
 80165ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165d2:	4770      	bx	lr
 80165d4:	20000170 	.word	0x20000170

080165d8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80165d8:	b580      	push	{r7, lr}
 80165da:	b082      	sub	sp, #8
 80165dc:	af00      	add	r7, sp, #0
 80165de:	4603      	mov	r3, r0
 80165e0:	6039      	str	r1, [r7, #0]
 80165e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80165e4:	79fb      	ldrb	r3, [r7, #7]
 80165e6:	2b00      	cmp	r3, #0
 80165e8:	d105      	bne.n	80165f6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80165ea:	683a      	ldr	r2, [r7, #0]
 80165ec:	4907      	ldr	r1, [pc, #28]	; (801660c <USBD_FS_ProductStrDescriptor+0x34>)
 80165ee:	4808      	ldr	r0, [pc, #32]	; (8016610 <USBD_FS_ProductStrDescriptor+0x38>)
 80165f0:	f7f2 ff47 	bl	8009482 <USBD_GetString>
 80165f4:	e004      	b.n	8016600 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80165f6:	683a      	ldr	r2, [r7, #0]
 80165f8:	4904      	ldr	r1, [pc, #16]	; (801660c <USBD_FS_ProductStrDescriptor+0x34>)
 80165fa:	4805      	ldr	r0, [pc, #20]	; (8016610 <USBD_FS_ProductStrDescriptor+0x38>)
 80165fc:	f7f2 ff41 	bl	8009482 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016600:	4b02      	ldr	r3, [pc, #8]	; (801660c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8016602:	4618      	mov	r0, r3
 8016604:	3708      	adds	r7, #8
 8016606:	46bd      	mov	sp, r7
 8016608:	bd80      	pop	{r7, pc}
 801660a:	bf00      	nop
 801660c:	2000c3f0 	.word	0x2000c3f0
 8016610:	0801aafc 	.word	0x0801aafc

08016614 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016614:	b580      	push	{r7, lr}
 8016616:	b082      	sub	sp, #8
 8016618:	af00      	add	r7, sp, #0
 801661a:	4603      	mov	r3, r0
 801661c:	6039      	str	r1, [r7, #0]
 801661e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8016620:	683a      	ldr	r2, [r7, #0]
 8016622:	4904      	ldr	r1, [pc, #16]	; (8016634 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8016624:	4804      	ldr	r0, [pc, #16]	; (8016638 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8016626:	f7f2 ff2c 	bl	8009482 <USBD_GetString>
  return USBD_StrDesc;
 801662a:	4b02      	ldr	r3, [pc, #8]	; (8016634 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801662c:	4618      	mov	r0, r3
 801662e:	3708      	adds	r7, #8
 8016630:	46bd      	mov	sp, r7
 8016632:	bd80      	pop	{r7, pc}
 8016634:	2000c3f0 	.word	0x2000c3f0
 8016638:	0801ab14 	.word	0x0801ab14

0801663c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801663c:	b580      	push	{r7, lr}
 801663e:	b082      	sub	sp, #8
 8016640:	af00      	add	r7, sp, #0
 8016642:	4603      	mov	r3, r0
 8016644:	6039      	str	r1, [r7, #0]
 8016646:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8016648:	683b      	ldr	r3, [r7, #0]
 801664a:	221a      	movs	r2, #26
 801664c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801664e:	f000 f843 	bl	80166d8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8016652:	4b02      	ldr	r3, [pc, #8]	; (801665c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8016654:	4618      	mov	r0, r3
 8016656:	3708      	adds	r7, #8
 8016658:	46bd      	mov	sp, r7
 801665a:	bd80      	pop	{r7, pc}
 801665c:	20000174 	.word	0x20000174

08016660 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016660:	b580      	push	{r7, lr}
 8016662:	b082      	sub	sp, #8
 8016664:	af00      	add	r7, sp, #0
 8016666:	4603      	mov	r3, r0
 8016668:	6039      	str	r1, [r7, #0]
 801666a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801666c:	79fb      	ldrb	r3, [r7, #7]
 801666e:	2b00      	cmp	r3, #0
 8016670:	d105      	bne.n	801667e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8016672:	683a      	ldr	r2, [r7, #0]
 8016674:	4907      	ldr	r1, [pc, #28]	; (8016694 <USBD_FS_ConfigStrDescriptor+0x34>)
 8016676:	4808      	ldr	r0, [pc, #32]	; (8016698 <USBD_FS_ConfigStrDescriptor+0x38>)
 8016678:	f7f2 ff03 	bl	8009482 <USBD_GetString>
 801667c:	e004      	b.n	8016688 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801667e:	683a      	ldr	r2, [r7, #0]
 8016680:	4904      	ldr	r1, [pc, #16]	; (8016694 <USBD_FS_ConfigStrDescriptor+0x34>)
 8016682:	4805      	ldr	r0, [pc, #20]	; (8016698 <USBD_FS_ConfigStrDescriptor+0x38>)
 8016684:	f7f2 fefd 	bl	8009482 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016688:	4b02      	ldr	r3, [pc, #8]	; (8016694 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801668a:	4618      	mov	r0, r3
 801668c:	3708      	adds	r7, #8
 801668e:	46bd      	mov	sp, r7
 8016690:	bd80      	pop	{r7, pc}
 8016692:	bf00      	nop
 8016694:	2000c3f0 	.word	0x2000c3f0
 8016698:	0801ab28 	.word	0x0801ab28

0801669c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801669c:	b580      	push	{r7, lr}
 801669e:	b082      	sub	sp, #8
 80166a0:	af00      	add	r7, sp, #0
 80166a2:	4603      	mov	r3, r0
 80166a4:	6039      	str	r1, [r7, #0]
 80166a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80166a8:	79fb      	ldrb	r3, [r7, #7]
 80166aa:	2b00      	cmp	r3, #0
 80166ac:	d105      	bne.n	80166ba <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80166ae:	683a      	ldr	r2, [r7, #0]
 80166b0:	4907      	ldr	r1, [pc, #28]	; (80166d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80166b2:	4808      	ldr	r0, [pc, #32]	; (80166d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80166b4:	f7f2 fee5 	bl	8009482 <USBD_GetString>
 80166b8:	e004      	b.n	80166c4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80166ba:	683a      	ldr	r2, [r7, #0]
 80166bc:	4904      	ldr	r1, [pc, #16]	; (80166d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80166be:	4805      	ldr	r0, [pc, #20]	; (80166d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80166c0:	f7f2 fedf 	bl	8009482 <USBD_GetString>
  }
  return USBD_StrDesc;
 80166c4:	4b02      	ldr	r3, [pc, #8]	; (80166d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80166c6:	4618      	mov	r0, r3
 80166c8:	3708      	adds	r7, #8
 80166ca:	46bd      	mov	sp, r7
 80166cc:	bd80      	pop	{r7, pc}
 80166ce:	bf00      	nop
 80166d0:	2000c3f0 	.word	0x2000c3f0
 80166d4:	0801ab34 	.word	0x0801ab34

080166d8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80166d8:	b580      	push	{r7, lr}
 80166da:	b084      	sub	sp, #16
 80166dc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80166de:	4b0f      	ldr	r3, [pc, #60]	; (801671c <Get_SerialNum+0x44>)
 80166e0:	681b      	ldr	r3, [r3, #0]
 80166e2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80166e4:	4b0e      	ldr	r3, [pc, #56]	; (8016720 <Get_SerialNum+0x48>)
 80166e6:	681b      	ldr	r3, [r3, #0]
 80166e8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80166ea:	4b0e      	ldr	r3, [pc, #56]	; (8016724 <Get_SerialNum+0x4c>)
 80166ec:	681b      	ldr	r3, [r3, #0]
 80166ee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80166f0:	68fa      	ldr	r2, [r7, #12]
 80166f2:	687b      	ldr	r3, [r7, #4]
 80166f4:	4413      	add	r3, r2
 80166f6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80166f8:	68fb      	ldr	r3, [r7, #12]
 80166fa:	2b00      	cmp	r3, #0
 80166fc:	d009      	beq.n	8016712 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80166fe:	2208      	movs	r2, #8
 8016700:	4909      	ldr	r1, [pc, #36]	; (8016728 <Get_SerialNum+0x50>)
 8016702:	68f8      	ldr	r0, [r7, #12]
 8016704:	f000 f814 	bl	8016730 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8016708:	2204      	movs	r2, #4
 801670a:	4908      	ldr	r1, [pc, #32]	; (801672c <Get_SerialNum+0x54>)
 801670c:	68b8      	ldr	r0, [r7, #8]
 801670e:	f000 f80f 	bl	8016730 <IntToUnicode>
  }
}
 8016712:	bf00      	nop
 8016714:	3710      	adds	r7, #16
 8016716:	46bd      	mov	sp, r7
 8016718:	bd80      	pop	{r7, pc}
 801671a:	bf00      	nop
 801671c:	1fff7a10 	.word	0x1fff7a10
 8016720:	1fff7a14 	.word	0x1fff7a14
 8016724:	1fff7a18 	.word	0x1fff7a18
 8016728:	20000176 	.word	0x20000176
 801672c:	20000186 	.word	0x20000186

08016730 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8016730:	b480      	push	{r7}
 8016732:	b087      	sub	sp, #28
 8016734:	af00      	add	r7, sp, #0
 8016736:	60f8      	str	r0, [r7, #12]
 8016738:	60b9      	str	r1, [r7, #8]
 801673a:	4613      	mov	r3, r2
 801673c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801673e:	2300      	movs	r3, #0
 8016740:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8016742:	2300      	movs	r3, #0
 8016744:	75fb      	strb	r3, [r7, #23]
 8016746:	e027      	b.n	8016798 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8016748:	68fb      	ldr	r3, [r7, #12]
 801674a:	0f1b      	lsrs	r3, r3, #28
 801674c:	2b09      	cmp	r3, #9
 801674e:	d80b      	bhi.n	8016768 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8016750:	68fb      	ldr	r3, [r7, #12]
 8016752:	0f1b      	lsrs	r3, r3, #28
 8016754:	b2da      	uxtb	r2, r3
 8016756:	7dfb      	ldrb	r3, [r7, #23]
 8016758:	005b      	lsls	r3, r3, #1
 801675a:	4619      	mov	r1, r3
 801675c:	68bb      	ldr	r3, [r7, #8]
 801675e:	440b      	add	r3, r1
 8016760:	3230      	adds	r2, #48	; 0x30
 8016762:	b2d2      	uxtb	r2, r2
 8016764:	701a      	strb	r2, [r3, #0]
 8016766:	e00a      	b.n	801677e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8016768:	68fb      	ldr	r3, [r7, #12]
 801676a:	0f1b      	lsrs	r3, r3, #28
 801676c:	b2da      	uxtb	r2, r3
 801676e:	7dfb      	ldrb	r3, [r7, #23]
 8016770:	005b      	lsls	r3, r3, #1
 8016772:	4619      	mov	r1, r3
 8016774:	68bb      	ldr	r3, [r7, #8]
 8016776:	440b      	add	r3, r1
 8016778:	3237      	adds	r2, #55	; 0x37
 801677a:	b2d2      	uxtb	r2, r2
 801677c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801677e:	68fb      	ldr	r3, [r7, #12]
 8016780:	011b      	lsls	r3, r3, #4
 8016782:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016784:	7dfb      	ldrb	r3, [r7, #23]
 8016786:	005b      	lsls	r3, r3, #1
 8016788:	3301      	adds	r3, #1
 801678a:	68ba      	ldr	r2, [r7, #8]
 801678c:	4413      	add	r3, r2
 801678e:	2200      	movs	r2, #0
 8016790:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8016792:	7dfb      	ldrb	r3, [r7, #23]
 8016794:	3301      	adds	r3, #1
 8016796:	75fb      	strb	r3, [r7, #23]
 8016798:	7dfa      	ldrb	r2, [r7, #23]
 801679a:	79fb      	ldrb	r3, [r7, #7]
 801679c:	429a      	cmp	r2, r3
 801679e:	d3d3      	bcc.n	8016748 <IntToUnicode+0x18>
  }
}
 80167a0:	bf00      	nop
 80167a2:	bf00      	nop
 80167a4:	371c      	adds	r7, #28
 80167a6:	46bd      	mov	sp, r7
 80167a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167ac:	4770      	bx	lr
	...

080167b0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80167b0:	b580      	push	{r7, lr}
 80167b2:	b08a      	sub	sp, #40	; 0x28
 80167b4:	af00      	add	r7, sp, #0
 80167b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80167b8:	f107 0314 	add.w	r3, r7, #20
 80167bc:	2200      	movs	r2, #0
 80167be:	601a      	str	r2, [r3, #0]
 80167c0:	605a      	str	r2, [r3, #4]
 80167c2:	609a      	str	r2, [r3, #8]
 80167c4:	60da      	str	r2, [r3, #12]
 80167c6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80167c8:	687b      	ldr	r3, [r7, #4]
 80167ca:	681b      	ldr	r3, [r3, #0]
 80167cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80167d0:	d147      	bne.n	8016862 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80167d2:	2300      	movs	r3, #0
 80167d4:	613b      	str	r3, [r7, #16]
 80167d6:	4b25      	ldr	r3, [pc, #148]	; (801686c <HAL_PCD_MspInit+0xbc>)
 80167d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80167da:	4a24      	ldr	r2, [pc, #144]	; (801686c <HAL_PCD_MspInit+0xbc>)
 80167dc:	f043 0301 	orr.w	r3, r3, #1
 80167e0:	6313      	str	r3, [r2, #48]	; 0x30
 80167e2:	4b22      	ldr	r3, [pc, #136]	; (801686c <HAL_PCD_MspInit+0xbc>)
 80167e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80167e6:	f003 0301 	and.w	r3, r3, #1
 80167ea:	613b      	str	r3, [r7, #16]
 80167ec:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80167ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80167f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80167f4:	2300      	movs	r3, #0
 80167f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80167f8:	2300      	movs	r3, #0
 80167fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80167fc:	f107 0314 	add.w	r3, r7, #20
 8016800:	4619      	mov	r1, r3
 8016802:	481b      	ldr	r0, [pc, #108]	; (8016870 <HAL_PCD_MspInit+0xc0>)
 8016804:	f7eb ff94 	bl	8002730 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8016808:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801680c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801680e:	2302      	movs	r3, #2
 8016810:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016812:	2300      	movs	r3, #0
 8016814:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016816:	2303      	movs	r3, #3
 8016818:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801681a:	230a      	movs	r3, #10
 801681c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801681e:	f107 0314 	add.w	r3, r7, #20
 8016822:	4619      	mov	r1, r3
 8016824:	4812      	ldr	r0, [pc, #72]	; (8016870 <HAL_PCD_MspInit+0xc0>)
 8016826:	f7eb ff83 	bl	8002730 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801682a:	4b10      	ldr	r3, [pc, #64]	; (801686c <HAL_PCD_MspInit+0xbc>)
 801682c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801682e:	4a0f      	ldr	r2, [pc, #60]	; (801686c <HAL_PCD_MspInit+0xbc>)
 8016830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016834:	6353      	str	r3, [r2, #52]	; 0x34
 8016836:	2300      	movs	r3, #0
 8016838:	60fb      	str	r3, [r7, #12]
 801683a:	4b0c      	ldr	r3, [pc, #48]	; (801686c <HAL_PCD_MspInit+0xbc>)
 801683c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801683e:	4a0b      	ldr	r2, [pc, #44]	; (801686c <HAL_PCD_MspInit+0xbc>)
 8016840:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8016844:	6453      	str	r3, [r2, #68]	; 0x44
 8016846:	4b09      	ldr	r3, [pc, #36]	; (801686c <HAL_PCD_MspInit+0xbc>)
 8016848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801684a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801684e:	60fb      	str	r3, [r7, #12]
 8016850:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8016852:	2200      	movs	r2, #0
 8016854:	2105      	movs	r1, #5
 8016856:	2043      	movs	r0, #67	; 0x43
 8016858:	f7ea ff2e 	bl	80016b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801685c:	2043      	movs	r0, #67	; 0x43
 801685e:	f7ea ff47 	bl	80016f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8016862:	bf00      	nop
 8016864:	3728      	adds	r7, #40	; 0x28
 8016866:	46bd      	mov	sp, r7
 8016868:	bd80      	pop	{r7, pc}
 801686a:	bf00      	nop
 801686c:	40023800 	.word	0x40023800
 8016870:	40020000 	.word	0x40020000

08016874 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016874:	b580      	push	{r7, lr}
 8016876:	b082      	sub	sp, #8
 8016878:	af00      	add	r7, sp, #0
 801687a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8016882:	687b      	ldr	r3, [r7, #4]
 8016884:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8016888:	4619      	mov	r1, r3
 801688a:	4610      	mov	r0, r2
 801688c:	f7f1 fe12 	bl	80084b4 <USBD_LL_SetupStage>
}
 8016890:	bf00      	nop
 8016892:	3708      	adds	r7, #8
 8016894:	46bd      	mov	sp, r7
 8016896:	bd80      	pop	{r7, pc}

08016898 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016898:	b580      	push	{r7, lr}
 801689a:	b082      	sub	sp, #8
 801689c:	af00      	add	r7, sp, #0
 801689e:	6078      	str	r0, [r7, #4]
 80168a0:	460b      	mov	r3, r1
 80168a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80168a4:	687b      	ldr	r3, [r7, #4]
 80168a6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80168aa:	78fa      	ldrb	r2, [r7, #3]
 80168ac:	6879      	ldr	r1, [r7, #4]
 80168ae:	4613      	mov	r3, r2
 80168b0:	00db      	lsls	r3, r3, #3
 80168b2:	1a9b      	subs	r3, r3, r2
 80168b4:	009b      	lsls	r3, r3, #2
 80168b6:	440b      	add	r3, r1
 80168b8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80168bc:	681a      	ldr	r2, [r3, #0]
 80168be:	78fb      	ldrb	r3, [r7, #3]
 80168c0:	4619      	mov	r1, r3
 80168c2:	f7f1 fe4c 	bl	800855e <USBD_LL_DataOutStage>
}
 80168c6:	bf00      	nop
 80168c8:	3708      	adds	r7, #8
 80168ca:	46bd      	mov	sp, r7
 80168cc:	bd80      	pop	{r7, pc}

080168ce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80168ce:	b580      	push	{r7, lr}
 80168d0:	b082      	sub	sp, #8
 80168d2:	af00      	add	r7, sp, #0
 80168d4:	6078      	str	r0, [r7, #4]
 80168d6:	460b      	mov	r3, r1
 80168d8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80168e0:	78fa      	ldrb	r2, [r7, #3]
 80168e2:	6879      	ldr	r1, [r7, #4]
 80168e4:	4613      	mov	r3, r2
 80168e6:	00db      	lsls	r3, r3, #3
 80168e8:	1a9b      	subs	r3, r3, r2
 80168ea:	009b      	lsls	r3, r3, #2
 80168ec:	440b      	add	r3, r1
 80168ee:	3348      	adds	r3, #72	; 0x48
 80168f0:	681a      	ldr	r2, [r3, #0]
 80168f2:	78fb      	ldrb	r3, [r7, #3]
 80168f4:	4619      	mov	r1, r3
 80168f6:	f7f1 fe95 	bl	8008624 <USBD_LL_DataInStage>
}
 80168fa:	bf00      	nop
 80168fc:	3708      	adds	r7, #8
 80168fe:	46bd      	mov	sp, r7
 8016900:	bd80      	pop	{r7, pc}

08016902 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016902:	b580      	push	{r7, lr}
 8016904:	b082      	sub	sp, #8
 8016906:	af00      	add	r7, sp, #0
 8016908:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801690a:	687b      	ldr	r3, [r7, #4]
 801690c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016910:	4618      	mov	r0, r3
 8016912:	f7f1 ffa9 	bl	8008868 <USBD_LL_SOF>
}
 8016916:	bf00      	nop
 8016918:	3708      	adds	r7, #8
 801691a:	46bd      	mov	sp, r7
 801691c:	bd80      	pop	{r7, pc}

0801691e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801691e:	b580      	push	{r7, lr}
 8016920:	b084      	sub	sp, #16
 8016922:	af00      	add	r7, sp, #0
 8016924:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8016926:	2301      	movs	r3, #1
 8016928:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801692a:	687b      	ldr	r3, [r7, #4]
 801692c:	68db      	ldr	r3, [r3, #12]
 801692e:	2b00      	cmp	r3, #0
 8016930:	d102      	bne.n	8016938 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8016932:	2300      	movs	r3, #0
 8016934:	73fb      	strb	r3, [r7, #15]
 8016936:	e008      	b.n	801694a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	68db      	ldr	r3, [r3, #12]
 801693c:	2b02      	cmp	r3, #2
 801693e:	d102      	bne.n	8016946 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8016940:	2301      	movs	r3, #1
 8016942:	73fb      	strb	r3, [r7, #15]
 8016944:	e001      	b.n	801694a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8016946:	f7ea facf 	bl	8000ee8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801694a:	687b      	ldr	r3, [r7, #4]
 801694c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016950:	7bfa      	ldrb	r2, [r7, #15]
 8016952:	4611      	mov	r1, r2
 8016954:	4618      	mov	r0, r3
 8016956:	f7f1 ff49 	bl	80087ec <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801695a:	687b      	ldr	r3, [r7, #4]
 801695c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016960:	4618      	mov	r0, r3
 8016962:	f7f1 fef5 	bl	8008750 <USBD_LL_Reset>
}
 8016966:	bf00      	nop
 8016968:	3710      	adds	r7, #16
 801696a:	46bd      	mov	sp, r7
 801696c:	bd80      	pop	{r7, pc}
	...

08016970 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016970:	b580      	push	{r7, lr}
 8016972:	b082      	sub	sp, #8
 8016974:	af00      	add	r7, sp, #0
 8016976:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8016978:	687b      	ldr	r3, [r7, #4]
 801697a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801697e:	4618      	mov	r0, r3
 8016980:	f7f1 ff44 	bl	800880c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8016984:	687b      	ldr	r3, [r7, #4]
 8016986:	681b      	ldr	r3, [r3, #0]
 8016988:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801698c:	681b      	ldr	r3, [r3, #0]
 801698e:	687a      	ldr	r2, [r7, #4]
 8016990:	6812      	ldr	r2, [r2, #0]
 8016992:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8016996:	f043 0301 	orr.w	r3, r3, #1
 801699a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801699c:	687b      	ldr	r3, [r7, #4]
 801699e:	6a1b      	ldr	r3, [r3, #32]
 80169a0:	2b00      	cmp	r3, #0
 80169a2:	d005      	beq.n	80169b0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80169a4:	4b04      	ldr	r3, [pc, #16]	; (80169b8 <HAL_PCD_SuspendCallback+0x48>)
 80169a6:	691b      	ldr	r3, [r3, #16]
 80169a8:	4a03      	ldr	r2, [pc, #12]	; (80169b8 <HAL_PCD_SuspendCallback+0x48>)
 80169aa:	f043 0306 	orr.w	r3, r3, #6
 80169ae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80169b0:	bf00      	nop
 80169b2:	3708      	adds	r7, #8
 80169b4:	46bd      	mov	sp, r7
 80169b6:	bd80      	pop	{r7, pc}
 80169b8:	e000ed00 	.word	0xe000ed00

080169bc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80169bc:	b580      	push	{r7, lr}
 80169be:	b082      	sub	sp, #8
 80169c0:	af00      	add	r7, sp, #0
 80169c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80169c4:	687b      	ldr	r3, [r7, #4]
 80169c6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80169ca:	4618      	mov	r0, r3
 80169cc:	f7f1 ff34 	bl	8008838 <USBD_LL_Resume>
}
 80169d0:	bf00      	nop
 80169d2:	3708      	adds	r7, #8
 80169d4:	46bd      	mov	sp, r7
 80169d6:	bd80      	pop	{r7, pc}

080169d8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80169d8:	b580      	push	{r7, lr}
 80169da:	b082      	sub	sp, #8
 80169dc:	af00      	add	r7, sp, #0
 80169de:	6078      	str	r0, [r7, #4]
 80169e0:	460b      	mov	r3, r1
 80169e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80169e4:	687b      	ldr	r3, [r7, #4]
 80169e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80169ea:	78fa      	ldrb	r2, [r7, #3]
 80169ec:	4611      	mov	r1, r2
 80169ee:	4618      	mov	r0, r3
 80169f0:	f7f1 ff82 	bl	80088f8 <USBD_LL_IsoOUTIncomplete>
}
 80169f4:	bf00      	nop
 80169f6:	3708      	adds	r7, #8
 80169f8:	46bd      	mov	sp, r7
 80169fa:	bd80      	pop	{r7, pc}

080169fc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80169fc:	b580      	push	{r7, lr}
 80169fe:	b082      	sub	sp, #8
 8016a00:	af00      	add	r7, sp, #0
 8016a02:	6078      	str	r0, [r7, #4]
 8016a04:	460b      	mov	r3, r1
 8016a06:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016a08:	687b      	ldr	r3, [r7, #4]
 8016a0a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016a0e:	78fa      	ldrb	r2, [r7, #3]
 8016a10:	4611      	mov	r1, r2
 8016a12:	4618      	mov	r0, r3
 8016a14:	f7f1 ff4a 	bl	80088ac <USBD_LL_IsoINIncomplete>
}
 8016a18:	bf00      	nop
 8016a1a:	3708      	adds	r7, #8
 8016a1c:	46bd      	mov	sp, r7
 8016a1e:	bd80      	pop	{r7, pc}

08016a20 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016a20:	b580      	push	{r7, lr}
 8016a22:	b082      	sub	sp, #8
 8016a24:	af00      	add	r7, sp, #0
 8016a26:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8016a28:	687b      	ldr	r3, [r7, #4]
 8016a2a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016a2e:	4618      	mov	r0, r3
 8016a30:	f7f1 ff88 	bl	8008944 <USBD_LL_DevConnected>
}
 8016a34:	bf00      	nop
 8016a36:	3708      	adds	r7, #8
 8016a38:	46bd      	mov	sp, r7
 8016a3a:	bd80      	pop	{r7, pc}

08016a3c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016a3c:	b580      	push	{r7, lr}
 8016a3e:	b082      	sub	sp, #8
 8016a40:	af00      	add	r7, sp, #0
 8016a42:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8016a44:	687b      	ldr	r3, [r7, #4]
 8016a46:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016a4a:	4618      	mov	r0, r3
 8016a4c:	f7f1 ff85 	bl	800895a <USBD_LL_DevDisconnected>
}
 8016a50:	bf00      	nop
 8016a52:	3708      	adds	r7, #8
 8016a54:	46bd      	mov	sp, r7
 8016a56:	bd80      	pop	{r7, pc}

08016a58 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8016a58:	b580      	push	{r7, lr}
 8016a5a:	b082      	sub	sp, #8
 8016a5c:	af00      	add	r7, sp, #0
 8016a5e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8016a60:	687b      	ldr	r3, [r7, #4]
 8016a62:	781b      	ldrb	r3, [r3, #0]
 8016a64:	2b00      	cmp	r3, #0
 8016a66:	d13c      	bne.n	8016ae2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8016a68:	4a20      	ldr	r2, [pc, #128]	; (8016aec <USBD_LL_Init+0x94>)
 8016a6a:	687b      	ldr	r3, [r7, #4]
 8016a6c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8016a70:	687b      	ldr	r3, [r7, #4]
 8016a72:	4a1e      	ldr	r2, [pc, #120]	; (8016aec <USBD_LL_Init+0x94>)
 8016a74:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8016a78:	4b1c      	ldr	r3, [pc, #112]	; (8016aec <USBD_LL_Init+0x94>)
 8016a7a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8016a7e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8016a80:	4b1a      	ldr	r3, [pc, #104]	; (8016aec <USBD_LL_Init+0x94>)
 8016a82:	2204      	movs	r2, #4
 8016a84:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8016a86:	4b19      	ldr	r3, [pc, #100]	; (8016aec <USBD_LL_Init+0x94>)
 8016a88:	2202      	movs	r2, #2
 8016a8a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8016a8c:	4b17      	ldr	r3, [pc, #92]	; (8016aec <USBD_LL_Init+0x94>)
 8016a8e:	2200      	movs	r2, #0
 8016a90:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8016a92:	4b16      	ldr	r3, [pc, #88]	; (8016aec <USBD_LL_Init+0x94>)
 8016a94:	2202      	movs	r2, #2
 8016a96:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8016a98:	4b14      	ldr	r3, [pc, #80]	; (8016aec <USBD_LL_Init+0x94>)
 8016a9a:	2200      	movs	r2, #0
 8016a9c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8016a9e:	4b13      	ldr	r3, [pc, #76]	; (8016aec <USBD_LL_Init+0x94>)
 8016aa0:	2200      	movs	r2, #0
 8016aa2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8016aa4:	4b11      	ldr	r3, [pc, #68]	; (8016aec <USBD_LL_Init+0x94>)
 8016aa6:	2200      	movs	r2, #0
 8016aa8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8016aaa:	4b10      	ldr	r3, [pc, #64]	; (8016aec <USBD_LL_Init+0x94>)
 8016aac:	2201      	movs	r2, #1
 8016aae:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8016ab0:	4b0e      	ldr	r3, [pc, #56]	; (8016aec <USBD_LL_Init+0x94>)
 8016ab2:	2200      	movs	r2, #0
 8016ab4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8016ab6:	480d      	ldr	r0, [pc, #52]	; (8016aec <USBD_LL_Init+0x94>)
 8016ab8:	f7ec f808 	bl	8002acc <HAL_PCD_Init>
 8016abc:	4603      	mov	r3, r0
 8016abe:	2b00      	cmp	r3, #0
 8016ac0:	d001      	beq.n	8016ac6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8016ac2:	f7ea fa11 	bl	8000ee8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8016ac6:	2180      	movs	r1, #128	; 0x80
 8016ac8:	4808      	ldr	r0, [pc, #32]	; (8016aec <USBD_LL_Init+0x94>)
 8016aca:	f7ed f966 	bl	8003d9a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8016ace:	2240      	movs	r2, #64	; 0x40
 8016ad0:	2100      	movs	r1, #0
 8016ad2:	4806      	ldr	r0, [pc, #24]	; (8016aec <USBD_LL_Init+0x94>)
 8016ad4:	f7ed f91a 	bl	8003d0c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8016ad8:	2280      	movs	r2, #128	; 0x80
 8016ada:	2101      	movs	r1, #1
 8016adc:	4803      	ldr	r0, [pc, #12]	; (8016aec <USBD_LL_Init+0x94>)
 8016ade:	f7ed f915 	bl	8003d0c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8016ae2:	2300      	movs	r3, #0
}
 8016ae4:	4618      	mov	r0, r3
 8016ae6:	3708      	adds	r7, #8
 8016ae8:	46bd      	mov	sp, r7
 8016aea:	bd80      	pop	{r7, pc}
 8016aec:	2000c5f0 	.word	0x2000c5f0

08016af0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016af0:	b580      	push	{r7, lr}
 8016af2:	b084      	sub	sp, #16
 8016af4:	af00      	add	r7, sp, #0
 8016af6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016af8:	2300      	movs	r3, #0
 8016afa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016afc:	2300      	movs	r3, #0
 8016afe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8016b00:	687b      	ldr	r3, [r7, #4]
 8016b02:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016b06:	4618      	mov	r0, r3
 8016b08:	f7ec f8fd 	bl	8002d06 <HAL_PCD_Start>
 8016b0c:	4603      	mov	r3, r0
 8016b0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016b10:	7bfb      	ldrb	r3, [r7, #15]
 8016b12:	4618      	mov	r0, r3
 8016b14:	f000 f942 	bl	8016d9c <USBD_Get_USB_Status>
 8016b18:	4603      	mov	r3, r0
 8016b1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016b1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8016b1e:	4618      	mov	r0, r3
 8016b20:	3710      	adds	r7, #16
 8016b22:	46bd      	mov	sp, r7
 8016b24:	bd80      	pop	{r7, pc}

08016b26 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8016b26:	b580      	push	{r7, lr}
 8016b28:	b084      	sub	sp, #16
 8016b2a:	af00      	add	r7, sp, #0
 8016b2c:	6078      	str	r0, [r7, #4]
 8016b2e:	4608      	mov	r0, r1
 8016b30:	4611      	mov	r1, r2
 8016b32:	461a      	mov	r2, r3
 8016b34:	4603      	mov	r3, r0
 8016b36:	70fb      	strb	r3, [r7, #3]
 8016b38:	460b      	mov	r3, r1
 8016b3a:	70bb      	strb	r3, [r7, #2]
 8016b3c:	4613      	mov	r3, r2
 8016b3e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016b40:	2300      	movs	r3, #0
 8016b42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016b44:	2300      	movs	r3, #0
 8016b46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016b48:	687b      	ldr	r3, [r7, #4]
 8016b4a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016b4e:	78bb      	ldrb	r3, [r7, #2]
 8016b50:	883a      	ldrh	r2, [r7, #0]
 8016b52:	78f9      	ldrb	r1, [r7, #3]
 8016b54:	f7ec fce1 	bl	800351a <HAL_PCD_EP_Open>
 8016b58:	4603      	mov	r3, r0
 8016b5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016b5c:	7bfb      	ldrb	r3, [r7, #15]
 8016b5e:	4618      	mov	r0, r3
 8016b60:	f000 f91c 	bl	8016d9c <USBD_Get_USB_Status>
 8016b64:	4603      	mov	r3, r0
 8016b66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016b68:	7bbb      	ldrb	r3, [r7, #14]
}
 8016b6a:	4618      	mov	r0, r3
 8016b6c:	3710      	adds	r7, #16
 8016b6e:	46bd      	mov	sp, r7
 8016b70:	bd80      	pop	{r7, pc}

08016b72 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016b72:	b580      	push	{r7, lr}
 8016b74:	b084      	sub	sp, #16
 8016b76:	af00      	add	r7, sp, #0
 8016b78:	6078      	str	r0, [r7, #4]
 8016b7a:	460b      	mov	r3, r1
 8016b7c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016b7e:	2300      	movs	r3, #0
 8016b80:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016b82:	2300      	movs	r3, #0
 8016b84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8016b86:	687b      	ldr	r3, [r7, #4]
 8016b88:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016b8c:	78fa      	ldrb	r2, [r7, #3]
 8016b8e:	4611      	mov	r1, r2
 8016b90:	4618      	mov	r0, r3
 8016b92:	f7ec fd2a 	bl	80035ea <HAL_PCD_EP_Close>
 8016b96:	4603      	mov	r3, r0
 8016b98:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016b9a:	7bfb      	ldrb	r3, [r7, #15]
 8016b9c:	4618      	mov	r0, r3
 8016b9e:	f000 f8fd 	bl	8016d9c <USBD_Get_USB_Status>
 8016ba2:	4603      	mov	r3, r0
 8016ba4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016ba6:	7bbb      	ldrb	r3, [r7, #14]
}
 8016ba8:	4618      	mov	r0, r3
 8016baa:	3710      	adds	r7, #16
 8016bac:	46bd      	mov	sp, r7
 8016bae:	bd80      	pop	{r7, pc}

08016bb0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016bb0:	b580      	push	{r7, lr}
 8016bb2:	b084      	sub	sp, #16
 8016bb4:	af00      	add	r7, sp, #0
 8016bb6:	6078      	str	r0, [r7, #4]
 8016bb8:	460b      	mov	r3, r1
 8016bba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016bbc:	2300      	movs	r3, #0
 8016bbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016bc0:	2300      	movs	r3, #0
 8016bc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016bc4:	687b      	ldr	r3, [r7, #4]
 8016bc6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016bca:	78fa      	ldrb	r2, [r7, #3]
 8016bcc:	4611      	mov	r1, r2
 8016bce:	4618      	mov	r0, r3
 8016bd0:	f7ec fe02 	bl	80037d8 <HAL_PCD_EP_SetStall>
 8016bd4:	4603      	mov	r3, r0
 8016bd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016bd8:	7bfb      	ldrb	r3, [r7, #15]
 8016bda:	4618      	mov	r0, r3
 8016bdc:	f000 f8de 	bl	8016d9c <USBD_Get_USB_Status>
 8016be0:	4603      	mov	r3, r0
 8016be2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016be4:	7bbb      	ldrb	r3, [r7, #14]
}
 8016be6:	4618      	mov	r0, r3
 8016be8:	3710      	adds	r7, #16
 8016bea:	46bd      	mov	sp, r7
 8016bec:	bd80      	pop	{r7, pc}

08016bee <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016bee:	b580      	push	{r7, lr}
 8016bf0:	b084      	sub	sp, #16
 8016bf2:	af00      	add	r7, sp, #0
 8016bf4:	6078      	str	r0, [r7, #4]
 8016bf6:	460b      	mov	r3, r1
 8016bf8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016bfa:	2300      	movs	r3, #0
 8016bfc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016bfe:	2300      	movs	r3, #0
 8016c00:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016c02:	687b      	ldr	r3, [r7, #4]
 8016c04:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016c08:	78fa      	ldrb	r2, [r7, #3]
 8016c0a:	4611      	mov	r1, r2
 8016c0c:	4618      	mov	r0, r3
 8016c0e:	f7ec fe47 	bl	80038a0 <HAL_PCD_EP_ClrStall>
 8016c12:	4603      	mov	r3, r0
 8016c14:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016c16:	7bfb      	ldrb	r3, [r7, #15]
 8016c18:	4618      	mov	r0, r3
 8016c1a:	f000 f8bf 	bl	8016d9c <USBD_Get_USB_Status>
 8016c1e:	4603      	mov	r3, r0
 8016c20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016c22:	7bbb      	ldrb	r3, [r7, #14]
}
 8016c24:	4618      	mov	r0, r3
 8016c26:	3710      	adds	r7, #16
 8016c28:	46bd      	mov	sp, r7
 8016c2a:	bd80      	pop	{r7, pc}

08016c2c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016c2c:	b480      	push	{r7}
 8016c2e:	b085      	sub	sp, #20
 8016c30:	af00      	add	r7, sp, #0
 8016c32:	6078      	str	r0, [r7, #4]
 8016c34:	460b      	mov	r3, r1
 8016c36:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016c38:	687b      	ldr	r3, [r7, #4]
 8016c3a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016c3e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8016c40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016c44:	2b00      	cmp	r3, #0
 8016c46:	da0b      	bge.n	8016c60 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8016c48:	78fb      	ldrb	r3, [r7, #3]
 8016c4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016c4e:	68f9      	ldr	r1, [r7, #12]
 8016c50:	4613      	mov	r3, r2
 8016c52:	00db      	lsls	r3, r3, #3
 8016c54:	1a9b      	subs	r3, r3, r2
 8016c56:	009b      	lsls	r3, r3, #2
 8016c58:	440b      	add	r3, r1
 8016c5a:	333e      	adds	r3, #62	; 0x3e
 8016c5c:	781b      	ldrb	r3, [r3, #0]
 8016c5e:	e00b      	b.n	8016c78 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8016c60:	78fb      	ldrb	r3, [r7, #3]
 8016c62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016c66:	68f9      	ldr	r1, [r7, #12]
 8016c68:	4613      	mov	r3, r2
 8016c6a:	00db      	lsls	r3, r3, #3
 8016c6c:	1a9b      	subs	r3, r3, r2
 8016c6e:	009b      	lsls	r3, r3, #2
 8016c70:	440b      	add	r3, r1
 8016c72:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016c76:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016c78:	4618      	mov	r0, r3
 8016c7a:	3714      	adds	r7, #20
 8016c7c:	46bd      	mov	sp, r7
 8016c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c82:	4770      	bx	lr

08016c84 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016c84:	b580      	push	{r7, lr}
 8016c86:	b084      	sub	sp, #16
 8016c88:	af00      	add	r7, sp, #0
 8016c8a:	6078      	str	r0, [r7, #4]
 8016c8c:	460b      	mov	r3, r1
 8016c8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016c90:	2300      	movs	r3, #0
 8016c92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016c94:	2300      	movs	r3, #0
 8016c96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016c98:	687b      	ldr	r3, [r7, #4]
 8016c9a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016c9e:	78fa      	ldrb	r2, [r7, #3]
 8016ca0:	4611      	mov	r1, r2
 8016ca2:	4618      	mov	r0, r3
 8016ca4:	f7ec fc14 	bl	80034d0 <HAL_PCD_SetAddress>
 8016ca8:	4603      	mov	r3, r0
 8016caa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016cac:	7bfb      	ldrb	r3, [r7, #15]
 8016cae:	4618      	mov	r0, r3
 8016cb0:	f000 f874 	bl	8016d9c <USBD_Get_USB_Status>
 8016cb4:	4603      	mov	r3, r0
 8016cb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016cb8:	7bbb      	ldrb	r3, [r7, #14]
}
 8016cba:	4618      	mov	r0, r3
 8016cbc:	3710      	adds	r7, #16
 8016cbe:	46bd      	mov	sp, r7
 8016cc0:	bd80      	pop	{r7, pc}

08016cc2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016cc2:	b580      	push	{r7, lr}
 8016cc4:	b086      	sub	sp, #24
 8016cc6:	af00      	add	r7, sp, #0
 8016cc8:	60f8      	str	r0, [r7, #12]
 8016cca:	607a      	str	r2, [r7, #4]
 8016ccc:	603b      	str	r3, [r7, #0]
 8016cce:	460b      	mov	r3, r1
 8016cd0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016cd2:	2300      	movs	r3, #0
 8016cd4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016cd6:	2300      	movs	r3, #0
 8016cd8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016cda:	68fb      	ldr	r3, [r7, #12]
 8016cdc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016ce0:	7af9      	ldrb	r1, [r7, #11]
 8016ce2:	683b      	ldr	r3, [r7, #0]
 8016ce4:	687a      	ldr	r2, [r7, #4]
 8016ce6:	f7ec fd2d 	bl	8003744 <HAL_PCD_EP_Transmit>
 8016cea:	4603      	mov	r3, r0
 8016cec:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016cee:	7dfb      	ldrb	r3, [r7, #23]
 8016cf0:	4618      	mov	r0, r3
 8016cf2:	f000 f853 	bl	8016d9c <USBD_Get_USB_Status>
 8016cf6:	4603      	mov	r3, r0
 8016cf8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016cfa:	7dbb      	ldrb	r3, [r7, #22]
}
 8016cfc:	4618      	mov	r0, r3
 8016cfe:	3718      	adds	r7, #24
 8016d00:	46bd      	mov	sp, r7
 8016d02:	bd80      	pop	{r7, pc}

08016d04 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016d04:	b580      	push	{r7, lr}
 8016d06:	b086      	sub	sp, #24
 8016d08:	af00      	add	r7, sp, #0
 8016d0a:	60f8      	str	r0, [r7, #12]
 8016d0c:	607a      	str	r2, [r7, #4]
 8016d0e:	603b      	str	r3, [r7, #0]
 8016d10:	460b      	mov	r3, r1
 8016d12:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016d14:	2300      	movs	r3, #0
 8016d16:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016d18:	2300      	movs	r3, #0
 8016d1a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016d1c:	68fb      	ldr	r3, [r7, #12]
 8016d1e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016d22:	7af9      	ldrb	r1, [r7, #11]
 8016d24:	683b      	ldr	r3, [r7, #0]
 8016d26:	687a      	ldr	r2, [r7, #4]
 8016d28:	f7ec fca9 	bl	800367e <HAL_PCD_EP_Receive>
 8016d2c:	4603      	mov	r3, r0
 8016d2e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016d30:	7dfb      	ldrb	r3, [r7, #23]
 8016d32:	4618      	mov	r0, r3
 8016d34:	f000 f832 	bl	8016d9c <USBD_Get_USB_Status>
 8016d38:	4603      	mov	r3, r0
 8016d3a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016d3c:	7dbb      	ldrb	r3, [r7, #22]
}
 8016d3e:	4618      	mov	r0, r3
 8016d40:	3718      	adds	r7, #24
 8016d42:	46bd      	mov	sp, r7
 8016d44:	bd80      	pop	{r7, pc}

08016d46 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016d46:	b580      	push	{r7, lr}
 8016d48:	b082      	sub	sp, #8
 8016d4a:	af00      	add	r7, sp, #0
 8016d4c:	6078      	str	r0, [r7, #4]
 8016d4e:	460b      	mov	r3, r1
 8016d50:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016d52:	687b      	ldr	r3, [r7, #4]
 8016d54:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016d58:	78fa      	ldrb	r2, [r7, #3]
 8016d5a:	4611      	mov	r1, r2
 8016d5c:	4618      	mov	r0, r3
 8016d5e:	f7ec fcd9 	bl	8003714 <HAL_PCD_EP_GetRxCount>
 8016d62:	4603      	mov	r3, r0
}
 8016d64:	4618      	mov	r0, r3
 8016d66:	3708      	adds	r7, #8
 8016d68:	46bd      	mov	sp, r7
 8016d6a:	bd80      	pop	{r7, pc}

08016d6c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8016d6c:	b480      	push	{r7}
 8016d6e:	b083      	sub	sp, #12
 8016d70:	af00      	add	r7, sp, #0
 8016d72:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8016d74:	4b03      	ldr	r3, [pc, #12]	; (8016d84 <USBD_static_malloc+0x18>)
}
 8016d76:	4618      	mov	r0, r3
 8016d78:	370c      	adds	r7, #12
 8016d7a:	46bd      	mov	sp, r7
 8016d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d80:	4770      	bx	lr
 8016d82:	bf00      	nop
 8016d84:	20004380 	.word	0x20004380

08016d88 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8016d88:	b480      	push	{r7}
 8016d8a:	b083      	sub	sp, #12
 8016d8c:	af00      	add	r7, sp, #0
 8016d8e:	6078      	str	r0, [r7, #4]

}
 8016d90:	bf00      	nop
 8016d92:	370c      	adds	r7, #12
 8016d94:	46bd      	mov	sp, r7
 8016d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d9a:	4770      	bx	lr

08016d9c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016d9c:	b480      	push	{r7}
 8016d9e:	b085      	sub	sp, #20
 8016da0:	af00      	add	r7, sp, #0
 8016da2:	4603      	mov	r3, r0
 8016da4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016da6:	2300      	movs	r3, #0
 8016da8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016daa:	79fb      	ldrb	r3, [r7, #7]
 8016dac:	2b03      	cmp	r3, #3
 8016dae:	d817      	bhi.n	8016de0 <USBD_Get_USB_Status+0x44>
 8016db0:	a201      	add	r2, pc, #4	; (adr r2, 8016db8 <USBD_Get_USB_Status+0x1c>)
 8016db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016db6:	bf00      	nop
 8016db8:	08016dc9 	.word	0x08016dc9
 8016dbc:	08016dcf 	.word	0x08016dcf
 8016dc0:	08016dd5 	.word	0x08016dd5
 8016dc4:	08016ddb 	.word	0x08016ddb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016dc8:	2300      	movs	r3, #0
 8016dca:	73fb      	strb	r3, [r7, #15]
    break;
 8016dcc:	e00b      	b.n	8016de6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016dce:	2303      	movs	r3, #3
 8016dd0:	73fb      	strb	r3, [r7, #15]
    break;
 8016dd2:	e008      	b.n	8016de6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016dd4:	2301      	movs	r3, #1
 8016dd6:	73fb      	strb	r3, [r7, #15]
    break;
 8016dd8:	e005      	b.n	8016de6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016dda:	2303      	movs	r3, #3
 8016ddc:	73fb      	strb	r3, [r7, #15]
    break;
 8016dde:	e002      	b.n	8016de6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8016de0:	2303      	movs	r3, #3
 8016de2:	73fb      	strb	r3, [r7, #15]
    break;
 8016de4:	bf00      	nop
  }
  return usb_status;
 8016de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8016de8:	4618      	mov	r0, r3
 8016dea:	3714      	adds	r7, #20
 8016dec:	46bd      	mov	sp, r7
 8016dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016df2:	4770      	bx	lr

08016df4 <__libc_init_array>:
 8016df4:	b570      	push	{r4, r5, r6, lr}
 8016df6:	4d0d      	ldr	r5, [pc, #52]	; (8016e2c <__libc_init_array+0x38>)
 8016df8:	4c0d      	ldr	r4, [pc, #52]	; (8016e30 <__libc_init_array+0x3c>)
 8016dfa:	1b64      	subs	r4, r4, r5
 8016dfc:	10a4      	asrs	r4, r4, #2
 8016dfe:	2600      	movs	r6, #0
 8016e00:	42a6      	cmp	r6, r4
 8016e02:	d109      	bne.n	8016e18 <__libc_init_array+0x24>
 8016e04:	4d0b      	ldr	r5, [pc, #44]	; (8016e34 <__libc_init_array+0x40>)
 8016e06:	4c0c      	ldr	r4, [pc, #48]	; (8016e38 <__libc_init_array+0x44>)
 8016e08:	f001 f856 	bl	8017eb8 <_init>
 8016e0c:	1b64      	subs	r4, r4, r5
 8016e0e:	10a4      	asrs	r4, r4, #2
 8016e10:	2600      	movs	r6, #0
 8016e12:	42a6      	cmp	r6, r4
 8016e14:	d105      	bne.n	8016e22 <__libc_init_array+0x2e>
 8016e16:	bd70      	pop	{r4, r5, r6, pc}
 8016e18:	f855 3b04 	ldr.w	r3, [r5], #4
 8016e1c:	4798      	blx	r3
 8016e1e:	3601      	adds	r6, #1
 8016e20:	e7ee      	b.n	8016e00 <__libc_init_array+0xc>
 8016e22:	f855 3b04 	ldr.w	r3, [r5], #4
 8016e26:	4798      	blx	r3
 8016e28:	3601      	adds	r6, #1
 8016e2a:	e7f2      	b.n	8016e12 <__libc_init_array+0x1e>
 8016e2c:	0801addc 	.word	0x0801addc
 8016e30:	0801addc 	.word	0x0801addc
 8016e34:	0801addc 	.word	0x0801addc
 8016e38:	0801ade0 	.word	0x0801ade0

08016e3c <memcmp>:
 8016e3c:	b530      	push	{r4, r5, lr}
 8016e3e:	3901      	subs	r1, #1
 8016e40:	2400      	movs	r4, #0
 8016e42:	42a2      	cmp	r2, r4
 8016e44:	d101      	bne.n	8016e4a <memcmp+0xe>
 8016e46:	2000      	movs	r0, #0
 8016e48:	e005      	b.n	8016e56 <memcmp+0x1a>
 8016e4a:	5d03      	ldrb	r3, [r0, r4]
 8016e4c:	3401      	adds	r4, #1
 8016e4e:	5d0d      	ldrb	r5, [r1, r4]
 8016e50:	42ab      	cmp	r3, r5
 8016e52:	d0f6      	beq.n	8016e42 <memcmp+0x6>
 8016e54:	1b58      	subs	r0, r3, r5
 8016e56:	bd30      	pop	{r4, r5, pc}

08016e58 <memcpy>:
 8016e58:	440a      	add	r2, r1
 8016e5a:	4291      	cmp	r1, r2
 8016e5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8016e60:	d100      	bne.n	8016e64 <memcpy+0xc>
 8016e62:	4770      	bx	lr
 8016e64:	b510      	push	{r4, lr}
 8016e66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016e6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016e6e:	4291      	cmp	r1, r2
 8016e70:	d1f9      	bne.n	8016e66 <memcpy+0xe>
 8016e72:	bd10      	pop	{r4, pc}

08016e74 <memset>:
 8016e74:	4402      	add	r2, r0
 8016e76:	4603      	mov	r3, r0
 8016e78:	4293      	cmp	r3, r2
 8016e7a:	d100      	bne.n	8016e7e <memset+0xa>
 8016e7c:	4770      	bx	lr
 8016e7e:	f803 1b01 	strb.w	r1, [r3], #1
 8016e82:	e7f9      	b.n	8016e78 <memset+0x4>

08016e84 <iprintf>:
 8016e84:	b40f      	push	{r0, r1, r2, r3}
 8016e86:	4b0a      	ldr	r3, [pc, #40]	; (8016eb0 <iprintf+0x2c>)
 8016e88:	b513      	push	{r0, r1, r4, lr}
 8016e8a:	681c      	ldr	r4, [r3, #0]
 8016e8c:	b124      	cbz	r4, 8016e98 <iprintf+0x14>
 8016e8e:	69a3      	ldr	r3, [r4, #24]
 8016e90:	b913      	cbnz	r3, 8016e98 <iprintf+0x14>
 8016e92:	4620      	mov	r0, r4
 8016e94:	f000 f8c4 	bl	8017020 <__sinit>
 8016e98:	ab05      	add	r3, sp, #20
 8016e9a:	9a04      	ldr	r2, [sp, #16]
 8016e9c:	68a1      	ldr	r1, [r4, #8]
 8016e9e:	9301      	str	r3, [sp, #4]
 8016ea0:	4620      	mov	r0, r4
 8016ea2:	f000 fa4b 	bl	801733c <_vfiprintf_r>
 8016ea6:	b002      	add	sp, #8
 8016ea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016eac:	b004      	add	sp, #16
 8016eae:	4770      	bx	lr
 8016eb0:	20000190 	.word	0x20000190

08016eb4 <rand>:
 8016eb4:	4b17      	ldr	r3, [pc, #92]	; (8016f14 <rand+0x60>)
 8016eb6:	b510      	push	{r4, lr}
 8016eb8:	681c      	ldr	r4, [r3, #0]
 8016eba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016ebc:	b9b3      	cbnz	r3, 8016eec <rand+0x38>
 8016ebe:	2018      	movs	r0, #24
 8016ec0:	f000 f960 	bl	8017184 <malloc>
 8016ec4:	63a0      	str	r0, [r4, #56]	; 0x38
 8016ec6:	b928      	cbnz	r0, 8016ed4 <rand+0x20>
 8016ec8:	4602      	mov	r2, r0
 8016eca:	4b13      	ldr	r3, [pc, #76]	; (8016f18 <rand+0x64>)
 8016ecc:	4813      	ldr	r0, [pc, #76]	; (8016f1c <rand+0x68>)
 8016ece:	214e      	movs	r1, #78	; 0x4e
 8016ed0:	f000 f830 	bl	8016f34 <__assert_func>
 8016ed4:	4a12      	ldr	r2, [pc, #72]	; (8016f20 <rand+0x6c>)
 8016ed6:	4b13      	ldr	r3, [pc, #76]	; (8016f24 <rand+0x70>)
 8016ed8:	e9c0 2300 	strd	r2, r3, [r0]
 8016edc:	4b12      	ldr	r3, [pc, #72]	; (8016f28 <rand+0x74>)
 8016ede:	6083      	str	r3, [r0, #8]
 8016ee0:	230b      	movs	r3, #11
 8016ee2:	8183      	strh	r3, [r0, #12]
 8016ee4:	2201      	movs	r2, #1
 8016ee6:	2300      	movs	r3, #0
 8016ee8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8016eec:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8016eee:	480f      	ldr	r0, [pc, #60]	; (8016f2c <rand+0x78>)
 8016ef0:	690a      	ldr	r2, [r1, #16]
 8016ef2:	694b      	ldr	r3, [r1, #20]
 8016ef4:	4c0e      	ldr	r4, [pc, #56]	; (8016f30 <rand+0x7c>)
 8016ef6:	4350      	muls	r0, r2
 8016ef8:	fb04 0003 	mla	r0, r4, r3, r0
 8016efc:	fba2 3404 	umull	r3, r4, r2, r4
 8016f00:	1c5a      	adds	r2, r3, #1
 8016f02:	4404      	add	r4, r0
 8016f04:	f144 0000 	adc.w	r0, r4, #0
 8016f08:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8016f0c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8016f10:	bd10      	pop	{r4, pc}
 8016f12:	bf00      	nop
 8016f14:	20000190 	.word	0x20000190
 8016f18:	0801ac8c 	.word	0x0801ac8c
 8016f1c:	0801aca3 	.word	0x0801aca3
 8016f20:	abcd330e 	.word	0xabcd330e
 8016f24:	e66d1234 	.word	0xe66d1234
 8016f28:	0005deec 	.word	0x0005deec
 8016f2c:	5851f42d 	.word	0x5851f42d
 8016f30:	4c957f2d 	.word	0x4c957f2d

08016f34 <__assert_func>:
 8016f34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016f36:	4614      	mov	r4, r2
 8016f38:	461a      	mov	r2, r3
 8016f3a:	4b09      	ldr	r3, [pc, #36]	; (8016f60 <__assert_func+0x2c>)
 8016f3c:	681b      	ldr	r3, [r3, #0]
 8016f3e:	4605      	mov	r5, r0
 8016f40:	68d8      	ldr	r0, [r3, #12]
 8016f42:	b14c      	cbz	r4, 8016f58 <__assert_func+0x24>
 8016f44:	4b07      	ldr	r3, [pc, #28]	; (8016f64 <__assert_func+0x30>)
 8016f46:	9100      	str	r1, [sp, #0]
 8016f48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016f4c:	4906      	ldr	r1, [pc, #24]	; (8016f68 <__assert_func+0x34>)
 8016f4e:	462b      	mov	r3, r5
 8016f50:	f000 f8e4 	bl	801711c <fiprintf>
 8016f54:	f000 fddc 	bl	8017b10 <abort>
 8016f58:	4b04      	ldr	r3, [pc, #16]	; (8016f6c <__assert_func+0x38>)
 8016f5a:	461c      	mov	r4, r3
 8016f5c:	e7f3      	b.n	8016f46 <__assert_func+0x12>
 8016f5e:	bf00      	nop
 8016f60:	20000190 	.word	0x20000190
 8016f64:	0801ad02 	.word	0x0801ad02
 8016f68:	0801ad0f 	.word	0x0801ad0f
 8016f6c:	0801ad3d 	.word	0x0801ad3d

08016f70 <std>:
 8016f70:	2300      	movs	r3, #0
 8016f72:	b510      	push	{r4, lr}
 8016f74:	4604      	mov	r4, r0
 8016f76:	e9c0 3300 	strd	r3, r3, [r0]
 8016f7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016f7e:	6083      	str	r3, [r0, #8]
 8016f80:	8181      	strh	r1, [r0, #12]
 8016f82:	6643      	str	r3, [r0, #100]	; 0x64
 8016f84:	81c2      	strh	r2, [r0, #14]
 8016f86:	6183      	str	r3, [r0, #24]
 8016f88:	4619      	mov	r1, r3
 8016f8a:	2208      	movs	r2, #8
 8016f8c:	305c      	adds	r0, #92	; 0x5c
 8016f8e:	f7ff ff71 	bl	8016e74 <memset>
 8016f92:	4b05      	ldr	r3, [pc, #20]	; (8016fa8 <std+0x38>)
 8016f94:	6263      	str	r3, [r4, #36]	; 0x24
 8016f96:	4b05      	ldr	r3, [pc, #20]	; (8016fac <std+0x3c>)
 8016f98:	62a3      	str	r3, [r4, #40]	; 0x28
 8016f9a:	4b05      	ldr	r3, [pc, #20]	; (8016fb0 <std+0x40>)
 8016f9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016f9e:	4b05      	ldr	r3, [pc, #20]	; (8016fb4 <std+0x44>)
 8016fa0:	6224      	str	r4, [r4, #32]
 8016fa2:	6323      	str	r3, [r4, #48]	; 0x30
 8016fa4:	bd10      	pop	{r4, pc}
 8016fa6:	bf00      	nop
 8016fa8:	080178e5 	.word	0x080178e5
 8016fac:	08017907 	.word	0x08017907
 8016fb0:	0801793f 	.word	0x0801793f
 8016fb4:	08017963 	.word	0x08017963

08016fb8 <_cleanup_r>:
 8016fb8:	4901      	ldr	r1, [pc, #4]	; (8016fc0 <_cleanup_r+0x8>)
 8016fba:	f000 b8c1 	b.w	8017140 <_fwalk_reent>
 8016fbe:	bf00      	nop
 8016fc0:	08017c4d 	.word	0x08017c4d

08016fc4 <__sfmoreglue>:
 8016fc4:	b570      	push	{r4, r5, r6, lr}
 8016fc6:	1e4a      	subs	r2, r1, #1
 8016fc8:	2568      	movs	r5, #104	; 0x68
 8016fca:	4355      	muls	r5, r2
 8016fcc:	460e      	mov	r6, r1
 8016fce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016fd2:	f000 f92f 	bl	8017234 <_malloc_r>
 8016fd6:	4604      	mov	r4, r0
 8016fd8:	b140      	cbz	r0, 8016fec <__sfmoreglue+0x28>
 8016fda:	2100      	movs	r1, #0
 8016fdc:	e9c0 1600 	strd	r1, r6, [r0]
 8016fe0:	300c      	adds	r0, #12
 8016fe2:	60a0      	str	r0, [r4, #8]
 8016fe4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016fe8:	f7ff ff44 	bl	8016e74 <memset>
 8016fec:	4620      	mov	r0, r4
 8016fee:	bd70      	pop	{r4, r5, r6, pc}

08016ff0 <__sfp_lock_acquire>:
 8016ff0:	4801      	ldr	r0, [pc, #4]	; (8016ff8 <__sfp_lock_acquire+0x8>)
 8016ff2:	f000 b8c5 	b.w	8017180 <__retarget_lock_acquire_recursive>
 8016ff6:	bf00      	nop
 8016ff8:	2000ca00 	.word	0x2000ca00

08016ffc <__sfp_lock_release>:
 8016ffc:	4801      	ldr	r0, [pc, #4]	; (8017004 <__sfp_lock_release+0x8>)
 8016ffe:	f000 b8c0 	b.w	8017182 <__retarget_lock_release_recursive>
 8017002:	bf00      	nop
 8017004:	2000ca00 	.word	0x2000ca00

08017008 <__sinit_lock_acquire>:
 8017008:	4801      	ldr	r0, [pc, #4]	; (8017010 <__sinit_lock_acquire+0x8>)
 801700a:	f000 b8b9 	b.w	8017180 <__retarget_lock_acquire_recursive>
 801700e:	bf00      	nop
 8017010:	2000c9fb 	.word	0x2000c9fb

08017014 <__sinit_lock_release>:
 8017014:	4801      	ldr	r0, [pc, #4]	; (801701c <__sinit_lock_release+0x8>)
 8017016:	f000 b8b4 	b.w	8017182 <__retarget_lock_release_recursive>
 801701a:	bf00      	nop
 801701c:	2000c9fb 	.word	0x2000c9fb

08017020 <__sinit>:
 8017020:	b510      	push	{r4, lr}
 8017022:	4604      	mov	r4, r0
 8017024:	f7ff fff0 	bl	8017008 <__sinit_lock_acquire>
 8017028:	69a3      	ldr	r3, [r4, #24]
 801702a:	b11b      	cbz	r3, 8017034 <__sinit+0x14>
 801702c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017030:	f7ff bff0 	b.w	8017014 <__sinit_lock_release>
 8017034:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017038:	6523      	str	r3, [r4, #80]	; 0x50
 801703a:	4b13      	ldr	r3, [pc, #76]	; (8017088 <__sinit+0x68>)
 801703c:	4a13      	ldr	r2, [pc, #76]	; (801708c <__sinit+0x6c>)
 801703e:	681b      	ldr	r3, [r3, #0]
 8017040:	62a2      	str	r2, [r4, #40]	; 0x28
 8017042:	42a3      	cmp	r3, r4
 8017044:	bf04      	itt	eq
 8017046:	2301      	moveq	r3, #1
 8017048:	61a3      	streq	r3, [r4, #24]
 801704a:	4620      	mov	r0, r4
 801704c:	f000 f820 	bl	8017090 <__sfp>
 8017050:	6060      	str	r0, [r4, #4]
 8017052:	4620      	mov	r0, r4
 8017054:	f000 f81c 	bl	8017090 <__sfp>
 8017058:	60a0      	str	r0, [r4, #8]
 801705a:	4620      	mov	r0, r4
 801705c:	f000 f818 	bl	8017090 <__sfp>
 8017060:	2200      	movs	r2, #0
 8017062:	60e0      	str	r0, [r4, #12]
 8017064:	2104      	movs	r1, #4
 8017066:	6860      	ldr	r0, [r4, #4]
 8017068:	f7ff ff82 	bl	8016f70 <std>
 801706c:	68a0      	ldr	r0, [r4, #8]
 801706e:	2201      	movs	r2, #1
 8017070:	2109      	movs	r1, #9
 8017072:	f7ff ff7d 	bl	8016f70 <std>
 8017076:	68e0      	ldr	r0, [r4, #12]
 8017078:	2202      	movs	r2, #2
 801707a:	2112      	movs	r1, #18
 801707c:	f7ff ff78 	bl	8016f70 <std>
 8017080:	2301      	movs	r3, #1
 8017082:	61a3      	str	r3, [r4, #24]
 8017084:	e7d2      	b.n	801702c <__sinit+0xc>
 8017086:	bf00      	nop
 8017088:	0801ac88 	.word	0x0801ac88
 801708c:	08016fb9 	.word	0x08016fb9

08017090 <__sfp>:
 8017090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017092:	4607      	mov	r7, r0
 8017094:	f7ff ffac 	bl	8016ff0 <__sfp_lock_acquire>
 8017098:	4b1e      	ldr	r3, [pc, #120]	; (8017114 <__sfp+0x84>)
 801709a:	681e      	ldr	r6, [r3, #0]
 801709c:	69b3      	ldr	r3, [r6, #24]
 801709e:	b913      	cbnz	r3, 80170a6 <__sfp+0x16>
 80170a0:	4630      	mov	r0, r6
 80170a2:	f7ff ffbd 	bl	8017020 <__sinit>
 80170a6:	3648      	adds	r6, #72	; 0x48
 80170a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80170ac:	3b01      	subs	r3, #1
 80170ae:	d503      	bpl.n	80170b8 <__sfp+0x28>
 80170b0:	6833      	ldr	r3, [r6, #0]
 80170b2:	b30b      	cbz	r3, 80170f8 <__sfp+0x68>
 80170b4:	6836      	ldr	r6, [r6, #0]
 80170b6:	e7f7      	b.n	80170a8 <__sfp+0x18>
 80170b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80170bc:	b9d5      	cbnz	r5, 80170f4 <__sfp+0x64>
 80170be:	4b16      	ldr	r3, [pc, #88]	; (8017118 <__sfp+0x88>)
 80170c0:	60e3      	str	r3, [r4, #12]
 80170c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80170c6:	6665      	str	r5, [r4, #100]	; 0x64
 80170c8:	f000 f859 	bl	801717e <__retarget_lock_init_recursive>
 80170cc:	f7ff ff96 	bl	8016ffc <__sfp_lock_release>
 80170d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80170d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80170d8:	6025      	str	r5, [r4, #0]
 80170da:	61a5      	str	r5, [r4, #24]
 80170dc:	2208      	movs	r2, #8
 80170de:	4629      	mov	r1, r5
 80170e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80170e4:	f7ff fec6 	bl	8016e74 <memset>
 80170e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80170ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80170f0:	4620      	mov	r0, r4
 80170f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80170f4:	3468      	adds	r4, #104	; 0x68
 80170f6:	e7d9      	b.n	80170ac <__sfp+0x1c>
 80170f8:	2104      	movs	r1, #4
 80170fa:	4638      	mov	r0, r7
 80170fc:	f7ff ff62 	bl	8016fc4 <__sfmoreglue>
 8017100:	4604      	mov	r4, r0
 8017102:	6030      	str	r0, [r6, #0]
 8017104:	2800      	cmp	r0, #0
 8017106:	d1d5      	bne.n	80170b4 <__sfp+0x24>
 8017108:	f7ff ff78 	bl	8016ffc <__sfp_lock_release>
 801710c:	230c      	movs	r3, #12
 801710e:	603b      	str	r3, [r7, #0]
 8017110:	e7ee      	b.n	80170f0 <__sfp+0x60>
 8017112:	bf00      	nop
 8017114:	0801ac88 	.word	0x0801ac88
 8017118:	ffff0001 	.word	0xffff0001

0801711c <fiprintf>:
 801711c:	b40e      	push	{r1, r2, r3}
 801711e:	b503      	push	{r0, r1, lr}
 8017120:	4601      	mov	r1, r0
 8017122:	ab03      	add	r3, sp, #12
 8017124:	4805      	ldr	r0, [pc, #20]	; (801713c <fiprintf+0x20>)
 8017126:	f853 2b04 	ldr.w	r2, [r3], #4
 801712a:	6800      	ldr	r0, [r0, #0]
 801712c:	9301      	str	r3, [sp, #4]
 801712e:	f000 f905 	bl	801733c <_vfiprintf_r>
 8017132:	b002      	add	sp, #8
 8017134:	f85d eb04 	ldr.w	lr, [sp], #4
 8017138:	b003      	add	sp, #12
 801713a:	4770      	bx	lr
 801713c:	20000190 	.word	0x20000190

08017140 <_fwalk_reent>:
 8017140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017144:	4606      	mov	r6, r0
 8017146:	4688      	mov	r8, r1
 8017148:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801714c:	2700      	movs	r7, #0
 801714e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017152:	f1b9 0901 	subs.w	r9, r9, #1
 8017156:	d505      	bpl.n	8017164 <_fwalk_reent+0x24>
 8017158:	6824      	ldr	r4, [r4, #0]
 801715a:	2c00      	cmp	r4, #0
 801715c:	d1f7      	bne.n	801714e <_fwalk_reent+0xe>
 801715e:	4638      	mov	r0, r7
 8017160:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017164:	89ab      	ldrh	r3, [r5, #12]
 8017166:	2b01      	cmp	r3, #1
 8017168:	d907      	bls.n	801717a <_fwalk_reent+0x3a>
 801716a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801716e:	3301      	adds	r3, #1
 8017170:	d003      	beq.n	801717a <_fwalk_reent+0x3a>
 8017172:	4629      	mov	r1, r5
 8017174:	4630      	mov	r0, r6
 8017176:	47c0      	blx	r8
 8017178:	4307      	orrs	r7, r0
 801717a:	3568      	adds	r5, #104	; 0x68
 801717c:	e7e9      	b.n	8017152 <_fwalk_reent+0x12>

0801717e <__retarget_lock_init_recursive>:
 801717e:	4770      	bx	lr

08017180 <__retarget_lock_acquire_recursive>:
 8017180:	4770      	bx	lr

08017182 <__retarget_lock_release_recursive>:
 8017182:	4770      	bx	lr

08017184 <malloc>:
 8017184:	4b02      	ldr	r3, [pc, #8]	; (8017190 <malloc+0xc>)
 8017186:	4601      	mov	r1, r0
 8017188:	6818      	ldr	r0, [r3, #0]
 801718a:	f000 b853 	b.w	8017234 <_malloc_r>
 801718e:	bf00      	nop
 8017190:	20000190 	.word	0x20000190

08017194 <_free_r>:
 8017194:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017196:	2900      	cmp	r1, #0
 8017198:	d048      	beq.n	801722c <_free_r+0x98>
 801719a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801719e:	9001      	str	r0, [sp, #4]
 80171a0:	2b00      	cmp	r3, #0
 80171a2:	f1a1 0404 	sub.w	r4, r1, #4
 80171a6:	bfb8      	it	lt
 80171a8:	18e4      	addlt	r4, r4, r3
 80171aa:	f000 fe01 	bl	8017db0 <__malloc_lock>
 80171ae:	4a20      	ldr	r2, [pc, #128]	; (8017230 <_free_r+0x9c>)
 80171b0:	9801      	ldr	r0, [sp, #4]
 80171b2:	6813      	ldr	r3, [r2, #0]
 80171b4:	4615      	mov	r5, r2
 80171b6:	b933      	cbnz	r3, 80171c6 <_free_r+0x32>
 80171b8:	6063      	str	r3, [r4, #4]
 80171ba:	6014      	str	r4, [r2, #0]
 80171bc:	b003      	add	sp, #12
 80171be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80171c2:	f000 bdfb 	b.w	8017dbc <__malloc_unlock>
 80171c6:	42a3      	cmp	r3, r4
 80171c8:	d90b      	bls.n	80171e2 <_free_r+0x4e>
 80171ca:	6821      	ldr	r1, [r4, #0]
 80171cc:	1862      	adds	r2, r4, r1
 80171ce:	4293      	cmp	r3, r2
 80171d0:	bf04      	itt	eq
 80171d2:	681a      	ldreq	r2, [r3, #0]
 80171d4:	685b      	ldreq	r3, [r3, #4]
 80171d6:	6063      	str	r3, [r4, #4]
 80171d8:	bf04      	itt	eq
 80171da:	1852      	addeq	r2, r2, r1
 80171dc:	6022      	streq	r2, [r4, #0]
 80171de:	602c      	str	r4, [r5, #0]
 80171e0:	e7ec      	b.n	80171bc <_free_r+0x28>
 80171e2:	461a      	mov	r2, r3
 80171e4:	685b      	ldr	r3, [r3, #4]
 80171e6:	b10b      	cbz	r3, 80171ec <_free_r+0x58>
 80171e8:	42a3      	cmp	r3, r4
 80171ea:	d9fa      	bls.n	80171e2 <_free_r+0x4e>
 80171ec:	6811      	ldr	r1, [r2, #0]
 80171ee:	1855      	adds	r5, r2, r1
 80171f0:	42a5      	cmp	r5, r4
 80171f2:	d10b      	bne.n	801720c <_free_r+0x78>
 80171f4:	6824      	ldr	r4, [r4, #0]
 80171f6:	4421      	add	r1, r4
 80171f8:	1854      	adds	r4, r2, r1
 80171fa:	42a3      	cmp	r3, r4
 80171fc:	6011      	str	r1, [r2, #0]
 80171fe:	d1dd      	bne.n	80171bc <_free_r+0x28>
 8017200:	681c      	ldr	r4, [r3, #0]
 8017202:	685b      	ldr	r3, [r3, #4]
 8017204:	6053      	str	r3, [r2, #4]
 8017206:	4421      	add	r1, r4
 8017208:	6011      	str	r1, [r2, #0]
 801720a:	e7d7      	b.n	80171bc <_free_r+0x28>
 801720c:	d902      	bls.n	8017214 <_free_r+0x80>
 801720e:	230c      	movs	r3, #12
 8017210:	6003      	str	r3, [r0, #0]
 8017212:	e7d3      	b.n	80171bc <_free_r+0x28>
 8017214:	6825      	ldr	r5, [r4, #0]
 8017216:	1961      	adds	r1, r4, r5
 8017218:	428b      	cmp	r3, r1
 801721a:	bf04      	itt	eq
 801721c:	6819      	ldreq	r1, [r3, #0]
 801721e:	685b      	ldreq	r3, [r3, #4]
 8017220:	6063      	str	r3, [r4, #4]
 8017222:	bf04      	itt	eq
 8017224:	1949      	addeq	r1, r1, r5
 8017226:	6021      	streq	r1, [r4, #0]
 8017228:	6054      	str	r4, [r2, #4]
 801722a:	e7c7      	b.n	80171bc <_free_r+0x28>
 801722c:	b003      	add	sp, #12
 801722e:	bd30      	pop	{r4, r5, pc}
 8017230:	200045a0 	.word	0x200045a0

08017234 <_malloc_r>:
 8017234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017236:	1ccd      	adds	r5, r1, #3
 8017238:	f025 0503 	bic.w	r5, r5, #3
 801723c:	3508      	adds	r5, #8
 801723e:	2d0c      	cmp	r5, #12
 8017240:	bf38      	it	cc
 8017242:	250c      	movcc	r5, #12
 8017244:	2d00      	cmp	r5, #0
 8017246:	4606      	mov	r6, r0
 8017248:	db01      	blt.n	801724e <_malloc_r+0x1a>
 801724a:	42a9      	cmp	r1, r5
 801724c:	d903      	bls.n	8017256 <_malloc_r+0x22>
 801724e:	230c      	movs	r3, #12
 8017250:	6033      	str	r3, [r6, #0]
 8017252:	2000      	movs	r0, #0
 8017254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017256:	f000 fdab 	bl	8017db0 <__malloc_lock>
 801725a:	4921      	ldr	r1, [pc, #132]	; (80172e0 <_malloc_r+0xac>)
 801725c:	680a      	ldr	r2, [r1, #0]
 801725e:	4614      	mov	r4, r2
 8017260:	b99c      	cbnz	r4, 801728a <_malloc_r+0x56>
 8017262:	4f20      	ldr	r7, [pc, #128]	; (80172e4 <_malloc_r+0xb0>)
 8017264:	683b      	ldr	r3, [r7, #0]
 8017266:	b923      	cbnz	r3, 8017272 <_malloc_r+0x3e>
 8017268:	4621      	mov	r1, r4
 801726a:	4630      	mov	r0, r6
 801726c:	f000 fb2a 	bl	80178c4 <_sbrk_r>
 8017270:	6038      	str	r0, [r7, #0]
 8017272:	4629      	mov	r1, r5
 8017274:	4630      	mov	r0, r6
 8017276:	f000 fb25 	bl	80178c4 <_sbrk_r>
 801727a:	1c43      	adds	r3, r0, #1
 801727c:	d123      	bne.n	80172c6 <_malloc_r+0x92>
 801727e:	230c      	movs	r3, #12
 8017280:	6033      	str	r3, [r6, #0]
 8017282:	4630      	mov	r0, r6
 8017284:	f000 fd9a 	bl	8017dbc <__malloc_unlock>
 8017288:	e7e3      	b.n	8017252 <_malloc_r+0x1e>
 801728a:	6823      	ldr	r3, [r4, #0]
 801728c:	1b5b      	subs	r3, r3, r5
 801728e:	d417      	bmi.n	80172c0 <_malloc_r+0x8c>
 8017290:	2b0b      	cmp	r3, #11
 8017292:	d903      	bls.n	801729c <_malloc_r+0x68>
 8017294:	6023      	str	r3, [r4, #0]
 8017296:	441c      	add	r4, r3
 8017298:	6025      	str	r5, [r4, #0]
 801729a:	e004      	b.n	80172a6 <_malloc_r+0x72>
 801729c:	6863      	ldr	r3, [r4, #4]
 801729e:	42a2      	cmp	r2, r4
 80172a0:	bf0c      	ite	eq
 80172a2:	600b      	streq	r3, [r1, #0]
 80172a4:	6053      	strne	r3, [r2, #4]
 80172a6:	4630      	mov	r0, r6
 80172a8:	f000 fd88 	bl	8017dbc <__malloc_unlock>
 80172ac:	f104 000b 	add.w	r0, r4, #11
 80172b0:	1d23      	adds	r3, r4, #4
 80172b2:	f020 0007 	bic.w	r0, r0, #7
 80172b6:	1ac2      	subs	r2, r0, r3
 80172b8:	d0cc      	beq.n	8017254 <_malloc_r+0x20>
 80172ba:	1a1b      	subs	r3, r3, r0
 80172bc:	50a3      	str	r3, [r4, r2]
 80172be:	e7c9      	b.n	8017254 <_malloc_r+0x20>
 80172c0:	4622      	mov	r2, r4
 80172c2:	6864      	ldr	r4, [r4, #4]
 80172c4:	e7cc      	b.n	8017260 <_malloc_r+0x2c>
 80172c6:	1cc4      	adds	r4, r0, #3
 80172c8:	f024 0403 	bic.w	r4, r4, #3
 80172cc:	42a0      	cmp	r0, r4
 80172ce:	d0e3      	beq.n	8017298 <_malloc_r+0x64>
 80172d0:	1a21      	subs	r1, r4, r0
 80172d2:	4630      	mov	r0, r6
 80172d4:	f000 faf6 	bl	80178c4 <_sbrk_r>
 80172d8:	3001      	adds	r0, #1
 80172da:	d1dd      	bne.n	8017298 <_malloc_r+0x64>
 80172dc:	e7cf      	b.n	801727e <_malloc_r+0x4a>
 80172de:	bf00      	nop
 80172e0:	200045a0 	.word	0x200045a0
 80172e4:	200045a4 	.word	0x200045a4

080172e8 <__sfputc_r>:
 80172e8:	6893      	ldr	r3, [r2, #8]
 80172ea:	3b01      	subs	r3, #1
 80172ec:	2b00      	cmp	r3, #0
 80172ee:	b410      	push	{r4}
 80172f0:	6093      	str	r3, [r2, #8]
 80172f2:	da08      	bge.n	8017306 <__sfputc_r+0x1e>
 80172f4:	6994      	ldr	r4, [r2, #24]
 80172f6:	42a3      	cmp	r3, r4
 80172f8:	db01      	blt.n	80172fe <__sfputc_r+0x16>
 80172fa:	290a      	cmp	r1, #10
 80172fc:	d103      	bne.n	8017306 <__sfputc_r+0x1e>
 80172fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017302:	f000 bb33 	b.w	801796c <__swbuf_r>
 8017306:	6813      	ldr	r3, [r2, #0]
 8017308:	1c58      	adds	r0, r3, #1
 801730a:	6010      	str	r0, [r2, #0]
 801730c:	7019      	strb	r1, [r3, #0]
 801730e:	4608      	mov	r0, r1
 8017310:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017314:	4770      	bx	lr

08017316 <__sfputs_r>:
 8017316:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017318:	4606      	mov	r6, r0
 801731a:	460f      	mov	r7, r1
 801731c:	4614      	mov	r4, r2
 801731e:	18d5      	adds	r5, r2, r3
 8017320:	42ac      	cmp	r4, r5
 8017322:	d101      	bne.n	8017328 <__sfputs_r+0x12>
 8017324:	2000      	movs	r0, #0
 8017326:	e007      	b.n	8017338 <__sfputs_r+0x22>
 8017328:	f814 1b01 	ldrb.w	r1, [r4], #1
 801732c:	463a      	mov	r2, r7
 801732e:	4630      	mov	r0, r6
 8017330:	f7ff ffda 	bl	80172e8 <__sfputc_r>
 8017334:	1c43      	adds	r3, r0, #1
 8017336:	d1f3      	bne.n	8017320 <__sfputs_r+0xa>
 8017338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801733c <_vfiprintf_r>:
 801733c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017340:	460d      	mov	r5, r1
 8017342:	b09d      	sub	sp, #116	; 0x74
 8017344:	4614      	mov	r4, r2
 8017346:	4698      	mov	r8, r3
 8017348:	4606      	mov	r6, r0
 801734a:	b118      	cbz	r0, 8017354 <_vfiprintf_r+0x18>
 801734c:	6983      	ldr	r3, [r0, #24]
 801734e:	b90b      	cbnz	r3, 8017354 <_vfiprintf_r+0x18>
 8017350:	f7ff fe66 	bl	8017020 <__sinit>
 8017354:	4b89      	ldr	r3, [pc, #548]	; (801757c <_vfiprintf_r+0x240>)
 8017356:	429d      	cmp	r5, r3
 8017358:	d11b      	bne.n	8017392 <_vfiprintf_r+0x56>
 801735a:	6875      	ldr	r5, [r6, #4]
 801735c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801735e:	07d9      	lsls	r1, r3, #31
 8017360:	d405      	bmi.n	801736e <_vfiprintf_r+0x32>
 8017362:	89ab      	ldrh	r3, [r5, #12]
 8017364:	059a      	lsls	r2, r3, #22
 8017366:	d402      	bmi.n	801736e <_vfiprintf_r+0x32>
 8017368:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801736a:	f7ff ff09 	bl	8017180 <__retarget_lock_acquire_recursive>
 801736e:	89ab      	ldrh	r3, [r5, #12]
 8017370:	071b      	lsls	r3, r3, #28
 8017372:	d501      	bpl.n	8017378 <_vfiprintf_r+0x3c>
 8017374:	692b      	ldr	r3, [r5, #16]
 8017376:	b9eb      	cbnz	r3, 80173b4 <_vfiprintf_r+0x78>
 8017378:	4629      	mov	r1, r5
 801737a:	4630      	mov	r0, r6
 801737c:	f000 fb5a 	bl	8017a34 <__swsetup_r>
 8017380:	b1c0      	cbz	r0, 80173b4 <_vfiprintf_r+0x78>
 8017382:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017384:	07dc      	lsls	r4, r3, #31
 8017386:	d50e      	bpl.n	80173a6 <_vfiprintf_r+0x6a>
 8017388:	f04f 30ff 	mov.w	r0, #4294967295
 801738c:	b01d      	add	sp, #116	; 0x74
 801738e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017392:	4b7b      	ldr	r3, [pc, #492]	; (8017580 <_vfiprintf_r+0x244>)
 8017394:	429d      	cmp	r5, r3
 8017396:	d101      	bne.n	801739c <_vfiprintf_r+0x60>
 8017398:	68b5      	ldr	r5, [r6, #8]
 801739a:	e7df      	b.n	801735c <_vfiprintf_r+0x20>
 801739c:	4b79      	ldr	r3, [pc, #484]	; (8017584 <_vfiprintf_r+0x248>)
 801739e:	429d      	cmp	r5, r3
 80173a0:	bf08      	it	eq
 80173a2:	68f5      	ldreq	r5, [r6, #12]
 80173a4:	e7da      	b.n	801735c <_vfiprintf_r+0x20>
 80173a6:	89ab      	ldrh	r3, [r5, #12]
 80173a8:	0598      	lsls	r0, r3, #22
 80173aa:	d4ed      	bmi.n	8017388 <_vfiprintf_r+0x4c>
 80173ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80173ae:	f7ff fee8 	bl	8017182 <__retarget_lock_release_recursive>
 80173b2:	e7e9      	b.n	8017388 <_vfiprintf_r+0x4c>
 80173b4:	2300      	movs	r3, #0
 80173b6:	9309      	str	r3, [sp, #36]	; 0x24
 80173b8:	2320      	movs	r3, #32
 80173ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80173be:	f8cd 800c 	str.w	r8, [sp, #12]
 80173c2:	2330      	movs	r3, #48	; 0x30
 80173c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8017588 <_vfiprintf_r+0x24c>
 80173c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80173cc:	f04f 0901 	mov.w	r9, #1
 80173d0:	4623      	mov	r3, r4
 80173d2:	469a      	mov	sl, r3
 80173d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80173d8:	b10a      	cbz	r2, 80173de <_vfiprintf_r+0xa2>
 80173da:	2a25      	cmp	r2, #37	; 0x25
 80173dc:	d1f9      	bne.n	80173d2 <_vfiprintf_r+0x96>
 80173de:	ebba 0b04 	subs.w	fp, sl, r4
 80173e2:	d00b      	beq.n	80173fc <_vfiprintf_r+0xc0>
 80173e4:	465b      	mov	r3, fp
 80173e6:	4622      	mov	r2, r4
 80173e8:	4629      	mov	r1, r5
 80173ea:	4630      	mov	r0, r6
 80173ec:	f7ff ff93 	bl	8017316 <__sfputs_r>
 80173f0:	3001      	adds	r0, #1
 80173f2:	f000 80aa 	beq.w	801754a <_vfiprintf_r+0x20e>
 80173f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80173f8:	445a      	add	r2, fp
 80173fa:	9209      	str	r2, [sp, #36]	; 0x24
 80173fc:	f89a 3000 	ldrb.w	r3, [sl]
 8017400:	2b00      	cmp	r3, #0
 8017402:	f000 80a2 	beq.w	801754a <_vfiprintf_r+0x20e>
 8017406:	2300      	movs	r3, #0
 8017408:	f04f 32ff 	mov.w	r2, #4294967295
 801740c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017410:	f10a 0a01 	add.w	sl, sl, #1
 8017414:	9304      	str	r3, [sp, #16]
 8017416:	9307      	str	r3, [sp, #28]
 8017418:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801741c:	931a      	str	r3, [sp, #104]	; 0x68
 801741e:	4654      	mov	r4, sl
 8017420:	2205      	movs	r2, #5
 8017422:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017426:	4858      	ldr	r0, [pc, #352]	; (8017588 <_vfiprintf_r+0x24c>)
 8017428:	f7e8 fed2 	bl	80001d0 <memchr>
 801742c:	9a04      	ldr	r2, [sp, #16]
 801742e:	b9d8      	cbnz	r0, 8017468 <_vfiprintf_r+0x12c>
 8017430:	06d1      	lsls	r1, r2, #27
 8017432:	bf44      	itt	mi
 8017434:	2320      	movmi	r3, #32
 8017436:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801743a:	0713      	lsls	r3, r2, #28
 801743c:	bf44      	itt	mi
 801743e:	232b      	movmi	r3, #43	; 0x2b
 8017440:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017444:	f89a 3000 	ldrb.w	r3, [sl]
 8017448:	2b2a      	cmp	r3, #42	; 0x2a
 801744a:	d015      	beq.n	8017478 <_vfiprintf_r+0x13c>
 801744c:	9a07      	ldr	r2, [sp, #28]
 801744e:	4654      	mov	r4, sl
 8017450:	2000      	movs	r0, #0
 8017452:	f04f 0c0a 	mov.w	ip, #10
 8017456:	4621      	mov	r1, r4
 8017458:	f811 3b01 	ldrb.w	r3, [r1], #1
 801745c:	3b30      	subs	r3, #48	; 0x30
 801745e:	2b09      	cmp	r3, #9
 8017460:	d94e      	bls.n	8017500 <_vfiprintf_r+0x1c4>
 8017462:	b1b0      	cbz	r0, 8017492 <_vfiprintf_r+0x156>
 8017464:	9207      	str	r2, [sp, #28]
 8017466:	e014      	b.n	8017492 <_vfiprintf_r+0x156>
 8017468:	eba0 0308 	sub.w	r3, r0, r8
 801746c:	fa09 f303 	lsl.w	r3, r9, r3
 8017470:	4313      	orrs	r3, r2
 8017472:	9304      	str	r3, [sp, #16]
 8017474:	46a2      	mov	sl, r4
 8017476:	e7d2      	b.n	801741e <_vfiprintf_r+0xe2>
 8017478:	9b03      	ldr	r3, [sp, #12]
 801747a:	1d19      	adds	r1, r3, #4
 801747c:	681b      	ldr	r3, [r3, #0]
 801747e:	9103      	str	r1, [sp, #12]
 8017480:	2b00      	cmp	r3, #0
 8017482:	bfbb      	ittet	lt
 8017484:	425b      	neglt	r3, r3
 8017486:	f042 0202 	orrlt.w	r2, r2, #2
 801748a:	9307      	strge	r3, [sp, #28]
 801748c:	9307      	strlt	r3, [sp, #28]
 801748e:	bfb8      	it	lt
 8017490:	9204      	strlt	r2, [sp, #16]
 8017492:	7823      	ldrb	r3, [r4, #0]
 8017494:	2b2e      	cmp	r3, #46	; 0x2e
 8017496:	d10c      	bne.n	80174b2 <_vfiprintf_r+0x176>
 8017498:	7863      	ldrb	r3, [r4, #1]
 801749a:	2b2a      	cmp	r3, #42	; 0x2a
 801749c:	d135      	bne.n	801750a <_vfiprintf_r+0x1ce>
 801749e:	9b03      	ldr	r3, [sp, #12]
 80174a0:	1d1a      	adds	r2, r3, #4
 80174a2:	681b      	ldr	r3, [r3, #0]
 80174a4:	9203      	str	r2, [sp, #12]
 80174a6:	2b00      	cmp	r3, #0
 80174a8:	bfb8      	it	lt
 80174aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80174ae:	3402      	adds	r4, #2
 80174b0:	9305      	str	r3, [sp, #20]
 80174b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017598 <_vfiprintf_r+0x25c>
 80174b6:	7821      	ldrb	r1, [r4, #0]
 80174b8:	2203      	movs	r2, #3
 80174ba:	4650      	mov	r0, sl
 80174bc:	f7e8 fe88 	bl	80001d0 <memchr>
 80174c0:	b140      	cbz	r0, 80174d4 <_vfiprintf_r+0x198>
 80174c2:	2340      	movs	r3, #64	; 0x40
 80174c4:	eba0 000a 	sub.w	r0, r0, sl
 80174c8:	fa03 f000 	lsl.w	r0, r3, r0
 80174cc:	9b04      	ldr	r3, [sp, #16]
 80174ce:	4303      	orrs	r3, r0
 80174d0:	3401      	adds	r4, #1
 80174d2:	9304      	str	r3, [sp, #16]
 80174d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80174d8:	482c      	ldr	r0, [pc, #176]	; (801758c <_vfiprintf_r+0x250>)
 80174da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80174de:	2206      	movs	r2, #6
 80174e0:	f7e8 fe76 	bl	80001d0 <memchr>
 80174e4:	2800      	cmp	r0, #0
 80174e6:	d03f      	beq.n	8017568 <_vfiprintf_r+0x22c>
 80174e8:	4b29      	ldr	r3, [pc, #164]	; (8017590 <_vfiprintf_r+0x254>)
 80174ea:	bb1b      	cbnz	r3, 8017534 <_vfiprintf_r+0x1f8>
 80174ec:	9b03      	ldr	r3, [sp, #12]
 80174ee:	3307      	adds	r3, #7
 80174f0:	f023 0307 	bic.w	r3, r3, #7
 80174f4:	3308      	adds	r3, #8
 80174f6:	9303      	str	r3, [sp, #12]
 80174f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80174fa:	443b      	add	r3, r7
 80174fc:	9309      	str	r3, [sp, #36]	; 0x24
 80174fe:	e767      	b.n	80173d0 <_vfiprintf_r+0x94>
 8017500:	fb0c 3202 	mla	r2, ip, r2, r3
 8017504:	460c      	mov	r4, r1
 8017506:	2001      	movs	r0, #1
 8017508:	e7a5      	b.n	8017456 <_vfiprintf_r+0x11a>
 801750a:	2300      	movs	r3, #0
 801750c:	3401      	adds	r4, #1
 801750e:	9305      	str	r3, [sp, #20]
 8017510:	4619      	mov	r1, r3
 8017512:	f04f 0c0a 	mov.w	ip, #10
 8017516:	4620      	mov	r0, r4
 8017518:	f810 2b01 	ldrb.w	r2, [r0], #1
 801751c:	3a30      	subs	r2, #48	; 0x30
 801751e:	2a09      	cmp	r2, #9
 8017520:	d903      	bls.n	801752a <_vfiprintf_r+0x1ee>
 8017522:	2b00      	cmp	r3, #0
 8017524:	d0c5      	beq.n	80174b2 <_vfiprintf_r+0x176>
 8017526:	9105      	str	r1, [sp, #20]
 8017528:	e7c3      	b.n	80174b2 <_vfiprintf_r+0x176>
 801752a:	fb0c 2101 	mla	r1, ip, r1, r2
 801752e:	4604      	mov	r4, r0
 8017530:	2301      	movs	r3, #1
 8017532:	e7f0      	b.n	8017516 <_vfiprintf_r+0x1da>
 8017534:	ab03      	add	r3, sp, #12
 8017536:	9300      	str	r3, [sp, #0]
 8017538:	462a      	mov	r2, r5
 801753a:	4b16      	ldr	r3, [pc, #88]	; (8017594 <_vfiprintf_r+0x258>)
 801753c:	a904      	add	r1, sp, #16
 801753e:	4630      	mov	r0, r6
 8017540:	f3af 8000 	nop.w
 8017544:	4607      	mov	r7, r0
 8017546:	1c78      	adds	r0, r7, #1
 8017548:	d1d6      	bne.n	80174f8 <_vfiprintf_r+0x1bc>
 801754a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801754c:	07d9      	lsls	r1, r3, #31
 801754e:	d405      	bmi.n	801755c <_vfiprintf_r+0x220>
 8017550:	89ab      	ldrh	r3, [r5, #12]
 8017552:	059a      	lsls	r2, r3, #22
 8017554:	d402      	bmi.n	801755c <_vfiprintf_r+0x220>
 8017556:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017558:	f7ff fe13 	bl	8017182 <__retarget_lock_release_recursive>
 801755c:	89ab      	ldrh	r3, [r5, #12]
 801755e:	065b      	lsls	r3, r3, #25
 8017560:	f53f af12 	bmi.w	8017388 <_vfiprintf_r+0x4c>
 8017564:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017566:	e711      	b.n	801738c <_vfiprintf_r+0x50>
 8017568:	ab03      	add	r3, sp, #12
 801756a:	9300      	str	r3, [sp, #0]
 801756c:	462a      	mov	r2, r5
 801756e:	4b09      	ldr	r3, [pc, #36]	; (8017594 <_vfiprintf_r+0x258>)
 8017570:	a904      	add	r1, sp, #16
 8017572:	4630      	mov	r0, r6
 8017574:	f000 f880 	bl	8017678 <_printf_i>
 8017578:	e7e4      	b.n	8017544 <_vfiprintf_r+0x208>
 801757a:	bf00      	nop
 801757c:	0801ad60 	.word	0x0801ad60
 8017580:	0801ad80 	.word	0x0801ad80
 8017584:	0801ad40 	.word	0x0801ad40
 8017588:	0801ada0 	.word	0x0801ada0
 801758c:	0801adaa 	.word	0x0801adaa
 8017590:	00000000 	.word	0x00000000
 8017594:	08017317 	.word	0x08017317
 8017598:	0801ada6 	.word	0x0801ada6

0801759c <_printf_common>:
 801759c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80175a0:	4616      	mov	r6, r2
 80175a2:	4699      	mov	r9, r3
 80175a4:	688a      	ldr	r2, [r1, #8]
 80175a6:	690b      	ldr	r3, [r1, #16]
 80175a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80175ac:	4293      	cmp	r3, r2
 80175ae:	bfb8      	it	lt
 80175b0:	4613      	movlt	r3, r2
 80175b2:	6033      	str	r3, [r6, #0]
 80175b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80175b8:	4607      	mov	r7, r0
 80175ba:	460c      	mov	r4, r1
 80175bc:	b10a      	cbz	r2, 80175c2 <_printf_common+0x26>
 80175be:	3301      	adds	r3, #1
 80175c0:	6033      	str	r3, [r6, #0]
 80175c2:	6823      	ldr	r3, [r4, #0]
 80175c4:	0699      	lsls	r1, r3, #26
 80175c6:	bf42      	ittt	mi
 80175c8:	6833      	ldrmi	r3, [r6, #0]
 80175ca:	3302      	addmi	r3, #2
 80175cc:	6033      	strmi	r3, [r6, #0]
 80175ce:	6825      	ldr	r5, [r4, #0]
 80175d0:	f015 0506 	ands.w	r5, r5, #6
 80175d4:	d106      	bne.n	80175e4 <_printf_common+0x48>
 80175d6:	f104 0a19 	add.w	sl, r4, #25
 80175da:	68e3      	ldr	r3, [r4, #12]
 80175dc:	6832      	ldr	r2, [r6, #0]
 80175de:	1a9b      	subs	r3, r3, r2
 80175e0:	42ab      	cmp	r3, r5
 80175e2:	dc26      	bgt.n	8017632 <_printf_common+0x96>
 80175e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80175e8:	1e13      	subs	r3, r2, #0
 80175ea:	6822      	ldr	r2, [r4, #0]
 80175ec:	bf18      	it	ne
 80175ee:	2301      	movne	r3, #1
 80175f0:	0692      	lsls	r2, r2, #26
 80175f2:	d42b      	bmi.n	801764c <_printf_common+0xb0>
 80175f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80175f8:	4649      	mov	r1, r9
 80175fa:	4638      	mov	r0, r7
 80175fc:	47c0      	blx	r8
 80175fe:	3001      	adds	r0, #1
 8017600:	d01e      	beq.n	8017640 <_printf_common+0xa4>
 8017602:	6823      	ldr	r3, [r4, #0]
 8017604:	68e5      	ldr	r5, [r4, #12]
 8017606:	6832      	ldr	r2, [r6, #0]
 8017608:	f003 0306 	and.w	r3, r3, #6
 801760c:	2b04      	cmp	r3, #4
 801760e:	bf08      	it	eq
 8017610:	1aad      	subeq	r5, r5, r2
 8017612:	68a3      	ldr	r3, [r4, #8]
 8017614:	6922      	ldr	r2, [r4, #16]
 8017616:	bf0c      	ite	eq
 8017618:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801761c:	2500      	movne	r5, #0
 801761e:	4293      	cmp	r3, r2
 8017620:	bfc4      	itt	gt
 8017622:	1a9b      	subgt	r3, r3, r2
 8017624:	18ed      	addgt	r5, r5, r3
 8017626:	2600      	movs	r6, #0
 8017628:	341a      	adds	r4, #26
 801762a:	42b5      	cmp	r5, r6
 801762c:	d11a      	bne.n	8017664 <_printf_common+0xc8>
 801762e:	2000      	movs	r0, #0
 8017630:	e008      	b.n	8017644 <_printf_common+0xa8>
 8017632:	2301      	movs	r3, #1
 8017634:	4652      	mov	r2, sl
 8017636:	4649      	mov	r1, r9
 8017638:	4638      	mov	r0, r7
 801763a:	47c0      	blx	r8
 801763c:	3001      	adds	r0, #1
 801763e:	d103      	bne.n	8017648 <_printf_common+0xac>
 8017640:	f04f 30ff 	mov.w	r0, #4294967295
 8017644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017648:	3501      	adds	r5, #1
 801764a:	e7c6      	b.n	80175da <_printf_common+0x3e>
 801764c:	18e1      	adds	r1, r4, r3
 801764e:	1c5a      	adds	r2, r3, #1
 8017650:	2030      	movs	r0, #48	; 0x30
 8017652:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017656:	4422      	add	r2, r4
 8017658:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801765c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017660:	3302      	adds	r3, #2
 8017662:	e7c7      	b.n	80175f4 <_printf_common+0x58>
 8017664:	2301      	movs	r3, #1
 8017666:	4622      	mov	r2, r4
 8017668:	4649      	mov	r1, r9
 801766a:	4638      	mov	r0, r7
 801766c:	47c0      	blx	r8
 801766e:	3001      	adds	r0, #1
 8017670:	d0e6      	beq.n	8017640 <_printf_common+0xa4>
 8017672:	3601      	adds	r6, #1
 8017674:	e7d9      	b.n	801762a <_printf_common+0x8e>
	...

08017678 <_printf_i>:
 8017678:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801767c:	460c      	mov	r4, r1
 801767e:	4691      	mov	r9, r2
 8017680:	7e27      	ldrb	r7, [r4, #24]
 8017682:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017684:	2f78      	cmp	r7, #120	; 0x78
 8017686:	4680      	mov	r8, r0
 8017688:	469a      	mov	sl, r3
 801768a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801768e:	d807      	bhi.n	80176a0 <_printf_i+0x28>
 8017690:	2f62      	cmp	r7, #98	; 0x62
 8017692:	d80a      	bhi.n	80176aa <_printf_i+0x32>
 8017694:	2f00      	cmp	r7, #0
 8017696:	f000 80d8 	beq.w	801784a <_printf_i+0x1d2>
 801769a:	2f58      	cmp	r7, #88	; 0x58
 801769c:	f000 80a3 	beq.w	80177e6 <_printf_i+0x16e>
 80176a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80176a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80176a8:	e03a      	b.n	8017720 <_printf_i+0xa8>
 80176aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80176ae:	2b15      	cmp	r3, #21
 80176b0:	d8f6      	bhi.n	80176a0 <_printf_i+0x28>
 80176b2:	a001      	add	r0, pc, #4	; (adr r0, 80176b8 <_printf_i+0x40>)
 80176b4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80176b8:	08017711 	.word	0x08017711
 80176bc:	08017725 	.word	0x08017725
 80176c0:	080176a1 	.word	0x080176a1
 80176c4:	080176a1 	.word	0x080176a1
 80176c8:	080176a1 	.word	0x080176a1
 80176cc:	080176a1 	.word	0x080176a1
 80176d0:	08017725 	.word	0x08017725
 80176d4:	080176a1 	.word	0x080176a1
 80176d8:	080176a1 	.word	0x080176a1
 80176dc:	080176a1 	.word	0x080176a1
 80176e0:	080176a1 	.word	0x080176a1
 80176e4:	08017831 	.word	0x08017831
 80176e8:	08017755 	.word	0x08017755
 80176ec:	08017813 	.word	0x08017813
 80176f0:	080176a1 	.word	0x080176a1
 80176f4:	080176a1 	.word	0x080176a1
 80176f8:	08017853 	.word	0x08017853
 80176fc:	080176a1 	.word	0x080176a1
 8017700:	08017755 	.word	0x08017755
 8017704:	080176a1 	.word	0x080176a1
 8017708:	080176a1 	.word	0x080176a1
 801770c:	0801781b 	.word	0x0801781b
 8017710:	680b      	ldr	r3, [r1, #0]
 8017712:	1d1a      	adds	r2, r3, #4
 8017714:	681b      	ldr	r3, [r3, #0]
 8017716:	600a      	str	r2, [r1, #0]
 8017718:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801771c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017720:	2301      	movs	r3, #1
 8017722:	e0a3      	b.n	801786c <_printf_i+0x1f4>
 8017724:	6825      	ldr	r5, [r4, #0]
 8017726:	6808      	ldr	r0, [r1, #0]
 8017728:	062e      	lsls	r6, r5, #24
 801772a:	f100 0304 	add.w	r3, r0, #4
 801772e:	d50a      	bpl.n	8017746 <_printf_i+0xce>
 8017730:	6805      	ldr	r5, [r0, #0]
 8017732:	600b      	str	r3, [r1, #0]
 8017734:	2d00      	cmp	r5, #0
 8017736:	da03      	bge.n	8017740 <_printf_i+0xc8>
 8017738:	232d      	movs	r3, #45	; 0x2d
 801773a:	426d      	negs	r5, r5
 801773c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017740:	485e      	ldr	r0, [pc, #376]	; (80178bc <_printf_i+0x244>)
 8017742:	230a      	movs	r3, #10
 8017744:	e019      	b.n	801777a <_printf_i+0x102>
 8017746:	f015 0f40 	tst.w	r5, #64	; 0x40
 801774a:	6805      	ldr	r5, [r0, #0]
 801774c:	600b      	str	r3, [r1, #0]
 801774e:	bf18      	it	ne
 8017750:	b22d      	sxthne	r5, r5
 8017752:	e7ef      	b.n	8017734 <_printf_i+0xbc>
 8017754:	680b      	ldr	r3, [r1, #0]
 8017756:	6825      	ldr	r5, [r4, #0]
 8017758:	1d18      	adds	r0, r3, #4
 801775a:	6008      	str	r0, [r1, #0]
 801775c:	0628      	lsls	r0, r5, #24
 801775e:	d501      	bpl.n	8017764 <_printf_i+0xec>
 8017760:	681d      	ldr	r5, [r3, #0]
 8017762:	e002      	b.n	801776a <_printf_i+0xf2>
 8017764:	0669      	lsls	r1, r5, #25
 8017766:	d5fb      	bpl.n	8017760 <_printf_i+0xe8>
 8017768:	881d      	ldrh	r5, [r3, #0]
 801776a:	4854      	ldr	r0, [pc, #336]	; (80178bc <_printf_i+0x244>)
 801776c:	2f6f      	cmp	r7, #111	; 0x6f
 801776e:	bf0c      	ite	eq
 8017770:	2308      	moveq	r3, #8
 8017772:	230a      	movne	r3, #10
 8017774:	2100      	movs	r1, #0
 8017776:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801777a:	6866      	ldr	r6, [r4, #4]
 801777c:	60a6      	str	r6, [r4, #8]
 801777e:	2e00      	cmp	r6, #0
 8017780:	bfa2      	ittt	ge
 8017782:	6821      	ldrge	r1, [r4, #0]
 8017784:	f021 0104 	bicge.w	r1, r1, #4
 8017788:	6021      	strge	r1, [r4, #0]
 801778a:	b90d      	cbnz	r5, 8017790 <_printf_i+0x118>
 801778c:	2e00      	cmp	r6, #0
 801778e:	d04d      	beq.n	801782c <_printf_i+0x1b4>
 8017790:	4616      	mov	r6, r2
 8017792:	fbb5 f1f3 	udiv	r1, r5, r3
 8017796:	fb03 5711 	mls	r7, r3, r1, r5
 801779a:	5dc7      	ldrb	r7, [r0, r7]
 801779c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80177a0:	462f      	mov	r7, r5
 80177a2:	42bb      	cmp	r3, r7
 80177a4:	460d      	mov	r5, r1
 80177a6:	d9f4      	bls.n	8017792 <_printf_i+0x11a>
 80177a8:	2b08      	cmp	r3, #8
 80177aa:	d10b      	bne.n	80177c4 <_printf_i+0x14c>
 80177ac:	6823      	ldr	r3, [r4, #0]
 80177ae:	07df      	lsls	r7, r3, #31
 80177b0:	d508      	bpl.n	80177c4 <_printf_i+0x14c>
 80177b2:	6923      	ldr	r3, [r4, #16]
 80177b4:	6861      	ldr	r1, [r4, #4]
 80177b6:	4299      	cmp	r1, r3
 80177b8:	bfde      	ittt	le
 80177ba:	2330      	movle	r3, #48	; 0x30
 80177bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80177c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80177c4:	1b92      	subs	r2, r2, r6
 80177c6:	6122      	str	r2, [r4, #16]
 80177c8:	f8cd a000 	str.w	sl, [sp]
 80177cc:	464b      	mov	r3, r9
 80177ce:	aa03      	add	r2, sp, #12
 80177d0:	4621      	mov	r1, r4
 80177d2:	4640      	mov	r0, r8
 80177d4:	f7ff fee2 	bl	801759c <_printf_common>
 80177d8:	3001      	adds	r0, #1
 80177da:	d14c      	bne.n	8017876 <_printf_i+0x1fe>
 80177dc:	f04f 30ff 	mov.w	r0, #4294967295
 80177e0:	b004      	add	sp, #16
 80177e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80177e6:	4835      	ldr	r0, [pc, #212]	; (80178bc <_printf_i+0x244>)
 80177e8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80177ec:	6823      	ldr	r3, [r4, #0]
 80177ee:	680e      	ldr	r6, [r1, #0]
 80177f0:	061f      	lsls	r7, r3, #24
 80177f2:	f856 5b04 	ldr.w	r5, [r6], #4
 80177f6:	600e      	str	r6, [r1, #0]
 80177f8:	d514      	bpl.n	8017824 <_printf_i+0x1ac>
 80177fa:	07d9      	lsls	r1, r3, #31
 80177fc:	bf44      	itt	mi
 80177fe:	f043 0320 	orrmi.w	r3, r3, #32
 8017802:	6023      	strmi	r3, [r4, #0]
 8017804:	b91d      	cbnz	r5, 801780e <_printf_i+0x196>
 8017806:	6823      	ldr	r3, [r4, #0]
 8017808:	f023 0320 	bic.w	r3, r3, #32
 801780c:	6023      	str	r3, [r4, #0]
 801780e:	2310      	movs	r3, #16
 8017810:	e7b0      	b.n	8017774 <_printf_i+0xfc>
 8017812:	6823      	ldr	r3, [r4, #0]
 8017814:	f043 0320 	orr.w	r3, r3, #32
 8017818:	6023      	str	r3, [r4, #0]
 801781a:	2378      	movs	r3, #120	; 0x78
 801781c:	4828      	ldr	r0, [pc, #160]	; (80178c0 <_printf_i+0x248>)
 801781e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017822:	e7e3      	b.n	80177ec <_printf_i+0x174>
 8017824:	065e      	lsls	r6, r3, #25
 8017826:	bf48      	it	mi
 8017828:	b2ad      	uxthmi	r5, r5
 801782a:	e7e6      	b.n	80177fa <_printf_i+0x182>
 801782c:	4616      	mov	r6, r2
 801782e:	e7bb      	b.n	80177a8 <_printf_i+0x130>
 8017830:	680b      	ldr	r3, [r1, #0]
 8017832:	6826      	ldr	r6, [r4, #0]
 8017834:	6960      	ldr	r0, [r4, #20]
 8017836:	1d1d      	adds	r5, r3, #4
 8017838:	600d      	str	r5, [r1, #0]
 801783a:	0635      	lsls	r5, r6, #24
 801783c:	681b      	ldr	r3, [r3, #0]
 801783e:	d501      	bpl.n	8017844 <_printf_i+0x1cc>
 8017840:	6018      	str	r0, [r3, #0]
 8017842:	e002      	b.n	801784a <_printf_i+0x1d2>
 8017844:	0671      	lsls	r1, r6, #25
 8017846:	d5fb      	bpl.n	8017840 <_printf_i+0x1c8>
 8017848:	8018      	strh	r0, [r3, #0]
 801784a:	2300      	movs	r3, #0
 801784c:	6123      	str	r3, [r4, #16]
 801784e:	4616      	mov	r6, r2
 8017850:	e7ba      	b.n	80177c8 <_printf_i+0x150>
 8017852:	680b      	ldr	r3, [r1, #0]
 8017854:	1d1a      	adds	r2, r3, #4
 8017856:	600a      	str	r2, [r1, #0]
 8017858:	681e      	ldr	r6, [r3, #0]
 801785a:	6862      	ldr	r2, [r4, #4]
 801785c:	2100      	movs	r1, #0
 801785e:	4630      	mov	r0, r6
 8017860:	f7e8 fcb6 	bl	80001d0 <memchr>
 8017864:	b108      	cbz	r0, 801786a <_printf_i+0x1f2>
 8017866:	1b80      	subs	r0, r0, r6
 8017868:	6060      	str	r0, [r4, #4]
 801786a:	6863      	ldr	r3, [r4, #4]
 801786c:	6123      	str	r3, [r4, #16]
 801786e:	2300      	movs	r3, #0
 8017870:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017874:	e7a8      	b.n	80177c8 <_printf_i+0x150>
 8017876:	6923      	ldr	r3, [r4, #16]
 8017878:	4632      	mov	r2, r6
 801787a:	4649      	mov	r1, r9
 801787c:	4640      	mov	r0, r8
 801787e:	47d0      	blx	sl
 8017880:	3001      	adds	r0, #1
 8017882:	d0ab      	beq.n	80177dc <_printf_i+0x164>
 8017884:	6823      	ldr	r3, [r4, #0]
 8017886:	079b      	lsls	r3, r3, #30
 8017888:	d413      	bmi.n	80178b2 <_printf_i+0x23a>
 801788a:	68e0      	ldr	r0, [r4, #12]
 801788c:	9b03      	ldr	r3, [sp, #12]
 801788e:	4298      	cmp	r0, r3
 8017890:	bfb8      	it	lt
 8017892:	4618      	movlt	r0, r3
 8017894:	e7a4      	b.n	80177e0 <_printf_i+0x168>
 8017896:	2301      	movs	r3, #1
 8017898:	4632      	mov	r2, r6
 801789a:	4649      	mov	r1, r9
 801789c:	4640      	mov	r0, r8
 801789e:	47d0      	blx	sl
 80178a0:	3001      	adds	r0, #1
 80178a2:	d09b      	beq.n	80177dc <_printf_i+0x164>
 80178a4:	3501      	adds	r5, #1
 80178a6:	68e3      	ldr	r3, [r4, #12]
 80178a8:	9903      	ldr	r1, [sp, #12]
 80178aa:	1a5b      	subs	r3, r3, r1
 80178ac:	42ab      	cmp	r3, r5
 80178ae:	dcf2      	bgt.n	8017896 <_printf_i+0x21e>
 80178b0:	e7eb      	b.n	801788a <_printf_i+0x212>
 80178b2:	2500      	movs	r5, #0
 80178b4:	f104 0619 	add.w	r6, r4, #25
 80178b8:	e7f5      	b.n	80178a6 <_printf_i+0x22e>
 80178ba:	bf00      	nop
 80178bc:	0801adb1 	.word	0x0801adb1
 80178c0:	0801adc2 	.word	0x0801adc2

080178c4 <_sbrk_r>:
 80178c4:	b538      	push	{r3, r4, r5, lr}
 80178c6:	4d06      	ldr	r5, [pc, #24]	; (80178e0 <_sbrk_r+0x1c>)
 80178c8:	2300      	movs	r3, #0
 80178ca:	4604      	mov	r4, r0
 80178cc:	4608      	mov	r0, r1
 80178ce:	602b      	str	r3, [r5, #0]
 80178d0:	f7e9 fd60 	bl	8001394 <_sbrk>
 80178d4:	1c43      	adds	r3, r0, #1
 80178d6:	d102      	bne.n	80178de <_sbrk_r+0x1a>
 80178d8:	682b      	ldr	r3, [r5, #0]
 80178da:	b103      	cbz	r3, 80178de <_sbrk_r+0x1a>
 80178dc:	6023      	str	r3, [r4, #0]
 80178de:	bd38      	pop	{r3, r4, r5, pc}
 80178e0:	2000b118 	.word	0x2000b118

080178e4 <__sread>:
 80178e4:	b510      	push	{r4, lr}
 80178e6:	460c      	mov	r4, r1
 80178e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80178ec:	f000 fa6c 	bl	8017dc8 <_read_r>
 80178f0:	2800      	cmp	r0, #0
 80178f2:	bfab      	itete	ge
 80178f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80178f6:	89a3      	ldrhlt	r3, [r4, #12]
 80178f8:	181b      	addge	r3, r3, r0
 80178fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80178fe:	bfac      	ite	ge
 8017900:	6563      	strge	r3, [r4, #84]	; 0x54
 8017902:	81a3      	strhlt	r3, [r4, #12]
 8017904:	bd10      	pop	{r4, pc}

08017906 <__swrite>:
 8017906:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801790a:	461f      	mov	r7, r3
 801790c:	898b      	ldrh	r3, [r1, #12]
 801790e:	05db      	lsls	r3, r3, #23
 8017910:	4605      	mov	r5, r0
 8017912:	460c      	mov	r4, r1
 8017914:	4616      	mov	r6, r2
 8017916:	d505      	bpl.n	8017924 <__swrite+0x1e>
 8017918:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801791c:	2302      	movs	r3, #2
 801791e:	2200      	movs	r2, #0
 8017920:	f000 f9d0 	bl	8017cc4 <_lseek_r>
 8017924:	89a3      	ldrh	r3, [r4, #12]
 8017926:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801792a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801792e:	81a3      	strh	r3, [r4, #12]
 8017930:	4632      	mov	r2, r6
 8017932:	463b      	mov	r3, r7
 8017934:	4628      	mov	r0, r5
 8017936:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801793a:	f000 b869 	b.w	8017a10 <_write_r>

0801793e <__sseek>:
 801793e:	b510      	push	{r4, lr}
 8017940:	460c      	mov	r4, r1
 8017942:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017946:	f000 f9bd 	bl	8017cc4 <_lseek_r>
 801794a:	1c43      	adds	r3, r0, #1
 801794c:	89a3      	ldrh	r3, [r4, #12]
 801794e:	bf15      	itete	ne
 8017950:	6560      	strne	r0, [r4, #84]	; 0x54
 8017952:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017956:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801795a:	81a3      	strheq	r3, [r4, #12]
 801795c:	bf18      	it	ne
 801795e:	81a3      	strhne	r3, [r4, #12]
 8017960:	bd10      	pop	{r4, pc}

08017962 <__sclose>:
 8017962:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017966:	f000 b8db 	b.w	8017b20 <_close_r>
	...

0801796c <__swbuf_r>:
 801796c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801796e:	460e      	mov	r6, r1
 8017970:	4614      	mov	r4, r2
 8017972:	4605      	mov	r5, r0
 8017974:	b118      	cbz	r0, 801797e <__swbuf_r+0x12>
 8017976:	6983      	ldr	r3, [r0, #24]
 8017978:	b90b      	cbnz	r3, 801797e <__swbuf_r+0x12>
 801797a:	f7ff fb51 	bl	8017020 <__sinit>
 801797e:	4b21      	ldr	r3, [pc, #132]	; (8017a04 <__swbuf_r+0x98>)
 8017980:	429c      	cmp	r4, r3
 8017982:	d12b      	bne.n	80179dc <__swbuf_r+0x70>
 8017984:	686c      	ldr	r4, [r5, #4]
 8017986:	69a3      	ldr	r3, [r4, #24]
 8017988:	60a3      	str	r3, [r4, #8]
 801798a:	89a3      	ldrh	r3, [r4, #12]
 801798c:	071a      	lsls	r2, r3, #28
 801798e:	d52f      	bpl.n	80179f0 <__swbuf_r+0x84>
 8017990:	6923      	ldr	r3, [r4, #16]
 8017992:	b36b      	cbz	r3, 80179f0 <__swbuf_r+0x84>
 8017994:	6923      	ldr	r3, [r4, #16]
 8017996:	6820      	ldr	r0, [r4, #0]
 8017998:	1ac0      	subs	r0, r0, r3
 801799a:	6963      	ldr	r3, [r4, #20]
 801799c:	b2f6      	uxtb	r6, r6
 801799e:	4283      	cmp	r3, r0
 80179a0:	4637      	mov	r7, r6
 80179a2:	dc04      	bgt.n	80179ae <__swbuf_r+0x42>
 80179a4:	4621      	mov	r1, r4
 80179a6:	4628      	mov	r0, r5
 80179a8:	f000 f950 	bl	8017c4c <_fflush_r>
 80179ac:	bb30      	cbnz	r0, 80179fc <__swbuf_r+0x90>
 80179ae:	68a3      	ldr	r3, [r4, #8]
 80179b0:	3b01      	subs	r3, #1
 80179b2:	60a3      	str	r3, [r4, #8]
 80179b4:	6823      	ldr	r3, [r4, #0]
 80179b6:	1c5a      	adds	r2, r3, #1
 80179b8:	6022      	str	r2, [r4, #0]
 80179ba:	701e      	strb	r6, [r3, #0]
 80179bc:	6963      	ldr	r3, [r4, #20]
 80179be:	3001      	adds	r0, #1
 80179c0:	4283      	cmp	r3, r0
 80179c2:	d004      	beq.n	80179ce <__swbuf_r+0x62>
 80179c4:	89a3      	ldrh	r3, [r4, #12]
 80179c6:	07db      	lsls	r3, r3, #31
 80179c8:	d506      	bpl.n	80179d8 <__swbuf_r+0x6c>
 80179ca:	2e0a      	cmp	r6, #10
 80179cc:	d104      	bne.n	80179d8 <__swbuf_r+0x6c>
 80179ce:	4621      	mov	r1, r4
 80179d0:	4628      	mov	r0, r5
 80179d2:	f000 f93b 	bl	8017c4c <_fflush_r>
 80179d6:	b988      	cbnz	r0, 80179fc <__swbuf_r+0x90>
 80179d8:	4638      	mov	r0, r7
 80179da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80179dc:	4b0a      	ldr	r3, [pc, #40]	; (8017a08 <__swbuf_r+0x9c>)
 80179de:	429c      	cmp	r4, r3
 80179e0:	d101      	bne.n	80179e6 <__swbuf_r+0x7a>
 80179e2:	68ac      	ldr	r4, [r5, #8]
 80179e4:	e7cf      	b.n	8017986 <__swbuf_r+0x1a>
 80179e6:	4b09      	ldr	r3, [pc, #36]	; (8017a0c <__swbuf_r+0xa0>)
 80179e8:	429c      	cmp	r4, r3
 80179ea:	bf08      	it	eq
 80179ec:	68ec      	ldreq	r4, [r5, #12]
 80179ee:	e7ca      	b.n	8017986 <__swbuf_r+0x1a>
 80179f0:	4621      	mov	r1, r4
 80179f2:	4628      	mov	r0, r5
 80179f4:	f000 f81e 	bl	8017a34 <__swsetup_r>
 80179f8:	2800      	cmp	r0, #0
 80179fa:	d0cb      	beq.n	8017994 <__swbuf_r+0x28>
 80179fc:	f04f 37ff 	mov.w	r7, #4294967295
 8017a00:	e7ea      	b.n	80179d8 <__swbuf_r+0x6c>
 8017a02:	bf00      	nop
 8017a04:	0801ad60 	.word	0x0801ad60
 8017a08:	0801ad80 	.word	0x0801ad80
 8017a0c:	0801ad40 	.word	0x0801ad40

08017a10 <_write_r>:
 8017a10:	b538      	push	{r3, r4, r5, lr}
 8017a12:	4d07      	ldr	r5, [pc, #28]	; (8017a30 <_write_r+0x20>)
 8017a14:	4604      	mov	r4, r0
 8017a16:	4608      	mov	r0, r1
 8017a18:	4611      	mov	r1, r2
 8017a1a:	2200      	movs	r2, #0
 8017a1c:	602a      	str	r2, [r5, #0]
 8017a1e:	461a      	mov	r2, r3
 8017a20:	f7e9 fc67 	bl	80012f2 <_write>
 8017a24:	1c43      	adds	r3, r0, #1
 8017a26:	d102      	bne.n	8017a2e <_write_r+0x1e>
 8017a28:	682b      	ldr	r3, [r5, #0]
 8017a2a:	b103      	cbz	r3, 8017a2e <_write_r+0x1e>
 8017a2c:	6023      	str	r3, [r4, #0]
 8017a2e:	bd38      	pop	{r3, r4, r5, pc}
 8017a30:	2000b118 	.word	0x2000b118

08017a34 <__swsetup_r>:
 8017a34:	4b32      	ldr	r3, [pc, #200]	; (8017b00 <__swsetup_r+0xcc>)
 8017a36:	b570      	push	{r4, r5, r6, lr}
 8017a38:	681d      	ldr	r5, [r3, #0]
 8017a3a:	4606      	mov	r6, r0
 8017a3c:	460c      	mov	r4, r1
 8017a3e:	b125      	cbz	r5, 8017a4a <__swsetup_r+0x16>
 8017a40:	69ab      	ldr	r3, [r5, #24]
 8017a42:	b913      	cbnz	r3, 8017a4a <__swsetup_r+0x16>
 8017a44:	4628      	mov	r0, r5
 8017a46:	f7ff faeb 	bl	8017020 <__sinit>
 8017a4a:	4b2e      	ldr	r3, [pc, #184]	; (8017b04 <__swsetup_r+0xd0>)
 8017a4c:	429c      	cmp	r4, r3
 8017a4e:	d10f      	bne.n	8017a70 <__swsetup_r+0x3c>
 8017a50:	686c      	ldr	r4, [r5, #4]
 8017a52:	89a3      	ldrh	r3, [r4, #12]
 8017a54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017a58:	0719      	lsls	r1, r3, #28
 8017a5a:	d42c      	bmi.n	8017ab6 <__swsetup_r+0x82>
 8017a5c:	06dd      	lsls	r5, r3, #27
 8017a5e:	d411      	bmi.n	8017a84 <__swsetup_r+0x50>
 8017a60:	2309      	movs	r3, #9
 8017a62:	6033      	str	r3, [r6, #0]
 8017a64:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017a68:	81a3      	strh	r3, [r4, #12]
 8017a6a:	f04f 30ff 	mov.w	r0, #4294967295
 8017a6e:	e03e      	b.n	8017aee <__swsetup_r+0xba>
 8017a70:	4b25      	ldr	r3, [pc, #148]	; (8017b08 <__swsetup_r+0xd4>)
 8017a72:	429c      	cmp	r4, r3
 8017a74:	d101      	bne.n	8017a7a <__swsetup_r+0x46>
 8017a76:	68ac      	ldr	r4, [r5, #8]
 8017a78:	e7eb      	b.n	8017a52 <__swsetup_r+0x1e>
 8017a7a:	4b24      	ldr	r3, [pc, #144]	; (8017b0c <__swsetup_r+0xd8>)
 8017a7c:	429c      	cmp	r4, r3
 8017a7e:	bf08      	it	eq
 8017a80:	68ec      	ldreq	r4, [r5, #12]
 8017a82:	e7e6      	b.n	8017a52 <__swsetup_r+0x1e>
 8017a84:	0758      	lsls	r0, r3, #29
 8017a86:	d512      	bpl.n	8017aae <__swsetup_r+0x7a>
 8017a88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017a8a:	b141      	cbz	r1, 8017a9e <__swsetup_r+0x6a>
 8017a8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017a90:	4299      	cmp	r1, r3
 8017a92:	d002      	beq.n	8017a9a <__swsetup_r+0x66>
 8017a94:	4630      	mov	r0, r6
 8017a96:	f7ff fb7d 	bl	8017194 <_free_r>
 8017a9a:	2300      	movs	r3, #0
 8017a9c:	6363      	str	r3, [r4, #52]	; 0x34
 8017a9e:	89a3      	ldrh	r3, [r4, #12]
 8017aa0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017aa4:	81a3      	strh	r3, [r4, #12]
 8017aa6:	2300      	movs	r3, #0
 8017aa8:	6063      	str	r3, [r4, #4]
 8017aaa:	6923      	ldr	r3, [r4, #16]
 8017aac:	6023      	str	r3, [r4, #0]
 8017aae:	89a3      	ldrh	r3, [r4, #12]
 8017ab0:	f043 0308 	orr.w	r3, r3, #8
 8017ab4:	81a3      	strh	r3, [r4, #12]
 8017ab6:	6923      	ldr	r3, [r4, #16]
 8017ab8:	b94b      	cbnz	r3, 8017ace <__swsetup_r+0x9a>
 8017aba:	89a3      	ldrh	r3, [r4, #12]
 8017abc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017ac0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017ac4:	d003      	beq.n	8017ace <__swsetup_r+0x9a>
 8017ac6:	4621      	mov	r1, r4
 8017ac8:	4630      	mov	r0, r6
 8017aca:	f000 f931 	bl	8017d30 <__smakebuf_r>
 8017ace:	89a0      	ldrh	r0, [r4, #12]
 8017ad0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017ad4:	f010 0301 	ands.w	r3, r0, #1
 8017ad8:	d00a      	beq.n	8017af0 <__swsetup_r+0xbc>
 8017ada:	2300      	movs	r3, #0
 8017adc:	60a3      	str	r3, [r4, #8]
 8017ade:	6963      	ldr	r3, [r4, #20]
 8017ae0:	425b      	negs	r3, r3
 8017ae2:	61a3      	str	r3, [r4, #24]
 8017ae4:	6923      	ldr	r3, [r4, #16]
 8017ae6:	b943      	cbnz	r3, 8017afa <__swsetup_r+0xc6>
 8017ae8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017aec:	d1ba      	bne.n	8017a64 <__swsetup_r+0x30>
 8017aee:	bd70      	pop	{r4, r5, r6, pc}
 8017af0:	0781      	lsls	r1, r0, #30
 8017af2:	bf58      	it	pl
 8017af4:	6963      	ldrpl	r3, [r4, #20]
 8017af6:	60a3      	str	r3, [r4, #8]
 8017af8:	e7f4      	b.n	8017ae4 <__swsetup_r+0xb0>
 8017afa:	2000      	movs	r0, #0
 8017afc:	e7f7      	b.n	8017aee <__swsetup_r+0xba>
 8017afe:	bf00      	nop
 8017b00:	20000190 	.word	0x20000190
 8017b04:	0801ad60 	.word	0x0801ad60
 8017b08:	0801ad80 	.word	0x0801ad80
 8017b0c:	0801ad40 	.word	0x0801ad40

08017b10 <abort>:
 8017b10:	b508      	push	{r3, lr}
 8017b12:	2006      	movs	r0, #6
 8017b14:	f000 f992 	bl	8017e3c <raise>
 8017b18:	2001      	movs	r0, #1
 8017b1a:	f7e9 fbc3 	bl	80012a4 <_exit>
	...

08017b20 <_close_r>:
 8017b20:	b538      	push	{r3, r4, r5, lr}
 8017b22:	4d06      	ldr	r5, [pc, #24]	; (8017b3c <_close_r+0x1c>)
 8017b24:	2300      	movs	r3, #0
 8017b26:	4604      	mov	r4, r0
 8017b28:	4608      	mov	r0, r1
 8017b2a:	602b      	str	r3, [r5, #0]
 8017b2c:	f7e9 fbfd 	bl	800132a <_close>
 8017b30:	1c43      	adds	r3, r0, #1
 8017b32:	d102      	bne.n	8017b3a <_close_r+0x1a>
 8017b34:	682b      	ldr	r3, [r5, #0]
 8017b36:	b103      	cbz	r3, 8017b3a <_close_r+0x1a>
 8017b38:	6023      	str	r3, [r4, #0]
 8017b3a:	bd38      	pop	{r3, r4, r5, pc}
 8017b3c:	2000b118 	.word	0x2000b118

08017b40 <__sflush_r>:
 8017b40:	898a      	ldrh	r2, [r1, #12]
 8017b42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b46:	4605      	mov	r5, r0
 8017b48:	0710      	lsls	r0, r2, #28
 8017b4a:	460c      	mov	r4, r1
 8017b4c:	d458      	bmi.n	8017c00 <__sflush_r+0xc0>
 8017b4e:	684b      	ldr	r3, [r1, #4]
 8017b50:	2b00      	cmp	r3, #0
 8017b52:	dc05      	bgt.n	8017b60 <__sflush_r+0x20>
 8017b54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017b56:	2b00      	cmp	r3, #0
 8017b58:	dc02      	bgt.n	8017b60 <__sflush_r+0x20>
 8017b5a:	2000      	movs	r0, #0
 8017b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017b62:	2e00      	cmp	r6, #0
 8017b64:	d0f9      	beq.n	8017b5a <__sflush_r+0x1a>
 8017b66:	2300      	movs	r3, #0
 8017b68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017b6c:	682f      	ldr	r7, [r5, #0]
 8017b6e:	602b      	str	r3, [r5, #0]
 8017b70:	d032      	beq.n	8017bd8 <__sflush_r+0x98>
 8017b72:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017b74:	89a3      	ldrh	r3, [r4, #12]
 8017b76:	075a      	lsls	r2, r3, #29
 8017b78:	d505      	bpl.n	8017b86 <__sflush_r+0x46>
 8017b7a:	6863      	ldr	r3, [r4, #4]
 8017b7c:	1ac0      	subs	r0, r0, r3
 8017b7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017b80:	b10b      	cbz	r3, 8017b86 <__sflush_r+0x46>
 8017b82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017b84:	1ac0      	subs	r0, r0, r3
 8017b86:	2300      	movs	r3, #0
 8017b88:	4602      	mov	r2, r0
 8017b8a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017b8c:	6a21      	ldr	r1, [r4, #32]
 8017b8e:	4628      	mov	r0, r5
 8017b90:	47b0      	blx	r6
 8017b92:	1c43      	adds	r3, r0, #1
 8017b94:	89a3      	ldrh	r3, [r4, #12]
 8017b96:	d106      	bne.n	8017ba6 <__sflush_r+0x66>
 8017b98:	6829      	ldr	r1, [r5, #0]
 8017b9a:	291d      	cmp	r1, #29
 8017b9c:	d82c      	bhi.n	8017bf8 <__sflush_r+0xb8>
 8017b9e:	4a2a      	ldr	r2, [pc, #168]	; (8017c48 <__sflush_r+0x108>)
 8017ba0:	40ca      	lsrs	r2, r1
 8017ba2:	07d6      	lsls	r6, r2, #31
 8017ba4:	d528      	bpl.n	8017bf8 <__sflush_r+0xb8>
 8017ba6:	2200      	movs	r2, #0
 8017ba8:	6062      	str	r2, [r4, #4]
 8017baa:	04d9      	lsls	r1, r3, #19
 8017bac:	6922      	ldr	r2, [r4, #16]
 8017bae:	6022      	str	r2, [r4, #0]
 8017bb0:	d504      	bpl.n	8017bbc <__sflush_r+0x7c>
 8017bb2:	1c42      	adds	r2, r0, #1
 8017bb4:	d101      	bne.n	8017bba <__sflush_r+0x7a>
 8017bb6:	682b      	ldr	r3, [r5, #0]
 8017bb8:	b903      	cbnz	r3, 8017bbc <__sflush_r+0x7c>
 8017bba:	6560      	str	r0, [r4, #84]	; 0x54
 8017bbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017bbe:	602f      	str	r7, [r5, #0]
 8017bc0:	2900      	cmp	r1, #0
 8017bc2:	d0ca      	beq.n	8017b5a <__sflush_r+0x1a>
 8017bc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017bc8:	4299      	cmp	r1, r3
 8017bca:	d002      	beq.n	8017bd2 <__sflush_r+0x92>
 8017bcc:	4628      	mov	r0, r5
 8017bce:	f7ff fae1 	bl	8017194 <_free_r>
 8017bd2:	2000      	movs	r0, #0
 8017bd4:	6360      	str	r0, [r4, #52]	; 0x34
 8017bd6:	e7c1      	b.n	8017b5c <__sflush_r+0x1c>
 8017bd8:	6a21      	ldr	r1, [r4, #32]
 8017bda:	2301      	movs	r3, #1
 8017bdc:	4628      	mov	r0, r5
 8017bde:	47b0      	blx	r6
 8017be0:	1c41      	adds	r1, r0, #1
 8017be2:	d1c7      	bne.n	8017b74 <__sflush_r+0x34>
 8017be4:	682b      	ldr	r3, [r5, #0]
 8017be6:	2b00      	cmp	r3, #0
 8017be8:	d0c4      	beq.n	8017b74 <__sflush_r+0x34>
 8017bea:	2b1d      	cmp	r3, #29
 8017bec:	d001      	beq.n	8017bf2 <__sflush_r+0xb2>
 8017bee:	2b16      	cmp	r3, #22
 8017bf0:	d101      	bne.n	8017bf6 <__sflush_r+0xb6>
 8017bf2:	602f      	str	r7, [r5, #0]
 8017bf4:	e7b1      	b.n	8017b5a <__sflush_r+0x1a>
 8017bf6:	89a3      	ldrh	r3, [r4, #12]
 8017bf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017bfc:	81a3      	strh	r3, [r4, #12]
 8017bfe:	e7ad      	b.n	8017b5c <__sflush_r+0x1c>
 8017c00:	690f      	ldr	r7, [r1, #16]
 8017c02:	2f00      	cmp	r7, #0
 8017c04:	d0a9      	beq.n	8017b5a <__sflush_r+0x1a>
 8017c06:	0793      	lsls	r3, r2, #30
 8017c08:	680e      	ldr	r6, [r1, #0]
 8017c0a:	bf08      	it	eq
 8017c0c:	694b      	ldreq	r3, [r1, #20]
 8017c0e:	600f      	str	r7, [r1, #0]
 8017c10:	bf18      	it	ne
 8017c12:	2300      	movne	r3, #0
 8017c14:	eba6 0807 	sub.w	r8, r6, r7
 8017c18:	608b      	str	r3, [r1, #8]
 8017c1a:	f1b8 0f00 	cmp.w	r8, #0
 8017c1e:	dd9c      	ble.n	8017b5a <__sflush_r+0x1a>
 8017c20:	6a21      	ldr	r1, [r4, #32]
 8017c22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017c24:	4643      	mov	r3, r8
 8017c26:	463a      	mov	r2, r7
 8017c28:	4628      	mov	r0, r5
 8017c2a:	47b0      	blx	r6
 8017c2c:	2800      	cmp	r0, #0
 8017c2e:	dc06      	bgt.n	8017c3e <__sflush_r+0xfe>
 8017c30:	89a3      	ldrh	r3, [r4, #12]
 8017c32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017c36:	81a3      	strh	r3, [r4, #12]
 8017c38:	f04f 30ff 	mov.w	r0, #4294967295
 8017c3c:	e78e      	b.n	8017b5c <__sflush_r+0x1c>
 8017c3e:	4407      	add	r7, r0
 8017c40:	eba8 0800 	sub.w	r8, r8, r0
 8017c44:	e7e9      	b.n	8017c1a <__sflush_r+0xda>
 8017c46:	bf00      	nop
 8017c48:	20400001 	.word	0x20400001

08017c4c <_fflush_r>:
 8017c4c:	b538      	push	{r3, r4, r5, lr}
 8017c4e:	690b      	ldr	r3, [r1, #16]
 8017c50:	4605      	mov	r5, r0
 8017c52:	460c      	mov	r4, r1
 8017c54:	b913      	cbnz	r3, 8017c5c <_fflush_r+0x10>
 8017c56:	2500      	movs	r5, #0
 8017c58:	4628      	mov	r0, r5
 8017c5a:	bd38      	pop	{r3, r4, r5, pc}
 8017c5c:	b118      	cbz	r0, 8017c66 <_fflush_r+0x1a>
 8017c5e:	6983      	ldr	r3, [r0, #24]
 8017c60:	b90b      	cbnz	r3, 8017c66 <_fflush_r+0x1a>
 8017c62:	f7ff f9dd 	bl	8017020 <__sinit>
 8017c66:	4b14      	ldr	r3, [pc, #80]	; (8017cb8 <_fflush_r+0x6c>)
 8017c68:	429c      	cmp	r4, r3
 8017c6a:	d11b      	bne.n	8017ca4 <_fflush_r+0x58>
 8017c6c:	686c      	ldr	r4, [r5, #4]
 8017c6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017c72:	2b00      	cmp	r3, #0
 8017c74:	d0ef      	beq.n	8017c56 <_fflush_r+0xa>
 8017c76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017c78:	07d0      	lsls	r0, r2, #31
 8017c7a:	d404      	bmi.n	8017c86 <_fflush_r+0x3a>
 8017c7c:	0599      	lsls	r1, r3, #22
 8017c7e:	d402      	bmi.n	8017c86 <_fflush_r+0x3a>
 8017c80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017c82:	f7ff fa7d 	bl	8017180 <__retarget_lock_acquire_recursive>
 8017c86:	4628      	mov	r0, r5
 8017c88:	4621      	mov	r1, r4
 8017c8a:	f7ff ff59 	bl	8017b40 <__sflush_r>
 8017c8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017c90:	07da      	lsls	r2, r3, #31
 8017c92:	4605      	mov	r5, r0
 8017c94:	d4e0      	bmi.n	8017c58 <_fflush_r+0xc>
 8017c96:	89a3      	ldrh	r3, [r4, #12]
 8017c98:	059b      	lsls	r3, r3, #22
 8017c9a:	d4dd      	bmi.n	8017c58 <_fflush_r+0xc>
 8017c9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017c9e:	f7ff fa70 	bl	8017182 <__retarget_lock_release_recursive>
 8017ca2:	e7d9      	b.n	8017c58 <_fflush_r+0xc>
 8017ca4:	4b05      	ldr	r3, [pc, #20]	; (8017cbc <_fflush_r+0x70>)
 8017ca6:	429c      	cmp	r4, r3
 8017ca8:	d101      	bne.n	8017cae <_fflush_r+0x62>
 8017caa:	68ac      	ldr	r4, [r5, #8]
 8017cac:	e7df      	b.n	8017c6e <_fflush_r+0x22>
 8017cae:	4b04      	ldr	r3, [pc, #16]	; (8017cc0 <_fflush_r+0x74>)
 8017cb0:	429c      	cmp	r4, r3
 8017cb2:	bf08      	it	eq
 8017cb4:	68ec      	ldreq	r4, [r5, #12]
 8017cb6:	e7da      	b.n	8017c6e <_fflush_r+0x22>
 8017cb8:	0801ad60 	.word	0x0801ad60
 8017cbc:	0801ad80 	.word	0x0801ad80
 8017cc0:	0801ad40 	.word	0x0801ad40

08017cc4 <_lseek_r>:
 8017cc4:	b538      	push	{r3, r4, r5, lr}
 8017cc6:	4d07      	ldr	r5, [pc, #28]	; (8017ce4 <_lseek_r+0x20>)
 8017cc8:	4604      	mov	r4, r0
 8017cca:	4608      	mov	r0, r1
 8017ccc:	4611      	mov	r1, r2
 8017cce:	2200      	movs	r2, #0
 8017cd0:	602a      	str	r2, [r5, #0]
 8017cd2:	461a      	mov	r2, r3
 8017cd4:	f7e9 fb50 	bl	8001378 <_lseek>
 8017cd8:	1c43      	adds	r3, r0, #1
 8017cda:	d102      	bne.n	8017ce2 <_lseek_r+0x1e>
 8017cdc:	682b      	ldr	r3, [r5, #0]
 8017cde:	b103      	cbz	r3, 8017ce2 <_lseek_r+0x1e>
 8017ce0:	6023      	str	r3, [r4, #0]
 8017ce2:	bd38      	pop	{r3, r4, r5, pc}
 8017ce4:	2000b118 	.word	0x2000b118

08017ce8 <__swhatbuf_r>:
 8017ce8:	b570      	push	{r4, r5, r6, lr}
 8017cea:	460e      	mov	r6, r1
 8017cec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017cf0:	2900      	cmp	r1, #0
 8017cf2:	b096      	sub	sp, #88	; 0x58
 8017cf4:	4614      	mov	r4, r2
 8017cf6:	461d      	mov	r5, r3
 8017cf8:	da07      	bge.n	8017d0a <__swhatbuf_r+0x22>
 8017cfa:	2300      	movs	r3, #0
 8017cfc:	602b      	str	r3, [r5, #0]
 8017cfe:	89b3      	ldrh	r3, [r6, #12]
 8017d00:	061a      	lsls	r2, r3, #24
 8017d02:	d410      	bmi.n	8017d26 <__swhatbuf_r+0x3e>
 8017d04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017d08:	e00e      	b.n	8017d28 <__swhatbuf_r+0x40>
 8017d0a:	466a      	mov	r2, sp
 8017d0c:	f000 f8b2 	bl	8017e74 <_fstat_r>
 8017d10:	2800      	cmp	r0, #0
 8017d12:	dbf2      	blt.n	8017cfa <__swhatbuf_r+0x12>
 8017d14:	9a01      	ldr	r2, [sp, #4]
 8017d16:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017d1a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017d1e:	425a      	negs	r2, r3
 8017d20:	415a      	adcs	r2, r3
 8017d22:	602a      	str	r2, [r5, #0]
 8017d24:	e7ee      	b.n	8017d04 <__swhatbuf_r+0x1c>
 8017d26:	2340      	movs	r3, #64	; 0x40
 8017d28:	2000      	movs	r0, #0
 8017d2a:	6023      	str	r3, [r4, #0]
 8017d2c:	b016      	add	sp, #88	; 0x58
 8017d2e:	bd70      	pop	{r4, r5, r6, pc}

08017d30 <__smakebuf_r>:
 8017d30:	898b      	ldrh	r3, [r1, #12]
 8017d32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017d34:	079d      	lsls	r5, r3, #30
 8017d36:	4606      	mov	r6, r0
 8017d38:	460c      	mov	r4, r1
 8017d3a:	d507      	bpl.n	8017d4c <__smakebuf_r+0x1c>
 8017d3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017d40:	6023      	str	r3, [r4, #0]
 8017d42:	6123      	str	r3, [r4, #16]
 8017d44:	2301      	movs	r3, #1
 8017d46:	6163      	str	r3, [r4, #20]
 8017d48:	b002      	add	sp, #8
 8017d4a:	bd70      	pop	{r4, r5, r6, pc}
 8017d4c:	ab01      	add	r3, sp, #4
 8017d4e:	466a      	mov	r2, sp
 8017d50:	f7ff ffca 	bl	8017ce8 <__swhatbuf_r>
 8017d54:	9900      	ldr	r1, [sp, #0]
 8017d56:	4605      	mov	r5, r0
 8017d58:	4630      	mov	r0, r6
 8017d5a:	f7ff fa6b 	bl	8017234 <_malloc_r>
 8017d5e:	b948      	cbnz	r0, 8017d74 <__smakebuf_r+0x44>
 8017d60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017d64:	059a      	lsls	r2, r3, #22
 8017d66:	d4ef      	bmi.n	8017d48 <__smakebuf_r+0x18>
 8017d68:	f023 0303 	bic.w	r3, r3, #3
 8017d6c:	f043 0302 	orr.w	r3, r3, #2
 8017d70:	81a3      	strh	r3, [r4, #12]
 8017d72:	e7e3      	b.n	8017d3c <__smakebuf_r+0xc>
 8017d74:	4b0d      	ldr	r3, [pc, #52]	; (8017dac <__smakebuf_r+0x7c>)
 8017d76:	62b3      	str	r3, [r6, #40]	; 0x28
 8017d78:	89a3      	ldrh	r3, [r4, #12]
 8017d7a:	6020      	str	r0, [r4, #0]
 8017d7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017d80:	81a3      	strh	r3, [r4, #12]
 8017d82:	9b00      	ldr	r3, [sp, #0]
 8017d84:	6163      	str	r3, [r4, #20]
 8017d86:	9b01      	ldr	r3, [sp, #4]
 8017d88:	6120      	str	r0, [r4, #16]
 8017d8a:	b15b      	cbz	r3, 8017da4 <__smakebuf_r+0x74>
 8017d8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017d90:	4630      	mov	r0, r6
 8017d92:	f000 f881 	bl	8017e98 <_isatty_r>
 8017d96:	b128      	cbz	r0, 8017da4 <__smakebuf_r+0x74>
 8017d98:	89a3      	ldrh	r3, [r4, #12]
 8017d9a:	f023 0303 	bic.w	r3, r3, #3
 8017d9e:	f043 0301 	orr.w	r3, r3, #1
 8017da2:	81a3      	strh	r3, [r4, #12]
 8017da4:	89a0      	ldrh	r0, [r4, #12]
 8017da6:	4305      	orrs	r5, r0
 8017da8:	81a5      	strh	r5, [r4, #12]
 8017daa:	e7cd      	b.n	8017d48 <__smakebuf_r+0x18>
 8017dac:	08016fb9 	.word	0x08016fb9

08017db0 <__malloc_lock>:
 8017db0:	4801      	ldr	r0, [pc, #4]	; (8017db8 <__malloc_lock+0x8>)
 8017db2:	f7ff b9e5 	b.w	8017180 <__retarget_lock_acquire_recursive>
 8017db6:	bf00      	nop
 8017db8:	2000c9fc 	.word	0x2000c9fc

08017dbc <__malloc_unlock>:
 8017dbc:	4801      	ldr	r0, [pc, #4]	; (8017dc4 <__malloc_unlock+0x8>)
 8017dbe:	f7ff b9e0 	b.w	8017182 <__retarget_lock_release_recursive>
 8017dc2:	bf00      	nop
 8017dc4:	2000c9fc 	.word	0x2000c9fc

08017dc8 <_read_r>:
 8017dc8:	b538      	push	{r3, r4, r5, lr}
 8017dca:	4d07      	ldr	r5, [pc, #28]	; (8017de8 <_read_r+0x20>)
 8017dcc:	4604      	mov	r4, r0
 8017dce:	4608      	mov	r0, r1
 8017dd0:	4611      	mov	r1, r2
 8017dd2:	2200      	movs	r2, #0
 8017dd4:	602a      	str	r2, [r5, #0]
 8017dd6:	461a      	mov	r2, r3
 8017dd8:	f7e9 fa6e 	bl	80012b8 <_read>
 8017ddc:	1c43      	adds	r3, r0, #1
 8017dde:	d102      	bne.n	8017de6 <_read_r+0x1e>
 8017de0:	682b      	ldr	r3, [r5, #0]
 8017de2:	b103      	cbz	r3, 8017de6 <_read_r+0x1e>
 8017de4:	6023      	str	r3, [r4, #0]
 8017de6:	bd38      	pop	{r3, r4, r5, pc}
 8017de8:	2000b118 	.word	0x2000b118

08017dec <_raise_r>:
 8017dec:	291f      	cmp	r1, #31
 8017dee:	b538      	push	{r3, r4, r5, lr}
 8017df0:	4604      	mov	r4, r0
 8017df2:	460d      	mov	r5, r1
 8017df4:	d904      	bls.n	8017e00 <_raise_r+0x14>
 8017df6:	2316      	movs	r3, #22
 8017df8:	6003      	str	r3, [r0, #0]
 8017dfa:	f04f 30ff 	mov.w	r0, #4294967295
 8017dfe:	bd38      	pop	{r3, r4, r5, pc}
 8017e00:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8017e02:	b112      	cbz	r2, 8017e0a <_raise_r+0x1e>
 8017e04:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017e08:	b94b      	cbnz	r3, 8017e1e <_raise_r+0x32>
 8017e0a:	4620      	mov	r0, r4
 8017e0c:	f000 f830 	bl	8017e70 <_getpid_r>
 8017e10:	462a      	mov	r2, r5
 8017e12:	4601      	mov	r1, r0
 8017e14:	4620      	mov	r0, r4
 8017e16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017e1a:	f000 b817 	b.w	8017e4c <_kill_r>
 8017e1e:	2b01      	cmp	r3, #1
 8017e20:	d00a      	beq.n	8017e38 <_raise_r+0x4c>
 8017e22:	1c59      	adds	r1, r3, #1
 8017e24:	d103      	bne.n	8017e2e <_raise_r+0x42>
 8017e26:	2316      	movs	r3, #22
 8017e28:	6003      	str	r3, [r0, #0]
 8017e2a:	2001      	movs	r0, #1
 8017e2c:	e7e7      	b.n	8017dfe <_raise_r+0x12>
 8017e2e:	2400      	movs	r4, #0
 8017e30:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017e34:	4628      	mov	r0, r5
 8017e36:	4798      	blx	r3
 8017e38:	2000      	movs	r0, #0
 8017e3a:	e7e0      	b.n	8017dfe <_raise_r+0x12>

08017e3c <raise>:
 8017e3c:	4b02      	ldr	r3, [pc, #8]	; (8017e48 <raise+0xc>)
 8017e3e:	4601      	mov	r1, r0
 8017e40:	6818      	ldr	r0, [r3, #0]
 8017e42:	f7ff bfd3 	b.w	8017dec <_raise_r>
 8017e46:	bf00      	nop
 8017e48:	20000190 	.word	0x20000190

08017e4c <_kill_r>:
 8017e4c:	b538      	push	{r3, r4, r5, lr}
 8017e4e:	4d07      	ldr	r5, [pc, #28]	; (8017e6c <_kill_r+0x20>)
 8017e50:	2300      	movs	r3, #0
 8017e52:	4604      	mov	r4, r0
 8017e54:	4608      	mov	r0, r1
 8017e56:	4611      	mov	r1, r2
 8017e58:	602b      	str	r3, [r5, #0]
 8017e5a:	f7e9 fa11 	bl	8001280 <_kill>
 8017e5e:	1c43      	adds	r3, r0, #1
 8017e60:	d102      	bne.n	8017e68 <_kill_r+0x1c>
 8017e62:	682b      	ldr	r3, [r5, #0]
 8017e64:	b103      	cbz	r3, 8017e68 <_kill_r+0x1c>
 8017e66:	6023      	str	r3, [r4, #0]
 8017e68:	bd38      	pop	{r3, r4, r5, pc}
 8017e6a:	bf00      	nop
 8017e6c:	2000b118 	.word	0x2000b118

08017e70 <_getpid_r>:
 8017e70:	f7e9 b9fe 	b.w	8001270 <_getpid>

08017e74 <_fstat_r>:
 8017e74:	b538      	push	{r3, r4, r5, lr}
 8017e76:	4d07      	ldr	r5, [pc, #28]	; (8017e94 <_fstat_r+0x20>)
 8017e78:	2300      	movs	r3, #0
 8017e7a:	4604      	mov	r4, r0
 8017e7c:	4608      	mov	r0, r1
 8017e7e:	4611      	mov	r1, r2
 8017e80:	602b      	str	r3, [r5, #0]
 8017e82:	f7e9 fa5e 	bl	8001342 <_fstat>
 8017e86:	1c43      	adds	r3, r0, #1
 8017e88:	d102      	bne.n	8017e90 <_fstat_r+0x1c>
 8017e8a:	682b      	ldr	r3, [r5, #0]
 8017e8c:	b103      	cbz	r3, 8017e90 <_fstat_r+0x1c>
 8017e8e:	6023      	str	r3, [r4, #0]
 8017e90:	bd38      	pop	{r3, r4, r5, pc}
 8017e92:	bf00      	nop
 8017e94:	2000b118 	.word	0x2000b118

08017e98 <_isatty_r>:
 8017e98:	b538      	push	{r3, r4, r5, lr}
 8017e9a:	4d06      	ldr	r5, [pc, #24]	; (8017eb4 <_isatty_r+0x1c>)
 8017e9c:	2300      	movs	r3, #0
 8017e9e:	4604      	mov	r4, r0
 8017ea0:	4608      	mov	r0, r1
 8017ea2:	602b      	str	r3, [r5, #0]
 8017ea4:	f7e9 fa5d 	bl	8001362 <_isatty>
 8017ea8:	1c43      	adds	r3, r0, #1
 8017eaa:	d102      	bne.n	8017eb2 <_isatty_r+0x1a>
 8017eac:	682b      	ldr	r3, [r5, #0]
 8017eae:	b103      	cbz	r3, 8017eb2 <_isatty_r+0x1a>
 8017eb0:	6023      	str	r3, [r4, #0]
 8017eb2:	bd38      	pop	{r3, r4, r5, pc}
 8017eb4:	2000b118 	.word	0x2000b118

08017eb8 <_init>:
 8017eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017eba:	bf00      	nop
 8017ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017ebe:	bc08      	pop	{r3}
 8017ec0:	469e      	mov	lr, r3
 8017ec2:	4770      	bx	lr

08017ec4 <_fini>:
 8017ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ec6:	bf00      	nop
 8017ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017eca:	bc08      	pop	{r3}
 8017ecc:	469e      	mov	lr, r3
 8017ece:	4770      	bx	lr
