
NTP_STM32_F407VGT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e540  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004d00  0801e6d0  0801e6d0  0002e6d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080233d0  080233d0  00040268  2**0
                  CONTENTS
  4 .ARM          00000008  080233d0  080233d0  000333d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080233d8  080233d8  00040268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080233d8  080233d8  000333d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080233dc  080233dc  000333dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000268  20000000  080233e0  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ccbc  20000268  08023648  00040268  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000cf24  08023648  0004cf24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040268  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005a11f  00000000  00000000  00040298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000a9d3  00000000  00000000  0009a3b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002cd0  00000000  00000000  000a4d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002a90  00000000  00000000  000a7a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00038558  00000000  00000000  000aa4f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00046314  00000000  00000000  000e2a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd568  00000000  00000000  00128d5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  002262c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c944  00000000  00000000  00226318  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000268 	.word	0x20000268
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801e6b8 	.word	0x0801e6b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000026c 	.word	0x2000026c
 80001cc:	0801e6b8 	.word	0x0801e6b8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_uldivmod>:
 8000b4c:	b953      	cbnz	r3, 8000b64 <__aeabi_uldivmod+0x18>
 8000b4e:	b94a      	cbnz	r2, 8000b64 <__aeabi_uldivmod+0x18>
 8000b50:	2900      	cmp	r1, #0
 8000b52:	bf08      	it	eq
 8000b54:	2800      	cmpeq	r0, #0
 8000b56:	bf1c      	itt	ne
 8000b58:	f04f 31ff 	movne.w	r1, #4294967295
 8000b5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b60:	f000 b9a4 	b.w	8000eac <__aeabi_idiv0>
 8000b64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b6c:	f000 f83c 	bl	8000be8 <__udivmoddi4>
 8000b70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b78:	b004      	add	sp, #16
 8000b7a:	4770      	bx	lr

08000b7c <__aeabi_d2lz>:
 8000b7c:	b538      	push	{r3, r4, r5, lr}
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2300      	movs	r3, #0
 8000b82:	4604      	mov	r4, r0
 8000b84:	460d      	mov	r5, r1
 8000b86:	f7ff ffb9 	bl	8000afc <__aeabi_dcmplt>
 8000b8a:	b928      	cbnz	r0, 8000b98 <__aeabi_d2lz+0x1c>
 8000b8c:	4620      	mov	r0, r4
 8000b8e:	4629      	mov	r1, r5
 8000b90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b94:	f000 b80a 	b.w	8000bac <__aeabi_d2ulz>
 8000b98:	4620      	mov	r0, r4
 8000b9a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000b9e:	f000 f805 	bl	8000bac <__aeabi_d2ulz>
 8000ba2:	4240      	negs	r0, r0
 8000ba4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ba8:	bd38      	pop	{r3, r4, r5, pc}
 8000baa:	bf00      	nop

08000bac <__aeabi_d2ulz>:
 8000bac:	b5d0      	push	{r4, r6, r7, lr}
 8000bae:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <__aeabi_d2ulz+0x34>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4606      	mov	r6, r0
 8000bb4:	460f      	mov	r7, r1
 8000bb6:	f7ff fd2f 	bl	8000618 <__aeabi_dmul>
 8000bba:	f000 f979 	bl	8000eb0 <__aeabi_d2uiz>
 8000bbe:	4604      	mov	r4, r0
 8000bc0:	f7ff fcb0 	bl	8000524 <__aeabi_ui2d>
 8000bc4:	4b07      	ldr	r3, [pc, #28]	; (8000be4 <__aeabi_d2ulz+0x38>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	f7ff fd26 	bl	8000618 <__aeabi_dmul>
 8000bcc:	4602      	mov	r2, r0
 8000bce:	460b      	mov	r3, r1
 8000bd0:	4630      	mov	r0, r6
 8000bd2:	4639      	mov	r1, r7
 8000bd4:	f7ff fb68 	bl	80002a8 <__aeabi_dsub>
 8000bd8:	f000 f96a 	bl	8000eb0 <__aeabi_d2uiz>
 8000bdc:	4621      	mov	r1, r4
 8000bde:	bdd0      	pop	{r4, r6, r7, pc}
 8000be0:	3df00000 	.word	0x3df00000
 8000be4:	41f00000 	.word	0x41f00000

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468c      	mov	ip, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f040 8083 	bne.w	8000cfe <__udivmoddi4+0x116>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d947      	bls.n	8000c8e <__udivmoddi4+0xa6>
 8000bfe:	fab2 f282 	clz	r2, r2
 8000c02:	b142      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	f1c2 0020 	rsb	r0, r2, #32
 8000c08:	fa24 f000 	lsr.w	r0, r4, r0
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	4097      	lsls	r7, r2
 8000c10:	ea40 0c01 	orr.w	ip, r0, r1
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c20:	fa1f fe87 	uxth.w	lr, r7
 8000c24:	fb08 c116 	mls	r1, r8, r6, ip
 8000c28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3a:	f080 8119 	bcs.w	8000e70 <__udivmoddi4+0x288>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8116 	bls.w	8000e70 <__udivmoddi4+0x288>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	443b      	add	r3, r7
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c50:	fb08 3310 	mls	r3, r8, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	193c      	adds	r4, r7, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8105 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	f240 8102 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c70:	3802      	subs	r0, #2
 8000c72:	443c      	add	r4, r7
 8000c74:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c78:	eba4 040e 	sub.w	r4, r4, lr
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	b11d      	cbz	r5, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c5 4300 	strd	r4, r3, [r5]
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	b902      	cbnz	r2, 8000c92 <__udivmoddi4+0xaa>
 8000c90:	deff      	udf	#255	; 0xff
 8000c92:	fab2 f282 	clz	r2, r2
 8000c96:	2a00      	cmp	r2, #0
 8000c98:	d150      	bne.n	8000d3c <__udivmoddi4+0x154>
 8000c9a:	1bcb      	subs	r3, r1, r7
 8000c9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca0:	fa1f f887 	uxth.w	r8, r7
 8000ca4:	2601      	movs	r6, #1
 8000ca6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000caa:	0c21      	lsrs	r1, r4, #16
 8000cac:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000cbc:	1879      	adds	r1, r7, r1
 8000cbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0xe2>
 8000cc4:	428b      	cmp	r3, r1
 8000cc6:	f200 80e9 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000cca:	4684      	mov	ip, r0
 8000ccc:	1ac9      	subs	r1, r1, r3
 8000cce:	b2a3      	uxth	r3, r4
 8000cd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cd8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cdc:	fb08 f800 	mul.w	r8, r8, r0
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x10c>
 8000ce4:	193c      	adds	r4, r7, r4
 8000ce6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x10a>
 8000cec:	45a0      	cmp	r8, r4
 8000cee:	f200 80d9 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	eba4 0408 	sub.w	r4, r4, r8
 8000cf8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cfc:	e7bf      	b.n	8000c7e <__udivmoddi4+0x96>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x12e>
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	f000 80b1 	beq.w	8000e6a <__udivmoddi4+0x282>
 8000d08:	2600      	movs	r6, #0
 8000d0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0e:	4630      	mov	r0, r6
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f683 	clz	r6, r3
 8000d1a:	2e00      	cmp	r6, #0
 8000d1c:	d14a      	bne.n	8000db4 <__udivmoddi4+0x1cc>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0x140>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80b8 	bhi.w	8000e98 <__udivmoddi4+0x2b0>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	468c      	mov	ip, r1
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	d0a8      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000d36:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d3a:	e7a5      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000d3c:	f1c2 0320 	rsb	r3, r2, #32
 8000d40:	fa20 f603 	lsr.w	r6, r0, r3
 8000d44:	4097      	lsls	r7, r2
 8000d46:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4e:	40d9      	lsrs	r1, r3
 8000d50:	4330      	orrs	r0, r6
 8000d52:	0c03      	lsrs	r3, r0, #16
 8000d54:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d58:	fa1f f887 	uxth.w	r8, r7
 8000d5c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb06 f108 	mul.w	r1, r6, r8
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x19c>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d76:	f080 808d 	bcs.w	8000e94 <__udivmoddi4+0x2ac>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 808a 	bls.w	8000e94 <__udivmoddi4+0x2ac>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b281      	uxth	r1, r0
 8000d88:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb00 f308 	mul.w	r3, r0, r8
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x1c4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da2:	d273      	bcs.n	8000e8c <__udivmoddi4+0x2a4>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	d971      	bls.n	8000e8c <__udivmoddi4+0x2a4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	4439      	add	r1, r7
 8000dac:	1acb      	subs	r3, r1, r3
 8000dae:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000db2:	e778      	b.n	8000ca6 <__udivmoddi4+0xbe>
 8000db4:	f1c6 0c20 	rsb	ip, r6, #32
 8000db8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dbc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dc0:	431c      	orrs	r4, r3
 8000dc2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dc6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dca:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dce:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	0c3b      	lsrs	r3, r7, #16
 8000dd6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dda:	fa1f f884 	uxth.w	r8, r4
 8000dde:	fb0e 1119 	mls	r1, lr, r9, r1
 8000de2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000de6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dea:	458a      	cmp	sl, r1
 8000dec:	fa02 f206 	lsl.w	r2, r2, r6
 8000df0:	fa00 f306 	lsl.w	r3, r0, r6
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x220>
 8000df6:	1861      	adds	r1, r4, r1
 8000df8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dfc:	d248      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000dfe:	458a      	cmp	sl, r1
 8000e00:	d946      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4421      	add	r1, r4
 8000e08:	eba1 010a 	sub.w	r1, r1, sl
 8000e0c:	b2bf      	uxth	r7, r7
 8000e0e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e12:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e16:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e1a:	fb00 f808 	mul.w	r8, r0, r8
 8000e1e:	45b8      	cmp	r8, r7
 8000e20:	d907      	bls.n	8000e32 <__udivmoddi4+0x24a>
 8000e22:	19e7      	adds	r7, r4, r7
 8000e24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e28:	d22e      	bcs.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2a:	45b8      	cmp	r8, r7
 8000e2c:	d92c      	bls.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4427      	add	r7, r4
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	eba7 0708 	sub.w	r7, r7, r8
 8000e3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3e:	454f      	cmp	r7, r9
 8000e40:	46c6      	mov	lr, r8
 8000e42:	4649      	mov	r1, r9
 8000e44:	d31a      	bcc.n	8000e7c <__udivmoddi4+0x294>
 8000e46:	d017      	beq.n	8000e78 <__udivmoddi4+0x290>
 8000e48:	b15d      	cbz	r5, 8000e62 <__udivmoddi4+0x27a>
 8000e4a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e4e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e52:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e56:	40f2      	lsrs	r2, r6
 8000e58:	ea4c 0202 	orr.w	r2, ip, r2
 8000e5c:	40f7      	lsrs	r7, r6
 8000e5e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e62:	2600      	movs	r6, #0
 8000e64:	4631      	mov	r1, r6
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e70b      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e9      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6fd      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e78:	4543      	cmp	r3, r8
 8000e7a:	d2e5      	bcs.n	8000e48 <__udivmoddi4+0x260>
 8000e7c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e80:	eb69 0104 	sbc.w	r1, r9, r4
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7df      	b.n	8000e48 <__udivmoddi4+0x260>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e7d2      	b.n	8000e32 <__udivmoddi4+0x24a>
 8000e8c:	4660      	mov	r0, ip
 8000e8e:	e78d      	b.n	8000dac <__udivmoddi4+0x1c4>
 8000e90:	4681      	mov	r9, r0
 8000e92:	e7b9      	b.n	8000e08 <__udivmoddi4+0x220>
 8000e94:	4666      	mov	r6, ip
 8000e96:	e775      	b.n	8000d84 <__udivmoddi4+0x19c>
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e74a      	b.n	8000d32 <__udivmoddi4+0x14a>
 8000e9c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea0:	4439      	add	r1, r7
 8000ea2:	e713      	b.n	8000ccc <__udivmoddi4+0xe4>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	443c      	add	r4, r7
 8000ea8:	e724      	b.n	8000cf4 <__udivmoddi4+0x10c>
 8000eaa:	bf00      	nop

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <__aeabi_d2uiz>:
 8000eb0:	004a      	lsls	r2, r1, #1
 8000eb2:	d211      	bcs.n	8000ed8 <__aeabi_d2uiz+0x28>
 8000eb4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000eb8:	d211      	bcs.n	8000ede <__aeabi_d2uiz+0x2e>
 8000eba:	d50d      	bpl.n	8000ed8 <__aeabi_d2uiz+0x28>
 8000ebc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ec0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ec4:	d40e      	bmi.n	8000ee4 <__aeabi_d2uiz+0x34>
 8000ec6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000eca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ece:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ed2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ed6:	4770      	bx	lr
 8000ed8:	f04f 0000 	mov.w	r0, #0
 8000edc:	4770      	bx	lr
 8000ede:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ee2:	d102      	bne.n	8000eea <__aeabi_d2uiz+0x3a>
 8000ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee8:	4770      	bx	lr
 8000eea:	f04f 0000 	mov.w	r0, #0
 8000eee:	4770      	bx	lr

08000ef0 <ReadDeviceAddressOffset>:
	/* Lock the Flash to disable the flash control register access (recommended
	to protect the FLASH memory against possible unwanted operation) *********/
	HAL_FLASH_Lock();
}
void ReadDeviceAddressOffset(char* Dout, int size, int offset)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b087      	sub	sp, #28
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
	uint32_t Address = CONFIGURATION_START_ADDR+offset;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000f02:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
 8000f06:	613b      	str	r3, [r7, #16]

	for (int i = 0; i<size; i++){
 8000f08:	2300      	movs	r3, #0
 8000f0a:	617b      	str	r3, [r7, #20]
 8000f0c:	e00c      	b.n	8000f28 <ReadDeviceAddressOffset+0x38>
		Dout[i] = *(__IO char*)(Address+i);
 8000f0e:	697a      	ldr	r2, [r7, #20]
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	4413      	add	r3, r2
 8000f14:	4619      	mov	r1, r3
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	68fa      	ldr	r2, [r7, #12]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	780a      	ldrb	r2, [r1, #0]
 8000f1e:	b2d2      	uxtb	r2, r2
 8000f20:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i<size; i++){
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	3301      	adds	r3, #1
 8000f26:	617b      	str	r3, [r7, #20]
 8000f28:	697a      	ldr	r2, [r7, #20]
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	dbee      	blt.n	8000f0e <ReadDeviceAddressOffset+0x1e>
	}
}
 8000f30:	bf00      	nop
 8000f32:	bf00      	nop
 8000f34:	371c      	adds	r7, #28
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
	...

08000f40 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	4a07      	ldr	r2, [pc, #28]	; (8000f6c <vApplicationGetIdleTaskMemory+0x2c>)
 8000f50:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	4a06      	ldr	r2, [pc, #24]	; (8000f70 <vApplicationGetIdleTaskMemory+0x30>)
 8000f56:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2280      	movs	r2, #128	; 0x80
 8000f5c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f5e:	bf00      	nop
 8000f60:	3714      	adds	r7, #20
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	20000284 	.word	0x20000284
 8000f70:	200002d8 	.word	0x200002d8

08000f74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f74:	b5b0      	push	{r4, r5, r7, lr}
 8000f76:	b0c0      	sub	sp, #256	; 0x100
 8000f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	memset(&gps,0,sizeof(gps));
 8000f7a:	221b      	movs	r2, #27
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	48a3      	ldr	r0, [pc, #652]	; (800120c <main+0x298>)
 8000f80:	f01b f928 	bl	801c1d4 <memset>
		// ZDA-38;RMC-68



		 //включение ZDA
		 char MESZDA[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x08, 0x01, 0x01, 0x00, 0x01, 0x01, 0x00, 0x0B, 0x6B};
 8000f84:	4ba2      	ldr	r3, [pc, #648]	; (8001210 <main+0x29c>)
 8000f86:	f107 04ec 	add.w	r4, r7, #236	; 0xec
 8000f8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		 char CONZDA[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x08, 0x01, 0x19};
 8000f90:	4aa0      	ldr	r2, [pc, #640]	; (8001214 <main+0x2a0>)
 8000f92:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000f96:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f98:	c303      	stmia	r3!, {r0, r1}
 8000f9a:	801a      	strh	r2, [r3, #0]
		 //отключение ZDA
		 //char MESZDA[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x5B};
		 //char CONZDA[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x08, 0x01, 0x19};

		 //отключение остального
		 char MESGGA[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x23};
 8000f9c:	4b9e      	ldr	r3, [pc, #632]	; (8001218 <main+0x2a4>)
 8000f9e:	f107 04d0 	add.w	r4, r7, #208	; 0xd0
 8000fa2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fa4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		 char CONGGA[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x00, 0xF9, 0x11};
 8000fa8:	4a9c      	ldr	r2, [pc, #624]	; (800121c <main+0x2a8>)
 8000faa:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000fae:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fb0:	c303      	stmia	r3!, {r0, r1}
 8000fb2:	801a      	strh	r2, [r3, #0]

		 char MESGLL[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2A};
 8000fb4:	4b9a      	ldr	r3, [pc, #616]	; (8001220 <main+0x2ac>)
 8000fb6:	f107 04b4 	add.w	r4, r7, #180	; 0xb4
 8000fba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fbc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		 char CONGLL[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x01, 0xFA, 0x12};
 8000fc0:	4a98      	ldr	r2, [pc, #608]	; (8001224 <main+0x2b0>)
 8000fc2:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000fc6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fc8:	c303      	stmia	r3!, {r0, r1}
 8000fca:	801a      	strh	r2, [r3, #0]

		 char MESGSA[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x31};
 8000fcc:	4b96      	ldr	r3, [pc, #600]	; (8001228 <main+0x2b4>)
 8000fce:	f107 0498 	add.w	r4, r7, #152	; 0x98
 8000fd2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fd4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		 char CONGSA[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x02, 0xFB, 0x13};
 8000fd8:	4a94      	ldr	r2, [pc, #592]	; (800122c <main+0x2b8>)
 8000fda:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000fde:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fe0:	c303      	stmia	r3!, {r0, r1}
 8000fe2:	801a      	strh	r2, [r3, #0]

		 char MESGSV[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x38};
 8000fe4:	4b92      	ldr	r3, [pc, #584]	; (8001230 <main+0x2bc>)
 8000fe6:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 8000fea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		 char CONGSV[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x03, 0xFC, 0x14};
 8000ff0:	4a90      	ldr	r2, [pc, #576]	; (8001234 <main+0x2c0>)
 8000ff2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000ff6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ff8:	c303      	stmia	r3!, {r0, r1}
 8000ffa:	801a      	strh	r2, [r3, #0]

		 char MESVTG[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x46};
 8000ffc:	4b8e      	ldr	r3, [pc, #568]	; (8001238 <main+0x2c4>)
 8000ffe:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8001002:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001004:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		 char CONVTG[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x05, 0xFE, 0x16};
 8001008:	4a8c      	ldr	r2, [pc, #560]	; (800123c <main+0x2c8>)
 800100a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800100e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001010:	c303      	stmia	r3!, {r0, r1}
 8001012:	801a      	strh	r2, [r3, #0]
		 //отключение RMC на всякий
		 //char MESRMC[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x3F};
		 //char CONRMC[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x04, 0xFD, 0x15};

		 //включение RMC
		 char MESRMC[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x04, 0x01, 0x01, 0x00, 0x01, 0x01, 0x00, 0x07, 0x4F};
 8001014:	4b8a      	ldr	r3, [pc, #552]	; (8001240 <main+0x2cc>)
 8001016:	f107 0444 	add.w	r4, r7, #68	; 0x44
 800101a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800101c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		 char CONRMC[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x04, 0xFD, 0x15};
 8001020:	4a88      	ldr	r2, [pc, #544]	; (8001244 <main+0x2d0>)
 8001022:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001026:	ca07      	ldmia	r2, {r0, r1, r2}
 8001028:	c303      	stmia	r3!, {r0, r1}
 800102a:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800102c:	f001 f85c 	bl	80020e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001030:	f000 f91a 	bl	8001268 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001034:	f000 faca 	bl	80015cc <MX_GPIO_Init>
  MX_RTC_Init();
 8001038:	f000 f998 	bl	800136c <MX_RTC_Init>
  MX_USART1_UART_Init();
 800103c:	f000 fa72 	bl	8001524 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001040:	f000 fa9a 	bl	8001578 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001044:	f000 fa22 	bl	800148c <MX_TIM2_Init>
  MX_SPI3_Init();
 8001048:	f000 f9ea 	bl	8001420 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  //TIM1
    HAL_TIM_Base_Start_IT(&htim2);
 800104c:	487e      	ldr	r0, [pc, #504]	; (8001248 <main+0x2d4>)
 800104e:	f004 fe5d 	bl	8005d0c <HAL_TIM_Base_Start_IT>

    HAL_Delay(5000);
 8001052:	f241 3088 	movw	r0, #5000	; 0x1388
 8001056:	f001 f889 	bl	800216c <HAL_Delay>

   //ON ZDA
    HAL_UART_Transmit(&huart2,(uint8_t*) MESZDA, 16, 1000);
 800105a:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 800105e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001062:	2210      	movs	r2, #16
 8001064:	4879      	ldr	r0, [pc, #484]	; (800124c <main+0x2d8>)
 8001066:	f005 fad0 	bl	800660a <HAL_UART_Transmit>
    HAL_Delay(100);
 800106a:	2064      	movs	r0, #100	; 0x64
 800106c:	f001 f87e 	bl	800216c <HAL_Delay>
    HAL_UART_Transmit(&huart2,(uint8_t*) CONZDA, 10, 1000);
 8001070:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 8001074:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001078:	220a      	movs	r2, #10
 800107a:	4874      	ldr	r0, [pc, #464]	; (800124c <main+0x2d8>)
 800107c:	f005 fac5 	bl	800660a <HAL_UART_Transmit>
    HAL_Delay(100);
 8001080:	2064      	movs	r0, #100	; 0x64
 8001082:	f001 f873 	bl	800216c <HAL_Delay>

    // OFF protokol
    HAL_UART_Transmit(&huart2,(uint8_t*) MESGGA, 16, 1000);
 8001086:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 800108a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800108e:	2210      	movs	r2, #16
 8001090:	486e      	ldr	r0, [pc, #440]	; (800124c <main+0x2d8>)
 8001092:	f005 faba 	bl	800660a <HAL_UART_Transmit>
    HAL_Delay(100);
 8001096:	2064      	movs	r0, #100	; 0x64
 8001098:	f001 f868 	bl	800216c <HAL_Delay>
    HAL_UART_Transmit(&huart2,(uint8_t*) CONGGA, 10, 1000);
 800109c:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 80010a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010a4:	220a      	movs	r2, #10
 80010a6:	4869      	ldr	r0, [pc, #420]	; (800124c <main+0x2d8>)
 80010a8:	f005 faaf 	bl	800660a <HAL_UART_Transmit>
    HAL_Delay(100);
 80010ac:	2064      	movs	r0, #100	; 0x64
 80010ae:	f001 f85d 	bl	800216c <HAL_Delay>

    HAL_UART_Transmit(&huart2,(uint8_t*) MESGLL, 16, 1000);
 80010b2:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 80010b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ba:	2210      	movs	r2, #16
 80010bc:	4863      	ldr	r0, [pc, #396]	; (800124c <main+0x2d8>)
 80010be:	f005 faa4 	bl	800660a <HAL_UART_Transmit>
    HAL_Delay(100);
 80010c2:	2064      	movs	r0, #100	; 0x64
 80010c4:	f001 f852 	bl	800216c <HAL_Delay>
    HAL_UART_Transmit(&huart2,(uint8_t*) CONGLL, 10, 1000);
 80010c8:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 80010cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d0:	220a      	movs	r2, #10
 80010d2:	485e      	ldr	r0, [pc, #376]	; (800124c <main+0x2d8>)
 80010d4:	f005 fa99 	bl	800660a <HAL_UART_Transmit>
    HAL_Delay(100);
 80010d8:	2064      	movs	r0, #100	; 0x64
 80010da:	f001 f847 	bl	800216c <HAL_Delay>

    HAL_UART_Transmit(&huart2,(uint8_t*) MESGSA, 16, 1000);
 80010de:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80010e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010e6:	2210      	movs	r2, #16
 80010e8:	4858      	ldr	r0, [pc, #352]	; (800124c <main+0x2d8>)
 80010ea:	f005 fa8e 	bl	800660a <HAL_UART_Transmit>
    HAL_Delay(100);
 80010ee:	2064      	movs	r0, #100	; 0x64
 80010f0:	f001 f83c 	bl	800216c <HAL_Delay>
    HAL_UART_Transmit(&huart2,(uint8_t*) CONGSA, 10, 1000);
 80010f4:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 80010f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010fc:	220a      	movs	r2, #10
 80010fe:	4853      	ldr	r0, [pc, #332]	; (800124c <main+0x2d8>)
 8001100:	f005 fa83 	bl	800660a <HAL_UART_Transmit>
    HAL_Delay(100);
 8001104:	2064      	movs	r0, #100	; 0x64
 8001106:	f001 f831 	bl	800216c <HAL_Delay>

    HAL_UART_Transmit(&huart2,(uint8_t*) MESGSV, 16, 1000);
 800110a:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 800110e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001112:	2210      	movs	r2, #16
 8001114:	484d      	ldr	r0, [pc, #308]	; (800124c <main+0x2d8>)
 8001116:	f005 fa78 	bl	800660a <HAL_UART_Transmit>
    HAL_Delay(100);
 800111a:	2064      	movs	r0, #100	; 0x64
 800111c:	f001 f826 	bl	800216c <HAL_Delay>
    HAL_UART_Transmit(&huart2,(uint8_t*) CONGSV, 10, 1000);
 8001120:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8001124:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001128:	220a      	movs	r2, #10
 800112a:	4848      	ldr	r0, [pc, #288]	; (800124c <main+0x2d8>)
 800112c:	f005 fa6d 	bl	800660a <HAL_UART_Transmit>
    HAL_Delay(100);
 8001130:	2064      	movs	r0, #100	; 0x64
 8001132:	f001 f81b 	bl	800216c <HAL_Delay>

    HAL_UART_Transmit(&huart2,(uint8_t*) MESVTG, 16, 1000);
 8001136:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800113a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800113e:	2210      	movs	r2, #16
 8001140:	4842      	ldr	r0, [pc, #264]	; (800124c <main+0x2d8>)
 8001142:	f005 fa62 	bl	800660a <HAL_UART_Transmit>
    HAL_Delay(100);
 8001146:	2064      	movs	r0, #100	; 0x64
 8001148:	f001 f810 	bl	800216c <HAL_Delay>
    HAL_UART_Transmit(&huart2,(uint8_t*) CONVTG, 10, 1000);
 800114c:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8001150:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001154:	220a      	movs	r2, #10
 8001156:	483d      	ldr	r0, [pc, #244]	; (800124c <main+0x2d8>)
 8001158:	f005 fa57 	bl	800660a <HAL_UART_Transmit>
    HAL_Delay(100);
 800115c:	2064      	movs	r0, #100	; 0x64
 800115e:	f001 f805 	bl	800216c <HAL_Delay>

    //отключение и включение RMC на всякий
    HAL_UART_Transmit(&huart2,(uint8_t*) MESRMC, 16, 1000);
 8001162:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001166:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800116a:	2210      	movs	r2, #16
 800116c:	4837      	ldr	r0, [pc, #220]	; (800124c <main+0x2d8>)
 800116e:	f005 fa4c 	bl	800660a <HAL_UART_Transmit>
    HAL_Delay(100);
 8001172:	2064      	movs	r0, #100	; 0x64
 8001174:	f000 fffa 	bl	800216c <HAL_Delay>
    HAL_UART_Transmit(&huart2,(uint8_t*) CONRMC, 10, 1000);
 8001178:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800117c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001180:	220a      	movs	r2, #10
 8001182:	4832      	ldr	r0, [pc, #200]	; (800124c <main+0x2d8>)
 8001184:	f005 fa41 	bl	800660a <HAL_UART_Transmit>
    HAL_Delay(100);
 8001188:	2064      	movs	r0, #100	; 0x64
 800118a:	f000 ffef 	bl	800216c <HAL_Delay>

    //start the web server
    int offset =0;
 800118e:	2300      	movs	r3, #0
 8001190:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
   ReadDeviceAddressOffset((char*) &user_info, sizeof(user_info), offset);
 8001194:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8001198:	f44f 7192 	mov.w	r1, #292	; 0x124
 800119c:	482c      	ldr	r0, [pc, #176]	; (8001250 <main+0x2dc>)
 800119e:	f7ff fea7 	bl	8000ef0 <ReadDeviceAddressOffset>
   offset+=sizeof(user_info);
 80011a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80011a6:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80011aa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
   //Обнуление PPS
   PPS_count=0;
 80011ae:	4b29      	ldr	r3, [pc, #164]	; (8001254 <main+0x2e0>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
   gps.year[0]='V';
 80011b4:	4b15      	ldr	r3, [pc, #84]	; (800120c <main+0x298>)
 80011b6:	2256      	movs	r2, #86	; 0x56
 80011b8:	719a      	strb	r2, [r3, #6]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80011ba:	4b27      	ldr	r3, [pc, #156]	; (8001258 <main+0x2e4>)
 80011bc:	f107 041c 	add.w	r4, r7, #28
 80011c0:	461d      	mov	r5, r3
 80011c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80011ce:	f107 031c 	add.w	r3, r7, #28
 80011d2:	2100      	movs	r1, #0
 80011d4:	4618      	mov	r0, r3
 80011d6:	f009 fa03 	bl	800a5e0 <osThreadCreate>
 80011da:	4603      	mov	r3, r0
 80011dc:	4a1f      	ldr	r2, [pc, #124]	; (800125c <main+0x2e8>)
 80011de:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, tcpecho_thread, osPriorityIdle, 0, 128);
 80011e0:	463b      	mov	r3, r7
 80011e2:	4a1f      	ldr	r2, [pc, #124]	; (8001260 <main+0x2ec>)
 80011e4:	461c      	mov	r4, r3
 80011e6:	4615      	mov	r5, r2
 80011e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 80011f4:	463b      	mov	r3, r7
 80011f6:	2100      	movs	r1, #0
 80011f8:	4618      	mov	r0, r3
 80011fa:	f009 f9f1 	bl	800a5e0 <osThreadCreate>
 80011fe:	4603      	mov	r3, r0
 8001200:	4a18      	ldr	r2, [pc, #96]	; (8001264 <main+0x2f0>)
 8001202:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001204:	f009 f9d5 	bl	800a5b2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001208:	e7fe      	b.n	8001208 <main+0x294>
 800120a:	bf00      	nop
 800120c:	20004a88 	.word	0x20004a88
 8001210:	0801e6e8 	.word	0x0801e6e8
 8001214:	0801e6f8 	.word	0x0801e6f8
 8001218:	0801e704 	.word	0x0801e704
 800121c:	0801e714 	.word	0x0801e714
 8001220:	0801e720 	.word	0x0801e720
 8001224:	0801e730 	.word	0x0801e730
 8001228:	0801e73c 	.word	0x0801e73c
 800122c:	0801e74c 	.word	0x0801e74c
 8001230:	0801e758 	.word	0x0801e758
 8001234:	0801e768 	.word	0x0801e768
 8001238:	0801e774 	.word	0x0801e774
 800123c:	0801e784 	.word	0x0801e784
 8001240:	0801e790 	.word	0x0801e790
 8001244:	0801e7a0 	.word	0x0801e7a0
 8001248:	20004c94 	.word	0x20004c94
 800124c:	20004cdc 	.word	0x20004cdc
 8001250:	20004aa4 	.word	0x20004aa4
 8001254:	200004d8 	.word	0x200004d8
 8001258:	0801e7ac 	.word	0x0801e7ac
 800125c:	20004bc8 	.word	0x20004bc8
 8001260:	0801e7c8 	.word	0x0801e7c8
 8001264:	20004c6c 	.word	0x20004c6c

08001268 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b098      	sub	sp, #96	; 0x60
 800126c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800126e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001272:	2230      	movs	r2, #48	; 0x30
 8001274:	2100      	movs	r1, #0
 8001276:	4618      	mov	r0, r3
 8001278:	f01a ffac 	bl	801c1d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800127c:	f107 031c 	add.w	r3, r7, #28
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800128c:	f107 030c 	add.w	r3, r7, #12
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	60bb      	str	r3, [r7, #8]
 800129e:	4b31      	ldr	r3, [pc, #196]	; (8001364 <SystemClock_Config+0xfc>)
 80012a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a2:	4a30      	ldr	r2, [pc, #192]	; (8001364 <SystemClock_Config+0xfc>)
 80012a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012a8:	6413      	str	r3, [r2, #64]	; 0x40
 80012aa:	4b2e      	ldr	r3, [pc, #184]	; (8001364 <SystemClock_Config+0xfc>)
 80012ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b2:	60bb      	str	r3, [r7, #8]
 80012b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012b6:	2300      	movs	r3, #0
 80012b8:	607b      	str	r3, [r7, #4]
 80012ba:	4b2b      	ldr	r3, [pc, #172]	; (8001368 <SystemClock_Config+0x100>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a2a      	ldr	r2, [pc, #168]	; (8001368 <SystemClock_Config+0x100>)
 80012c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012c4:	6013      	str	r3, [r2, #0]
 80012c6:	4b28      	ldr	r3, [pc, #160]	; (8001368 <SystemClock_Config+0x100>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ce:	607b      	str	r3, [r7, #4]
 80012d0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80012d2:	2309      	movs	r3, #9
 80012d4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012da:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80012dc:	2301      	movs	r3, #1
 80012de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012e0:	2302      	movs	r3, #2
 80012e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012e4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80012ea:	2319      	movs	r3, #25
 80012ec:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 80012ee:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80012f2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012f4:	2302      	movs	r3, #2
 80012f6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80012f8:	2307      	movs	r3, #7
 80012fa:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001300:	4618      	mov	r0, r3
 8001302:	f003 fb9d 	bl	8004a40 <HAL_RCC_OscConfig>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800130c:	f000 fc12 	bl	8001b34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001310:	230f      	movs	r3, #15
 8001312:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001314:	2302      	movs	r3, #2
 8001316:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001318:	2300      	movs	r3, #0
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800131c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001320:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001322:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001326:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001328:	f107 031c 	add.w	r3, r7, #28
 800132c:	2105      	movs	r1, #5
 800132e:	4618      	mov	r0, r3
 8001330:	f003 fdfe 	bl	8004f30 <HAL_RCC_ClockConfig>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <SystemClock_Config+0xd6>
  {
    Error_Handler();
 800133a:	f000 fbfb 	bl	8001b34 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800133e:	2302      	movs	r3, #2
 8001340:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001342:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001346:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001348:	f107 030c 	add.w	r3, r7, #12
 800134c:	4618      	mov	r0, r3
 800134e:	f003 fff1 	bl	8005334 <HAL_RCCEx_PeriphCLKConfig>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001358:	f000 fbec 	bl	8001b34 <Error_Handler>
  }
}
 800135c:	bf00      	nop
 800135e:	3760      	adds	r7, #96	; 0x60
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40023800 	.word	0x40023800
 8001368:	40007000 	.word	0x40007000

0800136c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001372:	1d3b      	adds	r3, r7, #4
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001380:	2300      	movs	r3, #0
 8001382:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001384:	4b24      	ldr	r3, [pc, #144]	; (8001418 <MX_RTC_Init+0xac>)
 8001386:	4a25      	ldr	r2, [pc, #148]	; (800141c <MX_RTC_Init+0xb0>)
 8001388:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800138a:	4b23      	ldr	r3, [pc, #140]	; (8001418 <MX_RTC_Init+0xac>)
 800138c:	2200      	movs	r2, #0
 800138e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001390:	4b21      	ldr	r3, [pc, #132]	; (8001418 <MX_RTC_Init+0xac>)
 8001392:	227f      	movs	r2, #127	; 0x7f
 8001394:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001396:	4b20      	ldr	r3, [pc, #128]	; (8001418 <MX_RTC_Init+0xac>)
 8001398:	22ff      	movs	r2, #255	; 0xff
 800139a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800139c:	4b1e      	ldr	r3, [pc, #120]	; (8001418 <MX_RTC_Init+0xac>)
 800139e:	2200      	movs	r2, #0
 80013a0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80013a2:	4b1d      	ldr	r3, [pc, #116]	; (8001418 <MX_RTC_Init+0xac>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80013a8:	4b1b      	ldr	r3, [pc, #108]	; (8001418 <MX_RTC_Init+0xac>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80013ae:	481a      	ldr	r0, [pc, #104]	; (8001418 <MX_RTC_Init+0xac>)
 80013b0:	f004 f8a2 	bl	80054f8 <HAL_RTC_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80013ba:	f000 fbbb 	bl	8001b34 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 23;
 80013be:	2317      	movs	r3, #23
 80013c0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 59;
 80013c2:	233b      	movs	r3, #59	; 0x3b
 80013c4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80013ca:	2300      	movs	r3, #0
 80013cc:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80013ce:	2300      	movs	r3, #0
 80013d0:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80013d2:	1d3b      	adds	r3, r7, #4
 80013d4:	2200      	movs	r2, #0
 80013d6:	4619      	mov	r1, r3
 80013d8:	480f      	ldr	r0, [pc, #60]	; (8001418 <MX_RTC_Init+0xac>)
 80013da:	f004 f91e 	bl	800561a <HAL_RTC_SetTime>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80013e4:	f000 fba6 	bl	8001b34 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 80013e8:	2307      	movs	r3, #7
 80013ea:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_DECEMBER;
 80013ec:	2312      	movs	r3, #18
 80013ee:	707b      	strb	r3, [r7, #1]
  sDate.Date = 31;
 80013f0:	231f      	movs	r3, #31
 80013f2:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 80013f4:	2300      	movs	r3, #0
 80013f6:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80013f8:	463b      	mov	r3, r7
 80013fa:	2200      	movs	r2, #0
 80013fc:	4619      	mov	r1, r3
 80013fe:	4806      	ldr	r0, [pc, #24]	; (8001418 <MX_RTC_Init+0xac>)
 8001400:	f004 fa26 	bl	8005850 <HAL_RTC_SetDate>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800140a:	f000 fb93 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800140e:	bf00      	nop
 8001410:	3718      	adds	r7, #24
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20004c70 	.word	0x20004c70
 800141c:	40002800 	.word	0x40002800

08001420 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001424:	4b17      	ldr	r3, [pc, #92]	; (8001484 <MX_SPI3_Init+0x64>)
 8001426:	4a18      	ldr	r2, [pc, #96]	; (8001488 <MX_SPI3_Init+0x68>)
 8001428:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800142a:	4b16      	ldr	r3, [pc, #88]	; (8001484 <MX_SPI3_Init+0x64>)
 800142c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001430:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001432:	4b14      	ldr	r3, [pc, #80]	; (8001484 <MX_SPI3_Init+0x64>)
 8001434:	2200      	movs	r2, #0
 8001436:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001438:	4b12      	ldr	r3, [pc, #72]	; (8001484 <MX_SPI3_Init+0x64>)
 800143a:	2200      	movs	r2, #0
 800143c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800143e:	4b11      	ldr	r3, [pc, #68]	; (8001484 <MX_SPI3_Init+0x64>)
 8001440:	2200      	movs	r2, #0
 8001442:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001444:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <MX_SPI3_Init+0x64>)
 8001446:	2200      	movs	r2, #0
 8001448:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800144a:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <MX_SPI3_Init+0x64>)
 800144c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001450:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001452:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <MX_SPI3_Init+0x64>)
 8001454:	2200      	movs	r2, #0
 8001456:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001458:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <MX_SPI3_Init+0x64>)
 800145a:	2200      	movs	r2, #0
 800145c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800145e:	4b09      	ldr	r3, [pc, #36]	; (8001484 <MX_SPI3_Init+0x64>)
 8001460:	2200      	movs	r2, #0
 8001462:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001464:	4b07      	ldr	r3, [pc, #28]	; (8001484 <MX_SPI3_Init+0x64>)
 8001466:	2200      	movs	r2, #0
 8001468:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800146a:	4b06      	ldr	r3, [pc, #24]	; (8001484 <MX_SPI3_Init+0x64>)
 800146c:	220a      	movs	r2, #10
 800146e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001470:	4804      	ldr	r0, [pc, #16]	; (8001484 <MX_SPI3_Init+0x64>)
 8001472:	f004 fb73 	bl	8005b5c <HAL_SPI_Init>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800147c:	f000 fb5a 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001480:	bf00      	nop
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20004bcc 	.word	0x20004bcc
 8001488:	40003c00 	.word	0x40003c00

0800148c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001492:	f107 0308 	add.w	r3, r7, #8
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]
 800149c:	609a      	str	r2, [r3, #8]
 800149e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014a0:	463b      	mov	r3, r7
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014a8:	4b1d      	ldr	r3, [pc, #116]	; (8001520 <MX_TIM2_Init+0x94>)
 80014aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80014b0:	4b1b      	ldr	r3, [pc, #108]	; (8001520 <MX_TIM2_Init+0x94>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b6:	4b1a      	ldr	r3, [pc, #104]	; (8001520 <MX_TIM2_Init+0x94>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 45000;
 80014bc:	4b18      	ldr	r3, [pc, #96]	; (8001520 <MX_TIM2_Init+0x94>)
 80014be:	f64a 72c8 	movw	r2, #45000	; 0xafc8
 80014c2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c4:	4b16      	ldr	r3, [pc, #88]	; (8001520 <MX_TIM2_Init+0x94>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ca:	4b15      	ldr	r3, [pc, #84]	; (8001520 <MX_TIM2_Init+0x94>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014d0:	4813      	ldr	r0, [pc, #76]	; (8001520 <MX_TIM2_Init+0x94>)
 80014d2:	f004 fbcc 	bl	8005c6e <HAL_TIM_Base_Init>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80014dc:	f000 fb2a 	bl	8001b34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014e6:	f107 0308 	add.w	r3, r7, #8
 80014ea:	4619      	mov	r1, r3
 80014ec:	480c      	ldr	r0, [pc, #48]	; (8001520 <MX_TIM2_Init+0x94>)
 80014ee:	f004 fd85 	bl	8005ffc <HAL_TIM_ConfigClockSource>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80014f8:	f000 fb1c 	bl	8001b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014fc:	2300      	movs	r3, #0
 80014fe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001500:	2300      	movs	r3, #0
 8001502:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001504:	463b      	mov	r3, r7
 8001506:	4619      	mov	r1, r3
 8001508:	4805      	ldr	r0, [pc, #20]	; (8001520 <MX_TIM2_Init+0x94>)
 800150a:	f004 ffa1 	bl	8006450 <HAL_TIMEx_MasterConfigSynchronization>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001514:	f000 fb0e 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001518:	bf00      	nop
 800151a:	3718      	adds	r7, #24
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20004c94 	.word	0x20004c94

08001524 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001528:	4b11      	ldr	r3, [pc, #68]	; (8001570 <MX_USART1_UART_Init+0x4c>)
 800152a:	4a12      	ldr	r2, [pc, #72]	; (8001574 <MX_USART1_UART_Init+0x50>)
 800152c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800152e:	4b10      	ldr	r3, [pc, #64]	; (8001570 <MX_USART1_UART_Init+0x4c>)
 8001530:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001534:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001536:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <MX_USART1_UART_Init+0x4c>)
 8001538:	2200      	movs	r2, #0
 800153a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800153c:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <MX_USART1_UART_Init+0x4c>)
 800153e:	2200      	movs	r2, #0
 8001540:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001542:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <MX_USART1_UART_Init+0x4c>)
 8001544:	2200      	movs	r2, #0
 8001546:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001548:	4b09      	ldr	r3, [pc, #36]	; (8001570 <MX_USART1_UART_Init+0x4c>)
 800154a:	220c      	movs	r2, #12
 800154c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800154e:	4b08      	ldr	r3, [pc, #32]	; (8001570 <MX_USART1_UART_Init+0x4c>)
 8001550:	2200      	movs	r2, #0
 8001552:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001554:	4b06      	ldr	r3, [pc, #24]	; (8001570 <MX_USART1_UART_Init+0x4c>)
 8001556:	2200      	movs	r2, #0
 8001558:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800155a:	4805      	ldr	r0, [pc, #20]	; (8001570 <MX_USART1_UART_Init+0x4c>)
 800155c:	f005 f808 	bl	8006570 <HAL_UART_Init>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001566:	f000 fae5 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20004c24 	.word	0x20004c24
 8001574:	40011000 	.word	0x40011000

08001578 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800157c:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <MX_USART2_UART_Init+0x4c>)
 800157e:	4a12      	ldr	r2, [pc, #72]	; (80015c8 <MX_USART2_UART_Init+0x50>)
 8001580:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001582:	4b10      	ldr	r3, [pc, #64]	; (80015c4 <MX_USART2_UART_Init+0x4c>)
 8001584:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001588:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800158a:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <MX_USART2_UART_Init+0x4c>)
 800158c:	2200      	movs	r2, #0
 800158e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001590:	4b0c      	ldr	r3, [pc, #48]	; (80015c4 <MX_USART2_UART_Init+0x4c>)
 8001592:	2200      	movs	r2, #0
 8001594:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001596:	4b0b      	ldr	r3, [pc, #44]	; (80015c4 <MX_USART2_UART_Init+0x4c>)
 8001598:	2200      	movs	r2, #0
 800159a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800159c:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <MX_USART2_UART_Init+0x4c>)
 800159e:	220c      	movs	r2, #12
 80015a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015a2:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <MX_USART2_UART_Init+0x4c>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a8:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <MX_USART2_UART_Init+0x4c>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015ae:	4805      	ldr	r0, [pc, #20]	; (80015c4 <MX_USART2_UART_Init+0x4c>)
 80015b0:	f004 ffde 	bl	8006570 <HAL_UART_Init>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015ba:	f000 fabb 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	20004cdc 	.word	0x20004cdc
 80015c8:	40004400 	.word	0x40004400

080015cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b08c      	sub	sp, #48	; 0x30
 80015d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d2:	f107 031c 	add.w	r3, r7, #28
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	605a      	str	r2, [r3, #4]
 80015dc:	609a      	str	r2, [r3, #8]
 80015de:	60da      	str	r2, [r3, #12]
 80015e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	61bb      	str	r3, [r7, #24]
 80015e6:	4b58      	ldr	r3, [pc, #352]	; (8001748 <MX_GPIO_Init+0x17c>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	4a57      	ldr	r2, [pc, #348]	; (8001748 <MX_GPIO_Init+0x17c>)
 80015ec:	f043 0310 	orr.w	r3, r3, #16
 80015f0:	6313      	str	r3, [r2, #48]	; 0x30
 80015f2:	4b55      	ldr	r3, [pc, #340]	; (8001748 <MX_GPIO_Init+0x17c>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	f003 0310 	and.w	r3, r3, #16
 80015fa:	61bb      	str	r3, [r7, #24]
 80015fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	617b      	str	r3, [r7, #20]
 8001602:	4b51      	ldr	r3, [pc, #324]	; (8001748 <MX_GPIO_Init+0x17c>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	4a50      	ldr	r2, [pc, #320]	; (8001748 <MX_GPIO_Init+0x17c>)
 8001608:	f043 0304 	orr.w	r3, r3, #4
 800160c:	6313      	str	r3, [r2, #48]	; 0x30
 800160e:	4b4e      	ldr	r3, [pc, #312]	; (8001748 <MX_GPIO_Init+0x17c>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	f003 0304 	and.w	r3, r3, #4
 8001616:	617b      	str	r3, [r7, #20]
 8001618:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	613b      	str	r3, [r7, #16]
 800161e:	4b4a      	ldr	r3, [pc, #296]	; (8001748 <MX_GPIO_Init+0x17c>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	4a49      	ldr	r2, [pc, #292]	; (8001748 <MX_GPIO_Init+0x17c>)
 8001624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001628:	6313      	str	r3, [r2, #48]	; 0x30
 800162a:	4b47      	ldr	r3, [pc, #284]	; (8001748 <MX_GPIO_Init+0x17c>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001632:	613b      	str	r3, [r7, #16]
 8001634:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	4b43      	ldr	r3, [pc, #268]	; (8001748 <MX_GPIO_Init+0x17c>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	4a42      	ldr	r2, [pc, #264]	; (8001748 <MX_GPIO_Init+0x17c>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	6313      	str	r3, [r2, #48]	; 0x30
 8001646:	4b40      	ldr	r3, [pc, #256]	; (8001748 <MX_GPIO_Init+0x17c>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	60bb      	str	r3, [r7, #8]
 8001656:	4b3c      	ldr	r3, [pc, #240]	; (8001748 <MX_GPIO_Init+0x17c>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	4a3b      	ldr	r2, [pc, #236]	; (8001748 <MX_GPIO_Init+0x17c>)
 800165c:	f043 0302 	orr.w	r3, r3, #2
 8001660:	6313      	str	r3, [r2, #48]	; 0x30
 8001662:	4b39      	ldr	r3, [pc, #228]	; (8001748 <MX_GPIO_Init+0x17c>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	60bb      	str	r3, [r7, #8]
 800166c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	607b      	str	r3, [r7, #4]
 8001672:	4b35      	ldr	r3, [pc, #212]	; (8001748 <MX_GPIO_Init+0x17c>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	4a34      	ldr	r2, [pc, #208]	; (8001748 <MX_GPIO_Init+0x17c>)
 8001678:	f043 0308 	orr.w	r3, r3, #8
 800167c:	6313      	str	r3, [r2, #48]	; 0x30
 800167e:	4b32      	ldr	r3, [pc, #200]	; (8001748 <MX_GPIO_Init+0x17c>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	f003 0308 	and.w	r3, r3, #8
 8001686:	607b      	str	r3, [r7, #4]
 8001688:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800168a:	2200      	movs	r2, #0
 800168c:	21c0      	movs	r1, #192	; 0xc0
 800168e:	482f      	ldr	r0, [pc, #188]	; (800174c <MX_GPIO_Init+0x180>)
 8001690:	f002 f820 	bl	80036d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001694:	2318      	movs	r3, #24
 8001696:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001698:	2300      	movs	r3, #0
 800169a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169c:	2300      	movs	r3, #0
 800169e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016a0:	f107 031c 	add.w	r3, r7, #28
 80016a4:	4619      	mov	r1, r3
 80016a6:	482a      	ldr	r0, [pc, #168]	; (8001750 <MX_GPIO_Init+0x184>)
 80016a8:	f001 fe78 	bl	800339c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80016ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016b2:	2300      	movs	r3, #0
 80016b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	2300      	movs	r3, #0
 80016b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ba:	f107 031c 	add.w	r3, r7, #28
 80016be:	4619      	mov	r1, r3
 80016c0:	4824      	ldr	r0, [pc, #144]	; (8001754 <MX_GPIO_Init+0x188>)
 80016c2:	f001 fe6b 	bl	800339c <HAL_GPIO_Init>

  /*Configure GPIO pin : PPS_Pin */
  GPIO_InitStruct.Pin = PPS_Pin;
 80016c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016cc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80016d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PPS_GPIO_Port, &GPIO_InitStruct);
 80016d6:	f107 031c 	add.w	r3, r7, #28
 80016da:	4619      	mov	r1, r3
 80016dc:	481e      	ldr	r0, [pc, #120]	; (8001758 <MX_GPIO_Init+0x18c>)
 80016de:	f001 fe5d 	bl	800339c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016e2:	23c0      	movs	r3, #192	; 0xc0
 80016e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e6:	2301      	movs	r3, #1
 80016e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	2300      	movs	r3, #0
 80016ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ee:	2300      	movs	r3, #0
 80016f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016f2:	f107 031c 	add.w	r3, r7, #28
 80016f6:	4619      	mov	r1, r3
 80016f8:	4814      	ldr	r0, [pc, #80]	; (800174c <MX_GPIO_Init+0x180>)
 80016fa:	f001 fe4f 	bl	800339c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001702:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001704:	2300      	movs	r3, #0
 8001706:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170c:	f107 031c 	add.w	r3, r7, #28
 8001710:	4619      	mov	r1, r3
 8001712:	4812      	ldr	r0, [pc, #72]	; (800175c <MX_GPIO_Init+0x190>)
 8001714:	f001 fe42 	bl	800339c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001718:	2310      	movs	r3, #16
 800171a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800171c:	2300      	movs	r3, #0
 800171e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001724:	f107 031c 	add.w	r3, r7, #28
 8001728:	4619      	mov	r1, r3
 800172a:	480b      	ldr	r0, [pc, #44]	; (8001758 <MX_GPIO_Init+0x18c>)
 800172c:	f001 fe36 	bl	800339c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001730:	2200      	movs	r2, #0
 8001732:	2105      	movs	r1, #5
 8001734:	2028      	movs	r0, #40	; 0x28
 8001736:	f000 fdf5 	bl	8002324 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800173a:	2028      	movs	r0, #40	; 0x28
 800173c:	f000 fe0e 	bl	800235c <HAL_NVIC_EnableIRQ>

}
 8001740:	bf00      	nop
 8001742:	3730      	adds	r7, #48	; 0x30
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	40023800 	.word	0x40023800
 800174c:	40020800 	.word	0x40020800
 8001750:	40021000 	.word	0x40021000
 8001754:	40020400 	.word	0x40020400
 8001758:	40020c00 	.word	0x40020c00
 800175c:	40020000 	.word	0x40020000

08001760 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	80fb      	strh	r3, [r7, #6]
	int PPS_Counter_period=0;
 800176a:	2300      	movs	r3, #0
 800176c:	60fb      	str	r3, [r7, #12]
	//int PPS_count=0;//вынес для проверки
	//int PPS_mass[10]={0};//вынес для проверки
	if(GPIO_Pin == PPS_Pin) {
 800176e:	88fb      	ldrh	r3, [r7, #6]
 8001770:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001774:	d13d      	bne.n	80017f2 <HAL_GPIO_EXTI_Callback+0x92>
		if(PPS_count>2&&PPS_count<12){
 8001776:	4b28      	ldr	r3, [pc, #160]	; (8001818 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2b02      	cmp	r3, #2
 800177c:	dd0d      	ble.n	800179a <HAL_GPIO_EXTI_Callback+0x3a>
 800177e:	4b26      	ldr	r3, [pc, #152]	; (8001818 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2b0b      	cmp	r3, #11
 8001784:	dc09      	bgt.n	800179a <HAL_GPIO_EXTI_Callback+0x3a>
		PPS_mass[PPS_count-2] = TIM2->CNT;
 8001786:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800178a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800178c:	4b22      	ldr	r3, [pc, #136]	; (8001818 <HAL_GPIO_EXTI_Callback+0xb8>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	3b02      	subs	r3, #2
 8001792:	4611      	mov	r1, r2
 8001794:	4a21      	ldr	r2, [pc, #132]	; (800181c <HAL_GPIO_EXTI_Callback+0xbc>)
 8001796:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
		if(PPS_count==12){
 800179a:	4b1f      	ldr	r3, [pc, #124]	; (8001818 <HAL_GPIO_EXTI_Callback+0xb8>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2b0c      	cmp	r3, #12
 80017a0:	d127      	bne.n	80017f2 <HAL_GPIO_EXTI_Callback+0x92>
			//HAL_GPIO_TogglePin(Timled_GPIO_Port, Timled_Pin);
			PPS_Counter_period=(PPS_mass[0]+PPS_mass[1]+PPS_mass[2]+PPS_mass[3]+PPS_mass[4]+PPS_mass[5]+PPS_mass[6]+PPS_mass[7]+PPS_mass[8]+PPS_mass[9])/9;
 80017a2:	4b1e      	ldr	r3, [pc, #120]	; (800181c <HAL_GPIO_EXTI_Callback+0xbc>)
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	4b1d      	ldr	r3, [pc, #116]	; (800181c <HAL_GPIO_EXTI_Callback+0xbc>)
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	441a      	add	r2, r3
 80017ac:	4b1b      	ldr	r3, [pc, #108]	; (800181c <HAL_GPIO_EXTI_Callback+0xbc>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	441a      	add	r2, r3
 80017b2:	4b1a      	ldr	r3, [pc, #104]	; (800181c <HAL_GPIO_EXTI_Callback+0xbc>)
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	441a      	add	r2, r3
 80017b8:	4b18      	ldr	r3, [pc, #96]	; (800181c <HAL_GPIO_EXTI_Callback+0xbc>)
 80017ba:	691b      	ldr	r3, [r3, #16]
 80017bc:	441a      	add	r2, r3
 80017be:	4b17      	ldr	r3, [pc, #92]	; (800181c <HAL_GPIO_EXTI_Callback+0xbc>)
 80017c0:	695b      	ldr	r3, [r3, #20]
 80017c2:	441a      	add	r2, r3
 80017c4:	4b15      	ldr	r3, [pc, #84]	; (800181c <HAL_GPIO_EXTI_Callback+0xbc>)
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	441a      	add	r2, r3
 80017ca:	4b14      	ldr	r3, [pc, #80]	; (800181c <HAL_GPIO_EXTI_Callback+0xbc>)
 80017cc:	69db      	ldr	r3, [r3, #28]
 80017ce:	441a      	add	r2, r3
 80017d0:	4b12      	ldr	r3, [pc, #72]	; (800181c <HAL_GPIO_EXTI_Callback+0xbc>)
 80017d2:	6a1b      	ldr	r3, [r3, #32]
 80017d4:	441a      	add	r2, r3
 80017d6:	4b11      	ldr	r3, [pc, #68]	; (800181c <HAL_GPIO_EXTI_Callback+0xbc>)
 80017d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017da:	4413      	add	r3, r2
 80017dc:	4a10      	ldr	r2, [pc, #64]	; (8001820 <HAL_GPIO_EXTI_Callback+0xc0>)
 80017de:	fb82 1203 	smull	r1, r2, r2, r3
 80017e2:	1052      	asrs	r2, r2, #1
 80017e4:	17db      	asrs	r3, r3, #31
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	60fb      	str	r3, [r7, #12]
			TIM2->ARR=PPS_Counter_period;
 80017ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
	}
	if(PPS_count<13){
 80017f2:	4b09      	ldr	r3, [pc, #36]	; (8001818 <HAL_GPIO_EXTI_Callback+0xb8>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2b0c      	cmp	r3, #12
 80017f8:	dc08      	bgt.n	800180c <HAL_GPIO_EXTI_Callback+0xac>
		PPS_count=PPS_count+1;
 80017fa:	4b07      	ldr	r3, [pc, #28]	; (8001818 <HAL_GPIO_EXTI_Callback+0xb8>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	3301      	adds	r3, #1
 8001800:	4a05      	ldr	r2, [pc, #20]	; (8001818 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001802:	6013      	str	r3, [r2, #0]
		TIM2->CNT = 0;//обнуление счетчика
 8001804:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001808:	2200      	movs	r2, #0
 800180a:	625a      	str	r2, [r3, #36]	; 0x24
		}


		}
 800180c:	bf00      	nop
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	200004d8 	.word	0x200004d8
 800181c:	200004dc 	.word	0x200004dc
 8001820:	38e38e39 	.word	0x38e38e39

08001824 <rtc_read>:
		crc=0;
	}
//	printf("crc=%d\t crc_buff=%s\t dec=%d\n\r",crc,crc_buff,dec);
	return 0;
}
time_t rtc_read(void) {
 8001824:	b5b0      	push	{r4, r5, r7, lr}
 8001826:	b092      	sub	sp, #72	; 0x48
 8001828:	af00      	add	r7, sp, #0
	RTC_DateTypeDef dateStruct;
	RTC_TimeTypeDef timeStruct;
	struct tm timeinfo;

	hrtc.Instance = RTC;
 800182a:	4b1f      	ldr	r3, [pc, #124]	; (80018a8 <rtc_read+0x84>)
 800182c:	4a1f      	ldr	r2, [pc, #124]	; (80018ac <rtc_read+0x88>)
 800182e:	601a      	str	r2, [r3, #0]

	// Read actual date and time
	HAL_RTC_GetTime(&hrtc, &timeStruct, FORMAT_BIN); // Read time first!
 8001830:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001834:	2200      	movs	r2, #0
 8001836:	4619      	mov	r1, r3
 8001838:	481b      	ldr	r0, [pc, #108]	; (80018a8 <rtc_read+0x84>)
 800183a:	f003 ffab 	bl	8005794 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &dateStruct, FORMAT_BIN);
 800183e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001842:	2200      	movs	r2, #0
 8001844:	4619      	mov	r1, r3
 8001846:	4818      	ldr	r0, [pc, #96]	; (80018a8 <rtc_read+0x84>)
 8001848:	f004 f8a9 	bl	800599e <HAL_RTC_GetDate>

	// Setup a tm structure based on the RTC
	// monday==1 sunday==7
	timeinfo.tm_wday = dateStruct.WeekDay;
 800184c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001850:	61fb      	str	r3, [r7, #28]
	timeinfo.tm_mon = dateStruct.Month;//-1 do January==0 month
 8001852:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001856:	617b      	str	r3, [r7, #20]
	timeinfo.tm_mday = dateStruct.Date;
 8001858:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800185c:	613b      	str	r3, [r7, #16]
	timeinfo.tm_year = dateStruct.Year + 100;
 800185e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001862:	3364      	adds	r3, #100	; 0x64
 8001864:	61bb      	str	r3, [r7, #24]
	timeinfo.tm_hour = timeStruct.Hours;
 8001866:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800186a:	60fb      	str	r3, [r7, #12]
	timeinfo.tm_min = timeStruct.Minutes;
 800186c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001870:	60bb      	str	r3, [r7, #8]
	timeinfo.tm_sec = timeStruct.Seconds;
 8001872:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001876:	607b      	str	r3, [r7, #4]
	//printf("tm_wday=%d\t\n",timeinfo.tm_wday);

	// Convert to timestamp
	time_t t = mktime(&timeinfo)+offset_unix[user_info.zone];
 8001878:	1d3b      	adds	r3, r7, #4
 800187a:	4618      	mov	r0, r3
 800187c:	f01a fd8a 	bl	801c394 <mktime>
 8001880:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <rtc_read+0x8c>)
 8001882:	691b      	ldr	r3, [r3, #16]
 8001884:	4a0b      	ldr	r2, [pc, #44]	; (80018b4 <rtc_read+0x90>)
 8001886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800188a:	461a      	mov	r2, r3
 800188c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001890:	1884      	adds	r4, r0, r2
 8001892:	eb41 0503 	adc.w	r5, r1, r3
 8001896:	e9c7 4510 	strd	r4, r5, [r7, #64]	; 0x40


	return t;
 800189a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
}
 800189e:	4610      	mov	r0, r2
 80018a0:	4619      	mov	r1, r3
 80018a2:	3748      	adds	r7, #72	; 0x48
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bdb0      	pop	{r4, r5, r7, pc}
 80018a8:	20004c70 	.word	0x20004c70
 80018ac:	40002800 	.word	0x40002800
 80018b0:	20004aa4 	.word	0x20004aa4
 80018b4:	08022048 	.word	0x08022048

080018b8 <tcpecho_init>:

void tcpecho_init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af02      	add	r7, sp, #8
	sys_thread_new("tcpecho_thread", tcpecho_thread, NULL,DEFAULT_THREAD_STACKSIZE, 1);
 80018be:	2301      	movs	r3, #1
 80018c0:	9300      	str	r3, [sp, #0]
 80018c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018c6:	2200      	movs	r2, #0
 80018c8:	4903      	ldr	r1, [pc, #12]	; (80018d8 <tcpecho_init+0x20>)
 80018ca:	4804      	ldr	r0, [pc, #16]	; (80018dc <tcpecho_init+0x24>)
 80018cc:	f019 fefc 	bl	801b6c8 <sys_thread_new>
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	08001971 	.word	0x08001971
 80018dc:	0801e7e4 	.word	0x0801e7e4

080018e0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80018e0:	b590      	push	{r4, r7, lr}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80018e8:	f006 fd60 	bl	80083ac <MX_LWIP_Init>

  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80018ec:	f019 ff30 	bl	801b750 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  httpd_init();
 80018f0:	f00e fbc6 	bl	8010080 <httpd_init>
  tcpecho_init();
 80018f4:	f7ff ffe0 	bl	80018b8 <tcpecho_init>

  memset(&user_info,0,sizeof(user_info));
 80018f8:	f44f 7292 	mov.w	r2, #292	; 0x124
 80018fc:	2100      	movs	r1, #0
 80018fe:	4816      	ldr	r0, [pc, #88]	; (8001958 <StartDefaultTask+0x78>)
 8001900:	f01a fc68 	bl	801c1d4 <memset>
  	  				strncpy(user_info.ip,"192.168.0.68",13);
 8001904:	4a14      	ldr	r2, [pc, #80]	; (8001958 <StartDefaultTask+0x78>)
 8001906:	4b15      	ldr	r3, [pc, #84]	; (800195c <StartDefaultTask+0x7c>)
 8001908:	4614      	mov	r4, r2
 800190a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800190c:	c407      	stmia	r4!, {r0, r1, r2}
 800190e:	7023      	strb	r3, [r4, #0]
  	  				strncpy(user_info.netmask,"255.255.255.0",14);
 8001910:	4a13      	ldr	r2, [pc, #76]	; (8001960 <StartDefaultTask+0x80>)
 8001912:	4b14      	ldr	r3, [pc, #80]	; (8001964 <StartDefaultTask+0x84>)
 8001914:	4614      	mov	r4, r2
 8001916:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001918:	6020      	str	r0, [r4, #0]
 800191a:	6061      	str	r1, [r4, #4]
 800191c:	60a2      	str	r2, [r4, #8]
 800191e:	881b      	ldrh	r3, [r3, #0]
 8001920:	81a3      	strh	r3, [r4, #12]
  	  ip4_addr_t add;
  	  inet_aton(user_info.ip, &add);
 8001922:	f107 030c 	add.w	r3, r7, #12
 8001926:	4619      	mov	r1, r3
 8001928:	480b      	ldr	r0, [pc, #44]	; (8001958 <StartDefaultTask+0x78>)
 800192a:	f018 fcf7 	bl	801a31c <ip4addr_aton>
  	  setIP(add.addr);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	4618      	mov	r0, r3
 8001932:	f006 fd17 	bl	8008364 <setIP>

  	ip4_addr_t mask;
  	inet_aton(user_info.netmask, &mask);
 8001936:	f107 0308 	add.w	r3, r7, #8
 800193a:	4619      	mov	r1, r3
 800193c:	4808      	ldr	r0, [pc, #32]	; (8001960 <StartDefaultTask+0x80>)
 800193e:	f018 fced 	bl	801a31c <ip4addr_aton>
  	setNetmask(mask.addr);
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	4618      	mov	r0, r3
 8001946:	f006 fd1f 	bl	8008388 <setNetmask>
  	//int IPres=0;
  /* Infinite loop */
  for(;;)
  {
	  HAL_UART_Receive_IT (&huart2, (uint8_t*)&buff, 1);
 800194a:	2201      	movs	r2, #1
 800194c:	4906      	ldr	r1, [pc, #24]	; (8001968 <StartDefaultTask+0x88>)
 800194e:	4807      	ldr	r0, [pc, #28]	; (800196c <StartDefaultTask+0x8c>)
 8001950:	f004 feed 	bl	800672e <HAL_UART_Receive_IT>
 8001954:	e7f9      	b.n	800194a <StartDefaultTask+0x6a>
 8001956:	bf00      	nop
 8001958:	20004aa4 	.word	0x20004aa4
 800195c:	0801e7f4 	.word	0x0801e7f4
 8001960:	20004bb7 	.word	0x20004bb7
 8001964:	0801e804 	.word	0x0801e804
 8001968:	20000504 	.word	0x20000504
 800196c:	20004cdc 	.word	0x20004cdc

08001970 <tcpecho_thread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_tcpecho_thread */
void tcpecho_thread(void const * argument)
{
 8001970:	b590      	push	{r4, r7, lr}
 8001972:	b089      	sub	sp, #36	; 0x24
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
			//struct tm tm_;
			//uint32_t tm_ms_;


			/* Create a new connection identifier. */
			conn = netconn_new(NETCONN_UDP);
 8001978:	2200      	movs	r2, #0
 800197a:	2100      	movs	r1, #0
 800197c:	2020      	movs	r0, #32
 800197e:	f00b fd93 	bl	800d4a8 <netconn_new_with_proto_and_callback>
 8001982:	61f8      	str	r0, [r7, #28]
			if (conn!=NULL)
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	2b00      	cmp	r3, #0
 8001988:	f000 80b1 	beq.w	8001aee <tcpecho_thread+0x17e>
			{
				/* Bind connection to well known port number 7. */
				err = netconn_bind(conn, NULL, 123);
 800198c:	227b      	movs	r2, #123	; 0x7b
 800198e:	2100      	movs	r1, #0
 8001990:	69f8      	ldr	r0, [r7, #28]
 8001992:	f00b fe43 	bl	800d61c <netconn_bind>
 8001996:	4603      	mov	r3, r0
 8001998:	76fb      	strb	r3, [r7, #27]
				if (err == ERR_OK)
 800199a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	f040 80a2 	bne.w	8001ae8 <tcpecho_thread+0x178>
				{
					while (1)
					{
						while (( recv_err = netconn_recv(conn, &buf)) == ERR_OK)
 80019a4:	e08d      	b.n	8001ac2 <tcpecho_thread+0x152>
						{
							do
							{
								netbuf_data(buf, (void **)&ntp_packet_ptr, &buf_data_len);
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	f107 0212 	add.w	r2, r7, #18
 80019ac:	f107 010c 	add.w	r1, r7, #12
 80019b0:	4618      	mov	r0, r3
 80019b2:	f00d fb39 	bl	800f028 <netbuf_data>

								if(buf_data_len < 48 || buf_data_len > 2048)
 80019b6:	8a7b      	ldrh	r3, [r7, #18]
 80019b8:	2b2f      	cmp	r3, #47	; 0x2f
 80019ba:	d903      	bls.n	80019c4 <tcpecho_thread+0x54>
 80019bc:	8a7b      	ldrh	r3, [r7, #18]
 80019be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019c2:	d904      	bls.n	80019ce <tcpecho_thread+0x5e>
								{
									netbuf_delete(buf);
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f00d fb0e 	bl	800efe8 <netbuf_delete>
									continue;
 80019cc:	e06d      	b.n	8001aaa <tcpecho_thread+0x13a>
								}
								ntp_packet_ptr->li_vn_mode = (0 << 6) | (4 << 3) | (4); // Leap Warning: None, Version: NTPv4, Mode: 4 - Server
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2224      	movs	r2, #36	; 0x24
 80019d2:	701a      	strb	r2, [r3, #0]
								ntp_packet_ptr->stratum = ntpd_status.stratum;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	4a48      	ldr	r2, [pc, #288]	; (8001af8 <tcpecho_thread+0x188>)
 80019d8:	7a12      	ldrb	r2, [r2, #8]
 80019da:	705a      	strb	r2, [r3, #1]
								ntp_packet_ptr->poll = 5; // 32s
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2205      	movs	r2, #5
 80019e0:	709a      	strb	r2, [r3, #2]
								ntp_packet_ptr->precision = -10; // ~1ms
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	22f6      	movs	r2, #246	; 0xf6
 80019e6:	70da      	strb	r2, [r3, #3]

								ntp_packet_ptr->rootDelay = 0; // Delay from GPS clock is ~zero
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2200      	movs	r2, #0
 80019ec:	605a      	str	r2, [r3, #4]
								ntp_packet_ptr->rootDispersion_s = 0;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2200      	movs	r2, #0
 80019f2:	811a      	strh	r2, [r3, #8]
								ntp_packet_ptr->rootDispersion_f = htonl(NTP_MS_TO_FS_U16 * 1.0); // 1ms
 80019f4:	2041      	movs	r0, #65	; 0x41
 80019f6:	f00e fb78 	bl	80100ea <lwip_htonl>
 80019fa:	4602      	mov	r2, r0
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	b292      	uxth	r2, r2
 8001a00:	815a      	strh	r2, [r3, #10]
								ntp_packet_ptr->refId = ('G') | ('P' << 8) | ('S' << 16) | ('\0' << 24);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	4a3d      	ldr	r2, [pc, #244]	; (8001afc <tcpecho_thread+0x18c>)
 8001a06:	60da      	str	r2, [r3, #12]
								/* Move client's transmit timestamp into origin fields */
								ntp_packet_ptr->origTm_s = ntp_packet_ptr->txTm_s;
 8001a08:	68fa      	ldr	r2, [r7, #12]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001a0e:	619a      	str	r2, [r3, #24]
								ntp_packet_ptr->origTm_f = ntp_packet_ptr->txTm_f;
 8001a10:	68fa      	ldr	r2, [r7, #12]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001a16:	61da      	str	r2, [r3, #28]

								ntp_packet_ptr->refTm_s = time_ref_s;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	4a39      	ldr	r2, [pc, #228]	; (8001b00 <tcpecho_thread+0x190>)
 8001a1c:	6812      	ldr	r2, [r2, #0]
 8001a1e:	611a      	str	r2, [r3, #16]
								ntp_packet_ptr->refTm_f = time_ref_f;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	4a38      	ldr	r2, [pc, #224]	; (8001b04 <tcpecho_thread+0x194>)
 8001a24:	6812      	ldr	r2, [r2, #0]
 8001a26:	615a      	str	r2, [r3, #20]

								//rtcGetTime(&RTCD1, &ntpd_datetime);
								//rtcConvertDateTimeToStructTm(&ntpd_datetime, &tm_, &tm_ms_);

								ntp_packet_ptr->rxTm_s = htonl(rtc_read()- DIFF_SEC_1970_2036);//htonl(mktime(&tm_) - DIFF_SEC_1970_2036);
 8001a28:	f7ff fefc 	bl	8001824 <rtc_read>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	460b      	mov	r3, r1
 8001a30:	4b35      	ldr	r3, [pc, #212]	; (8001b08 <tcpecho_thread+0x198>)
 8001a32:	4413      	add	r3, r2
 8001a34:	68fc      	ldr	r4, [r7, #12]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f00e fb57 	bl	80100ea <lwip_htonl>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	6223      	str	r3, [r4, #32]
								ntp_packet_ptr->rxTm_f = htonl((time_t)(((float)TIM2->CNT)/((float)TIM2->ARR)*4294967296.0));//htonl((NTP_MS_TO_FS_U32 * tm_ms_));
 8001a40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a46:	ee07 3a90 	vmov	s15, r3
 8001a4a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a54:	ee07 3a90 	vmov	s15, r3
 8001a58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a5c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001a60:	ee16 0a90 	vmov	r0, s13
 8001a64:	f7fe fd80 	bl	8000568 <__aeabi_f2d>
 8001a68:	f04f 0200 	mov.w	r2, #0
 8001a6c:	4b27      	ldr	r3, [pc, #156]	; (8001b0c <tcpecho_thread+0x19c>)
 8001a6e:	f7fe fdd3 	bl	8000618 <__aeabi_dmul>
 8001a72:	4602      	mov	r2, r0
 8001a74:	460b      	mov	r3, r1
 8001a76:	4610      	mov	r0, r2
 8001a78:	4619      	mov	r1, r3
 8001a7a:	f7ff f87f 	bl	8000b7c <__aeabi_d2lz>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	4613      	mov	r3, r2
 8001a84:	68fc      	ldr	r4, [r7, #12]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f00e fb2f 	bl	80100ea <lwip_htonl>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	6263      	str	r3, [r4, #36]	; 0x24

								/* Copy into transmit timestamp fields */
								ntp_packet_ptr->txTm_s = ntp_packet_ptr->rxTm_s;
 8001a90:	68fa      	ldr	r2, [r7, #12]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	6a12      	ldr	r2, [r2, #32]
 8001a96:	629a      	str	r2, [r3, #40]	; 0x28
								ntp_packet_ptr->txTm_f = ntp_packet_ptr->rxTm_f;
 8001a98:	68fa      	ldr	r2, [r7, #12]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a9e:	62da      	str	r2, [r3, #44]	; 0x2c

								netconn_send(conn, buf);
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	69f8      	ldr	r0, [r7, #28]
 8001aa6:	f00b ffe7 	bl	800da78 <netconn_send>
							}
							while (netbuf_next(buf) >= 0);
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f00d fb05 	bl	800f0bc <netbuf_next>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	f6bf af76 	bge.w	80019a6 <tcpecho_thread+0x36>

							netbuf_delete(buf);
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f00d fa93 	bl	800efe8 <netbuf_delete>
						while (( recv_err = netconn_recv(conn, &buf)) == ERR_OK)
 8001ac2:	f107 0314 	add.w	r3, r7, #20
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	69f8      	ldr	r0, [r7, #28]
 8001aca:	f00b ff5b 	bl	800d984 <netconn_recv>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	76bb      	strb	r3, [r7, #26]
 8001ad2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	f43f af65 	beq.w	80019a6 <tcpecho_thread+0x36>
						}
						/* Close connection and discard connection identifier. */
						//netconn_close(newconn);
						//netconn_delete(newconn);
						ntpd_status.requests_count++;
 8001adc:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <tcpecho_thread+0x188>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	4a05      	ldr	r2, [pc, #20]	; (8001af8 <tcpecho_thread+0x188>)
 8001ae4:	6053      	str	r3, [r2, #4]
						while (( recv_err = netconn_recv(conn, &buf)) == ERR_OK)
 8001ae6:	e7ec      	b.n	8001ac2 <tcpecho_thread+0x152>
					}
				}
				else
				{
					netconn_delete(conn);
 8001ae8:	69f8      	ldr	r0, [r7, #28]
 8001aea:	f00b fd7b 	bl	800d5e4 <netconn_delete>
				}
			}
  /* USER CODE END tcpecho_thread */
}
 8001aee:	bf00      	nop
 8001af0:	3724      	adds	r7, #36	; 0x24
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd90      	pop	{r4, r7, pc}
 8001af6:	bf00      	nop
 8001af8:	20000000 	.word	0x20000000
 8001afc:	00535047 	.word	0x00535047
 8001b00:	20004d20 	.word	0x20004d20
 8001b04:	20004c90 	.word	0x20004c90
 8001b08:	83aa7e80 	.word	0x83aa7e80
 8001b0c:	41f00000 	.word	0x41f00000

08001b10 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a04      	ldr	r2, [pc, #16]	; (8001b30 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d101      	bne.n	8001b26 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001b22:	f000 fb03 	bl	800212c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b26:	bf00      	nop
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40010000 	.word	0x40010000

08001b34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b38:	b672      	cpsid	i
}
 8001b3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b3c:	e7fe      	b.n	8001b3c <Error_Handler+0x8>
	...

08001b40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	607b      	str	r3, [r7, #4]
 8001b4a:	4b12      	ldr	r3, [pc, #72]	; (8001b94 <HAL_MspInit+0x54>)
 8001b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4e:	4a11      	ldr	r2, [pc, #68]	; (8001b94 <HAL_MspInit+0x54>)
 8001b50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b54:	6453      	str	r3, [r2, #68]	; 0x44
 8001b56:	4b0f      	ldr	r3, [pc, #60]	; (8001b94 <HAL_MspInit+0x54>)
 8001b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b5e:	607b      	str	r3, [r7, #4]
 8001b60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	603b      	str	r3, [r7, #0]
 8001b66:	4b0b      	ldr	r3, [pc, #44]	; (8001b94 <HAL_MspInit+0x54>)
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	4a0a      	ldr	r2, [pc, #40]	; (8001b94 <HAL_MspInit+0x54>)
 8001b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b70:	6413      	str	r3, [r2, #64]	; 0x40
 8001b72:	4b08      	ldr	r3, [pc, #32]	; (8001b94 <HAL_MspInit+0x54>)
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b7a:	603b      	str	r3, [r7, #0]
 8001b7c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b7e:	2200      	movs	r2, #0
 8001b80:	210f      	movs	r1, #15
 8001b82:	f06f 0001 	mvn.w	r0, #1
 8001b86:	f000 fbcd 	bl	8002324 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b8a:	bf00      	nop
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40023800 	.word	0x40023800

08001b98 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a05      	ldr	r2, [pc, #20]	; (8001bbc <HAL_RTC_MspInit+0x24>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d102      	bne.n	8001bb0 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001baa:	4b05      	ldr	r3, [pc, #20]	; (8001bc0 <HAL_RTC_MspInit+0x28>)
 8001bac:	2201      	movs	r2, #1
 8001bae:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	40002800 	.word	0x40002800
 8001bc0:	42470e3c 	.word	0x42470e3c

08001bc4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b08a      	sub	sp, #40	; 0x28
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bcc:	f107 0314 	add.w	r3, r7, #20
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	60da      	str	r2, [r3, #12]
 8001bda:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a19      	ldr	r2, [pc, #100]	; (8001c48 <HAL_SPI_MspInit+0x84>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d12c      	bne.n	8001c40 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	613b      	str	r3, [r7, #16]
 8001bea:	4b18      	ldr	r3, [pc, #96]	; (8001c4c <HAL_SPI_MspInit+0x88>)
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	4a17      	ldr	r2, [pc, #92]	; (8001c4c <HAL_SPI_MspInit+0x88>)
 8001bf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf6:	4b15      	ldr	r3, [pc, #84]	; (8001c4c <HAL_SPI_MspInit+0x88>)
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bfe:	613b      	str	r3, [r7, #16]
 8001c00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	4b11      	ldr	r3, [pc, #68]	; (8001c4c <HAL_SPI_MspInit+0x88>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	4a10      	ldr	r2, [pc, #64]	; (8001c4c <HAL_SPI_MspInit+0x88>)
 8001c0c:	f043 0304 	orr.w	r3, r3, #4
 8001c10:	6313      	str	r3, [r2, #48]	; 0x30
 8001c12:	4b0e      	ldr	r3, [pc, #56]	; (8001c4c <HAL_SPI_MspInit+0x88>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	f003 0304 	and.w	r3, r3, #4
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001c1e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001c22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c24:	2302      	movs	r3, #2
 8001c26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c30:	2306      	movs	r3, #6
 8001c32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c34:	f107 0314 	add.w	r3, r7, #20
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4805      	ldr	r0, [pc, #20]	; (8001c50 <HAL_SPI_MspInit+0x8c>)
 8001c3c:	f001 fbae 	bl	800339c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001c40:	bf00      	nop
 8001c42:	3728      	adds	r7, #40	; 0x28
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	40003c00 	.word	0x40003c00
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	40020800 	.word	0x40020800

08001c54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c64:	d115      	bne.n	8001c92 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <HAL_TIM_Base_MspInit+0x48>)
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	4a0b      	ldr	r2, [pc, #44]	; (8001c9c <HAL_TIM_Base_MspInit+0x48>)
 8001c70:	f043 0301 	orr.w	r3, r3, #1
 8001c74:	6413      	str	r3, [r2, #64]	; 0x40
 8001c76:	4b09      	ldr	r3, [pc, #36]	; (8001c9c <HAL_TIM_Base_MspInit+0x48>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001c82:	2200      	movs	r2, #0
 8001c84:	2105      	movs	r1, #5
 8001c86:	201c      	movs	r0, #28
 8001c88:	f000 fb4c 	bl	8002324 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c8c:	201c      	movs	r0, #28
 8001c8e:	f000 fb65 	bl	800235c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001c92:	bf00      	nop
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40023800 	.word	0x40023800

08001ca0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b08c      	sub	sp, #48	; 0x30
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca8:	f107 031c 	add.w	r3, r7, #28
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	60da      	str	r2, [r3, #12]
 8001cb6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a32      	ldr	r2, [pc, #200]	; (8001d88 <HAL_UART_MspInit+0xe8>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d12c      	bne.n	8001d1c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61bb      	str	r3, [r7, #24]
 8001cc6:	4b31      	ldr	r3, [pc, #196]	; (8001d8c <HAL_UART_MspInit+0xec>)
 8001cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cca:	4a30      	ldr	r2, [pc, #192]	; (8001d8c <HAL_UART_MspInit+0xec>)
 8001ccc:	f043 0310 	orr.w	r3, r3, #16
 8001cd0:	6453      	str	r3, [r2, #68]	; 0x44
 8001cd2:	4b2e      	ldr	r3, [pc, #184]	; (8001d8c <HAL_UART_MspInit+0xec>)
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd6:	f003 0310 	and.w	r3, r3, #16
 8001cda:	61bb      	str	r3, [r7, #24]
 8001cdc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	617b      	str	r3, [r7, #20]
 8001ce2:	4b2a      	ldr	r3, [pc, #168]	; (8001d8c <HAL_UART_MspInit+0xec>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	4a29      	ldr	r2, [pc, #164]	; (8001d8c <HAL_UART_MspInit+0xec>)
 8001ce8:	f043 0302 	orr.w	r3, r3, #2
 8001cec:	6313      	str	r3, [r2, #48]	; 0x30
 8001cee:	4b27      	ldr	r3, [pc, #156]	; (8001d8c <HAL_UART_MspInit+0xec>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	617b      	str	r3, [r7, #20]
 8001cf8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cfa:	23c0      	movs	r3, #192	; 0xc0
 8001cfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfe:	2302      	movs	r3, #2
 8001d00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d02:	2300      	movs	r3, #0
 8001d04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d06:	2303      	movs	r3, #3
 8001d08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d0a:	2307      	movs	r3, #7
 8001d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d0e:	f107 031c 	add.w	r3, r7, #28
 8001d12:	4619      	mov	r1, r3
 8001d14:	481e      	ldr	r0, [pc, #120]	; (8001d90 <HAL_UART_MspInit+0xf0>)
 8001d16:	f001 fb41 	bl	800339c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d1a:	e030      	b.n	8001d7e <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART2)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a1c      	ldr	r2, [pc, #112]	; (8001d94 <HAL_UART_MspInit+0xf4>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d12b      	bne.n	8001d7e <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	613b      	str	r3, [r7, #16]
 8001d2a:	4b18      	ldr	r3, [pc, #96]	; (8001d8c <HAL_UART_MspInit+0xec>)
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	4a17      	ldr	r2, [pc, #92]	; (8001d8c <HAL_UART_MspInit+0xec>)
 8001d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d34:	6413      	str	r3, [r2, #64]	; 0x40
 8001d36:	4b15      	ldr	r3, [pc, #84]	; (8001d8c <HAL_UART_MspInit+0xec>)
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3e:	613b      	str	r3, [r7, #16]
 8001d40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	4b11      	ldr	r3, [pc, #68]	; (8001d8c <HAL_UART_MspInit+0xec>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	4a10      	ldr	r2, [pc, #64]	; (8001d8c <HAL_UART_MspInit+0xec>)
 8001d4c:	f043 0308 	orr.w	r3, r3, #8
 8001d50:	6313      	str	r3, [r2, #48]	; 0x30
 8001d52:	4b0e      	ldr	r3, [pc, #56]	; (8001d8c <HAL_UART_MspInit+0xec>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	f003 0308 	and.w	r3, r3, #8
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001d5e:	2360      	movs	r3, #96	; 0x60
 8001d60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d62:	2302      	movs	r3, #2
 8001d64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d66:	2300      	movs	r3, #0
 8001d68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d6e:	2307      	movs	r3, #7
 8001d70:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d72:	f107 031c 	add.w	r3, r7, #28
 8001d76:	4619      	mov	r1, r3
 8001d78:	4807      	ldr	r0, [pc, #28]	; (8001d98 <HAL_UART_MspInit+0xf8>)
 8001d7a:	f001 fb0f 	bl	800339c <HAL_GPIO_Init>
}
 8001d7e:	bf00      	nop
 8001d80:	3730      	adds	r7, #48	; 0x30
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	40011000 	.word	0x40011000
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	40020400 	.word	0x40020400
 8001d94:	40004400 	.word	0x40004400
 8001d98:	40020c00 	.word	0x40020c00

08001d9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b08c      	sub	sp, #48	; 0x30
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001da4:	2300      	movs	r3, #0
 8001da6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001da8:	2300      	movs	r3, #0
 8001daa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001dac:	2200      	movs	r2, #0
 8001dae:	6879      	ldr	r1, [r7, #4]
 8001db0:	2019      	movs	r0, #25
 8001db2:	f000 fab7 	bl	8002324 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001db6:	2019      	movs	r0, #25
 8001db8:	f000 fad0 	bl	800235c <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	4b1f      	ldr	r3, [pc, #124]	; (8001e40 <HAL_InitTick+0xa4>)
 8001dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc4:	4a1e      	ldr	r2, [pc, #120]	; (8001e40 <HAL_InitTick+0xa4>)
 8001dc6:	f043 0301 	orr.w	r3, r3, #1
 8001dca:	6453      	str	r3, [r2, #68]	; 0x44
 8001dcc:	4b1c      	ldr	r3, [pc, #112]	; (8001e40 <HAL_InitTick+0xa4>)
 8001dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	60fb      	str	r3, [r7, #12]
 8001dd6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001dd8:	f107 0210 	add.w	r2, r7, #16
 8001ddc:	f107 0314 	add.w	r3, r7, #20
 8001de0:	4611      	mov	r1, r2
 8001de2:	4618      	mov	r0, r3
 8001de4:	f003 fa74 	bl	80052d0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001de8:	f003 fa5e 	bl	80052a8 <HAL_RCC_GetPCLK2Freq>
 8001dec:	4603      	mov	r3, r0
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001df4:	4a13      	ldr	r2, [pc, #76]	; (8001e44 <HAL_InitTick+0xa8>)
 8001df6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dfa:	0c9b      	lsrs	r3, r3, #18
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001e00:	4b11      	ldr	r3, [pc, #68]	; (8001e48 <HAL_InitTick+0xac>)
 8001e02:	4a12      	ldr	r2, [pc, #72]	; (8001e4c <HAL_InitTick+0xb0>)
 8001e04:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001e06:	4b10      	ldr	r3, [pc, #64]	; (8001e48 <HAL_InitTick+0xac>)
 8001e08:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e0c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001e0e:	4a0e      	ldr	r2, [pc, #56]	; (8001e48 <HAL_InitTick+0xac>)
 8001e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e12:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001e14:	4b0c      	ldr	r3, [pc, #48]	; (8001e48 <HAL_InitTick+0xac>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e1a:	4b0b      	ldr	r3, [pc, #44]	; (8001e48 <HAL_InitTick+0xac>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001e20:	4809      	ldr	r0, [pc, #36]	; (8001e48 <HAL_InitTick+0xac>)
 8001e22:	f003 ff24 	bl	8005c6e <HAL_TIM_Base_Init>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d104      	bne.n	8001e36 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001e2c:	4806      	ldr	r0, [pc, #24]	; (8001e48 <HAL_InitTick+0xac>)
 8001e2e:	f003 ff6d 	bl	8005d0c <HAL_TIM_Base_Start_IT>
 8001e32:	4603      	mov	r3, r0
 8001e34:	e000      	b.n	8001e38 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3730      	adds	r7, #48	; 0x30
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40023800 	.word	0x40023800
 8001e44:	431bde83 	.word	0x431bde83
 8001e48:	20004d48 	.word	0x20004d48
 8001e4c:	40010000 	.word	0x40010000

08001e50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e54:	e7fe      	b.n	8001e54 <NMI_Handler+0x4>

08001e56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e56:	b480      	push	{r7}
 8001e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e5a:	e7fe      	b.n	8001e5a <HardFault_Handler+0x4>

08001e5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e60:	e7fe      	b.n	8001e60 <MemManage_Handler+0x4>

08001e62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e62:	b480      	push	{r7}
 8001e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e66:	e7fe      	b.n	8001e66 <BusFault_Handler+0x4>

08001e68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e6c:	e7fe      	b.n	8001e6c <UsageFault_Handler+0x4>

08001e6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e80:	4802      	ldr	r0, [pc, #8]	; (8001e8c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001e82:	f003 ffb3 	bl	8005dec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	20004d48 	.word	0x20004d48

08001e90 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e94:	4802      	ldr	r0, [pc, #8]	; (8001ea0 <TIM2_IRQHandler+0x10>)
 8001e96:	f003 ffa9 	bl	8005dec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	20004c94 	.word	0x20004c94

08001ea4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001ea8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001eac:	f001 fc2c 	bl	8003708 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001eb0:	bf00      	nop
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001eb8:	4802      	ldr	r0, [pc, #8]	; (8001ec4 <ETH_IRQHandler+0x10>)
 8001eba:	f000 fe41 	bl	8002b40 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	200066ac 	.word	0x200066ac

08001ec8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001ecc:	4802      	ldr	r0, [pc, #8]	; (8001ed8 <OTG_FS_IRQHandler+0x10>)
 8001ece:	f001 fd83 	bl	80039d8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	2000cb10 	.word	0x2000cb10

08001edc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
	return 1;
 8001ee0:	2301      	movs	r3, #1
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <_kill>:

int _kill(int pid, int sig)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001ef6:	4b05      	ldr	r3, [pc, #20]	; (8001f0c <_kill+0x20>)
 8001ef8:	2216      	movs	r2, #22
 8001efa:	601a      	str	r2, [r3, #0]
	return -1;
 8001efc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	2000b638 	.word	0x2000b638

08001f10 <_exit>:

void _exit (int status)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f18:	f04f 31ff 	mov.w	r1, #4294967295
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f7ff ffe5 	bl	8001eec <_kill>
	while (1) {}		/* Make sure we hang here */
 8001f22:	e7fe      	b.n	8001f22 <_exit+0x12>

08001f24 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f30:	2300      	movs	r3, #0
 8001f32:	617b      	str	r3, [r7, #20]
 8001f34:	e00a      	b.n	8001f4c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f36:	f3af 8000 	nop.w
 8001f3a:	4601      	mov	r1, r0
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	1c5a      	adds	r2, r3, #1
 8001f40:	60ba      	str	r2, [r7, #8]
 8001f42:	b2ca      	uxtb	r2, r1
 8001f44:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	617b      	str	r3, [r7, #20]
 8001f4c:	697a      	ldr	r2, [r7, #20]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	dbf0      	blt.n	8001f36 <_read+0x12>
	}

return len;
 8001f54:	687b      	ldr	r3, [r7, #4]
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3718      	adds	r7, #24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b086      	sub	sp, #24
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	60f8      	str	r0, [r7, #12]
 8001f66:	60b9      	str	r1, [r7, #8]
 8001f68:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	617b      	str	r3, [r7, #20]
 8001f6e:	e009      	b.n	8001f84 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	1c5a      	adds	r2, r3, #1
 8001f74:	60ba      	str	r2, [r7, #8]
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	3301      	adds	r3, #1
 8001f82:	617b      	str	r3, [r7, #20]
 8001f84:	697a      	ldr	r2, [r7, #20]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	dbf1      	blt.n	8001f70 <_write+0x12>
	}
	return len;
 8001f8c:	687b      	ldr	r3, [r7, #4]
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3718      	adds	r7, #24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <_close>:

int _close(int file)
{
 8001f96:	b480      	push	{r7}
 8001f98:	b083      	sub	sp, #12
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
	return -1;
 8001f9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b083      	sub	sp, #12
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
 8001fb6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fbe:	605a      	str	r2, [r3, #4]
	return 0;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <_isatty>:

int _isatty(int file)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	b083      	sub	sp, #12
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
	return 1;
 8001fd6:	2301      	movs	r3, #1
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
	return 0;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3714      	adds	r7, #20
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
	...

08002000 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002000:	b480      	push	{r7}
 8002002:	b087      	sub	sp, #28
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002008:	4a14      	ldr	r2, [pc, #80]	; (800205c <_sbrk+0x5c>)
 800200a:	4b15      	ldr	r3, [pc, #84]	; (8002060 <_sbrk+0x60>)
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002014:	4b13      	ldr	r3, [pc, #76]	; (8002064 <_sbrk+0x64>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d102      	bne.n	8002022 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800201c:	4b11      	ldr	r3, [pc, #68]	; (8002064 <_sbrk+0x64>)
 800201e:	4a12      	ldr	r2, [pc, #72]	; (8002068 <_sbrk+0x68>)
 8002020:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002022:	4b10      	ldr	r3, [pc, #64]	; (8002064 <_sbrk+0x64>)
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4413      	add	r3, r2
 800202a:	693a      	ldr	r2, [r7, #16]
 800202c:	429a      	cmp	r2, r3
 800202e:	d205      	bcs.n	800203c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8002030:	4b0e      	ldr	r3, [pc, #56]	; (800206c <_sbrk+0x6c>)
 8002032:	220c      	movs	r2, #12
 8002034:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002036:	f04f 33ff 	mov.w	r3, #4294967295
 800203a:	e009      	b.n	8002050 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 800203c:	4b09      	ldr	r3, [pc, #36]	; (8002064 <_sbrk+0x64>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002042:	4b08      	ldr	r3, [pc, #32]	; (8002064 <_sbrk+0x64>)
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4413      	add	r3, r2
 800204a:	4a06      	ldr	r2, [pc, #24]	; (8002064 <_sbrk+0x64>)
 800204c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800204e:	68fb      	ldr	r3, [r7, #12]
}
 8002050:	4618      	mov	r0, r3
 8002052:	371c      	adds	r7, #28
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	20020000 	.word	0x20020000
 8002060:	00000400 	.word	0x00000400
 8002064:	2000050c 	.word	0x2000050c
 8002068:	2000cf28 	.word	0x2000cf28
 800206c:	2000b638 	.word	0x2000b638

08002070 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002074:	4b06      	ldr	r3, [pc, #24]	; (8002090 <SystemInit+0x20>)
 8002076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800207a:	4a05      	ldr	r2, [pc, #20]	; (8002090 <SystemInit+0x20>)
 800207c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002080:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002084:	bf00      	nop
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	e000ed00 	.word	0xe000ed00

08002094 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002094:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002098:	480d      	ldr	r0, [pc, #52]	; (80020d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800209a:	490e      	ldr	r1, [pc, #56]	; (80020d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800209c:	4a0e      	ldr	r2, [pc, #56]	; (80020d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800209e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020a0:	e002      	b.n	80020a8 <LoopCopyDataInit>

080020a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020a6:	3304      	adds	r3, #4

080020a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020ac:	d3f9      	bcc.n	80020a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ae:	4a0b      	ldr	r2, [pc, #44]	; (80020dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020b0:	4c0b      	ldr	r4, [pc, #44]	; (80020e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80020b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020b4:	e001      	b.n	80020ba <LoopFillZerobss>

080020b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020b8:	3204      	adds	r2, #4

080020ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020bc:	d3fb      	bcc.n	80020b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80020be:	f7ff ffd7 	bl	8002070 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020c2:	f01a f847 	bl	801c154 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020c6:	f7fe ff55 	bl	8000f74 <main>
  bx  lr    
 80020ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80020cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020d4:	20000268 	.word	0x20000268
  ldr r2, =_sidata
 80020d8:	080233e0 	.word	0x080233e0
  ldr r2, =_sbss
 80020dc:	20000268 	.word	0x20000268
  ldr r4, =_ebss
 80020e0:	2000cf24 	.word	0x2000cf24

080020e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020e4:	e7fe      	b.n	80020e4 <ADC_IRQHandler>
	...

080020e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020ec:	4b0e      	ldr	r3, [pc, #56]	; (8002128 <HAL_Init+0x40>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a0d      	ldr	r2, [pc, #52]	; (8002128 <HAL_Init+0x40>)
 80020f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020f8:	4b0b      	ldr	r3, [pc, #44]	; (8002128 <HAL_Init+0x40>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a0a      	ldr	r2, [pc, #40]	; (8002128 <HAL_Init+0x40>)
 80020fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002102:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002104:	4b08      	ldr	r3, [pc, #32]	; (8002128 <HAL_Init+0x40>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a07      	ldr	r2, [pc, #28]	; (8002128 <HAL_Init+0x40>)
 800210a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800210e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002110:	2003      	movs	r0, #3
 8002112:	f000 f8fc 	bl	800230e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002116:	2000      	movs	r0, #0
 8002118:	f7ff fe40 	bl	8001d9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800211c:	f7ff fd10 	bl	8001b40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	40023c00 	.word	0x40023c00

0800212c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002130:	4b06      	ldr	r3, [pc, #24]	; (800214c <HAL_IncTick+0x20>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	461a      	mov	r2, r3
 8002136:	4b06      	ldr	r3, [pc, #24]	; (8002150 <HAL_IncTick+0x24>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4413      	add	r3, r2
 800213c:	4a04      	ldr	r2, [pc, #16]	; (8002150 <HAL_IncTick+0x24>)
 800213e:	6013      	str	r3, [r2, #0]
}
 8002140:	bf00      	nop
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	20000018 	.word	0x20000018
 8002150:	20004d90 	.word	0x20004d90

08002154 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  return uwTick;
 8002158:	4b03      	ldr	r3, [pc, #12]	; (8002168 <HAL_GetTick+0x14>)
 800215a:	681b      	ldr	r3, [r3, #0]
}
 800215c:	4618      	mov	r0, r3
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	20004d90 	.word	0x20004d90

0800216c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002174:	f7ff ffee 	bl	8002154 <HAL_GetTick>
 8002178:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002184:	d005      	beq.n	8002192 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002186:	4b0a      	ldr	r3, [pc, #40]	; (80021b0 <HAL_Delay+0x44>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	461a      	mov	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	4413      	add	r3, r2
 8002190:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002192:	bf00      	nop
 8002194:	f7ff ffde 	bl	8002154 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d8f7      	bhi.n	8002194 <HAL_Delay+0x28>
  {
  }
}
 80021a4:	bf00      	nop
 80021a6:	bf00      	nop
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	20000018 	.word	0x20000018

080021b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021c4:	4b0c      	ldr	r3, [pc, #48]	; (80021f8 <__NVIC_SetPriorityGrouping+0x44>)
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021ca:	68ba      	ldr	r2, [r7, #8]
 80021cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021d0:	4013      	ands	r3, r2
 80021d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021e6:	4a04      	ldr	r2, [pc, #16]	; (80021f8 <__NVIC_SetPriorityGrouping+0x44>)
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	60d3      	str	r3, [r2, #12]
}
 80021ec:	bf00      	nop
 80021ee:	3714      	adds	r7, #20
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	e000ed00 	.word	0xe000ed00

080021fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002200:	4b04      	ldr	r3, [pc, #16]	; (8002214 <__NVIC_GetPriorityGrouping+0x18>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	0a1b      	lsrs	r3, r3, #8
 8002206:	f003 0307 	and.w	r3, r3, #7
}
 800220a:	4618      	mov	r0, r3
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr
 8002214:	e000ed00 	.word	0xe000ed00

08002218 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	4603      	mov	r3, r0
 8002220:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002226:	2b00      	cmp	r3, #0
 8002228:	db0b      	blt.n	8002242 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800222a:	79fb      	ldrb	r3, [r7, #7]
 800222c:	f003 021f 	and.w	r2, r3, #31
 8002230:	4907      	ldr	r1, [pc, #28]	; (8002250 <__NVIC_EnableIRQ+0x38>)
 8002232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002236:	095b      	lsrs	r3, r3, #5
 8002238:	2001      	movs	r0, #1
 800223a:	fa00 f202 	lsl.w	r2, r0, r2
 800223e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002242:	bf00      	nop
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	e000e100 	.word	0xe000e100

08002254 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	4603      	mov	r3, r0
 800225c:	6039      	str	r1, [r7, #0]
 800225e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002264:	2b00      	cmp	r3, #0
 8002266:	db0a      	blt.n	800227e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	b2da      	uxtb	r2, r3
 800226c:	490c      	ldr	r1, [pc, #48]	; (80022a0 <__NVIC_SetPriority+0x4c>)
 800226e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002272:	0112      	lsls	r2, r2, #4
 8002274:	b2d2      	uxtb	r2, r2
 8002276:	440b      	add	r3, r1
 8002278:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800227c:	e00a      	b.n	8002294 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	b2da      	uxtb	r2, r3
 8002282:	4908      	ldr	r1, [pc, #32]	; (80022a4 <__NVIC_SetPriority+0x50>)
 8002284:	79fb      	ldrb	r3, [r7, #7]
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	3b04      	subs	r3, #4
 800228c:	0112      	lsls	r2, r2, #4
 800228e:	b2d2      	uxtb	r2, r2
 8002290:	440b      	add	r3, r1
 8002292:	761a      	strb	r2, [r3, #24]
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	e000e100 	.word	0xe000e100
 80022a4:	e000ed00 	.word	0xe000ed00

080022a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b089      	sub	sp, #36	; 0x24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f003 0307 	and.w	r3, r3, #7
 80022ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	f1c3 0307 	rsb	r3, r3, #7
 80022c2:	2b04      	cmp	r3, #4
 80022c4:	bf28      	it	cs
 80022c6:	2304      	movcs	r3, #4
 80022c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	3304      	adds	r3, #4
 80022ce:	2b06      	cmp	r3, #6
 80022d0:	d902      	bls.n	80022d8 <NVIC_EncodePriority+0x30>
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	3b03      	subs	r3, #3
 80022d6:	e000      	b.n	80022da <NVIC_EncodePriority+0x32>
 80022d8:	2300      	movs	r3, #0
 80022da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022dc:	f04f 32ff 	mov.w	r2, #4294967295
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	fa02 f303 	lsl.w	r3, r2, r3
 80022e6:	43da      	mvns	r2, r3
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	401a      	ands	r2, r3
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022f0:	f04f 31ff 	mov.w	r1, #4294967295
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	fa01 f303 	lsl.w	r3, r1, r3
 80022fa:	43d9      	mvns	r1, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002300:	4313      	orrs	r3, r2
         );
}
 8002302:	4618      	mov	r0, r3
 8002304:	3724      	adds	r7, #36	; 0x24
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr

0800230e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	b082      	sub	sp, #8
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f7ff ff4c 	bl	80021b4 <__NVIC_SetPriorityGrouping>
}
 800231c:	bf00      	nop
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
 8002330:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002332:	2300      	movs	r3, #0
 8002334:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002336:	f7ff ff61 	bl	80021fc <__NVIC_GetPriorityGrouping>
 800233a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	68b9      	ldr	r1, [r7, #8]
 8002340:	6978      	ldr	r0, [r7, #20]
 8002342:	f7ff ffb1 	bl	80022a8 <NVIC_EncodePriority>
 8002346:	4602      	mov	r2, r0
 8002348:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800234c:	4611      	mov	r1, r2
 800234e:	4618      	mov	r0, r3
 8002350:	f7ff ff80 	bl	8002254 <__NVIC_SetPriority>
}
 8002354:	bf00      	nop
 8002356:	3718      	adds	r7, #24
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff ff54 	bl	8002218 <__NVIC_EnableIRQ>
}
 8002370:	bf00      	nop
 8002372:	3708      	adds	r7, #8
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b088      	sub	sp, #32
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8002380:	2300      	movs	r3, #0
 8002382:	61fb      	str	r3, [r7, #28]
 8002384:	2300      	movs	r3, #0
 8002386:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8002388:	4baa      	ldr	r3, [pc, #680]	; (8002634 <HAL_ETH_Init+0x2bc>)
 800238a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 800238c:	2300      	movs	r3, #0
 800238e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8002390:	2300      	movs	r3, #0
 8002392:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e183      	b.n	80026a6 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d106      	bne.n	80023b8 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f006 f928 	bl	8008608 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023b8:	2300      	movs	r3, #0
 80023ba:	60bb      	str	r3, [r7, #8]
 80023bc:	4b9e      	ldr	r3, [pc, #632]	; (8002638 <HAL_ETH_Init+0x2c0>)
 80023be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c0:	4a9d      	ldr	r2, [pc, #628]	; (8002638 <HAL_ETH_Init+0x2c0>)
 80023c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023c6:	6453      	str	r3, [r2, #68]	; 0x44
 80023c8:	4b9b      	ldr	r3, [pc, #620]	; (8002638 <HAL_ETH_Init+0x2c0>)
 80023ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023d0:	60bb      	str	r3, [r7, #8]
 80023d2:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80023d4:	4b99      	ldr	r3, [pc, #612]	; (800263c <HAL_ETH_Init+0x2c4>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	4a98      	ldr	r2, [pc, #608]	; (800263c <HAL_ETH_Init+0x2c4>)
 80023da:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80023de:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80023e0:	4b96      	ldr	r3, [pc, #600]	; (800263c <HAL_ETH_Init+0x2c4>)
 80023e2:	685a      	ldr	r2, [r3, #4]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a1b      	ldr	r3, [r3, #32]
 80023e8:	4994      	ldr	r1, [pc, #592]	; (800263c <HAL_ETH_Init+0x2c4>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f042 0201 	orr.w	r2, r2, #1
 8002400:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002404:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002406:	f7ff fea5 	bl	8002154 <HAL_GetTick>
 800240a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800240c:	e011      	b.n	8002432 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800240e:	f7ff fea1 	bl	8002154 <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800241c:	d909      	bls.n	8002432 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2203      	movs	r2, #3
 8002422:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e139      	b.n	80026a6 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	2b00      	cmp	r3, #0
 8002442:	d1e4      	bne.n	800240e <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	f023 031c 	bic.w	r3, r3, #28
 8002452:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002454:	f002 ff08 	bl	8005268 <HAL_RCC_GetHCLKFreq>
 8002458:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	4a78      	ldr	r2, [pc, #480]	; (8002640 <HAL_ETH_Init+0x2c8>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d908      	bls.n	8002474 <HAL_ETH_Init+0xfc>
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	4a77      	ldr	r2, [pc, #476]	; (8002644 <HAL_ETH_Init+0x2cc>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d804      	bhi.n	8002474 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	f043 0308 	orr.w	r3, r3, #8
 8002470:	61fb      	str	r3, [r7, #28]
 8002472:	e027      	b.n	80024c4 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	4a73      	ldr	r2, [pc, #460]	; (8002644 <HAL_ETH_Init+0x2cc>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d908      	bls.n	800248e <HAL_ETH_Init+0x116>
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	4a6d      	ldr	r2, [pc, #436]	; (8002634 <HAL_ETH_Init+0x2bc>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d204      	bcs.n	800248e <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	f043 030c 	orr.w	r3, r3, #12
 800248a:	61fb      	str	r3, [r7, #28]
 800248c:	e01a      	b.n	80024c4 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	4a68      	ldr	r2, [pc, #416]	; (8002634 <HAL_ETH_Init+0x2bc>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d303      	bcc.n	800249e <HAL_ETH_Init+0x126>
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	4a6b      	ldr	r2, [pc, #428]	; (8002648 <HAL_ETH_Init+0x2d0>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d911      	bls.n	80024c2 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	4a69      	ldr	r2, [pc, #420]	; (8002648 <HAL_ETH_Init+0x2d0>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d908      	bls.n	80024b8 <HAL_ETH_Init+0x140>
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	4a68      	ldr	r2, [pc, #416]	; (800264c <HAL_ETH_Init+0x2d4>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d804      	bhi.n	80024b8 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	f043 0304 	orr.w	r3, r3, #4
 80024b4:	61fb      	str	r3, [r7, #28]
 80024b6:	e005      	b.n	80024c4 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	f043 0310 	orr.w	r3, r3, #16
 80024be:	61fb      	str	r3, [r7, #28]
 80024c0:	e000      	b.n	80024c4 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80024c2:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	69fa      	ldr	r2, [r7, #28]
 80024ca:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80024cc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80024d0:	2100      	movs	r1, #0
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 fc17 	bl	8002d06 <HAL_ETH_WritePHYRegister>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00b      	beq.n	80024f6 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80024e2:	6939      	ldr	r1, [r7, #16]
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f000 fca3 	bl	8002e30 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2201      	movs	r2, #1
 80024ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e0d7      	b.n	80026a6 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80024f6:	20ff      	movs	r0, #255	; 0xff
 80024f8:	f7ff fe38 	bl	800216c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	2b00      	cmp	r3, #0
 8002502:	f000 80a5 	beq.w	8002650 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002506:	f7ff fe25 	bl	8002154 <HAL_GetTick>
 800250a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800250c:	f107 030c 	add.w	r3, r7, #12
 8002510:	461a      	mov	r2, r3
 8002512:	2101      	movs	r1, #1
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f000 fb8e 	bl	8002c36 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800251a:	f7ff fe1b 	bl	8002154 <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	f241 3288 	movw	r2, #5000	; 0x1388
 8002528:	4293      	cmp	r3, r2
 800252a:	d90f      	bls.n	800254c <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002530:	6939      	ldr	r1, [r7, #16]
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 fc7c 	bl	8002e30 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e0ac      	b.n	80026a6 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f003 0304 	and.w	r3, r3, #4
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0da      	beq.n	800250c <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8002556:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800255a:	2100      	movs	r1, #0
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f000 fbd2 	bl	8002d06 <HAL_ETH_WritePHYRegister>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d00b      	beq.n	8002580 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800256c:	6939      	ldr	r1, [r7, #16]
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 fc5e 	bl	8002e30 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800257c:	2301      	movs	r3, #1
 800257e:	e092      	b.n	80026a6 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8002580:	f7ff fde8 	bl	8002154 <HAL_GetTick>
 8002584:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002586:	f107 030c 	add.w	r3, r7, #12
 800258a:	461a      	mov	r2, r3
 800258c:	2101      	movs	r1, #1
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 fb51 	bl	8002c36 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8002594:	f7ff fdde 	bl	8002154 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	f241 3288 	movw	r2, #5000	; 0x1388
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d90f      	bls.n	80025c6 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80025aa:	6939      	ldr	r1, [r7, #16]
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f000 fc3f 	bl	8002e30 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2201      	movs	r2, #1
 80025b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e06f      	b.n	80026a6 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f003 0320 	and.w	r3, r3, #32
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d0da      	beq.n	8002586 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80025d0:	f107 030c 	add.w	r3, r7, #12
 80025d4:	461a      	mov	r2, r3
 80025d6:	2110      	movs	r1, #16
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f000 fb2c 	bl	8002c36 <HAL_ETH_ReadPHYRegister>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d00b      	beq.n	80025fc <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80025e8:	6939      	ldr	r1, [r7, #16]
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 fc20 	bl	8002e30 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80025f8:	2301      	movs	r3, #1
 80025fa:	e054      	b.n	80026a6 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f003 0304 	and.w	r3, r3, #4
 8002602:	2b00      	cmp	r3, #0
 8002604:	d004      	beq.n	8002610 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800260c:	60da      	str	r2, [r3, #12]
 800260e:	e002      	b.n	8002616 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d003      	beq.n	8002628 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	609a      	str	r2, [r3, #8]
 8002626:	e035      	b.n	8002694 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800262e:	609a      	str	r2, [r3, #8]
 8002630:	e030      	b.n	8002694 <HAL_ETH_Init+0x31c>
 8002632:	bf00      	nop
 8002634:	03938700 	.word	0x03938700
 8002638:	40023800 	.word	0x40023800
 800263c:	40013800 	.word	0x40013800
 8002640:	01312cff 	.word	0x01312cff
 8002644:	02160ebf 	.word	0x02160ebf
 8002648:	05f5e0ff 	.word	0x05f5e0ff
 800264c:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	08db      	lsrs	r3, r3, #3
 8002656:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	085b      	lsrs	r3, r3, #1
 800265e:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002660:	4313      	orrs	r3, r2
 8002662:	b29b      	uxth	r3, r3
 8002664:	461a      	mov	r2, r3
 8002666:	2100      	movs	r1, #0
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f000 fb4c 	bl	8002d06 <HAL_ETH_WritePHYRegister>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00b      	beq.n	800268c <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002678:	6939      	ldr	r1, [r7, #16]
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 fbd8 	bl	8002e30 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e00c      	b.n	80026a6 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800268c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8002690:	f7ff fd6c 	bl	800216c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8002694:	6939      	ldr	r1, [r7, #16]
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 fbca 	bl	8002e30 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3720      	adds	r7, #32
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop

080026b0 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b087      	sub	sp, #28
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
 80026bc:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80026be:	2300      	movs	r3, #0
 80026c0:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d101      	bne.n	80026d0 <HAL_ETH_DMATxDescListInit+0x20>
 80026cc:	2302      	movs	r3, #2
 80026ce:	e052      	b.n	8002776 <HAL_ETH_DMATxDescListInit+0xc6>
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2202      	movs	r2, #2
 80026dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	68ba      	ldr	r2, [r7, #8]
 80026e4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 80026e6:	2300      	movs	r3, #0
 80026e8:	617b      	str	r3, [r7, #20]
 80026ea:	e030      	b.n	800274e <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	015b      	lsls	r3, r3, #5
 80026f0:	68ba      	ldr	r2, [r7, #8]
 80026f2:	4413      	add	r3, r2
 80026f4:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80026fc:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002704:	fb02 f303 	mul.w	r3, r2, r3
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	4413      	add	r3, r2
 800270c:	461a      	mov	r2, r3
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d105      	bne.n	8002726 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	3b01      	subs	r3, #1
 800272a:	697a      	ldr	r2, [r7, #20]
 800272c:	429a      	cmp	r2, r3
 800272e:	d208      	bcs.n	8002742 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	3301      	adds	r3, #1
 8002734:	015b      	lsls	r3, r3, #5
 8002736:	68ba      	ldr	r2, [r7, #8]
 8002738:	4413      	add	r3, r2
 800273a:	461a      	mov	r2, r3
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	60da      	str	r2, [r3, #12]
 8002740:	e002      	b.n	8002748 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8002742:	68ba      	ldr	r2, [r7, #8]
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	3301      	adds	r3, #1
 800274c:	617b      	str	r3, [r7, #20]
 800274e:	697a      	ldr	r2, [r7, #20]
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	429a      	cmp	r2, r3
 8002754:	d3ca      	bcc.n	80026ec <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	68ba      	ldr	r2, [r7, #8]
 800275c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002760:	3310      	adds	r3, #16
 8002762:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	371c      	adds	r7, #28
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8002782:	b480      	push	{r7}
 8002784:	b087      	sub	sp, #28
 8002786:	af00      	add	r7, sp, #0
 8002788:	60f8      	str	r0, [r7, #12]
 800278a:	60b9      	str	r1, [r7, #8]
 800278c:	607a      	str	r2, [r7, #4]
 800278e:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8002790:	2300      	movs	r3, #0
 8002792:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800279a:	2b01      	cmp	r3, #1
 800279c:	d101      	bne.n	80027a2 <HAL_ETH_DMARxDescListInit+0x20>
 800279e:	2302      	movs	r3, #2
 80027a0:	e056      	b.n	8002850 <HAL_ETH_DMARxDescListInit+0xce>
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2201      	movs	r2, #1
 80027a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2202      	movs	r2, #2
 80027ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	68ba      	ldr	r2, [r7, #8]
 80027b6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 80027b8:	2300      	movs	r3, #0
 80027ba:	617b      	str	r3, [r7, #20]
 80027bc:	e034      	b.n	8002828 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	015b      	lsls	r3, r3, #5
 80027c2:	68ba      	ldr	r2, [r7, #8]
 80027c4:	4413      	add	r3, r2
 80027c6:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80027ce:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80027d6:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80027de:	fb02 f303 	mul.w	r3, r2, r3
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	4413      	add	r3, r2
 80027e6:	461a      	mov	r2, r3
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d105      	bne.n	8002800 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	3b01      	subs	r3, #1
 8002804:	697a      	ldr	r2, [r7, #20]
 8002806:	429a      	cmp	r2, r3
 8002808:	d208      	bcs.n	800281c <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	3301      	adds	r3, #1
 800280e:	015b      	lsls	r3, r3, #5
 8002810:	68ba      	ldr	r2, [r7, #8]
 8002812:	4413      	add	r3, r2
 8002814:	461a      	mov	r2, r3
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	60da      	str	r2, [r3, #12]
 800281a:	e002      	b.n	8002822 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800281c:	68ba      	ldr	r2, [r7, #8]
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	3301      	adds	r3, #1
 8002826:	617b      	str	r3, [r7, #20]
 8002828:	697a      	ldr	r2, [r7, #20]
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	429a      	cmp	r2, r3
 800282e:	d3c6      	bcc.n	80027be <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68ba      	ldr	r2, [r7, #8]
 8002836:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800283a:	330c      	adds	r3, #12
 800283c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2201      	movs	r2, #1
 8002842:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800284e:	2300      	movs	r3, #0
}
 8002850:	4618      	mov	r0, r3
 8002852:	371c      	adds	r7, #28
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 800285c:	b480      	push	{r7}
 800285e:	b087      	sub	sp, #28
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8002866:	2300      	movs	r3, #0
 8002868:	617b      	str	r3, [r7, #20]
 800286a:	2300      	movs	r3, #0
 800286c:	60fb      	str	r3, [r7, #12]
 800286e:	2300      	movs	r3, #0
 8002870:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002878:	2b01      	cmp	r3, #1
 800287a:	d101      	bne.n	8002880 <HAL_ETH_TransmitFrame+0x24>
 800287c:	2302      	movs	r3, #2
 800287e:	e0cd      	b.n	8002a1c <HAL_ETH_TransmitFrame+0x1c0>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2202      	movs	r2, #2
 800288c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d109      	bne.n	80028aa <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2201      	movs	r2, #1
 800289a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80028a6:	2301      	movs	r3, #1
 80028a8:	e0b8      	b.n	8002a1c <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	da09      	bge.n	80028c8 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2212      	movs	r2, #18
 80028b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e0a9      	b.n	8002a1c <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d915      	bls.n	80028fe <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	4a54      	ldr	r2, [pc, #336]	; (8002a28 <HAL_ETH_TransmitFrame+0x1cc>)
 80028d6:	fba2 2303 	umull	r2, r3, r2, r3
 80028da:	0a9b      	lsrs	r3, r3, #10
 80028dc:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80028de:	683a      	ldr	r2, [r7, #0]
 80028e0:	4b51      	ldr	r3, [pc, #324]	; (8002a28 <HAL_ETH_TransmitFrame+0x1cc>)
 80028e2:	fba3 1302 	umull	r1, r3, r3, r2
 80028e6:	0a9b      	lsrs	r3, r3, #10
 80028e8:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80028ec:	fb01 f303 	mul.w	r3, r1, r3
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d005      	beq.n	8002902 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	3301      	adds	r3, #1
 80028fa:	617b      	str	r3, [r7, #20]
 80028fc:	e001      	b.n	8002902 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 80028fe:	2301      	movs	r3, #1
 8002900:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d11c      	bne.n	8002942 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002912:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8002916:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002922:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002932:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	461a      	mov	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002940:	e04b      	b.n	80029da <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8002942:	2300      	movs	r3, #0
 8002944:	613b      	str	r3, [r7, #16]
 8002946:	e044      	b.n	80029d2 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002952:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002956:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d107      	bne.n	800296e <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002968:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800296c:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002972:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002976:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	3b01      	subs	r3, #1
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	429a      	cmp	r2, r3
 8002980:	d116      	bne.n	80029b0 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002990:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	4a25      	ldr	r2, [pc, #148]	; (8002a2c <HAL_ETH_TransmitFrame+0x1d0>)
 8002996:	fb02 f203 	mul.w	r2, r2, r3
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	4413      	add	r3, r2
 800299e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80029a2:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80029ae:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ba:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80029be:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	461a      	mov	r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	3301      	adds	r3, #1
 80029d0:	613b      	str	r3, [r7, #16]
 80029d2:	693a      	ldr	r2, [r7, #16]
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d3b6      	bcc.n	8002948 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029e2:	3314      	adds	r3, #20
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0304 	and.w	r3, r3, #4
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00d      	beq.n	8002a0a <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029f6:	3314      	adds	r3, #20
 80029f8:	2204      	movs	r2, #4
 80029fa:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a04:	3304      	adds	r3, #4
 8002a06:	2200      	movs	r2, #0
 8002a08:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	371c      	adds	r7, #28
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr
 8002a28:	ac02b00b 	.word	0xac02b00b
 8002a2c:	fffffa0c 	.word	0xfffffa0c

08002a30 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d101      	bne.n	8002a4a <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8002a46:	2302      	movs	r3, #2
 8002a48:	e074      	b.n	8002b34 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2202      	movs	r2, #2
 8002a56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8002a5a:	e05a      	b.n	8002b12 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	3301      	adds	r3, #1
 8002a60:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a70:	d10d      	bne.n	8002a8e <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	461a      	mov	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	629a      	str	r2, [r3, #40]	; 0x28
 8002a8c:	e041      	b.n	8002b12 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d10b      	bne.n	8002ab4 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa0:	1c5a      	adds	r2, r3, #1
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	461a      	mov	r2, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	629a      	str	r2, [r3, #40]	; 0x28
 8002ab2:	e02e      	b.n	8002b12 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac0:	1c5a      	adds	r2, r3, #1
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d103      	bne.n	8002ad6 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	0c1b      	lsrs	r3, r3, #16
 8002ade:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002ae2:	1f1a      	subs	r2, r3, #4
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aec:	689a      	ldr	r2, [r3, #8]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	461a      	mov	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	e010      	b.n	8002b34 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	db02      	blt.n	8002b22 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2b03      	cmp	r3, #3
 8002b20:	d99c      	bls.n	8002a5c <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2201      	movs	r2, #1
 8002b26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3714      	adds	r7, #20
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b50:	3314      	adds	r3, #20
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b58:	2b40      	cmp	r3, #64	; 0x40
 8002b5a:	d112      	bne.n	8002b82 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f005 fe01 	bl	8008764 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b6a:	3314      	adds	r3, #20
 8002b6c:	2240      	movs	r2, #64	; 0x40
 8002b6e:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b80:	e01b      	b.n	8002bba <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b8a:	3314      	adds	r3, #20
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d111      	bne.n	8002bba <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 f839 	bl	8002c0e <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ba4:	3314      	adds	r3, #20
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2201      	movs	r2, #1
 8002bae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bc2:	3314      	adds	r3, #20
 8002bc4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002bc8:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bd2:	3314      	adds	r3, #20
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bde:	d112      	bne.n	8002c06 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 f81e 	bl	8002c22 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bee:	3314      	adds	r3, #20
 8002bf0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002bf4:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8002c06:	bf00      	nop
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	b083      	sub	sp, #12
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8002c16:	bf00      	nop
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr

08002c22 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8002c22:	b480      	push	{r7}
 8002c24:	b083      	sub	sp, #12
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8002c2a:	bf00      	nop
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr

08002c36 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b086      	sub	sp, #24
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	60f8      	str	r0, [r7, #12]
 8002c3e:	460b      	mov	r3, r1
 8002c40:	607a      	str	r2, [r7, #4]
 8002c42:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8002c44:	2300      	movs	r3, #0
 8002c46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	2b82      	cmp	r3, #130	; 0x82
 8002c56:	d101      	bne.n	8002c5c <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8002c58:	2302      	movs	r3, #2
 8002c5a:	e050      	b.n	8002cfe <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2282      	movs	r2, #130	; 0x82
 8002c60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	f003 031c 	and.w	r3, r3, #28
 8002c72:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	8a1b      	ldrh	r3, [r3, #16]
 8002c78:	02db      	lsls	r3, r3, #11
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	697a      	ldr	r2, [r7, #20]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8002c82:	897b      	ldrh	r3, [r7, #10]
 8002c84:	019b      	lsls	r3, r3, #6
 8002c86:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002c8a:	697a      	ldr	r2, [r7, #20]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	f023 0302 	bic.w	r3, r3, #2
 8002c96:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	f043 0301 	orr.w	r3, r3, #1
 8002c9e:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	697a      	ldr	r2, [r7, #20]
 8002ca6:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002ca8:	f7ff fa54 	bl	8002154 <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002cae:	e015      	b.n	8002cdc <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8002cb0:	f7ff fa50 	bl	8002154 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cbe:	d309      	bcc.n	8002cd4 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e014      	b.n	8002cfe <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1e4      	bne.n	8002cb0 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	695b      	ldr	r3, [r3, #20]
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	461a      	mov	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3718      	adds	r7, #24
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b086      	sub	sp, #24
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	60f8      	str	r0, [r7, #12]
 8002d0e:	460b      	mov	r3, r1
 8002d10:	607a      	str	r2, [r7, #4]
 8002d12:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8002d14:	2300      	movs	r3, #0
 8002d16:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	2b42      	cmp	r3, #66	; 0x42
 8002d26:	d101      	bne.n	8002d2c <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8002d28:	2302      	movs	r3, #2
 8002d2a:	e04e      	b.n	8002dca <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2242      	movs	r2, #66	; 0x42
 8002d30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	f003 031c 	and.w	r3, r3, #28
 8002d42:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	8a1b      	ldrh	r3, [r3, #16]
 8002d48:	02db      	lsls	r3, r3, #11
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	697a      	ldr	r2, [r7, #20]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002d52:	897b      	ldrh	r3, [r7, #10]
 8002d54:	019b      	lsls	r3, r3, #6
 8002d56:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	f043 0302 	orr.w	r3, r3, #2
 8002d66:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	f043 0301 	orr.w	r3, r3, #1
 8002d6e:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	b29a      	uxth	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002d82:	f7ff f9e7 	bl	8002154 <HAL_GetTick>
 8002d86:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002d88:	e015      	b.n	8002db6 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8002d8a:	f7ff f9e3 	bl	8002154 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d98:	d309      	bcc.n	8002dae <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e00d      	b.n	8002dca <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	691b      	ldr	r3, [r3, #16]
 8002db4:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d1e4      	bne.n	8002d8a <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3718      	adds	r7, #24
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b082      	sub	sp, #8
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d101      	bne.n	8002de8 <HAL_ETH_Start+0x16>
 8002de4:	2302      	movs	r3, #2
 8002de6:	e01f      	b.n	8002e28 <HAL_ETH_Start+0x56>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2202      	movs	r2, #2
 8002df4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f000 fa1b 	bl	8003234 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 fa35 	bl	800326e <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f000 fa7f 	bl	8003308 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 fa4c 	bl	80032a8 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f000 fa61 	bl	80032d8 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3708      	adds	r7, #8
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b0b0      	sub	sp, #192	; 0xc0
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d007      	beq.n	8002e56 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e4c:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e54:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002e56:	2300      	movs	r3, #0
 8002e58:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002e62:	2300      	movs	r3, #0
 8002e64:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002e66:	2300      	movs	r3, #0
 8002e68:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	69db      	ldr	r3, [r3, #28]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d103      	bne.n	8002e7e <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002e76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e7a:	663b      	str	r3, [r7, #96]	; 0x60
 8002e7c:	e001      	b.n	8002e82 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002e82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e86:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002e90:	2300      	movs	r3, #0
 8002e92:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002e94:	2300      	movs	r3, #0
 8002e96:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002e9c:	2340      	movs	r3, #64	; 0x40
 8002e9e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002eac:	2300      	movs	r3, #0
 8002eae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002ed0:	2380      	movs	r3, #128	; 0x80
 8002ed2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002edc:	2300      	movs	r3, #0
 8002ede:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002f04:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002f08:	4bac      	ldr	r3, [pc, #688]	; (80031bc <ETH_MACDMAConfig+0x38c>)
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002f10:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8002f12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002f14:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002f16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002f18:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002f1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002f1c:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002f22:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002f24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8002f26:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002f28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002f2a:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002f30:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002f32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002f34:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002f36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002f38:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002f3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002f3c:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002f3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002f40:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8002f42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002f44:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002f46:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002f58:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f64:	2001      	movs	r0, #1
 8002f66:	f7ff f901 	bl	800216c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002f72:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002f74:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002f76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002f78:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002f7a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002f7c:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002f7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002f82:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002f84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002f88:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002f8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002f8e:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002f90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002f94:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002f98:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002fa0:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002fa2:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002fae:	2001      	movs	r0, #1
 8002fb0:	f7ff f8dc 	bl	800216c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002fbc:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002fc6:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002fd0:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002fdc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002fe0:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002fea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002fee:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002ff0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002ff4:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002ff6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002ffa:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002ffc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8003000:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8003002:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8003006:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8003008:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 800300c:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800300e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003012:	4313      	orrs	r3, r2
 8003014:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003020:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800302c:	2001      	movs	r0, #1
 800302e:	f7ff f89d 	bl	800216c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800303a:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800303c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8003040:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	430a      	orrs	r2, r1
 800304a:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003056:	2001      	movs	r0, #1
 8003058:	f7ff f888 	bl	800216c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003064:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8003066:	2300      	movs	r3, #0
 8003068:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800306a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800306e:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8003070:	2300      	movs	r3, #0
 8003072:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8003074:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003078:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800307a:	2300      	movs	r3, #0
 800307c:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800307e:	2300      	movs	r3, #0
 8003080:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8003082:	2300      	movs	r3, #0
 8003084:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003086:	2300      	movs	r3, #0
 8003088:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800308a:	2304      	movs	r3, #4
 800308c:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800308e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003092:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8003094:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003098:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800309a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800309e:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80030a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030a4:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80030a6:	2380      	movs	r3, #128	; 0x80
 80030a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 80030aa:	2300      	movs	r3, #0
 80030ac:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80030ae:	2300      	movs	r3, #0
 80030b0:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030ba:	3318      	adds	r3, #24
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80030c2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80030c6:	4b3e      	ldr	r3, [pc, #248]	; (80031c0 <ETH_MACDMAConfig+0x390>)
 80030c8:	4013      	ands	r3, r2
 80030ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80030ce:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80030d0:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80030d2:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80030d4:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80030d6:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80030d8:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80030da:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80030dc:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80030de:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80030e0:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80030e2:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80030e4:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80030e6:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80030e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80030ea:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80030ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80030ee:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80030f0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80030f4:	4313      	orrs	r3, r2
 80030f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003102:	3318      	adds	r3, #24
 8003104:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003108:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003112:	3318      	adds	r3, #24
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800311a:	2001      	movs	r0, #1
 800311c:	f7ff f826 	bl	800216c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003128:	3318      	adds	r3, #24
 800312a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800312e:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003130:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8003132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003134:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8003138:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800313a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800313c:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800313e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8003140:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8003142:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003144:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8003146:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8003148:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 800314a:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003154:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003158:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003168:	2001      	movs	r0, #1
 800316a:	f7fe ffff 	bl	800216c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003176:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800317a:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	2b01      	cmp	r3, #1
 8003182:	d10f      	bne.n	80031a4 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800318c:	331c      	adds	r3, #28
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003198:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800319c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031a0:	331c      	adds	r3, #28
 80031a2:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	461a      	mov	r2, r3
 80031aa:	2100      	movs	r1, #0
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 f809 	bl	80031c4 <ETH_MACAddressConfig>
}
 80031b2:	bf00      	nop
 80031b4:	37c0      	adds	r7, #192	; 0xc0
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	ff20810f 	.word	0xff20810f
 80031c0:	f8de3f23 	.word	0xf8de3f23

080031c4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b087      	sub	sp, #28
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	3305      	adds	r3, #5
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	021b      	lsls	r3, r3, #8
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	3204      	adds	r2, #4
 80031dc:	7812      	ldrb	r2, [r2, #0]
 80031de:	4313      	orrs	r3, r2
 80031e0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80031e2:	68ba      	ldr	r2, [r7, #8]
 80031e4:	4b11      	ldr	r3, [pc, #68]	; (800322c <ETH_MACAddressConfig+0x68>)
 80031e6:	4413      	add	r3, r2
 80031e8:	461a      	mov	r2, r3
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	3303      	adds	r3, #3
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	061a      	lsls	r2, r3, #24
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	3302      	adds	r3, #2
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	041b      	lsls	r3, r3, #16
 80031fe:	431a      	orrs	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	3301      	adds	r3, #1
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	021b      	lsls	r3, r3, #8
 8003208:	4313      	orrs	r3, r2
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	7812      	ldrb	r2, [r2, #0]
 800320e:	4313      	orrs	r3, r2
 8003210:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003212:	68ba      	ldr	r2, [r7, #8]
 8003214:	4b06      	ldr	r3, [pc, #24]	; (8003230 <ETH_MACAddressConfig+0x6c>)
 8003216:	4413      	add	r3, r2
 8003218:	461a      	mov	r2, r3
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	6013      	str	r3, [r2, #0]
}
 800321e:	bf00      	nop
 8003220:	371c      	adds	r7, #28
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	40028040 	.word	0x40028040
 8003230:	40028044 	.word	0x40028044

08003234 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800323c:	2300      	movs	r3, #0
 800323e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f042 0208 	orr.w	r2, r2, #8
 800324e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003258:	2001      	movs	r0, #1
 800325a:	f000 f87f 	bl	800335c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68fa      	ldr	r2, [r7, #12]
 8003264:	601a      	str	r2, [r3, #0]
}
 8003266:	bf00      	nop
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}

0800326e <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 800326e:	b580      	push	{r7, lr}
 8003270:	b084      	sub	sp, #16
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003276:	2300      	movs	r3, #0
 8003278:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f042 0204 	orr.w	r2, r2, #4
 8003288:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003292:	2001      	movs	r0, #1
 8003294:	f000 f862 	bl	800335c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	601a      	str	r2, [r3, #0]
}
 80032a0:	bf00      	nop
 80032a2:	3710      	adds	r7, #16
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032b8:	3318      	adds	r3, #24
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032c8:	3318      	adds	r3, #24
 80032ca:	601a      	str	r2, [r3, #0]
}
 80032cc:	bf00      	nop
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032e8:	3318      	adds	r3, #24
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f042 0202 	orr.w	r2, r2, #2
 80032f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032f8:	3318      	adds	r3, #24
 80032fa:	601a      	str	r2, [r3, #0]
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003310:	2300      	movs	r3, #0
 8003312:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800331c:	3318      	adds	r3, #24
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003328:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800332c:	3318      	adds	r3, #24
 800332e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003338:	3318      	adds	r3, #24
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800333e:	2001      	movs	r0, #1
 8003340:	f000 f80c 	bl	800335c <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68fa      	ldr	r2, [r7, #12]
 800334a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800334e:	3318      	adds	r3, #24
 8003350:	601a      	str	r2, [r3, #0]
}
 8003352:	bf00      	nop
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
	...

0800335c <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 800335c:	b480      	push	{r7}
 800335e:	b085      	sub	sp, #20
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003364:	4b0b      	ldr	r3, [pc, #44]	; (8003394 <ETH_Delay+0x38>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a0b      	ldr	r2, [pc, #44]	; (8003398 <ETH_Delay+0x3c>)
 800336a:	fba2 2303 	umull	r2, r3, r2, r3
 800336e:	0a5b      	lsrs	r3, r3, #9
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	fb02 f303 	mul.w	r3, r2, r3
 8003376:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8003378:	bf00      	nop
  } 
  while (Delay --);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	1e5a      	subs	r2, r3, #1
 800337e:	60fa      	str	r2, [r7, #12]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d1f9      	bne.n	8003378 <ETH_Delay+0x1c>
}
 8003384:	bf00      	nop
 8003386:	bf00      	nop
 8003388:	3714      	adds	r7, #20
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	20000010 	.word	0x20000010
 8003398:	10624dd3 	.word	0x10624dd3

0800339c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800339c:	b480      	push	{r7}
 800339e:	b089      	sub	sp, #36	; 0x24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033a6:	2300      	movs	r3, #0
 80033a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033aa:	2300      	movs	r3, #0
 80033ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033ae:	2300      	movs	r3, #0
 80033b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033b2:	2300      	movs	r3, #0
 80033b4:	61fb      	str	r3, [r7, #28]
 80033b6:	e16b      	b.n	8003690 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033b8:	2201      	movs	r2, #1
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	fa02 f303 	lsl.w	r3, r2, r3
 80033c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	697a      	ldr	r2, [r7, #20]
 80033c8:	4013      	ands	r3, r2
 80033ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033cc:	693a      	ldr	r2, [r7, #16]
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	f040 815a 	bne.w	800368a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f003 0303 	and.w	r3, r3, #3
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d005      	beq.n	80033ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d130      	bne.n	8003450 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	2203      	movs	r2, #3
 80033fa:	fa02 f303 	lsl.w	r3, r2, r3
 80033fe:	43db      	mvns	r3, r3
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	4013      	ands	r3, r2
 8003404:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	68da      	ldr	r2, [r3, #12]
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	fa02 f303 	lsl.w	r3, r2, r3
 8003412:	69ba      	ldr	r2, [r7, #24]
 8003414:	4313      	orrs	r3, r2
 8003416:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	69ba      	ldr	r2, [r7, #24]
 800341c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003424:	2201      	movs	r2, #1
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	43db      	mvns	r3, r3
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	4013      	ands	r3, r2
 8003432:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	091b      	lsrs	r3, r3, #4
 800343a:	f003 0201 	and.w	r2, r3, #1
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	4313      	orrs	r3, r2
 8003448:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f003 0303 	and.w	r3, r3, #3
 8003458:	2b03      	cmp	r3, #3
 800345a:	d017      	beq.n	800348c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	2203      	movs	r2, #3
 8003468:	fa02 f303 	lsl.w	r3, r2, r3
 800346c:	43db      	mvns	r3, r3
 800346e:	69ba      	ldr	r2, [r7, #24]
 8003470:	4013      	ands	r3, r2
 8003472:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	689a      	ldr	r2, [r3, #8]
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	005b      	lsls	r3, r3, #1
 800347c:	fa02 f303 	lsl.w	r3, r2, r3
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	4313      	orrs	r3, r2
 8003484:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f003 0303 	and.w	r3, r3, #3
 8003494:	2b02      	cmp	r3, #2
 8003496:	d123      	bne.n	80034e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	08da      	lsrs	r2, r3, #3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	3208      	adds	r2, #8
 80034a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	f003 0307 	and.w	r3, r3, #7
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	220f      	movs	r2, #15
 80034b0:	fa02 f303 	lsl.w	r3, r2, r3
 80034b4:	43db      	mvns	r3, r3
 80034b6:	69ba      	ldr	r2, [r7, #24]
 80034b8:	4013      	ands	r3, r2
 80034ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	691a      	ldr	r2, [r3, #16]
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	f003 0307 	and.w	r3, r3, #7
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	fa02 f303 	lsl.w	r3, r2, r3
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	08da      	lsrs	r2, r3, #3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	3208      	adds	r2, #8
 80034da:	69b9      	ldr	r1, [r7, #24]
 80034dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	005b      	lsls	r3, r3, #1
 80034ea:	2203      	movs	r2, #3
 80034ec:	fa02 f303 	lsl.w	r3, r2, r3
 80034f0:	43db      	mvns	r3, r3
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	4013      	ands	r3, r2
 80034f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f003 0203 	and.w	r2, r3, #3
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	005b      	lsls	r3, r3, #1
 8003504:	fa02 f303 	lsl.w	r3, r2, r3
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	4313      	orrs	r3, r2
 800350c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800351c:	2b00      	cmp	r3, #0
 800351e:	f000 80b4 	beq.w	800368a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003522:	2300      	movs	r3, #0
 8003524:	60fb      	str	r3, [r7, #12]
 8003526:	4b60      	ldr	r3, [pc, #384]	; (80036a8 <HAL_GPIO_Init+0x30c>)
 8003528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352a:	4a5f      	ldr	r2, [pc, #380]	; (80036a8 <HAL_GPIO_Init+0x30c>)
 800352c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003530:	6453      	str	r3, [r2, #68]	; 0x44
 8003532:	4b5d      	ldr	r3, [pc, #372]	; (80036a8 <HAL_GPIO_Init+0x30c>)
 8003534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003536:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800353a:	60fb      	str	r3, [r7, #12]
 800353c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800353e:	4a5b      	ldr	r2, [pc, #364]	; (80036ac <HAL_GPIO_Init+0x310>)
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	089b      	lsrs	r3, r3, #2
 8003544:	3302      	adds	r3, #2
 8003546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800354a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	f003 0303 	and.w	r3, r3, #3
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	220f      	movs	r2, #15
 8003556:	fa02 f303 	lsl.w	r3, r2, r3
 800355a:	43db      	mvns	r3, r3
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	4013      	ands	r3, r2
 8003560:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a52      	ldr	r2, [pc, #328]	; (80036b0 <HAL_GPIO_Init+0x314>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d02b      	beq.n	80035c2 <HAL_GPIO_Init+0x226>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a51      	ldr	r2, [pc, #324]	; (80036b4 <HAL_GPIO_Init+0x318>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d025      	beq.n	80035be <HAL_GPIO_Init+0x222>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a50      	ldr	r2, [pc, #320]	; (80036b8 <HAL_GPIO_Init+0x31c>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d01f      	beq.n	80035ba <HAL_GPIO_Init+0x21e>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a4f      	ldr	r2, [pc, #316]	; (80036bc <HAL_GPIO_Init+0x320>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d019      	beq.n	80035b6 <HAL_GPIO_Init+0x21a>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a4e      	ldr	r2, [pc, #312]	; (80036c0 <HAL_GPIO_Init+0x324>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d013      	beq.n	80035b2 <HAL_GPIO_Init+0x216>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a4d      	ldr	r2, [pc, #308]	; (80036c4 <HAL_GPIO_Init+0x328>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d00d      	beq.n	80035ae <HAL_GPIO_Init+0x212>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a4c      	ldr	r2, [pc, #304]	; (80036c8 <HAL_GPIO_Init+0x32c>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d007      	beq.n	80035aa <HAL_GPIO_Init+0x20e>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a4b      	ldr	r2, [pc, #300]	; (80036cc <HAL_GPIO_Init+0x330>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d101      	bne.n	80035a6 <HAL_GPIO_Init+0x20a>
 80035a2:	2307      	movs	r3, #7
 80035a4:	e00e      	b.n	80035c4 <HAL_GPIO_Init+0x228>
 80035a6:	2308      	movs	r3, #8
 80035a8:	e00c      	b.n	80035c4 <HAL_GPIO_Init+0x228>
 80035aa:	2306      	movs	r3, #6
 80035ac:	e00a      	b.n	80035c4 <HAL_GPIO_Init+0x228>
 80035ae:	2305      	movs	r3, #5
 80035b0:	e008      	b.n	80035c4 <HAL_GPIO_Init+0x228>
 80035b2:	2304      	movs	r3, #4
 80035b4:	e006      	b.n	80035c4 <HAL_GPIO_Init+0x228>
 80035b6:	2303      	movs	r3, #3
 80035b8:	e004      	b.n	80035c4 <HAL_GPIO_Init+0x228>
 80035ba:	2302      	movs	r3, #2
 80035bc:	e002      	b.n	80035c4 <HAL_GPIO_Init+0x228>
 80035be:	2301      	movs	r3, #1
 80035c0:	e000      	b.n	80035c4 <HAL_GPIO_Init+0x228>
 80035c2:	2300      	movs	r3, #0
 80035c4:	69fa      	ldr	r2, [r7, #28]
 80035c6:	f002 0203 	and.w	r2, r2, #3
 80035ca:	0092      	lsls	r2, r2, #2
 80035cc:	4093      	lsls	r3, r2
 80035ce:	69ba      	ldr	r2, [r7, #24]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035d4:	4935      	ldr	r1, [pc, #212]	; (80036ac <HAL_GPIO_Init+0x310>)
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	089b      	lsrs	r3, r3, #2
 80035da:	3302      	adds	r3, #2
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035e2:	4b3b      	ldr	r3, [pc, #236]	; (80036d0 <HAL_GPIO_Init+0x334>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	43db      	mvns	r3, r3
 80035ec:	69ba      	ldr	r2, [r7, #24]
 80035ee:	4013      	ands	r3, r2
 80035f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d003      	beq.n	8003606 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80035fe:	69ba      	ldr	r2, [r7, #24]
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	4313      	orrs	r3, r2
 8003604:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003606:	4a32      	ldr	r2, [pc, #200]	; (80036d0 <HAL_GPIO_Init+0x334>)
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800360c:	4b30      	ldr	r3, [pc, #192]	; (80036d0 <HAL_GPIO_Init+0x334>)
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	43db      	mvns	r3, r3
 8003616:	69ba      	ldr	r2, [r7, #24]
 8003618:	4013      	ands	r3, r2
 800361a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d003      	beq.n	8003630 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	4313      	orrs	r3, r2
 800362e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003630:	4a27      	ldr	r2, [pc, #156]	; (80036d0 <HAL_GPIO_Init+0x334>)
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003636:	4b26      	ldr	r3, [pc, #152]	; (80036d0 <HAL_GPIO_Init+0x334>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	43db      	mvns	r3, r3
 8003640:	69ba      	ldr	r2, [r7, #24]
 8003642:	4013      	ands	r3, r2
 8003644:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d003      	beq.n	800365a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003652:	69ba      	ldr	r2, [r7, #24]
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	4313      	orrs	r3, r2
 8003658:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800365a:	4a1d      	ldr	r2, [pc, #116]	; (80036d0 <HAL_GPIO_Init+0x334>)
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003660:	4b1b      	ldr	r3, [pc, #108]	; (80036d0 <HAL_GPIO_Init+0x334>)
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	43db      	mvns	r3, r3
 800366a:	69ba      	ldr	r2, [r7, #24]
 800366c:	4013      	ands	r3, r2
 800366e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d003      	beq.n	8003684 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800367c:	69ba      	ldr	r2, [r7, #24]
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	4313      	orrs	r3, r2
 8003682:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003684:	4a12      	ldr	r2, [pc, #72]	; (80036d0 <HAL_GPIO_Init+0x334>)
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	3301      	adds	r3, #1
 800368e:	61fb      	str	r3, [r7, #28]
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	2b0f      	cmp	r3, #15
 8003694:	f67f ae90 	bls.w	80033b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003698:	bf00      	nop
 800369a:	bf00      	nop
 800369c:	3724      	adds	r7, #36	; 0x24
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	40023800 	.word	0x40023800
 80036ac:	40013800 	.word	0x40013800
 80036b0:	40020000 	.word	0x40020000
 80036b4:	40020400 	.word	0x40020400
 80036b8:	40020800 	.word	0x40020800
 80036bc:	40020c00 	.word	0x40020c00
 80036c0:	40021000 	.word	0x40021000
 80036c4:	40021400 	.word	0x40021400
 80036c8:	40021800 	.word	0x40021800
 80036cc:	40021c00 	.word	0x40021c00
 80036d0:	40013c00 	.word	0x40013c00

080036d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	460b      	mov	r3, r1
 80036de:	807b      	strh	r3, [r7, #2]
 80036e0:	4613      	mov	r3, r2
 80036e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036e4:	787b      	ldrb	r3, [r7, #1]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d003      	beq.n	80036f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036ea:	887a      	ldrh	r2, [r7, #2]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80036f0:	e003      	b.n	80036fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80036f2:	887b      	ldrh	r3, [r7, #2]
 80036f4:	041a      	lsls	r2, r3, #16
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	619a      	str	r2, [r3, #24]
}
 80036fa:	bf00      	nop
 80036fc:	370c      	adds	r7, #12
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
	...

08003708 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	4603      	mov	r3, r0
 8003710:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003712:	4b08      	ldr	r3, [pc, #32]	; (8003734 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003714:	695a      	ldr	r2, [r3, #20]
 8003716:	88fb      	ldrh	r3, [r7, #6]
 8003718:	4013      	ands	r3, r2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d006      	beq.n	800372c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800371e:	4a05      	ldr	r2, [pc, #20]	; (8003734 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003720:	88fb      	ldrh	r3, [r7, #6]
 8003722:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003724:	88fb      	ldrh	r3, [r7, #6]
 8003726:	4618      	mov	r0, r3
 8003728:	f7fe f81a 	bl	8001760 <HAL_GPIO_EXTI_Callback>
  }
}
 800372c:	bf00      	nop
 800372e:	3708      	adds	r7, #8
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	40013c00 	.word	0x40013c00

08003738 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003738:	b5f0      	push	{r4, r5, r6, r7, lr}
 800373a:	b08f      	sub	sp, #60	; 0x3c
 800373c:	af0a      	add	r7, sp, #40	; 0x28
 800373e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d101      	bne.n	800374a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e10f      	b.n	800396a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003756:	b2db      	uxtb	r3, r3
 8003758:	2b00      	cmp	r3, #0
 800375a:	d106      	bne.n	800376a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f018 f9d3 	bl	801bb10 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2203      	movs	r2, #3
 800376e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800377a:	2b00      	cmp	r3, #0
 800377c:	d102      	bne.n	8003784 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4618      	mov	r0, r3
 800378a:	f003 fb86 	bl	8006e9a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	603b      	str	r3, [r7, #0]
 8003794:	687e      	ldr	r6, [r7, #4]
 8003796:	466d      	mov	r5, sp
 8003798:	f106 0410 	add.w	r4, r6, #16
 800379c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800379e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037a4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80037a8:	e885 0003 	stmia.w	r5, {r0, r1}
 80037ac:	1d33      	adds	r3, r6, #4
 80037ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037b0:	6838      	ldr	r0, [r7, #0]
 80037b2:	f003 fa5d 	bl	8006c70 <USB_CoreInit>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d005      	beq.n	80037c8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2202      	movs	r2, #2
 80037c0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e0d0      	b.n	800396a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2100      	movs	r1, #0
 80037ce:	4618      	mov	r0, r3
 80037d0:	f003 fb74 	bl	8006ebc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037d4:	2300      	movs	r3, #0
 80037d6:	73fb      	strb	r3, [r7, #15]
 80037d8:	e04a      	b.n	8003870 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80037da:	7bfa      	ldrb	r2, [r7, #15]
 80037dc:	6879      	ldr	r1, [r7, #4]
 80037de:	4613      	mov	r3, r2
 80037e0:	00db      	lsls	r3, r3, #3
 80037e2:	1a9b      	subs	r3, r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	440b      	add	r3, r1
 80037e8:	333d      	adds	r3, #61	; 0x3d
 80037ea:	2201      	movs	r2, #1
 80037ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80037ee:	7bfa      	ldrb	r2, [r7, #15]
 80037f0:	6879      	ldr	r1, [r7, #4]
 80037f2:	4613      	mov	r3, r2
 80037f4:	00db      	lsls	r3, r3, #3
 80037f6:	1a9b      	subs	r3, r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	440b      	add	r3, r1
 80037fc:	333c      	adds	r3, #60	; 0x3c
 80037fe:	7bfa      	ldrb	r2, [r7, #15]
 8003800:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003802:	7bfa      	ldrb	r2, [r7, #15]
 8003804:	7bfb      	ldrb	r3, [r7, #15]
 8003806:	b298      	uxth	r0, r3
 8003808:	6879      	ldr	r1, [r7, #4]
 800380a:	4613      	mov	r3, r2
 800380c:	00db      	lsls	r3, r3, #3
 800380e:	1a9b      	subs	r3, r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	440b      	add	r3, r1
 8003814:	3342      	adds	r3, #66	; 0x42
 8003816:	4602      	mov	r2, r0
 8003818:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800381a:	7bfa      	ldrb	r2, [r7, #15]
 800381c:	6879      	ldr	r1, [r7, #4]
 800381e:	4613      	mov	r3, r2
 8003820:	00db      	lsls	r3, r3, #3
 8003822:	1a9b      	subs	r3, r3, r2
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	440b      	add	r3, r1
 8003828:	333f      	adds	r3, #63	; 0x3f
 800382a:	2200      	movs	r2, #0
 800382c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800382e:	7bfa      	ldrb	r2, [r7, #15]
 8003830:	6879      	ldr	r1, [r7, #4]
 8003832:	4613      	mov	r3, r2
 8003834:	00db      	lsls	r3, r3, #3
 8003836:	1a9b      	subs	r3, r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	440b      	add	r3, r1
 800383c:	3344      	adds	r3, #68	; 0x44
 800383e:	2200      	movs	r2, #0
 8003840:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003842:	7bfa      	ldrb	r2, [r7, #15]
 8003844:	6879      	ldr	r1, [r7, #4]
 8003846:	4613      	mov	r3, r2
 8003848:	00db      	lsls	r3, r3, #3
 800384a:	1a9b      	subs	r3, r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	440b      	add	r3, r1
 8003850:	3348      	adds	r3, #72	; 0x48
 8003852:	2200      	movs	r2, #0
 8003854:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003856:	7bfa      	ldrb	r2, [r7, #15]
 8003858:	6879      	ldr	r1, [r7, #4]
 800385a:	4613      	mov	r3, r2
 800385c:	00db      	lsls	r3, r3, #3
 800385e:	1a9b      	subs	r3, r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	440b      	add	r3, r1
 8003864:	3350      	adds	r3, #80	; 0x50
 8003866:	2200      	movs	r2, #0
 8003868:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800386a:	7bfb      	ldrb	r3, [r7, #15]
 800386c:	3301      	adds	r3, #1
 800386e:	73fb      	strb	r3, [r7, #15]
 8003870:	7bfa      	ldrb	r2, [r7, #15]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	429a      	cmp	r2, r3
 8003878:	d3af      	bcc.n	80037da <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800387a:	2300      	movs	r3, #0
 800387c:	73fb      	strb	r3, [r7, #15]
 800387e:	e044      	b.n	800390a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003880:	7bfa      	ldrb	r2, [r7, #15]
 8003882:	6879      	ldr	r1, [r7, #4]
 8003884:	4613      	mov	r3, r2
 8003886:	00db      	lsls	r3, r3, #3
 8003888:	1a9b      	subs	r3, r3, r2
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	440b      	add	r3, r1
 800388e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003892:	2200      	movs	r2, #0
 8003894:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003896:	7bfa      	ldrb	r2, [r7, #15]
 8003898:	6879      	ldr	r1, [r7, #4]
 800389a:	4613      	mov	r3, r2
 800389c:	00db      	lsls	r3, r3, #3
 800389e:	1a9b      	subs	r3, r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	440b      	add	r3, r1
 80038a4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80038a8:	7bfa      	ldrb	r2, [r7, #15]
 80038aa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80038ac:	7bfa      	ldrb	r2, [r7, #15]
 80038ae:	6879      	ldr	r1, [r7, #4]
 80038b0:	4613      	mov	r3, r2
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	1a9b      	subs	r3, r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	440b      	add	r3, r1
 80038ba:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80038be:	2200      	movs	r2, #0
 80038c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80038c2:	7bfa      	ldrb	r2, [r7, #15]
 80038c4:	6879      	ldr	r1, [r7, #4]
 80038c6:	4613      	mov	r3, r2
 80038c8:	00db      	lsls	r3, r3, #3
 80038ca:	1a9b      	subs	r3, r3, r2
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	440b      	add	r3, r1
 80038d0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80038d4:	2200      	movs	r2, #0
 80038d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80038d8:	7bfa      	ldrb	r2, [r7, #15]
 80038da:	6879      	ldr	r1, [r7, #4]
 80038dc:	4613      	mov	r3, r2
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	1a9b      	subs	r3, r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	440b      	add	r3, r1
 80038e6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80038ea:	2200      	movs	r2, #0
 80038ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80038ee:	7bfa      	ldrb	r2, [r7, #15]
 80038f0:	6879      	ldr	r1, [r7, #4]
 80038f2:	4613      	mov	r3, r2
 80038f4:	00db      	lsls	r3, r3, #3
 80038f6:	1a9b      	subs	r3, r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	440b      	add	r3, r1
 80038fc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003900:	2200      	movs	r2, #0
 8003902:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003904:	7bfb      	ldrb	r3, [r7, #15]
 8003906:	3301      	adds	r3, #1
 8003908:	73fb      	strb	r3, [r7, #15]
 800390a:	7bfa      	ldrb	r2, [r7, #15]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	429a      	cmp	r2, r3
 8003912:	d3b5      	bcc.n	8003880 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	603b      	str	r3, [r7, #0]
 800391a:	687e      	ldr	r6, [r7, #4]
 800391c:	466d      	mov	r5, sp
 800391e:	f106 0410 	add.w	r4, r6, #16
 8003922:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003924:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003926:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003928:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800392a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800392e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003932:	1d33      	adds	r3, r6, #4
 8003934:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003936:	6838      	ldr	r0, [r7, #0]
 8003938:	f003 fb0c 	bl	8006f54 <USB_DevInit>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d005      	beq.n	800394e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2202      	movs	r2, #2
 8003946:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e00d      	b.n	800396a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2201      	movs	r2, #1
 800395a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4618      	mov	r0, r3
 8003964:	f004 fb88 	bl	8008078 <USB_DevDisconnect>

  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3714      	adds	r7, #20
 800396e:	46bd      	mov	sp, r7
 8003970:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003972 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003972:	b580      	push	{r7, lr}
 8003974:	b084      	sub	sp, #16
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003986:	2b01      	cmp	r3, #1
 8003988:	d101      	bne.n	800398e <HAL_PCD_Start+0x1c>
 800398a:	2302      	movs	r3, #2
 800398c:	e020      	b.n	80039d0 <HAL_PCD_Start+0x5e>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2201      	movs	r2, #1
 8003992:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399a:	2b01      	cmp	r3, #1
 800399c:	d109      	bne.n	80039b2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d005      	beq.n	80039b2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f003 fa5e 	bl	8006e78 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4618      	mov	r0, r3
 80039c2:	f004 fb38 	bl	8008036 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3710      	adds	r7, #16
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80039d8:	b590      	push	{r4, r7, lr}
 80039da:	b08d      	sub	sp, #52	; 0x34
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039e6:	6a3b      	ldr	r3, [r7, #32]
 80039e8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f004 fbf6 	bl	80081e0 <USB_GetMode>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f040 839d 	bne.w	8004136 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4618      	mov	r0, r3
 8003a02:	f004 fb5a 	bl	80080ba <USB_ReadInterrupts>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f000 8393 	beq.w	8004134 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f004 fb51 	bl	80080ba <USB_ReadInterrupts>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d107      	bne.n	8003a32 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	695a      	ldr	r2, [r3, #20]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f002 0202 	and.w	r2, r2, #2
 8003a30:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f004 fb3f 	bl	80080ba <USB_ReadInterrupts>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	f003 0310 	and.w	r3, r3, #16
 8003a42:	2b10      	cmp	r3, #16
 8003a44:	d161      	bne.n	8003b0a <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	699a      	ldr	r2, [r3, #24]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f022 0210 	bic.w	r2, r2, #16
 8003a54:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003a56:	6a3b      	ldr	r3, [r7, #32]
 8003a58:	6a1b      	ldr	r3, [r3, #32]
 8003a5a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	f003 020f 	and.w	r2, r3, #15
 8003a62:	4613      	mov	r3, r2
 8003a64:	00db      	lsls	r3, r3, #3
 8003a66:	1a9b      	subs	r3, r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	4413      	add	r3, r2
 8003a72:	3304      	adds	r3, #4
 8003a74:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	0c5b      	lsrs	r3, r3, #17
 8003a7a:	f003 030f 	and.w	r3, r3, #15
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d124      	bne.n	8003acc <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003a88:	4013      	ands	r3, r2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d035      	beq.n	8003afa <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	091b      	lsrs	r3, r3, #4
 8003a96:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003a98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	6a38      	ldr	r0, [r7, #32]
 8003aa2:	f004 f976 	bl	8007d92 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	68da      	ldr	r2, [r3, #12]
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	091b      	lsrs	r3, r3, #4
 8003aae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ab2:	441a      	add	r2, r3
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	699a      	ldr	r2, [r3, #24]
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	091b      	lsrs	r3, r3, #4
 8003ac0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ac4:	441a      	add	r2, r3
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	619a      	str	r2, [r3, #24]
 8003aca:	e016      	b.n	8003afa <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	0c5b      	lsrs	r3, r3, #17
 8003ad0:	f003 030f 	and.w	r3, r3, #15
 8003ad4:	2b06      	cmp	r3, #6
 8003ad6:	d110      	bne.n	8003afa <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003ade:	2208      	movs	r2, #8
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	6a38      	ldr	r0, [r7, #32]
 8003ae4:	f004 f955 	bl	8007d92 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	699a      	ldr	r2, [r3, #24]
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	091b      	lsrs	r3, r3, #4
 8003af0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003af4:	441a      	add	r2, r3
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	699a      	ldr	r2, [r3, #24]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f042 0210 	orr.w	r2, r2, #16
 8003b08:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f004 fad3 	bl	80080ba <USB_ReadInterrupts>
 8003b14:	4603      	mov	r3, r0
 8003b16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b1a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003b1e:	d16e      	bne.n	8003bfe <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003b20:	2300      	movs	r3, #0
 8003b22:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f004 fad9 	bl	80080e0 <USB_ReadDevAllOutEpInterrupt>
 8003b2e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003b30:	e062      	b.n	8003bf8 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b34:	f003 0301 	and.w	r3, r3, #1
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d057      	beq.n	8003bec <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b42:	b2d2      	uxtb	r2, r2
 8003b44:	4611      	mov	r1, r2
 8003b46:	4618      	mov	r0, r3
 8003b48:	f004 fafe 	bl	8008148 <USB_ReadDevOutEPInterrupt>
 8003b4c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	f003 0301 	and.w	r3, r3, #1
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00c      	beq.n	8003b72 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5a:	015a      	lsls	r2, r3, #5
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	4413      	add	r3, r2
 8003b60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b64:	461a      	mov	r2, r3
 8003b66:	2301      	movs	r3, #1
 8003b68:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003b6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 fdb1 	bl	80046d4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	f003 0308 	and.w	r3, r3, #8
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00c      	beq.n	8003b96 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7e:	015a      	lsls	r2, r3, #5
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	4413      	add	r3, r2
 8003b84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b88:	461a      	mov	r2, r3
 8003b8a:	2308      	movs	r3, #8
 8003b8c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003b8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 feab 	bl	80048ec <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	f003 0310 	and.w	r3, r3, #16
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d008      	beq.n	8003bb2 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba2:	015a      	lsls	r2, r3, #5
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bac:	461a      	mov	r2, r3
 8003bae:	2310      	movs	r3, #16
 8003bb0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	f003 0320 	and.w	r3, r3, #32
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d008      	beq.n	8003bce <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbe:	015a      	lsls	r2, r3, #5
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	4413      	add	r3, r2
 8003bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bc8:	461a      	mov	r2, r3
 8003bca:	2320      	movs	r3, #32
 8003bcc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d009      	beq.n	8003bec <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bda:	015a      	lsls	r2, r3, #5
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	4413      	add	r3, r2
 8003be0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003be4:	461a      	mov	r2, r3
 8003be6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003bea:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bee:	3301      	adds	r3, #1
 8003bf0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf4:	085b      	lsrs	r3, r3, #1
 8003bf6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d199      	bne.n	8003b32 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4618      	mov	r0, r3
 8003c04:	f004 fa59 	bl	80080ba <USB_ReadInterrupts>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c0e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c12:	f040 80c0 	bne.w	8003d96 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f004 fa7a 	bl	8008114 <USB_ReadDevAllInEpInterrupt>
 8003c20:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003c22:	2300      	movs	r3, #0
 8003c24:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003c26:	e0b2      	b.n	8003d8e <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c2a:	f003 0301 	and.w	r3, r3, #1
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f000 80a7 	beq.w	8003d82 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c3a:	b2d2      	uxtb	r2, r2
 8003c3c:	4611      	mov	r1, r2
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f004 faa0 	bl	8008184 <USB_ReadDevInEPInterrupt>
 8003c44:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	f003 0301 	and.w	r3, r3, #1
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d057      	beq.n	8003d00 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c52:	f003 030f 	and.w	r3, r3, #15
 8003c56:	2201      	movs	r2, #1
 8003c58:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	43db      	mvns	r3, r3
 8003c6a:	69f9      	ldr	r1, [r7, #28]
 8003c6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c70:	4013      	ands	r3, r2
 8003c72:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c76:	015a      	lsls	r2, r3, #5
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c80:	461a      	mov	r2, r3
 8003c82:	2301      	movs	r3, #1
 8003c84:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d132      	bne.n	8003cf4 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003c8e:	6879      	ldr	r1, [r7, #4]
 8003c90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c92:	4613      	mov	r3, r2
 8003c94:	00db      	lsls	r3, r3, #3
 8003c96:	1a9b      	subs	r3, r3, r2
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	440b      	add	r3, r1
 8003c9c:	3348      	adds	r3, #72	; 0x48
 8003c9e:	6819      	ldr	r1, [r3, #0]
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	00db      	lsls	r3, r3, #3
 8003ca8:	1a9b      	subs	r3, r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	4403      	add	r3, r0
 8003cae:	3344      	adds	r3, #68	; 0x44
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4419      	add	r1, r3
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cb8:	4613      	mov	r3, r2
 8003cba:	00db      	lsls	r3, r3, #3
 8003cbc:	1a9b      	subs	r3, r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	4403      	add	r3, r0
 8003cc2:	3348      	adds	r3, #72	; 0x48
 8003cc4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d113      	bne.n	8003cf4 <HAL_PCD_IRQHandler+0x31c>
 8003ccc:	6879      	ldr	r1, [r7, #4]
 8003cce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	00db      	lsls	r3, r3, #3
 8003cd4:	1a9b      	subs	r3, r3, r2
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	440b      	add	r3, r1
 8003cda:	3350      	adds	r3, #80	; 0x50
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d108      	bne.n	8003cf4 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6818      	ldr	r0, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003cec:	461a      	mov	r2, r3
 8003cee:	2101      	movs	r1, #1
 8003cf0:	f004 faa8 	bl	8008244 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f017 ff97 	bl	801bc2e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	f003 0308 	and.w	r3, r3, #8
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d008      	beq.n	8003d1c <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0c:	015a      	lsls	r2, r3, #5
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	4413      	add	r3, r2
 8003d12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d16:	461a      	mov	r2, r3
 8003d18:	2308      	movs	r3, #8
 8003d1a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	f003 0310 	and.w	r3, r3, #16
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d008      	beq.n	8003d38 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d28:	015a      	lsls	r2, r3, #5
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d32:	461a      	mov	r2, r3
 8003d34:	2310      	movs	r3, #16
 8003d36:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d008      	beq.n	8003d54 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d44:	015a      	lsls	r2, r3, #5
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	4413      	add	r3, r2
 8003d4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d4e:	461a      	mov	r2, r3
 8003d50:	2340      	movs	r3, #64	; 0x40
 8003d52:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d008      	beq.n	8003d70 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d60:	015a      	lsls	r2, r3, #5
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	4413      	add	r3, r2
 8003d66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d003      	beq.n	8003d82 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003d7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f000 fc1b 	bl	80045b8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d84:	3301      	adds	r3, #1
 8003d86:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d8a:	085b      	lsrs	r3, r3, #1
 8003d8c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	f47f af49 	bne.w	8003c28 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f004 f98d 	bl	80080ba <USB_ReadInterrupts>
 8003da0:	4603      	mov	r3, r0
 8003da2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003da6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003daa:	d122      	bne.n	8003df2 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	69fa      	ldr	r2, [r7, #28]
 8003db6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dba:	f023 0301 	bic.w	r3, r3, #1
 8003dbe:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d108      	bne.n	8003ddc <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003dd2:	2100      	movs	r1, #0
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f000 fe27 	bl	8004a28 <HAL_PCDEx_LPM_Callback>
 8003dda:	e002      	b.n	8003de2 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f017 ff9d 	bl	801bd1c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	695a      	ldr	r2, [r3, #20]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003df0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4618      	mov	r0, r3
 8003df8:	f004 f95f 	bl	80080ba <USB_ReadInterrupts>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e06:	d112      	bne.n	8003e2e <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f003 0301 	and.w	r3, r3, #1
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d102      	bne.n	8003e1e <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f017 ff59 	bl	801bcd0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	695a      	ldr	r2, [r3, #20]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003e2c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f004 f941 	bl	80080ba <USB_ReadInterrupts>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e42:	f040 80c7 	bne.w	8003fd4 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	69fa      	ldr	r2, [r7, #28]
 8003e50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e54:	f023 0301 	bic.w	r3, r3, #1
 8003e58:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2110      	movs	r1, #16
 8003e60:	4618      	mov	r0, r3
 8003e62:	f003 f9db 	bl	800721c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e66:	2300      	movs	r3, #0
 8003e68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e6a:	e056      	b.n	8003f1a <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e6e:	015a      	lsls	r2, r3, #5
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	4413      	add	r3, r2
 8003e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e78:	461a      	mov	r2, r3
 8003e7a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e7e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e82:	015a      	lsls	r2, r3, #5
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	4413      	add	r3, r2
 8003e88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e90:	0151      	lsls	r1, r2, #5
 8003e92:	69fa      	ldr	r2, [r7, #28]
 8003e94:	440a      	add	r2, r1
 8003e96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e9e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea2:	015a      	lsls	r2, r3, #5
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003eb0:	0151      	lsls	r1, r2, #5
 8003eb2:	69fa      	ldr	r2, [r7, #28]
 8003eb4:	440a      	add	r2, r1
 8003eb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003eba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003ebe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ec2:	015a      	lsls	r2, r3, #5
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ecc:	461a      	mov	r2, r3
 8003ece:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ed2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed6:	015a      	lsls	r2, r3, #5
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	4413      	add	r3, r2
 8003edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ee4:	0151      	lsls	r1, r2, #5
 8003ee6:	69fa      	ldr	r2, [r7, #28]
 8003ee8:	440a      	add	r2, r1
 8003eea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003eee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003ef2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef6:	015a      	lsls	r2, r3, #5
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	4413      	add	r3, r2
 8003efc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f04:	0151      	lsls	r1, r2, #5
 8003f06:	69fa      	ldr	r2, [r7, #28]
 8003f08:	440a      	add	r2, r1
 8003f0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f0e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f12:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f16:	3301      	adds	r3, #1
 8003f18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d3a3      	bcc.n	8003e6c <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f2a:	69db      	ldr	r3, [r3, #28]
 8003f2c:	69fa      	ldr	r2, [r7, #28]
 8003f2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f32:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003f36:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d016      	beq.n	8003f6e <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f4a:	69fa      	ldr	r2, [r7, #28]
 8003f4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f50:	f043 030b 	orr.w	r3, r3, #11
 8003f54:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f60:	69fa      	ldr	r2, [r7, #28]
 8003f62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f66:	f043 030b 	orr.w	r3, r3, #11
 8003f6a:	6453      	str	r3, [r2, #68]	; 0x44
 8003f6c:	e015      	b.n	8003f9a <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	69fa      	ldr	r2, [r7, #28]
 8003f78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f7c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003f80:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003f84:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	69fa      	ldr	r2, [r7, #28]
 8003f90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f94:	f043 030b 	orr.w	r3, r3, #11
 8003f98:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	69fa      	ldr	r2, [r7, #28]
 8003fa4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fa8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003fac:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6818      	ldr	r0, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	f004 f940 	bl	8008244 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	695a      	ldr	r2, [r3, #20]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003fd2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f004 f86e 	bl	80080ba <USB_ReadInterrupts>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fe4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fe8:	d124      	bne.n	8004034 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f004 f904 	bl	80081fc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f003 f96c 	bl	80072d6 <USB_GetDevSpeed>
 8003ffe:	4603      	mov	r3, r0
 8004000:	461a      	mov	r2, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681c      	ldr	r4, [r3, #0]
 800400a:	f001 f92d 	bl	8005268 <HAL_RCC_GetHCLKFreq>
 800400e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004014:	b2db      	uxtb	r3, r3
 8004016:	461a      	mov	r2, r3
 8004018:	4620      	mov	r0, r4
 800401a:	f002 fe8b 	bl	8006d34 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f017 fe2d 	bl	801bc7e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	695a      	ldr	r2, [r3, #20]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004032:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4618      	mov	r0, r3
 800403a:	f004 f83e 	bl	80080ba <USB_ReadInterrupts>
 800403e:	4603      	mov	r3, r0
 8004040:	f003 0308 	and.w	r3, r3, #8
 8004044:	2b08      	cmp	r3, #8
 8004046:	d10a      	bne.n	800405e <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f017 fe0a 	bl	801bc62 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	695a      	ldr	r2, [r3, #20]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f002 0208 	and.w	r2, r2, #8
 800405c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4618      	mov	r0, r3
 8004064:	f004 f829 	bl	80080ba <USB_ReadInterrupts>
 8004068:	4603      	mov	r3, r0
 800406a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800406e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004072:	d10f      	bne.n	8004094 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004074:	2300      	movs	r3, #0
 8004076:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407a:	b2db      	uxtb	r3, r3
 800407c:	4619      	mov	r1, r3
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f017 fe6c 	bl	801bd5c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	695a      	ldr	r2, [r3, #20]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004092:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4618      	mov	r0, r3
 800409a:	f004 f80e 	bl	80080ba <USB_ReadInterrupts>
 800409e:	4603      	mov	r3, r0
 80040a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040a8:	d10f      	bne.n	80040ca <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80040aa:	2300      	movs	r3, #0
 80040ac:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80040ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	4619      	mov	r1, r3
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f017 fe3f 	bl	801bd38 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	695a      	ldr	r2, [r3, #20]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80040c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4618      	mov	r0, r3
 80040d0:	f003 fff3 	bl	80080ba <USB_ReadInterrupts>
 80040d4:	4603      	mov	r3, r0
 80040d6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80040da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040de:	d10a      	bne.n	80040f6 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f017 fe4d 	bl	801bd80 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	695a      	ldr	r2, [r3, #20]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80040f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4618      	mov	r0, r3
 80040fc:	f003 ffdd 	bl	80080ba <USB_ReadInterrupts>
 8004100:	4603      	mov	r3, r0
 8004102:	f003 0304 	and.w	r3, r3, #4
 8004106:	2b04      	cmp	r3, #4
 8004108:	d115      	bne.n	8004136 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	f003 0304 	and.w	r3, r3, #4
 8004118:	2b00      	cmp	r3, #0
 800411a:	d002      	beq.n	8004122 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f017 fe3d 	bl	801bd9c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	6859      	ldr	r1, [r3, #4]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	69ba      	ldr	r2, [r7, #24]
 800412e:	430a      	orrs	r2, r1
 8004130:	605a      	str	r2, [r3, #4]
 8004132:	e000      	b.n	8004136 <HAL_PCD_IRQHandler+0x75e>
      return;
 8004134:	bf00      	nop
    }
  }
}
 8004136:	3734      	adds	r7, #52	; 0x34
 8004138:	46bd      	mov	sp, r7
 800413a:	bd90      	pop	{r4, r7, pc}

0800413c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	460b      	mov	r3, r1
 8004146:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800414e:	2b01      	cmp	r3, #1
 8004150:	d101      	bne.n	8004156 <HAL_PCD_SetAddress+0x1a>
 8004152:	2302      	movs	r3, #2
 8004154:	e013      	b.n	800417e <HAL_PCD_SetAddress+0x42>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2201      	movs	r2, #1
 800415a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	78fa      	ldrb	r2, [r7, #3]
 8004162:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	78fa      	ldrb	r2, [r7, #3]
 800416c:	4611      	mov	r1, r2
 800416e:	4618      	mov	r0, r3
 8004170:	f003 ff3b 	bl	8007fea <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3708      	adds	r7, #8
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}

08004186 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004186:	b580      	push	{r7, lr}
 8004188:	b084      	sub	sp, #16
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
 800418e:	4608      	mov	r0, r1
 8004190:	4611      	mov	r1, r2
 8004192:	461a      	mov	r2, r3
 8004194:	4603      	mov	r3, r0
 8004196:	70fb      	strb	r3, [r7, #3]
 8004198:	460b      	mov	r3, r1
 800419a:	803b      	strh	r3, [r7, #0]
 800419c:	4613      	mov	r3, r2
 800419e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80041a0:	2300      	movs	r3, #0
 80041a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80041a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	da0f      	bge.n	80041cc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041ac:	78fb      	ldrb	r3, [r7, #3]
 80041ae:	f003 020f 	and.w	r2, r3, #15
 80041b2:	4613      	mov	r3, r2
 80041b4:	00db      	lsls	r3, r3, #3
 80041b6:	1a9b      	subs	r3, r3, r2
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	3338      	adds	r3, #56	; 0x38
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	4413      	add	r3, r2
 80041c0:	3304      	adds	r3, #4
 80041c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2201      	movs	r2, #1
 80041c8:	705a      	strb	r2, [r3, #1]
 80041ca:	e00f      	b.n	80041ec <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041cc:	78fb      	ldrb	r3, [r7, #3]
 80041ce:	f003 020f 	and.w	r2, r3, #15
 80041d2:	4613      	mov	r3, r2
 80041d4:	00db      	lsls	r3, r3, #3
 80041d6:	1a9b      	subs	r3, r3, r2
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	4413      	add	r3, r2
 80041e2:	3304      	adds	r3, #4
 80041e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80041ec:	78fb      	ldrb	r3, [r7, #3]
 80041ee:	f003 030f 	and.w	r3, r3, #15
 80041f2:	b2da      	uxtb	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80041f8:	883a      	ldrh	r2, [r7, #0]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	78ba      	ldrb	r2, [r7, #2]
 8004202:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	785b      	ldrb	r3, [r3, #1]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d004      	beq.n	8004216 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	b29a      	uxth	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004216:	78bb      	ldrb	r3, [r7, #2]
 8004218:	2b02      	cmp	r3, #2
 800421a:	d102      	bne.n	8004222 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2200      	movs	r2, #0
 8004220:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004228:	2b01      	cmp	r3, #1
 800422a:	d101      	bne.n	8004230 <HAL_PCD_EP_Open+0xaa>
 800422c:	2302      	movs	r3, #2
 800422e:	e00e      	b.n	800424e <HAL_PCD_EP_Open+0xc8>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68f9      	ldr	r1, [r7, #12]
 800423e:	4618      	mov	r0, r3
 8004240:	f003 f86e 	bl	8007320 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800424c:	7afb      	ldrb	r3, [r7, #11]
}
 800424e:	4618      	mov	r0, r3
 8004250:	3710      	adds	r7, #16
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}

08004256 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004256:	b580      	push	{r7, lr}
 8004258:	b084      	sub	sp, #16
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
 800425e:	460b      	mov	r3, r1
 8004260:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004262:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004266:	2b00      	cmp	r3, #0
 8004268:	da0f      	bge.n	800428a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800426a:	78fb      	ldrb	r3, [r7, #3]
 800426c:	f003 020f 	and.w	r2, r3, #15
 8004270:	4613      	mov	r3, r2
 8004272:	00db      	lsls	r3, r3, #3
 8004274:	1a9b      	subs	r3, r3, r2
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	3338      	adds	r3, #56	; 0x38
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	4413      	add	r3, r2
 800427e:	3304      	adds	r3, #4
 8004280:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2201      	movs	r2, #1
 8004286:	705a      	strb	r2, [r3, #1]
 8004288:	e00f      	b.n	80042aa <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800428a:	78fb      	ldrb	r3, [r7, #3]
 800428c:	f003 020f 	and.w	r2, r3, #15
 8004290:	4613      	mov	r3, r2
 8004292:	00db      	lsls	r3, r3, #3
 8004294:	1a9b      	subs	r3, r3, r2
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	4413      	add	r3, r2
 80042a0:	3304      	adds	r3, #4
 80042a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2200      	movs	r2, #0
 80042a8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80042aa:	78fb      	ldrb	r3, [r7, #3]
 80042ac:	f003 030f 	and.w	r3, r3, #15
 80042b0:	b2da      	uxtb	r2, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d101      	bne.n	80042c4 <HAL_PCD_EP_Close+0x6e>
 80042c0:	2302      	movs	r3, #2
 80042c2:	e00e      	b.n	80042e2 <HAL_PCD_EP_Close+0x8c>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	68f9      	ldr	r1, [r7, #12]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f003 f8ac 	bl	8007430 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3710      	adds	r7, #16
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}

080042ea <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80042ea:	b580      	push	{r7, lr}
 80042ec:	b086      	sub	sp, #24
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	60f8      	str	r0, [r7, #12]
 80042f2:	607a      	str	r2, [r7, #4]
 80042f4:	603b      	str	r3, [r7, #0]
 80042f6:	460b      	mov	r3, r1
 80042f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042fa:	7afb      	ldrb	r3, [r7, #11]
 80042fc:	f003 020f 	and.w	r2, r3, #15
 8004300:	4613      	mov	r3, r2
 8004302:	00db      	lsls	r3, r3, #3
 8004304:	1a9b      	subs	r3, r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	4413      	add	r3, r2
 8004310:	3304      	adds	r3, #4
 8004312:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	683a      	ldr	r2, [r7, #0]
 800431e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	2200      	movs	r2, #0
 8004324:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	2200      	movs	r2, #0
 800432a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800432c:	7afb      	ldrb	r3, [r7, #11]
 800432e:	f003 030f 	and.w	r3, r3, #15
 8004332:	b2da      	uxtb	r2, r3
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	691b      	ldr	r3, [r3, #16]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d102      	bne.n	8004346 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004346:	7afb      	ldrb	r3, [r7, #11]
 8004348:	f003 030f 	and.w	r3, r3, #15
 800434c:	2b00      	cmp	r3, #0
 800434e:	d109      	bne.n	8004364 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6818      	ldr	r0, [r3, #0]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	691b      	ldr	r3, [r3, #16]
 8004358:	b2db      	uxtb	r3, r3
 800435a:	461a      	mov	r2, r3
 800435c:	6979      	ldr	r1, [r7, #20]
 800435e:	f003 fb87 	bl	8007a70 <USB_EP0StartXfer>
 8004362:	e008      	b.n	8004376 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6818      	ldr	r0, [r3, #0]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	b2db      	uxtb	r3, r3
 800436e:	461a      	mov	r2, r3
 8004370:	6979      	ldr	r1, [r7, #20]
 8004372:	f003 f939 	bl	80075e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004376:	2300      	movs	r3, #0
}
 8004378:	4618      	mov	r0, r3
 800437a:	3718      	adds	r7, #24
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	460b      	mov	r3, r1
 800438a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800438c:	78fb      	ldrb	r3, [r7, #3]
 800438e:	f003 020f 	and.w	r2, r3, #15
 8004392:	6879      	ldr	r1, [r7, #4]
 8004394:	4613      	mov	r3, r2
 8004396:	00db      	lsls	r3, r3, #3
 8004398:	1a9b      	subs	r3, r3, r2
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	440b      	add	r3, r1
 800439e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80043a2:	681b      	ldr	r3, [r3, #0]
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	607a      	str	r2, [r7, #4]
 80043ba:	603b      	str	r3, [r7, #0]
 80043bc:	460b      	mov	r3, r1
 80043be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043c0:	7afb      	ldrb	r3, [r7, #11]
 80043c2:	f003 020f 	and.w	r2, r3, #15
 80043c6:	4613      	mov	r3, r2
 80043c8:	00db      	lsls	r3, r3, #3
 80043ca:	1a9b      	subs	r3, r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	3338      	adds	r3, #56	; 0x38
 80043d0:	68fa      	ldr	r2, [r7, #12]
 80043d2:	4413      	add	r3, r2
 80043d4:	3304      	adds	r3, #4
 80043d6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	683a      	ldr	r2, [r7, #0]
 80043e2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	2200      	movs	r2, #0
 80043e8:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	2201      	movs	r2, #1
 80043ee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043f0:	7afb      	ldrb	r3, [r7, #11]
 80043f2:	f003 030f 	and.w	r3, r3, #15
 80043f6:	b2da      	uxtb	r2, r3
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	2b01      	cmp	r3, #1
 8004402:	d102      	bne.n	800440a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800440a:	7afb      	ldrb	r3, [r7, #11]
 800440c:	f003 030f 	and.w	r3, r3, #15
 8004410:	2b00      	cmp	r3, #0
 8004412:	d109      	bne.n	8004428 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6818      	ldr	r0, [r3, #0]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	b2db      	uxtb	r3, r3
 800441e:	461a      	mov	r2, r3
 8004420:	6979      	ldr	r1, [r7, #20]
 8004422:	f003 fb25 	bl	8007a70 <USB_EP0StartXfer>
 8004426:	e008      	b.n	800443a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6818      	ldr	r0, [r3, #0]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	b2db      	uxtb	r3, r3
 8004432:	461a      	mov	r2, r3
 8004434:	6979      	ldr	r1, [r7, #20]
 8004436:	f003 f8d7 	bl	80075e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3718      	adds	r7, #24
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	460b      	mov	r3, r1
 800444e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004450:	78fb      	ldrb	r3, [r7, #3]
 8004452:	f003 020f 	and.w	r2, r3, #15
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	429a      	cmp	r2, r3
 800445c:	d901      	bls.n	8004462 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e050      	b.n	8004504 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004462:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004466:	2b00      	cmp	r3, #0
 8004468:	da0f      	bge.n	800448a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800446a:	78fb      	ldrb	r3, [r7, #3]
 800446c:	f003 020f 	and.w	r2, r3, #15
 8004470:	4613      	mov	r3, r2
 8004472:	00db      	lsls	r3, r3, #3
 8004474:	1a9b      	subs	r3, r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	3338      	adds	r3, #56	; 0x38
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	4413      	add	r3, r2
 800447e:	3304      	adds	r3, #4
 8004480:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2201      	movs	r2, #1
 8004486:	705a      	strb	r2, [r3, #1]
 8004488:	e00d      	b.n	80044a6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800448a:	78fa      	ldrb	r2, [r7, #3]
 800448c:	4613      	mov	r3, r2
 800448e:	00db      	lsls	r3, r3, #3
 8004490:	1a9b      	subs	r3, r3, r2
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	4413      	add	r3, r2
 800449c:	3304      	adds	r3, #4
 800449e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2200      	movs	r2, #0
 80044a4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2201      	movs	r2, #1
 80044aa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044ac:	78fb      	ldrb	r3, [r7, #3]
 80044ae:	f003 030f 	and.w	r3, r3, #15
 80044b2:	b2da      	uxtb	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d101      	bne.n	80044c6 <HAL_PCD_EP_SetStall+0x82>
 80044c2:	2302      	movs	r3, #2
 80044c4:	e01e      	b.n	8004504 <HAL_PCD_EP_SetStall+0xc0>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2201      	movs	r2, #1
 80044ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68f9      	ldr	r1, [r7, #12]
 80044d4:	4618      	mov	r0, r3
 80044d6:	f003 fcb4 	bl	8007e42 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80044da:	78fb      	ldrb	r3, [r7, #3]
 80044dc:	f003 030f 	and.w	r3, r3, #15
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d10a      	bne.n	80044fa <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6818      	ldr	r0, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	b2d9      	uxtb	r1, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80044f4:	461a      	mov	r2, r3
 80044f6:	f003 fea5 	bl	8008244 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004502:	2300      	movs	r3, #0
}
 8004504:	4618      	mov	r0, r3
 8004506:	3710      	adds	r7, #16
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	460b      	mov	r3, r1
 8004516:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004518:	78fb      	ldrb	r3, [r7, #3]
 800451a:	f003 020f 	and.w	r2, r3, #15
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	429a      	cmp	r2, r3
 8004524:	d901      	bls.n	800452a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e042      	b.n	80045b0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800452a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800452e:	2b00      	cmp	r3, #0
 8004530:	da0f      	bge.n	8004552 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004532:	78fb      	ldrb	r3, [r7, #3]
 8004534:	f003 020f 	and.w	r2, r3, #15
 8004538:	4613      	mov	r3, r2
 800453a:	00db      	lsls	r3, r3, #3
 800453c:	1a9b      	subs	r3, r3, r2
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	3338      	adds	r3, #56	; 0x38
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	4413      	add	r3, r2
 8004546:	3304      	adds	r3, #4
 8004548:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2201      	movs	r2, #1
 800454e:	705a      	strb	r2, [r3, #1]
 8004550:	e00f      	b.n	8004572 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004552:	78fb      	ldrb	r3, [r7, #3]
 8004554:	f003 020f 	and.w	r2, r3, #15
 8004558:	4613      	mov	r3, r2
 800455a:	00db      	lsls	r3, r3, #3
 800455c:	1a9b      	subs	r3, r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	4413      	add	r3, r2
 8004568:	3304      	adds	r3, #4
 800456a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2200      	movs	r2, #0
 8004576:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004578:	78fb      	ldrb	r3, [r7, #3]
 800457a:	f003 030f 	and.w	r3, r3, #15
 800457e:	b2da      	uxtb	r2, r3
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800458a:	2b01      	cmp	r3, #1
 800458c:	d101      	bne.n	8004592 <HAL_PCD_EP_ClrStall+0x86>
 800458e:	2302      	movs	r3, #2
 8004590:	e00e      	b.n	80045b0 <HAL_PCD_EP_ClrStall+0xa4>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2201      	movs	r2, #1
 8004596:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68f9      	ldr	r1, [r7, #12]
 80045a0:	4618      	mov	r0, r3
 80045a2:	f003 fcbc 	bl	8007f1e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80045ae:	2300      	movs	r3, #0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3710      	adds	r7, #16
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b08a      	sub	sp, #40	; 0x28
 80045bc:	af02      	add	r7, sp, #8
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80045cc:	683a      	ldr	r2, [r7, #0]
 80045ce:	4613      	mov	r3, r2
 80045d0:	00db      	lsls	r3, r3, #3
 80045d2:	1a9b      	subs	r3, r3, r2
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	3338      	adds	r3, #56	; 0x38
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	4413      	add	r3, r2
 80045dc:	3304      	adds	r3, #4
 80045de:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	699a      	ldr	r2, [r3, #24]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	695b      	ldr	r3, [r3, #20]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d901      	bls.n	80045f0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e06c      	b.n	80046ca <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	695a      	ldr	r2, [r3, #20]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	699b      	ldr	r3, [r3, #24]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	69fa      	ldr	r2, [r7, #28]
 8004602:	429a      	cmp	r2, r3
 8004604:	d902      	bls.n	800460c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	3303      	adds	r3, #3
 8004610:	089b      	lsrs	r3, r3, #2
 8004612:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004614:	e02b      	b.n	800466e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	695a      	ldr	r2, [r3, #20]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	699b      	ldr	r3, [r3, #24]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	69fa      	ldr	r2, [r7, #28]
 8004628:	429a      	cmp	r2, r3
 800462a:	d902      	bls.n	8004632 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	3303      	adds	r3, #3
 8004636:	089b      	lsrs	r3, r3, #2
 8004638:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	68d9      	ldr	r1, [r3, #12]
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	b2da      	uxtb	r2, r3
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800464a:	b2db      	uxtb	r3, r3
 800464c:	9300      	str	r3, [sp, #0]
 800464e:	4603      	mov	r3, r0
 8004650:	6978      	ldr	r0, [r7, #20]
 8004652:	f003 fb60 	bl	8007d16 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	68da      	ldr	r2, [r3, #12]
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	441a      	add	r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	699a      	ldr	r2, [r3, #24]
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	441a      	add	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	015a      	lsls	r2, r3, #5
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	4413      	add	r3, r2
 8004676:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	b29b      	uxth	r3, r3
 800467e:	69ba      	ldr	r2, [r7, #24]
 8004680:	429a      	cmp	r2, r3
 8004682:	d809      	bhi.n	8004698 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	699a      	ldr	r2, [r3, #24]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800468c:	429a      	cmp	r2, r3
 800468e:	d203      	bcs.n	8004698 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	695b      	ldr	r3, [r3, #20]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d1be      	bne.n	8004616 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	695a      	ldr	r2, [r3, #20]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	699b      	ldr	r3, [r3, #24]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d811      	bhi.n	80046c8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	f003 030f 	and.w	r3, r3, #15
 80046aa:	2201      	movs	r2, #1
 80046ac:	fa02 f303 	lsl.w	r3, r2, r3
 80046b0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	43db      	mvns	r3, r3
 80046be:	6939      	ldr	r1, [r7, #16]
 80046c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046c4:	4013      	ands	r3, r2
 80046c6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3720      	adds	r7, #32
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
	...

080046d4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b086      	sub	sp, #24
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	333c      	adds	r3, #60	; 0x3c
 80046ec:	3304      	adds	r3, #4
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	015a      	lsls	r2, r3, #5
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	4413      	add	r3, r2
 80046fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	2b01      	cmp	r3, #1
 8004708:	f040 80a0 	bne.w	800484c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	f003 0308 	and.w	r3, r3, #8
 8004712:	2b00      	cmp	r3, #0
 8004714:	d015      	beq.n	8004742 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	4a72      	ldr	r2, [pc, #456]	; (80048e4 <PCD_EP_OutXfrComplete_int+0x210>)
 800471a:	4293      	cmp	r3, r2
 800471c:	f240 80dd 	bls.w	80048da <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004726:	2b00      	cmp	r3, #0
 8004728:	f000 80d7 	beq.w	80048da <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	015a      	lsls	r2, r3, #5
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	4413      	add	r3, r2
 8004734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004738:	461a      	mov	r2, r3
 800473a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800473e:	6093      	str	r3, [r2, #8]
 8004740:	e0cb      	b.n	80048da <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	f003 0320 	and.w	r3, r3, #32
 8004748:	2b00      	cmp	r3, #0
 800474a:	d009      	beq.n	8004760 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	015a      	lsls	r2, r3, #5
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	4413      	add	r3, r2
 8004754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004758:	461a      	mov	r2, r3
 800475a:	2320      	movs	r3, #32
 800475c:	6093      	str	r3, [r2, #8]
 800475e:	e0bc      	b.n	80048da <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004766:	2b00      	cmp	r3, #0
 8004768:	f040 80b7 	bne.w	80048da <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	4a5d      	ldr	r2, [pc, #372]	; (80048e4 <PCD_EP_OutXfrComplete_int+0x210>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d90f      	bls.n	8004794 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00a      	beq.n	8004794 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	015a      	lsls	r2, r3, #5
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	4413      	add	r3, r2
 8004786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800478a:	461a      	mov	r2, r3
 800478c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004790:	6093      	str	r3, [r2, #8]
 8004792:	e0a2      	b.n	80048da <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004794:	6879      	ldr	r1, [r7, #4]
 8004796:	683a      	ldr	r2, [r7, #0]
 8004798:	4613      	mov	r3, r2
 800479a:	00db      	lsls	r3, r3, #3
 800479c:	1a9b      	subs	r3, r3, r2
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	440b      	add	r3, r1
 80047a2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80047a6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	0159      	lsls	r1, r3, #5
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	440b      	add	r3, r1
 80047b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80047ba:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	683a      	ldr	r2, [r7, #0]
 80047c0:	4613      	mov	r3, r2
 80047c2:	00db      	lsls	r3, r3, #3
 80047c4:	1a9b      	subs	r3, r3, r2
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	4403      	add	r3, r0
 80047ca:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80047ce:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80047d0:	6879      	ldr	r1, [r7, #4]
 80047d2:	683a      	ldr	r2, [r7, #0]
 80047d4:	4613      	mov	r3, r2
 80047d6:	00db      	lsls	r3, r3, #3
 80047d8:	1a9b      	subs	r3, r3, r2
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	440b      	add	r3, r1
 80047de:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80047e2:	6819      	ldr	r1, [r3, #0]
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	683a      	ldr	r2, [r7, #0]
 80047e8:	4613      	mov	r3, r2
 80047ea:	00db      	lsls	r3, r3, #3
 80047ec:	1a9b      	subs	r3, r3, r2
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	4403      	add	r3, r0
 80047f2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4419      	add	r1, r3
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	683a      	ldr	r2, [r7, #0]
 80047fe:	4613      	mov	r3, r2
 8004800:	00db      	lsls	r3, r3, #3
 8004802:	1a9b      	subs	r3, r3, r2
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	4403      	add	r3, r0
 8004808:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800480c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d114      	bne.n	800483e <PCD_EP_OutXfrComplete_int+0x16a>
 8004814:	6879      	ldr	r1, [r7, #4]
 8004816:	683a      	ldr	r2, [r7, #0]
 8004818:	4613      	mov	r3, r2
 800481a:	00db      	lsls	r3, r3, #3
 800481c:	1a9b      	subs	r3, r3, r2
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	440b      	add	r3, r1
 8004822:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d108      	bne.n	800483e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6818      	ldr	r0, [r3, #0]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004836:	461a      	mov	r2, r3
 8004838:	2101      	movs	r1, #1
 800483a:	f003 fd03 	bl	8008244 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	b2db      	uxtb	r3, r3
 8004842:	4619      	mov	r1, r3
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f017 f9d7 	bl	801bbf8 <HAL_PCD_DataOutStageCallback>
 800484a:	e046      	b.n	80048da <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	4a26      	ldr	r2, [pc, #152]	; (80048e8 <PCD_EP_OutXfrComplete_int+0x214>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d124      	bne.n	800489e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00a      	beq.n	8004874 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	015a      	lsls	r2, r3, #5
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	4413      	add	r3, r2
 8004866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800486a:	461a      	mov	r2, r3
 800486c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004870:	6093      	str	r3, [r2, #8]
 8004872:	e032      	b.n	80048da <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	f003 0320 	and.w	r3, r3, #32
 800487a:	2b00      	cmp	r3, #0
 800487c:	d008      	beq.n	8004890 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	015a      	lsls	r2, r3, #5
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	4413      	add	r3, r2
 8004886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800488a:	461a      	mov	r2, r3
 800488c:	2320      	movs	r3, #32
 800488e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	b2db      	uxtb	r3, r3
 8004894:	4619      	mov	r1, r3
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f017 f9ae 	bl	801bbf8 <HAL_PCD_DataOutStageCallback>
 800489c:	e01d      	b.n	80048da <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d114      	bne.n	80048ce <PCD_EP_OutXfrComplete_int+0x1fa>
 80048a4:	6879      	ldr	r1, [r7, #4]
 80048a6:	683a      	ldr	r2, [r7, #0]
 80048a8:	4613      	mov	r3, r2
 80048aa:	00db      	lsls	r3, r3, #3
 80048ac:	1a9b      	subs	r3, r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	440b      	add	r3, r1
 80048b2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d108      	bne.n	80048ce <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6818      	ldr	r0, [r3, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80048c6:	461a      	mov	r2, r3
 80048c8:	2100      	movs	r1, #0
 80048ca:	f003 fcbb 	bl	8008244 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	4619      	mov	r1, r3
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f017 f98f 	bl	801bbf8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3718      	adds	r7, #24
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	4f54300a 	.word	0x4f54300a
 80048e8:	4f54310a 	.word	0x4f54310a

080048ec <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b086      	sub	sp, #24
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	333c      	adds	r3, #60	; 0x3c
 8004904:	3304      	adds	r3, #4
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	015a      	lsls	r2, r3, #5
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	4413      	add	r3, r2
 8004912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	4a15      	ldr	r2, [pc, #84]	; (8004974 <PCD_EP_OutSetupPacket_int+0x88>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d90e      	bls.n	8004940 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004928:	2b00      	cmp	r3, #0
 800492a:	d009      	beq.n	8004940 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	015a      	lsls	r2, r3, #5
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	4413      	add	r3, r2
 8004934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004938:	461a      	mov	r2, r3
 800493a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800493e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f017 f947 	bl	801bbd4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	4a0a      	ldr	r2, [pc, #40]	; (8004974 <PCD_EP_OutSetupPacket_int+0x88>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d90c      	bls.n	8004968 <PCD_EP_OutSetupPacket_int+0x7c>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	2b01      	cmp	r3, #1
 8004954:	d108      	bne.n	8004968 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6818      	ldr	r0, [r3, #0]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004960:	461a      	mov	r2, r3
 8004962:	2101      	movs	r1, #1
 8004964:	f003 fc6e 	bl	8008244 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3718      	adds	r7, #24
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	4f54300a 	.word	0x4f54300a

08004978 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004978:	b480      	push	{r7}
 800497a:	b085      	sub	sp, #20
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	460b      	mov	r3, r1
 8004982:	70fb      	strb	r3, [r7, #3]
 8004984:	4613      	mov	r3, r2
 8004986:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004990:	78fb      	ldrb	r3, [r7, #3]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d107      	bne.n	80049a6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004996:	883b      	ldrh	r3, [r7, #0]
 8004998:	0419      	lsls	r1, r3, #16
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68ba      	ldr	r2, [r7, #8]
 80049a0:	430a      	orrs	r2, r1
 80049a2:	629a      	str	r2, [r3, #40]	; 0x28
 80049a4:	e028      	b.n	80049f8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ac:	0c1b      	lsrs	r3, r3, #16
 80049ae:	68ba      	ldr	r2, [r7, #8]
 80049b0:	4413      	add	r3, r2
 80049b2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80049b4:	2300      	movs	r3, #0
 80049b6:	73fb      	strb	r3, [r7, #15]
 80049b8:	e00d      	b.n	80049d6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	7bfb      	ldrb	r3, [r7, #15]
 80049c0:	3340      	adds	r3, #64	; 0x40
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	4413      	add	r3, r2
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	0c1b      	lsrs	r3, r3, #16
 80049ca:	68ba      	ldr	r2, [r7, #8]
 80049cc:	4413      	add	r3, r2
 80049ce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80049d0:	7bfb      	ldrb	r3, [r7, #15]
 80049d2:	3301      	adds	r3, #1
 80049d4:	73fb      	strb	r3, [r7, #15]
 80049d6:	7bfa      	ldrb	r2, [r7, #15]
 80049d8:	78fb      	ldrb	r3, [r7, #3]
 80049da:	3b01      	subs	r3, #1
 80049dc:	429a      	cmp	r2, r3
 80049de:	d3ec      	bcc.n	80049ba <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80049e0:	883b      	ldrh	r3, [r7, #0]
 80049e2:	0418      	lsls	r0, r3, #16
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6819      	ldr	r1, [r3, #0]
 80049e8:	78fb      	ldrb	r3, [r7, #3]
 80049ea:	3b01      	subs	r3, #1
 80049ec:	68ba      	ldr	r2, [r7, #8]
 80049ee:	4302      	orrs	r2, r0
 80049f0:	3340      	adds	r3, #64	; 0x40
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	440b      	add	r3, r1
 80049f6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3714      	adds	r7, #20
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr

08004a06 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004a06:	b480      	push	{r7}
 8004a08:	b083      	sub	sp, #12
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
 8004a0e:	460b      	mov	r3, r1
 8004a10:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	887a      	ldrh	r2, [r7, #2]
 8004a18:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	460b      	mov	r3, r1
 8004a32:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004a34:	bf00      	nop
 8004a36:	370c      	adds	r7, #12
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b086      	sub	sp, #24
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d101      	bne.n	8004a52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e264      	b.n	8004f1c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0301 	and.w	r3, r3, #1
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d075      	beq.n	8004b4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a5e:	4ba3      	ldr	r3, [pc, #652]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f003 030c 	and.w	r3, r3, #12
 8004a66:	2b04      	cmp	r3, #4
 8004a68:	d00c      	beq.n	8004a84 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a6a:	4ba0      	ldr	r3, [pc, #640]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a72:	2b08      	cmp	r3, #8
 8004a74:	d112      	bne.n	8004a9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a76:	4b9d      	ldr	r3, [pc, #628]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a82:	d10b      	bne.n	8004a9c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a84:	4b99      	ldr	r3, [pc, #612]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d05b      	beq.n	8004b48 <HAL_RCC_OscConfig+0x108>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d157      	bne.n	8004b48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e23f      	b.n	8004f1c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aa4:	d106      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x74>
 8004aa6:	4b91      	ldr	r3, [pc, #580]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a90      	ldr	r2, [pc, #576]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004aac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ab0:	6013      	str	r3, [r2, #0]
 8004ab2:	e01d      	b.n	8004af0 <HAL_RCC_OscConfig+0xb0>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004abc:	d10c      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x98>
 8004abe:	4b8b      	ldr	r3, [pc, #556]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a8a      	ldr	r2, [pc, #552]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004ac4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ac8:	6013      	str	r3, [r2, #0]
 8004aca:	4b88      	ldr	r3, [pc, #544]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a87      	ldr	r2, [pc, #540]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004ad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ad4:	6013      	str	r3, [r2, #0]
 8004ad6:	e00b      	b.n	8004af0 <HAL_RCC_OscConfig+0xb0>
 8004ad8:	4b84      	ldr	r3, [pc, #528]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a83      	ldr	r2, [pc, #524]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004ade:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ae2:	6013      	str	r3, [r2, #0]
 8004ae4:	4b81      	ldr	r3, [pc, #516]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a80      	ldr	r2, [pc, #512]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004aea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004aee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d013      	beq.n	8004b20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004af8:	f7fd fb2c 	bl	8002154 <HAL_GetTick>
 8004afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004afe:	e008      	b.n	8004b12 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b00:	f7fd fb28 	bl	8002154 <HAL_GetTick>
 8004b04:	4602      	mov	r2, r0
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	2b64      	cmp	r3, #100	; 0x64
 8004b0c:	d901      	bls.n	8004b12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e204      	b.n	8004f1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b12:	4b76      	ldr	r3, [pc, #472]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d0f0      	beq.n	8004b00 <HAL_RCC_OscConfig+0xc0>
 8004b1e:	e014      	b.n	8004b4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b20:	f7fd fb18 	bl	8002154 <HAL_GetTick>
 8004b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b26:	e008      	b.n	8004b3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b28:	f7fd fb14 	bl	8002154 <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	2b64      	cmp	r3, #100	; 0x64
 8004b34:	d901      	bls.n	8004b3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e1f0      	b.n	8004f1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b3a:	4b6c      	ldr	r3, [pc, #432]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1f0      	bne.n	8004b28 <HAL_RCC_OscConfig+0xe8>
 8004b46:	e000      	b.n	8004b4a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0302 	and.w	r3, r3, #2
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d063      	beq.n	8004c1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b56:	4b65      	ldr	r3, [pc, #404]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f003 030c 	and.w	r3, r3, #12
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00b      	beq.n	8004b7a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b62:	4b62      	ldr	r3, [pc, #392]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b6a:	2b08      	cmp	r3, #8
 8004b6c:	d11c      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b6e:	4b5f      	ldr	r3, [pc, #380]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d116      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b7a:	4b5c      	ldr	r3, [pc, #368]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0302 	and.w	r3, r3, #2
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d005      	beq.n	8004b92 <HAL_RCC_OscConfig+0x152>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d001      	beq.n	8004b92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e1c4      	b.n	8004f1c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b92:	4b56      	ldr	r3, [pc, #344]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	00db      	lsls	r3, r3, #3
 8004ba0:	4952      	ldr	r1, [pc, #328]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ba6:	e03a      	b.n	8004c1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d020      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bb0:	4b4f      	ldr	r3, [pc, #316]	; (8004cf0 <HAL_RCC_OscConfig+0x2b0>)
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb6:	f7fd facd 	bl	8002154 <HAL_GetTick>
 8004bba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bbc:	e008      	b.n	8004bd0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bbe:	f7fd fac9 	bl	8002154 <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d901      	bls.n	8004bd0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e1a5      	b.n	8004f1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bd0:	4b46      	ldr	r3, [pc, #280]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0302 	and.w	r3, r3, #2
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d0f0      	beq.n	8004bbe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bdc:	4b43      	ldr	r3, [pc, #268]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	00db      	lsls	r3, r3, #3
 8004bea:	4940      	ldr	r1, [pc, #256]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	600b      	str	r3, [r1, #0]
 8004bf0:	e015      	b.n	8004c1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bf2:	4b3f      	ldr	r3, [pc, #252]	; (8004cf0 <HAL_RCC_OscConfig+0x2b0>)
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf8:	f7fd faac 	bl	8002154 <HAL_GetTick>
 8004bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bfe:	e008      	b.n	8004c12 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c00:	f7fd faa8 	bl	8002154 <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d901      	bls.n	8004c12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e184      	b.n	8004f1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c12:	4b36      	ldr	r3, [pc, #216]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0302 	and.w	r3, r3, #2
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d1f0      	bne.n	8004c00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0308 	and.w	r3, r3, #8
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d030      	beq.n	8004c8c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	695b      	ldr	r3, [r3, #20]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d016      	beq.n	8004c60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c32:	4b30      	ldr	r3, [pc, #192]	; (8004cf4 <HAL_RCC_OscConfig+0x2b4>)
 8004c34:	2201      	movs	r2, #1
 8004c36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c38:	f7fd fa8c 	bl	8002154 <HAL_GetTick>
 8004c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c3e:	e008      	b.n	8004c52 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c40:	f7fd fa88 	bl	8002154 <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d901      	bls.n	8004c52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e164      	b.n	8004f1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c52:	4b26      	ldr	r3, [pc, #152]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004c54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c56:	f003 0302 	and.w	r3, r3, #2
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d0f0      	beq.n	8004c40 <HAL_RCC_OscConfig+0x200>
 8004c5e:	e015      	b.n	8004c8c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c60:	4b24      	ldr	r3, [pc, #144]	; (8004cf4 <HAL_RCC_OscConfig+0x2b4>)
 8004c62:	2200      	movs	r2, #0
 8004c64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c66:	f7fd fa75 	bl	8002154 <HAL_GetTick>
 8004c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c6c:	e008      	b.n	8004c80 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c6e:	f7fd fa71 	bl	8002154 <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d901      	bls.n	8004c80 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e14d      	b.n	8004f1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c80:	4b1a      	ldr	r3, [pc, #104]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004c82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c84:	f003 0302 	and.w	r3, r3, #2
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d1f0      	bne.n	8004c6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0304 	and.w	r3, r3, #4
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	f000 80a0 	beq.w	8004dda <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c9e:	4b13      	ldr	r3, [pc, #76]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d10f      	bne.n	8004cca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004caa:	2300      	movs	r3, #0
 8004cac:	60bb      	str	r3, [r7, #8]
 8004cae:	4b0f      	ldr	r3, [pc, #60]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb2:	4a0e      	ldr	r2, [pc, #56]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8004cba:	4b0c      	ldr	r3, [pc, #48]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cc2:	60bb      	str	r3, [r7, #8]
 8004cc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cca:	4b0b      	ldr	r3, [pc, #44]	; (8004cf8 <HAL_RCC_OscConfig+0x2b8>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d121      	bne.n	8004d1a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cd6:	4b08      	ldr	r3, [pc, #32]	; (8004cf8 <HAL_RCC_OscConfig+0x2b8>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a07      	ldr	r2, [pc, #28]	; (8004cf8 <HAL_RCC_OscConfig+0x2b8>)
 8004cdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ce0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ce2:	f7fd fa37 	bl	8002154 <HAL_GetTick>
 8004ce6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ce8:	e011      	b.n	8004d0e <HAL_RCC_OscConfig+0x2ce>
 8004cea:	bf00      	nop
 8004cec:	40023800 	.word	0x40023800
 8004cf0:	42470000 	.word	0x42470000
 8004cf4:	42470e80 	.word	0x42470e80
 8004cf8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cfc:	f7fd fa2a 	bl	8002154 <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d901      	bls.n	8004d0e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e106      	b.n	8004f1c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d0e:	4b85      	ldr	r3, [pc, #532]	; (8004f24 <HAL_RCC_OscConfig+0x4e4>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d0f0      	beq.n	8004cfc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d106      	bne.n	8004d30 <HAL_RCC_OscConfig+0x2f0>
 8004d22:	4b81      	ldr	r3, [pc, #516]	; (8004f28 <HAL_RCC_OscConfig+0x4e8>)
 8004d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d26:	4a80      	ldr	r2, [pc, #512]	; (8004f28 <HAL_RCC_OscConfig+0x4e8>)
 8004d28:	f043 0301 	orr.w	r3, r3, #1
 8004d2c:	6713      	str	r3, [r2, #112]	; 0x70
 8004d2e:	e01c      	b.n	8004d6a <HAL_RCC_OscConfig+0x32a>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	2b05      	cmp	r3, #5
 8004d36:	d10c      	bne.n	8004d52 <HAL_RCC_OscConfig+0x312>
 8004d38:	4b7b      	ldr	r3, [pc, #492]	; (8004f28 <HAL_RCC_OscConfig+0x4e8>)
 8004d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d3c:	4a7a      	ldr	r2, [pc, #488]	; (8004f28 <HAL_RCC_OscConfig+0x4e8>)
 8004d3e:	f043 0304 	orr.w	r3, r3, #4
 8004d42:	6713      	str	r3, [r2, #112]	; 0x70
 8004d44:	4b78      	ldr	r3, [pc, #480]	; (8004f28 <HAL_RCC_OscConfig+0x4e8>)
 8004d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d48:	4a77      	ldr	r2, [pc, #476]	; (8004f28 <HAL_RCC_OscConfig+0x4e8>)
 8004d4a:	f043 0301 	orr.w	r3, r3, #1
 8004d4e:	6713      	str	r3, [r2, #112]	; 0x70
 8004d50:	e00b      	b.n	8004d6a <HAL_RCC_OscConfig+0x32a>
 8004d52:	4b75      	ldr	r3, [pc, #468]	; (8004f28 <HAL_RCC_OscConfig+0x4e8>)
 8004d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d56:	4a74      	ldr	r2, [pc, #464]	; (8004f28 <HAL_RCC_OscConfig+0x4e8>)
 8004d58:	f023 0301 	bic.w	r3, r3, #1
 8004d5c:	6713      	str	r3, [r2, #112]	; 0x70
 8004d5e:	4b72      	ldr	r3, [pc, #456]	; (8004f28 <HAL_RCC_OscConfig+0x4e8>)
 8004d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d62:	4a71      	ldr	r2, [pc, #452]	; (8004f28 <HAL_RCC_OscConfig+0x4e8>)
 8004d64:	f023 0304 	bic.w	r3, r3, #4
 8004d68:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d015      	beq.n	8004d9e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d72:	f7fd f9ef 	bl	8002154 <HAL_GetTick>
 8004d76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d78:	e00a      	b.n	8004d90 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d7a:	f7fd f9eb 	bl	8002154 <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d901      	bls.n	8004d90 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e0c5      	b.n	8004f1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d90:	4b65      	ldr	r3, [pc, #404]	; (8004f28 <HAL_RCC_OscConfig+0x4e8>)
 8004d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d94:	f003 0302 	and.w	r3, r3, #2
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d0ee      	beq.n	8004d7a <HAL_RCC_OscConfig+0x33a>
 8004d9c:	e014      	b.n	8004dc8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d9e:	f7fd f9d9 	bl	8002154 <HAL_GetTick>
 8004da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004da4:	e00a      	b.n	8004dbc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004da6:	f7fd f9d5 	bl	8002154 <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d901      	bls.n	8004dbc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e0af      	b.n	8004f1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dbc:	4b5a      	ldr	r3, [pc, #360]	; (8004f28 <HAL_RCC_OscConfig+0x4e8>)
 8004dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc0:	f003 0302 	and.w	r3, r3, #2
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d1ee      	bne.n	8004da6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004dc8:	7dfb      	ldrb	r3, [r7, #23]
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d105      	bne.n	8004dda <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dce:	4b56      	ldr	r3, [pc, #344]	; (8004f28 <HAL_RCC_OscConfig+0x4e8>)
 8004dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd2:	4a55      	ldr	r2, [pc, #340]	; (8004f28 <HAL_RCC_OscConfig+0x4e8>)
 8004dd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dd8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	699b      	ldr	r3, [r3, #24]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	f000 809b 	beq.w	8004f1a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004de4:	4b50      	ldr	r3, [pc, #320]	; (8004f28 <HAL_RCC_OscConfig+0x4e8>)
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	f003 030c 	and.w	r3, r3, #12
 8004dec:	2b08      	cmp	r3, #8
 8004dee:	d05c      	beq.n	8004eaa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	699b      	ldr	r3, [r3, #24]
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d141      	bne.n	8004e7c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004df8:	4b4c      	ldr	r3, [pc, #304]	; (8004f2c <HAL_RCC_OscConfig+0x4ec>)
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dfe:	f7fd f9a9 	bl	8002154 <HAL_GetTick>
 8004e02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e04:	e008      	b.n	8004e18 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e06:	f7fd f9a5 	bl	8002154 <HAL_GetTick>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d901      	bls.n	8004e18 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e081      	b.n	8004f1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e18:	4b43      	ldr	r3, [pc, #268]	; (8004f28 <HAL_RCC_OscConfig+0x4e8>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d1f0      	bne.n	8004e06 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	69da      	ldr	r2, [r3, #28]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6a1b      	ldr	r3, [r3, #32]
 8004e2c:	431a      	orrs	r2, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e32:	019b      	lsls	r3, r3, #6
 8004e34:	431a      	orrs	r2, r3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e3a:	085b      	lsrs	r3, r3, #1
 8004e3c:	3b01      	subs	r3, #1
 8004e3e:	041b      	lsls	r3, r3, #16
 8004e40:	431a      	orrs	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e46:	061b      	lsls	r3, r3, #24
 8004e48:	4937      	ldr	r1, [pc, #220]	; (8004f28 <HAL_RCC_OscConfig+0x4e8>)
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e4e:	4b37      	ldr	r3, [pc, #220]	; (8004f2c <HAL_RCC_OscConfig+0x4ec>)
 8004e50:	2201      	movs	r2, #1
 8004e52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e54:	f7fd f97e 	bl	8002154 <HAL_GetTick>
 8004e58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e5a:	e008      	b.n	8004e6e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e5c:	f7fd f97a 	bl	8002154 <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d901      	bls.n	8004e6e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e056      	b.n	8004f1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e6e:	4b2e      	ldr	r3, [pc, #184]	; (8004f28 <HAL_RCC_OscConfig+0x4e8>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d0f0      	beq.n	8004e5c <HAL_RCC_OscConfig+0x41c>
 8004e7a:	e04e      	b.n	8004f1a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e7c:	4b2b      	ldr	r3, [pc, #172]	; (8004f2c <HAL_RCC_OscConfig+0x4ec>)
 8004e7e:	2200      	movs	r2, #0
 8004e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e82:	f7fd f967 	bl	8002154 <HAL_GetTick>
 8004e86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e88:	e008      	b.n	8004e9c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e8a:	f7fd f963 	bl	8002154 <HAL_GetTick>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d901      	bls.n	8004e9c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e03f      	b.n	8004f1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e9c:	4b22      	ldr	r3, [pc, #136]	; (8004f28 <HAL_RCC_OscConfig+0x4e8>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d1f0      	bne.n	8004e8a <HAL_RCC_OscConfig+0x44a>
 8004ea8:	e037      	b.n	8004f1a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	699b      	ldr	r3, [r3, #24]
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d101      	bne.n	8004eb6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e032      	b.n	8004f1c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004eb6:	4b1c      	ldr	r3, [pc, #112]	; (8004f28 <HAL_RCC_OscConfig+0x4e8>)
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	699b      	ldr	r3, [r3, #24]
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d028      	beq.n	8004f16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d121      	bne.n	8004f16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d11a      	bne.n	8004f16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004eec:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d111      	bne.n	8004f16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004efc:	085b      	lsrs	r3, r3, #1
 8004efe:	3b01      	subs	r3, #1
 8004f00:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d107      	bne.n	8004f16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f10:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d001      	beq.n	8004f1a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e000      	b.n	8004f1c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3718      	adds	r7, #24
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	40007000 	.word	0x40007000
 8004f28:	40023800 	.word	0x40023800
 8004f2c:	42470060 	.word	0x42470060

08004f30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d101      	bne.n	8004f44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e0cc      	b.n	80050de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f44:	4b68      	ldr	r3, [pc, #416]	; (80050e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0307 	and.w	r3, r3, #7
 8004f4c:	683a      	ldr	r2, [r7, #0]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d90c      	bls.n	8004f6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f52:	4b65      	ldr	r3, [pc, #404]	; (80050e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f54:	683a      	ldr	r2, [r7, #0]
 8004f56:	b2d2      	uxtb	r2, r2
 8004f58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f5a:	4b63      	ldr	r3, [pc, #396]	; (80050e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0307 	and.w	r3, r3, #7
 8004f62:	683a      	ldr	r2, [r7, #0]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d001      	beq.n	8004f6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e0b8      	b.n	80050de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0302 	and.w	r3, r3, #2
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d020      	beq.n	8004fba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0304 	and.w	r3, r3, #4
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d005      	beq.n	8004f90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f84:	4b59      	ldr	r3, [pc, #356]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	4a58      	ldr	r2, [pc, #352]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8004f8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0308 	and.w	r3, r3, #8
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d005      	beq.n	8004fa8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f9c:	4b53      	ldr	r3, [pc, #332]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	4a52      	ldr	r2, [pc, #328]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8004fa2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004fa6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fa8:	4b50      	ldr	r3, [pc, #320]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	494d      	ldr	r1, [pc, #308]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 0301 	and.w	r3, r3, #1
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d044      	beq.n	8005050 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d107      	bne.n	8004fde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fce:	4b47      	ldr	r3, [pc, #284]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d119      	bne.n	800500e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e07f      	b.n	80050de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d003      	beq.n	8004fee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fea:	2b03      	cmp	r3, #3
 8004fec:	d107      	bne.n	8004ffe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fee:	4b3f      	ldr	r3, [pc, #252]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d109      	bne.n	800500e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e06f      	b.n	80050de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ffe:	4b3b      	ldr	r3, [pc, #236]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0302 	and.w	r3, r3, #2
 8005006:	2b00      	cmp	r3, #0
 8005008:	d101      	bne.n	800500e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e067      	b.n	80050de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800500e:	4b37      	ldr	r3, [pc, #220]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f023 0203 	bic.w	r2, r3, #3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	4934      	ldr	r1, [pc, #208]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 800501c:	4313      	orrs	r3, r2
 800501e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005020:	f7fd f898 	bl	8002154 <HAL_GetTick>
 8005024:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005026:	e00a      	b.n	800503e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005028:	f7fd f894 	bl	8002154 <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	f241 3288 	movw	r2, #5000	; 0x1388
 8005036:	4293      	cmp	r3, r2
 8005038:	d901      	bls.n	800503e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e04f      	b.n	80050de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800503e:	4b2b      	ldr	r3, [pc, #172]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f003 020c 	and.w	r2, r3, #12
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	429a      	cmp	r2, r3
 800504e:	d1eb      	bne.n	8005028 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005050:	4b25      	ldr	r3, [pc, #148]	; (80050e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0307 	and.w	r3, r3, #7
 8005058:	683a      	ldr	r2, [r7, #0]
 800505a:	429a      	cmp	r2, r3
 800505c:	d20c      	bcs.n	8005078 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800505e:	4b22      	ldr	r3, [pc, #136]	; (80050e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005060:	683a      	ldr	r2, [r7, #0]
 8005062:	b2d2      	uxtb	r2, r2
 8005064:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005066:	4b20      	ldr	r3, [pc, #128]	; (80050e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0307 	and.w	r3, r3, #7
 800506e:	683a      	ldr	r2, [r7, #0]
 8005070:	429a      	cmp	r2, r3
 8005072:	d001      	beq.n	8005078 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e032      	b.n	80050de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0304 	and.w	r3, r3, #4
 8005080:	2b00      	cmp	r3, #0
 8005082:	d008      	beq.n	8005096 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005084:	4b19      	ldr	r3, [pc, #100]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	4916      	ldr	r1, [pc, #88]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8005092:	4313      	orrs	r3, r2
 8005094:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0308 	and.w	r3, r3, #8
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d009      	beq.n	80050b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050a2:	4b12      	ldr	r3, [pc, #72]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	00db      	lsls	r3, r3, #3
 80050b0:	490e      	ldr	r1, [pc, #56]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 80050b2:	4313      	orrs	r3, r2
 80050b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80050b6:	f000 f821 	bl	80050fc <HAL_RCC_GetSysClockFreq>
 80050ba:	4602      	mov	r2, r0
 80050bc:	4b0b      	ldr	r3, [pc, #44]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	091b      	lsrs	r3, r3, #4
 80050c2:	f003 030f 	and.w	r3, r3, #15
 80050c6:	490a      	ldr	r1, [pc, #40]	; (80050f0 <HAL_RCC_ClockConfig+0x1c0>)
 80050c8:	5ccb      	ldrb	r3, [r1, r3]
 80050ca:	fa22 f303 	lsr.w	r3, r2, r3
 80050ce:	4a09      	ldr	r2, [pc, #36]	; (80050f4 <HAL_RCC_ClockConfig+0x1c4>)
 80050d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80050d2:	4b09      	ldr	r3, [pc, #36]	; (80050f8 <HAL_RCC_ClockConfig+0x1c8>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7fc fe60 	bl	8001d9c <HAL_InitTick>

  return HAL_OK;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3710      	adds	r7, #16
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	40023c00 	.word	0x40023c00
 80050ec:	40023800 	.word	0x40023800
 80050f0:	080220c4 	.word	0x080220c4
 80050f4:	20000010 	.word	0x20000010
 80050f8:	20000014 	.word	0x20000014

080050fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050fc:	b5b0      	push	{r4, r5, r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005102:	2100      	movs	r1, #0
 8005104:	6079      	str	r1, [r7, #4]
 8005106:	2100      	movs	r1, #0
 8005108:	60f9      	str	r1, [r7, #12]
 800510a:	2100      	movs	r1, #0
 800510c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800510e:	2100      	movs	r1, #0
 8005110:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005112:	4952      	ldr	r1, [pc, #328]	; (800525c <HAL_RCC_GetSysClockFreq+0x160>)
 8005114:	6889      	ldr	r1, [r1, #8]
 8005116:	f001 010c 	and.w	r1, r1, #12
 800511a:	2908      	cmp	r1, #8
 800511c:	d00d      	beq.n	800513a <HAL_RCC_GetSysClockFreq+0x3e>
 800511e:	2908      	cmp	r1, #8
 8005120:	f200 8094 	bhi.w	800524c <HAL_RCC_GetSysClockFreq+0x150>
 8005124:	2900      	cmp	r1, #0
 8005126:	d002      	beq.n	800512e <HAL_RCC_GetSysClockFreq+0x32>
 8005128:	2904      	cmp	r1, #4
 800512a:	d003      	beq.n	8005134 <HAL_RCC_GetSysClockFreq+0x38>
 800512c:	e08e      	b.n	800524c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800512e:	4b4c      	ldr	r3, [pc, #304]	; (8005260 <HAL_RCC_GetSysClockFreq+0x164>)
 8005130:	60bb      	str	r3, [r7, #8]
       break;
 8005132:	e08e      	b.n	8005252 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005134:	4b4b      	ldr	r3, [pc, #300]	; (8005264 <HAL_RCC_GetSysClockFreq+0x168>)
 8005136:	60bb      	str	r3, [r7, #8]
      break;
 8005138:	e08b      	b.n	8005252 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800513a:	4948      	ldr	r1, [pc, #288]	; (800525c <HAL_RCC_GetSysClockFreq+0x160>)
 800513c:	6849      	ldr	r1, [r1, #4]
 800513e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8005142:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005144:	4945      	ldr	r1, [pc, #276]	; (800525c <HAL_RCC_GetSysClockFreq+0x160>)
 8005146:	6849      	ldr	r1, [r1, #4]
 8005148:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800514c:	2900      	cmp	r1, #0
 800514e:	d024      	beq.n	800519a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005150:	4942      	ldr	r1, [pc, #264]	; (800525c <HAL_RCC_GetSysClockFreq+0x160>)
 8005152:	6849      	ldr	r1, [r1, #4]
 8005154:	0989      	lsrs	r1, r1, #6
 8005156:	4608      	mov	r0, r1
 8005158:	f04f 0100 	mov.w	r1, #0
 800515c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005160:	f04f 0500 	mov.w	r5, #0
 8005164:	ea00 0204 	and.w	r2, r0, r4
 8005168:	ea01 0305 	and.w	r3, r1, r5
 800516c:	493d      	ldr	r1, [pc, #244]	; (8005264 <HAL_RCC_GetSysClockFreq+0x168>)
 800516e:	fb01 f003 	mul.w	r0, r1, r3
 8005172:	2100      	movs	r1, #0
 8005174:	fb01 f102 	mul.w	r1, r1, r2
 8005178:	1844      	adds	r4, r0, r1
 800517a:	493a      	ldr	r1, [pc, #232]	; (8005264 <HAL_RCC_GetSysClockFreq+0x168>)
 800517c:	fba2 0101 	umull	r0, r1, r2, r1
 8005180:	1863      	adds	r3, r4, r1
 8005182:	4619      	mov	r1, r3
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	461a      	mov	r2, r3
 8005188:	f04f 0300 	mov.w	r3, #0
 800518c:	f7fb fcde 	bl	8000b4c <__aeabi_uldivmod>
 8005190:	4602      	mov	r2, r0
 8005192:	460b      	mov	r3, r1
 8005194:	4613      	mov	r3, r2
 8005196:	60fb      	str	r3, [r7, #12]
 8005198:	e04a      	b.n	8005230 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800519a:	4b30      	ldr	r3, [pc, #192]	; (800525c <HAL_RCC_GetSysClockFreq+0x160>)
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	099b      	lsrs	r3, r3, #6
 80051a0:	461a      	mov	r2, r3
 80051a2:	f04f 0300 	mov.w	r3, #0
 80051a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80051aa:	f04f 0100 	mov.w	r1, #0
 80051ae:	ea02 0400 	and.w	r4, r2, r0
 80051b2:	ea03 0501 	and.w	r5, r3, r1
 80051b6:	4620      	mov	r0, r4
 80051b8:	4629      	mov	r1, r5
 80051ba:	f04f 0200 	mov.w	r2, #0
 80051be:	f04f 0300 	mov.w	r3, #0
 80051c2:	014b      	lsls	r3, r1, #5
 80051c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80051c8:	0142      	lsls	r2, r0, #5
 80051ca:	4610      	mov	r0, r2
 80051cc:	4619      	mov	r1, r3
 80051ce:	1b00      	subs	r0, r0, r4
 80051d0:	eb61 0105 	sbc.w	r1, r1, r5
 80051d4:	f04f 0200 	mov.w	r2, #0
 80051d8:	f04f 0300 	mov.w	r3, #0
 80051dc:	018b      	lsls	r3, r1, #6
 80051de:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80051e2:	0182      	lsls	r2, r0, #6
 80051e4:	1a12      	subs	r2, r2, r0
 80051e6:	eb63 0301 	sbc.w	r3, r3, r1
 80051ea:	f04f 0000 	mov.w	r0, #0
 80051ee:	f04f 0100 	mov.w	r1, #0
 80051f2:	00d9      	lsls	r1, r3, #3
 80051f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80051f8:	00d0      	lsls	r0, r2, #3
 80051fa:	4602      	mov	r2, r0
 80051fc:	460b      	mov	r3, r1
 80051fe:	1912      	adds	r2, r2, r4
 8005200:	eb45 0303 	adc.w	r3, r5, r3
 8005204:	f04f 0000 	mov.w	r0, #0
 8005208:	f04f 0100 	mov.w	r1, #0
 800520c:	0299      	lsls	r1, r3, #10
 800520e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005212:	0290      	lsls	r0, r2, #10
 8005214:	4602      	mov	r2, r0
 8005216:	460b      	mov	r3, r1
 8005218:	4610      	mov	r0, r2
 800521a:	4619      	mov	r1, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	461a      	mov	r2, r3
 8005220:	f04f 0300 	mov.w	r3, #0
 8005224:	f7fb fc92 	bl	8000b4c <__aeabi_uldivmod>
 8005228:	4602      	mov	r2, r0
 800522a:	460b      	mov	r3, r1
 800522c:	4613      	mov	r3, r2
 800522e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005230:	4b0a      	ldr	r3, [pc, #40]	; (800525c <HAL_RCC_GetSysClockFreq+0x160>)
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	0c1b      	lsrs	r3, r3, #16
 8005236:	f003 0303 	and.w	r3, r3, #3
 800523a:	3301      	adds	r3, #1
 800523c:	005b      	lsls	r3, r3, #1
 800523e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	fbb2 f3f3 	udiv	r3, r2, r3
 8005248:	60bb      	str	r3, [r7, #8]
      break;
 800524a:	e002      	b.n	8005252 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800524c:	4b04      	ldr	r3, [pc, #16]	; (8005260 <HAL_RCC_GetSysClockFreq+0x164>)
 800524e:	60bb      	str	r3, [r7, #8]
      break;
 8005250:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005252:	68bb      	ldr	r3, [r7, #8]
}
 8005254:	4618      	mov	r0, r3
 8005256:	3710      	adds	r7, #16
 8005258:	46bd      	mov	sp, r7
 800525a:	bdb0      	pop	{r4, r5, r7, pc}
 800525c:	40023800 	.word	0x40023800
 8005260:	00f42400 	.word	0x00f42400
 8005264:	017d7840 	.word	0x017d7840

08005268 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005268:	b480      	push	{r7}
 800526a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800526c:	4b03      	ldr	r3, [pc, #12]	; (800527c <HAL_RCC_GetHCLKFreq+0x14>)
 800526e:	681b      	ldr	r3, [r3, #0]
}
 8005270:	4618      	mov	r0, r3
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	20000010 	.word	0x20000010

08005280 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005284:	f7ff fff0 	bl	8005268 <HAL_RCC_GetHCLKFreq>
 8005288:	4602      	mov	r2, r0
 800528a:	4b05      	ldr	r3, [pc, #20]	; (80052a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	0a9b      	lsrs	r3, r3, #10
 8005290:	f003 0307 	and.w	r3, r3, #7
 8005294:	4903      	ldr	r1, [pc, #12]	; (80052a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005296:	5ccb      	ldrb	r3, [r1, r3]
 8005298:	fa22 f303 	lsr.w	r3, r2, r3
}
 800529c:	4618      	mov	r0, r3
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	40023800 	.word	0x40023800
 80052a4:	080220d4 	.word	0x080220d4

080052a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80052ac:	f7ff ffdc 	bl	8005268 <HAL_RCC_GetHCLKFreq>
 80052b0:	4602      	mov	r2, r0
 80052b2:	4b05      	ldr	r3, [pc, #20]	; (80052c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	0b5b      	lsrs	r3, r3, #13
 80052b8:	f003 0307 	and.w	r3, r3, #7
 80052bc:	4903      	ldr	r1, [pc, #12]	; (80052cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80052be:	5ccb      	ldrb	r3, [r1, r3]
 80052c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	40023800 	.word	0x40023800
 80052cc:	080220d4 	.word	0x080220d4

080052d0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	220f      	movs	r2, #15
 80052de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80052e0:	4b12      	ldr	r3, [pc, #72]	; (800532c <HAL_RCC_GetClockConfig+0x5c>)
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	f003 0203 	and.w	r2, r3, #3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80052ec:	4b0f      	ldr	r3, [pc, #60]	; (800532c <HAL_RCC_GetClockConfig+0x5c>)
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80052f8:	4b0c      	ldr	r3, [pc, #48]	; (800532c <HAL_RCC_GetClockConfig+0x5c>)
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005304:	4b09      	ldr	r3, [pc, #36]	; (800532c <HAL_RCC_GetClockConfig+0x5c>)
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	08db      	lsrs	r3, r3, #3
 800530a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005312:	4b07      	ldr	r3, [pc, #28]	; (8005330 <HAL_RCC_GetClockConfig+0x60>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 0207 	and.w	r2, r3, #7
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	601a      	str	r2, [r3, #0]
}
 800531e:	bf00      	nop
 8005320:	370c      	adds	r7, #12
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop
 800532c:	40023800 	.word	0x40023800
 8005330:	40023c00 	.word	0x40023c00

08005334 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b086      	sub	sp, #24
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800533c:	2300      	movs	r3, #0
 800533e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005340:	2300      	movs	r3, #0
 8005342:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0301 	and.w	r3, r3, #1
 800534c:	2b00      	cmp	r3, #0
 800534e:	d105      	bne.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005358:	2b00      	cmp	r3, #0
 800535a:	d035      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800535c:	4b62      	ldr	r3, [pc, #392]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800535e:	2200      	movs	r2, #0
 8005360:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005362:	f7fc fef7 	bl	8002154 <HAL_GetTick>
 8005366:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005368:	e008      	b.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800536a:	f7fc fef3 	bl	8002154 <HAL_GetTick>
 800536e:	4602      	mov	r2, r0
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	2b02      	cmp	r3, #2
 8005376:	d901      	bls.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005378:	2303      	movs	r3, #3
 800537a:	e0b0      	b.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800537c:	4b5b      	ldr	r3, [pc, #364]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005384:	2b00      	cmp	r3, #0
 8005386:	d1f0      	bne.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	019a      	lsls	r2, r3, #6
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	071b      	lsls	r3, r3, #28
 8005394:	4955      	ldr	r1, [pc, #340]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005396:	4313      	orrs	r3, r2
 8005398:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800539c:	4b52      	ldr	r3, [pc, #328]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800539e:	2201      	movs	r2, #1
 80053a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80053a2:	f7fc fed7 	bl	8002154 <HAL_GetTick>
 80053a6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80053a8:	e008      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80053aa:	f7fc fed3 	bl	8002154 <HAL_GetTick>
 80053ae:	4602      	mov	r2, r0
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	d901      	bls.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053b8:	2303      	movs	r3, #3
 80053ba:	e090      	b.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80053bc:	4b4b      	ldr	r3, [pc, #300]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d0f0      	beq.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0302 	and.w	r3, r3, #2
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	f000 8083 	beq.w	80054dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80053d6:	2300      	movs	r3, #0
 80053d8:	60fb      	str	r3, [r7, #12]
 80053da:	4b44      	ldr	r3, [pc, #272]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053de:	4a43      	ldr	r2, [pc, #268]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053e4:	6413      	str	r3, [r2, #64]	; 0x40
 80053e6:	4b41      	ldr	r3, [pc, #260]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053ee:	60fb      	str	r3, [r7, #12]
 80053f0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80053f2:	4b3f      	ldr	r3, [pc, #252]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a3e      	ldr	r2, [pc, #248]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80053f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053fc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80053fe:	f7fc fea9 	bl	8002154 <HAL_GetTick>
 8005402:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005404:	e008      	b.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005406:	f7fc fea5 	bl	8002154 <HAL_GetTick>
 800540a:	4602      	mov	r2, r0
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	1ad3      	subs	r3, r2, r3
 8005410:	2b02      	cmp	r3, #2
 8005412:	d901      	bls.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005414:	2303      	movs	r3, #3
 8005416:	e062      	b.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005418:	4b35      	ldr	r3, [pc, #212]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005420:	2b00      	cmp	r3, #0
 8005422:	d0f0      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005424:	4b31      	ldr	r3, [pc, #196]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005428:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800542c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d02f      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800543c:	693a      	ldr	r2, [r7, #16]
 800543e:	429a      	cmp	r2, r3
 8005440:	d028      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005442:	4b2a      	ldr	r3, [pc, #168]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005446:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800544a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800544c:	4b29      	ldr	r3, [pc, #164]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800544e:	2201      	movs	r2, #1
 8005450:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005452:	4b28      	ldr	r3, [pc, #160]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005454:	2200      	movs	r2, #0
 8005456:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005458:	4a24      	ldr	r2, [pc, #144]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800545e:	4b23      	ldr	r3, [pc, #140]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005462:	f003 0301 	and.w	r3, r3, #1
 8005466:	2b01      	cmp	r3, #1
 8005468:	d114      	bne.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800546a:	f7fc fe73 	bl	8002154 <HAL_GetTick>
 800546e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005470:	e00a      	b.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005472:	f7fc fe6f 	bl	8002154 <HAL_GetTick>
 8005476:	4602      	mov	r2, r0
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	1ad3      	subs	r3, r2, r3
 800547c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005480:	4293      	cmp	r3, r2
 8005482:	d901      	bls.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005484:	2303      	movs	r3, #3
 8005486:	e02a      	b.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005488:	4b18      	ldr	r3, [pc, #96]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800548a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800548c:	f003 0302 	and.w	r3, r3, #2
 8005490:	2b00      	cmp	r3, #0
 8005492:	d0ee      	beq.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800549c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054a0:	d10d      	bne.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80054a2:	4b12      	ldr	r3, [pc, #72]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80054b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054b6:	490d      	ldr	r1, [pc, #52]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054b8:	4313      	orrs	r3, r2
 80054ba:	608b      	str	r3, [r1, #8]
 80054bc:	e005      	b.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x196>
 80054be:	4b0b      	ldr	r3, [pc, #44]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	4a0a      	ldr	r2, [pc, #40]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054c4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80054c8:	6093      	str	r3, [r2, #8]
 80054ca:	4b08      	ldr	r3, [pc, #32]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054d6:	4905      	ldr	r1, [pc, #20]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054d8:	4313      	orrs	r3, r2
 80054da:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3718      	adds	r7, #24
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	42470068 	.word	0x42470068
 80054ec:	40023800 	.word	0x40023800
 80054f0:	40007000 	.word	0x40007000
 80054f4:	42470e40 	.word	0x42470e40

080054f8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d101      	bne.n	800550a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e083      	b.n	8005612 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	7f5b      	ldrb	r3, [r3, #29]
 800550e:	b2db      	uxtb	r3, r3
 8005510:	2b00      	cmp	r3, #0
 8005512:	d105      	bne.n	8005520 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f7fc fb3c 	bl	8001b98 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2202      	movs	r2, #2
 8005524:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	22ca      	movs	r2, #202	; 0xca
 800552c:	625a      	str	r2, [r3, #36]	; 0x24
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2253      	movs	r2, #83	; 0x53
 8005534:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 faa8 	bl	8005a8c <RTC_EnterInitMode>
 800553c:	4603      	mov	r3, r0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d008      	beq.n	8005554 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	22ff      	movs	r2, #255	; 0xff
 8005548:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2204      	movs	r2, #4
 800554e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e05e      	b.n	8005612 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	6812      	ldr	r2, [r2, #0]
 800555e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005562:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005566:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	6899      	ldr	r1, [r3, #8]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	685a      	ldr	r2, [r3, #4]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	431a      	orrs	r2, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	695b      	ldr	r3, [r3, #20]
 800557c:	431a      	orrs	r2, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	430a      	orrs	r2, r1
 8005584:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	68d2      	ldr	r2, [r2, #12]
 800558e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	6919      	ldr	r1, [r3, #16]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	041a      	lsls	r2, r3, #16
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	430a      	orrs	r2, r1
 80055a2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68da      	ldr	r2, [r3, #12]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055b2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	f003 0320 	and.w	r3, r3, #32
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d10e      	bne.n	80055e0 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 fa3a 	bl	8005a3c <HAL_RTC_WaitForSynchro>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d008      	beq.n	80055e0 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	22ff      	movs	r2, #255	; 0xff
 80055d4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2204      	movs	r2, #4
 80055da:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	e018      	b.n	8005612 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80055ee:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	699a      	ldr	r2, [r3, #24]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	430a      	orrs	r2, r1
 8005600:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	22ff      	movs	r2, #255	; 0xff
 8005608:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2201      	movs	r2, #1
 800560e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005610:	2300      	movs	r3, #0
  }
}
 8005612:	4618      	mov	r0, r3
 8005614:	3708      	adds	r7, #8
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}

0800561a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800561a:	b590      	push	{r4, r7, lr}
 800561c:	b087      	sub	sp, #28
 800561e:	af00      	add	r7, sp, #0
 8005620:	60f8      	str	r0, [r7, #12]
 8005622:	60b9      	str	r1, [r7, #8]
 8005624:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005626:	2300      	movs	r3, #0
 8005628:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	7f1b      	ldrb	r3, [r3, #28]
 800562e:	2b01      	cmp	r3, #1
 8005630:	d101      	bne.n	8005636 <HAL_RTC_SetTime+0x1c>
 8005632:	2302      	movs	r3, #2
 8005634:	e0aa      	b.n	800578c <HAL_RTC_SetTime+0x172>
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2201      	movs	r2, #1
 800563a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2202      	movs	r2, #2
 8005640:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d126      	bne.n	8005696 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005652:	2b00      	cmp	r3, #0
 8005654:	d102      	bne.n	800565c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	2200      	movs	r2, #0
 800565a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	4618      	mov	r0, r3
 8005662:	f000 fa3f 	bl	8005ae4 <RTC_ByteToBcd2>
 8005666:	4603      	mov	r3, r0
 8005668:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	785b      	ldrb	r3, [r3, #1]
 800566e:	4618      	mov	r0, r3
 8005670:	f000 fa38 	bl	8005ae4 <RTC_ByteToBcd2>
 8005674:	4603      	mov	r3, r0
 8005676:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005678:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	789b      	ldrb	r3, [r3, #2]
 800567e:	4618      	mov	r0, r3
 8005680:	f000 fa30 	bl	8005ae4 <RTC_ByteToBcd2>
 8005684:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005686:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	78db      	ldrb	r3, [r3, #3]
 800568e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005690:	4313      	orrs	r3, r2
 8005692:	617b      	str	r3, [r7, #20]
 8005694:	e018      	b.n	80056c8 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d102      	bne.n	80056aa <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	2200      	movs	r2, #0
 80056a8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	785b      	ldrb	r3, [r3, #1]
 80056b4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80056b6:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80056b8:	68ba      	ldr	r2, [r7, #8]
 80056ba:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80056bc:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	78db      	ldrb	r3, [r3, #3]
 80056c2:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80056c4:	4313      	orrs	r3, r2
 80056c6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	22ca      	movs	r2, #202	; 0xca
 80056ce:	625a      	str	r2, [r3, #36]	; 0x24
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2253      	movs	r2, #83	; 0x53
 80056d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80056d8:	68f8      	ldr	r0, [r7, #12]
 80056da:	f000 f9d7 	bl	8005a8c <RTC_EnterInitMode>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d00b      	beq.n	80056fc <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	22ff      	movs	r2, #255	; 0xff
 80056ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2204      	movs	r2, #4
 80056f0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2200      	movs	r2, #0
 80056f6:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	e047      	b.n	800578c <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005706:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800570a:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	689a      	ldr	r2, [r3, #8]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800571a:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	6899      	ldr	r1, [r3, #8]
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	68da      	ldr	r2, [r3, #12]
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	431a      	orrs	r2, r3
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	430a      	orrs	r2, r1
 8005732:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68da      	ldr	r2, [r3, #12]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005742:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	f003 0320 	and.w	r3, r3, #32
 800574e:	2b00      	cmp	r3, #0
 8005750:	d111      	bne.n	8005776 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005752:	68f8      	ldr	r0, [r7, #12]
 8005754:	f000 f972 	bl	8005a3c <HAL_RTC_WaitForSynchro>
 8005758:	4603      	mov	r3, r0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00b      	beq.n	8005776 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	22ff      	movs	r2, #255	; 0xff
 8005764:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2204      	movs	r2, #4
 800576a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2200      	movs	r2, #0
 8005770:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e00a      	b.n	800578c <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	22ff      	movs	r2, #255	; 0xff
 800577c:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2201      	movs	r2, #1
 8005782:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2200      	movs	r2, #0
 8005788:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800578a:	2300      	movs	r3, #0
  }
}
 800578c:	4618      	mov	r0, r3
 800578e:	371c      	adds	r7, #28
 8005790:	46bd      	mov	sp, r7
 8005792:	bd90      	pop	{r4, r7, pc}

08005794 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b086      	sub	sp, #24
 8005798:	af00      	add	r7, sp, #0
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80057a0:	2300      	movs	r3, #0
 80057a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80057c6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80057ca:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	0c1b      	lsrs	r3, r3, #16
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057d6:	b2da      	uxtb	r2, r3
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	0a1b      	lsrs	r3, r3, #8
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057e6:	b2da      	uxtb	r2, r3
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057f4:	b2da      	uxtb	r2, r3
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	0c1b      	lsrs	r3, r3, #16
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005804:	b2da      	uxtb	r2, r3
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d11a      	bne.n	8005846 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	4618      	mov	r0, r3
 8005816:	f000 f983 	bl	8005b20 <RTC_Bcd2ToByte>
 800581a:	4603      	mov	r3, r0
 800581c:	461a      	mov	r2, r3
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	785b      	ldrb	r3, [r3, #1]
 8005826:	4618      	mov	r0, r3
 8005828:	f000 f97a 	bl	8005b20 <RTC_Bcd2ToByte>
 800582c:	4603      	mov	r3, r0
 800582e:	461a      	mov	r2, r3
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	789b      	ldrb	r3, [r3, #2]
 8005838:	4618      	mov	r0, r3
 800583a:	f000 f971 	bl	8005b20 <RTC_Bcd2ToByte>
 800583e:	4603      	mov	r3, r0
 8005840:	461a      	mov	r2, r3
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005846:	2300      	movs	r3, #0
}
 8005848:	4618      	mov	r0, r3
 800584a:	3718      	adds	r7, #24
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005850:	b590      	push	{r4, r7, lr}
 8005852:	b087      	sub	sp, #28
 8005854:	af00      	add	r7, sp, #0
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800585c:	2300      	movs	r3, #0
 800585e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	7f1b      	ldrb	r3, [r3, #28]
 8005864:	2b01      	cmp	r3, #1
 8005866:	d101      	bne.n	800586c <HAL_RTC_SetDate+0x1c>
 8005868:	2302      	movs	r3, #2
 800586a:	e094      	b.n	8005996 <HAL_RTC_SetDate+0x146>
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2201      	movs	r2, #1
 8005870:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2202      	movs	r2, #2
 8005876:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d10e      	bne.n	800589c <HAL_RTC_SetDate+0x4c>
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	785b      	ldrb	r3, [r3, #1]
 8005882:	f003 0310 	and.w	r3, r3, #16
 8005886:	2b00      	cmp	r3, #0
 8005888:	d008      	beq.n	800589c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	785b      	ldrb	r3, [r3, #1]
 800588e:	f023 0310 	bic.w	r3, r3, #16
 8005892:	b2db      	uxtb	r3, r3
 8005894:	330a      	adds	r3, #10
 8005896:	b2da      	uxtb	r2, r3
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d11c      	bne.n	80058dc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	78db      	ldrb	r3, [r3, #3]
 80058a6:	4618      	mov	r0, r3
 80058a8:	f000 f91c 	bl	8005ae4 <RTC_ByteToBcd2>
 80058ac:	4603      	mov	r3, r0
 80058ae:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	785b      	ldrb	r3, [r3, #1]
 80058b4:	4618      	mov	r0, r3
 80058b6:	f000 f915 	bl	8005ae4 <RTC_ByteToBcd2>
 80058ba:	4603      	mov	r3, r0
 80058bc:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80058be:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	789b      	ldrb	r3, [r3, #2]
 80058c4:	4618      	mov	r0, r3
 80058c6:	f000 f90d 	bl	8005ae4 <RTC_ByteToBcd2>
 80058ca:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80058cc:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80058d6:	4313      	orrs	r3, r2
 80058d8:	617b      	str	r3, [r7, #20]
 80058da:	e00e      	b.n	80058fa <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	78db      	ldrb	r3, [r3, #3]
 80058e0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	785b      	ldrb	r3, [r3, #1]
 80058e6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80058e8:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80058ea:	68ba      	ldr	r2, [r7, #8]
 80058ec:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80058ee:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80058f6:	4313      	orrs	r3, r2
 80058f8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	22ca      	movs	r2, #202	; 0xca
 8005900:	625a      	str	r2, [r3, #36]	; 0x24
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2253      	movs	r2, #83	; 0x53
 8005908:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800590a:	68f8      	ldr	r0, [r7, #12]
 800590c:	f000 f8be 	bl	8005a8c <RTC_EnterInitMode>
 8005910:	4603      	mov	r3, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d00b      	beq.n	800592e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	22ff      	movs	r2, #255	; 0xff
 800591c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2204      	movs	r2, #4
 8005922:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2200      	movs	r2, #0
 8005928:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e033      	b.n	8005996 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005938:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800593c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68da      	ldr	r2, [r3, #12]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800594c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	f003 0320 	and.w	r3, r3, #32
 8005958:	2b00      	cmp	r3, #0
 800595a:	d111      	bne.n	8005980 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800595c:	68f8      	ldr	r0, [r7, #12]
 800595e:	f000 f86d 	bl	8005a3c <HAL_RTC_WaitForSynchro>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d00b      	beq.n	8005980 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	22ff      	movs	r2, #255	; 0xff
 800596e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2204      	movs	r2, #4
 8005974:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2200      	movs	r2, #0
 800597a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	e00a      	b.n	8005996 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	22ff      	movs	r2, #255	; 0xff
 8005986:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2201      	movs	r2, #1
 800598c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2200      	movs	r2, #0
 8005992:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005994:	2300      	movs	r3, #0
  }
}
 8005996:	4618      	mov	r0, r3
 8005998:	371c      	adds	r7, #28
 800599a:	46bd      	mov	sp, r7
 800599c:	bd90      	pop	{r4, r7, pc}

0800599e <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800599e:	b580      	push	{r7, lr}
 80059a0:	b086      	sub	sp, #24
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	60f8      	str	r0, [r7, #12]
 80059a6:	60b9      	str	r1, [r7, #8]
 80059a8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80059aa:	2300      	movs	r3, #0
 80059ac:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80059b8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80059bc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	0c1b      	lsrs	r3, r3, #16
 80059c2:	b2da      	uxtb	r2, r3
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	0a1b      	lsrs	r3, r3, #8
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	f003 031f 	and.w	r3, r3, #31
 80059d2:	b2da      	uxtb	r2, r3
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059e0:	b2da      	uxtb	r2, r3
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	0b5b      	lsrs	r3, r3, #13
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	f003 0307 	and.w	r3, r3, #7
 80059f0:	b2da      	uxtb	r2, r3
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d11a      	bne.n	8005a32 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	78db      	ldrb	r3, [r3, #3]
 8005a00:	4618      	mov	r0, r3
 8005a02:	f000 f88d 	bl	8005b20 <RTC_Bcd2ToByte>
 8005a06:	4603      	mov	r3, r0
 8005a08:	461a      	mov	r2, r3
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	785b      	ldrb	r3, [r3, #1]
 8005a12:	4618      	mov	r0, r3
 8005a14:	f000 f884 	bl	8005b20 <RTC_Bcd2ToByte>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	789b      	ldrb	r3, [r3, #2]
 8005a24:	4618      	mov	r0, r3
 8005a26:	f000 f87b 	bl	8005b20 <RTC_Bcd2ToByte>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005a32:	2300      	movs	r3, #0
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3718      	adds	r7, #24
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a44:	2300      	movs	r3, #0
 8005a46:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68da      	ldr	r2, [r3, #12]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005a56:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005a58:	f7fc fb7c 	bl	8002154 <HAL_GetTick>
 8005a5c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005a5e:	e009      	b.n	8005a74 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005a60:	f7fc fb78 	bl	8002154 <HAL_GetTick>
 8005a64:	4602      	mov	r2, r0
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a6e:	d901      	bls.n	8005a74 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005a70:	2303      	movs	r3, #3
 8005a72:	e007      	b.n	8005a84 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	f003 0320 	and.w	r3, r3, #32
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d0ee      	beq.n	8005a60 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005a82:	2300      	movs	r3, #0
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3710      	adds	r7, #16
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a94:	2300      	movs	r3, #0
 8005a96:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d119      	bne.n	8005ada <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f04f 32ff 	mov.w	r2, #4294967295
 8005aae:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005ab0:	f7fc fb50 	bl	8002154 <HAL_GetTick>
 8005ab4:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005ab6:	e009      	b.n	8005acc <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005ab8:	f7fc fb4c 	bl	8002154 <HAL_GetTick>
 8005abc:	4602      	mov	r2, r0
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ac6:	d901      	bls.n	8005acc <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8005ac8:	2303      	movs	r3, #3
 8005aca:	e007      	b.n	8005adc <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d0ee      	beq.n	8005ab8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8005ada:	2300      	movs	r3, #0
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3710      	adds	r7, #16
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}

08005ae4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b085      	sub	sp, #20
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	4603      	mov	r3, r0
 8005aec:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005aee:	2300      	movs	r3, #0
 8005af0:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8005af2:	e005      	b.n	8005b00 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	3301      	adds	r3, #1
 8005af8:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8005afa:	79fb      	ldrb	r3, [r7, #7]
 8005afc:	3b0a      	subs	r3, #10
 8005afe:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8005b00:	79fb      	ldrb	r3, [r7, #7]
 8005b02:	2b09      	cmp	r3, #9
 8005b04:	d8f6      	bhi.n	8005af4 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	011b      	lsls	r3, r3, #4
 8005b0c:	b2da      	uxtb	r2, r3
 8005b0e:	79fb      	ldrb	r3, [r7, #7]
 8005b10:	4313      	orrs	r3, r2
 8005b12:	b2db      	uxtb	r3, r3
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3714      	adds	r7, #20
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b085      	sub	sp, #20
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	4603      	mov	r3, r0
 8005b28:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8005b2e:	79fb      	ldrb	r3, [r7, #7]
 8005b30:	091b      	lsrs	r3, r3, #4
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	461a      	mov	r2, r3
 8005b36:	4613      	mov	r3, r2
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	4413      	add	r3, r2
 8005b3c:	005b      	lsls	r3, r3, #1
 8005b3e:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8005b40:	79fb      	ldrb	r3, [r7, #7]
 8005b42:	f003 030f 	and.w	r3, r3, #15
 8005b46:	b2da      	uxtb	r2, r3
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	4413      	add	r3, r2
 8005b4e:	b2db      	uxtb	r3, r3
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3714      	adds	r7, #20
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b082      	sub	sp, #8
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d101      	bne.n	8005b6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e07b      	b.n	8005c66 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d108      	bne.n	8005b88 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b7e:	d009      	beq.n	8005b94 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	61da      	str	r2, [r3, #28]
 8005b86:	e005      	b.n	8005b94 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d106      	bne.n	8005bb4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f7fc f808 	bl	8001bc4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2202      	movs	r2, #2
 8005bb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005bdc:	431a      	orrs	r2, r3
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005be6:	431a      	orrs	r2, r3
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	691b      	ldr	r3, [r3, #16]
 8005bec:	f003 0302 	and.w	r3, r3, #2
 8005bf0:	431a      	orrs	r2, r3
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	695b      	ldr	r3, [r3, #20]
 8005bf6:	f003 0301 	and.w	r3, r3, #1
 8005bfa:	431a      	orrs	r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	699b      	ldr	r3, [r3, #24]
 8005c00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c04:	431a      	orrs	r2, r3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	69db      	ldr	r3, [r3, #28]
 8005c0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c0e:	431a      	orrs	r2, r3
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6a1b      	ldr	r3, [r3, #32]
 8005c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c18:	ea42 0103 	orr.w	r1, r2, r3
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c20:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	430a      	orrs	r2, r1
 8005c2a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	699b      	ldr	r3, [r3, #24]
 8005c30:	0c1b      	lsrs	r3, r3, #16
 8005c32:	f003 0104 	and.w	r1, r3, #4
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3a:	f003 0210 	and.w	r2, r3, #16
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	430a      	orrs	r2, r1
 8005c44:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	69da      	ldr	r2, [r3, #28]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c54:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3708      	adds	r7, #8
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}

08005c6e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c6e:	b580      	push	{r7, lr}
 8005c70:	b082      	sub	sp, #8
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d101      	bne.n	8005c80 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	e041      	b.n	8005d04 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d106      	bne.n	8005c9a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f7fb ffdd 	bl	8001c54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2202      	movs	r2, #2
 8005c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	3304      	adds	r3, #4
 8005caa:	4619      	mov	r1, r3
 8005cac:	4610      	mov	r0, r2
 8005cae:	f000 fa95 	bl	80061dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2201      	movs	r2, #1
 8005cce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2201      	movs	r2, #1
 8005cee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d02:	2300      	movs	r3, #0
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3708      	adds	r7, #8
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b085      	sub	sp, #20
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d001      	beq.n	8005d24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	e04e      	b.n	8005dc2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2202      	movs	r2, #2
 8005d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68da      	ldr	r2, [r3, #12]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f042 0201 	orr.w	r2, r2, #1
 8005d3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a23      	ldr	r2, [pc, #140]	; (8005dd0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d022      	beq.n	8005d8c <HAL_TIM_Base_Start_IT+0x80>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d4e:	d01d      	beq.n	8005d8c <HAL_TIM_Base_Start_IT+0x80>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a1f      	ldr	r2, [pc, #124]	; (8005dd4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d018      	beq.n	8005d8c <HAL_TIM_Base_Start_IT+0x80>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a1e      	ldr	r2, [pc, #120]	; (8005dd8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d013      	beq.n	8005d8c <HAL_TIM_Base_Start_IT+0x80>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a1c      	ldr	r2, [pc, #112]	; (8005ddc <HAL_TIM_Base_Start_IT+0xd0>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d00e      	beq.n	8005d8c <HAL_TIM_Base_Start_IT+0x80>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a1b      	ldr	r2, [pc, #108]	; (8005de0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d009      	beq.n	8005d8c <HAL_TIM_Base_Start_IT+0x80>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a19      	ldr	r2, [pc, #100]	; (8005de4 <HAL_TIM_Base_Start_IT+0xd8>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d004      	beq.n	8005d8c <HAL_TIM_Base_Start_IT+0x80>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a18      	ldr	r2, [pc, #96]	; (8005de8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d111      	bne.n	8005db0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	f003 0307 	and.w	r3, r3, #7
 8005d96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2b06      	cmp	r3, #6
 8005d9c:	d010      	beq.n	8005dc0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f042 0201 	orr.w	r2, r2, #1
 8005dac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dae:	e007      	b.n	8005dc0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f042 0201 	orr.w	r2, r2, #1
 8005dbe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005dc0:	2300      	movs	r3, #0
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3714      	adds	r7, #20
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop
 8005dd0:	40010000 	.word	0x40010000
 8005dd4:	40000400 	.word	0x40000400
 8005dd8:	40000800 	.word	0x40000800
 8005ddc:	40000c00 	.word	0x40000c00
 8005de0:	40010400 	.word	0x40010400
 8005de4:	40014000 	.word	0x40014000
 8005de8:	40001800 	.word	0x40001800

08005dec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b082      	sub	sp, #8
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	f003 0302 	and.w	r3, r3, #2
 8005dfe:	2b02      	cmp	r3, #2
 8005e00:	d122      	bne.n	8005e48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	f003 0302 	and.w	r3, r3, #2
 8005e0c:	2b02      	cmp	r3, #2
 8005e0e:	d11b      	bne.n	8005e48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f06f 0202 	mvn.w	r2, #2
 8005e18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	699b      	ldr	r3, [r3, #24]
 8005e26:	f003 0303 	and.w	r3, r3, #3
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d003      	beq.n	8005e36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 f9b5 	bl	800619e <HAL_TIM_IC_CaptureCallback>
 8005e34:	e005      	b.n	8005e42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 f9a7 	bl	800618a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f000 f9b8 	bl	80061b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	f003 0304 	and.w	r3, r3, #4
 8005e52:	2b04      	cmp	r3, #4
 8005e54:	d122      	bne.n	8005e9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	f003 0304 	and.w	r3, r3, #4
 8005e60:	2b04      	cmp	r3, #4
 8005e62:	d11b      	bne.n	8005e9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f06f 0204 	mvn.w	r2, #4
 8005e6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2202      	movs	r2, #2
 8005e72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	699b      	ldr	r3, [r3, #24]
 8005e7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d003      	beq.n	8005e8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f000 f98b 	bl	800619e <HAL_TIM_IC_CaptureCallback>
 8005e88:	e005      	b.n	8005e96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 f97d 	bl	800618a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f000 f98e 	bl	80061b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	f003 0308 	and.w	r3, r3, #8
 8005ea6:	2b08      	cmp	r3, #8
 8005ea8:	d122      	bne.n	8005ef0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	f003 0308 	and.w	r3, r3, #8
 8005eb4:	2b08      	cmp	r3, #8
 8005eb6:	d11b      	bne.n	8005ef0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f06f 0208 	mvn.w	r2, #8
 8005ec0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2204      	movs	r2, #4
 8005ec6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	69db      	ldr	r3, [r3, #28]
 8005ece:	f003 0303 	and.w	r3, r3, #3
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d003      	beq.n	8005ede <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 f961 	bl	800619e <HAL_TIM_IC_CaptureCallback>
 8005edc:	e005      	b.n	8005eea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f000 f953 	bl	800618a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 f964 	bl	80061b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	f003 0310 	and.w	r3, r3, #16
 8005efa:	2b10      	cmp	r3, #16
 8005efc:	d122      	bne.n	8005f44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	f003 0310 	and.w	r3, r3, #16
 8005f08:	2b10      	cmp	r3, #16
 8005f0a:	d11b      	bne.n	8005f44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f06f 0210 	mvn.w	r2, #16
 8005f14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2208      	movs	r2, #8
 8005f1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	69db      	ldr	r3, [r3, #28]
 8005f22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d003      	beq.n	8005f32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 f937 	bl	800619e <HAL_TIM_IC_CaptureCallback>
 8005f30:	e005      	b.n	8005f3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 f929 	bl	800618a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f000 f93a 	bl	80061b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	f003 0301 	and.w	r3, r3, #1
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d10e      	bne.n	8005f70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	f003 0301 	and.w	r3, r3, #1
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d107      	bne.n	8005f70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f06f 0201 	mvn.w	r2, #1
 8005f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f7fb fdd0 	bl	8001b10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f7a:	2b80      	cmp	r3, #128	; 0x80
 8005f7c:	d10e      	bne.n	8005f9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f88:	2b80      	cmp	r3, #128	; 0x80
 8005f8a:	d107      	bne.n	8005f9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 fae0 	bl	800655c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fa6:	2b40      	cmp	r3, #64	; 0x40
 8005fa8:	d10e      	bne.n	8005fc8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fb4:	2b40      	cmp	r3, #64	; 0x40
 8005fb6:	d107      	bne.n	8005fc8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005fc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 f8ff 	bl	80061c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	f003 0320 	and.w	r3, r3, #32
 8005fd2:	2b20      	cmp	r3, #32
 8005fd4:	d10e      	bne.n	8005ff4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	f003 0320 	and.w	r3, r3, #32
 8005fe0:	2b20      	cmp	r3, #32
 8005fe2:	d107      	bne.n	8005ff4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f06f 0220 	mvn.w	r2, #32
 8005fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 faaa 	bl	8006548 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ff4:	bf00      	nop
 8005ff6:	3708      	adds	r7, #8
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006006:	2300      	movs	r3, #0
 8006008:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006010:	2b01      	cmp	r3, #1
 8006012:	d101      	bne.n	8006018 <HAL_TIM_ConfigClockSource+0x1c>
 8006014:	2302      	movs	r3, #2
 8006016:	e0b4      	b.n	8006182 <HAL_TIM_ConfigClockSource+0x186>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2202      	movs	r2, #2
 8006024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006036:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800603e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68ba      	ldr	r2, [r7, #8]
 8006046:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006050:	d03e      	beq.n	80060d0 <HAL_TIM_ConfigClockSource+0xd4>
 8006052:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006056:	f200 8087 	bhi.w	8006168 <HAL_TIM_ConfigClockSource+0x16c>
 800605a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800605e:	f000 8086 	beq.w	800616e <HAL_TIM_ConfigClockSource+0x172>
 8006062:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006066:	d87f      	bhi.n	8006168 <HAL_TIM_ConfigClockSource+0x16c>
 8006068:	2b70      	cmp	r3, #112	; 0x70
 800606a:	d01a      	beq.n	80060a2 <HAL_TIM_ConfigClockSource+0xa6>
 800606c:	2b70      	cmp	r3, #112	; 0x70
 800606e:	d87b      	bhi.n	8006168 <HAL_TIM_ConfigClockSource+0x16c>
 8006070:	2b60      	cmp	r3, #96	; 0x60
 8006072:	d050      	beq.n	8006116 <HAL_TIM_ConfigClockSource+0x11a>
 8006074:	2b60      	cmp	r3, #96	; 0x60
 8006076:	d877      	bhi.n	8006168 <HAL_TIM_ConfigClockSource+0x16c>
 8006078:	2b50      	cmp	r3, #80	; 0x50
 800607a:	d03c      	beq.n	80060f6 <HAL_TIM_ConfigClockSource+0xfa>
 800607c:	2b50      	cmp	r3, #80	; 0x50
 800607e:	d873      	bhi.n	8006168 <HAL_TIM_ConfigClockSource+0x16c>
 8006080:	2b40      	cmp	r3, #64	; 0x40
 8006082:	d058      	beq.n	8006136 <HAL_TIM_ConfigClockSource+0x13a>
 8006084:	2b40      	cmp	r3, #64	; 0x40
 8006086:	d86f      	bhi.n	8006168 <HAL_TIM_ConfigClockSource+0x16c>
 8006088:	2b30      	cmp	r3, #48	; 0x30
 800608a:	d064      	beq.n	8006156 <HAL_TIM_ConfigClockSource+0x15a>
 800608c:	2b30      	cmp	r3, #48	; 0x30
 800608e:	d86b      	bhi.n	8006168 <HAL_TIM_ConfigClockSource+0x16c>
 8006090:	2b20      	cmp	r3, #32
 8006092:	d060      	beq.n	8006156 <HAL_TIM_ConfigClockSource+0x15a>
 8006094:	2b20      	cmp	r3, #32
 8006096:	d867      	bhi.n	8006168 <HAL_TIM_ConfigClockSource+0x16c>
 8006098:	2b00      	cmp	r3, #0
 800609a:	d05c      	beq.n	8006156 <HAL_TIM_ConfigClockSource+0x15a>
 800609c:	2b10      	cmp	r3, #16
 800609e:	d05a      	beq.n	8006156 <HAL_TIM_ConfigClockSource+0x15a>
 80060a0:	e062      	b.n	8006168 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6818      	ldr	r0, [r3, #0]
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	6899      	ldr	r1, [r3, #8]
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	685a      	ldr	r2, [r3, #4]
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	f000 f9ad 	bl	8006410 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80060c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	68ba      	ldr	r2, [r7, #8]
 80060cc:	609a      	str	r2, [r3, #8]
      break;
 80060ce:	e04f      	b.n	8006170 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6818      	ldr	r0, [r3, #0]
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	6899      	ldr	r1, [r3, #8]
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	685a      	ldr	r2, [r3, #4]
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	f000 f996 	bl	8006410 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	689a      	ldr	r2, [r3, #8]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80060f2:	609a      	str	r2, [r3, #8]
      break;
 80060f4:	e03c      	b.n	8006170 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6818      	ldr	r0, [r3, #0]
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	6859      	ldr	r1, [r3, #4]
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	461a      	mov	r2, r3
 8006104:	f000 f90a 	bl	800631c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	2150      	movs	r1, #80	; 0x50
 800610e:	4618      	mov	r0, r3
 8006110:	f000 f963 	bl	80063da <TIM_ITRx_SetConfig>
      break;
 8006114:	e02c      	b.n	8006170 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6818      	ldr	r0, [r3, #0]
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	6859      	ldr	r1, [r3, #4]
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	461a      	mov	r2, r3
 8006124:	f000 f929 	bl	800637a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	2160      	movs	r1, #96	; 0x60
 800612e:	4618      	mov	r0, r3
 8006130:	f000 f953 	bl	80063da <TIM_ITRx_SetConfig>
      break;
 8006134:	e01c      	b.n	8006170 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6818      	ldr	r0, [r3, #0]
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	6859      	ldr	r1, [r3, #4]
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	461a      	mov	r2, r3
 8006144:	f000 f8ea 	bl	800631c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	2140      	movs	r1, #64	; 0x40
 800614e:	4618      	mov	r0, r3
 8006150:	f000 f943 	bl	80063da <TIM_ITRx_SetConfig>
      break;
 8006154:	e00c      	b.n	8006170 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4619      	mov	r1, r3
 8006160:	4610      	mov	r0, r2
 8006162:	f000 f93a 	bl	80063da <TIM_ITRx_SetConfig>
      break;
 8006166:	e003      	b.n	8006170 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	73fb      	strb	r3, [r7, #15]
      break;
 800616c:	e000      	b.n	8006170 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800616e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006180:	7bfb      	ldrb	r3, [r7, #15]
}
 8006182:	4618      	mov	r0, r3
 8006184:	3710      	adds	r7, #16
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}

0800618a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800618a:	b480      	push	{r7}
 800618c:	b083      	sub	sp, #12
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006192:	bf00      	nop
 8006194:	370c      	adds	r7, #12
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr

0800619e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800619e:	b480      	push	{r7}
 80061a0:	b083      	sub	sp, #12
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80061a6:	bf00      	nop
 80061a8:	370c      	adds	r7, #12
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr

080061b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061b2:	b480      	push	{r7}
 80061b4:	b083      	sub	sp, #12
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061ba:	bf00      	nop
 80061bc:	370c      	adds	r7, #12
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr

080061c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80061c6:	b480      	push	{r7}
 80061c8:	b083      	sub	sp, #12
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80061ce:	bf00      	nop
 80061d0:	370c      	adds	r7, #12
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr
	...

080061dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80061dc:	b480      	push	{r7}
 80061de:	b085      	sub	sp, #20
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	4a40      	ldr	r2, [pc, #256]	; (80062f0 <TIM_Base_SetConfig+0x114>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d013      	beq.n	800621c <TIM_Base_SetConfig+0x40>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061fa:	d00f      	beq.n	800621c <TIM_Base_SetConfig+0x40>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	4a3d      	ldr	r2, [pc, #244]	; (80062f4 <TIM_Base_SetConfig+0x118>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d00b      	beq.n	800621c <TIM_Base_SetConfig+0x40>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	4a3c      	ldr	r2, [pc, #240]	; (80062f8 <TIM_Base_SetConfig+0x11c>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d007      	beq.n	800621c <TIM_Base_SetConfig+0x40>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	4a3b      	ldr	r2, [pc, #236]	; (80062fc <TIM_Base_SetConfig+0x120>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d003      	beq.n	800621c <TIM_Base_SetConfig+0x40>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	4a3a      	ldr	r2, [pc, #232]	; (8006300 <TIM_Base_SetConfig+0x124>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d108      	bne.n	800622e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006222:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	68fa      	ldr	r2, [r7, #12]
 800622a:	4313      	orrs	r3, r2
 800622c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4a2f      	ldr	r2, [pc, #188]	; (80062f0 <TIM_Base_SetConfig+0x114>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d02b      	beq.n	800628e <TIM_Base_SetConfig+0xb2>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800623c:	d027      	beq.n	800628e <TIM_Base_SetConfig+0xb2>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4a2c      	ldr	r2, [pc, #176]	; (80062f4 <TIM_Base_SetConfig+0x118>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d023      	beq.n	800628e <TIM_Base_SetConfig+0xb2>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	4a2b      	ldr	r2, [pc, #172]	; (80062f8 <TIM_Base_SetConfig+0x11c>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d01f      	beq.n	800628e <TIM_Base_SetConfig+0xb2>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4a2a      	ldr	r2, [pc, #168]	; (80062fc <TIM_Base_SetConfig+0x120>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d01b      	beq.n	800628e <TIM_Base_SetConfig+0xb2>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4a29      	ldr	r2, [pc, #164]	; (8006300 <TIM_Base_SetConfig+0x124>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d017      	beq.n	800628e <TIM_Base_SetConfig+0xb2>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4a28      	ldr	r2, [pc, #160]	; (8006304 <TIM_Base_SetConfig+0x128>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d013      	beq.n	800628e <TIM_Base_SetConfig+0xb2>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4a27      	ldr	r2, [pc, #156]	; (8006308 <TIM_Base_SetConfig+0x12c>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d00f      	beq.n	800628e <TIM_Base_SetConfig+0xb2>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4a26      	ldr	r2, [pc, #152]	; (800630c <TIM_Base_SetConfig+0x130>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d00b      	beq.n	800628e <TIM_Base_SetConfig+0xb2>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	4a25      	ldr	r2, [pc, #148]	; (8006310 <TIM_Base_SetConfig+0x134>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d007      	beq.n	800628e <TIM_Base_SetConfig+0xb2>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4a24      	ldr	r2, [pc, #144]	; (8006314 <TIM_Base_SetConfig+0x138>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d003      	beq.n	800628e <TIM_Base_SetConfig+0xb2>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4a23      	ldr	r2, [pc, #140]	; (8006318 <TIM_Base_SetConfig+0x13c>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d108      	bne.n	80062a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006294:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	68fa      	ldr	r2, [r7, #12]
 800629c:	4313      	orrs	r3, r2
 800629e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	695b      	ldr	r3, [r3, #20]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	689a      	ldr	r2, [r3, #8]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	4a0a      	ldr	r2, [pc, #40]	; (80062f0 <TIM_Base_SetConfig+0x114>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d003      	beq.n	80062d4 <TIM_Base_SetConfig+0xf8>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	4a0c      	ldr	r2, [pc, #48]	; (8006300 <TIM_Base_SetConfig+0x124>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d103      	bne.n	80062dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	691a      	ldr	r2, [r3, #16]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	615a      	str	r2, [r3, #20]
}
 80062e2:	bf00      	nop
 80062e4:	3714      	adds	r7, #20
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr
 80062ee:	bf00      	nop
 80062f0:	40010000 	.word	0x40010000
 80062f4:	40000400 	.word	0x40000400
 80062f8:	40000800 	.word	0x40000800
 80062fc:	40000c00 	.word	0x40000c00
 8006300:	40010400 	.word	0x40010400
 8006304:	40014000 	.word	0x40014000
 8006308:	40014400 	.word	0x40014400
 800630c:	40014800 	.word	0x40014800
 8006310:	40001800 	.word	0x40001800
 8006314:	40001c00 	.word	0x40001c00
 8006318:	40002000 	.word	0x40002000

0800631c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800631c:	b480      	push	{r7}
 800631e:	b087      	sub	sp, #28
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6a1b      	ldr	r3, [r3, #32]
 800632c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6a1b      	ldr	r3, [r3, #32]
 8006332:	f023 0201 	bic.w	r2, r3, #1
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	699b      	ldr	r3, [r3, #24]
 800633e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006346:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	011b      	lsls	r3, r3, #4
 800634c:	693a      	ldr	r2, [r7, #16]
 800634e:	4313      	orrs	r3, r2
 8006350:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	f023 030a 	bic.w	r3, r3, #10
 8006358:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800635a:	697a      	ldr	r2, [r7, #20]
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	4313      	orrs	r3, r2
 8006360:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	693a      	ldr	r2, [r7, #16]
 8006366:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	697a      	ldr	r2, [r7, #20]
 800636c:	621a      	str	r2, [r3, #32]
}
 800636e:	bf00      	nop
 8006370:	371c      	adds	r7, #28
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr

0800637a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800637a:	b480      	push	{r7}
 800637c:	b087      	sub	sp, #28
 800637e:	af00      	add	r7, sp, #0
 8006380:	60f8      	str	r0, [r7, #12]
 8006382:	60b9      	str	r1, [r7, #8]
 8006384:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	6a1b      	ldr	r3, [r3, #32]
 800638a:	f023 0210 	bic.w	r2, r3, #16
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	699b      	ldr	r3, [r3, #24]
 8006396:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	6a1b      	ldr	r3, [r3, #32]
 800639c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80063a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	031b      	lsls	r3, r3, #12
 80063aa:	697a      	ldr	r2, [r7, #20]
 80063ac:	4313      	orrs	r3, r2
 80063ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80063b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	011b      	lsls	r3, r3, #4
 80063bc:	693a      	ldr	r2, [r7, #16]
 80063be:	4313      	orrs	r3, r2
 80063c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	697a      	ldr	r2, [r7, #20]
 80063c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	693a      	ldr	r2, [r7, #16]
 80063cc:	621a      	str	r2, [r3, #32]
}
 80063ce:	bf00      	nop
 80063d0:	371c      	adds	r7, #28
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr

080063da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80063da:	b480      	push	{r7}
 80063dc:	b085      	sub	sp, #20
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
 80063e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063f2:	683a      	ldr	r2, [r7, #0]
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	4313      	orrs	r3, r2
 80063f8:	f043 0307 	orr.w	r3, r3, #7
 80063fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	68fa      	ldr	r2, [r7, #12]
 8006402:	609a      	str	r2, [r3, #8]
}
 8006404:	bf00      	nop
 8006406:	3714      	adds	r7, #20
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006410:	b480      	push	{r7}
 8006412:	b087      	sub	sp, #28
 8006414:	af00      	add	r7, sp, #0
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	60b9      	str	r1, [r7, #8]
 800641a:	607a      	str	r2, [r7, #4]
 800641c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800642a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	021a      	lsls	r2, r3, #8
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	431a      	orrs	r2, r3
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	4313      	orrs	r3, r2
 8006438:	697a      	ldr	r2, [r7, #20]
 800643a:	4313      	orrs	r3, r2
 800643c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	697a      	ldr	r2, [r7, #20]
 8006442:	609a      	str	r2, [r3, #8]
}
 8006444:	bf00      	nop
 8006446:	371c      	adds	r7, #28
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006450:	b480      	push	{r7}
 8006452:	b085      	sub	sp, #20
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006460:	2b01      	cmp	r3, #1
 8006462:	d101      	bne.n	8006468 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006464:	2302      	movs	r3, #2
 8006466:	e05a      	b.n	800651e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2201      	movs	r2, #1
 800646c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2202      	movs	r2, #2
 8006474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800648e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	4313      	orrs	r3, r2
 8006498:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	68fa      	ldr	r2, [r7, #12]
 80064a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a21      	ldr	r2, [pc, #132]	; (800652c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d022      	beq.n	80064f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064b4:	d01d      	beq.n	80064f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a1d      	ldr	r2, [pc, #116]	; (8006530 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d018      	beq.n	80064f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a1b      	ldr	r2, [pc, #108]	; (8006534 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d013      	beq.n	80064f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a1a      	ldr	r2, [pc, #104]	; (8006538 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d00e      	beq.n	80064f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a18      	ldr	r2, [pc, #96]	; (800653c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d009      	beq.n	80064f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a17      	ldr	r2, [pc, #92]	; (8006540 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d004      	beq.n	80064f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a15      	ldr	r2, [pc, #84]	; (8006544 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d10c      	bne.n	800650c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	68ba      	ldr	r2, [r7, #8]
 8006500:	4313      	orrs	r3, r2
 8006502:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	68ba      	ldr	r2, [r7, #8]
 800650a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3714      	adds	r7, #20
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr
 800652a:	bf00      	nop
 800652c:	40010000 	.word	0x40010000
 8006530:	40000400 	.word	0x40000400
 8006534:	40000800 	.word	0x40000800
 8006538:	40000c00 	.word	0x40000c00
 800653c:	40010400 	.word	0x40010400
 8006540:	40014000 	.word	0x40014000
 8006544:	40001800 	.word	0x40001800

08006548 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006550:	bf00      	nop
 8006552:	370c      	adds	r7, #12
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr

0800655c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800655c:	b480      	push	{r7}
 800655e:	b083      	sub	sp, #12
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006564:	bf00      	nop
 8006566:	370c      	adds	r7, #12
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr

08006570 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b082      	sub	sp, #8
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d101      	bne.n	8006582 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	e03f      	b.n	8006602 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006588:	b2db      	uxtb	r3, r3
 800658a:	2b00      	cmp	r3, #0
 800658c:	d106      	bne.n	800659c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f7fb fb82 	bl	8001ca0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2224      	movs	r2, #36	; 0x24
 80065a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	68da      	ldr	r2, [r3, #12]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80065b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f000 f993 	bl	80068e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	691a      	ldr	r2, [r3, #16]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80065c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	695a      	ldr	r2, [r3, #20]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	68da      	ldr	r2, [r3, #12]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2220      	movs	r2, #32
 80065f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2220      	movs	r2, #32
 80065fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006600:	2300      	movs	r3, #0
}
 8006602:	4618      	mov	r0, r3
 8006604:	3708      	adds	r7, #8
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}

0800660a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800660a:	b580      	push	{r7, lr}
 800660c:	b08a      	sub	sp, #40	; 0x28
 800660e:	af02      	add	r7, sp, #8
 8006610:	60f8      	str	r0, [r7, #12]
 8006612:	60b9      	str	r1, [r7, #8]
 8006614:	603b      	str	r3, [r7, #0]
 8006616:	4613      	mov	r3, r2
 8006618:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800661a:	2300      	movs	r3, #0
 800661c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006624:	b2db      	uxtb	r3, r3
 8006626:	2b20      	cmp	r3, #32
 8006628:	d17c      	bne.n	8006724 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d002      	beq.n	8006636 <HAL_UART_Transmit+0x2c>
 8006630:	88fb      	ldrh	r3, [r7, #6]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d101      	bne.n	800663a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	e075      	b.n	8006726 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006640:	2b01      	cmp	r3, #1
 8006642:	d101      	bne.n	8006648 <HAL_UART_Transmit+0x3e>
 8006644:	2302      	movs	r3, #2
 8006646:	e06e      	b.n	8006726 <HAL_UART_Transmit+0x11c>
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2201      	movs	r2, #1
 800664c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2200      	movs	r2, #0
 8006654:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2221      	movs	r2, #33	; 0x21
 800665a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800665e:	f7fb fd79 	bl	8002154 <HAL_GetTick>
 8006662:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	88fa      	ldrh	r2, [r7, #6]
 8006668:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	88fa      	ldrh	r2, [r7, #6]
 800666e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006678:	d108      	bne.n	800668c <HAL_UART_Transmit+0x82>
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	691b      	ldr	r3, [r3, #16]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d104      	bne.n	800668c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006682:	2300      	movs	r3, #0
 8006684:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	61bb      	str	r3, [r7, #24]
 800668a:	e003      	b.n	8006694 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006690:	2300      	movs	r3, #0
 8006692:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2200      	movs	r2, #0
 8006698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800669c:	e02a      	b.n	80066f4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	9300      	str	r3, [sp, #0]
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	2200      	movs	r2, #0
 80066a6:	2180      	movs	r1, #128	; 0x80
 80066a8:	68f8      	ldr	r0, [r7, #12]
 80066aa:	f000 f870 	bl	800678e <UART_WaitOnFlagUntilTimeout>
 80066ae:	4603      	mov	r3, r0
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d001      	beq.n	80066b8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80066b4:	2303      	movs	r3, #3
 80066b6:	e036      	b.n	8006726 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80066b8:	69fb      	ldr	r3, [r7, #28]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d10b      	bne.n	80066d6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	881b      	ldrh	r3, [r3, #0]
 80066c2:	461a      	mov	r2, r3
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80066ce:	69bb      	ldr	r3, [r7, #24]
 80066d0:	3302      	adds	r3, #2
 80066d2:	61bb      	str	r3, [r7, #24]
 80066d4:	e007      	b.n	80066e6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	781a      	ldrb	r2, [r3, #0]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	3301      	adds	r3, #1
 80066e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	3b01      	subs	r3, #1
 80066ee:	b29a      	uxth	r2, r3
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d1cf      	bne.n	800669e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	9300      	str	r3, [sp, #0]
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	2200      	movs	r2, #0
 8006706:	2140      	movs	r1, #64	; 0x40
 8006708:	68f8      	ldr	r0, [r7, #12]
 800670a:	f000 f840 	bl	800678e <UART_WaitOnFlagUntilTimeout>
 800670e:	4603      	mov	r3, r0
 8006710:	2b00      	cmp	r3, #0
 8006712:	d001      	beq.n	8006718 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006714:	2303      	movs	r3, #3
 8006716:	e006      	b.n	8006726 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2220      	movs	r2, #32
 800671c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006720:	2300      	movs	r3, #0
 8006722:	e000      	b.n	8006726 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006724:	2302      	movs	r3, #2
  }
}
 8006726:	4618      	mov	r0, r3
 8006728:	3720      	adds	r7, #32
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}

0800672e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800672e:	b580      	push	{r7, lr}
 8006730:	b084      	sub	sp, #16
 8006732:	af00      	add	r7, sp, #0
 8006734:	60f8      	str	r0, [r7, #12]
 8006736:	60b9      	str	r1, [r7, #8]
 8006738:	4613      	mov	r3, r2
 800673a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006742:	b2db      	uxtb	r3, r3
 8006744:	2b20      	cmp	r3, #32
 8006746:	d11d      	bne.n	8006784 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d002      	beq.n	8006754 <HAL_UART_Receive_IT+0x26>
 800674e:	88fb      	ldrh	r3, [r7, #6]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d101      	bne.n	8006758 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	e016      	b.n	8006786 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800675e:	2b01      	cmp	r3, #1
 8006760:	d101      	bne.n	8006766 <HAL_UART_Receive_IT+0x38>
 8006762:	2302      	movs	r3, #2
 8006764:	e00f      	b.n	8006786 <HAL_UART_Receive_IT+0x58>
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2201      	movs	r2, #1
 800676a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2200      	movs	r2, #0
 8006772:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006774:	88fb      	ldrh	r3, [r7, #6]
 8006776:	461a      	mov	r2, r3
 8006778:	68b9      	ldr	r1, [r7, #8]
 800677a:	68f8      	ldr	r0, [r7, #12]
 800677c:	f000 f875 	bl	800686a <UART_Start_Receive_IT>
 8006780:	4603      	mov	r3, r0
 8006782:	e000      	b.n	8006786 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006784:	2302      	movs	r3, #2
  }
}
 8006786:	4618      	mov	r0, r3
 8006788:	3710      	adds	r7, #16
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}

0800678e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800678e:	b580      	push	{r7, lr}
 8006790:	b090      	sub	sp, #64	; 0x40
 8006792:	af00      	add	r7, sp, #0
 8006794:	60f8      	str	r0, [r7, #12]
 8006796:	60b9      	str	r1, [r7, #8]
 8006798:	603b      	str	r3, [r7, #0]
 800679a:	4613      	mov	r3, r2
 800679c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800679e:	e050      	b.n	8006842 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067a6:	d04c      	beq.n	8006842 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80067a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d007      	beq.n	80067be <UART_WaitOnFlagUntilTimeout+0x30>
 80067ae:	f7fb fcd1 	bl	8002154 <HAL_GetTick>
 80067b2:	4602      	mov	r2, r0
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	1ad3      	subs	r3, r2, r3
 80067b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d241      	bcs.n	8006842 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	330c      	adds	r3, #12
 80067c4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c8:	e853 3f00 	ldrex	r3, [r3]
 80067cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80067d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	330c      	adds	r3, #12
 80067dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80067de:	637a      	str	r2, [r7, #52]	; 0x34
 80067e0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80067e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067e6:	e841 2300 	strex	r3, r2, [r1]
 80067ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80067ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d1e5      	bne.n	80067be <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	3314      	adds	r3, #20
 80067f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	e853 3f00 	ldrex	r3, [r3]
 8006800:	613b      	str	r3, [r7, #16]
   return(result);
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	f023 0301 	bic.w	r3, r3, #1
 8006808:	63bb      	str	r3, [r7, #56]	; 0x38
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	3314      	adds	r3, #20
 8006810:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006812:	623a      	str	r2, [r7, #32]
 8006814:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006816:	69f9      	ldr	r1, [r7, #28]
 8006818:	6a3a      	ldr	r2, [r7, #32]
 800681a:	e841 2300 	strex	r3, r2, [r1]
 800681e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006820:	69bb      	ldr	r3, [r7, #24]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d1e5      	bne.n	80067f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2220      	movs	r2, #32
 800682a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2220      	movs	r2, #32
 8006832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2200      	movs	r2, #0
 800683a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800683e:	2303      	movs	r3, #3
 8006840:	e00f      	b.n	8006862 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	4013      	ands	r3, r2
 800684c:	68ba      	ldr	r2, [r7, #8]
 800684e:	429a      	cmp	r2, r3
 8006850:	bf0c      	ite	eq
 8006852:	2301      	moveq	r3, #1
 8006854:	2300      	movne	r3, #0
 8006856:	b2db      	uxtb	r3, r3
 8006858:	461a      	mov	r2, r3
 800685a:	79fb      	ldrb	r3, [r7, #7]
 800685c:	429a      	cmp	r2, r3
 800685e:	d09f      	beq.n	80067a0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	3740      	adds	r7, #64	; 0x40
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}

0800686a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800686a:	b480      	push	{r7}
 800686c:	b085      	sub	sp, #20
 800686e:	af00      	add	r7, sp, #0
 8006870:	60f8      	str	r0, [r7, #12]
 8006872:	60b9      	str	r1, [r7, #8]
 8006874:	4613      	mov	r3, r2
 8006876:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	68ba      	ldr	r2, [r7, #8]
 800687c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	88fa      	ldrh	r2, [r7, #6]
 8006882:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	88fa      	ldrh	r2, [r7, #6]
 8006888:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2200      	movs	r2, #0
 800688e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2222      	movs	r2, #34	; 0x22
 8006894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2200      	movs	r2, #0
 800689c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	68da      	ldr	r2, [r3, #12]
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068ae:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	695a      	ldr	r2, [r3, #20]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f042 0201 	orr.w	r2, r2, #1
 80068be:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	68da      	ldr	r2, [r3, #12]
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f042 0220 	orr.w	r2, r2, #32
 80068ce:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80068d0:	2300      	movs	r3, #0
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3714      	adds	r7, #20
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr
	...

080068e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068e4:	b09f      	sub	sp, #124	; 0x7c
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	691b      	ldr	r3, [r3, #16]
 80068f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80068f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068f6:	68d9      	ldr	r1, [r3, #12]
 80068f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	ea40 0301 	orr.w	r3, r0, r1
 8006900:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006902:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006904:	689a      	ldr	r2, [r3, #8]
 8006906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006908:	691b      	ldr	r3, [r3, #16]
 800690a:	431a      	orrs	r2, r3
 800690c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800690e:	695b      	ldr	r3, [r3, #20]
 8006910:	431a      	orrs	r2, r3
 8006912:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006914:	69db      	ldr	r3, [r3, #28]
 8006916:	4313      	orrs	r3, r2
 8006918:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800691a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006924:	f021 010c 	bic.w	r1, r1, #12
 8006928:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800692e:	430b      	orrs	r3, r1
 8006930:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006932:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	695b      	ldr	r3, [r3, #20]
 8006938:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800693c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800693e:	6999      	ldr	r1, [r3, #24]
 8006940:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	ea40 0301 	orr.w	r3, r0, r1
 8006948:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800694a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	4bc5      	ldr	r3, [pc, #788]	; (8006c64 <UART_SetConfig+0x384>)
 8006950:	429a      	cmp	r2, r3
 8006952:	d004      	beq.n	800695e <UART_SetConfig+0x7e>
 8006954:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	4bc3      	ldr	r3, [pc, #780]	; (8006c68 <UART_SetConfig+0x388>)
 800695a:	429a      	cmp	r2, r3
 800695c:	d103      	bne.n	8006966 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800695e:	f7fe fca3 	bl	80052a8 <HAL_RCC_GetPCLK2Freq>
 8006962:	6778      	str	r0, [r7, #116]	; 0x74
 8006964:	e002      	b.n	800696c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006966:	f7fe fc8b 	bl	8005280 <HAL_RCC_GetPCLK1Freq>
 800696a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800696c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800696e:	69db      	ldr	r3, [r3, #28]
 8006970:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006974:	f040 80b6 	bne.w	8006ae4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006978:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800697a:	461c      	mov	r4, r3
 800697c:	f04f 0500 	mov.w	r5, #0
 8006980:	4622      	mov	r2, r4
 8006982:	462b      	mov	r3, r5
 8006984:	1891      	adds	r1, r2, r2
 8006986:	6439      	str	r1, [r7, #64]	; 0x40
 8006988:	415b      	adcs	r3, r3
 800698a:	647b      	str	r3, [r7, #68]	; 0x44
 800698c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006990:	1912      	adds	r2, r2, r4
 8006992:	eb45 0303 	adc.w	r3, r5, r3
 8006996:	f04f 0000 	mov.w	r0, #0
 800699a:	f04f 0100 	mov.w	r1, #0
 800699e:	00d9      	lsls	r1, r3, #3
 80069a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80069a4:	00d0      	lsls	r0, r2, #3
 80069a6:	4602      	mov	r2, r0
 80069a8:	460b      	mov	r3, r1
 80069aa:	1911      	adds	r1, r2, r4
 80069ac:	6639      	str	r1, [r7, #96]	; 0x60
 80069ae:	416b      	adcs	r3, r5
 80069b0:	667b      	str	r3, [r7, #100]	; 0x64
 80069b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	461a      	mov	r2, r3
 80069b8:	f04f 0300 	mov.w	r3, #0
 80069bc:	1891      	adds	r1, r2, r2
 80069be:	63b9      	str	r1, [r7, #56]	; 0x38
 80069c0:	415b      	adcs	r3, r3
 80069c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80069c8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80069cc:	f7fa f8be 	bl	8000b4c <__aeabi_uldivmod>
 80069d0:	4602      	mov	r2, r0
 80069d2:	460b      	mov	r3, r1
 80069d4:	4ba5      	ldr	r3, [pc, #660]	; (8006c6c <UART_SetConfig+0x38c>)
 80069d6:	fba3 2302 	umull	r2, r3, r3, r2
 80069da:	095b      	lsrs	r3, r3, #5
 80069dc:	011e      	lsls	r6, r3, #4
 80069de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069e0:	461c      	mov	r4, r3
 80069e2:	f04f 0500 	mov.w	r5, #0
 80069e6:	4622      	mov	r2, r4
 80069e8:	462b      	mov	r3, r5
 80069ea:	1891      	adds	r1, r2, r2
 80069ec:	6339      	str	r1, [r7, #48]	; 0x30
 80069ee:	415b      	adcs	r3, r3
 80069f0:	637b      	str	r3, [r7, #52]	; 0x34
 80069f2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80069f6:	1912      	adds	r2, r2, r4
 80069f8:	eb45 0303 	adc.w	r3, r5, r3
 80069fc:	f04f 0000 	mov.w	r0, #0
 8006a00:	f04f 0100 	mov.w	r1, #0
 8006a04:	00d9      	lsls	r1, r3, #3
 8006a06:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006a0a:	00d0      	lsls	r0, r2, #3
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	460b      	mov	r3, r1
 8006a10:	1911      	adds	r1, r2, r4
 8006a12:	65b9      	str	r1, [r7, #88]	; 0x58
 8006a14:	416b      	adcs	r3, r5
 8006a16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	f04f 0300 	mov.w	r3, #0
 8006a22:	1891      	adds	r1, r2, r2
 8006a24:	62b9      	str	r1, [r7, #40]	; 0x28
 8006a26:	415b      	adcs	r3, r3
 8006a28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006a2e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006a32:	f7fa f88b 	bl	8000b4c <__aeabi_uldivmod>
 8006a36:	4602      	mov	r2, r0
 8006a38:	460b      	mov	r3, r1
 8006a3a:	4b8c      	ldr	r3, [pc, #560]	; (8006c6c <UART_SetConfig+0x38c>)
 8006a3c:	fba3 1302 	umull	r1, r3, r3, r2
 8006a40:	095b      	lsrs	r3, r3, #5
 8006a42:	2164      	movs	r1, #100	; 0x64
 8006a44:	fb01 f303 	mul.w	r3, r1, r3
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	00db      	lsls	r3, r3, #3
 8006a4c:	3332      	adds	r3, #50	; 0x32
 8006a4e:	4a87      	ldr	r2, [pc, #540]	; (8006c6c <UART_SetConfig+0x38c>)
 8006a50:	fba2 2303 	umull	r2, r3, r2, r3
 8006a54:	095b      	lsrs	r3, r3, #5
 8006a56:	005b      	lsls	r3, r3, #1
 8006a58:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006a5c:	441e      	add	r6, r3
 8006a5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a60:	4618      	mov	r0, r3
 8006a62:	f04f 0100 	mov.w	r1, #0
 8006a66:	4602      	mov	r2, r0
 8006a68:	460b      	mov	r3, r1
 8006a6a:	1894      	adds	r4, r2, r2
 8006a6c:	623c      	str	r4, [r7, #32]
 8006a6e:	415b      	adcs	r3, r3
 8006a70:	627b      	str	r3, [r7, #36]	; 0x24
 8006a72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006a76:	1812      	adds	r2, r2, r0
 8006a78:	eb41 0303 	adc.w	r3, r1, r3
 8006a7c:	f04f 0400 	mov.w	r4, #0
 8006a80:	f04f 0500 	mov.w	r5, #0
 8006a84:	00dd      	lsls	r5, r3, #3
 8006a86:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006a8a:	00d4      	lsls	r4, r2, #3
 8006a8c:	4622      	mov	r2, r4
 8006a8e:	462b      	mov	r3, r5
 8006a90:	1814      	adds	r4, r2, r0
 8006a92:	653c      	str	r4, [r7, #80]	; 0x50
 8006a94:	414b      	adcs	r3, r1
 8006a96:	657b      	str	r3, [r7, #84]	; 0x54
 8006a98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	f04f 0300 	mov.w	r3, #0
 8006aa2:	1891      	adds	r1, r2, r2
 8006aa4:	61b9      	str	r1, [r7, #24]
 8006aa6:	415b      	adcs	r3, r3
 8006aa8:	61fb      	str	r3, [r7, #28]
 8006aaa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006aae:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006ab2:	f7fa f84b 	bl	8000b4c <__aeabi_uldivmod>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	460b      	mov	r3, r1
 8006aba:	4b6c      	ldr	r3, [pc, #432]	; (8006c6c <UART_SetConfig+0x38c>)
 8006abc:	fba3 1302 	umull	r1, r3, r3, r2
 8006ac0:	095b      	lsrs	r3, r3, #5
 8006ac2:	2164      	movs	r1, #100	; 0x64
 8006ac4:	fb01 f303 	mul.w	r3, r1, r3
 8006ac8:	1ad3      	subs	r3, r2, r3
 8006aca:	00db      	lsls	r3, r3, #3
 8006acc:	3332      	adds	r3, #50	; 0x32
 8006ace:	4a67      	ldr	r2, [pc, #412]	; (8006c6c <UART_SetConfig+0x38c>)
 8006ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ad4:	095b      	lsrs	r3, r3, #5
 8006ad6:	f003 0207 	and.w	r2, r3, #7
 8006ada:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4432      	add	r2, r6
 8006ae0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006ae2:	e0b9      	b.n	8006c58 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ae4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ae6:	461c      	mov	r4, r3
 8006ae8:	f04f 0500 	mov.w	r5, #0
 8006aec:	4622      	mov	r2, r4
 8006aee:	462b      	mov	r3, r5
 8006af0:	1891      	adds	r1, r2, r2
 8006af2:	6139      	str	r1, [r7, #16]
 8006af4:	415b      	adcs	r3, r3
 8006af6:	617b      	str	r3, [r7, #20]
 8006af8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006afc:	1912      	adds	r2, r2, r4
 8006afe:	eb45 0303 	adc.w	r3, r5, r3
 8006b02:	f04f 0000 	mov.w	r0, #0
 8006b06:	f04f 0100 	mov.w	r1, #0
 8006b0a:	00d9      	lsls	r1, r3, #3
 8006b0c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006b10:	00d0      	lsls	r0, r2, #3
 8006b12:	4602      	mov	r2, r0
 8006b14:	460b      	mov	r3, r1
 8006b16:	eb12 0804 	adds.w	r8, r2, r4
 8006b1a:	eb43 0905 	adc.w	r9, r3, r5
 8006b1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	4618      	mov	r0, r3
 8006b24:	f04f 0100 	mov.w	r1, #0
 8006b28:	f04f 0200 	mov.w	r2, #0
 8006b2c:	f04f 0300 	mov.w	r3, #0
 8006b30:	008b      	lsls	r3, r1, #2
 8006b32:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006b36:	0082      	lsls	r2, r0, #2
 8006b38:	4640      	mov	r0, r8
 8006b3a:	4649      	mov	r1, r9
 8006b3c:	f7fa f806 	bl	8000b4c <__aeabi_uldivmod>
 8006b40:	4602      	mov	r2, r0
 8006b42:	460b      	mov	r3, r1
 8006b44:	4b49      	ldr	r3, [pc, #292]	; (8006c6c <UART_SetConfig+0x38c>)
 8006b46:	fba3 2302 	umull	r2, r3, r3, r2
 8006b4a:	095b      	lsrs	r3, r3, #5
 8006b4c:	011e      	lsls	r6, r3, #4
 8006b4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b50:	4618      	mov	r0, r3
 8006b52:	f04f 0100 	mov.w	r1, #0
 8006b56:	4602      	mov	r2, r0
 8006b58:	460b      	mov	r3, r1
 8006b5a:	1894      	adds	r4, r2, r2
 8006b5c:	60bc      	str	r4, [r7, #8]
 8006b5e:	415b      	adcs	r3, r3
 8006b60:	60fb      	str	r3, [r7, #12]
 8006b62:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006b66:	1812      	adds	r2, r2, r0
 8006b68:	eb41 0303 	adc.w	r3, r1, r3
 8006b6c:	f04f 0400 	mov.w	r4, #0
 8006b70:	f04f 0500 	mov.w	r5, #0
 8006b74:	00dd      	lsls	r5, r3, #3
 8006b76:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006b7a:	00d4      	lsls	r4, r2, #3
 8006b7c:	4622      	mov	r2, r4
 8006b7e:	462b      	mov	r3, r5
 8006b80:	1814      	adds	r4, r2, r0
 8006b82:	64bc      	str	r4, [r7, #72]	; 0x48
 8006b84:	414b      	adcs	r3, r1
 8006b86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f04f 0100 	mov.w	r1, #0
 8006b92:	f04f 0200 	mov.w	r2, #0
 8006b96:	f04f 0300 	mov.w	r3, #0
 8006b9a:	008b      	lsls	r3, r1, #2
 8006b9c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006ba0:	0082      	lsls	r2, r0, #2
 8006ba2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006ba6:	f7f9 ffd1 	bl	8000b4c <__aeabi_uldivmod>
 8006baa:	4602      	mov	r2, r0
 8006bac:	460b      	mov	r3, r1
 8006bae:	4b2f      	ldr	r3, [pc, #188]	; (8006c6c <UART_SetConfig+0x38c>)
 8006bb0:	fba3 1302 	umull	r1, r3, r3, r2
 8006bb4:	095b      	lsrs	r3, r3, #5
 8006bb6:	2164      	movs	r1, #100	; 0x64
 8006bb8:	fb01 f303 	mul.w	r3, r1, r3
 8006bbc:	1ad3      	subs	r3, r2, r3
 8006bbe:	011b      	lsls	r3, r3, #4
 8006bc0:	3332      	adds	r3, #50	; 0x32
 8006bc2:	4a2a      	ldr	r2, [pc, #168]	; (8006c6c <UART_SetConfig+0x38c>)
 8006bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8006bc8:	095b      	lsrs	r3, r3, #5
 8006bca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006bce:	441e      	add	r6, r3
 8006bd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f04f 0100 	mov.w	r1, #0
 8006bd8:	4602      	mov	r2, r0
 8006bda:	460b      	mov	r3, r1
 8006bdc:	1894      	adds	r4, r2, r2
 8006bde:	603c      	str	r4, [r7, #0]
 8006be0:	415b      	adcs	r3, r3
 8006be2:	607b      	str	r3, [r7, #4]
 8006be4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006be8:	1812      	adds	r2, r2, r0
 8006bea:	eb41 0303 	adc.w	r3, r1, r3
 8006bee:	f04f 0400 	mov.w	r4, #0
 8006bf2:	f04f 0500 	mov.w	r5, #0
 8006bf6:	00dd      	lsls	r5, r3, #3
 8006bf8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006bfc:	00d4      	lsls	r4, r2, #3
 8006bfe:	4622      	mov	r2, r4
 8006c00:	462b      	mov	r3, r5
 8006c02:	eb12 0a00 	adds.w	sl, r2, r0
 8006c06:	eb43 0b01 	adc.w	fp, r3, r1
 8006c0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f04f 0100 	mov.w	r1, #0
 8006c14:	f04f 0200 	mov.w	r2, #0
 8006c18:	f04f 0300 	mov.w	r3, #0
 8006c1c:	008b      	lsls	r3, r1, #2
 8006c1e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006c22:	0082      	lsls	r2, r0, #2
 8006c24:	4650      	mov	r0, sl
 8006c26:	4659      	mov	r1, fp
 8006c28:	f7f9 ff90 	bl	8000b4c <__aeabi_uldivmod>
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	460b      	mov	r3, r1
 8006c30:	4b0e      	ldr	r3, [pc, #56]	; (8006c6c <UART_SetConfig+0x38c>)
 8006c32:	fba3 1302 	umull	r1, r3, r3, r2
 8006c36:	095b      	lsrs	r3, r3, #5
 8006c38:	2164      	movs	r1, #100	; 0x64
 8006c3a:	fb01 f303 	mul.w	r3, r1, r3
 8006c3e:	1ad3      	subs	r3, r2, r3
 8006c40:	011b      	lsls	r3, r3, #4
 8006c42:	3332      	adds	r3, #50	; 0x32
 8006c44:	4a09      	ldr	r2, [pc, #36]	; (8006c6c <UART_SetConfig+0x38c>)
 8006c46:	fba2 2303 	umull	r2, r3, r2, r3
 8006c4a:	095b      	lsrs	r3, r3, #5
 8006c4c:	f003 020f 	and.w	r2, r3, #15
 8006c50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4432      	add	r2, r6
 8006c56:	609a      	str	r2, [r3, #8]
}
 8006c58:	bf00      	nop
 8006c5a:	377c      	adds	r7, #124	; 0x7c
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c62:	bf00      	nop
 8006c64:	40011000 	.word	0x40011000
 8006c68:	40011400 	.word	0x40011400
 8006c6c:	51eb851f 	.word	0x51eb851f

08006c70 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c70:	b084      	sub	sp, #16
 8006c72:	b580      	push	{r7, lr}
 8006c74:	b084      	sub	sp, #16
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	6078      	str	r0, [r7, #4]
 8006c7a:	f107 001c 	add.w	r0, r7, #28
 8006c7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d122      	bne.n	8006cce <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c8c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	68db      	ldr	r3, [r3, #12]
 8006c98:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006c9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006cb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d105      	bne.n	8006cc2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f001 fb1c 	bl	8008300 <USB_CoreReset>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	73fb      	strb	r3, [r7, #15]
 8006ccc:	e01a      	b.n	8006d04 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	68db      	ldr	r3, [r3, #12]
 8006cd2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f001 fb10 	bl	8008300 <USB_CoreReset>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006ce4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d106      	bne.n	8006cf8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	639a      	str	r2, [r3, #56]	; 0x38
 8006cf6:	e005      	b.n	8006d04 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cfc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	d10b      	bne.n	8006d22 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	f043 0206 	orr.w	r2, r3, #6
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	f043 0220 	orr.w	r2, r3, #32
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3710      	adds	r7, #16
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d2e:	b004      	add	sp, #16
 8006d30:	4770      	bx	lr
	...

08006d34 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b087      	sub	sp, #28
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	4613      	mov	r3, r2
 8006d40:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006d42:	79fb      	ldrb	r3, [r7, #7]
 8006d44:	2b02      	cmp	r3, #2
 8006d46:	d165      	bne.n	8006e14 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	4a41      	ldr	r2, [pc, #260]	; (8006e50 <USB_SetTurnaroundTime+0x11c>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d906      	bls.n	8006d5e <USB_SetTurnaroundTime+0x2a>
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	4a40      	ldr	r2, [pc, #256]	; (8006e54 <USB_SetTurnaroundTime+0x120>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d202      	bcs.n	8006d5e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006d58:	230f      	movs	r3, #15
 8006d5a:	617b      	str	r3, [r7, #20]
 8006d5c:	e062      	b.n	8006e24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	4a3c      	ldr	r2, [pc, #240]	; (8006e54 <USB_SetTurnaroundTime+0x120>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d306      	bcc.n	8006d74 <USB_SetTurnaroundTime+0x40>
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	4a3b      	ldr	r2, [pc, #236]	; (8006e58 <USB_SetTurnaroundTime+0x124>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d202      	bcs.n	8006d74 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006d6e:	230e      	movs	r3, #14
 8006d70:	617b      	str	r3, [r7, #20]
 8006d72:	e057      	b.n	8006e24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	4a38      	ldr	r2, [pc, #224]	; (8006e58 <USB_SetTurnaroundTime+0x124>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d306      	bcc.n	8006d8a <USB_SetTurnaroundTime+0x56>
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	4a37      	ldr	r2, [pc, #220]	; (8006e5c <USB_SetTurnaroundTime+0x128>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d202      	bcs.n	8006d8a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006d84:	230d      	movs	r3, #13
 8006d86:	617b      	str	r3, [r7, #20]
 8006d88:	e04c      	b.n	8006e24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	4a33      	ldr	r2, [pc, #204]	; (8006e5c <USB_SetTurnaroundTime+0x128>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d306      	bcc.n	8006da0 <USB_SetTurnaroundTime+0x6c>
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	4a32      	ldr	r2, [pc, #200]	; (8006e60 <USB_SetTurnaroundTime+0x12c>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d802      	bhi.n	8006da0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006d9a:	230c      	movs	r3, #12
 8006d9c:	617b      	str	r3, [r7, #20]
 8006d9e:	e041      	b.n	8006e24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	4a2f      	ldr	r2, [pc, #188]	; (8006e60 <USB_SetTurnaroundTime+0x12c>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d906      	bls.n	8006db6 <USB_SetTurnaroundTime+0x82>
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	4a2e      	ldr	r2, [pc, #184]	; (8006e64 <USB_SetTurnaroundTime+0x130>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d802      	bhi.n	8006db6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006db0:	230b      	movs	r3, #11
 8006db2:	617b      	str	r3, [r7, #20]
 8006db4:	e036      	b.n	8006e24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	4a2a      	ldr	r2, [pc, #168]	; (8006e64 <USB_SetTurnaroundTime+0x130>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d906      	bls.n	8006dcc <USB_SetTurnaroundTime+0x98>
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	4a29      	ldr	r2, [pc, #164]	; (8006e68 <USB_SetTurnaroundTime+0x134>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d802      	bhi.n	8006dcc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006dc6:	230a      	movs	r3, #10
 8006dc8:	617b      	str	r3, [r7, #20]
 8006dca:	e02b      	b.n	8006e24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	4a26      	ldr	r2, [pc, #152]	; (8006e68 <USB_SetTurnaroundTime+0x134>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d906      	bls.n	8006de2 <USB_SetTurnaroundTime+0xae>
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	4a25      	ldr	r2, [pc, #148]	; (8006e6c <USB_SetTurnaroundTime+0x138>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d202      	bcs.n	8006de2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006ddc:	2309      	movs	r3, #9
 8006dde:	617b      	str	r3, [r7, #20]
 8006de0:	e020      	b.n	8006e24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	4a21      	ldr	r2, [pc, #132]	; (8006e6c <USB_SetTurnaroundTime+0x138>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d306      	bcc.n	8006df8 <USB_SetTurnaroundTime+0xc4>
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	4a20      	ldr	r2, [pc, #128]	; (8006e70 <USB_SetTurnaroundTime+0x13c>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d802      	bhi.n	8006df8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006df2:	2308      	movs	r3, #8
 8006df4:	617b      	str	r3, [r7, #20]
 8006df6:	e015      	b.n	8006e24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	4a1d      	ldr	r2, [pc, #116]	; (8006e70 <USB_SetTurnaroundTime+0x13c>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d906      	bls.n	8006e0e <USB_SetTurnaroundTime+0xda>
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	4a1c      	ldr	r2, [pc, #112]	; (8006e74 <USB_SetTurnaroundTime+0x140>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d202      	bcs.n	8006e0e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006e08:	2307      	movs	r3, #7
 8006e0a:	617b      	str	r3, [r7, #20]
 8006e0c:	e00a      	b.n	8006e24 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006e0e:	2306      	movs	r3, #6
 8006e10:	617b      	str	r3, [r7, #20]
 8006e12:	e007      	b.n	8006e24 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006e14:	79fb      	ldrb	r3, [r7, #7]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d102      	bne.n	8006e20 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006e1a:	2309      	movs	r3, #9
 8006e1c:	617b      	str	r3, [r7, #20]
 8006e1e:	e001      	b.n	8006e24 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006e20:	2309      	movs	r3, #9
 8006e22:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	68da      	ldr	r2, [r3, #12]
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	029b      	lsls	r3, r3, #10
 8006e38:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006e3c:	431a      	orrs	r2, r3
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006e42:	2300      	movs	r3, #0
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	371c      	adds	r7, #28
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr
 8006e50:	00d8acbf 	.word	0x00d8acbf
 8006e54:	00e4e1c0 	.word	0x00e4e1c0
 8006e58:	00f42400 	.word	0x00f42400
 8006e5c:	01067380 	.word	0x01067380
 8006e60:	011a499f 	.word	0x011a499f
 8006e64:	01312cff 	.word	0x01312cff
 8006e68:	014ca43f 	.word	0x014ca43f
 8006e6c:	016e3600 	.word	0x016e3600
 8006e70:	01a6ab1f 	.word	0x01a6ab1f
 8006e74:	01e84800 	.word	0x01e84800

08006e78 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	f043 0201 	orr.w	r2, r3, #1
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e8c:	2300      	movs	r3, #0
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	370c      	adds	r7, #12
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr

08006e9a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e9a:	b480      	push	{r7}
 8006e9c:	b083      	sub	sp, #12
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	f023 0201 	bic.w	r2, r3, #1
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006eae:	2300      	movs	r3, #0
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	370c      	adds	r7, #12
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr

08006ebc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b084      	sub	sp, #16
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	460b      	mov	r3, r1
 8006ec6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	68db      	ldr	r3, [r3, #12]
 8006ed0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006ed8:	78fb      	ldrb	r3, [r7, #3]
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d115      	bne.n	8006f0a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	68db      	ldr	r3, [r3, #12]
 8006ee2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006eea:	2001      	movs	r0, #1
 8006eec:	f7fb f93e 	bl	800216c <HAL_Delay>
      ms++;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f001 f972 	bl	80081e0 <USB_GetMode>
 8006efc:	4603      	mov	r3, r0
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d01e      	beq.n	8006f40 <USB_SetCurrentMode+0x84>
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2b31      	cmp	r3, #49	; 0x31
 8006f06:	d9f0      	bls.n	8006eea <USB_SetCurrentMode+0x2e>
 8006f08:	e01a      	b.n	8006f40 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006f0a:	78fb      	ldrb	r3, [r7, #3]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d115      	bne.n	8006f3c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	68db      	ldr	r3, [r3, #12]
 8006f14:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006f1c:	2001      	movs	r0, #1
 8006f1e:	f7fb f925 	bl	800216c <HAL_Delay>
      ms++;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	3301      	adds	r3, #1
 8006f26:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f001 f959 	bl	80081e0 <USB_GetMode>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d005      	beq.n	8006f40 <USB_SetCurrentMode+0x84>
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2b31      	cmp	r3, #49	; 0x31
 8006f38:	d9f0      	bls.n	8006f1c <USB_SetCurrentMode+0x60>
 8006f3a:	e001      	b.n	8006f40 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	e005      	b.n	8006f4c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2b32      	cmp	r3, #50	; 0x32
 8006f44:	d101      	bne.n	8006f4a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	e000      	b.n	8006f4c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006f4a:	2300      	movs	r3, #0
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3710      	adds	r7, #16
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}

08006f54 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f54:	b084      	sub	sp, #16
 8006f56:	b580      	push	{r7, lr}
 8006f58:	b086      	sub	sp, #24
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
 8006f5e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006f62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006f66:	2300      	movs	r3, #0
 8006f68:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006f6e:	2300      	movs	r3, #0
 8006f70:	613b      	str	r3, [r7, #16]
 8006f72:	e009      	b.n	8006f88 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	3340      	adds	r3, #64	; 0x40
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	4413      	add	r3, r2
 8006f7e:	2200      	movs	r2, #0
 8006f80:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	3301      	adds	r3, #1
 8006f86:	613b      	str	r3, [r7, #16]
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	2b0e      	cmp	r3, #14
 8006f8c:	d9f2      	bls.n	8006f74 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006f8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d11c      	bne.n	8006fce <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	68fa      	ldr	r2, [r7, #12]
 8006f9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fa2:	f043 0302 	orr.w	r3, r3, #2
 8006fa6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	639a      	str	r2, [r3, #56]	; 0x38
 8006fcc:	e00b      	b.n	8006fe6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fde:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006fec:	461a      	mov	r2, r3
 8006fee:	2300      	movs	r3, #0
 8006ff0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007000:	461a      	mov	r2, r3
 8007002:	680b      	ldr	r3, [r1, #0]
 8007004:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007008:	2b01      	cmp	r3, #1
 800700a:	d10c      	bne.n	8007026 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800700c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800700e:	2b00      	cmp	r3, #0
 8007010:	d104      	bne.n	800701c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007012:	2100      	movs	r1, #0
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f000 f945 	bl	80072a4 <USB_SetDevSpeed>
 800701a:	e008      	b.n	800702e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800701c:	2101      	movs	r1, #1
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f000 f940 	bl	80072a4 <USB_SetDevSpeed>
 8007024:	e003      	b.n	800702e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007026:	2103      	movs	r1, #3
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f000 f93b 	bl	80072a4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800702e:	2110      	movs	r1, #16
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f000 f8f3 	bl	800721c <USB_FlushTxFifo>
 8007036:	4603      	mov	r3, r0
 8007038:	2b00      	cmp	r3, #0
 800703a:	d001      	beq.n	8007040 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800703c:	2301      	movs	r3, #1
 800703e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 f90f 	bl	8007264 <USB_FlushRxFifo>
 8007046:	4603      	mov	r3, r0
 8007048:	2b00      	cmp	r3, #0
 800704a:	d001      	beq.n	8007050 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800704c:	2301      	movs	r3, #1
 800704e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007056:	461a      	mov	r2, r3
 8007058:	2300      	movs	r3, #0
 800705a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007062:	461a      	mov	r2, r3
 8007064:	2300      	movs	r3, #0
 8007066:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800706e:	461a      	mov	r2, r3
 8007070:	2300      	movs	r3, #0
 8007072:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007074:	2300      	movs	r3, #0
 8007076:	613b      	str	r3, [r7, #16]
 8007078:	e043      	b.n	8007102 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	015a      	lsls	r2, r3, #5
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	4413      	add	r3, r2
 8007082:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800708c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007090:	d118      	bne.n	80070c4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d10a      	bne.n	80070ae <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	015a      	lsls	r2, r3, #5
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	4413      	add	r3, r2
 80070a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070a4:	461a      	mov	r2, r3
 80070a6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80070aa:	6013      	str	r3, [r2, #0]
 80070ac:	e013      	b.n	80070d6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	015a      	lsls	r2, r3, #5
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	4413      	add	r3, r2
 80070b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070ba:	461a      	mov	r2, r3
 80070bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80070c0:	6013      	str	r3, [r2, #0]
 80070c2:	e008      	b.n	80070d6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	015a      	lsls	r2, r3, #5
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	4413      	add	r3, r2
 80070cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070d0:	461a      	mov	r2, r3
 80070d2:	2300      	movs	r3, #0
 80070d4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	015a      	lsls	r2, r3, #5
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	4413      	add	r3, r2
 80070de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070e2:	461a      	mov	r2, r3
 80070e4:	2300      	movs	r3, #0
 80070e6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	015a      	lsls	r2, r3, #5
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	4413      	add	r3, r2
 80070f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070f4:	461a      	mov	r2, r3
 80070f6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80070fa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	3301      	adds	r3, #1
 8007100:	613b      	str	r3, [r7, #16]
 8007102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007104:	693a      	ldr	r2, [r7, #16]
 8007106:	429a      	cmp	r2, r3
 8007108:	d3b7      	bcc.n	800707a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800710a:	2300      	movs	r3, #0
 800710c:	613b      	str	r3, [r7, #16]
 800710e:	e043      	b.n	8007198 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	015a      	lsls	r2, r3, #5
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	4413      	add	r3, r2
 8007118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007122:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007126:	d118      	bne.n	800715a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d10a      	bne.n	8007144 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	015a      	lsls	r2, r3, #5
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	4413      	add	r3, r2
 8007136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800713a:	461a      	mov	r2, r3
 800713c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007140:	6013      	str	r3, [r2, #0]
 8007142:	e013      	b.n	800716c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	015a      	lsls	r2, r3, #5
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	4413      	add	r3, r2
 800714c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007150:	461a      	mov	r2, r3
 8007152:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007156:	6013      	str	r3, [r2, #0]
 8007158:	e008      	b.n	800716c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	015a      	lsls	r2, r3, #5
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	4413      	add	r3, r2
 8007162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007166:	461a      	mov	r2, r3
 8007168:	2300      	movs	r3, #0
 800716a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	015a      	lsls	r2, r3, #5
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	4413      	add	r3, r2
 8007174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007178:	461a      	mov	r2, r3
 800717a:	2300      	movs	r3, #0
 800717c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	015a      	lsls	r2, r3, #5
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	4413      	add	r3, r2
 8007186:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800718a:	461a      	mov	r2, r3
 800718c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007190:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	3301      	adds	r3, #1
 8007196:	613b      	str	r3, [r7, #16]
 8007198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719a:	693a      	ldr	r2, [r7, #16]
 800719c:	429a      	cmp	r2, r3
 800719e:	d3b7      	bcc.n	8007110 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071a6:	691b      	ldr	r3, [r3, #16]
 80071a8:	68fa      	ldr	r2, [r7, #12]
 80071aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071b2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80071c0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80071c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d105      	bne.n	80071d4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	699b      	ldr	r3, [r3, #24]
 80071cc:	f043 0210 	orr.w	r2, r3, #16
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	699a      	ldr	r2, [r3, #24]
 80071d8:	4b0f      	ldr	r3, [pc, #60]	; (8007218 <USB_DevInit+0x2c4>)
 80071da:	4313      	orrs	r3, r2
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80071e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d005      	beq.n	80071f2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	699b      	ldr	r3, [r3, #24]
 80071ea:	f043 0208 	orr.w	r2, r3, #8
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80071f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d107      	bne.n	8007208 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	699b      	ldr	r3, [r3, #24]
 80071fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007200:	f043 0304 	orr.w	r3, r3, #4
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007208:	7dfb      	ldrb	r3, [r7, #23]
}
 800720a:	4618      	mov	r0, r3
 800720c:	3718      	adds	r7, #24
 800720e:	46bd      	mov	sp, r7
 8007210:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007214:	b004      	add	sp, #16
 8007216:	4770      	bx	lr
 8007218:	803c3800 	.word	0x803c3800

0800721c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800721c:	b480      	push	{r7}
 800721e:	b085      	sub	sp, #20
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007226:	2300      	movs	r3, #0
 8007228:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	019b      	lsls	r3, r3, #6
 800722e:	f043 0220 	orr.w	r2, r3, #32
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	3301      	adds	r3, #1
 800723a:	60fb      	str	r3, [r7, #12]
 800723c:	4a08      	ldr	r2, [pc, #32]	; (8007260 <USB_FlushTxFifo+0x44>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d901      	bls.n	8007246 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8007242:	2303      	movs	r3, #3
 8007244:	e006      	b.n	8007254 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	691b      	ldr	r3, [r3, #16]
 800724a:	f003 0320 	and.w	r3, r3, #32
 800724e:	2b20      	cmp	r3, #32
 8007250:	d0f1      	beq.n	8007236 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007252:	2300      	movs	r3, #0
}
 8007254:	4618      	mov	r0, r3
 8007256:	3714      	adds	r7, #20
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr
 8007260:	00030d40 	.word	0x00030d40

08007264 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007264:	b480      	push	{r7}
 8007266:	b085      	sub	sp, #20
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800726c:	2300      	movs	r3, #0
 800726e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2210      	movs	r2, #16
 8007274:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	3301      	adds	r3, #1
 800727a:	60fb      	str	r3, [r7, #12]
 800727c:	4a08      	ldr	r2, [pc, #32]	; (80072a0 <USB_FlushRxFifo+0x3c>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d901      	bls.n	8007286 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8007282:	2303      	movs	r3, #3
 8007284:	e006      	b.n	8007294 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	691b      	ldr	r3, [r3, #16]
 800728a:	f003 0310 	and.w	r3, r3, #16
 800728e:	2b10      	cmp	r3, #16
 8007290:	d0f1      	beq.n	8007276 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007292:	2300      	movs	r3, #0
}
 8007294:	4618      	mov	r0, r3
 8007296:	3714      	adds	r7, #20
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr
 80072a0:	00030d40 	.word	0x00030d40

080072a4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b085      	sub	sp, #20
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	460b      	mov	r3, r1
 80072ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	78fb      	ldrb	r3, [r7, #3]
 80072be:	68f9      	ldr	r1, [r7, #12]
 80072c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072c4:	4313      	orrs	r3, r2
 80072c6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80072c8:	2300      	movs	r3, #0
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3714      	adds	r7, #20
 80072ce:	46bd      	mov	sp, r7
 80072d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d4:	4770      	bx	lr

080072d6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80072d6:	b480      	push	{r7}
 80072d8:	b087      	sub	sp, #28
 80072da:	af00      	add	r7, sp, #0
 80072dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072e8:	689b      	ldr	r3, [r3, #8]
 80072ea:	f003 0306 	and.w	r3, r3, #6
 80072ee:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d102      	bne.n	80072fc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80072f6:	2300      	movs	r3, #0
 80072f8:	75fb      	strb	r3, [r7, #23]
 80072fa:	e00a      	b.n	8007312 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2b02      	cmp	r3, #2
 8007300:	d002      	beq.n	8007308 <USB_GetDevSpeed+0x32>
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2b06      	cmp	r3, #6
 8007306:	d102      	bne.n	800730e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007308:	2302      	movs	r3, #2
 800730a:	75fb      	strb	r3, [r7, #23]
 800730c:	e001      	b.n	8007312 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800730e:	230f      	movs	r3, #15
 8007310:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007312:	7dfb      	ldrb	r3, [r7, #23]
}
 8007314:	4618      	mov	r0, r3
 8007316:	371c      	adds	r7, #28
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007320:	b480      	push	{r7}
 8007322:	b085      	sub	sp, #20
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	785b      	ldrb	r3, [r3, #1]
 8007338:	2b01      	cmp	r3, #1
 800733a:	d13a      	bne.n	80073b2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007342:	69da      	ldr	r2, [r3, #28]
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	f003 030f 	and.w	r3, r3, #15
 800734c:	2101      	movs	r1, #1
 800734e:	fa01 f303 	lsl.w	r3, r1, r3
 8007352:	b29b      	uxth	r3, r3
 8007354:	68f9      	ldr	r1, [r7, #12]
 8007356:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800735a:	4313      	orrs	r3, r2
 800735c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	015a      	lsls	r2, r3, #5
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	4413      	add	r3, r2
 8007366:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007370:	2b00      	cmp	r3, #0
 8007372:	d155      	bne.n	8007420 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	015a      	lsls	r2, r3, #5
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	4413      	add	r3, r2
 800737c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	78db      	ldrb	r3, [r3, #3]
 800738e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007390:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	059b      	lsls	r3, r3, #22
 8007396:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007398:	4313      	orrs	r3, r2
 800739a:	68ba      	ldr	r2, [r7, #8]
 800739c:	0151      	lsls	r1, r2, #5
 800739e:	68fa      	ldr	r2, [r7, #12]
 80073a0:	440a      	add	r2, r1
 80073a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073ae:	6013      	str	r3, [r2, #0]
 80073b0:	e036      	b.n	8007420 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073b8:	69da      	ldr	r2, [r3, #28]
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	f003 030f 	and.w	r3, r3, #15
 80073c2:	2101      	movs	r1, #1
 80073c4:	fa01 f303 	lsl.w	r3, r1, r3
 80073c8:	041b      	lsls	r3, r3, #16
 80073ca:	68f9      	ldr	r1, [r7, #12]
 80073cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80073d0:	4313      	orrs	r3, r2
 80073d2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	015a      	lsls	r2, r3, #5
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	4413      	add	r3, r2
 80073dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d11a      	bne.n	8007420 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	015a      	lsls	r2, r3, #5
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	4413      	add	r3, r2
 80073f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	78db      	ldrb	r3, [r3, #3]
 8007404:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007406:	430b      	orrs	r3, r1
 8007408:	4313      	orrs	r3, r2
 800740a:	68ba      	ldr	r2, [r7, #8]
 800740c:	0151      	lsls	r1, r2, #5
 800740e:	68fa      	ldr	r2, [r7, #12]
 8007410:	440a      	add	r2, r1
 8007412:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007416:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800741a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800741e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007420:	2300      	movs	r3, #0
}
 8007422:	4618      	mov	r0, r3
 8007424:	3714      	adds	r7, #20
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr
	...

08007430 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007430:	b480      	push	{r7}
 8007432:	b085      	sub	sp, #20
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	785b      	ldrb	r3, [r3, #1]
 8007448:	2b01      	cmp	r3, #1
 800744a:	d161      	bne.n	8007510 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	015a      	lsls	r2, r3, #5
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	4413      	add	r3, r2
 8007454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800745e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007462:	d11f      	bne.n	80074a4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	015a      	lsls	r2, r3, #5
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	4413      	add	r3, r2
 800746c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	68ba      	ldr	r2, [r7, #8]
 8007474:	0151      	lsls	r1, r2, #5
 8007476:	68fa      	ldr	r2, [r7, #12]
 8007478:	440a      	add	r2, r1
 800747a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800747e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007482:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	015a      	lsls	r2, r3, #5
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	4413      	add	r3, r2
 800748c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	68ba      	ldr	r2, [r7, #8]
 8007494:	0151      	lsls	r1, r2, #5
 8007496:	68fa      	ldr	r2, [r7, #12]
 8007498:	440a      	add	r2, r1
 800749a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800749e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80074a2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	f003 030f 	and.w	r3, r3, #15
 80074b4:	2101      	movs	r1, #1
 80074b6:	fa01 f303 	lsl.w	r3, r1, r3
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	43db      	mvns	r3, r3
 80074be:	68f9      	ldr	r1, [r7, #12]
 80074c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074c4:	4013      	ands	r3, r2
 80074c6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074ce:	69da      	ldr	r2, [r3, #28]
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	781b      	ldrb	r3, [r3, #0]
 80074d4:	f003 030f 	and.w	r3, r3, #15
 80074d8:	2101      	movs	r1, #1
 80074da:	fa01 f303 	lsl.w	r3, r1, r3
 80074de:	b29b      	uxth	r3, r3
 80074e0:	43db      	mvns	r3, r3
 80074e2:	68f9      	ldr	r1, [r7, #12]
 80074e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074e8:	4013      	ands	r3, r2
 80074ea:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	015a      	lsls	r2, r3, #5
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	4413      	add	r3, r2
 80074f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	0159      	lsls	r1, r3, #5
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	440b      	add	r3, r1
 8007502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007506:	4619      	mov	r1, r3
 8007508:	4b35      	ldr	r3, [pc, #212]	; (80075e0 <USB_DeactivateEndpoint+0x1b0>)
 800750a:	4013      	ands	r3, r2
 800750c:	600b      	str	r3, [r1, #0]
 800750e:	e060      	b.n	80075d2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	015a      	lsls	r2, r3, #5
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	4413      	add	r3, r2
 8007518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007522:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007526:	d11f      	bne.n	8007568 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	015a      	lsls	r2, r3, #5
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	4413      	add	r3, r2
 8007530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	68ba      	ldr	r2, [r7, #8]
 8007538:	0151      	lsls	r1, r2, #5
 800753a:	68fa      	ldr	r2, [r7, #12]
 800753c:	440a      	add	r2, r1
 800753e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007542:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007546:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	015a      	lsls	r2, r3, #5
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	4413      	add	r3, r2
 8007550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	68ba      	ldr	r2, [r7, #8]
 8007558:	0151      	lsls	r1, r2, #5
 800755a:	68fa      	ldr	r2, [r7, #12]
 800755c:	440a      	add	r2, r1
 800755e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007562:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007566:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800756e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	f003 030f 	and.w	r3, r3, #15
 8007578:	2101      	movs	r1, #1
 800757a:	fa01 f303 	lsl.w	r3, r1, r3
 800757e:	041b      	lsls	r3, r3, #16
 8007580:	43db      	mvns	r3, r3
 8007582:	68f9      	ldr	r1, [r7, #12]
 8007584:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007588:	4013      	ands	r3, r2
 800758a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007592:	69da      	ldr	r2, [r3, #28]
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	781b      	ldrb	r3, [r3, #0]
 8007598:	f003 030f 	and.w	r3, r3, #15
 800759c:	2101      	movs	r1, #1
 800759e:	fa01 f303 	lsl.w	r3, r1, r3
 80075a2:	041b      	lsls	r3, r3, #16
 80075a4:	43db      	mvns	r3, r3
 80075a6:	68f9      	ldr	r1, [r7, #12]
 80075a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80075ac:	4013      	ands	r3, r2
 80075ae:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	015a      	lsls	r2, r3, #5
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	4413      	add	r3, r2
 80075b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075bc:	681a      	ldr	r2, [r3, #0]
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	0159      	lsls	r1, r3, #5
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	440b      	add	r3, r1
 80075c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075ca:	4619      	mov	r1, r3
 80075cc:	4b05      	ldr	r3, [pc, #20]	; (80075e4 <USB_DeactivateEndpoint+0x1b4>)
 80075ce:	4013      	ands	r3, r2
 80075d0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80075d2:	2300      	movs	r3, #0
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3714      	adds	r7, #20
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr
 80075e0:	ec337800 	.word	0xec337800
 80075e4:	eff37800 	.word	0xeff37800

080075e8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b08a      	sub	sp, #40	; 0x28
 80075ec:	af02      	add	r7, sp, #8
 80075ee:	60f8      	str	r0, [r7, #12]
 80075f0:	60b9      	str	r1, [r7, #8]
 80075f2:	4613      	mov	r3, r2
 80075f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	785b      	ldrb	r3, [r3, #1]
 8007604:	2b01      	cmp	r3, #1
 8007606:	f040 815c 	bne.w	80078c2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	695b      	ldr	r3, [r3, #20]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d132      	bne.n	8007678 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007612:	69bb      	ldr	r3, [r7, #24]
 8007614:	015a      	lsls	r2, r3, #5
 8007616:	69fb      	ldr	r3, [r7, #28]
 8007618:	4413      	add	r3, r2
 800761a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800761e:	691b      	ldr	r3, [r3, #16]
 8007620:	69ba      	ldr	r2, [r7, #24]
 8007622:	0151      	lsls	r1, r2, #5
 8007624:	69fa      	ldr	r2, [r7, #28]
 8007626:	440a      	add	r2, r1
 8007628:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800762c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007630:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007634:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007636:	69bb      	ldr	r3, [r7, #24]
 8007638:	015a      	lsls	r2, r3, #5
 800763a:	69fb      	ldr	r3, [r7, #28]
 800763c:	4413      	add	r3, r2
 800763e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007642:	691b      	ldr	r3, [r3, #16]
 8007644:	69ba      	ldr	r2, [r7, #24]
 8007646:	0151      	lsls	r1, r2, #5
 8007648:	69fa      	ldr	r2, [r7, #28]
 800764a:	440a      	add	r2, r1
 800764c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007650:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007654:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007656:	69bb      	ldr	r3, [r7, #24]
 8007658:	015a      	lsls	r2, r3, #5
 800765a:	69fb      	ldr	r3, [r7, #28]
 800765c:	4413      	add	r3, r2
 800765e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007662:	691b      	ldr	r3, [r3, #16]
 8007664:	69ba      	ldr	r2, [r7, #24]
 8007666:	0151      	lsls	r1, r2, #5
 8007668:	69fa      	ldr	r2, [r7, #28]
 800766a:	440a      	add	r2, r1
 800766c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007670:	0cdb      	lsrs	r3, r3, #19
 8007672:	04db      	lsls	r3, r3, #19
 8007674:	6113      	str	r3, [r2, #16]
 8007676:	e074      	b.n	8007762 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007678:	69bb      	ldr	r3, [r7, #24]
 800767a:	015a      	lsls	r2, r3, #5
 800767c:	69fb      	ldr	r3, [r7, #28]
 800767e:	4413      	add	r3, r2
 8007680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007684:	691b      	ldr	r3, [r3, #16]
 8007686:	69ba      	ldr	r2, [r7, #24]
 8007688:	0151      	lsls	r1, r2, #5
 800768a:	69fa      	ldr	r2, [r7, #28]
 800768c:	440a      	add	r2, r1
 800768e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007692:	0cdb      	lsrs	r3, r3, #19
 8007694:	04db      	lsls	r3, r3, #19
 8007696:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007698:	69bb      	ldr	r3, [r7, #24]
 800769a:	015a      	lsls	r2, r3, #5
 800769c:	69fb      	ldr	r3, [r7, #28]
 800769e:	4413      	add	r3, r2
 80076a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076a4:	691b      	ldr	r3, [r3, #16]
 80076a6:	69ba      	ldr	r2, [r7, #24]
 80076a8:	0151      	lsls	r1, r2, #5
 80076aa:	69fa      	ldr	r2, [r7, #28]
 80076ac:	440a      	add	r2, r1
 80076ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076b2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80076b6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80076ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80076bc:	69bb      	ldr	r3, [r7, #24]
 80076be:	015a      	lsls	r2, r3, #5
 80076c0:	69fb      	ldr	r3, [r7, #28]
 80076c2:	4413      	add	r3, r2
 80076c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076c8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	6959      	ldr	r1, [r3, #20]
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	440b      	add	r3, r1
 80076d4:	1e59      	subs	r1, r3, #1
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	689b      	ldr	r3, [r3, #8]
 80076da:	fbb1 f3f3 	udiv	r3, r1, r3
 80076de:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80076e0:	4b9d      	ldr	r3, [pc, #628]	; (8007958 <USB_EPStartXfer+0x370>)
 80076e2:	400b      	ands	r3, r1
 80076e4:	69b9      	ldr	r1, [r7, #24]
 80076e6:	0148      	lsls	r0, r1, #5
 80076e8:	69f9      	ldr	r1, [r7, #28]
 80076ea:	4401      	add	r1, r0
 80076ec:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80076f0:	4313      	orrs	r3, r2
 80076f2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80076f4:	69bb      	ldr	r3, [r7, #24]
 80076f6:	015a      	lsls	r2, r3, #5
 80076f8:	69fb      	ldr	r3, [r7, #28]
 80076fa:	4413      	add	r3, r2
 80076fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007700:	691a      	ldr	r2, [r3, #16]
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	695b      	ldr	r3, [r3, #20]
 8007706:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800770a:	69b9      	ldr	r1, [r7, #24]
 800770c:	0148      	lsls	r0, r1, #5
 800770e:	69f9      	ldr	r1, [r7, #28]
 8007710:	4401      	add	r1, r0
 8007712:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007716:	4313      	orrs	r3, r2
 8007718:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	78db      	ldrb	r3, [r3, #3]
 800771e:	2b01      	cmp	r3, #1
 8007720:	d11f      	bne.n	8007762 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007722:	69bb      	ldr	r3, [r7, #24]
 8007724:	015a      	lsls	r2, r3, #5
 8007726:	69fb      	ldr	r3, [r7, #28]
 8007728:	4413      	add	r3, r2
 800772a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800772e:	691b      	ldr	r3, [r3, #16]
 8007730:	69ba      	ldr	r2, [r7, #24]
 8007732:	0151      	lsls	r1, r2, #5
 8007734:	69fa      	ldr	r2, [r7, #28]
 8007736:	440a      	add	r2, r1
 8007738:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800773c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007740:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007742:	69bb      	ldr	r3, [r7, #24]
 8007744:	015a      	lsls	r2, r3, #5
 8007746:	69fb      	ldr	r3, [r7, #28]
 8007748:	4413      	add	r3, r2
 800774a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800774e:	691b      	ldr	r3, [r3, #16]
 8007750:	69ba      	ldr	r2, [r7, #24]
 8007752:	0151      	lsls	r1, r2, #5
 8007754:	69fa      	ldr	r2, [r7, #28]
 8007756:	440a      	add	r2, r1
 8007758:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800775c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007760:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007762:	79fb      	ldrb	r3, [r7, #7]
 8007764:	2b01      	cmp	r3, #1
 8007766:	d14b      	bne.n	8007800 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	691b      	ldr	r3, [r3, #16]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d009      	beq.n	8007784 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007770:	69bb      	ldr	r3, [r7, #24]
 8007772:	015a      	lsls	r2, r3, #5
 8007774:	69fb      	ldr	r3, [r7, #28]
 8007776:	4413      	add	r3, r2
 8007778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800777c:	461a      	mov	r2, r3
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	691b      	ldr	r3, [r3, #16]
 8007782:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	78db      	ldrb	r3, [r3, #3]
 8007788:	2b01      	cmp	r3, #1
 800778a:	d128      	bne.n	80077de <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800778c:	69fb      	ldr	r3, [r7, #28]
 800778e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007798:	2b00      	cmp	r3, #0
 800779a:	d110      	bne.n	80077be <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800779c:	69bb      	ldr	r3, [r7, #24]
 800779e:	015a      	lsls	r2, r3, #5
 80077a0:	69fb      	ldr	r3, [r7, #28]
 80077a2:	4413      	add	r3, r2
 80077a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	69ba      	ldr	r2, [r7, #24]
 80077ac:	0151      	lsls	r1, r2, #5
 80077ae:	69fa      	ldr	r2, [r7, #28]
 80077b0:	440a      	add	r2, r1
 80077b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80077ba:	6013      	str	r3, [r2, #0]
 80077bc:	e00f      	b.n	80077de <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80077be:	69bb      	ldr	r3, [r7, #24]
 80077c0:	015a      	lsls	r2, r3, #5
 80077c2:	69fb      	ldr	r3, [r7, #28]
 80077c4:	4413      	add	r3, r2
 80077c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	69ba      	ldr	r2, [r7, #24]
 80077ce:	0151      	lsls	r1, r2, #5
 80077d0:	69fa      	ldr	r2, [r7, #28]
 80077d2:	440a      	add	r2, r1
 80077d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077dc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80077de:	69bb      	ldr	r3, [r7, #24]
 80077e0:	015a      	lsls	r2, r3, #5
 80077e2:	69fb      	ldr	r3, [r7, #28]
 80077e4:	4413      	add	r3, r2
 80077e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	69ba      	ldr	r2, [r7, #24]
 80077ee:	0151      	lsls	r1, r2, #5
 80077f0:	69fa      	ldr	r2, [r7, #28]
 80077f2:	440a      	add	r2, r1
 80077f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80077fc:	6013      	str	r3, [r2, #0]
 80077fe:	e12f      	b.n	8007a60 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007800:	69bb      	ldr	r3, [r7, #24]
 8007802:	015a      	lsls	r2, r3, #5
 8007804:	69fb      	ldr	r3, [r7, #28]
 8007806:	4413      	add	r3, r2
 8007808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	69ba      	ldr	r2, [r7, #24]
 8007810:	0151      	lsls	r1, r2, #5
 8007812:	69fa      	ldr	r2, [r7, #28]
 8007814:	440a      	add	r2, r1
 8007816:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800781a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800781e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	78db      	ldrb	r3, [r3, #3]
 8007824:	2b01      	cmp	r3, #1
 8007826:	d015      	beq.n	8007854 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	695b      	ldr	r3, [r3, #20]
 800782c:	2b00      	cmp	r3, #0
 800782e:	f000 8117 	beq.w	8007a60 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007832:	69fb      	ldr	r3, [r7, #28]
 8007834:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007838:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	781b      	ldrb	r3, [r3, #0]
 800783e:	f003 030f 	and.w	r3, r3, #15
 8007842:	2101      	movs	r1, #1
 8007844:	fa01 f303 	lsl.w	r3, r1, r3
 8007848:	69f9      	ldr	r1, [r7, #28]
 800784a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800784e:	4313      	orrs	r3, r2
 8007850:	634b      	str	r3, [r1, #52]	; 0x34
 8007852:	e105      	b.n	8007a60 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007854:	69fb      	ldr	r3, [r7, #28]
 8007856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007860:	2b00      	cmp	r3, #0
 8007862:	d110      	bne.n	8007886 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007864:	69bb      	ldr	r3, [r7, #24]
 8007866:	015a      	lsls	r2, r3, #5
 8007868:	69fb      	ldr	r3, [r7, #28]
 800786a:	4413      	add	r3, r2
 800786c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	69ba      	ldr	r2, [r7, #24]
 8007874:	0151      	lsls	r1, r2, #5
 8007876:	69fa      	ldr	r2, [r7, #28]
 8007878:	440a      	add	r2, r1
 800787a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800787e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007882:	6013      	str	r3, [r2, #0]
 8007884:	e00f      	b.n	80078a6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007886:	69bb      	ldr	r3, [r7, #24]
 8007888:	015a      	lsls	r2, r3, #5
 800788a:	69fb      	ldr	r3, [r7, #28]
 800788c:	4413      	add	r3, r2
 800788e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	69ba      	ldr	r2, [r7, #24]
 8007896:	0151      	lsls	r1, r2, #5
 8007898:	69fa      	ldr	r2, [r7, #28]
 800789a:	440a      	add	r2, r1
 800789c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078a4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	68d9      	ldr	r1, [r3, #12]
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	781a      	ldrb	r2, [r3, #0]
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	695b      	ldr	r3, [r3, #20]
 80078b2:	b298      	uxth	r0, r3
 80078b4:	79fb      	ldrb	r3, [r7, #7]
 80078b6:	9300      	str	r3, [sp, #0]
 80078b8:	4603      	mov	r3, r0
 80078ba:	68f8      	ldr	r0, [r7, #12]
 80078bc:	f000 fa2b 	bl	8007d16 <USB_WritePacket>
 80078c0:	e0ce      	b.n	8007a60 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80078c2:	69bb      	ldr	r3, [r7, #24]
 80078c4:	015a      	lsls	r2, r3, #5
 80078c6:	69fb      	ldr	r3, [r7, #28]
 80078c8:	4413      	add	r3, r2
 80078ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078ce:	691b      	ldr	r3, [r3, #16]
 80078d0:	69ba      	ldr	r2, [r7, #24]
 80078d2:	0151      	lsls	r1, r2, #5
 80078d4:	69fa      	ldr	r2, [r7, #28]
 80078d6:	440a      	add	r2, r1
 80078d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078dc:	0cdb      	lsrs	r3, r3, #19
 80078de:	04db      	lsls	r3, r3, #19
 80078e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80078e2:	69bb      	ldr	r3, [r7, #24]
 80078e4:	015a      	lsls	r2, r3, #5
 80078e6:	69fb      	ldr	r3, [r7, #28]
 80078e8:	4413      	add	r3, r2
 80078ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078ee:	691b      	ldr	r3, [r3, #16]
 80078f0:	69ba      	ldr	r2, [r7, #24]
 80078f2:	0151      	lsls	r1, r2, #5
 80078f4:	69fa      	ldr	r2, [r7, #28]
 80078f6:	440a      	add	r2, r1
 80078f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007900:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007904:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	695b      	ldr	r3, [r3, #20]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d126      	bne.n	800795c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800790e:	69bb      	ldr	r3, [r7, #24]
 8007910:	015a      	lsls	r2, r3, #5
 8007912:	69fb      	ldr	r3, [r7, #28]
 8007914:	4413      	add	r3, r2
 8007916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800791a:	691a      	ldr	r2, [r3, #16]
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	689b      	ldr	r3, [r3, #8]
 8007920:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007924:	69b9      	ldr	r1, [r7, #24]
 8007926:	0148      	lsls	r0, r1, #5
 8007928:	69f9      	ldr	r1, [r7, #28]
 800792a:	4401      	add	r1, r0
 800792c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007930:	4313      	orrs	r3, r2
 8007932:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007934:	69bb      	ldr	r3, [r7, #24]
 8007936:	015a      	lsls	r2, r3, #5
 8007938:	69fb      	ldr	r3, [r7, #28]
 800793a:	4413      	add	r3, r2
 800793c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007940:	691b      	ldr	r3, [r3, #16]
 8007942:	69ba      	ldr	r2, [r7, #24]
 8007944:	0151      	lsls	r1, r2, #5
 8007946:	69fa      	ldr	r2, [r7, #28]
 8007948:	440a      	add	r2, r1
 800794a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800794e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007952:	6113      	str	r3, [r2, #16]
 8007954:	e036      	b.n	80079c4 <USB_EPStartXfer+0x3dc>
 8007956:	bf00      	nop
 8007958:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	695a      	ldr	r2, [r3, #20]
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	4413      	add	r3, r2
 8007966:	1e5a      	subs	r2, r3, #1
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	689b      	ldr	r3, [r3, #8]
 800796c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007970:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007972:	69bb      	ldr	r3, [r7, #24]
 8007974:	015a      	lsls	r2, r3, #5
 8007976:	69fb      	ldr	r3, [r7, #28]
 8007978:	4413      	add	r3, r2
 800797a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800797e:	691a      	ldr	r2, [r3, #16]
 8007980:	8afb      	ldrh	r3, [r7, #22]
 8007982:	04d9      	lsls	r1, r3, #19
 8007984:	4b39      	ldr	r3, [pc, #228]	; (8007a6c <USB_EPStartXfer+0x484>)
 8007986:	400b      	ands	r3, r1
 8007988:	69b9      	ldr	r1, [r7, #24]
 800798a:	0148      	lsls	r0, r1, #5
 800798c:	69f9      	ldr	r1, [r7, #28]
 800798e:	4401      	add	r1, r0
 8007990:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007994:	4313      	orrs	r3, r2
 8007996:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8007998:	69bb      	ldr	r3, [r7, #24]
 800799a:	015a      	lsls	r2, r3, #5
 800799c:	69fb      	ldr	r3, [r7, #28]
 800799e:	4413      	add	r3, r2
 80079a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079a4:	691a      	ldr	r2, [r3, #16]
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	8af9      	ldrh	r1, [r7, #22]
 80079ac:	fb01 f303 	mul.w	r3, r1, r3
 80079b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80079b4:	69b9      	ldr	r1, [r7, #24]
 80079b6:	0148      	lsls	r0, r1, #5
 80079b8:	69f9      	ldr	r1, [r7, #28]
 80079ba:	4401      	add	r1, r0
 80079bc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80079c0:	4313      	orrs	r3, r2
 80079c2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80079c4:	79fb      	ldrb	r3, [r7, #7]
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d10d      	bne.n	80079e6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	68db      	ldr	r3, [r3, #12]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d009      	beq.n	80079e6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	68d9      	ldr	r1, [r3, #12]
 80079d6:	69bb      	ldr	r3, [r7, #24]
 80079d8:	015a      	lsls	r2, r3, #5
 80079da:	69fb      	ldr	r3, [r7, #28]
 80079dc:	4413      	add	r3, r2
 80079de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079e2:	460a      	mov	r2, r1
 80079e4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	78db      	ldrb	r3, [r3, #3]
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	d128      	bne.n	8007a40 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80079ee:	69fb      	ldr	r3, [r7, #28]
 80079f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d110      	bne.n	8007a20 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80079fe:	69bb      	ldr	r3, [r7, #24]
 8007a00:	015a      	lsls	r2, r3, #5
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	4413      	add	r3, r2
 8007a06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	69ba      	ldr	r2, [r7, #24]
 8007a0e:	0151      	lsls	r1, r2, #5
 8007a10:	69fa      	ldr	r2, [r7, #28]
 8007a12:	440a      	add	r2, r1
 8007a14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a18:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007a1c:	6013      	str	r3, [r2, #0]
 8007a1e:	e00f      	b.n	8007a40 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007a20:	69bb      	ldr	r3, [r7, #24]
 8007a22:	015a      	lsls	r2, r3, #5
 8007a24:	69fb      	ldr	r3, [r7, #28]
 8007a26:	4413      	add	r3, r2
 8007a28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	69ba      	ldr	r2, [r7, #24]
 8007a30:	0151      	lsls	r1, r2, #5
 8007a32:	69fa      	ldr	r2, [r7, #28]
 8007a34:	440a      	add	r2, r1
 8007a36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a3e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007a40:	69bb      	ldr	r3, [r7, #24]
 8007a42:	015a      	lsls	r2, r3, #5
 8007a44:	69fb      	ldr	r3, [r7, #28]
 8007a46:	4413      	add	r3, r2
 8007a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	69ba      	ldr	r2, [r7, #24]
 8007a50:	0151      	lsls	r1, r2, #5
 8007a52:	69fa      	ldr	r2, [r7, #28]
 8007a54:	440a      	add	r2, r1
 8007a56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a5a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007a5e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a60:	2300      	movs	r3, #0
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3720      	adds	r7, #32
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	1ff80000 	.word	0x1ff80000

08007a70 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b087      	sub	sp, #28
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	60f8      	str	r0, [r7, #12]
 8007a78:	60b9      	str	r1, [r7, #8]
 8007a7a:	4613      	mov	r3, r2
 8007a7c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	785b      	ldrb	r3, [r3, #1]
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	f040 80cd 	bne.w	8007c2c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	695b      	ldr	r3, [r3, #20]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d132      	bne.n	8007b00 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	015a      	lsls	r2, r3, #5
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	4413      	add	r3, r2
 8007aa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aa6:	691b      	ldr	r3, [r3, #16]
 8007aa8:	693a      	ldr	r2, [r7, #16]
 8007aaa:	0151      	lsls	r1, r2, #5
 8007aac:	697a      	ldr	r2, [r7, #20]
 8007aae:	440a      	add	r2, r1
 8007ab0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ab4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007ab8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007abc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	015a      	lsls	r2, r3, #5
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	4413      	add	r3, r2
 8007ac6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aca:	691b      	ldr	r3, [r3, #16]
 8007acc:	693a      	ldr	r2, [r7, #16]
 8007ace:	0151      	lsls	r1, r2, #5
 8007ad0:	697a      	ldr	r2, [r7, #20]
 8007ad2:	440a      	add	r2, r1
 8007ad4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ad8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007adc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	015a      	lsls	r2, r3, #5
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	4413      	add	r3, r2
 8007ae6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aea:	691b      	ldr	r3, [r3, #16]
 8007aec:	693a      	ldr	r2, [r7, #16]
 8007aee:	0151      	lsls	r1, r2, #5
 8007af0:	697a      	ldr	r2, [r7, #20]
 8007af2:	440a      	add	r2, r1
 8007af4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007af8:	0cdb      	lsrs	r3, r3, #19
 8007afa:	04db      	lsls	r3, r3, #19
 8007afc:	6113      	str	r3, [r2, #16]
 8007afe:	e04e      	b.n	8007b9e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	015a      	lsls	r2, r3, #5
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	4413      	add	r3, r2
 8007b08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b0c:	691b      	ldr	r3, [r3, #16]
 8007b0e:	693a      	ldr	r2, [r7, #16]
 8007b10:	0151      	lsls	r1, r2, #5
 8007b12:	697a      	ldr	r2, [r7, #20]
 8007b14:	440a      	add	r2, r1
 8007b16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b1a:	0cdb      	lsrs	r3, r3, #19
 8007b1c:	04db      	lsls	r3, r3, #19
 8007b1e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	015a      	lsls	r2, r3, #5
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	4413      	add	r3, r2
 8007b28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b2c:	691b      	ldr	r3, [r3, #16]
 8007b2e:	693a      	ldr	r2, [r7, #16]
 8007b30:	0151      	lsls	r1, r2, #5
 8007b32:	697a      	ldr	r2, [r7, #20]
 8007b34:	440a      	add	r2, r1
 8007b36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b3a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007b3e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007b42:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	695a      	ldr	r2, [r3, #20]
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	689b      	ldr	r3, [r3, #8]
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d903      	bls.n	8007b58 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	689a      	ldr	r2, [r3, #8]
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	015a      	lsls	r2, r3, #5
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	4413      	add	r3, r2
 8007b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b64:	691b      	ldr	r3, [r3, #16]
 8007b66:	693a      	ldr	r2, [r7, #16]
 8007b68:	0151      	lsls	r1, r2, #5
 8007b6a:	697a      	ldr	r2, [r7, #20]
 8007b6c:	440a      	add	r2, r1
 8007b6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007b76:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	015a      	lsls	r2, r3, #5
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	4413      	add	r3, r2
 8007b80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b84:	691a      	ldr	r2, [r3, #16]
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	695b      	ldr	r3, [r3, #20]
 8007b8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b8e:	6939      	ldr	r1, [r7, #16]
 8007b90:	0148      	lsls	r0, r1, #5
 8007b92:	6979      	ldr	r1, [r7, #20]
 8007b94:	4401      	add	r1, r0
 8007b96:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007b9e:	79fb      	ldrb	r3, [r7, #7]
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d11e      	bne.n	8007be2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	691b      	ldr	r3, [r3, #16]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d009      	beq.n	8007bc0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	015a      	lsls	r2, r3, #5
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	4413      	add	r3, r2
 8007bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bb8:	461a      	mov	r2, r3
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	691b      	ldr	r3, [r3, #16]
 8007bbe:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	015a      	lsls	r2, r3, #5
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	4413      	add	r3, r2
 8007bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	693a      	ldr	r2, [r7, #16]
 8007bd0:	0151      	lsls	r1, r2, #5
 8007bd2:	697a      	ldr	r2, [r7, #20]
 8007bd4:	440a      	add	r2, r1
 8007bd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bda:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007bde:	6013      	str	r3, [r2, #0]
 8007be0:	e092      	b.n	8007d08 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	015a      	lsls	r2, r3, #5
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	4413      	add	r3, r2
 8007bea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	693a      	ldr	r2, [r7, #16]
 8007bf2:	0151      	lsls	r1, r2, #5
 8007bf4:	697a      	ldr	r2, [r7, #20]
 8007bf6:	440a      	add	r2, r1
 8007bf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bfc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007c00:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	695b      	ldr	r3, [r3, #20]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d07e      	beq.n	8007d08 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	781b      	ldrb	r3, [r3, #0]
 8007c16:	f003 030f 	and.w	r3, r3, #15
 8007c1a:	2101      	movs	r1, #1
 8007c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8007c20:	6979      	ldr	r1, [r7, #20]
 8007c22:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c26:	4313      	orrs	r3, r2
 8007c28:	634b      	str	r3, [r1, #52]	; 0x34
 8007c2a:	e06d      	b.n	8007d08 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	015a      	lsls	r2, r3, #5
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	4413      	add	r3, r2
 8007c34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c38:	691b      	ldr	r3, [r3, #16]
 8007c3a:	693a      	ldr	r2, [r7, #16]
 8007c3c:	0151      	lsls	r1, r2, #5
 8007c3e:	697a      	ldr	r2, [r7, #20]
 8007c40:	440a      	add	r2, r1
 8007c42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c46:	0cdb      	lsrs	r3, r3, #19
 8007c48:	04db      	lsls	r3, r3, #19
 8007c4a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	015a      	lsls	r2, r3, #5
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	4413      	add	r3, r2
 8007c54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c58:	691b      	ldr	r3, [r3, #16]
 8007c5a:	693a      	ldr	r2, [r7, #16]
 8007c5c:	0151      	lsls	r1, r2, #5
 8007c5e:	697a      	ldr	r2, [r7, #20]
 8007c60:	440a      	add	r2, r1
 8007c62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c66:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007c6a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007c6e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	695b      	ldr	r3, [r3, #20]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d003      	beq.n	8007c80 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	689a      	ldr	r2, [r3, #8]
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	015a      	lsls	r2, r3, #5
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	4413      	add	r3, r2
 8007c88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c8c:	691b      	ldr	r3, [r3, #16]
 8007c8e:	693a      	ldr	r2, [r7, #16]
 8007c90:	0151      	lsls	r1, r2, #5
 8007c92:	697a      	ldr	r2, [r7, #20]
 8007c94:	440a      	add	r2, r1
 8007c96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c9a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007c9e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	015a      	lsls	r2, r3, #5
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	4413      	add	r3, r2
 8007ca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cac:	691a      	ldr	r2, [r3, #16]
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	689b      	ldr	r3, [r3, #8]
 8007cb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007cb6:	6939      	ldr	r1, [r7, #16]
 8007cb8:	0148      	lsls	r0, r1, #5
 8007cba:	6979      	ldr	r1, [r7, #20]
 8007cbc:	4401      	add	r1, r0
 8007cbe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007cc6:	79fb      	ldrb	r3, [r7, #7]
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	d10d      	bne.n	8007ce8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	68db      	ldr	r3, [r3, #12]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d009      	beq.n	8007ce8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	68d9      	ldr	r1, [r3, #12]
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	015a      	lsls	r2, r3, #5
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	4413      	add	r3, r2
 8007ce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ce4:	460a      	mov	r2, r1
 8007ce6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	015a      	lsls	r2, r3, #5
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	4413      	add	r3, r2
 8007cf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	693a      	ldr	r2, [r7, #16]
 8007cf8:	0151      	lsls	r1, r2, #5
 8007cfa:	697a      	ldr	r2, [r7, #20]
 8007cfc:	440a      	add	r2, r1
 8007cfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d02:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007d06:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007d08:	2300      	movs	r3, #0
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	371c      	adds	r7, #28
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d14:	4770      	bx	lr

08007d16 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007d16:	b480      	push	{r7}
 8007d18:	b089      	sub	sp, #36	; 0x24
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	60f8      	str	r0, [r7, #12]
 8007d1e:	60b9      	str	r1, [r7, #8]
 8007d20:	4611      	mov	r1, r2
 8007d22:	461a      	mov	r2, r3
 8007d24:	460b      	mov	r3, r1
 8007d26:	71fb      	strb	r3, [r7, #7]
 8007d28:	4613      	mov	r3, r2
 8007d2a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007d34:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d123      	bne.n	8007d84 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007d3c:	88bb      	ldrh	r3, [r7, #4]
 8007d3e:	3303      	adds	r3, #3
 8007d40:	089b      	lsrs	r3, r3, #2
 8007d42:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007d44:	2300      	movs	r3, #0
 8007d46:	61bb      	str	r3, [r7, #24]
 8007d48:	e018      	b.n	8007d7c <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007d4a:	79fb      	ldrb	r3, [r7, #7]
 8007d4c:	031a      	lsls	r2, r3, #12
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	4413      	add	r3, r2
 8007d52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d56:	461a      	mov	r2, r3
 8007d58:	69fb      	ldr	r3, [r7, #28]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007d5e:	69fb      	ldr	r3, [r7, #28]
 8007d60:	3301      	adds	r3, #1
 8007d62:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007d64:	69fb      	ldr	r3, [r7, #28]
 8007d66:	3301      	adds	r3, #1
 8007d68:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007d6a:	69fb      	ldr	r3, [r7, #28]
 8007d6c:	3301      	adds	r3, #1
 8007d6e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007d70:	69fb      	ldr	r3, [r7, #28]
 8007d72:	3301      	adds	r3, #1
 8007d74:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007d76:	69bb      	ldr	r3, [r7, #24]
 8007d78:	3301      	adds	r3, #1
 8007d7a:	61bb      	str	r3, [r7, #24]
 8007d7c:	69ba      	ldr	r2, [r7, #24]
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d3e2      	bcc.n	8007d4a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007d84:	2300      	movs	r3, #0
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3724      	adds	r7, #36	; 0x24
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr

08007d92 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007d92:	b480      	push	{r7}
 8007d94:	b08b      	sub	sp, #44	; 0x2c
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	60f8      	str	r0, [r7, #12]
 8007d9a:	60b9      	str	r1, [r7, #8]
 8007d9c:	4613      	mov	r3, r2
 8007d9e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007da8:	88fb      	ldrh	r3, [r7, #6]
 8007daa:	089b      	lsrs	r3, r3, #2
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007db0:	88fb      	ldrh	r3, [r7, #6]
 8007db2:	f003 0303 	and.w	r3, r3, #3
 8007db6:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007db8:	2300      	movs	r3, #0
 8007dba:	623b      	str	r3, [r7, #32]
 8007dbc:	e014      	b.n	8007de8 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007dbe:	69bb      	ldr	r3, [r7, #24]
 8007dc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dc4:	681a      	ldr	r2, [r3, #0]
 8007dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc8:	601a      	str	r2, [r3, #0]
    pDest++;
 8007dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dcc:	3301      	adds	r3, #1
 8007dce:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd2:	3301      	adds	r3, #1
 8007dd4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd8:	3301      	adds	r3, #1
 8007dda:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dde:	3301      	adds	r3, #1
 8007de0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007de2:	6a3b      	ldr	r3, [r7, #32]
 8007de4:	3301      	adds	r3, #1
 8007de6:	623b      	str	r3, [r7, #32]
 8007de8:	6a3a      	ldr	r2, [r7, #32]
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d3e6      	bcc.n	8007dbe <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007df0:	8bfb      	ldrh	r3, [r7, #30]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d01e      	beq.n	8007e34 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007df6:	2300      	movs	r3, #0
 8007df8:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007dfa:	69bb      	ldr	r3, [r7, #24]
 8007dfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e00:	461a      	mov	r2, r3
 8007e02:	f107 0310 	add.w	r3, r7, #16
 8007e06:	6812      	ldr	r2, [r2, #0]
 8007e08:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007e0a:	693a      	ldr	r2, [r7, #16]
 8007e0c:	6a3b      	ldr	r3, [r7, #32]
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	00db      	lsls	r3, r3, #3
 8007e12:	fa22 f303 	lsr.w	r3, r2, r3
 8007e16:	b2da      	uxtb	r2, r3
 8007e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e1a:	701a      	strb	r2, [r3, #0]
      i++;
 8007e1c:	6a3b      	ldr	r3, [r7, #32]
 8007e1e:	3301      	adds	r3, #1
 8007e20:	623b      	str	r3, [r7, #32]
      pDest++;
 8007e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e24:	3301      	adds	r3, #1
 8007e26:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007e28:	8bfb      	ldrh	r3, [r7, #30]
 8007e2a:	3b01      	subs	r3, #1
 8007e2c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007e2e:	8bfb      	ldrh	r3, [r7, #30]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d1ea      	bne.n	8007e0a <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	372c      	adds	r7, #44	; 0x2c
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr

08007e42 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007e42:	b480      	push	{r7}
 8007e44:	b085      	sub	sp, #20
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	6078      	str	r0, [r7, #4]
 8007e4a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	781b      	ldrb	r3, [r3, #0]
 8007e54:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	785b      	ldrb	r3, [r3, #1]
 8007e5a:	2b01      	cmp	r3, #1
 8007e5c:	d12c      	bne.n	8007eb8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	015a      	lsls	r2, r3, #5
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	4413      	add	r3, r2
 8007e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	db12      	blt.n	8007e96 <USB_EPSetStall+0x54>
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d00f      	beq.n	8007e96 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	015a      	lsls	r2, r3, #5
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	4413      	add	r3, r2
 8007e7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	68ba      	ldr	r2, [r7, #8]
 8007e86:	0151      	lsls	r1, r2, #5
 8007e88:	68fa      	ldr	r2, [r7, #12]
 8007e8a:	440a      	add	r2, r1
 8007e8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e90:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007e94:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	015a      	lsls	r2, r3, #5
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	4413      	add	r3, r2
 8007e9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	68ba      	ldr	r2, [r7, #8]
 8007ea6:	0151      	lsls	r1, r2, #5
 8007ea8:	68fa      	ldr	r2, [r7, #12]
 8007eaa:	440a      	add	r2, r1
 8007eac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007eb0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007eb4:	6013      	str	r3, [r2, #0]
 8007eb6:	e02b      	b.n	8007f10 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	015a      	lsls	r2, r3, #5
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	4413      	add	r3, r2
 8007ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	db12      	blt.n	8007ef0 <USB_EPSetStall+0xae>
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d00f      	beq.n	8007ef0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	015a      	lsls	r2, r3, #5
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	4413      	add	r3, r2
 8007ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	68ba      	ldr	r2, [r7, #8]
 8007ee0:	0151      	lsls	r1, r2, #5
 8007ee2:	68fa      	ldr	r2, [r7, #12]
 8007ee4:	440a      	add	r2, r1
 8007ee6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007eea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007eee:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	015a      	lsls	r2, r3, #5
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	4413      	add	r3, r2
 8007ef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	68ba      	ldr	r2, [r7, #8]
 8007f00:	0151      	lsls	r1, r2, #5
 8007f02:	68fa      	ldr	r2, [r7, #12]
 8007f04:	440a      	add	r2, r1
 8007f06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f0a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007f0e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007f10:	2300      	movs	r3, #0
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3714      	adds	r7, #20
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr

08007f1e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007f1e:	b480      	push	{r7}
 8007f20:	b085      	sub	sp, #20
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6078      	str	r0, [r7, #4]
 8007f26:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	785b      	ldrb	r3, [r3, #1]
 8007f36:	2b01      	cmp	r3, #1
 8007f38:	d128      	bne.n	8007f8c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	015a      	lsls	r2, r3, #5
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	4413      	add	r3, r2
 8007f42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	68ba      	ldr	r2, [r7, #8]
 8007f4a:	0151      	lsls	r1, r2, #5
 8007f4c:	68fa      	ldr	r2, [r7, #12]
 8007f4e:	440a      	add	r2, r1
 8007f50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f54:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007f58:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	78db      	ldrb	r3, [r3, #3]
 8007f5e:	2b03      	cmp	r3, #3
 8007f60:	d003      	beq.n	8007f6a <USB_EPClearStall+0x4c>
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	78db      	ldrb	r3, [r3, #3]
 8007f66:	2b02      	cmp	r3, #2
 8007f68:	d138      	bne.n	8007fdc <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	015a      	lsls	r2, r3, #5
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	4413      	add	r3, r2
 8007f72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	68ba      	ldr	r2, [r7, #8]
 8007f7a:	0151      	lsls	r1, r2, #5
 8007f7c:	68fa      	ldr	r2, [r7, #12]
 8007f7e:	440a      	add	r2, r1
 8007f80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f88:	6013      	str	r3, [r2, #0]
 8007f8a:	e027      	b.n	8007fdc <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	015a      	lsls	r2, r3, #5
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	4413      	add	r3, r2
 8007f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	68ba      	ldr	r2, [r7, #8]
 8007f9c:	0151      	lsls	r1, r2, #5
 8007f9e:	68fa      	ldr	r2, [r7, #12]
 8007fa0:	440a      	add	r2, r1
 8007fa2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fa6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007faa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	78db      	ldrb	r3, [r3, #3]
 8007fb0:	2b03      	cmp	r3, #3
 8007fb2:	d003      	beq.n	8007fbc <USB_EPClearStall+0x9e>
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	78db      	ldrb	r3, [r3, #3]
 8007fb8:	2b02      	cmp	r3, #2
 8007fba:	d10f      	bne.n	8007fdc <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	015a      	lsls	r2, r3, #5
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	4413      	add	r3, r2
 8007fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	68ba      	ldr	r2, [r7, #8]
 8007fcc:	0151      	lsls	r1, r2, #5
 8007fce:	68fa      	ldr	r2, [r7, #12]
 8007fd0:	440a      	add	r2, r1
 8007fd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fda:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007fdc:	2300      	movs	r3, #0
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3714      	adds	r7, #20
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe8:	4770      	bx	lr

08007fea <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007fea:	b480      	push	{r7}
 8007fec:	b085      	sub	sp, #20
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
 8007ff2:	460b      	mov	r3, r1
 8007ff4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	68fa      	ldr	r2, [r7, #12]
 8008004:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008008:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800800c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008014:	681a      	ldr	r2, [r3, #0]
 8008016:	78fb      	ldrb	r3, [r7, #3]
 8008018:	011b      	lsls	r3, r3, #4
 800801a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800801e:	68f9      	ldr	r1, [r7, #12]
 8008020:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008024:	4313      	orrs	r3, r2
 8008026:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008028:	2300      	movs	r3, #0
}
 800802a:	4618      	mov	r0, r3
 800802c:	3714      	adds	r7, #20
 800802e:	46bd      	mov	sp, r7
 8008030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008034:	4770      	bx	lr

08008036 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008036:	b480      	push	{r7}
 8008038:	b085      	sub	sp, #20
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	68fa      	ldr	r2, [r7, #12]
 800804c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008050:	f023 0303 	bic.w	r3, r3, #3
 8008054:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800805c:	685b      	ldr	r3, [r3, #4]
 800805e:	68fa      	ldr	r2, [r7, #12]
 8008060:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008064:	f023 0302 	bic.w	r3, r3, #2
 8008068:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800806a:	2300      	movs	r3, #0
}
 800806c:	4618      	mov	r0, r3
 800806e:	3714      	adds	r7, #20
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr

08008078 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008078:	b480      	push	{r7}
 800807a:	b085      	sub	sp, #20
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	68fa      	ldr	r2, [r7, #12]
 800808e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008092:	f023 0303 	bic.w	r3, r3, #3
 8008096:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	68fa      	ldr	r2, [r7, #12]
 80080a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80080a6:	f043 0302 	orr.w	r3, r3, #2
 80080aa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80080ac:	2300      	movs	r3, #0
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3714      	adds	r7, #20
 80080b2:	46bd      	mov	sp, r7
 80080b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b8:	4770      	bx	lr

080080ba <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80080ba:	b480      	push	{r7}
 80080bc:	b085      	sub	sp, #20
 80080be:	af00      	add	r7, sp, #0
 80080c0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	695b      	ldr	r3, [r3, #20]
 80080c6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	699b      	ldr	r3, [r3, #24]
 80080cc:	68fa      	ldr	r2, [r7, #12]
 80080ce:	4013      	ands	r3, r2
 80080d0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80080d2:	68fb      	ldr	r3, [r7, #12]
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3714      	adds	r7, #20
 80080d8:	46bd      	mov	sp, r7
 80080da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080de:	4770      	bx	lr

080080e0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b085      	sub	sp, #20
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080f2:	699b      	ldr	r3, [r3, #24]
 80080f4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080fc:	69db      	ldr	r3, [r3, #28]
 80080fe:	68ba      	ldr	r2, [r7, #8]
 8008100:	4013      	ands	r3, r2
 8008102:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	0c1b      	lsrs	r3, r3, #16
}
 8008108:	4618      	mov	r0, r3
 800810a:	3714      	adds	r7, #20
 800810c:	46bd      	mov	sp, r7
 800810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008112:	4770      	bx	lr

08008114 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008114:	b480      	push	{r7}
 8008116:	b085      	sub	sp, #20
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008126:	699b      	ldr	r3, [r3, #24]
 8008128:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008130:	69db      	ldr	r3, [r3, #28]
 8008132:	68ba      	ldr	r2, [r7, #8]
 8008134:	4013      	ands	r3, r2
 8008136:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	b29b      	uxth	r3, r3
}
 800813c:	4618      	mov	r0, r3
 800813e:	3714      	adds	r7, #20
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr

08008148 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008148:	b480      	push	{r7}
 800814a:	b085      	sub	sp, #20
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	460b      	mov	r3, r1
 8008152:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008158:	78fb      	ldrb	r3, [r7, #3]
 800815a:	015a      	lsls	r2, r3, #5
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	4413      	add	r3, r2
 8008160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008164:	689b      	ldr	r3, [r3, #8]
 8008166:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800816e:	695b      	ldr	r3, [r3, #20]
 8008170:	68ba      	ldr	r2, [r7, #8]
 8008172:	4013      	ands	r3, r2
 8008174:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008176:	68bb      	ldr	r3, [r7, #8]
}
 8008178:	4618      	mov	r0, r3
 800817a:	3714      	adds	r7, #20
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr

08008184 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008184:	b480      	push	{r7}
 8008186:	b087      	sub	sp, #28
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	460b      	mov	r3, r1
 800818e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800819a:	691b      	ldr	r3, [r3, #16]
 800819c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081a6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80081a8:	78fb      	ldrb	r3, [r7, #3]
 80081aa:	f003 030f 	and.w	r3, r3, #15
 80081ae:	68fa      	ldr	r2, [r7, #12]
 80081b0:	fa22 f303 	lsr.w	r3, r2, r3
 80081b4:	01db      	lsls	r3, r3, #7
 80081b6:	b2db      	uxtb	r3, r3
 80081b8:	693a      	ldr	r2, [r7, #16]
 80081ba:	4313      	orrs	r3, r2
 80081bc:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80081be:	78fb      	ldrb	r3, [r7, #3]
 80081c0:	015a      	lsls	r2, r3, #5
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	4413      	add	r3, r2
 80081c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	693a      	ldr	r2, [r7, #16]
 80081ce:	4013      	ands	r3, r2
 80081d0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80081d2:	68bb      	ldr	r3, [r7, #8]
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	371c      	adds	r7, #28
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr

080081e0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b083      	sub	sp, #12
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	695b      	ldr	r3, [r3, #20]
 80081ec:	f003 0301 	and.w	r3, r3, #1
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	370c      	adds	r7, #12
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr

080081fc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b085      	sub	sp, #20
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	68fa      	ldr	r2, [r7, #12]
 8008212:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008216:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800821a:	f023 0307 	bic.w	r3, r3, #7
 800821e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	68fa      	ldr	r2, [r7, #12]
 800822a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800822e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008232:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008234:	2300      	movs	r3, #0
}
 8008236:	4618      	mov	r0, r3
 8008238:	3714      	adds	r7, #20
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr
	...

08008244 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008244:	b480      	push	{r7}
 8008246:	b087      	sub	sp, #28
 8008248:	af00      	add	r7, sp, #0
 800824a:	60f8      	str	r0, [r7, #12]
 800824c:	460b      	mov	r3, r1
 800824e:	607a      	str	r2, [r7, #4]
 8008250:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	333c      	adds	r3, #60	; 0x3c
 800825a:	3304      	adds	r3, #4
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	4a26      	ldr	r2, [pc, #152]	; (80082fc <USB_EP0_OutStart+0xb8>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d90a      	bls.n	800827e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008274:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008278:	d101      	bne.n	800827e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800827a:	2300      	movs	r3, #0
 800827c:	e037      	b.n	80082ee <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008284:	461a      	mov	r2, r3
 8008286:	2300      	movs	r3, #0
 8008288:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008290:	691b      	ldr	r3, [r3, #16]
 8008292:	697a      	ldr	r2, [r7, #20]
 8008294:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008298:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800829c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082a4:	691b      	ldr	r3, [r3, #16]
 80082a6:	697a      	ldr	r2, [r7, #20]
 80082a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082ac:	f043 0318 	orr.w	r3, r3, #24
 80082b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082b8:	691b      	ldr	r3, [r3, #16]
 80082ba:	697a      	ldr	r2, [r7, #20]
 80082bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082c0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80082c4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80082c6:	7afb      	ldrb	r3, [r7, #11]
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d10f      	bne.n	80082ec <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082d2:	461a      	mov	r2, r3
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	697a      	ldr	r2, [r7, #20]
 80082e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082e6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80082ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80082ec:	2300      	movs	r3, #0
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	371c      	adds	r7, #28
 80082f2:	46bd      	mov	sp, r7
 80082f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f8:	4770      	bx	lr
 80082fa:	bf00      	nop
 80082fc:	4f54300a 	.word	0x4f54300a

08008300 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008300:	b480      	push	{r7}
 8008302:	b085      	sub	sp, #20
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008308:	2300      	movs	r3, #0
 800830a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	3301      	adds	r3, #1
 8008310:	60fb      	str	r3, [r7, #12]
 8008312:	4a13      	ldr	r2, [pc, #76]	; (8008360 <USB_CoreReset+0x60>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d901      	bls.n	800831c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8008318:	2303      	movs	r3, #3
 800831a:	e01a      	b.n	8008352 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	691b      	ldr	r3, [r3, #16]
 8008320:	2b00      	cmp	r3, #0
 8008322:	daf3      	bge.n	800830c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008324:	2300      	movs	r3, #0
 8008326:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	691b      	ldr	r3, [r3, #16]
 800832c:	f043 0201 	orr.w	r2, r3, #1
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	3301      	adds	r3, #1
 8008338:	60fb      	str	r3, [r7, #12]
 800833a:	4a09      	ldr	r2, [pc, #36]	; (8008360 <USB_CoreReset+0x60>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d901      	bls.n	8008344 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8008340:	2303      	movs	r3, #3
 8008342:	e006      	b.n	8008352 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	691b      	ldr	r3, [r3, #16]
 8008348:	f003 0301 	and.w	r3, r3, #1
 800834c:	2b01      	cmp	r3, #1
 800834e:	d0f1      	beq.n	8008334 <USB_CoreReset+0x34>

  return HAL_OK;
 8008350:	2300      	movs	r3, #0
}
 8008352:	4618      	mov	r0, r3
 8008354:	3714      	adds	r7, #20
 8008356:	46bd      	mov	sp, r7
 8008358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835c:	4770      	bx	lr
 800835e:	bf00      	nop
 8008360:	00030d40 	.word	0x00030d40

08008364 <setIP>:

const ip4_addr_t* getIPAddr(){
	return netif_ip4_addr(&gnetif);
}

void setIP(u32_t addr){
 8008364:	b580      	push	{r7, lr}
 8008366:	b084      	sub	sp, #16
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
	ip4_addr_t temp;
	temp.addr = addr;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	60fb      	str	r3, [r7, #12]
	netif_set_ipaddr(&gnetif,&temp);
 8008370:	f107 030c 	add.w	r3, r7, #12
 8008374:	4619      	mov	r1, r3
 8008376:	4803      	ldr	r0, [pc, #12]	; (8008384 <setIP+0x20>)
 8008378:	f008 fd3a 	bl	8010df0 <netif_set_ipaddr>
}
 800837c:	bf00      	nop
 800837e:	3710      	adds	r7, #16
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}
 8008384:	20004d98 	.word	0x20004d98

08008388 <setNetmask>:
	ip4_addr_t temp;
	temp.addr = addr;
	netif_set_gw(&gnetif,&temp);
}

void setNetmask(u32_t addr){
 8008388:	b580      	push	{r7, lr}
 800838a:	b084      	sub	sp, #16
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
	ip4_addr_t temp;
	temp.addr = addr;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	60fb      	str	r3, [r7, #12]
	netif_set_netmask(&gnetif,&temp);
 8008394:	f107 030c 	add.w	r3, r7, #12
 8008398:	4619      	mov	r1, r3
 800839a:	4803      	ldr	r0, [pc, #12]	; (80083a8 <setNetmask+0x20>)
 800839c:	f008 fd70 	bl	8010e80 <netif_set_netmask>
}
 80083a0:	bf00      	nop
 80083a2:	3710      	adds	r7, #16
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}
 80083a8:	20004d98 	.word	0x20004d98

080083ac <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b084      	sub	sp, #16
 80083b0:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80083b2:	4b8c      	ldr	r3, [pc, #560]	; (80085e4 <MX_LWIP_Init+0x238>)
 80083b4:	22c0      	movs	r2, #192	; 0xc0
 80083b6:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80083b8:	4b8a      	ldr	r3, [pc, #552]	; (80085e4 <MX_LWIP_Init+0x238>)
 80083ba:	22a8      	movs	r2, #168	; 0xa8
 80083bc:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 80083be:	4b89      	ldr	r3, [pc, #548]	; (80085e4 <MX_LWIP_Init+0x238>)
 80083c0:	2200      	movs	r2, #0
 80083c2:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 68;
 80083c4:	4b87      	ldr	r3, [pc, #540]	; (80085e4 <MX_LWIP_Init+0x238>)
 80083c6:	2244      	movs	r2, #68	; 0x44
 80083c8:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80083ca:	4b87      	ldr	r3, [pc, #540]	; (80085e8 <MX_LWIP_Init+0x23c>)
 80083cc:	22ff      	movs	r2, #255	; 0xff
 80083ce:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80083d0:	4b85      	ldr	r3, [pc, #532]	; (80085e8 <MX_LWIP_Init+0x23c>)
 80083d2:	22ff      	movs	r2, #255	; 0xff
 80083d4:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80083d6:	4b84      	ldr	r3, [pc, #528]	; (80085e8 <MX_LWIP_Init+0x23c>)
 80083d8:	22ff      	movs	r2, #255	; 0xff
 80083da:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80083dc:	4b82      	ldr	r3, [pc, #520]	; (80085e8 <MX_LWIP_Init+0x23c>)
 80083de:	2200      	movs	r2, #0
 80083e0:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80083e2:	4b82      	ldr	r3, [pc, #520]	; (80085ec <MX_LWIP_Init+0x240>)
 80083e4:	22c0      	movs	r2, #192	; 0xc0
 80083e6:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80083e8:	4b80      	ldr	r3, [pc, #512]	; (80085ec <MX_LWIP_Init+0x240>)
 80083ea:	22a8      	movs	r2, #168	; 0xa8
 80083ec:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 80083ee:	4b7f      	ldr	r3, [pc, #508]	; (80085ec <MX_LWIP_Init+0x240>)
 80083f0:	2200      	movs	r2, #0
 80083f2:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80083f4:	4b7d      	ldr	r3, [pc, #500]	; (80085ec <MX_LWIP_Init+0x240>)
 80083f6:	2201      	movs	r2, #1
 80083f8:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80083fa:	2100      	movs	r1, #0
 80083fc:	2000      	movs	r0, #0
 80083fe:	f006 fffb 	bl	800f3f8 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8008402:	4b78      	ldr	r3, [pc, #480]	; (80085e4 <MX_LWIP_Init+0x238>)
 8008404:	781b      	ldrb	r3, [r3, #0]
 8008406:	061a      	lsls	r2, r3, #24
 8008408:	4b76      	ldr	r3, [pc, #472]	; (80085e4 <MX_LWIP_Init+0x238>)
 800840a:	785b      	ldrb	r3, [r3, #1]
 800840c:	041b      	lsls	r3, r3, #16
 800840e:	431a      	orrs	r2, r3
 8008410:	4b74      	ldr	r3, [pc, #464]	; (80085e4 <MX_LWIP_Init+0x238>)
 8008412:	789b      	ldrb	r3, [r3, #2]
 8008414:	021b      	lsls	r3, r3, #8
 8008416:	4313      	orrs	r3, r2
 8008418:	4a72      	ldr	r2, [pc, #456]	; (80085e4 <MX_LWIP_Init+0x238>)
 800841a:	78d2      	ldrb	r2, [r2, #3]
 800841c:	4313      	orrs	r3, r2
 800841e:	061a      	lsls	r2, r3, #24
 8008420:	4b70      	ldr	r3, [pc, #448]	; (80085e4 <MX_LWIP_Init+0x238>)
 8008422:	781b      	ldrb	r3, [r3, #0]
 8008424:	0619      	lsls	r1, r3, #24
 8008426:	4b6f      	ldr	r3, [pc, #444]	; (80085e4 <MX_LWIP_Init+0x238>)
 8008428:	785b      	ldrb	r3, [r3, #1]
 800842a:	041b      	lsls	r3, r3, #16
 800842c:	4319      	orrs	r1, r3
 800842e:	4b6d      	ldr	r3, [pc, #436]	; (80085e4 <MX_LWIP_Init+0x238>)
 8008430:	789b      	ldrb	r3, [r3, #2]
 8008432:	021b      	lsls	r3, r3, #8
 8008434:	430b      	orrs	r3, r1
 8008436:	496b      	ldr	r1, [pc, #428]	; (80085e4 <MX_LWIP_Init+0x238>)
 8008438:	78c9      	ldrb	r1, [r1, #3]
 800843a:	430b      	orrs	r3, r1
 800843c:	021b      	lsls	r3, r3, #8
 800843e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008442:	431a      	orrs	r2, r3
 8008444:	4b67      	ldr	r3, [pc, #412]	; (80085e4 <MX_LWIP_Init+0x238>)
 8008446:	781b      	ldrb	r3, [r3, #0]
 8008448:	0619      	lsls	r1, r3, #24
 800844a:	4b66      	ldr	r3, [pc, #408]	; (80085e4 <MX_LWIP_Init+0x238>)
 800844c:	785b      	ldrb	r3, [r3, #1]
 800844e:	041b      	lsls	r3, r3, #16
 8008450:	4319      	orrs	r1, r3
 8008452:	4b64      	ldr	r3, [pc, #400]	; (80085e4 <MX_LWIP_Init+0x238>)
 8008454:	789b      	ldrb	r3, [r3, #2]
 8008456:	021b      	lsls	r3, r3, #8
 8008458:	430b      	orrs	r3, r1
 800845a:	4962      	ldr	r1, [pc, #392]	; (80085e4 <MX_LWIP_Init+0x238>)
 800845c:	78c9      	ldrb	r1, [r1, #3]
 800845e:	430b      	orrs	r3, r1
 8008460:	0a1b      	lsrs	r3, r3, #8
 8008462:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008466:	431a      	orrs	r2, r3
 8008468:	4b5e      	ldr	r3, [pc, #376]	; (80085e4 <MX_LWIP_Init+0x238>)
 800846a:	781b      	ldrb	r3, [r3, #0]
 800846c:	0619      	lsls	r1, r3, #24
 800846e:	4b5d      	ldr	r3, [pc, #372]	; (80085e4 <MX_LWIP_Init+0x238>)
 8008470:	785b      	ldrb	r3, [r3, #1]
 8008472:	041b      	lsls	r3, r3, #16
 8008474:	4319      	orrs	r1, r3
 8008476:	4b5b      	ldr	r3, [pc, #364]	; (80085e4 <MX_LWIP_Init+0x238>)
 8008478:	789b      	ldrb	r3, [r3, #2]
 800847a:	021b      	lsls	r3, r3, #8
 800847c:	430b      	orrs	r3, r1
 800847e:	4959      	ldr	r1, [pc, #356]	; (80085e4 <MX_LWIP_Init+0x238>)
 8008480:	78c9      	ldrb	r1, [r1, #3]
 8008482:	430b      	orrs	r3, r1
 8008484:	0e1b      	lsrs	r3, r3, #24
 8008486:	4313      	orrs	r3, r2
 8008488:	4a59      	ldr	r2, [pc, #356]	; (80085f0 <MX_LWIP_Init+0x244>)
 800848a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800848c:	4b56      	ldr	r3, [pc, #344]	; (80085e8 <MX_LWIP_Init+0x23c>)
 800848e:	781b      	ldrb	r3, [r3, #0]
 8008490:	061a      	lsls	r2, r3, #24
 8008492:	4b55      	ldr	r3, [pc, #340]	; (80085e8 <MX_LWIP_Init+0x23c>)
 8008494:	785b      	ldrb	r3, [r3, #1]
 8008496:	041b      	lsls	r3, r3, #16
 8008498:	431a      	orrs	r2, r3
 800849a:	4b53      	ldr	r3, [pc, #332]	; (80085e8 <MX_LWIP_Init+0x23c>)
 800849c:	789b      	ldrb	r3, [r3, #2]
 800849e:	021b      	lsls	r3, r3, #8
 80084a0:	4313      	orrs	r3, r2
 80084a2:	4a51      	ldr	r2, [pc, #324]	; (80085e8 <MX_LWIP_Init+0x23c>)
 80084a4:	78d2      	ldrb	r2, [r2, #3]
 80084a6:	4313      	orrs	r3, r2
 80084a8:	061a      	lsls	r2, r3, #24
 80084aa:	4b4f      	ldr	r3, [pc, #316]	; (80085e8 <MX_LWIP_Init+0x23c>)
 80084ac:	781b      	ldrb	r3, [r3, #0]
 80084ae:	0619      	lsls	r1, r3, #24
 80084b0:	4b4d      	ldr	r3, [pc, #308]	; (80085e8 <MX_LWIP_Init+0x23c>)
 80084b2:	785b      	ldrb	r3, [r3, #1]
 80084b4:	041b      	lsls	r3, r3, #16
 80084b6:	4319      	orrs	r1, r3
 80084b8:	4b4b      	ldr	r3, [pc, #300]	; (80085e8 <MX_LWIP_Init+0x23c>)
 80084ba:	789b      	ldrb	r3, [r3, #2]
 80084bc:	021b      	lsls	r3, r3, #8
 80084be:	430b      	orrs	r3, r1
 80084c0:	4949      	ldr	r1, [pc, #292]	; (80085e8 <MX_LWIP_Init+0x23c>)
 80084c2:	78c9      	ldrb	r1, [r1, #3]
 80084c4:	430b      	orrs	r3, r1
 80084c6:	021b      	lsls	r3, r3, #8
 80084c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80084cc:	431a      	orrs	r2, r3
 80084ce:	4b46      	ldr	r3, [pc, #280]	; (80085e8 <MX_LWIP_Init+0x23c>)
 80084d0:	781b      	ldrb	r3, [r3, #0]
 80084d2:	0619      	lsls	r1, r3, #24
 80084d4:	4b44      	ldr	r3, [pc, #272]	; (80085e8 <MX_LWIP_Init+0x23c>)
 80084d6:	785b      	ldrb	r3, [r3, #1]
 80084d8:	041b      	lsls	r3, r3, #16
 80084da:	4319      	orrs	r1, r3
 80084dc:	4b42      	ldr	r3, [pc, #264]	; (80085e8 <MX_LWIP_Init+0x23c>)
 80084de:	789b      	ldrb	r3, [r3, #2]
 80084e0:	021b      	lsls	r3, r3, #8
 80084e2:	430b      	orrs	r3, r1
 80084e4:	4940      	ldr	r1, [pc, #256]	; (80085e8 <MX_LWIP_Init+0x23c>)
 80084e6:	78c9      	ldrb	r1, [r1, #3]
 80084e8:	430b      	orrs	r3, r1
 80084ea:	0a1b      	lsrs	r3, r3, #8
 80084ec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80084f0:	431a      	orrs	r2, r3
 80084f2:	4b3d      	ldr	r3, [pc, #244]	; (80085e8 <MX_LWIP_Init+0x23c>)
 80084f4:	781b      	ldrb	r3, [r3, #0]
 80084f6:	0619      	lsls	r1, r3, #24
 80084f8:	4b3b      	ldr	r3, [pc, #236]	; (80085e8 <MX_LWIP_Init+0x23c>)
 80084fa:	785b      	ldrb	r3, [r3, #1]
 80084fc:	041b      	lsls	r3, r3, #16
 80084fe:	4319      	orrs	r1, r3
 8008500:	4b39      	ldr	r3, [pc, #228]	; (80085e8 <MX_LWIP_Init+0x23c>)
 8008502:	789b      	ldrb	r3, [r3, #2]
 8008504:	021b      	lsls	r3, r3, #8
 8008506:	430b      	orrs	r3, r1
 8008508:	4937      	ldr	r1, [pc, #220]	; (80085e8 <MX_LWIP_Init+0x23c>)
 800850a:	78c9      	ldrb	r1, [r1, #3]
 800850c:	430b      	orrs	r3, r1
 800850e:	0e1b      	lsrs	r3, r3, #24
 8008510:	4313      	orrs	r3, r2
 8008512:	4a38      	ldr	r2, [pc, #224]	; (80085f4 <MX_LWIP_Init+0x248>)
 8008514:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8008516:	4b35      	ldr	r3, [pc, #212]	; (80085ec <MX_LWIP_Init+0x240>)
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	061a      	lsls	r2, r3, #24
 800851c:	4b33      	ldr	r3, [pc, #204]	; (80085ec <MX_LWIP_Init+0x240>)
 800851e:	785b      	ldrb	r3, [r3, #1]
 8008520:	041b      	lsls	r3, r3, #16
 8008522:	431a      	orrs	r2, r3
 8008524:	4b31      	ldr	r3, [pc, #196]	; (80085ec <MX_LWIP_Init+0x240>)
 8008526:	789b      	ldrb	r3, [r3, #2]
 8008528:	021b      	lsls	r3, r3, #8
 800852a:	4313      	orrs	r3, r2
 800852c:	4a2f      	ldr	r2, [pc, #188]	; (80085ec <MX_LWIP_Init+0x240>)
 800852e:	78d2      	ldrb	r2, [r2, #3]
 8008530:	4313      	orrs	r3, r2
 8008532:	061a      	lsls	r2, r3, #24
 8008534:	4b2d      	ldr	r3, [pc, #180]	; (80085ec <MX_LWIP_Init+0x240>)
 8008536:	781b      	ldrb	r3, [r3, #0]
 8008538:	0619      	lsls	r1, r3, #24
 800853a:	4b2c      	ldr	r3, [pc, #176]	; (80085ec <MX_LWIP_Init+0x240>)
 800853c:	785b      	ldrb	r3, [r3, #1]
 800853e:	041b      	lsls	r3, r3, #16
 8008540:	4319      	orrs	r1, r3
 8008542:	4b2a      	ldr	r3, [pc, #168]	; (80085ec <MX_LWIP_Init+0x240>)
 8008544:	789b      	ldrb	r3, [r3, #2]
 8008546:	021b      	lsls	r3, r3, #8
 8008548:	430b      	orrs	r3, r1
 800854a:	4928      	ldr	r1, [pc, #160]	; (80085ec <MX_LWIP_Init+0x240>)
 800854c:	78c9      	ldrb	r1, [r1, #3]
 800854e:	430b      	orrs	r3, r1
 8008550:	021b      	lsls	r3, r3, #8
 8008552:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008556:	431a      	orrs	r2, r3
 8008558:	4b24      	ldr	r3, [pc, #144]	; (80085ec <MX_LWIP_Init+0x240>)
 800855a:	781b      	ldrb	r3, [r3, #0]
 800855c:	0619      	lsls	r1, r3, #24
 800855e:	4b23      	ldr	r3, [pc, #140]	; (80085ec <MX_LWIP_Init+0x240>)
 8008560:	785b      	ldrb	r3, [r3, #1]
 8008562:	041b      	lsls	r3, r3, #16
 8008564:	4319      	orrs	r1, r3
 8008566:	4b21      	ldr	r3, [pc, #132]	; (80085ec <MX_LWIP_Init+0x240>)
 8008568:	789b      	ldrb	r3, [r3, #2]
 800856a:	021b      	lsls	r3, r3, #8
 800856c:	430b      	orrs	r3, r1
 800856e:	491f      	ldr	r1, [pc, #124]	; (80085ec <MX_LWIP_Init+0x240>)
 8008570:	78c9      	ldrb	r1, [r1, #3]
 8008572:	430b      	orrs	r3, r1
 8008574:	0a1b      	lsrs	r3, r3, #8
 8008576:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800857a:	431a      	orrs	r2, r3
 800857c:	4b1b      	ldr	r3, [pc, #108]	; (80085ec <MX_LWIP_Init+0x240>)
 800857e:	781b      	ldrb	r3, [r3, #0]
 8008580:	0619      	lsls	r1, r3, #24
 8008582:	4b1a      	ldr	r3, [pc, #104]	; (80085ec <MX_LWIP_Init+0x240>)
 8008584:	785b      	ldrb	r3, [r3, #1]
 8008586:	041b      	lsls	r3, r3, #16
 8008588:	4319      	orrs	r1, r3
 800858a:	4b18      	ldr	r3, [pc, #96]	; (80085ec <MX_LWIP_Init+0x240>)
 800858c:	789b      	ldrb	r3, [r3, #2]
 800858e:	021b      	lsls	r3, r3, #8
 8008590:	430b      	orrs	r3, r1
 8008592:	4916      	ldr	r1, [pc, #88]	; (80085ec <MX_LWIP_Init+0x240>)
 8008594:	78c9      	ldrb	r1, [r1, #3]
 8008596:	430b      	orrs	r3, r1
 8008598:	0e1b      	lsrs	r3, r3, #24
 800859a:	4313      	orrs	r3, r2
 800859c:	4a16      	ldr	r2, [pc, #88]	; (80085f8 <MX_LWIP_Init+0x24c>)
 800859e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80085a0:	4b16      	ldr	r3, [pc, #88]	; (80085fc <MX_LWIP_Init+0x250>)
 80085a2:	9302      	str	r3, [sp, #8]
 80085a4:	4b16      	ldr	r3, [pc, #88]	; (8008600 <MX_LWIP_Init+0x254>)
 80085a6:	9301      	str	r3, [sp, #4]
 80085a8:	2300      	movs	r3, #0
 80085aa:	9300      	str	r3, [sp, #0]
 80085ac:	4b12      	ldr	r3, [pc, #72]	; (80085f8 <MX_LWIP_Init+0x24c>)
 80085ae:	4a11      	ldr	r2, [pc, #68]	; (80085f4 <MX_LWIP_Init+0x248>)
 80085b0:	490f      	ldr	r1, [pc, #60]	; (80085f0 <MX_LWIP_Init+0x244>)
 80085b2:	4814      	ldr	r0, [pc, #80]	; (8008604 <MX_LWIP_Init+0x258>)
 80085b4:	f008 faf4 	bl	8010ba0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80085b8:	4812      	ldr	r0, [pc, #72]	; (8008604 <MX_LWIP_Init+0x258>)
 80085ba:	f008 fcf3 	bl	8010fa4 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80085be:	4b11      	ldr	r3, [pc, #68]	; (8008604 <MX_LWIP_Init+0x258>)
 80085c0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80085c4:	089b      	lsrs	r3, r3, #2
 80085c6:	f003 0301 	and.w	r3, r3, #1
 80085ca:	b2db      	uxtb	r3, r3
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d003      	beq.n	80085d8 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80085d0:	480c      	ldr	r0, [pc, #48]	; (8008604 <MX_LWIP_Init+0x258>)
 80085d2:	f008 fcf7 	bl	8010fc4 <netif_set_up>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80085d6:	e002      	b.n	80085de <MX_LWIP_Init+0x232>
    netif_set_down(&gnetif);
 80085d8:	480a      	ldr	r0, [pc, #40]	; (8008604 <MX_LWIP_Init+0x258>)
 80085da:	f008 fd5f 	bl	801109c <netif_set_down>
}
 80085de:	bf00      	nop
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}
 80085e4:	20004dd0 	.word	0x20004dd0
 80085e8:	20004dcc 	.word	0x20004dcc
 80085ec:	20004d94 	.word	0x20004d94
 80085f0:	20004dc8 	.word	0x20004dc8
 80085f4:	20004dd4 	.word	0x20004dd4
 80085f8:	20004dd8 	.word	0x20004dd8
 80085fc:	0800f309 	.word	0x0800f309
 8008600:	08008c39 	.word	0x08008c39
 8008604:	20004d98 	.word	0x20004d98

08008608 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b08e      	sub	sp, #56	; 0x38
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008610:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008614:	2200      	movs	r2, #0
 8008616:	601a      	str	r2, [r3, #0]
 8008618:	605a      	str	r2, [r3, #4]
 800861a:	609a      	str	r2, [r3, #8]
 800861c:	60da      	str	r2, [r3, #12]
 800861e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4a4a      	ldr	r2, [pc, #296]	; (8008750 <HAL_ETH_MspInit+0x148>)
 8008626:	4293      	cmp	r3, r2
 8008628:	f040 808d 	bne.w	8008746 <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800862c:	2300      	movs	r3, #0
 800862e:	623b      	str	r3, [r7, #32]
 8008630:	4b48      	ldr	r3, [pc, #288]	; (8008754 <HAL_ETH_MspInit+0x14c>)
 8008632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008634:	4a47      	ldr	r2, [pc, #284]	; (8008754 <HAL_ETH_MspInit+0x14c>)
 8008636:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800863a:	6313      	str	r3, [r2, #48]	; 0x30
 800863c:	4b45      	ldr	r3, [pc, #276]	; (8008754 <HAL_ETH_MspInit+0x14c>)
 800863e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008640:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008644:	623b      	str	r3, [r7, #32]
 8008646:	6a3b      	ldr	r3, [r7, #32]
 8008648:	2300      	movs	r3, #0
 800864a:	61fb      	str	r3, [r7, #28]
 800864c:	4b41      	ldr	r3, [pc, #260]	; (8008754 <HAL_ETH_MspInit+0x14c>)
 800864e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008650:	4a40      	ldr	r2, [pc, #256]	; (8008754 <HAL_ETH_MspInit+0x14c>)
 8008652:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008656:	6313      	str	r3, [r2, #48]	; 0x30
 8008658:	4b3e      	ldr	r3, [pc, #248]	; (8008754 <HAL_ETH_MspInit+0x14c>)
 800865a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800865c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008660:	61fb      	str	r3, [r7, #28]
 8008662:	69fb      	ldr	r3, [r7, #28]
 8008664:	2300      	movs	r3, #0
 8008666:	61bb      	str	r3, [r7, #24]
 8008668:	4b3a      	ldr	r3, [pc, #232]	; (8008754 <HAL_ETH_MspInit+0x14c>)
 800866a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800866c:	4a39      	ldr	r2, [pc, #228]	; (8008754 <HAL_ETH_MspInit+0x14c>)
 800866e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008672:	6313      	str	r3, [r2, #48]	; 0x30
 8008674:	4b37      	ldr	r3, [pc, #220]	; (8008754 <HAL_ETH_MspInit+0x14c>)
 8008676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008678:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800867c:	61bb      	str	r3, [r7, #24]
 800867e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008680:	2300      	movs	r3, #0
 8008682:	617b      	str	r3, [r7, #20]
 8008684:	4b33      	ldr	r3, [pc, #204]	; (8008754 <HAL_ETH_MspInit+0x14c>)
 8008686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008688:	4a32      	ldr	r2, [pc, #200]	; (8008754 <HAL_ETH_MspInit+0x14c>)
 800868a:	f043 0304 	orr.w	r3, r3, #4
 800868e:	6313      	str	r3, [r2, #48]	; 0x30
 8008690:	4b30      	ldr	r3, [pc, #192]	; (8008754 <HAL_ETH_MspInit+0x14c>)
 8008692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008694:	f003 0304 	and.w	r3, r3, #4
 8008698:	617b      	str	r3, [r7, #20]
 800869a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800869c:	2300      	movs	r3, #0
 800869e:	613b      	str	r3, [r7, #16]
 80086a0:	4b2c      	ldr	r3, [pc, #176]	; (8008754 <HAL_ETH_MspInit+0x14c>)
 80086a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086a4:	4a2b      	ldr	r2, [pc, #172]	; (8008754 <HAL_ETH_MspInit+0x14c>)
 80086a6:	f043 0301 	orr.w	r3, r3, #1
 80086aa:	6313      	str	r3, [r2, #48]	; 0x30
 80086ac:	4b29      	ldr	r3, [pc, #164]	; (8008754 <HAL_ETH_MspInit+0x14c>)
 80086ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086b0:	f003 0301 	and.w	r3, r3, #1
 80086b4:	613b      	str	r3, [r7, #16]
 80086b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80086b8:	2300      	movs	r3, #0
 80086ba:	60fb      	str	r3, [r7, #12]
 80086bc:	4b25      	ldr	r3, [pc, #148]	; (8008754 <HAL_ETH_MspInit+0x14c>)
 80086be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086c0:	4a24      	ldr	r2, [pc, #144]	; (8008754 <HAL_ETH_MspInit+0x14c>)
 80086c2:	f043 0302 	orr.w	r3, r3, #2
 80086c6:	6313      	str	r3, [r2, #48]	; 0x30
 80086c8:	4b22      	ldr	r3, [pc, #136]	; (8008754 <HAL_ETH_MspInit+0x14c>)
 80086ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086cc:	f003 0302 	and.w	r3, r3, #2
 80086d0:	60fb      	str	r3, [r7, #12]
 80086d2:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80086d4:	2332      	movs	r3, #50	; 0x32
 80086d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086d8:	2302      	movs	r3, #2
 80086da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086dc:	2300      	movs	r3, #0
 80086de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80086e0:	2303      	movs	r3, #3
 80086e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80086e4:	230b      	movs	r3, #11
 80086e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80086e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80086ec:	4619      	mov	r1, r3
 80086ee:	481a      	ldr	r0, [pc, #104]	; (8008758 <HAL_ETH_MspInit+0x150>)
 80086f0:	f7fa fe54 	bl	800339c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80086f4:	2386      	movs	r3, #134	; 0x86
 80086f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086f8:	2302      	movs	r3, #2
 80086fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086fc:	2300      	movs	r3, #0
 80086fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008700:	2303      	movs	r3, #3
 8008702:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008704:	230b      	movs	r3, #11
 8008706:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008708:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800870c:	4619      	mov	r1, r3
 800870e:	4813      	ldr	r0, [pc, #76]	; (800875c <HAL_ETH_MspInit+0x154>)
 8008710:	f7fa fe44 	bl	800339c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8008714:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008718:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800871a:	2302      	movs	r3, #2
 800871c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800871e:	2300      	movs	r3, #0
 8008720:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008722:	2303      	movs	r3, #3
 8008724:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008726:	230b      	movs	r3, #11
 8008728:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800872a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800872e:	4619      	mov	r1, r3
 8008730:	480b      	ldr	r0, [pc, #44]	; (8008760 <HAL_ETH_MspInit+0x158>)
 8008732:	f7fa fe33 	bl	800339c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8008736:	2200      	movs	r2, #0
 8008738:	2105      	movs	r1, #5
 800873a:	203d      	movs	r0, #61	; 0x3d
 800873c:	f7f9 fdf2 	bl	8002324 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8008740:	203d      	movs	r0, #61	; 0x3d
 8008742:	f7f9 fe0b 	bl	800235c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8008746:	bf00      	nop
 8008748:	3738      	adds	r7, #56	; 0x38
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}
 800874e:	bf00      	nop
 8008750:	40028000 	.word	0x40028000
 8008754:	40023800 	.word	0x40023800
 8008758:	40020800 	.word	0x40020800
 800875c:	40020000 	.word	0x40020000
 8008760:	40020400 	.word	0x40020400

08008764 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b082      	sub	sp, #8
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 800876c:	4b04      	ldr	r3, [pc, #16]	; (8008780 <HAL_ETH_RxCpltCallback+0x1c>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4618      	mov	r0, r3
 8008772:	f002 f89d 	bl	800a8b0 <osSemaphoreRelease>
}
 8008776:	bf00      	nop
 8008778:	3708      	adds	r7, #8
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}
 800877e:	bf00      	nop
 8008780:	20000510 	.word	0x20000510

08008784 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8008784:	b5b0      	push	{r4, r5, r7, lr}
 8008786:	b090      	sub	sp, #64	; 0x40
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800878c:	2300      	movs	r3, #0
 800878e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8008790:	4b60      	ldr	r3, [pc, #384]	; (8008914 <low_level_init+0x190>)
 8008792:	4a61      	ldr	r2, [pc, #388]	; (8008918 <low_level_init+0x194>)
 8008794:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8008796:	4b5f      	ldr	r3, [pc, #380]	; (8008914 <low_level_init+0x190>)
 8008798:	2201      	movs	r2, #1
 800879a:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 800879c:	4b5d      	ldr	r3, [pc, #372]	; (8008914 <low_level_init+0x190>)
 800879e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80087a2:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80087a4:	4b5b      	ldr	r3, [pc, #364]	; (8008914 <low_level_init+0x190>)
 80087a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80087aa:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80087ac:	4b59      	ldr	r3, [pc, #356]	; (8008914 <low_level_init+0x190>)
 80087ae:	2201      	movs	r2, #1
 80087b0:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80087b2:	2300      	movs	r3, #0
 80087b4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 80087b8:	2380      	movs	r3, #128	; 0x80
 80087ba:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 80087be:	23e1      	movs	r3, #225	; 0xe1
 80087c0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 80087c4:	2300      	movs	r3, #0
 80087c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 80087ca:	2300      	movs	r3, #0
 80087cc:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 80087d0:	2300      	movs	r3, #0
 80087d2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 80087d6:	4a4f      	ldr	r2, [pc, #316]	; (8008914 <low_level_init+0x190>)
 80087d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80087dc:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 80087de:	4b4d      	ldr	r3, [pc, #308]	; (8008914 <low_level_init+0x190>)
 80087e0:	2201      	movs	r2, #1
 80087e2:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80087e4:	4b4b      	ldr	r3, [pc, #300]	; (8008914 <low_level_init+0x190>)
 80087e6:	2200      	movs	r2, #0
 80087e8:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80087ea:	4b4a      	ldr	r3, [pc, #296]	; (8008914 <low_level_init+0x190>)
 80087ec:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80087f0:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80087f2:	4848      	ldr	r0, [pc, #288]	; (8008914 <low_level_init+0x190>)
 80087f4:	f7f9 fdc0 	bl	8002378 <HAL_ETH_Init>
 80087f8:	4603      	mov	r3, r0
 80087fa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 80087fe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008802:	2b00      	cmp	r3, #0
 8008804:	d108      	bne.n	8008818 <low_level_init+0x94>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800880c:	f043 0304 	orr.w	r3, r3, #4
 8008810:	b2da      	uxtb	r2, r3
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8008818:	2304      	movs	r3, #4
 800881a:	4a40      	ldr	r2, [pc, #256]	; (800891c <low_level_init+0x198>)
 800881c:	4940      	ldr	r1, [pc, #256]	; (8008920 <low_level_init+0x19c>)
 800881e:	483d      	ldr	r0, [pc, #244]	; (8008914 <low_level_init+0x190>)
 8008820:	f7f9 ff46 	bl	80026b0 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8008824:	2304      	movs	r3, #4
 8008826:	4a3f      	ldr	r2, [pc, #252]	; (8008924 <low_level_init+0x1a0>)
 8008828:	493f      	ldr	r1, [pc, #252]	; (8008928 <low_level_init+0x1a4>)
 800882a:	483a      	ldr	r0, [pc, #232]	; (8008914 <low_level_init+0x190>)
 800882c:	f7f9 ffa9 	bl	8002782 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2206      	movs	r2, #6
 8008834:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8008838:	4b36      	ldr	r3, [pc, #216]	; (8008914 <low_level_init+0x190>)
 800883a:	695b      	ldr	r3, [r3, #20]
 800883c:	781a      	ldrb	r2, [r3, #0]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8008844:	4b33      	ldr	r3, [pc, #204]	; (8008914 <low_level_init+0x190>)
 8008846:	695b      	ldr	r3, [r3, #20]
 8008848:	785a      	ldrb	r2, [r3, #1]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8008850:	4b30      	ldr	r3, [pc, #192]	; (8008914 <low_level_init+0x190>)
 8008852:	695b      	ldr	r3, [r3, #20]
 8008854:	789a      	ldrb	r2, [r3, #2]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800885c:	4b2d      	ldr	r3, [pc, #180]	; (8008914 <low_level_init+0x190>)
 800885e:	695b      	ldr	r3, [r3, #20]
 8008860:	78da      	ldrb	r2, [r3, #3]
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8008868:	4b2a      	ldr	r3, [pc, #168]	; (8008914 <low_level_init+0x190>)
 800886a:	695b      	ldr	r3, [r3, #20]
 800886c:	791a      	ldrb	r2, [r3, #4]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8008874:	4b27      	ldr	r3, [pc, #156]	; (8008914 <low_level_init+0x190>)
 8008876:	695b      	ldr	r3, [r3, #20]
 8008878:	795a      	ldrb	r2, [r3, #5]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  /* maximum transfer unit */
  netif->mtu = 1500;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8008886:	841a      	strh	r2, [r3, #32]

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800888e:	f043 030a 	orr.w	r3, r3, #10
 8008892:	b2da      	uxtb	r2, r3
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 800889a:	2300      	movs	r3, #0
 800889c:	62bb      	str	r3, [r7, #40]	; 0x28
 800889e:	2300      	movs	r3, #0
 80088a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 80088a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80088a6:	2101      	movs	r1, #1
 80088a8:	4618      	mov	r0, r3
 80088aa:	f001 ff81 	bl	800a7b0 <osSemaphoreCreate>
 80088ae:	4603      	mov	r3, r0
 80088b0:	4a1e      	ldr	r2, [pc, #120]	; (800892c <low_level_init+0x1a8>)
 80088b2:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80088b4:	4b1e      	ldr	r3, [pc, #120]	; (8008930 <low_level_init+0x1ac>)
 80088b6:	f107 040c 	add.w	r4, r7, #12
 80088ba:	461d      	mov	r5, r3
 80088bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80088be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80088c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80088c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 80088c8:	f107 030c 	add.w	r3, r7, #12
 80088cc:	6879      	ldr	r1, [r7, #4]
 80088ce:	4618      	mov	r0, r3
 80088d0:	f001 fe86 	bl	800a5e0 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80088d4:	480f      	ldr	r0, [pc, #60]	; (8008914 <low_level_init+0x190>)
 80088d6:	f7fa fa7c 	bl	8002dd2 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80088da:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80088de:	461a      	mov	r2, r3
 80088e0:	211d      	movs	r1, #29
 80088e2:	480c      	ldr	r0, [pc, #48]	; (8008914 <low_level_init+0x190>)
 80088e4:	f7fa f9a7 	bl	8002c36 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80088e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ea:	f043 030b 	orr.w	r3, r3, #11
 80088ee:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80088f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f2:	461a      	mov	r2, r3
 80088f4:	211d      	movs	r1, #29
 80088f6:	4807      	ldr	r0, [pc, #28]	; (8008914 <low_level_init+0x190>)
 80088f8:	f7fa fa05 	bl	8002d06 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 80088fc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008900:	461a      	mov	r2, r3
 8008902:	211d      	movs	r1, #29
 8008904:	4803      	ldr	r0, [pc, #12]	; (8008914 <low_level_init+0x190>)
 8008906:	f7fa f996 	bl	8002c36 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800890a:	bf00      	nop
 800890c:	3740      	adds	r7, #64	; 0x40
 800890e:	46bd      	mov	sp, r7
 8008910:	bdb0      	pop	{r4, r5, r7, pc}
 8008912:	bf00      	nop
 8008914:	200066ac 	.word	0x200066ac
 8008918:	40028000 	.word	0x40028000
 800891c:	200066f4 	.word	0x200066f4
 8008920:	20004ddc 	.word	0x20004ddc
 8008924:	20004e5c 	.word	0x20004e5c
 8008928:	2000662c 	.word	0x2000662c
 800892c:	20000510 	.word	0x20000510
 8008930:	0801e81c 	.word	0x0801e81c

08008934 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b08a      	sub	sp, #40	; 0x28
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800893e:	4b4b      	ldr	r3, [pc, #300]	; (8008a6c <low_level_output+0x138>)
 8008940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008942:	689b      	ldr	r3, [r3, #8]
 8008944:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8008946:	2300      	movs	r3, #0
 8008948:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800894a:	2300      	movs	r3, #0
 800894c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800894e:	2300      	movs	r3, #0
 8008950:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8008952:	2300      	movs	r3, #0
 8008954:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8008956:	4b45      	ldr	r3, [pc, #276]	; (8008a6c <low_level_output+0x138>)
 8008958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800895a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800895c:	2300      	movs	r3, #0
 800895e:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	623b      	str	r3, [r7, #32]
 8008964:	e05a      	b.n	8008a1c <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8008966:	69bb      	ldr	r3, [r7, #24]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	2b00      	cmp	r3, #0
 800896c:	da03      	bge.n	8008976 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800896e:	23f8      	movs	r3, #248	; 0xf8
 8008970:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8008974:	e05c      	b.n	8008a30 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8008976:	6a3b      	ldr	r3, [r7, #32]
 8008978:	895b      	ldrh	r3, [r3, #10]
 800897a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800897c:	2300      	movs	r3, #0
 800897e:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8008980:	e02f      	b.n	80089e2 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8008982:	69fa      	ldr	r2, [r7, #28]
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	18d0      	adds	r0, r2, r3
 8008988:	6a3b      	ldr	r3, [r7, #32]
 800898a:	685a      	ldr	r2, [r3, #4]
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	18d1      	adds	r1, r2, r3
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8008996:	3304      	adds	r3, #4
 8008998:	461a      	mov	r2, r3
 800899a:	f013 fc0d 	bl	801c1b8 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800899e:	69bb      	ldr	r3, [r7, #24]
 80089a0:	68db      	ldr	r3, [r3, #12]
 80089a2:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80089a4:	69bb      	ldr	r3, [r7, #24]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	da03      	bge.n	80089b4 <low_level_output+0x80>
        {
          errval = ERR_USE;
 80089ac:	23f8      	movs	r3, #248	; 0xf8
 80089ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80089b2:	e03d      	b.n	8008a30 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80089b4:	69bb      	ldr	r3, [r7, #24]
 80089b6:	689b      	ldr	r3, [r3, #8]
 80089b8:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80089ba:	693a      	ldr	r2, [r7, #16]
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	4413      	add	r3, r2
 80089c0:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80089c4:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80089c6:	68ba      	ldr	r2, [r7, #8]
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	1ad3      	subs	r3, r2, r3
 80089cc:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80089d0:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80089d2:	697a      	ldr	r2, [r7, #20]
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	1ad3      	subs	r3, r2, r3
 80089d8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80089dc:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 80089de:	2300      	movs	r3, #0
 80089e0:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80089e2:	68fa      	ldr	r2, [r7, #12]
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	4413      	add	r3, r2
 80089e8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d8c8      	bhi.n	8008982 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80089f0:	69fa      	ldr	r2, [r7, #28]
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	18d0      	adds	r0, r2, r3
 80089f6:	6a3b      	ldr	r3, [r7, #32]
 80089f8:	685a      	ldr	r2, [r3, #4]
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	4413      	add	r3, r2
 80089fe:	68fa      	ldr	r2, [r7, #12]
 8008a00:	4619      	mov	r1, r3
 8008a02:	f013 fbd9 	bl	801c1b8 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8008a06:	693a      	ldr	r2, [r7, #16]
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	4413      	add	r3, r2
 8008a0c:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8008a0e:	697a      	ldr	r2, [r7, #20]
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	4413      	add	r3, r2
 8008a14:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8008a16:	6a3b      	ldr	r3, [r7, #32]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	623b      	str	r3, [r7, #32]
 8008a1c:	6a3b      	ldr	r3, [r7, #32]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d1a1      	bne.n	8008966 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8008a22:	6979      	ldr	r1, [r7, #20]
 8008a24:	4811      	ldr	r0, [pc, #68]	; (8008a6c <low_level_output+0x138>)
 8008a26:	f7f9 ff19 	bl	800285c <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8008a30:	4b0e      	ldr	r3, [pc, #56]	; (8008a6c <low_level_output+0x138>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a38:	3314      	adds	r3, #20
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f003 0320 	and.w	r3, r3, #32
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d00d      	beq.n	8008a60 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8008a44:	4b09      	ldr	r3, [pc, #36]	; (8008a6c <low_level_output+0x138>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a4c:	3314      	adds	r3, #20
 8008a4e:	2220      	movs	r2, #32
 8008a50:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8008a52:	4b06      	ldr	r3, [pc, #24]	; (8008a6c <low_level_output+0x138>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a5a:	3304      	adds	r3, #4
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8008a60:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3728      	adds	r7, #40	; 0x28
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}
 8008a6c:	200066ac 	.word	0x200066ac

08008a70 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b08c      	sub	sp, #48	; 0x30
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8008a80:	2300      	movs	r3, #0
 8008a82:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8008a84:	2300      	movs	r3, #0
 8008a86:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8008a90:	2300      	movs	r3, #0
 8008a92:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8008a94:	484f      	ldr	r0, [pc, #316]	; (8008bd4 <low_level_input+0x164>)
 8008a96:	f7f9 ffcb 	bl	8002a30 <HAL_ETH_GetReceivedFrame_IT>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d001      	beq.n	8008aa4 <low_level_input+0x34>

    return NULL;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	e092      	b.n	8008bca <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8008aa4:	4b4b      	ldr	r3, [pc, #300]	; (8008bd4 <low_level_input+0x164>)
 8008aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008aa8:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8008aaa:	4b4a      	ldr	r3, [pc, #296]	; (8008bd4 <low_level_input+0x164>)
 8008aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aae:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8008ab0:	89fb      	ldrh	r3, [r7, #14]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d007      	beq.n	8008ac6 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8008ab6:	89fb      	ldrh	r3, [r7, #14]
 8008ab8:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8008abc:	4619      	mov	r1, r3
 8008abe:	2000      	movs	r0, #0
 8008ac0:	f008 fbd6 	bl	8011270 <pbuf_alloc>
 8008ac4:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8008ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d04b      	beq.n	8008b64 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8008acc:	4b41      	ldr	r3, [pc, #260]	; (8008bd4 <low_level_input+0x164>)
 8008ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ad0:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8008ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ad8:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ada:	e040      	b.n	8008b5e <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8008adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ade:	895b      	ldrh	r3, [r3, #10]
 8008ae0:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8008ae6:	e021      	b.n	8008b2c <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8008ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aea:	685a      	ldr	r2, [r3, #4]
 8008aec:	69bb      	ldr	r3, [r7, #24]
 8008aee:	18d0      	adds	r0, r2, r3
 8008af0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008af2:	69fb      	ldr	r3, [r7, #28]
 8008af4:	18d1      	adds	r1, r2, r3
 8008af6:	69fb      	ldr	r3, [r7, #28]
 8008af8:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8008afc:	3304      	adds	r3, #4
 8008afe:	461a      	mov	r2, r3
 8008b00:	f013 fb5a 	bl	801c1b8 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8008b04:	6a3b      	ldr	r3, [r7, #32]
 8008b06:	68db      	ldr	r3, [r3, #12]
 8008b08:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8008b0a:	6a3b      	ldr	r3, [r7, #32]
 8008b0c:	689b      	ldr	r3, [r3, #8]
 8008b0e:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8008b10:	69fa      	ldr	r2, [r7, #28]
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	4413      	add	r3, r2
 8008b16:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8008b1a:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8008b1c:	69ba      	ldr	r2, [r7, #24]
 8008b1e:	69fb      	ldr	r3, [r7, #28]
 8008b20:	1ad3      	subs	r3, r2, r3
 8008b22:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8008b26:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8008b2c:	697a      	ldr	r2, [r7, #20]
 8008b2e:	69fb      	ldr	r3, [r7, #28]
 8008b30:	4413      	add	r3, r2
 8008b32:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d8d6      	bhi.n	8008ae8 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8008b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b3c:	685a      	ldr	r2, [r3, #4]
 8008b3e:	69bb      	ldr	r3, [r7, #24]
 8008b40:	18d0      	adds	r0, r2, r3
 8008b42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b44:	69fb      	ldr	r3, [r7, #28]
 8008b46:	4413      	add	r3, r2
 8008b48:	697a      	ldr	r2, [r7, #20]
 8008b4a:	4619      	mov	r1, r3
 8008b4c:	f013 fb34 	bl	801c1b8 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8008b50:	69fa      	ldr	r2, [r7, #28]
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	4413      	add	r3, r2
 8008b56:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8008b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d1bb      	bne.n	8008adc <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8008b64:	4b1b      	ldr	r3, [pc, #108]	; (8008bd4 <low_level_input+0x164>)
 8008b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b68:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	613b      	str	r3, [r7, #16]
 8008b6e:	e00b      	b.n	8008b88 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8008b70:	6a3b      	ldr	r3, [r7, #32]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008b78:	6a3b      	ldr	r3, [r7, #32]
 8008b7a:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8008b7c:	6a3b      	ldr	r3, [r7, #32]
 8008b7e:	68db      	ldr	r3, [r3, #12]
 8008b80:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	3301      	adds	r3, #1
 8008b86:	613b      	str	r3, [r7, #16]
 8008b88:	4b12      	ldr	r3, [pc, #72]	; (8008bd4 <low_level_input+0x164>)
 8008b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b8c:	693a      	ldr	r2, [r7, #16]
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	d3ee      	bcc.n	8008b70 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8008b92:	4b10      	ldr	r3, [pc, #64]	; (8008bd4 <low_level_input+0x164>)
 8008b94:	2200      	movs	r2, #0
 8008b96:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8008b98:	4b0e      	ldr	r3, [pc, #56]	; (8008bd4 <low_level_input+0x164>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ba0:	3314      	adds	r3, #20
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d00d      	beq.n	8008bc8 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8008bac:	4b09      	ldr	r3, [pc, #36]	; (8008bd4 <low_level_input+0x164>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bb4:	3314      	adds	r3, #20
 8008bb6:	2280      	movs	r2, #128	; 0x80
 8008bb8:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8008bba:	4b06      	ldr	r3, [pc, #24]	; (8008bd4 <low_level_input+0x164>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bc2:	3308      	adds	r3, #8
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	601a      	str	r2, [r3, #0]
  }
  return p;
 8008bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3730      	adds	r7, #48	; 0x30
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}
 8008bd2:	bf00      	nop
 8008bd4:	200066ac 	.word	0x200066ac

08008bd8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b084      	sub	sp, #16
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8008be4:	4b12      	ldr	r3, [pc, #72]	; (8008c30 <ethernetif_input+0x58>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f04f 31ff 	mov.w	r1, #4294967295
 8008bec:	4618      	mov	r0, r3
 8008bee:	f001 fe11 	bl	800a814 <osSemaphoreWait>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d1f5      	bne.n	8008be4 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8008bf8:	480e      	ldr	r0, [pc, #56]	; (8008c34 <ethernetif_input+0x5c>)
 8008bfa:	f012 fd49 	bl	801b690 <sys_mutex_lock>
        p = low_level_input( netif );
 8008bfe:	68f8      	ldr	r0, [r7, #12]
 8008c00:	f7ff ff36 	bl	8008a70 <low_level_input>
 8008c04:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d00a      	beq.n	8008c22 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	691b      	ldr	r3, [r3, #16]
 8008c10:	68f9      	ldr	r1, [r7, #12]
 8008c12:	68b8      	ldr	r0, [r7, #8]
 8008c14:	4798      	blx	r3
 8008c16:	4603      	mov	r3, r0
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d002      	beq.n	8008c22 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8008c1c:	68b8      	ldr	r0, [r7, #8]
 8008c1e:	f008 fe0b 	bl	8011838 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8008c22:	4804      	ldr	r0, [pc, #16]	; (8008c34 <ethernetif_input+0x5c>)
 8008c24:	f012 fd43 	bl	801b6ae <sys_mutex_unlock>
      } while(p!=NULL);
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d1e4      	bne.n	8008bf8 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8008c2e:	e7d9      	b.n	8008be4 <ethernetif_input+0xc>
 8008c30:	20000510 	.word	0x20000510
 8008c34:	20007f04 	.word	0x20007f04

08008c38 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b082      	sub	sp, #8
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d106      	bne.n	8008c54 <ethernetif_init+0x1c>
 8008c46:	4b0e      	ldr	r3, [pc, #56]	; (8008c80 <ethernetif_init+0x48>)
 8008c48:	f240 222b 	movw	r2, #555	; 0x22b
 8008c4c:	490d      	ldr	r1, [pc, #52]	; (8008c84 <ethernetif_init+0x4c>)
 8008c4e:	480e      	ldr	r0, [pc, #56]	; (8008c88 <ethernetif_init+0x50>)
 8008c50:	f013 fd46 	bl	801c6e0 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2273      	movs	r2, #115	; 0x73
 8008c58:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->name[1] = IFNAME1;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2274      	movs	r2, #116	; 0x74
 8008c60:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	4a09      	ldr	r2, [pc, #36]	; (8008c8c <ethernetif_init+0x54>)
 8008c68:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	4a08      	ldr	r2, [pc, #32]	; (8008c90 <ethernetif_init+0x58>)
 8008c6e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f7ff fd87 	bl	8008784 <low_level_init>

  return ERR_OK;
 8008c76:	2300      	movs	r3, #0
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3708      	adds	r7, #8
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}
 8008c80:	0801e838 	.word	0x0801e838
 8008c84:	0801e854 	.word	0x0801e854
 8008c88:	0801e864 	.word	0x0801e864
 8008c8c:	08019451 	.word	0x08019451
 8008c90:	08008935 	.word	0x08008935

08008c94 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008c98:	f7f9 fa5c 	bl	8002154 <HAL_GetTick>
 8008c9c:	4603      	mov	r3, r0
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	bd80      	pop	{r7, pc}

08008ca2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ca2:	b580      	push	{r7, lr}
 8008ca4:	b084      	sub	sp, #16
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	6078      	str	r0, [r7, #4]
 8008caa:	460b      	mov	r3, r1
 8008cac:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008cae:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008cb2:	f013 fa0b 	bl	801c0cc <USBD_static_malloc>
 8008cb6:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d105      	bne.n	8008cca <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8008cc6:	2302      	movs	r3, #2
 8008cc8:	e066      	b.n	8008d98 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	68fa      	ldr	r2, [r7, #12]
 8008cce:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	7c1b      	ldrb	r3, [r3, #16]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d119      	bne.n	8008d0e <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008cda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008cde:	2202      	movs	r2, #2
 8008ce0:	2181      	movs	r1, #129	; 0x81
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f013 f8cf 	bl	801be86 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2201      	movs	r2, #1
 8008cec:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008cee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008cf2:	2202      	movs	r2, #2
 8008cf4:	2101      	movs	r1, #1
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f013 f8c5 	bl	801be86 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2201      	movs	r2, #1
 8008d00:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2210      	movs	r2, #16
 8008d08:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8008d0c:	e016      	b.n	8008d3c <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008d0e:	2340      	movs	r3, #64	; 0x40
 8008d10:	2202      	movs	r2, #2
 8008d12:	2181      	movs	r1, #129	; 0x81
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f013 f8b6 	bl	801be86 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2201      	movs	r2, #1
 8008d1e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008d20:	2340      	movs	r3, #64	; 0x40
 8008d22:	2202      	movs	r2, #2
 8008d24:	2101      	movs	r1, #1
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f013 f8ad 	bl	801be86 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2201      	movs	r2, #1
 8008d30:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2210      	movs	r2, #16
 8008d38:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008d3c:	2308      	movs	r3, #8
 8008d3e:	2203      	movs	r2, #3
 8008d40:	2182      	movs	r1, #130	; 0x82
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f013 f89f 	bl	801be86 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	2200      	movs	r2, #0
 8008d66:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	7c1b      	ldrb	r3, [r3, #16]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d109      	bne.n	8008d86 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008d78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d7c:	2101      	movs	r1, #1
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f013 f970 	bl	801c064 <USBD_LL_PrepareReceive>
 8008d84:	e007      	b.n	8008d96 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008d8c:	2340      	movs	r3, #64	; 0x40
 8008d8e:	2101      	movs	r1, #1
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f013 f967 	bl	801c064 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008d96:	2300      	movs	r3, #0
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3710      	adds	r7, #16
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}

08008da0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b082      	sub	sp, #8
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	460b      	mov	r3, r1
 8008daa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008dac:	2181      	movs	r1, #129	; 0x81
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f013 f88f 	bl	801bed2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2200      	movs	r2, #0
 8008db8:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008dba:	2101      	movs	r1, #1
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f013 f888 	bl	801bed2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008dca:	2182      	movs	r1, #130	; 0x82
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f013 f880 	bl	801bed2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d00e      	beq.n	8008e0a <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f013 f973 	bl	801c0e8 <USBD_static_free>
    pdev->pClassData = NULL;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2200      	movs	r2, #0
 8008e06:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008e0a:	2300      	movs	r3, #0
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3708      	adds	r7, #8
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}

08008e14 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b086      	sub	sp, #24
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e24:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008e26:	2300      	movs	r3, #0
 8008e28:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008e32:	693b      	ldr	r3, [r7, #16]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d101      	bne.n	8008e3c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8008e38:	2303      	movs	r3, #3
 8008e3a:	e0af      	b.n	8008f9c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	781b      	ldrb	r3, [r3, #0]
 8008e40:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d03f      	beq.n	8008ec8 <USBD_CDC_Setup+0xb4>
 8008e48:	2b20      	cmp	r3, #32
 8008e4a:	f040 809f 	bne.w	8008f8c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	88db      	ldrh	r3, [r3, #6]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d02e      	beq.n	8008eb4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	781b      	ldrb	r3, [r3, #0]
 8008e5a:	b25b      	sxtb	r3, r3
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	da16      	bge.n	8008e8e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008e66:	689b      	ldr	r3, [r3, #8]
 8008e68:	683a      	ldr	r2, [r7, #0]
 8008e6a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8008e6c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008e6e:	683a      	ldr	r2, [r7, #0]
 8008e70:	88d2      	ldrh	r2, [r2, #6]
 8008e72:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	88db      	ldrh	r3, [r3, #6]
 8008e78:	2b07      	cmp	r3, #7
 8008e7a:	bf28      	it	cs
 8008e7c:	2307      	movcs	r3, #7
 8008e7e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	89fa      	ldrh	r2, [r7, #14]
 8008e84:	4619      	mov	r1, r3
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f001 fae9 	bl	800a45e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8008e8c:	e085      	b.n	8008f9a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	785a      	ldrb	r2, [r3, #1]
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	88db      	ldrh	r3, [r3, #6]
 8008e9c:	b2da      	uxtb	r2, r3
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008ea4:	6939      	ldr	r1, [r7, #16]
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	88db      	ldrh	r3, [r3, #6]
 8008eaa:	461a      	mov	r2, r3
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f001 fb02 	bl	800a4b6 <USBD_CtlPrepareRx>
      break;
 8008eb2:	e072      	b.n	8008f9a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008eba:	689b      	ldr	r3, [r3, #8]
 8008ebc:	683a      	ldr	r2, [r7, #0]
 8008ebe:	7850      	ldrb	r0, [r2, #1]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	6839      	ldr	r1, [r7, #0]
 8008ec4:	4798      	blx	r3
      break;
 8008ec6:	e068      	b.n	8008f9a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	785b      	ldrb	r3, [r3, #1]
 8008ecc:	2b0b      	cmp	r3, #11
 8008ece:	d852      	bhi.n	8008f76 <USBD_CDC_Setup+0x162>
 8008ed0:	a201      	add	r2, pc, #4	; (adr r2, 8008ed8 <USBD_CDC_Setup+0xc4>)
 8008ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ed6:	bf00      	nop
 8008ed8:	08008f09 	.word	0x08008f09
 8008edc:	08008f85 	.word	0x08008f85
 8008ee0:	08008f77 	.word	0x08008f77
 8008ee4:	08008f77 	.word	0x08008f77
 8008ee8:	08008f77 	.word	0x08008f77
 8008eec:	08008f77 	.word	0x08008f77
 8008ef0:	08008f77 	.word	0x08008f77
 8008ef4:	08008f77 	.word	0x08008f77
 8008ef8:	08008f77 	.word	0x08008f77
 8008efc:	08008f77 	.word	0x08008f77
 8008f00:	08008f33 	.word	0x08008f33
 8008f04:	08008f5d 	.word	0x08008f5d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f0e:	b2db      	uxtb	r3, r3
 8008f10:	2b03      	cmp	r3, #3
 8008f12:	d107      	bne.n	8008f24 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008f14:	f107 030a 	add.w	r3, r7, #10
 8008f18:	2202      	movs	r2, #2
 8008f1a:	4619      	mov	r1, r3
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f001 fa9e 	bl	800a45e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008f22:	e032      	b.n	8008f8a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008f24:	6839      	ldr	r1, [r7, #0]
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f001 fa28 	bl	800a37c <USBD_CtlError>
            ret = USBD_FAIL;
 8008f2c:	2303      	movs	r3, #3
 8008f2e:	75fb      	strb	r3, [r7, #23]
          break;
 8008f30:	e02b      	b.n	8008f8a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f38:	b2db      	uxtb	r3, r3
 8008f3a:	2b03      	cmp	r3, #3
 8008f3c:	d107      	bne.n	8008f4e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008f3e:	f107 030d 	add.w	r3, r7, #13
 8008f42:	2201      	movs	r2, #1
 8008f44:	4619      	mov	r1, r3
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f001 fa89 	bl	800a45e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008f4c:	e01d      	b.n	8008f8a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008f4e:	6839      	ldr	r1, [r7, #0]
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f001 fa13 	bl	800a37c <USBD_CtlError>
            ret = USBD_FAIL;
 8008f56:	2303      	movs	r3, #3
 8008f58:	75fb      	strb	r3, [r7, #23]
          break;
 8008f5a:	e016      	b.n	8008f8a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f62:	b2db      	uxtb	r3, r3
 8008f64:	2b03      	cmp	r3, #3
 8008f66:	d00f      	beq.n	8008f88 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8008f68:	6839      	ldr	r1, [r7, #0]
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f001 fa06 	bl	800a37c <USBD_CtlError>
            ret = USBD_FAIL;
 8008f70:	2303      	movs	r3, #3
 8008f72:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008f74:	e008      	b.n	8008f88 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008f76:	6839      	ldr	r1, [r7, #0]
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f001 f9ff 	bl	800a37c <USBD_CtlError>
          ret = USBD_FAIL;
 8008f7e:	2303      	movs	r3, #3
 8008f80:	75fb      	strb	r3, [r7, #23]
          break;
 8008f82:	e002      	b.n	8008f8a <USBD_CDC_Setup+0x176>
          break;
 8008f84:	bf00      	nop
 8008f86:	e008      	b.n	8008f9a <USBD_CDC_Setup+0x186>
          break;
 8008f88:	bf00      	nop
      }
      break;
 8008f8a:	e006      	b.n	8008f9a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8008f8c:	6839      	ldr	r1, [r7, #0]
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f001 f9f4 	bl	800a37c <USBD_CtlError>
      ret = USBD_FAIL;
 8008f94:	2303      	movs	r3, #3
 8008f96:	75fb      	strb	r3, [r7, #23]
      break;
 8008f98:	bf00      	nop
  }

  return (uint8_t)ret;
 8008f9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3718      	adds	r7, #24
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}

08008fa4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b084      	sub	sp, #16
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
 8008fac:	460b      	mov	r3, r1
 8008fae:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008fb6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d101      	bne.n	8008fc6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008fc2:	2303      	movs	r3, #3
 8008fc4:	e04f      	b.n	8009066 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008fcc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008fce:	78fa      	ldrb	r2, [r7, #3]
 8008fd0:	6879      	ldr	r1, [r7, #4]
 8008fd2:	4613      	mov	r3, r2
 8008fd4:	009b      	lsls	r3, r3, #2
 8008fd6:	4413      	add	r3, r2
 8008fd8:	009b      	lsls	r3, r3, #2
 8008fda:	440b      	add	r3, r1
 8008fdc:	3318      	adds	r3, #24
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d029      	beq.n	8009038 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008fe4:	78fa      	ldrb	r2, [r7, #3]
 8008fe6:	6879      	ldr	r1, [r7, #4]
 8008fe8:	4613      	mov	r3, r2
 8008fea:	009b      	lsls	r3, r3, #2
 8008fec:	4413      	add	r3, r2
 8008fee:	009b      	lsls	r3, r3, #2
 8008ff0:	440b      	add	r3, r1
 8008ff2:	3318      	adds	r3, #24
 8008ff4:	681a      	ldr	r2, [r3, #0]
 8008ff6:	78f9      	ldrb	r1, [r7, #3]
 8008ff8:	68f8      	ldr	r0, [r7, #12]
 8008ffa:	460b      	mov	r3, r1
 8008ffc:	00db      	lsls	r3, r3, #3
 8008ffe:	1a5b      	subs	r3, r3, r1
 8009000:	009b      	lsls	r3, r3, #2
 8009002:	4403      	add	r3, r0
 8009004:	3344      	adds	r3, #68	; 0x44
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	fbb2 f1f3 	udiv	r1, r2, r3
 800900c:	fb03 f301 	mul.w	r3, r3, r1
 8009010:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009012:	2b00      	cmp	r3, #0
 8009014:	d110      	bne.n	8009038 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8009016:	78fa      	ldrb	r2, [r7, #3]
 8009018:	6879      	ldr	r1, [r7, #4]
 800901a:	4613      	mov	r3, r2
 800901c:	009b      	lsls	r3, r3, #2
 800901e:	4413      	add	r3, r2
 8009020:	009b      	lsls	r3, r3, #2
 8009022:	440b      	add	r3, r1
 8009024:	3318      	adds	r3, #24
 8009026:	2200      	movs	r2, #0
 8009028:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800902a:	78f9      	ldrb	r1, [r7, #3]
 800902c:	2300      	movs	r3, #0
 800902e:	2200      	movs	r2, #0
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f012 fff6 	bl	801c022 <USBD_LL_Transmit>
 8009036:	e015      	b.n	8009064 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	2200      	movs	r2, #0
 800903c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009046:	691b      	ldr	r3, [r3, #16]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d00b      	beq.n	8009064 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009052:	691b      	ldr	r3, [r3, #16]
 8009054:	68ba      	ldr	r2, [r7, #8]
 8009056:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800905a:	68ba      	ldr	r2, [r7, #8]
 800905c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009060:	78fa      	ldrb	r2, [r7, #3]
 8009062:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009064:	2300      	movs	r3, #0
}
 8009066:	4618      	mov	r0, r3
 8009068:	3710      	adds	r7, #16
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}

0800906e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800906e:	b580      	push	{r7, lr}
 8009070:	b084      	sub	sp, #16
 8009072:	af00      	add	r7, sp, #0
 8009074:	6078      	str	r0, [r7, #4]
 8009076:	460b      	mov	r3, r1
 8009078:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009080:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009088:	2b00      	cmp	r3, #0
 800908a:	d101      	bne.n	8009090 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800908c:	2303      	movs	r3, #3
 800908e:	e015      	b.n	80090bc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009090:	78fb      	ldrb	r3, [r7, #3]
 8009092:	4619      	mov	r1, r3
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f013 f806 	bl	801c0a6 <USBD_LL_GetRxDataSize>
 800909a:	4602      	mov	r2, r0
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80090a8:	68db      	ldr	r3, [r3, #12]
 80090aa:	68fa      	ldr	r2, [r7, #12]
 80090ac:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80090b0:	68fa      	ldr	r2, [r7, #12]
 80090b2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80090b6:	4611      	mov	r1, r2
 80090b8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80090ba:	2300      	movs	r3, #0
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3710      	adds	r7, #16
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}

080090c4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b084      	sub	sp, #16
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80090d2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d101      	bne.n	80090de <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80090da:	2303      	movs	r3, #3
 80090dc:	e01b      	b.n	8009116 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d015      	beq.n	8009114 <USBD_CDC_EP0_RxReady+0x50>
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80090ee:	2bff      	cmp	r3, #255	; 0xff
 80090f0:	d010      	beq.n	8009114 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80090f8:	689b      	ldr	r3, [r3, #8]
 80090fa:	68fa      	ldr	r2, [r7, #12]
 80090fc:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8009100:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009102:	68fa      	ldr	r2, [r7, #12]
 8009104:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009108:	b292      	uxth	r2, r2
 800910a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	22ff      	movs	r2, #255	; 0xff
 8009110:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009114:	2300      	movs	r3, #0
}
 8009116:	4618      	mov	r0, r3
 8009118:	3710      	adds	r7, #16
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}
	...

08009120 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009120:	b480      	push	{r7}
 8009122:	b083      	sub	sp, #12
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2243      	movs	r2, #67	; 0x43
 800912c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800912e:	4b03      	ldr	r3, [pc, #12]	; (800913c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009130:	4618      	mov	r0, r3
 8009132:	370c      	adds	r7, #12
 8009134:	46bd      	mov	sp, r7
 8009136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913a:	4770      	bx	lr
 800913c:	200000a4 	.word	0x200000a4

08009140 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009140:	b480      	push	{r7}
 8009142:	b083      	sub	sp, #12
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2243      	movs	r2, #67	; 0x43
 800914c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800914e:	4b03      	ldr	r3, [pc, #12]	; (800915c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009150:	4618      	mov	r0, r3
 8009152:	370c      	adds	r7, #12
 8009154:	46bd      	mov	sp, r7
 8009156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915a:	4770      	bx	lr
 800915c:	20000060 	.word	0x20000060

08009160 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009160:	b480      	push	{r7}
 8009162:	b083      	sub	sp, #12
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2243      	movs	r2, #67	; 0x43
 800916c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800916e:	4b03      	ldr	r3, [pc, #12]	; (800917c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009170:	4618      	mov	r0, r3
 8009172:	370c      	adds	r7, #12
 8009174:	46bd      	mov	sp, r7
 8009176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917a:	4770      	bx	lr
 800917c:	200000e8 	.word	0x200000e8

08009180 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009180:	b480      	push	{r7}
 8009182:	b083      	sub	sp, #12
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	220a      	movs	r2, #10
 800918c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800918e:	4b03      	ldr	r3, [pc, #12]	; (800919c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009190:	4618      	mov	r0, r3
 8009192:	370c      	adds	r7, #12
 8009194:	46bd      	mov	sp, r7
 8009196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919a:	4770      	bx	lr
 800919c:	2000001c 	.word	0x2000001c

080091a0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b083      	sub	sp, #12
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d101      	bne.n	80091b4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80091b0:	2303      	movs	r3, #3
 80091b2:	e004      	b.n	80091be <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	683a      	ldr	r2, [r7, #0]
 80091b8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80091bc:	2300      	movs	r3, #0
}
 80091be:	4618      	mov	r0, r3
 80091c0:	370c      	adds	r7, #12
 80091c2:	46bd      	mov	sp, r7
 80091c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c8:	4770      	bx	lr

080091ca <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80091ca:	b480      	push	{r7}
 80091cc:	b087      	sub	sp, #28
 80091ce:	af00      	add	r7, sp, #0
 80091d0:	60f8      	str	r0, [r7, #12]
 80091d2:	60b9      	str	r1, [r7, #8]
 80091d4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80091dc:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d101      	bne.n	80091e8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80091e4:	2303      	movs	r3, #3
 80091e6:	e008      	b.n	80091fa <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80091e8:	697b      	ldr	r3, [r7, #20]
 80091ea:	68ba      	ldr	r2, [r7, #8]
 80091ec:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	687a      	ldr	r2, [r7, #4]
 80091f4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80091f8:	2300      	movs	r3, #0
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	371c      	adds	r7, #28
 80091fe:	46bd      	mov	sp, r7
 8009200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009204:	4770      	bx	lr

08009206 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009206:	b480      	push	{r7}
 8009208:	b085      	sub	sp, #20
 800920a:	af00      	add	r7, sp, #0
 800920c:	6078      	str	r0, [r7, #4]
 800920e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009216:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d101      	bne.n	8009222 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800921e:	2303      	movs	r3, #3
 8009220:	e004      	b.n	800922c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	683a      	ldr	r2, [r7, #0]
 8009226:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800922a:	2300      	movs	r3, #0
}
 800922c:	4618      	mov	r0, r3
 800922e:	3714      	adds	r7, #20
 8009230:	46bd      	mov	sp, r7
 8009232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009236:	4770      	bx	lr

08009238 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b084      	sub	sp, #16
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009246:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800924e:	2b00      	cmp	r3, #0
 8009250:	d101      	bne.n	8009256 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009252:	2303      	movs	r3, #3
 8009254:	e016      	b.n	8009284 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	7c1b      	ldrb	r3, [r3, #16]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d109      	bne.n	8009272 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009264:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009268:	2101      	movs	r1, #1
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f012 fefa 	bl	801c064 <USBD_LL_PrepareReceive>
 8009270:	e007      	b.n	8009282 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009278:	2340      	movs	r3, #64	; 0x40
 800927a:	2101      	movs	r1, #1
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f012 fef1 	bl	801c064 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009282:	2300      	movs	r3, #0
}
 8009284:	4618      	mov	r0, r3
 8009286:	3710      	adds	r7, #16
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}

0800928c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b086      	sub	sp, #24
 8009290:	af00      	add	r7, sp, #0
 8009292:	60f8      	str	r0, [r7, #12]
 8009294:	60b9      	str	r1, [r7, #8]
 8009296:	4613      	mov	r3, r2
 8009298:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d101      	bne.n	80092a4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80092a0:	2303      	movs	r3, #3
 80092a2:	e01f      	b.n	80092e4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	2200      	movs	r2, #0
 80092a8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	2200      	movs	r2, #0
 80092b0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	2200      	movs	r2, #0
 80092b8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d003      	beq.n	80092ca <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	68ba      	ldr	r2, [r7, #8]
 80092c6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	2201      	movs	r2, #1
 80092ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	79fa      	ldrb	r2, [r7, #7]
 80092d6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80092d8:	68f8      	ldr	r0, [r7, #12]
 80092da:	f012 fd6d 	bl	801bdb8 <USBD_LL_Init>
 80092de:	4603      	mov	r3, r0
 80092e0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80092e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3718      	adds	r7, #24
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}

080092ec <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b084      	sub	sp, #16
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
 80092f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80092f6:	2300      	movs	r3, #0
 80092f8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d101      	bne.n	8009304 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8009300:	2303      	movs	r3, #3
 8009302:	e016      	b.n	8009332 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	683a      	ldr	r2, [r7, #0]
 8009308:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009314:	2b00      	cmp	r3, #0
 8009316:	d00b      	beq.n	8009330 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800931e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009320:	f107 020e 	add.w	r2, r7, #14
 8009324:	4610      	mov	r0, r2
 8009326:	4798      	blx	r3
 8009328:	4602      	mov	r2, r0
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8009330:	2300      	movs	r3, #0
}
 8009332:	4618      	mov	r0, r3
 8009334:	3710      	adds	r7, #16
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}

0800933a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800933a:	b580      	push	{r7, lr}
 800933c:	b082      	sub	sp, #8
 800933e:	af00      	add	r7, sp, #0
 8009340:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f012 fd84 	bl	801be50 <USBD_LL_Start>
 8009348:	4603      	mov	r3, r0
}
 800934a:	4618      	mov	r0, r3
 800934c:	3708      	adds	r7, #8
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}

08009352 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009352:	b480      	push	{r7}
 8009354:	b083      	sub	sp, #12
 8009356:	af00      	add	r7, sp, #0
 8009358:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800935a:	2300      	movs	r3, #0
}
 800935c:	4618      	mov	r0, r3
 800935e:	370c      	adds	r7, #12
 8009360:	46bd      	mov	sp, r7
 8009362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009366:	4770      	bx	lr

08009368 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b084      	sub	sp, #16
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
 8009370:	460b      	mov	r3, r1
 8009372:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009374:	2303      	movs	r3, #3
 8009376:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800937e:	2b00      	cmp	r3, #0
 8009380:	d009      	beq.n	8009396 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	78fa      	ldrb	r2, [r7, #3]
 800938c:	4611      	mov	r1, r2
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	4798      	blx	r3
 8009392:	4603      	mov	r3, r0
 8009394:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009396:	7bfb      	ldrb	r3, [r7, #15]
}
 8009398:	4618      	mov	r0, r3
 800939a:	3710      	adds	r7, #16
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}

080093a0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b082      	sub	sp, #8
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
 80093a8:	460b      	mov	r3, r1
 80093aa:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d007      	beq.n	80093c6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093bc:	685b      	ldr	r3, [r3, #4]
 80093be:	78fa      	ldrb	r2, [r7, #3]
 80093c0:	4611      	mov	r1, r2
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	4798      	blx	r3
  }

  return USBD_OK;
 80093c6:	2300      	movs	r3, #0
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	3708      	adds	r7, #8
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}

080093d0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b084      	sub	sp, #16
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
 80093d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80093e0:	6839      	ldr	r1, [r7, #0]
 80093e2:	4618      	mov	r0, r3
 80093e4:	f000 ff90 	bl	800a308 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2201      	movs	r2, #1
 80093ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80093f6:	461a      	mov	r2, r3
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009404:	f003 031f 	and.w	r3, r3, #31
 8009408:	2b02      	cmp	r3, #2
 800940a:	d01a      	beq.n	8009442 <USBD_LL_SetupStage+0x72>
 800940c:	2b02      	cmp	r3, #2
 800940e:	d822      	bhi.n	8009456 <USBD_LL_SetupStage+0x86>
 8009410:	2b00      	cmp	r3, #0
 8009412:	d002      	beq.n	800941a <USBD_LL_SetupStage+0x4a>
 8009414:	2b01      	cmp	r3, #1
 8009416:	d00a      	beq.n	800942e <USBD_LL_SetupStage+0x5e>
 8009418:	e01d      	b.n	8009456 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009420:	4619      	mov	r1, r3
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f000 fa62 	bl	80098ec <USBD_StdDevReq>
 8009428:	4603      	mov	r3, r0
 800942a:	73fb      	strb	r3, [r7, #15]
      break;
 800942c:	e020      	b.n	8009470 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009434:	4619      	mov	r1, r3
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f000 fac6 	bl	80099c8 <USBD_StdItfReq>
 800943c:	4603      	mov	r3, r0
 800943e:	73fb      	strb	r3, [r7, #15]
      break;
 8009440:	e016      	b.n	8009470 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009448:	4619      	mov	r1, r3
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f000 fb05 	bl	8009a5a <USBD_StdEPReq>
 8009450:	4603      	mov	r3, r0
 8009452:	73fb      	strb	r3, [r7, #15]
      break;
 8009454:	e00c      	b.n	8009470 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800945c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009460:	b2db      	uxtb	r3, r3
 8009462:	4619      	mov	r1, r3
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f012 fd53 	bl	801bf10 <USBD_LL_StallEP>
 800946a:	4603      	mov	r3, r0
 800946c:	73fb      	strb	r3, [r7, #15]
      break;
 800946e:	bf00      	nop
  }

  return ret;
 8009470:	7bfb      	ldrb	r3, [r7, #15]
}
 8009472:	4618      	mov	r0, r3
 8009474:	3710      	adds	r7, #16
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}

0800947a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800947a:	b580      	push	{r7, lr}
 800947c:	b086      	sub	sp, #24
 800947e:	af00      	add	r7, sp, #0
 8009480:	60f8      	str	r0, [r7, #12]
 8009482:	460b      	mov	r3, r1
 8009484:	607a      	str	r2, [r7, #4]
 8009486:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009488:	7afb      	ldrb	r3, [r7, #11]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d138      	bne.n	8009500 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009494:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800949c:	2b03      	cmp	r3, #3
 800949e:	d14a      	bne.n	8009536 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	689a      	ldr	r2, [r3, #8]
 80094a4:	693b      	ldr	r3, [r7, #16]
 80094a6:	68db      	ldr	r3, [r3, #12]
 80094a8:	429a      	cmp	r2, r3
 80094aa:	d913      	bls.n	80094d4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	689a      	ldr	r2, [r3, #8]
 80094b0:	693b      	ldr	r3, [r7, #16]
 80094b2:	68db      	ldr	r3, [r3, #12]
 80094b4:	1ad2      	subs	r2, r2, r3
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	68da      	ldr	r2, [r3, #12]
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	689b      	ldr	r3, [r3, #8]
 80094c2:	4293      	cmp	r3, r2
 80094c4:	bf28      	it	cs
 80094c6:	4613      	movcs	r3, r2
 80094c8:	461a      	mov	r2, r3
 80094ca:	6879      	ldr	r1, [r7, #4]
 80094cc:	68f8      	ldr	r0, [r7, #12]
 80094ce:	f001 f80f 	bl	800a4f0 <USBD_CtlContinueRx>
 80094d2:	e030      	b.n	8009536 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094da:	b2db      	uxtb	r3, r3
 80094dc:	2b03      	cmp	r3, #3
 80094de:	d10b      	bne.n	80094f8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094e6:	691b      	ldr	r3, [r3, #16]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d005      	beq.n	80094f8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094f2:	691b      	ldr	r3, [r3, #16]
 80094f4:	68f8      	ldr	r0, [r7, #12]
 80094f6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80094f8:	68f8      	ldr	r0, [r7, #12]
 80094fa:	f001 f80a 	bl	800a512 <USBD_CtlSendStatus>
 80094fe:	e01a      	b.n	8009536 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009506:	b2db      	uxtb	r3, r3
 8009508:	2b03      	cmp	r3, #3
 800950a:	d114      	bne.n	8009536 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009512:	699b      	ldr	r3, [r3, #24]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d00e      	beq.n	8009536 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800951e:	699b      	ldr	r3, [r3, #24]
 8009520:	7afa      	ldrb	r2, [r7, #11]
 8009522:	4611      	mov	r1, r2
 8009524:	68f8      	ldr	r0, [r7, #12]
 8009526:	4798      	blx	r3
 8009528:	4603      	mov	r3, r0
 800952a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800952c:	7dfb      	ldrb	r3, [r7, #23]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d001      	beq.n	8009536 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8009532:	7dfb      	ldrb	r3, [r7, #23]
 8009534:	e000      	b.n	8009538 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8009536:	2300      	movs	r3, #0
}
 8009538:	4618      	mov	r0, r3
 800953a:	3718      	adds	r7, #24
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}

08009540 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b086      	sub	sp, #24
 8009544:	af00      	add	r7, sp, #0
 8009546:	60f8      	str	r0, [r7, #12]
 8009548:	460b      	mov	r3, r1
 800954a:	607a      	str	r2, [r7, #4]
 800954c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800954e:	7afb      	ldrb	r3, [r7, #11]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d16b      	bne.n	800962c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	3314      	adds	r3, #20
 8009558:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009560:	2b02      	cmp	r3, #2
 8009562:	d156      	bne.n	8009612 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009564:	693b      	ldr	r3, [r7, #16]
 8009566:	689a      	ldr	r2, [r3, #8]
 8009568:	693b      	ldr	r3, [r7, #16]
 800956a:	68db      	ldr	r3, [r3, #12]
 800956c:	429a      	cmp	r2, r3
 800956e:	d914      	bls.n	800959a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009570:	693b      	ldr	r3, [r7, #16]
 8009572:	689a      	ldr	r2, [r3, #8]
 8009574:	693b      	ldr	r3, [r7, #16]
 8009576:	68db      	ldr	r3, [r3, #12]
 8009578:	1ad2      	subs	r2, r2, r3
 800957a:	693b      	ldr	r3, [r7, #16]
 800957c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800957e:	693b      	ldr	r3, [r7, #16]
 8009580:	689b      	ldr	r3, [r3, #8]
 8009582:	461a      	mov	r2, r3
 8009584:	6879      	ldr	r1, [r7, #4]
 8009586:	68f8      	ldr	r0, [r7, #12]
 8009588:	f000 ff84 	bl	800a494 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800958c:	2300      	movs	r3, #0
 800958e:	2200      	movs	r2, #0
 8009590:	2100      	movs	r1, #0
 8009592:	68f8      	ldr	r0, [r7, #12]
 8009594:	f012 fd66 	bl	801c064 <USBD_LL_PrepareReceive>
 8009598:	e03b      	b.n	8009612 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	68da      	ldr	r2, [r3, #12]
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	689b      	ldr	r3, [r3, #8]
 80095a2:	429a      	cmp	r2, r3
 80095a4:	d11c      	bne.n	80095e0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80095a6:	693b      	ldr	r3, [r7, #16]
 80095a8:	685a      	ldr	r2, [r3, #4]
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80095ae:	429a      	cmp	r2, r3
 80095b0:	d316      	bcc.n	80095e0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	685a      	ldr	r2, [r3, #4]
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80095bc:	429a      	cmp	r2, r3
 80095be:	d20f      	bcs.n	80095e0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80095c0:	2200      	movs	r2, #0
 80095c2:	2100      	movs	r1, #0
 80095c4:	68f8      	ldr	r0, [r7, #12]
 80095c6:	f000 ff65 	bl	800a494 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	2200      	movs	r2, #0
 80095ce:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80095d2:	2300      	movs	r3, #0
 80095d4:	2200      	movs	r2, #0
 80095d6:	2100      	movs	r1, #0
 80095d8:	68f8      	ldr	r0, [r7, #12]
 80095da:	f012 fd43 	bl	801c064 <USBD_LL_PrepareReceive>
 80095de:	e018      	b.n	8009612 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095e6:	b2db      	uxtb	r3, r3
 80095e8:	2b03      	cmp	r3, #3
 80095ea:	d10b      	bne.n	8009604 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095f2:	68db      	ldr	r3, [r3, #12]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d005      	beq.n	8009604 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095fe:	68db      	ldr	r3, [r3, #12]
 8009600:	68f8      	ldr	r0, [r7, #12]
 8009602:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009604:	2180      	movs	r1, #128	; 0x80
 8009606:	68f8      	ldr	r0, [r7, #12]
 8009608:	f012 fc82 	bl	801bf10 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800960c:	68f8      	ldr	r0, [r7, #12]
 800960e:	f000 ff93 	bl	800a538 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009618:	2b01      	cmp	r3, #1
 800961a:	d122      	bne.n	8009662 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800961c:	68f8      	ldr	r0, [r7, #12]
 800961e:	f7ff fe98 	bl	8009352 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	2200      	movs	r2, #0
 8009626:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800962a:	e01a      	b.n	8009662 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009632:	b2db      	uxtb	r3, r3
 8009634:	2b03      	cmp	r3, #3
 8009636:	d114      	bne.n	8009662 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800963e:	695b      	ldr	r3, [r3, #20]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d00e      	beq.n	8009662 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800964a:	695b      	ldr	r3, [r3, #20]
 800964c:	7afa      	ldrb	r2, [r7, #11]
 800964e:	4611      	mov	r1, r2
 8009650:	68f8      	ldr	r0, [r7, #12]
 8009652:	4798      	blx	r3
 8009654:	4603      	mov	r3, r0
 8009656:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009658:	7dfb      	ldrb	r3, [r7, #23]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d001      	beq.n	8009662 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800965e:	7dfb      	ldrb	r3, [r7, #23]
 8009660:	e000      	b.n	8009664 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8009662:	2300      	movs	r3, #0
}
 8009664:	4618      	mov	r0, r3
 8009666:	3718      	adds	r7, #24
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}

0800966c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b082      	sub	sp, #8
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2201      	movs	r2, #1
 8009678:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2200      	movs	r2, #0
 8009680:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2200      	movs	r2, #0
 8009688:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2200      	movs	r2, #0
 800968e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009698:	2b00      	cmp	r3, #0
 800969a:	d101      	bne.n	80096a0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800969c:	2303      	movs	r3, #3
 800969e:	e02f      	b.n	8009700 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d00f      	beq.n	80096ca <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096b0:	685b      	ldr	r3, [r3, #4]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d009      	beq.n	80096ca <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096bc:	685b      	ldr	r3, [r3, #4]
 80096be:	687a      	ldr	r2, [r7, #4]
 80096c0:	6852      	ldr	r2, [r2, #4]
 80096c2:	b2d2      	uxtb	r2, r2
 80096c4:	4611      	mov	r1, r2
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80096ca:	2340      	movs	r3, #64	; 0x40
 80096cc:	2200      	movs	r2, #0
 80096ce:	2100      	movs	r1, #0
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f012 fbd8 	bl	801be86 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2201      	movs	r2, #1
 80096da:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2240      	movs	r2, #64	; 0x40
 80096e2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80096e6:	2340      	movs	r3, #64	; 0x40
 80096e8:	2200      	movs	r2, #0
 80096ea:	2180      	movs	r1, #128	; 0x80
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f012 fbca 	bl	801be86 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2201      	movs	r2, #1
 80096f6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2240      	movs	r2, #64	; 0x40
 80096fc:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80096fe:	2300      	movs	r3, #0
}
 8009700:	4618      	mov	r0, r3
 8009702:	3708      	adds	r7, #8
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}

08009708 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009708:	b480      	push	{r7}
 800970a:	b083      	sub	sp, #12
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
 8009710:	460b      	mov	r3, r1
 8009712:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	78fa      	ldrb	r2, [r7, #3]
 8009718:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800971a:	2300      	movs	r3, #0
}
 800971c:	4618      	mov	r0, r3
 800971e:	370c      	adds	r7, #12
 8009720:	46bd      	mov	sp, r7
 8009722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009726:	4770      	bx	lr

08009728 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009728:	b480      	push	{r7}
 800972a:	b083      	sub	sp, #12
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009736:	b2da      	uxtb	r2, r3
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2204      	movs	r2, #4
 8009742:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009746:	2300      	movs	r3, #0
}
 8009748:	4618      	mov	r0, r3
 800974a:	370c      	adds	r7, #12
 800974c:	46bd      	mov	sp, r7
 800974e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009752:	4770      	bx	lr

08009754 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009754:	b480      	push	{r7}
 8009756:	b083      	sub	sp, #12
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009762:	b2db      	uxtb	r3, r3
 8009764:	2b04      	cmp	r3, #4
 8009766:	d106      	bne.n	8009776 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800976e:	b2da      	uxtb	r2, r3
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009776:	2300      	movs	r3, #0
}
 8009778:	4618      	mov	r0, r3
 800977a:	370c      	adds	r7, #12
 800977c:	46bd      	mov	sp, r7
 800977e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009782:	4770      	bx	lr

08009784 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b082      	sub	sp, #8
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009792:	2b00      	cmp	r3, #0
 8009794:	d101      	bne.n	800979a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8009796:	2303      	movs	r3, #3
 8009798:	e012      	b.n	80097c0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097a0:	b2db      	uxtb	r3, r3
 80097a2:	2b03      	cmp	r3, #3
 80097a4:	d10b      	bne.n	80097be <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097ac:	69db      	ldr	r3, [r3, #28]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d005      	beq.n	80097be <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097b8:	69db      	ldr	r3, [r3, #28]
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80097be:	2300      	movs	r3, #0
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	3708      	adds	r7, #8
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}

080097c8 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b082      	sub	sp, #8
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
 80097d0:	460b      	mov	r3, r1
 80097d2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d101      	bne.n	80097e2 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80097de:	2303      	movs	r3, #3
 80097e0:	e014      	b.n	800980c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097e8:	b2db      	uxtb	r3, r3
 80097ea:	2b03      	cmp	r3, #3
 80097ec:	d10d      	bne.n	800980a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097f4:	6a1b      	ldr	r3, [r3, #32]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d007      	beq.n	800980a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009800:	6a1b      	ldr	r3, [r3, #32]
 8009802:	78fa      	ldrb	r2, [r7, #3]
 8009804:	4611      	mov	r1, r2
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800980a:	2300      	movs	r3, #0
}
 800980c:	4618      	mov	r0, r3
 800980e:	3708      	adds	r7, #8
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}

08009814 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b082      	sub	sp, #8
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
 800981c:	460b      	mov	r3, r1
 800981e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009826:	2b00      	cmp	r3, #0
 8009828:	d101      	bne.n	800982e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800982a:	2303      	movs	r3, #3
 800982c:	e014      	b.n	8009858 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009834:	b2db      	uxtb	r3, r3
 8009836:	2b03      	cmp	r3, #3
 8009838:	d10d      	bne.n	8009856 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009842:	2b00      	cmp	r3, #0
 8009844:	d007      	beq.n	8009856 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800984c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800984e:	78fa      	ldrb	r2, [r7, #3]
 8009850:	4611      	mov	r1, r2
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009856:	2300      	movs	r3, #0
}
 8009858:	4618      	mov	r0, r3
 800985a:	3708      	adds	r7, #8
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}

08009860 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009860:	b480      	push	{r7}
 8009862:	b083      	sub	sp, #12
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009868:	2300      	movs	r3, #0
}
 800986a:	4618      	mov	r0, r3
 800986c:	370c      	adds	r7, #12
 800986e:	46bd      	mov	sp, r7
 8009870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009874:	4770      	bx	lr

08009876 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009876:	b580      	push	{r7, lr}
 8009878:	b082      	sub	sp, #8
 800987a:	af00      	add	r7, sp, #0
 800987c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2201      	movs	r2, #1
 8009882:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800988c:	2b00      	cmp	r3, #0
 800988e:	d009      	beq.n	80098a4 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009896:	685b      	ldr	r3, [r3, #4]
 8009898:	687a      	ldr	r2, [r7, #4]
 800989a:	6852      	ldr	r2, [r2, #4]
 800989c:	b2d2      	uxtb	r2, r2
 800989e:	4611      	mov	r1, r2
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	4798      	blx	r3
  }

  return USBD_OK;
 80098a4:	2300      	movs	r3, #0
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	3708      	adds	r7, #8
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}

080098ae <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80098ae:	b480      	push	{r7}
 80098b0:	b087      	sub	sp, #28
 80098b2:	af00      	add	r7, sp, #0
 80098b4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80098ba:	697b      	ldr	r3, [r7, #20]
 80098bc:	781b      	ldrb	r3, [r3, #0]
 80098be:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	3301      	adds	r3, #1
 80098c4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	781b      	ldrb	r3, [r3, #0]
 80098ca:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80098cc:	8a3b      	ldrh	r3, [r7, #16]
 80098ce:	021b      	lsls	r3, r3, #8
 80098d0:	b21a      	sxth	r2, r3
 80098d2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80098d6:	4313      	orrs	r3, r2
 80098d8:	b21b      	sxth	r3, r3
 80098da:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80098dc:	89fb      	ldrh	r3, [r7, #14]
}
 80098de:	4618      	mov	r0, r3
 80098e0:	371c      	adds	r7, #28
 80098e2:	46bd      	mov	sp, r7
 80098e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e8:	4770      	bx	lr
	...

080098ec <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b084      	sub	sp, #16
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80098f6:	2300      	movs	r3, #0
 80098f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	781b      	ldrb	r3, [r3, #0]
 80098fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009902:	2b40      	cmp	r3, #64	; 0x40
 8009904:	d005      	beq.n	8009912 <USBD_StdDevReq+0x26>
 8009906:	2b40      	cmp	r3, #64	; 0x40
 8009908:	d853      	bhi.n	80099b2 <USBD_StdDevReq+0xc6>
 800990a:	2b00      	cmp	r3, #0
 800990c:	d00b      	beq.n	8009926 <USBD_StdDevReq+0x3a>
 800990e:	2b20      	cmp	r3, #32
 8009910:	d14f      	bne.n	80099b2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009918:	689b      	ldr	r3, [r3, #8]
 800991a:	6839      	ldr	r1, [r7, #0]
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	4798      	blx	r3
 8009920:	4603      	mov	r3, r0
 8009922:	73fb      	strb	r3, [r7, #15]
      break;
 8009924:	e04a      	b.n	80099bc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	785b      	ldrb	r3, [r3, #1]
 800992a:	2b09      	cmp	r3, #9
 800992c:	d83b      	bhi.n	80099a6 <USBD_StdDevReq+0xba>
 800992e:	a201      	add	r2, pc, #4	; (adr r2, 8009934 <USBD_StdDevReq+0x48>)
 8009930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009934:	08009989 	.word	0x08009989
 8009938:	0800999d 	.word	0x0800999d
 800993c:	080099a7 	.word	0x080099a7
 8009940:	08009993 	.word	0x08009993
 8009944:	080099a7 	.word	0x080099a7
 8009948:	08009967 	.word	0x08009967
 800994c:	0800995d 	.word	0x0800995d
 8009950:	080099a7 	.word	0x080099a7
 8009954:	0800997f 	.word	0x0800997f
 8009958:	08009971 	.word	0x08009971
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800995c:	6839      	ldr	r1, [r7, #0]
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f000 f9de 	bl	8009d20 <USBD_GetDescriptor>
          break;
 8009964:	e024      	b.n	80099b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009966:	6839      	ldr	r1, [r7, #0]
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f000 fb43 	bl	8009ff4 <USBD_SetAddress>
          break;
 800996e:	e01f      	b.n	80099b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009970:	6839      	ldr	r1, [r7, #0]
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f000 fb82 	bl	800a07c <USBD_SetConfig>
 8009978:	4603      	mov	r3, r0
 800997a:	73fb      	strb	r3, [r7, #15]
          break;
 800997c:	e018      	b.n	80099b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800997e:	6839      	ldr	r1, [r7, #0]
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f000 fc21 	bl	800a1c8 <USBD_GetConfig>
          break;
 8009986:	e013      	b.n	80099b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009988:	6839      	ldr	r1, [r7, #0]
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f000 fc52 	bl	800a234 <USBD_GetStatus>
          break;
 8009990:	e00e      	b.n	80099b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009992:	6839      	ldr	r1, [r7, #0]
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f000 fc81 	bl	800a29c <USBD_SetFeature>
          break;
 800999a:	e009      	b.n	80099b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800999c:	6839      	ldr	r1, [r7, #0]
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f000 fc90 	bl	800a2c4 <USBD_ClrFeature>
          break;
 80099a4:	e004      	b.n	80099b0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80099a6:	6839      	ldr	r1, [r7, #0]
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f000 fce7 	bl	800a37c <USBD_CtlError>
          break;
 80099ae:	bf00      	nop
      }
      break;
 80099b0:	e004      	b.n	80099bc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80099b2:	6839      	ldr	r1, [r7, #0]
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f000 fce1 	bl	800a37c <USBD_CtlError>
      break;
 80099ba:	bf00      	nop
  }

  return ret;
 80099bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80099be:	4618      	mov	r0, r3
 80099c0:	3710      	adds	r7, #16
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd80      	pop	{r7, pc}
 80099c6:	bf00      	nop

080099c8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b084      	sub	sp, #16
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
 80099d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80099d2:	2300      	movs	r3, #0
 80099d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	781b      	ldrb	r3, [r3, #0]
 80099da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80099de:	2b40      	cmp	r3, #64	; 0x40
 80099e0:	d005      	beq.n	80099ee <USBD_StdItfReq+0x26>
 80099e2:	2b40      	cmp	r3, #64	; 0x40
 80099e4:	d82f      	bhi.n	8009a46 <USBD_StdItfReq+0x7e>
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d001      	beq.n	80099ee <USBD_StdItfReq+0x26>
 80099ea:	2b20      	cmp	r3, #32
 80099ec:	d12b      	bne.n	8009a46 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099f4:	b2db      	uxtb	r3, r3
 80099f6:	3b01      	subs	r3, #1
 80099f8:	2b02      	cmp	r3, #2
 80099fa:	d81d      	bhi.n	8009a38 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	889b      	ldrh	r3, [r3, #4]
 8009a00:	b2db      	uxtb	r3, r3
 8009a02:	2b01      	cmp	r3, #1
 8009a04:	d813      	bhi.n	8009a2e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a0c:	689b      	ldr	r3, [r3, #8]
 8009a0e:	6839      	ldr	r1, [r7, #0]
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	4798      	blx	r3
 8009a14:	4603      	mov	r3, r0
 8009a16:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	88db      	ldrh	r3, [r3, #6]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d110      	bne.n	8009a42 <USBD_StdItfReq+0x7a>
 8009a20:	7bfb      	ldrb	r3, [r7, #15]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d10d      	bne.n	8009a42 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f000 fd73 	bl	800a512 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009a2c:	e009      	b.n	8009a42 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8009a2e:	6839      	ldr	r1, [r7, #0]
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f000 fca3 	bl	800a37c <USBD_CtlError>
          break;
 8009a36:	e004      	b.n	8009a42 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8009a38:	6839      	ldr	r1, [r7, #0]
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f000 fc9e 	bl	800a37c <USBD_CtlError>
          break;
 8009a40:	e000      	b.n	8009a44 <USBD_StdItfReq+0x7c>
          break;
 8009a42:	bf00      	nop
      }
      break;
 8009a44:	e004      	b.n	8009a50 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8009a46:	6839      	ldr	r1, [r7, #0]
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f000 fc97 	bl	800a37c <USBD_CtlError>
      break;
 8009a4e:	bf00      	nop
  }

  return ret;
 8009a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3710      	adds	r7, #16
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}

08009a5a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a5a:	b580      	push	{r7, lr}
 8009a5c:	b084      	sub	sp, #16
 8009a5e:	af00      	add	r7, sp, #0
 8009a60:	6078      	str	r0, [r7, #4]
 8009a62:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009a64:	2300      	movs	r3, #0
 8009a66:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	889b      	ldrh	r3, [r3, #4]
 8009a6c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	781b      	ldrb	r3, [r3, #0]
 8009a72:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009a76:	2b40      	cmp	r3, #64	; 0x40
 8009a78:	d007      	beq.n	8009a8a <USBD_StdEPReq+0x30>
 8009a7a:	2b40      	cmp	r3, #64	; 0x40
 8009a7c:	f200 8145 	bhi.w	8009d0a <USBD_StdEPReq+0x2b0>
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d00c      	beq.n	8009a9e <USBD_StdEPReq+0x44>
 8009a84:	2b20      	cmp	r3, #32
 8009a86:	f040 8140 	bne.w	8009d0a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a90:	689b      	ldr	r3, [r3, #8]
 8009a92:	6839      	ldr	r1, [r7, #0]
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	4798      	blx	r3
 8009a98:	4603      	mov	r3, r0
 8009a9a:	73fb      	strb	r3, [r7, #15]
      break;
 8009a9c:	e13a      	b.n	8009d14 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	785b      	ldrb	r3, [r3, #1]
 8009aa2:	2b03      	cmp	r3, #3
 8009aa4:	d007      	beq.n	8009ab6 <USBD_StdEPReq+0x5c>
 8009aa6:	2b03      	cmp	r3, #3
 8009aa8:	f300 8129 	bgt.w	8009cfe <USBD_StdEPReq+0x2a4>
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d07f      	beq.n	8009bb0 <USBD_StdEPReq+0x156>
 8009ab0:	2b01      	cmp	r3, #1
 8009ab2:	d03c      	beq.n	8009b2e <USBD_StdEPReq+0xd4>
 8009ab4:	e123      	b.n	8009cfe <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009abc:	b2db      	uxtb	r3, r3
 8009abe:	2b02      	cmp	r3, #2
 8009ac0:	d002      	beq.n	8009ac8 <USBD_StdEPReq+0x6e>
 8009ac2:	2b03      	cmp	r3, #3
 8009ac4:	d016      	beq.n	8009af4 <USBD_StdEPReq+0x9a>
 8009ac6:	e02c      	b.n	8009b22 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009ac8:	7bbb      	ldrb	r3, [r7, #14]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d00d      	beq.n	8009aea <USBD_StdEPReq+0x90>
 8009ace:	7bbb      	ldrb	r3, [r7, #14]
 8009ad0:	2b80      	cmp	r3, #128	; 0x80
 8009ad2:	d00a      	beq.n	8009aea <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009ad4:	7bbb      	ldrb	r3, [r7, #14]
 8009ad6:	4619      	mov	r1, r3
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f012 fa19 	bl	801bf10 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009ade:	2180      	movs	r1, #128	; 0x80
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f012 fa15 	bl	801bf10 <USBD_LL_StallEP>
 8009ae6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009ae8:	e020      	b.n	8009b2c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8009aea:	6839      	ldr	r1, [r7, #0]
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f000 fc45 	bl	800a37c <USBD_CtlError>
              break;
 8009af2:	e01b      	b.n	8009b2c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	885b      	ldrh	r3, [r3, #2]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d10e      	bne.n	8009b1a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009afc:	7bbb      	ldrb	r3, [r7, #14]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d00b      	beq.n	8009b1a <USBD_StdEPReq+0xc0>
 8009b02:	7bbb      	ldrb	r3, [r7, #14]
 8009b04:	2b80      	cmp	r3, #128	; 0x80
 8009b06:	d008      	beq.n	8009b1a <USBD_StdEPReq+0xc0>
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	88db      	ldrh	r3, [r3, #6]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d104      	bne.n	8009b1a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009b10:	7bbb      	ldrb	r3, [r7, #14]
 8009b12:	4619      	mov	r1, r3
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f012 f9fb 	bl	801bf10 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f000 fcf9 	bl	800a512 <USBD_CtlSendStatus>

              break;
 8009b20:	e004      	b.n	8009b2c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8009b22:	6839      	ldr	r1, [r7, #0]
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f000 fc29 	bl	800a37c <USBD_CtlError>
              break;
 8009b2a:	bf00      	nop
          }
          break;
 8009b2c:	e0ec      	b.n	8009d08 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b34:	b2db      	uxtb	r3, r3
 8009b36:	2b02      	cmp	r3, #2
 8009b38:	d002      	beq.n	8009b40 <USBD_StdEPReq+0xe6>
 8009b3a:	2b03      	cmp	r3, #3
 8009b3c:	d016      	beq.n	8009b6c <USBD_StdEPReq+0x112>
 8009b3e:	e030      	b.n	8009ba2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b40:	7bbb      	ldrb	r3, [r7, #14]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d00d      	beq.n	8009b62 <USBD_StdEPReq+0x108>
 8009b46:	7bbb      	ldrb	r3, [r7, #14]
 8009b48:	2b80      	cmp	r3, #128	; 0x80
 8009b4a:	d00a      	beq.n	8009b62 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009b4c:	7bbb      	ldrb	r3, [r7, #14]
 8009b4e:	4619      	mov	r1, r3
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f012 f9dd 	bl	801bf10 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009b56:	2180      	movs	r1, #128	; 0x80
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f012 f9d9 	bl	801bf10 <USBD_LL_StallEP>
 8009b5e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009b60:	e025      	b.n	8009bae <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8009b62:	6839      	ldr	r1, [r7, #0]
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f000 fc09 	bl	800a37c <USBD_CtlError>
              break;
 8009b6a:	e020      	b.n	8009bae <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	885b      	ldrh	r3, [r3, #2]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d11b      	bne.n	8009bac <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009b74:	7bbb      	ldrb	r3, [r7, #14]
 8009b76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d004      	beq.n	8009b88 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009b7e:	7bbb      	ldrb	r3, [r7, #14]
 8009b80:	4619      	mov	r1, r3
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f012 f9e3 	bl	801bf4e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f000 fcc2 	bl	800a512 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b94:	689b      	ldr	r3, [r3, #8]
 8009b96:	6839      	ldr	r1, [r7, #0]
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	4798      	blx	r3
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009ba0:	e004      	b.n	8009bac <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8009ba2:	6839      	ldr	r1, [r7, #0]
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f000 fbe9 	bl	800a37c <USBD_CtlError>
              break;
 8009baa:	e000      	b.n	8009bae <USBD_StdEPReq+0x154>
              break;
 8009bac:	bf00      	nop
          }
          break;
 8009bae:	e0ab      	b.n	8009d08 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bb6:	b2db      	uxtb	r3, r3
 8009bb8:	2b02      	cmp	r3, #2
 8009bba:	d002      	beq.n	8009bc2 <USBD_StdEPReq+0x168>
 8009bbc:	2b03      	cmp	r3, #3
 8009bbe:	d032      	beq.n	8009c26 <USBD_StdEPReq+0x1cc>
 8009bc0:	e097      	b.n	8009cf2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009bc2:	7bbb      	ldrb	r3, [r7, #14]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d007      	beq.n	8009bd8 <USBD_StdEPReq+0x17e>
 8009bc8:	7bbb      	ldrb	r3, [r7, #14]
 8009bca:	2b80      	cmp	r3, #128	; 0x80
 8009bcc:	d004      	beq.n	8009bd8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8009bce:	6839      	ldr	r1, [r7, #0]
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f000 fbd3 	bl	800a37c <USBD_CtlError>
                break;
 8009bd6:	e091      	b.n	8009cfc <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009bd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	da0b      	bge.n	8009bf8 <USBD_StdEPReq+0x19e>
 8009be0:	7bbb      	ldrb	r3, [r7, #14]
 8009be2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009be6:	4613      	mov	r3, r2
 8009be8:	009b      	lsls	r3, r3, #2
 8009bea:	4413      	add	r3, r2
 8009bec:	009b      	lsls	r3, r3, #2
 8009bee:	3310      	adds	r3, #16
 8009bf0:	687a      	ldr	r2, [r7, #4]
 8009bf2:	4413      	add	r3, r2
 8009bf4:	3304      	adds	r3, #4
 8009bf6:	e00b      	b.n	8009c10 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009bf8:	7bbb      	ldrb	r3, [r7, #14]
 8009bfa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009bfe:	4613      	mov	r3, r2
 8009c00:	009b      	lsls	r3, r3, #2
 8009c02:	4413      	add	r3, r2
 8009c04:	009b      	lsls	r3, r3, #2
 8009c06:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009c0a:	687a      	ldr	r2, [r7, #4]
 8009c0c:	4413      	add	r3, r2
 8009c0e:	3304      	adds	r3, #4
 8009c10:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	2200      	movs	r2, #0
 8009c16:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	2202      	movs	r2, #2
 8009c1c:	4619      	mov	r1, r3
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f000 fc1d 	bl	800a45e <USBD_CtlSendData>
              break;
 8009c24:	e06a      	b.n	8009cfc <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009c26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	da11      	bge.n	8009c52 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009c2e:	7bbb      	ldrb	r3, [r7, #14]
 8009c30:	f003 020f 	and.w	r2, r3, #15
 8009c34:	6879      	ldr	r1, [r7, #4]
 8009c36:	4613      	mov	r3, r2
 8009c38:	009b      	lsls	r3, r3, #2
 8009c3a:	4413      	add	r3, r2
 8009c3c:	009b      	lsls	r3, r3, #2
 8009c3e:	440b      	add	r3, r1
 8009c40:	3324      	adds	r3, #36	; 0x24
 8009c42:	881b      	ldrh	r3, [r3, #0]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d117      	bne.n	8009c78 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009c48:	6839      	ldr	r1, [r7, #0]
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f000 fb96 	bl	800a37c <USBD_CtlError>
                  break;
 8009c50:	e054      	b.n	8009cfc <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009c52:	7bbb      	ldrb	r3, [r7, #14]
 8009c54:	f003 020f 	and.w	r2, r3, #15
 8009c58:	6879      	ldr	r1, [r7, #4]
 8009c5a:	4613      	mov	r3, r2
 8009c5c:	009b      	lsls	r3, r3, #2
 8009c5e:	4413      	add	r3, r2
 8009c60:	009b      	lsls	r3, r3, #2
 8009c62:	440b      	add	r3, r1
 8009c64:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009c68:	881b      	ldrh	r3, [r3, #0]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d104      	bne.n	8009c78 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009c6e:	6839      	ldr	r1, [r7, #0]
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f000 fb83 	bl	800a37c <USBD_CtlError>
                  break;
 8009c76:	e041      	b.n	8009cfc <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	da0b      	bge.n	8009c98 <USBD_StdEPReq+0x23e>
 8009c80:	7bbb      	ldrb	r3, [r7, #14]
 8009c82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c86:	4613      	mov	r3, r2
 8009c88:	009b      	lsls	r3, r3, #2
 8009c8a:	4413      	add	r3, r2
 8009c8c:	009b      	lsls	r3, r3, #2
 8009c8e:	3310      	adds	r3, #16
 8009c90:	687a      	ldr	r2, [r7, #4]
 8009c92:	4413      	add	r3, r2
 8009c94:	3304      	adds	r3, #4
 8009c96:	e00b      	b.n	8009cb0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009c98:	7bbb      	ldrb	r3, [r7, #14]
 8009c9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c9e:	4613      	mov	r3, r2
 8009ca0:	009b      	lsls	r3, r3, #2
 8009ca2:	4413      	add	r3, r2
 8009ca4:	009b      	lsls	r3, r3, #2
 8009ca6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009caa:	687a      	ldr	r2, [r7, #4]
 8009cac:	4413      	add	r3, r2
 8009cae:	3304      	adds	r3, #4
 8009cb0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009cb2:	7bbb      	ldrb	r3, [r7, #14]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d002      	beq.n	8009cbe <USBD_StdEPReq+0x264>
 8009cb8:	7bbb      	ldrb	r3, [r7, #14]
 8009cba:	2b80      	cmp	r3, #128	; 0x80
 8009cbc:	d103      	bne.n	8009cc6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	601a      	str	r2, [r3, #0]
 8009cc4:	e00e      	b.n	8009ce4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009cc6:	7bbb      	ldrb	r3, [r7, #14]
 8009cc8:	4619      	mov	r1, r3
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f012 f95e 	bl	801bf8c <USBD_LL_IsStallEP>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d003      	beq.n	8009cde <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	2201      	movs	r2, #1
 8009cda:	601a      	str	r2, [r3, #0]
 8009cdc:	e002      	b.n	8009ce4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	2202      	movs	r2, #2
 8009ce8:	4619      	mov	r1, r3
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f000 fbb7 	bl	800a45e <USBD_CtlSendData>
              break;
 8009cf0:	e004      	b.n	8009cfc <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8009cf2:	6839      	ldr	r1, [r7, #0]
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f000 fb41 	bl	800a37c <USBD_CtlError>
              break;
 8009cfa:	bf00      	nop
          }
          break;
 8009cfc:	e004      	b.n	8009d08 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8009cfe:	6839      	ldr	r1, [r7, #0]
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f000 fb3b 	bl	800a37c <USBD_CtlError>
          break;
 8009d06:	bf00      	nop
      }
      break;
 8009d08:	e004      	b.n	8009d14 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8009d0a:	6839      	ldr	r1, [r7, #0]
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f000 fb35 	bl	800a37c <USBD_CtlError>
      break;
 8009d12:	bf00      	nop
  }

  return ret;
 8009d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3710      	adds	r7, #16
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}
	...

08009d20 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b084      	sub	sp, #16
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
 8009d28:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009d2e:	2300      	movs	r3, #0
 8009d30:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009d32:	2300      	movs	r3, #0
 8009d34:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	885b      	ldrh	r3, [r3, #2]
 8009d3a:	0a1b      	lsrs	r3, r3, #8
 8009d3c:	b29b      	uxth	r3, r3
 8009d3e:	3b01      	subs	r3, #1
 8009d40:	2b06      	cmp	r3, #6
 8009d42:	f200 8128 	bhi.w	8009f96 <USBD_GetDescriptor+0x276>
 8009d46:	a201      	add	r2, pc, #4	; (adr r2, 8009d4c <USBD_GetDescriptor+0x2c>)
 8009d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d4c:	08009d69 	.word	0x08009d69
 8009d50:	08009d81 	.word	0x08009d81
 8009d54:	08009dc1 	.word	0x08009dc1
 8009d58:	08009f97 	.word	0x08009f97
 8009d5c:	08009f97 	.word	0x08009f97
 8009d60:	08009f37 	.word	0x08009f37
 8009d64:	08009f63 	.word	0x08009f63
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	687a      	ldr	r2, [r7, #4]
 8009d72:	7c12      	ldrb	r2, [r2, #16]
 8009d74:	f107 0108 	add.w	r1, r7, #8
 8009d78:	4610      	mov	r0, r2
 8009d7a:	4798      	blx	r3
 8009d7c:	60f8      	str	r0, [r7, #12]
      break;
 8009d7e:	e112      	b.n	8009fa6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	7c1b      	ldrb	r3, [r3, #16]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d10d      	bne.n	8009da4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d90:	f107 0208 	add.w	r2, r7, #8
 8009d94:	4610      	mov	r0, r2
 8009d96:	4798      	blx	r3
 8009d98:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	3301      	adds	r3, #1
 8009d9e:	2202      	movs	r2, #2
 8009da0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009da2:	e100      	b.n	8009fa6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dac:	f107 0208 	add.w	r2, r7, #8
 8009db0:	4610      	mov	r0, r2
 8009db2:	4798      	blx	r3
 8009db4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	3301      	adds	r3, #1
 8009dba:	2202      	movs	r2, #2
 8009dbc:	701a      	strb	r2, [r3, #0]
      break;
 8009dbe:	e0f2      	b.n	8009fa6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	885b      	ldrh	r3, [r3, #2]
 8009dc4:	b2db      	uxtb	r3, r3
 8009dc6:	2b05      	cmp	r3, #5
 8009dc8:	f200 80ac 	bhi.w	8009f24 <USBD_GetDescriptor+0x204>
 8009dcc:	a201      	add	r2, pc, #4	; (adr r2, 8009dd4 <USBD_GetDescriptor+0xb4>)
 8009dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dd2:	bf00      	nop
 8009dd4:	08009ded 	.word	0x08009ded
 8009dd8:	08009e21 	.word	0x08009e21
 8009ddc:	08009e55 	.word	0x08009e55
 8009de0:	08009e89 	.word	0x08009e89
 8009de4:	08009ebd 	.word	0x08009ebd
 8009de8:	08009ef1 	.word	0x08009ef1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009df2:	685b      	ldr	r3, [r3, #4]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d00b      	beq.n	8009e10 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dfe:	685b      	ldr	r3, [r3, #4]
 8009e00:	687a      	ldr	r2, [r7, #4]
 8009e02:	7c12      	ldrb	r2, [r2, #16]
 8009e04:	f107 0108 	add.w	r1, r7, #8
 8009e08:	4610      	mov	r0, r2
 8009e0a:	4798      	blx	r3
 8009e0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e0e:	e091      	b.n	8009f34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e10:	6839      	ldr	r1, [r7, #0]
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f000 fab2 	bl	800a37c <USBD_CtlError>
            err++;
 8009e18:	7afb      	ldrb	r3, [r7, #11]
 8009e1a:	3301      	adds	r3, #1
 8009e1c:	72fb      	strb	r3, [r7, #11]
          break;
 8009e1e:	e089      	b.n	8009f34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e26:	689b      	ldr	r3, [r3, #8]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d00b      	beq.n	8009e44 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e32:	689b      	ldr	r3, [r3, #8]
 8009e34:	687a      	ldr	r2, [r7, #4]
 8009e36:	7c12      	ldrb	r2, [r2, #16]
 8009e38:	f107 0108 	add.w	r1, r7, #8
 8009e3c:	4610      	mov	r0, r2
 8009e3e:	4798      	blx	r3
 8009e40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e42:	e077      	b.n	8009f34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e44:	6839      	ldr	r1, [r7, #0]
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f000 fa98 	bl	800a37c <USBD_CtlError>
            err++;
 8009e4c:	7afb      	ldrb	r3, [r7, #11]
 8009e4e:	3301      	adds	r3, #1
 8009e50:	72fb      	strb	r3, [r7, #11]
          break;
 8009e52:	e06f      	b.n	8009f34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e5a:	68db      	ldr	r3, [r3, #12]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d00b      	beq.n	8009e78 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e66:	68db      	ldr	r3, [r3, #12]
 8009e68:	687a      	ldr	r2, [r7, #4]
 8009e6a:	7c12      	ldrb	r2, [r2, #16]
 8009e6c:	f107 0108 	add.w	r1, r7, #8
 8009e70:	4610      	mov	r0, r2
 8009e72:	4798      	blx	r3
 8009e74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e76:	e05d      	b.n	8009f34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e78:	6839      	ldr	r1, [r7, #0]
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f000 fa7e 	bl	800a37c <USBD_CtlError>
            err++;
 8009e80:	7afb      	ldrb	r3, [r7, #11]
 8009e82:	3301      	adds	r3, #1
 8009e84:	72fb      	strb	r3, [r7, #11]
          break;
 8009e86:	e055      	b.n	8009f34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e8e:	691b      	ldr	r3, [r3, #16]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d00b      	beq.n	8009eac <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e9a:	691b      	ldr	r3, [r3, #16]
 8009e9c:	687a      	ldr	r2, [r7, #4]
 8009e9e:	7c12      	ldrb	r2, [r2, #16]
 8009ea0:	f107 0108 	add.w	r1, r7, #8
 8009ea4:	4610      	mov	r0, r2
 8009ea6:	4798      	blx	r3
 8009ea8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009eaa:	e043      	b.n	8009f34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009eac:	6839      	ldr	r1, [r7, #0]
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f000 fa64 	bl	800a37c <USBD_CtlError>
            err++;
 8009eb4:	7afb      	ldrb	r3, [r7, #11]
 8009eb6:	3301      	adds	r3, #1
 8009eb8:	72fb      	strb	r3, [r7, #11]
          break;
 8009eba:	e03b      	b.n	8009f34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ec2:	695b      	ldr	r3, [r3, #20]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d00b      	beq.n	8009ee0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ece:	695b      	ldr	r3, [r3, #20]
 8009ed0:	687a      	ldr	r2, [r7, #4]
 8009ed2:	7c12      	ldrb	r2, [r2, #16]
 8009ed4:	f107 0108 	add.w	r1, r7, #8
 8009ed8:	4610      	mov	r0, r2
 8009eda:	4798      	blx	r3
 8009edc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ede:	e029      	b.n	8009f34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ee0:	6839      	ldr	r1, [r7, #0]
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f000 fa4a 	bl	800a37c <USBD_CtlError>
            err++;
 8009ee8:	7afb      	ldrb	r3, [r7, #11]
 8009eea:	3301      	adds	r3, #1
 8009eec:	72fb      	strb	r3, [r7, #11]
          break;
 8009eee:	e021      	b.n	8009f34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ef6:	699b      	ldr	r3, [r3, #24]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d00b      	beq.n	8009f14 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f02:	699b      	ldr	r3, [r3, #24]
 8009f04:	687a      	ldr	r2, [r7, #4]
 8009f06:	7c12      	ldrb	r2, [r2, #16]
 8009f08:	f107 0108 	add.w	r1, r7, #8
 8009f0c:	4610      	mov	r0, r2
 8009f0e:	4798      	blx	r3
 8009f10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f12:	e00f      	b.n	8009f34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f14:	6839      	ldr	r1, [r7, #0]
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	f000 fa30 	bl	800a37c <USBD_CtlError>
            err++;
 8009f1c:	7afb      	ldrb	r3, [r7, #11]
 8009f1e:	3301      	adds	r3, #1
 8009f20:	72fb      	strb	r3, [r7, #11]
          break;
 8009f22:	e007      	b.n	8009f34 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009f24:	6839      	ldr	r1, [r7, #0]
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f000 fa28 	bl	800a37c <USBD_CtlError>
          err++;
 8009f2c:	7afb      	ldrb	r3, [r7, #11]
 8009f2e:	3301      	adds	r3, #1
 8009f30:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8009f32:	bf00      	nop
      }
      break;
 8009f34:	e037      	b.n	8009fa6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	7c1b      	ldrb	r3, [r3, #16]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d109      	bne.n	8009f52 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f46:	f107 0208 	add.w	r2, r7, #8
 8009f4a:	4610      	mov	r0, r2
 8009f4c:	4798      	blx	r3
 8009f4e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009f50:	e029      	b.n	8009fa6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009f52:	6839      	ldr	r1, [r7, #0]
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f000 fa11 	bl	800a37c <USBD_CtlError>
        err++;
 8009f5a:	7afb      	ldrb	r3, [r7, #11]
 8009f5c:	3301      	adds	r3, #1
 8009f5e:	72fb      	strb	r3, [r7, #11]
      break;
 8009f60:	e021      	b.n	8009fa6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	7c1b      	ldrb	r3, [r3, #16]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d10d      	bne.n	8009f86 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f72:	f107 0208 	add.w	r2, r7, #8
 8009f76:	4610      	mov	r0, r2
 8009f78:	4798      	blx	r3
 8009f7a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	3301      	adds	r3, #1
 8009f80:	2207      	movs	r2, #7
 8009f82:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009f84:	e00f      	b.n	8009fa6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009f86:	6839      	ldr	r1, [r7, #0]
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f000 f9f7 	bl	800a37c <USBD_CtlError>
        err++;
 8009f8e:	7afb      	ldrb	r3, [r7, #11]
 8009f90:	3301      	adds	r3, #1
 8009f92:	72fb      	strb	r3, [r7, #11]
      break;
 8009f94:	e007      	b.n	8009fa6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009f96:	6839      	ldr	r1, [r7, #0]
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f000 f9ef 	bl	800a37c <USBD_CtlError>
      err++;
 8009f9e:	7afb      	ldrb	r3, [r7, #11]
 8009fa0:	3301      	adds	r3, #1
 8009fa2:	72fb      	strb	r3, [r7, #11]
      break;
 8009fa4:	bf00      	nop
  }

  if (err != 0U)
 8009fa6:	7afb      	ldrb	r3, [r7, #11]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d11e      	bne.n	8009fea <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	88db      	ldrh	r3, [r3, #6]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d016      	beq.n	8009fe2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009fb4:	893b      	ldrh	r3, [r7, #8]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d00e      	beq.n	8009fd8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	88da      	ldrh	r2, [r3, #6]
 8009fbe:	893b      	ldrh	r3, [r7, #8]
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	bf28      	it	cs
 8009fc4:	4613      	movcs	r3, r2
 8009fc6:	b29b      	uxth	r3, r3
 8009fc8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009fca:	893b      	ldrh	r3, [r7, #8]
 8009fcc:	461a      	mov	r2, r3
 8009fce:	68f9      	ldr	r1, [r7, #12]
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f000 fa44 	bl	800a45e <USBD_CtlSendData>
 8009fd6:	e009      	b.n	8009fec <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009fd8:	6839      	ldr	r1, [r7, #0]
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f000 f9ce 	bl	800a37c <USBD_CtlError>
 8009fe0:	e004      	b.n	8009fec <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f000 fa95 	bl	800a512 <USBD_CtlSendStatus>
 8009fe8:	e000      	b.n	8009fec <USBD_GetDescriptor+0x2cc>
    return;
 8009fea:	bf00      	nop
  }
}
 8009fec:	3710      	adds	r7, #16
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}
 8009ff2:	bf00      	nop

08009ff4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b084      	sub	sp, #16
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
 8009ffc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	889b      	ldrh	r3, [r3, #4]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d131      	bne.n	800a06a <USBD_SetAddress+0x76>
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	88db      	ldrh	r3, [r3, #6]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d12d      	bne.n	800a06a <USBD_SetAddress+0x76>
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	885b      	ldrh	r3, [r3, #2]
 800a012:	2b7f      	cmp	r3, #127	; 0x7f
 800a014:	d829      	bhi.n	800a06a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	885b      	ldrh	r3, [r3, #2]
 800a01a:	b2db      	uxtb	r3, r3
 800a01c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a020:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a028:	b2db      	uxtb	r3, r3
 800a02a:	2b03      	cmp	r3, #3
 800a02c:	d104      	bne.n	800a038 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a02e:	6839      	ldr	r1, [r7, #0]
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	f000 f9a3 	bl	800a37c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a036:	e01d      	b.n	800a074 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	7bfa      	ldrb	r2, [r7, #15]
 800a03c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a040:	7bfb      	ldrb	r3, [r7, #15]
 800a042:	4619      	mov	r1, r3
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f011 ffcd 	bl	801bfe4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f000 fa61 	bl	800a512 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a050:	7bfb      	ldrb	r3, [r7, #15]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d004      	beq.n	800a060 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2202      	movs	r2, #2
 800a05a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a05e:	e009      	b.n	800a074 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2201      	movs	r2, #1
 800a064:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a068:	e004      	b.n	800a074 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a06a:	6839      	ldr	r1, [r7, #0]
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f000 f985 	bl	800a37c <USBD_CtlError>
  }
}
 800a072:	bf00      	nop
 800a074:	bf00      	nop
 800a076:	3710      	adds	r7, #16
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}

0800a07c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b084      	sub	sp, #16
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
 800a084:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a086:	2300      	movs	r3, #0
 800a088:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	885b      	ldrh	r3, [r3, #2]
 800a08e:	b2da      	uxtb	r2, r3
 800a090:	4b4c      	ldr	r3, [pc, #304]	; (800a1c4 <USBD_SetConfig+0x148>)
 800a092:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a094:	4b4b      	ldr	r3, [pc, #300]	; (800a1c4 <USBD_SetConfig+0x148>)
 800a096:	781b      	ldrb	r3, [r3, #0]
 800a098:	2b01      	cmp	r3, #1
 800a09a:	d905      	bls.n	800a0a8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a09c:	6839      	ldr	r1, [r7, #0]
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f000 f96c 	bl	800a37c <USBD_CtlError>
    return USBD_FAIL;
 800a0a4:	2303      	movs	r3, #3
 800a0a6:	e088      	b.n	800a1ba <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0ae:	b2db      	uxtb	r3, r3
 800a0b0:	2b02      	cmp	r3, #2
 800a0b2:	d002      	beq.n	800a0ba <USBD_SetConfig+0x3e>
 800a0b4:	2b03      	cmp	r3, #3
 800a0b6:	d025      	beq.n	800a104 <USBD_SetConfig+0x88>
 800a0b8:	e071      	b.n	800a19e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a0ba:	4b42      	ldr	r3, [pc, #264]	; (800a1c4 <USBD_SetConfig+0x148>)
 800a0bc:	781b      	ldrb	r3, [r3, #0]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d01c      	beq.n	800a0fc <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800a0c2:	4b40      	ldr	r3, [pc, #256]	; (800a1c4 <USBD_SetConfig+0x148>)
 800a0c4:	781b      	ldrb	r3, [r3, #0]
 800a0c6:	461a      	mov	r2, r3
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a0cc:	4b3d      	ldr	r3, [pc, #244]	; (800a1c4 <USBD_SetConfig+0x148>)
 800a0ce:	781b      	ldrb	r3, [r3, #0]
 800a0d0:	4619      	mov	r1, r3
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f7ff f948 	bl	8009368 <USBD_SetClassConfig>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a0dc:	7bfb      	ldrb	r3, [r7, #15]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d004      	beq.n	800a0ec <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800a0e2:	6839      	ldr	r1, [r7, #0]
 800a0e4:	6878      	ldr	r0, [r7, #4]
 800a0e6:	f000 f949 	bl	800a37c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a0ea:	e065      	b.n	800a1b8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	f000 fa10 	bl	800a512 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2203      	movs	r2, #3
 800a0f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a0fa:	e05d      	b.n	800a1b8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f000 fa08 	bl	800a512 <USBD_CtlSendStatus>
      break;
 800a102:	e059      	b.n	800a1b8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a104:	4b2f      	ldr	r3, [pc, #188]	; (800a1c4 <USBD_SetConfig+0x148>)
 800a106:	781b      	ldrb	r3, [r3, #0]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d112      	bne.n	800a132 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2202      	movs	r2, #2
 800a110:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a114:	4b2b      	ldr	r3, [pc, #172]	; (800a1c4 <USBD_SetConfig+0x148>)
 800a116:	781b      	ldrb	r3, [r3, #0]
 800a118:	461a      	mov	r2, r3
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a11e:	4b29      	ldr	r3, [pc, #164]	; (800a1c4 <USBD_SetConfig+0x148>)
 800a120:	781b      	ldrb	r3, [r3, #0]
 800a122:	4619      	mov	r1, r3
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f7ff f93b 	bl	80093a0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f000 f9f1 	bl	800a512 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a130:	e042      	b.n	800a1b8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800a132:	4b24      	ldr	r3, [pc, #144]	; (800a1c4 <USBD_SetConfig+0x148>)
 800a134:	781b      	ldrb	r3, [r3, #0]
 800a136:	461a      	mov	r2, r3
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	685b      	ldr	r3, [r3, #4]
 800a13c:	429a      	cmp	r2, r3
 800a13e:	d02a      	beq.n	800a196 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	685b      	ldr	r3, [r3, #4]
 800a144:	b2db      	uxtb	r3, r3
 800a146:	4619      	mov	r1, r3
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f7ff f929 	bl	80093a0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a14e:	4b1d      	ldr	r3, [pc, #116]	; (800a1c4 <USBD_SetConfig+0x148>)
 800a150:	781b      	ldrb	r3, [r3, #0]
 800a152:	461a      	mov	r2, r3
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a158:	4b1a      	ldr	r3, [pc, #104]	; (800a1c4 <USBD_SetConfig+0x148>)
 800a15a:	781b      	ldrb	r3, [r3, #0]
 800a15c:	4619      	mov	r1, r3
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f7ff f902 	bl	8009368 <USBD_SetClassConfig>
 800a164:	4603      	mov	r3, r0
 800a166:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a168:	7bfb      	ldrb	r3, [r7, #15]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d00f      	beq.n	800a18e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800a16e:	6839      	ldr	r1, [r7, #0]
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f000 f903 	bl	800a37c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	685b      	ldr	r3, [r3, #4]
 800a17a:	b2db      	uxtb	r3, r3
 800a17c:	4619      	mov	r1, r3
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f7ff f90e 	bl	80093a0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2202      	movs	r2, #2
 800a188:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a18c:	e014      	b.n	800a1b8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f000 f9bf 	bl	800a512 <USBD_CtlSendStatus>
      break;
 800a194:	e010      	b.n	800a1b8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f000 f9bb 	bl	800a512 <USBD_CtlSendStatus>
      break;
 800a19c:	e00c      	b.n	800a1b8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a19e:	6839      	ldr	r1, [r7, #0]
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	f000 f8eb 	bl	800a37c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a1a6:	4b07      	ldr	r3, [pc, #28]	; (800a1c4 <USBD_SetConfig+0x148>)
 800a1a8:	781b      	ldrb	r3, [r3, #0]
 800a1aa:	4619      	mov	r1, r3
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	f7ff f8f7 	bl	80093a0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a1b2:	2303      	movs	r3, #3
 800a1b4:	73fb      	strb	r3, [r7, #15]
      break;
 800a1b6:	bf00      	nop
  }

  return ret;
 800a1b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	3710      	adds	r7, #16
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}
 800a1c2:	bf00      	nop
 800a1c4:	20000514 	.word	0x20000514

0800a1c8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b082      	sub	sp, #8
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
 800a1d0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	88db      	ldrh	r3, [r3, #6]
 800a1d6:	2b01      	cmp	r3, #1
 800a1d8:	d004      	beq.n	800a1e4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a1da:	6839      	ldr	r1, [r7, #0]
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f000 f8cd 	bl	800a37c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a1e2:	e023      	b.n	800a22c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1ea:	b2db      	uxtb	r3, r3
 800a1ec:	2b02      	cmp	r3, #2
 800a1ee:	dc02      	bgt.n	800a1f6 <USBD_GetConfig+0x2e>
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	dc03      	bgt.n	800a1fc <USBD_GetConfig+0x34>
 800a1f4:	e015      	b.n	800a222 <USBD_GetConfig+0x5a>
 800a1f6:	2b03      	cmp	r3, #3
 800a1f8:	d00b      	beq.n	800a212 <USBD_GetConfig+0x4a>
 800a1fa:	e012      	b.n	800a222 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2200      	movs	r2, #0
 800a200:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	3308      	adds	r3, #8
 800a206:	2201      	movs	r2, #1
 800a208:	4619      	mov	r1, r3
 800a20a:	6878      	ldr	r0, [r7, #4]
 800a20c:	f000 f927 	bl	800a45e <USBD_CtlSendData>
        break;
 800a210:	e00c      	b.n	800a22c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	3304      	adds	r3, #4
 800a216:	2201      	movs	r2, #1
 800a218:	4619      	mov	r1, r3
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f000 f91f 	bl	800a45e <USBD_CtlSendData>
        break;
 800a220:	e004      	b.n	800a22c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a222:	6839      	ldr	r1, [r7, #0]
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f000 f8a9 	bl	800a37c <USBD_CtlError>
        break;
 800a22a:	bf00      	nop
}
 800a22c:	bf00      	nop
 800a22e:	3708      	adds	r7, #8
 800a230:	46bd      	mov	sp, r7
 800a232:	bd80      	pop	{r7, pc}

0800a234 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b082      	sub	sp, #8
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
 800a23c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a244:	b2db      	uxtb	r3, r3
 800a246:	3b01      	subs	r3, #1
 800a248:	2b02      	cmp	r3, #2
 800a24a:	d81e      	bhi.n	800a28a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	88db      	ldrh	r3, [r3, #6]
 800a250:	2b02      	cmp	r3, #2
 800a252:	d004      	beq.n	800a25e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a254:	6839      	ldr	r1, [r7, #0]
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	f000 f890 	bl	800a37c <USBD_CtlError>
        break;
 800a25c:	e01a      	b.n	800a294 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2201      	movs	r2, #1
 800a262:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d005      	beq.n	800a27a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	68db      	ldr	r3, [r3, #12]
 800a272:	f043 0202 	orr.w	r2, r3, #2
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	330c      	adds	r3, #12
 800a27e:	2202      	movs	r2, #2
 800a280:	4619      	mov	r1, r3
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f000 f8eb 	bl	800a45e <USBD_CtlSendData>
      break;
 800a288:	e004      	b.n	800a294 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a28a:	6839      	ldr	r1, [r7, #0]
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f000 f875 	bl	800a37c <USBD_CtlError>
      break;
 800a292:	bf00      	nop
  }
}
 800a294:	bf00      	nop
 800a296:	3708      	adds	r7, #8
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}

0800a29c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b082      	sub	sp, #8
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
 800a2a4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	885b      	ldrh	r3, [r3, #2]
 800a2aa:	2b01      	cmp	r3, #1
 800a2ac:	d106      	bne.n	800a2bc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2201      	movs	r2, #1
 800a2b2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f000 f92b 	bl	800a512 <USBD_CtlSendStatus>
  }
}
 800a2bc:	bf00      	nop
 800a2be:	3708      	adds	r7, #8
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	bd80      	pop	{r7, pc}

0800a2c4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b082      	sub	sp, #8
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
 800a2cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2d4:	b2db      	uxtb	r3, r3
 800a2d6:	3b01      	subs	r3, #1
 800a2d8:	2b02      	cmp	r3, #2
 800a2da:	d80b      	bhi.n	800a2f4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	885b      	ldrh	r3, [r3, #2]
 800a2e0:	2b01      	cmp	r3, #1
 800a2e2:	d10c      	bne.n	800a2fe <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f000 f910 	bl	800a512 <USBD_CtlSendStatus>
      }
      break;
 800a2f2:	e004      	b.n	800a2fe <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a2f4:	6839      	ldr	r1, [r7, #0]
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f000 f840 	bl	800a37c <USBD_CtlError>
      break;
 800a2fc:	e000      	b.n	800a300 <USBD_ClrFeature+0x3c>
      break;
 800a2fe:	bf00      	nop
  }
}
 800a300:	bf00      	nop
 800a302:	3708      	adds	r7, #8
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}

0800a308 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b084      	sub	sp, #16
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
 800a310:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	781a      	ldrb	r2, [r3, #0]
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	3301      	adds	r3, #1
 800a322:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	781a      	ldrb	r2, [r3, #0]
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	3301      	adds	r3, #1
 800a330:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a332:	68f8      	ldr	r0, [r7, #12]
 800a334:	f7ff fabb 	bl	80098ae <SWAPBYTE>
 800a338:	4603      	mov	r3, r0
 800a33a:	461a      	mov	r2, r3
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	3301      	adds	r3, #1
 800a344:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	3301      	adds	r3, #1
 800a34a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a34c:	68f8      	ldr	r0, [r7, #12]
 800a34e:	f7ff faae 	bl	80098ae <SWAPBYTE>
 800a352:	4603      	mov	r3, r0
 800a354:	461a      	mov	r2, r3
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	3301      	adds	r3, #1
 800a35e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	3301      	adds	r3, #1
 800a364:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a366:	68f8      	ldr	r0, [r7, #12]
 800a368:	f7ff faa1 	bl	80098ae <SWAPBYTE>
 800a36c:	4603      	mov	r3, r0
 800a36e:	461a      	mov	r2, r3
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	80da      	strh	r2, [r3, #6]
}
 800a374:	bf00      	nop
 800a376:	3710      	adds	r7, #16
 800a378:	46bd      	mov	sp, r7
 800a37a:	bd80      	pop	{r7, pc}

0800a37c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b082      	sub	sp, #8
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
 800a384:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a386:	2180      	movs	r1, #128	; 0x80
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	f011 fdc1 	bl	801bf10 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a38e:	2100      	movs	r1, #0
 800a390:	6878      	ldr	r0, [r7, #4]
 800a392:	f011 fdbd 	bl	801bf10 <USBD_LL_StallEP>
}
 800a396:	bf00      	nop
 800a398:	3708      	adds	r7, #8
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}

0800a39e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a39e:	b580      	push	{r7, lr}
 800a3a0:	b086      	sub	sp, #24
 800a3a2:	af00      	add	r7, sp, #0
 800a3a4:	60f8      	str	r0, [r7, #12]
 800a3a6:	60b9      	str	r1, [r7, #8]
 800a3a8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d036      	beq.n	800a422 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a3b8:	6938      	ldr	r0, [r7, #16]
 800a3ba:	f000 f836 	bl	800a42a <USBD_GetLen>
 800a3be:	4603      	mov	r3, r0
 800a3c0:	3301      	adds	r3, #1
 800a3c2:	b29b      	uxth	r3, r3
 800a3c4:	005b      	lsls	r3, r3, #1
 800a3c6:	b29a      	uxth	r2, r3
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a3cc:	7dfb      	ldrb	r3, [r7, #23]
 800a3ce:	68ba      	ldr	r2, [r7, #8]
 800a3d0:	4413      	add	r3, r2
 800a3d2:	687a      	ldr	r2, [r7, #4]
 800a3d4:	7812      	ldrb	r2, [r2, #0]
 800a3d6:	701a      	strb	r2, [r3, #0]
  idx++;
 800a3d8:	7dfb      	ldrb	r3, [r7, #23]
 800a3da:	3301      	adds	r3, #1
 800a3dc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a3de:	7dfb      	ldrb	r3, [r7, #23]
 800a3e0:	68ba      	ldr	r2, [r7, #8]
 800a3e2:	4413      	add	r3, r2
 800a3e4:	2203      	movs	r2, #3
 800a3e6:	701a      	strb	r2, [r3, #0]
  idx++;
 800a3e8:	7dfb      	ldrb	r3, [r7, #23]
 800a3ea:	3301      	adds	r3, #1
 800a3ec:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a3ee:	e013      	b.n	800a418 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a3f0:	7dfb      	ldrb	r3, [r7, #23]
 800a3f2:	68ba      	ldr	r2, [r7, #8]
 800a3f4:	4413      	add	r3, r2
 800a3f6:	693a      	ldr	r2, [r7, #16]
 800a3f8:	7812      	ldrb	r2, [r2, #0]
 800a3fa:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	3301      	adds	r3, #1
 800a400:	613b      	str	r3, [r7, #16]
    idx++;
 800a402:	7dfb      	ldrb	r3, [r7, #23]
 800a404:	3301      	adds	r3, #1
 800a406:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a408:	7dfb      	ldrb	r3, [r7, #23]
 800a40a:	68ba      	ldr	r2, [r7, #8]
 800a40c:	4413      	add	r3, r2
 800a40e:	2200      	movs	r2, #0
 800a410:	701a      	strb	r2, [r3, #0]
    idx++;
 800a412:	7dfb      	ldrb	r3, [r7, #23]
 800a414:	3301      	adds	r3, #1
 800a416:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a418:	693b      	ldr	r3, [r7, #16]
 800a41a:	781b      	ldrb	r3, [r3, #0]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d1e7      	bne.n	800a3f0 <USBD_GetString+0x52>
 800a420:	e000      	b.n	800a424 <USBD_GetString+0x86>
    return;
 800a422:	bf00      	nop
  }
}
 800a424:	3718      	adds	r7, #24
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}

0800a42a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a42a:	b480      	push	{r7}
 800a42c:	b085      	sub	sp, #20
 800a42e:	af00      	add	r7, sp, #0
 800a430:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a432:	2300      	movs	r3, #0
 800a434:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a43a:	e005      	b.n	800a448 <USBD_GetLen+0x1e>
  {
    len++;
 800a43c:	7bfb      	ldrb	r3, [r7, #15]
 800a43e:	3301      	adds	r3, #1
 800a440:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	3301      	adds	r3, #1
 800a446:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	781b      	ldrb	r3, [r3, #0]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d1f5      	bne.n	800a43c <USBD_GetLen+0x12>
  }

  return len;
 800a450:	7bfb      	ldrb	r3, [r7, #15]
}
 800a452:	4618      	mov	r0, r3
 800a454:	3714      	adds	r7, #20
 800a456:	46bd      	mov	sp, r7
 800a458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45c:	4770      	bx	lr

0800a45e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a45e:	b580      	push	{r7, lr}
 800a460:	b084      	sub	sp, #16
 800a462:	af00      	add	r7, sp, #0
 800a464:	60f8      	str	r0, [r7, #12]
 800a466:	60b9      	str	r1, [r7, #8]
 800a468:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	2202      	movs	r2, #2
 800a46e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	687a      	ldr	r2, [r7, #4]
 800a476:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	687a      	ldr	r2, [r7, #4]
 800a47c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	68ba      	ldr	r2, [r7, #8]
 800a482:	2100      	movs	r1, #0
 800a484:	68f8      	ldr	r0, [r7, #12]
 800a486:	f011 fdcc 	bl	801c022 <USBD_LL_Transmit>

  return USBD_OK;
 800a48a:	2300      	movs	r3, #0
}
 800a48c:	4618      	mov	r0, r3
 800a48e:	3710      	adds	r7, #16
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}

0800a494 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b084      	sub	sp, #16
 800a498:	af00      	add	r7, sp, #0
 800a49a:	60f8      	str	r0, [r7, #12]
 800a49c:	60b9      	str	r1, [r7, #8]
 800a49e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	68ba      	ldr	r2, [r7, #8]
 800a4a4:	2100      	movs	r1, #0
 800a4a6:	68f8      	ldr	r0, [r7, #12]
 800a4a8:	f011 fdbb 	bl	801c022 <USBD_LL_Transmit>

  return USBD_OK;
 800a4ac:	2300      	movs	r3, #0
}
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	3710      	adds	r7, #16
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}

0800a4b6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a4b6:	b580      	push	{r7, lr}
 800a4b8:	b084      	sub	sp, #16
 800a4ba:	af00      	add	r7, sp, #0
 800a4bc:	60f8      	str	r0, [r7, #12]
 800a4be:	60b9      	str	r1, [r7, #8]
 800a4c0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	2203      	movs	r2, #3
 800a4c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	687a      	ldr	r2, [r7, #4]
 800a4ce:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	687a      	ldr	r2, [r7, #4]
 800a4d6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	68ba      	ldr	r2, [r7, #8]
 800a4de:	2100      	movs	r1, #0
 800a4e0:	68f8      	ldr	r0, [r7, #12]
 800a4e2:	f011 fdbf 	bl	801c064 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a4e6:	2300      	movs	r3, #0
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	3710      	adds	r7, #16
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}

0800a4f0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b084      	sub	sp, #16
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	60f8      	str	r0, [r7, #12]
 800a4f8:	60b9      	str	r1, [r7, #8]
 800a4fa:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	68ba      	ldr	r2, [r7, #8]
 800a500:	2100      	movs	r1, #0
 800a502:	68f8      	ldr	r0, [r7, #12]
 800a504:	f011 fdae 	bl	801c064 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a508:	2300      	movs	r3, #0
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	3710      	adds	r7, #16
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}

0800a512 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a512:	b580      	push	{r7, lr}
 800a514:	b082      	sub	sp, #8
 800a516:	af00      	add	r7, sp, #0
 800a518:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2204      	movs	r2, #4
 800a51e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a522:	2300      	movs	r3, #0
 800a524:	2200      	movs	r2, #0
 800a526:	2100      	movs	r1, #0
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	f011 fd7a 	bl	801c022 <USBD_LL_Transmit>

  return USBD_OK;
 800a52e:	2300      	movs	r3, #0
}
 800a530:	4618      	mov	r0, r3
 800a532:	3708      	adds	r7, #8
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}

0800a538 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b082      	sub	sp, #8
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2205      	movs	r2, #5
 800a544:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a548:	2300      	movs	r3, #0
 800a54a:	2200      	movs	r2, #0
 800a54c:	2100      	movs	r1, #0
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f011 fd88 	bl	801c064 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a554:	2300      	movs	r3, #0
}
 800a556:	4618      	mov	r0, r3
 800a558:	3708      	adds	r7, #8
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}

0800a55e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a55e:	b480      	push	{r7}
 800a560:	b085      	sub	sp, #20
 800a562:	af00      	add	r7, sp, #0
 800a564:	4603      	mov	r3, r0
 800a566:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a568:	2300      	movs	r3, #0
 800a56a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a56c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a570:	2b84      	cmp	r3, #132	; 0x84
 800a572:	d005      	beq.n	800a580 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a574:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	4413      	add	r3, r2
 800a57c:	3303      	adds	r3, #3
 800a57e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a580:	68fb      	ldr	r3, [r7, #12]
}
 800a582:	4618      	mov	r0, r3
 800a584:	3714      	adds	r7, #20
 800a586:	46bd      	mov	sp, r7
 800a588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58c:	4770      	bx	lr

0800a58e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800a58e:	b480      	push	{r7}
 800a590:	b083      	sub	sp, #12
 800a592:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a594:	f3ef 8305 	mrs	r3, IPSR
 800a598:	607b      	str	r3, [r7, #4]
  return(result);
 800a59a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	bf14      	ite	ne
 800a5a0:	2301      	movne	r3, #1
 800a5a2:	2300      	moveq	r3, #0
 800a5a4:	b2db      	uxtb	r3, r3
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	370c      	adds	r7, #12
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b0:	4770      	bx	lr

0800a5b2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a5b2:	b580      	push	{r7, lr}
 800a5b4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a5b6:	f001 fcdd 	bl	800bf74 <vTaskStartScheduler>
  
  return osOK;
 800a5ba:	2300      	movs	r3, #0
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	bd80      	pop	{r7, pc}

0800a5c0 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800a5c4:	f7ff ffe3 	bl	800a58e <inHandlerMode>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d003      	beq.n	800a5d6 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800a5ce:	f001 fdeb 	bl	800c1a8 <xTaskGetTickCountFromISR>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	e002      	b.n	800a5dc <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800a5d6:	f001 fdd7 	bl	800c188 <xTaskGetTickCount>
 800a5da:	4603      	mov	r3, r0
  }
}
 800a5dc:	4618      	mov	r0, r3
 800a5de:	bd80      	pop	{r7, pc}

0800a5e0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a5e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5e2:	b089      	sub	sp, #36	; 0x24
 800a5e4:	af04      	add	r7, sp, #16
 800a5e6:	6078      	str	r0, [r7, #4]
 800a5e8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	695b      	ldr	r3, [r3, #20]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d020      	beq.n	800a634 <osThreadCreate+0x54>
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	699b      	ldr	r3, [r3, #24]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d01c      	beq.n	800a634 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	685c      	ldr	r4, [r3, #4]
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681d      	ldr	r5, [r3, #0]
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	691e      	ldr	r6, [r3, #16]
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a60c:	4618      	mov	r0, r3
 800a60e:	f7ff ffa6 	bl	800a55e <makeFreeRtosPriority>
 800a612:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	695b      	ldr	r3, [r3, #20]
 800a618:	687a      	ldr	r2, [r7, #4]
 800a61a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a61c:	9202      	str	r2, [sp, #8]
 800a61e:	9301      	str	r3, [sp, #4]
 800a620:	9100      	str	r1, [sp, #0]
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	4632      	mov	r2, r6
 800a626:	4629      	mov	r1, r5
 800a628:	4620      	mov	r0, r4
 800a62a:	f001 fb0f 	bl	800bc4c <xTaskCreateStatic>
 800a62e:	4603      	mov	r3, r0
 800a630:	60fb      	str	r3, [r7, #12]
 800a632:	e01c      	b.n	800a66e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	685c      	ldr	r4, [r3, #4]
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a640:	b29e      	uxth	r6, r3
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a648:	4618      	mov	r0, r3
 800a64a:	f7ff ff88 	bl	800a55e <makeFreeRtosPriority>
 800a64e:	4602      	mov	r2, r0
 800a650:	f107 030c 	add.w	r3, r7, #12
 800a654:	9301      	str	r3, [sp, #4]
 800a656:	9200      	str	r2, [sp, #0]
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	4632      	mov	r2, r6
 800a65c:	4629      	mov	r1, r5
 800a65e:	4620      	mov	r0, r4
 800a660:	f001 fb51 	bl	800bd06 <xTaskCreate>
 800a664:	4603      	mov	r3, r0
 800a666:	2b01      	cmp	r3, #1
 800a668:	d001      	beq.n	800a66e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a66a:	2300      	movs	r3, #0
 800a66c:	e000      	b.n	800a670 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a66e:	68fb      	ldr	r3, [r7, #12]
}
 800a670:	4618      	mov	r0, r3
 800a672:	3714      	adds	r7, #20
 800a674:	46bd      	mov	sp, r7
 800a676:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a678 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b082      	sub	sp, #8
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	685b      	ldr	r3, [r3, #4]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d007      	beq.n	800a698 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	685b      	ldr	r3, [r3, #4]
 800a68c:	4619      	mov	r1, r3
 800a68e:	2001      	movs	r0, #1
 800a690:	f000 fc7d 	bl	800af8e <xQueueCreateMutexStatic>
 800a694:	4603      	mov	r3, r0
 800a696:	e003      	b.n	800a6a0 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800a698:	2001      	movs	r0, #1
 800a69a:	f000 fc60 	bl	800af5e <xQueueCreateMutex>
 800a69e:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	3708      	adds	r7, #8
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bd80      	pop	{r7, pc}

0800a6a8 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b084      	sub	sp, #16
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
 800a6b0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d101      	bne.n	800a6c0 <osMutexWait+0x18>
    return osErrorParameter;
 800a6bc:	2380      	movs	r3, #128	; 0x80
 800a6be:	e03a      	b.n	800a736 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6ca:	d103      	bne.n	800a6d4 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800a6cc:	f04f 33ff 	mov.w	r3, #4294967295
 800a6d0:	60fb      	str	r3, [r7, #12]
 800a6d2:	e009      	b.n	800a6e8 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d006      	beq.n	800a6e8 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d101      	bne.n	800a6e8 <osMutexWait+0x40>
      ticks = 1;
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800a6e8:	f7ff ff51 	bl	800a58e <inHandlerMode>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d017      	beq.n	800a722 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800a6f2:	f107 0308 	add.w	r3, r7, #8
 800a6f6:	461a      	mov	r2, r3
 800a6f8:	2100      	movs	r1, #0
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	f001 f874 	bl	800b7e8 <xQueueReceiveFromISR>
 800a700:	4603      	mov	r3, r0
 800a702:	2b01      	cmp	r3, #1
 800a704:	d001      	beq.n	800a70a <osMutexWait+0x62>
      return osErrorOS;
 800a706:	23ff      	movs	r3, #255	; 0xff
 800a708:	e015      	b.n	800a736 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d011      	beq.n	800a734 <osMutexWait+0x8c>
 800a710:	4b0b      	ldr	r3, [pc, #44]	; (800a740 <osMutexWait+0x98>)
 800a712:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a716:	601a      	str	r2, [r3, #0]
 800a718:	f3bf 8f4f 	dsb	sy
 800a71c:	f3bf 8f6f 	isb	sy
 800a720:	e008      	b.n	800a734 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800a722:	68f9      	ldr	r1, [r7, #12]
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f000 ff53 	bl	800b5d0 <xQueueSemaphoreTake>
 800a72a:	4603      	mov	r3, r0
 800a72c:	2b01      	cmp	r3, #1
 800a72e:	d001      	beq.n	800a734 <osMutexWait+0x8c>
    return osErrorOS;
 800a730:	23ff      	movs	r3, #255	; 0xff
 800a732:	e000      	b.n	800a736 <osMutexWait+0x8e>
  }
  
  return osOK;
 800a734:	2300      	movs	r3, #0
}
 800a736:	4618      	mov	r0, r3
 800a738:	3710      	adds	r7, #16
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}
 800a73e:	bf00      	nop
 800a740:	e000ed04 	.word	0xe000ed04

0800a744 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b084      	sub	sp, #16
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800a74c:	2300      	movs	r3, #0
 800a74e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800a750:	2300      	movs	r3, #0
 800a752:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800a754:	f7ff ff1b 	bl	800a58e <inHandlerMode>
 800a758:	4603      	mov	r3, r0
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d016      	beq.n	800a78c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800a75e:	f107 0308 	add.w	r3, r7, #8
 800a762:	4619      	mov	r1, r3
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	f000 fdc6 	bl	800b2f6 <xQueueGiveFromISR>
 800a76a:	4603      	mov	r3, r0
 800a76c:	2b01      	cmp	r3, #1
 800a76e:	d001      	beq.n	800a774 <osMutexRelease+0x30>
      return osErrorOS;
 800a770:	23ff      	movs	r3, #255	; 0xff
 800a772:	e017      	b.n	800a7a4 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a774:	68bb      	ldr	r3, [r7, #8]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d013      	beq.n	800a7a2 <osMutexRelease+0x5e>
 800a77a:	4b0c      	ldr	r3, [pc, #48]	; (800a7ac <osMutexRelease+0x68>)
 800a77c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a780:	601a      	str	r2, [r3, #0]
 800a782:	f3bf 8f4f 	dsb	sy
 800a786:	f3bf 8f6f 	isb	sy
 800a78a:	e00a      	b.n	800a7a2 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800a78c:	2300      	movs	r3, #0
 800a78e:	2200      	movs	r2, #0
 800a790:	2100      	movs	r1, #0
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	f000 fc16 	bl	800afc4 <xQueueGenericSend>
 800a798:	4603      	mov	r3, r0
 800a79a:	2b01      	cmp	r3, #1
 800a79c:	d001      	beq.n	800a7a2 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800a79e:	23ff      	movs	r3, #255	; 0xff
 800a7a0:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	3710      	adds	r7, #16
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}
 800a7ac:	e000ed04 	.word	0xe000ed04

0800a7b0 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b086      	sub	sp, #24
 800a7b4:	af02      	add	r7, sp, #8
 800a7b6:	6078      	str	r0, [r7, #4]
 800a7b8:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	685b      	ldr	r3, [r3, #4]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d00f      	beq.n	800a7e2 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	2b01      	cmp	r3, #1
 800a7c6:	d10a      	bne.n	800a7de <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	685b      	ldr	r3, [r3, #4]
 800a7cc:	2203      	movs	r2, #3
 800a7ce:	9200      	str	r2, [sp, #0]
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	2100      	movs	r1, #0
 800a7d4:	2001      	movs	r0, #1
 800a7d6:	f000 fad7 	bl	800ad88 <xQueueGenericCreateStatic>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	e016      	b.n	800a80c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	e014      	b.n	800a80c <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	2b01      	cmp	r3, #1
 800a7e6:	d110      	bne.n	800a80a <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800a7e8:	2203      	movs	r2, #3
 800a7ea:	2100      	movs	r1, #0
 800a7ec:	2001      	movs	r0, #1
 800a7ee:	f000 fb43 	bl	800ae78 <xQueueGenericCreate>
 800a7f2:	60f8      	str	r0, [r7, #12]
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d005      	beq.n	800a806 <osSemaphoreCreate+0x56>
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	2100      	movs	r1, #0
 800a800:	68f8      	ldr	r0, [r7, #12]
 800a802:	f000 fbdf 	bl	800afc4 <xQueueGenericSend>
      return sema;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	e000      	b.n	800a80c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800a80a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	3710      	adds	r7, #16
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}

0800a814 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b084      	sub	sp, #16
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
 800a81c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800a81e:	2300      	movs	r3, #0
 800a820:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d101      	bne.n	800a82c <osSemaphoreWait+0x18>
    return osErrorParameter;
 800a828:	2380      	movs	r3, #128	; 0x80
 800a82a:	e03a      	b.n	800a8a2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800a82c:	2300      	movs	r3, #0
 800a82e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a836:	d103      	bne.n	800a840 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800a838:	f04f 33ff 	mov.w	r3, #4294967295
 800a83c:	60fb      	str	r3, [r7, #12]
 800a83e:	e009      	b.n	800a854 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d006      	beq.n	800a854 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d101      	bne.n	800a854 <osSemaphoreWait+0x40>
      ticks = 1;
 800a850:	2301      	movs	r3, #1
 800a852:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800a854:	f7ff fe9b 	bl	800a58e <inHandlerMode>
 800a858:	4603      	mov	r3, r0
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d017      	beq.n	800a88e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800a85e:	f107 0308 	add.w	r3, r7, #8
 800a862:	461a      	mov	r2, r3
 800a864:	2100      	movs	r1, #0
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	f000 ffbe 	bl	800b7e8 <xQueueReceiveFromISR>
 800a86c:	4603      	mov	r3, r0
 800a86e:	2b01      	cmp	r3, #1
 800a870:	d001      	beq.n	800a876 <osSemaphoreWait+0x62>
      return osErrorOS;
 800a872:	23ff      	movs	r3, #255	; 0xff
 800a874:	e015      	b.n	800a8a2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d011      	beq.n	800a8a0 <osSemaphoreWait+0x8c>
 800a87c:	4b0b      	ldr	r3, [pc, #44]	; (800a8ac <osSemaphoreWait+0x98>)
 800a87e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a882:	601a      	str	r2, [r3, #0]
 800a884:	f3bf 8f4f 	dsb	sy
 800a888:	f3bf 8f6f 	isb	sy
 800a88c:	e008      	b.n	800a8a0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800a88e:	68f9      	ldr	r1, [r7, #12]
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f000 fe9d 	bl	800b5d0 <xQueueSemaphoreTake>
 800a896:	4603      	mov	r3, r0
 800a898:	2b01      	cmp	r3, #1
 800a89a:	d001      	beq.n	800a8a0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800a89c:	23ff      	movs	r3, #255	; 0xff
 800a89e:	e000      	b.n	800a8a2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800a8a0:	2300      	movs	r3, #0
}
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	3710      	adds	r7, #16
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	bd80      	pop	{r7, pc}
 800a8aa:	bf00      	nop
 800a8ac:	e000ed04 	.word	0xe000ed04

0800a8b0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b084      	sub	sp, #16
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800a8bc:	2300      	movs	r3, #0
 800a8be:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800a8c0:	f7ff fe65 	bl	800a58e <inHandlerMode>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d016      	beq.n	800a8f8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800a8ca:	f107 0308 	add.w	r3, r7, #8
 800a8ce:	4619      	mov	r1, r3
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f000 fd10 	bl	800b2f6 <xQueueGiveFromISR>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	2b01      	cmp	r3, #1
 800a8da:	d001      	beq.n	800a8e0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800a8dc:	23ff      	movs	r3, #255	; 0xff
 800a8de:	e017      	b.n	800a910 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d013      	beq.n	800a90e <osSemaphoreRelease+0x5e>
 800a8e6:	4b0c      	ldr	r3, [pc, #48]	; (800a918 <osSemaphoreRelease+0x68>)
 800a8e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8ec:	601a      	str	r2, [r3, #0]
 800a8ee:	f3bf 8f4f 	dsb	sy
 800a8f2:	f3bf 8f6f 	isb	sy
 800a8f6:	e00a      	b.n	800a90e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	2100      	movs	r1, #0
 800a8fe:	6878      	ldr	r0, [r7, #4]
 800a900:	f000 fb60 	bl	800afc4 <xQueueGenericSend>
 800a904:	4603      	mov	r3, r0
 800a906:	2b01      	cmp	r3, #1
 800a908:	d001      	beq.n	800a90e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800a90a:	23ff      	movs	r3, #255	; 0xff
 800a90c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800a90e:	68fb      	ldr	r3, [r7, #12]
}
 800a910:	4618      	mov	r0, r3
 800a912:	3710      	adds	r7, #16
 800a914:	46bd      	mov	sp, r7
 800a916:	bd80      	pop	{r7, pc}
 800a918:	e000ed04 	.word	0xe000ed04

0800a91c <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b082      	sub	sp, #8
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800a924:	f7ff fe33 	bl	800a58e <inHandlerMode>
 800a928:	4603      	mov	r3, r0
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d001      	beq.n	800a932 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800a92e:	2382      	movs	r3, #130	; 0x82
 800a930:	e003      	b.n	800a93a <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f001 f814 	bl	800b960 <vQueueDelete>

  return osOK; 
 800a938:	2300      	movs	r3, #0
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	3708      	adds	r7, #8
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}

0800a942 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800a942:	b590      	push	{r4, r7, lr}
 800a944:	b085      	sub	sp, #20
 800a946:	af02      	add	r7, sp, #8
 800a948:	6078      	str	r0, [r7, #4]
 800a94a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	689b      	ldr	r3, [r3, #8]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d011      	beq.n	800a978 <osMessageCreate+0x36>
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	68db      	ldr	r3, [r3, #12]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d00d      	beq.n	800a978 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6818      	ldr	r0, [r3, #0]
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	6859      	ldr	r1, [r3, #4]
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	689a      	ldr	r2, [r3, #8]
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	68db      	ldr	r3, [r3, #12]
 800a96c:	2400      	movs	r4, #0
 800a96e:	9400      	str	r4, [sp, #0]
 800a970:	f000 fa0a 	bl	800ad88 <xQueueGenericCreateStatic>
 800a974:	4603      	mov	r3, r0
 800a976:	e008      	b.n	800a98a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	6818      	ldr	r0, [r3, #0]
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	685b      	ldr	r3, [r3, #4]
 800a980:	2200      	movs	r2, #0
 800a982:	4619      	mov	r1, r3
 800a984:	f000 fa78 	bl	800ae78 <xQueueGenericCreate>
 800a988:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	370c      	adds	r7, #12
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd90      	pop	{r4, r7, pc}
	...

0800a994 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b086      	sub	sp, #24
 800a998:	af00      	add	r7, sp, #0
 800a99a:	60f8      	str	r0, [r7, #12]
 800a99c:	60b9      	str	r1, [r7, #8]
 800a99e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800a9a8:	697b      	ldr	r3, [r7, #20]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d101      	bne.n	800a9b2 <osMessagePut+0x1e>
    ticks = 1;
 800a9ae:	2301      	movs	r3, #1
 800a9b0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800a9b2:	f7ff fdec 	bl	800a58e <inHandlerMode>
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d018      	beq.n	800a9ee <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800a9bc:	f107 0210 	add.w	r2, r7, #16
 800a9c0:	f107 0108 	add.w	r1, r7, #8
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	68f8      	ldr	r0, [r7, #12]
 800a9c8:	f000 fbfa 	bl	800b1c0 <xQueueGenericSendFromISR>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	2b01      	cmp	r3, #1
 800a9d0:	d001      	beq.n	800a9d6 <osMessagePut+0x42>
      return osErrorOS;
 800a9d2:	23ff      	movs	r3, #255	; 0xff
 800a9d4:	e018      	b.n	800aa08 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a9d6:	693b      	ldr	r3, [r7, #16]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d014      	beq.n	800aa06 <osMessagePut+0x72>
 800a9dc:	4b0c      	ldr	r3, [pc, #48]	; (800aa10 <osMessagePut+0x7c>)
 800a9de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9e2:	601a      	str	r2, [r3, #0]
 800a9e4:	f3bf 8f4f 	dsb	sy
 800a9e8:	f3bf 8f6f 	isb	sy
 800a9ec:	e00b      	b.n	800aa06 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800a9ee:	f107 0108 	add.w	r1, r7, #8
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	697a      	ldr	r2, [r7, #20]
 800a9f6:	68f8      	ldr	r0, [r7, #12]
 800a9f8:	f000 fae4 	bl	800afc4 <xQueueGenericSend>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	2b01      	cmp	r3, #1
 800aa00:	d001      	beq.n	800aa06 <osMessagePut+0x72>
      return osErrorOS;
 800aa02:	23ff      	movs	r3, #255	; 0xff
 800aa04:	e000      	b.n	800aa08 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800aa06:	2300      	movs	r3, #0
}
 800aa08:	4618      	mov	r0, r3
 800aa0a:	3718      	adds	r7, #24
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bd80      	pop	{r7, pc}
 800aa10:	e000ed04 	.word	0xe000ed04

0800aa14 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800aa14:	b590      	push	{r4, r7, lr}
 800aa16:	b08b      	sub	sp, #44	; 0x2c
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	60f8      	str	r0, [r7, #12]
 800aa1c:	60b9      	str	r1, [r7, #8]
 800aa1e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800aa24:	2300      	movs	r3, #0
 800aa26:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800aa28:	68bb      	ldr	r3, [r7, #8]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d10a      	bne.n	800aa44 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800aa2e:	2380      	movs	r3, #128	; 0x80
 800aa30:	617b      	str	r3, [r7, #20]
    return event;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	461c      	mov	r4, r3
 800aa36:	f107 0314 	add.w	r3, r7, #20
 800aa3a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800aa3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800aa42:	e054      	b.n	800aaee <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800aa44:	2300      	movs	r3, #0
 800aa46:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800aa48:	2300      	movs	r3, #0
 800aa4a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa52:	d103      	bne.n	800aa5c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800aa54:	f04f 33ff 	mov.w	r3, #4294967295
 800aa58:	627b      	str	r3, [r7, #36]	; 0x24
 800aa5a:	e009      	b.n	800aa70 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d006      	beq.n	800aa70 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800aa66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d101      	bne.n	800aa70 <osMessageGet+0x5c>
      ticks = 1;
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800aa70:	f7ff fd8d 	bl	800a58e <inHandlerMode>
 800aa74:	4603      	mov	r3, r0
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d01c      	beq.n	800aab4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800aa7a:	f107 0220 	add.w	r2, r7, #32
 800aa7e:	f107 0314 	add.w	r3, r7, #20
 800aa82:	3304      	adds	r3, #4
 800aa84:	4619      	mov	r1, r3
 800aa86:	68b8      	ldr	r0, [r7, #8]
 800aa88:	f000 feae 	bl	800b7e8 <xQueueReceiveFromISR>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	2b01      	cmp	r3, #1
 800aa90:	d102      	bne.n	800aa98 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800aa92:	2310      	movs	r3, #16
 800aa94:	617b      	str	r3, [r7, #20]
 800aa96:	e001      	b.n	800aa9c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800aa9c:	6a3b      	ldr	r3, [r7, #32]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d01d      	beq.n	800aade <osMessageGet+0xca>
 800aaa2:	4b15      	ldr	r3, [pc, #84]	; (800aaf8 <osMessageGet+0xe4>)
 800aaa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aaa8:	601a      	str	r2, [r3, #0]
 800aaaa:	f3bf 8f4f 	dsb	sy
 800aaae:	f3bf 8f6f 	isb	sy
 800aab2:	e014      	b.n	800aade <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800aab4:	f107 0314 	add.w	r3, r7, #20
 800aab8:	3304      	adds	r3, #4
 800aaba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aabc:	4619      	mov	r1, r3
 800aabe:	68b8      	ldr	r0, [r7, #8]
 800aac0:	f000 fca6 	bl	800b410 <xQueueReceive>
 800aac4:	4603      	mov	r3, r0
 800aac6:	2b01      	cmp	r3, #1
 800aac8:	d102      	bne.n	800aad0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800aaca:	2310      	movs	r3, #16
 800aacc:	617b      	str	r3, [r7, #20]
 800aace:	e006      	b.n	800aade <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800aad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d101      	bne.n	800aada <osMessageGet+0xc6>
 800aad6:	2300      	movs	r3, #0
 800aad8:	e000      	b.n	800aadc <osMessageGet+0xc8>
 800aada:	2340      	movs	r3, #64	; 0x40
 800aadc:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	461c      	mov	r4, r3
 800aae2:	f107 0314 	add.w	r3, r7, #20
 800aae6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800aaea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800aaee:	68f8      	ldr	r0, [r7, #12]
 800aaf0:	372c      	adds	r7, #44	; 0x2c
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd90      	pop	{r4, r7, pc}
 800aaf6:	bf00      	nop
 800aaf8:	e000ed04 	.word	0xe000ed04

0800aafc <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b082      	sub	sp, #8
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800ab04:	f7ff fd43 	bl	800a58e <inHandlerMode>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d004      	beq.n	800ab18 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800ab0e:	6878      	ldr	r0, [r7, #4]
 800ab10:	f000 ff08 	bl	800b924 <uxQueueMessagesWaitingFromISR>
 800ab14:	4603      	mov	r3, r0
 800ab16:	e003      	b.n	800ab20 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800ab18:	6878      	ldr	r0, [r7, #4]
 800ab1a:	f000 fee5 	bl	800b8e8 <uxQueueMessagesWaiting>
 800ab1e:	4603      	mov	r3, r0
  }
}
 800ab20:	4618      	mov	r0, r3
 800ab22:	3708      	adds	r7, #8
 800ab24:	46bd      	mov	sp, r7
 800ab26:	bd80      	pop	{r7, pc}

0800ab28 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b082      	sub	sp, #8
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800ab30:	f7ff fd2d 	bl	800a58e <inHandlerMode>
 800ab34:	4603      	mov	r3, r0
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d001      	beq.n	800ab3e <osMessageDelete+0x16>
    return osErrorISR;
 800ab3a:	2382      	movs	r3, #130	; 0x82
 800ab3c:	e003      	b.n	800ab46 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 800ab3e:	6878      	ldr	r0, [r7, #4]
 800ab40:	f000 ff0e 	bl	800b960 <vQueueDelete>

  return osOK; 
 800ab44:	2300      	movs	r3, #0
}
 800ab46:	4618      	mov	r0, r3
 800ab48:	3708      	adds	r7, #8
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}

0800ab4e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ab4e:	b480      	push	{r7}
 800ab50:	b083      	sub	sp, #12
 800ab52:	af00      	add	r7, sp, #0
 800ab54:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	f103 0208 	add.w	r2, r3, #8
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f04f 32ff 	mov.w	r2, #4294967295
 800ab66:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f103 0208 	add.w	r2, r3, #8
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	f103 0208 	add.w	r2, r3, #8
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2200      	movs	r2, #0
 800ab80:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ab82:	bf00      	nop
 800ab84:	370c      	adds	r7, #12
 800ab86:	46bd      	mov	sp, r7
 800ab88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8c:	4770      	bx	lr

0800ab8e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ab8e:	b480      	push	{r7}
 800ab90:	b083      	sub	sp, #12
 800ab92:	af00      	add	r7, sp, #0
 800ab94:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2200      	movs	r2, #0
 800ab9a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ab9c:	bf00      	nop
 800ab9e:	370c      	adds	r7, #12
 800aba0:	46bd      	mov	sp, r7
 800aba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba6:	4770      	bx	lr

0800aba8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aba8:	b480      	push	{r7}
 800abaa:	b085      	sub	sp, #20
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
 800abb0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	685b      	ldr	r3, [r3, #4]
 800abb6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	68fa      	ldr	r2, [r7, #12]
 800abbc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	689a      	ldr	r2, [r3, #8]
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	689b      	ldr	r3, [r3, #8]
 800abca:	683a      	ldr	r2, [r7, #0]
 800abcc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	683a      	ldr	r2, [r7, #0]
 800abd2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	687a      	ldr	r2, [r7, #4]
 800abd8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	1c5a      	adds	r2, r3, #1
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	601a      	str	r2, [r3, #0]
}
 800abe4:	bf00      	nop
 800abe6:	3714      	adds	r7, #20
 800abe8:	46bd      	mov	sp, r7
 800abea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abee:	4770      	bx	lr

0800abf0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800abf0:	b480      	push	{r7}
 800abf2:	b085      	sub	sp, #20
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
 800abf8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ac00:	68bb      	ldr	r3, [r7, #8]
 800ac02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac06:	d103      	bne.n	800ac10 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	691b      	ldr	r3, [r3, #16]
 800ac0c:	60fb      	str	r3, [r7, #12]
 800ac0e:	e00c      	b.n	800ac2a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	3308      	adds	r3, #8
 800ac14:	60fb      	str	r3, [r7, #12]
 800ac16:	e002      	b.n	800ac1e <vListInsert+0x2e>
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	685b      	ldr	r3, [r3, #4]
 800ac1c:	60fb      	str	r3, [r7, #12]
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	685b      	ldr	r3, [r3, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	68ba      	ldr	r2, [r7, #8]
 800ac26:	429a      	cmp	r2, r3
 800ac28:	d2f6      	bcs.n	800ac18 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	685a      	ldr	r2, [r3, #4]
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	685b      	ldr	r3, [r3, #4]
 800ac36:	683a      	ldr	r2, [r7, #0]
 800ac38:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	68fa      	ldr	r2, [r7, #12]
 800ac3e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	683a      	ldr	r2, [r7, #0]
 800ac44:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	687a      	ldr	r2, [r7, #4]
 800ac4a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	1c5a      	adds	r2, r3, #1
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	601a      	str	r2, [r3, #0]
}
 800ac56:	bf00      	nop
 800ac58:	3714      	adds	r7, #20
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac60:	4770      	bx	lr

0800ac62 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ac62:	b480      	push	{r7}
 800ac64:	b085      	sub	sp, #20
 800ac66:	af00      	add	r7, sp, #0
 800ac68:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	691b      	ldr	r3, [r3, #16]
 800ac6e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	685b      	ldr	r3, [r3, #4]
 800ac74:	687a      	ldr	r2, [r7, #4]
 800ac76:	6892      	ldr	r2, [r2, #8]
 800ac78:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	689b      	ldr	r3, [r3, #8]
 800ac7e:	687a      	ldr	r2, [r7, #4]
 800ac80:	6852      	ldr	r2, [r2, #4]
 800ac82:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	685b      	ldr	r3, [r3, #4]
 800ac88:	687a      	ldr	r2, [r7, #4]
 800ac8a:	429a      	cmp	r2, r3
 800ac8c:	d103      	bne.n	800ac96 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	689a      	ldr	r2, [r3, #8]
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	2200      	movs	r2, #0
 800ac9a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	1e5a      	subs	r2, r3, #1
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	681b      	ldr	r3, [r3, #0]
}
 800acaa:	4618      	mov	r0, r3
 800acac:	3714      	adds	r7, #20
 800acae:	46bd      	mov	sp, r7
 800acb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb4:	4770      	bx	lr
	...

0800acb8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b084      	sub	sp, #16
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
 800acc0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d10a      	bne.n	800ace2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800accc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd0:	f383 8811 	msr	BASEPRI, r3
 800acd4:	f3bf 8f6f 	isb	sy
 800acd8:	f3bf 8f4f 	dsb	sy
 800acdc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800acde:	bf00      	nop
 800ace0:	e7fe      	b.n	800ace0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ace2:	f002 f8b7 	bl	800ce54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	681a      	ldr	r2, [r3, #0]
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acee:	68f9      	ldr	r1, [r7, #12]
 800acf0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800acf2:	fb01 f303 	mul.w	r3, r1, r3
 800acf6:	441a      	add	r2, r3
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	2200      	movs	r2, #0
 800ad00:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	681a      	ldr	r2, [r3, #0]
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	681a      	ldr	r2, [r3, #0]
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad12:	3b01      	subs	r3, #1
 800ad14:	68f9      	ldr	r1, [r7, #12]
 800ad16:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ad18:	fb01 f303 	mul.w	r3, r1, r3
 800ad1c:	441a      	add	r2, r3
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	22ff      	movs	r2, #255	; 0xff
 800ad26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	22ff      	movs	r2, #255	; 0xff
 800ad2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d114      	bne.n	800ad62 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	691b      	ldr	r3, [r3, #16]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d01a      	beq.n	800ad76 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	3310      	adds	r3, #16
 800ad44:	4618      	mov	r0, r3
 800ad46:	f001 fb79 	bl	800c43c <xTaskRemoveFromEventList>
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d012      	beq.n	800ad76 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ad50:	4b0c      	ldr	r3, [pc, #48]	; (800ad84 <xQueueGenericReset+0xcc>)
 800ad52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad56:	601a      	str	r2, [r3, #0]
 800ad58:	f3bf 8f4f 	dsb	sy
 800ad5c:	f3bf 8f6f 	isb	sy
 800ad60:	e009      	b.n	800ad76 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	3310      	adds	r3, #16
 800ad66:	4618      	mov	r0, r3
 800ad68:	f7ff fef1 	bl	800ab4e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	3324      	adds	r3, #36	; 0x24
 800ad70:	4618      	mov	r0, r3
 800ad72:	f7ff feec 	bl	800ab4e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ad76:	f002 f89d 	bl	800ceb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ad7a:	2301      	movs	r3, #1
}
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	3710      	adds	r7, #16
 800ad80:	46bd      	mov	sp, r7
 800ad82:	bd80      	pop	{r7, pc}
 800ad84:	e000ed04 	.word	0xe000ed04

0800ad88 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b08e      	sub	sp, #56	; 0x38
 800ad8c:	af02      	add	r7, sp, #8
 800ad8e:	60f8      	str	r0, [r7, #12]
 800ad90:	60b9      	str	r1, [r7, #8]
 800ad92:	607a      	str	r2, [r7, #4]
 800ad94:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d10a      	bne.n	800adb2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800ad9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada0:	f383 8811 	msr	BASEPRI, r3
 800ada4:	f3bf 8f6f 	isb	sy
 800ada8:	f3bf 8f4f 	dsb	sy
 800adac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800adae:	bf00      	nop
 800adb0:	e7fe      	b.n	800adb0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d10a      	bne.n	800adce <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800adb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adbc:	f383 8811 	msr	BASEPRI, r3
 800adc0:	f3bf 8f6f 	isb	sy
 800adc4:	f3bf 8f4f 	dsb	sy
 800adc8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800adca:	bf00      	nop
 800adcc:	e7fe      	b.n	800adcc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d002      	beq.n	800adda <xQueueGenericCreateStatic+0x52>
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d001      	beq.n	800adde <xQueueGenericCreateStatic+0x56>
 800adda:	2301      	movs	r3, #1
 800addc:	e000      	b.n	800ade0 <xQueueGenericCreateStatic+0x58>
 800adde:	2300      	movs	r3, #0
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d10a      	bne.n	800adfa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ade4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ade8:	f383 8811 	msr	BASEPRI, r3
 800adec:	f3bf 8f6f 	isb	sy
 800adf0:	f3bf 8f4f 	dsb	sy
 800adf4:	623b      	str	r3, [r7, #32]
}
 800adf6:	bf00      	nop
 800adf8:	e7fe      	b.n	800adf8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d102      	bne.n	800ae06 <xQueueGenericCreateStatic+0x7e>
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d101      	bne.n	800ae0a <xQueueGenericCreateStatic+0x82>
 800ae06:	2301      	movs	r3, #1
 800ae08:	e000      	b.n	800ae0c <xQueueGenericCreateStatic+0x84>
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d10a      	bne.n	800ae26 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800ae10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae14:	f383 8811 	msr	BASEPRI, r3
 800ae18:	f3bf 8f6f 	isb	sy
 800ae1c:	f3bf 8f4f 	dsb	sy
 800ae20:	61fb      	str	r3, [r7, #28]
}
 800ae22:	bf00      	nop
 800ae24:	e7fe      	b.n	800ae24 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ae26:	2348      	movs	r3, #72	; 0x48
 800ae28:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	2b48      	cmp	r3, #72	; 0x48
 800ae2e:	d00a      	beq.n	800ae46 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ae30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae34:	f383 8811 	msr	BASEPRI, r3
 800ae38:	f3bf 8f6f 	isb	sy
 800ae3c:	f3bf 8f4f 	dsb	sy
 800ae40:	61bb      	str	r3, [r7, #24]
}
 800ae42:	bf00      	nop
 800ae44:	e7fe      	b.n	800ae44 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ae46:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ae4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d00d      	beq.n	800ae6e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ae52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae54:	2201      	movs	r2, #1
 800ae56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ae5a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ae5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae60:	9300      	str	r3, [sp, #0]
 800ae62:	4613      	mov	r3, r2
 800ae64:	687a      	ldr	r2, [r7, #4]
 800ae66:	68b9      	ldr	r1, [r7, #8]
 800ae68:	68f8      	ldr	r0, [r7, #12]
 800ae6a:	f000 f83f 	bl	800aeec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ae6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ae70:	4618      	mov	r0, r3
 800ae72:	3730      	adds	r7, #48	; 0x30
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bd80      	pop	{r7, pc}

0800ae78 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b08a      	sub	sp, #40	; 0x28
 800ae7c:	af02      	add	r7, sp, #8
 800ae7e:	60f8      	str	r0, [r7, #12]
 800ae80:	60b9      	str	r1, [r7, #8]
 800ae82:	4613      	mov	r3, r2
 800ae84:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d10a      	bne.n	800aea2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800ae8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae90:	f383 8811 	msr	BASEPRI, r3
 800ae94:	f3bf 8f6f 	isb	sy
 800ae98:	f3bf 8f4f 	dsb	sy
 800ae9c:	613b      	str	r3, [r7, #16]
}
 800ae9e:	bf00      	nop
 800aea0:	e7fe      	b.n	800aea0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	68ba      	ldr	r2, [r7, #8]
 800aea6:	fb02 f303 	mul.w	r3, r2, r3
 800aeaa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800aeac:	69fb      	ldr	r3, [r7, #28]
 800aeae:	3348      	adds	r3, #72	; 0x48
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	f002 f8f1 	bl	800d098 <pvPortMalloc>
 800aeb6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800aeb8:	69bb      	ldr	r3, [r7, #24]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d011      	beq.n	800aee2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800aebe:	69bb      	ldr	r3, [r7, #24]
 800aec0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aec2:	697b      	ldr	r3, [r7, #20]
 800aec4:	3348      	adds	r3, #72	; 0x48
 800aec6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800aec8:	69bb      	ldr	r3, [r7, #24]
 800aeca:	2200      	movs	r2, #0
 800aecc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800aed0:	79fa      	ldrb	r2, [r7, #7]
 800aed2:	69bb      	ldr	r3, [r7, #24]
 800aed4:	9300      	str	r3, [sp, #0]
 800aed6:	4613      	mov	r3, r2
 800aed8:	697a      	ldr	r2, [r7, #20]
 800aeda:	68b9      	ldr	r1, [r7, #8]
 800aedc:	68f8      	ldr	r0, [r7, #12]
 800aede:	f000 f805 	bl	800aeec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800aee2:	69bb      	ldr	r3, [r7, #24]
	}
 800aee4:	4618      	mov	r0, r3
 800aee6:	3720      	adds	r7, #32
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}

0800aeec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b084      	sub	sp, #16
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	60f8      	str	r0, [r7, #12]
 800aef4:	60b9      	str	r1, [r7, #8]
 800aef6:	607a      	str	r2, [r7, #4]
 800aef8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800aefa:	68bb      	ldr	r3, [r7, #8]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d103      	bne.n	800af08 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800af00:	69bb      	ldr	r3, [r7, #24]
 800af02:	69ba      	ldr	r2, [r7, #24]
 800af04:	601a      	str	r2, [r3, #0]
 800af06:	e002      	b.n	800af0e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800af08:	69bb      	ldr	r3, [r7, #24]
 800af0a:	687a      	ldr	r2, [r7, #4]
 800af0c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800af0e:	69bb      	ldr	r3, [r7, #24]
 800af10:	68fa      	ldr	r2, [r7, #12]
 800af12:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800af14:	69bb      	ldr	r3, [r7, #24]
 800af16:	68ba      	ldr	r2, [r7, #8]
 800af18:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800af1a:	2101      	movs	r1, #1
 800af1c:	69b8      	ldr	r0, [r7, #24]
 800af1e:	f7ff fecb 	bl	800acb8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800af22:	bf00      	nop
 800af24:	3710      	adds	r7, #16
 800af26:	46bd      	mov	sp, r7
 800af28:	bd80      	pop	{r7, pc}

0800af2a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800af2a:	b580      	push	{r7, lr}
 800af2c:	b082      	sub	sp, #8
 800af2e:	af00      	add	r7, sp, #0
 800af30:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d00e      	beq.n	800af56 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2200      	movs	r2, #0
 800af3c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2200      	movs	r2, #0
 800af42:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2200      	movs	r2, #0
 800af48:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800af4a:	2300      	movs	r3, #0
 800af4c:	2200      	movs	r2, #0
 800af4e:	2100      	movs	r1, #0
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f000 f837 	bl	800afc4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800af56:	bf00      	nop
 800af58:	3708      	adds	r7, #8
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}

0800af5e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800af5e:	b580      	push	{r7, lr}
 800af60:	b086      	sub	sp, #24
 800af62:	af00      	add	r7, sp, #0
 800af64:	4603      	mov	r3, r0
 800af66:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800af68:	2301      	movs	r3, #1
 800af6a:	617b      	str	r3, [r7, #20]
 800af6c:	2300      	movs	r3, #0
 800af6e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800af70:	79fb      	ldrb	r3, [r7, #7]
 800af72:	461a      	mov	r2, r3
 800af74:	6939      	ldr	r1, [r7, #16]
 800af76:	6978      	ldr	r0, [r7, #20]
 800af78:	f7ff ff7e 	bl	800ae78 <xQueueGenericCreate>
 800af7c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800af7e:	68f8      	ldr	r0, [r7, #12]
 800af80:	f7ff ffd3 	bl	800af2a <prvInitialiseMutex>

		return xNewQueue;
 800af84:	68fb      	ldr	r3, [r7, #12]
	}
 800af86:	4618      	mov	r0, r3
 800af88:	3718      	adds	r7, #24
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}

0800af8e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800af8e:	b580      	push	{r7, lr}
 800af90:	b088      	sub	sp, #32
 800af92:	af02      	add	r7, sp, #8
 800af94:	4603      	mov	r3, r0
 800af96:	6039      	str	r1, [r7, #0]
 800af98:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800af9a:	2301      	movs	r3, #1
 800af9c:	617b      	str	r3, [r7, #20]
 800af9e:	2300      	movs	r3, #0
 800afa0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800afa2:	79fb      	ldrb	r3, [r7, #7]
 800afa4:	9300      	str	r3, [sp, #0]
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	2200      	movs	r2, #0
 800afaa:	6939      	ldr	r1, [r7, #16]
 800afac:	6978      	ldr	r0, [r7, #20]
 800afae:	f7ff feeb 	bl	800ad88 <xQueueGenericCreateStatic>
 800afb2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800afb4:	68f8      	ldr	r0, [r7, #12]
 800afb6:	f7ff ffb8 	bl	800af2a <prvInitialiseMutex>

		return xNewQueue;
 800afba:	68fb      	ldr	r3, [r7, #12]
	}
 800afbc:	4618      	mov	r0, r3
 800afbe:	3718      	adds	r7, #24
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bd80      	pop	{r7, pc}

0800afc4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b08e      	sub	sp, #56	; 0x38
 800afc8:	af00      	add	r7, sp, #0
 800afca:	60f8      	str	r0, [r7, #12]
 800afcc:	60b9      	str	r1, [r7, #8]
 800afce:	607a      	str	r2, [r7, #4]
 800afd0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800afd2:	2300      	movs	r3, #0
 800afd4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800afda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d10a      	bne.n	800aff6 <xQueueGenericSend+0x32>
	__asm volatile
 800afe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afe4:	f383 8811 	msr	BASEPRI, r3
 800afe8:	f3bf 8f6f 	isb	sy
 800afec:	f3bf 8f4f 	dsb	sy
 800aff0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800aff2:	bf00      	nop
 800aff4:	e7fe      	b.n	800aff4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d103      	bne.n	800b004 <xQueueGenericSend+0x40>
 800affc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800affe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b000:	2b00      	cmp	r3, #0
 800b002:	d101      	bne.n	800b008 <xQueueGenericSend+0x44>
 800b004:	2301      	movs	r3, #1
 800b006:	e000      	b.n	800b00a <xQueueGenericSend+0x46>
 800b008:	2300      	movs	r3, #0
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d10a      	bne.n	800b024 <xQueueGenericSend+0x60>
	__asm volatile
 800b00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b012:	f383 8811 	msr	BASEPRI, r3
 800b016:	f3bf 8f6f 	isb	sy
 800b01a:	f3bf 8f4f 	dsb	sy
 800b01e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b020:	bf00      	nop
 800b022:	e7fe      	b.n	800b022 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	2b02      	cmp	r3, #2
 800b028:	d103      	bne.n	800b032 <xQueueGenericSend+0x6e>
 800b02a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b02c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b02e:	2b01      	cmp	r3, #1
 800b030:	d101      	bne.n	800b036 <xQueueGenericSend+0x72>
 800b032:	2301      	movs	r3, #1
 800b034:	e000      	b.n	800b038 <xQueueGenericSend+0x74>
 800b036:	2300      	movs	r3, #0
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d10a      	bne.n	800b052 <xQueueGenericSend+0x8e>
	__asm volatile
 800b03c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b040:	f383 8811 	msr	BASEPRI, r3
 800b044:	f3bf 8f6f 	isb	sy
 800b048:	f3bf 8f4f 	dsb	sy
 800b04c:	623b      	str	r3, [r7, #32]
}
 800b04e:	bf00      	nop
 800b050:	e7fe      	b.n	800b050 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b052:	f001 fbaf 	bl	800c7b4 <xTaskGetSchedulerState>
 800b056:	4603      	mov	r3, r0
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d102      	bne.n	800b062 <xQueueGenericSend+0x9e>
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d101      	bne.n	800b066 <xQueueGenericSend+0xa2>
 800b062:	2301      	movs	r3, #1
 800b064:	e000      	b.n	800b068 <xQueueGenericSend+0xa4>
 800b066:	2300      	movs	r3, #0
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d10a      	bne.n	800b082 <xQueueGenericSend+0xbe>
	__asm volatile
 800b06c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b070:	f383 8811 	msr	BASEPRI, r3
 800b074:	f3bf 8f6f 	isb	sy
 800b078:	f3bf 8f4f 	dsb	sy
 800b07c:	61fb      	str	r3, [r7, #28]
}
 800b07e:	bf00      	nop
 800b080:	e7fe      	b.n	800b080 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b082:	f001 fee7 	bl	800ce54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b088:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b08a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b08c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b08e:	429a      	cmp	r2, r3
 800b090:	d302      	bcc.n	800b098 <xQueueGenericSend+0xd4>
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	2b02      	cmp	r3, #2
 800b096:	d129      	bne.n	800b0ec <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b098:	683a      	ldr	r2, [r7, #0]
 800b09a:	68b9      	ldr	r1, [r7, #8]
 800b09c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b09e:	f000 fc9a 	bl	800b9d6 <prvCopyDataToQueue>
 800b0a2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b0a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d010      	beq.n	800b0ce <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b0ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ae:	3324      	adds	r3, #36	; 0x24
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	f001 f9c3 	bl	800c43c <xTaskRemoveFromEventList>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d013      	beq.n	800b0e4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b0bc:	4b3f      	ldr	r3, [pc, #252]	; (800b1bc <xQueueGenericSend+0x1f8>)
 800b0be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0c2:	601a      	str	r2, [r3, #0]
 800b0c4:	f3bf 8f4f 	dsb	sy
 800b0c8:	f3bf 8f6f 	isb	sy
 800b0cc:	e00a      	b.n	800b0e4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b0ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d007      	beq.n	800b0e4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b0d4:	4b39      	ldr	r3, [pc, #228]	; (800b1bc <xQueueGenericSend+0x1f8>)
 800b0d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0da:	601a      	str	r2, [r3, #0]
 800b0dc:	f3bf 8f4f 	dsb	sy
 800b0e0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b0e4:	f001 fee6 	bl	800ceb4 <vPortExitCritical>
				return pdPASS;
 800b0e8:	2301      	movs	r3, #1
 800b0ea:	e063      	b.n	800b1b4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d103      	bne.n	800b0fa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b0f2:	f001 fedf 	bl	800ceb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	e05c      	b.n	800b1b4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b0fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d106      	bne.n	800b10e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b100:	f107 0314 	add.w	r3, r7, #20
 800b104:	4618      	mov	r0, r3
 800b106:	f001 f9fb 	bl	800c500 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b10a:	2301      	movs	r3, #1
 800b10c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b10e:	f001 fed1 	bl	800ceb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b112:	f000 ff8f 	bl	800c034 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b116:	f001 fe9d 	bl	800ce54 <vPortEnterCritical>
 800b11a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b11c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b120:	b25b      	sxtb	r3, r3
 800b122:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b126:	d103      	bne.n	800b130 <xQueueGenericSend+0x16c>
 800b128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b12a:	2200      	movs	r2, #0
 800b12c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b132:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b136:	b25b      	sxtb	r3, r3
 800b138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b13c:	d103      	bne.n	800b146 <xQueueGenericSend+0x182>
 800b13e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b140:	2200      	movs	r2, #0
 800b142:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b146:	f001 feb5 	bl	800ceb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b14a:	1d3a      	adds	r2, r7, #4
 800b14c:	f107 0314 	add.w	r3, r7, #20
 800b150:	4611      	mov	r1, r2
 800b152:	4618      	mov	r0, r3
 800b154:	f001 f9ea 	bl	800c52c <xTaskCheckForTimeOut>
 800b158:	4603      	mov	r3, r0
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d124      	bne.n	800b1a8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b15e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b160:	f000 fd31 	bl	800bbc6 <prvIsQueueFull>
 800b164:	4603      	mov	r3, r0
 800b166:	2b00      	cmp	r3, #0
 800b168:	d018      	beq.n	800b19c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b16a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b16c:	3310      	adds	r3, #16
 800b16e:	687a      	ldr	r2, [r7, #4]
 800b170:	4611      	mov	r1, r2
 800b172:	4618      	mov	r0, r3
 800b174:	f001 f93e 	bl	800c3f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b178:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b17a:	f000 fcbc 	bl	800baf6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b17e:	f000 ff67 	bl	800c050 <xTaskResumeAll>
 800b182:	4603      	mov	r3, r0
 800b184:	2b00      	cmp	r3, #0
 800b186:	f47f af7c 	bne.w	800b082 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b18a:	4b0c      	ldr	r3, [pc, #48]	; (800b1bc <xQueueGenericSend+0x1f8>)
 800b18c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b190:	601a      	str	r2, [r3, #0]
 800b192:	f3bf 8f4f 	dsb	sy
 800b196:	f3bf 8f6f 	isb	sy
 800b19a:	e772      	b.n	800b082 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b19c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b19e:	f000 fcaa 	bl	800baf6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b1a2:	f000 ff55 	bl	800c050 <xTaskResumeAll>
 800b1a6:	e76c      	b.n	800b082 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b1a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b1aa:	f000 fca4 	bl	800baf6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b1ae:	f000 ff4f 	bl	800c050 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b1b2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	3738      	adds	r7, #56	; 0x38
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	bd80      	pop	{r7, pc}
 800b1bc:	e000ed04 	.word	0xe000ed04

0800b1c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b090      	sub	sp, #64	; 0x40
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	60f8      	str	r0, [r7, #12]
 800b1c8:	60b9      	str	r1, [r7, #8]
 800b1ca:	607a      	str	r2, [r7, #4]
 800b1cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b1d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d10a      	bne.n	800b1ee <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b1d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1dc:	f383 8811 	msr	BASEPRI, r3
 800b1e0:	f3bf 8f6f 	isb	sy
 800b1e4:	f3bf 8f4f 	dsb	sy
 800b1e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b1ea:	bf00      	nop
 800b1ec:	e7fe      	b.n	800b1ec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d103      	bne.n	800b1fc <xQueueGenericSendFromISR+0x3c>
 800b1f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d101      	bne.n	800b200 <xQueueGenericSendFromISR+0x40>
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	e000      	b.n	800b202 <xQueueGenericSendFromISR+0x42>
 800b200:	2300      	movs	r3, #0
 800b202:	2b00      	cmp	r3, #0
 800b204:	d10a      	bne.n	800b21c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b20a:	f383 8811 	msr	BASEPRI, r3
 800b20e:	f3bf 8f6f 	isb	sy
 800b212:	f3bf 8f4f 	dsb	sy
 800b216:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b218:	bf00      	nop
 800b21a:	e7fe      	b.n	800b21a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	2b02      	cmp	r3, #2
 800b220:	d103      	bne.n	800b22a <xQueueGenericSendFromISR+0x6a>
 800b222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b226:	2b01      	cmp	r3, #1
 800b228:	d101      	bne.n	800b22e <xQueueGenericSendFromISR+0x6e>
 800b22a:	2301      	movs	r3, #1
 800b22c:	e000      	b.n	800b230 <xQueueGenericSendFromISR+0x70>
 800b22e:	2300      	movs	r3, #0
 800b230:	2b00      	cmp	r3, #0
 800b232:	d10a      	bne.n	800b24a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b234:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b238:	f383 8811 	msr	BASEPRI, r3
 800b23c:	f3bf 8f6f 	isb	sy
 800b240:	f3bf 8f4f 	dsb	sy
 800b244:	623b      	str	r3, [r7, #32]
}
 800b246:	bf00      	nop
 800b248:	e7fe      	b.n	800b248 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b24a:	f001 fee5 	bl	800d018 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b24e:	f3ef 8211 	mrs	r2, BASEPRI
 800b252:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b256:	f383 8811 	msr	BASEPRI, r3
 800b25a:	f3bf 8f6f 	isb	sy
 800b25e:	f3bf 8f4f 	dsb	sy
 800b262:	61fa      	str	r2, [r7, #28]
 800b264:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b266:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b268:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b26a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b26c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b26e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b272:	429a      	cmp	r2, r3
 800b274:	d302      	bcc.n	800b27c <xQueueGenericSendFromISR+0xbc>
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	2b02      	cmp	r3, #2
 800b27a:	d12f      	bne.n	800b2dc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b27c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b27e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b282:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b28a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b28c:	683a      	ldr	r2, [r7, #0]
 800b28e:	68b9      	ldr	r1, [r7, #8]
 800b290:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b292:	f000 fba0 	bl	800b9d6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b296:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b29a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b29e:	d112      	bne.n	800b2c6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b2a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d016      	beq.n	800b2d6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b2a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2aa:	3324      	adds	r3, #36	; 0x24
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	f001 f8c5 	bl	800c43c <xTaskRemoveFromEventList>
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d00e      	beq.n	800b2d6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d00b      	beq.n	800b2d6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2201      	movs	r2, #1
 800b2c2:	601a      	str	r2, [r3, #0]
 800b2c4:	e007      	b.n	800b2d6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b2c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b2ca:	3301      	adds	r3, #1
 800b2cc:	b2db      	uxtb	r3, r3
 800b2ce:	b25a      	sxtb	r2, r3
 800b2d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b2d6:	2301      	movs	r3, #1
 800b2d8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b2da:	e001      	b.n	800b2e0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b2dc:	2300      	movs	r3, #0
 800b2de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b2e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2e2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b2e4:	697b      	ldr	r3, [r7, #20]
 800b2e6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b2ea:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b2ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	3740      	adds	r7, #64	; 0x40
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}

0800b2f6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b2f6:	b580      	push	{r7, lr}
 800b2f8:	b08e      	sub	sp, #56	; 0x38
 800b2fa:	af00      	add	r7, sp, #0
 800b2fc:	6078      	str	r0, [r7, #4]
 800b2fe:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b306:	2b00      	cmp	r3, #0
 800b308:	d10a      	bne.n	800b320 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800b30a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b30e:	f383 8811 	msr	BASEPRI, r3
 800b312:	f3bf 8f6f 	isb	sy
 800b316:	f3bf 8f4f 	dsb	sy
 800b31a:	623b      	str	r3, [r7, #32]
}
 800b31c:	bf00      	nop
 800b31e:	e7fe      	b.n	800b31e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b324:	2b00      	cmp	r3, #0
 800b326:	d00a      	beq.n	800b33e <xQueueGiveFromISR+0x48>
	__asm volatile
 800b328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b32c:	f383 8811 	msr	BASEPRI, r3
 800b330:	f3bf 8f6f 	isb	sy
 800b334:	f3bf 8f4f 	dsb	sy
 800b338:	61fb      	str	r3, [r7, #28]
}
 800b33a:	bf00      	nop
 800b33c:	e7fe      	b.n	800b33c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b33e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d103      	bne.n	800b34e <xQueueGiveFromISR+0x58>
 800b346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b348:	689b      	ldr	r3, [r3, #8]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d101      	bne.n	800b352 <xQueueGiveFromISR+0x5c>
 800b34e:	2301      	movs	r3, #1
 800b350:	e000      	b.n	800b354 <xQueueGiveFromISR+0x5e>
 800b352:	2300      	movs	r3, #0
 800b354:	2b00      	cmp	r3, #0
 800b356:	d10a      	bne.n	800b36e <xQueueGiveFromISR+0x78>
	__asm volatile
 800b358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b35c:	f383 8811 	msr	BASEPRI, r3
 800b360:	f3bf 8f6f 	isb	sy
 800b364:	f3bf 8f4f 	dsb	sy
 800b368:	61bb      	str	r3, [r7, #24]
}
 800b36a:	bf00      	nop
 800b36c:	e7fe      	b.n	800b36c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b36e:	f001 fe53 	bl	800d018 <vPortValidateInterruptPriority>
	__asm volatile
 800b372:	f3ef 8211 	mrs	r2, BASEPRI
 800b376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b37a:	f383 8811 	msr	BASEPRI, r3
 800b37e:	f3bf 8f6f 	isb	sy
 800b382:	f3bf 8f4f 	dsb	sy
 800b386:	617a      	str	r2, [r7, #20]
 800b388:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b38a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b38c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b38e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b392:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b398:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b39a:	429a      	cmp	r2, r3
 800b39c:	d22b      	bcs.n	800b3f6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b3a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b3a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3aa:	1c5a      	adds	r2, r3, #1
 800b3ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ae:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b3b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b3b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3b8:	d112      	bne.n	800b3e0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d016      	beq.n	800b3f0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b3c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3c4:	3324      	adds	r3, #36	; 0x24
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	f001 f838 	bl	800c43c <xTaskRemoveFromEventList>
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d00e      	beq.n	800b3f0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d00b      	beq.n	800b3f0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	2201      	movs	r2, #1
 800b3dc:	601a      	str	r2, [r3, #0]
 800b3de:	e007      	b.n	800b3f0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b3e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b3e4:	3301      	adds	r3, #1
 800b3e6:	b2db      	uxtb	r3, r3
 800b3e8:	b25a      	sxtb	r2, r3
 800b3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	637b      	str	r3, [r7, #52]	; 0x34
 800b3f4:	e001      	b.n	800b3fa <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	637b      	str	r3, [r7, #52]	; 0x34
 800b3fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3fc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	f383 8811 	msr	BASEPRI, r3
}
 800b404:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b408:	4618      	mov	r0, r3
 800b40a:	3738      	adds	r7, #56	; 0x38
 800b40c:	46bd      	mov	sp, r7
 800b40e:	bd80      	pop	{r7, pc}

0800b410 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b08c      	sub	sp, #48	; 0x30
 800b414:	af00      	add	r7, sp, #0
 800b416:	60f8      	str	r0, [r7, #12]
 800b418:	60b9      	str	r1, [r7, #8]
 800b41a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b41c:	2300      	movs	r3, #0
 800b41e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b426:	2b00      	cmp	r3, #0
 800b428:	d10a      	bne.n	800b440 <xQueueReceive+0x30>
	__asm volatile
 800b42a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b42e:	f383 8811 	msr	BASEPRI, r3
 800b432:	f3bf 8f6f 	isb	sy
 800b436:	f3bf 8f4f 	dsb	sy
 800b43a:	623b      	str	r3, [r7, #32]
}
 800b43c:	bf00      	nop
 800b43e:	e7fe      	b.n	800b43e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b440:	68bb      	ldr	r3, [r7, #8]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d103      	bne.n	800b44e <xQueueReceive+0x3e>
 800b446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d101      	bne.n	800b452 <xQueueReceive+0x42>
 800b44e:	2301      	movs	r3, #1
 800b450:	e000      	b.n	800b454 <xQueueReceive+0x44>
 800b452:	2300      	movs	r3, #0
 800b454:	2b00      	cmp	r3, #0
 800b456:	d10a      	bne.n	800b46e <xQueueReceive+0x5e>
	__asm volatile
 800b458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b45c:	f383 8811 	msr	BASEPRI, r3
 800b460:	f3bf 8f6f 	isb	sy
 800b464:	f3bf 8f4f 	dsb	sy
 800b468:	61fb      	str	r3, [r7, #28]
}
 800b46a:	bf00      	nop
 800b46c:	e7fe      	b.n	800b46c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b46e:	f001 f9a1 	bl	800c7b4 <xTaskGetSchedulerState>
 800b472:	4603      	mov	r3, r0
 800b474:	2b00      	cmp	r3, #0
 800b476:	d102      	bne.n	800b47e <xQueueReceive+0x6e>
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d101      	bne.n	800b482 <xQueueReceive+0x72>
 800b47e:	2301      	movs	r3, #1
 800b480:	e000      	b.n	800b484 <xQueueReceive+0x74>
 800b482:	2300      	movs	r3, #0
 800b484:	2b00      	cmp	r3, #0
 800b486:	d10a      	bne.n	800b49e <xQueueReceive+0x8e>
	__asm volatile
 800b488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b48c:	f383 8811 	msr	BASEPRI, r3
 800b490:	f3bf 8f6f 	isb	sy
 800b494:	f3bf 8f4f 	dsb	sy
 800b498:	61bb      	str	r3, [r7, #24]
}
 800b49a:	bf00      	nop
 800b49c:	e7fe      	b.n	800b49c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b49e:	f001 fcd9 	bl	800ce54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b4a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4a6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d01f      	beq.n	800b4ee <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b4ae:	68b9      	ldr	r1, [r7, #8]
 800b4b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b4b2:	f000 fafa 	bl	800baaa <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4b8:	1e5a      	subs	r2, r3, #1
 800b4ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4bc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b4be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4c0:	691b      	ldr	r3, [r3, #16]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d00f      	beq.n	800b4e6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b4c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4c8:	3310      	adds	r3, #16
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	f000 ffb6 	bl	800c43c <xTaskRemoveFromEventList>
 800b4d0:	4603      	mov	r3, r0
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d007      	beq.n	800b4e6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b4d6:	4b3d      	ldr	r3, [pc, #244]	; (800b5cc <xQueueReceive+0x1bc>)
 800b4d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4dc:	601a      	str	r2, [r3, #0]
 800b4de:	f3bf 8f4f 	dsb	sy
 800b4e2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b4e6:	f001 fce5 	bl	800ceb4 <vPortExitCritical>
				return pdPASS;
 800b4ea:	2301      	movs	r3, #1
 800b4ec:	e069      	b.n	800b5c2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d103      	bne.n	800b4fc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b4f4:	f001 fcde 	bl	800ceb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	e062      	b.n	800b5c2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b4fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d106      	bne.n	800b510 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b502:	f107 0310 	add.w	r3, r7, #16
 800b506:	4618      	mov	r0, r3
 800b508:	f000 fffa 	bl	800c500 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b50c:	2301      	movs	r3, #1
 800b50e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b510:	f001 fcd0 	bl	800ceb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b514:	f000 fd8e 	bl	800c034 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b518:	f001 fc9c 	bl	800ce54 <vPortEnterCritical>
 800b51c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b51e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b522:	b25b      	sxtb	r3, r3
 800b524:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b528:	d103      	bne.n	800b532 <xQueueReceive+0x122>
 800b52a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b52c:	2200      	movs	r2, #0
 800b52e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b534:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b538:	b25b      	sxtb	r3, r3
 800b53a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b53e:	d103      	bne.n	800b548 <xQueueReceive+0x138>
 800b540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b542:	2200      	movs	r2, #0
 800b544:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b548:	f001 fcb4 	bl	800ceb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b54c:	1d3a      	adds	r2, r7, #4
 800b54e:	f107 0310 	add.w	r3, r7, #16
 800b552:	4611      	mov	r1, r2
 800b554:	4618      	mov	r0, r3
 800b556:	f000 ffe9 	bl	800c52c <xTaskCheckForTimeOut>
 800b55a:	4603      	mov	r3, r0
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d123      	bne.n	800b5a8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b560:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b562:	f000 fb1a 	bl	800bb9a <prvIsQueueEmpty>
 800b566:	4603      	mov	r3, r0
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d017      	beq.n	800b59c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b56c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b56e:	3324      	adds	r3, #36	; 0x24
 800b570:	687a      	ldr	r2, [r7, #4]
 800b572:	4611      	mov	r1, r2
 800b574:	4618      	mov	r0, r3
 800b576:	f000 ff3d 	bl	800c3f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b57a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b57c:	f000 fabb 	bl	800baf6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b580:	f000 fd66 	bl	800c050 <xTaskResumeAll>
 800b584:	4603      	mov	r3, r0
 800b586:	2b00      	cmp	r3, #0
 800b588:	d189      	bne.n	800b49e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b58a:	4b10      	ldr	r3, [pc, #64]	; (800b5cc <xQueueReceive+0x1bc>)
 800b58c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b590:	601a      	str	r2, [r3, #0]
 800b592:	f3bf 8f4f 	dsb	sy
 800b596:	f3bf 8f6f 	isb	sy
 800b59a:	e780      	b.n	800b49e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b59c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b59e:	f000 faaa 	bl	800baf6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b5a2:	f000 fd55 	bl	800c050 <xTaskResumeAll>
 800b5a6:	e77a      	b.n	800b49e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b5a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b5aa:	f000 faa4 	bl	800baf6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b5ae:	f000 fd4f 	bl	800c050 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b5b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b5b4:	f000 faf1 	bl	800bb9a <prvIsQueueEmpty>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	f43f af6f 	beq.w	800b49e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b5c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	3730      	adds	r7, #48	; 0x30
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bd80      	pop	{r7, pc}
 800b5ca:	bf00      	nop
 800b5cc:	e000ed04 	.word	0xe000ed04

0800b5d0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b08e      	sub	sp, #56	; 0x38
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
 800b5d8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b5da:	2300      	movs	r3, #0
 800b5dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b5e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d10a      	bne.n	800b602 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800b5ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5f0:	f383 8811 	msr	BASEPRI, r3
 800b5f4:	f3bf 8f6f 	isb	sy
 800b5f8:	f3bf 8f4f 	dsb	sy
 800b5fc:	623b      	str	r3, [r7, #32]
}
 800b5fe:	bf00      	nop
 800b600:	e7fe      	b.n	800b600 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b606:	2b00      	cmp	r3, #0
 800b608:	d00a      	beq.n	800b620 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800b60a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b60e:	f383 8811 	msr	BASEPRI, r3
 800b612:	f3bf 8f6f 	isb	sy
 800b616:	f3bf 8f4f 	dsb	sy
 800b61a:	61fb      	str	r3, [r7, #28]
}
 800b61c:	bf00      	nop
 800b61e:	e7fe      	b.n	800b61e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b620:	f001 f8c8 	bl	800c7b4 <xTaskGetSchedulerState>
 800b624:	4603      	mov	r3, r0
 800b626:	2b00      	cmp	r3, #0
 800b628:	d102      	bne.n	800b630 <xQueueSemaphoreTake+0x60>
 800b62a:	683b      	ldr	r3, [r7, #0]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d101      	bne.n	800b634 <xQueueSemaphoreTake+0x64>
 800b630:	2301      	movs	r3, #1
 800b632:	e000      	b.n	800b636 <xQueueSemaphoreTake+0x66>
 800b634:	2300      	movs	r3, #0
 800b636:	2b00      	cmp	r3, #0
 800b638:	d10a      	bne.n	800b650 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800b63a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b63e:	f383 8811 	msr	BASEPRI, r3
 800b642:	f3bf 8f6f 	isb	sy
 800b646:	f3bf 8f4f 	dsb	sy
 800b64a:	61bb      	str	r3, [r7, #24]
}
 800b64c:	bf00      	nop
 800b64e:	e7fe      	b.n	800b64e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b650:	f001 fc00 	bl	800ce54 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b658:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b65a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d024      	beq.n	800b6aa <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b662:	1e5a      	subs	r2, r3, #1
 800b664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b666:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d104      	bne.n	800b67a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b670:	f001 fa48 	bl	800cb04 <pvTaskIncrementMutexHeldCount>
 800b674:	4602      	mov	r2, r0
 800b676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b678:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b67a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b67c:	691b      	ldr	r3, [r3, #16]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d00f      	beq.n	800b6a2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b684:	3310      	adds	r3, #16
 800b686:	4618      	mov	r0, r3
 800b688:	f000 fed8 	bl	800c43c <xTaskRemoveFromEventList>
 800b68c:	4603      	mov	r3, r0
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d007      	beq.n	800b6a2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b692:	4b54      	ldr	r3, [pc, #336]	; (800b7e4 <xQueueSemaphoreTake+0x214>)
 800b694:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b698:	601a      	str	r2, [r3, #0]
 800b69a:	f3bf 8f4f 	dsb	sy
 800b69e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b6a2:	f001 fc07 	bl	800ceb4 <vPortExitCritical>
				return pdPASS;
 800b6a6:	2301      	movs	r3, #1
 800b6a8:	e097      	b.n	800b7da <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b6aa:	683b      	ldr	r3, [r7, #0]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d111      	bne.n	800b6d4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b6b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d00a      	beq.n	800b6cc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800b6b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ba:	f383 8811 	msr	BASEPRI, r3
 800b6be:	f3bf 8f6f 	isb	sy
 800b6c2:	f3bf 8f4f 	dsb	sy
 800b6c6:	617b      	str	r3, [r7, #20]
}
 800b6c8:	bf00      	nop
 800b6ca:	e7fe      	b.n	800b6ca <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b6cc:	f001 fbf2 	bl	800ceb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	e082      	b.n	800b7da <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b6d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d106      	bne.n	800b6e8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b6da:	f107 030c 	add.w	r3, r7, #12
 800b6de:	4618      	mov	r0, r3
 800b6e0:	f000 ff0e 	bl	800c500 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b6e4:	2301      	movs	r3, #1
 800b6e6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b6e8:	f001 fbe4 	bl	800ceb4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b6ec:	f000 fca2 	bl	800c034 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b6f0:	f001 fbb0 	bl	800ce54 <vPortEnterCritical>
 800b6f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b6fa:	b25b      	sxtb	r3, r3
 800b6fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b700:	d103      	bne.n	800b70a <xQueueSemaphoreTake+0x13a>
 800b702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b704:	2200      	movs	r2, #0
 800b706:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b70a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b70c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b710:	b25b      	sxtb	r3, r3
 800b712:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b716:	d103      	bne.n	800b720 <xQueueSemaphoreTake+0x150>
 800b718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b71a:	2200      	movs	r2, #0
 800b71c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b720:	f001 fbc8 	bl	800ceb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b724:	463a      	mov	r2, r7
 800b726:	f107 030c 	add.w	r3, r7, #12
 800b72a:	4611      	mov	r1, r2
 800b72c:	4618      	mov	r0, r3
 800b72e:	f000 fefd 	bl	800c52c <xTaskCheckForTimeOut>
 800b732:	4603      	mov	r3, r0
 800b734:	2b00      	cmp	r3, #0
 800b736:	d132      	bne.n	800b79e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b738:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b73a:	f000 fa2e 	bl	800bb9a <prvIsQueueEmpty>
 800b73e:	4603      	mov	r3, r0
 800b740:	2b00      	cmp	r3, #0
 800b742:	d026      	beq.n	800b792 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d109      	bne.n	800b760 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800b74c:	f001 fb82 	bl	800ce54 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b752:	689b      	ldr	r3, [r3, #8]
 800b754:	4618      	mov	r0, r3
 800b756:	f001 f84b 	bl	800c7f0 <xTaskPriorityInherit>
 800b75a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800b75c:	f001 fbaa 	bl	800ceb4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b762:	3324      	adds	r3, #36	; 0x24
 800b764:	683a      	ldr	r2, [r7, #0]
 800b766:	4611      	mov	r1, r2
 800b768:	4618      	mov	r0, r3
 800b76a:	f000 fe43 	bl	800c3f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b76e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b770:	f000 f9c1 	bl	800baf6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b774:	f000 fc6c 	bl	800c050 <xTaskResumeAll>
 800b778:	4603      	mov	r3, r0
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	f47f af68 	bne.w	800b650 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800b780:	4b18      	ldr	r3, [pc, #96]	; (800b7e4 <xQueueSemaphoreTake+0x214>)
 800b782:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b786:	601a      	str	r2, [r3, #0]
 800b788:	f3bf 8f4f 	dsb	sy
 800b78c:	f3bf 8f6f 	isb	sy
 800b790:	e75e      	b.n	800b650 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b792:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b794:	f000 f9af 	bl	800baf6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b798:	f000 fc5a 	bl	800c050 <xTaskResumeAll>
 800b79c:	e758      	b.n	800b650 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b79e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b7a0:	f000 f9a9 	bl	800baf6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b7a4:	f000 fc54 	bl	800c050 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b7a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b7aa:	f000 f9f6 	bl	800bb9a <prvIsQueueEmpty>
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	f43f af4d 	beq.w	800b650 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d00d      	beq.n	800b7d8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800b7bc:	f001 fb4a 	bl	800ce54 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b7c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b7c2:	f000 f8f0 	bl	800b9a6 <prvGetDisinheritPriorityAfterTimeout>
 800b7c6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b7c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ca:	689b      	ldr	r3, [r3, #8]
 800b7cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	f001 f90a 	bl	800c9e8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b7d4:	f001 fb6e 	bl	800ceb4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b7d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b7da:	4618      	mov	r0, r3
 800b7dc:	3738      	adds	r7, #56	; 0x38
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}
 800b7e2:	bf00      	nop
 800b7e4:	e000ed04 	.word	0xe000ed04

0800b7e8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b08e      	sub	sp, #56	; 0x38
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	60f8      	str	r0, [r7, #12]
 800b7f0:	60b9      	str	r1, [r7, #8]
 800b7f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b7f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d10a      	bne.n	800b814 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800b7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b802:	f383 8811 	msr	BASEPRI, r3
 800b806:	f3bf 8f6f 	isb	sy
 800b80a:	f3bf 8f4f 	dsb	sy
 800b80e:	623b      	str	r3, [r7, #32]
}
 800b810:	bf00      	nop
 800b812:	e7fe      	b.n	800b812 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b814:	68bb      	ldr	r3, [r7, #8]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d103      	bne.n	800b822 <xQueueReceiveFromISR+0x3a>
 800b81a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b81c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d101      	bne.n	800b826 <xQueueReceiveFromISR+0x3e>
 800b822:	2301      	movs	r3, #1
 800b824:	e000      	b.n	800b828 <xQueueReceiveFromISR+0x40>
 800b826:	2300      	movs	r3, #0
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d10a      	bne.n	800b842 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800b82c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b830:	f383 8811 	msr	BASEPRI, r3
 800b834:	f3bf 8f6f 	isb	sy
 800b838:	f3bf 8f4f 	dsb	sy
 800b83c:	61fb      	str	r3, [r7, #28]
}
 800b83e:	bf00      	nop
 800b840:	e7fe      	b.n	800b840 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b842:	f001 fbe9 	bl	800d018 <vPortValidateInterruptPriority>
	__asm volatile
 800b846:	f3ef 8211 	mrs	r2, BASEPRI
 800b84a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b84e:	f383 8811 	msr	BASEPRI, r3
 800b852:	f3bf 8f6f 	isb	sy
 800b856:	f3bf 8f4f 	dsb	sy
 800b85a:	61ba      	str	r2, [r7, #24]
 800b85c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b85e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b860:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b866:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d02f      	beq.n	800b8ce <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b86e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b870:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b874:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b878:	68b9      	ldr	r1, [r7, #8]
 800b87a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b87c:	f000 f915 	bl	800baaa <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b882:	1e5a      	subs	r2, r3, #1
 800b884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b886:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b888:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b88c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b890:	d112      	bne.n	800b8b8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b894:	691b      	ldr	r3, [r3, #16]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d016      	beq.n	800b8c8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b89a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b89c:	3310      	adds	r3, #16
 800b89e:	4618      	mov	r0, r3
 800b8a0:	f000 fdcc 	bl	800c43c <xTaskRemoveFromEventList>
 800b8a4:	4603      	mov	r3, r0
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d00e      	beq.n	800b8c8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d00b      	beq.n	800b8c8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2201      	movs	r2, #1
 800b8b4:	601a      	str	r2, [r3, #0]
 800b8b6:	e007      	b.n	800b8c8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b8b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8bc:	3301      	adds	r3, #1
 800b8be:	b2db      	uxtb	r3, r3
 800b8c0:	b25a      	sxtb	r2, r3
 800b8c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b8c8:	2301      	movs	r3, #1
 800b8ca:	637b      	str	r3, [r7, #52]	; 0x34
 800b8cc:	e001      	b.n	800b8d2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	637b      	str	r3, [r7, #52]	; 0x34
 800b8d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8d4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b8d6:	693b      	ldr	r3, [r7, #16]
 800b8d8:	f383 8811 	msr	BASEPRI, r3
}
 800b8dc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b8de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	3738      	adds	r7, #56	; 0x38
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	bd80      	pop	{r7, pc}

0800b8e8 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b084      	sub	sp, #16
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d10a      	bne.n	800b90c <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800b8f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8fa:	f383 8811 	msr	BASEPRI, r3
 800b8fe:	f3bf 8f6f 	isb	sy
 800b902:	f3bf 8f4f 	dsb	sy
 800b906:	60bb      	str	r3, [r7, #8]
}
 800b908:	bf00      	nop
 800b90a:	e7fe      	b.n	800b90a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800b90c:	f001 faa2 	bl	800ce54 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b914:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800b916:	f001 facd 	bl	800ceb4 <vPortExitCritical>

	return uxReturn;
 800b91a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800b91c:	4618      	mov	r0, r3
 800b91e:	3710      	adds	r7, #16
 800b920:	46bd      	mov	sp, r7
 800b922:	bd80      	pop	{r7, pc}

0800b924 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800b924:	b480      	push	{r7}
 800b926:	b087      	sub	sp, #28
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800b930:	697b      	ldr	r3, [r7, #20]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d10a      	bne.n	800b94c <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800b936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b93a:	f383 8811 	msr	BASEPRI, r3
 800b93e:	f3bf 8f6f 	isb	sy
 800b942:	f3bf 8f4f 	dsb	sy
 800b946:	60fb      	str	r3, [r7, #12]
}
 800b948:	bf00      	nop
 800b94a:	e7fe      	b.n	800b94a <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800b94c:	697b      	ldr	r3, [r7, #20]
 800b94e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b950:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800b952:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800b954:	4618      	mov	r0, r3
 800b956:	371c      	adds	r7, #28
 800b958:	46bd      	mov	sp, r7
 800b95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95e:	4770      	bx	lr

0800b960 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b084      	sub	sp, #16
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d10a      	bne.n	800b988 <vQueueDelete+0x28>
	__asm volatile
 800b972:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b976:	f383 8811 	msr	BASEPRI, r3
 800b97a:	f3bf 8f6f 	isb	sy
 800b97e:	f3bf 8f4f 	dsb	sy
 800b982:	60bb      	str	r3, [r7, #8]
}
 800b984:	bf00      	nop
 800b986:	e7fe      	b.n	800b986 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800b988:	68f8      	ldr	r0, [r7, #12]
 800b98a:	f000 f935 	bl	800bbf8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b994:	2b00      	cmp	r3, #0
 800b996:	d102      	bne.n	800b99e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800b998:	68f8      	ldr	r0, [r7, #12]
 800b99a:	f001 fc49 	bl	800d230 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800b99e:	bf00      	nop
 800b9a0:	3710      	adds	r7, #16
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd80      	pop	{r7, pc}

0800b9a6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b9a6:	b480      	push	{r7}
 800b9a8:	b085      	sub	sp, #20
 800b9aa:	af00      	add	r7, sp, #0
 800b9ac:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d006      	beq.n	800b9c4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	f1c3 0307 	rsb	r3, r3, #7
 800b9c0:	60fb      	str	r3, [r7, #12]
 800b9c2:	e001      	b.n	800b9c8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
	}
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	3714      	adds	r7, #20
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d4:	4770      	bx	lr

0800b9d6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b9d6:	b580      	push	{r7, lr}
 800b9d8:	b086      	sub	sp, #24
 800b9da:	af00      	add	r7, sp, #0
 800b9dc:	60f8      	str	r0, [r7, #12]
 800b9de:	60b9      	str	r1, [r7, #8]
 800b9e0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9ea:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d10d      	bne.n	800ba10 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d14d      	bne.n	800ba98 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	689b      	ldr	r3, [r3, #8]
 800ba00:	4618      	mov	r0, r3
 800ba02:	f000 ff6b 	bl	800c8dc <xTaskPriorityDisinherit>
 800ba06:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	609a      	str	r2, [r3, #8]
 800ba0e:	e043      	b.n	800ba98 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d119      	bne.n	800ba4a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	6858      	ldr	r0, [r3, #4]
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba1e:	461a      	mov	r2, r3
 800ba20:	68b9      	ldr	r1, [r7, #8]
 800ba22:	f010 fbc9 	bl	801c1b8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	685a      	ldr	r2, [r3, #4]
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba2e:	441a      	add	r2, r3
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	685a      	ldr	r2, [r3, #4]
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	689b      	ldr	r3, [r3, #8]
 800ba3c:	429a      	cmp	r2, r3
 800ba3e:	d32b      	bcc.n	800ba98 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	681a      	ldr	r2, [r3, #0]
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	605a      	str	r2, [r3, #4]
 800ba48:	e026      	b.n	800ba98 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	68d8      	ldr	r0, [r3, #12]
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba52:	461a      	mov	r2, r3
 800ba54:	68b9      	ldr	r1, [r7, #8]
 800ba56:	f010 fbaf 	bl	801c1b8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	68da      	ldr	r2, [r3, #12]
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba62:	425b      	negs	r3, r3
 800ba64:	441a      	add	r2, r3
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	68da      	ldr	r2, [r3, #12]
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	429a      	cmp	r2, r3
 800ba74:	d207      	bcs.n	800ba86 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	689a      	ldr	r2, [r3, #8]
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba7e:	425b      	negs	r3, r3
 800ba80:	441a      	add	r2, r3
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	2b02      	cmp	r3, #2
 800ba8a:	d105      	bne.n	800ba98 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ba8c:	693b      	ldr	r3, [r7, #16]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d002      	beq.n	800ba98 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ba92:	693b      	ldr	r3, [r7, #16]
 800ba94:	3b01      	subs	r3, #1
 800ba96:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ba98:	693b      	ldr	r3, [r7, #16]
 800ba9a:	1c5a      	adds	r2, r3, #1
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800baa0:	697b      	ldr	r3, [r7, #20]
}
 800baa2:	4618      	mov	r0, r3
 800baa4:	3718      	adds	r7, #24
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bd80      	pop	{r7, pc}

0800baaa <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800baaa:	b580      	push	{r7, lr}
 800baac:	b082      	sub	sp, #8
 800baae:	af00      	add	r7, sp, #0
 800bab0:	6078      	str	r0, [r7, #4]
 800bab2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d018      	beq.n	800baee <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	68da      	ldr	r2, [r3, #12]
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bac4:	441a      	add	r2, r3
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	68da      	ldr	r2, [r3, #12]
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	689b      	ldr	r3, [r3, #8]
 800bad2:	429a      	cmp	r2, r3
 800bad4:	d303      	bcc.n	800bade <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681a      	ldr	r2, [r3, #0]
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	68d9      	ldr	r1, [r3, #12]
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bae6:	461a      	mov	r2, r3
 800bae8:	6838      	ldr	r0, [r7, #0]
 800baea:	f010 fb65 	bl	801c1b8 <memcpy>
	}
}
 800baee:	bf00      	nop
 800baf0:	3708      	adds	r7, #8
 800baf2:	46bd      	mov	sp, r7
 800baf4:	bd80      	pop	{r7, pc}

0800baf6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800baf6:	b580      	push	{r7, lr}
 800baf8:	b084      	sub	sp, #16
 800bafa:	af00      	add	r7, sp, #0
 800bafc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bafe:	f001 f9a9 	bl	800ce54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bb08:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bb0a:	e011      	b.n	800bb30 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d012      	beq.n	800bb3a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	3324      	adds	r3, #36	; 0x24
 800bb18:	4618      	mov	r0, r3
 800bb1a:	f000 fc8f 	bl	800c43c <xTaskRemoveFromEventList>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d001      	beq.n	800bb28 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bb24:	f000 fd64 	bl	800c5f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bb28:	7bfb      	ldrb	r3, [r7, #15]
 800bb2a:	3b01      	subs	r3, #1
 800bb2c:	b2db      	uxtb	r3, r3
 800bb2e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bb30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	dce9      	bgt.n	800bb0c <prvUnlockQueue+0x16>
 800bb38:	e000      	b.n	800bb3c <prvUnlockQueue+0x46>
					break;
 800bb3a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	22ff      	movs	r2, #255	; 0xff
 800bb40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800bb44:	f001 f9b6 	bl	800ceb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bb48:	f001 f984 	bl	800ce54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bb52:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bb54:	e011      	b.n	800bb7a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	691b      	ldr	r3, [r3, #16]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d012      	beq.n	800bb84 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	3310      	adds	r3, #16
 800bb62:	4618      	mov	r0, r3
 800bb64:	f000 fc6a 	bl	800c43c <xTaskRemoveFromEventList>
 800bb68:	4603      	mov	r3, r0
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d001      	beq.n	800bb72 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bb6e:	f000 fd3f 	bl	800c5f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bb72:	7bbb      	ldrb	r3, [r7, #14]
 800bb74:	3b01      	subs	r3, #1
 800bb76:	b2db      	uxtb	r3, r3
 800bb78:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bb7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	dce9      	bgt.n	800bb56 <prvUnlockQueue+0x60>
 800bb82:	e000      	b.n	800bb86 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bb84:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	22ff      	movs	r2, #255	; 0xff
 800bb8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bb8e:	f001 f991 	bl	800ceb4 <vPortExitCritical>
}
 800bb92:	bf00      	nop
 800bb94:	3710      	adds	r7, #16
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bd80      	pop	{r7, pc}

0800bb9a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bb9a:	b580      	push	{r7, lr}
 800bb9c:	b084      	sub	sp, #16
 800bb9e:	af00      	add	r7, sp, #0
 800bba0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bba2:	f001 f957 	bl	800ce54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d102      	bne.n	800bbb4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bbae:	2301      	movs	r3, #1
 800bbb0:	60fb      	str	r3, [r7, #12]
 800bbb2:	e001      	b.n	800bbb8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bbb8:	f001 f97c 	bl	800ceb4 <vPortExitCritical>

	return xReturn;
 800bbbc:	68fb      	ldr	r3, [r7, #12]
}
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	3710      	adds	r7, #16
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bd80      	pop	{r7, pc}

0800bbc6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bbc6:	b580      	push	{r7, lr}
 800bbc8:	b084      	sub	sp, #16
 800bbca:	af00      	add	r7, sp, #0
 800bbcc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bbce:	f001 f941 	bl	800ce54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbda:	429a      	cmp	r2, r3
 800bbdc:	d102      	bne.n	800bbe4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bbde:	2301      	movs	r3, #1
 800bbe0:	60fb      	str	r3, [r7, #12]
 800bbe2:	e001      	b.n	800bbe8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bbe8:	f001 f964 	bl	800ceb4 <vPortExitCritical>

	return xReturn;
 800bbec:	68fb      	ldr	r3, [r7, #12]
}
 800bbee:	4618      	mov	r0, r3
 800bbf0:	3710      	adds	r7, #16
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd80      	pop	{r7, pc}
	...

0800bbf8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800bbf8:	b480      	push	{r7}
 800bbfa:	b085      	sub	sp, #20
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bc00:	2300      	movs	r3, #0
 800bc02:	60fb      	str	r3, [r7, #12]
 800bc04:	e016      	b.n	800bc34 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800bc06:	4a10      	ldr	r2, [pc, #64]	; (800bc48 <vQueueUnregisterQueue+0x50>)
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	00db      	lsls	r3, r3, #3
 800bc0c:	4413      	add	r3, r2
 800bc0e:	685b      	ldr	r3, [r3, #4]
 800bc10:	687a      	ldr	r2, [r7, #4]
 800bc12:	429a      	cmp	r2, r3
 800bc14:	d10b      	bne.n	800bc2e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800bc16:	4a0c      	ldr	r2, [pc, #48]	; (800bc48 <vQueueUnregisterQueue+0x50>)
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	2100      	movs	r1, #0
 800bc1c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800bc20:	4a09      	ldr	r2, [pc, #36]	; (800bc48 <vQueueUnregisterQueue+0x50>)
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	00db      	lsls	r3, r3, #3
 800bc26:	4413      	add	r3, r2
 800bc28:	2200      	movs	r2, #0
 800bc2a:	605a      	str	r2, [r3, #4]
				break;
 800bc2c:	e006      	b.n	800bc3c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	3301      	adds	r3, #1
 800bc32:	60fb      	str	r3, [r7, #12]
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	2b07      	cmp	r3, #7
 800bc38:	d9e5      	bls.n	800bc06 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800bc3a:	bf00      	nop
 800bc3c:	bf00      	nop
 800bc3e:	3714      	adds	r7, #20
 800bc40:	46bd      	mov	sp, r7
 800bc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc46:	4770      	bx	lr
 800bc48:	20007ec4 	.word	0x20007ec4

0800bc4c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b08e      	sub	sp, #56	; 0x38
 800bc50:	af04      	add	r7, sp, #16
 800bc52:	60f8      	str	r0, [r7, #12]
 800bc54:	60b9      	str	r1, [r7, #8]
 800bc56:	607a      	str	r2, [r7, #4]
 800bc58:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bc5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d10a      	bne.n	800bc76 <xTaskCreateStatic+0x2a>
	__asm volatile
 800bc60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc64:	f383 8811 	msr	BASEPRI, r3
 800bc68:	f3bf 8f6f 	isb	sy
 800bc6c:	f3bf 8f4f 	dsb	sy
 800bc70:	623b      	str	r3, [r7, #32]
}
 800bc72:	bf00      	nop
 800bc74:	e7fe      	b.n	800bc74 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800bc76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d10a      	bne.n	800bc92 <xTaskCreateStatic+0x46>
	__asm volatile
 800bc7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc80:	f383 8811 	msr	BASEPRI, r3
 800bc84:	f3bf 8f6f 	isb	sy
 800bc88:	f3bf 8f4f 	dsb	sy
 800bc8c:	61fb      	str	r3, [r7, #28]
}
 800bc8e:	bf00      	nop
 800bc90:	e7fe      	b.n	800bc90 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bc92:	2354      	movs	r3, #84	; 0x54
 800bc94:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bc96:	693b      	ldr	r3, [r7, #16]
 800bc98:	2b54      	cmp	r3, #84	; 0x54
 800bc9a:	d00a      	beq.n	800bcb2 <xTaskCreateStatic+0x66>
	__asm volatile
 800bc9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bca0:	f383 8811 	msr	BASEPRI, r3
 800bca4:	f3bf 8f6f 	isb	sy
 800bca8:	f3bf 8f4f 	dsb	sy
 800bcac:	61bb      	str	r3, [r7, #24]
}
 800bcae:	bf00      	nop
 800bcb0:	e7fe      	b.n	800bcb0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bcb2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bcb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d01e      	beq.n	800bcf8 <xTaskCreateStatic+0xac>
 800bcba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d01b      	beq.n	800bcf8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bcc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcc2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bcc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bcc8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bcca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bccc:	2202      	movs	r2, #2
 800bcce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	9303      	str	r3, [sp, #12]
 800bcd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcd8:	9302      	str	r3, [sp, #8]
 800bcda:	f107 0314 	add.w	r3, r7, #20
 800bcde:	9301      	str	r3, [sp, #4]
 800bce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bce2:	9300      	str	r3, [sp, #0]
 800bce4:	683b      	ldr	r3, [r7, #0]
 800bce6:	687a      	ldr	r2, [r7, #4]
 800bce8:	68b9      	ldr	r1, [r7, #8]
 800bcea:	68f8      	ldr	r0, [r7, #12]
 800bcec:	f000 f850 	bl	800bd90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bcf0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bcf2:	f000 f8d5 	bl	800bea0 <prvAddNewTaskToReadyList>
 800bcf6:	e001      	b.n	800bcfc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bcfc:	697b      	ldr	r3, [r7, #20]
	}
 800bcfe:	4618      	mov	r0, r3
 800bd00:	3728      	adds	r7, #40	; 0x28
 800bd02:	46bd      	mov	sp, r7
 800bd04:	bd80      	pop	{r7, pc}

0800bd06 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bd06:	b580      	push	{r7, lr}
 800bd08:	b08c      	sub	sp, #48	; 0x30
 800bd0a:	af04      	add	r7, sp, #16
 800bd0c:	60f8      	str	r0, [r7, #12]
 800bd0e:	60b9      	str	r1, [r7, #8]
 800bd10:	603b      	str	r3, [r7, #0]
 800bd12:	4613      	mov	r3, r2
 800bd14:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bd16:	88fb      	ldrh	r3, [r7, #6]
 800bd18:	009b      	lsls	r3, r3, #2
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	f001 f9bc 	bl	800d098 <pvPortMalloc>
 800bd20:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bd22:	697b      	ldr	r3, [r7, #20]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d00e      	beq.n	800bd46 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bd28:	2054      	movs	r0, #84	; 0x54
 800bd2a:	f001 f9b5 	bl	800d098 <pvPortMalloc>
 800bd2e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bd30:	69fb      	ldr	r3, [r7, #28]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d003      	beq.n	800bd3e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bd36:	69fb      	ldr	r3, [r7, #28]
 800bd38:	697a      	ldr	r2, [r7, #20]
 800bd3a:	631a      	str	r2, [r3, #48]	; 0x30
 800bd3c:	e005      	b.n	800bd4a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bd3e:	6978      	ldr	r0, [r7, #20]
 800bd40:	f001 fa76 	bl	800d230 <vPortFree>
 800bd44:	e001      	b.n	800bd4a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bd46:	2300      	movs	r3, #0
 800bd48:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bd4a:	69fb      	ldr	r3, [r7, #28]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d017      	beq.n	800bd80 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bd50:	69fb      	ldr	r3, [r7, #28]
 800bd52:	2200      	movs	r2, #0
 800bd54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bd58:	88fa      	ldrh	r2, [r7, #6]
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	9303      	str	r3, [sp, #12]
 800bd5e:	69fb      	ldr	r3, [r7, #28]
 800bd60:	9302      	str	r3, [sp, #8]
 800bd62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd64:	9301      	str	r3, [sp, #4]
 800bd66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd68:	9300      	str	r3, [sp, #0]
 800bd6a:	683b      	ldr	r3, [r7, #0]
 800bd6c:	68b9      	ldr	r1, [r7, #8]
 800bd6e:	68f8      	ldr	r0, [r7, #12]
 800bd70:	f000 f80e 	bl	800bd90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bd74:	69f8      	ldr	r0, [r7, #28]
 800bd76:	f000 f893 	bl	800bea0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bd7a:	2301      	movs	r3, #1
 800bd7c:	61bb      	str	r3, [r7, #24]
 800bd7e:	e002      	b.n	800bd86 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bd80:	f04f 33ff 	mov.w	r3, #4294967295
 800bd84:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bd86:	69bb      	ldr	r3, [r7, #24]
	}
 800bd88:	4618      	mov	r0, r3
 800bd8a:	3720      	adds	r7, #32
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	bd80      	pop	{r7, pc}

0800bd90 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b088      	sub	sp, #32
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	60f8      	str	r0, [r7, #12]
 800bd98:	60b9      	str	r1, [r7, #8]
 800bd9a:	607a      	str	r2, [r7, #4]
 800bd9c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bd9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bda0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800bda8:	3b01      	subs	r3, #1
 800bdaa:	009b      	lsls	r3, r3, #2
 800bdac:	4413      	add	r3, r2
 800bdae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bdb0:	69bb      	ldr	r3, [r7, #24]
 800bdb2:	f023 0307 	bic.w	r3, r3, #7
 800bdb6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bdb8:	69bb      	ldr	r3, [r7, #24]
 800bdba:	f003 0307 	and.w	r3, r3, #7
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d00a      	beq.n	800bdd8 <prvInitialiseNewTask+0x48>
	__asm volatile
 800bdc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdc6:	f383 8811 	msr	BASEPRI, r3
 800bdca:	f3bf 8f6f 	isb	sy
 800bdce:	f3bf 8f4f 	dsb	sy
 800bdd2:	617b      	str	r3, [r7, #20]
}
 800bdd4:	bf00      	nop
 800bdd6:	e7fe      	b.n	800bdd6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bdd8:	68bb      	ldr	r3, [r7, #8]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d01f      	beq.n	800be1e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bdde:	2300      	movs	r3, #0
 800bde0:	61fb      	str	r3, [r7, #28]
 800bde2:	e012      	b.n	800be0a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bde4:	68ba      	ldr	r2, [r7, #8]
 800bde6:	69fb      	ldr	r3, [r7, #28]
 800bde8:	4413      	add	r3, r2
 800bdea:	7819      	ldrb	r1, [r3, #0]
 800bdec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bdee:	69fb      	ldr	r3, [r7, #28]
 800bdf0:	4413      	add	r3, r2
 800bdf2:	3334      	adds	r3, #52	; 0x34
 800bdf4:	460a      	mov	r2, r1
 800bdf6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bdf8:	68ba      	ldr	r2, [r7, #8]
 800bdfa:	69fb      	ldr	r3, [r7, #28]
 800bdfc:	4413      	add	r3, r2
 800bdfe:	781b      	ldrb	r3, [r3, #0]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d006      	beq.n	800be12 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800be04:	69fb      	ldr	r3, [r7, #28]
 800be06:	3301      	adds	r3, #1
 800be08:	61fb      	str	r3, [r7, #28]
 800be0a:	69fb      	ldr	r3, [r7, #28]
 800be0c:	2b0f      	cmp	r3, #15
 800be0e:	d9e9      	bls.n	800bde4 <prvInitialiseNewTask+0x54>
 800be10:	e000      	b.n	800be14 <prvInitialiseNewTask+0x84>
			{
				break;
 800be12:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800be14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be16:	2200      	movs	r2, #0
 800be18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800be1c:	e003      	b.n	800be26 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800be1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be20:	2200      	movs	r2, #0
 800be22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800be26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be28:	2b06      	cmp	r3, #6
 800be2a:	d901      	bls.n	800be30 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800be2c:	2306      	movs	r3, #6
 800be2e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800be30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be34:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800be36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be3a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800be3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be3e:	2200      	movs	r2, #0
 800be40:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800be42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be44:	3304      	adds	r3, #4
 800be46:	4618      	mov	r0, r3
 800be48:	f7fe fea1 	bl	800ab8e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800be4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be4e:	3318      	adds	r3, #24
 800be50:	4618      	mov	r0, r3
 800be52:	f7fe fe9c 	bl	800ab8e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800be56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be5a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be5e:	f1c3 0207 	rsb	r2, r3, #7
 800be62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be64:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800be66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be6a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800be6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be6e:	2200      	movs	r2, #0
 800be70:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800be72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be74:	2200      	movs	r2, #0
 800be76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800be7a:	683a      	ldr	r2, [r7, #0]
 800be7c:	68f9      	ldr	r1, [r7, #12]
 800be7e:	69b8      	ldr	r0, [r7, #24]
 800be80:	f000 feba 	bl	800cbf8 <pxPortInitialiseStack>
 800be84:	4602      	mov	r2, r0
 800be86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be88:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800be8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d002      	beq.n	800be96 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800be90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800be96:	bf00      	nop
 800be98:	3720      	adds	r7, #32
 800be9a:	46bd      	mov	sp, r7
 800be9c:	bd80      	pop	{r7, pc}
	...

0800bea0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b082      	sub	sp, #8
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bea8:	f000 ffd4 	bl	800ce54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800beac:	4b2a      	ldr	r3, [pc, #168]	; (800bf58 <prvAddNewTaskToReadyList+0xb8>)
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	3301      	adds	r3, #1
 800beb2:	4a29      	ldr	r2, [pc, #164]	; (800bf58 <prvAddNewTaskToReadyList+0xb8>)
 800beb4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800beb6:	4b29      	ldr	r3, [pc, #164]	; (800bf5c <prvAddNewTaskToReadyList+0xbc>)
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d109      	bne.n	800bed2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bebe:	4a27      	ldr	r2, [pc, #156]	; (800bf5c <prvAddNewTaskToReadyList+0xbc>)
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bec4:	4b24      	ldr	r3, [pc, #144]	; (800bf58 <prvAddNewTaskToReadyList+0xb8>)
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	2b01      	cmp	r3, #1
 800beca:	d110      	bne.n	800beee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800becc:	f000 fbb4 	bl	800c638 <prvInitialiseTaskLists>
 800bed0:	e00d      	b.n	800beee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bed2:	4b23      	ldr	r3, [pc, #140]	; (800bf60 <prvAddNewTaskToReadyList+0xc0>)
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d109      	bne.n	800beee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800beda:	4b20      	ldr	r3, [pc, #128]	; (800bf5c <prvAddNewTaskToReadyList+0xbc>)
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bee4:	429a      	cmp	r2, r3
 800bee6:	d802      	bhi.n	800beee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bee8:	4a1c      	ldr	r2, [pc, #112]	; (800bf5c <prvAddNewTaskToReadyList+0xbc>)
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800beee:	4b1d      	ldr	r3, [pc, #116]	; (800bf64 <prvAddNewTaskToReadyList+0xc4>)
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	3301      	adds	r3, #1
 800bef4:	4a1b      	ldr	r2, [pc, #108]	; (800bf64 <prvAddNewTaskToReadyList+0xc4>)
 800bef6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800befc:	2201      	movs	r2, #1
 800befe:	409a      	lsls	r2, r3
 800bf00:	4b19      	ldr	r3, [pc, #100]	; (800bf68 <prvAddNewTaskToReadyList+0xc8>)
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	4313      	orrs	r3, r2
 800bf06:	4a18      	ldr	r2, [pc, #96]	; (800bf68 <prvAddNewTaskToReadyList+0xc8>)
 800bf08:	6013      	str	r3, [r2, #0]
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf0e:	4613      	mov	r3, r2
 800bf10:	009b      	lsls	r3, r3, #2
 800bf12:	4413      	add	r3, r2
 800bf14:	009b      	lsls	r3, r3, #2
 800bf16:	4a15      	ldr	r2, [pc, #84]	; (800bf6c <prvAddNewTaskToReadyList+0xcc>)
 800bf18:	441a      	add	r2, r3
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	3304      	adds	r3, #4
 800bf1e:	4619      	mov	r1, r3
 800bf20:	4610      	mov	r0, r2
 800bf22:	f7fe fe41 	bl	800aba8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bf26:	f000 ffc5 	bl	800ceb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bf2a:	4b0d      	ldr	r3, [pc, #52]	; (800bf60 <prvAddNewTaskToReadyList+0xc0>)
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d00e      	beq.n	800bf50 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bf32:	4b0a      	ldr	r3, [pc, #40]	; (800bf5c <prvAddNewTaskToReadyList+0xbc>)
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf3c:	429a      	cmp	r2, r3
 800bf3e:	d207      	bcs.n	800bf50 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bf40:	4b0b      	ldr	r3, [pc, #44]	; (800bf70 <prvAddNewTaskToReadyList+0xd0>)
 800bf42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf46:	601a      	str	r2, [r3, #0]
 800bf48:	f3bf 8f4f 	dsb	sy
 800bf4c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bf50:	bf00      	nop
 800bf52:	3708      	adds	r7, #8
 800bf54:	46bd      	mov	sp, r7
 800bf56:	bd80      	pop	{r7, pc}
 800bf58:	20000618 	.word	0x20000618
 800bf5c:	20000518 	.word	0x20000518
 800bf60:	20000624 	.word	0x20000624
 800bf64:	20000634 	.word	0x20000634
 800bf68:	20000620 	.word	0x20000620
 800bf6c:	2000051c 	.word	0x2000051c
 800bf70:	e000ed04 	.word	0xe000ed04

0800bf74 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b08a      	sub	sp, #40	; 0x28
 800bf78:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bf7e:	2300      	movs	r3, #0
 800bf80:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bf82:	463a      	mov	r2, r7
 800bf84:	1d39      	adds	r1, r7, #4
 800bf86:	f107 0308 	add.w	r3, r7, #8
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	f7f4 ffd8 	bl	8000f40 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bf90:	6839      	ldr	r1, [r7, #0]
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	68ba      	ldr	r2, [r7, #8]
 800bf96:	9202      	str	r2, [sp, #8]
 800bf98:	9301      	str	r3, [sp, #4]
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	9300      	str	r3, [sp, #0]
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	460a      	mov	r2, r1
 800bfa2:	491e      	ldr	r1, [pc, #120]	; (800c01c <vTaskStartScheduler+0xa8>)
 800bfa4:	481e      	ldr	r0, [pc, #120]	; (800c020 <vTaskStartScheduler+0xac>)
 800bfa6:	f7ff fe51 	bl	800bc4c <xTaskCreateStatic>
 800bfaa:	4603      	mov	r3, r0
 800bfac:	4a1d      	ldr	r2, [pc, #116]	; (800c024 <vTaskStartScheduler+0xb0>)
 800bfae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bfb0:	4b1c      	ldr	r3, [pc, #112]	; (800c024 <vTaskStartScheduler+0xb0>)
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d002      	beq.n	800bfbe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bfb8:	2301      	movs	r3, #1
 800bfba:	617b      	str	r3, [r7, #20]
 800bfbc:	e001      	b.n	800bfc2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bfc2:	697b      	ldr	r3, [r7, #20]
 800bfc4:	2b01      	cmp	r3, #1
 800bfc6:	d116      	bne.n	800bff6 <vTaskStartScheduler+0x82>
	__asm volatile
 800bfc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfcc:	f383 8811 	msr	BASEPRI, r3
 800bfd0:	f3bf 8f6f 	isb	sy
 800bfd4:	f3bf 8f4f 	dsb	sy
 800bfd8:	613b      	str	r3, [r7, #16]
}
 800bfda:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bfdc:	4b12      	ldr	r3, [pc, #72]	; (800c028 <vTaskStartScheduler+0xb4>)
 800bfde:	f04f 32ff 	mov.w	r2, #4294967295
 800bfe2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bfe4:	4b11      	ldr	r3, [pc, #68]	; (800c02c <vTaskStartScheduler+0xb8>)
 800bfe6:	2201      	movs	r2, #1
 800bfe8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bfea:	4b11      	ldr	r3, [pc, #68]	; (800c030 <vTaskStartScheduler+0xbc>)
 800bfec:	2200      	movs	r2, #0
 800bfee:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bff0:	f000 fe8e 	bl	800cd10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bff4:	e00e      	b.n	800c014 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bff6:	697b      	ldr	r3, [r7, #20]
 800bff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bffc:	d10a      	bne.n	800c014 <vTaskStartScheduler+0xa0>
	__asm volatile
 800bffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c002:	f383 8811 	msr	BASEPRI, r3
 800c006:	f3bf 8f6f 	isb	sy
 800c00a:	f3bf 8f4f 	dsb	sy
 800c00e:	60fb      	str	r3, [r7, #12]
}
 800c010:	bf00      	nop
 800c012:	e7fe      	b.n	800c012 <vTaskStartScheduler+0x9e>
}
 800c014:	bf00      	nop
 800c016:	3718      	adds	r7, #24
 800c018:	46bd      	mov	sp, r7
 800c01a:	bd80      	pop	{r7, pc}
 800c01c:	0801e88c 	.word	0x0801e88c
 800c020:	0800c609 	.word	0x0800c609
 800c024:	2000063c 	.word	0x2000063c
 800c028:	20000638 	.word	0x20000638
 800c02c:	20000624 	.word	0x20000624
 800c030:	2000061c 	.word	0x2000061c

0800c034 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c034:	b480      	push	{r7}
 800c036:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c038:	4b04      	ldr	r3, [pc, #16]	; (800c04c <vTaskSuspendAll+0x18>)
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	3301      	adds	r3, #1
 800c03e:	4a03      	ldr	r2, [pc, #12]	; (800c04c <vTaskSuspendAll+0x18>)
 800c040:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c042:	bf00      	nop
 800c044:	46bd      	mov	sp, r7
 800c046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04a:	4770      	bx	lr
 800c04c:	20000640 	.word	0x20000640

0800c050 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b084      	sub	sp, #16
 800c054:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c056:	2300      	movs	r3, #0
 800c058:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c05a:	2300      	movs	r3, #0
 800c05c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c05e:	4b41      	ldr	r3, [pc, #260]	; (800c164 <xTaskResumeAll+0x114>)
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d10a      	bne.n	800c07c <xTaskResumeAll+0x2c>
	__asm volatile
 800c066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c06a:	f383 8811 	msr	BASEPRI, r3
 800c06e:	f3bf 8f6f 	isb	sy
 800c072:	f3bf 8f4f 	dsb	sy
 800c076:	603b      	str	r3, [r7, #0]
}
 800c078:	bf00      	nop
 800c07a:	e7fe      	b.n	800c07a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c07c:	f000 feea 	bl	800ce54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c080:	4b38      	ldr	r3, [pc, #224]	; (800c164 <xTaskResumeAll+0x114>)
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	3b01      	subs	r3, #1
 800c086:	4a37      	ldr	r2, [pc, #220]	; (800c164 <xTaskResumeAll+0x114>)
 800c088:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c08a:	4b36      	ldr	r3, [pc, #216]	; (800c164 <xTaskResumeAll+0x114>)
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d161      	bne.n	800c156 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c092:	4b35      	ldr	r3, [pc, #212]	; (800c168 <xTaskResumeAll+0x118>)
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d05d      	beq.n	800c156 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c09a:	e02e      	b.n	800c0fa <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c09c:	4b33      	ldr	r3, [pc, #204]	; (800c16c <xTaskResumeAll+0x11c>)
 800c09e:	68db      	ldr	r3, [r3, #12]
 800c0a0:	68db      	ldr	r3, [r3, #12]
 800c0a2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	3318      	adds	r3, #24
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	f7fe fdda 	bl	800ac62 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	3304      	adds	r3, #4
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	f7fe fdd5 	bl	800ac62 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0bc:	2201      	movs	r2, #1
 800c0be:	409a      	lsls	r2, r3
 800c0c0:	4b2b      	ldr	r3, [pc, #172]	; (800c170 <xTaskResumeAll+0x120>)
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	4313      	orrs	r3, r2
 800c0c6:	4a2a      	ldr	r2, [pc, #168]	; (800c170 <xTaskResumeAll+0x120>)
 800c0c8:	6013      	str	r3, [r2, #0]
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0ce:	4613      	mov	r3, r2
 800c0d0:	009b      	lsls	r3, r3, #2
 800c0d2:	4413      	add	r3, r2
 800c0d4:	009b      	lsls	r3, r3, #2
 800c0d6:	4a27      	ldr	r2, [pc, #156]	; (800c174 <xTaskResumeAll+0x124>)
 800c0d8:	441a      	add	r2, r3
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	3304      	adds	r3, #4
 800c0de:	4619      	mov	r1, r3
 800c0e0:	4610      	mov	r0, r2
 800c0e2:	f7fe fd61 	bl	800aba8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0ea:	4b23      	ldr	r3, [pc, #140]	; (800c178 <xTaskResumeAll+0x128>)
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0f0:	429a      	cmp	r2, r3
 800c0f2:	d302      	bcc.n	800c0fa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800c0f4:	4b21      	ldr	r3, [pc, #132]	; (800c17c <xTaskResumeAll+0x12c>)
 800c0f6:	2201      	movs	r2, #1
 800c0f8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c0fa:	4b1c      	ldr	r3, [pc, #112]	; (800c16c <xTaskResumeAll+0x11c>)
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d1cc      	bne.n	800c09c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d001      	beq.n	800c10c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c108:	f000 fb34 	bl	800c774 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c10c:	4b1c      	ldr	r3, [pc, #112]	; (800c180 <xTaskResumeAll+0x130>)
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d010      	beq.n	800c13a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c118:	f000 f858 	bl	800c1cc <xTaskIncrementTick>
 800c11c:	4603      	mov	r3, r0
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d002      	beq.n	800c128 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800c122:	4b16      	ldr	r3, [pc, #88]	; (800c17c <xTaskResumeAll+0x12c>)
 800c124:	2201      	movs	r2, #1
 800c126:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	3b01      	subs	r3, #1
 800c12c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d1f1      	bne.n	800c118 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800c134:	4b12      	ldr	r3, [pc, #72]	; (800c180 <xTaskResumeAll+0x130>)
 800c136:	2200      	movs	r2, #0
 800c138:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c13a:	4b10      	ldr	r3, [pc, #64]	; (800c17c <xTaskResumeAll+0x12c>)
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d009      	beq.n	800c156 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c142:	2301      	movs	r3, #1
 800c144:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c146:	4b0f      	ldr	r3, [pc, #60]	; (800c184 <xTaskResumeAll+0x134>)
 800c148:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c14c:	601a      	str	r2, [r3, #0]
 800c14e:	f3bf 8f4f 	dsb	sy
 800c152:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c156:	f000 fead 	bl	800ceb4 <vPortExitCritical>

	return xAlreadyYielded;
 800c15a:	68bb      	ldr	r3, [r7, #8]
}
 800c15c:	4618      	mov	r0, r3
 800c15e:	3710      	adds	r7, #16
 800c160:	46bd      	mov	sp, r7
 800c162:	bd80      	pop	{r7, pc}
 800c164:	20000640 	.word	0x20000640
 800c168:	20000618 	.word	0x20000618
 800c16c:	200005d8 	.word	0x200005d8
 800c170:	20000620 	.word	0x20000620
 800c174:	2000051c 	.word	0x2000051c
 800c178:	20000518 	.word	0x20000518
 800c17c:	2000062c 	.word	0x2000062c
 800c180:	20000628 	.word	0x20000628
 800c184:	e000ed04 	.word	0xe000ed04

0800c188 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c188:	b480      	push	{r7}
 800c18a:	b083      	sub	sp, #12
 800c18c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c18e:	4b05      	ldr	r3, [pc, #20]	; (800c1a4 <xTaskGetTickCount+0x1c>)
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c194:	687b      	ldr	r3, [r7, #4]
}
 800c196:	4618      	mov	r0, r3
 800c198:	370c      	adds	r7, #12
 800c19a:	46bd      	mov	sp, r7
 800c19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a0:	4770      	bx	lr
 800c1a2:	bf00      	nop
 800c1a4:	2000061c 	.word	0x2000061c

0800c1a8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b082      	sub	sp, #8
 800c1ac:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c1ae:	f000 ff33 	bl	800d018 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800c1b6:	4b04      	ldr	r3, [pc, #16]	; (800c1c8 <xTaskGetTickCountFromISR+0x20>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c1bc:	683b      	ldr	r3, [r7, #0]
}
 800c1be:	4618      	mov	r0, r3
 800c1c0:	3708      	adds	r7, #8
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	bd80      	pop	{r7, pc}
 800c1c6:	bf00      	nop
 800c1c8:	2000061c 	.word	0x2000061c

0800c1cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b086      	sub	sp, #24
 800c1d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c1d6:	4b4e      	ldr	r3, [pc, #312]	; (800c310 <xTaskIncrementTick+0x144>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	f040 808e 	bne.w	800c2fc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c1e0:	4b4c      	ldr	r3, [pc, #304]	; (800c314 <xTaskIncrementTick+0x148>)
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	3301      	adds	r3, #1
 800c1e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c1e8:	4a4a      	ldr	r2, [pc, #296]	; (800c314 <xTaskIncrementTick+0x148>)
 800c1ea:	693b      	ldr	r3, [r7, #16]
 800c1ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c1ee:	693b      	ldr	r3, [r7, #16]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d120      	bne.n	800c236 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c1f4:	4b48      	ldr	r3, [pc, #288]	; (800c318 <xTaskIncrementTick+0x14c>)
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d00a      	beq.n	800c214 <xTaskIncrementTick+0x48>
	__asm volatile
 800c1fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c202:	f383 8811 	msr	BASEPRI, r3
 800c206:	f3bf 8f6f 	isb	sy
 800c20a:	f3bf 8f4f 	dsb	sy
 800c20e:	603b      	str	r3, [r7, #0]
}
 800c210:	bf00      	nop
 800c212:	e7fe      	b.n	800c212 <xTaskIncrementTick+0x46>
 800c214:	4b40      	ldr	r3, [pc, #256]	; (800c318 <xTaskIncrementTick+0x14c>)
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	60fb      	str	r3, [r7, #12]
 800c21a:	4b40      	ldr	r3, [pc, #256]	; (800c31c <xTaskIncrementTick+0x150>)
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	4a3e      	ldr	r2, [pc, #248]	; (800c318 <xTaskIncrementTick+0x14c>)
 800c220:	6013      	str	r3, [r2, #0]
 800c222:	4a3e      	ldr	r2, [pc, #248]	; (800c31c <xTaskIncrementTick+0x150>)
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	6013      	str	r3, [r2, #0]
 800c228:	4b3d      	ldr	r3, [pc, #244]	; (800c320 <xTaskIncrementTick+0x154>)
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	3301      	adds	r3, #1
 800c22e:	4a3c      	ldr	r2, [pc, #240]	; (800c320 <xTaskIncrementTick+0x154>)
 800c230:	6013      	str	r3, [r2, #0]
 800c232:	f000 fa9f 	bl	800c774 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c236:	4b3b      	ldr	r3, [pc, #236]	; (800c324 <xTaskIncrementTick+0x158>)
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	693a      	ldr	r2, [r7, #16]
 800c23c:	429a      	cmp	r2, r3
 800c23e:	d348      	bcc.n	800c2d2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c240:	4b35      	ldr	r3, [pc, #212]	; (800c318 <xTaskIncrementTick+0x14c>)
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d104      	bne.n	800c254 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c24a:	4b36      	ldr	r3, [pc, #216]	; (800c324 <xTaskIncrementTick+0x158>)
 800c24c:	f04f 32ff 	mov.w	r2, #4294967295
 800c250:	601a      	str	r2, [r3, #0]
					break;
 800c252:	e03e      	b.n	800c2d2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c254:	4b30      	ldr	r3, [pc, #192]	; (800c318 <xTaskIncrementTick+0x14c>)
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	68db      	ldr	r3, [r3, #12]
 800c25a:	68db      	ldr	r3, [r3, #12]
 800c25c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c25e:	68bb      	ldr	r3, [r7, #8]
 800c260:	685b      	ldr	r3, [r3, #4]
 800c262:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c264:	693a      	ldr	r2, [r7, #16]
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	429a      	cmp	r2, r3
 800c26a:	d203      	bcs.n	800c274 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c26c:	4a2d      	ldr	r2, [pc, #180]	; (800c324 <xTaskIncrementTick+0x158>)
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c272:	e02e      	b.n	800c2d2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c274:	68bb      	ldr	r3, [r7, #8]
 800c276:	3304      	adds	r3, #4
 800c278:	4618      	mov	r0, r3
 800c27a:	f7fe fcf2 	bl	800ac62 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c27e:	68bb      	ldr	r3, [r7, #8]
 800c280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c282:	2b00      	cmp	r3, #0
 800c284:	d004      	beq.n	800c290 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c286:	68bb      	ldr	r3, [r7, #8]
 800c288:	3318      	adds	r3, #24
 800c28a:	4618      	mov	r0, r3
 800c28c:	f7fe fce9 	bl	800ac62 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c290:	68bb      	ldr	r3, [r7, #8]
 800c292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c294:	2201      	movs	r2, #1
 800c296:	409a      	lsls	r2, r3
 800c298:	4b23      	ldr	r3, [pc, #140]	; (800c328 <xTaskIncrementTick+0x15c>)
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	4313      	orrs	r3, r2
 800c29e:	4a22      	ldr	r2, [pc, #136]	; (800c328 <xTaskIncrementTick+0x15c>)
 800c2a0:	6013      	str	r3, [r2, #0]
 800c2a2:	68bb      	ldr	r3, [r7, #8]
 800c2a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2a6:	4613      	mov	r3, r2
 800c2a8:	009b      	lsls	r3, r3, #2
 800c2aa:	4413      	add	r3, r2
 800c2ac:	009b      	lsls	r3, r3, #2
 800c2ae:	4a1f      	ldr	r2, [pc, #124]	; (800c32c <xTaskIncrementTick+0x160>)
 800c2b0:	441a      	add	r2, r3
 800c2b2:	68bb      	ldr	r3, [r7, #8]
 800c2b4:	3304      	adds	r3, #4
 800c2b6:	4619      	mov	r1, r3
 800c2b8:	4610      	mov	r0, r2
 800c2ba:	f7fe fc75 	bl	800aba8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c2be:	68bb      	ldr	r3, [r7, #8]
 800c2c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2c2:	4b1b      	ldr	r3, [pc, #108]	; (800c330 <xTaskIncrementTick+0x164>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2c8:	429a      	cmp	r2, r3
 800c2ca:	d3b9      	bcc.n	800c240 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c2cc:	2301      	movs	r3, #1
 800c2ce:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c2d0:	e7b6      	b.n	800c240 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c2d2:	4b17      	ldr	r3, [pc, #92]	; (800c330 <xTaskIncrementTick+0x164>)
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2d8:	4914      	ldr	r1, [pc, #80]	; (800c32c <xTaskIncrementTick+0x160>)
 800c2da:	4613      	mov	r3, r2
 800c2dc:	009b      	lsls	r3, r3, #2
 800c2de:	4413      	add	r3, r2
 800c2e0:	009b      	lsls	r3, r3, #2
 800c2e2:	440b      	add	r3, r1
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	2b01      	cmp	r3, #1
 800c2e8:	d901      	bls.n	800c2ee <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800c2ea:	2301      	movs	r3, #1
 800c2ec:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c2ee:	4b11      	ldr	r3, [pc, #68]	; (800c334 <xTaskIncrementTick+0x168>)
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d007      	beq.n	800c306 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800c2f6:	2301      	movs	r3, #1
 800c2f8:	617b      	str	r3, [r7, #20]
 800c2fa:	e004      	b.n	800c306 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c2fc:	4b0e      	ldr	r3, [pc, #56]	; (800c338 <xTaskIncrementTick+0x16c>)
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	3301      	adds	r3, #1
 800c302:	4a0d      	ldr	r2, [pc, #52]	; (800c338 <xTaskIncrementTick+0x16c>)
 800c304:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c306:	697b      	ldr	r3, [r7, #20]
}
 800c308:	4618      	mov	r0, r3
 800c30a:	3718      	adds	r7, #24
 800c30c:	46bd      	mov	sp, r7
 800c30e:	bd80      	pop	{r7, pc}
 800c310:	20000640 	.word	0x20000640
 800c314:	2000061c 	.word	0x2000061c
 800c318:	200005d0 	.word	0x200005d0
 800c31c:	200005d4 	.word	0x200005d4
 800c320:	20000630 	.word	0x20000630
 800c324:	20000638 	.word	0x20000638
 800c328:	20000620 	.word	0x20000620
 800c32c:	2000051c 	.word	0x2000051c
 800c330:	20000518 	.word	0x20000518
 800c334:	2000062c 	.word	0x2000062c
 800c338:	20000628 	.word	0x20000628

0800c33c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c33c:	b480      	push	{r7}
 800c33e:	b087      	sub	sp, #28
 800c340:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c342:	4b27      	ldr	r3, [pc, #156]	; (800c3e0 <vTaskSwitchContext+0xa4>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d003      	beq.n	800c352 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c34a:	4b26      	ldr	r3, [pc, #152]	; (800c3e4 <vTaskSwitchContext+0xa8>)
 800c34c:	2201      	movs	r2, #1
 800c34e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c350:	e03f      	b.n	800c3d2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800c352:	4b24      	ldr	r3, [pc, #144]	; (800c3e4 <vTaskSwitchContext+0xa8>)
 800c354:	2200      	movs	r2, #0
 800c356:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c358:	4b23      	ldr	r3, [pc, #140]	; (800c3e8 <vTaskSwitchContext+0xac>)
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	fab3 f383 	clz	r3, r3
 800c364:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c366:	7afb      	ldrb	r3, [r7, #11]
 800c368:	f1c3 031f 	rsb	r3, r3, #31
 800c36c:	617b      	str	r3, [r7, #20]
 800c36e:	491f      	ldr	r1, [pc, #124]	; (800c3ec <vTaskSwitchContext+0xb0>)
 800c370:	697a      	ldr	r2, [r7, #20]
 800c372:	4613      	mov	r3, r2
 800c374:	009b      	lsls	r3, r3, #2
 800c376:	4413      	add	r3, r2
 800c378:	009b      	lsls	r3, r3, #2
 800c37a:	440b      	add	r3, r1
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d10a      	bne.n	800c398 <vTaskSwitchContext+0x5c>
	__asm volatile
 800c382:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c386:	f383 8811 	msr	BASEPRI, r3
 800c38a:	f3bf 8f6f 	isb	sy
 800c38e:	f3bf 8f4f 	dsb	sy
 800c392:	607b      	str	r3, [r7, #4]
}
 800c394:	bf00      	nop
 800c396:	e7fe      	b.n	800c396 <vTaskSwitchContext+0x5a>
 800c398:	697a      	ldr	r2, [r7, #20]
 800c39a:	4613      	mov	r3, r2
 800c39c:	009b      	lsls	r3, r3, #2
 800c39e:	4413      	add	r3, r2
 800c3a0:	009b      	lsls	r3, r3, #2
 800c3a2:	4a12      	ldr	r2, [pc, #72]	; (800c3ec <vTaskSwitchContext+0xb0>)
 800c3a4:	4413      	add	r3, r2
 800c3a6:	613b      	str	r3, [r7, #16]
 800c3a8:	693b      	ldr	r3, [r7, #16]
 800c3aa:	685b      	ldr	r3, [r3, #4]
 800c3ac:	685a      	ldr	r2, [r3, #4]
 800c3ae:	693b      	ldr	r3, [r7, #16]
 800c3b0:	605a      	str	r2, [r3, #4]
 800c3b2:	693b      	ldr	r3, [r7, #16]
 800c3b4:	685a      	ldr	r2, [r3, #4]
 800c3b6:	693b      	ldr	r3, [r7, #16]
 800c3b8:	3308      	adds	r3, #8
 800c3ba:	429a      	cmp	r2, r3
 800c3bc:	d104      	bne.n	800c3c8 <vTaskSwitchContext+0x8c>
 800c3be:	693b      	ldr	r3, [r7, #16]
 800c3c0:	685b      	ldr	r3, [r3, #4]
 800c3c2:	685a      	ldr	r2, [r3, #4]
 800c3c4:	693b      	ldr	r3, [r7, #16]
 800c3c6:	605a      	str	r2, [r3, #4]
 800c3c8:	693b      	ldr	r3, [r7, #16]
 800c3ca:	685b      	ldr	r3, [r3, #4]
 800c3cc:	68db      	ldr	r3, [r3, #12]
 800c3ce:	4a08      	ldr	r2, [pc, #32]	; (800c3f0 <vTaskSwitchContext+0xb4>)
 800c3d0:	6013      	str	r3, [r2, #0]
}
 800c3d2:	bf00      	nop
 800c3d4:	371c      	adds	r7, #28
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3dc:	4770      	bx	lr
 800c3de:	bf00      	nop
 800c3e0:	20000640 	.word	0x20000640
 800c3e4:	2000062c 	.word	0x2000062c
 800c3e8:	20000620 	.word	0x20000620
 800c3ec:	2000051c 	.word	0x2000051c
 800c3f0:	20000518 	.word	0x20000518

0800c3f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b084      	sub	sp, #16
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
 800c3fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d10a      	bne.n	800c41a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c404:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c408:	f383 8811 	msr	BASEPRI, r3
 800c40c:	f3bf 8f6f 	isb	sy
 800c410:	f3bf 8f4f 	dsb	sy
 800c414:	60fb      	str	r3, [r7, #12]
}
 800c416:	bf00      	nop
 800c418:	e7fe      	b.n	800c418 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c41a:	4b07      	ldr	r3, [pc, #28]	; (800c438 <vTaskPlaceOnEventList+0x44>)
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	3318      	adds	r3, #24
 800c420:	4619      	mov	r1, r3
 800c422:	6878      	ldr	r0, [r7, #4]
 800c424:	f7fe fbe4 	bl	800abf0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c428:	2101      	movs	r1, #1
 800c42a:	6838      	ldr	r0, [r7, #0]
 800c42c:	f000 fb7e 	bl	800cb2c <prvAddCurrentTaskToDelayedList>
}
 800c430:	bf00      	nop
 800c432:	3710      	adds	r7, #16
 800c434:	46bd      	mov	sp, r7
 800c436:	bd80      	pop	{r7, pc}
 800c438:	20000518 	.word	0x20000518

0800c43c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b086      	sub	sp, #24
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	68db      	ldr	r3, [r3, #12]
 800c448:	68db      	ldr	r3, [r3, #12]
 800c44a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c44c:	693b      	ldr	r3, [r7, #16]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d10a      	bne.n	800c468 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c452:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c456:	f383 8811 	msr	BASEPRI, r3
 800c45a:	f3bf 8f6f 	isb	sy
 800c45e:	f3bf 8f4f 	dsb	sy
 800c462:	60fb      	str	r3, [r7, #12]
}
 800c464:	bf00      	nop
 800c466:	e7fe      	b.n	800c466 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c468:	693b      	ldr	r3, [r7, #16]
 800c46a:	3318      	adds	r3, #24
 800c46c:	4618      	mov	r0, r3
 800c46e:	f7fe fbf8 	bl	800ac62 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c472:	4b1d      	ldr	r3, [pc, #116]	; (800c4e8 <xTaskRemoveFromEventList+0xac>)
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d11c      	bne.n	800c4b4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c47a:	693b      	ldr	r3, [r7, #16]
 800c47c:	3304      	adds	r3, #4
 800c47e:	4618      	mov	r0, r3
 800c480:	f7fe fbef 	bl	800ac62 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c484:	693b      	ldr	r3, [r7, #16]
 800c486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c488:	2201      	movs	r2, #1
 800c48a:	409a      	lsls	r2, r3
 800c48c:	4b17      	ldr	r3, [pc, #92]	; (800c4ec <xTaskRemoveFromEventList+0xb0>)
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	4313      	orrs	r3, r2
 800c492:	4a16      	ldr	r2, [pc, #88]	; (800c4ec <xTaskRemoveFromEventList+0xb0>)
 800c494:	6013      	str	r3, [r2, #0]
 800c496:	693b      	ldr	r3, [r7, #16]
 800c498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c49a:	4613      	mov	r3, r2
 800c49c:	009b      	lsls	r3, r3, #2
 800c49e:	4413      	add	r3, r2
 800c4a0:	009b      	lsls	r3, r3, #2
 800c4a2:	4a13      	ldr	r2, [pc, #76]	; (800c4f0 <xTaskRemoveFromEventList+0xb4>)
 800c4a4:	441a      	add	r2, r3
 800c4a6:	693b      	ldr	r3, [r7, #16]
 800c4a8:	3304      	adds	r3, #4
 800c4aa:	4619      	mov	r1, r3
 800c4ac:	4610      	mov	r0, r2
 800c4ae:	f7fe fb7b 	bl	800aba8 <vListInsertEnd>
 800c4b2:	e005      	b.n	800c4c0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c4b4:	693b      	ldr	r3, [r7, #16]
 800c4b6:	3318      	adds	r3, #24
 800c4b8:	4619      	mov	r1, r3
 800c4ba:	480e      	ldr	r0, [pc, #56]	; (800c4f4 <xTaskRemoveFromEventList+0xb8>)
 800c4bc:	f7fe fb74 	bl	800aba8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c4c0:	693b      	ldr	r3, [r7, #16]
 800c4c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4c4:	4b0c      	ldr	r3, [pc, #48]	; (800c4f8 <xTaskRemoveFromEventList+0xbc>)
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4ca:	429a      	cmp	r2, r3
 800c4cc:	d905      	bls.n	800c4da <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c4ce:	2301      	movs	r3, #1
 800c4d0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c4d2:	4b0a      	ldr	r3, [pc, #40]	; (800c4fc <xTaskRemoveFromEventList+0xc0>)
 800c4d4:	2201      	movs	r2, #1
 800c4d6:	601a      	str	r2, [r3, #0]
 800c4d8:	e001      	b.n	800c4de <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800c4da:	2300      	movs	r3, #0
 800c4dc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c4de:	697b      	ldr	r3, [r7, #20]
}
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	3718      	adds	r7, #24
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	bd80      	pop	{r7, pc}
 800c4e8:	20000640 	.word	0x20000640
 800c4ec:	20000620 	.word	0x20000620
 800c4f0:	2000051c 	.word	0x2000051c
 800c4f4:	200005d8 	.word	0x200005d8
 800c4f8:	20000518 	.word	0x20000518
 800c4fc:	2000062c 	.word	0x2000062c

0800c500 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c500:	b480      	push	{r7}
 800c502:	b083      	sub	sp, #12
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c508:	4b06      	ldr	r3, [pc, #24]	; (800c524 <vTaskInternalSetTimeOutState+0x24>)
 800c50a:	681a      	ldr	r2, [r3, #0]
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c510:	4b05      	ldr	r3, [pc, #20]	; (800c528 <vTaskInternalSetTimeOutState+0x28>)
 800c512:	681a      	ldr	r2, [r3, #0]
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	605a      	str	r2, [r3, #4]
}
 800c518:	bf00      	nop
 800c51a:	370c      	adds	r7, #12
 800c51c:	46bd      	mov	sp, r7
 800c51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c522:	4770      	bx	lr
 800c524:	20000630 	.word	0x20000630
 800c528:	2000061c 	.word	0x2000061c

0800c52c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b088      	sub	sp, #32
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
 800c534:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d10a      	bne.n	800c552 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c53c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c540:	f383 8811 	msr	BASEPRI, r3
 800c544:	f3bf 8f6f 	isb	sy
 800c548:	f3bf 8f4f 	dsb	sy
 800c54c:	613b      	str	r3, [r7, #16]
}
 800c54e:	bf00      	nop
 800c550:	e7fe      	b.n	800c550 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d10a      	bne.n	800c56e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c55c:	f383 8811 	msr	BASEPRI, r3
 800c560:	f3bf 8f6f 	isb	sy
 800c564:	f3bf 8f4f 	dsb	sy
 800c568:	60fb      	str	r3, [r7, #12]
}
 800c56a:	bf00      	nop
 800c56c:	e7fe      	b.n	800c56c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c56e:	f000 fc71 	bl	800ce54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c572:	4b1d      	ldr	r3, [pc, #116]	; (800c5e8 <xTaskCheckForTimeOut+0xbc>)
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	685b      	ldr	r3, [r3, #4]
 800c57c:	69ba      	ldr	r2, [r7, #24]
 800c57e:	1ad3      	subs	r3, r2, r3
 800c580:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c582:	683b      	ldr	r3, [r7, #0]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c58a:	d102      	bne.n	800c592 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c58c:	2300      	movs	r3, #0
 800c58e:	61fb      	str	r3, [r7, #28]
 800c590:	e023      	b.n	800c5da <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681a      	ldr	r2, [r3, #0]
 800c596:	4b15      	ldr	r3, [pc, #84]	; (800c5ec <xTaskCheckForTimeOut+0xc0>)
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	429a      	cmp	r2, r3
 800c59c:	d007      	beq.n	800c5ae <xTaskCheckForTimeOut+0x82>
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	685b      	ldr	r3, [r3, #4]
 800c5a2:	69ba      	ldr	r2, [r7, #24]
 800c5a4:	429a      	cmp	r2, r3
 800c5a6:	d302      	bcc.n	800c5ae <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c5a8:	2301      	movs	r3, #1
 800c5aa:	61fb      	str	r3, [r7, #28]
 800c5ac:	e015      	b.n	800c5da <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	697a      	ldr	r2, [r7, #20]
 800c5b4:	429a      	cmp	r2, r3
 800c5b6:	d20b      	bcs.n	800c5d0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c5b8:	683b      	ldr	r3, [r7, #0]
 800c5ba:	681a      	ldr	r2, [r3, #0]
 800c5bc:	697b      	ldr	r3, [r7, #20]
 800c5be:	1ad2      	subs	r2, r2, r3
 800c5c0:	683b      	ldr	r3, [r7, #0]
 800c5c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c5c4:	6878      	ldr	r0, [r7, #4]
 800c5c6:	f7ff ff9b 	bl	800c500 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	61fb      	str	r3, [r7, #28]
 800c5ce:	e004      	b.n	800c5da <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c5d6:	2301      	movs	r3, #1
 800c5d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c5da:	f000 fc6b 	bl	800ceb4 <vPortExitCritical>

	return xReturn;
 800c5de:	69fb      	ldr	r3, [r7, #28]
}
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	3720      	adds	r7, #32
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	bd80      	pop	{r7, pc}
 800c5e8:	2000061c 	.word	0x2000061c
 800c5ec:	20000630 	.word	0x20000630

0800c5f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c5f0:	b480      	push	{r7}
 800c5f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c5f4:	4b03      	ldr	r3, [pc, #12]	; (800c604 <vTaskMissedYield+0x14>)
 800c5f6:	2201      	movs	r2, #1
 800c5f8:	601a      	str	r2, [r3, #0]
}
 800c5fa:	bf00      	nop
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c602:	4770      	bx	lr
 800c604:	2000062c 	.word	0x2000062c

0800c608 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b082      	sub	sp, #8
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c610:	f000 f852 	bl	800c6b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c614:	4b06      	ldr	r3, [pc, #24]	; (800c630 <prvIdleTask+0x28>)
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	2b01      	cmp	r3, #1
 800c61a:	d9f9      	bls.n	800c610 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c61c:	4b05      	ldr	r3, [pc, #20]	; (800c634 <prvIdleTask+0x2c>)
 800c61e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c622:	601a      	str	r2, [r3, #0]
 800c624:	f3bf 8f4f 	dsb	sy
 800c628:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c62c:	e7f0      	b.n	800c610 <prvIdleTask+0x8>
 800c62e:	bf00      	nop
 800c630:	2000051c 	.word	0x2000051c
 800c634:	e000ed04 	.word	0xe000ed04

0800c638 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b082      	sub	sp, #8
 800c63c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c63e:	2300      	movs	r3, #0
 800c640:	607b      	str	r3, [r7, #4]
 800c642:	e00c      	b.n	800c65e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c644:	687a      	ldr	r2, [r7, #4]
 800c646:	4613      	mov	r3, r2
 800c648:	009b      	lsls	r3, r3, #2
 800c64a:	4413      	add	r3, r2
 800c64c:	009b      	lsls	r3, r3, #2
 800c64e:	4a12      	ldr	r2, [pc, #72]	; (800c698 <prvInitialiseTaskLists+0x60>)
 800c650:	4413      	add	r3, r2
 800c652:	4618      	mov	r0, r3
 800c654:	f7fe fa7b 	bl	800ab4e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	3301      	adds	r3, #1
 800c65c:	607b      	str	r3, [r7, #4]
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	2b06      	cmp	r3, #6
 800c662:	d9ef      	bls.n	800c644 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c664:	480d      	ldr	r0, [pc, #52]	; (800c69c <prvInitialiseTaskLists+0x64>)
 800c666:	f7fe fa72 	bl	800ab4e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c66a:	480d      	ldr	r0, [pc, #52]	; (800c6a0 <prvInitialiseTaskLists+0x68>)
 800c66c:	f7fe fa6f 	bl	800ab4e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c670:	480c      	ldr	r0, [pc, #48]	; (800c6a4 <prvInitialiseTaskLists+0x6c>)
 800c672:	f7fe fa6c 	bl	800ab4e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c676:	480c      	ldr	r0, [pc, #48]	; (800c6a8 <prvInitialiseTaskLists+0x70>)
 800c678:	f7fe fa69 	bl	800ab4e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c67c:	480b      	ldr	r0, [pc, #44]	; (800c6ac <prvInitialiseTaskLists+0x74>)
 800c67e:	f7fe fa66 	bl	800ab4e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c682:	4b0b      	ldr	r3, [pc, #44]	; (800c6b0 <prvInitialiseTaskLists+0x78>)
 800c684:	4a05      	ldr	r2, [pc, #20]	; (800c69c <prvInitialiseTaskLists+0x64>)
 800c686:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c688:	4b0a      	ldr	r3, [pc, #40]	; (800c6b4 <prvInitialiseTaskLists+0x7c>)
 800c68a:	4a05      	ldr	r2, [pc, #20]	; (800c6a0 <prvInitialiseTaskLists+0x68>)
 800c68c:	601a      	str	r2, [r3, #0]
}
 800c68e:	bf00      	nop
 800c690:	3708      	adds	r7, #8
 800c692:	46bd      	mov	sp, r7
 800c694:	bd80      	pop	{r7, pc}
 800c696:	bf00      	nop
 800c698:	2000051c 	.word	0x2000051c
 800c69c:	200005a8 	.word	0x200005a8
 800c6a0:	200005bc 	.word	0x200005bc
 800c6a4:	200005d8 	.word	0x200005d8
 800c6a8:	200005ec 	.word	0x200005ec
 800c6ac:	20000604 	.word	0x20000604
 800c6b0:	200005d0 	.word	0x200005d0
 800c6b4:	200005d4 	.word	0x200005d4

0800c6b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b082      	sub	sp, #8
 800c6bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c6be:	e019      	b.n	800c6f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c6c0:	f000 fbc8 	bl	800ce54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c6c4:	4b10      	ldr	r3, [pc, #64]	; (800c708 <prvCheckTasksWaitingTermination+0x50>)
 800c6c6:	68db      	ldr	r3, [r3, #12]
 800c6c8:	68db      	ldr	r3, [r3, #12]
 800c6ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	3304      	adds	r3, #4
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	f7fe fac6 	bl	800ac62 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c6d6:	4b0d      	ldr	r3, [pc, #52]	; (800c70c <prvCheckTasksWaitingTermination+0x54>)
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	3b01      	subs	r3, #1
 800c6dc:	4a0b      	ldr	r2, [pc, #44]	; (800c70c <prvCheckTasksWaitingTermination+0x54>)
 800c6de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c6e0:	4b0b      	ldr	r3, [pc, #44]	; (800c710 <prvCheckTasksWaitingTermination+0x58>)
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	3b01      	subs	r3, #1
 800c6e6:	4a0a      	ldr	r2, [pc, #40]	; (800c710 <prvCheckTasksWaitingTermination+0x58>)
 800c6e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c6ea:	f000 fbe3 	bl	800ceb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c6ee:	6878      	ldr	r0, [r7, #4]
 800c6f0:	f000 f810 	bl	800c714 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c6f4:	4b06      	ldr	r3, [pc, #24]	; (800c710 <prvCheckTasksWaitingTermination+0x58>)
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d1e1      	bne.n	800c6c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c6fc:	bf00      	nop
 800c6fe:	bf00      	nop
 800c700:	3708      	adds	r7, #8
 800c702:	46bd      	mov	sp, r7
 800c704:	bd80      	pop	{r7, pc}
 800c706:	bf00      	nop
 800c708:	200005ec 	.word	0x200005ec
 800c70c:	20000618 	.word	0x20000618
 800c710:	20000600 	.word	0x20000600

0800c714 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c714:	b580      	push	{r7, lr}
 800c716:	b084      	sub	sp, #16
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c722:	2b00      	cmp	r3, #0
 800c724:	d108      	bne.n	800c738 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c72a:	4618      	mov	r0, r3
 800c72c:	f000 fd80 	bl	800d230 <vPortFree>
				vPortFree( pxTCB );
 800c730:	6878      	ldr	r0, [r7, #4]
 800c732:	f000 fd7d 	bl	800d230 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c736:	e018      	b.n	800c76a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c73e:	2b01      	cmp	r3, #1
 800c740:	d103      	bne.n	800c74a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c742:	6878      	ldr	r0, [r7, #4]
 800c744:	f000 fd74 	bl	800d230 <vPortFree>
	}
 800c748:	e00f      	b.n	800c76a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c750:	2b02      	cmp	r3, #2
 800c752:	d00a      	beq.n	800c76a <prvDeleteTCB+0x56>
	__asm volatile
 800c754:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c758:	f383 8811 	msr	BASEPRI, r3
 800c75c:	f3bf 8f6f 	isb	sy
 800c760:	f3bf 8f4f 	dsb	sy
 800c764:	60fb      	str	r3, [r7, #12]
}
 800c766:	bf00      	nop
 800c768:	e7fe      	b.n	800c768 <prvDeleteTCB+0x54>
	}
 800c76a:	bf00      	nop
 800c76c:	3710      	adds	r7, #16
 800c76e:	46bd      	mov	sp, r7
 800c770:	bd80      	pop	{r7, pc}
	...

0800c774 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c774:	b480      	push	{r7}
 800c776:	b083      	sub	sp, #12
 800c778:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c77a:	4b0c      	ldr	r3, [pc, #48]	; (800c7ac <prvResetNextTaskUnblockTime+0x38>)
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d104      	bne.n	800c78e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c784:	4b0a      	ldr	r3, [pc, #40]	; (800c7b0 <prvResetNextTaskUnblockTime+0x3c>)
 800c786:	f04f 32ff 	mov.w	r2, #4294967295
 800c78a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c78c:	e008      	b.n	800c7a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c78e:	4b07      	ldr	r3, [pc, #28]	; (800c7ac <prvResetNextTaskUnblockTime+0x38>)
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	68db      	ldr	r3, [r3, #12]
 800c794:	68db      	ldr	r3, [r3, #12]
 800c796:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	685b      	ldr	r3, [r3, #4]
 800c79c:	4a04      	ldr	r2, [pc, #16]	; (800c7b0 <prvResetNextTaskUnblockTime+0x3c>)
 800c79e:	6013      	str	r3, [r2, #0]
}
 800c7a0:	bf00      	nop
 800c7a2:	370c      	adds	r7, #12
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7aa:	4770      	bx	lr
 800c7ac:	200005d0 	.word	0x200005d0
 800c7b0:	20000638 	.word	0x20000638

0800c7b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c7b4:	b480      	push	{r7}
 800c7b6:	b083      	sub	sp, #12
 800c7b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c7ba:	4b0b      	ldr	r3, [pc, #44]	; (800c7e8 <xTaskGetSchedulerState+0x34>)
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d102      	bne.n	800c7c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c7c2:	2301      	movs	r3, #1
 800c7c4:	607b      	str	r3, [r7, #4]
 800c7c6:	e008      	b.n	800c7da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c7c8:	4b08      	ldr	r3, [pc, #32]	; (800c7ec <xTaskGetSchedulerState+0x38>)
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d102      	bne.n	800c7d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c7d0:	2302      	movs	r3, #2
 800c7d2:	607b      	str	r3, [r7, #4]
 800c7d4:	e001      	b.n	800c7da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c7da:	687b      	ldr	r3, [r7, #4]
	}
 800c7dc:	4618      	mov	r0, r3
 800c7de:	370c      	adds	r7, #12
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e6:	4770      	bx	lr
 800c7e8:	20000624 	.word	0x20000624
 800c7ec:	20000640 	.word	0x20000640

0800c7f0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b084      	sub	sp, #16
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d05e      	beq.n	800c8c4 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c806:	68bb      	ldr	r3, [r7, #8]
 800c808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c80a:	4b31      	ldr	r3, [pc, #196]	; (800c8d0 <xTaskPriorityInherit+0xe0>)
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c810:	429a      	cmp	r2, r3
 800c812:	d24e      	bcs.n	800c8b2 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c814:	68bb      	ldr	r3, [r7, #8]
 800c816:	699b      	ldr	r3, [r3, #24]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	db06      	blt.n	800c82a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c81c:	4b2c      	ldr	r3, [pc, #176]	; (800c8d0 <xTaskPriorityInherit+0xe0>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c822:	f1c3 0207 	rsb	r2, r3, #7
 800c826:	68bb      	ldr	r3, [r7, #8]
 800c828:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c82a:	68bb      	ldr	r3, [r7, #8]
 800c82c:	6959      	ldr	r1, [r3, #20]
 800c82e:	68bb      	ldr	r3, [r7, #8]
 800c830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c832:	4613      	mov	r3, r2
 800c834:	009b      	lsls	r3, r3, #2
 800c836:	4413      	add	r3, r2
 800c838:	009b      	lsls	r3, r3, #2
 800c83a:	4a26      	ldr	r2, [pc, #152]	; (800c8d4 <xTaskPriorityInherit+0xe4>)
 800c83c:	4413      	add	r3, r2
 800c83e:	4299      	cmp	r1, r3
 800c840:	d12f      	bne.n	800c8a2 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c842:	68bb      	ldr	r3, [r7, #8]
 800c844:	3304      	adds	r3, #4
 800c846:	4618      	mov	r0, r3
 800c848:	f7fe fa0b 	bl	800ac62 <uxListRemove>
 800c84c:	4603      	mov	r3, r0
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d10a      	bne.n	800c868 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800c852:	68bb      	ldr	r3, [r7, #8]
 800c854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c856:	2201      	movs	r2, #1
 800c858:	fa02 f303 	lsl.w	r3, r2, r3
 800c85c:	43da      	mvns	r2, r3
 800c85e:	4b1e      	ldr	r3, [pc, #120]	; (800c8d8 <xTaskPriorityInherit+0xe8>)
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	4013      	ands	r3, r2
 800c864:	4a1c      	ldr	r2, [pc, #112]	; (800c8d8 <xTaskPriorityInherit+0xe8>)
 800c866:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c868:	4b19      	ldr	r3, [pc, #100]	; (800c8d0 <xTaskPriorityInherit+0xe0>)
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c86e:	68bb      	ldr	r3, [r7, #8]
 800c870:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c872:	68bb      	ldr	r3, [r7, #8]
 800c874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c876:	2201      	movs	r2, #1
 800c878:	409a      	lsls	r2, r3
 800c87a:	4b17      	ldr	r3, [pc, #92]	; (800c8d8 <xTaskPriorityInherit+0xe8>)
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	4313      	orrs	r3, r2
 800c880:	4a15      	ldr	r2, [pc, #84]	; (800c8d8 <xTaskPriorityInherit+0xe8>)
 800c882:	6013      	str	r3, [r2, #0]
 800c884:	68bb      	ldr	r3, [r7, #8]
 800c886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c888:	4613      	mov	r3, r2
 800c88a:	009b      	lsls	r3, r3, #2
 800c88c:	4413      	add	r3, r2
 800c88e:	009b      	lsls	r3, r3, #2
 800c890:	4a10      	ldr	r2, [pc, #64]	; (800c8d4 <xTaskPriorityInherit+0xe4>)
 800c892:	441a      	add	r2, r3
 800c894:	68bb      	ldr	r3, [r7, #8]
 800c896:	3304      	adds	r3, #4
 800c898:	4619      	mov	r1, r3
 800c89a:	4610      	mov	r0, r2
 800c89c:	f7fe f984 	bl	800aba8 <vListInsertEnd>
 800c8a0:	e004      	b.n	800c8ac <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c8a2:	4b0b      	ldr	r3, [pc, #44]	; (800c8d0 <xTaskPriorityInherit+0xe0>)
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8a8:	68bb      	ldr	r3, [r7, #8]
 800c8aa:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c8ac:	2301      	movs	r3, #1
 800c8ae:	60fb      	str	r3, [r7, #12]
 800c8b0:	e008      	b.n	800c8c4 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c8b2:	68bb      	ldr	r3, [r7, #8]
 800c8b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c8b6:	4b06      	ldr	r3, [pc, #24]	; (800c8d0 <xTaskPriorityInherit+0xe0>)
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8bc:	429a      	cmp	r2, r3
 800c8be:	d201      	bcs.n	800c8c4 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c8c0:	2301      	movs	r3, #1
 800c8c2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c8c4:	68fb      	ldr	r3, [r7, #12]
	}
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	3710      	adds	r7, #16
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	bd80      	pop	{r7, pc}
 800c8ce:	bf00      	nop
 800c8d0:	20000518 	.word	0x20000518
 800c8d4:	2000051c 	.word	0x2000051c
 800c8d8:	20000620 	.word	0x20000620

0800c8dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b086      	sub	sp, #24
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d06e      	beq.n	800c9d0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c8f2:	4b3a      	ldr	r3, [pc, #232]	; (800c9dc <xTaskPriorityDisinherit+0x100>)
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	693a      	ldr	r2, [r7, #16]
 800c8f8:	429a      	cmp	r2, r3
 800c8fa:	d00a      	beq.n	800c912 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c8fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c900:	f383 8811 	msr	BASEPRI, r3
 800c904:	f3bf 8f6f 	isb	sy
 800c908:	f3bf 8f4f 	dsb	sy
 800c90c:	60fb      	str	r3, [r7, #12]
}
 800c90e:	bf00      	nop
 800c910:	e7fe      	b.n	800c910 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c912:	693b      	ldr	r3, [r7, #16]
 800c914:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c916:	2b00      	cmp	r3, #0
 800c918:	d10a      	bne.n	800c930 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c91a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c91e:	f383 8811 	msr	BASEPRI, r3
 800c922:	f3bf 8f6f 	isb	sy
 800c926:	f3bf 8f4f 	dsb	sy
 800c92a:	60bb      	str	r3, [r7, #8]
}
 800c92c:	bf00      	nop
 800c92e:	e7fe      	b.n	800c92e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c930:	693b      	ldr	r3, [r7, #16]
 800c932:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c934:	1e5a      	subs	r2, r3, #1
 800c936:	693b      	ldr	r3, [r7, #16]
 800c938:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c93a:	693b      	ldr	r3, [r7, #16]
 800c93c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c93e:	693b      	ldr	r3, [r7, #16]
 800c940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c942:	429a      	cmp	r2, r3
 800c944:	d044      	beq.n	800c9d0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c946:	693b      	ldr	r3, [r7, #16]
 800c948:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d140      	bne.n	800c9d0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c94e:	693b      	ldr	r3, [r7, #16]
 800c950:	3304      	adds	r3, #4
 800c952:	4618      	mov	r0, r3
 800c954:	f7fe f985 	bl	800ac62 <uxListRemove>
 800c958:	4603      	mov	r3, r0
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d115      	bne.n	800c98a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c95e:	693b      	ldr	r3, [r7, #16]
 800c960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c962:	491f      	ldr	r1, [pc, #124]	; (800c9e0 <xTaskPriorityDisinherit+0x104>)
 800c964:	4613      	mov	r3, r2
 800c966:	009b      	lsls	r3, r3, #2
 800c968:	4413      	add	r3, r2
 800c96a:	009b      	lsls	r3, r3, #2
 800c96c:	440b      	add	r3, r1
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d10a      	bne.n	800c98a <xTaskPriorityDisinherit+0xae>
 800c974:	693b      	ldr	r3, [r7, #16]
 800c976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c978:	2201      	movs	r2, #1
 800c97a:	fa02 f303 	lsl.w	r3, r2, r3
 800c97e:	43da      	mvns	r2, r3
 800c980:	4b18      	ldr	r3, [pc, #96]	; (800c9e4 <xTaskPriorityDisinherit+0x108>)
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	4013      	ands	r3, r2
 800c986:	4a17      	ldr	r2, [pc, #92]	; (800c9e4 <xTaskPriorityDisinherit+0x108>)
 800c988:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c98a:	693b      	ldr	r3, [r7, #16]
 800c98c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c98e:	693b      	ldr	r3, [r7, #16]
 800c990:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c992:	693b      	ldr	r3, [r7, #16]
 800c994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c996:	f1c3 0207 	rsb	r2, r3, #7
 800c99a:	693b      	ldr	r3, [r7, #16]
 800c99c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c99e:	693b      	ldr	r3, [r7, #16]
 800c9a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9a2:	2201      	movs	r2, #1
 800c9a4:	409a      	lsls	r2, r3
 800c9a6:	4b0f      	ldr	r3, [pc, #60]	; (800c9e4 <xTaskPriorityDisinherit+0x108>)
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	4313      	orrs	r3, r2
 800c9ac:	4a0d      	ldr	r2, [pc, #52]	; (800c9e4 <xTaskPriorityDisinherit+0x108>)
 800c9ae:	6013      	str	r3, [r2, #0]
 800c9b0:	693b      	ldr	r3, [r7, #16]
 800c9b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9b4:	4613      	mov	r3, r2
 800c9b6:	009b      	lsls	r3, r3, #2
 800c9b8:	4413      	add	r3, r2
 800c9ba:	009b      	lsls	r3, r3, #2
 800c9bc:	4a08      	ldr	r2, [pc, #32]	; (800c9e0 <xTaskPriorityDisinherit+0x104>)
 800c9be:	441a      	add	r2, r3
 800c9c0:	693b      	ldr	r3, [r7, #16]
 800c9c2:	3304      	adds	r3, #4
 800c9c4:	4619      	mov	r1, r3
 800c9c6:	4610      	mov	r0, r2
 800c9c8:	f7fe f8ee 	bl	800aba8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c9cc:	2301      	movs	r3, #1
 800c9ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c9d0:	697b      	ldr	r3, [r7, #20]
	}
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	3718      	adds	r7, #24
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	bd80      	pop	{r7, pc}
 800c9da:	bf00      	nop
 800c9dc:	20000518 	.word	0x20000518
 800c9e0:	2000051c 	.word	0x2000051c
 800c9e4:	20000620 	.word	0x20000620

0800c9e8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b088      	sub	sp, #32
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
 800c9f0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c9f6:	2301      	movs	r3, #1
 800c9f8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d077      	beq.n	800caf0 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ca00:	69bb      	ldr	r3, [r7, #24]
 800ca02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d10a      	bne.n	800ca1e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800ca08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca0c:	f383 8811 	msr	BASEPRI, r3
 800ca10:	f3bf 8f6f 	isb	sy
 800ca14:	f3bf 8f4f 	dsb	sy
 800ca18:	60fb      	str	r3, [r7, #12]
}
 800ca1a:	bf00      	nop
 800ca1c:	e7fe      	b.n	800ca1c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ca1e:	69bb      	ldr	r3, [r7, #24]
 800ca20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca22:	683a      	ldr	r2, [r7, #0]
 800ca24:	429a      	cmp	r2, r3
 800ca26:	d902      	bls.n	800ca2e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ca28:	683b      	ldr	r3, [r7, #0]
 800ca2a:	61fb      	str	r3, [r7, #28]
 800ca2c:	e002      	b.n	800ca34 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ca2e:	69bb      	ldr	r3, [r7, #24]
 800ca30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca32:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ca34:	69bb      	ldr	r3, [r7, #24]
 800ca36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca38:	69fa      	ldr	r2, [r7, #28]
 800ca3a:	429a      	cmp	r2, r3
 800ca3c:	d058      	beq.n	800caf0 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ca3e:	69bb      	ldr	r3, [r7, #24]
 800ca40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ca42:	697a      	ldr	r2, [r7, #20]
 800ca44:	429a      	cmp	r2, r3
 800ca46:	d153      	bne.n	800caf0 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ca48:	4b2b      	ldr	r3, [pc, #172]	; (800caf8 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	69ba      	ldr	r2, [r7, #24]
 800ca4e:	429a      	cmp	r2, r3
 800ca50:	d10a      	bne.n	800ca68 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800ca52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca56:	f383 8811 	msr	BASEPRI, r3
 800ca5a:	f3bf 8f6f 	isb	sy
 800ca5e:	f3bf 8f4f 	dsb	sy
 800ca62:	60bb      	str	r3, [r7, #8]
}
 800ca64:	bf00      	nop
 800ca66:	e7fe      	b.n	800ca66 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ca68:	69bb      	ldr	r3, [r7, #24]
 800ca6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca6c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ca6e:	69bb      	ldr	r3, [r7, #24]
 800ca70:	69fa      	ldr	r2, [r7, #28]
 800ca72:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ca74:	69bb      	ldr	r3, [r7, #24]
 800ca76:	699b      	ldr	r3, [r3, #24]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	db04      	blt.n	800ca86 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca7c:	69fb      	ldr	r3, [r7, #28]
 800ca7e:	f1c3 0207 	rsb	r2, r3, #7
 800ca82:	69bb      	ldr	r3, [r7, #24]
 800ca84:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ca86:	69bb      	ldr	r3, [r7, #24]
 800ca88:	6959      	ldr	r1, [r3, #20]
 800ca8a:	693a      	ldr	r2, [r7, #16]
 800ca8c:	4613      	mov	r3, r2
 800ca8e:	009b      	lsls	r3, r3, #2
 800ca90:	4413      	add	r3, r2
 800ca92:	009b      	lsls	r3, r3, #2
 800ca94:	4a19      	ldr	r2, [pc, #100]	; (800cafc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800ca96:	4413      	add	r3, r2
 800ca98:	4299      	cmp	r1, r3
 800ca9a:	d129      	bne.n	800caf0 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ca9c:	69bb      	ldr	r3, [r7, #24]
 800ca9e:	3304      	adds	r3, #4
 800caa0:	4618      	mov	r0, r3
 800caa2:	f7fe f8de 	bl	800ac62 <uxListRemove>
 800caa6:	4603      	mov	r3, r0
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d10a      	bne.n	800cac2 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800caac:	69bb      	ldr	r3, [r7, #24]
 800caae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cab0:	2201      	movs	r2, #1
 800cab2:	fa02 f303 	lsl.w	r3, r2, r3
 800cab6:	43da      	mvns	r2, r3
 800cab8:	4b11      	ldr	r3, [pc, #68]	; (800cb00 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	4013      	ands	r3, r2
 800cabe:	4a10      	ldr	r2, [pc, #64]	; (800cb00 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800cac0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800cac2:	69bb      	ldr	r3, [r7, #24]
 800cac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cac6:	2201      	movs	r2, #1
 800cac8:	409a      	lsls	r2, r3
 800caca:	4b0d      	ldr	r3, [pc, #52]	; (800cb00 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	4313      	orrs	r3, r2
 800cad0:	4a0b      	ldr	r2, [pc, #44]	; (800cb00 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800cad2:	6013      	str	r3, [r2, #0]
 800cad4:	69bb      	ldr	r3, [r7, #24]
 800cad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cad8:	4613      	mov	r3, r2
 800cada:	009b      	lsls	r3, r3, #2
 800cadc:	4413      	add	r3, r2
 800cade:	009b      	lsls	r3, r3, #2
 800cae0:	4a06      	ldr	r2, [pc, #24]	; (800cafc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800cae2:	441a      	add	r2, r3
 800cae4:	69bb      	ldr	r3, [r7, #24]
 800cae6:	3304      	adds	r3, #4
 800cae8:	4619      	mov	r1, r3
 800caea:	4610      	mov	r0, r2
 800caec:	f7fe f85c 	bl	800aba8 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800caf0:	bf00      	nop
 800caf2:	3720      	adds	r7, #32
 800caf4:	46bd      	mov	sp, r7
 800caf6:	bd80      	pop	{r7, pc}
 800caf8:	20000518 	.word	0x20000518
 800cafc:	2000051c 	.word	0x2000051c
 800cb00:	20000620 	.word	0x20000620

0800cb04 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800cb04:	b480      	push	{r7}
 800cb06:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800cb08:	4b07      	ldr	r3, [pc, #28]	; (800cb28 <pvTaskIncrementMutexHeldCount+0x24>)
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d004      	beq.n	800cb1a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800cb10:	4b05      	ldr	r3, [pc, #20]	; (800cb28 <pvTaskIncrementMutexHeldCount+0x24>)
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cb16:	3201      	adds	r2, #1
 800cb18:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800cb1a:	4b03      	ldr	r3, [pc, #12]	; (800cb28 <pvTaskIncrementMutexHeldCount+0x24>)
 800cb1c:	681b      	ldr	r3, [r3, #0]
	}
 800cb1e:	4618      	mov	r0, r3
 800cb20:	46bd      	mov	sp, r7
 800cb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb26:	4770      	bx	lr
 800cb28:	20000518 	.word	0x20000518

0800cb2c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b084      	sub	sp, #16
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
 800cb34:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cb36:	4b29      	ldr	r3, [pc, #164]	; (800cbdc <prvAddCurrentTaskToDelayedList+0xb0>)
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cb3c:	4b28      	ldr	r3, [pc, #160]	; (800cbe0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	3304      	adds	r3, #4
 800cb42:	4618      	mov	r0, r3
 800cb44:	f7fe f88d 	bl	800ac62 <uxListRemove>
 800cb48:	4603      	mov	r3, r0
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d10b      	bne.n	800cb66 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800cb4e:	4b24      	ldr	r3, [pc, #144]	; (800cbe0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb54:	2201      	movs	r2, #1
 800cb56:	fa02 f303 	lsl.w	r3, r2, r3
 800cb5a:	43da      	mvns	r2, r3
 800cb5c:	4b21      	ldr	r3, [pc, #132]	; (800cbe4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	4013      	ands	r3, r2
 800cb62:	4a20      	ldr	r2, [pc, #128]	; (800cbe4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800cb64:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb6c:	d10a      	bne.n	800cb84 <prvAddCurrentTaskToDelayedList+0x58>
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d007      	beq.n	800cb84 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cb74:	4b1a      	ldr	r3, [pc, #104]	; (800cbe0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	3304      	adds	r3, #4
 800cb7a:	4619      	mov	r1, r3
 800cb7c:	481a      	ldr	r0, [pc, #104]	; (800cbe8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800cb7e:	f7fe f813 	bl	800aba8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cb82:	e026      	b.n	800cbd2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cb84:	68fa      	ldr	r2, [r7, #12]
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	4413      	add	r3, r2
 800cb8a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cb8c:	4b14      	ldr	r3, [pc, #80]	; (800cbe0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	68ba      	ldr	r2, [r7, #8]
 800cb92:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cb94:	68ba      	ldr	r2, [r7, #8]
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	429a      	cmp	r2, r3
 800cb9a:	d209      	bcs.n	800cbb0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cb9c:	4b13      	ldr	r3, [pc, #76]	; (800cbec <prvAddCurrentTaskToDelayedList+0xc0>)
 800cb9e:	681a      	ldr	r2, [r3, #0]
 800cba0:	4b0f      	ldr	r3, [pc, #60]	; (800cbe0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	3304      	adds	r3, #4
 800cba6:	4619      	mov	r1, r3
 800cba8:	4610      	mov	r0, r2
 800cbaa:	f7fe f821 	bl	800abf0 <vListInsert>
}
 800cbae:	e010      	b.n	800cbd2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cbb0:	4b0f      	ldr	r3, [pc, #60]	; (800cbf0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800cbb2:	681a      	ldr	r2, [r3, #0]
 800cbb4:	4b0a      	ldr	r3, [pc, #40]	; (800cbe0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	3304      	adds	r3, #4
 800cbba:	4619      	mov	r1, r3
 800cbbc:	4610      	mov	r0, r2
 800cbbe:	f7fe f817 	bl	800abf0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cbc2:	4b0c      	ldr	r3, [pc, #48]	; (800cbf4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	68ba      	ldr	r2, [r7, #8]
 800cbc8:	429a      	cmp	r2, r3
 800cbca:	d202      	bcs.n	800cbd2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800cbcc:	4a09      	ldr	r2, [pc, #36]	; (800cbf4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800cbce:	68bb      	ldr	r3, [r7, #8]
 800cbd0:	6013      	str	r3, [r2, #0]
}
 800cbd2:	bf00      	nop
 800cbd4:	3710      	adds	r7, #16
 800cbd6:	46bd      	mov	sp, r7
 800cbd8:	bd80      	pop	{r7, pc}
 800cbda:	bf00      	nop
 800cbdc:	2000061c 	.word	0x2000061c
 800cbe0:	20000518 	.word	0x20000518
 800cbe4:	20000620 	.word	0x20000620
 800cbe8:	20000604 	.word	0x20000604
 800cbec:	200005d4 	.word	0x200005d4
 800cbf0:	200005d0 	.word	0x200005d0
 800cbf4:	20000638 	.word	0x20000638

0800cbf8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cbf8:	b480      	push	{r7}
 800cbfa:	b085      	sub	sp, #20
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	60f8      	str	r0, [r7, #12]
 800cc00:	60b9      	str	r1, [r7, #8]
 800cc02:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	3b04      	subs	r3, #4
 800cc08:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cc10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	3b04      	subs	r3, #4
 800cc16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cc18:	68bb      	ldr	r3, [r7, #8]
 800cc1a:	f023 0201 	bic.w	r2, r3, #1
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	3b04      	subs	r3, #4
 800cc26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cc28:	4a0c      	ldr	r2, [pc, #48]	; (800cc5c <pxPortInitialiseStack+0x64>)
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	3b14      	subs	r3, #20
 800cc32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cc34:	687a      	ldr	r2, [r7, #4]
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	3b04      	subs	r3, #4
 800cc3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	f06f 0202 	mvn.w	r2, #2
 800cc46:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	3b20      	subs	r3, #32
 800cc4c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cc4e:	68fb      	ldr	r3, [r7, #12]
}
 800cc50:	4618      	mov	r0, r3
 800cc52:	3714      	adds	r7, #20
 800cc54:	46bd      	mov	sp, r7
 800cc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5a:	4770      	bx	lr
 800cc5c:	0800cc61 	.word	0x0800cc61

0800cc60 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cc60:	b480      	push	{r7}
 800cc62:	b085      	sub	sp, #20
 800cc64:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cc66:	2300      	movs	r3, #0
 800cc68:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cc6a:	4b12      	ldr	r3, [pc, #72]	; (800ccb4 <prvTaskExitError+0x54>)
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc72:	d00a      	beq.n	800cc8a <prvTaskExitError+0x2a>
	__asm volatile
 800cc74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc78:	f383 8811 	msr	BASEPRI, r3
 800cc7c:	f3bf 8f6f 	isb	sy
 800cc80:	f3bf 8f4f 	dsb	sy
 800cc84:	60fb      	str	r3, [r7, #12]
}
 800cc86:	bf00      	nop
 800cc88:	e7fe      	b.n	800cc88 <prvTaskExitError+0x28>
	__asm volatile
 800cc8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc8e:	f383 8811 	msr	BASEPRI, r3
 800cc92:	f3bf 8f6f 	isb	sy
 800cc96:	f3bf 8f4f 	dsb	sy
 800cc9a:	60bb      	str	r3, [r7, #8]
}
 800cc9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cc9e:	bf00      	nop
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d0fc      	beq.n	800cca0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cca6:	bf00      	nop
 800cca8:	bf00      	nop
 800ccaa:	3714      	adds	r7, #20
 800ccac:	46bd      	mov	sp, r7
 800ccae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb2:	4770      	bx	lr
 800ccb4:	2000012c 	.word	0x2000012c
	...

0800ccc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ccc0:	4b07      	ldr	r3, [pc, #28]	; (800cce0 <pxCurrentTCBConst2>)
 800ccc2:	6819      	ldr	r1, [r3, #0]
 800ccc4:	6808      	ldr	r0, [r1, #0]
 800ccc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccca:	f380 8809 	msr	PSP, r0
 800ccce:	f3bf 8f6f 	isb	sy
 800ccd2:	f04f 0000 	mov.w	r0, #0
 800ccd6:	f380 8811 	msr	BASEPRI, r0
 800ccda:	4770      	bx	lr
 800ccdc:	f3af 8000 	nop.w

0800cce0 <pxCurrentTCBConst2>:
 800cce0:	20000518 	.word	0x20000518
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cce4:	bf00      	nop
 800cce6:	bf00      	nop

0800cce8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cce8:	4808      	ldr	r0, [pc, #32]	; (800cd0c <prvPortStartFirstTask+0x24>)
 800ccea:	6800      	ldr	r0, [r0, #0]
 800ccec:	6800      	ldr	r0, [r0, #0]
 800ccee:	f380 8808 	msr	MSP, r0
 800ccf2:	f04f 0000 	mov.w	r0, #0
 800ccf6:	f380 8814 	msr	CONTROL, r0
 800ccfa:	b662      	cpsie	i
 800ccfc:	b661      	cpsie	f
 800ccfe:	f3bf 8f4f 	dsb	sy
 800cd02:	f3bf 8f6f 	isb	sy
 800cd06:	df00      	svc	0
 800cd08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cd0a:	bf00      	nop
 800cd0c:	e000ed08 	.word	0xe000ed08

0800cd10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b086      	sub	sp, #24
 800cd14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cd16:	4b46      	ldr	r3, [pc, #280]	; (800ce30 <xPortStartScheduler+0x120>)
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	4a46      	ldr	r2, [pc, #280]	; (800ce34 <xPortStartScheduler+0x124>)
 800cd1c:	4293      	cmp	r3, r2
 800cd1e:	d10a      	bne.n	800cd36 <xPortStartScheduler+0x26>
	__asm volatile
 800cd20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd24:	f383 8811 	msr	BASEPRI, r3
 800cd28:	f3bf 8f6f 	isb	sy
 800cd2c:	f3bf 8f4f 	dsb	sy
 800cd30:	613b      	str	r3, [r7, #16]
}
 800cd32:	bf00      	nop
 800cd34:	e7fe      	b.n	800cd34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cd36:	4b3e      	ldr	r3, [pc, #248]	; (800ce30 <xPortStartScheduler+0x120>)
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	4a3f      	ldr	r2, [pc, #252]	; (800ce38 <xPortStartScheduler+0x128>)
 800cd3c:	4293      	cmp	r3, r2
 800cd3e:	d10a      	bne.n	800cd56 <xPortStartScheduler+0x46>
	__asm volatile
 800cd40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd44:	f383 8811 	msr	BASEPRI, r3
 800cd48:	f3bf 8f6f 	isb	sy
 800cd4c:	f3bf 8f4f 	dsb	sy
 800cd50:	60fb      	str	r3, [r7, #12]
}
 800cd52:	bf00      	nop
 800cd54:	e7fe      	b.n	800cd54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cd56:	4b39      	ldr	r3, [pc, #228]	; (800ce3c <xPortStartScheduler+0x12c>)
 800cd58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cd5a:	697b      	ldr	r3, [r7, #20]
 800cd5c:	781b      	ldrb	r3, [r3, #0]
 800cd5e:	b2db      	uxtb	r3, r3
 800cd60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cd62:	697b      	ldr	r3, [r7, #20]
 800cd64:	22ff      	movs	r2, #255	; 0xff
 800cd66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cd68:	697b      	ldr	r3, [r7, #20]
 800cd6a:	781b      	ldrb	r3, [r3, #0]
 800cd6c:	b2db      	uxtb	r3, r3
 800cd6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cd70:	78fb      	ldrb	r3, [r7, #3]
 800cd72:	b2db      	uxtb	r3, r3
 800cd74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cd78:	b2da      	uxtb	r2, r3
 800cd7a:	4b31      	ldr	r3, [pc, #196]	; (800ce40 <xPortStartScheduler+0x130>)
 800cd7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cd7e:	4b31      	ldr	r3, [pc, #196]	; (800ce44 <xPortStartScheduler+0x134>)
 800cd80:	2207      	movs	r2, #7
 800cd82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cd84:	e009      	b.n	800cd9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800cd86:	4b2f      	ldr	r3, [pc, #188]	; (800ce44 <xPortStartScheduler+0x134>)
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	3b01      	subs	r3, #1
 800cd8c:	4a2d      	ldr	r2, [pc, #180]	; (800ce44 <xPortStartScheduler+0x134>)
 800cd8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cd90:	78fb      	ldrb	r3, [r7, #3]
 800cd92:	b2db      	uxtb	r3, r3
 800cd94:	005b      	lsls	r3, r3, #1
 800cd96:	b2db      	uxtb	r3, r3
 800cd98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cd9a:	78fb      	ldrb	r3, [r7, #3]
 800cd9c:	b2db      	uxtb	r3, r3
 800cd9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cda2:	2b80      	cmp	r3, #128	; 0x80
 800cda4:	d0ef      	beq.n	800cd86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cda6:	4b27      	ldr	r3, [pc, #156]	; (800ce44 <xPortStartScheduler+0x134>)
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	f1c3 0307 	rsb	r3, r3, #7
 800cdae:	2b04      	cmp	r3, #4
 800cdb0:	d00a      	beq.n	800cdc8 <xPortStartScheduler+0xb8>
	__asm volatile
 800cdb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdb6:	f383 8811 	msr	BASEPRI, r3
 800cdba:	f3bf 8f6f 	isb	sy
 800cdbe:	f3bf 8f4f 	dsb	sy
 800cdc2:	60bb      	str	r3, [r7, #8]
}
 800cdc4:	bf00      	nop
 800cdc6:	e7fe      	b.n	800cdc6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cdc8:	4b1e      	ldr	r3, [pc, #120]	; (800ce44 <xPortStartScheduler+0x134>)
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	021b      	lsls	r3, r3, #8
 800cdce:	4a1d      	ldr	r2, [pc, #116]	; (800ce44 <xPortStartScheduler+0x134>)
 800cdd0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cdd2:	4b1c      	ldr	r3, [pc, #112]	; (800ce44 <xPortStartScheduler+0x134>)
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cdda:	4a1a      	ldr	r2, [pc, #104]	; (800ce44 <xPortStartScheduler+0x134>)
 800cddc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	b2da      	uxtb	r2, r3
 800cde2:	697b      	ldr	r3, [r7, #20]
 800cde4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cde6:	4b18      	ldr	r3, [pc, #96]	; (800ce48 <xPortStartScheduler+0x138>)
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	4a17      	ldr	r2, [pc, #92]	; (800ce48 <xPortStartScheduler+0x138>)
 800cdec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cdf0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cdf2:	4b15      	ldr	r3, [pc, #84]	; (800ce48 <xPortStartScheduler+0x138>)
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	4a14      	ldr	r2, [pc, #80]	; (800ce48 <xPortStartScheduler+0x138>)
 800cdf8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cdfc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cdfe:	f000 f8dd 	bl	800cfbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ce02:	4b12      	ldr	r3, [pc, #72]	; (800ce4c <xPortStartScheduler+0x13c>)
 800ce04:	2200      	movs	r2, #0
 800ce06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ce08:	f000 f8fc 	bl	800d004 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ce0c:	4b10      	ldr	r3, [pc, #64]	; (800ce50 <xPortStartScheduler+0x140>)
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	4a0f      	ldr	r2, [pc, #60]	; (800ce50 <xPortStartScheduler+0x140>)
 800ce12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ce16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ce18:	f7ff ff66 	bl	800cce8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ce1c:	f7ff fa8e 	bl	800c33c <vTaskSwitchContext>
	prvTaskExitError();
 800ce20:	f7ff ff1e 	bl	800cc60 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ce24:	2300      	movs	r3, #0
}
 800ce26:	4618      	mov	r0, r3
 800ce28:	3718      	adds	r7, #24
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	bd80      	pop	{r7, pc}
 800ce2e:	bf00      	nop
 800ce30:	e000ed00 	.word	0xe000ed00
 800ce34:	410fc271 	.word	0x410fc271
 800ce38:	410fc270 	.word	0x410fc270
 800ce3c:	e000e400 	.word	0xe000e400
 800ce40:	20000644 	.word	0x20000644
 800ce44:	20000648 	.word	0x20000648
 800ce48:	e000ed20 	.word	0xe000ed20
 800ce4c:	2000012c 	.word	0x2000012c
 800ce50:	e000ef34 	.word	0xe000ef34

0800ce54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ce54:	b480      	push	{r7}
 800ce56:	b083      	sub	sp, #12
 800ce58:	af00      	add	r7, sp, #0
	__asm volatile
 800ce5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce5e:	f383 8811 	msr	BASEPRI, r3
 800ce62:	f3bf 8f6f 	isb	sy
 800ce66:	f3bf 8f4f 	dsb	sy
 800ce6a:	607b      	str	r3, [r7, #4]
}
 800ce6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ce6e:	4b0f      	ldr	r3, [pc, #60]	; (800ceac <vPortEnterCritical+0x58>)
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	3301      	adds	r3, #1
 800ce74:	4a0d      	ldr	r2, [pc, #52]	; (800ceac <vPortEnterCritical+0x58>)
 800ce76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ce78:	4b0c      	ldr	r3, [pc, #48]	; (800ceac <vPortEnterCritical+0x58>)
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	2b01      	cmp	r3, #1
 800ce7e:	d10f      	bne.n	800cea0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ce80:	4b0b      	ldr	r3, [pc, #44]	; (800ceb0 <vPortEnterCritical+0x5c>)
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	b2db      	uxtb	r3, r3
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d00a      	beq.n	800cea0 <vPortEnterCritical+0x4c>
	__asm volatile
 800ce8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce8e:	f383 8811 	msr	BASEPRI, r3
 800ce92:	f3bf 8f6f 	isb	sy
 800ce96:	f3bf 8f4f 	dsb	sy
 800ce9a:	603b      	str	r3, [r7, #0]
}
 800ce9c:	bf00      	nop
 800ce9e:	e7fe      	b.n	800ce9e <vPortEnterCritical+0x4a>
	}
}
 800cea0:	bf00      	nop
 800cea2:	370c      	adds	r7, #12
 800cea4:	46bd      	mov	sp, r7
 800cea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceaa:	4770      	bx	lr
 800ceac:	2000012c 	.word	0x2000012c
 800ceb0:	e000ed04 	.word	0xe000ed04

0800ceb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ceb4:	b480      	push	{r7}
 800ceb6:	b083      	sub	sp, #12
 800ceb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ceba:	4b12      	ldr	r3, [pc, #72]	; (800cf04 <vPortExitCritical+0x50>)
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d10a      	bne.n	800ced8 <vPortExitCritical+0x24>
	__asm volatile
 800cec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cec6:	f383 8811 	msr	BASEPRI, r3
 800ceca:	f3bf 8f6f 	isb	sy
 800cece:	f3bf 8f4f 	dsb	sy
 800ced2:	607b      	str	r3, [r7, #4]
}
 800ced4:	bf00      	nop
 800ced6:	e7fe      	b.n	800ced6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ced8:	4b0a      	ldr	r3, [pc, #40]	; (800cf04 <vPortExitCritical+0x50>)
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	3b01      	subs	r3, #1
 800cede:	4a09      	ldr	r2, [pc, #36]	; (800cf04 <vPortExitCritical+0x50>)
 800cee0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cee2:	4b08      	ldr	r3, [pc, #32]	; (800cf04 <vPortExitCritical+0x50>)
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d105      	bne.n	800cef6 <vPortExitCritical+0x42>
 800ceea:	2300      	movs	r3, #0
 800ceec:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ceee:	683b      	ldr	r3, [r7, #0]
 800cef0:	f383 8811 	msr	BASEPRI, r3
}
 800cef4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cef6:	bf00      	nop
 800cef8:	370c      	adds	r7, #12
 800cefa:	46bd      	mov	sp, r7
 800cefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf00:	4770      	bx	lr
 800cf02:	bf00      	nop
 800cf04:	2000012c 	.word	0x2000012c
	...

0800cf10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cf10:	f3ef 8009 	mrs	r0, PSP
 800cf14:	f3bf 8f6f 	isb	sy
 800cf18:	4b15      	ldr	r3, [pc, #84]	; (800cf70 <pxCurrentTCBConst>)
 800cf1a:	681a      	ldr	r2, [r3, #0]
 800cf1c:	f01e 0f10 	tst.w	lr, #16
 800cf20:	bf08      	it	eq
 800cf22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cf26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf2a:	6010      	str	r0, [r2, #0]
 800cf2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cf30:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cf34:	f380 8811 	msr	BASEPRI, r0
 800cf38:	f3bf 8f4f 	dsb	sy
 800cf3c:	f3bf 8f6f 	isb	sy
 800cf40:	f7ff f9fc 	bl	800c33c <vTaskSwitchContext>
 800cf44:	f04f 0000 	mov.w	r0, #0
 800cf48:	f380 8811 	msr	BASEPRI, r0
 800cf4c:	bc09      	pop	{r0, r3}
 800cf4e:	6819      	ldr	r1, [r3, #0]
 800cf50:	6808      	ldr	r0, [r1, #0]
 800cf52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf56:	f01e 0f10 	tst.w	lr, #16
 800cf5a:	bf08      	it	eq
 800cf5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cf60:	f380 8809 	msr	PSP, r0
 800cf64:	f3bf 8f6f 	isb	sy
 800cf68:	4770      	bx	lr
 800cf6a:	bf00      	nop
 800cf6c:	f3af 8000 	nop.w

0800cf70 <pxCurrentTCBConst>:
 800cf70:	20000518 	.word	0x20000518
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cf74:	bf00      	nop
 800cf76:	bf00      	nop

0800cf78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b082      	sub	sp, #8
 800cf7c:	af00      	add	r7, sp, #0
	__asm volatile
 800cf7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf82:	f383 8811 	msr	BASEPRI, r3
 800cf86:	f3bf 8f6f 	isb	sy
 800cf8a:	f3bf 8f4f 	dsb	sy
 800cf8e:	607b      	str	r3, [r7, #4]
}
 800cf90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cf92:	f7ff f91b 	bl	800c1cc <xTaskIncrementTick>
 800cf96:	4603      	mov	r3, r0
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d003      	beq.n	800cfa4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cf9c:	4b06      	ldr	r3, [pc, #24]	; (800cfb8 <SysTick_Handler+0x40>)
 800cf9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cfa2:	601a      	str	r2, [r3, #0]
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cfa8:	683b      	ldr	r3, [r7, #0]
 800cfaa:	f383 8811 	msr	BASEPRI, r3
}
 800cfae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cfb0:	bf00      	nop
 800cfb2:	3708      	adds	r7, #8
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	bd80      	pop	{r7, pc}
 800cfb8:	e000ed04 	.word	0xe000ed04

0800cfbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cfbc:	b480      	push	{r7}
 800cfbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cfc0:	4b0b      	ldr	r3, [pc, #44]	; (800cff0 <vPortSetupTimerInterrupt+0x34>)
 800cfc2:	2200      	movs	r2, #0
 800cfc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cfc6:	4b0b      	ldr	r3, [pc, #44]	; (800cff4 <vPortSetupTimerInterrupt+0x38>)
 800cfc8:	2200      	movs	r2, #0
 800cfca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cfcc:	4b0a      	ldr	r3, [pc, #40]	; (800cff8 <vPortSetupTimerInterrupt+0x3c>)
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	4a0a      	ldr	r2, [pc, #40]	; (800cffc <vPortSetupTimerInterrupt+0x40>)
 800cfd2:	fba2 2303 	umull	r2, r3, r2, r3
 800cfd6:	099b      	lsrs	r3, r3, #6
 800cfd8:	4a09      	ldr	r2, [pc, #36]	; (800d000 <vPortSetupTimerInterrupt+0x44>)
 800cfda:	3b01      	subs	r3, #1
 800cfdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cfde:	4b04      	ldr	r3, [pc, #16]	; (800cff0 <vPortSetupTimerInterrupt+0x34>)
 800cfe0:	2207      	movs	r2, #7
 800cfe2:	601a      	str	r2, [r3, #0]
}
 800cfe4:	bf00      	nop
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfec:	4770      	bx	lr
 800cfee:	bf00      	nop
 800cff0:	e000e010 	.word	0xe000e010
 800cff4:	e000e018 	.word	0xe000e018
 800cff8:	20000010 	.word	0x20000010
 800cffc:	10624dd3 	.word	0x10624dd3
 800d000:	e000e014 	.word	0xe000e014

0800d004 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d004:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d014 <vPortEnableVFP+0x10>
 800d008:	6801      	ldr	r1, [r0, #0]
 800d00a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d00e:	6001      	str	r1, [r0, #0]
 800d010:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d012:	bf00      	nop
 800d014:	e000ed88 	.word	0xe000ed88

0800d018 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d018:	b480      	push	{r7}
 800d01a:	b085      	sub	sp, #20
 800d01c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d01e:	f3ef 8305 	mrs	r3, IPSR
 800d022:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	2b0f      	cmp	r3, #15
 800d028:	d914      	bls.n	800d054 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d02a:	4a17      	ldr	r2, [pc, #92]	; (800d088 <vPortValidateInterruptPriority+0x70>)
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	4413      	add	r3, r2
 800d030:	781b      	ldrb	r3, [r3, #0]
 800d032:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d034:	4b15      	ldr	r3, [pc, #84]	; (800d08c <vPortValidateInterruptPriority+0x74>)
 800d036:	781b      	ldrb	r3, [r3, #0]
 800d038:	7afa      	ldrb	r2, [r7, #11]
 800d03a:	429a      	cmp	r2, r3
 800d03c:	d20a      	bcs.n	800d054 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d03e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d042:	f383 8811 	msr	BASEPRI, r3
 800d046:	f3bf 8f6f 	isb	sy
 800d04a:	f3bf 8f4f 	dsb	sy
 800d04e:	607b      	str	r3, [r7, #4]
}
 800d050:	bf00      	nop
 800d052:	e7fe      	b.n	800d052 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d054:	4b0e      	ldr	r3, [pc, #56]	; (800d090 <vPortValidateInterruptPriority+0x78>)
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d05c:	4b0d      	ldr	r3, [pc, #52]	; (800d094 <vPortValidateInterruptPriority+0x7c>)
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	429a      	cmp	r2, r3
 800d062:	d90a      	bls.n	800d07a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d064:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d068:	f383 8811 	msr	BASEPRI, r3
 800d06c:	f3bf 8f6f 	isb	sy
 800d070:	f3bf 8f4f 	dsb	sy
 800d074:	603b      	str	r3, [r7, #0]
}
 800d076:	bf00      	nop
 800d078:	e7fe      	b.n	800d078 <vPortValidateInterruptPriority+0x60>
	}
 800d07a:	bf00      	nop
 800d07c:	3714      	adds	r7, #20
 800d07e:	46bd      	mov	sp, r7
 800d080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d084:	4770      	bx	lr
 800d086:	bf00      	nop
 800d088:	e000e3f0 	.word	0xe000e3f0
 800d08c:	20000644 	.word	0x20000644
 800d090:	e000ed0c 	.word	0xe000ed0c
 800d094:	20000648 	.word	0x20000648

0800d098 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b08a      	sub	sp, #40	; 0x28
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d0a4:	f7fe ffc6 	bl	800c034 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d0a8:	4b5b      	ldr	r3, [pc, #364]	; (800d218 <pvPortMalloc+0x180>)
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d101      	bne.n	800d0b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d0b0:	f000 f920 	bl	800d2f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d0b4:	4b59      	ldr	r3, [pc, #356]	; (800d21c <pvPortMalloc+0x184>)
 800d0b6:	681a      	ldr	r2, [r3, #0]
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	4013      	ands	r3, r2
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	f040 8093 	bne.w	800d1e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d01d      	beq.n	800d104 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d0c8:	2208      	movs	r2, #8
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	4413      	add	r3, r2
 800d0ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	f003 0307 	and.w	r3, r3, #7
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d014      	beq.n	800d104 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	f023 0307 	bic.w	r3, r3, #7
 800d0e0:	3308      	adds	r3, #8
 800d0e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	f003 0307 	and.w	r3, r3, #7
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d00a      	beq.n	800d104 <pvPortMalloc+0x6c>
	__asm volatile
 800d0ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0f2:	f383 8811 	msr	BASEPRI, r3
 800d0f6:	f3bf 8f6f 	isb	sy
 800d0fa:	f3bf 8f4f 	dsb	sy
 800d0fe:	617b      	str	r3, [r7, #20]
}
 800d100:	bf00      	nop
 800d102:	e7fe      	b.n	800d102 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d06e      	beq.n	800d1e8 <pvPortMalloc+0x150>
 800d10a:	4b45      	ldr	r3, [pc, #276]	; (800d220 <pvPortMalloc+0x188>)
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	687a      	ldr	r2, [r7, #4]
 800d110:	429a      	cmp	r2, r3
 800d112:	d869      	bhi.n	800d1e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d114:	4b43      	ldr	r3, [pc, #268]	; (800d224 <pvPortMalloc+0x18c>)
 800d116:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d118:	4b42      	ldr	r3, [pc, #264]	; (800d224 <pvPortMalloc+0x18c>)
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d11e:	e004      	b.n	800d12a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d122:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d12c:	685b      	ldr	r3, [r3, #4]
 800d12e:	687a      	ldr	r2, [r7, #4]
 800d130:	429a      	cmp	r2, r3
 800d132:	d903      	bls.n	800d13c <pvPortMalloc+0xa4>
 800d134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d1f1      	bne.n	800d120 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d13c:	4b36      	ldr	r3, [pc, #216]	; (800d218 <pvPortMalloc+0x180>)
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d142:	429a      	cmp	r2, r3
 800d144:	d050      	beq.n	800d1e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d146:	6a3b      	ldr	r3, [r7, #32]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	2208      	movs	r2, #8
 800d14c:	4413      	add	r3, r2
 800d14e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d152:	681a      	ldr	r2, [r3, #0]
 800d154:	6a3b      	ldr	r3, [r7, #32]
 800d156:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d15a:	685a      	ldr	r2, [r3, #4]
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	1ad2      	subs	r2, r2, r3
 800d160:	2308      	movs	r3, #8
 800d162:	005b      	lsls	r3, r3, #1
 800d164:	429a      	cmp	r2, r3
 800d166:	d91f      	bls.n	800d1a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	4413      	add	r3, r2
 800d16e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d170:	69bb      	ldr	r3, [r7, #24]
 800d172:	f003 0307 	and.w	r3, r3, #7
 800d176:	2b00      	cmp	r3, #0
 800d178:	d00a      	beq.n	800d190 <pvPortMalloc+0xf8>
	__asm volatile
 800d17a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d17e:	f383 8811 	msr	BASEPRI, r3
 800d182:	f3bf 8f6f 	isb	sy
 800d186:	f3bf 8f4f 	dsb	sy
 800d18a:	613b      	str	r3, [r7, #16]
}
 800d18c:	bf00      	nop
 800d18e:	e7fe      	b.n	800d18e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d192:	685a      	ldr	r2, [r3, #4]
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	1ad2      	subs	r2, r2, r3
 800d198:	69bb      	ldr	r3, [r7, #24]
 800d19a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d19e:	687a      	ldr	r2, [r7, #4]
 800d1a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d1a2:	69b8      	ldr	r0, [r7, #24]
 800d1a4:	f000 f908 	bl	800d3b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d1a8:	4b1d      	ldr	r3, [pc, #116]	; (800d220 <pvPortMalloc+0x188>)
 800d1aa:	681a      	ldr	r2, [r3, #0]
 800d1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ae:	685b      	ldr	r3, [r3, #4]
 800d1b0:	1ad3      	subs	r3, r2, r3
 800d1b2:	4a1b      	ldr	r2, [pc, #108]	; (800d220 <pvPortMalloc+0x188>)
 800d1b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d1b6:	4b1a      	ldr	r3, [pc, #104]	; (800d220 <pvPortMalloc+0x188>)
 800d1b8:	681a      	ldr	r2, [r3, #0]
 800d1ba:	4b1b      	ldr	r3, [pc, #108]	; (800d228 <pvPortMalloc+0x190>)
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	429a      	cmp	r2, r3
 800d1c0:	d203      	bcs.n	800d1ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d1c2:	4b17      	ldr	r3, [pc, #92]	; (800d220 <pvPortMalloc+0x188>)
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	4a18      	ldr	r2, [pc, #96]	; (800d228 <pvPortMalloc+0x190>)
 800d1c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1cc:	685a      	ldr	r2, [r3, #4]
 800d1ce:	4b13      	ldr	r3, [pc, #76]	; (800d21c <pvPortMalloc+0x184>)
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	431a      	orrs	r2, r3
 800d1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1da:	2200      	movs	r2, #0
 800d1dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d1de:	4b13      	ldr	r3, [pc, #76]	; (800d22c <pvPortMalloc+0x194>)
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	3301      	adds	r3, #1
 800d1e4:	4a11      	ldr	r2, [pc, #68]	; (800d22c <pvPortMalloc+0x194>)
 800d1e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d1e8:	f7fe ff32 	bl	800c050 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d1ec:	69fb      	ldr	r3, [r7, #28]
 800d1ee:	f003 0307 	and.w	r3, r3, #7
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d00a      	beq.n	800d20c <pvPortMalloc+0x174>
	__asm volatile
 800d1f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1fa:	f383 8811 	msr	BASEPRI, r3
 800d1fe:	f3bf 8f6f 	isb	sy
 800d202:	f3bf 8f4f 	dsb	sy
 800d206:	60fb      	str	r3, [r7, #12]
}
 800d208:	bf00      	nop
 800d20a:	e7fe      	b.n	800d20a <pvPortMalloc+0x172>
	return pvReturn;
 800d20c:	69fb      	ldr	r3, [r7, #28]
}
 800d20e:	4618      	mov	r0, r3
 800d210:	3728      	adds	r7, #40	; 0x28
 800d212:	46bd      	mov	sp, r7
 800d214:	bd80      	pop	{r7, pc}
 800d216:	bf00      	nop
 800d218:	20004254 	.word	0x20004254
 800d21c:	20004268 	.word	0x20004268
 800d220:	20004258 	.word	0x20004258
 800d224:	2000424c 	.word	0x2000424c
 800d228:	2000425c 	.word	0x2000425c
 800d22c:	20004260 	.word	0x20004260

0800d230 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b086      	sub	sp, #24
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d04d      	beq.n	800d2de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d242:	2308      	movs	r3, #8
 800d244:	425b      	negs	r3, r3
 800d246:	697a      	ldr	r2, [r7, #20]
 800d248:	4413      	add	r3, r2
 800d24a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d24c:	697b      	ldr	r3, [r7, #20]
 800d24e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d250:	693b      	ldr	r3, [r7, #16]
 800d252:	685a      	ldr	r2, [r3, #4]
 800d254:	4b24      	ldr	r3, [pc, #144]	; (800d2e8 <vPortFree+0xb8>)
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	4013      	ands	r3, r2
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d10a      	bne.n	800d274 <vPortFree+0x44>
	__asm volatile
 800d25e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d262:	f383 8811 	msr	BASEPRI, r3
 800d266:	f3bf 8f6f 	isb	sy
 800d26a:	f3bf 8f4f 	dsb	sy
 800d26e:	60fb      	str	r3, [r7, #12]
}
 800d270:	bf00      	nop
 800d272:	e7fe      	b.n	800d272 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d274:	693b      	ldr	r3, [r7, #16]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d00a      	beq.n	800d292 <vPortFree+0x62>
	__asm volatile
 800d27c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d280:	f383 8811 	msr	BASEPRI, r3
 800d284:	f3bf 8f6f 	isb	sy
 800d288:	f3bf 8f4f 	dsb	sy
 800d28c:	60bb      	str	r3, [r7, #8]
}
 800d28e:	bf00      	nop
 800d290:	e7fe      	b.n	800d290 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d292:	693b      	ldr	r3, [r7, #16]
 800d294:	685a      	ldr	r2, [r3, #4]
 800d296:	4b14      	ldr	r3, [pc, #80]	; (800d2e8 <vPortFree+0xb8>)
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	4013      	ands	r3, r2
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d01e      	beq.n	800d2de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d2a0:	693b      	ldr	r3, [r7, #16]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d11a      	bne.n	800d2de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d2a8:	693b      	ldr	r3, [r7, #16]
 800d2aa:	685a      	ldr	r2, [r3, #4]
 800d2ac:	4b0e      	ldr	r3, [pc, #56]	; (800d2e8 <vPortFree+0xb8>)
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	43db      	mvns	r3, r3
 800d2b2:	401a      	ands	r2, r3
 800d2b4:	693b      	ldr	r3, [r7, #16]
 800d2b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d2b8:	f7fe febc 	bl	800c034 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d2bc:	693b      	ldr	r3, [r7, #16]
 800d2be:	685a      	ldr	r2, [r3, #4]
 800d2c0:	4b0a      	ldr	r3, [pc, #40]	; (800d2ec <vPortFree+0xbc>)
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	4413      	add	r3, r2
 800d2c6:	4a09      	ldr	r2, [pc, #36]	; (800d2ec <vPortFree+0xbc>)
 800d2c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d2ca:	6938      	ldr	r0, [r7, #16]
 800d2cc:	f000 f874 	bl	800d3b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d2d0:	4b07      	ldr	r3, [pc, #28]	; (800d2f0 <vPortFree+0xc0>)
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	3301      	adds	r3, #1
 800d2d6:	4a06      	ldr	r2, [pc, #24]	; (800d2f0 <vPortFree+0xc0>)
 800d2d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d2da:	f7fe feb9 	bl	800c050 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d2de:	bf00      	nop
 800d2e0:	3718      	adds	r7, #24
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	bd80      	pop	{r7, pc}
 800d2e6:	bf00      	nop
 800d2e8:	20004268 	.word	0x20004268
 800d2ec:	20004258 	.word	0x20004258
 800d2f0:	20004264 	.word	0x20004264

0800d2f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d2f4:	b480      	push	{r7}
 800d2f6:	b085      	sub	sp, #20
 800d2f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d2fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d2fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d300:	4b27      	ldr	r3, [pc, #156]	; (800d3a0 <prvHeapInit+0xac>)
 800d302:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	f003 0307 	and.w	r3, r3, #7
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d00c      	beq.n	800d328 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	3307      	adds	r3, #7
 800d312:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	f023 0307 	bic.w	r3, r3, #7
 800d31a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d31c:	68ba      	ldr	r2, [r7, #8]
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	1ad3      	subs	r3, r2, r3
 800d322:	4a1f      	ldr	r2, [pc, #124]	; (800d3a0 <prvHeapInit+0xac>)
 800d324:	4413      	add	r3, r2
 800d326:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d32c:	4a1d      	ldr	r2, [pc, #116]	; (800d3a4 <prvHeapInit+0xb0>)
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d332:	4b1c      	ldr	r3, [pc, #112]	; (800d3a4 <prvHeapInit+0xb0>)
 800d334:	2200      	movs	r2, #0
 800d336:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	68ba      	ldr	r2, [r7, #8]
 800d33c:	4413      	add	r3, r2
 800d33e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d340:	2208      	movs	r2, #8
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	1a9b      	subs	r3, r3, r2
 800d346:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	f023 0307 	bic.w	r3, r3, #7
 800d34e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	4a15      	ldr	r2, [pc, #84]	; (800d3a8 <prvHeapInit+0xb4>)
 800d354:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d356:	4b14      	ldr	r3, [pc, #80]	; (800d3a8 <prvHeapInit+0xb4>)
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	2200      	movs	r2, #0
 800d35c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d35e:	4b12      	ldr	r3, [pc, #72]	; (800d3a8 <prvHeapInit+0xb4>)
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	2200      	movs	r2, #0
 800d364:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d36a:	683b      	ldr	r3, [r7, #0]
 800d36c:	68fa      	ldr	r2, [r7, #12]
 800d36e:	1ad2      	subs	r2, r2, r3
 800d370:	683b      	ldr	r3, [r7, #0]
 800d372:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d374:	4b0c      	ldr	r3, [pc, #48]	; (800d3a8 <prvHeapInit+0xb4>)
 800d376:	681a      	ldr	r2, [r3, #0]
 800d378:	683b      	ldr	r3, [r7, #0]
 800d37a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d37c:	683b      	ldr	r3, [r7, #0]
 800d37e:	685b      	ldr	r3, [r3, #4]
 800d380:	4a0a      	ldr	r2, [pc, #40]	; (800d3ac <prvHeapInit+0xb8>)
 800d382:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d384:	683b      	ldr	r3, [r7, #0]
 800d386:	685b      	ldr	r3, [r3, #4]
 800d388:	4a09      	ldr	r2, [pc, #36]	; (800d3b0 <prvHeapInit+0xbc>)
 800d38a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d38c:	4b09      	ldr	r3, [pc, #36]	; (800d3b4 <prvHeapInit+0xc0>)
 800d38e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d392:	601a      	str	r2, [r3, #0]
}
 800d394:	bf00      	nop
 800d396:	3714      	adds	r7, #20
 800d398:	46bd      	mov	sp, r7
 800d39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39e:	4770      	bx	lr
 800d3a0:	2000064c 	.word	0x2000064c
 800d3a4:	2000424c 	.word	0x2000424c
 800d3a8:	20004254 	.word	0x20004254
 800d3ac:	2000425c 	.word	0x2000425c
 800d3b0:	20004258 	.word	0x20004258
 800d3b4:	20004268 	.word	0x20004268

0800d3b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d3b8:	b480      	push	{r7}
 800d3ba:	b085      	sub	sp, #20
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d3c0:	4b28      	ldr	r3, [pc, #160]	; (800d464 <prvInsertBlockIntoFreeList+0xac>)
 800d3c2:	60fb      	str	r3, [r7, #12]
 800d3c4:	e002      	b.n	800d3cc <prvInsertBlockIntoFreeList+0x14>
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	60fb      	str	r3, [r7, #12]
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	687a      	ldr	r2, [r7, #4]
 800d3d2:	429a      	cmp	r2, r3
 800d3d4:	d8f7      	bhi.n	800d3c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	685b      	ldr	r3, [r3, #4]
 800d3de:	68ba      	ldr	r2, [r7, #8]
 800d3e0:	4413      	add	r3, r2
 800d3e2:	687a      	ldr	r2, [r7, #4]
 800d3e4:	429a      	cmp	r2, r3
 800d3e6:	d108      	bne.n	800d3fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	685a      	ldr	r2, [r3, #4]
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	685b      	ldr	r3, [r3, #4]
 800d3f0:	441a      	add	r2, r3
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	685b      	ldr	r3, [r3, #4]
 800d402:	68ba      	ldr	r2, [r7, #8]
 800d404:	441a      	add	r2, r3
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	429a      	cmp	r2, r3
 800d40c:	d118      	bne.n	800d440 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	681a      	ldr	r2, [r3, #0]
 800d412:	4b15      	ldr	r3, [pc, #84]	; (800d468 <prvInsertBlockIntoFreeList+0xb0>)
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	429a      	cmp	r2, r3
 800d418:	d00d      	beq.n	800d436 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	685a      	ldr	r2, [r3, #4]
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	685b      	ldr	r3, [r3, #4]
 800d424:	441a      	add	r2, r3
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	681a      	ldr	r2, [r3, #0]
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	601a      	str	r2, [r3, #0]
 800d434:	e008      	b.n	800d448 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d436:	4b0c      	ldr	r3, [pc, #48]	; (800d468 <prvInsertBlockIntoFreeList+0xb0>)
 800d438:	681a      	ldr	r2, [r3, #0]
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	601a      	str	r2, [r3, #0]
 800d43e:	e003      	b.n	800d448 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	681a      	ldr	r2, [r3, #0]
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d448:	68fa      	ldr	r2, [r7, #12]
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	429a      	cmp	r2, r3
 800d44e:	d002      	beq.n	800d456 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	687a      	ldr	r2, [r7, #4]
 800d454:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d456:	bf00      	nop
 800d458:	3714      	adds	r7, #20
 800d45a:	46bd      	mov	sp, r7
 800d45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d460:	4770      	bx	lr
 800d462:	bf00      	nop
 800d464:	2000424c 	.word	0x2000424c
 800d468:	20004254 	.word	0x20004254

0800d46c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b084      	sub	sp, #16
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
 800d474:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800d476:	683b      	ldr	r3, [r7, #0]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	330c      	adds	r3, #12
 800d47c:	461a      	mov	r2, r3
 800d47e:	6839      	ldr	r1, [r7, #0]
 800d480:	6878      	ldr	r0, [r7, #4]
 800d482:	f001 ffa3 	bl	800f3cc <tcpip_send_msg_wait_sem>
 800d486:	4603      	mov	r3, r0
 800d488:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800d48a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d103      	bne.n	800d49a <netconn_apimsg+0x2e>
    return apimsg->err;
 800d492:	683b      	ldr	r3, [r7, #0]
 800d494:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800d498:	e001      	b.n	800d49e <netconn_apimsg+0x32>
  }
  return err;
 800d49a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d49e:	4618      	mov	r0, r3
 800d4a0:	3710      	adds	r7, #16
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	bd80      	pop	{r7, pc}
	...

0800d4a8 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b08c      	sub	sp, #48	; 0x30
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	4603      	mov	r3, r0
 800d4b0:	603a      	str	r2, [r7, #0]
 800d4b2:	71fb      	strb	r3, [r7, #7]
 800d4b4:	460b      	mov	r3, r1
 800d4b6:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800d4b8:	79fb      	ldrb	r3, [r7, #7]
 800d4ba:	6839      	ldr	r1, [r7, #0]
 800d4bc:	4618      	mov	r0, r3
 800d4be:	f000 feff 	bl	800e2c0 <netconn_alloc>
 800d4c2:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800d4c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d054      	beq.n	800d574 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800d4ca:	79bb      	ldrb	r3, [r7, #6]
 800d4cc:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800d4ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4d0:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800d4d2:	f107 0308 	add.w	r3, r7, #8
 800d4d6:	4619      	mov	r1, r3
 800d4d8:	4829      	ldr	r0, [pc, #164]	; (800d580 <netconn_new_with_proto_and_callback+0xd8>)
 800d4da:	f7ff ffc7 	bl	800d46c <netconn_apimsg>
 800d4de:	4603      	mov	r3, r0
 800d4e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800d4e4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d043      	beq.n	800d574 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800d4ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4ee:	685b      	ldr	r3, [r3, #4]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d005      	beq.n	800d500 <netconn_new_with_proto_and_callback+0x58>
 800d4f4:	4b23      	ldr	r3, [pc, #140]	; (800d584 <netconn_new_with_proto_and_callback+0xdc>)
 800d4f6:	22a3      	movs	r2, #163	; 0xa3
 800d4f8:	4923      	ldr	r1, [pc, #140]	; (800d588 <netconn_new_with_proto_and_callback+0xe0>)
 800d4fa:	4824      	ldr	r0, [pc, #144]	; (800d58c <netconn_new_with_proto_and_callback+0xe4>)
 800d4fc:	f00f f8f0 	bl	801c6e0 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800d500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d502:	3310      	adds	r3, #16
 800d504:	4618      	mov	r0, r3
 800d506:	f00d ffea 	bl	801b4de <sys_mbox_valid>
 800d50a:	4603      	mov	r3, r0
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d105      	bne.n	800d51c <netconn_new_with_proto_and_callback+0x74>
 800d510:	4b1c      	ldr	r3, [pc, #112]	; (800d584 <netconn_new_with_proto_and_callback+0xdc>)
 800d512:	22a4      	movs	r2, #164	; 0xa4
 800d514:	491e      	ldr	r1, [pc, #120]	; (800d590 <netconn_new_with_proto_and_callback+0xe8>)
 800d516:	481d      	ldr	r0, [pc, #116]	; (800d58c <netconn_new_with_proto_and_callback+0xe4>)
 800d518:	f00f f8e2 	bl	801c6e0 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800d51c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d51e:	3314      	adds	r3, #20
 800d520:	4618      	mov	r0, r3
 800d522:	f00d ffdc 	bl	801b4de <sys_mbox_valid>
 800d526:	4603      	mov	r3, r0
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d005      	beq.n	800d538 <netconn_new_with_proto_and_callback+0x90>
 800d52c:	4b15      	ldr	r3, [pc, #84]	; (800d584 <netconn_new_with_proto_and_callback+0xdc>)
 800d52e:	22a6      	movs	r2, #166	; 0xa6
 800d530:	4918      	ldr	r1, [pc, #96]	; (800d594 <netconn_new_with_proto_and_callback+0xec>)
 800d532:	4816      	ldr	r0, [pc, #88]	; (800d58c <netconn_new_with_proto_and_callback+0xe4>)
 800d534:	f00f f8d4 	bl	801c6e0 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800d538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d53a:	330c      	adds	r3, #12
 800d53c:	4618      	mov	r0, r3
 800d53e:	f00e f85f 	bl	801b600 <sys_sem_valid>
 800d542:	4603      	mov	r3, r0
 800d544:	2b00      	cmp	r3, #0
 800d546:	d105      	bne.n	800d554 <netconn_new_with_proto_and_callback+0xac>
 800d548:	4b0e      	ldr	r3, [pc, #56]	; (800d584 <netconn_new_with_proto_and_callback+0xdc>)
 800d54a:	22a9      	movs	r2, #169	; 0xa9
 800d54c:	4912      	ldr	r1, [pc, #72]	; (800d598 <netconn_new_with_proto_and_callback+0xf0>)
 800d54e:	480f      	ldr	r0, [pc, #60]	; (800d58c <netconn_new_with_proto_and_callback+0xe4>)
 800d550:	f00f f8c6 	bl	801c6e0 <iprintf>
      sys_sem_free(&conn->op_completed);
 800d554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d556:	330c      	adds	r3, #12
 800d558:	4618      	mov	r0, r3
 800d55a:	f00e f844 	bl	801b5e6 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800d55e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d560:	3310      	adds	r3, #16
 800d562:	4618      	mov	r0, r3
 800d564:	f00d ff34 	bl	801b3d0 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800d568:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d56a:	2007      	movs	r0, #7
 800d56c:	f003 fae6 	bl	8010b3c <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800d570:	2300      	movs	r3, #0
 800d572:	e000      	b.n	800d576 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800d574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800d576:	4618      	mov	r0, r3
 800d578:	3730      	adds	r7, #48	; 0x30
 800d57a:	46bd      	mov	sp, r7
 800d57c:	bd80      	pop	{r7, pc}
 800d57e:	bf00      	nop
 800d580:	0800e295 	.word	0x0800e295
 800d584:	0801e894 	.word	0x0801e894
 800d588:	0801e8c8 	.word	0x0801e8c8
 800d58c:	0801e8ec 	.word	0x0801e8ec
 800d590:	0801e914 	.word	0x0801e914
 800d594:	0801e92c 	.word	0x0801e92c
 800d598:	0801e950 	.word	0x0801e950

0800d59c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b08c      	sub	sp, #48	; 0x30
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d101      	bne.n	800d5ae <netconn_prepare_delete+0x12>
    return ERR_OK;
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	e014      	b.n	800d5d8 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800d5b2:	2329      	movs	r3, #41	; 0x29
 800d5b4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800d5b6:	f107 030c 	add.w	r3, r7, #12
 800d5ba:	4619      	mov	r1, r3
 800d5bc:	4808      	ldr	r0, [pc, #32]	; (800d5e0 <netconn_prepare_delete+0x44>)
 800d5be:	f7ff ff55 	bl	800d46c <netconn_apimsg>
 800d5c2:	4603      	mov	r3, r0
 800d5c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800d5c8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d002      	beq.n	800d5d6 <netconn_prepare_delete+0x3a>
    return err;
 800d5d0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d5d4:	e000      	b.n	800d5d8 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800d5d6:	2300      	movs	r3, #0
}
 800d5d8:	4618      	mov	r0, r3
 800d5da:	3730      	adds	r7, #48	; 0x30
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bd80      	pop	{r7, pc}
 800d5e0:	0800e7f9 	.word	0x0800e7f9

0800d5e4 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	b084      	sub	sp, #16
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d101      	bne.n	800d5f6 <netconn_delete+0x12>
    return ERR_OK;
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	e00d      	b.n	800d612 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800d5f6:	6878      	ldr	r0, [r7, #4]
 800d5f8:	f7ff ffd0 	bl	800d59c <netconn_prepare_delete>
 800d5fc:	4603      	mov	r3, r0
 800d5fe:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800d600:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d102      	bne.n	800d60e <netconn_delete+0x2a>
    netconn_free(conn);
 800d608:	6878      	ldr	r0, [r7, #4]
 800d60a:	f000 fec7 	bl	800e39c <netconn_free>
  }
  return err;
 800d60e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d612:	4618      	mov	r0, r3
 800d614:	3710      	adds	r7, #16
 800d616:	46bd      	mov	sp, r7
 800d618:	bd80      	pop	{r7, pc}
	...

0800d61c <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b08e      	sub	sp, #56	; 0x38
 800d620:	af00      	add	r7, sp, #0
 800d622:	60f8      	str	r0, [r7, #12]
 800d624:	60b9      	str	r1, [r7, #8]
 800d626:	4613      	mov	r3, r2
 800d628:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d109      	bne.n	800d644 <netconn_bind+0x28>
 800d630:	4b11      	ldr	r3, [pc, #68]	; (800d678 <netconn_bind+0x5c>)
 800d632:	f44f 729c 	mov.w	r2, #312	; 0x138
 800d636:	4911      	ldr	r1, [pc, #68]	; (800d67c <netconn_bind+0x60>)
 800d638:	4811      	ldr	r0, [pc, #68]	; (800d680 <netconn_bind+0x64>)
 800d63a:	f00f f851 	bl	801c6e0 <iprintf>
 800d63e:	f06f 030f 	mvn.w	r3, #15
 800d642:	e015      	b.n	800d670 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800d644:	68bb      	ldr	r3, [r7, #8]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d101      	bne.n	800d64e <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800d64a:	4b0e      	ldr	r3, [pc, #56]	; (800d684 <netconn_bind+0x68>)
 800d64c:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800d652:	68bb      	ldr	r3, [r7, #8]
 800d654:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800d656:	88fb      	ldrh	r3, [r7, #6]
 800d658:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800d65a:	f107 0314 	add.w	r3, r7, #20
 800d65e:	4619      	mov	r1, r3
 800d660:	4809      	ldr	r0, [pc, #36]	; (800d688 <netconn_bind+0x6c>)
 800d662:	f7ff ff03 	bl	800d46c <netconn_apimsg>
 800d666:	4603      	mov	r3, r0
 800d668:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800d66c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800d670:	4618      	mov	r0, r3
 800d672:	3738      	adds	r7, #56	; 0x38
 800d674:	46bd      	mov	sp, r7
 800d676:	bd80      	pop	{r7, pc}
 800d678:	0801e894 	.word	0x0801e894
 800d67c:	0801e9cc 	.word	0x0801e9cc
 800d680:	0801e8ec 	.word	0x0801e8ec
 800d684:	0802304c 	.word	0x0802304c
 800d688:	0800e9c1 	.word	0x0800e9c1

0800d68c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800d68c:	b580      	push	{r7, lr}
 800d68e:	b088      	sub	sp, #32
 800d690:	af00      	add	r7, sp, #0
 800d692:	60f8      	str	r0, [r7, #12]
 800d694:	60b9      	str	r1, [r7, #8]
 800d696:	4613      	mov	r3, r2
 800d698:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800d69a:	2300      	movs	r3, #0
 800d69c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800d69e:	68bb      	ldr	r3, [r7, #8]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d109      	bne.n	800d6b8 <netconn_recv_data+0x2c>
 800d6a4:	4b58      	ldr	r3, [pc, #352]	; (800d808 <netconn_recv_data+0x17c>)
 800d6a6:	f44f 7212 	mov.w	r2, #584	; 0x248
 800d6aa:	4958      	ldr	r1, [pc, #352]	; (800d80c <netconn_recv_data+0x180>)
 800d6ac:	4858      	ldr	r0, [pc, #352]	; (800d810 <netconn_recv_data+0x184>)
 800d6ae:	f00f f817 	bl	801c6e0 <iprintf>
 800d6b2:	f06f 030f 	mvn.w	r3, #15
 800d6b6:	e0a2      	b.n	800d7fe <netconn_recv_data+0x172>
  *new_buf = NULL;
 800d6b8:	68bb      	ldr	r3, [r7, #8]
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d109      	bne.n	800d6d8 <netconn_recv_data+0x4c>
 800d6c4:	4b50      	ldr	r3, [pc, #320]	; (800d808 <netconn_recv_data+0x17c>)
 800d6c6:	f240 224a 	movw	r2, #586	; 0x24a
 800d6ca:	4952      	ldr	r1, [pc, #328]	; (800d814 <netconn_recv_data+0x188>)
 800d6cc:	4850      	ldr	r0, [pc, #320]	; (800d810 <netconn_recv_data+0x184>)
 800d6ce:	f00f f807 	bl	801c6e0 <iprintf>
 800d6d2:	f06f 030f 	mvn.w	r3, #15
 800d6d6:	e092      	b.n	800d7fe <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	3310      	adds	r3, #16
 800d6dc:	4618      	mov	r0, r3
 800d6de:	f00d fefe 	bl	801b4de <sys_mbox_valid>
 800d6e2:	4603      	mov	r3, r0
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d10e      	bne.n	800d706 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800d6e8:	68f8      	ldr	r0, [r7, #12]
 800d6ea:	f000 fa23 	bl	800db34 <netconn_err>
 800d6ee:	4603      	mov	r3, r0
 800d6f0:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800d6f2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d002      	beq.n	800d700 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800d6fa:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800d6fe:	e07e      	b.n	800d7fe <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800d700:	f06f 030a 	mvn.w	r3, #10
 800d704:	e07b      	b.n	800d7fe <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	7f1b      	ldrb	r3, [r3, #28]
 800d70a:	f003 0302 	and.w	r3, r3, #2
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d10f      	bne.n	800d732 <netconn_recv_data+0xa6>
 800d712:	79fb      	ldrb	r3, [r7, #7]
 800d714:	f003 0304 	and.w	r3, r3, #4
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d10a      	bne.n	800d732 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	7f1b      	ldrb	r3, [r3, #28]
 800d720:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800d724:	2b00      	cmp	r3, #0
 800d726:	d104      	bne.n	800d732 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d023      	beq.n	800d77a <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	3310      	adds	r3, #16
 800d736:	f107 0218 	add.w	r2, r7, #24
 800d73a:	4611      	mov	r1, r2
 800d73c:	4618      	mov	r0, r3
 800d73e:	f00d feb2 	bl	801b4a6 <sys_arch_mbox_tryfetch>
 800d742:	4603      	mov	r3, r0
 800d744:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d748:	d11f      	bne.n	800d78a <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800d74a:	68f8      	ldr	r0, [r7, #12]
 800d74c:	f000 f9f2 	bl	800db34 <netconn_err>
 800d750:	4603      	mov	r3, r0
 800d752:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800d754:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d002      	beq.n	800d762 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800d75c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800d760:	e04d      	b.n	800d7fe <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	7f1b      	ldrb	r3, [r3, #28]
 800d766:	f003 0301 	and.w	r3, r3, #1
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d002      	beq.n	800d774 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800d76e:	f06f 030a 	mvn.w	r3, #10
 800d772:	e044      	b.n	800d7fe <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800d774:	f06f 0306 	mvn.w	r3, #6
 800d778:	e041      	b.n	800d7fe <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	3310      	adds	r3, #16
 800d77e:	f107 0118 	add.w	r1, r7, #24
 800d782:	2200      	movs	r2, #0
 800d784:	4618      	mov	r0, r3
 800d786:	f00d fe4f 	bl	801b428 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	781b      	ldrb	r3, [r3, #0]
 800d78e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d792:	2b10      	cmp	r3, #16
 800d794:	d117      	bne.n	800d7c6 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800d796:	69bb      	ldr	r3, [r7, #24]
 800d798:	f107 0217 	add.w	r2, r7, #23
 800d79c:	4611      	mov	r1, r2
 800d79e:	4618      	mov	r0, r3
 800d7a0:	f000 fa1a 	bl	800dbd8 <lwip_netconn_is_err_msg>
 800d7a4:	4603      	mov	r3, r0
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d009      	beq.n	800d7be <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800d7aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d7ae:	f113 0f0f 	cmn.w	r3, #15
 800d7b2:	d101      	bne.n	800d7b8 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	e022      	b.n	800d7fe <netconn_recv_data+0x172>
      }
      return err;
 800d7b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d7bc:	e01f      	b.n	800d7fe <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800d7be:	69bb      	ldr	r3, [r7, #24]
 800d7c0:	891b      	ldrh	r3, [r3, #8]
 800d7c2:	83fb      	strh	r3, [r7, #30]
 800d7c4:	e00d      	b.n	800d7e2 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800d7c6:	69bb      	ldr	r3, [r7, #24]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d106      	bne.n	800d7da <netconn_recv_data+0x14e>
 800d7cc:	4b0e      	ldr	r3, [pc, #56]	; (800d808 <netconn_recv_data+0x17c>)
 800d7ce:	f240 2291 	movw	r2, #657	; 0x291
 800d7d2:	4911      	ldr	r1, [pc, #68]	; (800d818 <netconn_recv_data+0x18c>)
 800d7d4:	480e      	ldr	r0, [pc, #56]	; (800d810 <netconn_recv_data+0x184>)
 800d7d6:	f00e ff83 	bl	801c6e0 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800d7da:	69bb      	ldr	r3, [r7, #24]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	891b      	ldrh	r3, [r3, #8]
 800d7e0:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d005      	beq.n	800d7f6 <netconn_recv_data+0x16a>
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7ee:	8bfa      	ldrh	r2, [r7, #30]
 800d7f0:	2101      	movs	r1, #1
 800d7f2:	68f8      	ldr	r0, [r7, #12]
 800d7f4:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800d7f6:	69ba      	ldr	r2, [r7, #24]
 800d7f8:	68bb      	ldr	r3, [r7, #8]
 800d7fa:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800d7fc:	2300      	movs	r3, #0
}
 800d7fe:	4618      	mov	r0, r3
 800d800:	3720      	adds	r7, #32
 800d802:	46bd      	mov	sp, r7
 800d804:	bd80      	pop	{r7, pc}
 800d806:	bf00      	nop
 800d808:	0801e894 	.word	0x0801e894
 800d80c:	0801eaac 	.word	0x0801eaac
 800d810:	0801e8ec 	.word	0x0801e8ec
 800d814:	0801eacc 	.word	0x0801eacc
 800d818:	0801eae8 	.word	0x0801eae8

0800d81c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b084      	sub	sp, #16
 800d820:	af00      	add	r7, sp, #0
 800d822:	60f8      	str	r0, [r7, #12]
 800d824:	60b9      	str	r1, [r7, #8]
 800d826:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d005      	beq.n	800d83a <netconn_tcp_recvd_msg+0x1e>
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	781b      	ldrb	r3, [r3, #0]
 800d832:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d836:	2b10      	cmp	r3, #16
 800d838:	d009      	beq.n	800d84e <netconn_tcp_recvd_msg+0x32>
 800d83a:	4b0c      	ldr	r3, [pc, #48]	; (800d86c <netconn_tcp_recvd_msg+0x50>)
 800d83c:	f240 22a7 	movw	r2, #679	; 0x2a7
 800d840:	490b      	ldr	r1, [pc, #44]	; (800d870 <netconn_tcp_recvd_msg+0x54>)
 800d842:	480c      	ldr	r0, [pc, #48]	; (800d874 <netconn_tcp_recvd_msg+0x58>)
 800d844:	f00e ff4c 	bl	801c6e0 <iprintf>
 800d848:	f06f 030f 	mvn.w	r3, #15
 800d84c:	e00a      	b.n	800d864 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	68fa      	ldr	r2, [r7, #12]
 800d852:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	68ba      	ldr	r2, [r7, #8]
 800d858:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800d85a:	6879      	ldr	r1, [r7, #4]
 800d85c:	4806      	ldr	r0, [pc, #24]	; (800d878 <netconn_tcp_recvd_msg+0x5c>)
 800d85e:	f7ff fe05 	bl	800d46c <netconn_apimsg>
 800d862:	4603      	mov	r3, r0
}
 800d864:	4618      	mov	r0, r3
 800d866:	3710      	adds	r7, #16
 800d868:	46bd      	mov	sp, r7
 800d86a:	bd80      	pop	{r7, pc}
 800d86c:	0801e894 	.word	0x0801e894
 800d870:	0801eaf4 	.word	0x0801eaf4
 800d874:	0801e8ec 	.word	0x0801e8ec
 800d878:	0800eacf 	.word	0x0800eacf

0800d87c <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b090      	sub	sp, #64	; 0x40
 800d880:	af00      	add	r7, sp, #0
 800d882:	60f8      	str	r0, [r7, #12]
 800d884:	60b9      	str	r1, [r7, #8]
 800d886:	4613      	mov	r3, r2
 800d888:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	3310      	adds	r3, #16
 800d88e:	4618      	mov	r0, r3
 800d890:	f00d fe25 	bl	801b4de <sys_mbox_valid>
 800d894:	4603      	mov	r3, r0
 800d896:	2b00      	cmp	r3, #0
 800d898:	d102      	bne.n	800d8a0 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800d89a:	f06f 030a 	mvn.w	r3, #10
 800d89e:	e06d      	b.n	800d97c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	7f1b      	ldrb	r3, [r3, #28]
 800d8a4:	b25b      	sxtb	r3, r3
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	da07      	bge.n	800d8ba <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	7f1b      	ldrb	r3, [r3, #28]
 800d8ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8b2:	b2da      	uxtb	r2, r3
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800d8b8:	e039      	b.n	800d92e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800d8ba:	79fb      	ldrb	r3, [r7, #7]
 800d8bc:	461a      	mov	r2, r3
 800d8be:	68b9      	ldr	r1, [r7, #8]
 800d8c0:	68f8      	ldr	r0, [r7, #12]
 800d8c2:	f7ff fee3 	bl	800d68c <netconn_recv_data>
 800d8c6:	4603      	mov	r3, r0
 800d8c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800d8cc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d002      	beq.n	800d8da <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800d8d4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d8d8:	e050      	b.n	800d97c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800d8da:	68bb      	ldr	r3, [r7, #8]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800d8e0:	79fb      	ldrb	r3, [r7, #7]
 800d8e2:	f003 0308 	and.w	r3, r3, #8
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d10e      	bne.n	800d908 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800d8ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d002      	beq.n	800d8f6 <netconn_recv_data_tcp+0x7a>
 800d8f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8f2:	891b      	ldrh	r3, [r3, #8]
 800d8f4:	e000      	b.n	800d8f8 <netconn_recv_data_tcp+0x7c>
 800d8f6:	2301      	movs	r3, #1
 800d8f8:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800d8fa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d8fc:	f107 0214 	add.w	r2, r7, #20
 800d900:	4619      	mov	r1, r3
 800d902:	68f8      	ldr	r0, [r7, #12]
 800d904:	f7ff ff8a 	bl	800d81c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800d908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d134      	bne.n	800d978 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800d90e:	79fb      	ldrb	r3, [r7, #7]
 800d910:	f003 0310 	and.w	r3, r3, #16
 800d914:	2b00      	cmp	r3, #0
 800d916:	d009      	beq.n	800d92c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	7f1b      	ldrb	r3, [r3, #28]
 800d91c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d920:	b2da      	uxtb	r2, r3
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800d926:	f06f 0306 	mvn.w	r3, #6
 800d92a:	e027      	b.n	800d97c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800d92c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d932:	2b00      	cmp	r3, #0
 800d934:	d005      	beq.n	800d942 <netconn_recv_data_tcp+0xc6>
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d93a:	2200      	movs	r2, #0
 800d93c:	2101      	movs	r1, #1
 800d93e:	68f8      	ldr	r0, [r7, #12]
 800d940:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	685b      	ldr	r3, [r3, #4]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d10f      	bne.n	800d96a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800d94a:	68f8      	ldr	r0, [r7, #12]
 800d94c:	f000 f8f2 	bl	800db34 <netconn_err>
 800d950:	4603      	mov	r3, r0
 800d952:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800d956:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d002      	beq.n	800d964 <netconn_recv_data_tcp+0xe8>
          return err;
 800d95e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d962:	e00b      	b.n	800d97c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800d964:	f06f 030d 	mvn.w	r3, #13
 800d968:	e008      	b.n	800d97c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800d96a:	2101      	movs	r1, #1
 800d96c:	68f8      	ldr	r0, [r7, #12]
 800d96e:	f000 f8b1 	bl	800dad4 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800d972:	f06f 030e 	mvn.w	r3, #14
 800d976:	e001      	b.n	800d97c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800d978:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800d97c:	4618      	mov	r0, r3
 800d97e:	3740      	adds	r7, #64	; 0x40
 800d980:	46bd      	mov	sp, r7
 800d982:	bd80      	pop	{r7, pc}

0800d984 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800d984:	b580      	push	{r7, lr}
 800d986:	b086      	sub	sp, #24
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]
 800d98c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800d98e:	2300      	movs	r3, #0
 800d990:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800d992:	683b      	ldr	r3, [r7, #0]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d109      	bne.n	800d9ac <netconn_recv+0x28>
 800d998:	4b32      	ldr	r3, [pc, #200]	; (800da64 <netconn_recv+0xe0>)
 800d99a:	f240 3263 	movw	r2, #867	; 0x363
 800d99e:	4932      	ldr	r1, [pc, #200]	; (800da68 <netconn_recv+0xe4>)
 800d9a0:	4832      	ldr	r0, [pc, #200]	; (800da6c <netconn_recv+0xe8>)
 800d9a2:	f00e fe9d 	bl	801c6e0 <iprintf>
 800d9a6:	f06f 030f 	mvn.w	r3, #15
 800d9aa:	e056      	b.n	800da5a <netconn_recv+0xd6>
  *new_buf = NULL;
 800d9ac:	683b      	ldr	r3, [r7, #0]
 800d9ae:	2200      	movs	r2, #0
 800d9b0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d109      	bne.n	800d9cc <netconn_recv+0x48>
 800d9b8:	4b2a      	ldr	r3, [pc, #168]	; (800da64 <netconn_recv+0xe0>)
 800d9ba:	f240 3265 	movw	r2, #869	; 0x365
 800d9be:	492c      	ldr	r1, [pc, #176]	; (800da70 <netconn_recv+0xec>)
 800d9c0:	482a      	ldr	r0, [pc, #168]	; (800da6c <netconn_recv+0xe8>)
 800d9c2:	f00e fe8d 	bl	801c6e0 <iprintf>
 800d9c6:	f06f 030f 	mvn.w	r3, #15
 800d9ca:	e046      	b.n	800da5a <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	781b      	ldrb	r3, [r3, #0]
 800d9d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d9d4:	2b10      	cmp	r3, #16
 800d9d6:	d13a      	bne.n	800da4e <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800d9d8:	2300      	movs	r3, #0
 800d9da:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800d9dc:	2006      	movs	r0, #6
 800d9de:	f003 f85b 	bl	8010a98 <memp_malloc>
 800d9e2:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800d9e4:	697b      	ldr	r3, [r7, #20]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d102      	bne.n	800d9f0 <netconn_recv+0x6c>
      return ERR_MEM;
 800d9ea:	f04f 33ff 	mov.w	r3, #4294967295
 800d9ee:	e034      	b.n	800da5a <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800d9f0:	f107 030c 	add.w	r3, r7, #12
 800d9f4:	2200      	movs	r2, #0
 800d9f6:	4619      	mov	r1, r3
 800d9f8:	6878      	ldr	r0, [r7, #4]
 800d9fa:	f7ff ff3f 	bl	800d87c <netconn_recv_data_tcp>
 800d9fe:	4603      	mov	r3, r0
 800da00:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800da02:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d006      	beq.n	800da18 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800da0a:	6979      	ldr	r1, [r7, #20]
 800da0c:	2006      	movs	r0, #6
 800da0e:	f003 f895 	bl	8010b3c <memp_free>
      return err;
 800da12:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800da16:	e020      	b.n	800da5a <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d106      	bne.n	800da2c <netconn_recv+0xa8>
 800da1e:	4b11      	ldr	r3, [pc, #68]	; (800da64 <netconn_recv+0xe0>)
 800da20:	f240 3279 	movw	r2, #889	; 0x379
 800da24:	4913      	ldr	r1, [pc, #76]	; (800da74 <netconn_recv+0xf0>)
 800da26:	4811      	ldr	r0, [pc, #68]	; (800da6c <netconn_recv+0xe8>)
 800da28:	f00e fe5a 	bl	801c6e0 <iprintf>

    buf->p = p;
 800da2c:	68fa      	ldr	r2, [r7, #12]
 800da2e:	697b      	ldr	r3, [r7, #20]
 800da30:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800da32:	68fa      	ldr	r2, [r7, #12]
 800da34:	697b      	ldr	r3, [r7, #20]
 800da36:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800da38:	697b      	ldr	r3, [r7, #20]
 800da3a:	2200      	movs	r2, #0
 800da3c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800da3e:	697b      	ldr	r3, [r7, #20]
 800da40:	2200      	movs	r2, #0
 800da42:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800da44:	683b      	ldr	r3, [r7, #0]
 800da46:	697a      	ldr	r2, [r7, #20]
 800da48:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800da4a:	2300      	movs	r3, #0
 800da4c:	e005      	b.n	800da5a <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800da4e:	2200      	movs	r2, #0
 800da50:	6839      	ldr	r1, [r7, #0]
 800da52:	6878      	ldr	r0, [r7, #4]
 800da54:	f7ff fe1a 	bl	800d68c <netconn_recv_data>
 800da58:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800da5a:	4618      	mov	r0, r3
 800da5c:	3718      	adds	r7, #24
 800da5e:	46bd      	mov	sp, r7
 800da60:	bd80      	pop	{r7, pc}
 800da62:	bf00      	nop
 800da64:	0801e894 	.word	0x0801e894
 800da68:	0801eaac 	.word	0x0801eaac
 800da6c:	0801e8ec 	.word	0x0801e8ec
 800da70:	0801eacc 	.word	0x0801eacc
 800da74:	0801eb44 	.word	0x0801eb44

0800da78 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	b08c      	sub	sp, #48	; 0x30
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
 800da80:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d109      	bne.n	800da9c <netconn_send+0x24>
 800da88:	4b0e      	ldr	r3, [pc, #56]	; (800dac4 <netconn_send+0x4c>)
 800da8a:	f240 32b2 	movw	r2, #946	; 0x3b2
 800da8e:	490e      	ldr	r1, [pc, #56]	; (800dac8 <netconn_send+0x50>)
 800da90:	480e      	ldr	r0, [pc, #56]	; (800dacc <netconn_send+0x54>)
 800da92:	f00e fe25 	bl	801c6e0 <iprintf>
 800da96:	f06f 030f 	mvn.w	r3, #15
 800da9a:	e00e      	b.n	800daba <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 800daa0:	683b      	ldr	r3, [r7, #0]
 800daa2:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 800daa4:	f107 030c 	add.w	r3, r7, #12
 800daa8:	4619      	mov	r1, r3
 800daaa:	4809      	ldr	r0, [pc, #36]	; (800dad0 <netconn_send+0x58>)
 800daac:	f7ff fcde 	bl	800d46c <netconn_apimsg>
 800dab0:	4603      	mov	r3, r0
 800dab2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800dab6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800daba:	4618      	mov	r0, r3
 800dabc:	3730      	adds	r7, #48	; 0x30
 800dabe:	46bd      	mov	sp, r7
 800dac0:	bd80      	pop	{r7, pc}
 800dac2:	bf00      	nop
 800dac4:	0801e894 	.word	0x0801e894
 800dac8:	0801eb50 	.word	0x0801eb50
 800dacc:	0801e8ec 	.word	0x0801e8ec
 800dad0:	0800ea35 	.word	0x0800ea35

0800dad4 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800dad4:	b580      	push	{r7, lr}
 800dad6:	b08c      	sub	sp, #48	; 0x30
 800dad8:	af00      	add	r7, sp, #0
 800dada:	6078      	str	r0, [r7, #4]
 800dadc:	460b      	mov	r3, r1
 800dade:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d109      	bne.n	800dafa <netconn_close_shutdown+0x26>
 800dae6:	4b0f      	ldr	r3, [pc, #60]	; (800db24 <netconn_close_shutdown+0x50>)
 800dae8:	f240 4247 	movw	r2, #1095	; 0x447
 800daec:	490e      	ldr	r1, [pc, #56]	; (800db28 <netconn_close_shutdown+0x54>)
 800daee:	480f      	ldr	r0, [pc, #60]	; (800db2c <netconn_close_shutdown+0x58>)
 800daf0:	f00e fdf6 	bl	801c6e0 <iprintf>
 800daf4:	f06f 030f 	mvn.w	r3, #15
 800daf8:	e010      	b.n	800db1c <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800dafe:	78fb      	ldrb	r3, [r7, #3]
 800db00:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800db02:	2329      	movs	r3, #41	; 0x29
 800db04:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800db06:	f107 030c 	add.w	r3, r7, #12
 800db0a:	4619      	mov	r1, r3
 800db0c:	4808      	ldr	r0, [pc, #32]	; (800db30 <netconn_close_shutdown+0x5c>)
 800db0e:	f7ff fcad 	bl	800d46c <netconn_apimsg>
 800db12:	4603      	mov	r3, r0
 800db14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800db18:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800db1c:	4618      	mov	r0, r3
 800db1e:	3730      	adds	r7, #48	; 0x30
 800db20:	46bd      	mov	sp, r7
 800db22:	bd80      	pop	{r7, pc}
 800db24:	0801e894 	.word	0x0801e894
 800db28:	0801ebd0 	.word	0x0801ebd0
 800db2c:	0801e8ec 	.word	0x0801e8ec
 800db30:	0800eed1 	.word	0x0800eed1

0800db34 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800db34:	b580      	push	{r7, lr}
 800db36:	b084      	sub	sp, #16
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d101      	bne.n	800db46 <netconn_err+0x12>
    return ERR_OK;
 800db42:	2300      	movs	r3, #0
 800db44:	e00d      	b.n	800db62 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800db46:	f00d fde5 	bl	801b714 <sys_arch_protect>
 800db4a:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	7a1b      	ldrb	r3, [r3, #8]
 800db50:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	2200      	movs	r2, #0
 800db56:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800db58:	68f8      	ldr	r0, [r7, #12]
 800db5a:	f00d fde9 	bl	801b730 <sys_arch_unprotect>
  return err;
 800db5e:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800db62:	4618      	mov	r0, r3
 800db64:	3710      	adds	r7, #16
 800db66:	46bd      	mov	sp, r7
 800db68:	bd80      	pop	{r7, pc}
	...

0800db6c <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b082      	sub	sp, #8
 800db70:	af00      	add	r7, sp, #0
 800db72:	4603      	mov	r3, r0
 800db74:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800db76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800db7a:	f113 0f0d 	cmn.w	r3, #13
 800db7e:	d009      	beq.n	800db94 <lwip_netconn_err_to_msg+0x28>
 800db80:	f113 0f0d 	cmn.w	r3, #13
 800db84:	dc0c      	bgt.n	800dba0 <lwip_netconn_err_to_msg+0x34>
 800db86:	f113 0f0f 	cmn.w	r3, #15
 800db8a:	d007      	beq.n	800db9c <lwip_netconn_err_to_msg+0x30>
 800db8c:	f113 0f0e 	cmn.w	r3, #14
 800db90:	d002      	beq.n	800db98 <lwip_netconn_err_to_msg+0x2c>
 800db92:	e005      	b.n	800dba0 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800db94:	4b0a      	ldr	r3, [pc, #40]	; (800dbc0 <lwip_netconn_err_to_msg+0x54>)
 800db96:	e00e      	b.n	800dbb6 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800db98:	4b0a      	ldr	r3, [pc, #40]	; (800dbc4 <lwip_netconn_err_to_msg+0x58>)
 800db9a:	e00c      	b.n	800dbb6 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800db9c:	4b0a      	ldr	r3, [pc, #40]	; (800dbc8 <lwip_netconn_err_to_msg+0x5c>)
 800db9e:	e00a      	b.n	800dbb6 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800dba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d005      	beq.n	800dbb4 <lwip_netconn_err_to_msg+0x48>
 800dba8:	4b08      	ldr	r3, [pc, #32]	; (800dbcc <lwip_netconn_err_to_msg+0x60>)
 800dbaa:	227d      	movs	r2, #125	; 0x7d
 800dbac:	4908      	ldr	r1, [pc, #32]	; (800dbd0 <lwip_netconn_err_to_msg+0x64>)
 800dbae:	4809      	ldr	r0, [pc, #36]	; (800dbd4 <lwip_netconn_err_to_msg+0x68>)
 800dbb0:	f00e fd96 	bl	801c6e0 <iprintf>
      return NULL;
 800dbb4:	2300      	movs	r3, #0
  }
}
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	3708      	adds	r7, #8
 800dbba:	46bd      	mov	sp, r7
 800dbbc:	bd80      	pop	{r7, pc}
 800dbbe:	bf00      	nop
 800dbc0:	080220dc 	.word	0x080220dc
 800dbc4:	080220dd 	.word	0x080220dd
 800dbc8:	080220de 	.word	0x080220de
 800dbcc:	0801ebec 	.word	0x0801ebec
 800dbd0:	0801ec20 	.word	0x0801ec20
 800dbd4:	0801ec30 	.word	0x0801ec30

0800dbd8 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	b082      	sub	sp, #8
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
 800dbe0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800dbe2:	683b      	ldr	r3, [r7, #0]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d105      	bne.n	800dbf4 <lwip_netconn_is_err_msg+0x1c>
 800dbe8:	4b12      	ldr	r3, [pc, #72]	; (800dc34 <lwip_netconn_is_err_msg+0x5c>)
 800dbea:	2285      	movs	r2, #133	; 0x85
 800dbec:	4912      	ldr	r1, [pc, #72]	; (800dc38 <lwip_netconn_is_err_msg+0x60>)
 800dbee:	4813      	ldr	r0, [pc, #76]	; (800dc3c <lwip_netconn_is_err_msg+0x64>)
 800dbf0:	f00e fd76 	bl	801c6e0 <iprintf>

  if (msg == &netconn_aborted) {
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	4a12      	ldr	r2, [pc, #72]	; (800dc40 <lwip_netconn_is_err_msg+0x68>)
 800dbf8:	4293      	cmp	r3, r2
 800dbfa:	d104      	bne.n	800dc06 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800dbfc:	683b      	ldr	r3, [r7, #0]
 800dbfe:	22f3      	movs	r2, #243	; 0xf3
 800dc00:	701a      	strb	r2, [r3, #0]
    return 1;
 800dc02:	2301      	movs	r3, #1
 800dc04:	e012      	b.n	800dc2c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	4a0e      	ldr	r2, [pc, #56]	; (800dc44 <lwip_netconn_is_err_msg+0x6c>)
 800dc0a:	4293      	cmp	r3, r2
 800dc0c:	d104      	bne.n	800dc18 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800dc0e:	683b      	ldr	r3, [r7, #0]
 800dc10:	22f2      	movs	r2, #242	; 0xf2
 800dc12:	701a      	strb	r2, [r3, #0]
    return 1;
 800dc14:	2301      	movs	r3, #1
 800dc16:	e009      	b.n	800dc2c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	4a0b      	ldr	r2, [pc, #44]	; (800dc48 <lwip_netconn_is_err_msg+0x70>)
 800dc1c:	4293      	cmp	r3, r2
 800dc1e:	d104      	bne.n	800dc2a <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800dc20:	683b      	ldr	r3, [r7, #0]
 800dc22:	22f1      	movs	r2, #241	; 0xf1
 800dc24:	701a      	strb	r2, [r3, #0]
    return 1;
 800dc26:	2301      	movs	r3, #1
 800dc28:	e000      	b.n	800dc2c <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800dc2a:	2300      	movs	r3, #0
}
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	3708      	adds	r7, #8
 800dc30:	46bd      	mov	sp, r7
 800dc32:	bd80      	pop	{r7, pc}
 800dc34:	0801ebec 	.word	0x0801ebec
 800dc38:	0801ec58 	.word	0x0801ec58
 800dc3c:	0801ec30 	.word	0x0801ec30
 800dc40:	080220dc 	.word	0x080220dc
 800dc44:	080220dd 	.word	0x080220dd
 800dc48:	080220de 	.word	0x080220de

0800dc4c <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b088      	sub	sp, #32
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	60f8      	str	r0, [r7, #12]
 800dc54:	60b9      	str	r1, [r7, #8]
 800dc56:	607a      	str	r2, [r7, #4]
 800dc58:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800dc5a:	68bb      	ldr	r3, [r7, #8]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d105      	bne.n	800dc6c <recv_udp+0x20>
 800dc60:	4b34      	ldr	r3, [pc, #208]	; (800dd34 <recv_udp+0xe8>)
 800dc62:	22e5      	movs	r2, #229	; 0xe5
 800dc64:	4934      	ldr	r1, [pc, #208]	; (800dd38 <recv_udp+0xec>)
 800dc66:	4835      	ldr	r0, [pc, #212]	; (800dd3c <recv_udp+0xf0>)
 800dc68:	f00e fd3a 	bl	801c6e0 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d105      	bne.n	800dc7e <recv_udp+0x32>
 800dc72:	4b30      	ldr	r3, [pc, #192]	; (800dd34 <recv_udp+0xe8>)
 800dc74:	22e6      	movs	r2, #230	; 0xe6
 800dc76:	4932      	ldr	r1, [pc, #200]	; (800dd40 <recv_udp+0xf4>)
 800dc78:	4830      	ldr	r0, [pc, #192]	; (800dd3c <recv_udp+0xf0>)
 800dc7a:	f00e fd31 	bl	801c6e0 <iprintf>
  conn = (struct netconn *)arg;
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800dc82:	69fb      	ldr	r3, [r7, #28]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d103      	bne.n	800dc90 <recv_udp+0x44>
    pbuf_free(p);
 800dc88:	6878      	ldr	r0, [r7, #4]
 800dc8a:	f003 fdd5 	bl	8011838 <pbuf_free>
    return;
 800dc8e:	e04d      	b.n	800dd2c <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800dc90:	69fb      	ldr	r3, [r7, #28]
 800dc92:	685b      	ldr	r3, [r3, #4]
 800dc94:	68ba      	ldr	r2, [r7, #8]
 800dc96:	429a      	cmp	r2, r3
 800dc98:	d005      	beq.n	800dca6 <recv_udp+0x5a>
 800dc9a:	4b26      	ldr	r3, [pc, #152]	; (800dd34 <recv_udp+0xe8>)
 800dc9c:	22ee      	movs	r2, #238	; 0xee
 800dc9e:	4929      	ldr	r1, [pc, #164]	; (800dd44 <recv_udp+0xf8>)
 800dca0:	4826      	ldr	r0, [pc, #152]	; (800dd3c <recv_udp+0xf0>)
 800dca2:	f00e fd1d 	bl	801c6e0 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800dca6:	69fb      	ldr	r3, [r7, #28]
 800dca8:	3310      	adds	r3, #16
 800dcaa:	4618      	mov	r0, r3
 800dcac:	f00d fc17 	bl	801b4de <sys_mbox_valid>
 800dcb0:	4603      	mov	r3, r0
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d103      	bne.n	800dcbe <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800dcb6:	6878      	ldr	r0, [r7, #4]
 800dcb8:	f003 fdbe 	bl	8011838 <pbuf_free>
    return;
 800dcbc:	e036      	b.n	800dd2c <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800dcbe:	2006      	movs	r0, #6
 800dcc0:	f002 feea 	bl	8010a98 <memp_malloc>
 800dcc4:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800dcc6:	69bb      	ldr	r3, [r7, #24]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d103      	bne.n	800dcd4 <recv_udp+0x88>
    pbuf_free(p);
 800dccc:	6878      	ldr	r0, [r7, #4]
 800dcce:	f003 fdb3 	bl	8011838 <pbuf_free>
    return;
 800dcd2:	e02b      	b.n	800dd2c <recv_udp+0xe0>
  } else {
    buf->p = p;
 800dcd4:	69bb      	ldr	r3, [r7, #24]
 800dcd6:	687a      	ldr	r2, [r7, #4]
 800dcd8:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800dcda:	69bb      	ldr	r3, [r7, #24]
 800dcdc:	687a      	ldr	r2, [r7, #4]
 800dcde:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800dce0:	683b      	ldr	r3, [r7, #0]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d002      	beq.n	800dcec <recv_udp+0xa0>
 800dce6:	683b      	ldr	r3, [r7, #0]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	e000      	b.n	800dcee <recv_udp+0xa2>
 800dcec:	2300      	movs	r3, #0
 800dcee:	69ba      	ldr	r2, [r7, #24]
 800dcf0:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800dcf2:	69bb      	ldr	r3, [r7, #24]
 800dcf4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800dcf6:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	891b      	ldrh	r3, [r3, #8]
 800dcfc:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800dcfe:	69fb      	ldr	r3, [r7, #28]
 800dd00:	3310      	adds	r3, #16
 800dd02:	69b9      	ldr	r1, [r7, #24]
 800dd04:	4618      	mov	r0, r3
 800dd06:	f00d fb75 	bl	801b3f4 <sys_mbox_trypost>
 800dd0a:	4603      	mov	r3, r0
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d003      	beq.n	800dd18 <recv_udp+0xcc>
    netbuf_delete(buf);
 800dd10:	69b8      	ldr	r0, [r7, #24]
 800dd12:	f001 f969 	bl	800efe8 <netbuf_delete>
    return;
 800dd16:	e009      	b.n	800dd2c <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800dd18:	69fb      	ldr	r3, [r7, #28]
 800dd1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d005      	beq.n	800dd2c <recv_udp+0xe0>
 800dd20:	69fb      	ldr	r3, [r7, #28]
 800dd22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd24:	8afa      	ldrh	r2, [r7, #22]
 800dd26:	2100      	movs	r1, #0
 800dd28:	69f8      	ldr	r0, [r7, #28]
 800dd2a:	4798      	blx	r3
  }
}
 800dd2c:	3720      	adds	r7, #32
 800dd2e:	46bd      	mov	sp, r7
 800dd30:	bd80      	pop	{r7, pc}
 800dd32:	bf00      	nop
 800dd34:	0801ebec 	.word	0x0801ebec
 800dd38:	0801ec64 	.word	0x0801ec64
 800dd3c:	0801ec30 	.word	0x0801ec30
 800dd40:	0801ec88 	.word	0x0801ec88
 800dd44:	0801eca8 	.word	0x0801eca8

0800dd48 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b088      	sub	sp, #32
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	60f8      	str	r0, [r7, #12]
 800dd50:	60b9      	str	r1, [r7, #8]
 800dd52:	607a      	str	r2, [r7, #4]
 800dd54:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800dd56:	68bb      	ldr	r3, [r7, #8]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d106      	bne.n	800dd6a <recv_tcp+0x22>
 800dd5c:	4b36      	ldr	r3, [pc, #216]	; (800de38 <recv_tcp+0xf0>)
 800dd5e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800dd62:	4936      	ldr	r1, [pc, #216]	; (800de3c <recv_tcp+0xf4>)
 800dd64:	4836      	ldr	r0, [pc, #216]	; (800de40 <recv_tcp+0xf8>)
 800dd66:	f00e fcbb 	bl	801c6e0 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d106      	bne.n	800dd7e <recv_tcp+0x36>
 800dd70:	4b31      	ldr	r3, [pc, #196]	; (800de38 <recv_tcp+0xf0>)
 800dd72:	f240 122d 	movw	r2, #301	; 0x12d
 800dd76:	4933      	ldr	r1, [pc, #204]	; (800de44 <recv_tcp+0xfc>)
 800dd78:	4831      	ldr	r0, [pc, #196]	; (800de40 <recv_tcp+0xf8>)
 800dd7a:	f00e fcb1 	bl	801c6e0 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800dd7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d006      	beq.n	800dd94 <recv_tcp+0x4c>
 800dd86:	4b2c      	ldr	r3, [pc, #176]	; (800de38 <recv_tcp+0xf0>)
 800dd88:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800dd8c:	492e      	ldr	r1, [pc, #184]	; (800de48 <recv_tcp+0x100>)
 800dd8e:	482c      	ldr	r0, [pc, #176]	; (800de40 <recv_tcp+0xf8>)
 800dd90:	f00e fca6 	bl	801c6e0 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800dd98:	697b      	ldr	r3, [r7, #20]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d102      	bne.n	800dda4 <recv_tcp+0x5c>
    return ERR_VAL;
 800dd9e:	f06f 0305 	mvn.w	r3, #5
 800dda2:	e045      	b.n	800de30 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800dda4:	697b      	ldr	r3, [r7, #20]
 800dda6:	685b      	ldr	r3, [r3, #4]
 800dda8:	68ba      	ldr	r2, [r7, #8]
 800ddaa:	429a      	cmp	r2, r3
 800ddac:	d006      	beq.n	800ddbc <recv_tcp+0x74>
 800ddae:	4b22      	ldr	r3, [pc, #136]	; (800de38 <recv_tcp+0xf0>)
 800ddb0:	f240 1235 	movw	r2, #309	; 0x135
 800ddb4:	4925      	ldr	r1, [pc, #148]	; (800de4c <recv_tcp+0x104>)
 800ddb6:	4822      	ldr	r0, [pc, #136]	; (800de40 <recv_tcp+0xf8>)
 800ddb8:	f00e fc92 	bl	801c6e0 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800ddbc:	697b      	ldr	r3, [r7, #20]
 800ddbe:	3310      	adds	r3, #16
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	f00d fb8c 	bl	801b4de <sys_mbox_valid>
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d10d      	bne.n	800dde8 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d008      	beq.n	800dde4 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	891b      	ldrh	r3, [r3, #8]
 800ddd6:	4619      	mov	r1, r3
 800ddd8:	68b8      	ldr	r0, [r7, #8]
 800ddda:	f004 fd07 	bl	80127ec <tcp_recved>
      pbuf_free(p);
 800ddde:	6878      	ldr	r0, [r7, #4]
 800dde0:	f003 fd2a 	bl	8011838 <pbuf_free>
    }
    return ERR_OK;
 800dde4:	2300      	movs	r3, #0
 800dde6:	e023      	b.n	800de30 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d005      	beq.n	800ddfa <recv_tcp+0xb2>
    msg = p;
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	891b      	ldrh	r3, [r3, #8]
 800ddf6:	83fb      	strh	r3, [r7, #30]
 800ddf8:	e003      	b.n	800de02 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800ddfa:	4b15      	ldr	r3, [pc, #84]	; (800de50 <recv_tcp+0x108>)
 800ddfc:	61bb      	str	r3, [r7, #24]
    len = 0;
 800ddfe:	2300      	movs	r3, #0
 800de00:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800de02:	697b      	ldr	r3, [r7, #20]
 800de04:	3310      	adds	r3, #16
 800de06:	69b9      	ldr	r1, [r7, #24]
 800de08:	4618      	mov	r0, r3
 800de0a:	f00d faf3 	bl	801b3f4 <sys_mbox_trypost>
 800de0e:	4603      	mov	r3, r0
 800de10:	2b00      	cmp	r3, #0
 800de12:	d002      	beq.n	800de1a <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800de14:	f04f 33ff 	mov.w	r3, #4294967295
 800de18:	e00a      	b.n	800de30 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800de1a:	697b      	ldr	r3, [r7, #20]
 800de1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d005      	beq.n	800de2e <recv_tcp+0xe6>
 800de22:	697b      	ldr	r3, [r7, #20]
 800de24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de26:	8bfa      	ldrh	r2, [r7, #30]
 800de28:	2100      	movs	r1, #0
 800de2a:	6978      	ldr	r0, [r7, #20]
 800de2c:	4798      	blx	r3
  }

  return ERR_OK;
 800de2e:	2300      	movs	r3, #0
}
 800de30:	4618      	mov	r0, r3
 800de32:	3720      	adds	r7, #32
 800de34:	46bd      	mov	sp, r7
 800de36:	bd80      	pop	{r7, pc}
 800de38:	0801ebec 	.word	0x0801ebec
 800de3c:	0801ecc8 	.word	0x0801ecc8
 800de40:	0801ec30 	.word	0x0801ec30
 800de44:	0801ecec 	.word	0x0801ecec
 800de48:	0801ed0c 	.word	0x0801ed0c
 800de4c:	0801ed24 	.word	0x0801ed24
 800de50:	080220de 	.word	0x080220de

0800de54 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800de54:	b580      	push	{r7, lr}
 800de56:	b084      	sub	sp, #16
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]
 800de5c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d106      	bne.n	800de76 <poll_tcp+0x22>
 800de68:	4b29      	ldr	r3, [pc, #164]	; (800df10 <poll_tcp+0xbc>)
 800de6a:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800de6e:	4929      	ldr	r1, [pc, #164]	; (800df14 <poll_tcp+0xc0>)
 800de70:	4829      	ldr	r0, [pc, #164]	; (800df18 <poll_tcp+0xc4>)
 800de72:	f00e fc35 	bl	801c6e0 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	785b      	ldrb	r3, [r3, #1]
 800de7a:	2b01      	cmp	r3, #1
 800de7c:	d104      	bne.n	800de88 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800de7e:	2101      	movs	r1, #1
 800de80:	68f8      	ldr	r0, [r7, #12]
 800de82:	f000 fe59 	bl	800eb38 <lwip_netconn_do_writemore>
 800de86:	e016      	b.n	800deb6 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	785b      	ldrb	r3, [r3, #1]
 800de8c:	2b04      	cmp	r3, #4
 800de8e:	d112      	bne.n	800deb6 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	6a1b      	ldr	r3, [r3, #32]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d00a      	beq.n	800deae <poll_tcp+0x5a>
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	6a1b      	ldr	r3, [r3, #32]
 800de9c:	7a5b      	ldrb	r3, [r3, #9]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d005      	beq.n	800deae <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	6a1b      	ldr	r3, [r3, #32]
 800dea6:	7a5a      	ldrb	r2, [r3, #9]
 800dea8:	3a01      	subs	r2, #1
 800deaa:	b2d2      	uxtb	r2, r2
 800deac:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800deae:	2101      	movs	r1, #1
 800deb0:	68f8      	ldr	r0, [r7, #12]
 800deb2:	f000 fb3b 	bl	800e52c <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	7f1b      	ldrb	r3, [r3, #28]
 800deba:	f003 0310 	and.w	r3, r3, #16
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d021      	beq.n	800df06 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	685b      	ldr	r3, [r3, #4]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d01d      	beq.n	800df06 <poll_tcp+0xb2>
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	685b      	ldr	r3, [r3, #4]
 800dece:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ded2:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800ded6:	d316      	bcc.n	800df06 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	685b      	ldr	r3, [r3, #4]
 800dedc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800dee0:	2b04      	cmp	r3, #4
 800dee2:	d810      	bhi.n	800df06 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	7f1b      	ldrb	r3, [r3, #28]
 800dee8:	f023 0310 	bic.w	r3, r3, #16
 800deec:	b2da      	uxtb	r2, r3
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800def6:	2b00      	cmp	r3, #0
 800def8:	d005      	beq.n	800df06 <poll_tcp+0xb2>
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800defe:	2200      	movs	r2, #0
 800df00:	2102      	movs	r1, #2
 800df02:	68f8      	ldr	r0, [r7, #12]
 800df04:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800df06:	2300      	movs	r3, #0
}
 800df08:	4618      	mov	r0, r3
 800df0a:	3710      	adds	r7, #16
 800df0c:	46bd      	mov	sp, r7
 800df0e:	bd80      	pop	{r7, pc}
 800df10:	0801ebec 	.word	0x0801ebec
 800df14:	0801ed44 	.word	0x0801ed44
 800df18:	0801ec30 	.word	0x0801ec30

0800df1c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800df1c:	b580      	push	{r7, lr}
 800df1e:	b086      	sub	sp, #24
 800df20:	af00      	add	r7, sp, #0
 800df22:	60f8      	str	r0, [r7, #12]
 800df24:	60b9      	str	r1, [r7, #8]
 800df26:	4613      	mov	r3, r2
 800df28:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800df2e:	697b      	ldr	r3, [r7, #20]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d106      	bne.n	800df42 <sent_tcp+0x26>
 800df34:	4b20      	ldr	r3, [pc, #128]	; (800dfb8 <sent_tcp+0x9c>)
 800df36:	f240 1293 	movw	r2, #403	; 0x193
 800df3a:	4920      	ldr	r1, [pc, #128]	; (800dfbc <sent_tcp+0xa0>)
 800df3c:	4820      	ldr	r0, [pc, #128]	; (800dfc0 <sent_tcp+0xa4>)
 800df3e:	f00e fbcf 	bl	801c6e0 <iprintf>

  if (conn) {
 800df42:	697b      	ldr	r3, [r7, #20]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d032      	beq.n	800dfae <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800df48:	697b      	ldr	r3, [r7, #20]
 800df4a:	785b      	ldrb	r3, [r3, #1]
 800df4c:	2b01      	cmp	r3, #1
 800df4e:	d104      	bne.n	800df5a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800df50:	2101      	movs	r1, #1
 800df52:	6978      	ldr	r0, [r7, #20]
 800df54:	f000 fdf0 	bl	800eb38 <lwip_netconn_do_writemore>
 800df58:	e007      	b.n	800df6a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800df5a:	697b      	ldr	r3, [r7, #20]
 800df5c:	785b      	ldrb	r3, [r3, #1]
 800df5e:	2b04      	cmp	r3, #4
 800df60:	d103      	bne.n	800df6a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800df62:	2101      	movs	r1, #1
 800df64:	6978      	ldr	r0, [r7, #20]
 800df66:	f000 fae1 	bl	800e52c <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800df6a:	697b      	ldr	r3, [r7, #20]
 800df6c:	685b      	ldr	r3, [r3, #4]
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d01d      	beq.n	800dfae <sent_tcp+0x92>
 800df72:	697b      	ldr	r3, [r7, #20]
 800df74:	685b      	ldr	r3, [r3, #4]
 800df76:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800df7a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800df7e:	d316      	bcc.n	800dfae <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800df80:	697b      	ldr	r3, [r7, #20]
 800df82:	685b      	ldr	r3, [r3, #4]
 800df84:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800df88:	2b04      	cmp	r3, #4
 800df8a:	d810      	bhi.n	800dfae <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800df8c:	697b      	ldr	r3, [r7, #20]
 800df8e:	7f1b      	ldrb	r3, [r3, #28]
 800df90:	f023 0310 	bic.w	r3, r3, #16
 800df94:	b2da      	uxtb	r2, r3
 800df96:	697b      	ldr	r3, [r7, #20]
 800df98:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800df9a:	697b      	ldr	r3, [r7, #20]
 800df9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d005      	beq.n	800dfae <sent_tcp+0x92>
 800dfa2:	697b      	ldr	r3, [r7, #20]
 800dfa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfa6:	88fa      	ldrh	r2, [r7, #6]
 800dfa8:	2102      	movs	r1, #2
 800dfaa:	6978      	ldr	r0, [r7, #20]
 800dfac:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800dfae:	2300      	movs	r3, #0
}
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	3718      	adds	r7, #24
 800dfb4:	46bd      	mov	sp, r7
 800dfb6:	bd80      	pop	{r7, pc}
 800dfb8:	0801ebec 	.word	0x0801ebec
 800dfbc:	0801ed44 	.word	0x0801ed44
 800dfc0:	0801ec30 	.word	0x0801ec30

0800dfc4 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b088      	sub	sp, #32
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]
 800dfcc:	460b      	mov	r3, r1
 800dfce:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800dfd4:	69fb      	ldr	r3, [r7, #28]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d106      	bne.n	800dfe8 <err_tcp+0x24>
 800dfda:	4b5f      	ldr	r3, [pc, #380]	; (800e158 <err_tcp+0x194>)
 800dfdc:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800dfe0:	495e      	ldr	r1, [pc, #376]	; (800e15c <err_tcp+0x198>)
 800dfe2:	485f      	ldr	r0, [pc, #380]	; (800e160 <err_tcp+0x19c>)
 800dfe4:	f00e fb7c 	bl	801c6e0 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800dfe8:	f00d fb94 	bl	801b714 <sys_arch_protect>
 800dfec:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800dfee:	69fb      	ldr	r3, [r7, #28]
 800dff0:	2200      	movs	r2, #0
 800dff2:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800dff4:	69fb      	ldr	r3, [r7, #28]
 800dff6:	78fa      	ldrb	r2, [r7, #3]
 800dff8:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800dffa:	69fb      	ldr	r3, [r7, #28]
 800dffc:	7f1b      	ldrb	r3, [r3, #28]
 800dffe:	f043 0301 	orr.w	r3, r3, #1
 800e002:	b2da      	uxtb	r2, r3
 800e004:	69fb      	ldr	r3, [r7, #28]
 800e006:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800e008:	69fb      	ldr	r3, [r7, #28]
 800e00a:	785b      	ldrb	r3, [r3, #1]
 800e00c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800e00e:	69fb      	ldr	r3, [r7, #28]
 800e010:	2200      	movs	r2, #0
 800e012:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800e014:	69b8      	ldr	r0, [r7, #24]
 800e016:	f00d fb8b 	bl	801b730 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800e01a:	69fb      	ldr	r3, [r7, #28]
 800e01c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d005      	beq.n	800e02e <err_tcp+0x6a>
 800e022:	69fb      	ldr	r3, [r7, #28]
 800e024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e026:	2200      	movs	r2, #0
 800e028:	2104      	movs	r1, #4
 800e02a:	69f8      	ldr	r0, [r7, #28]
 800e02c:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800e02e:	69fb      	ldr	r3, [r7, #28]
 800e030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e032:	2b00      	cmp	r3, #0
 800e034:	d005      	beq.n	800e042 <err_tcp+0x7e>
 800e036:	69fb      	ldr	r3, [r7, #28]
 800e038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e03a:	2200      	movs	r2, #0
 800e03c:	2100      	movs	r1, #0
 800e03e:	69f8      	ldr	r0, [r7, #28]
 800e040:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800e042:	69fb      	ldr	r3, [r7, #28]
 800e044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e046:	2b00      	cmp	r3, #0
 800e048:	d005      	beq.n	800e056 <err_tcp+0x92>
 800e04a:	69fb      	ldr	r3, [r7, #28]
 800e04c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e04e:	2200      	movs	r2, #0
 800e050:	2102      	movs	r1, #2
 800e052:	69f8      	ldr	r0, [r7, #28]
 800e054:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800e056:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e05a:	4618      	mov	r0, r3
 800e05c:	f7ff fd86 	bl	800db6c <lwip_netconn_err_to_msg>
 800e060:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800e062:	69fb      	ldr	r3, [r7, #28]
 800e064:	3310      	adds	r3, #16
 800e066:	4618      	mov	r0, r3
 800e068:	f00d fa39 	bl	801b4de <sys_mbox_valid>
 800e06c:	4603      	mov	r3, r0
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d005      	beq.n	800e07e <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800e072:	69fb      	ldr	r3, [r7, #28]
 800e074:	3310      	adds	r3, #16
 800e076:	6939      	ldr	r1, [r7, #16]
 800e078:	4618      	mov	r0, r3
 800e07a:	f00d f9bb 	bl	801b3f4 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800e07e:	69fb      	ldr	r3, [r7, #28]
 800e080:	3314      	adds	r3, #20
 800e082:	4618      	mov	r0, r3
 800e084:	f00d fa2b 	bl	801b4de <sys_mbox_valid>
 800e088:	4603      	mov	r3, r0
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d005      	beq.n	800e09a <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800e08e:	69fb      	ldr	r3, [r7, #28]
 800e090:	3314      	adds	r3, #20
 800e092:	6939      	ldr	r1, [r7, #16]
 800e094:	4618      	mov	r0, r3
 800e096:	f00d f9ad 	bl	801b3f4 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800e09a:	7dfb      	ldrb	r3, [r7, #23]
 800e09c:	2b01      	cmp	r3, #1
 800e09e:	d005      	beq.n	800e0ac <err_tcp+0xe8>
 800e0a0:	7dfb      	ldrb	r3, [r7, #23]
 800e0a2:	2b04      	cmp	r3, #4
 800e0a4:	d002      	beq.n	800e0ac <err_tcp+0xe8>
 800e0a6:	7dfb      	ldrb	r3, [r7, #23]
 800e0a8:	2b03      	cmp	r3, #3
 800e0aa:	d143      	bne.n	800e134 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800e0ac:	69fb      	ldr	r3, [r7, #28]
 800e0ae:	7f1b      	ldrb	r3, [r3, #28]
 800e0b0:	f003 0304 	and.w	r3, r3, #4
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	bf14      	ite	ne
 800e0b8:	2301      	movne	r3, #1
 800e0ba:	2300      	moveq	r3, #0
 800e0bc:	b2db      	uxtb	r3, r3
 800e0be:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800e0c0:	69fb      	ldr	r3, [r7, #28]
 800e0c2:	7f1b      	ldrb	r3, [r3, #28]
 800e0c4:	f023 0304 	bic.w	r3, r3, #4
 800e0c8:	b2da      	uxtb	r2, r3
 800e0ca:	69fb      	ldr	r3, [r7, #28]
 800e0cc:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d13b      	bne.n	800e14c <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800e0d4:	69fb      	ldr	r3, [r7, #28]
 800e0d6:	6a1b      	ldr	r3, [r3, #32]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d106      	bne.n	800e0ea <err_tcp+0x126>
 800e0dc:	4b1e      	ldr	r3, [pc, #120]	; (800e158 <err_tcp+0x194>)
 800e0de:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800e0e2:	4920      	ldr	r1, [pc, #128]	; (800e164 <err_tcp+0x1a0>)
 800e0e4:	481e      	ldr	r0, [pc, #120]	; (800e160 <err_tcp+0x19c>)
 800e0e6:	f00e fafb 	bl	801c6e0 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800e0ea:	7dfb      	ldrb	r3, [r7, #23]
 800e0ec:	2b04      	cmp	r3, #4
 800e0ee:	d104      	bne.n	800e0fa <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800e0f0:	69fb      	ldr	r3, [r7, #28]
 800e0f2:	6a1b      	ldr	r3, [r3, #32]
 800e0f4:	2200      	movs	r2, #0
 800e0f6:	711a      	strb	r2, [r3, #4]
 800e0f8:	e003      	b.n	800e102 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800e0fa:	69fb      	ldr	r3, [r7, #28]
 800e0fc:	6a1b      	ldr	r3, [r3, #32]
 800e0fe:	78fa      	ldrb	r2, [r7, #3]
 800e100:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800e102:	69fb      	ldr	r3, [r7, #28]
 800e104:	6a1b      	ldr	r3, [r3, #32]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	330c      	adds	r3, #12
 800e10a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800e10c:	68b8      	ldr	r0, [r7, #8]
 800e10e:	f00d fa77 	bl	801b600 <sys_sem_valid>
 800e112:	4603      	mov	r3, r0
 800e114:	2b00      	cmp	r3, #0
 800e116:	d106      	bne.n	800e126 <err_tcp+0x162>
 800e118:	4b0f      	ldr	r3, [pc, #60]	; (800e158 <err_tcp+0x194>)
 800e11a:	f240 12ef 	movw	r2, #495	; 0x1ef
 800e11e:	4912      	ldr	r1, [pc, #72]	; (800e168 <err_tcp+0x1a4>)
 800e120:	480f      	ldr	r0, [pc, #60]	; (800e160 <err_tcp+0x19c>)
 800e122:	f00e fadd 	bl	801c6e0 <iprintf>
      conn->current_msg = NULL;
 800e126:	69fb      	ldr	r3, [r7, #28]
 800e128:	2200      	movs	r2, #0
 800e12a:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800e12c:	68b8      	ldr	r0, [r7, #8]
 800e12e:	f00d fa4d 	bl	801b5cc <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800e132:	e00b      	b.n	800e14c <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800e134:	69fb      	ldr	r3, [r7, #28]
 800e136:	6a1b      	ldr	r3, [r3, #32]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d008      	beq.n	800e14e <err_tcp+0x18a>
 800e13c:	4b06      	ldr	r3, [pc, #24]	; (800e158 <err_tcp+0x194>)
 800e13e:	f240 12f7 	movw	r2, #503	; 0x1f7
 800e142:	490a      	ldr	r1, [pc, #40]	; (800e16c <err_tcp+0x1a8>)
 800e144:	4806      	ldr	r0, [pc, #24]	; (800e160 <err_tcp+0x19c>)
 800e146:	f00e facb 	bl	801c6e0 <iprintf>
  }
}
 800e14a:	e000      	b.n	800e14e <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800e14c:	bf00      	nop
}
 800e14e:	bf00      	nop
 800e150:	3720      	adds	r7, #32
 800e152:	46bd      	mov	sp, r7
 800e154:	bd80      	pop	{r7, pc}
 800e156:	bf00      	nop
 800e158:	0801ebec 	.word	0x0801ebec
 800e15c:	0801ed44 	.word	0x0801ed44
 800e160:	0801ec30 	.word	0x0801ec30
 800e164:	0801ed54 	.word	0x0801ed54
 800e168:	0801ed70 	.word	0x0801ed70
 800e16c:	0801ed8c 	.word	0x0801ed8c

0800e170 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800e170:	b580      	push	{r7, lr}
 800e172:	b084      	sub	sp, #16
 800e174:	af00      	add	r7, sp, #0
 800e176:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	685b      	ldr	r3, [r3, #4]
 800e17c:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800e17e:	6879      	ldr	r1, [r7, #4]
 800e180:	68f8      	ldr	r0, [r7, #12]
 800e182:	f005 fa17 	bl	80135b4 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800e186:	490a      	ldr	r1, [pc, #40]	; (800e1b0 <setup_tcp+0x40>)
 800e188:	68f8      	ldr	r0, [r7, #12]
 800e18a:	f005 fa25 	bl	80135d8 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800e18e:	4909      	ldr	r1, [pc, #36]	; (800e1b4 <setup_tcp+0x44>)
 800e190:	68f8      	ldr	r0, [r7, #12]
 800e192:	f005 fa43 	bl	801361c <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800e196:	2202      	movs	r2, #2
 800e198:	4907      	ldr	r1, [pc, #28]	; (800e1b8 <setup_tcp+0x48>)
 800e19a:	68f8      	ldr	r0, [r7, #12]
 800e19c:	f005 fa9a 	bl	80136d4 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800e1a0:	4906      	ldr	r1, [pc, #24]	; (800e1bc <setup_tcp+0x4c>)
 800e1a2:	68f8      	ldr	r0, [r7, #12]
 800e1a4:	f005 fa5c 	bl	8013660 <tcp_err>
}
 800e1a8:	bf00      	nop
 800e1aa:	3710      	adds	r7, #16
 800e1ac:	46bd      	mov	sp, r7
 800e1ae:	bd80      	pop	{r7, pc}
 800e1b0:	0800dd49 	.word	0x0800dd49
 800e1b4:	0800df1d 	.word	0x0800df1d
 800e1b8:	0800de55 	.word	0x0800de55
 800e1bc:	0800dfc5 	.word	0x0800dfc5

0800e1c0 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800e1c0:	b590      	push	{r4, r7, lr}
 800e1c2:	b085      	sub	sp, #20
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	685b      	ldr	r3, [r3, #4]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d006      	beq.n	800e1e4 <pcb_new+0x24>
 800e1d6:	4b2b      	ldr	r3, [pc, #172]	; (800e284 <pcb_new+0xc4>)
 800e1d8:	f240 2265 	movw	r2, #613	; 0x265
 800e1dc:	492a      	ldr	r1, [pc, #168]	; (800e288 <pcb_new+0xc8>)
 800e1de:	482b      	ldr	r0, [pc, #172]	; (800e28c <pcb_new+0xcc>)
 800e1e0:	f00e fa7e 	bl	801c6e0 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	781b      	ldrb	r3, [r3, #0]
 800e1ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e1ee:	2b10      	cmp	r3, #16
 800e1f0:	d022      	beq.n	800e238 <pcb_new+0x78>
 800e1f2:	2b20      	cmp	r3, #32
 800e1f4:	d133      	bne.n	800e25e <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	681c      	ldr	r4, [r3, #0]
 800e1fa:	7bfb      	ldrb	r3, [r7, #15]
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	f00a fc9e 	bl	8018b3e <udp_new_ip_type>
 800e202:	4603      	mov	r3, r0
 800e204:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	685b      	ldr	r3, [r3, #4]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d02a      	beq.n	800e266 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	781b      	ldrb	r3, [r3, #0]
 800e216:	2b22      	cmp	r3, #34	; 0x22
 800e218:	d104      	bne.n	800e224 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	685b      	ldr	r3, [r3, #4]
 800e220:	2201      	movs	r2, #1
 800e222:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	6858      	ldr	r0, [r3, #4]
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	461a      	mov	r2, r3
 800e230:	4917      	ldr	r1, [pc, #92]	; (800e290 <pcb_new+0xd0>)
 800e232:	f00a fc0b 	bl	8018a4c <udp_recv>
      }
      break;
 800e236:	e016      	b.n	800e266 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	681c      	ldr	r4, [r3, #0]
 800e23c:	7bfb      	ldrb	r3, [r7, #15]
 800e23e:	4618      	mov	r0, r3
 800e240:	f005 f9aa 	bl	8013598 <tcp_new_ip_type>
 800e244:	4603      	mov	r3, r0
 800e246:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	685b      	ldr	r3, [r3, #4]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d00b      	beq.n	800e26a <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	4618      	mov	r0, r3
 800e258:	f7ff ff8a 	bl	800e170 <setup_tcp>
      }
      break;
 800e25c:	e005      	b.n	800e26a <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	22fa      	movs	r2, #250	; 0xfa
 800e262:	711a      	strb	r2, [r3, #4]
      return;
 800e264:	e00a      	b.n	800e27c <pcb_new+0xbc>
      break;
 800e266:	bf00      	nop
 800e268:	e000      	b.n	800e26c <pcb_new+0xac>
      break;
 800e26a:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	685b      	ldr	r3, [r3, #4]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d102      	bne.n	800e27c <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	22ff      	movs	r2, #255	; 0xff
 800e27a:	711a      	strb	r2, [r3, #4]
  }
}
 800e27c:	3714      	adds	r7, #20
 800e27e:	46bd      	mov	sp, r7
 800e280:	bd90      	pop	{r4, r7, pc}
 800e282:	bf00      	nop
 800e284:	0801ebec 	.word	0x0801ebec
 800e288:	0801edd0 	.word	0x0801edd0
 800e28c:	0801ec30 	.word	0x0801ec30
 800e290:	0800dc4d 	.word	0x0800dc4d

0800e294 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800e294:	b580      	push	{r7, lr}
 800e296:	b084      	sub	sp, #16
 800e298:	af00      	add	r7, sp, #0
 800e29a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	685b      	ldr	r3, [r3, #4]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d102      	bne.n	800e2b6 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800e2b0:	68f8      	ldr	r0, [r7, #12]
 800e2b2:	f7ff ff85 	bl	800e1c0 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800e2b6:	bf00      	nop
 800e2b8:	3710      	adds	r7, #16
 800e2ba:	46bd      	mov	sp, r7
 800e2bc:	bd80      	pop	{r7, pc}
	...

0800e2c0 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800e2c0:	b580      	push	{r7, lr}
 800e2c2:	b086      	sub	sp, #24
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	4603      	mov	r3, r0
 800e2c8:	6039      	str	r1, [r7, #0]
 800e2ca:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800e2cc:	2300      	movs	r3, #0
 800e2ce:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800e2d0:	2007      	movs	r0, #7
 800e2d2:	f002 fbe1 	bl	8010a98 <memp_malloc>
 800e2d6:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d101      	bne.n	800e2e2 <netconn_alloc+0x22>
    return NULL;
 800e2de:	2300      	movs	r3, #0
 800e2e0:	e052      	b.n	800e388 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	2200      	movs	r2, #0
 800e2e6:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	79fa      	ldrb	r2, [r7, #7]
 800e2ec:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	2200      	movs	r2, #0
 800e2f2:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800e2f4:	79fb      	ldrb	r3, [r7, #7]
 800e2f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e2fa:	2b10      	cmp	r3, #16
 800e2fc:	d004      	beq.n	800e308 <netconn_alloc+0x48>
 800e2fe:	2b20      	cmp	r3, #32
 800e300:	d105      	bne.n	800e30e <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800e302:	2306      	movs	r3, #6
 800e304:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800e306:	e00a      	b.n	800e31e <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800e308:	2306      	movs	r3, #6
 800e30a:	617b      	str	r3, [r7, #20]
      break;
 800e30c:	e007      	b.n	800e31e <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800e30e:	4b20      	ldr	r3, [pc, #128]	; (800e390 <netconn_alloc+0xd0>)
 800e310:	f240 22e5 	movw	r2, #741	; 0x2e5
 800e314:	491f      	ldr	r1, [pc, #124]	; (800e394 <netconn_alloc+0xd4>)
 800e316:	4820      	ldr	r0, [pc, #128]	; (800e398 <netconn_alloc+0xd8>)
 800e318:	f00e f9e2 	bl	801c6e0 <iprintf>
      goto free_and_return;
 800e31c:	e02f      	b.n	800e37e <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	3310      	adds	r3, #16
 800e322:	6979      	ldr	r1, [r7, #20]
 800e324:	4618      	mov	r0, r3
 800e326:	f00d f831 	bl	801b38c <sys_mbox_new>
 800e32a:	4603      	mov	r3, r0
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d125      	bne.n	800e37c <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	330c      	adds	r3, #12
 800e334:	2100      	movs	r1, #0
 800e336:	4618      	mov	r0, r3
 800e338:	f00d f8ef 	bl	801b51a <sys_sem_new>
 800e33c:	4603      	mov	r3, r0
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d005      	beq.n	800e34e <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	3310      	adds	r3, #16
 800e346:	4618      	mov	r0, r3
 800e348:	f00d f842 	bl	801b3d0 <sys_mbox_free>
    goto free_and_return;
 800e34c:	e017      	b.n	800e37e <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	3314      	adds	r3, #20
 800e352:	4618      	mov	r0, r3
 800e354:	f00d f8d4 	bl	801b500 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	2200      	movs	r2, #0
 800e35c:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	f04f 32ff 	mov.w	r2, #4294967295
 800e364:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	683a      	ldr	r2, [r7, #0]
 800e36a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	2200      	movs	r2, #0
 800e370:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	7cfa      	ldrb	r2, [r7, #19]
 800e376:	771a      	strb	r2, [r3, #28]
  return conn;
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	e005      	b.n	800e388 <netconn_alloc+0xc8>
    goto free_and_return;
 800e37c:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800e37e:	68f9      	ldr	r1, [r7, #12]
 800e380:	2007      	movs	r0, #7
 800e382:	f002 fbdb 	bl	8010b3c <memp_free>
  return NULL;
 800e386:	2300      	movs	r3, #0
}
 800e388:	4618      	mov	r0, r3
 800e38a:	3718      	adds	r7, #24
 800e38c:	46bd      	mov	sp, r7
 800e38e:	bd80      	pop	{r7, pc}
 800e390:	0801ebec 	.word	0x0801ebec
 800e394:	0801edf0 	.word	0x0801edf0
 800e398:	0801ec30 	.word	0x0801ec30

0800e39c <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b082      	sub	sp, #8
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	685b      	ldr	r3, [r3, #4]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d006      	beq.n	800e3ba <netconn_free+0x1e>
 800e3ac:	4b1b      	ldr	r3, [pc, #108]	; (800e41c <netconn_free+0x80>)
 800e3ae:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800e3b2:	491b      	ldr	r1, [pc, #108]	; (800e420 <netconn_free+0x84>)
 800e3b4:	481b      	ldr	r0, [pc, #108]	; (800e424 <netconn_free+0x88>)
 800e3b6:	f00e f993 	bl	801c6e0 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	3310      	adds	r3, #16
 800e3be:	4618      	mov	r0, r3
 800e3c0:	f00d f88d 	bl	801b4de <sys_mbox_valid>
 800e3c4:	4603      	mov	r3, r0
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d006      	beq.n	800e3d8 <netconn_free+0x3c>
 800e3ca:	4b14      	ldr	r3, [pc, #80]	; (800e41c <netconn_free+0x80>)
 800e3cc:	f240 3223 	movw	r2, #803	; 0x323
 800e3d0:	4915      	ldr	r1, [pc, #84]	; (800e428 <netconn_free+0x8c>)
 800e3d2:	4814      	ldr	r0, [pc, #80]	; (800e424 <netconn_free+0x88>)
 800e3d4:	f00e f984 	bl	801c6e0 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	3314      	adds	r3, #20
 800e3dc:	4618      	mov	r0, r3
 800e3de:	f00d f87e 	bl	801b4de <sys_mbox_valid>
 800e3e2:	4603      	mov	r3, r0
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d006      	beq.n	800e3f6 <netconn_free+0x5a>
 800e3e8:	4b0c      	ldr	r3, [pc, #48]	; (800e41c <netconn_free+0x80>)
 800e3ea:	f240 3226 	movw	r2, #806	; 0x326
 800e3ee:	490f      	ldr	r1, [pc, #60]	; (800e42c <netconn_free+0x90>)
 800e3f0:	480c      	ldr	r0, [pc, #48]	; (800e424 <netconn_free+0x88>)
 800e3f2:	f00e f975 	bl	801c6e0 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	330c      	adds	r3, #12
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	f00d f8f3 	bl	801b5e6 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	330c      	adds	r3, #12
 800e404:	4618      	mov	r0, r3
 800e406:	f00d f90c 	bl	801b622 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800e40a:	6879      	ldr	r1, [r7, #4]
 800e40c:	2007      	movs	r0, #7
 800e40e:	f002 fb95 	bl	8010b3c <memp_free>
}
 800e412:	bf00      	nop
 800e414:	3708      	adds	r7, #8
 800e416:	46bd      	mov	sp, r7
 800e418:	bd80      	pop	{r7, pc}
 800e41a:	bf00      	nop
 800e41c:	0801ebec 	.word	0x0801ebec
 800e420:	0801ee18 	.word	0x0801ee18
 800e424:	0801ec30 	.word	0x0801ec30
 800e428:	0801ee48 	.word	0x0801ee48
 800e42c:	0801ee84 	.word	0x0801ee84

0800e430 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800e430:	b580      	push	{r7, lr}
 800e432:	b086      	sub	sp, #24
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	3310      	adds	r3, #16
 800e43c:	4618      	mov	r0, r3
 800e43e:	f00d f84e 	bl	801b4de <sys_mbox_valid>
 800e442:	4603      	mov	r3, r0
 800e444:	2b00      	cmp	r3, #0
 800e446:	d02f      	beq.n	800e4a8 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800e448:	e018      	b.n	800e47c <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	781b      	ldrb	r3, [r3, #0]
 800e44e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e452:	2b10      	cmp	r3, #16
 800e454:	d10e      	bne.n	800e474 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800e456:	693b      	ldr	r3, [r7, #16]
 800e458:	f107 020f 	add.w	r2, r7, #15
 800e45c:	4611      	mov	r1, r2
 800e45e:	4618      	mov	r0, r3
 800e460:	f7ff fbba 	bl	800dbd8 <lwip_netconn_is_err_msg>
 800e464:	4603      	mov	r3, r0
 800e466:	2b00      	cmp	r3, #0
 800e468:	d108      	bne.n	800e47c <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800e46a:	693b      	ldr	r3, [r7, #16]
 800e46c:	4618      	mov	r0, r3
 800e46e:	f003 f9e3 	bl	8011838 <pbuf_free>
 800e472:	e003      	b.n	800e47c <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800e474:	693b      	ldr	r3, [r7, #16]
 800e476:	4618      	mov	r0, r3
 800e478:	f000 fdb6 	bl	800efe8 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	3310      	adds	r3, #16
 800e480:	f107 0210 	add.w	r2, r7, #16
 800e484:	4611      	mov	r1, r2
 800e486:	4618      	mov	r0, r3
 800e488:	f00d f80d 	bl	801b4a6 <sys_arch_mbox_tryfetch>
 800e48c:	4603      	mov	r3, r0
 800e48e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e492:	d1da      	bne.n	800e44a <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	3310      	adds	r3, #16
 800e498:	4618      	mov	r0, r3
 800e49a:	f00c ff99 	bl	801b3d0 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	3310      	adds	r3, #16
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	f00d f82c 	bl	801b500 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	3314      	adds	r3, #20
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	f00d f816 	bl	801b4de <sys_mbox_valid>
 800e4b2:	4603      	mov	r3, r0
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d034      	beq.n	800e522 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800e4b8:	e01d      	b.n	800e4f6 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800e4ba:	693b      	ldr	r3, [r7, #16]
 800e4bc:	f107 020e 	add.w	r2, r7, #14
 800e4c0:	4611      	mov	r1, r2
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	f7ff fb88 	bl	800dbd8 <lwip_netconn_is_err_msg>
 800e4c8:	4603      	mov	r3, r0
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d113      	bne.n	800e4f6 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800e4ce:	693b      	ldr	r3, [r7, #16]
 800e4d0:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800e4d2:	6978      	ldr	r0, [r7, #20]
 800e4d4:	f7ff ffac 	bl	800e430 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800e4d8:	697b      	ldr	r3, [r7, #20]
 800e4da:	685b      	ldr	r3, [r3, #4]
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d007      	beq.n	800e4f0 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800e4e0:	697b      	ldr	r3, [r7, #20]
 800e4e2:	685b      	ldr	r3, [r3, #4]
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	f003 ffa7 	bl	8012438 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800e4ea:	697b      	ldr	r3, [r7, #20]
 800e4ec:	2200      	movs	r2, #0
 800e4ee:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800e4f0:	6978      	ldr	r0, [r7, #20]
 800e4f2:	f7ff ff53 	bl	800e39c <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	3314      	adds	r3, #20
 800e4fa:	f107 0210 	add.w	r2, r7, #16
 800e4fe:	4611      	mov	r1, r2
 800e500:	4618      	mov	r0, r3
 800e502:	f00c ffd0 	bl	801b4a6 <sys_arch_mbox_tryfetch>
 800e506:	4603      	mov	r3, r0
 800e508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e50c:	d1d5      	bne.n	800e4ba <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	3314      	adds	r3, #20
 800e512:	4618      	mov	r0, r3
 800e514:	f00c ff5c 	bl	801b3d0 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	3314      	adds	r3, #20
 800e51c:	4618      	mov	r0, r3
 800e51e:	f00c ffef 	bl	801b500 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800e522:	bf00      	nop
 800e524:	3718      	adds	r7, #24
 800e526:	46bd      	mov	sp, r7
 800e528:	bd80      	pop	{r7, pc}
	...

0800e52c <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800e52c:	b580      	push	{r7, lr}
 800e52e:	b086      	sub	sp, #24
 800e530:	af00      	add	r7, sp, #0
 800e532:	6078      	str	r0, [r7, #4]
 800e534:	460b      	mov	r3, r1
 800e536:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800e538:	2300      	movs	r3, #0
 800e53a:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d106      	bne.n	800e550 <lwip_netconn_do_close_internal+0x24>
 800e542:	4ba1      	ldr	r3, [pc, #644]	; (800e7c8 <lwip_netconn_do_close_internal+0x29c>)
 800e544:	f240 32a2 	movw	r2, #930	; 0x3a2
 800e548:	49a0      	ldr	r1, [pc, #640]	; (800e7cc <lwip_netconn_do_close_internal+0x2a0>)
 800e54a:	48a1      	ldr	r0, [pc, #644]	; (800e7d0 <lwip_netconn_do_close_internal+0x2a4>)
 800e54c:	f00e f8c8 	bl	801c6e0 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	781b      	ldrb	r3, [r3, #0]
 800e554:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e558:	2b10      	cmp	r3, #16
 800e55a:	d006      	beq.n	800e56a <lwip_netconn_do_close_internal+0x3e>
 800e55c:	4b9a      	ldr	r3, [pc, #616]	; (800e7c8 <lwip_netconn_do_close_internal+0x29c>)
 800e55e:	f240 32a3 	movw	r2, #931	; 0x3a3
 800e562:	499c      	ldr	r1, [pc, #624]	; (800e7d4 <lwip_netconn_do_close_internal+0x2a8>)
 800e564:	489a      	ldr	r0, [pc, #616]	; (800e7d0 <lwip_netconn_do_close_internal+0x2a4>)
 800e566:	f00e f8bb 	bl	801c6e0 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	785b      	ldrb	r3, [r3, #1]
 800e56e:	2b04      	cmp	r3, #4
 800e570:	d006      	beq.n	800e580 <lwip_netconn_do_close_internal+0x54>
 800e572:	4b95      	ldr	r3, [pc, #596]	; (800e7c8 <lwip_netconn_do_close_internal+0x29c>)
 800e574:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800e578:	4997      	ldr	r1, [pc, #604]	; (800e7d8 <lwip_netconn_do_close_internal+0x2ac>)
 800e57a:	4895      	ldr	r0, [pc, #596]	; (800e7d0 <lwip_netconn_do_close_internal+0x2a4>)
 800e57c:	f00e f8b0 	bl	801c6e0 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	685b      	ldr	r3, [r3, #4]
 800e584:	2b00      	cmp	r3, #0
 800e586:	d106      	bne.n	800e596 <lwip_netconn_do_close_internal+0x6a>
 800e588:	4b8f      	ldr	r3, [pc, #572]	; (800e7c8 <lwip_netconn_do_close_internal+0x29c>)
 800e58a:	f240 32a5 	movw	r2, #933	; 0x3a5
 800e58e:	4993      	ldr	r1, [pc, #588]	; (800e7dc <lwip_netconn_do_close_internal+0x2b0>)
 800e590:	488f      	ldr	r0, [pc, #572]	; (800e7d0 <lwip_netconn_do_close_internal+0x2a4>)
 800e592:	f00e f8a5 	bl	801c6e0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	6a1b      	ldr	r3, [r3, #32]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d106      	bne.n	800e5ac <lwip_netconn_do_close_internal+0x80>
 800e59e:	4b8a      	ldr	r3, [pc, #552]	; (800e7c8 <lwip_netconn_do_close_internal+0x29c>)
 800e5a0:	f240 32a6 	movw	r2, #934	; 0x3a6
 800e5a4:	498e      	ldr	r1, [pc, #568]	; (800e7e0 <lwip_netconn_do_close_internal+0x2b4>)
 800e5a6:	488a      	ldr	r0, [pc, #552]	; (800e7d0 <lwip_netconn_do_close_internal+0x2a4>)
 800e5a8:	f00e f89a 	bl	801c6e0 <iprintf>

  tpcb = conn->pcb.tcp;
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	685b      	ldr	r3, [r3, #4]
 800e5b0:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	6a1b      	ldr	r3, [r3, #32]
 800e5b6:	7a1b      	ldrb	r3, [r3, #8]
 800e5b8:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800e5ba:	7bfb      	ldrb	r3, [r7, #15]
 800e5bc:	f003 0301 	and.w	r3, r3, #1
 800e5c0:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800e5c2:	7bfb      	ldrb	r3, [r7, #15]
 800e5c4:	f003 0302 	and.w	r3, r3, #2
 800e5c8:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800e5ca:	7bfb      	ldrb	r3, [r7, #15]
 800e5cc:	2b03      	cmp	r3, #3
 800e5ce:	d102      	bne.n	800e5d6 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800e5d0:	2301      	movs	r3, #1
 800e5d2:	75bb      	strb	r3, [r7, #22]
 800e5d4:	e01f      	b.n	800e616 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800e5d6:	7bbb      	ldrb	r3, [r7, #14]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d00e      	beq.n	800e5fa <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800e5dc:	693b      	ldr	r3, [r7, #16]
 800e5de:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800e5e0:	2b05      	cmp	r3, #5
 800e5e2:	d007      	beq.n	800e5f4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800e5e4:	693b      	ldr	r3, [r7, #16]
 800e5e6:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800e5e8:	2b06      	cmp	r3, #6
 800e5ea:	d003      	beq.n	800e5f4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800e5ec:	693b      	ldr	r3, [r7, #16]
 800e5ee:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800e5f0:	2b08      	cmp	r3, #8
 800e5f2:	d102      	bne.n	800e5fa <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800e5f4:	2301      	movs	r3, #1
 800e5f6:	75bb      	strb	r3, [r7, #22]
 800e5f8:	e00d      	b.n	800e616 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800e5fa:	7b7b      	ldrb	r3, [r7, #13]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d008      	beq.n	800e612 <lwip_netconn_do_close_internal+0xe6>
 800e600:	693b      	ldr	r3, [r7, #16]
 800e602:	8b5b      	ldrh	r3, [r3, #26]
 800e604:	f003 0310 	and.w	r3, r3, #16
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d002      	beq.n	800e612 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800e60c:	2301      	movs	r3, #1
 800e60e:	75bb      	strb	r3, [r7, #22]
 800e610:	e001      	b.n	800e616 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800e612:	2300      	movs	r3, #0
 800e614:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800e616:	7dbb      	ldrb	r3, [r7, #22]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d003      	beq.n	800e624 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800e61c:	2100      	movs	r1, #0
 800e61e:	6938      	ldr	r0, [r7, #16]
 800e620:	f004 ffc8 	bl	80135b4 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800e624:	693b      	ldr	r3, [r7, #16]
 800e626:	7d1b      	ldrb	r3, [r3, #20]
 800e628:	2b01      	cmp	r3, #1
 800e62a:	d104      	bne.n	800e636 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800e62c:	2100      	movs	r1, #0
 800e62e:	6938      	ldr	r0, [r7, #16]
 800e630:	f005 f838 	bl	80136a4 <tcp_accept>
 800e634:	e01d      	b.n	800e672 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800e636:	7bbb      	ldrb	r3, [r7, #14]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d007      	beq.n	800e64c <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800e63c:	2100      	movs	r1, #0
 800e63e:	6938      	ldr	r0, [r7, #16]
 800e640:	f004 ffca 	bl	80135d8 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800e644:	2100      	movs	r1, #0
 800e646:	6938      	ldr	r0, [r7, #16]
 800e648:	f005 f82c 	bl	80136a4 <tcp_accept>
    }
    if (shut_tx) {
 800e64c:	7b7b      	ldrb	r3, [r7, #13]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d003      	beq.n	800e65a <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800e652:	2100      	movs	r1, #0
 800e654:	6938      	ldr	r0, [r7, #16]
 800e656:	f004 ffe1 	bl	801361c <tcp_sent>
    }
    if (shut_close) {
 800e65a:	7dbb      	ldrb	r3, [r7, #22]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d008      	beq.n	800e672 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800e660:	2200      	movs	r2, #0
 800e662:	2100      	movs	r1, #0
 800e664:	6938      	ldr	r0, [r7, #16]
 800e666:	f005 f835 	bl	80136d4 <tcp_poll>
      tcp_err(tpcb, NULL);
 800e66a:	2100      	movs	r1, #0
 800e66c:	6938      	ldr	r0, [r7, #16]
 800e66e:	f004 fff7 	bl	8013660 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800e672:	7dbb      	ldrb	r3, [r7, #22]
 800e674:	2b00      	cmp	r3, #0
 800e676:	d005      	beq.n	800e684 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800e678:	6938      	ldr	r0, [r7, #16]
 800e67a:	f003 fd97 	bl	80121ac <tcp_close>
 800e67e:	4603      	mov	r3, r0
 800e680:	75fb      	strb	r3, [r7, #23]
 800e682:	e007      	b.n	800e694 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800e684:	7bbb      	ldrb	r3, [r7, #14]
 800e686:	7b7a      	ldrb	r2, [r7, #13]
 800e688:	4619      	mov	r1, r3
 800e68a:	6938      	ldr	r0, [r7, #16]
 800e68c:	f003 fdba 	bl	8012204 <tcp_shutdown>
 800e690:	4603      	mov	r3, r0
 800e692:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800e694:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d102      	bne.n	800e6a2 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800e69c:	2301      	movs	r3, #1
 800e69e:	757b      	strb	r3, [r7, #21]
 800e6a0:	e016      	b.n	800e6d0 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800e6a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e6a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6aa:	d10f      	bne.n	800e6cc <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	6a1b      	ldr	r3, [r3, #32]
 800e6b0:	7a5b      	ldrb	r3, [r3, #9]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d10c      	bne.n	800e6d0 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800e6b6:	2301      	movs	r3, #1
 800e6b8:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800e6ba:	7dbb      	ldrb	r3, [r7, #22]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d007      	beq.n	800e6d0 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800e6c0:	6938      	ldr	r0, [r7, #16]
 800e6c2:	f003 feb9 	bl	8012438 <tcp_abort>
          err = ERR_OK;
 800e6c6:	2300      	movs	r3, #0
 800e6c8:	75fb      	strb	r3, [r7, #23]
 800e6ca:	e001      	b.n	800e6d0 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800e6cc:	2301      	movs	r3, #1
 800e6ce:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800e6d0:	7d7b      	ldrb	r3, [r7, #21]
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d044      	beq.n	800e760 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	6a1b      	ldr	r3, [r3, #32]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	330c      	adds	r3, #12
 800e6de:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	6a1b      	ldr	r3, [r3, #32]
 800e6e4:	7dfa      	ldrb	r2, [r7, #23]
 800e6e6:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	2200      	movs	r2, #0
 800e6ec:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800e6f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d129      	bne.n	800e750 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800e6fc:	7dbb      	ldrb	r3, [r7, #22]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d00c      	beq.n	800e71c <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	2200      	movs	r2, #0
 800e706:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d005      	beq.n	800e71c <lwip_netconn_do_close_internal+0x1f0>
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e714:	2200      	movs	r2, #0
 800e716:	2104      	movs	r1, #4
 800e718:	6878      	ldr	r0, [r7, #4]
 800e71a:	4798      	blx	r3
      }
      if (shut_rx) {
 800e71c:	7bbb      	ldrb	r3, [r7, #14]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d009      	beq.n	800e736 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e726:	2b00      	cmp	r3, #0
 800e728:	d005      	beq.n	800e736 <lwip_netconn_do_close_internal+0x20a>
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e72e:	2200      	movs	r2, #0
 800e730:	2100      	movs	r1, #0
 800e732:	6878      	ldr	r0, [r7, #4]
 800e734:	4798      	blx	r3
      }
      if (shut_tx) {
 800e736:	7b7b      	ldrb	r3, [r7, #13]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d009      	beq.n	800e750 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e740:	2b00      	cmp	r3, #0
 800e742:	d005      	beq.n	800e750 <lwip_netconn_do_close_internal+0x224>
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e748:	2200      	movs	r2, #0
 800e74a:	2102      	movs	r1, #2
 800e74c:	6878      	ldr	r0, [r7, #4]
 800e74e:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800e750:	78fb      	ldrb	r3, [r7, #3]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d002      	beq.n	800e75c <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800e756:	68b8      	ldr	r0, [r7, #8]
 800e758:	f00c ff38 	bl	801b5cc <sys_sem_signal>
    }
    return ERR_OK;
 800e75c:	2300      	movs	r3, #0
 800e75e:	e02e      	b.n	800e7be <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 800e760:	7d7b      	ldrb	r3, [r7, #21]
 800e762:	2b00      	cmp	r3, #0
 800e764:	d11e      	bne.n	800e7a4 <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800e766:	693b      	ldr	r3, [r7, #16]
 800e768:	7d1b      	ldrb	r3, [r3, #20]
 800e76a:	2b01      	cmp	r3, #1
 800e76c:	d106      	bne.n	800e77c <lwip_netconn_do_close_internal+0x250>
 800e76e:	4b16      	ldr	r3, [pc, #88]	; (800e7c8 <lwip_netconn_do_close_internal+0x29c>)
 800e770:	f240 4241 	movw	r2, #1089	; 0x441
 800e774:	491b      	ldr	r1, [pc, #108]	; (800e7e4 <lwip_netconn_do_close_internal+0x2b8>)
 800e776:	4816      	ldr	r0, [pc, #88]	; (800e7d0 <lwip_netconn_do_close_internal+0x2a4>)
 800e778:	f00d ffb2 	bl	801c6e0 <iprintf>
    if (shut_tx) {
 800e77c:	7b7b      	ldrb	r3, [r7, #13]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d003      	beq.n	800e78a <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 800e782:	4919      	ldr	r1, [pc, #100]	; (800e7e8 <lwip_netconn_do_close_internal+0x2bc>)
 800e784:	6938      	ldr	r0, [r7, #16]
 800e786:	f004 ff49 	bl	801361c <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800e78a:	2201      	movs	r2, #1
 800e78c:	4917      	ldr	r1, [pc, #92]	; (800e7ec <lwip_netconn_do_close_internal+0x2c0>)
 800e78e:	6938      	ldr	r0, [r7, #16]
 800e790:	f004 ffa0 	bl	80136d4 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800e794:	4916      	ldr	r1, [pc, #88]	; (800e7f0 <lwip_netconn_do_close_internal+0x2c4>)
 800e796:	6938      	ldr	r0, [r7, #16]
 800e798:	f004 ff62 	bl	8013660 <tcp_err>
    tcp_arg(tpcb, conn);
 800e79c:	6879      	ldr	r1, [r7, #4]
 800e79e:	6938      	ldr	r0, [r7, #16]
 800e7a0:	f004 ff08 	bl	80135b4 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800e7a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d106      	bne.n	800e7ba <lwip_netconn_do_close_internal+0x28e>
 800e7ac:	4b06      	ldr	r3, [pc, #24]	; (800e7c8 <lwip_netconn_do_close_internal+0x29c>)
 800e7ae:	f240 424d 	movw	r2, #1101	; 0x44d
 800e7b2:	4910      	ldr	r1, [pc, #64]	; (800e7f4 <lwip_netconn_do_close_internal+0x2c8>)
 800e7b4:	4806      	ldr	r0, [pc, #24]	; (800e7d0 <lwip_netconn_do_close_internal+0x2a4>)
 800e7b6:	f00d ff93 	bl	801c6e0 <iprintf>
  return err;
 800e7ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e7be:	4618      	mov	r0, r3
 800e7c0:	3718      	adds	r7, #24
 800e7c2:	46bd      	mov	sp, r7
 800e7c4:	bd80      	pop	{r7, pc}
 800e7c6:	bf00      	nop
 800e7c8:	0801ebec 	.word	0x0801ebec
 800e7cc:	0801eec0 	.word	0x0801eec0
 800e7d0:	0801ec30 	.word	0x0801ec30
 800e7d4:	0801eed0 	.word	0x0801eed0
 800e7d8:	0801eef0 	.word	0x0801eef0
 800e7dc:	0801ef14 	.word	0x0801ef14
 800e7e0:	0801ed54 	.word	0x0801ed54
 800e7e4:	0801ef28 	.word	0x0801ef28
 800e7e8:	0800df1d 	.word	0x0800df1d
 800e7ec:	0800de55 	.word	0x0800de55
 800e7f0:	0800dfc5 	.word	0x0800dfc5
 800e7f4:	0801ef4c 	.word	0x0801ef4c

0800e7f8 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800e7f8:	b580      	push	{r7, lr}
 800e7fa:	b084      	sub	sp, #16
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	785b      	ldrb	r3, [r3, #1]
 800e80a:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800e80c:	7afb      	ldrb	r3, [r7, #11]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d00d      	beq.n	800e82e <lwip_netconn_do_delconn+0x36>
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	781b      	ldrb	r3, [r3, #0]
 800e818:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e81c:	2b10      	cmp	r3, #16
 800e81e:	d006      	beq.n	800e82e <lwip_netconn_do_delconn+0x36>
 800e820:	4b60      	ldr	r3, [pc, #384]	; (800e9a4 <lwip_netconn_do_delconn+0x1ac>)
 800e822:	f240 425e 	movw	r2, #1118	; 0x45e
 800e826:	4960      	ldr	r1, [pc, #384]	; (800e9a8 <lwip_netconn_do_delconn+0x1b0>)
 800e828:	4860      	ldr	r0, [pc, #384]	; (800e9ac <lwip_netconn_do_delconn+0x1b4>)
 800e82a:	f00d ff59 	bl	801c6e0 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800e82e:	7afb      	ldrb	r3, [r7, #11]
 800e830:	2b00      	cmp	r3, #0
 800e832:	d005      	beq.n	800e840 <lwip_netconn_do_delconn+0x48>
 800e834:	7afb      	ldrb	r3, [r7, #11]
 800e836:	2b02      	cmp	r3, #2
 800e838:	d002      	beq.n	800e840 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800e83a:	7afb      	ldrb	r3, [r7, #11]
 800e83c:	2b03      	cmp	r3, #3
 800e83e:	d109      	bne.n	800e854 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800e840:	7afb      	ldrb	r3, [r7, #11]
 800e842:	2b03      	cmp	r3, #3
 800e844:	d10a      	bne.n	800e85c <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	7f1b      	ldrb	r3, [r3, #28]
 800e84c:	f003 0304 	and.w	r3, r3, #4
 800e850:	2b00      	cmp	r3, #0
 800e852:	d103      	bne.n	800e85c <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	22fb      	movs	r2, #251	; 0xfb
 800e858:	711a      	strb	r2, [r3, #4]
 800e85a:	e097      	b.n	800e98c <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800e85c:	7afb      	ldrb	r3, [r7, #11]
 800e85e:	2b03      	cmp	r3, #3
 800e860:	d10d      	bne.n	800e87e <lwip_netconn_do_delconn+0x86>
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	7f1b      	ldrb	r3, [r3, #28]
 800e868:	f003 0304 	and.w	r3, r3, #4
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d106      	bne.n	800e87e <lwip_netconn_do_delconn+0x86>
 800e870:	4b4c      	ldr	r3, [pc, #304]	; (800e9a4 <lwip_netconn_do_delconn+0x1ac>)
 800e872:	f240 427a 	movw	r2, #1146	; 0x47a
 800e876:	494e      	ldr	r1, [pc, #312]	; (800e9b0 <lwip_netconn_do_delconn+0x1b8>)
 800e878:	484c      	ldr	r0, [pc, #304]	; (800e9ac <lwip_netconn_do_delconn+0x1b4>)
 800e87a:	f00d ff31 	bl	801c6e0 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	2200      	movs	r2, #0
 800e882:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	4618      	mov	r0, r3
 800e88a:	f7ff fdd1 	bl	800e430 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	685b      	ldr	r3, [r3, #4]
 800e894:	2b00      	cmp	r3, #0
 800e896:	d05f      	beq.n	800e958 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	781b      	ldrb	r3, [r3, #0]
 800e89e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e8a2:	2b10      	cmp	r3, #16
 800e8a4:	d00d      	beq.n	800e8c2 <lwip_netconn_do_delconn+0xca>
 800e8a6:	2b20      	cmp	r3, #32
 800e8a8:	d151      	bne.n	800e94e <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	685b      	ldr	r3, [r3, #4]
 800e8b0:	2200      	movs	r2, #0
 800e8b2:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	685b      	ldr	r3, [r3, #4]
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	f00a f8e6 	bl	8018a8c <udp_remove>
          break;
 800e8c0:	e046      	b.n	800e950 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	6a1b      	ldr	r3, [r3, #32]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d006      	beq.n	800e8da <lwip_netconn_do_delconn+0xe2>
 800e8cc:	4b35      	ldr	r3, [pc, #212]	; (800e9a4 <lwip_netconn_do_delconn+0x1ac>)
 800e8ce:	f240 4294 	movw	r2, #1172	; 0x494
 800e8d2:	4938      	ldr	r1, [pc, #224]	; (800e9b4 <lwip_netconn_do_delconn+0x1bc>)
 800e8d4:	4835      	ldr	r0, [pc, #212]	; (800e9ac <lwip_netconn_do_delconn+0x1b4>)
 800e8d6:	f00d ff03 	bl	801c6e0 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	2204      	movs	r2, #4
 800e8e0:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	2203      	movs	r2, #3
 800e8e6:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	68fa      	ldr	r2, [r7, #12]
 800e8ee:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	2100      	movs	r1, #0
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	f7ff fe18 	bl	800e52c <lwip_netconn_do_close_internal>
 800e8fc:	4603      	mov	r3, r0
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d04b      	beq.n	800e99a <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	785b      	ldrb	r3, [r3, #1]
 800e908:	2b04      	cmp	r3, #4
 800e90a:	d006      	beq.n	800e91a <lwip_netconn_do_delconn+0x122>
 800e90c:	4b25      	ldr	r3, [pc, #148]	; (800e9a4 <lwip_netconn_do_delconn+0x1ac>)
 800e90e:	f240 429a 	movw	r2, #1178	; 0x49a
 800e912:	4929      	ldr	r1, [pc, #164]	; (800e9b8 <lwip_netconn_do_delconn+0x1c0>)
 800e914:	4825      	ldr	r0, [pc, #148]	; (800e9ac <lwip_netconn_do_delconn+0x1b4>)
 800e916:	f00d fee3 	bl	801c6e0 <iprintf>
            UNLOCK_TCPIP_CORE();
 800e91a:	4828      	ldr	r0, [pc, #160]	; (800e9bc <lwip_netconn_do_delconn+0x1c4>)
 800e91c:	f00c fec7 	bl	801b6ae <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	330c      	adds	r3, #12
 800e926:	2100      	movs	r1, #0
 800e928:	4618      	mov	r0, r3
 800e92a:	f00c fe1e 	bl	801b56a <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800e92e:	4823      	ldr	r0, [pc, #140]	; (800e9bc <lwip_netconn_do_delconn+0x1c4>)
 800e930:	f00c feae 	bl	801b690 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	785b      	ldrb	r3, [r3, #1]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d02d      	beq.n	800e99a <lwip_netconn_do_delconn+0x1a2>
 800e93e:	4b19      	ldr	r3, [pc, #100]	; (800e9a4 <lwip_netconn_do_delconn+0x1ac>)
 800e940:	f240 429e 	movw	r2, #1182	; 0x49e
 800e944:	491c      	ldr	r1, [pc, #112]	; (800e9b8 <lwip_netconn_do_delconn+0x1c0>)
 800e946:	4819      	ldr	r0, [pc, #100]	; (800e9ac <lwip_netconn_do_delconn+0x1b4>)
 800e948:	f00d feca 	bl	801c6e0 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800e94c:	e025      	b.n	800e99a <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800e94e:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	2200      	movs	r2, #0
 800e956:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d007      	beq.n	800e972 <lwip_netconn_do_delconn+0x17a>
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e968:	68fa      	ldr	r2, [r7, #12]
 800e96a:	6810      	ldr	r0, [r2, #0]
 800e96c:	2200      	movs	r2, #0
 800e96e:	2100      	movs	r1, #0
 800e970:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d007      	beq.n	800e98c <lwip_netconn_do_delconn+0x194>
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e982:	68fa      	ldr	r2, [r7, #12]
 800e984:	6810      	ldr	r0, [r2, #0]
 800e986:	2200      	movs	r2, #0
 800e988:	2102      	movs	r1, #2
 800e98a:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	330c      	adds	r3, #12
 800e992:	4618      	mov	r0, r3
 800e994:	f00c fe34 	bl	801b600 <sys_sem_valid>
 800e998:	e000      	b.n	800e99c <lwip_netconn_do_delconn+0x1a4>
          return;
 800e99a:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800e99c:	3710      	adds	r7, #16
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	bd80      	pop	{r7, pc}
 800e9a2:	bf00      	nop
 800e9a4:	0801ebec 	.word	0x0801ebec
 800e9a8:	0801ef5c 	.word	0x0801ef5c
 800e9ac:	0801ec30 	.word	0x0801ec30
 800e9b0:	0801ef70 	.word	0x0801ef70
 800e9b4:	0801ef90 	.word	0x0801ef90
 800e9b8:	0801efac 	.word	0x0801efac
 800e9bc:	20007f04 	.word	0x20007f04

0800e9c0 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800e9c0:	b580      	push	{r7, lr}
 800e9c2:	b084      	sub	sp, #16
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800e9cc:	68bb      	ldr	r3, [r7, #8]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	685b      	ldr	r3, [r3, #4]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d025      	beq.n	800ea22 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800e9d6:	68bb      	ldr	r3, [r7, #8]
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	781b      	ldrb	r3, [r3, #0]
 800e9dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e9e0:	2b10      	cmp	r3, #16
 800e9e2:	d00e      	beq.n	800ea02 <lwip_netconn_do_bind+0x42>
 800e9e4:	2b20      	cmp	r3, #32
 800e9e6:	d119      	bne.n	800ea1c <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800e9e8:	68bb      	ldr	r3, [r7, #8]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	6858      	ldr	r0, [r3, #4]
 800e9ee:	68bb      	ldr	r3, [r7, #8]
 800e9f0:	6899      	ldr	r1, [r3, #8]
 800e9f2:	68bb      	ldr	r3, [r7, #8]
 800e9f4:	899b      	ldrh	r3, [r3, #12]
 800e9f6:	461a      	mov	r2, r3
 800e9f8:	f009 ffa0 	bl	801893c <udp_bind>
 800e9fc:	4603      	mov	r3, r0
 800e9fe:	73fb      	strb	r3, [r7, #15]
        break;
 800ea00:	e011      	b.n	800ea26 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800ea02:	68bb      	ldr	r3, [r7, #8]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	6858      	ldr	r0, [r3, #4]
 800ea08:	68bb      	ldr	r3, [r7, #8]
 800ea0a:	6899      	ldr	r1, [r3, #8]
 800ea0c:	68bb      	ldr	r3, [r7, #8]
 800ea0e:	899b      	ldrh	r3, [r3, #12]
 800ea10:	461a      	mov	r2, r3
 800ea12:	f003 fd1d 	bl	8012450 <tcp_bind>
 800ea16:	4603      	mov	r3, r0
 800ea18:	73fb      	strb	r3, [r7, #15]
        break;
 800ea1a:	e004      	b.n	800ea26 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800ea1c:	23fa      	movs	r3, #250	; 0xfa
 800ea1e:	73fb      	strb	r3, [r7, #15]
        break;
 800ea20:	e001      	b.n	800ea26 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800ea22:	23fa      	movs	r3, #250	; 0xfa
 800ea24:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800ea26:	68bb      	ldr	r3, [r7, #8]
 800ea28:	7bfa      	ldrb	r2, [r7, #15]
 800ea2a:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800ea2c:	bf00      	nop
 800ea2e:	3710      	adds	r7, #16
 800ea30:	46bd      	mov	sp, r7
 800ea32:	bd80      	pop	{r7, pc}

0800ea34 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800ea34:	b580      	push	{r7, lr}
 800ea36:	b084      	sub	sp, #16
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800ea40:	68bb      	ldr	r3, [r7, #8]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	4618      	mov	r0, r3
 800ea46:	f7ff f875 	bl	800db34 <netconn_err>
 800ea4a:	4603      	mov	r3, r0
 800ea4c:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800ea4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d134      	bne.n	800eac0 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 800ea56:	68bb      	ldr	r3, [r7, #8]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	685b      	ldr	r3, [r3, #4]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d02d      	beq.n	800eabc <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800ea60:	68bb      	ldr	r3, [r7, #8]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	781b      	ldrb	r3, [r3, #0]
 800ea66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ea6a:	2b20      	cmp	r3, #32
 800ea6c:	d123      	bne.n	800eab6 <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800ea6e:	68bb      	ldr	r3, [r7, #8]
 800ea70:	689b      	ldr	r3, [r3, #8]
 800ea72:	689b      	ldr	r3, [r3, #8]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d10c      	bne.n	800ea92 <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800ea78:	68bb      	ldr	r3, [r7, #8]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	685a      	ldr	r2, [r3, #4]
 800ea7e:	68bb      	ldr	r3, [r7, #8]
 800ea80:	689b      	ldr	r3, [r3, #8]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	4619      	mov	r1, r3
 800ea86:	4610      	mov	r0, r2
 800ea88:	f009 fd6e 	bl	8018568 <udp_send>
 800ea8c:	4603      	mov	r3, r0
 800ea8e:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 800ea90:	e016      	b.n	800eac0 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800ea92:	68bb      	ldr	r3, [r7, #8]
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	6858      	ldr	r0, [r3, #4]
 800ea98:	68bb      	ldr	r3, [r7, #8]
 800ea9a:	689b      	ldr	r3, [r3, #8]
 800ea9c:	6819      	ldr	r1, [r3, #0]
 800ea9e:	68bb      	ldr	r3, [r7, #8]
 800eaa0:	689b      	ldr	r3, [r3, #8]
 800eaa2:	f103 0208 	add.w	r2, r3, #8
 800eaa6:	68bb      	ldr	r3, [r7, #8]
 800eaa8:	689b      	ldr	r3, [r3, #8]
 800eaaa:	899b      	ldrh	r3, [r3, #12]
 800eaac:	f009 fd90 	bl	80185d0 <udp_sendto>
 800eab0:	4603      	mov	r3, r0
 800eab2:	73fb      	strb	r3, [r7, #15]
          break;
 800eab4:	e004      	b.n	800eac0 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 800eab6:	23f5      	movs	r3, #245	; 0xf5
 800eab8:	73fb      	strb	r3, [r7, #15]
          break;
 800eaba:	e001      	b.n	800eac0 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 800eabc:	23f5      	movs	r3, #245	; 0xf5
 800eabe:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 800eac0:	68bb      	ldr	r3, [r7, #8]
 800eac2:	7bfa      	ldrb	r2, [r7, #15]
 800eac4:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800eac6:	bf00      	nop
 800eac8:	3710      	adds	r7, #16
 800eaca:	46bd      	mov	sp, r7
 800eacc:	bd80      	pop	{r7, pc}

0800eace <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800eace:	b580      	push	{r7, lr}
 800ead0:	b086      	sub	sp, #24
 800ead2:	af00      	add	r7, sp, #0
 800ead4:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800eada:	693b      	ldr	r3, [r7, #16]
 800eadc:	2200      	movs	r2, #0
 800eade:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800eae0:	693b      	ldr	r3, [r7, #16]
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	685b      	ldr	r3, [r3, #4]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d022      	beq.n	800eb30 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800eaea:	693b      	ldr	r3, [r7, #16]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	781b      	ldrb	r3, [r3, #0]
 800eaf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800eaf4:	2b10      	cmp	r3, #16
 800eaf6:	d11b      	bne.n	800eb30 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800eaf8:	693b      	ldr	r3, [r7, #16]
 800eafa:	689b      	ldr	r3, [r3, #8]
 800eafc:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800eafe:	697b      	ldr	r3, [r7, #20]
 800eb00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eb04:	d202      	bcs.n	800eb0c <lwip_netconn_do_recv+0x3e>
 800eb06:	697b      	ldr	r3, [r7, #20]
 800eb08:	b29b      	uxth	r3, r3
 800eb0a:	e001      	b.n	800eb10 <lwip_netconn_do_recv+0x42>
 800eb0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800eb10:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800eb12:	693b      	ldr	r3, [r7, #16]
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	685b      	ldr	r3, [r3, #4]
 800eb18:	89fa      	ldrh	r2, [r7, #14]
 800eb1a:	4611      	mov	r1, r2
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	f003 fe65 	bl	80127ec <tcp_recved>
        remaining -= recved;
 800eb22:	89fb      	ldrh	r3, [r7, #14]
 800eb24:	697a      	ldr	r2, [r7, #20]
 800eb26:	1ad3      	subs	r3, r2, r3
 800eb28:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800eb2a:	697b      	ldr	r3, [r7, #20]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d1e6      	bne.n	800eafe <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800eb30:	bf00      	nop
 800eb32:	3718      	adds	r7, #24
 800eb34:	46bd      	mov	sp, r7
 800eb36:	bd80      	pop	{r7, pc}

0800eb38 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b088      	sub	sp, #32
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	6078      	str	r0, [r7, #4]
 800eb40:	460b      	mov	r3, r1
 800eb42:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800eb44:	2300      	movs	r3, #0
 800eb46:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d106      	bne.n	800eb5c <lwip_netconn_do_writemore+0x24>
 800eb4e:	4b96      	ldr	r3, [pc, #600]	; (800eda8 <lwip_netconn_do_writemore+0x270>)
 800eb50:	f240 6273 	movw	r2, #1651	; 0x673
 800eb54:	4995      	ldr	r1, [pc, #596]	; (800edac <lwip_netconn_do_writemore+0x274>)
 800eb56:	4896      	ldr	r0, [pc, #600]	; (800edb0 <lwip_netconn_do_writemore+0x278>)
 800eb58:	f00d fdc2 	bl	801c6e0 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	785b      	ldrb	r3, [r3, #1]
 800eb60:	2b01      	cmp	r3, #1
 800eb62:	d006      	beq.n	800eb72 <lwip_netconn_do_writemore+0x3a>
 800eb64:	4b90      	ldr	r3, [pc, #576]	; (800eda8 <lwip_netconn_do_writemore+0x270>)
 800eb66:	f240 6274 	movw	r2, #1652	; 0x674
 800eb6a:	4992      	ldr	r1, [pc, #584]	; (800edb4 <lwip_netconn_do_writemore+0x27c>)
 800eb6c:	4890      	ldr	r0, [pc, #576]	; (800edb0 <lwip_netconn_do_writemore+0x278>)
 800eb6e:	f00d fdb7 	bl	801c6e0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	6a1b      	ldr	r3, [r3, #32]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d106      	bne.n	800eb88 <lwip_netconn_do_writemore+0x50>
 800eb7a:	4b8b      	ldr	r3, [pc, #556]	; (800eda8 <lwip_netconn_do_writemore+0x270>)
 800eb7c:	f240 6275 	movw	r2, #1653	; 0x675
 800eb80:	498d      	ldr	r1, [pc, #564]	; (800edb8 <lwip_netconn_do_writemore+0x280>)
 800eb82:	488b      	ldr	r0, [pc, #556]	; (800edb0 <lwip_netconn_do_writemore+0x278>)
 800eb84:	f00d fdac 	bl	801c6e0 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	685b      	ldr	r3, [r3, #4]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d106      	bne.n	800eb9e <lwip_netconn_do_writemore+0x66>
 800eb90:	4b85      	ldr	r3, [pc, #532]	; (800eda8 <lwip_netconn_do_writemore+0x270>)
 800eb92:	f240 6276 	movw	r2, #1654	; 0x676
 800eb96:	4989      	ldr	r1, [pc, #548]	; (800edbc <lwip_netconn_do_writemore+0x284>)
 800eb98:	4885      	ldr	r0, [pc, #532]	; (800edb0 <lwip_netconn_do_writemore+0x278>)
 800eb9a:	f00d fda1 	bl	801c6e0 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	6a1b      	ldr	r3, [r3, #32]
 800eba2:	699a      	ldr	r2, [r3, #24]
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	6a1b      	ldr	r3, [r3, #32]
 800eba8:	695b      	ldr	r3, [r3, #20]
 800ebaa:	429a      	cmp	r2, r3
 800ebac:	d306      	bcc.n	800ebbc <lwip_netconn_do_writemore+0x84>
 800ebae:	4b7e      	ldr	r3, [pc, #504]	; (800eda8 <lwip_netconn_do_writemore+0x270>)
 800ebb0:	f240 6277 	movw	r2, #1655	; 0x677
 800ebb4:	4982      	ldr	r1, [pc, #520]	; (800edc0 <lwip_netconn_do_writemore+0x288>)
 800ebb6:	487e      	ldr	r0, [pc, #504]	; (800edb0 <lwip_netconn_do_writemore+0x278>)
 800ebb8:	f00d fd92 	bl	801c6e0 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	6a1b      	ldr	r3, [r3, #32]
 800ebc0:	899b      	ldrh	r3, [r3, #12]
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d106      	bne.n	800ebd4 <lwip_netconn_do_writemore+0x9c>
 800ebc6:	4b78      	ldr	r3, [pc, #480]	; (800eda8 <lwip_netconn_do_writemore+0x270>)
 800ebc8:	f240 6279 	movw	r2, #1657	; 0x679
 800ebcc:	497d      	ldr	r1, [pc, #500]	; (800edc4 <lwip_netconn_do_writemore+0x28c>)
 800ebce:	4878      	ldr	r0, [pc, #480]	; (800edb0 <lwip_netconn_do_writemore+0x278>)
 800ebd0:	f00d fd86 	bl	801c6e0 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	6a1b      	ldr	r3, [r3, #32]
 800ebd8:	7f1b      	ldrb	r3, [r3, #28]
 800ebda:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	7f1b      	ldrb	r3, [r3, #28]
 800ebe0:	f003 0302 	and.w	r3, r3, #2
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d104      	bne.n	800ebf2 <lwip_netconn_do_writemore+0xba>
 800ebe8:	7ebb      	ldrb	r3, [r7, #26]
 800ebea:	f003 0304 	and.w	r3, r3, #4
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d001      	beq.n	800ebf6 <lwip_netconn_do_writemore+0xbe>
 800ebf2:	2301      	movs	r3, #1
 800ebf4:	e000      	b.n	800ebf8 <lwip_netconn_do_writemore+0xc0>
 800ebf6:	2300      	movs	r3, #0
 800ebf8:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	6a1b      	ldr	r3, [r3, #32]
 800ebfe:	689b      	ldr	r3, [r3, #8]
 800ec00:	681a      	ldr	r2, [r3, #0]
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	6a1b      	ldr	r3, [r3, #32]
 800ec06:	691b      	ldr	r3, [r3, #16]
 800ec08:	4413      	add	r3, r2
 800ec0a:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	6a1b      	ldr	r3, [r3, #32]
 800ec10:	689b      	ldr	r3, [r3, #8]
 800ec12:	685a      	ldr	r2, [r3, #4]
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	6a1b      	ldr	r3, [r3, #32]
 800ec18:	691b      	ldr	r3, [r3, #16]
 800ec1a:	1ad3      	subs	r3, r2, r3
 800ec1c:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800ec1e:	693b      	ldr	r3, [r7, #16]
 800ec20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ec24:	d307      	bcc.n	800ec36 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800ec26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ec2a:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800ec2c:	7ebb      	ldrb	r3, [r7, #26]
 800ec2e:	f043 0302 	orr.w	r3, r3, #2
 800ec32:	76bb      	strb	r3, [r7, #26]
 800ec34:	e001      	b.n	800ec3a <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800ec36:	693b      	ldr	r3, [r7, #16]
 800ec38:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	685b      	ldr	r3, [r3, #4]
 800ec3e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ec42:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800ec44:	89fa      	ldrh	r2, [r7, #14]
 800ec46:	8bbb      	ldrh	r3, [r7, #28]
 800ec48:	429a      	cmp	r2, r3
 800ec4a:	d216      	bcs.n	800ec7a <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800ec4c:	89fb      	ldrh	r3, [r7, #14]
 800ec4e:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800ec50:	7e3b      	ldrb	r3, [r7, #24]
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d00d      	beq.n	800ec72 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800ec56:	8bbb      	ldrh	r3, [r7, #28]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d10e      	bne.n	800ec7a <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	6a1b      	ldr	r3, [r3, #32]
 800ec60:	699b      	ldr	r3, [r3, #24]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d102      	bne.n	800ec6c <lwip_netconn_do_writemore+0x134>
 800ec66:	f06f 0306 	mvn.w	r3, #6
 800ec6a:	e000      	b.n	800ec6e <lwip_netconn_do_writemore+0x136>
 800ec6c:	2300      	movs	r3, #0
 800ec6e:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800ec70:	e07d      	b.n	800ed6e <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800ec72:	7ebb      	ldrb	r3, [r7, #26]
 800ec74:	f043 0302 	orr.w	r3, r3, #2
 800ec78:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	6a1b      	ldr	r3, [r3, #32]
 800ec7e:	691a      	ldr	r2, [r3, #16]
 800ec80:	8bbb      	ldrh	r3, [r7, #28]
 800ec82:	441a      	add	r2, r3
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	6a1b      	ldr	r3, [r3, #32]
 800ec88:	689b      	ldr	r3, [r3, #8]
 800ec8a:	685b      	ldr	r3, [r3, #4]
 800ec8c:	429a      	cmp	r2, r3
 800ec8e:	d906      	bls.n	800ec9e <lwip_netconn_do_writemore+0x166>
 800ec90:	4b45      	ldr	r3, [pc, #276]	; (800eda8 <lwip_netconn_do_writemore+0x270>)
 800ec92:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800ec96:	494c      	ldr	r1, [pc, #304]	; (800edc8 <lwip_netconn_do_writemore+0x290>)
 800ec98:	4845      	ldr	r0, [pc, #276]	; (800edb0 <lwip_netconn_do_writemore+0x278>)
 800ec9a:	f00d fd21 	bl	801c6e0 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800ec9e:	8bbb      	ldrh	r3, [r7, #28]
 800eca0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eca4:	4293      	cmp	r3, r2
 800eca6:	d103      	bne.n	800ecb0 <lwip_netconn_do_writemore+0x178>
 800eca8:	693b      	ldr	r3, [r7, #16]
 800ecaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ecae:	d209      	bcs.n	800ecc4 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800ecb0:	693b      	ldr	r3, [r7, #16]
 800ecb2:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800ecb4:	8bba      	ldrh	r2, [r7, #28]
 800ecb6:	429a      	cmp	r2, r3
 800ecb8:	d10b      	bne.n	800ecd2 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	6a1b      	ldr	r3, [r3, #32]
 800ecbe:	899b      	ldrh	r3, [r3, #12]
 800ecc0:	2b01      	cmp	r3, #1
 800ecc2:	d906      	bls.n	800ecd2 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800ecc4:	2301      	movs	r3, #1
 800ecc6:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800ecc8:	7ebb      	ldrb	r3, [r7, #26]
 800ecca:	f043 0302 	orr.w	r3, r3, #2
 800ecce:	76bb      	strb	r3, [r7, #26]
 800ecd0:	e001      	b.n	800ecd6 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800ecd2:	2300      	movs	r3, #0
 800ecd4:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	6858      	ldr	r0, [r3, #4]
 800ecda:	7ebb      	ldrb	r3, [r7, #26]
 800ecdc:	8bba      	ldrh	r2, [r7, #28]
 800ecde:	6979      	ldr	r1, [r7, #20]
 800ece0:	f007 fba6 	bl	8016430 <tcp_write>
 800ece4:	4603      	mov	r3, r0
 800ece6:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800ece8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d12c      	bne.n	800ed4a <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	6a1b      	ldr	r3, [r3, #32]
 800ecf4:	6999      	ldr	r1, [r3, #24]
 800ecf6:	8bba      	ldrh	r2, [r7, #28]
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	6a1b      	ldr	r3, [r3, #32]
 800ecfc:	440a      	add	r2, r1
 800ecfe:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	6a1b      	ldr	r3, [r3, #32]
 800ed04:	6919      	ldr	r1, [r3, #16]
 800ed06:	8bba      	ldrh	r2, [r7, #28]
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	6a1b      	ldr	r3, [r3, #32]
 800ed0c:	440a      	add	r2, r1
 800ed0e:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	6a1b      	ldr	r3, [r3, #32]
 800ed14:	691a      	ldr	r2, [r3, #16]
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	6a1b      	ldr	r3, [r3, #32]
 800ed1a:	689b      	ldr	r3, [r3, #8]
 800ed1c:	685b      	ldr	r3, [r3, #4]
 800ed1e:	429a      	cmp	r2, r3
 800ed20:	d113      	bne.n	800ed4a <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	6a1b      	ldr	r3, [r3, #32]
 800ed26:	899a      	ldrh	r2, [r3, #12]
 800ed28:	3a01      	subs	r2, #1
 800ed2a:	b292      	uxth	r2, r2
 800ed2c:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	6a1b      	ldr	r3, [r3, #32]
 800ed32:	899b      	ldrh	r3, [r3, #12]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d008      	beq.n	800ed4a <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	6a1b      	ldr	r3, [r3, #32]
 800ed3c:	689a      	ldr	r2, [r3, #8]
 800ed3e:	3208      	adds	r2, #8
 800ed40:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	6a1b      	ldr	r3, [r3, #32]
 800ed46:	2200      	movs	r2, #0
 800ed48:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800ed4a:	7e7b      	ldrb	r3, [r7, #25]
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d004      	beq.n	800ed5a <lwip_netconn_do_writemore+0x222>
 800ed50:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	f43f af50 	beq.w	800ebfa <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800ed5a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d004      	beq.n	800ed6c <lwip_netconn_do_writemore+0x234>
 800ed62:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ed66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed6a:	d146      	bne.n	800edfa <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800ed6c:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800ed6e:	7e3b      	ldrb	r3, [r7, #24]
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d02b      	beq.n	800edcc <lwip_netconn_do_writemore+0x294>
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	6a1b      	ldr	r3, [r3, #32]
 800ed78:	699a      	ldr	r2, [r3, #24]
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	6a1b      	ldr	r3, [r3, #32]
 800ed7e:	695b      	ldr	r3, [r3, #20]
 800ed80:	429a      	cmp	r2, r3
 800ed82:	d223      	bcs.n	800edcc <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d005      	beq.n	800ed98 <lwip_netconn_do_writemore+0x260>
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed90:	2200      	movs	r2, #0
 800ed92:	2103      	movs	r1, #3
 800ed94:	6878      	ldr	r0, [r7, #4]
 800ed96:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	7f1b      	ldrb	r3, [r3, #28]
 800ed9c:	f043 0310 	orr.w	r3, r3, #16
 800eda0:	b2da      	uxtb	r2, r3
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	771a      	strb	r2, [r3, #28]
 800eda6:	e028      	b.n	800edfa <lwip_netconn_do_writemore+0x2c2>
 800eda8:	0801ebec 	.word	0x0801ebec
 800edac:	0801ed44 	.word	0x0801ed44
 800edb0:	0801ec30 	.word	0x0801ec30
 800edb4:	0801f04c 	.word	0x0801f04c
 800edb8:	0801ed54 	.word	0x0801ed54
 800edbc:	0801f06c 	.word	0x0801f06c
 800edc0:	0801f084 	.word	0x0801f084
 800edc4:	0801f0c4 	.word	0x0801f0c4
 800edc8:	0801f0ec 	.word	0x0801f0ec
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	685b      	ldr	r3, [r3, #4]
 800edd0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800edd4:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800edd8:	d305      	bcc.n	800ede6 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	685b      	ldr	r3, [r3, #4]
 800edde:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800ede2:	2b04      	cmp	r3, #4
 800ede4:	d909      	bls.n	800edfa <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edea:	2b00      	cmp	r3, #0
 800edec:	d005      	beq.n	800edfa <lwip_netconn_do_writemore+0x2c2>
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edf2:	2200      	movs	r2, #0
 800edf4:	2103      	movs	r1, #3
 800edf6:	6878      	ldr	r0, [r7, #4]
 800edf8:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800edfa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d11d      	bne.n	800ee3e <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	6a1b      	ldr	r3, [r3, #32]
 800ee06:	699a      	ldr	r2, [r3, #24]
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	6a1b      	ldr	r3, [r3, #32]
 800ee0c:	695b      	ldr	r3, [r3, #20]
 800ee0e:	429a      	cmp	r2, r3
 800ee10:	d002      	beq.n	800ee18 <lwip_netconn_do_writemore+0x2e0>
 800ee12:	7e3b      	ldrb	r3, [r7, #24]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d001      	beq.n	800ee1c <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800ee18:	2301      	movs	r3, #1
 800ee1a:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	685b      	ldr	r3, [r3, #4]
 800ee20:	4618      	mov	r0, r3
 800ee22:	f008 f8ef 	bl	8017004 <tcp_output>
 800ee26:	4603      	mov	r3, r0
 800ee28:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800ee2a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800ee2e:	f113 0f04 	cmn.w	r3, #4
 800ee32:	d12c      	bne.n	800ee8e <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800ee34:	7b3b      	ldrb	r3, [r7, #12]
 800ee36:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800ee38:	2301      	movs	r3, #1
 800ee3a:	76fb      	strb	r3, [r7, #27]
 800ee3c:	e027      	b.n	800ee8e <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800ee3e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ee42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee46:	d120      	bne.n	800ee8a <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	685b      	ldr	r3, [r3, #4]
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	f008 f8d9 	bl	8017004 <tcp_output>
 800ee52:	4603      	mov	r3, r0
 800ee54:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800ee56:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800ee5a:	f113 0f04 	cmn.w	r3, #4
 800ee5e:	d104      	bne.n	800ee6a <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800ee60:	7b7b      	ldrb	r3, [r7, #13]
 800ee62:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800ee64:	2301      	movs	r3, #1
 800ee66:	76fb      	strb	r3, [r7, #27]
 800ee68:	e011      	b.n	800ee8e <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800ee6a:	7e3b      	ldrb	r3, [r7, #24]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d00e      	beq.n	800ee8e <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	6a1b      	ldr	r3, [r3, #32]
 800ee74:	699b      	ldr	r3, [r3, #24]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d102      	bne.n	800ee80 <lwip_netconn_do_writemore+0x348>
 800ee7a:	f06f 0306 	mvn.w	r3, #6
 800ee7e:	e000      	b.n	800ee82 <lwip_netconn_do_writemore+0x34a>
 800ee80:	2300      	movs	r3, #0
 800ee82:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800ee84:	2301      	movs	r3, #1
 800ee86:	76fb      	strb	r3, [r7, #27]
 800ee88:	e001      	b.n	800ee8e <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800ee8a:	2301      	movs	r3, #1
 800ee8c:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800ee8e:	7efb      	ldrb	r3, [r7, #27]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d015      	beq.n	800eec0 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	6a1b      	ldr	r3, [r3, #32]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	330c      	adds	r3, #12
 800ee9c:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	6a1b      	ldr	r3, [r3, #32]
 800eea2:	7ffa      	ldrb	r2, [r7, #31]
 800eea4:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	2200      	movs	r2, #0
 800eeaa:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	2200      	movs	r2, #0
 800eeb0:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800eeb2:	78fb      	ldrb	r3, [r7, #3]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d006      	beq.n	800eec6 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800eeb8:	68b8      	ldr	r0, [r7, #8]
 800eeba:	f00c fb87 	bl	801b5cc <sys_sem_signal>
 800eebe:	e002      	b.n	800eec6 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800eec0:	f04f 33ff 	mov.w	r3, #4294967295
 800eec4:	e000      	b.n	800eec8 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800eec6:	2300      	movs	r3, #0
}
 800eec8:	4618      	mov	r0, r3
 800eeca:	3720      	adds	r7, #32
 800eecc:	46bd      	mov	sp, r7
 800eece:	bd80      	pop	{r7, pc}

0800eed0 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800eed0:	b580      	push	{r7, lr}
 800eed2:	b084      	sub	sp, #16
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	785b      	ldrb	r3, [r3, #1]
 800eee2:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	685b      	ldr	r3, [r3, #4]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d069      	beq.n	800efc2 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	781b      	ldrb	r3, [r3, #0]
 800eef4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800eef8:	2b10      	cmp	r3, #16
 800eefa:	d162      	bne.n	800efc2 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800ef00:	2b03      	cmp	r3, #3
 800ef02:	d002      	beq.n	800ef0a <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800ef04:	7afb      	ldrb	r3, [r7, #11]
 800ef06:	2b02      	cmp	r3, #2
 800ef08:	d05b      	beq.n	800efc2 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800ef0a:	7afb      	ldrb	r3, [r7, #11]
 800ef0c:	2b03      	cmp	r3, #3
 800ef0e:	d103      	bne.n	800ef18 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	22f5      	movs	r2, #245	; 0xf5
 800ef14:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800ef16:	e059      	b.n	800efcc <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800ef18:	7afb      	ldrb	r3, [r7, #11]
 800ef1a:	2b01      	cmp	r3, #1
 800ef1c:	d103      	bne.n	800ef26 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	22fb      	movs	r2, #251	; 0xfb
 800ef22:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800ef24:	e052      	b.n	800efcc <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	7a1b      	ldrb	r3, [r3, #8]
 800ef2a:	f003 0301 	and.w	r3, r3, #1
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d004      	beq.n	800ef3c <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	4618      	mov	r0, r3
 800ef38:	f7ff fa7a 	bl	800e430 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	6a1b      	ldr	r3, [r3, #32]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d006      	beq.n	800ef54 <lwip_netconn_do_close+0x84>
 800ef46:	4b23      	ldr	r3, [pc, #140]	; (800efd4 <lwip_netconn_do_close+0x104>)
 800ef48:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800ef4c:	4922      	ldr	r1, [pc, #136]	; (800efd8 <lwip_netconn_do_close+0x108>)
 800ef4e:	4823      	ldr	r0, [pc, #140]	; (800efdc <lwip_netconn_do_close+0x10c>)
 800ef50:	f00d fbc6 	bl	801c6e0 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	2204      	movs	r2, #4
 800ef5a:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	68fa      	ldr	r2, [r7, #12]
 800ef62:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	2100      	movs	r1, #0
 800ef6a:	4618      	mov	r0, r3
 800ef6c:	f7ff fade 	bl	800e52c <lwip_netconn_do_close_internal>
 800ef70:	4603      	mov	r3, r0
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d029      	beq.n	800efca <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	785b      	ldrb	r3, [r3, #1]
 800ef7c:	2b04      	cmp	r3, #4
 800ef7e:	d006      	beq.n	800ef8e <lwip_netconn_do_close+0xbe>
 800ef80:	4b14      	ldr	r3, [pc, #80]	; (800efd4 <lwip_netconn_do_close+0x104>)
 800ef82:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800ef86:	4916      	ldr	r1, [pc, #88]	; (800efe0 <lwip_netconn_do_close+0x110>)
 800ef88:	4814      	ldr	r0, [pc, #80]	; (800efdc <lwip_netconn_do_close+0x10c>)
 800ef8a:	f00d fba9 	bl	801c6e0 <iprintf>
        UNLOCK_TCPIP_CORE();
 800ef8e:	4815      	ldr	r0, [pc, #84]	; (800efe4 <lwip_netconn_do_close+0x114>)
 800ef90:	f00c fb8d 	bl	801b6ae <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	330c      	adds	r3, #12
 800ef9a:	2100      	movs	r1, #0
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	f00c fae4 	bl	801b56a <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800efa2:	4810      	ldr	r0, [pc, #64]	; (800efe4 <lwip_netconn_do_close+0x114>)
 800efa4:	f00c fb74 	bl	801b690 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	785b      	ldrb	r3, [r3, #1]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d00b      	beq.n	800efca <lwip_netconn_do_close+0xfa>
 800efb2:	4b08      	ldr	r3, [pc, #32]	; (800efd4 <lwip_netconn_do_close+0x104>)
 800efb4:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800efb8:	4909      	ldr	r1, [pc, #36]	; (800efe0 <lwip_netconn_do_close+0x110>)
 800efba:	4808      	ldr	r0, [pc, #32]	; (800efdc <lwip_netconn_do_close+0x10c>)
 800efbc:	f00d fb90 	bl	801c6e0 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800efc0:	e003      	b.n	800efca <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	22f5      	movs	r2, #245	; 0xf5
 800efc6:	711a      	strb	r2, [r3, #4]
 800efc8:	e000      	b.n	800efcc <lwip_netconn_do_close+0xfc>
      return;
 800efca:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800efcc:	3710      	adds	r7, #16
 800efce:	46bd      	mov	sp, r7
 800efd0:	bd80      	pop	{r7, pc}
 800efd2:	bf00      	nop
 800efd4:	0801ebec 	.word	0x0801ebec
 800efd8:	0801ef90 	.word	0x0801ef90
 800efdc:	0801ec30 	.word	0x0801ec30
 800efe0:	0801efac 	.word	0x0801efac
 800efe4:	20007f04 	.word	0x20007f04

0800efe8 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800efe8:	b580      	push	{r7, lr}
 800efea:	b082      	sub	sp, #8
 800efec:	af00      	add	r7, sp, #0
 800efee:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d013      	beq.n	800f01e <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	2b00      	cmp	r3, #0
 800effc:	d00b      	beq.n	800f016 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	4618      	mov	r0, r3
 800f004:	f002 fc18 	bl	8011838 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	2200      	movs	r2, #0
 800f00c:	605a      	str	r2, [r3, #4]
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	685a      	ldr	r2, [r3, #4]
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800f016:	6879      	ldr	r1, [r7, #4]
 800f018:	2006      	movs	r0, #6
 800f01a:	f001 fd8f 	bl	8010b3c <memp_free>
  }
}
 800f01e:	bf00      	nop
 800f020:	3708      	adds	r7, #8
 800f022:	46bd      	mov	sp, r7
 800f024:	bd80      	pop	{r7, pc}
	...

0800f028 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 800f028:	b580      	push	{r7, lr}
 800f02a:	b084      	sub	sp, #16
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	60f8      	str	r0, [r7, #12]
 800f030:	60b9      	str	r1, [r7, #8]
 800f032:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	2b00      	cmp	r3, #0
 800f038:	d108      	bne.n	800f04c <netbuf_data+0x24>
 800f03a:	4b1b      	ldr	r3, [pc, #108]	; (800f0a8 <netbuf_data+0x80>)
 800f03c:	22c6      	movs	r2, #198	; 0xc6
 800f03e:	491b      	ldr	r1, [pc, #108]	; (800f0ac <netbuf_data+0x84>)
 800f040:	481b      	ldr	r0, [pc, #108]	; (800f0b0 <netbuf_data+0x88>)
 800f042:	f00d fb4d 	bl	801c6e0 <iprintf>
 800f046:	f06f 030f 	mvn.w	r3, #15
 800f04a:	e029      	b.n	800f0a0 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800f04c:	68bb      	ldr	r3, [r7, #8]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d108      	bne.n	800f064 <netbuf_data+0x3c>
 800f052:	4b15      	ldr	r3, [pc, #84]	; (800f0a8 <netbuf_data+0x80>)
 800f054:	22c7      	movs	r2, #199	; 0xc7
 800f056:	4917      	ldr	r1, [pc, #92]	; (800f0b4 <netbuf_data+0x8c>)
 800f058:	4815      	ldr	r0, [pc, #84]	; (800f0b0 <netbuf_data+0x88>)
 800f05a:	f00d fb41 	bl	801c6e0 <iprintf>
 800f05e:	f06f 030f 	mvn.w	r3, #15
 800f062:	e01d      	b.n	800f0a0 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	2b00      	cmp	r3, #0
 800f068:	d108      	bne.n	800f07c <netbuf_data+0x54>
 800f06a:	4b0f      	ldr	r3, [pc, #60]	; (800f0a8 <netbuf_data+0x80>)
 800f06c:	22c8      	movs	r2, #200	; 0xc8
 800f06e:	4912      	ldr	r1, [pc, #72]	; (800f0b8 <netbuf_data+0x90>)
 800f070:	480f      	ldr	r0, [pc, #60]	; (800f0b0 <netbuf_data+0x88>)
 800f072:	f00d fb35 	bl	801c6e0 <iprintf>
 800f076:	f06f 030f 	mvn.w	r3, #15
 800f07a:	e011      	b.n	800f0a0 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	685b      	ldr	r3, [r3, #4]
 800f080:	2b00      	cmp	r3, #0
 800f082:	d102      	bne.n	800f08a <netbuf_data+0x62>
    return ERR_BUF;
 800f084:	f06f 0301 	mvn.w	r3, #1
 800f088:	e00a      	b.n	800f0a0 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	685b      	ldr	r3, [r3, #4]
 800f08e:	685a      	ldr	r2, [r3, #4]
 800f090:	68bb      	ldr	r3, [r7, #8]
 800f092:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	685b      	ldr	r3, [r3, #4]
 800f098:	895a      	ldrh	r2, [r3, #10]
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 800f09e:	2300      	movs	r3, #0
}
 800f0a0:	4618      	mov	r0, r3
 800f0a2:	3710      	adds	r7, #16
 800f0a4:	46bd      	mov	sp, r7
 800f0a6:	bd80      	pop	{r7, pc}
 800f0a8:	0801f144 	.word	0x0801f144
 800f0ac:	0801f24c 	.word	0x0801f24c
 800f0b0:	0801f194 	.word	0x0801f194
 800f0b4:	0801f268 	.word	0x0801f268
 800f0b8:	0801f288 	.word	0x0801f288

0800f0bc <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 800f0bc:	b580      	push	{r7, lr}
 800f0be:	b082      	sub	sp, #8
 800f0c0:	af00      	add	r7, sp, #0
 800f0c2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d108      	bne.n	800f0dc <netbuf_next+0x20>
 800f0ca:	4b11      	ldr	r3, [pc, #68]	; (800f110 <netbuf_next+0x54>)
 800f0cc:	22e0      	movs	r2, #224	; 0xe0
 800f0ce:	4911      	ldr	r1, [pc, #68]	; (800f114 <netbuf_next+0x58>)
 800f0d0:	4811      	ldr	r0, [pc, #68]	; (800f118 <netbuf_next+0x5c>)
 800f0d2:	f00d fb05 	bl	801c6e0 <iprintf>
 800f0d6:	f04f 33ff 	mov.w	r3, #4294967295
 800f0da:	e014      	b.n	800f106 <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	685b      	ldr	r3, [r3, #4]
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d102      	bne.n	800f0ec <netbuf_next+0x30>
    return -1;
 800f0e6:	f04f 33ff 	mov.w	r3, #4294967295
 800f0ea:	e00c      	b.n	800f106 <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	685b      	ldr	r3, [r3, #4]
 800f0f0:	681a      	ldr	r2, [r3, #0]
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	685b      	ldr	r3, [r3, #4]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d101      	bne.n	800f104 <netbuf_next+0x48>
    return 1;
 800f100:	2301      	movs	r3, #1
 800f102:	e000      	b.n	800f106 <netbuf_next+0x4a>
  }
  return 0;
 800f104:	2300      	movs	r3, #0
}
 800f106:	4618      	mov	r0, r3
 800f108:	3708      	adds	r7, #8
 800f10a:	46bd      	mov	sp, r7
 800f10c:	bd80      	pop	{r7, pc}
 800f10e:	bf00      	nop
 800f110:	0801f144 	.word	0x0801f144
 800f114:	0801f2a4 	.word	0x0801f2a4
 800f118:	0801f194 	.word	0x0801f194

0800f11c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800f11c:	b580      	push	{r7, lr}
 800f11e:	b084      	sub	sp, #16
 800f120:	af00      	add	r7, sp, #0
 800f122:	6078      	str	r0, [r7, #4]
 800f124:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800f126:	f009 f825 	bl	8018174 <sys_timeouts_sleeptime>
 800f12a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f132:	d10b      	bne.n	800f14c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800f134:	4813      	ldr	r0, [pc, #76]	; (800f184 <tcpip_timeouts_mbox_fetch+0x68>)
 800f136:	f00c faba 	bl	801b6ae <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800f13a:	2200      	movs	r2, #0
 800f13c:	6839      	ldr	r1, [r7, #0]
 800f13e:	6878      	ldr	r0, [r7, #4]
 800f140:	f00c f972 	bl	801b428 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800f144:	480f      	ldr	r0, [pc, #60]	; (800f184 <tcpip_timeouts_mbox_fetch+0x68>)
 800f146:	f00c faa3 	bl	801b690 <sys_mutex_lock>
    return;
 800f14a:	e018      	b.n	800f17e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d102      	bne.n	800f158 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800f152:	f008 ffd5 	bl	8018100 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800f156:	e7e6      	b.n	800f126 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800f158:	480a      	ldr	r0, [pc, #40]	; (800f184 <tcpip_timeouts_mbox_fetch+0x68>)
 800f15a:	f00c faa8 	bl	801b6ae <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800f15e:	68fa      	ldr	r2, [r7, #12]
 800f160:	6839      	ldr	r1, [r7, #0]
 800f162:	6878      	ldr	r0, [r7, #4]
 800f164:	f00c f960 	bl	801b428 <sys_arch_mbox_fetch>
 800f168:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800f16a:	4806      	ldr	r0, [pc, #24]	; (800f184 <tcpip_timeouts_mbox_fetch+0x68>)
 800f16c:	f00c fa90 	bl	801b690 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800f170:	68bb      	ldr	r3, [r7, #8]
 800f172:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f176:	d102      	bne.n	800f17e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800f178:	f008 ffc2 	bl	8018100 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800f17c:	e7d3      	b.n	800f126 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800f17e:	3710      	adds	r7, #16
 800f180:	46bd      	mov	sp, r7
 800f182:	bd80      	pop	{r7, pc}
 800f184:	20007f04 	.word	0x20007f04

0800f188 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800f188:	b580      	push	{r7, lr}
 800f18a:	b084      	sub	sp, #16
 800f18c:	af00      	add	r7, sp, #0
 800f18e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800f190:	4810      	ldr	r0, [pc, #64]	; (800f1d4 <tcpip_thread+0x4c>)
 800f192:	f00c fa7d 	bl	801b690 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800f196:	4b10      	ldr	r3, [pc, #64]	; (800f1d8 <tcpip_thread+0x50>)
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d005      	beq.n	800f1aa <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800f19e:	4b0e      	ldr	r3, [pc, #56]	; (800f1d8 <tcpip_thread+0x50>)
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	4a0e      	ldr	r2, [pc, #56]	; (800f1dc <tcpip_thread+0x54>)
 800f1a4:	6812      	ldr	r2, [r2, #0]
 800f1a6:	4610      	mov	r0, r2
 800f1a8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800f1aa:	f107 030c 	add.w	r3, r7, #12
 800f1ae:	4619      	mov	r1, r3
 800f1b0:	480b      	ldr	r0, [pc, #44]	; (800f1e0 <tcpip_thread+0x58>)
 800f1b2:	f7ff ffb3 	bl	800f11c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d106      	bne.n	800f1ca <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800f1bc:	4b09      	ldr	r3, [pc, #36]	; (800f1e4 <tcpip_thread+0x5c>)
 800f1be:	2291      	movs	r2, #145	; 0x91
 800f1c0:	4909      	ldr	r1, [pc, #36]	; (800f1e8 <tcpip_thread+0x60>)
 800f1c2:	480a      	ldr	r0, [pc, #40]	; (800f1ec <tcpip_thread+0x64>)
 800f1c4:	f00d fa8c 	bl	801c6e0 <iprintf>
      continue;
 800f1c8:	e003      	b.n	800f1d2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	f000 f80f 	bl	800f1f0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800f1d2:	e7ea      	b.n	800f1aa <tcpip_thread+0x22>
 800f1d4:	20007f04 	.word	0x20007f04
 800f1d8:	2000426c 	.word	0x2000426c
 800f1dc:	20004270 	.word	0x20004270
 800f1e0:	20004274 	.word	0x20004274
 800f1e4:	0801f2dc 	.word	0x0801f2dc
 800f1e8:	0801f30c 	.word	0x0801f30c
 800f1ec:	0801f32c 	.word	0x0801f32c

0800f1f0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800f1f0:	b580      	push	{r7, lr}
 800f1f2:	b082      	sub	sp, #8
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	781b      	ldrb	r3, [r3, #0]
 800f1fc:	2b02      	cmp	r3, #2
 800f1fe:	d026      	beq.n	800f24e <tcpip_thread_handle_msg+0x5e>
 800f200:	2b02      	cmp	r3, #2
 800f202:	dc2b      	bgt.n	800f25c <tcpip_thread_handle_msg+0x6c>
 800f204:	2b00      	cmp	r3, #0
 800f206:	d002      	beq.n	800f20e <tcpip_thread_handle_msg+0x1e>
 800f208:	2b01      	cmp	r3, #1
 800f20a:	d015      	beq.n	800f238 <tcpip_thread_handle_msg+0x48>
 800f20c:	e026      	b.n	800f25c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	68db      	ldr	r3, [r3, #12]
 800f212:	687a      	ldr	r2, [r7, #4]
 800f214:	6850      	ldr	r0, [r2, #4]
 800f216:	687a      	ldr	r2, [r7, #4]
 800f218:	6892      	ldr	r2, [r2, #8]
 800f21a:	4611      	mov	r1, r2
 800f21c:	4798      	blx	r3
 800f21e:	4603      	mov	r3, r0
 800f220:	2b00      	cmp	r3, #0
 800f222:	d004      	beq.n	800f22e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	685b      	ldr	r3, [r3, #4]
 800f228:	4618      	mov	r0, r3
 800f22a:	f002 fb05 	bl	8011838 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800f22e:	6879      	ldr	r1, [r7, #4]
 800f230:	2009      	movs	r0, #9
 800f232:	f001 fc83 	bl	8010b3c <memp_free>
      break;
 800f236:	e018      	b.n	800f26a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	685b      	ldr	r3, [r3, #4]
 800f23c:	687a      	ldr	r2, [r7, #4]
 800f23e:	6892      	ldr	r2, [r2, #8]
 800f240:	4610      	mov	r0, r2
 800f242:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800f244:	6879      	ldr	r1, [r7, #4]
 800f246:	2008      	movs	r0, #8
 800f248:	f001 fc78 	bl	8010b3c <memp_free>
      break;
 800f24c:	e00d      	b.n	800f26a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	685b      	ldr	r3, [r3, #4]
 800f252:	687a      	ldr	r2, [r7, #4]
 800f254:	6892      	ldr	r2, [r2, #8]
 800f256:	4610      	mov	r0, r2
 800f258:	4798      	blx	r3
      break;
 800f25a:	e006      	b.n	800f26a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800f25c:	4b05      	ldr	r3, [pc, #20]	; (800f274 <tcpip_thread_handle_msg+0x84>)
 800f25e:	22cf      	movs	r2, #207	; 0xcf
 800f260:	4905      	ldr	r1, [pc, #20]	; (800f278 <tcpip_thread_handle_msg+0x88>)
 800f262:	4806      	ldr	r0, [pc, #24]	; (800f27c <tcpip_thread_handle_msg+0x8c>)
 800f264:	f00d fa3c 	bl	801c6e0 <iprintf>
      break;
 800f268:	bf00      	nop
  }
}
 800f26a:	bf00      	nop
 800f26c:	3708      	adds	r7, #8
 800f26e:	46bd      	mov	sp, r7
 800f270:	bd80      	pop	{r7, pc}
 800f272:	bf00      	nop
 800f274:	0801f2dc 	.word	0x0801f2dc
 800f278:	0801f30c 	.word	0x0801f30c
 800f27c:	0801f32c 	.word	0x0801f32c

0800f280 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800f280:	b580      	push	{r7, lr}
 800f282:	b086      	sub	sp, #24
 800f284:	af00      	add	r7, sp, #0
 800f286:	60f8      	str	r0, [r7, #12]
 800f288:	60b9      	str	r1, [r7, #8]
 800f28a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800f28c:	481a      	ldr	r0, [pc, #104]	; (800f2f8 <tcpip_inpkt+0x78>)
 800f28e:	f00c f926 	bl	801b4de <sys_mbox_valid>
 800f292:	4603      	mov	r3, r0
 800f294:	2b00      	cmp	r3, #0
 800f296:	d105      	bne.n	800f2a4 <tcpip_inpkt+0x24>
 800f298:	4b18      	ldr	r3, [pc, #96]	; (800f2fc <tcpip_inpkt+0x7c>)
 800f29a:	22fc      	movs	r2, #252	; 0xfc
 800f29c:	4918      	ldr	r1, [pc, #96]	; (800f300 <tcpip_inpkt+0x80>)
 800f29e:	4819      	ldr	r0, [pc, #100]	; (800f304 <tcpip_inpkt+0x84>)
 800f2a0:	f00d fa1e 	bl	801c6e0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800f2a4:	2009      	movs	r0, #9
 800f2a6:	f001 fbf7 	bl	8010a98 <memp_malloc>
 800f2aa:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800f2ac:	697b      	ldr	r3, [r7, #20]
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d102      	bne.n	800f2b8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800f2b2:	f04f 33ff 	mov.w	r3, #4294967295
 800f2b6:	e01a      	b.n	800f2ee <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800f2b8:	697b      	ldr	r3, [r7, #20]
 800f2ba:	2200      	movs	r2, #0
 800f2bc:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800f2be:	697b      	ldr	r3, [r7, #20]
 800f2c0:	68fa      	ldr	r2, [r7, #12]
 800f2c2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800f2c4:	697b      	ldr	r3, [r7, #20]
 800f2c6:	68ba      	ldr	r2, [r7, #8]
 800f2c8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800f2ca:	697b      	ldr	r3, [r7, #20]
 800f2cc:	687a      	ldr	r2, [r7, #4]
 800f2ce:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800f2d0:	6979      	ldr	r1, [r7, #20]
 800f2d2:	4809      	ldr	r0, [pc, #36]	; (800f2f8 <tcpip_inpkt+0x78>)
 800f2d4:	f00c f88e 	bl	801b3f4 <sys_mbox_trypost>
 800f2d8:	4603      	mov	r3, r0
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d006      	beq.n	800f2ec <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800f2de:	6979      	ldr	r1, [r7, #20]
 800f2e0:	2009      	movs	r0, #9
 800f2e2:	f001 fc2b 	bl	8010b3c <memp_free>
    return ERR_MEM;
 800f2e6:	f04f 33ff 	mov.w	r3, #4294967295
 800f2ea:	e000      	b.n	800f2ee <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800f2ec:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800f2ee:	4618      	mov	r0, r3
 800f2f0:	3718      	adds	r7, #24
 800f2f2:	46bd      	mov	sp, r7
 800f2f4:	bd80      	pop	{r7, pc}
 800f2f6:	bf00      	nop
 800f2f8:	20004274 	.word	0x20004274
 800f2fc:	0801f2dc 	.word	0x0801f2dc
 800f300:	0801f354 	.word	0x0801f354
 800f304:	0801f32c 	.word	0x0801f32c

0800f308 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800f308:	b580      	push	{r7, lr}
 800f30a:	b082      	sub	sp, #8
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	6078      	str	r0, [r7, #4]
 800f310:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800f312:	683b      	ldr	r3, [r7, #0]
 800f314:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800f318:	f003 0318 	and.w	r3, r3, #24
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d006      	beq.n	800f32e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800f320:	4a08      	ldr	r2, [pc, #32]	; (800f344 <tcpip_input+0x3c>)
 800f322:	6839      	ldr	r1, [r7, #0]
 800f324:	6878      	ldr	r0, [r7, #4]
 800f326:	f7ff ffab 	bl	800f280 <tcpip_inpkt>
 800f32a:	4603      	mov	r3, r0
 800f32c:	e005      	b.n	800f33a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800f32e:	4a06      	ldr	r2, [pc, #24]	; (800f348 <tcpip_input+0x40>)
 800f330:	6839      	ldr	r1, [r7, #0]
 800f332:	6878      	ldr	r0, [r7, #4]
 800f334:	f7ff ffa4 	bl	800f280 <tcpip_inpkt>
 800f338:	4603      	mov	r3, r0
}
 800f33a:	4618      	mov	r0, r3
 800f33c:	3708      	adds	r7, #8
 800f33e:	46bd      	mov	sp, r7
 800f340:	bd80      	pop	{r7, pc}
 800f342:	bf00      	nop
 800f344:	0801b1e1 	.word	0x0801b1e1
 800f348:	08019ea1 	.word	0x08019ea1

0800f34c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800f34c:	b580      	push	{r7, lr}
 800f34e:	b084      	sub	sp, #16
 800f350:	af00      	add	r7, sp, #0
 800f352:	6078      	str	r0, [r7, #4]
 800f354:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800f356:	4819      	ldr	r0, [pc, #100]	; (800f3bc <tcpip_try_callback+0x70>)
 800f358:	f00c f8c1 	bl	801b4de <sys_mbox_valid>
 800f35c:	4603      	mov	r3, r0
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d106      	bne.n	800f370 <tcpip_try_callback+0x24>
 800f362:	4b17      	ldr	r3, [pc, #92]	; (800f3c0 <tcpip_try_callback+0x74>)
 800f364:	f240 125d 	movw	r2, #349	; 0x15d
 800f368:	4916      	ldr	r1, [pc, #88]	; (800f3c4 <tcpip_try_callback+0x78>)
 800f36a:	4817      	ldr	r0, [pc, #92]	; (800f3c8 <tcpip_try_callback+0x7c>)
 800f36c:	f00d f9b8 	bl	801c6e0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800f370:	2008      	movs	r0, #8
 800f372:	f001 fb91 	bl	8010a98 <memp_malloc>
 800f376:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d102      	bne.n	800f384 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800f37e:	f04f 33ff 	mov.w	r3, #4294967295
 800f382:	e017      	b.n	800f3b4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	2201      	movs	r2, #1
 800f388:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	687a      	ldr	r2, [r7, #4]
 800f38e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	683a      	ldr	r2, [r7, #0]
 800f394:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800f396:	68f9      	ldr	r1, [r7, #12]
 800f398:	4808      	ldr	r0, [pc, #32]	; (800f3bc <tcpip_try_callback+0x70>)
 800f39a:	f00c f82b 	bl	801b3f4 <sys_mbox_trypost>
 800f39e:	4603      	mov	r3, r0
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d006      	beq.n	800f3b2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800f3a4:	68f9      	ldr	r1, [r7, #12]
 800f3a6:	2008      	movs	r0, #8
 800f3a8:	f001 fbc8 	bl	8010b3c <memp_free>
    return ERR_MEM;
 800f3ac:	f04f 33ff 	mov.w	r3, #4294967295
 800f3b0:	e000      	b.n	800f3b4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800f3b2:	2300      	movs	r3, #0
}
 800f3b4:	4618      	mov	r0, r3
 800f3b6:	3710      	adds	r7, #16
 800f3b8:	46bd      	mov	sp, r7
 800f3ba:	bd80      	pop	{r7, pc}
 800f3bc:	20004274 	.word	0x20004274
 800f3c0:	0801f2dc 	.word	0x0801f2dc
 800f3c4:	0801f354 	.word	0x0801f354
 800f3c8:	0801f32c 	.word	0x0801f32c

0800f3cc <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800f3cc:	b580      	push	{r7, lr}
 800f3ce:	b084      	sub	sp, #16
 800f3d0:	af00      	add	r7, sp, #0
 800f3d2:	60f8      	str	r0, [r7, #12]
 800f3d4:	60b9      	str	r1, [r7, #8]
 800f3d6:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800f3d8:	4806      	ldr	r0, [pc, #24]	; (800f3f4 <tcpip_send_msg_wait_sem+0x28>)
 800f3da:	f00c f959 	bl	801b690 <sys_mutex_lock>
  fn(apimsg);
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	68b8      	ldr	r0, [r7, #8]
 800f3e2:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800f3e4:	4803      	ldr	r0, [pc, #12]	; (800f3f4 <tcpip_send_msg_wait_sem+0x28>)
 800f3e6:	f00c f962 	bl	801b6ae <sys_mutex_unlock>
  return ERR_OK;
 800f3ea:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800f3ec:	4618      	mov	r0, r3
 800f3ee:	3710      	adds	r7, #16
 800f3f0:	46bd      	mov	sp, r7
 800f3f2:	bd80      	pop	{r7, pc}
 800f3f4:	20007f04 	.word	0x20007f04

0800f3f8 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800f3f8:	b580      	push	{r7, lr}
 800f3fa:	b084      	sub	sp, #16
 800f3fc:	af02      	add	r7, sp, #8
 800f3fe:	6078      	str	r0, [r7, #4]
 800f400:	6039      	str	r1, [r7, #0]
  lwip_init();
 800f402:	f000 fec1 	bl	8010188 <lwip_init>

  tcpip_init_done = initfunc;
 800f406:	4a17      	ldr	r2, [pc, #92]	; (800f464 <tcpip_init+0x6c>)
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800f40c:	4a16      	ldr	r2, [pc, #88]	; (800f468 <tcpip_init+0x70>)
 800f40e:	683b      	ldr	r3, [r7, #0]
 800f410:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800f412:	2106      	movs	r1, #6
 800f414:	4815      	ldr	r0, [pc, #84]	; (800f46c <tcpip_init+0x74>)
 800f416:	f00b ffb9 	bl	801b38c <sys_mbox_new>
 800f41a:	4603      	mov	r3, r0
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d006      	beq.n	800f42e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800f420:	4b13      	ldr	r3, [pc, #76]	; (800f470 <tcpip_init+0x78>)
 800f422:	f240 2261 	movw	r2, #609	; 0x261
 800f426:	4913      	ldr	r1, [pc, #76]	; (800f474 <tcpip_init+0x7c>)
 800f428:	4813      	ldr	r0, [pc, #76]	; (800f478 <tcpip_init+0x80>)
 800f42a:	f00d f959 	bl	801c6e0 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800f42e:	4813      	ldr	r0, [pc, #76]	; (800f47c <tcpip_init+0x84>)
 800f430:	f00c f912 	bl	801b658 <sys_mutex_new>
 800f434:	4603      	mov	r3, r0
 800f436:	2b00      	cmp	r3, #0
 800f438:	d006      	beq.n	800f448 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800f43a:	4b0d      	ldr	r3, [pc, #52]	; (800f470 <tcpip_init+0x78>)
 800f43c:	f240 2265 	movw	r2, #613	; 0x265
 800f440:	490f      	ldr	r1, [pc, #60]	; (800f480 <tcpip_init+0x88>)
 800f442:	480d      	ldr	r0, [pc, #52]	; (800f478 <tcpip_init+0x80>)
 800f444:	f00d f94c 	bl	801c6e0 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800f448:	2300      	movs	r3, #0
 800f44a:	9300      	str	r3, [sp, #0]
 800f44c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f450:	2200      	movs	r2, #0
 800f452:	490c      	ldr	r1, [pc, #48]	; (800f484 <tcpip_init+0x8c>)
 800f454:	480c      	ldr	r0, [pc, #48]	; (800f488 <tcpip_init+0x90>)
 800f456:	f00c f937 	bl	801b6c8 <sys_thread_new>
}
 800f45a:	bf00      	nop
 800f45c:	3708      	adds	r7, #8
 800f45e:	46bd      	mov	sp, r7
 800f460:	bd80      	pop	{r7, pc}
 800f462:	bf00      	nop
 800f464:	2000426c 	.word	0x2000426c
 800f468:	20004270 	.word	0x20004270
 800f46c:	20004274 	.word	0x20004274
 800f470:	0801f2dc 	.word	0x0801f2dc
 800f474:	0801f364 	.word	0x0801f364
 800f478:	0801f32c 	.word	0x0801f32c
 800f47c:	20007f04 	.word	0x20007f04
 800f480:	0801f388 	.word	0x0801f388
 800f484:	0800f189 	.word	0x0800f189
 800f488:	0801f3ac 	.word	0x0801f3ac

0800f48c <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 800f48c:	b580      	push	{r7, lr}
 800f48e:	b084      	sub	sp, #16
 800f490:	af00      	add	r7, sp, #0
 800f492:	6078      	str	r0, [r7, #4]
 800f494:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d002      	beq.n	800f4a2 <fs_open+0x16>
 800f49c:	683b      	ldr	r3, [r7, #0]
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d102      	bne.n	800f4a8 <fs_open+0x1c>
    return ERR_ARG;
 800f4a2:	f06f 030f 	mvn.w	r3, #15
 800f4a6:	e028      	b.n	800f4fa <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800f4a8:	4b16      	ldr	r3, [pc, #88]	; (800f504 <fs_open+0x78>)
 800f4aa:	60fb      	str	r3, [r7, #12]
 800f4ac:	e020      	b.n	800f4f0 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	685b      	ldr	r3, [r3, #4]
 800f4b2:	4619      	mov	r1, r3
 800f4b4:	6838      	ldr	r0, [r7, #0]
 800f4b6:	f7f0 fe8b 	bl	80001d0 <strcmp>
 800f4ba:	4603      	mov	r3, r0
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d114      	bne.n	800f4ea <fs_open+0x5e>
      file->data = (const char *)f->data;
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	689a      	ldr	r2, [r3, #8]
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	68da      	ldr	r2, [r3, #12]
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	68da      	ldr	r2, [r3, #12]
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	2200      	movs	r2, #0
 800f4dc:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	7c1a      	ldrb	r2, [r3, #16]
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800f4e6:	2300      	movs	r3, #0
 800f4e8:	e007      	b.n	800f4fa <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	60fb      	str	r3, [r7, #12]
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d1db      	bne.n	800f4ae <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 800f4f6:	f06f 0305 	mvn.w	r3, #5
}
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	3710      	adds	r7, #16
 800f4fe:	46bd      	mov	sp, r7
 800f500:	bd80      	pop	{r7, pc}
 800f502:	bf00      	nop
 800f504:	08022f00 	.word	0x08022f00

0800f508 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 800f508:	b480      	push	{r7}
 800f50a:	b083      	sub	sp, #12
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 800f510:	bf00      	nop
 800f512:	370c      	adds	r7, #12
 800f514:	46bd      	mov	sp, r7
 800f516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f51a:	4770      	bx	lr

0800f51c <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 800f51c:	b480      	push	{r7}
 800f51e:	b083      	sub	sp, #12
 800f520:	af00      	add	r7, sp, #0
 800f522:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	685a      	ldr	r2, [r3, #4]
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	689b      	ldr	r3, [r3, #8]
 800f52c:	1ad3      	subs	r3, r2, r3
}
 800f52e:	4618      	mov	r0, r3
 800f530:	370c      	adds	r7, #12
 800f532:	46bd      	mov	sp, r7
 800f534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f538:	4770      	bx	lr

0800f53a <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 800f53a:	b580      	push	{r7, lr}
 800f53c:	b082      	sub	sp, #8
 800f53e:	af00      	add	r7, sp, #0
 800f540:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 800f542:	222c      	movs	r2, #44	; 0x2c
 800f544:	2100      	movs	r1, #0
 800f546:	6878      	ldr	r0, [r7, #4]
 800f548:	f00c fe44 	bl	801c1d4 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 800f54c:	bf00      	nop
 800f54e:	3708      	adds	r7, #8
 800f550:	46bd      	mov	sp, r7
 800f552:	bd80      	pop	{r7, pc}

0800f554 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 800f554:	b580      	push	{r7, lr}
 800f556:	b082      	sub	sp, #8
 800f558:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 800f55a:	202c      	movs	r0, #44	; 0x2c
 800f55c:	f001 f91a 	bl	8010794 <mem_malloc>
 800f560:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	2b00      	cmp	r3, #0
 800f566:	d002      	beq.n	800f56e <http_state_alloc+0x1a>
    http_state_init(ret);
 800f568:	6878      	ldr	r0, [r7, #4]
 800f56a:	f7ff ffe6 	bl	800f53a <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 800f56e:	687b      	ldr	r3, [r7, #4]
}
 800f570:	4618      	mov	r0, r3
 800f572:	3708      	adds	r7, #8
 800f574:	46bd      	mov	sp, r7
 800f576:	bd80      	pop	{r7, pc}

0800f578 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 800f578:	b580      	push	{r7, lr}
 800f57a:	b082      	sub	sp, #8
 800f57c:	af00      	add	r7, sp, #0
 800f57e:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	695b      	ldr	r3, [r3, #20]
 800f584:	2b00      	cmp	r3, #0
 800f586:	d007      	beq.n	800f598 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	695b      	ldr	r3, [r3, #20]
 800f58c:	4618      	mov	r0, r3
 800f58e:	f7ff ffbb 	bl	800f508 <fs_close>
    hs->handle = NULL;
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	2200      	movs	r2, #0
 800f596:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	6a1b      	ldr	r3, [r3, #32]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d007      	beq.n	800f5b0 <http_state_eof+0x38>
    pbuf_free(hs->req);
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	6a1b      	ldr	r3, [r3, #32]
 800f5a4:	4618      	mov	r0, r3
 800f5a6:	f002 f947 	bl	8011838 <pbuf_free>
    hs->req = NULL;
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	2200      	movs	r2, #0
 800f5ae:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800f5b0:	bf00      	nop
 800f5b2:	3708      	adds	r7, #8
 800f5b4:	46bd      	mov	sp, r7
 800f5b6:	bd80      	pop	{r7, pc}

0800f5b8 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 800f5b8:	b580      	push	{r7, lr}
 800f5ba:	b082      	sub	sp, #8
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d005      	beq.n	800f5d2 <http_state_free+0x1a>
    http_state_eof(hs);
 800f5c6:	6878      	ldr	r0, [r7, #4]
 800f5c8:	f7ff ffd6 	bl	800f578 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 800f5cc:	6878      	ldr	r0, [r7, #4]
 800f5ce:	f000 ff47 	bl	8010460 <mem_free>
  }
}
 800f5d2:	bf00      	nop
 800f5d4:	3708      	adds	r7, #8
 800f5d6:	46bd      	mov	sp, r7
 800f5d8:	bd80      	pop	{r7, pc}
	...

0800f5dc <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 800f5dc:	b580      	push	{r7, lr}
 800f5de:	b086      	sub	sp, #24
 800f5e0:	af00      	add	r7, sp, #0
 800f5e2:	60f8      	str	r0, [r7, #12]
 800f5e4:	60b9      	str	r1, [r7, #8]
 800f5e6:	607a      	str	r2, [r7, #4]
 800f5e8:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d106      	bne.n	800f5fe <http_write+0x22>
 800f5f0:	4b2c      	ldr	r3, [pc, #176]	; (800f6a4 <http_write+0xc8>)
 800f5f2:	f240 2219 	movw	r2, #537	; 0x219
 800f5f6:	492c      	ldr	r1, [pc, #176]	; (800f6a8 <http_write+0xcc>)
 800f5f8:	482c      	ldr	r0, [pc, #176]	; (800f6ac <http_write+0xd0>)
 800f5fa:	f00d f871 	bl	801c6e0 <iprintf>
  len = *length;
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	881b      	ldrh	r3, [r3, #0]
 800f602:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 800f604:	8afb      	ldrh	r3, [r7, #22]
 800f606:	2b00      	cmp	r3, #0
 800f608:	d101      	bne.n	800f60e <http_write+0x32>
    return ERR_OK;
 800f60a:	2300      	movs	r3, #0
 800f60c:	e045      	b.n	800f69a <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f614:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 800f616:	8aba      	ldrh	r2, [r7, #20]
 800f618:	8afb      	ldrh	r3, [r7, #22]
 800f61a:	429a      	cmp	r2, r3
 800f61c:	d201      	bcs.n	800f622 <http_write+0x46>
    len = max_len;
 800f61e:	8abb      	ldrh	r3, [r7, #20]
 800f620:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f626:	005b      	lsls	r3, r3, #1
 800f628:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 800f62a:	8afa      	ldrh	r2, [r7, #22]
 800f62c:	8abb      	ldrh	r3, [r7, #20]
 800f62e:	429a      	cmp	r2, r3
 800f630:	d901      	bls.n	800f636 <http_write+0x5a>
    len = max_len;
 800f632:	8abb      	ldrh	r3, [r7, #20]
 800f634:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 800f636:	78fb      	ldrb	r3, [r7, #3]
 800f638:	8afa      	ldrh	r2, [r7, #22]
 800f63a:	68b9      	ldr	r1, [r7, #8]
 800f63c:	68f8      	ldr	r0, [r7, #12]
 800f63e:	f006 fef7 	bl	8016430 <tcp_write>
 800f642:	4603      	mov	r3, r0
 800f644:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 800f646:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f64a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f64e:	d10f      	bne.n	800f670 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f656:	2b00      	cmp	r3, #0
 800f658:	d004      	beq.n	800f664 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 800f660:	2b08      	cmp	r3, #8
 800f662:	d902      	bls.n	800f66a <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 800f664:	2301      	movs	r3, #1
 800f666:	82fb      	strh	r3, [r7, #22]
 800f668:	e002      	b.n	800f670 <http_write+0x94>
      } else {
        len /= 2;
 800f66a:	8afb      	ldrh	r3, [r7, #22]
 800f66c:	085b      	lsrs	r3, r3, #1
 800f66e:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 800f670:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f674:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f678:	d102      	bne.n	800f680 <http_write+0xa4>
 800f67a:	8afb      	ldrh	r3, [r7, #22]
 800f67c:	2b01      	cmp	r3, #1
 800f67e:	d8da      	bhi.n	800f636 <http_write+0x5a>

  if (err == ERR_OK) {
 800f680:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f684:	2b00      	cmp	r3, #0
 800f686:	d103      	bne.n	800f690 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	8afa      	ldrh	r2, [r7, #22]
 800f68c:	801a      	strh	r2, [r3, #0]
 800f68e:	e002      	b.n	800f696 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	2200      	movs	r2, #0
 800f694:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 800f696:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800f69a:	4618      	mov	r0, r3
 800f69c:	3718      	adds	r7, #24
 800f69e:	46bd      	mov	sp, r7
 800f6a0:	bd80      	pop	{r7, pc}
 800f6a2:	bf00      	nop
 800f6a4:	0801f3fc 	.word	0x0801f3fc
 800f6a8:	0801f434 	.word	0x0801f434
 800f6ac:	0801f444 	.word	0x0801f444

0800f6b0 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 800f6b0:	b580      	push	{r7, lr}
 800f6b2:	b086      	sub	sp, #24
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	60f8      	str	r0, [r7, #12]
 800f6b8:	60b9      	str	r1, [r7, #8]
 800f6ba:	4613      	mov	r3, r2
 800f6bc:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 800f6be:	2100      	movs	r1, #0
 800f6c0:	68f8      	ldr	r0, [r7, #12]
 800f6c2:	f003 ff77 	bl	80135b4 <tcp_arg>
  altcp_recv(pcb, NULL);
 800f6c6:	2100      	movs	r1, #0
 800f6c8:	68f8      	ldr	r0, [r7, #12]
 800f6ca:	f003 ff85 	bl	80135d8 <tcp_recv>
  altcp_err(pcb, NULL);
 800f6ce:	2100      	movs	r1, #0
 800f6d0:	68f8      	ldr	r0, [r7, #12]
 800f6d2:	f003 ffc5 	bl	8013660 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 800f6d6:	2200      	movs	r2, #0
 800f6d8:	2100      	movs	r1, #0
 800f6da:	68f8      	ldr	r0, [r7, #12]
 800f6dc:	f003 fffa 	bl	80136d4 <tcp_poll>
  altcp_sent(pcb, NULL);
 800f6e0:	2100      	movs	r1, #0
 800f6e2:	68f8      	ldr	r0, [r7, #12]
 800f6e4:	f003 ff9a 	bl	801361c <tcp_sent>
  if (hs != NULL) {
 800f6e8:	68bb      	ldr	r3, [r7, #8]
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d002      	beq.n	800f6f4 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 800f6ee:	68b8      	ldr	r0, [r7, #8]
 800f6f0:	f7ff ff62 	bl	800f5b8 <http_state_free>
  }

  if (abort_conn) {
 800f6f4:	79fb      	ldrb	r3, [r7, #7]
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d004      	beq.n	800f704 <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 800f6fa:	68f8      	ldr	r0, [r7, #12]
 800f6fc:	f002 fe9c 	bl	8012438 <tcp_abort>
    return ERR_OK;
 800f700:	2300      	movs	r3, #0
 800f702:	e00f      	b.n	800f724 <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 800f704:	68f8      	ldr	r0, [r7, #12]
 800f706:	f002 fd51 	bl	80121ac <tcp_close>
 800f70a:	4603      	mov	r3, r0
 800f70c:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 800f70e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f712:	2b00      	cmp	r3, #0
 800f714:	d004      	beq.n	800f720 <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800f716:	2204      	movs	r2, #4
 800f718:	4904      	ldr	r1, [pc, #16]	; (800f72c <http_close_or_abort_conn+0x7c>)
 800f71a:	68f8      	ldr	r0, [r7, #12]
 800f71c:	f003 ffda 	bl	80136d4 <tcp_poll>
  }
  return err;
 800f720:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f724:	4618      	mov	r0, r3
 800f726:	3718      	adds	r7, #24
 800f728:	46bd      	mov	sp, r7
 800f72a:	bd80      	pop	{r7, pc}
 800f72c:	0800fdf3 	.word	0x0800fdf3

0800f730 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 800f730:	b580      	push	{r7, lr}
 800f732:	b082      	sub	sp, #8
 800f734:	af00      	add	r7, sp, #0
 800f736:	6078      	str	r0, [r7, #4]
 800f738:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 800f73a:	2200      	movs	r2, #0
 800f73c:	6839      	ldr	r1, [r7, #0]
 800f73e:	6878      	ldr	r0, [r7, #4]
 800f740:	f7ff ffb6 	bl	800f6b0 <http_close_or_abort_conn>
 800f744:	4603      	mov	r3, r0
}
 800f746:	4618      	mov	r0, r3
 800f748:	3708      	adds	r7, #8
 800f74a:	46bd      	mov	sp, r7
 800f74c:	bd80      	pop	{r7, pc}

0800f74e <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800f74e:	b580      	push	{r7, lr}
 800f750:	b082      	sub	sp, #8
 800f752:	af00      	add	r7, sp, #0
 800f754:	6078      	str	r0, [r7, #4]
 800f756:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 800f758:	6839      	ldr	r1, [r7, #0]
 800f75a:	6878      	ldr	r0, [r7, #4]
 800f75c:	f7ff ffe8 	bl	800f730 <http_close_conn>
  }
}
 800f760:	bf00      	nop
 800f762:	3708      	adds	r7, #8
 800f764:	46bd      	mov	sp, r7
 800f766:	bd80      	pop	{r7, pc}

0800f768 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800f768:	b580      	push	{r7, lr}
 800f76a:	b084      	sub	sp, #16
 800f76c:	af00      	add	r7, sp, #0
 800f76e:	6078      	str	r0, [r7, #4]
 800f770:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 800f772:	683b      	ldr	r3, [r7, #0]
 800f774:	695b      	ldr	r3, [r3, #20]
 800f776:	2b00      	cmp	r3, #0
 800f778:	d105      	bne.n	800f786 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 800f77a:	6839      	ldr	r1, [r7, #0]
 800f77c:	6878      	ldr	r0, [r7, #4]
 800f77e:	f7ff ffe6 	bl	800f74e <http_eof>
    return 0;
 800f782:	2300      	movs	r3, #0
 800f784:	e016      	b.n	800f7b4 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 800f786:	683b      	ldr	r3, [r7, #0]
 800f788:	695b      	ldr	r3, [r3, #20]
 800f78a:	4618      	mov	r0, r3
 800f78c:	f7ff fec6 	bl	800f51c <fs_bytes_left>
 800f790:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	2b00      	cmp	r3, #0
 800f796:	dc05      	bgt.n	800f7a4 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800f798:	6839      	ldr	r1, [r7, #0]
 800f79a:	6878      	ldr	r0, [r7, #4]
 800f79c:	f7ff ffd7 	bl	800f74e <http_eof>
    return 0;
 800f7a0:	2300      	movs	r3, #0
 800f7a2:	e007      	b.n	800f7b4 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 800f7a4:	4b05      	ldr	r3, [pc, #20]	; (800f7bc <http_check_eof+0x54>)
 800f7a6:	f240 429d 	movw	r2, #1181	; 0x49d
 800f7aa:	4905      	ldr	r1, [pc, #20]	; (800f7c0 <http_check_eof+0x58>)
 800f7ac:	4805      	ldr	r0, [pc, #20]	; (800f7c4 <http_check_eof+0x5c>)
 800f7ae:	f00c ff97 	bl	801c6e0 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 800f7b2:	2301      	movs	r3, #1
}
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	3710      	adds	r7, #16
 800f7b8:	46bd      	mov	sp, r7
 800f7ba:	bd80      	pop	{r7, pc}
 800f7bc:	0801f3fc 	.word	0x0801f3fc
 800f7c0:	0801f46c 	.word	0x0801f46c
 800f7c4:	0801f444 	.word	0x0801f444

0800f7c8 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 800f7c8:	b580      	push	{r7, lr}
 800f7ca:	b084      	sub	sp, #16
 800f7cc:	af00      	add	r7, sp, #0
 800f7ce:	6078      	str	r0, [r7, #4]
 800f7d0:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 800f7d6:	683b      	ldr	r3, [r7, #0]
 800f7d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7da:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f7de:	4293      	cmp	r3, r2
 800f7e0:	d803      	bhi.n	800f7ea <http_send_data_nonssi+0x22>
 800f7e2:	683b      	ldr	r3, [r7, #0]
 800f7e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7e6:	b29b      	uxth	r3, r3
 800f7e8:	e001      	b.n	800f7ee <http_send_data_nonssi+0x26>
 800f7ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f7ee:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800f7f0:	683b      	ldr	r3, [r7, #0]
 800f7f2:	6999      	ldr	r1, [r3, #24]
 800f7f4:	f107 020c 	add.w	r2, r7, #12
 800f7f8:	2300      	movs	r3, #0
 800f7fa:	6878      	ldr	r0, [r7, #4]
 800f7fc:	f7ff feee 	bl	800f5dc <http_write>
 800f800:	4603      	mov	r3, r0
 800f802:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 800f804:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d10d      	bne.n	800f828 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 800f80c:	2301      	movs	r3, #1
 800f80e:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 800f810:	683b      	ldr	r3, [r7, #0]
 800f812:	699b      	ldr	r3, [r3, #24]
 800f814:	89ba      	ldrh	r2, [r7, #12]
 800f816:	441a      	add	r2, r3
 800f818:	683b      	ldr	r3, [r7, #0]
 800f81a:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 800f81c:	683b      	ldr	r3, [r7, #0]
 800f81e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f820:	89ba      	ldrh	r2, [r7, #12]
 800f822:	1a9a      	subs	r2, r3, r2
 800f824:	683b      	ldr	r3, [r7, #0]
 800f826:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 800f828:	7bfb      	ldrb	r3, [r7, #15]
}
 800f82a:	4618      	mov	r0, r3
 800f82c:	3710      	adds	r7, #16
 800f82e:	46bd      	mov	sp, r7
 800f830:	bd80      	pop	{r7, pc}

0800f832 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 800f832:	b580      	push	{r7, lr}
 800f834:	b084      	sub	sp, #16
 800f836:	af00      	add	r7, sp, #0
 800f838:	6078      	str	r0, [r7, #4]
 800f83a:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800f83c:	2300      	movs	r3, #0
 800f83e:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 800f840:	683b      	ldr	r3, [r7, #0]
 800f842:	2b00      	cmp	r3, #0
 800f844:	d101      	bne.n	800f84a <http_send+0x18>
    return 0;
 800f846:	2300      	movs	r3, #0
 800f848:	e025      	b.n	800f896 <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 800f84a:	683b      	ldr	r3, [r7, #0]
 800f84c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d108      	bne.n	800f864 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 800f852:	6839      	ldr	r1, [r7, #0]
 800f854:	6878      	ldr	r0, [r7, #4]
 800f856:	f7ff ff87 	bl	800f768 <http_check_eof>
 800f85a:	4603      	mov	r3, r0
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d101      	bne.n	800f864 <http_send+0x32>
      return 0;
 800f860:	2300      	movs	r3, #0
 800f862:	e018      	b.n	800f896 <http_send+0x64>
  if (hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 800f864:	6839      	ldr	r1, [r7, #0]
 800f866:	6878      	ldr	r0, [r7, #4]
 800f868:	f7ff ffae 	bl	800f7c8 <http_send_data_nonssi>
 800f86c:	4603      	mov	r3, r0
 800f86e:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 800f870:	683b      	ldr	r3, [r7, #0]
 800f872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f874:	2b00      	cmp	r3, #0
 800f876:	d10d      	bne.n	800f894 <http_send+0x62>
 800f878:	683b      	ldr	r3, [r7, #0]
 800f87a:	695b      	ldr	r3, [r3, #20]
 800f87c:	4618      	mov	r0, r3
 800f87e:	f7ff fe4d 	bl	800f51c <fs_bytes_left>
 800f882:	4603      	mov	r3, r0
 800f884:	2b00      	cmp	r3, #0
 800f886:	dc05      	bgt.n	800f894 <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800f888:	6839      	ldr	r1, [r7, #0]
 800f88a:	6878      	ldr	r0, [r7, #4]
 800f88c:	f7ff ff5f 	bl	800f74e <http_eof>
    return 0;
 800f890:	2300      	movs	r3, #0
 800f892:	e000      	b.n	800f896 <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 800f894:	7bfb      	ldrb	r3, [r7, #15]
}
 800f896:	4618      	mov	r0, r3
 800f898:	3710      	adds	r7, #16
 800f89a:	46bd      	mov	sp, r7
 800f89c:	bd80      	pop	{r7, pc}
	...

0800f8a0 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 800f8a0:	b580      	push	{r7, lr}
 800f8a2:	b084      	sub	sp, #16
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	6078      	str	r0, [r7, #4]
 800f8a8:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 800f8aa:	683b      	ldr	r3, [r7, #0]
 800f8ac:	4a1c      	ldr	r2, [pc, #112]	; (800f920 <http_get_404_file+0x80>)
 800f8ae:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 800f8b0:	687a      	ldr	r2, [r7, #4]
 800f8b2:	683b      	ldr	r3, [r7, #0]
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	4619      	mov	r1, r3
 800f8b8:	4610      	mov	r0, r2
 800f8ba:	f7ff fde7 	bl	800f48c <fs_open>
 800f8be:	4603      	mov	r3, r0
 800f8c0:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800f8c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d024      	beq.n	800f914 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 800f8ca:	683b      	ldr	r3, [r7, #0]
 800f8cc:	4a15      	ldr	r2, [pc, #84]	; (800f924 <http_get_404_file+0x84>)
 800f8ce:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 800f8d0:	687a      	ldr	r2, [r7, #4]
 800f8d2:	683b      	ldr	r3, [r7, #0]
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	4619      	mov	r1, r3
 800f8d8:	4610      	mov	r0, r2
 800f8da:	f7ff fdd7 	bl	800f48c <fs_open>
 800f8de:	4603      	mov	r3, r0
 800f8e0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800f8e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d014      	beq.n	800f914 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 800f8ea:	683b      	ldr	r3, [r7, #0]
 800f8ec:	4a0e      	ldr	r2, [pc, #56]	; (800f928 <http_get_404_file+0x88>)
 800f8ee:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 800f8f0:	687a      	ldr	r2, [r7, #4]
 800f8f2:	683b      	ldr	r3, [r7, #0]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	4619      	mov	r1, r3
 800f8f8:	4610      	mov	r0, r2
 800f8fa:	f7ff fdc7 	bl	800f48c <fs_open>
 800f8fe:	4603      	mov	r3, r0
 800f900:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 800f902:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f906:	2b00      	cmp	r3, #0
 800f908:	d004      	beq.n	800f914 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800f90a:	683b      	ldr	r3, [r7, #0]
 800f90c:	2200      	movs	r2, #0
 800f90e:	601a      	str	r2, [r3, #0]
        return NULL;
 800f910:	2300      	movs	r3, #0
 800f912:	e000      	b.n	800f916 <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 800f914:	687b      	ldr	r3, [r7, #4]
}
 800f916:	4618      	mov	r0, r3
 800f918:	3710      	adds	r7, #16
 800f91a:	46bd      	mov	sp, r7
 800f91c:	bd80      	pop	{r7, pc}
 800f91e:	bf00      	nop
 800f920:	0801f4a4 	.word	0x0801f4a4
 800f924:	0801f4b0 	.word	0x0801f4b0
 800f928:	0801f4bc 	.word	0x0801f4bc

0800f92c <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 800f92c:	b580      	push	{r7, lr}
 800f92e:	b08e      	sub	sp, #56	; 0x38
 800f930:	af00      	add	r7, sp, #0
 800f932:	60f8      	str	r0, [r7, #12]
 800f934:	60b9      	str	r1, [r7, #8]
 800f936:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 800f93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d106      	bne.n	800f950 <http_parse_request+0x24>
 800f942:	4b65      	ldr	r3, [pc, #404]	; (800fad8 <http_parse_request+0x1ac>)
 800f944:	f240 72ae 	movw	r2, #1966	; 0x7ae
 800f948:	4964      	ldr	r1, [pc, #400]	; (800fadc <http_parse_request+0x1b0>)
 800f94a:	4865      	ldr	r0, [pc, #404]	; (800fae0 <http_parse_request+0x1b4>)
 800f94c:	f00c fec8 	bl	801c6e0 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 800f950:	68bb      	ldr	r3, [r7, #8]
 800f952:	2b00      	cmp	r3, #0
 800f954:	d106      	bne.n	800f964 <http_parse_request+0x38>
 800f956:	4b60      	ldr	r3, [pc, #384]	; (800fad8 <http_parse_request+0x1ac>)
 800f958:	f240 72af 	movw	r2, #1967	; 0x7af
 800f95c:	4961      	ldr	r1, [pc, #388]	; (800fae4 <http_parse_request+0x1b8>)
 800f95e:	4860      	ldr	r0, [pc, #384]	; (800fae0 <http_parse_request+0x1b4>)
 800f960:	f00c febe 	bl	801c6e0 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 800f964:	68bb      	ldr	r3, [r7, #8]
 800f966:	695b      	ldr	r3, [r3, #20]
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d103      	bne.n	800f974 <http_parse_request+0x48>
 800f96c:	68bb      	ldr	r3, [r7, #8]
 800f96e:	699b      	ldr	r3, [r3, #24]
 800f970:	2b00      	cmp	r3, #0
 800f972:	d002      	beq.n	800f97a <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 800f974:	f06f 0307 	mvn.w	r3, #7
 800f978:	e0a9      	b.n	800face <http_parse_request+0x1a2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 800f97a:	68bb      	ldr	r3, [r7, #8]
 800f97c:	6a1b      	ldr	r3, [r3, #32]
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d103      	bne.n	800f98a <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 800f982:	68bb      	ldr	r3, [r7, #8]
 800f984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f986:	621a      	str	r2, [r3, #32]
 800f988:	e005      	b.n	800f996 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 800f98a:	68bb      	ldr	r3, [r7, #8]
 800f98c:	6a1b      	ldr	r3, [r3, #32]
 800f98e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f990:	4618      	mov	r0, r3
 800f992:	f002 f81f 	bl	80119d4 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 800f996:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f998:	f001 fff4 	bl	8011984 <pbuf_ref>

  if (hs->req->next != NULL) {
 800f99c:	68bb      	ldr	r3, [r7, #8]
 800f99e:	6a1b      	ldr	r3, [r3, #32]
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d012      	beq.n	800f9cc <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800f9a6:	68bb      	ldr	r3, [r7, #8]
 800f9a8:	6a1b      	ldr	r3, [r3, #32]
 800f9aa:	891b      	ldrh	r3, [r3, #8]
 800f9ac:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800f9b0:	4293      	cmp	r3, r2
 800f9b2:	bf28      	it	cs
 800f9b4:	4613      	movcs	r3, r2
 800f9b6:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 800f9b8:	68bb      	ldr	r3, [r7, #8]
 800f9ba:	6a18      	ldr	r0, [r3, #32]
 800f9bc:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800f9be:	2300      	movs	r3, #0
 800f9c0:	4949      	ldr	r1, [pc, #292]	; (800fae8 <http_parse_request+0x1bc>)
 800f9c2:	f002 f93f 	bl	8011c44 <pbuf_copy_partial>
    data = httpd_req_buf;
 800f9c6:	4b48      	ldr	r3, [pc, #288]	; (800fae8 <http_parse_request+0x1bc>)
 800f9c8:	637b      	str	r3, [r7, #52]	; 0x34
 800f9ca:	e005      	b.n	800f9d8 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 800f9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9ce:	685b      	ldr	r3, [r3, #4]
 800f9d0:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 800f9d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9d4:	895b      	ldrh	r3, [r3, #10]
 800f9d6:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 800f9d8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800f9da:	2b06      	cmp	r3, #6
 800f9dc:	d962      	bls.n	800faa4 <http_parse_request+0x178>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 800f9de:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800f9e0:	461a      	mov	r2, r3
 800f9e2:	4942      	ldr	r1, [pc, #264]	; (800faec <http_parse_request+0x1c0>)
 800f9e4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f9e6:	f000 fb99 	bl	801011c <lwip_strnstr>
 800f9ea:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 800f9ec:	6a3b      	ldr	r3, [r7, #32]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d058      	beq.n	800faa4 <http_parse_request+0x178>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800f9f2:	2300      	movs	r3, #0
 800f9f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 800f9f6:	2204      	movs	r2, #4
 800f9f8:	493d      	ldr	r1, [pc, #244]	; (800faf0 <http_parse_request+0x1c4>)
 800f9fa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f9fc:	f00c fed5 	bl	801c7aa <strncmp>
 800fa00:	4603      	mov	r3, r0
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d116      	bne.n	800fa34 <http_parse_request+0x108>
        sp1 = data + 3;
 800fa06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa08:	3303      	adds	r3, #3
 800fa0a:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 800fa0c:	69fb      	ldr	r3, [r7, #28]
 800fa0e:	1c5a      	adds	r2, r3, #1
 800fa10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa12:	1ad3      	subs	r3, r2, r3
 800fa14:	b29b      	uxth	r3, r3
 800fa16:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800fa18:	1ad3      	subs	r3, r2, r3
 800fa1a:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 800fa1c:	69fb      	ldr	r3, [r7, #28]
 800fa1e:	3301      	adds	r3, #1
 800fa20:	8b7a      	ldrh	r2, [r7, #26]
 800fa22:	4934      	ldr	r1, [pc, #208]	; (800faf4 <http_parse_request+0x1c8>)
 800fa24:	4618      	mov	r0, r3
 800fa26:	f000 fb79 	bl	801011c <lwip_strnstr>
 800fa2a:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 800fa2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d111      	bne.n	800fa56 <http_parse_request+0x12a>
 800fa32:	e006      	b.n	800fa42 <http_parse_request+0x116>
        data[4] = 0;
 800fa34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa36:	3304      	adds	r3, #4
 800fa38:	2200      	movs	r2, #0
 800fa3a:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 800fa3c:	f06f 030f 	mvn.w	r3, #15
 800fa40:	e045      	b.n	800face <http_parse_request+0x1a2>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 800fa42:	69fb      	ldr	r3, [r7, #28]
 800fa44:	3301      	adds	r3, #1
 800fa46:	8b7a      	ldrh	r2, [r7, #26]
 800fa48:	4928      	ldr	r1, [pc, #160]	; (800faec <http_parse_request+0x1c0>)
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	f000 fb66 	bl	801011c <lwip_strnstr>
 800fa50:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 800fa52:	2301      	movs	r3, #1
 800fa54:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800fa56:	69fb      	ldr	r3, [r7, #28]
 800fa58:	3301      	adds	r3, #1
 800fa5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fa5c:	1ad3      	subs	r3, r2, r3
 800fa5e:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 800fa60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d01e      	beq.n	800faa4 <http_parse_request+0x178>
 800fa66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fa68:	69fb      	ldr	r3, [r7, #28]
 800fa6a:	429a      	cmp	r2, r3
 800fa6c:	d91a      	bls.n	800faa4 <http_parse_request+0x178>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800fa6e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800fa70:	461a      	mov	r2, r3
 800fa72:	4921      	ldr	r1, [pc, #132]	; (800faf8 <http_parse_request+0x1cc>)
 800fa74:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fa76:	f000 fb51 	bl	801011c <lwip_strnstr>
 800fa7a:	4603      	mov	r3, r0
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d011      	beq.n	800faa4 <http_parse_request+0x178>
          char *uri = sp1 + 1;
 800fa80:	69fb      	ldr	r3, [r7, #28]
 800fa82:	3301      	adds	r3, #1
 800fa84:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 800fa86:	69fb      	ldr	r3, [r7, #28]
 800fa88:	2200      	movs	r2, #0
 800fa8a:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 800fa8c:	8b3b      	ldrh	r3, [r7, #24]
 800fa8e:	697a      	ldr	r2, [r7, #20]
 800fa90:	4413      	add	r3, r2
 800fa92:	2200      	movs	r2, #0
 800fa94:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 800fa96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fa98:	6979      	ldr	r1, [r7, #20]
 800fa9a:	68b8      	ldr	r0, [r7, #8]
 800fa9c:	f000 f82e 	bl	800fafc <http_find_file>
 800faa0:	4603      	mov	r3, r0
 800faa2:	e014      	b.n	800face <http_parse_request+0x1a2>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 800faa4:	68bb      	ldr	r3, [r7, #8]
 800faa6:	6a1b      	ldr	r3, [r3, #32]
 800faa8:	4618      	mov	r0, r3
 800faaa:	f001 ff53 	bl	8011954 <pbuf_clen>
 800faae:	4603      	mov	r3, r0
 800fab0:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800fab2:	68bb      	ldr	r3, [r7, #8]
 800fab4:	6a1b      	ldr	r3, [r3, #32]
 800fab6:	891b      	ldrh	r3, [r3, #8]
 800fab8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fabc:	d205      	bcs.n	800faca <http_parse_request+0x19e>
 800fabe:	8a7b      	ldrh	r3, [r7, #18]
 800fac0:	2b05      	cmp	r3, #5
 800fac2:	d802      	bhi.n	800faca <http_parse_request+0x19e>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 800fac4:	f06f 0304 	mvn.w	r3, #4
 800fac8:	e001      	b.n	800face <http_parse_request+0x1a2>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 800faca:	f06f 030f 	mvn.w	r3, #15
  }
}
 800face:	4618      	mov	r0, r3
 800fad0:	3738      	adds	r7, #56	; 0x38
 800fad2:	46bd      	mov	sp, r7
 800fad4:	bd80      	pop	{r7, pc}
 800fad6:	bf00      	nop
 800fad8:	0801f3fc 	.word	0x0801f3fc
 800fadc:	0801f4c8 	.word	0x0801f4c8
 800fae0:	0801f444 	.word	0x0801f444
 800fae4:	0801f4d4 	.word	0x0801f4d4
 800fae8:	20004278 	.word	0x20004278
 800faec:	0801f4e0 	.word	0x0801f4e0
 800faf0:	0801f4e4 	.word	0x0801f4e4
 800faf4:	0801f4ec 	.word	0x0801f4ec
 800faf8:	0801f4f0 	.word	0x0801f4f0

0800fafc <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 800fafc:	b580      	push	{r7, lr}
 800fafe:	b092      	sub	sp, #72	; 0x48
 800fb00:	af02      	add	r7, sp, #8
 800fb02:	60f8      	str	r0, [r7, #12]
 800fb04:	60b9      	str	r1, [r7, #8]
 800fb06:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 800fb08:	2300      	movs	r3, #0
 800fb0a:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 800fb0c:	2300      	movs	r3, #0
 800fb0e:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 800fb10:	2300      	movs	r3, #0
 800fb12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 800fb16:	68bb      	ldr	r3, [r7, #8]
 800fb18:	4618      	mov	r0, r3
 800fb1a:	f7f0 fb63 	bl	80001e4 <strlen>
 800fb1e:	62b8      	str	r0, [r7, #40]	; 0x28
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800fb20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d06b      	beq.n	800fbfe <http_find_file+0x102>
 800fb26:	68ba      	ldr	r2, [r7, #8]
 800fb28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb2a:	3b01      	subs	r3, #1
 800fb2c:	4413      	add	r3, r2
 800fb2e:	781b      	ldrb	r3, [r3, #0]
 800fb30:	2b2f      	cmp	r3, #47	; 0x2f
 800fb32:	d164      	bne.n	800fbfe <http_find_file+0x102>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800fb34:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800fb36:	4a53      	ldr	r2, [pc, #332]	; (800fc84 <http_find_file+0x188>)
 800fb38:	4293      	cmp	r3, r2
 800fb3a:	d102      	bne.n	800fb42 <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800fb3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb3e:	2b01      	cmp	r3, #1
 800fb40:	d15d      	bne.n	800fbfe <http_find_file+0x102>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800fb42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb44:	3b01      	subs	r3, #1
 800fb46:	2b3f      	cmp	r3, #63	; 0x3f
 800fb48:	bf28      	it	cs
 800fb4a:	233f      	movcs	r3, #63	; 0x3f
 800fb4c:	627b      	str	r3, [r7, #36]	; 0x24
    if (copy_len > 0) {
 800fb4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d00a      	beq.n	800fb6a <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 800fb54:	68bb      	ldr	r3, [r7, #8]
 800fb56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb58:	4619      	mov	r1, r3
 800fb5a:	484a      	ldr	r0, [pc, #296]	; (800fc84 <http_find_file+0x188>)
 800fb5c:	f00c fb2c 	bl	801c1b8 <memcpy>
      http_uri_buf[copy_len] = 0;
 800fb60:	4a48      	ldr	r2, [pc, #288]	; (800fc84 <http_find_file+0x188>)
 800fb62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb64:	4413      	add	r3, r2
 800fb66:	2200      	movs	r2, #0
 800fb68:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800fb6a:	2300      	movs	r3, #0
 800fb6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fb6e:	e043      	b.n	800fbf8 <http_find_file+0xfc>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 800fb70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d028      	beq.n	800fbc8 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 800fb76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb78:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800fb7c:	623b      	str	r3, [r7, #32]
        if (len_left > 0) {
 800fb7e:	6a3b      	ldr	r3, [r7, #32]
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d01e      	beq.n	800fbc2 <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 800fb84:	4a40      	ldr	r2, [pc, #256]	; (800fc88 <http_find_file+0x18c>)
 800fb86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb88:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800fb8c:	4618      	mov	r0, r3
 800fb8e:	f7f0 fb29 	bl	80001e4 <strlen>
 800fb92:	61f8      	str	r0, [r7, #28]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 800fb94:	69fa      	ldr	r2, [r7, #28]
 800fb96:	6a3b      	ldr	r3, [r7, #32]
 800fb98:	4293      	cmp	r3, r2
 800fb9a:	bf28      	it	cs
 800fb9c:	4613      	movcs	r3, r2
 800fb9e:	61bb      	str	r3, [r7, #24]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 800fba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fba2:	4a38      	ldr	r2, [pc, #224]	; (800fc84 <http_find_file+0x188>)
 800fba4:	1898      	adds	r0, r3, r2
 800fba6:	4a38      	ldr	r2, [pc, #224]	; (800fc88 <http_find_file+0x18c>)
 800fba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbaa:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800fbae:	69ba      	ldr	r2, [r7, #24]
 800fbb0:	4619      	mov	r1, r3
 800fbb2:	f00c fb01 	bl	801c1b8 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 800fbb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fbb8:	69bb      	ldr	r3, [r7, #24]
 800fbba:	4413      	add	r3, r2
 800fbbc:	4a31      	ldr	r2, [pc, #196]	; (800fc84 <http_find_file+0x188>)
 800fbbe:	2100      	movs	r1, #0
 800fbc0:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 800fbc2:	4b30      	ldr	r3, [pc, #192]	; (800fc84 <http_find_file+0x188>)
 800fbc4:	633b      	str	r3, [r7, #48]	; 0x30
 800fbc6:	e004      	b.n	800fbd2 <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 800fbc8:	4a2f      	ldr	r2, [pc, #188]	; (800fc88 <http_find_file+0x18c>)
 800fbca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbcc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800fbd0:	633b      	str	r3, [r7, #48]	; 0x30
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	f7ff fc58 	bl	800f48c <fs_open>
 800fbdc:	4603      	mov	r3, r0
 800fbde:	75fb      	strb	r3, [r7, #23]
      if (err == ERR_OK) {
 800fbe0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d104      	bne.n	800fbf2 <http_find_file+0xf6>
        uri = file_name;
 800fbe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbea:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 800fbf0:	e005      	b.n	800fbfe <http_find_file+0x102>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800fbf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbf4:	3301      	adds	r3, #1
 800fbf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fbf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbfa:	2b04      	cmp	r3, #4
 800fbfc:	d9b8      	bls.n	800fb70 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 800fbfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d124      	bne.n	800fc4e <http_find_file+0x152>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 800fc04:	68bb      	ldr	r3, [r7, #8]
 800fc06:	213f      	movs	r1, #63	; 0x3f
 800fc08:	4618      	mov	r0, r3
 800fc0a:	f00c fdc1 	bl	801c790 <strchr>
 800fc0e:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 800fc10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d005      	beq.n	800fc22 <http_find_file+0x126>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 800fc16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc18:	2200      	movs	r2, #0
 800fc1a:	701a      	strb	r2, [r3, #0]
      params++;
 800fc1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc1e:	3301      	adds	r3, #1
 800fc20:	637b      	str	r3, [r7, #52]	; 0x34
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	68ba      	ldr	r2, [r7, #8]
 800fc26:	4611      	mov	r1, r2
 800fc28:	4618      	mov	r0, r3
 800fc2a:	f7ff fc2f 	bl	800f48c <fs_open>
 800fc2e:	4603      	mov	r3, r0
 800fc30:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800fc32:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d102      	bne.n	800fc40 <http_find_file+0x144>
      file = &hs->file_handle;
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	63bb      	str	r3, [r7, #56]	; 0x38
 800fc3e:	e006      	b.n	800fc4e <http_find_file+0x152>
    } else {
      file = http_get_404_file(hs, &uri);
 800fc40:	f107 0308 	add.w	r3, r7, #8
 800fc44:	4619      	mov	r1, r3
 800fc46:	68f8      	ldr	r0, [r7, #12]
 800fc48:	f7ff fe2a 	bl	800f8a0 <http_get_404_file>
 800fc4c:	63b8      	str	r0, [r7, #56]	; 0x38
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 800fc4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d106      	bne.n	800fc62 <http_find_file+0x166>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 800fc54:	f107 0308 	add.w	r3, r7, #8
 800fc58:	4619      	mov	r1, r3
 800fc5a:	68f8      	ldr	r0, [r7, #12]
 800fc5c:	f7ff fe20 	bl	800f8a0 <http_get_404_file>
 800fc60:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 800fc62:	68ba      	ldr	r2, [r7, #8]
 800fc64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc66:	9301      	str	r3, [sp, #4]
 800fc68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fc6c:	9300      	str	r3, [sp, #0]
 800fc6e:	4613      	mov	r3, r2
 800fc70:	687a      	ldr	r2, [r7, #4]
 800fc72:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fc74:	68f8      	ldr	r0, [r7, #12]
 800fc76:	f000 f809 	bl	800fc8c <http_init_file>
 800fc7a:	4603      	mov	r3, r0
}
 800fc7c:	4618      	mov	r0, r3
 800fc7e:	3740      	adds	r7, #64	; 0x40
 800fc80:	46bd      	mov	sp, r7
 800fc82:	bd80      	pop	{r7, pc}
 800fc84:	20004678 	.word	0x20004678
 800fc88:	08022f14 	.word	0x08022f14

0800fc8c <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 800fc8c:	b580      	push	{r7, lr}
 800fc8e:	b086      	sub	sp, #24
 800fc90:	af00      	add	r7, sp, #0
 800fc92:	60f8      	str	r0, [r7, #12]
 800fc94:	60b9      	str	r1, [r7, #8]
 800fc96:	607a      	str	r2, [r7, #4]
 800fc98:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 800fc9a:	68bb      	ldr	r3, [r7, #8]
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d05c      	beq.n	800fd5a <http_init_file+0xce>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 800fca0:	68bb      	ldr	r3, [r7, #8]
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d106      	bne.n	800fcb6 <http_init_file+0x2a>
 800fca8:	4b35      	ldr	r3, [pc, #212]	; (800fd80 <http_init_file+0xf4>)
 800fcaa:	f640 120b 	movw	r2, #2315	; 0x90b
 800fcae:	4935      	ldr	r1, [pc, #212]	; (800fd84 <http_init_file+0xf8>)
 800fcb0:	4835      	ldr	r0, [pc, #212]	; (800fd88 <http_init_file+0xfc>)
 800fcb2:	f00c fd15 	bl	801c6e0 <iprintf>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	68ba      	ldr	r2, [r7, #8]
 800fcba:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 800fcbc:	68bb      	ldr	r3, [r7, #8]
 800fcbe:	681a      	ldr	r2, [r3, #0]
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 800fcc4:	68bb      	ldr	r3, [r7, #8]
 800fcc6:	685b      	ldr	r3, [r3, #4]
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	da06      	bge.n	800fcda <http_init_file+0x4e>
 800fccc:	4b2c      	ldr	r3, [pc, #176]	; (800fd80 <http_init_file+0xf4>)
 800fcce:	f640 1234 	movw	r2, #2356	; 0x934
 800fcd2:	492e      	ldr	r1, [pc, #184]	; (800fd8c <http_init_file+0x100>)
 800fcd4:	482c      	ldr	r0, [pc, #176]	; (800fd88 <http_init_file+0xfc>)
 800fcd6:	f00c fd03 	bl	801c6e0 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 800fcda:	68bb      	ldr	r3, [r7, #8]
 800fcdc:	685b      	ldr	r3, [r3, #4]
 800fcde:	461a      	mov	r2, r3
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	2200      	movs	r2, #0
 800fce8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	695b      	ldr	r3, [r3, #20]
 800fcf0:	7c1b      	ldrb	r3, [r3, #16]
 800fcf2:	f003 0301 	and.w	r3, r3, #1
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d106      	bne.n	800fd08 <http_init_file+0x7c>
 800fcfa:	4b21      	ldr	r3, [pc, #132]	; (800fd80 <http_init_file+0xf4>)
 800fcfc:	f640 1243 	movw	r2, #2371	; 0x943
 800fd00:	4923      	ldr	r1, [pc, #140]	; (800fd90 <http_init_file+0x104>)
 800fd02:	4821      	ldr	r0, [pc, #132]	; (800fd88 <http_init_file+0xfc>)
 800fd04:	f00c fcec 	bl	801c6e0 <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d032      	beq.n	800fd74 <http_init_file+0xe8>
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	695b      	ldr	r3, [r3, #20]
 800fd12:	7c1b      	ldrb	r3, [r3, #16]
 800fd14:	f003 0301 	and.w	r3, r3, #1
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d02b      	beq.n	800fd74 <http_init_file+0xe8>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	6998      	ldr	r0, [r3, #24]
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd24:	461a      	mov	r2, r3
 800fd26:	491b      	ldr	r1, [pc, #108]	; (800fd94 <http_init_file+0x108>)
 800fd28:	f000 f9f8 	bl	801011c <lwip_strnstr>
 800fd2c:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 800fd2e:	697b      	ldr	r3, [r7, #20]
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d01f      	beq.n	800fd74 <http_init_file+0xe8>
        int diff = file_start + 4 - hs->file;
 800fd34:	697b      	ldr	r3, [r7, #20]
 800fd36:	1d1a      	adds	r2, r3, #4
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	699b      	ldr	r3, [r3, #24]
 800fd3c:	1ad3      	subs	r3, r2, r3
 800fd3e:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	699a      	ldr	r2, [r3, #24]
 800fd44:	693b      	ldr	r3, [r7, #16]
 800fd46:	441a      	add	r2, r3
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fd50:	693b      	ldr	r3, [r7, #16]
 800fd52:	1ad2      	subs	r2, r2, r3
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	625a      	str	r2, [r3, #36]	; 0x24
 800fd58:	e00c      	b.n	800fd74 <http_init_file+0xe8>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	2200      	movs	r2, #0
 800fd5e:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	2200      	movs	r2, #0
 800fd64:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	2200      	movs	r2, #0
 800fd6a:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	2200      	movs	r2, #0
 800fd70:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 800fd74:	2300      	movs	r3, #0
}
 800fd76:	4618      	mov	r0, r3
 800fd78:	3718      	adds	r7, #24
 800fd7a:	46bd      	mov	sp, r7
 800fd7c:	bd80      	pop	{r7, pc}
 800fd7e:	bf00      	nop
 800fd80:	0801f3fc 	.word	0x0801f3fc
 800fd84:	0801f4f8 	.word	0x0801f4f8
 800fd88:	0801f444 	.word	0x0801f444
 800fd8c:	0801f50c 	.word	0x0801f50c
 800fd90:	0801f52c 	.word	0x0801f52c
 800fd94:	0801f4f0 	.word	0x0801f4f0

0800fd98 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 800fd98:	b580      	push	{r7, lr}
 800fd9a:	b084      	sub	sp, #16
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	6078      	str	r0, [r7, #4]
 800fda0:	460b      	mov	r3, r1
 800fda2:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d002      	beq.n	800fdb4 <http_err+0x1c>
    http_state_free(hs);
 800fdae:	68f8      	ldr	r0, [r7, #12]
 800fdb0:	f7ff fc02 	bl	800f5b8 <http_state_free>
  }
}
 800fdb4:	bf00      	nop
 800fdb6:	3710      	adds	r7, #16
 800fdb8:	46bd      	mov	sp, r7
 800fdba:	bd80      	pop	{r7, pc}

0800fdbc <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 800fdbc:	b580      	push	{r7, lr}
 800fdbe:	b086      	sub	sp, #24
 800fdc0:	af00      	add	r7, sp, #0
 800fdc2:	60f8      	str	r0, [r7, #12]
 800fdc4:	60b9      	str	r1, [r7, #8]
 800fdc6:	4613      	mov	r3, r2
 800fdc8:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800fdce:	697b      	ldr	r3, [r7, #20]
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d101      	bne.n	800fdd8 <http_sent+0x1c>
    return ERR_OK;
 800fdd4:	2300      	movs	r3, #0
 800fdd6:	e008      	b.n	800fdea <http_sent+0x2e>
  }

  hs->retries = 0;
 800fdd8:	697b      	ldr	r3, [r7, #20]
 800fdda:	2200      	movs	r2, #0
 800fddc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 800fde0:	6979      	ldr	r1, [r7, #20]
 800fde2:	68b8      	ldr	r0, [r7, #8]
 800fde4:	f7ff fd25 	bl	800f832 <http_send>

  return ERR_OK;
 800fde8:	2300      	movs	r3, #0
}
 800fdea:	4618      	mov	r0, r3
 800fdec:	3718      	adds	r7, #24
 800fdee:	46bd      	mov	sp, r7
 800fdf0:	bd80      	pop	{r7, pc}

0800fdf2 <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 800fdf2:	b580      	push	{r7, lr}
 800fdf4:	b084      	sub	sp, #16
 800fdf6:	af00      	add	r7, sp, #0
 800fdf8:	6078      	str	r0, [r7, #4]
 800fdfa:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d107      	bne.n	800fe16 <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800fe06:	2100      	movs	r1, #0
 800fe08:	6838      	ldr	r0, [r7, #0]
 800fe0a:	f7ff fc91 	bl	800f730 <http_close_conn>
 800fe0e:	4603      	mov	r3, r0
 800fe10:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 800fe12:	2300      	movs	r3, #0
 800fe14:	e021      	b.n	800fe5a <http_poll+0x68>
  } else {
    hs->retries++;
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fe1c:	3301      	adds	r3, #1
 800fe1e:	b2da      	uxtb	r2, r3
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fe2c:	2b04      	cmp	r3, #4
 800fe2e:	d105      	bne.n	800fe3c <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 800fe30:	68f9      	ldr	r1, [r7, #12]
 800fe32:	6838      	ldr	r0, [r7, #0]
 800fe34:	f7ff fc7c 	bl	800f730 <http_close_conn>
      return ERR_OK;
 800fe38:	2300      	movs	r3, #0
 800fe3a:	e00e      	b.n	800fe5a <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	695b      	ldr	r3, [r3, #20]
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d009      	beq.n	800fe58 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 800fe44:	68f9      	ldr	r1, [r7, #12]
 800fe46:	6838      	ldr	r0, [r7, #0]
 800fe48:	f7ff fcf3 	bl	800f832 <http_send>
 800fe4c:	4603      	mov	r3, r0
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d002      	beq.n	800fe58 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 800fe52:	6838      	ldr	r0, [r7, #0]
 800fe54:	f007 f8d6 	bl	8017004 <tcp_output>
      }
    }
  }

  return ERR_OK;
 800fe58:	2300      	movs	r3, #0
}
 800fe5a:	4618      	mov	r0, r3
 800fe5c:	3710      	adds	r7, #16
 800fe5e:	46bd      	mov	sp, r7
 800fe60:	bd80      	pop	{r7, pc}
	...

0800fe64 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800fe64:	b580      	push	{r7, lr}
 800fe66:	b086      	sub	sp, #24
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	60f8      	str	r0, [r7, #12]
 800fe6c:	60b9      	str	r1, [r7, #8]
 800fe6e:	607a      	str	r2, [r7, #4]
 800fe70:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800fe76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d105      	bne.n	800fe8a <http_recv+0x26>
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d002      	beq.n	800fe8a <http_recv+0x26>
 800fe84:	697b      	ldr	r3, [r7, #20]
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d111      	bne.n	800feae <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d008      	beq.n	800fea2 <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	891b      	ldrh	r3, [r3, #8]
 800fe94:	4619      	mov	r1, r3
 800fe96:	68b8      	ldr	r0, [r7, #8]
 800fe98:	f002 fca8 	bl	80127ec <tcp_recved>
      pbuf_free(p);
 800fe9c:	6878      	ldr	r0, [r7, #4]
 800fe9e:	f001 fccb 	bl	8011838 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800fea2:	6979      	ldr	r1, [r7, #20]
 800fea4:	68b8      	ldr	r0, [r7, #8]
 800fea6:	f7ff fc43 	bl	800f730 <http_close_conn>
    return ERR_OK;
 800feaa:	2300      	movs	r3, #0
 800feac:	e055      	b.n	800ff5a <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	891b      	ldrh	r3, [r3, #8]
 800feb2:	4619      	mov	r1, r3
 800feb4:	68b8      	ldr	r0, [r7, #8]
 800feb6:	f002 fc99 	bl	80127ec <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800feba:	697b      	ldr	r3, [r7, #20]
 800febc:	695b      	ldr	r3, [r3, #20]
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d147      	bne.n	800ff52 <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 800fec2:	68ba      	ldr	r2, [r7, #8]
 800fec4:	6979      	ldr	r1, [r7, #20]
 800fec6:	6878      	ldr	r0, [r7, #4]
 800fec8:	f7ff fd30 	bl	800f92c <http_parse_request>
 800fecc:	4603      	mov	r3, r0
 800fece:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800fed0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d015      	beq.n	800ff04 <http_recv+0xa0>
 800fed8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fedc:	f113 0f05 	cmn.w	r3, #5
 800fee0:	d010      	beq.n	800ff04 <http_recv+0xa0>
 800fee2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fee6:	f113 0f10 	cmn.w	r3, #16
 800feea:	d00b      	beq.n	800ff04 <http_recv+0xa0>
 800feec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fef0:	f113 0f08 	cmn.w	r3, #8
 800fef4:	d006      	beq.n	800ff04 <http_recv+0xa0>
 800fef6:	4b1b      	ldr	r3, [pc, #108]	; (800ff64 <http_recv+0x100>)
 800fef8:	f640 2204 	movw	r2, #2564	; 0xa04
 800fefc:	491a      	ldr	r1, [pc, #104]	; (800ff68 <http_recv+0x104>)
 800fefe:	481b      	ldr	r0, [pc, #108]	; (800ff6c <http_recv+0x108>)
 800ff00:	f00c fbee 	bl	801c6e0 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 800ff04:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ff08:	f113 0f05 	cmn.w	r3, #5
 800ff0c:	d00b      	beq.n	800ff26 <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 800ff0e:	697b      	ldr	r3, [r7, #20]
 800ff10:	6a1b      	ldr	r3, [r3, #32]
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d007      	beq.n	800ff26 <http_recv+0xc2>
          pbuf_free(hs->req);
 800ff16:	697b      	ldr	r3, [r7, #20]
 800ff18:	6a1b      	ldr	r3, [r3, #32]
 800ff1a:	4618      	mov	r0, r3
 800ff1c:	f001 fc8c 	bl	8011838 <pbuf_free>
          hs->req = NULL;
 800ff20:	697b      	ldr	r3, [r7, #20]
 800ff22:	2200      	movs	r2, #0
 800ff24:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800ff26:	6878      	ldr	r0, [r7, #4]
 800ff28:	f001 fc86 	bl	8011838 <pbuf_free>
      if (parsed == ERR_OK) {
 800ff2c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d104      	bne.n	800ff3e <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 800ff34:	6979      	ldr	r1, [r7, #20]
 800ff36:	68b8      	ldr	r0, [r7, #8]
 800ff38:	f7ff fc7b 	bl	800f832 <http_send>
 800ff3c:	e00c      	b.n	800ff58 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 800ff3e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ff42:	f113 0f10 	cmn.w	r3, #16
 800ff46:	d107      	bne.n	800ff58 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 800ff48:	6979      	ldr	r1, [r7, #20]
 800ff4a:	68b8      	ldr	r0, [r7, #8]
 800ff4c:	f7ff fbf0 	bl	800f730 <http_close_conn>
 800ff50:	e002      	b.n	800ff58 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 800ff52:	6878      	ldr	r0, [r7, #4]
 800ff54:	f001 fc70 	bl	8011838 <pbuf_free>
    }
  }
  return ERR_OK;
 800ff58:	2300      	movs	r3, #0
}
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	3718      	adds	r7, #24
 800ff5e:	46bd      	mov	sp, r7
 800ff60:	bd80      	pop	{r7, pc}
 800ff62:	bf00      	nop
 800ff64:	0801f3fc 	.word	0x0801f3fc
 800ff68:	0801f558 	.word	0x0801f558
 800ff6c:	0801f444 	.word	0x0801f444

0800ff70 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 800ff70:	b580      	push	{r7, lr}
 800ff72:	b086      	sub	sp, #24
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	60f8      	str	r0, [r7, #12]
 800ff78:	60b9      	str	r1, [r7, #8]
 800ff7a:	4613      	mov	r3, r2
 800ff7c:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800ff7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d102      	bne.n	800ff8c <http_accept+0x1c>
 800ff86:	68bb      	ldr	r3, [r7, #8]
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d102      	bne.n	800ff92 <http_accept+0x22>
    return ERR_VAL;
 800ff8c:	f06f 0305 	mvn.w	r3, #5
 800ff90:	e025      	b.n	800ffde <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800ff92:	2101      	movs	r1, #1
 800ff94:	68b8      	ldr	r0, [r7, #8]
 800ff96:	f003 f90d 	bl	80131b4 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800ff9a:	f7ff fadb 	bl	800f554 <http_state_alloc>
 800ff9e:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 800ffa0:	697b      	ldr	r3, [r7, #20]
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d102      	bne.n	800ffac <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 800ffa6:	f04f 33ff 	mov.w	r3, #4294967295
 800ffaa:	e018      	b.n	800ffde <http_accept+0x6e>
  }
  hs->pcb = pcb;
 800ffac:	697b      	ldr	r3, [r7, #20]
 800ffae:	68ba      	ldr	r2, [r7, #8]
 800ffb0:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 800ffb2:	6979      	ldr	r1, [r7, #20]
 800ffb4:	68b8      	ldr	r0, [r7, #8]
 800ffb6:	f003 fafd 	bl	80135b4 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 800ffba:	490b      	ldr	r1, [pc, #44]	; (800ffe8 <http_accept+0x78>)
 800ffbc:	68b8      	ldr	r0, [r7, #8]
 800ffbe:	f003 fb0b 	bl	80135d8 <tcp_recv>
  altcp_err(pcb, http_err);
 800ffc2:	490a      	ldr	r1, [pc, #40]	; (800ffec <http_accept+0x7c>)
 800ffc4:	68b8      	ldr	r0, [r7, #8]
 800ffc6:	f003 fb4b 	bl	8013660 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800ffca:	2204      	movs	r2, #4
 800ffcc:	4908      	ldr	r1, [pc, #32]	; (800fff0 <http_accept+0x80>)
 800ffce:	68b8      	ldr	r0, [r7, #8]
 800ffd0:	f003 fb80 	bl	80136d4 <tcp_poll>
  altcp_sent(pcb, http_sent);
 800ffd4:	4907      	ldr	r1, [pc, #28]	; (800fff4 <http_accept+0x84>)
 800ffd6:	68b8      	ldr	r0, [r7, #8]
 800ffd8:	f003 fb20 	bl	801361c <tcp_sent>

  return ERR_OK;
 800ffdc:	2300      	movs	r3, #0
}
 800ffde:	4618      	mov	r0, r3
 800ffe0:	3718      	adds	r7, #24
 800ffe2:	46bd      	mov	sp, r7
 800ffe4:	bd80      	pop	{r7, pc}
 800ffe6:	bf00      	nop
 800ffe8:	0800fe65 	.word	0x0800fe65
 800ffec:	0800fd99 	.word	0x0800fd99
 800fff0:	0800fdf3 	.word	0x0800fdf3
 800fff4:	0800fdbd 	.word	0x0800fdbd

0800fff8 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 800fff8:	b580      	push	{r7, lr}
 800fffa:	b084      	sub	sp, #16
 800fffc:	af00      	add	r7, sp, #0
 800fffe:	6078      	str	r0, [r7, #4]
 8010000:	460b      	mov	r3, r1
 8010002:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	2b00      	cmp	r3, #0
 8010008:	d029      	beq.n	801005e <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 801000a:	2101      	movs	r1, #1
 801000c:	6878      	ldr	r0, [r7, #4]
 801000e:	f003 f8d1 	bl	80131b4 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 8010012:	887b      	ldrh	r3, [r7, #2]
 8010014:	461a      	mov	r2, r3
 8010016:	4914      	ldr	r1, [pc, #80]	; (8010068 <httpd_init_pcb+0x70>)
 8010018:	6878      	ldr	r0, [r7, #4]
 801001a:	f002 fa19 	bl	8012450 <tcp_bind>
 801001e:	4603      	mov	r3, r0
 8010020:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 8010022:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010026:	2b00      	cmp	r3, #0
 8010028:	d006      	beq.n	8010038 <httpd_init_pcb+0x40>
 801002a:	4b10      	ldr	r3, [pc, #64]	; (801006c <httpd_init_pcb+0x74>)
 801002c:	f640 2257 	movw	r2, #2647	; 0xa57
 8010030:	490f      	ldr	r1, [pc, #60]	; (8010070 <httpd_init_pcb+0x78>)
 8010032:	4810      	ldr	r0, [pc, #64]	; (8010074 <httpd_init_pcb+0x7c>)
 8010034:	f00c fb54 	bl	801c6e0 <iprintf>
    pcb = altcp_listen(pcb);
 8010038:	21ff      	movs	r1, #255	; 0xff
 801003a:	6878      	ldr	r0, [r7, #4]
 801003c:	f002 fac0 	bl	80125c0 <tcp_listen_with_backlog>
 8010040:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	2b00      	cmp	r3, #0
 8010046:	d106      	bne.n	8010056 <httpd_init_pcb+0x5e>
 8010048:	4b08      	ldr	r3, [pc, #32]	; (801006c <httpd_init_pcb+0x74>)
 801004a:	f640 2259 	movw	r2, #2649	; 0xa59
 801004e:	490a      	ldr	r1, [pc, #40]	; (8010078 <httpd_init_pcb+0x80>)
 8010050:	4808      	ldr	r0, [pc, #32]	; (8010074 <httpd_init_pcb+0x7c>)
 8010052:	f00c fb45 	bl	801c6e0 <iprintf>
    altcp_accept(pcb, http_accept);
 8010056:	4909      	ldr	r1, [pc, #36]	; (801007c <httpd_init_pcb+0x84>)
 8010058:	6878      	ldr	r0, [r7, #4]
 801005a:	f003 fb23 	bl	80136a4 <tcp_accept>
  }
}
 801005e:	bf00      	nop
 8010060:	3710      	adds	r7, #16
 8010062:	46bd      	mov	sp, r7
 8010064:	bd80      	pop	{r7, pc}
 8010066:	bf00      	nop
 8010068:	0802304c 	.word	0x0802304c
 801006c:	0801f3fc 	.word	0x0801f3fc
 8010070:	0801f584 	.word	0x0801f584
 8010074:	0801f444 	.word	0x0801f444
 8010078:	0801f5a0 	.word	0x0801f5a0
 801007c:	0800ff71 	.word	0x0800ff71

08010080 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 8010080:	b580      	push	{r7, lr}
 8010082:	b082      	sub	sp, #8
 8010084:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 8010086:	202e      	movs	r0, #46	; 0x2e
 8010088:	f003 fa86 	bl	8013598 <tcp_new_ip_type>
 801008c:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	2b00      	cmp	r3, #0
 8010092:	d106      	bne.n	80100a2 <httpd_init+0x22>
 8010094:	4b07      	ldr	r3, [pc, #28]	; (80100b4 <httpd_init+0x34>)
 8010096:	f640 2272 	movw	r2, #2674	; 0xa72
 801009a:	4907      	ldr	r1, [pc, #28]	; (80100b8 <httpd_init+0x38>)
 801009c:	4807      	ldr	r0, [pc, #28]	; (80100bc <httpd_init+0x3c>)
 801009e:	f00c fb1f 	bl	801c6e0 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 80100a2:	2150      	movs	r1, #80	; 0x50
 80100a4:	6878      	ldr	r0, [r7, #4]
 80100a6:	f7ff ffa7 	bl	800fff8 <httpd_init_pcb>
}
 80100aa:	bf00      	nop
 80100ac:	3708      	adds	r7, #8
 80100ae:	46bd      	mov	sp, r7
 80100b0:	bd80      	pop	{r7, pc}
 80100b2:	bf00      	nop
 80100b4:	0801f3fc 	.word	0x0801f3fc
 80100b8:	0801f5c0 	.word	0x0801f5c0
 80100bc:	0801f444 	.word	0x0801f444

080100c0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80100c0:	b480      	push	{r7}
 80100c2:	b083      	sub	sp, #12
 80100c4:	af00      	add	r7, sp, #0
 80100c6:	4603      	mov	r3, r0
 80100c8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80100ca:	88fb      	ldrh	r3, [r7, #6]
 80100cc:	021b      	lsls	r3, r3, #8
 80100ce:	b21a      	sxth	r2, r3
 80100d0:	88fb      	ldrh	r3, [r7, #6]
 80100d2:	0a1b      	lsrs	r3, r3, #8
 80100d4:	b29b      	uxth	r3, r3
 80100d6:	b21b      	sxth	r3, r3
 80100d8:	4313      	orrs	r3, r2
 80100da:	b21b      	sxth	r3, r3
 80100dc:	b29b      	uxth	r3, r3
}
 80100de:	4618      	mov	r0, r3
 80100e0:	370c      	adds	r7, #12
 80100e2:	46bd      	mov	sp, r7
 80100e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e8:	4770      	bx	lr

080100ea <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80100ea:	b480      	push	{r7}
 80100ec:	b083      	sub	sp, #12
 80100ee:	af00      	add	r7, sp, #0
 80100f0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	061a      	lsls	r2, r3, #24
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	021b      	lsls	r3, r3, #8
 80100fa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80100fe:	431a      	orrs	r2, r3
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	0a1b      	lsrs	r3, r3, #8
 8010104:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8010108:	431a      	orrs	r2, r3
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	0e1b      	lsrs	r3, r3, #24
 801010e:	4313      	orrs	r3, r2
}
 8010110:	4618      	mov	r0, r3
 8010112:	370c      	adds	r7, #12
 8010114:	46bd      	mov	sp, r7
 8010116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801011a:	4770      	bx	lr

0801011c <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 801011c:	b580      	push	{r7, lr}
 801011e:	b086      	sub	sp, #24
 8010120:	af00      	add	r7, sp, #0
 8010122:	60f8      	str	r0, [r7, #12]
 8010124:	60b9      	str	r1, [r7, #8]
 8010126:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 8010128:	68b8      	ldr	r0, [r7, #8]
 801012a:	f7f0 f85b 	bl	80001e4 <strlen>
 801012e:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 8010130:	693b      	ldr	r3, [r7, #16]
 8010132:	2b00      	cmp	r3, #0
 8010134:	d101      	bne.n	801013a <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	e022      	b.n	8010180 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	617b      	str	r3, [r7, #20]
 801013e:	e012      	b.n	8010166 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8010140:	697b      	ldr	r3, [r7, #20]
 8010142:	781a      	ldrb	r2, [r3, #0]
 8010144:	68bb      	ldr	r3, [r7, #8]
 8010146:	781b      	ldrb	r3, [r3, #0]
 8010148:	429a      	cmp	r2, r3
 801014a:	d109      	bne.n	8010160 <lwip_strnstr+0x44>
 801014c:	693a      	ldr	r2, [r7, #16]
 801014e:	68b9      	ldr	r1, [r7, #8]
 8010150:	6978      	ldr	r0, [r7, #20]
 8010152:	f00c fb2a 	bl	801c7aa <strncmp>
 8010156:	4603      	mov	r3, r0
 8010158:	2b00      	cmp	r3, #0
 801015a:	d101      	bne.n	8010160 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 801015c:	697b      	ldr	r3, [r7, #20]
 801015e:	e00f      	b.n	8010180 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8010160:	697b      	ldr	r3, [r7, #20]
 8010162:	3301      	adds	r3, #1
 8010164:	617b      	str	r3, [r7, #20]
 8010166:	697b      	ldr	r3, [r7, #20]
 8010168:	781b      	ldrb	r3, [r3, #0]
 801016a:	2b00      	cmp	r3, #0
 801016c:	d007      	beq.n	801017e <lwip_strnstr+0x62>
 801016e:	697a      	ldr	r2, [r7, #20]
 8010170:	693b      	ldr	r3, [r7, #16]
 8010172:	441a      	add	r2, r3
 8010174:	68f9      	ldr	r1, [r7, #12]
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	440b      	add	r3, r1
 801017a:	429a      	cmp	r2, r3
 801017c:	d9e0      	bls.n	8010140 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 801017e:	2300      	movs	r3, #0
}
 8010180:	4618      	mov	r0, r3
 8010182:	3718      	adds	r7, #24
 8010184:	46bd      	mov	sp, r7
 8010186:	bd80      	pop	{r7, pc}

08010188 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8010188:	b580      	push	{r7, lr}
 801018a:	b082      	sub	sp, #8
 801018c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 801018e:	2300      	movs	r3, #0
 8010190:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8010192:	f00b fa53 	bl	801b63c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8010196:	f000 f8d5 	bl	8010344 <mem_init>
  memp_init();
 801019a:	f000 fc31 	bl	8010a00 <memp_init>
  pbuf_init();
  netif_init();
 801019e:	f000 fcf7 	bl	8010b90 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80101a2:	f008 f81f 	bl	80181e4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80101a6:	f001 fdf1 	bl	8011d8c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80101aa:	f007 ff61 	bl	8018070 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80101ae:	bf00      	nop
 80101b0:	3708      	adds	r7, #8
 80101b2:	46bd      	mov	sp, r7
 80101b4:	bd80      	pop	{r7, pc}
	...

080101b8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80101b8:	b480      	push	{r7}
 80101ba:	b083      	sub	sp, #12
 80101bc:	af00      	add	r7, sp, #0
 80101be:	4603      	mov	r3, r0
 80101c0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80101c2:	4b05      	ldr	r3, [pc, #20]	; (80101d8 <ptr_to_mem+0x20>)
 80101c4:	681a      	ldr	r2, [r3, #0]
 80101c6:	88fb      	ldrh	r3, [r7, #6]
 80101c8:	4413      	add	r3, r2
}
 80101ca:	4618      	mov	r0, r3
 80101cc:	370c      	adds	r7, #12
 80101ce:	46bd      	mov	sp, r7
 80101d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d4:	4770      	bx	lr
 80101d6:	bf00      	nop
 80101d8:	200046b8 	.word	0x200046b8

080101dc <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80101dc:	b480      	push	{r7}
 80101de:	b083      	sub	sp, #12
 80101e0:	af00      	add	r7, sp, #0
 80101e2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80101e4:	4b05      	ldr	r3, [pc, #20]	; (80101fc <mem_to_ptr+0x20>)
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	687a      	ldr	r2, [r7, #4]
 80101ea:	1ad3      	subs	r3, r2, r3
 80101ec:	b29b      	uxth	r3, r3
}
 80101ee:	4618      	mov	r0, r3
 80101f0:	370c      	adds	r7, #12
 80101f2:	46bd      	mov	sp, r7
 80101f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101f8:	4770      	bx	lr
 80101fa:	bf00      	nop
 80101fc:	200046b8 	.word	0x200046b8

08010200 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8010200:	b590      	push	{r4, r7, lr}
 8010202:	b085      	sub	sp, #20
 8010204:	af00      	add	r7, sp, #0
 8010206:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8010208:	4b45      	ldr	r3, [pc, #276]	; (8010320 <plug_holes+0x120>)
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	687a      	ldr	r2, [r7, #4]
 801020e:	429a      	cmp	r2, r3
 8010210:	d206      	bcs.n	8010220 <plug_holes+0x20>
 8010212:	4b44      	ldr	r3, [pc, #272]	; (8010324 <plug_holes+0x124>)
 8010214:	f240 12df 	movw	r2, #479	; 0x1df
 8010218:	4943      	ldr	r1, [pc, #268]	; (8010328 <plug_holes+0x128>)
 801021a:	4844      	ldr	r0, [pc, #272]	; (801032c <plug_holes+0x12c>)
 801021c:	f00c fa60 	bl	801c6e0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8010220:	4b43      	ldr	r3, [pc, #268]	; (8010330 <plug_holes+0x130>)
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	687a      	ldr	r2, [r7, #4]
 8010226:	429a      	cmp	r2, r3
 8010228:	d306      	bcc.n	8010238 <plug_holes+0x38>
 801022a:	4b3e      	ldr	r3, [pc, #248]	; (8010324 <plug_holes+0x124>)
 801022c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8010230:	4940      	ldr	r1, [pc, #256]	; (8010334 <plug_holes+0x134>)
 8010232:	483e      	ldr	r0, [pc, #248]	; (801032c <plug_holes+0x12c>)
 8010234:	f00c fa54 	bl	801c6e0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	791b      	ldrb	r3, [r3, #4]
 801023c:	2b00      	cmp	r3, #0
 801023e:	d006      	beq.n	801024e <plug_holes+0x4e>
 8010240:	4b38      	ldr	r3, [pc, #224]	; (8010324 <plug_holes+0x124>)
 8010242:	f240 12e1 	movw	r2, #481	; 0x1e1
 8010246:	493c      	ldr	r1, [pc, #240]	; (8010338 <plug_holes+0x138>)
 8010248:	4838      	ldr	r0, [pc, #224]	; (801032c <plug_holes+0x12c>)
 801024a:	f00c fa49 	bl	801c6e0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	881b      	ldrh	r3, [r3, #0]
 8010252:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010256:	d906      	bls.n	8010266 <plug_holes+0x66>
 8010258:	4b32      	ldr	r3, [pc, #200]	; (8010324 <plug_holes+0x124>)
 801025a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 801025e:	4937      	ldr	r1, [pc, #220]	; (801033c <plug_holes+0x13c>)
 8010260:	4832      	ldr	r0, [pc, #200]	; (801032c <plug_holes+0x12c>)
 8010262:	f00c fa3d 	bl	801c6e0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	881b      	ldrh	r3, [r3, #0]
 801026a:	4618      	mov	r0, r3
 801026c:	f7ff ffa4 	bl	80101b8 <ptr_to_mem>
 8010270:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8010272:	687a      	ldr	r2, [r7, #4]
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	429a      	cmp	r2, r3
 8010278:	d024      	beq.n	80102c4 <plug_holes+0xc4>
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	791b      	ldrb	r3, [r3, #4]
 801027e:	2b00      	cmp	r3, #0
 8010280:	d120      	bne.n	80102c4 <plug_holes+0xc4>
 8010282:	4b2b      	ldr	r3, [pc, #172]	; (8010330 <plug_holes+0x130>)
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	68fa      	ldr	r2, [r7, #12]
 8010288:	429a      	cmp	r2, r3
 801028a:	d01b      	beq.n	80102c4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 801028c:	4b2c      	ldr	r3, [pc, #176]	; (8010340 <plug_holes+0x140>)
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	68fa      	ldr	r2, [r7, #12]
 8010292:	429a      	cmp	r2, r3
 8010294:	d102      	bne.n	801029c <plug_holes+0x9c>
      lfree = mem;
 8010296:	4a2a      	ldr	r2, [pc, #168]	; (8010340 <plug_holes+0x140>)
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	881a      	ldrh	r2, [r3, #0]
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	881b      	ldrh	r3, [r3, #0]
 80102a8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80102ac:	d00a      	beq.n	80102c4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	881b      	ldrh	r3, [r3, #0]
 80102b2:	4618      	mov	r0, r3
 80102b4:	f7ff ff80 	bl	80101b8 <ptr_to_mem>
 80102b8:	4604      	mov	r4, r0
 80102ba:	6878      	ldr	r0, [r7, #4]
 80102bc:	f7ff ff8e 	bl	80101dc <mem_to_ptr>
 80102c0:	4603      	mov	r3, r0
 80102c2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	885b      	ldrh	r3, [r3, #2]
 80102c8:	4618      	mov	r0, r3
 80102ca:	f7ff ff75 	bl	80101b8 <ptr_to_mem>
 80102ce:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80102d0:	68ba      	ldr	r2, [r7, #8]
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	429a      	cmp	r2, r3
 80102d6:	d01f      	beq.n	8010318 <plug_holes+0x118>
 80102d8:	68bb      	ldr	r3, [r7, #8]
 80102da:	791b      	ldrb	r3, [r3, #4]
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d11b      	bne.n	8010318 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80102e0:	4b17      	ldr	r3, [pc, #92]	; (8010340 <plug_holes+0x140>)
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	687a      	ldr	r2, [r7, #4]
 80102e6:	429a      	cmp	r2, r3
 80102e8:	d102      	bne.n	80102f0 <plug_holes+0xf0>
      lfree = pmem;
 80102ea:	4a15      	ldr	r2, [pc, #84]	; (8010340 <plug_holes+0x140>)
 80102ec:	68bb      	ldr	r3, [r7, #8]
 80102ee:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	881a      	ldrh	r2, [r3, #0]
 80102f4:	68bb      	ldr	r3, [r7, #8]
 80102f6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	881b      	ldrh	r3, [r3, #0]
 80102fc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010300:	d00a      	beq.n	8010318 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	881b      	ldrh	r3, [r3, #0]
 8010306:	4618      	mov	r0, r3
 8010308:	f7ff ff56 	bl	80101b8 <ptr_to_mem>
 801030c:	4604      	mov	r4, r0
 801030e:	68b8      	ldr	r0, [r7, #8]
 8010310:	f7ff ff64 	bl	80101dc <mem_to_ptr>
 8010314:	4603      	mov	r3, r0
 8010316:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8010318:	bf00      	nop
 801031a:	3714      	adds	r7, #20
 801031c:	46bd      	mov	sp, r7
 801031e:	bd90      	pop	{r4, r7, pc}
 8010320:	200046b8 	.word	0x200046b8
 8010324:	0801f5dc 	.word	0x0801f5dc
 8010328:	0801f60c 	.word	0x0801f60c
 801032c:	0801f624 	.word	0x0801f624
 8010330:	200046bc 	.word	0x200046bc
 8010334:	0801f64c 	.word	0x0801f64c
 8010338:	0801f668 	.word	0x0801f668
 801033c:	0801f684 	.word	0x0801f684
 8010340:	200046c4 	.word	0x200046c4

08010344 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8010344:	b580      	push	{r7, lr}
 8010346:	b082      	sub	sp, #8
 8010348:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801034a:	4b1f      	ldr	r3, [pc, #124]	; (80103c8 <mem_init+0x84>)
 801034c:	3303      	adds	r3, #3
 801034e:	f023 0303 	bic.w	r3, r3, #3
 8010352:	461a      	mov	r2, r3
 8010354:	4b1d      	ldr	r3, [pc, #116]	; (80103cc <mem_init+0x88>)
 8010356:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8010358:	4b1c      	ldr	r3, [pc, #112]	; (80103cc <mem_init+0x88>)
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8010364:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	2200      	movs	r2, #0
 801036a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	2200      	movs	r2, #0
 8010370:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8010372:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8010376:	f7ff ff1f 	bl	80101b8 <ptr_to_mem>
 801037a:	4603      	mov	r3, r0
 801037c:	4a14      	ldr	r2, [pc, #80]	; (80103d0 <mem_init+0x8c>)
 801037e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8010380:	4b13      	ldr	r3, [pc, #76]	; (80103d0 <mem_init+0x8c>)
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	2201      	movs	r2, #1
 8010386:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8010388:	4b11      	ldr	r3, [pc, #68]	; (80103d0 <mem_init+0x8c>)
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8010390:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8010392:	4b0f      	ldr	r3, [pc, #60]	; (80103d0 <mem_init+0x8c>)
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801039a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 801039c:	4b0b      	ldr	r3, [pc, #44]	; (80103cc <mem_init+0x88>)
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	4a0c      	ldr	r2, [pc, #48]	; (80103d4 <mem_init+0x90>)
 80103a2:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80103a4:	480c      	ldr	r0, [pc, #48]	; (80103d8 <mem_init+0x94>)
 80103a6:	f00b f957 	bl	801b658 <sys_mutex_new>
 80103aa:	4603      	mov	r3, r0
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d006      	beq.n	80103be <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80103b0:	4b0a      	ldr	r3, [pc, #40]	; (80103dc <mem_init+0x98>)
 80103b2:	f240 221f 	movw	r2, #543	; 0x21f
 80103b6:	490a      	ldr	r1, [pc, #40]	; (80103e0 <mem_init+0x9c>)
 80103b8:	480a      	ldr	r0, [pc, #40]	; (80103e4 <mem_init+0xa0>)
 80103ba:	f00c f991 	bl	801c6e0 <iprintf>
  }
}
 80103be:	bf00      	nop
 80103c0:	3708      	adds	r7, #8
 80103c2:	46bd      	mov	sp, r7
 80103c4:	bd80      	pop	{r7, pc}
 80103c6:	bf00      	nop
 80103c8:	20007f20 	.word	0x20007f20
 80103cc:	200046b8 	.word	0x200046b8
 80103d0:	200046bc 	.word	0x200046bc
 80103d4:	200046c4 	.word	0x200046c4
 80103d8:	200046c0 	.word	0x200046c0
 80103dc:	0801f5dc 	.word	0x0801f5dc
 80103e0:	0801f6b0 	.word	0x0801f6b0
 80103e4:	0801f624 	.word	0x0801f624

080103e8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80103e8:	b580      	push	{r7, lr}
 80103ea:	b086      	sub	sp, #24
 80103ec:	af00      	add	r7, sp, #0
 80103ee:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80103f0:	6878      	ldr	r0, [r7, #4]
 80103f2:	f7ff fef3 	bl	80101dc <mem_to_ptr>
 80103f6:	4603      	mov	r3, r0
 80103f8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	881b      	ldrh	r3, [r3, #0]
 80103fe:	4618      	mov	r0, r3
 8010400:	f7ff feda 	bl	80101b8 <ptr_to_mem>
 8010404:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	885b      	ldrh	r3, [r3, #2]
 801040a:	4618      	mov	r0, r3
 801040c:	f7ff fed4 	bl	80101b8 <ptr_to_mem>
 8010410:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	881b      	ldrh	r3, [r3, #0]
 8010416:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801041a:	d818      	bhi.n	801044e <mem_link_valid+0x66>
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	885b      	ldrh	r3, [r3, #2]
 8010420:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010424:	d813      	bhi.n	801044e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801042a:	8afa      	ldrh	r2, [r7, #22]
 801042c:	429a      	cmp	r2, r3
 801042e:	d004      	beq.n	801043a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	881b      	ldrh	r3, [r3, #0]
 8010434:	8afa      	ldrh	r2, [r7, #22]
 8010436:	429a      	cmp	r2, r3
 8010438:	d109      	bne.n	801044e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801043a:	4b08      	ldr	r3, [pc, #32]	; (801045c <mem_link_valid+0x74>)
 801043c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801043e:	693a      	ldr	r2, [r7, #16]
 8010440:	429a      	cmp	r2, r3
 8010442:	d006      	beq.n	8010452 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8010444:	693b      	ldr	r3, [r7, #16]
 8010446:	885b      	ldrh	r3, [r3, #2]
 8010448:	8afa      	ldrh	r2, [r7, #22]
 801044a:	429a      	cmp	r2, r3
 801044c:	d001      	beq.n	8010452 <mem_link_valid+0x6a>
    return 0;
 801044e:	2300      	movs	r3, #0
 8010450:	e000      	b.n	8010454 <mem_link_valid+0x6c>
  }
  return 1;
 8010452:	2301      	movs	r3, #1
}
 8010454:	4618      	mov	r0, r3
 8010456:	3718      	adds	r7, #24
 8010458:	46bd      	mov	sp, r7
 801045a:	bd80      	pop	{r7, pc}
 801045c:	200046bc 	.word	0x200046bc

08010460 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8010460:	b580      	push	{r7, lr}
 8010462:	b088      	sub	sp, #32
 8010464:	af00      	add	r7, sp, #0
 8010466:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	2b00      	cmp	r3, #0
 801046c:	d070      	beq.n	8010550 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	f003 0303 	and.w	r3, r3, #3
 8010474:	2b00      	cmp	r3, #0
 8010476:	d00d      	beq.n	8010494 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8010478:	4b37      	ldr	r3, [pc, #220]	; (8010558 <mem_free+0xf8>)
 801047a:	f240 2273 	movw	r2, #627	; 0x273
 801047e:	4937      	ldr	r1, [pc, #220]	; (801055c <mem_free+0xfc>)
 8010480:	4837      	ldr	r0, [pc, #220]	; (8010560 <mem_free+0x100>)
 8010482:	f00c f92d 	bl	801c6e0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010486:	f00b f945 	bl	801b714 <sys_arch_protect>
 801048a:	60f8      	str	r0, [r7, #12]
 801048c:	68f8      	ldr	r0, [r7, #12]
 801048e:	f00b f94f 	bl	801b730 <sys_arch_unprotect>
    return;
 8010492:	e05e      	b.n	8010552 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	3b08      	subs	r3, #8
 8010498:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 801049a:	4b32      	ldr	r3, [pc, #200]	; (8010564 <mem_free+0x104>)
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	69fa      	ldr	r2, [r7, #28]
 80104a0:	429a      	cmp	r2, r3
 80104a2:	d306      	bcc.n	80104b2 <mem_free+0x52>
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	f103 020c 	add.w	r2, r3, #12
 80104aa:	4b2f      	ldr	r3, [pc, #188]	; (8010568 <mem_free+0x108>)
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	429a      	cmp	r2, r3
 80104b0:	d90d      	bls.n	80104ce <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80104b2:	4b29      	ldr	r3, [pc, #164]	; (8010558 <mem_free+0xf8>)
 80104b4:	f240 227f 	movw	r2, #639	; 0x27f
 80104b8:	492c      	ldr	r1, [pc, #176]	; (801056c <mem_free+0x10c>)
 80104ba:	4829      	ldr	r0, [pc, #164]	; (8010560 <mem_free+0x100>)
 80104bc:	f00c f910 	bl	801c6e0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80104c0:	f00b f928 	bl	801b714 <sys_arch_protect>
 80104c4:	6138      	str	r0, [r7, #16]
 80104c6:	6938      	ldr	r0, [r7, #16]
 80104c8:	f00b f932 	bl	801b730 <sys_arch_unprotect>
    return;
 80104cc:	e041      	b.n	8010552 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80104ce:	4828      	ldr	r0, [pc, #160]	; (8010570 <mem_free+0x110>)
 80104d0:	f00b f8de 	bl	801b690 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 80104d4:	69fb      	ldr	r3, [r7, #28]
 80104d6:	791b      	ldrb	r3, [r3, #4]
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d110      	bne.n	80104fe <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80104dc:	4b1e      	ldr	r3, [pc, #120]	; (8010558 <mem_free+0xf8>)
 80104de:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80104e2:	4924      	ldr	r1, [pc, #144]	; (8010574 <mem_free+0x114>)
 80104e4:	481e      	ldr	r0, [pc, #120]	; (8010560 <mem_free+0x100>)
 80104e6:	f00c f8fb 	bl	801c6e0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80104ea:	4821      	ldr	r0, [pc, #132]	; (8010570 <mem_free+0x110>)
 80104ec:	f00b f8df 	bl	801b6ae <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80104f0:	f00b f910 	bl	801b714 <sys_arch_protect>
 80104f4:	6178      	str	r0, [r7, #20]
 80104f6:	6978      	ldr	r0, [r7, #20]
 80104f8:	f00b f91a 	bl	801b730 <sys_arch_unprotect>
    return;
 80104fc:	e029      	b.n	8010552 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 80104fe:	69f8      	ldr	r0, [r7, #28]
 8010500:	f7ff ff72 	bl	80103e8 <mem_link_valid>
 8010504:	4603      	mov	r3, r0
 8010506:	2b00      	cmp	r3, #0
 8010508:	d110      	bne.n	801052c <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 801050a:	4b13      	ldr	r3, [pc, #76]	; (8010558 <mem_free+0xf8>)
 801050c:	f240 2295 	movw	r2, #661	; 0x295
 8010510:	4919      	ldr	r1, [pc, #100]	; (8010578 <mem_free+0x118>)
 8010512:	4813      	ldr	r0, [pc, #76]	; (8010560 <mem_free+0x100>)
 8010514:	f00c f8e4 	bl	801c6e0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8010518:	4815      	ldr	r0, [pc, #84]	; (8010570 <mem_free+0x110>)
 801051a:	f00b f8c8 	bl	801b6ae <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801051e:	f00b f8f9 	bl	801b714 <sys_arch_protect>
 8010522:	61b8      	str	r0, [r7, #24]
 8010524:	69b8      	ldr	r0, [r7, #24]
 8010526:	f00b f903 	bl	801b730 <sys_arch_unprotect>
    return;
 801052a:	e012      	b.n	8010552 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 801052c:	69fb      	ldr	r3, [r7, #28]
 801052e:	2200      	movs	r2, #0
 8010530:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8010532:	4b12      	ldr	r3, [pc, #72]	; (801057c <mem_free+0x11c>)
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	69fa      	ldr	r2, [r7, #28]
 8010538:	429a      	cmp	r2, r3
 801053a:	d202      	bcs.n	8010542 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 801053c:	4a0f      	ldr	r2, [pc, #60]	; (801057c <mem_free+0x11c>)
 801053e:	69fb      	ldr	r3, [r7, #28]
 8010540:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8010542:	69f8      	ldr	r0, [r7, #28]
 8010544:	f7ff fe5c 	bl	8010200 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8010548:	4809      	ldr	r0, [pc, #36]	; (8010570 <mem_free+0x110>)
 801054a:	f00b f8b0 	bl	801b6ae <sys_mutex_unlock>
 801054e:	e000      	b.n	8010552 <mem_free+0xf2>
    return;
 8010550:	bf00      	nop
}
 8010552:	3720      	adds	r7, #32
 8010554:	46bd      	mov	sp, r7
 8010556:	bd80      	pop	{r7, pc}
 8010558:	0801f5dc 	.word	0x0801f5dc
 801055c:	0801f6cc 	.word	0x0801f6cc
 8010560:	0801f624 	.word	0x0801f624
 8010564:	200046b8 	.word	0x200046b8
 8010568:	200046bc 	.word	0x200046bc
 801056c:	0801f6f0 	.word	0x0801f6f0
 8010570:	200046c0 	.word	0x200046c0
 8010574:	0801f70c 	.word	0x0801f70c
 8010578:	0801f734 	.word	0x0801f734
 801057c:	200046c4 	.word	0x200046c4

08010580 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8010580:	b580      	push	{r7, lr}
 8010582:	b088      	sub	sp, #32
 8010584:	af00      	add	r7, sp, #0
 8010586:	6078      	str	r0, [r7, #4]
 8010588:	460b      	mov	r3, r1
 801058a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 801058c:	887b      	ldrh	r3, [r7, #2]
 801058e:	3303      	adds	r3, #3
 8010590:	b29b      	uxth	r3, r3
 8010592:	f023 0303 	bic.w	r3, r3, #3
 8010596:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8010598:	8bfb      	ldrh	r3, [r7, #30]
 801059a:	2b0b      	cmp	r3, #11
 801059c:	d801      	bhi.n	80105a2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 801059e:	230c      	movs	r3, #12
 80105a0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80105a2:	8bfb      	ldrh	r3, [r7, #30]
 80105a4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80105a8:	d803      	bhi.n	80105b2 <mem_trim+0x32>
 80105aa:	8bfa      	ldrh	r2, [r7, #30]
 80105ac:	887b      	ldrh	r3, [r7, #2]
 80105ae:	429a      	cmp	r2, r3
 80105b0:	d201      	bcs.n	80105b6 <mem_trim+0x36>
    return NULL;
 80105b2:	2300      	movs	r3, #0
 80105b4:	e0d8      	b.n	8010768 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80105b6:	4b6e      	ldr	r3, [pc, #440]	; (8010770 <mem_trim+0x1f0>)
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	687a      	ldr	r2, [r7, #4]
 80105bc:	429a      	cmp	r2, r3
 80105be:	d304      	bcc.n	80105ca <mem_trim+0x4a>
 80105c0:	4b6c      	ldr	r3, [pc, #432]	; (8010774 <mem_trim+0x1f4>)
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	687a      	ldr	r2, [r7, #4]
 80105c6:	429a      	cmp	r2, r3
 80105c8:	d306      	bcc.n	80105d8 <mem_trim+0x58>
 80105ca:	4b6b      	ldr	r3, [pc, #428]	; (8010778 <mem_trim+0x1f8>)
 80105cc:	f240 22d1 	movw	r2, #721	; 0x2d1
 80105d0:	496a      	ldr	r1, [pc, #424]	; (801077c <mem_trim+0x1fc>)
 80105d2:	486b      	ldr	r0, [pc, #428]	; (8010780 <mem_trim+0x200>)
 80105d4:	f00c f884 	bl	801c6e0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80105d8:	4b65      	ldr	r3, [pc, #404]	; (8010770 <mem_trim+0x1f0>)
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	687a      	ldr	r2, [r7, #4]
 80105de:	429a      	cmp	r2, r3
 80105e0:	d304      	bcc.n	80105ec <mem_trim+0x6c>
 80105e2:	4b64      	ldr	r3, [pc, #400]	; (8010774 <mem_trim+0x1f4>)
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	687a      	ldr	r2, [r7, #4]
 80105e8:	429a      	cmp	r2, r3
 80105ea:	d307      	bcc.n	80105fc <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80105ec:	f00b f892 	bl	801b714 <sys_arch_protect>
 80105f0:	60b8      	str	r0, [r7, #8]
 80105f2:	68b8      	ldr	r0, [r7, #8]
 80105f4:	f00b f89c 	bl	801b730 <sys_arch_unprotect>
    return rmem;
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	e0b5      	b.n	8010768 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	3b08      	subs	r3, #8
 8010600:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8010602:	69b8      	ldr	r0, [r7, #24]
 8010604:	f7ff fdea 	bl	80101dc <mem_to_ptr>
 8010608:	4603      	mov	r3, r0
 801060a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 801060c:	69bb      	ldr	r3, [r7, #24]
 801060e:	881a      	ldrh	r2, [r3, #0]
 8010610:	8afb      	ldrh	r3, [r7, #22]
 8010612:	1ad3      	subs	r3, r2, r3
 8010614:	b29b      	uxth	r3, r3
 8010616:	3b08      	subs	r3, #8
 8010618:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801061a:	8bfa      	ldrh	r2, [r7, #30]
 801061c:	8abb      	ldrh	r3, [r7, #20]
 801061e:	429a      	cmp	r2, r3
 8010620:	d906      	bls.n	8010630 <mem_trim+0xb0>
 8010622:	4b55      	ldr	r3, [pc, #340]	; (8010778 <mem_trim+0x1f8>)
 8010624:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8010628:	4956      	ldr	r1, [pc, #344]	; (8010784 <mem_trim+0x204>)
 801062a:	4855      	ldr	r0, [pc, #340]	; (8010780 <mem_trim+0x200>)
 801062c:	f00c f858 	bl	801c6e0 <iprintf>
  if (newsize > size) {
 8010630:	8bfa      	ldrh	r2, [r7, #30]
 8010632:	8abb      	ldrh	r3, [r7, #20]
 8010634:	429a      	cmp	r2, r3
 8010636:	d901      	bls.n	801063c <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8010638:	2300      	movs	r3, #0
 801063a:	e095      	b.n	8010768 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 801063c:	8bfa      	ldrh	r2, [r7, #30]
 801063e:	8abb      	ldrh	r3, [r7, #20]
 8010640:	429a      	cmp	r2, r3
 8010642:	d101      	bne.n	8010648 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	e08f      	b.n	8010768 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8010648:	484f      	ldr	r0, [pc, #316]	; (8010788 <mem_trim+0x208>)
 801064a:	f00b f821 	bl	801b690 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 801064e:	69bb      	ldr	r3, [r7, #24]
 8010650:	881b      	ldrh	r3, [r3, #0]
 8010652:	4618      	mov	r0, r3
 8010654:	f7ff fdb0 	bl	80101b8 <ptr_to_mem>
 8010658:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 801065a:	693b      	ldr	r3, [r7, #16]
 801065c:	791b      	ldrb	r3, [r3, #4]
 801065e:	2b00      	cmp	r3, #0
 8010660:	d13f      	bne.n	80106e2 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8010662:	69bb      	ldr	r3, [r7, #24]
 8010664:	881b      	ldrh	r3, [r3, #0]
 8010666:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801066a:	d106      	bne.n	801067a <mem_trim+0xfa>
 801066c:	4b42      	ldr	r3, [pc, #264]	; (8010778 <mem_trim+0x1f8>)
 801066e:	f240 22f5 	movw	r2, #757	; 0x2f5
 8010672:	4946      	ldr	r1, [pc, #280]	; (801078c <mem_trim+0x20c>)
 8010674:	4842      	ldr	r0, [pc, #264]	; (8010780 <mem_trim+0x200>)
 8010676:	f00c f833 	bl	801c6e0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 801067a:	693b      	ldr	r3, [r7, #16]
 801067c:	881b      	ldrh	r3, [r3, #0]
 801067e:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8010680:	8afa      	ldrh	r2, [r7, #22]
 8010682:	8bfb      	ldrh	r3, [r7, #30]
 8010684:	4413      	add	r3, r2
 8010686:	b29b      	uxth	r3, r3
 8010688:	3308      	adds	r3, #8
 801068a:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 801068c:	4b40      	ldr	r3, [pc, #256]	; (8010790 <mem_trim+0x210>)
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	693a      	ldr	r2, [r7, #16]
 8010692:	429a      	cmp	r2, r3
 8010694:	d106      	bne.n	80106a4 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8010696:	89fb      	ldrh	r3, [r7, #14]
 8010698:	4618      	mov	r0, r3
 801069a:	f7ff fd8d 	bl	80101b8 <ptr_to_mem>
 801069e:	4603      	mov	r3, r0
 80106a0:	4a3b      	ldr	r2, [pc, #236]	; (8010790 <mem_trim+0x210>)
 80106a2:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80106a4:	89fb      	ldrh	r3, [r7, #14]
 80106a6:	4618      	mov	r0, r3
 80106a8:	f7ff fd86 	bl	80101b8 <ptr_to_mem>
 80106ac:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80106ae:	693b      	ldr	r3, [r7, #16]
 80106b0:	2200      	movs	r2, #0
 80106b2:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80106b4:	693b      	ldr	r3, [r7, #16]
 80106b6:	89ba      	ldrh	r2, [r7, #12]
 80106b8:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80106ba:	693b      	ldr	r3, [r7, #16]
 80106bc:	8afa      	ldrh	r2, [r7, #22]
 80106be:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80106c0:	69bb      	ldr	r3, [r7, #24]
 80106c2:	89fa      	ldrh	r2, [r7, #14]
 80106c4:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80106c6:	693b      	ldr	r3, [r7, #16]
 80106c8:	881b      	ldrh	r3, [r3, #0]
 80106ca:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80106ce:	d047      	beq.n	8010760 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80106d0:	693b      	ldr	r3, [r7, #16]
 80106d2:	881b      	ldrh	r3, [r3, #0]
 80106d4:	4618      	mov	r0, r3
 80106d6:	f7ff fd6f 	bl	80101b8 <ptr_to_mem>
 80106da:	4602      	mov	r2, r0
 80106dc:	89fb      	ldrh	r3, [r7, #14]
 80106de:	8053      	strh	r3, [r2, #2]
 80106e0:	e03e      	b.n	8010760 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80106e2:	8bfb      	ldrh	r3, [r7, #30]
 80106e4:	f103 0214 	add.w	r2, r3, #20
 80106e8:	8abb      	ldrh	r3, [r7, #20]
 80106ea:	429a      	cmp	r2, r3
 80106ec:	d838      	bhi.n	8010760 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80106ee:	8afa      	ldrh	r2, [r7, #22]
 80106f0:	8bfb      	ldrh	r3, [r7, #30]
 80106f2:	4413      	add	r3, r2
 80106f4:	b29b      	uxth	r3, r3
 80106f6:	3308      	adds	r3, #8
 80106f8:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80106fa:	69bb      	ldr	r3, [r7, #24]
 80106fc:	881b      	ldrh	r3, [r3, #0]
 80106fe:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010702:	d106      	bne.n	8010712 <mem_trim+0x192>
 8010704:	4b1c      	ldr	r3, [pc, #112]	; (8010778 <mem_trim+0x1f8>)
 8010706:	f240 3216 	movw	r2, #790	; 0x316
 801070a:	4920      	ldr	r1, [pc, #128]	; (801078c <mem_trim+0x20c>)
 801070c:	481c      	ldr	r0, [pc, #112]	; (8010780 <mem_trim+0x200>)
 801070e:	f00b ffe7 	bl	801c6e0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8010712:	89fb      	ldrh	r3, [r7, #14]
 8010714:	4618      	mov	r0, r3
 8010716:	f7ff fd4f 	bl	80101b8 <ptr_to_mem>
 801071a:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 801071c:	4b1c      	ldr	r3, [pc, #112]	; (8010790 <mem_trim+0x210>)
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	693a      	ldr	r2, [r7, #16]
 8010722:	429a      	cmp	r2, r3
 8010724:	d202      	bcs.n	801072c <mem_trim+0x1ac>
      lfree = mem2;
 8010726:	4a1a      	ldr	r2, [pc, #104]	; (8010790 <mem_trim+0x210>)
 8010728:	693b      	ldr	r3, [r7, #16]
 801072a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 801072c:	693b      	ldr	r3, [r7, #16]
 801072e:	2200      	movs	r2, #0
 8010730:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8010732:	69bb      	ldr	r3, [r7, #24]
 8010734:	881a      	ldrh	r2, [r3, #0]
 8010736:	693b      	ldr	r3, [r7, #16]
 8010738:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 801073a:	693b      	ldr	r3, [r7, #16]
 801073c:	8afa      	ldrh	r2, [r7, #22]
 801073e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8010740:	69bb      	ldr	r3, [r7, #24]
 8010742:	89fa      	ldrh	r2, [r7, #14]
 8010744:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8010746:	693b      	ldr	r3, [r7, #16]
 8010748:	881b      	ldrh	r3, [r3, #0]
 801074a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801074e:	d007      	beq.n	8010760 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8010750:	693b      	ldr	r3, [r7, #16]
 8010752:	881b      	ldrh	r3, [r3, #0]
 8010754:	4618      	mov	r0, r3
 8010756:	f7ff fd2f 	bl	80101b8 <ptr_to_mem>
 801075a:	4602      	mov	r2, r0
 801075c:	89fb      	ldrh	r3, [r7, #14]
 801075e:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8010760:	4809      	ldr	r0, [pc, #36]	; (8010788 <mem_trim+0x208>)
 8010762:	f00a ffa4 	bl	801b6ae <sys_mutex_unlock>
  return rmem;
 8010766:	687b      	ldr	r3, [r7, #4]
}
 8010768:	4618      	mov	r0, r3
 801076a:	3720      	adds	r7, #32
 801076c:	46bd      	mov	sp, r7
 801076e:	bd80      	pop	{r7, pc}
 8010770:	200046b8 	.word	0x200046b8
 8010774:	200046bc 	.word	0x200046bc
 8010778:	0801f5dc 	.word	0x0801f5dc
 801077c:	0801f768 	.word	0x0801f768
 8010780:	0801f624 	.word	0x0801f624
 8010784:	0801f780 	.word	0x0801f780
 8010788:	200046c0 	.word	0x200046c0
 801078c:	0801f7a0 	.word	0x0801f7a0
 8010790:	200046c4 	.word	0x200046c4

08010794 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8010794:	b580      	push	{r7, lr}
 8010796:	b088      	sub	sp, #32
 8010798:	af00      	add	r7, sp, #0
 801079a:	4603      	mov	r3, r0
 801079c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 801079e:	88fb      	ldrh	r3, [r7, #6]
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d101      	bne.n	80107a8 <mem_malloc+0x14>
    return NULL;
 80107a4:	2300      	movs	r3, #0
 80107a6:	e0e2      	b.n	801096e <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80107a8:	88fb      	ldrh	r3, [r7, #6]
 80107aa:	3303      	adds	r3, #3
 80107ac:	b29b      	uxth	r3, r3
 80107ae:	f023 0303 	bic.w	r3, r3, #3
 80107b2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80107b4:	8bbb      	ldrh	r3, [r7, #28]
 80107b6:	2b0b      	cmp	r3, #11
 80107b8:	d801      	bhi.n	80107be <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80107ba:	230c      	movs	r3, #12
 80107bc:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80107be:	8bbb      	ldrh	r3, [r7, #28]
 80107c0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80107c4:	d803      	bhi.n	80107ce <mem_malloc+0x3a>
 80107c6:	8bba      	ldrh	r2, [r7, #28]
 80107c8:	88fb      	ldrh	r3, [r7, #6]
 80107ca:	429a      	cmp	r2, r3
 80107cc:	d201      	bcs.n	80107d2 <mem_malloc+0x3e>
    return NULL;
 80107ce:	2300      	movs	r3, #0
 80107d0:	e0cd      	b.n	801096e <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 80107d2:	4869      	ldr	r0, [pc, #420]	; (8010978 <mem_malloc+0x1e4>)
 80107d4:	f00a ff5c 	bl	801b690 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80107d8:	4b68      	ldr	r3, [pc, #416]	; (801097c <mem_malloc+0x1e8>)
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	4618      	mov	r0, r3
 80107de:	f7ff fcfd 	bl	80101dc <mem_to_ptr>
 80107e2:	4603      	mov	r3, r0
 80107e4:	83fb      	strh	r3, [r7, #30]
 80107e6:	e0b7      	b.n	8010958 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80107e8:	8bfb      	ldrh	r3, [r7, #30]
 80107ea:	4618      	mov	r0, r3
 80107ec:	f7ff fce4 	bl	80101b8 <ptr_to_mem>
 80107f0:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80107f2:	697b      	ldr	r3, [r7, #20]
 80107f4:	791b      	ldrb	r3, [r3, #4]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	f040 80a7 	bne.w	801094a <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80107fc:	697b      	ldr	r3, [r7, #20]
 80107fe:	881b      	ldrh	r3, [r3, #0]
 8010800:	461a      	mov	r2, r3
 8010802:	8bfb      	ldrh	r3, [r7, #30]
 8010804:	1ad3      	subs	r3, r2, r3
 8010806:	f1a3 0208 	sub.w	r2, r3, #8
 801080a:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 801080c:	429a      	cmp	r2, r3
 801080e:	f0c0 809c 	bcc.w	801094a <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8010812:	697b      	ldr	r3, [r7, #20]
 8010814:	881b      	ldrh	r3, [r3, #0]
 8010816:	461a      	mov	r2, r3
 8010818:	8bfb      	ldrh	r3, [r7, #30]
 801081a:	1ad3      	subs	r3, r2, r3
 801081c:	f1a3 0208 	sub.w	r2, r3, #8
 8010820:	8bbb      	ldrh	r3, [r7, #28]
 8010822:	3314      	adds	r3, #20
 8010824:	429a      	cmp	r2, r3
 8010826:	d333      	bcc.n	8010890 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8010828:	8bfa      	ldrh	r2, [r7, #30]
 801082a:	8bbb      	ldrh	r3, [r7, #28]
 801082c:	4413      	add	r3, r2
 801082e:	b29b      	uxth	r3, r3
 8010830:	3308      	adds	r3, #8
 8010832:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8010834:	8a7b      	ldrh	r3, [r7, #18]
 8010836:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801083a:	d106      	bne.n	801084a <mem_malloc+0xb6>
 801083c:	4b50      	ldr	r3, [pc, #320]	; (8010980 <mem_malloc+0x1ec>)
 801083e:	f240 3287 	movw	r2, #903	; 0x387
 8010842:	4950      	ldr	r1, [pc, #320]	; (8010984 <mem_malloc+0x1f0>)
 8010844:	4850      	ldr	r0, [pc, #320]	; (8010988 <mem_malloc+0x1f4>)
 8010846:	f00b ff4b 	bl	801c6e0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 801084a:	8a7b      	ldrh	r3, [r7, #18]
 801084c:	4618      	mov	r0, r3
 801084e:	f7ff fcb3 	bl	80101b8 <ptr_to_mem>
 8010852:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	2200      	movs	r2, #0
 8010858:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 801085a:	697b      	ldr	r3, [r7, #20]
 801085c:	881a      	ldrh	r2, [r3, #0]
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	8bfa      	ldrh	r2, [r7, #30]
 8010866:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8010868:	697b      	ldr	r3, [r7, #20]
 801086a:	8a7a      	ldrh	r2, [r7, #18]
 801086c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 801086e:	697b      	ldr	r3, [r7, #20]
 8010870:	2201      	movs	r2, #1
 8010872:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	881b      	ldrh	r3, [r3, #0]
 8010878:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801087c:	d00b      	beq.n	8010896 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	881b      	ldrh	r3, [r3, #0]
 8010882:	4618      	mov	r0, r3
 8010884:	f7ff fc98 	bl	80101b8 <ptr_to_mem>
 8010888:	4602      	mov	r2, r0
 801088a:	8a7b      	ldrh	r3, [r7, #18]
 801088c:	8053      	strh	r3, [r2, #2]
 801088e:	e002      	b.n	8010896 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8010890:	697b      	ldr	r3, [r7, #20]
 8010892:	2201      	movs	r2, #1
 8010894:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8010896:	4b39      	ldr	r3, [pc, #228]	; (801097c <mem_malloc+0x1e8>)
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	697a      	ldr	r2, [r7, #20]
 801089c:	429a      	cmp	r2, r3
 801089e:	d127      	bne.n	80108f0 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 80108a0:	4b36      	ldr	r3, [pc, #216]	; (801097c <mem_malloc+0x1e8>)
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80108a6:	e005      	b.n	80108b4 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80108a8:	69bb      	ldr	r3, [r7, #24]
 80108aa:	881b      	ldrh	r3, [r3, #0]
 80108ac:	4618      	mov	r0, r3
 80108ae:	f7ff fc83 	bl	80101b8 <ptr_to_mem>
 80108b2:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80108b4:	69bb      	ldr	r3, [r7, #24]
 80108b6:	791b      	ldrb	r3, [r3, #4]
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d004      	beq.n	80108c6 <mem_malloc+0x132>
 80108bc:	4b33      	ldr	r3, [pc, #204]	; (801098c <mem_malloc+0x1f8>)
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	69ba      	ldr	r2, [r7, #24]
 80108c2:	429a      	cmp	r2, r3
 80108c4:	d1f0      	bne.n	80108a8 <mem_malloc+0x114>
          }
          lfree = cur;
 80108c6:	4a2d      	ldr	r2, [pc, #180]	; (801097c <mem_malloc+0x1e8>)
 80108c8:	69bb      	ldr	r3, [r7, #24]
 80108ca:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80108cc:	4b2b      	ldr	r3, [pc, #172]	; (801097c <mem_malloc+0x1e8>)
 80108ce:	681a      	ldr	r2, [r3, #0]
 80108d0:	4b2e      	ldr	r3, [pc, #184]	; (801098c <mem_malloc+0x1f8>)
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	429a      	cmp	r2, r3
 80108d6:	d00b      	beq.n	80108f0 <mem_malloc+0x15c>
 80108d8:	4b28      	ldr	r3, [pc, #160]	; (801097c <mem_malloc+0x1e8>)
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	791b      	ldrb	r3, [r3, #4]
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d006      	beq.n	80108f0 <mem_malloc+0x15c>
 80108e2:	4b27      	ldr	r3, [pc, #156]	; (8010980 <mem_malloc+0x1ec>)
 80108e4:	f240 32b5 	movw	r2, #949	; 0x3b5
 80108e8:	4929      	ldr	r1, [pc, #164]	; (8010990 <mem_malloc+0x1fc>)
 80108ea:	4827      	ldr	r0, [pc, #156]	; (8010988 <mem_malloc+0x1f4>)
 80108ec:	f00b fef8 	bl	801c6e0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 80108f0:	4821      	ldr	r0, [pc, #132]	; (8010978 <mem_malloc+0x1e4>)
 80108f2:	f00a fedc 	bl	801b6ae <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80108f6:	8bba      	ldrh	r2, [r7, #28]
 80108f8:	697b      	ldr	r3, [r7, #20]
 80108fa:	4413      	add	r3, r2
 80108fc:	3308      	adds	r3, #8
 80108fe:	4a23      	ldr	r2, [pc, #140]	; (801098c <mem_malloc+0x1f8>)
 8010900:	6812      	ldr	r2, [r2, #0]
 8010902:	4293      	cmp	r3, r2
 8010904:	d906      	bls.n	8010914 <mem_malloc+0x180>
 8010906:	4b1e      	ldr	r3, [pc, #120]	; (8010980 <mem_malloc+0x1ec>)
 8010908:	f240 32b9 	movw	r2, #953	; 0x3b9
 801090c:	4921      	ldr	r1, [pc, #132]	; (8010994 <mem_malloc+0x200>)
 801090e:	481e      	ldr	r0, [pc, #120]	; (8010988 <mem_malloc+0x1f4>)
 8010910:	f00b fee6 	bl	801c6e0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8010914:	697b      	ldr	r3, [r7, #20]
 8010916:	f003 0303 	and.w	r3, r3, #3
 801091a:	2b00      	cmp	r3, #0
 801091c:	d006      	beq.n	801092c <mem_malloc+0x198>
 801091e:	4b18      	ldr	r3, [pc, #96]	; (8010980 <mem_malloc+0x1ec>)
 8010920:	f240 32bb 	movw	r2, #955	; 0x3bb
 8010924:	491c      	ldr	r1, [pc, #112]	; (8010998 <mem_malloc+0x204>)
 8010926:	4818      	ldr	r0, [pc, #96]	; (8010988 <mem_malloc+0x1f4>)
 8010928:	f00b feda 	bl	801c6e0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 801092c:	697b      	ldr	r3, [r7, #20]
 801092e:	f003 0303 	and.w	r3, r3, #3
 8010932:	2b00      	cmp	r3, #0
 8010934:	d006      	beq.n	8010944 <mem_malloc+0x1b0>
 8010936:	4b12      	ldr	r3, [pc, #72]	; (8010980 <mem_malloc+0x1ec>)
 8010938:	f240 32bd 	movw	r2, #957	; 0x3bd
 801093c:	4917      	ldr	r1, [pc, #92]	; (801099c <mem_malloc+0x208>)
 801093e:	4812      	ldr	r0, [pc, #72]	; (8010988 <mem_malloc+0x1f4>)
 8010940:	f00b fece 	bl	801c6e0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8010944:	697b      	ldr	r3, [r7, #20]
 8010946:	3308      	adds	r3, #8
 8010948:	e011      	b.n	801096e <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 801094a:	8bfb      	ldrh	r3, [r7, #30]
 801094c:	4618      	mov	r0, r3
 801094e:	f7ff fc33 	bl	80101b8 <ptr_to_mem>
 8010952:	4603      	mov	r3, r0
 8010954:	881b      	ldrh	r3, [r3, #0]
 8010956:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8010958:	8bfa      	ldrh	r2, [r7, #30]
 801095a:	8bbb      	ldrh	r3, [r7, #28]
 801095c:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8010960:	429a      	cmp	r2, r3
 8010962:	f4ff af41 	bcc.w	80107e8 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8010966:	4804      	ldr	r0, [pc, #16]	; (8010978 <mem_malloc+0x1e4>)
 8010968:	f00a fea1 	bl	801b6ae <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 801096c:	2300      	movs	r3, #0
}
 801096e:	4618      	mov	r0, r3
 8010970:	3720      	adds	r7, #32
 8010972:	46bd      	mov	sp, r7
 8010974:	bd80      	pop	{r7, pc}
 8010976:	bf00      	nop
 8010978:	200046c0 	.word	0x200046c0
 801097c:	200046c4 	.word	0x200046c4
 8010980:	0801f5dc 	.word	0x0801f5dc
 8010984:	0801f7a0 	.word	0x0801f7a0
 8010988:	0801f624 	.word	0x0801f624
 801098c:	200046bc 	.word	0x200046bc
 8010990:	0801f7b4 	.word	0x0801f7b4
 8010994:	0801f7d0 	.word	0x0801f7d0
 8010998:	0801f800 	.word	0x0801f800
 801099c:	0801f830 	.word	0x0801f830

080109a0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80109a0:	b480      	push	{r7}
 80109a2:	b085      	sub	sp, #20
 80109a4:	af00      	add	r7, sp, #0
 80109a6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	689b      	ldr	r3, [r3, #8]
 80109ac:	2200      	movs	r2, #0
 80109ae:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	685b      	ldr	r3, [r3, #4]
 80109b4:	3303      	adds	r3, #3
 80109b6:	f023 0303 	bic.w	r3, r3, #3
 80109ba:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80109bc:	2300      	movs	r3, #0
 80109be:	60fb      	str	r3, [r7, #12]
 80109c0:	e011      	b.n	80109e6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	689b      	ldr	r3, [r3, #8]
 80109c6:	681a      	ldr	r2, [r3, #0]
 80109c8:	68bb      	ldr	r3, [r7, #8]
 80109ca:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	689b      	ldr	r3, [r3, #8]
 80109d0:	68ba      	ldr	r2, [r7, #8]
 80109d2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	881b      	ldrh	r3, [r3, #0]
 80109d8:	461a      	mov	r2, r3
 80109da:	68bb      	ldr	r3, [r7, #8]
 80109dc:	4413      	add	r3, r2
 80109de:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80109e0:	68fb      	ldr	r3, [r7, #12]
 80109e2:	3301      	adds	r3, #1
 80109e4:	60fb      	str	r3, [r7, #12]
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	885b      	ldrh	r3, [r3, #2]
 80109ea:	461a      	mov	r2, r3
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	4293      	cmp	r3, r2
 80109f0:	dbe7      	blt.n	80109c2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80109f2:	bf00      	nop
 80109f4:	bf00      	nop
 80109f6:	3714      	adds	r7, #20
 80109f8:	46bd      	mov	sp, r7
 80109fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109fe:	4770      	bx	lr

08010a00 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8010a00:	b580      	push	{r7, lr}
 8010a02:	b082      	sub	sp, #8
 8010a04:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8010a06:	2300      	movs	r3, #0
 8010a08:	80fb      	strh	r3, [r7, #6]
 8010a0a:	e009      	b.n	8010a20 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8010a0c:	88fb      	ldrh	r3, [r7, #6]
 8010a0e:	4a08      	ldr	r2, [pc, #32]	; (8010a30 <memp_init+0x30>)
 8010a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010a14:	4618      	mov	r0, r3
 8010a16:	f7ff ffc3 	bl	80109a0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8010a1a:	88fb      	ldrh	r3, [r7, #6]
 8010a1c:	3301      	adds	r3, #1
 8010a1e:	80fb      	strh	r3, [r7, #6]
 8010a20:	88fb      	ldrh	r3, [r7, #6]
 8010a22:	2b0c      	cmp	r3, #12
 8010a24:	d9f2      	bls.n	8010a0c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8010a26:	bf00      	nop
 8010a28:	bf00      	nop
 8010a2a:	3708      	adds	r7, #8
 8010a2c:	46bd      	mov	sp, r7
 8010a2e:	bd80      	pop	{r7, pc}
 8010a30:	08022fd8 	.word	0x08022fd8

08010a34 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8010a34:	b580      	push	{r7, lr}
 8010a36:	b084      	sub	sp, #16
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8010a3c:	f00a fe6a 	bl	801b714 <sys_arch_protect>
 8010a40:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	689b      	ldr	r3, [r3, #8]
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8010a4a:	68bb      	ldr	r3, [r7, #8]
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d015      	beq.n	8010a7c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	689b      	ldr	r3, [r3, #8]
 8010a54:	68ba      	ldr	r2, [r7, #8]
 8010a56:	6812      	ldr	r2, [r2, #0]
 8010a58:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8010a5a:	68bb      	ldr	r3, [r7, #8]
 8010a5c:	f003 0303 	and.w	r3, r3, #3
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d006      	beq.n	8010a72 <do_memp_malloc_pool+0x3e>
 8010a64:	4b09      	ldr	r3, [pc, #36]	; (8010a8c <do_memp_malloc_pool+0x58>)
 8010a66:	f44f 728c 	mov.w	r2, #280	; 0x118
 8010a6a:	4909      	ldr	r1, [pc, #36]	; (8010a90 <do_memp_malloc_pool+0x5c>)
 8010a6c:	4809      	ldr	r0, [pc, #36]	; (8010a94 <do_memp_malloc_pool+0x60>)
 8010a6e:	f00b fe37 	bl	801c6e0 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8010a72:	68f8      	ldr	r0, [r7, #12]
 8010a74:	f00a fe5c 	bl	801b730 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8010a78:	68bb      	ldr	r3, [r7, #8]
 8010a7a:	e003      	b.n	8010a84 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8010a7c:	68f8      	ldr	r0, [r7, #12]
 8010a7e:	f00a fe57 	bl	801b730 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8010a82:	2300      	movs	r3, #0
}
 8010a84:	4618      	mov	r0, r3
 8010a86:	3710      	adds	r7, #16
 8010a88:	46bd      	mov	sp, r7
 8010a8a:	bd80      	pop	{r7, pc}
 8010a8c:	0801f854 	.word	0x0801f854
 8010a90:	0801f884 	.word	0x0801f884
 8010a94:	0801f8a8 	.word	0x0801f8a8

08010a98 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8010a98:	b580      	push	{r7, lr}
 8010a9a:	b084      	sub	sp, #16
 8010a9c:	af00      	add	r7, sp, #0
 8010a9e:	4603      	mov	r3, r0
 8010aa0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8010aa2:	79fb      	ldrb	r3, [r7, #7]
 8010aa4:	2b0c      	cmp	r3, #12
 8010aa6:	d908      	bls.n	8010aba <memp_malloc+0x22>
 8010aa8:	4b0a      	ldr	r3, [pc, #40]	; (8010ad4 <memp_malloc+0x3c>)
 8010aaa:	f240 1257 	movw	r2, #343	; 0x157
 8010aae:	490a      	ldr	r1, [pc, #40]	; (8010ad8 <memp_malloc+0x40>)
 8010ab0:	480a      	ldr	r0, [pc, #40]	; (8010adc <memp_malloc+0x44>)
 8010ab2:	f00b fe15 	bl	801c6e0 <iprintf>
 8010ab6:	2300      	movs	r3, #0
 8010ab8:	e008      	b.n	8010acc <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8010aba:	79fb      	ldrb	r3, [r7, #7]
 8010abc:	4a08      	ldr	r2, [pc, #32]	; (8010ae0 <memp_malloc+0x48>)
 8010abe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010ac2:	4618      	mov	r0, r3
 8010ac4:	f7ff ffb6 	bl	8010a34 <do_memp_malloc_pool>
 8010ac8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8010aca:	68fb      	ldr	r3, [r7, #12]
}
 8010acc:	4618      	mov	r0, r3
 8010ace:	3710      	adds	r7, #16
 8010ad0:	46bd      	mov	sp, r7
 8010ad2:	bd80      	pop	{r7, pc}
 8010ad4:	0801f854 	.word	0x0801f854
 8010ad8:	0801f8e4 	.word	0x0801f8e4
 8010adc:	0801f8a8 	.word	0x0801f8a8
 8010ae0:	08022fd8 	.word	0x08022fd8

08010ae4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8010ae4:	b580      	push	{r7, lr}
 8010ae6:	b084      	sub	sp, #16
 8010ae8:	af00      	add	r7, sp, #0
 8010aea:	6078      	str	r0, [r7, #4]
 8010aec:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8010aee:	683b      	ldr	r3, [r7, #0]
 8010af0:	f003 0303 	and.w	r3, r3, #3
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d006      	beq.n	8010b06 <do_memp_free_pool+0x22>
 8010af8:	4b0d      	ldr	r3, [pc, #52]	; (8010b30 <do_memp_free_pool+0x4c>)
 8010afa:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8010afe:	490d      	ldr	r1, [pc, #52]	; (8010b34 <do_memp_free_pool+0x50>)
 8010b00:	480d      	ldr	r0, [pc, #52]	; (8010b38 <do_memp_free_pool+0x54>)
 8010b02:	f00b fded 	bl	801c6e0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8010b06:	683b      	ldr	r3, [r7, #0]
 8010b08:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8010b0a:	f00a fe03 	bl	801b714 <sys_arch_protect>
 8010b0e:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	689b      	ldr	r3, [r3, #8]
 8010b14:	681a      	ldr	r2, [r3, #0]
 8010b16:	68fb      	ldr	r3, [r7, #12]
 8010b18:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	689b      	ldr	r3, [r3, #8]
 8010b1e:	68fa      	ldr	r2, [r7, #12]
 8010b20:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8010b22:	68b8      	ldr	r0, [r7, #8]
 8010b24:	f00a fe04 	bl	801b730 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8010b28:	bf00      	nop
 8010b2a:	3710      	adds	r7, #16
 8010b2c:	46bd      	mov	sp, r7
 8010b2e:	bd80      	pop	{r7, pc}
 8010b30:	0801f854 	.word	0x0801f854
 8010b34:	0801f904 	.word	0x0801f904
 8010b38:	0801f8a8 	.word	0x0801f8a8

08010b3c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8010b3c:	b580      	push	{r7, lr}
 8010b3e:	b082      	sub	sp, #8
 8010b40:	af00      	add	r7, sp, #0
 8010b42:	4603      	mov	r3, r0
 8010b44:	6039      	str	r1, [r7, #0]
 8010b46:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8010b48:	79fb      	ldrb	r3, [r7, #7]
 8010b4a:	2b0c      	cmp	r3, #12
 8010b4c:	d907      	bls.n	8010b5e <memp_free+0x22>
 8010b4e:	4b0c      	ldr	r3, [pc, #48]	; (8010b80 <memp_free+0x44>)
 8010b50:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8010b54:	490b      	ldr	r1, [pc, #44]	; (8010b84 <memp_free+0x48>)
 8010b56:	480c      	ldr	r0, [pc, #48]	; (8010b88 <memp_free+0x4c>)
 8010b58:	f00b fdc2 	bl	801c6e0 <iprintf>
 8010b5c:	e00c      	b.n	8010b78 <memp_free+0x3c>

  if (mem == NULL) {
 8010b5e:	683b      	ldr	r3, [r7, #0]
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d008      	beq.n	8010b76 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8010b64:	79fb      	ldrb	r3, [r7, #7]
 8010b66:	4a09      	ldr	r2, [pc, #36]	; (8010b8c <memp_free+0x50>)
 8010b68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010b6c:	6839      	ldr	r1, [r7, #0]
 8010b6e:	4618      	mov	r0, r3
 8010b70:	f7ff ffb8 	bl	8010ae4 <do_memp_free_pool>
 8010b74:	e000      	b.n	8010b78 <memp_free+0x3c>
    return;
 8010b76:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8010b78:	3708      	adds	r7, #8
 8010b7a:	46bd      	mov	sp, r7
 8010b7c:	bd80      	pop	{r7, pc}
 8010b7e:	bf00      	nop
 8010b80:	0801f854 	.word	0x0801f854
 8010b84:	0801f924 	.word	0x0801f924
 8010b88:	0801f8a8 	.word	0x0801f8a8
 8010b8c:	08022fd8 	.word	0x08022fd8

08010b90 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8010b90:	b480      	push	{r7}
 8010b92:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8010b94:	bf00      	nop
 8010b96:	46bd      	mov	sp, r7
 8010b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b9c:	4770      	bx	lr
	...

08010ba0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8010ba0:	b580      	push	{r7, lr}
 8010ba2:	b086      	sub	sp, #24
 8010ba4:	af00      	add	r7, sp, #0
 8010ba6:	60f8      	str	r0, [r7, #12]
 8010ba8:	60b9      	str	r1, [r7, #8]
 8010baa:	607a      	str	r2, [r7, #4]
 8010bac:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8010bae:	68fb      	ldr	r3, [r7, #12]
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d108      	bne.n	8010bc6 <netif_add+0x26>
 8010bb4:	4b56      	ldr	r3, [pc, #344]	; (8010d10 <netif_add+0x170>)
 8010bb6:	f240 1227 	movw	r2, #295	; 0x127
 8010bba:	4956      	ldr	r1, [pc, #344]	; (8010d14 <netif_add+0x174>)
 8010bbc:	4856      	ldr	r0, [pc, #344]	; (8010d18 <netif_add+0x178>)
 8010bbe:	f00b fd8f 	bl	801c6e0 <iprintf>
 8010bc2:	2300      	movs	r3, #0
 8010bc4:	e09f      	b.n	8010d06 <netif_add+0x166>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8010bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d108      	bne.n	8010bde <netif_add+0x3e>
 8010bcc:	4b50      	ldr	r3, [pc, #320]	; (8010d10 <netif_add+0x170>)
 8010bce:	f44f 7294 	mov.w	r2, #296	; 0x128
 8010bd2:	4952      	ldr	r1, [pc, #328]	; (8010d1c <netif_add+0x17c>)
 8010bd4:	4850      	ldr	r0, [pc, #320]	; (8010d18 <netif_add+0x178>)
 8010bd6:	f00b fd83 	bl	801c6e0 <iprintf>
 8010bda:	2300      	movs	r3, #0
 8010bdc:	e093      	b.n	8010d06 <netif_add+0x166>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8010bde:	68bb      	ldr	r3, [r7, #8]
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d101      	bne.n	8010be8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8010be4:	4b4e      	ldr	r3, [pc, #312]	; (8010d20 <netif_add+0x180>)
 8010be6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d101      	bne.n	8010bf2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8010bee:	4b4c      	ldr	r3, [pc, #304]	; (8010d20 <netif_add+0x180>)
 8010bf0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8010bf2:	683b      	ldr	r3, [r7, #0]
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d101      	bne.n	8010bfc <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8010bf8:	4b49      	ldr	r3, [pc, #292]	; (8010d20 <netif_add+0x180>)
 8010bfa:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	2200      	movs	r2, #0
 8010c00:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	2200      	movs	r2, #0
 8010c06:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	2200      	movs	r2, #0
 8010c0c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	4a44      	ldr	r2, [pc, #272]	; (8010d24 <netif_add+0x184>)
 8010c12:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	2200      	movs	r2, #0
 8010c18:	841a      	strh	r2, [r3, #32]
  netif->flags = 0;
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	2200      	movs	r2, #0
 8010c1e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	6a3a      	ldr	r2, [r7, #32]
 8010c26:	61da      	str	r2, [r3, #28]
  netif->num = netif_num;
 8010c28:	4b3f      	ldr	r3, [pc, #252]	; (8010d28 <netif_add+0x188>)
 8010c2a:	781a      	ldrb	r2, [r3, #0]
 8010c2c:	68fb      	ldr	r3, [r7, #12]
 8010c2e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->input = input;
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010c36:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8010c38:	683b      	ldr	r3, [r7, #0]
 8010c3a:	687a      	ldr	r2, [r7, #4]
 8010c3c:	68b9      	ldr	r1, [r7, #8]
 8010c3e:	68f8      	ldr	r0, [r7, #12]
 8010c40:	f000 f966 	bl	8010f10 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8010c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c46:	68f8      	ldr	r0, [r7, #12]
 8010c48:	4798      	blx	r3
 8010c4a:	4603      	mov	r3, r0
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d001      	beq.n	8010c54 <netif_add+0xb4>
    return NULL;
 8010c50:	2300      	movs	r3, #0
 8010c52:	e058      	b.n	8010d06 <netif_add+0x166>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010c5a:	2bff      	cmp	r3, #255	; 0xff
 8010c5c:	d103      	bne.n	8010c66 <netif_add+0xc6>
        netif->num = 0;
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	2200      	movs	r2, #0
 8010c62:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
      }
      num_netifs = 0;
 8010c66:	2300      	movs	r3, #0
 8010c68:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8010c6a:	4b30      	ldr	r3, [pc, #192]	; (8010d2c <netif_add+0x18c>)
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	617b      	str	r3, [r7, #20]
 8010c70:	e02b      	b.n	8010cca <netif_add+0x12a>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8010c72:	697a      	ldr	r2, [r7, #20]
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	429a      	cmp	r2, r3
 8010c78:	d106      	bne.n	8010c88 <netif_add+0xe8>
 8010c7a:	4b25      	ldr	r3, [pc, #148]	; (8010d10 <netif_add+0x170>)
 8010c7c:	f240 128b 	movw	r2, #395	; 0x18b
 8010c80:	492b      	ldr	r1, [pc, #172]	; (8010d30 <netif_add+0x190>)
 8010c82:	4825      	ldr	r0, [pc, #148]	; (8010d18 <netif_add+0x178>)
 8010c84:	f00b fd2c 	bl	801c6e0 <iprintf>
        num_netifs++;
 8010c88:	693b      	ldr	r3, [r7, #16]
 8010c8a:	3301      	adds	r3, #1
 8010c8c:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8010c8e:	693b      	ldr	r3, [r7, #16]
 8010c90:	2bff      	cmp	r3, #255	; 0xff
 8010c92:	dd06      	ble.n	8010ca2 <netif_add+0x102>
 8010c94:	4b1e      	ldr	r3, [pc, #120]	; (8010d10 <netif_add+0x170>)
 8010c96:	f240 128d 	movw	r2, #397	; 0x18d
 8010c9a:	4926      	ldr	r1, [pc, #152]	; (8010d34 <netif_add+0x194>)
 8010c9c:	481e      	ldr	r0, [pc, #120]	; (8010d18 <netif_add+0x178>)
 8010c9e:	f00b fd1f 	bl	801c6e0 <iprintf>
        if (netif2->num == netif->num) {
 8010ca2:	697b      	ldr	r3, [r7, #20]
 8010ca4:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010cae:	429a      	cmp	r2, r3
 8010cb0:	d108      	bne.n	8010cc4 <netif_add+0x124>
          netif->num++;
 8010cb2:	68fb      	ldr	r3, [r7, #12]
 8010cb4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010cb8:	3301      	adds	r3, #1
 8010cba:	b2da      	uxtb	r2, r3
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
          break;
 8010cc2:	e005      	b.n	8010cd0 <netif_add+0x130>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8010cc4:	697b      	ldr	r3, [r7, #20]
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	617b      	str	r3, [r7, #20]
 8010cca:	697b      	ldr	r3, [r7, #20]
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d1d0      	bne.n	8010c72 <netif_add+0xd2>
        }
      }
    } while (netif2 != NULL);
 8010cd0:	697b      	ldr	r3, [r7, #20]
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d1be      	bne.n	8010c54 <netif_add+0xb4>
  }
  if (netif->num == 254) {
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010cdc:	2bfe      	cmp	r3, #254	; 0xfe
 8010cde:	d103      	bne.n	8010ce8 <netif_add+0x148>
    netif_num = 0;
 8010ce0:	4b11      	ldr	r3, [pc, #68]	; (8010d28 <netif_add+0x188>)
 8010ce2:	2200      	movs	r2, #0
 8010ce4:	701a      	strb	r2, [r3, #0]
 8010ce6:	e006      	b.n	8010cf6 <netif_add+0x156>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8010ce8:	68fb      	ldr	r3, [r7, #12]
 8010cea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010cee:	3301      	adds	r3, #1
 8010cf0:	b2da      	uxtb	r2, r3
 8010cf2:	4b0d      	ldr	r3, [pc, #52]	; (8010d28 <netif_add+0x188>)
 8010cf4:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8010cf6:	4b0d      	ldr	r3, [pc, #52]	; (8010d2c <netif_add+0x18c>)
 8010cf8:	681a      	ldr	r2, [r3, #0]
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8010cfe:	4a0b      	ldr	r2, [pc, #44]	; (8010d2c <netif_add+0x18c>)
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8010d04:	68fb      	ldr	r3, [r7, #12]
}
 8010d06:	4618      	mov	r0, r3
 8010d08:	3718      	adds	r7, #24
 8010d0a:	46bd      	mov	sp, r7
 8010d0c:	bd80      	pop	{r7, pc}
 8010d0e:	bf00      	nop
 8010d10:	0801f940 	.word	0x0801f940
 8010d14:	0801f9d4 	.word	0x0801f9d4
 8010d18:	0801f990 	.word	0x0801f990
 8010d1c:	0801f9f0 	.word	0x0801f9f0
 8010d20:	0802304c 	.word	0x0802304c
 8010d24:	08011101 	.word	0x08011101
 8010d28:	200046fc 	.word	0x200046fc
 8010d2c:	2000b60c 	.word	0x2000b60c
 8010d30:	0801fa14 	.word	0x0801fa14
 8010d34:	0801fa28 	.word	0x0801fa28

08010d38 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010d38:	b580      	push	{r7, lr}
 8010d3a:	b082      	sub	sp, #8
 8010d3c:	af00      	add	r7, sp, #0
 8010d3e:	6078      	str	r0, [r7, #4]
 8010d40:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8010d42:	6839      	ldr	r1, [r7, #0]
 8010d44:	6878      	ldr	r0, [r7, #4]
 8010d46:	f002 fe6b 	bl	8013a20 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8010d4a:	6839      	ldr	r1, [r7, #0]
 8010d4c:	6878      	ldr	r0, [r7, #4]
 8010d4e:	f007 ff03 	bl	8018b58 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8010d52:	bf00      	nop
 8010d54:	3708      	adds	r7, #8
 8010d56:	46bd      	mov	sp, r7
 8010d58:	bd80      	pop	{r7, pc}
	...

08010d5c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8010d5c:	b580      	push	{r7, lr}
 8010d5e:	b086      	sub	sp, #24
 8010d60:	af00      	add	r7, sp, #0
 8010d62:	60f8      	str	r0, [r7, #12]
 8010d64:	60b9      	str	r1, [r7, #8]
 8010d66:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8010d68:	68bb      	ldr	r3, [r7, #8]
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d106      	bne.n	8010d7c <netif_do_set_ipaddr+0x20>
 8010d6e:	4b1d      	ldr	r3, [pc, #116]	; (8010de4 <netif_do_set_ipaddr+0x88>)
 8010d70:	f240 12cb 	movw	r2, #459	; 0x1cb
 8010d74:	491c      	ldr	r1, [pc, #112]	; (8010de8 <netif_do_set_ipaddr+0x8c>)
 8010d76:	481d      	ldr	r0, [pc, #116]	; (8010dec <netif_do_set_ipaddr+0x90>)
 8010d78:	f00b fcb2 	bl	801c6e0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d106      	bne.n	8010d90 <netif_do_set_ipaddr+0x34>
 8010d82:	4b18      	ldr	r3, [pc, #96]	; (8010de4 <netif_do_set_ipaddr+0x88>)
 8010d84:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8010d88:	4917      	ldr	r1, [pc, #92]	; (8010de8 <netif_do_set_ipaddr+0x8c>)
 8010d8a:	4818      	ldr	r0, [pc, #96]	; (8010dec <netif_do_set_ipaddr+0x90>)
 8010d8c:	f00b fca8 	bl	801c6e0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8010d90:	68bb      	ldr	r3, [r7, #8]
 8010d92:	681a      	ldr	r2, [r3, #0]
 8010d94:	68fb      	ldr	r3, [r7, #12]
 8010d96:	3304      	adds	r3, #4
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	429a      	cmp	r2, r3
 8010d9c:	d01c      	beq.n	8010dd8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8010d9e:	68bb      	ldr	r3, [r7, #8]
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8010da4:	68fb      	ldr	r3, [r7, #12]
 8010da6:	3304      	adds	r3, #4
 8010da8:	681a      	ldr	r2, [r3, #0]
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8010dae:	f107 0314 	add.w	r3, r7, #20
 8010db2:	4619      	mov	r1, r3
 8010db4:	6878      	ldr	r0, [r7, #4]
 8010db6:	f7ff ffbf 	bl	8010d38 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8010dba:	68bb      	ldr	r3, [r7, #8]
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d002      	beq.n	8010dc6 <netif_do_set_ipaddr+0x6a>
 8010dc0:	68bb      	ldr	r3, [r7, #8]
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	e000      	b.n	8010dc8 <netif_do_set_ipaddr+0x6c>
 8010dc6:	2300      	movs	r3, #0
 8010dc8:	68fa      	ldr	r2, [r7, #12]
 8010dca:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8010dcc:	2101      	movs	r1, #1
 8010dce:	68f8      	ldr	r0, [r7, #12]
 8010dd0:	f000 f924 	bl	801101c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8010dd4:	2301      	movs	r3, #1
 8010dd6:	e000      	b.n	8010dda <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8010dd8:	2300      	movs	r3, #0
}
 8010dda:	4618      	mov	r0, r3
 8010ddc:	3718      	adds	r7, #24
 8010dde:	46bd      	mov	sp, r7
 8010de0:	bd80      	pop	{r7, pc}
 8010de2:	bf00      	nop
 8010de4:	0801f940 	.word	0x0801f940
 8010de8:	0801fa58 	.word	0x0801fa58
 8010dec:	0801f990 	.word	0x0801f990

08010df0 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8010df0:	b580      	push	{r7, lr}
 8010df2:	b084      	sub	sp, #16
 8010df4:	af00      	add	r7, sp, #0
 8010df6:	6078      	str	r0, [r7, #4]
 8010df8:	6039      	str	r1, [r7, #0]
  ip_addr_t old_addr;

  LWIP_ERROR("netif_set_ipaddr: invalid netif", netif != NULL, return);
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d107      	bne.n	8010e10 <netif_set_ipaddr+0x20>
 8010e00:	4b0b      	ldr	r3, [pc, #44]	; (8010e30 <netif_set_ipaddr+0x40>)
 8010e02:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8010e06:	490b      	ldr	r1, [pc, #44]	; (8010e34 <netif_set_ipaddr+0x44>)
 8010e08:	480b      	ldr	r0, [pc, #44]	; (8010e38 <netif_set_ipaddr+0x48>)
 8010e0a:	f00b fc69 	bl	801c6e0 <iprintf>
 8010e0e:	e00b      	b.n	8010e28 <netif_set_ipaddr+0x38>

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8010e10:	683b      	ldr	r3, [r7, #0]
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d101      	bne.n	8010e1a <netif_set_ipaddr+0x2a>
    ipaddr = IP4_ADDR_ANY4;
 8010e16:	4b09      	ldr	r3, [pc, #36]	; (8010e3c <netif_set_ipaddr+0x4c>)
 8010e18:	603b      	str	r3, [r7, #0]
  }

  LWIP_ASSERT_CORE_LOCKED();

  if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8010e1a:	f107 030c 	add.w	r3, r7, #12
 8010e1e:	461a      	mov	r2, r3
 8010e20:	6839      	ldr	r1, [r7, #0]
 8010e22:	6878      	ldr	r0, [r7, #4]
 8010e24:	f7ff ff9a 	bl	8010d5c <netif_do_set_ipaddr>
    netif_ext_callback_args_t args;
    args.ipv4_changed.old_address = &old_addr;
    netif_invoke_ext_callback(netif, LWIP_NSC_IPV4_ADDRESS_CHANGED, &args);
#endif
  }
}
 8010e28:	3710      	adds	r7, #16
 8010e2a:	46bd      	mov	sp, r7
 8010e2c:	bd80      	pop	{r7, pc}
 8010e2e:	bf00      	nop
 8010e30:	0801f940 	.word	0x0801f940
 8010e34:	0801fa68 	.word	0x0801fa68
 8010e38:	0801f990 	.word	0x0801f990
 8010e3c:	0802304c 	.word	0x0802304c

08010e40 <netif_do_set_netmask>:

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8010e40:	b480      	push	{r7}
 8010e42:	b085      	sub	sp, #20
 8010e44:	af00      	add	r7, sp, #0
 8010e46:	60f8      	str	r0, [r7, #12]
 8010e48:	60b9      	str	r1, [r7, #8]
 8010e4a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8010e4c:	68bb      	ldr	r3, [r7, #8]
 8010e4e:	681a      	ldr	r2, [r3, #0]
 8010e50:	68fb      	ldr	r3, [r7, #12]
 8010e52:	3308      	adds	r3, #8
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	429a      	cmp	r2, r3
 8010e58:	d00a      	beq.n	8010e70 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8010e5a:	68bb      	ldr	r3, [r7, #8]
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d002      	beq.n	8010e66 <netif_do_set_netmask+0x26>
 8010e60:	68bb      	ldr	r3, [r7, #8]
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	e000      	b.n	8010e68 <netif_do_set_netmask+0x28>
 8010e66:	2300      	movs	r3, #0
 8010e68:	68fa      	ldr	r2, [r7, #12]
 8010e6a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8010e6c:	2301      	movs	r3, #1
 8010e6e:	e000      	b.n	8010e72 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8010e70:	2300      	movs	r3, #0
}
 8010e72:	4618      	mov	r0, r3
 8010e74:	3714      	adds	r7, #20
 8010e76:	46bd      	mov	sp, r7
 8010e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e7c:	4770      	bx	lr
	...

08010e80 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 8010e80:	b580      	push	{r7, lr}
 8010e82:	b084      	sub	sp, #16
 8010e84:	af00      	add	r7, sp, #0
 8010e86:	6078      	str	r0, [r7, #4]
 8010e88:	6039      	str	r1, [r7, #0]
#if LWIP_NETIF_EXT_STATUS_CALLBACK
  ip_addr_t old_nm_val;
  ip_addr_t *old_nm = &old_nm_val;
#else
  ip_addr_t *old_nm = NULL;
 8010e8a:	2300      	movs	r3, #0
 8010e8c:	60fb      	str	r3, [r7, #12]
#endif
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_netmask: invalid netif", netif != NULL, return);
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d107      	bne.n	8010ea4 <netif_set_netmask+0x24>
 8010e94:	4b0a      	ldr	r3, [pc, #40]	; (8010ec0 <netif_set_netmask+0x40>)
 8010e96:	f240 223a 	movw	r2, #570	; 0x23a
 8010e9a:	490a      	ldr	r1, [pc, #40]	; (8010ec4 <netif_set_netmask+0x44>)
 8010e9c:	480a      	ldr	r0, [pc, #40]	; (8010ec8 <netif_set_netmask+0x48>)
 8010e9e:	f00b fc1f 	bl	801c6e0 <iprintf>
 8010ea2:	e009      	b.n	8010eb8 <netif_set_netmask+0x38>

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (netmask == NULL) {
 8010ea4:	683b      	ldr	r3, [r7, #0]
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d101      	bne.n	8010eae <netif_set_netmask+0x2e>
    netmask = IP4_ADDR_ANY4;
 8010eaa:	4b08      	ldr	r3, [pc, #32]	; (8010ecc <netif_set_netmask+0x4c>)
 8010eac:	603b      	str	r3, [r7, #0]
  }

  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8010eae:	68fa      	ldr	r2, [r7, #12]
 8010eb0:	6839      	ldr	r1, [r7, #0]
 8010eb2:	6878      	ldr	r0, [r7, #4]
 8010eb4:	f7ff ffc4 	bl	8010e40 <netif_do_set_netmask>
    netif_ext_callback_args_t args;
    args.ipv4_changed.old_netmask = old_nm;
    netif_invoke_ext_callback(netif, LWIP_NSC_IPV4_NETMASK_CHANGED, &args);
#endif
  }
}
 8010eb8:	3710      	adds	r7, #16
 8010eba:	46bd      	mov	sp, r7
 8010ebc:	bd80      	pop	{r7, pc}
 8010ebe:	bf00      	nop
 8010ec0:	0801f940 	.word	0x0801f940
 8010ec4:	0801fa88 	.word	0x0801fa88
 8010ec8:	0801f990 	.word	0x0801f990
 8010ecc:	0802304c 	.word	0x0802304c

08010ed0 <netif_do_set_gw>:

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8010ed0:	b480      	push	{r7}
 8010ed2:	b085      	sub	sp, #20
 8010ed4:	af00      	add	r7, sp, #0
 8010ed6:	60f8      	str	r0, [r7, #12]
 8010ed8:	60b9      	str	r1, [r7, #8]
 8010eda:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8010edc:	68bb      	ldr	r3, [r7, #8]
 8010ede:	681a      	ldr	r2, [r3, #0]
 8010ee0:	68fb      	ldr	r3, [r7, #12]
 8010ee2:	330c      	adds	r3, #12
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	429a      	cmp	r2, r3
 8010ee8:	d00a      	beq.n	8010f00 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8010eea:	68bb      	ldr	r3, [r7, #8]
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d002      	beq.n	8010ef6 <netif_do_set_gw+0x26>
 8010ef0:	68bb      	ldr	r3, [r7, #8]
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	e000      	b.n	8010ef8 <netif_do_set_gw+0x28>
 8010ef6:	2300      	movs	r3, #0
 8010ef8:	68fa      	ldr	r2, [r7, #12]
 8010efa:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8010efc:	2301      	movs	r3, #1
 8010efe:	e000      	b.n	8010f02 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8010f00:	2300      	movs	r3, #0
}
 8010f02:	4618      	mov	r0, r3
 8010f04:	3714      	adds	r7, #20
 8010f06:	46bd      	mov	sp, r7
 8010f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f0c:	4770      	bx	lr
	...

08010f10 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8010f10:	b580      	push	{r7, lr}
 8010f12:	b088      	sub	sp, #32
 8010f14:	af00      	add	r7, sp, #0
 8010f16:	60f8      	str	r0, [r7, #12]
 8010f18:	60b9      	str	r1, [r7, #8]
 8010f1a:	607a      	str	r2, [r7, #4]
 8010f1c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8010f1e:	2300      	movs	r3, #0
 8010f20:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8010f22:	2300      	movs	r3, #0
 8010f24:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8010f26:	68bb      	ldr	r3, [r7, #8]
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d101      	bne.n	8010f30 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8010f2c:	4b1c      	ldr	r3, [pc, #112]	; (8010fa0 <netif_set_addr+0x90>)
 8010f2e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d101      	bne.n	8010f3a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8010f36:	4b1a      	ldr	r3, [pc, #104]	; (8010fa0 <netif_set_addr+0x90>)
 8010f38:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8010f3a:	683b      	ldr	r3, [r7, #0]
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d101      	bne.n	8010f44 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8010f40:	4b17      	ldr	r3, [pc, #92]	; (8010fa0 <netif_set_addr+0x90>)
 8010f42:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8010f44:	68bb      	ldr	r3, [r7, #8]
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d003      	beq.n	8010f52 <netif_set_addr+0x42>
 8010f4a:	68bb      	ldr	r3, [r7, #8]
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	d101      	bne.n	8010f56 <netif_set_addr+0x46>
 8010f52:	2301      	movs	r3, #1
 8010f54:	e000      	b.n	8010f58 <netif_set_addr+0x48>
 8010f56:	2300      	movs	r3, #0
 8010f58:	617b      	str	r3, [r7, #20]
  if (remove) {
 8010f5a:	697b      	ldr	r3, [r7, #20]
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d006      	beq.n	8010f6e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8010f60:	f107 0310 	add.w	r3, r7, #16
 8010f64:	461a      	mov	r2, r3
 8010f66:	68b9      	ldr	r1, [r7, #8]
 8010f68:	68f8      	ldr	r0, [r7, #12]
 8010f6a:	f7ff fef7 	bl	8010d5c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8010f6e:	69fa      	ldr	r2, [r7, #28]
 8010f70:	6879      	ldr	r1, [r7, #4]
 8010f72:	68f8      	ldr	r0, [r7, #12]
 8010f74:	f7ff ff64 	bl	8010e40 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8010f78:	69ba      	ldr	r2, [r7, #24]
 8010f7a:	6839      	ldr	r1, [r7, #0]
 8010f7c:	68f8      	ldr	r0, [r7, #12]
 8010f7e:	f7ff ffa7 	bl	8010ed0 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8010f82:	697b      	ldr	r3, [r7, #20]
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d106      	bne.n	8010f96 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8010f88:	f107 0310 	add.w	r3, r7, #16
 8010f8c:	461a      	mov	r2, r3
 8010f8e:	68b9      	ldr	r1, [r7, #8]
 8010f90:	68f8      	ldr	r0, [r7, #12]
 8010f92:	f7ff fee3 	bl	8010d5c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8010f96:	bf00      	nop
 8010f98:	3720      	adds	r7, #32
 8010f9a:	46bd      	mov	sp, r7
 8010f9c:	bd80      	pop	{r7, pc}
 8010f9e:	bf00      	nop
 8010fa0:	0802304c 	.word	0x0802304c

08010fa4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8010fa4:	b480      	push	{r7}
 8010fa6:	b083      	sub	sp, #12
 8010fa8:	af00      	add	r7, sp, #0
 8010faa:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8010fac:	4a04      	ldr	r2, [pc, #16]	; (8010fc0 <netif_set_default+0x1c>)
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8010fb2:	bf00      	nop
 8010fb4:	370c      	adds	r7, #12
 8010fb6:	46bd      	mov	sp, r7
 8010fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fbc:	4770      	bx	lr
 8010fbe:	bf00      	nop
 8010fc0:	2000b610 	.word	0x2000b610

08010fc4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8010fc4:	b580      	push	{r7, lr}
 8010fc6:	b082      	sub	sp, #8
 8010fc8:	af00      	add	r7, sp, #0
 8010fca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d107      	bne.n	8010fe2 <netif_set_up+0x1e>
 8010fd2:	4b0f      	ldr	r3, [pc, #60]	; (8011010 <netif_set_up+0x4c>)
 8010fd4:	f44f 7254 	mov.w	r2, #848	; 0x350
 8010fd8:	490e      	ldr	r1, [pc, #56]	; (8011014 <netif_set_up+0x50>)
 8010fda:	480f      	ldr	r0, [pc, #60]	; (8011018 <netif_set_up+0x54>)
 8010fdc:	f00b fb80 	bl	801c6e0 <iprintf>
 8010fe0:	e013      	b.n	801100a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8010fe8:	f003 0301 	and.w	r3, r3, #1
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d10c      	bne.n	801100a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8010ff6:	f043 0301 	orr.w	r3, r3, #1
 8010ffa:	b2da      	uxtb	r2, r3
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8011002:	2103      	movs	r1, #3
 8011004:	6878      	ldr	r0, [r7, #4]
 8011006:	f000 f809 	bl	801101c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 801100a:	3708      	adds	r7, #8
 801100c:	46bd      	mov	sp, r7
 801100e:	bd80      	pop	{r7, pc}
 8011010:	0801f940 	.word	0x0801f940
 8011014:	0801fac8 	.word	0x0801fac8
 8011018:	0801f990 	.word	0x0801f990

0801101c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 801101c:	b580      	push	{r7, lr}
 801101e:	b082      	sub	sp, #8
 8011020:	af00      	add	r7, sp, #0
 8011022:	6078      	str	r0, [r7, #4]
 8011024:	460b      	mov	r3, r1
 8011026:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	2b00      	cmp	r3, #0
 801102c:	d106      	bne.n	801103c <netif_issue_reports+0x20>
 801102e:	4b18      	ldr	r3, [pc, #96]	; (8011090 <netif_issue_reports+0x74>)
 8011030:	f240 326d 	movw	r2, #877	; 0x36d
 8011034:	4917      	ldr	r1, [pc, #92]	; (8011094 <netif_issue_reports+0x78>)
 8011036:	4818      	ldr	r0, [pc, #96]	; (8011098 <netif_issue_reports+0x7c>)
 8011038:	f00b fb52 	bl	801c6e0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8011042:	f003 0304 	and.w	r3, r3, #4
 8011046:	2b00      	cmp	r3, #0
 8011048:	d01e      	beq.n	8011088 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8011050:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8011054:	2b00      	cmp	r3, #0
 8011056:	d017      	beq.n	8011088 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8011058:	78fb      	ldrb	r3, [r7, #3]
 801105a:	f003 0301 	and.w	r3, r3, #1
 801105e:	2b00      	cmp	r3, #0
 8011060:	d013      	beq.n	801108a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	3304      	adds	r3, #4
 8011066:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8011068:	2b00      	cmp	r3, #0
 801106a:	d00e      	beq.n	801108a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8011072:	f003 0308 	and.w	r3, r3, #8
 8011076:	2b00      	cmp	r3, #0
 8011078:	d007      	beq.n	801108a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	3304      	adds	r3, #4
 801107e:	4619      	mov	r1, r3
 8011080:	6878      	ldr	r0, [r7, #4]
 8011082:	f008 fcd3 	bl	8019a2c <etharp_request>
 8011086:	e000      	b.n	801108a <netif_issue_reports+0x6e>
    return;
 8011088:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 801108a:	3708      	adds	r7, #8
 801108c:	46bd      	mov	sp, r7
 801108e:	bd80      	pop	{r7, pc}
 8011090:	0801f940 	.word	0x0801f940
 8011094:	0801fae4 	.word	0x0801fae4
 8011098:	0801f990 	.word	0x0801f990

0801109c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 801109c:	b580      	push	{r7, lr}
 801109e:	b082      	sub	sp, #8
 80110a0:	af00      	add	r7, sp, #0
 80110a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d107      	bne.n	80110ba <netif_set_down+0x1e>
 80110aa:	4b12      	ldr	r3, [pc, #72]	; (80110f4 <netif_set_down+0x58>)
 80110ac:	f240 329b 	movw	r2, #923	; 0x39b
 80110b0:	4911      	ldr	r1, [pc, #68]	; (80110f8 <netif_set_down+0x5c>)
 80110b2:	4812      	ldr	r0, [pc, #72]	; (80110fc <netif_set_down+0x60>)
 80110b4:	f00b fb14 	bl	801c6e0 <iprintf>
 80110b8:	e019      	b.n	80110ee <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80110c0:	f003 0301 	and.w	r3, r3, #1
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d012      	beq.n	80110ee <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80110ce:	f023 0301 	bic.w	r3, r3, #1
 80110d2:	b2da      	uxtb	r2, r3
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80110e0:	f003 0308 	and.w	r3, r3, #8
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d002      	beq.n	80110ee <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80110e8:	6878      	ldr	r0, [r7, #4]
 80110ea:	f008 f85d 	bl	80191a8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80110ee:	3708      	adds	r7, #8
 80110f0:	46bd      	mov	sp, r7
 80110f2:	bd80      	pop	{r7, pc}
 80110f4:	0801f940 	.word	0x0801f940
 80110f8:	0801fb08 	.word	0x0801fb08
 80110fc:	0801f990 	.word	0x0801f990

08011100 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8011100:	b480      	push	{r7}
 8011102:	b085      	sub	sp, #20
 8011104:	af00      	add	r7, sp, #0
 8011106:	60f8      	str	r0, [r7, #12]
 8011108:	60b9      	str	r1, [r7, #8]
 801110a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 801110c:	f06f 030b 	mvn.w	r3, #11
}
 8011110:	4618      	mov	r0, r3
 8011112:	3714      	adds	r7, #20
 8011114:	46bd      	mov	sp, r7
 8011116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801111a:	4770      	bx	lr

0801111c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 801111c:	b480      	push	{r7}
 801111e:	b085      	sub	sp, #20
 8011120:	af00      	add	r7, sp, #0
 8011122:	4603      	mov	r3, r0
 8011124:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8011126:	79fb      	ldrb	r3, [r7, #7]
 8011128:	2b00      	cmp	r3, #0
 801112a:	d013      	beq.n	8011154 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 801112c:	4b0d      	ldr	r3, [pc, #52]	; (8011164 <netif_get_by_index+0x48>)
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	60fb      	str	r3, [r7, #12]
 8011132:	e00c      	b.n	801114e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801113a:	3301      	adds	r3, #1
 801113c:	b2db      	uxtb	r3, r3
 801113e:	79fa      	ldrb	r2, [r7, #7]
 8011140:	429a      	cmp	r2, r3
 8011142:	d101      	bne.n	8011148 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	e006      	b.n	8011156 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8011148:	68fb      	ldr	r3, [r7, #12]
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	60fb      	str	r3, [r7, #12]
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	2b00      	cmp	r3, #0
 8011152:	d1ef      	bne.n	8011134 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8011154:	2300      	movs	r3, #0
}
 8011156:	4618      	mov	r0, r3
 8011158:	3714      	adds	r7, #20
 801115a:	46bd      	mov	sp, r7
 801115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011160:	4770      	bx	lr
 8011162:	bf00      	nop
 8011164:	2000b60c 	.word	0x2000b60c

08011168 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8011168:	b580      	push	{r7, lr}
 801116a:	b082      	sub	sp, #8
 801116c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801116e:	f00a fad1 	bl	801b714 <sys_arch_protect>
 8011172:	6038      	str	r0, [r7, #0]
 8011174:	4b0d      	ldr	r3, [pc, #52]	; (80111ac <pbuf_free_ooseq+0x44>)
 8011176:	2200      	movs	r2, #0
 8011178:	701a      	strb	r2, [r3, #0]
 801117a:	6838      	ldr	r0, [r7, #0]
 801117c:	f00a fad8 	bl	801b730 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8011180:	4b0b      	ldr	r3, [pc, #44]	; (80111b0 <pbuf_free_ooseq+0x48>)
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	607b      	str	r3, [r7, #4]
 8011186:	e00a      	b.n	801119e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801118c:	2b00      	cmp	r3, #0
 801118e:	d003      	beq.n	8011198 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8011190:	6878      	ldr	r0, [r7, #4]
 8011192:	f002 fc83 	bl	8013a9c <tcp_free_ooseq>
      return;
 8011196:	e005      	b.n	80111a4 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	68db      	ldr	r3, [r3, #12]
 801119c:	607b      	str	r3, [r7, #4]
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d1f1      	bne.n	8011188 <pbuf_free_ooseq+0x20>
    }
  }
}
 80111a4:	3708      	adds	r7, #8
 80111a6:	46bd      	mov	sp, r7
 80111a8:	bd80      	pop	{r7, pc}
 80111aa:	bf00      	nop
 80111ac:	2000b614 	.word	0x2000b614
 80111b0:	2000b61c 	.word	0x2000b61c

080111b4 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 80111b4:	b580      	push	{r7, lr}
 80111b6:	b082      	sub	sp, #8
 80111b8:	af00      	add	r7, sp, #0
 80111ba:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 80111bc:	f7ff ffd4 	bl	8011168 <pbuf_free_ooseq>
}
 80111c0:	bf00      	nop
 80111c2:	3708      	adds	r7, #8
 80111c4:	46bd      	mov	sp, r7
 80111c6:	bd80      	pop	{r7, pc}

080111c8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80111c8:	b580      	push	{r7, lr}
 80111ca:	b082      	sub	sp, #8
 80111cc:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 80111ce:	f00a faa1 	bl	801b714 <sys_arch_protect>
 80111d2:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 80111d4:	4b0f      	ldr	r3, [pc, #60]	; (8011214 <pbuf_pool_is_empty+0x4c>)
 80111d6:	781b      	ldrb	r3, [r3, #0]
 80111d8:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 80111da:	4b0e      	ldr	r3, [pc, #56]	; (8011214 <pbuf_pool_is_empty+0x4c>)
 80111dc:	2201      	movs	r2, #1
 80111de:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 80111e0:	6878      	ldr	r0, [r7, #4]
 80111e2:	f00a faa5 	bl	801b730 <sys_arch_unprotect>

  if (!queued) {
 80111e6:	78fb      	ldrb	r3, [r7, #3]
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d10f      	bne.n	801120c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 80111ec:	2100      	movs	r1, #0
 80111ee:	480a      	ldr	r0, [pc, #40]	; (8011218 <pbuf_pool_is_empty+0x50>)
 80111f0:	f7fe f8ac 	bl	800f34c <tcpip_try_callback>
 80111f4:	4603      	mov	r3, r0
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d008      	beq.n	801120c <pbuf_pool_is_empty+0x44>
 80111fa:	f00a fa8b 	bl	801b714 <sys_arch_protect>
 80111fe:	6078      	str	r0, [r7, #4]
 8011200:	4b04      	ldr	r3, [pc, #16]	; (8011214 <pbuf_pool_is_empty+0x4c>)
 8011202:	2200      	movs	r2, #0
 8011204:	701a      	strb	r2, [r3, #0]
 8011206:	6878      	ldr	r0, [r7, #4]
 8011208:	f00a fa92 	bl	801b730 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 801120c:	bf00      	nop
 801120e:	3708      	adds	r7, #8
 8011210:	46bd      	mov	sp, r7
 8011212:	bd80      	pop	{r7, pc}
 8011214:	2000b614 	.word	0x2000b614
 8011218:	080111b5 	.word	0x080111b5

0801121c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 801121c:	b480      	push	{r7}
 801121e:	b085      	sub	sp, #20
 8011220:	af00      	add	r7, sp, #0
 8011222:	60f8      	str	r0, [r7, #12]
 8011224:	60b9      	str	r1, [r7, #8]
 8011226:	4611      	mov	r1, r2
 8011228:	461a      	mov	r2, r3
 801122a:	460b      	mov	r3, r1
 801122c:	80fb      	strh	r3, [r7, #6]
 801122e:	4613      	mov	r3, r2
 8011230:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	2200      	movs	r2, #0
 8011236:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	68ba      	ldr	r2, [r7, #8]
 801123c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	88fa      	ldrh	r2, [r7, #6]
 8011242:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	88ba      	ldrh	r2, [r7, #4]
 8011248:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 801124a:	8b3b      	ldrh	r3, [r7, #24]
 801124c:	b2da      	uxtb	r2, r3
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8011252:	68fb      	ldr	r3, [r7, #12]
 8011254:	7f3a      	ldrb	r2, [r7, #28]
 8011256:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	2201      	movs	r2, #1
 801125c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	2200      	movs	r2, #0
 8011262:	73da      	strb	r2, [r3, #15]
}
 8011264:	bf00      	nop
 8011266:	3714      	adds	r7, #20
 8011268:	46bd      	mov	sp, r7
 801126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801126e:	4770      	bx	lr

08011270 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8011270:	b580      	push	{r7, lr}
 8011272:	b08c      	sub	sp, #48	; 0x30
 8011274:	af02      	add	r7, sp, #8
 8011276:	4603      	mov	r3, r0
 8011278:	71fb      	strb	r3, [r7, #7]
 801127a:	460b      	mov	r3, r1
 801127c:	80bb      	strh	r3, [r7, #4]
 801127e:	4613      	mov	r3, r2
 8011280:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8011282:	79fb      	ldrb	r3, [r7, #7]
 8011284:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8011286:	887b      	ldrh	r3, [r7, #2]
 8011288:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 801128c:	d07f      	beq.n	801138e <pbuf_alloc+0x11e>
 801128e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8011292:	f300 80c8 	bgt.w	8011426 <pbuf_alloc+0x1b6>
 8011296:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 801129a:	d010      	beq.n	80112be <pbuf_alloc+0x4e>
 801129c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80112a0:	f300 80c1 	bgt.w	8011426 <pbuf_alloc+0x1b6>
 80112a4:	2b01      	cmp	r3, #1
 80112a6:	d002      	beq.n	80112ae <pbuf_alloc+0x3e>
 80112a8:	2b41      	cmp	r3, #65	; 0x41
 80112aa:	f040 80bc 	bne.w	8011426 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80112ae:	887a      	ldrh	r2, [r7, #2]
 80112b0:	88bb      	ldrh	r3, [r7, #4]
 80112b2:	4619      	mov	r1, r3
 80112b4:	2000      	movs	r0, #0
 80112b6:	f000 f8d1 	bl	801145c <pbuf_alloc_reference>
 80112ba:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80112bc:	e0bd      	b.n	801143a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80112be:	2300      	movs	r3, #0
 80112c0:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80112c2:	2300      	movs	r3, #0
 80112c4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80112c6:	88bb      	ldrh	r3, [r7, #4]
 80112c8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80112ca:	200c      	movs	r0, #12
 80112cc:	f7ff fbe4 	bl	8010a98 <memp_malloc>
 80112d0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80112d2:	693b      	ldr	r3, [r7, #16]
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d109      	bne.n	80112ec <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80112d8:	f7ff ff76 	bl	80111c8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80112dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d002      	beq.n	80112e8 <pbuf_alloc+0x78>
            pbuf_free(p);
 80112e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80112e4:	f000 faa8 	bl	8011838 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80112e8:	2300      	movs	r3, #0
 80112ea:	e0a7      	b.n	801143c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80112ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80112ee:	3303      	adds	r3, #3
 80112f0:	b29b      	uxth	r3, r3
 80112f2:	f023 0303 	bic.w	r3, r3, #3
 80112f6:	b29b      	uxth	r3, r3
 80112f8:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80112fc:	b29b      	uxth	r3, r3
 80112fe:	8b7a      	ldrh	r2, [r7, #26]
 8011300:	4293      	cmp	r3, r2
 8011302:	bf28      	it	cs
 8011304:	4613      	movcs	r3, r2
 8011306:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8011308:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801130a:	3310      	adds	r3, #16
 801130c:	693a      	ldr	r2, [r7, #16]
 801130e:	4413      	add	r3, r2
 8011310:	3303      	adds	r3, #3
 8011312:	f023 0303 	bic.w	r3, r3, #3
 8011316:	4618      	mov	r0, r3
 8011318:	89f9      	ldrh	r1, [r7, #14]
 801131a:	8b7a      	ldrh	r2, [r7, #26]
 801131c:	2300      	movs	r3, #0
 801131e:	9301      	str	r3, [sp, #4]
 8011320:	887b      	ldrh	r3, [r7, #2]
 8011322:	9300      	str	r3, [sp, #0]
 8011324:	460b      	mov	r3, r1
 8011326:	4601      	mov	r1, r0
 8011328:	6938      	ldr	r0, [r7, #16]
 801132a:	f7ff ff77 	bl	801121c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801132e:	693b      	ldr	r3, [r7, #16]
 8011330:	685b      	ldr	r3, [r3, #4]
 8011332:	f003 0303 	and.w	r3, r3, #3
 8011336:	2b00      	cmp	r3, #0
 8011338:	d006      	beq.n	8011348 <pbuf_alloc+0xd8>
 801133a:	4b42      	ldr	r3, [pc, #264]	; (8011444 <pbuf_alloc+0x1d4>)
 801133c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011340:	4941      	ldr	r1, [pc, #260]	; (8011448 <pbuf_alloc+0x1d8>)
 8011342:	4842      	ldr	r0, [pc, #264]	; (801144c <pbuf_alloc+0x1dc>)
 8011344:	f00b f9cc 	bl	801c6e0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8011348:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801134a:	3303      	adds	r3, #3
 801134c:	f023 0303 	bic.w	r3, r3, #3
 8011350:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8011354:	d106      	bne.n	8011364 <pbuf_alloc+0xf4>
 8011356:	4b3b      	ldr	r3, [pc, #236]	; (8011444 <pbuf_alloc+0x1d4>)
 8011358:	f44f 7281 	mov.w	r2, #258	; 0x102
 801135c:	493c      	ldr	r1, [pc, #240]	; (8011450 <pbuf_alloc+0x1e0>)
 801135e:	483b      	ldr	r0, [pc, #236]	; (801144c <pbuf_alloc+0x1dc>)
 8011360:	f00b f9be 	bl	801c6e0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8011364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011366:	2b00      	cmp	r3, #0
 8011368:	d102      	bne.n	8011370 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 801136a:	693b      	ldr	r3, [r7, #16]
 801136c:	627b      	str	r3, [r7, #36]	; 0x24
 801136e:	e002      	b.n	8011376 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8011370:	69fb      	ldr	r3, [r7, #28]
 8011372:	693a      	ldr	r2, [r7, #16]
 8011374:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8011376:	693b      	ldr	r3, [r7, #16]
 8011378:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 801137a:	8b7a      	ldrh	r2, [r7, #26]
 801137c:	89fb      	ldrh	r3, [r7, #14]
 801137e:	1ad3      	subs	r3, r2, r3
 8011380:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8011382:	2300      	movs	r3, #0
 8011384:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8011386:	8b7b      	ldrh	r3, [r7, #26]
 8011388:	2b00      	cmp	r3, #0
 801138a:	d19e      	bne.n	80112ca <pbuf_alloc+0x5a>
      break;
 801138c:	e055      	b.n	801143a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801138e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011390:	3303      	adds	r3, #3
 8011392:	b29b      	uxth	r3, r3
 8011394:	f023 0303 	bic.w	r3, r3, #3
 8011398:	b29a      	uxth	r2, r3
 801139a:	88bb      	ldrh	r3, [r7, #4]
 801139c:	3303      	adds	r3, #3
 801139e:	b29b      	uxth	r3, r3
 80113a0:	f023 0303 	bic.w	r3, r3, #3
 80113a4:	b29b      	uxth	r3, r3
 80113a6:	4413      	add	r3, r2
 80113a8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80113aa:	8b3b      	ldrh	r3, [r7, #24]
 80113ac:	3310      	adds	r3, #16
 80113ae:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80113b0:	8b3a      	ldrh	r2, [r7, #24]
 80113b2:	88bb      	ldrh	r3, [r7, #4]
 80113b4:	3303      	adds	r3, #3
 80113b6:	f023 0303 	bic.w	r3, r3, #3
 80113ba:	429a      	cmp	r2, r3
 80113bc:	d306      	bcc.n	80113cc <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80113be:	8afa      	ldrh	r2, [r7, #22]
 80113c0:	88bb      	ldrh	r3, [r7, #4]
 80113c2:	3303      	adds	r3, #3
 80113c4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80113c8:	429a      	cmp	r2, r3
 80113ca:	d201      	bcs.n	80113d0 <pbuf_alloc+0x160>
        return NULL;
 80113cc:	2300      	movs	r3, #0
 80113ce:	e035      	b.n	801143c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80113d0:	8afb      	ldrh	r3, [r7, #22]
 80113d2:	4618      	mov	r0, r3
 80113d4:	f7ff f9de 	bl	8010794 <mem_malloc>
 80113d8:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80113da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d101      	bne.n	80113e4 <pbuf_alloc+0x174>
        return NULL;
 80113e0:	2300      	movs	r3, #0
 80113e2:	e02b      	b.n	801143c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80113e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80113e6:	3310      	adds	r3, #16
 80113e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80113ea:	4413      	add	r3, r2
 80113ec:	3303      	adds	r3, #3
 80113ee:	f023 0303 	bic.w	r3, r3, #3
 80113f2:	4618      	mov	r0, r3
 80113f4:	88b9      	ldrh	r1, [r7, #4]
 80113f6:	88ba      	ldrh	r2, [r7, #4]
 80113f8:	2300      	movs	r3, #0
 80113fa:	9301      	str	r3, [sp, #4]
 80113fc:	887b      	ldrh	r3, [r7, #2]
 80113fe:	9300      	str	r3, [sp, #0]
 8011400:	460b      	mov	r3, r1
 8011402:	4601      	mov	r1, r0
 8011404:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011406:	f7ff ff09 	bl	801121c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801140a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801140c:	685b      	ldr	r3, [r3, #4]
 801140e:	f003 0303 	and.w	r3, r3, #3
 8011412:	2b00      	cmp	r3, #0
 8011414:	d010      	beq.n	8011438 <pbuf_alloc+0x1c8>
 8011416:	4b0b      	ldr	r3, [pc, #44]	; (8011444 <pbuf_alloc+0x1d4>)
 8011418:	f44f 7291 	mov.w	r2, #290	; 0x122
 801141c:	490d      	ldr	r1, [pc, #52]	; (8011454 <pbuf_alloc+0x1e4>)
 801141e:	480b      	ldr	r0, [pc, #44]	; (801144c <pbuf_alloc+0x1dc>)
 8011420:	f00b f95e 	bl	801c6e0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8011424:	e008      	b.n	8011438 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8011426:	4b07      	ldr	r3, [pc, #28]	; (8011444 <pbuf_alloc+0x1d4>)
 8011428:	f240 1227 	movw	r2, #295	; 0x127
 801142c:	490a      	ldr	r1, [pc, #40]	; (8011458 <pbuf_alloc+0x1e8>)
 801142e:	4807      	ldr	r0, [pc, #28]	; (801144c <pbuf_alloc+0x1dc>)
 8011430:	f00b f956 	bl	801c6e0 <iprintf>
      return NULL;
 8011434:	2300      	movs	r3, #0
 8011436:	e001      	b.n	801143c <pbuf_alloc+0x1cc>
      break;
 8011438:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 801143a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801143c:	4618      	mov	r0, r3
 801143e:	3728      	adds	r7, #40	; 0x28
 8011440:	46bd      	mov	sp, r7
 8011442:	bd80      	pop	{r7, pc}
 8011444:	0801fb70 	.word	0x0801fb70
 8011448:	0801fba0 	.word	0x0801fba0
 801144c:	0801fbd0 	.word	0x0801fbd0
 8011450:	0801fbf8 	.word	0x0801fbf8
 8011454:	0801fc2c 	.word	0x0801fc2c
 8011458:	0801fc58 	.word	0x0801fc58

0801145c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 801145c:	b580      	push	{r7, lr}
 801145e:	b086      	sub	sp, #24
 8011460:	af02      	add	r7, sp, #8
 8011462:	6078      	str	r0, [r7, #4]
 8011464:	460b      	mov	r3, r1
 8011466:	807b      	strh	r3, [r7, #2]
 8011468:	4613      	mov	r3, r2
 801146a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801146c:	883b      	ldrh	r3, [r7, #0]
 801146e:	2b41      	cmp	r3, #65	; 0x41
 8011470:	d009      	beq.n	8011486 <pbuf_alloc_reference+0x2a>
 8011472:	883b      	ldrh	r3, [r7, #0]
 8011474:	2b01      	cmp	r3, #1
 8011476:	d006      	beq.n	8011486 <pbuf_alloc_reference+0x2a>
 8011478:	4b0f      	ldr	r3, [pc, #60]	; (80114b8 <pbuf_alloc_reference+0x5c>)
 801147a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 801147e:	490f      	ldr	r1, [pc, #60]	; (80114bc <pbuf_alloc_reference+0x60>)
 8011480:	480f      	ldr	r0, [pc, #60]	; (80114c0 <pbuf_alloc_reference+0x64>)
 8011482:	f00b f92d 	bl	801c6e0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8011486:	200b      	movs	r0, #11
 8011488:	f7ff fb06 	bl	8010a98 <memp_malloc>
 801148c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	2b00      	cmp	r3, #0
 8011492:	d101      	bne.n	8011498 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8011494:	2300      	movs	r3, #0
 8011496:	e00b      	b.n	80114b0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8011498:	8879      	ldrh	r1, [r7, #2]
 801149a:	887a      	ldrh	r2, [r7, #2]
 801149c:	2300      	movs	r3, #0
 801149e:	9301      	str	r3, [sp, #4]
 80114a0:	883b      	ldrh	r3, [r7, #0]
 80114a2:	9300      	str	r3, [sp, #0]
 80114a4:	460b      	mov	r3, r1
 80114a6:	6879      	ldr	r1, [r7, #4]
 80114a8:	68f8      	ldr	r0, [r7, #12]
 80114aa:	f7ff feb7 	bl	801121c <pbuf_init_alloced_pbuf>
  return p;
 80114ae:	68fb      	ldr	r3, [r7, #12]
}
 80114b0:	4618      	mov	r0, r3
 80114b2:	3710      	adds	r7, #16
 80114b4:	46bd      	mov	sp, r7
 80114b6:	bd80      	pop	{r7, pc}
 80114b8:	0801fb70 	.word	0x0801fb70
 80114bc:	0801fc74 	.word	0x0801fc74
 80114c0:	0801fbd0 	.word	0x0801fbd0

080114c4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80114c4:	b580      	push	{r7, lr}
 80114c6:	b088      	sub	sp, #32
 80114c8:	af02      	add	r7, sp, #8
 80114ca:	607b      	str	r3, [r7, #4]
 80114cc:	4603      	mov	r3, r0
 80114ce:	73fb      	strb	r3, [r7, #15]
 80114d0:	460b      	mov	r3, r1
 80114d2:	81bb      	strh	r3, [r7, #12]
 80114d4:	4613      	mov	r3, r2
 80114d6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80114d8:	7bfb      	ldrb	r3, [r7, #15]
 80114da:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80114dc:	8a7b      	ldrh	r3, [r7, #18]
 80114de:	3303      	adds	r3, #3
 80114e0:	f023 0203 	bic.w	r2, r3, #3
 80114e4:	89bb      	ldrh	r3, [r7, #12]
 80114e6:	441a      	add	r2, r3
 80114e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80114ea:	429a      	cmp	r2, r3
 80114ec:	d901      	bls.n	80114f2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80114ee:	2300      	movs	r3, #0
 80114f0:	e018      	b.n	8011524 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80114f2:	6a3b      	ldr	r3, [r7, #32]
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d007      	beq.n	8011508 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80114f8:	8a7b      	ldrh	r3, [r7, #18]
 80114fa:	3303      	adds	r3, #3
 80114fc:	f023 0303 	bic.w	r3, r3, #3
 8011500:	6a3a      	ldr	r2, [r7, #32]
 8011502:	4413      	add	r3, r2
 8011504:	617b      	str	r3, [r7, #20]
 8011506:	e001      	b.n	801150c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8011508:	2300      	movs	r3, #0
 801150a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 801150c:	6878      	ldr	r0, [r7, #4]
 801150e:	89b9      	ldrh	r1, [r7, #12]
 8011510:	89ba      	ldrh	r2, [r7, #12]
 8011512:	2302      	movs	r3, #2
 8011514:	9301      	str	r3, [sp, #4]
 8011516:	897b      	ldrh	r3, [r7, #10]
 8011518:	9300      	str	r3, [sp, #0]
 801151a:	460b      	mov	r3, r1
 801151c:	6979      	ldr	r1, [r7, #20]
 801151e:	f7ff fe7d 	bl	801121c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8011522:	687b      	ldr	r3, [r7, #4]
}
 8011524:	4618      	mov	r0, r3
 8011526:	3718      	adds	r7, #24
 8011528:	46bd      	mov	sp, r7
 801152a:	bd80      	pop	{r7, pc}

0801152c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 801152c:	b580      	push	{r7, lr}
 801152e:	b084      	sub	sp, #16
 8011530:	af00      	add	r7, sp, #0
 8011532:	6078      	str	r0, [r7, #4]
 8011534:	460b      	mov	r3, r1
 8011536:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	2b00      	cmp	r3, #0
 801153c:	d106      	bne.n	801154c <pbuf_realloc+0x20>
 801153e:	4b3a      	ldr	r3, [pc, #232]	; (8011628 <pbuf_realloc+0xfc>)
 8011540:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8011544:	4939      	ldr	r1, [pc, #228]	; (801162c <pbuf_realloc+0x100>)
 8011546:	483a      	ldr	r0, [pc, #232]	; (8011630 <pbuf_realloc+0x104>)
 8011548:	f00b f8ca 	bl	801c6e0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	891b      	ldrh	r3, [r3, #8]
 8011550:	887a      	ldrh	r2, [r7, #2]
 8011552:	429a      	cmp	r2, r3
 8011554:	d263      	bcs.n	801161e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	891a      	ldrh	r2, [r3, #8]
 801155a:	887b      	ldrh	r3, [r7, #2]
 801155c:	1ad3      	subs	r3, r2, r3
 801155e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8011560:	887b      	ldrh	r3, [r7, #2]
 8011562:	817b      	strh	r3, [r7, #10]
  q = p;
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8011568:	e018      	b.n	801159c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	895b      	ldrh	r3, [r3, #10]
 801156e:	897a      	ldrh	r2, [r7, #10]
 8011570:	1ad3      	subs	r3, r2, r3
 8011572:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8011574:	68fb      	ldr	r3, [r7, #12]
 8011576:	891a      	ldrh	r2, [r3, #8]
 8011578:	893b      	ldrh	r3, [r7, #8]
 801157a:	1ad3      	subs	r3, r2, r3
 801157c:	b29a      	uxth	r2, r3
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8011582:	68fb      	ldr	r3, [r7, #12]
 8011584:	681b      	ldr	r3, [r3, #0]
 8011586:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	2b00      	cmp	r3, #0
 801158c:	d106      	bne.n	801159c <pbuf_realloc+0x70>
 801158e:	4b26      	ldr	r3, [pc, #152]	; (8011628 <pbuf_realloc+0xfc>)
 8011590:	f240 12af 	movw	r2, #431	; 0x1af
 8011594:	4927      	ldr	r1, [pc, #156]	; (8011634 <pbuf_realloc+0x108>)
 8011596:	4826      	ldr	r0, [pc, #152]	; (8011630 <pbuf_realloc+0x104>)
 8011598:	f00b f8a2 	bl	801c6e0 <iprintf>
  while (rem_len > q->len) {
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	895b      	ldrh	r3, [r3, #10]
 80115a0:	897a      	ldrh	r2, [r7, #10]
 80115a2:	429a      	cmp	r2, r3
 80115a4:	d8e1      	bhi.n	801156a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	7b1b      	ldrb	r3, [r3, #12]
 80115aa:	f003 030f 	and.w	r3, r3, #15
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d121      	bne.n	80115f6 <pbuf_realloc+0xca>
 80115b2:	68fb      	ldr	r3, [r7, #12]
 80115b4:	895b      	ldrh	r3, [r3, #10]
 80115b6:	897a      	ldrh	r2, [r7, #10]
 80115b8:	429a      	cmp	r2, r3
 80115ba:	d01c      	beq.n	80115f6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80115bc:	68fb      	ldr	r3, [r7, #12]
 80115be:	7b5b      	ldrb	r3, [r3, #13]
 80115c0:	f003 0302 	and.w	r3, r3, #2
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d116      	bne.n	80115f6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	685a      	ldr	r2, [r3, #4]
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	1ad3      	subs	r3, r2, r3
 80115d0:	b29a      	uxth	r2, r3
 80115d2:	897b      	ldrh	r3, [r7, #10]
 80115d4:	4413      	add	r3, r2
 80115d6:	b29b      	uxth	r3, r3
 80115d8:	4619      	mov	r1, r3
 80115da:	68f8      	ldr	r0, [r7, #12]
 80115dc:	f7fe ffd0 	bl	8010580 <mem_trim>
 80115e0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d106      	bne.n	80115f6 <pbuf_realloc+0xca>
 80115e8:	4b0f      	ldr	r3, [pc, #60]	; (8011628 <pbuf_realloc+0xfc>)
 80115ea:	f240 12bd 	movw	r2, #445	; 0x1bd
 80115ee:	4912      	ldr	r1, [pc, #72]	; (8011638 <pbuf_realloc+0x10c>)
 80115f0:	480f      	ldr	r0, [pc, #60]	; (8011630 <pbuf_realloc+0x104>)
 80115f2:	f00b f875 	bl	801c6e0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80115f6:	68fb      	ldr	r3, [r7, #12]
 80115f8:	897a      	ldrh	r2, [r7, #10]
 80115fa:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	895a      	ldrh	r2, [r3, #10]
 8011600:	68fb      	ldr	r3, [r7, #12]
 8011602:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8011604:	68fb      	ldr	r3, [r7, #12]
 8011606:	681b      	ldr	r3, [r3, #0]
 8011608:	2b00      	cmp	r3, #0
 801160a:	d004      	beq.n	8011616 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 801160c:	68fb      	ldr	r3, [r7, #12]
 801160e:	681b      	ldr	r3, [r3, #0]
 8011610:	4618      	mov	r0, r3
 8011612:	f000 f911 	bl	8011838 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	2200      	movs	r2, #0
 801161a:	601a      	str	r2, [r3, #0]
 801161c:	e000      	b.n	8011620 <pbuf_realloc+0xf4>
    return;
 801161e:	bf00      	nop

}
 8011620:	3710      	adds	r7, #16
 8011622:	46bd      	mov	sp, r7
 8011624:	bd80      	pop	{r7, pc}
 8011626:	bf00      	nop
 8011628:	0801fb70 	.word	0x0801fb70
 801162c:	0801fc88 	.word	0x0801fc88
 8011630:	0801fbd0 	.word	0x0801fbd0
 8011634:	0801fca0 	.word	0x0801fca0
 8011638:	0801fcb8 	.word	0x0801fcb8

0801163c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 801163c:	b580      	push	{r7, lr}
 801163e:	b086      	sub	sp, #24
 8011640:	af00      	add	r7, sp, #0
 8011642:	60f8      	str	r0, [r7, #12]
 8011644:	60b9      	str	r1, [r7, #8]
 8011646:	4613      	mov	r3, r2
 8011648:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	2b00      	cmp	r3, #0
 801164e:	d106      	bne.n	801165e <pbuf_add_header_impl+0x22>
 8011650:	4b2b      	ldr	r3, [pc, #172]	; (8011700 <pbuf_add_header_impl+0xc4>)
 8011652:	f240 12df 	movw	r2, #479	; 0x1df
 8011656:	492b      	ldr	r1, [pc, #172]	; (8011704 <pbuf_add_header_impl+0xc8>)
 8011658:	482b      	ldr	r0, [pc, #172]	; (8011708 <pbuf_add_header_impl+0xcc>)
 801165a:	f00b f841 	bl	801c6e0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	2b00      	cmp	r3, #0
 8011662:	d003      	beq.n	801166c <pbuf_add_header_impl+0x30>
 8011664:	68bb      	ldr	r3, [r7, #8]
 8011666:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801166a:	d301      	bcc.n	8011670 <pbuf_add_header_impl+0x34>
    return 1;
 801166c:	2301      	movs	r3, #1
 801166e:	e043      	b.n	80116f8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8011670:	68bb      	ldr	r3, [r7, #8]
 8011672:	2b00      	cmp	r3, #0
 8011674:	d101      	bne.n	801167a <pbuf_add_header_impl+0x3e>
    return 0;
 8011676:	2300      	movs	r3, #0
 8011678:	e03e      	b.n	80116f8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 801167a:	68bb      	ldr	r3, [r7, #8]
 801167c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801167e:	68fb      	ldr	r3, [r7, #12]
 8011680:	891a      	ldrh	r2, [r3, #8]
 8011682:	8a7b      	ldrh	r3, [r7, #18]
 8011684:	4413      	add	r3, r2
 8011686:	b29b      	uxth	r3, r3
 8011688:	8a7a      	ldrh	r2, [r7, #18]
 801168a:	429a      	cmp	r2, r3
 801168c:	d901      	bls.n	8011692 <pbuf_add_header_impl+0x56>
    return 1;
 801168e:	2301      	movs	r3, #1
 8011690:	e032      	b.n	80116f8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	7b1b      	ldrb	r3, [r3, #12]
 8011696:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8011698:	8a3b      	ldrh	r3, [r7, #16]
 801169a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d00c      	beq.n	80116bc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	685a      	ldr	r2, [r3, #4]
 80116a6:	68bb      	ldr	r3, [r7, #8]
 80116a8:	425b      	negs	r3, r3
 80116aa:	4413      	add	r3, r2
 80116ac:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80116ae:	68fb      	ldr	r3, [r7, #12]
 80116b0:	3310      	adds	r3, #16
 80116b2:	697a      	ldr	r2, [r7, #20]
 80116b4:	429a      	cmp	r2, r3
 80116b6:	d20d      	bcs.n	80116d4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80116b8:	2301      	movs	r3, #1
 80116ba:	e01d      	b.n	80116f8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80116bc:	79fb      	ldrb	r3, [r7, #7]
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d006      	beq.n	80116d0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	685a      	ldr	r2, [r3, #4]
 80116c6:	68bb      	ldr	r3, [r7, #8]
 80116c8:	425b      	negs	r3, r3
 80116ca:	4413      	add	r3, r2
 80116cc:	617b      	str	r3, [r7, #20]
 80116ce:	e001      	b.n	80116d4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80116d0:	2301      	movs	r3, #1
 80116d2:	e011      	b.n	80116f8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80116d4:	68fb      	ldr	r3, [r7, #12]
 80116d6:	697a      	ldr	r2, [r7, #20]
 80116d8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	895a      	ldrh	r2, [r3, #10]
 80116de:	8a7b      	ldrh	r3, [r7, #18]
 80116e0:	4413      	add	r3, r2
 80116e2:	b29a      	uxth	r2, r3
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	891a      	ldrh	r2, [r3, #8]
 80116ec:	8a7b      	ldrh	r3, [r7, #18]
 80116ee:	4413      	add	r3, r2
 80116f0:	b29a      	uxth	r2, r3
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	811a      	strh	r2, [r3, #8]


  return 0;
 80116f6:	2300      	movs	r3, #0
}
 80116f8:	4618      	mov	r0, r3
 80116fa:	3718      	adds	r7, #24
 80116fc:	46bd      	mov	sp, r7
 80116fe:	bd80      	pop	{r7, pc}
 8011700:	0801fb70 	.word	0x0801fb70
 8011704:	0801fcd4 	.word	0x0801fcd4
 8011708:	0801fbd0 	.word	0x0801fbd0

0801170c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 801170c:	b580      	push	{r7, lr}
 801170e:	b082      	sub	sp, #8
 8011710:	af00      	add	r7, sp, #0
 8011712:	6078      	str	r0, [r7, #4]
 8011714:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8011716:	2200      	movs	r2, #0
 8011718:	6839      	ldr	r1, [r7, #0]
 801171a:	6878      	ldr	r0, [r7, #4]
 801171c:	f7ff ff8e 	bl	801163c <pbuf_add_header_impl>
 8011720:	4603      	mov	r3, r0
}
 8011722:	4618      	mov	r0, r3
 8011724:	3708      	adds	r7, #8
 8011726:	46bd      	mov	sp, r7
 8011728:	bd80      	pop	{r7, pc}
	...

0801172c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 801172c:	b580      	push	{r7, lr}
 801172e:	b084      	sub	sp, #16
 8011730:	af00      	add	r7, sp, #0
 8011732:	6078      	str	r0, [r7, #4]
 8011734:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	2b00      	cmp	r3, #0
 801173a:	d106      	bne.n	801174a <pbuf_remove_header+0x1e>
 801173c:	4b20      	ldr	r3, [pc, #128]	; (80117c0 <pbuf_remove_header+0x94>)
 801173e:	f240 224b 	movw	r2, #587	; 0x24b
 8011742:	4920      	ldr	r1, [pc, #128]	; (80117c4 <pbuf_remove_header+0x98>)
 8011744:	4820      	ldr	r0, [pc, #128]	; (80117c8 <pbuf_remove_header+0x9c>)
 8011746:	f00a ffcb 	bl	801c6e0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	2b00      	cmp	r3, #0
 801174e:	d003      	beq.n	8011758 <pbuf_remove_header+0x2c>
 8011750:	683b      	ldr	r3, [r7, #0]
 8011752:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011756:	d301      	bcc.n	801175c <pbuf_remove_header+0x30>
    return 1;
 8011758:	2301      	movs	r3, #1
 801175a:	e02c      	b.n	80117b6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 801175c:	683b      	ldr	r3, [r7, #0]
 801175e:	2b00      	cmp	r3, #0
 8011760:	d101      	bne.n	8011766 <pbuf_remove_header+0x3a>
    return 0;
 8011762:	2300      	movs	r3, #0
 8011764:	e027      	b.n	80117b6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8011766:	683b      	ldr	r3, [r7, #0]
 8011768:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	895b      	ldrh	r3, [r3, #10]
 801176e:	89fa      	ldrh	r2, [r7, #14]
 8011770:	429a      	cmp	r2, r3
 8011772:	d908      	bls.n	8011786 <pbuf_remove_header+0x5a>
 8011774:	4b12      	ldr	r3, [pc, #72]	; (80117c0 <pbuf_remove_header+0x94>)
 8011776:	f240 2255 	movw	r2, #597	; 0x255
 801177a:	4914      	ldr	r1, [pc, #80]	; (80117cc <pbuf_remove_header+0xa0>)
 801177c:	4812      	ldr	r0, [pc, #72]	; (80117c8 <pbuf_remove_header+0x9c>)
 801177e:	f00a ffaf 	bl	801c6e0 <iprintf>
 8011782:	2301      	movs	r3, #1
 8011784:	e017      	b.n	80117b6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	685b      	ldr	r3, [r3, #4]
 801178a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	685a      	ldr	r2, [r3, #4]
 8011790:	683b      	ldr	r3, [r7, #0]
 8011792:	441a      	add	r2, r3
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	895a      	ldrh	r2, [r3, #10]
 801179c:	89fb      	ldrh	r3, [r7, #14]
 801179e:	1ad3      	subs	r3, r2, r3
 80117a0:	b29a      	uxth	r2, r3
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	891a      	ldrh	r2, [r3, #8]
 80117aa:	89fb      	ldrh	r3, [r7, #14]
 80117ac:	1ad3      	subs	r3, r2, r3
 80117ae:	b29a      	uxth	r2, r3
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80117b4:	2300      	movs	r3, #0
}
 80117b6:	4618      	mov	r0, r3
 80117b8:	3710      	adds	r7, #16
 80117ba:	46bd      	mov	sp, r7
 80117bc:	bd80      	pop	{r7, pc}
 80117be:	bf00      	nop
 80117c0:	0801fb70 	.word	0x0801fb70
 80117c4:	0801fcd4 	.word	0x0801fcd4
 80117c8:	0801fbd0 	.word	0x0801fbd0
 80117cc:	0801fce0 	.word	0x0801fce0

080117d0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80117d0:	b580      	push	{r7, lr}
 80117d2:	b082      	sub	sp, #8
 80117d4:	af00      	add	r7, sp, #0
 80117d6:	6078      	str	r0, [r7, #4]
 80117d8:	460b      	mov	r3, r1
 80117da:	807b      	strh	r3, [r7, #2]
 80117dc:	4613      	mov	r3, r2
 80117de:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80117e0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	da08      	bge.n	80117fa <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80117e8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80117ec:	425b      	negs	r3, r3
 80117ee:	4619      	mov	r1, r3
 80117f0:	6878      	ldr	r0, [r7, #4]
 80117f2:	f7ff ff9b 	bl	801172c <pbuf_remove_header>
 80117f6:	4603      	mov	r3, r0
 80117f8:	e007      	b.n	801180a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80117fa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80117fe:	787a      	ldrb	r2, [r7, #1]
 8011800:	4619      	mov	r1, r3
 8011802:	6878      	ldr	r0, [r7, #4]
 8011804:	f7ff ff1a 	bl	801163c <pbuf_add_header_impl>
 8011808:	4603      	mov	r3, r0
  }
}
 801180a:	4618      	mov	r0, r3
 801180c:	3708      	adds	r7, #8
 801180e:	46bd      	mov	sp, r7
 8011810:	bd80      	pop	{r7, pc}

08011812 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8011812:	b580      	push	{r7, lr}
 8011814:	b082      	sub	sp, #8
 8011816:	af00      	add	r7, sp, #0
 8011818:	6078      	str	r0, [r7, #4]
 801181a:	460b      	mov	r3, r1
 801181c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 801181e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011822:	2201      	movs	r2, #1
 8011824:	4619      	mov	r1, r3
 8011826:	6878      	ldr	r0, [r7, #4]
 8011828:	f7ff ffd2 	bl	80117d0 <pbuf_header_impl>
 801182c:	4603      	mov	r3, r0
}
 801182e:	4618      	mov	r0, r3
 8011830:	3708      	adds	r7, #8
 8011832:	46bd      	mov	sp, r7
 8011834:	bd80      	pop	{r7, pc}
	...

08011838 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8011838:	b580      	push	{r7, lr}
 801183a:	b088      	sub	sp, #32
 801183c:	af00      	add	r7, sp, #0
 801183e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	2b00      	cmp	r3, #0
 8011844:	d10b      	bne.n	801185e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	2b00      	cmp	r3, #0
 801184a:	d106      	bne.n	801185a <pbuf_free+0x22>
 801184c:	4b3b      	ldr	r3, [pc, #236]	; (801193c <pbuf_free+0x104>)
 801184e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8011852:	493b      	ldr	r1, [pc, #236]	; (8011940 <pbuf_free+0x108>)
 8011854:	483b      	ldr	r0, [pc, #236]	; (8011944 <pbuf_free+0x10c>)
 8011856:	f00a ff43 	bl	801c6e0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 801185a:	2300      	movs	r3, #0
 801185c:	e069      	b.n	8011932 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 801185e:	2300      	movs	r3, #0
 8011860:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8011862:	e062      	b.n	801192a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8011864:	f009 ff56 	bl	801b714 <sys_arch_protect>
 8011868:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	7b9b      	ldrb	r3, [r3, #14]
 801186e:	2b00      	cmp	r3, #0
 8011870:	d106      	bne.n	8011880 <pbuf_free+0x48>
 8011872:	4b32      	ldr	r3, [pc, #200]	; (801193c <pbuf_free+0x104>)
 8011874:	f240 22f1 	movw	r2, #753	; 0x2f1
 8011878:	4933      	ldr	r1, [pc, #204]	; (8011948 <pbuf_free+0x110>)
 801187a:	4832      	ldr	r0, [pc, #200]	; (8011944 <pbuf_free+0x10c>)
 801187c:	f00a ff30 	bl	801c6e0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	7b9b      	ldrb	r3, [r3, #14]
 8011884:	3b01      	subs	r3, #1
 8011886:	b2da      	uxtb	r2, r3
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	739a      	strb	r2, [r3, #14]
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	7b9b      	ldrb	r3, [r3, #14]
 8011890:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8011892:	69b8      	ldr	r0, [r7, #24]
 8011894:	f009 ff4c 	bl	801b730 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8011898:	7dfb      	ldrb	r3, [r7, #23]
 801189a:	2b00      	cmp	r3, #0
 801189c:	d143      	bne.n	8011926 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	7b1b      	ldrb	r3, [r3, #12]
 80118a8:	f003 030f 	and.w	r3, r3, #15
 80118ac:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	7b5b      	ldrb	r3, [r3, #13]
 80118b2:	f003 0302 	and.w	r3, r3, #2
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d011      	beq.n	80118de <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80118be:	68bb      	ldr	r3, [r7, #8]
 80118c0:	691b      	ldr	r3, [r3, #16]
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	d106      	bne.n	80118d4 <pbuf_free+0x9c>
 80118c6:	4b1d      	ldr	r3, [pc, #116]	; (801193c <pbuf_free+0x104>)
 80118c8:	f240 22ff 	movw	r2, #767	; 0x2ff
 80118cc:	491f      	ldr	r1, [pc, #124]	; (801194c <pbuf_free+0x114>)
 80118ce:	481d      	ldr	r0, [pc, #116]	; (8011944 <pbuf_free+0x10c>)
 80118d0:	f00a ff06 	bl	801c6e0 <iprintf>
        pc->custom_free_function(p);
 80118d4:	68bb      	ldr	r3, [r7, #8]
 80118d6:	691b      	ldr	r3, [r3, #16]
 80118d8:	6878      	ldr	r0, [r7, #4]
 80118da:	4798      	blx	r3
 80118dc:	e01d      	b.n	801191a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80118de:	7bfb      	ldrb	r3, [r7, #15]
 80118e0:	2b02      	cmp	r3, #2
 80118e2:	d104      	bne.n	80118ee <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 80118e4:	6879      	ldr	r1, [r7, #4]
 80118e6:	200c      	movs	r0, #12
 80118e8:	f7ff f928 	bl	8010b3c <memp_free>
 80118ec:	e015      	b.n	801191a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80118ee:	7bfb      	ldrb	r3, [r7, #15]
 80118f0:	2b01      	cmp	r3, #1
 80118f2:	d104      	bne.n	80118fe <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 80118f4:	6879      	ldr	r1, [r7, #4]
 80118f6:	200b      	movs	r0, #11
 80118f8:	f7ff f920 	bl	8010b3c <memp_free>
 80118fc:	e00d      	b.n	801191a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80118fe:	7bfb      	ldrb	r3, [r7, #15]
 8011900:	2b00      	cmp	r3, #0
 8011902:	d103      	bne.n	801190c <pbuf_free+0xd4>
          mem_free(p);
 8011904:	6878      	ldr	r0, [r7, #4]
 8011906:	f7fe fdab 	bl	8010460 <mem_free>
 801190a:	e006      	b.n	801191a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 801190c:	4b0b      	ldr	r3, [pc, #44]	; (801193c <pbuf_free+0x104>)
 801190e:	f240 320f 	movw	r2, #783	; 0x30f
 8011912:	490f      	ldr	r1, [pc, #60]	; (8011950 <pbuf_free+0x118>)
 8011914:	480b      	ldr	r0, [pc, #44]	; (8011944 <pbuf_free+0x10c>)
 8011916:	f00a fee3 	bl	801c6e0 <iprintf>
        }
      }
      count++;
 801191a:	7ffb      	ldrb	r3, [r7, #31]
 801191c:	3301      	adds	r3, #1
 801191e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8011920:	693b      	ldr	r3, [r7, #16]
 8011922:	607b      	str	r3, [r7, #4]
 8011924:	e001      	b.n	801192a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8011926:	2300      	movs	r3, #0
 8011928:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	2b00      	cmp	r3, #0
 801192e:	d199      	bne.n	8011864 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8011930:	7ffb      	ldrb	r3, [r7, #31]
}
 8011932:	4618      	mov	r0, r3
 8011934:	3720      	adds	r7, #32
 8011936:	46bd      	mov	sp, r7
 8011938:	bd80      	pop	{r7, pc}
 801193a:	bf00      	nop
 801193c:	0801fb70 	.word	0x0801fb70
 8011940:	0801fcd4 	.word	0x0801fcd4
 8011944:	0801fbd0 	.word	0x0801fbd0
 8011948:	0801fd00 	.word	0x0801fd00
 801194c:	0801fd18 	.word	0x0801fd18
 8011950:	0801fd3c 	.word	0x0801fd3c

08011954 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8011954:	b480      	push	{r7}
 8011956:	b085      	sub	sp, #20
 8011958:	af00      	add	r7, sp, #0
 801195a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 801195c:	2300      	movs	r3, #0
 801195e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8011960:	e005      	b.n	801196e <pbuf_clen+0x1a>
    ++len;
 8011962:	89fb      	ldrh	r3, [r7, #14]
 8011964:	3301      	adds	r3, #1
 8011966:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	2b00      	cmp	r3, #0
 8011972:	d1f6      	bne.n	8011962 <pbuf_clen+0xe>
  }
  return len;
 8011974:	89fb      	ldrh	r3, [r7, #14]
}
 8011976:	4618      	mov	r0, r3
 8011978:	3714      	adds	r7, #20
 801197a:	46bd      	mov	sp, r7
 801197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011980:	4770      	bx	lr
	...

08011984 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8011984:	b580      	push	{r7, lr}
 8011986:	b084      	sub	sp, #16
 8011988:	af00      	add	r7, sp, #0
 801198a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	2b00      	cmp	r3, #0
 8011990:	d016      	beq.n	80119c0 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8011992:	f009 febf 	bl	801b714 <sys_arch_protect>
 8011996:	60f8      	str	r0, [r7, #12]
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	7b9b      	ldrb	r3, [r3, #14]
 801199c:	3301      	adds	r3, #1
 801199e:	b2da      	uxtb	r2, r3
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	739a      	strb	r2, [r3, #14]
 80119a4:	68f8      	ldr	r0, [r7, #12]
 80119a6:	f009 fec3 	bl	801b730 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	7b9b      	ldrb	r3, [r3, #14]
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d106      	bne.n	80119c0 <pbuf_ref+0x3c>
 80119b2:	4b05      	ldr	r3, [pc, #20]	; (80119c8 <pbuf_ref+0x44>)
 80119b4:	f240 3242 	movw	r2, #834	; 0x342
 80119b8:	4904      	ldr	r1, [pc, #16]	; (80119cc <pbuf_ref+0x48>)
 80119ba:	4805      	ldr	r0, [pc, #20]	; (80119d0 <pbuf_ref+0x4c>)
 80119bc:	f00a fe90 	bl	801c6e0 <iprintf>
  }
}
 80119c0:	bf00      	nop
 80119c2:	3710      	adds	r7, #16
 80119c4:	46bd      	mov	sp, r7
 80119c6:	bd80      	pop	{r7, pc}
 80119c8:	0801fb70 	.word	0x0801fb70
 80119cc:	0801fd50 	.word	0x0801fd50
 80119d0:	0801fbd0 	.word	0x0801fbd0

080119d4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80119d4:	b580      	push	{r7, lr}
 80119d6:	b084      	sub	sp, #16
 80119d8:	af00      	add	r7, sp, #0
 80119da:	6078      	str	r0, [r7, #4]
 80119dc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d002      	beq.n	80119ea <pbuf_cat+0x16>
 80119e4:	683b      	ldr	r3, [r7, #0]
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d107      	bne.n	80119fa <pbuf_cat+0x26>
 80119ea:	4b20      	ldr	r3, [pc, #128]	; (8011a6c <pbuf_cat+0x98>)
 80119ec:	f240 3259 	movw	r2, #857	; 0x359
 80119f0:	491f      	ldr	r1, [pc, #124]	; (8011a70 <pbuf_cat+0x9c>)
 80119f2:	4820      	ldr	r0, [pc, #128]	; (8011a74 <pbuf_cat+0xa0>)
 80119f4:	f00a fe74 	bl	801c6e0 <iprintf>
 80119f8:	e034      	b.n	8011a64 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	60fb      	str	r3, [r7, #12]
 80119fe:	e00a      	b.n	8011a16 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8011a00:	68fb      	ldr	r3, [r7, #12]
 8011a02:	891a      	ldrh	r2, [r3, #8]
 8011a04:	683b      	ldr	r3, [r7, #0]
 8011a06:	891b      	ldrh	r3, [r3, #8]
 8011a08:	4413      	add	r3, r2
 8011a0a:	b29a      	uxth	r2, r3
 8011a0c:	68fb      	ldr	r3, [r7, #12]
 8011a0e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8011a10:	68fb      	ldr	r3, [r7, #12]
 8011a12:	681b      	ldr	r3, [r3, #0]
 8011a14:	60fb      	str	r3, [r7, #12]
 8011a16:	68fb      	ldr	r3, [r7, #12]
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d1f0      	bne.n	8011a00 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8011a1e:	68fb      	ldr	r3, [r7, #12]
 8011a20:	891a      	ldrh	r2, [r3, #8]
 8011a22:	68fb      	ldr	r3, [r7, #12]
 8011a24:	895b      	ldrh	r3, [r3, #10]
 8011a26:	429a      	cmp	r2, r3
 8011a28:	d006      	beq.n	8011a38 <pbuf_cat+0x64>
 8011a2a:	4b10      	ldr	r3, [pc, #64]	; (8011a6c <pbuf_cat+0x98>)
 8011a2c:	f240 3262 	movw	r2, #866	; 0x362
 8011a30:	4911      	ldr	r1, [pc, #68]	; (8011a78 <pbuf_cat+0xa4>)
 8011a32:	4810      	ldr	r0, [pc, #64]	; (8011a74 <pbuf_cat+0xa0>)
 8011a34:	f00a fe54 	bl	801c6e0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8011a38:	68fb      	ldr	r3, [r7, #12]
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d006      	beq.n	8011a4e <pbuf_cat+0x7a>
 8011a40:	4b0a      	ldr	r3, [pc, #40]	; (8011a6c <pbuf_cat+0x98>)
 8011a42:	f240 3263 	movw	r2, #867	; 0x363
 8011a46:	490d      	ldr	r1, [pc, #52]	; (8011a7c <pbuf_cat+0xa8>)
 8011a48:	480a      	ldr	r0, [pc, #40]	; (8011a74 <pbuf_cat+0xa0>)
 8011a4a:	f00a fe49 	bl	801c6e0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	891a      	ldrh	r2, [r3, #8]
 8011a52:	683b      	ldr	r3, [r7, #0]
 8011a54:	891b      	ldrh	r3, [r3, #8]
 8011a56:	4413      	add	r3, r2
 8011a58:	b29a      	uxth	r2, r3
 8011a5a:	68fb      	ldr	r3, [r7, #12]
 8011a5c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8011a5e:	68fb      	ldr	r3, [r7, #12]
 8011a60:	683a      	ldr	r2, [r7, #0]
 8011a62:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8011a64:	3710      	adds	r7, #16
 8011a66:	46bd      	mov	sp, r7
 8011a68:	bd80      	pop	{r7, pc}
 8011a6a:	bf00      	nop
 8011a6c:	0801fb70 	.word	0x0801fb70
 8011a70:	0801fd64 	.word	0x0801fd64
 8011a74:	0801fbd0 	.word	0x0801fbd0
 8011a78:	0801fd9c 	.word	0x0801fd9c
 8011a7c:	0801fdcc 	.word	0x0801fdcc

08011a80 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8011a80:	b580      	push	{r7, lr}
 8011a82:	b082      	sub	sp, #8
 8011a84:	af00      	add	r7, sp, #0
 8011a86:	6078      	str	r0, [r7, #4]
 8011a88:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8011a8a:	6839      	ldr	r1, [r7, #0]
 8011a8c:	6878      	ldr	r0, [r7, #4]
 8011a8e:	f7ff ffa1 	bl	80119d4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8011a92:	6838      	ldr	r0, [r7, #0]
 8011a94:	f7ff ff76 	bl	8011984 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8011a98:	bf00      	nop
 8011a9a:	3708      	adds	r7, #8
 8011a9c:	46bd      	mov	sp, r7
 8011a9e:	bd80      	pop	{r7, pc}

08011aa0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8011aa0:	b580      	push	{r7, lr}
 8011aa2:	b086      	sub	sp, #24
 8011aa4:	af00      	add	r7, sp, #0
 8011aa6:	6078      	str	r0, [r7, #4]
 8011aa8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8011aaa:	2300      	movs	r3, #0
 8011aac:	617b      	str	r3, [r7, #20]
 8011aae:	2300      	movs	r3, #0
 8011ab0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d008      	beq.n	8011aca <pbuf_copy+0x2a>
 8011ab8:	683b      	ldr	r3, [r7, #0]
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d005      	beq.n	8011aca <pbuf_copy+0x2a>
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	891a      	ldrh	r2, [r3, #8]
 8011ac2:	683b      	ldr	r3, [r7, #0]
 8011ac4:	891b      	ldrh	r3, [r3, #8]
 8011ac6:	429a      	cmp	r2, r3
 8011ac8:	d209      	bcs.n	8011ade <pbuf_copy+0x3e>
 8011aca:	4b57      	ldr	r3, [pc, #348]	; (8011c28 <pbuf_copy+0x188>)
 8011acc:	f240 32c9 	movw	r2, #969	; 0x3c9
 8011ad0:	4956      	ldr	r1, [pc, #344]	; (8011c2c <pbuf_copy+0x18c>)
 8011ad2:	4857      	ldr	r0, [pc, #348]	; (8011c30 <pbuf_copy+0x190>)
 8011ad4:	f00a fe04 	bl	801c6e0 <iprintf>
 8011ad8:	f06f 030f 	mvn.w	r3, #15
 8011adc:	e09f      	b.n	8011c1e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	895b      	ldrh	r3, [r3, #10]
 8011ae2:	461a      	mov	r2, r3
 8011ae4:	697b      	ldr	r3, [r7, #20]
 8011ae6:	1ad2      	subs	r2, r2, r3
 8011ae8:	683b      	ldr	r3, [r7, #0]
 8011aea:	895b      	ldrh	r3, [r3, #10]
 8011aec:	4619      	mov	r1, r3
 8011aee:	693b      	ldr	r3, [r7, #16]
 8011af0:	1acb      	subs	r3, r1, r3
 8011af2:	429a      	cmp	r2, r3
 8011af4:	d306      	bcc.n	8011b04 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8011af6:	683b      	ldr	r3, [r7, #0]
 8011af8:	895b      	ldrh	r3, [r3, #10]
 8011afa:	461a      	mov	r2, r3
 8011afc:	693b      	ldr	r3, [r7, #16]
 8011afe:	1ad3      	subs	r3, r2, r3
 8011b00:	60fb      	str	r3, [r7, #12]
 8011b02:	e005      	b.n	8011b10 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	895b      	ldrh	r3, [r3, #10]
 8011b08:	461a      	mov	r2, r3
 8011b0a:	697b      	ldr	r3, [r7, #20]
 8011b0c:	1ad3      	subs	r3, r2, r3
 8011b0e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	685a      	ldr	r2, [r3, #4]
 8011b14:	697b      	ldr	r3, [r7, #20]
 8011b16:	18d0      	adds	r0, r2, r3
 8011b18:	683b      	ldr	r3, [r7, #0]
 8011b1a:	685a      	ldr	r2, [r3, #4]
 8011b1c:	693b      	ldr	r3, [r7, #16]
 8011b1e:	4413      	add	r3, r2
 8011b20:	68fa      	ldr	r2, [r7, #12]
 8011b22:	4619      	mov	r1, r3
 8011b24:	f00a fb48 	bl	801c1b8 <memcpy>
    offset_to += len;
 8011b28:	697a      	ldr	r2, [r7, #20]
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	4413      	add	r3, r2
 8011b2e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8011b30:	693a      	ldr	r2, [r7, #16]
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	4413      	add	r3, r2
 8011b36:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	895b      	ldrh	r3, [r3, #10]
 8011b3c:	461a      	mov	r2, r3
 8011b3e:	697b      	ldr	r3, [r7, #20]
 8011b40:	4293      	cmp	r3, r2
 8011b42:	d906      	bls.n	8011b52 <pbuf_copy+0xb2>
 8011b44:	4b38      	ldr	r3, [pc, #224]	; (8011c28 <pbuf_copy+0x188>)
 8011b46:	f240 32d9 	movw	r2, #985	; 0x3d9
 8011b4a:	493a      	ldr	r1, [pc, #232]	; (8011c34 <pbuf_copy+0x194>)
 8011b4c:	4838      	ldr	r0, [pc, #224]	; (8011c30 <pbuf_copy+0x190>)
 8011b4e:	f00a fdc7 	bl	801c6e0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8011b52:	683b      	ldr	r3, [r7, #0]
 8011b54:	895b      	ldrh	r3, [r3, #10]
 8011b56:	461a      	mov	r2, r3
 8011b58:	693b      	ldr	r3, [r7, #16]
 8011b5a:	4293      	cmp	r3, r2
 8011b5c:	d906      	bls.n	8011b6c <pbuf_copy+0xcc>
 8011b5e:	4b32      	ldr	r3, [pc, #200]	; (8011c28 <pbuf_copy+0x188>)
 8011b60:	f240 32da 	movw	r2, #986	; 0x3da
 8011b64:	4934      	ldr	r1, [pc, #208]	; (8011c38 <pbuf_copy+0x198>)
 8011b66:	4832      	ldr	r0, [pc, #200]	; (8011c30 <pbuf_copy+0x190>)
 8011b68:	f00a fdba 	bl	801c6e0 <iprintf>
    if (offset_from >= p_from->len) {
 8011b6c:	683b      	ldr	r3, [r7, #0]
 8011b6e:	895b      	ldrh	r3, [r3, #10]
 8011b70:	461a      	mov	r2, r3
 8011b72:	693b      	ldr	r3, [r7, #16]
 8011b74:	4293      	cmp	r3, r2
 8011b76:	d304      	bcc.n	8011b82 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8011b78:	2300      	movs	r3, #0
 8011b7a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8011b7c:	683b      	ldr	r3, [r7, #0]
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	895b      	ldrh	r3, [r3, #10]
 8011b86:	461a      	mov	r2, r3
 8011b88:	697b      	ldr	r3, [r7, #20]
 8011b8a:	4293      	cmp	r3, r2
 8011b8c:	d114      	bne.n	8011bb8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8011b8e:	2300      	movs	r3, #0
 8011b90:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	681b      	ldr	r3, [r3, #0]
 8011b96:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d10c      	bne.n	8011bb8 <pbuf_copy+0x118>
 8011b9e:	683b      	ldr	r3, [r7, #0]
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d009      	beq.n	8011bb8 <pbuf_copy+0x118>
 8011ba4:	4b20      	ldr	r3, [pc, #128]	; (8011c28 <pbuf_copy+0x188>)
 8011ba6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8011baa:	4924      	ldr	r1, [pc, #144]	; (8011c3c <pbuf_copy+0x19c>)
 8011bac:	4820      	ldr	r0, [pc, #128]	; (8011c30 <pbuf_copy+0x190>)
 8011bae:	f00a fd97 	bl	801c6e0 <iprintf>
 8011bb2:	f06f 030f 	mvn.w	r3, #15
 8011bb6:	e032      	b.n	8011c1e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8011bb8:	683b      	ldr	r3, [r7, #0]
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d013      	beq.n	8011be6 <pbuf_copy+0x146>
 8011bbe:	683b      	ldr	r3, [r7, #0]
 8011bc0:	895a      	ldrh	r2, [r3, #10]
 8011bc2:	683b      	ldr	r3, [r7, #0]
 8011bc4:	891b      	ldrh	r3, [r3, #8]
 8011bc6:	429a      	cmp	r2, r3
 8011bc8:	d10d      	bne.n	8011be6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8011bca:	683b      	ldr	r3, [r7, #0]
 8011bcc:	681b      	ldr	r3, [r3, #0]
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d009      	beq.n	8011be6 <pbuf_copy+0x146>
 8011bd2:	4b15      	ldr	r3, [pc, #84]	; (8011c28 <pbuf_copy+0x188>)
 8011bd4:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8011bd8:	4919      	ldr	r1, [pc, #100]	; (8011c40 <pbuf_copy+0x1a0>)
 8011bda:	4815      	ldr	r0, [pc, #84]	; (8011c30 <pbuf_copy+0x190>)
 8011bdc:	f00a fd80 	bl	801c6e0 <iprintf>
 8011be0:	f06f 0305 	mvn.w	r3, #5
 8011be4:	e01b      	b.n	8011c1e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d013      	beq.n	8011c14 <pbuf_copy+0x174>
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	895a      	ldrh	r2, [r3, #10]
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	891b      	ldrh	r3, [r3, #8]
 8011bf4:	429a      	cmp	r2, r3
 8011bf6:	d10d      	bne.n	8011c14 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	681b      	ldr	r3, [r3, #0]
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d009      	beq.n	8011c14 <pbuf_copy+0x174>
 8011c00:	4b09      	ldr	r3, [pc, #36]	; (8011c28 <pbuf_copy+0x188>)
 8011c02:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8011c06:	490e      	ldr	r1, [pc, #56]	; (8011c40 <pbuf_copy+0x1a0>)
 8011c08:	4809      	ldr	r0, [pc, #36]	; (8011c30 <pbuf_copy+0x190>)
 8011c0a:	f00a fd69 	bl	801c6e0 <iprintf>
 8011c0e:	f06f 0305 	mvn.w	r3, #5
 8011c12:	e004      	b.n	8011c1e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8011c14:	683b      	ldr	r3, [r7, #0]
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	f47f af61 	bne.w	8011ade <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8011c1c:	2300      	movs	r3, #0
}
 8011c1e:	4618      	mov	r0, r3
 8011c20:	3718      	adds	r7, #24
 8011c22:	46bd      	mov	sp, r7
 8011c24:	bd80      	pop	{r7, pc}
 8011c26:	bf00      	nop
 8011c28:	0801fb70 	.word	0x0801fb70
 8011c2c:	0801fe18 	.word	0x0801fe18
 8011c30:	0801fbd0 	.word	0x0801fbd0
 8011c34:	0801fe48 	.word	0x0801fe48
 8011c38:	0801fe60 	.word	0x0801fe60
 8011c3c:	0801fe7c 	.word	0x0801fe7c
 8011c40:	0801fe8c 	.word	0x0801fe8c

08011c44 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8011c44:	b580      	push	{r7, lr}
 8011c46:	b088      	sub	sp, #32
 8011c48:	af00      	add	r7, sp, #0
 8011c4a:	60f8      	str	r0, [r7, #12]
 8011c4c:	60b9      	str	r1, [r7, #8]
 8011c4e:	4611      	mov	r1, r2
 8011c50:	461a      	mov	r2, r3
 8011c52:	460b      	mov	r3, r1
 8011c54:	80fb      	strh	r3, [r7, #6]
 8011c56:	4613      	mov	r3, r2
 8011c58:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8011c5a:	2300      	movs	r3, #0
 8011c5c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8011c5e:	2300      	movs	r3, #0
 8011c60:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8011c62:	68fb      	ldr	r3, [r7, #12]
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d108      	bne.n	8011c7a <pbuf_copy_partial+0x36>
 8011c68:	4b2b      	ldr	r3, [pc, #172]	; (8011d18 <pbuf_copy_partial+0xd4>)
 8011c6a:	f240 420a 	movw	r2, #1034	; 0x40a
 8011c6e:	492b      	ldr	r1, [pc, #172]	; (8011d1c <pbuf_copy_partial+0xd8>)
 8011c70:	482b      	ldr	r0, [pc, #172]	; (8011d20 <pbuf_copy_partial+0xdc>)
 8011c72:	f00a fd35 	bl	801c6e0 <iprintf>
 8011c76:	2300      	movs	r3, #0
 8011c78:	e04a      	b.n	8011d10 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8011c7a:	68bb      	ldr	r3, [r7, #8]
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d108      	bne.n	8011c92 <pbuf_copy_partial+0x4e>
 8011c80:	4b25      	ldr	r3, [pc, #148]	; (8011d18 <pbuf_copy_partial+0xd4>)
 8011c82:	f240 420b 	movw	r2, #1035	; 0x40b
 8011c86:	4927      	ldr	r1, [pc, #156]	; (8011d24 <pbuf_copy_partial+0xe0>)
 8011c88:	4825      	ldr	r0, [pc, #148]	; (8011d20 <pbuf_copy_partial+0xdc>)
 8011c8a:	f00a fd29 	bl	801c6e0 <iprintf>
 8011c8e:	2300      	movs	r3, #0
 8011c90:	e03e      	b.n	8011d10 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8011c92:	68fb      	ldr	r3, [r7, #12]
 8011c94:	61fb      	str	r3, [r7, #28]
 8011c96:	e034      	b.n	8011d02 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8011c98:	88bb      	ldrh	r3, [r7, #4]
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d00a      	beq.n	8011cb4 <pbuf_copy_partial+0x70>
 8011c9e:	69fb      	ldr	r3, [r7, #28]
 8011ca0:	895b      	ldrh	r3, [r3, #10]
 8011ca2:	88ba      	ldrh	r2, [r7, #4]
 8011ca4:	429a      	cmp	r2, r3
 8011ca6:	d305      	bcc.n	8011cb4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8011ca8:	69fb      	ldr	r3, [r7, #28]
 8011caa:	895b      	ldrh	r3, [r3, #10]
 8011cac:	88ba      	ldrh	r2, [r7, #4]
 8011cae:	1ad3      	subs	r3, r2, r3
 8011cb0:	80bb      	strh	r3, [r7, #4]
 8011cb2:	e023      	b.n	8011cfc <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8011cb4:	69fb      	ldr	r3, [r7, #28]
 8011cb6:	895a      	ldrh	r2, [r3, #10]
 8011cb8:	88bb      	ldrh	r3, [r7, #4]
 8011cba:	1ad3      	subs	r3, r2, r3
 8011cbc:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8011cbe:	8b3a      	ldrh	r2, [r7, #24]
 8011cc0:	88fb      	ldrh	r3, [r7, #6]
 8011cc2:	429a      	cmp	r2, r3
 8011cc4:	d901      	bls.n	8011cca <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8011cc6:	88fb      	ldrh	r3, [r7, #6]
 8011cc8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8011cca:	8b7b      	ldrh	r3, [r7, #26]
 8011ccc:	68ba      	ldr	r2, [r7, #8]
 8011cce:	18d0      	adds	r0, r2, r3
 8011cd0:	69fb      	ldr	r3, [r7, #28]
 8011cd2:	685a      	ldr	r2, [r3, #4]
 8011cd4:	88bb      	ldrh	r3, [r7, #4]
 8011cd6:	4413      	add	r3, r2
 8011cd8:	8b3a      	ldrh	r2, [r7, #24]
 8011cda:	4619      	mov	r1, r3
 8011cdc:	f00a fa6c 	bl	801c1b8 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8011ce0:	8afa      	ldrh	r2, [r7, #22]
 8011ce2:	8b3b      	ldrh	r3, [r7, #24]
 8011ce4:	4413      	add	r3, r2
 8011ce6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8011ce8:	8b7a      	ldrh	r2, [r7, #26]
 8011cea:	8b3b      	ldrh	r3, [r7, #24]
 8011cec:	4413      	add	r3, r2
 8011cee:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8011cf0:	88fa      	ldrh	r2, [r7, #6]
 8011cf2:	8b3b      	ldrh	r3, [r7, #24]
 8011cf4:	1ad3      	subs	r3, r2, r3
 8011cf6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8011cf8:	2300      	movs	r3, #0
 8011cfa:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8011cfc:	69fb      	ldr	r3, [r7, #28]
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	61fb      	str	r3, [r7, #28]
 8011d02:	88fb      	ldrh	r3, [r7, #6]
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d002      	beq.n	8011d0e <pbuf_copy_partial+0xca>
 8011d08:	69fb      	ldr	r3, [r7, #28]
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d1c4      	bne.n	8011c98 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8011d0e:	8afb      	ldrh	r3, [r7, #22]
}
 8011d10:	4618      	mov	r0, r3
 8011d12:	3720      	adds	r7, #32
 8011d14:	46bd      	mov	sp, r7
 8011d16:	bd80      	pop	{r7, pc}
 8011d18:	0801fb70 	.word	0x0801fb70
 8011d1c:	0801feb8 	.word	0x0801feb8
 8011d20:	0801fbd0 	.word	0x0801fbd0
 8011d24:	0801fed8 	.word	0x0801fed8

08011d28 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8011d28:	b580      	push	{r7, lr}
 8011d2a:	b084      	sub	sp, #16
 8011d2c:	af00      	add	r7, sp, #0
 8011d2e:	4603      	mov	r3, r0
 8011d30:	603a      	str	r2, [r7, #0]
 8011d32:	71fb      	strb	r3, [r7, #7]
 8011d34:	460b      	mov	r3, r1
 8011d36:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8011d38:	683b      	ldr	r3, [r7, #0]
 8011d3a:	8919      	ldrh	r1, [r3, #8]
 8011d3c:	88ba      	ldrh	r2, [r7, #4]
 8011d3e:	79fb      	ldrb	r3, [r7, #7]
 8011d40:	4618      	mov	r0, r3
 8011d42:	f7ff fa95 	bl	8011270 <pbuf_alloc>
 8011d46:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8011d48:	68fb      	ldr	r3, [r7, #12]
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d101      	bne.n	8011d52 <pbuf_clone+0x2a>
    return NULL;
 8011d4e:	2300      	movs	r3, #0
 8011d50:	e011      	b.n	8011d76 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8011d52:	6839      	ldr	r1, [r7, #0]
 8011d54:	68f8      	ldr	r0, [r7, #12]
 8011d56:	f7ff fea3 	bl	8011aa0 <pbuf_copy>
 8011d5a:	4603      	mov	r3, r0
 8011d5c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8011d5e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d006      	beq.n	8011d74 <pbuf_clone+0x4c>
 8011d66:	4b06      	ldr	r3, [pc, #24]	; (8011d80 <pbuf_clone+0x58>)
 8011d68:	f240 5224 	movw	r2, #1316	; 0x524
 8011d6c:	4905      	ldr	r1, [pc, #20]	; (8011d84 <pbuf_clone+0x5c>)
 8011d6e:	4806      	ldr	r0, [pc, #24]	; (8011d88 <pbuf_clone+0x60>)
 8011d70:	f00a fcb6 	bl	801c6e0 <iprintf>
  return q;
 8011d74:	68fb      	ldr	r3, [r7, #12]
}
 8011d76:	4618      	mov	r0, r3
 8011d78:	3710      	adds	r7, #16
 8011d7a:	46bd      	mov	sp, r7
 8011d7c:	bd80      	pop	{r7, pc}
 8011d7e:	bf00      	nop
 8011d80:	0801fb70 	.word	0x0801fb70
 8011d84:	0801ffe4 	.word	0x0801ffe4
 8011d88:	0801fbd0 	.word	0x0801fbd0

08011d8c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8011d8c:	b580      	push	{r7, lr}
 8011d8e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8011d90:	f00a fcbe 	bl	801c710 <rand>
 8011d94:	4603      	mov	r3, r0
 8011d96:	b29b      	uxth	r3, r3
 8011d98:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011d9c:	b29b      	uxth	r3, r3
 8011d9e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8011da2:	b29a      	uxth	r2, r3
 8011da4:	4b01      	ldr	r3, [pc, #4]	; (8011dac <tcp_init+0x20>)
 8011da6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8011da8:	bf00      	nop
 8011daa:	bd80      	pop	{r7, pc}
 8011dac:	20000130 	.word	0x20000130

08011db0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8011db0:	b580      	push	{r7, lr}
 8011db2:	b082      	sub	sp, #8
 8011db4:	af00      	add	r7, sp, #0
 8011db6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	7d1b      	ldrb	r3, [r3, #20]
 8011dbc:	2b01      	cmp	r3, #1
 8011dbe:	d105      	bne.n	8011dcc <tcp_free+0x1c>
 8011dc0:	4b06      	ldr	r3, [pc, #24]	; (8011ddc <tcp_free+0x2c>)
 8011dc2:	22d4      	movs	r2, #212	; 0xd4
 8011dc4:	4906      	ldr	r1, [pc, #24]	; (8011de0 <tcp_free+0x30>)
 8011dc6:	4807      	ldr	r0, [pc, #28]	; (8011de4 <tcp_free+0x34>)
 8011dc8:	f00a fc8a 	bl	801c6e0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8011dcc:	6879      	ldr	r1, [r7, #4]
 8011dce:	2001      	movs	r0, #1
 8011dd0:	f7fe feb4 	bl	8010b3c <memp_free>
}
 8011dd4:	bf00      	nop
 8011dd6:	3708      	adds	r7, #8
 8011dd8:	46bd      	mov	sp, r7
 8011dda:	bd80      	pop	{r7, pc}
 8011ddc:	08020070 	.word	0x08020070
 8011de0:	080200a0 	.word	0x080200a0
 8011de4:	080200b4 	.word	0x080200b4

08011de8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8011de8:	b580      	push	{r7, lr}
 8011dea:	b082      	sub	sp, #8
 8011dec:	af00      	add	r7, sp, #0
 8011dee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	7d1b      	ldrb	r3, [r3, #20]
 8011df4:	2b01      	cmp	r3, #1
 8011df6:	d105      	bne.n	8011e04 <tcp_free_listen+0x1c>
 8011df8:	4b06      	ldr	r3, [pc, #24]	; (8011e14 <tcp_free_listen+0x2c>)
 8011dfa:	22df      	movs	r2, #223	; 0xdf
 8011dfc:	4906      	ldr	r1, [pc, #24]	; (8011e18 <tcp_free_listen+0x30>)
 8011dfe:	4807      	ldr	r0, [pc, #28]	; (8011e1c <tcp_free_listen+0x34>)
 8011e00:	f00a fc6e 	bl	801c6e0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8011e04:	6879      	ldr	r1, [r7, #4]
 8011e06:	2002      	movs	r0, #2
 8011e08:	f7fe fe98 	bl	8010b3c <memp_free>
}
 8011e0c:	bf00      	nop
 8011e0e:	3708      	adds	r7, #8
 8011e10:	46bd      	mov	sp, r7
 8011e12:	bd80      	pop	{r7, pc}
 8011e14:	08020070 	.word	0x08020070
 8011e18:	080200dc 	.word	0x080200dc
 8011e1c:	080200b4 	.word	0x080200b4

08011e20 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8011e20:	b580      	push	{r7, lr}
 8011e22:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8011e24:	f001 f8b8 	bl	8012f98 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8011e28:	4b07      	ldr	r3, [pc, #28]	; (8011e48 <tcp_tmr+0x28>)
 8011e2a:	781b      	ldrb	r3, [r3, #0]
 8011e2c:	3301      	adds	r3, #1
 8011e2e:	b2da      	uxtb	r2, r3
 8011e30:	4b05      	ldr	r3, [pc, #20]	; (8011e48 <tcp_tmr+0x28>)
 8011e32:	701a      	strb	r2, [r3, #0]
 8011e34:	4b04      	ldr	r3, [pc, #16]	; (8011e48 <tcp_tmr+0x28>)
 8011e36:	781b      	ldrb	r3, [r3, #0]
 8011e38:	f003 0301 	and.w	r3, r3, #1
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d001      	beq.n	8011e44 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8011e40:	f000 fd6a 	bl	8012918 <tcp_slowtmr>
  }
}
 8011e44:	bf00      	nop
 8011e46:	bd80      	pop	{r7, pc}
 8011e48:	200046fd 	.word	0x200046fd

08011e4c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8011e4c:	b580      	push	{r7, lr}
 8011e4e:	b084      	sub	sp, #16
 8011e50:	af00      	add	r7, sp, #0
 8011e52:	6078      	str	r0, [r7, #4]
 8011e54:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8011e56:	683b      	ldr	r3, [r7, #0]
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d105      	bne.n	8011e68 <tcp_remove_listener+0x1c>
 8011e5c:	4b0d      	ldr	r3, [pc, #52]	; (8011e94 <tcp_remove_listener+0x48>)
 8011e5e:	22ff      	movs	r2, #255	; 0xff
 8011e60:	490d      	ldr	r1, [pc, #52]	; (8011e98 <tcp_remove_listener+0x4c>)
 8011e62:	480e      	ldr	r0, [pc, #56]	; (8011e9c <tcp_remove_listener+0x50>)
 8011e64:	f00a fc3c 	bl	801c6e0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	60fb      	str	r3, [r7, #12]
 8011e6c:	e00a      	b.n	8011e84 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8011e6e:	68fb      	ldr	r3, [r7, #12]
 8011e70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011e72:	683a      	ldr	r2, [r7, #0]
 8011e74:	429a      	cmp	r2, r3
 8011e76:	d102      	bne.n	8011e7e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8011e78:	68fb      	ldr	r3, [r7, #12]
 8011e7a:	2200      	movs	r2, #0
 8011e7c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8011e7e:	68fb      	ldr	r3, [r7, #12]
 8011e80:	68db      	ldr	r3, [r3, #12]
 8011e82:	60fb      	str	r3, [r7, #12]
 8011e84:	68fb      	ldr	r3, [r7, #12]
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d1f1      	bne.n	8011e6e <tcp_remove_listener+0x22>
    }
  }
}
 8011e8a:	bf00      	nop
 8011e8c:	bf00      	nop
 8011e8e:	3710      	adds	r7, #16
 8011e90:	46bd      	mov	sp, r7
 8011e92:	bd80      	pop	{r7, pc}
 8011e94:	08020070 	.word	0x08020070
 8011e98:	080200f8 	.word	0x080200f8
 8011e9c:	080200b4 	.word	0x080200b4

08011ea0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8011ea0:	b580      	push	{r7, lr}
 8011ea2:	b084      	sub	sp, #16
 8011ea4:	af00      	add	r7, sp, #0
 8011ea6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d106      	bne.n	8011ebc <tcp_listen_closed+0x1c>
 8011eae:	4b14      	ldr	r3, [pc, #80]	; (8011f00 <tcp_listen_closed+0x60>)
 8011eb0:	f240 1211 	movw	r2, #273	; 0x111
 8011eb4:	4913      	ldr	r1, [pc, #76]	; (8011f04 <tcp_listen_closed+0x64>)
 8011eb6:	4814      	ldr	r0, [pc, #80]	; (8011f08 <tcp_listen_closed+0x68>)
 8011eb8:	f00a fc12 	bl	801c6e0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	7d1b      	ldrb	r3, [r3, #20]
 8011ec0:	2b01      	cmp	r3, #1
 8011ec2:	d006      	beq.n	8011ed2 <tcp_listen_closed+0x32>
 8011ec4:	4b0e      	ldr	r3, [pc, #56]	; (8011f00 <tcp_listen_closed+0x60>)
 8011ec6:	f44f 7289 	mov.w	r2, #274	; 0x112
 8011eca:	4910      	ldr	r1, [pc, #64]	; (8011f0c <tcp_listen_closed+0x6c>)
 8011ecc:	480e      	ldr	r0, [pc, #56]	; (8011f08 <tcp_listen_closed+0x68>)
 8011ece:	f00a fc07 	bl	801c6e0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8011ed2:	2301      	movs	r3, #1
 8011ed4:	60fb      	str	r3, [r7, #12]
 8011ed6:	e00b      	b.n	8011ef0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8011ed8:	4a0d      	ldr	r2, [pc, #52]	; (8011f10 <tcp_listen_closed+0x70>)
 8011eda:	68fb      	ldr	r3, [r7, #12]
 8011edc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011ee0:	681b      	ldr	r3, [r3, #0]
 8011ee2:	6879      	ldr	r1, [r7, #4]
 8011ee4:	4618      	mov	r0, r3
 8011ee6:	f7ff ffb1 	bl	8011e4c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8011eea:	68fb      	ldr	r3, [r7, #12]
 8011eec:	3301      	adds	r3, #1
 8011eee:	60fb      	str	r3, [r7, #12]
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	2b03      	cmp	r3, #3
 8011ef4:	d9f0      	bls.n	8011ed8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8011ef6:	bf00      	nop
 8011ef8:	bf00      	nop
 8011efa:	3710      	adds	r7, #16
 8011efc:	46bd      	mov	sp, r7
 8011efe:	bd80      	pop	{r7, pc}
 8011f00:	08020070 	.word	0x08020070
 8011f04:	08020120 	.word	0x08020120
 8011f08:	080200b4 	.word	0x080200b4
 8011f0c:	0802012c 	.word	0x0802012c
 8011f10:	08023024 	.word	0x08023024

08011f14 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8011f14:	b5b0      	push	{r4, r5, r7, lr}
 8011f16:	b088      	sub	sp, #32
 8011f18:	af04      	add	r7, sp, #16
 8011f1a:	6078      	str	r0, [r7, #4]
 8011f1c:	460b      	mov	r3, r1
 8011f1e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d106      	bne.n	8011f34 <tcp_close_shutdown+0x20>
 8011f26:	4b63      	ldr	r3, [pc, #396]	; (80120b4 <tcp_close_shutdown+0x1a0>)
 8011f28:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8011f2c:	4962      	ldr	r1, [pc, #392]	; (80120b8 <tcp_close_shutdown+0x1a4>)
 8011f2e:	4863      	ldr	r0, [pc, #396]	; (80120bc <tcp_close_shutdown+0x1a8>)
 8011f30:	f00a fbd6 	bl	801c6e0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8011f34:	78fb      	ldrb	r3, [r7, #3]
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d066      	beq.n	8012008 <tcp_close_shutdown+0xf4>
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	7d1b      	ldrb	r3, [r3, #20]
 8011f3e:	2b04      	cmp	r3, #4
 8011f40:	d003      	beq.n	8011f4a <tcp_close_shutdown+0x36>
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	7d1b      	ldrb	r3, [r3, #20]
 8011f46:	2b07      	cmp	r3, #7
 8011f48:	d15e      	bne.n	8012008 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d104      	bne.n	8011f5c <tcp_close_shutdown+0x48>
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011f56:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8011f5a:	d055      	beq.n	8012008 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	8b5b      	ldrh	r3, [r3, #26]
 8011f60:	f003 0310 	and.w	r3, r3, #16
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d106      	bne.n	8011f76 <tcp_close_shutdown+0x62>
 8011f68:	4b52      	ldr	r3, [pc, #328]	; (80120b4 <tcp_close_shutdown+0x1a0>)
 8011f6a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8011f6e:	4954      	ldr	r1, [pc, #336]	; (80120c0 <tcp_close_shutdown+0x1ac>)
 8011f70:	4852      	ldr	r0, [pc, #328]	; (80120bc <tcp_close_shutdown+0x1a8>)
 8011f72:	f00a fbb5 	bl	801c6e0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8011f7e:	687d      	ldr	r5, [r7, #4]
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	3304      	adds	r3, #4
 8011f84:	687a      	ldr	r2, [r7, #4]
 8011f86:	8ad2      	ldrh	r2, [r2, #22]
 8011f88:	6879      	ldr	r1, [r7, #4]
 8011f8a:	8b09      	ldrh	r1, [r1, #24]
 8011f8c:	9102      	str	r1, [sp, #8]
 8011f8e:	9201      	str	r2, [sp, #4]
 8011f90:	9300      	str	r3, [sp, #0]
 8011f92:	462b      	mov	r3, r5
 8011f94:	4622      	mov	r2, r4
 8011f96:	4601      	mov	r1, r0
 8011f98:	6878      	ldr	r0, [r7, #4]
 8011f9a:	f005 fde7 	bl	8017b6c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8011f9e:	6878      	ldr	r0, [r7, #4]
 8011fa0:	f001 fbc8 	bl	8013734 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8011fa4:	4b47      	ldr	r3, [pc, #284]	; (80120c4 <tcp_close_shutdown+0x1b0>)
 8011fa6:	681b      	ldr	r3, [r3, #0]
 8011fa8:	687a      	ldr	r2, [r7, #4]
 8011faa:	429a      	cmp	r2, r3
 8011fac:	d105      	bne.n	8011fba <tcp_close_shutdown+0xa6>
 8011fae:	4b45      	ldr	r3, [pc, #276]	; (80120c4 <tcp_close_shutdown+0x1b0>)
 8011fb0:	681b      	ldr	r3, [r3, #0]
 8011fb2:	68db      	ldr	r3, [r3, #12]
 8011fb4:	4a43      	ldr	r2, [pc, #268]	; (80120c4 <tcp_close_shutdown+0x1b0>)
 8011fb6:	6013      	str	r3, [r2, #0]
 8011fb8:	e013      	b.n	8011fe2 <tcp_close_shutdown+0xce>
 8011fba:	4b42      	ldr	r3, [pc, #264]	; (80120c4 <tcp_close_shutdown+0x1b0>)
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	60fb      	str	r3, [r7, #12]
 8011fc0:	e00c      	b.n	8011fdc <tcp_close_shutdown+0xc8>
 8011fc2:	68fb      	ldr	r3, [r7, #12]
 8011fc4:	68db      	ldr	r3, [r3, #12]
 8011fc6:	687a      	ldr	r2, [r7, #4]
 8011fc8:	429a      	cmp	r2, r3
 8011fca:	d104      	bne.n	8011fd6 <tcp_close_shutdown+0xc2>
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	68da      	ldr	r2, [r3, #12]
 8011fd0:	68fb      	ldr	r3, [r7, #12]
 8011fd2:	60da      	str	r2, [r3, #12]
 8011fd4:	e005      	b.n	8011fe2 <tcp_close_shutdown+0xce>
 8011fd6:	68fb      	ldr	r3, [r7, #12]
 8011fd8:	68db      	ldr	r3, [r3, #12]
 8011fda:	60fb      	str	r3, [r7, #12]
 8011fdc:	68fb      	ldr	r3, [r7, #12]
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d1ef      	bne.n	8011fc2 <tcp_close_shutdown+0xae>
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	2200      	movs	r2, #0
 8011fe6:	60da      	str	r2, [r3, #12]
 8011fe8:	4b37      	ldr	r3, [pc, #220]	; (80120c8 <tcp_close_shutdown+0x1b4>)
 8011fea:	2201      	movs	r2, #1
 8011fec:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8011fee:	4b37      	ldr	r3, [pc, #220]	; (80120cc <tcp_close_shutdown+0x1b8>)
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	687a      	ldr	r2, [r7, #4]
 8011ff4:	429a      	cmp	r2, r3
 8011ff6:	d102      	bne.n	8011ffe <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8011ff8:	f004 f85c 	bl	80160b4 <tcp_trigger_input_pcb_close>
 8011ffc:	e002      	b.n	8012004 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8011ffe:	6878      	ldr	r0, [r7, #4]
 8012000:	f7ff fed6 	bl	8011db0 <tcp_free>
      }
      return ERR_OK;
 8012004:	2300      	movs	r3, #0
 8012006:	e050      	b.n	80120aa <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	7d1b      	ldrb	r3, [r3, #20]
 801200c:	2b02      	cmp	r3, #2
 801200e:	d03b      	beq.n	8012088 <tcp_close_shutdown+0x174>
 8012010:	2b02      	cmp	r3, #2
 8012012:	dc44      	bgt.n	801209e <tcp_close_shutdown+0x18a>
 8012014:	2b00      	cmp	r3, #0
 8012016:	d002      	beq.n	801201e <tcp_close_shutdown+0x10a>
 8012018:	2b01      	cmp	r3, #1
 801201a:	d02a      	beq.n	8012072 <tcp_close_shutdown+0x15e>
 801201c:	e03f      	b.n	801209e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	8adb      	ldrh	r3, [r3, #22]
 8012022:	2b00      	cmp	r3, #0
 8012024:	d021      	beq.n	801206a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8012026:	4b2a      	ldr	r3, [pc, #168]	; (80120d0 <tcp_close_shutdown+0x1bc>)
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	687a      	ldr	r2, [r7, #4]
 801202c:	429a      	cmp	r2, r3
 801202e:	d105      	bne.n	801203c <tcp_close_shutdown+0x128>
 8012030:	4b27      	ldr	r3, [pc, #156]	; (80120d0 <tcp_close_shutdown+0x1bc>)
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	68db      	ldr	r3, [r3, #12]
 8012036:	4a26      	ldr	r2, [pc, #152]	; (80120d0 <tcp_close_shutdown+0x1bc>)
 8012038:	6013      	str	r3, [r2, #0]
 801203a:	e013      	b.n	8012064 <tcp_close_shutdown+0x150>
 801203c:	4b24      	ldr	r3, [pc, #144]	; (80120d0 <tcp_close_shutdown+0x1bc>)
 801203e:	681b      	ldr	r3, [r3, #0]
 8012040:	60bb      	str	r3, [r7, #8]
 8012042:	e00c      	b.n	801205e <tcp_close_shutdown+0x14a>
 8012044:	68bb      	ldr	r3, [r7, #8]
 8012046:	68db      	ldr	r3, [r3, #12]
 8012048:	687a      	ldr	r2, [r7, #4]
 801204a:	429a      	cmp	r2, r3
 801204c:	d104      	bne.n	8012058 <tcp_close_shutdown+0x144>
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	68da      	ldr	r2, [r3, #12]
 8012052:	68bb      	ldr	r3, [r7, #8]
 8012054:	60da      	str	r2, [r3, #12]
 8012056:	e005      	b.n	8012064 <tcp_close_shutdown+0x150>
 8012058:	68bb      	ldr	r3, [r7, #8]
 801205a:	68db      	ldr	r3, [r3, #12]
 801205c:	60bb      	str	r3, [r7, #8]
 801205e:	68bb      	ldr	r3, [r7, #8]
 8012060:	2b00      	cmp	r3, #0
 8012062:	d1ef      	bne.n	8012044 <tcp_close_shutdown+0x130>
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	2200      	movs	r2, #0
 8012068:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 801206a:	6878      	ldr	r0, [r7, #4]
 801206c:	f7ff fea0 	bl	8011db0 <tcp_free>
      break;
 8012070:	e01a      	b.n	80120a8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8012072:	6878      	ldr	r0, [r7, #4]
 8012074:	f7ff ff14 	bl	8011ea0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8012078:	6879      	ldr	r1, [r7, #4]
 801207a:	4816      	ldr	r0, [pc, #88]	; (80120d4 <tcp_close_shutdown+0x1c0>)
 801207c:	f001 fbaa 	bl	80137d4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8012080:	6878      	ldr	r0, [r7, #4]
 8012082:	f7ff feb1 	bl	8011de8 <tcp_free_listen>
      break;
 8012086:	e00f      	b.n	80120a8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8012088:	6879      	ldr	r1, [r7, #4]
 801208a:	480e      	ldr	r0, [pc, #56]	; (80120c4 <tcp_close_shutdown+0x1b0>)
 801208c:	f001 fba2 	bl	80137d4 <tcp_pcb_remove>
 8012090:	4b0d      	ldr	r3, [pc, #52]	; (80120c8 <tcp_close_shutdown+0x1b4>)
 8012092:	2201      	movs	r2, #1
 8012094:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8012096:	6878      	ldr	r0, [r7, #4]
 8012098:	f7ff fe8a 	bl	8011db0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 801209c:	e004      	b.n	80120a8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 801209e:	6878      	ldr	r0, [r7, #4]
 80120a0:	f000 f81a 	bl	80120d8 <tcp_close_shutdown_fin>
 80120a4:	4603      	mov	r3, r0
 80120a6:	e000      	b.n	80120aa <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80120a8:	2300      	movs	r3, #0
}
 80120aa:	4618      	mov	r0, r3
 80120ac:	3710      	adds	r7, #16
 80120ae:	46bd      	mov	sp, r7
 80120b0:	bdb0      	pop	{r4, r5, r7, pc}
 80120b2:	bf00      	nop
 80120b4:	08020070 	.word	0x08020070
 80120b8:	08020144 	.word	0x08020144
 80120bc:	080200b4 	.word	0x080200b4
 80120c0:	08020164 	.word	0x08020164
 80120c4:	2000b61c 	.word	0x2000b61c
 80120c8:	2000b618 	.word	0x2000b618
 80120cc:	2000b630 	.word	0x2000b630
 80120d0:	2000b628 	.word	0x2000b628
 80120d4:	2000b624 	.word	0x2000b624

080120d8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80120d8:	b580      	push	{r7, lr}
 80120da:	b084      	sub	sp, #16
 80120dc:	af00      	add	r7, sp, #0
 80120de:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d106      	bne.n	80120f4 <tcp_close_shutdown_fin+0x1c>
 80120e6:	4b2e      	ldr	r3, [pc, #184]	; (80121a0 <tcp_close_shutdown_fin+0xc8>)
 80120e8:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80120ec:	492d      	ldr	r1, [pc, #180]	; (80121a4 <tcp_close_shutdown_fin+0xcc>)
 80120ee:	482e      	ldr	r0, [pc, #184]	; (80121a8 <tcp_close_shutdown_fin+0xd0>)
 80120f0:	f00a faf6 	bl	801c6e0 <iprintf>

  switch (pcb->state) {
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	7d1b      	ldrb	r3, [r3, #20]
 80120f8:	2b07      	cmp	r3, #7
 80120fa:	d020      	beq.n	801213e <tcp_close_shutdown_fin+0x66>
 80120fc:	2b07      	cmp	r3, #7
 80120fe:	dc2b      	bgt.n	8012158 <tcp_close_shutdown_fin+0x80>
 8012100:	2b03      	cmp	r3, #3
 8012102:	d002      	beq.n	801210a <tcp_close_shutdown_fin+0x32>
 8012104:	2b04      	cmp	r3, #4
 8012106:	d00d      	beq.n	8012124 <tcp_close_shutdown_fin+0x4c>
 8012108:	e026      	b.n	8012158 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 801210a:	6878      	ldr	r0, [r7, #4]
 801210c:	f004 fe3c 	bl	8016d88 <tcp_send_fin>
 8012110:	4603      	mov	r3, r0
 8012112:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8012114:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012118:	2b00      	cmp	r3, #0
 801211a:	d11f      	bne.n	801215c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	2205      	movs	r2, #5
 8012120:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012122:	e01b      	b.n	801215c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8012124:	6878      	ldr	r0, [r7, #4]
 8012126:	f004 fe2f 	bl	8016d88 <tcp_send_fin>
 801212a:	4603      	mov	r3, r0
 801212c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801212e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012132:	2b00      	cmp	r3, #0
 8012134:	d114      	bne.n	8012160 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	2205      	movs	r2, #5
 801213a:	751a      	strb	r2, [r3, #20]
      }
      break;
 801213c:	e010      	b.n	8012160 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 801213e:	6878      	ldr	r0, [r7, #4]
 8012140:	f004 fe22 	bl	8016d88 <tcp_send_fin>
 8012144:	4603      	mov	r3, r0
 8012146:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8012148:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801214c:	2b00      	cmp	r3, #0
 801214e:	d109      	bne.n	8012164 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	2209      	movs	r2, #9
 8012154:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012156:	e005      	b.n	8012164 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8012158:	2300      	movs	r3, #0
 801215a:	e01c      	b.n	8012196 <tcp_close_shutdown_fin+0xbe>
      break;
 801215c:	bf00      	nop
 801215e:	e002      	b.n	8012166 <tcp_close_shutdown_fin+0x8e>
      break;
 8012160:	bf00      	nop
 8012162:	e000      	b.n	8012166 <tcp_close_shutdown_fin+0x8e>
      break;
 8012164:	bf00      	nop
  }

  if (err == ERR_OK) {
 8012166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801216a:	2b00      	cmp	r3, #0
 801216c:	d103      	bne.n	8012176 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 801216e:	6878      	ldr	r0, [r7, #4]
 8012170:	f004 ff48 	bl	8017004 <tcp_output>
 8012174:	e00d      	b.n	8012192 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8012176:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801217a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801217e:	d108      	bne.n	8012192 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	8b5b      	ldrh	r3, [r3, #26]
 8012184:	f043 0308 	orr.w	r3, r3, #8
 8012188:	b29a      	uxth	r2, r3
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 801218e:	2300      	movs	r3, #0
 8012190:	e001      	b.n	8012196 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8012192:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012196:	4618      	mov	r0, r3
 8012198:	3710      	adds	r7, #16
 801219a:	46bd      	mov	sp, r7
 801219c:	bd80      	pop	{r7, pc}
 801219e:	bf00      	nop
 80121a0:	08020070 	.word	0x08020070
 80121a4:	08020120 	.word	0x08020120
 80121a8:	080200b4 	.word	0x080200b4

080121ac <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80121ac:	b580      	push	{r7, lr}
 80121ae:	b082      	sub	sp, #8
 80121b0:	af00      	add	r7, sp, #0
 80121b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d109      	bne.n	80121ce <tcp_close+0x22>
 80121ba:	4b0f      	ldr	r3, [pc, #60]	; (80121f8 <tcp_close+0x4c>)
 80121bc:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80121c0:	490e      	ldr	r1, [pc, #56]	; (80121fc <tcp_close+0x50>)
 80121c2:	480f      	ldr	r0, [pc, #60]	; (8012200 <tcp_close+0x54>)
 80121c4:	f00a fa8c 	bl	801c6e0 <iprintf>
 80121c8:	f06f 030f 	mvn.w	r3, #15
 80121cc:	e00f      	b.n	80121ee <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	7d1b      	ldrb	r3, [r3, #20]
 80121d2:	2b01      	cmp	r3, #1
 80121d4:	d006      	beq.n	80121e4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	8b5b      	ldrh	r3, [r3, #26]
 80121da:	f043 0310 	orr.w	r3, r3, #16
 80121de:	b29a      	uxth	r2, r3
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80121e4:	2101      	movs	r1, #1
 80121e6:	6878      	ldr	r0, [r7, #4]
 80121e8:	f7ff fe94 	bl	8011f14 <tcp_close_shutdown>
 80121ec:	4603      	mov	r3, r0
}
 80121ee:	4618      	mov	r0, r3
 80121f0:	3708      	adds	r7, #8
 80121f2:	46bd      	mov	sp, r7
 80121f4:	bd80      	pop	{r7, pc}
 80121f6:	bf00      	nop
 80121f8:	08020070 	.word	0x08020070
 80121fc:	08020180 	.word	0x08020180
 8012200:	080200b4 	.word	0x080200b4

08012204 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8012204:	b580      	push	{r7, lr}
 8012206:	b084      	sub	sp, #16
 8012208:	af00      	add	r7, sp, #0
 801220a:	60f8      	str	r0, [r7, #12]
 801220c:	60b9      	str	r1, [r7, #8]
 801220e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8012210:	68fb      	ldr	r3, [r7, #12]
 8012212:	2b00      	cmp	r3, #0
 8012214:	d109      	bne.n	801222a <tcp_shutdown+0x26>
 8012216:	4b26      	ldr	r3, [pc, #152]	; (80122b0 <tcp_shutdown+0xac>)
 8012218:	f240 2207 	movw	r2, #519	; 0x207
 801221c:	4925      	ldr	r1, [pc, #148]	; (80122b4 <tcp_shutdown+0xb0>)
 801221e:	4826      	ldr	r0, [pc, #152]	; (80122b8 <tcp_shutdown+0xb4>)
 8012220:	f00a fa5e 	bl	801c6e0 <iprintf>
 8012224:	f06f 030f 	mvn.w	r3, #15
 8012228:	e03d      	b.n	80122a6 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 801222a:	68fb      	ldr	r3, [r7, #12]
 801222c:	7d1b      	ldrb	r3, [r3, #20]
 801222e:	2b01      	cmp	r3, #1
 8012230:	d102      	bne.n	8012238 <tcp_shutdown+0x34>
    return ERR_CONN;
 8012232:	f06f 030a 	mvn.w	r3, #10
 8012236:	e036      	b.n	80122a6 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8012238:	68bb      	ldr	r3, [r7, #8]
 801223a:	2b00      	cmp	r3, #0
 801223c:	d01b      	beq.n	8012276 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801223e:	68fb      	ldr	r3, [r7, #12]
 8012240:	8b5b      	ldrh	r3, [r3, #26]
 8012242:	f043 0310 	orr.w	r3, r3, #16
 8012246:	b29a      	uxth	r2, r3
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	2b00      	cmp	r3, #0
 8012250:	d005      	beq.n	801225e <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 8012252:	2101      	movs	r1, #1
 8012254:	68f8      	ldr	r0, [r7, #12]
 8012256:	f7ff fe5d 	bl	8011f14 <tcp_close_shutdown>
 801225a:	4603      	mov	r3, r0
 801225c:	e023      	b.n	80122a6 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 801225e:	68fb      	ldr	r3, [r7, #12]
 8012260:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012262:	2b00      	cmp	r3, #0
 8012264:	d007      	beq.n	8012276 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 8012266:	68fb      	ldr	r3, [r7, #12]
 8012268:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801226a:	4618      	mov	r0, r3
 801226c:	f7ff fae4 	bl	8011838 <pbuf_free>
      pcb->refused_data = NULL;
 8012270:	68fb      	ldr	r3, [r7, #12]
 8012272:	2200      	movs	r2, #0
 8012274:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	2b00      	cmp	r3, #0
 801227a:	d013      	beq.n	80122a4 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 801227c:	68fb      	ldr	r3, [r7, #12]
 801227e:	7d1b      	ldrb	r3, [r3, #20]
 8012280:	2b04      	cmp	r3, #4
 8012282:	dc02      	bgt.n	801228a <tcp_shutdown+0x86>
 8012284:	2b03      	cmp	r3, #3
 8012286:	da02      	bge.n	801228e <tcp_shutdown+0x8a>
 8012288:	e009      	b.n	801229e <tcp_shutdown+0x9a>
 801228a:	2b07      	cmp	r3, #7
 801228c:	d107      	bne.n	801229e <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 801228e:	68bb      	ldr	r3, [r7, #8]
 8012290:	b2db      	uxtb	r3, r3
 8012292:	4619      	mov	r1, r3
 8012294:	68f8      	ldr	r0, [r7, #12]
 8012296:	f7ff fe3d 	bl	8011f14 <tcp_close_shutdown>
 801229a:	4603      	mov	r3, r0
 801229c:	e003      	b.n	80122a6 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 801229e:	f06f 030a 	mvn.w	r3, #10
 80122a2:	e000      	b.n	80122a6 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 80122a4:	2300      	movs	r3, #0
}
 80122a6:	4618      	mov	r0, r3
 80122a8:	3710      	adds	r7, #16
 80122aa:	46bd      	mov	sp, r7
 80122ac:	bd80      	pop	{r7, pc}
 80122ae:	bf00      	nop
 80122b0:	08020070 	.word	0x08020070
 80122b4:	08020198 	.word	0x08020198
 80122b8:	080200b4 	.word	0x080200b4

080122bc <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80122bc:	b580      	push	{r7, lr}
 80122be:	b08e      	sub	sp, #56	; 0x38
 80122c0:	af04      	add	r7, sp, #16
 80122c2:	6078      	str	r0, [r7, #4]
 80122c4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	d107      	bne.n	80122dc <tcp_abandon+0x20>
 80122cc:	4b52      	ldr	r3, [pc, #328]	; (8012418 <tcp_abandon+0x15c>)
 80122ce:	f240 223d 	movw	r2, #573	; 0x23d
 80122d2:	4952      	ldr	r1, [pc, #328]	; (801241c <tcp_abandon+0x160>)
 80122d4:	4852      	ldr	r0, [pc, #328]	; (8012420 <tcp_abandon+0x164>)
 80122d6:	f00a fa03 	bl	801c6e0 <iprintf>
 80122da:	e099      	b.n	8012410 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	7d1b      	ldrb	r3, [r3, #20]
 80122e0:	2b01      	cmp	r3, #1
 80122e2:	d106      	bne.n	80122f2 <tcp_abandon+0x36>
 80122e4:	4b4c      	ldr	r3, [pc, #304]	; (8012418 <tcp_abandon+0x15c>)
 80122e6:	f44f 7210 	mov.w	r2, #576	; 0x240
 80122ea:	494e      	ldr	r1, [pc, #312]	; (8012424 <tcp_abandon+0x168>)
 80122ec:	484c      	ldr	r0, [pc, #304]	; (8012420 <tcp_abandon+0x164>)
 80122ee:	f00a f9f7 	bl	801c6e0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	7d1b      	ldrb	r3, [r3, #20]
 80122f6:	2b0a      	cmp	r3, #10
 80122f8:	d107      	bne.n	801230a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80122fa:	6879      	ldr	r1, [r7, #4]
 80122fc:	484a      	ldr	r0, [pc, #296]	; (8012428 <tcp_abandon+0x16c>)
 80122fe:	f001 fa69 	bl	80137d4 <tcp_pcb_remove>
    tcp_free(pcb);
 8012302:	6878      	ldr	r0, [r7, #4]
 8012304:	f7ff fd54 	bl	8011db0 <tcp_free>
 8012308:	e082      	b.n	8012410 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 801230a:	2300      	movs	r3, #0
 801230c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 801230e:	2300      	movs	r3, #0
 8012310:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012316:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801231c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012324:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	691b      	ldr	r3, [r3, #16]
 801232a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	7d1b      	ldrb	r3, [r3, #20]
 8012330:	2b00      	cmp	r3, #0
 8012332:	d126      	bne.n	8012382 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	8adb      	ldrh	r3, [r3, #22]
 8012338:	2b00      	cmp	r3, #0
 801233a:	d02e      	beq.n	801239a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801233c:	4b3b      	ldr	r3, [pc, #236]	; (801242c <tcp_abandon+0x170>)
 801233e:	681b      	ldr	r3, [r3, #0]
 8012340:	687a      	ldr	r2, [r7, #4]
 8012342:	429a      	cmp	r2, r3
 8012344:	d105      	bne.n	8012352 <tcp_abandon+0x96>
 8012346:	4b39      	ldr	r3, [pc, #228]	; (801242c <tcp_abandon+0x170>)
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	68db      	ldr	r3, [r3, #12]
 801234c:	4a37      	ldr	r2, [pc, #220]	; (801242c <tcp_abandon+0x170>)
 801234e:	6013      	str	r3, [r2, #0]
 8012350:	e013      	b.n	801237a <tcp_abandon+0xbe>
 8012352:	4b36      	ldr	r3, [pc, #216]	; (801242c <tcp_abandon+0x170>)
 8012354:	681b      	ldr	r3, [r3, #0]
 8012356:	61fb      	str	r3, [r7, #28]
 8012358:	e00c      	b.n	8012374 <tcp_abandon+0xb8>
 801235a:	69fb      	ldr	r3, [r7, #28]
 801235c:	68db      	ldr	r3, [r3, #12]
 801235e:	687a      	ldr	r2, [r7, #4]
 8012360:	429a      	cmp	r2, r3
 8012362:	d104      	bne.n	801236e <tcp_abandon+0xb2>
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	68da      	ldr	r2, [r3, #12]
 8012368:	69fb      	ldr	r3, [r7, #28]
 801236a:	60da      	str	r2, [r3, #12]
 801236c:	e005      	b.n	801237a <tcp_abandon+0xbe>
 801236e:	69fb      	ldr	r3, [r7, #28]
 8012370:	68db      	ldr	r3, [r3, #12]
 8012372:	61fb      	str	r3, [r7, #28]
 8012374:	69fb      	ldr	r3, [r7, #28]
 8012376:	2b00      	cmp	r3, #0
 8012378:	d1ef      	bne.n	801235a <tcp_abandon+0x9e>
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	2200      	movs	r2, #0
 801237e:	60da      	str	r2, [r3, #12]
 8012380:	e00b      	b.n	801239a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8012382:	683b      	ldr	r3, [r7, #0]
 8012384:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	8adb      	ldrh	r3, [r3, #22]
 801238a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801238c:	6879      	ldr	r1, [r7, #4]
 801238e:	4828      	ldr	r0, [pc, #160]	; (8012430 <tcp_abandon+0x174>)
 8012390:	f001 fa20 	bl	80137d4 <tcp_pcb_remove>
 8012394:	4b27      	ldr	r3, [pc, #156]	; (8012434 <tcp_abandon+0x178>)
 8012396:	2201      	movs	r2, #1
 8012398:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801239e:	2b00      	cmp	r3, #0
 80123a0:	d004      	beq.n	80123ac <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123a6:	4618      	mov	r0, r3
 80123a8:	f000 fed6 	bl	8013158 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d004      	beq.n	80123be <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80123b8:	4618      	mov	r0, r3
 80123ba:	f000 fecd 	bl	8013158 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d004      	beq.n	80123d0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80123ca:	4618      	mov	r0, r3
 80123cc:	f000 fec4 	bl	8013158 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80123d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	d00e      	beq.n	80123f4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80123d6:	6879      	ldr	r1, [r7, #4]
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	3304      	adds	r3, #4
 80123dc:	687a      	ldr	r2, [r7, #4]
 80123de:	8b12      	ldrh	r2, [r2, #24]
 80123e0:	9202      	str	r2, [sp, #8]
 80123e2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80123e4:	9201      	str	r2, [sp, #4]
 80123e6:	9300      	str	r3, [sp, #0]
 80123e8:	460b      	mov	r3, r1
 80123ea:	697a      	ldr	r2, [r7, #20]
 80123ec:	69b9      	ldr	r1, [r7, #24]
 80123ee:	6878      	ldr	r0, [r7, #4]
 80123f0:	f005 fbbc 	bl	8017b6c <tcp_rst>
    }
    last_state = pcb->state;
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	7d1b      	ldrb	r3, [r3, #20]
 80123f8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80123fa:	6878      	ldr	r0, [r7, #4]
 80123fc:	f7ff fcd8 	bl	8011db0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8012400:	693b      	ldr	r3, [r7, #16]
 8012402:	2b00      	cmp	r3, #0
 8012404:	d004      	beq.n	8012410 <tcp_abandon+0x154>
 8012406:	693b      	ldr	r3, [r7, #16]
 8012408:	f06f 010c 	mvn.w	r1, #12
 801240c:	68f8      	ldr	r0, [r7, #12]
 801240e:	4798      	blx	r3
  }
}
 8012410:	3728      	adds	r7, #40	; 0x28
 8012412:	46bd      	mov	sp, r7
 8012414:	bd80      	pop	{r7, pc}
 8012416:	bf00      	nop
 8012418:	08020070 	.word	0x08020070
 801241c:	080201b4 	.word	0x080201b4
 8012420:	080200b4 	.word	0x080200b4
 8012424:	080201d0 	.word	0x080201d0
 8012428:	2000b62c 	.word	0x2000b62c
 801242c:	2000b628 	.word	0x2000b628
 8012430:	2000b61c 	.word	0x2000b61c
 8012434:	2000b618 	.word	0x2000b618

08012438 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8012438:	b580      	push	{r7, lr}
 801243a:	b082      	sub	sp, #8
 801243c:	af00      	add	r7, sp, #0
 801243e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8012440:	2101      	movs	r1, #1
 8012442:	6878      	ldr	r0, [r7, #4]
 8012444:	f7ff ff3a 	bl	80122bc <tcp_abandon>
}
 8012448:	bf00      	nop
 801244a:	3708      	adds	r7, #8
 801244c:	46bd      	mov	sp, r7
 801244e:	bd80      	pop	{r7, pc}

08012450 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8012450:	b580      	push	{r7, lr}
 8012452:	b088      	sub	sp, #32
 8012454:	af00      	add	r7, sp, #0
 8012456:	60f8      	str	r0, [r7, #12]
 8012458:	60b9      	str	r1, [r7, #8]
 801245a:	4613      	mov	r3, r2
 801245c:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 801245e:	2304      	movs	r3, #4
 8012460:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8012462:	68bb      	ldr	r3, [r7, #8]
 8012464:	2b00      	cmp	r3, #0
 8012466:	d101      	bne.n	801246c <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8012468:	4b3e      	ldr	r3, [pc, #248]	; (8012564 <tcp_bind+0x114>)
 801246a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801246c:	68fb      	ldr	r3, [r7, #12]
 801246e:	2b00      	cmp	r3, #0
 8012470:	d109      	bne.n	8012486 <tcp_bind+0x36>
 8012472:	4b3d      	ldr	r3, [pc, #244]	; (8012568 <tcp_bind+0x118>)
 8012474:	f240 22a9 	movw	r2, #681	; 0x2a9
 8012478:	493c      	ldr	r1, [pc, #240]	; (801256c <tcp_bind+0x11c>)
 801247a:	483d      	ldr	r0, [pc, #244]	; (8012570 <tcp_bind+0x120>)
 801247c:	f00a f930 	bl	801c6e0 <iprintf>
 8012480:	f06f 030f 	mvn.w	r3, #15
 8012484:	e06a      	b.n	801255c <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8012486:	68fb      	ldr	r3, [r7, #12]
 8012488:	7d1b      	ldrb	r3, [r3, #20]
 801248a:	2b00      	cmp	r3, #0
 801248c:	d009      	beq.n	80124a2 <tcp_bind+0x52>
 801248e:	4b36      	ldr	r3, [pc, #216]	; (8012568 <tcp_bind+0x118>)
 8012490:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012494:	4937      	ldr	r1, [pc, #220]	; (8012574 <tcp_bind+0x124>)
 8012496:	4836      	ldr	r0, [pc, #216]	; (8012570 <tcp_bind+0x120>)
 8012498:	f00a f922 	bl	801c6e0 <iprintf>
 801249c:	f06f 0305 	mvn.w	r3, #5
 80124a0:	e05c      	b.n	801255c <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 80124a2:	88fb      	ldrh	r3, [r7, #6]
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	d109      	bne.n	80124bc <tcp_bind+0x6c>
    port = tcp_new_port();
 80124a8:	f000 f9f0 	bl	801288c <tcp_new_port>
 80124ac:	4603      	mov	r3, r0
 80124ae:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80124b0:	88fb      	ldrh	r3, [r7, #6]
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d135      	bne.n	8012522 <tcp_bind+0xd2>
      return ERR_BUF;
 80124b6:	f06f 0301 	mvn.w	r3, #1
 80124ba:	e04f      	b.n	801255c <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80124bc:	2300      	movs	r3, #0
 80124be:	61fb      	str	r3, [r7, #28]
 80124c0:	e02b      	b.n	801251a <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80124c2:	4a2d      	ldr	r2, [pc, #180]	; (8012578 <tcp_bind+0x128>)
 80124c4:	69fb      	ldr	r3, [r7, #28]
 80124c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	61bb      	str	r3, [r7, #24]
 80124ce:	e01e      	b.n	801250e <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 80124d0:	69bb      	ldr	r3, [r7, #24]
 80124d2:	8adb      	ldrh	r3, [r3, #22]
 80124d4:	88fa      	ldrh	r2, [r7, #6]
 80124d6:	429a      	cmp	r2, r3
 80124d8:	d116      	bne.n	8012508 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 80124da:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d010      	beq.n	8012502 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 80124e0:	69bb      	ldr	r3, [r7, #24]
 80124e2:	681b      	ldr	r3, [r3, #0]
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d00c      	beq.n	8012502 <tcp_bind+0xb2>
 80124e8:	68bb      	ldr	r3, [r7, #8]
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d009      	beq.n	8012502 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 80124ee:	68bb      	ldr	r3, [r7, #8]
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d005      	beq.n	8012502 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 80124f6:	69bb      	ldr	r3, [r7, #24]
 80124f8:	681a      	ldr	r2, [r3, #0]
 80124fa:	68bb      	ldr	r3, [r7, #8]
 80124fc:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80124fe:	429a      	cmp	r2, r3
 8012500:	d102      	bne.n	8012508 <tcp_bind+0xb8>
              return ERR_USE;
 8012502:	f06f 0307 	mvn.w	r3, #7
 8012506:	e029      	b.n	801255c <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8012508:	69bb      	ldr	r3, [r7, #24]
 801250a:	68db      	ldr	r3, [r3, #12]
 801250c:	61bb      	str	r3, [r7, #24]
 801250e:	69bb      	ldr	r3, [r7, #24]
 8012510:	2b00      	cmp	r3, #0
 8012512:	d1dd      	bne.n	80124d0 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8012514:	69fb      	ldr	r3, [r7, #28]
 8012516:	3301      	adds	r3, #1
 8012518:	61fb      	str	r3, [r7, #28]
 801251a:	69fa      	ldr	r2, [r7, #28]
 801251c:	697b      	ldr	r3, [r7, #20]
 801251e:	429a      	cmp	r2, r3
 8012520:	dbcf      	blt.n	80124c2 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8012522:	68bb      	ldr	r3, [r7, #8]
 8012524:	2b00      	cmp	r3, #0
 8012526:	d00c      	beq.n	8012542 <tcp_bind+0xf2>
 8012528:	68bb      	ldr	r3, [r7, #8]
 801252a:	681b      	ldr	r3, [r3, #0]
 801252c:	2b00      	cmp	r3, #0
 801252e:	d008      	beq.n	8012542 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8012530:	68bb      	ldr	r3, [r7, #8]
 8012532:	2b00      	cmp	r3, #0
 8012534:	d002      	beq.n	801253c <tcp_bind+0xec>
 8012536:	68bb      	ldr	r3, [r7, #8]
 8012538:	681b      	ldr	r3, [r3, #0]
 801253a:	e000      	b.n	801253e <tcp_bind+0xee>
 801253c:	2300      	movs	r3, #0
 801253e:	68fa      	ldr	r2, [r7, #12]
 8012540:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8012542:	68fb      	ldr	r3, [r7, #12]
 8012544:	88fa      	ldrh	r2, [r7, #6]
 8012546:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8012548:	4b0c      	ldr	r3, [pc, #48]	; (801257c <tcp_bind+0x12c>)
 801254a:	681a      	ldr	r2, [r3, #0]
 801254c:	68fb      	ldr	r3, [r7, #12]
 801254e:	60da      	str	r2, [r3, #12]
 8012550:	4a0a      	ldr	r2, [pc, #40]	; (801257c <tcp_bind+0x12c>)
 8012552:	68fb      	ldr	r3, [r7, #12]
 8012554:	6013      	str	r3, [r2, #0]
 8012556:	f005 fccb 	bl	8017ef0 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 801255a:	2300      	movs	r3, #0
}
 801255c:	4618      	mov	r0, r3
 801255e:	3720      	adds	r7, #32
 8012560:	46bd      	mov	sp, r7
 8012562:	bd80      	pop	{r7, pc}
 8012564:	0802304c 	.word	0x0802304c
 8012568:	08020070 	.word	0x08020070
 801256c:	08020204 	.word	0x08020204
 8012570:	080200b4 	.word	0x080200b4
 8012574:	0802021c 	.word	0x0802021c
 8012578:	08023024 	.word	0x08023024
 801257c:	2000b628 	.word	0x2000b628

08012580 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8012580:	b580      	push	{r7, lr}
 8012582:	b084      	sub	sp, #16
 8012584:	af00      	add	r7, sp, #0
 8012586:	60f8      	str	r0, [r7, #12]
 8012588:	60b9      	str	r1, [r7, #8]
 801258a:	4613      	mov	r3, r2
 801258c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 801258e:	68bb      	ldr	r3, [r7, #8]
 8012590:	2b00      	cmp	r3, #0
 8012592:	d106      	bne.n	80125a2 <tcp_accept_null+0x22>
 8012594:	4b07      	ldr	r3, [pc, #28]	; (80125b4 <tcp_accept_null+0x34>)
 8012596:	f240 320f 	movw	r2, #783	; 0x30f
 801259a:	4907      	ldr	r1, [pc, #28]	; (80125b8 <tcp_accept_null+0x38>)
 801259c:	4807      	ldr	r0, [pc, #28]	; (80125bc <tcp_accept_null+0x3c>)
 801259e:	f00a f89f 	bl	801c6e0 <iprintf>

  tcp_abort(pcb);
 80125a2:	68b8      	ldr	r0, [r7, #8]
 80125a4:	f7ff ff48 	bl	8012438 <tcp_abort>

  return ERR_ABRT;
 80125a8:	f06f 030c 	mvn.w	r3, #12
}
 80125ac:	4618      	mov	r0, r3
 80125ae:	3710      	adds	r7, #16
 80125b0:	46bd      	mov	sp, r7
 80125b2:	bd80      	pop	{r7, pc}
 80125b4:	08020070 	.word	0x08020070
 80125b8:	08020244 	.word	0x08020244
 80125bc:	080200b4 	.word	0x080200b4

080125c0 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 80125c0:	b580      	push	{r7, lr}
 80125c2:	b082      	sub	sp, #8
 80125c4:	af00      	add	r7, sp, #0
 80125c6:	6078      	str	r0, [r7, #4]
 80125c8:	460b      	mov	r3, r1
 80125ca:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 80125cc:	78fb      	ldrb	r3, [r7, #3]
 80125ce:	2200      	movs	r2, #0
 80125d0:	4619      	mov	r1, r3
 80125d2:	6878      	ldr	r0, [r7, #4]
 80125d4:	f000 f806 	bl	80125e4 <tcp_listen_with_backlog_and_err>
 80125d8:	4603      	mov	r3, r0
}
 80125da:	4618      	mov	r0, r3
 80125dc:	3708      	adds	r7, #8
 80125de:	46bd      	mov	sp, r7
 80125e0:	bd80      	pop	{r7, pc}
	...

080125e4 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 80125e4:	b580      	push	{r7, lr}
 80125e6:	b088      	sub	sp, #32
 80125e8:	af00      	add	r7, sp, #0
 80125ea:	60f8      	str	r0, [r7, #12]
 80125ec:	460b      	mov	r3, r1
 80125ee:	607a      	str	r2, [r7, #4]
 80125f0:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 80125f2:	2300      	movs	r3, #0
 80125f4:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 80125f6:	68fb      	ldr	r3, [r7, #12]
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d109      	bne.n	8012610 <tcp_listen_with_backlog_and_err+0x2c>
 80125fc:	4b47      	ldr	r3, [pc, #284]	; (801271c <tcp_listen_with_backlog_and_err+0x138>)
 80125fe:	f240 3259 	movw	r2, #857	; 0x359
 8012602:	4947      	ldr	r1, [pc, #284]	; (8012720 <tcp_listen_with_backlog_and_err+0x13c>)
 8012604:	4847      	ldr	r0, [pc, #284]	; (8012724 <tcp_listen_with_backlog_and_err+0x140>)
 8012606:	f00a f86b 	bl	801c6e0 <iprintf>
 801260a:	23f0      	movs	r3, #240	; 0xf0
 801260c:	76fb      	strb	r3, [r7, #27]
 801260e:	e079      	b.n	8012704 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8012610:	68fb      	ldr	r3, [r7, #12]
 8012612:	7d1b      	ldrb	r3, [r3, #20]
 8012614:	2b00      	cmp	r3, #0
 8012616:	d009      	beq.n	801262c <tcp_listen_with_backlog_and_err+0x48>
 8012618:	4b40      	ldr	r3, [pc, #256]	; (801271c <tcp_listen_with_backlog_and_err+0x138>)
 801261a:	f240 325a 	movw	r2, #858	; 0x35a
 801261e:	4942      	ldr	r1, [pc, #264]	; (8012728 <tcp_listen_with_backlog_and_err+0x144>)
 8012620:	4840      	ldr	r0, [pc, #256]	; (8012724 <tcp_listen_with_backlog_and_err+0x140>)
 8012622:	f00a f85d 	bl	801c6e0 <iprintf>
 8012626:	23f1      	movs	r3, #241	; 0xf1
 8012628:	76fb      	strb	r3, [r7, #27]
 801262a:	e06b      	b.n	8012704 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 801262c:	68fb      	ldr	r3, [r7, #12]
 801262e:	7d1b      	ldrb	r3, [r3, #20]
 8012630:	2b01      	cmp	r3, #1
 8012632:	d104      	bne.n	801263e <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8012634:	68fb      	ldr	r3, [r7, #12]
 8012636:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8012638:	23f7      	movs	r3, #247	; 0xf7
 801263a:	76fb      	strb	r3, [r7, #27]
    goto done;
 801263c:	e062      	b.n	8012704 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 801263e:	2002      	movs	r0, #2
 8012640:	f7fe fa2a 	bl	8010a98 <memp_malloc>
 8012644:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8012646:	69fb      	ldr	r3, [r7, #28]
 8012648:	2b00      	cmp	r3, #0
 801264a:	d102      	bne.n	8012652 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 801264c:	23ff      	movs	r3, #255	; 0xff
 801264e:	76fb      	strb	r3, [r7, #27]
    goto done;
 8012650:	e058      	b.n	8012704 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8012652:	68fb      	ldr	r3, [r7, #12]
 8012654:	691a      	ldr	r2, [r3, #16]
 8012656:	69fb      	ldr	r3, [r7, #28]
 8012658:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 801265a:	68fb      	ldr	r3, [r7, #12]
 801265c:	8ada      	ldrh	r2, [r3, #22]
 801265e:	69fb      	ldr	r3, [r7, #28]
 8012660:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8012662:	69fb      	ldr	r3, [r7, #28]
 8012664:	2201      	movs	r2, #1
 8012666:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8012668:	68fb      	ldr	r3, [r7, #12]
 801266a:	7d5a      	ldrb	r2, [r3, #21]
 801266c:	69fb      	ldr	r3, [r7, #28]
 801266e:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8012670:	68fb      	ldr	r3, [r7, #12]
 8012672:	7a5a      	ldrb	r2, [r3, #9]
 8012674:	69fb      	ldr	r3, [r7, #28]
 8012676:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8012678:	69fb      	ldr	r3, [r7, #28]
 801267a:	2200      	movs	r2, #0
 801267c:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 801267e:	68fb      	ldr	r3, [r7, #12]
 8012680:	7ada      	ldrb	r2, [r3, #11]
 8012682:	69fb      	ldr	r3, [r7, #28]
 8012684:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8012686:	68fb      	ldr	r3, [r7, #12]
 8012688:	7a9a      	ldrb	r2, [r3, #10]
 801268a:	69fb      	ldr	r3, [r7, #28]
 801268c:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 801268e:	68fb      	ldr	r3, [r7, #12]
 8012690:	681a      	ldr	r2, [r3, #0]
 8012692:	69fb      	ldr	r3, [r7, #28]
 8012694:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8012696:	68fb      	ldr	r3, [r7, #12]
 8012698:	8adb      	ldrh	r3, [r3, #22]
 801269a:	2b00      	cmp	r3, #0
 801269c:	d021      	beq.n	80126e2 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 801269e:	4b23      	ldr	r3, [pc, #140]	; (801272c <tcp_listen_with_backlog_and_err+0x148>)
 80126a0:	681b      	ldr	r3, [r3, #0]
 80126a2:	68fa      	ldr	r2, [r7, #12]
 80126a4:	429a      	cmp	r2, r3
 80126a6:	d105      	bne.n	80126b4 <tcp_listen_with_backlog_and_err+0xd0>
 80126a8:	4b20      	ldr	r3, [pc, #128]	; (801272c <tcp_listen_with_backlog_and_err+0x148>)
 80126aa:	681b      	ldr	r3, [r3, #0]
 80126ac:	68db      	ldr	r3, [r3, #12]
 80126ae:	4a1f      	ldr	r2, [pc, #124]	; (801272c <tcp_listen_with_backlog_and_err+0x148>)
 80126b0:	6013      	str	r3, [r2, #0]
 80126b2:	e013      	b.n	80126dc <tcp_listen_with_backlog_and_err+0xf8>
 80126b4:	4b1d      	ldr	r3, [pc, #116]	; (801272c <tcp_listen_with_backlog_and_err+0x148>)
 80126b6:	681b      	ldr	r3, [r3, #0]
 80126b8:	617b      	str	r3, [r7, #20]
 80126ba:	e00c      	b.n	80126d6 <tcp_listen_with_backlog_and_err+0xf2>
 80126bc:	697b      	ldr	r3, [r7, #20]
 80126be:	68db      	ldr	r3, [r3, #12]
 80126c0:	68fa      	ldr	r2, [r7, #12]
 80126c2:	429a      	cmp	r2, r3
 80126c4:	d104      	bne.n	80126d0 <tcp_listen_with_backlog_and_err+0xec>
 80126c6:	68fb      	ldr	r3, [r7, #12]
 80126c8:	68da      	ldr	r2, [r3, #12]
 80126ca:	697b      	ldr	r3, [r7, #20]
 80126cc:	60da      	str	r2, [r3, #12]
 80126ce:	e005      	b.n	80126dc <tcp_listen_with_backlog_and_err+0xf8>
 80126d0:	697b      	ldr	r3, [r7, #20]
 80126d2:	68db      	ldr	r3, [r3, #12]
 80126d4:	617b      	str	r3, [r7, #20]
 80126d6:	697b      	ldr	r3, [r7, #20]
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d1ef      	bne.n	80126bc <tcp_listen_with_backlog_and_err+0xd8>
 80126dc:	68fb      	ldr	r3, [r7, #12]
 80126de:	2200      	movs	r2, #0
 80126e0:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 80126e2:	68f8      	ldr	r0, [r7, #12]
 80126e4:	f7ff fb64 	bl	8011db0 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 80126e8:	69fb      	ldr	r3, [r7, #28]
 80126ea:	4a11      	ldr	r2, [pc, #68]	; (8012730 <tcp_listen_with_backlog_and_err+0x14c>)
 80126ec:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 80126ee:	4b11      	ldr	r3, [pc, #68]	; (8012734 <tcp_listen_with_backlog_and_err+0x150>)
 80126f0:	681a      	ldr	r2, [r3, #0]
 80126f2:	69fb      	ldr	r3, [r7, #28]
 80126f4:	60da      	str	r2, [r3, #12]
 80126f6:	4a0f      	ldr	r2, [pc, #60]	; (8012734 <tcp_listen_with_backlog_and_err+0x150>)
 80126f8:	69fb      	ldr	r3, [r7, #28]
 80126fa:	6013      	str	r3, [r2, #0]
 80126fc:	f005 fbf8 	bl	8017ef0 <tcp_timer_needed>
  res = ERR_OK;
 8012700:	2300      	movs	r3, #0
 8012702:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	2b00      	cmp	r3, #0
 8012708:	d002      	beq.n	8012710 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	7efa      	ldrb	r2, [r7, #27]
 801270e:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8012710:	69fb      	ldr	r3, [r7, #28]
}
 8012712:	4618      	mov	r0, r3
 8012714:	3720      	adds	r7, #32
 8012716:	46bd      	mov	sp, r7
 8012718:	bd80      	pop	{r7, pc}
 801271a:	bf00      	nop
 801271c:	08020070 	.word	0x08020070
 8012720:	08020264 	.word	0x08020264
 8012724:	080200b4 	.word	0x080200b4
 8012728:	08020294 	.word	0x08020294
 801272c:	2000b628 	.word	0x2000b628
 8012730:	08012581 	.word	0x08012581
 8012734:	2000b624 	.word	0x2000b624

08012738 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8012738:	b580      	push	{r7, lr}
 801273a:	b084      	sub	sp, #16
 801273c:	af00      	add	r7, sp, #0
 801273e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	2b00      	cmp	r3, #0
 8012744:	d106      	bne.n	8012754 <tcp_update_rcv_ann_wnd+0x1c>
 8012746:	4b25      	ldr	r3, [pc, #148]	; (80127dc <tcp_update_rcv_ann_wnd+0xa4>)
 8012748:	f240 32a6 	movw	r2, #934	; 0x3a6
 801274c:	4924      	ldr	r1, [pc, #144]	; (80127e0 <tcp_update_rcv_ann_wnd+0xa8>)
 801274e:	4825      	ldr	r0, [pc, #148]	; (80127e4 <tcp_update_rcv_ann_wnd+0xac>)
 8012750:	f009 ffc6 	bl	801c6e0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012758:	687a      	ldr	r2, [r7, #4]
 801275a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 801275c:	4413      	add	r3, r2
 801275e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012764:	687a      	ldr	r2, [r7, #4]
 8012766:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8012768:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 801276c:	bf28      	it	cs
 801276e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8012772:	b292      	uxth	r2, r2
 8012774:	4413      	add	r3, r2
 8012776:	68fa      	ldr	r2, [r7, #12]
 8012778:	1ad3      	subs	r3, r2, r3
 801277a:	2b00      	cmp	r3, #0
 801277c:	db08      	blt.n	8012790 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801278a:	68fa      	ldr	r2, [r7, #12]
 801278c:	1ad3      	subs	r3, r2, r3
 801278e:	e020      	b.n	80127d2 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012798:	1ad3      	subs	r3, r2, r3
 801279a:	2b00      	cmp	r3, #0
 801279c:	dd03      	ble.n	80127a6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	2200      	movs	r2, #0
 80127a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80127a4:	e014      	b.n	80127d0 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127ae:	1ad3      	subs	r3, r2, r3
 80127b0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80127b2:	68bb      	ldr	r3, [r7, #8]
 80127b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80127b8:	d306      	bcc.n	80127c8 <tcp_update_rcv_ann_wnd+0x90>
 80127ba:	4b08      	ldr	r3, [pc, #32]	; (80127dc <tcp_update_rcv_ann_wnd+0xa4>)
 80127bc:	f240 32b6 	movw	r2, #950	; 0x3b6
 80127c0:	4909      	ldr	r1, [pc, #36]	; (80127e8 <tcp_update_rcv_ann_wnd+0xb0>)
 80127c2:	4808      	ldr	r0, [pc, #32]	; (80127e4 <tcp_update_rcv_ann_wnd+0xac>)
 80127c4:	f009 ff8c 	bl	801c6e0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80127c8:	68bb      	ldr	r3, [r7, #8]
 80127ca:	b29a      	uxth	r2, r3
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80127d0:	2300      	movs	r3, #0
  }
}
 80127d2:	4618      	mov	r0, r3
 80127d4:	3710      	adds	r7, #16
 80127d6:	46bd      	mov	sp, r7
 80127d8:	bd80      	pop	{r7, pc}
 80127da:	bf00      	nop
 80127dc:	08020070 	.word	0x08020070
 80127e0:	080202cc 	.word	0x080202cc
 80127e4:	080200b4 	.word	0x080200b4
 80127e8:	080202f0 	.word	0x080202f0

080127ec <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80127ec:	b580      	push	{r7, lr}
 80127ee:	b084      	sub	sp, #16
 80127f0:	af00      	add	r7, sp, #0
 80127f2:	6078      	str	r0, [r7, #4]
 80127f4:	460b      	mov	r3, r1
 80127f6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d107      	bne.n	801280e <tcp_recved+0x22>
 80127fe:	4b1f      	ldr	r3, [pc, #124]	; (801287c <tcp_recved+0x90>)
 8012800:	f240 32cf 	movw	r2, #975	; 0x3cf
 8012804:	491e      	ldr	r1, [pc, #120]	; (8012880 <tcp_recved+0x94>)
 8012806:	481f      	ldr	r0, [pc, #124]	; (8012884 <tcp_recved+0x98>)
 8012808:	f009 ff6a 	bl	801c6e0 <iprintf>
 801280c:	e032      	b.n	8012874 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	7d1b      	ldrb	r3, [r3, #20]
 8012812:	2b01      	cmp	r3, #1
 8012814:	d106      	bne.n	8012824 <tcp_recved+0x38>
 8012816:	4b19      	ldr	r3, [pc, #100]	; (801287c <tcp_recved+0x90>)
 8012818:	f240 32d2 	movw	r2, #978	; 0x3d2
 801281c:	491a      	ldr	r1, [pc, #104]	; (8012888 <tcp_recved+0x9c>)
 801281e:	4819      	ldr	r0, [pc, #100]	; (8012884 <tcp_recved+0x98>)
 8012820:	f009 ff5e 	bl	801c6e0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012828:	887b      	ldrh	r3, [r7, #2]
 801282a:	4413      	add	r3, r2
 801282c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 801282e:	89fb      	ldrh	r3, [r7, #14]
 8012830:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8012834:	d804      	bhi.n	8012840 <tcp_recved+0x54>
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801283a:	89fa      	ldrh	r2, [r7, #14]
 801283c:	429a      	cmp	r2, r3
 801283e:	d204      	bcs.n	801284a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8012846:	851a      	strh	r2, [r3, #40]	; 0x28
 8012848:	e002      	b.n	8012850 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	89fa      	ldrh	r2, [r7, #14]
 801284e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8012850:	6878      	ldr	r0, [r7, #4]
 8012852:	f7ff ff71 	bl	8012738 <tcp_update_rcv_ann_wnd>
 8012856:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8012858:	68bb      	ldr	r3, [r7, #8]
 801285a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801285e:	d309      	bcc.n	8012874 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	8b5b      	ldrh	r3, [r3, #26]
 8012864:	f043 0302 	orr.w	r3, r3, #2
 8012868:	b29a      	uxth	r2, r3
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801286e:	6878      	ldr	r0, [r7, #4]
 8012870:	f004 fbc8 	bl	8017004 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8012874:	3710      	adds	r7, #16
 8012876:	46bd      	mov	sp, r7
 8012878:	bd80      	pop	{r7, pc}
 801287a:	bf00      	nop
 801287c:	08020070 	.word	0x08020070
 8012880:	0802030c 	.word	0x0802030c
 8012884:	080200b4 	.word	0x080200b4
 8012888:	08020324 	.word	0x08020324

0801288c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 801288c:	b480      	push	{r7}
 801288e:	b083      	sub	sp, #12
 8012890:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8012892:	2300      	movs	r3, #0
 8012894:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8012896:	4b1e      	ldr	r3, [pc, #120]	; (8012910 <tcp_new_port+0x84>)
 8012898:	881b      	ldrh	r3, [r3, #0]
 801289a:	3301      	adds	r3, #1
 801289c:	b29a      	uxth	r2, r3
 801289e:	4b1c      	ldr	r3, [pc, #112]	; (8012910 <tcp_new_port+0x84>)
 80128a0:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 80128a2:	4b1b      	ldr	r3, [pc, #108]	; (8012910 <tcp_new_port+0x84>)
 80128a4:	881b      	ldrh	r3, [r3, #0]
 80128a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80128aa:	4293      	cmp	r3, r2
 80128ac:	d103      	bne.n	80128b6 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80128ae:	4b18      	ldr	r3, [pc, #96]	; (8012910 <tcp_new_port+0x84>)
 80128b0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80128b4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80128b6:	2300      	movs	r3, #0
 80128b8:	71fb      	strb	r3, [r7, #7]
 80128ba:	e01e      	b.n	80128fa <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80128bc:	79fb      	ldrb	r3, [r7, #7]
 80128be:	4a15      	ldr	r2, [pc, #84]	; (8012914 <tcp_new_port+0x88>)
 80128c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80128c4:	681b      	ldr	r3, [r3, #0]
 80128c6:	603b      	str	r3, [r7, #0]
 80128c8:	e011      	b.n	80128ee <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 80128ca:	683b      	ldr	r3, [r7, #0]
 80128cc:	8ada      	ldrh	r2, [r3, #22]
 80128ce:	4b10      	ldr	r3, [pc, #64]	; (8012910 <tcp_new_port+0x84>)
 80128d0:	881b      	ldrh	r3, [r3, #0]
 80128d2:	429a      	cmp	r2, r3
 80128d4:	d108      	bne.n	80128e8 <tcp_new_port+0x5c>
        n++;
 80128d6:	88bb      	ldrh	r3, [r7, #4]
 80128d8:	3301      	adds	r3, #1
 80128da:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80128dc:	88bb      	ldrh	r3, [r7, #4]
 80128de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80128e2:	d3d8      	bcc.n	8012896 <tcp_new_port+0xa>
          return 0;
 80128e4:	2300      	movs	r3, #0
 80128e6:	e00d      	b.n	8012904 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80128e8:	683b      	ldr	r3, [r7, #0]
 80128ea:	68db      	ldr	r3, [r3, #12]
 80128ec:	603b      	str	r3, [r7, #0]
 80128ee:	683b      	ldr	r3, [r7, #0]
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d1ea      	bne.n	80128ca <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80128f4:	79fb      	ldrb	r3, [r7, #7]
 80128f6:	3301      	adds	r3, #1
 80128f8:	71fb      	strb	r3, [r7, #7]
 80128fa:	79fb      	ldrb	r3, [r7, #7]
 80128fc:	2b03      	cmp	r3, #3
 80128fe:	d9dd      	bls.n	80128bc <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8012900:	4b03      	ldr	r3, [pc, #12]	; (8012910 <tcp_new_port+0x84>)
 8012902:	881b      	ldrh	r3, [r3, #0]
}
 8012904:	4618      	mov	r0, r3
 8012906:	370c      	adds	r7, #12
 8012908:	46bd      	mov	sp, r7
 801290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801290e:	4770      	bx	lr
 8012910:	20000130 	.word	0x20000130
 8012914:	08023024 	.word	0x08023024

08012918 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8012918:	b5b0      	push	{r4, r5, r7, lr}
 801291a:	b090      	sub	sp, #64	; 0x40
 801291c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801291e:	2300      	movs	r3, #0
 8012920:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8012924:	4b94      	ldr	r3, [pc, #592]	; (8012b78 <tcp_slowtmr+0x260>)
 8012926:	681b      	ldr	r3, [r3, #0]
 8012928:	3301      	adds	r3, #1
 801292a:	4a93      	ldr	r2, [pc, #588]	; (8012b78 <tcp_slowtmr+0x260>)
 801292c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801292e:	4b93      	ldr	r3, [pc, #588]	; (8012b7c <tcp_slowtmr+0x264>)
 8012930:	781b      	ldrb	r3, [r3, #0]
 8012932:	3301      	adds	r3, #1
 8012934:	b2da      	uxtb	r2, r3
 8012936:	4b91      	ldr	r3, [pc, #580]	; (8012b7c <tcp_slowtmr+0x264>)
 8012938:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 801293a:	2300      	movs	r3, #0
 801293c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 801293e:	4b90      	ldr	r3, [pc, #576]	; (8012b80 <tcp_slowtmr+0x268>)
 8012940:	681b      	ldr	r3, [r3, #0]
 8012942:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8012944:	e29f      	b.n	8012e86 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8012946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012948:	7d1b      	ldrb	r3, [r3, #20]
 801294a:	2b00      	cmp	r3, #0
 801294c:	d106      	bne.n	801295c <tcp_slowtmr+0x44>
 801294e:	4b8d      	ldr	r3, [pc, #564]	; (8012b84 <tcp_slowtmr+0x26c>)
 8012950:	f240 42be 	movw	r2, #1214	; 0x4be
 8012954:	498c      	ldr	r1, [pc, #560]	; (8012b88 <tcp_slowtmr+0x270>)
 8012956:	488d      	ldr	r0, [pc, #564]	; (8012b8c <tcp_slowtmr+0x274>)
 8012958:	f009 fec2 	bl	801c6e0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801295c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801295e:	7d1b      	ldrb	r3, [r3, #20]
 8012960:	2b01      	cmp	r3, #1
 8012962:	d106      	bne.n	8012972 <tcp_slowtmr+0x5a>
 8012964:	4b87      	ldr	r3, [pc, #540]	; (8012b84 <tcp_slowtmr+0x26c>)
 8012966:	f240 42bf 	movw	r2, #1215	; 0x4bf
 801296a:	4989      	ldr	r1, [pc, #548]	; (8012b90 <tcp_slowtmr+0x278>)
 801296c:	4887      	ldr	r0, [pc, #540]	; (8012b8c <tcp_slowtmr+0x274>)
 801296e:	f009 feb7 	bl	801c6e0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8012972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012974:	7d1b      	ldrb	r3, [r3, #20]
 8012976:	2b0a      	cmp	r3, #10
 8012978:	d106      	bne.n	8012988 <tcp_slowtmr+0x70>
 801297a:	4b82      	ldr	r3, [pc, #520]	; (8012b84 <tcp_slowtmr+0x26c>)
 801297c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8012980:	4984      	ldr	r1, [pc, #528]	; (8012b94 <tcp_slowtmr+0x27c>)
 8012982:	4882      	ldr	r0, [pc, #520]	; (8012b8c <tcp_slowtmr+0x274>)
 8012984:	f009 feac 	bl	801c6e0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8012988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801298a:	7f9a      	ldrb	r2, [r3, #30]
 801298c:	4b7b      	ldr	r3, [pc, #492]	; (8012b7c <tcp_slowtmr+0x264>)
 801298e:	781b      	ldrb	r3, [r3, #0]
 8012990:	429a      	cmp	r2, r3
 8012992:	d105      	bne.n	80129a0 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8012994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012996:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8012998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801299a:	68db      	ldr	r3, [r3, #12]
 801299c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 801299e:	e272      	b.n	8012e86 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 80129a0:	4b76      	ldr	r3, [pc, #472]	; (8012b7c <tcp_slowtmr+0x264>)
 80129a2:	781a      	ldrb	r2, [r3, #0]
 80129a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129a6:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80129a8:	2300      	movs	r3, #0
 80129aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80129ae:	2300      	movs	r3, #0
 80129b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80129b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129b6:	7d1b      	ldrb	r3, [r3, #20]
 80129b8:	2b02      	cmp	r3, #2
 80129ba:	d10a      	bne.n	80129d2 <tcp_slowtmr+0xba>
 80129bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80129c2:	2b05      	cmp	r3, #5
 80129c4:	d905      	bls.n	80129d2 <tcp_slowtmr+0xba>
      ++pcb_remove;
 80129c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80129ca:	3301      	adds	r3, #1
 80129cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80129d0:	e11e      	b.n	8012c10 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80129d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129d4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80129d8:	2b0b      	cmp	r3, #11
 80129da:	d905      	bls.n	80129e8 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 80129dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80129e0:	3301      	adds	r3, #1
 80129e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80129e6:	e113      	b.n	8012c10 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80129e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129ea:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d075      	beq.n	8012ade <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80129f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d006      	beq.n	8012a08 <tcp_slowtmr+0xf0>
 80129fa:	4b62      	ldr	r3, [pc, #392]	; (8012b84 <tcp_slowtmr+0x26c>)
 80129fc:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8012a00:	4965      	ldr	r1, [pc, #404]	; (8012b98 <tcp_slowtmr+0x280>)
 8012a02:	4862      	ldr	r0, [pc, #392]	; (8012b8c <tcp_slowtmr+0x274>)
 8012a04:	f009 fe6c 	bl	801c6e0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8012a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d106      	bne.n	8012a1e <tcp_slowtmr+0x106>
 8012a10:	4b5c      	ldr	r3, [pc, #368]	; (8012b84 <tcp_slowtmr+0x26c>)
 8012a12:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8012a16:	4961      	ldr	r1, [pc, #388]	; (8012b9c <tcp_slowtmr+0x284>)
 8012a18:	485c      	ldr	r0, [pc, #368]	; (8012b8c <tcp_slowtmr+0x274>)
 8012a1a:	f009 fe61 	bl	801c6e0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8012a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a20:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012a24:	2b0b      	cmp	r3, #11
 8012a26:	d905      	bls.n	8012a34 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8012a28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012a2c:	3301      	adds	r3, #1
 8012a2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012a32:	e0ed      	b.n	8012c10 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8012a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a36:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012a3a:	3b01      	subs	r3, #1
 8012a3c:	4a58      	ldr	r2, [pc, #352]	; (8012ba0 <tcp_slowtmr+0x288>)
 8012a3e:	5cd3      	ldrb	r3, [r2, r3]
 8012a40:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8012a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a44:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8012a48:	7c7a      	ldrb	r2, [r7, #17]
 8012a4a:	429a      	cmp	r2, r3
 8012a4c:	d907      	bls.n	8012a5e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8012a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a50:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8012a54:	3301      	adds	r3, #1
 8012a56:	b2da      	uxtb	r2, r3
 8012a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a5a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8012a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a60:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8012a64:	7c7a      	ldrb	r2, [r7, #17]
 8012a66:	429a      	cmp	r2, r3
 8012a68:	f200 80d2 	bhi.w	8012c10 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8012a6c:	2301      	movs	r3, #1
 8012a6e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8012a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a72:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d108      	bne.n	8012a8c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8012a7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012a7c:	f005 f96a 	bl	8017d54 <tcp_zero_window_probe>
 8012a80:	4603      	mov	r3, r0
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d014      	beq.n	8012ab0 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8012a86:	2300      	movs	r3, #0
 8012a88:	623b      	str	r3, [r7, #32]
 8012a8a:	e011      	b.n	8012ab0 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8012a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a8e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012a92:	4619      	mov	r1, r3
 8012a94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012a96:	f004 f82f 	bl	8016af8 <tcp_split_unsent_seg>
 8012a9a:	4603      	mov	r3, r0
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d107      	bne.n	8012ab0 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8012aa0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012aa2:	f004 faaf 	bl	8017004 <tcp_output>
 8012aa6:	4603      	mov	r3, r0
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	d101      	bne.n	8012ab0 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8012aac:	2300      	movs	r3, #0
 8012aae:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8012ab0:	6a3b      	ldr	r3, [r7, #32]
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	f000 80ac 	beq.w	8012c10 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8012ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012aba:	2200      	movs	r2, #0
 8012abc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8012ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ac2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012ac6:	2b06      	cmp	r3, #6
 8012ac8:	f200 80a2 	bhi.w	8012c10 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8012acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ace:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012ad2:	3301      	adds	r3, #1
 8012ad4:	b2da      	uxtb	r2, r3
 8012ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ad8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8012adc:	e098      	b.n	8012c10 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8012ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ae0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	db0f      	blt.n	8012b08 <tcp_slowtmr+0x1f0>
 8012ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012aea:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012aee:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8012af2:	4293      	cmp	r3, r2
 8012af4:	d008      	beq.n	8012b08 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8012af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012af8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012afc:	b29b      	uxth	r3, r3
 8012afe:	3301      	adds	r3, #1
 8012b00:	b29b      	uxth	r3, r3
 8012b02:	b21a      	sxth	r2, r3
 8012b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b06:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8012b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b0a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8012b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b10:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8012b14:	429a      	cmp	r2, r3
 8012b16:	db7b      	blt.n	8012c10 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8012b18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012b1a:	f004 fd65 	bl	80175e8 <tcp_rexmit_rto_prepare>
 8012b1e:	4603      	mov	r3, r0
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d007      	beq.n	8012b34 <tcp_slowtmr+0x21c>
 8012b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	d171      	bne.n	8012c10 <tcp_slowtmr+0x2f8>
 8012b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d06d      	beq.n	8012c10 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8012b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b36:	7d1b      	ldrb	r3, [r3, #20]
 8012b38:	2b02      	cmp	r3, #2
 8012b3a:	d03a      	beq.n	8012bb2 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8012b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012b42:	2b0c      	cmp	r3, #12
 8012b44:	bf28      	it	cs
 8012b46:	230c      	movcs	r3, #12
 8012b48:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8012b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b4c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012b50:	10db      	asrs	r3, r3, #3
 8012b52:	b21b      	sxth	r3, r3
 8012b54:	461a      	mov	r2, r3
 8012b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b58:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012b5c:	4413      	add	r3, r2
 8012b5e:	7efa      	ldrb	r2, [r7, #27]
 8012b60:	4910      	ldr	r1, [pc, #64]	; (8012ba4 <tcp_slowtmr+0x28c>)
 8012b62:	5c8a      	ldrb	r2, [r1, r2]
 8012b64:	4093      	lsls	r3, r2
 8012b66:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8012b68:	697b      	ldr	r3, [r7, #20]
 8012b6a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8012b6e:	4293      	cmp	r3, r2
 8012b70:	dc1a      	bgt.n	8012ba8 <tcp_slowtmr+0x290>
 8012b72:	697b      	ldr	r3, [r7, #20]
 8012b74:	b21a      	sxth	r2, r3
 8012b76:	e019      	b.n	8012bac <tcp_slowtmr+0x294>
 8012b78:	2000b620 	.word	0x2000b620
 8012b7c:	200046fe 	.word	0x200046fe
 8012b80:	2000b61c 	.word	0x2000b61c
 8012b84:	08020070 	.word	0x08020070
 8012b88:	080203b4 	.word	0x080203b4
 8012b8c:	080200b4 	.word	0x080200b4
 8012b90:	080203e0 	.word	0x080203e0
 8012b94:	0802040c 	.word	0x0802040c
 8012b98:	0802043c 	.word	0x0802043c
 8012b9c:	08020470 	.word	0x08020470
 8012ba0:	0802301c 	.word	0x0802301c
 8012ba4:	0802300c 	.word	0x0802300c
 8012ba8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8012bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8012bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bb4:	2200      	movs	r2, #0
 8012bb6:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8012bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bba:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bc0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012bc4:	4293      	cmp	r3, r2
 8012bc6:	bf28      	it	cs
 8012bc8:	4613      	movcs	r3, r2
 8012bca:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8012bcc:	8a7b      	ldrh	r3, [r7, #18]
 8012bce:	085b      	lsrs	r3, r3, #1
 8012bd0:	b29a      	uxth	r2, r3
 8012bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bd4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8012bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bda:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012be0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012be2:	005b      	lsls	r3, r3, #1
 8012be4:	b29b      	uxth	r3, r3
 8012be6:	429a      	cmp	r2, r3
 8012be8:	d206      	bcs.n	8012bf8 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8012bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012bee:	005b      	lsls	r3, r3, #1
 8012bf0:	b29a      	uxth	r2, r3
 8012bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bf4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8012bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bfa:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8012bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bfe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8012c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c04:	2200      	movs	r2, #0
 8012c06:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8012c0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012c0c:	f004 fd5c 	bl	80176c8 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8012c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c12:	7d1b      	ldrb	r3, [r3, #20]
 8012c14:	2b06      	cmp	r3, #6
 8012c16:	d111      	bne.n	8012c3c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8012c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c1a:	8b5b      	ldrh	r3, [r3, #26]
 8012c1c:	f003 0310 	and.w	r3, r3, #16
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d00b      	beq.n	8012c3c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012c24:	4b9d      	ldr	r3, [pc, #628]	; (8012e9c <tcp_slowtmr+0x584>)
 8012c26:	681a      	ldr	r2, [r3, #0]
 8012c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c2a:	6a1b      	ldr	r3, [r3, #32]
 8012c2c:	1ad3      	subs	r3, r2, r3
 8012c2e:	2b28      	cmp	r3, #40	; 0x28
 8012c30:	d904      	bls.n	8012c3c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8012c32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012c36:	3301      	adds	r3, #1
 8012c38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8012c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c3e:	7a5b      	ldrb	r3, [r3, #9]
 8012c40:	f003 0308 	and.w	r3, r3, #8
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d04c      	beq.n	8012ce2 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8012c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c4a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8012c4c:	2b04      	cmp	r3, #4
 8012c4e:	d003      	beq.n	8012c58 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8012c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c52:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8012c54:	2b07      	cmp	r3, #7
 8012c56:	d144      	bne.n	8012ce2 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012c58:	4b90      	ldr	r3, [pc, #576]	; (8012e9c <tcp_slowtmr+0x584>)
 8012c5a:	681a      	ldr	r2, [r3, #0]
 8012c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c5e:	6a1b      	ldr	r3, [r3, #32]
 8012c60:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8012c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012c68:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8012c6c:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8012c70:	498b      	ldr	r1, [pc, #556]	; (8012ea0 <tcp_slowtmr+0x588>)
 8012c72:	fba1 1303 	umull	r1, r3, r1, r3
 8012c76:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012c78:	429a      	cmp	r2, r3
 8012c7a:	d90a      	bls.n	8012c92 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8012c7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012c80:	3301      	adds	r3, #1
 8012c82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8012c86:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012c8a:	3301      	adds	r3, #1
 8012c8c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8012c90:	e027      	b.n	8012ce2 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012c92:	4b82      	ldr	r3, [pc, #520]	; (8012e9c <tcp_slowtmr+0x584>)
 8012c94:	681a      	ldr	r2, [r3, #0]
 8012c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c98:	6a1b      	ldr	r3, [r3, #32]
 8012c9a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8012c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c9e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8012ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ca4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8012ca8:	4618      	mov	r0, r3
 8012caa:	4b7e      	ldr	r3, [pc, #504]	; (8012ea4 <tcp_slowtmr+0x58c>)
 8012cac:	fb03 f300 	mul.w	r3, r3, r0
 8012cb0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8012cb2:	497b      	ldr	r1, [pc, #492]	; (8012ea0 <tcp_slowtmr+0x588>)
 8012cb4:	fba1 1303 	umull	r1, r3, r1, r3
 8012cb8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012cba:	429a      	cmp	r2, r3
 8012cbc:	d911      	bls.n	8012ce2 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8012cbe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012cc0:	f005 f808 	bl	8017cd4 <tcp_keepalive>
 8012cc4:	4603      	mov	r3, r0
 8012cc6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8012cca:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	d107      	bne.n	8012ce2 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8012cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cd4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8012cd8:	3301      	adds	r3, #1
 8012cda:	b2da      	uxtb	r2, r3
 8012cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cde:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8012ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ce4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d011      	beq.n	8012d0e <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8012cea:	4b6c      	ldr	r3, [pc, #432]	; (8012e9c <tcp_slowtmr+0x584>)
 8012cec:	681a      	ldr	r2, [r3, #0]
 8012cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cf0:	6a1b      	ldr	r3, [r3, #32]
 8012cf2:	1ad2      	subs	r2, r2, r3
 8012cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cf6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8012cfa:	4619      	mov	r1, r3
 8012cfc:	460b      	mov	r3, r1
 8012cfe:	005b      	lsls	r3, r3, #1
 8012d00:	440b      	add	r3, r1
 8012d02:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8012d04:	429a      	cmp	r2, r3
 8012d06:	d302      	bcc.n	8012d0e <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8012d08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012d0a:	f000 fec7 	bl	8013a9c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8012d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d10:	7d1b      	ldrb	r3, [r3, #20]
 8012d12:	2b03      	cmp	r3, #3
 8012d14:	d10b      	bne.n	8012d2e <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012d16:	4b61      	ldr	r3, [pc, #388]	; (8012e9c <tcp_slowtmr+0x584>)
 8012d18:	681a      	ldr	r2, [r3, #0]
 8012d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d1c:	6a1b      	ldr	r3, [r3, #32]
 8012d1e:	1ad3      	subs	r3, r2, r3
 8012d20:	2b28      	cmp	r3, #40	; 0x28
 8012d22:	d904      	bls.n	8012d2e <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8012d24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012d28:	3301      	adds	r3, #1
 8012d2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8012d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d30:	7d1b      	ldrb	r3, [r3, #20]
 8012d32:	2b09      	cmp	r3, #9
 8012d34:	d10b      	bne.n	8012d4e <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8012d36:	4b59      	ldr	r3, [pc, #356]	; (8012e9c <tcp_slowtmr+0x584>)
 8012d38:	681a      	ldr	r2, [r3, #0]
 8012d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d3c:	6a1b      	ldr	r3, [r3, #32]
 8012d3e:	1ad3      	subs	r3, r2, r3
 8012d40:	2bf0      	cmp	r3, #240	; 0xf0
 8012d42:	d904      	bls.n	8012d4e <tcp_slowtmr+0x436>
        ++pcb_remove;
 8012d44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012d48:	3301      	adds	r3, #1
 8012d4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8012d4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d060      	beq.n	8012e18 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8012d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012d5c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8012d5e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012d60:	f000 fce8 	bl	8013734 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8012d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d010      	beq.n	8012d8c <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8012d6a:	4b4f      	ldr	r3, [pc, #316]	; (8012ea8 <tcp_slowtmr+0x590>)
 8012d6c:	681b      	ldr	r3, [r3, #0]
 8012d6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012d70:	429a      	cmp	r2, r3
 8012d72:	d106      	bne.n	8012d82 <tcp_slowtmr+0x46a>
 8012d74:	4b4d      	ldr	r3, [pc, #308]	; (8012eac <tcp_slowtmr+0x594>)
 8012d76:	f240 526d 	movw	r2, #1389	; 0x56d
 8012d7a:	494d      	ldr	r1, [pc, #308]	; (8012eb0 <tcp_slowtmr+0x598>)
 8012d7c:	484d      	ldr	r0, [pc, #308]	; (8012eb4 <tcp_slowtmr+0x59c>)
 8012d7e:	f009 fcaf 	bl	801c6e0 <iprintf>
        prev->next = pcb->next;
 8012d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d84:	68da      	ldr	r2, [r3, #12]
 8012d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d88:	60da      	str	r2, [r3, #12]
 8012d8a:	e00f      	b.n	8012dac <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8012d8c:	4b46      	ldr	r3, [pc, #280]	; (8012ea8 <tcp_slowtmr+0x590>)
 8012d8e:	681b      	ldr	r3, [r3, #0]
 8012d90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012d92:	429a      	cmp	r2, r3
 8012d94:	d006      	beq.n	8012da4 <tcp_slowtmr+0x48c>
 8012d96:	4b45      	ldr	r3, [pc, #276]	; (8012eac <tcp_slowtmr+0x594>)
 8012d98:	f240 5271 	movw	r2, #1393	; 0x571
 8012d9c:	4946      	ldr	r1, [pc, #280]	; (8012eb8 <tcp_slowtmr+0x5a0>)
 8012d9e:	4845      	ldr	r0, [pc, #276]	; (8012eb4 <tcp_slowtmr+0x59c>)
 8012da0:	f009 fc9e 	bl	801c6e0 <iprintf>
        tcp_active_pcbs = pcb->next;
 8012da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012da6:	68db      	ldr	r3, [r3, #12]
 8012da8:	4a3f      	ldr	r2, [pc, #252]	; (8012ea8 <tcp_slowtmr+0x590>)
 8012daa:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8012dac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d013      	beq.n	8012ddc <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8012db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012db6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8012db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dba:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8012dbc:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8012dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dc0:	3304      	adds	r3, #4
 8012dc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012dc4:	8ad2      	ldrh	r2, [r2, #22]
 8012dc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012dc8:	8b09      	ldrh	r1, [r1, #24]
 8012dca:	9102      	str	r1, [sp, #8]
 8012dcc:	9201      	str	r2, [sp, #4]
 8012dce:	9300      	str	r3, [sp, #0]
 8012dd0:	462b      	mov	r3, r5
 8012dd2:	4622      	mov	r2, r4
 8012dd4:	4601      	mov	r1, r0
 8012dd6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012dd8:	f004 fec8 	bl	8017b6c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8012ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dde:	691b      	ldr	r3, [r3, #16]
 8012de0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8012de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012de4:	7d1b      	ldrb	r3, [r3, #20]
 8012de6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8012de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dea:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8012dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dee:	68db      	ldr	r3, [r3, #12]
 8012df0:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8012df2:	6838      	ldr	r0, [r7, #0]
 8012df4:	f7fe ffdc 	bl	8011db0 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8012df8:	4b30      	ldr	r3, [pc, #192]	; (8012ebc <tcp_slowtmr+0x5a4>)
 8012dfa:	2200      	movs	r2, #0
 8012dfc:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8012dfe:	68fb      	ldr	r3, [r7, #12]
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	d004      	beq.n	8012e0e <tcp_slowtmr+0x4f6>
 8012e04:	68fb      	ldr	r3, [r7, #12]
 8012e06:	f06f 010c 	mvn.w	r1, #12
 8012e0a:	68b8      	ldr	r0, [r7, #8]
 8012e0c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8012e0e:	4b2b      	ldr	r3, [pc, #172]	; (8012ebc <tcp_slowtmr+0x5a4>)
 8012e10:	781b      	ldrb	r3, [r3, #0]
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d037      	beq.n	8012e86 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8012e16:	e590      	b.n	801293a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8012e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e1a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8012e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e1e:	68db      	ldr	r3, [r3, #12]
 8012e20:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8012e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e24:	7f1b      	ldrb	r3, [r3, #28]
 8012e26:	3301      	adds	r3, #1
 8012e28:	b2da      	uxtb	r2, r3
 8012e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e2c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8012e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e30:	7f1a      	ldrb	r2, [r3, #28]
 8012e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e34:	7f5b      	ldrb	r3, [r3, #29]
 8012e36:	429a      	cmp	r2, r3
 8012e38:	d325      	bcc.n	8012e86 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8012e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e3c:	2200      	movs	r2, #0
 8012e3e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8012e40:	4b1e      	ldr	r3, [pc, #120]	; (8012ebc <tcp_slowtmr+0x5a4>)
 8012e42:	2200      	movs	r2, #0
 8012e44:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8012e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	d00b      	beq.n	8012e68 <tcp_slowtmr+0x550>
 8012e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012e56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012e58:	6912      	ldr	r2, [r2, #16]
 8012e5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012e5c:	4610      	mov	r0, r2
 8012e5e:	4798      	blx	r3
 8012e60:	4603      	mov	r3, r0
 8012e62:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8012e66:	e002      	b.n	8012e6e <tcp_slowtmr+0x556>
 8012e68:	2300      	movs	r3, #0
 8012e6a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8012e6e:	4b13      	ldr	r3, [pc, #76]	; (8012ebc <tcp_slowtmr+0x5a4>)
 8012e70:	781b      	ldrb	r3, [r3, #0]
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d000      	beq.n	8012e78 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8012e76:	e560      	b.n	801293a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8012e78:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	d102      	bne.n	8012e86 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8012e80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012e82:	f004 f8bf 	bl	8017004 <tcp_output>
  while (pcb != NULL) {
 8012e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	f47f ad5c 	bne.w	8012946 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8012e8e:	2300      	movs	r3, #0
 8012e90:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8012e92:	4b0b      	ldr	r3, [pc, #44]	; (8012ec0 <tcp_slowtmr+0x5a8>)
 8012e94:	681b      	ldr	r3, [r3, #0]
 8012e96:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8012e98:	e067      	b.n	8012f6a <tcp_slowtmr+0x652>
 8012e9a:	bf00      	nop
 8012e9c:	2000b620 	.word	0x2000b620
 8012ea0:	10624dd3 	.word	0x10624dd3
 8012ea4:	000124f8 	.word	0x000124f8
 8012ea8:	2000b61c 	.word	0x2000b61c
 8012eac:	08020070 	.word	0x08020070
 8012eb0:	080204a8 	.word	0x080204a8
 8012eb4:	080200b4 	.word	0x080200b4
 8012eb8:	080204d4 	.word	0x080204d4
 8012ebc:	2000b618 	.word	0x2000b618
 8012ec0:	2000b62c 	.word	0x2000b62c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8012ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ec6:	7d1b      	ldrb	r3, [r3, #20]
 8012ec8:	2b0a      	cmp	r3, #10
 8012eca:	d006      	beq.n	8012eda <tcp_slowtmr+0x5c2>
 8012ecc:	4b2b      	ldr	r3, [pc, #172]	; (8012f7c <tcp_slowtmr+0x664>)
 8012ece:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8012ed2:	492b      	ldr	r1, [pc, #172]	; (8012f80 <tcp_slowtmr+0x668>)
 8012ed4:	482b      	ldr	r0, [pc, #172]	; (8012f84 <tcp_slowtmr+0x66c>)
 8012ed6:	f009 fc03 	bl	801c6e0 <iprintf>
    pcb_remove = 0;
 8012eda:	2300      	movs	r3, #0
 8012edc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8012ee0:	4b29      	ldr	r3, [pc, #164]	; (8012f88 <tcp_slowtmr+0x670>)
 8012ee2:	681a      	ldr	r2, [r3, #0]
 8012ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ee6:	6a1b      	ldr	r3, [r3, #32]
 8012ee8:	1ad3      	subs	r3, r2, r3
 8012eea:	2bf0      	cmp	r3, #240	; 0xf0
 8012eec:	d904      	bls.n	8012ef8 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8012eee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012ef2:	3301      	adds	r3, #1
 8012ef4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8012ef8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	d02f      	beq.n	8012f60 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8012f00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012f02:	f000 fc17 	bl	8013734 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8012f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d010      	beq.n	8012f2e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8012f0c:	4b1f      	ldr	r3, [pc, #124]	; (8012f8c <tcp_slowtmr+0x674>)
 8012f0e:	681b      	ldr	r3, [r3, #0]
 8012f10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012f12:	429a      	cmp	r2, r3
 8012f14:	d106      	bne.n	8012f24 <tcp_slowtmr+0x60c>
 8012f16:	4b19      	ldr	r3, [pc, #100]	; (8012f7c <tcp_slowtmr+0x664>)
 8012f18:	f240 52af 	movw	r2, #1455	; 0x5af
 8012f1c:	491c      	ldr	r1, [pc, #112]	; (8012f90 <tcp_slowtmr+0x678>)
 8012f1e:	4819      	ldr	r0, [pc, #100]	; (8012f84 <tcp_slowtmr+0x66c>)
 8012f20:	f009 fbde 	bl	801c6e0 <iprintf>
        prev->next = pcb->next;
 8012f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f26:	68da      	ldr	r2, [r3, #12]
 8012f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f2a:	60da      	str	r2, [r3, #12]
 8012f2c:	e00f      	b.n	8012f4e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8012f2e:	4b17      	ldr	r3, [pc, #92]	; (8012f8c <tcp_slowtmr+0x674>)
 8012f30:	681b      	ldr	r3, [r3, #0]
 8012f32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012f34:	429a      	cmp	r2, r3
 8012f36:	d006      	beq.n	8012f46 <tcp_slowtmr+0x62e>
 8012f38:	4b10      	ldr	r3, [pc, #64]	; (8012f7c <tcp_slowtmr+0x664>)
 8012f3a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8012f3e:	4915      	ldr	r1, [pc, #84]	; (8012f94 <tcp_slowtmr+0x67c>)
 8012f40:	4810      	ldr	r0, [pc, #64]	; (8012f84 <tcp_slowtmr+0x66c>)
 8012f42:	f009 fbcd 	bl	801c6e0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8012f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f48:	68db      	ldr	r3, [r3, #12]
 8012f4a:	4a10      	ldr	r2, [pc, #64]	; (8012f8c <tcp_slowtmr+0x674>)
 8012f4c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8012f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f50:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8012f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f54:	68db      	ldr	r3, [r3, #12]
 8012f56:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8012f58:	69f8      	ldr	r0, [r7, #28]
 8012f5a:	f7fe ff29 	bl	8011db0 <tcp_free>
 8012f5e:	e004      	b.n	8012f6a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8012f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f62:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8012f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f66:	68db      	ldr	r3, [r3, #12]
 8012f68:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8012f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	d1a9      	bne.n	8012ec4 <tcp_slowtmr+0x5ac>
    }
  }
}
 8012f70:	bf00      	nop
 8012f72:	bf00      	nop
 8012f74:	3730      	adds	r7, #48	; 0x30
 8012f76:	46bd      	mov	sp, r7
 8012f78:	bdb0      	pop	{r4, r5, r7, pc}
 8012f7a:	bf00      	nop
 8012f7c:	08020070 	.word	0x08020070
 8012f80:	08020500 	.word	0x08020500
 8012f84:	080200b4 	.word	0x080200b4
 8012f88:	2000b620 	.word	0x2000b620
 8012f8c:	2000b62c 	.word	0x2000b62c
 8012f90:	08020530 	.word	0x08020530
 8012f94:	08020558 	.word	0x08020558

08012f98 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8012f98:	b580      	push	{r7, lr}
 8012f9a:	b082      	sub	sp, #8
 8012f9c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8012f9e:	4b2d      	ldr	r3, [pc, #180]	; (8013054 <tcp_fasttmr+0xbc>)
 8012fa0:	781b      	ldrb	r3, [r3, #0]
 8012fa2:	3301      	adds	r3, #1
 8012fa4:	b2da      	uxtb	r2, r3
 8012fa6:	4b2b      	ldr	r3, [pc, #172]	; (8013054 <tcp_fasttmr+0xbc>)
 8012fa8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8012faa:	4b2b      	ldr	r3, [pc, #172]	; (8013058 <tcp_fasttmr+0xc0>)
 8012fac:	681b      	ldr	r3, [r3, #0]
 8012fae:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8012fb0:	e048      	b.n	8013044 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	7f9a      	ldrb	r2, [r3, #30]
 8012fb6:	4b27      	ldr	r3, [pc, #156]	; (8013054 <tcp_fasttmr+0xbc>)
 8012fb8:	781b      	ldrb	r3, [r3, #0]
 8012fba:	429a      	cmp	r2, r3
 8012fbc:	d03f      	beq.n	801303e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8012fbe:	4b25      	ldr	r3, [pc, #148]	; (8013054 <tcp_fasttmr+0xbc>)
 8012fc0:	781a      	ldrb	r2, [r3, #0]
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	8b5b      	ldrh	r3, [r3, #26]
 8012fca:	f003 0301 	and.w	r3, r3, #1
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	d010      	beq.n	8012ff4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	8b5b      	ldrh	r3, [r3, #26]
 8012fd6:	f043 0302 	orr.w	r3, r3, #2
 8012fda:	b29a      	uxth	r2, r3
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8012fe0:	6878      	ldr	r0, [r7, #4]
 8012fe2:	f004 f80f 	bl	8017004 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	8b5b      	ldrh	r3, [r3, #26]
 8012fea:	f023 0303 	bic.w	r3, r3, #3
 8012fee:	b29a      	uxth	r2, r3
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	8b5b      	ldrh	r3, [r3, #26]
 8012ff8:	f003 0308 	and.w	r3, r3, #8
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d009      	beq.n	8013014 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	8b5b      	ldrh	r3, [r3, #26]
 8013004:	f023 0308 	bic.w	r3, r3, #8
 8013008:	b29a      	uxth	r2, r3
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801300e:	6878      	ldr	r0, [r7, #4]
 8013010:	f7ff f862 	bl	80120d8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	68db      	ldr	r3, [r3, #12]
 8013018:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801301e:	2b00      	cmp	r3, #0
 8013020:	d00a      	beq.n	8013038 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8013022:	4b0e      	ldr	r3, [pc, #56]	; (801305c <tcp_fasttmr+0xc4>)
 8013024:	2200      	movs	r2, #0
 8013026:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8013028:	6878      	ldr	r0, [r7, #4]
 801302a:	f000 f819 	bl	8013060 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801302e:	4b0b      	ldr	r3, [pc, #44]	; (801305c <tcp_fasttmr+0xc4>)
 8013030:	781b      	ldrb	r3, [r3, #0]
 8013032:	2b00      	cmp	r3, #0
 8013034:	d000      	beq.n	8013038 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8013036:	e7b8      	b.n	8012faa <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8013038:	683b      	ldr	r3, [r7, #0]
 801303a:	607b      	str	r3, [r7, #4]
 801303c:	e002      	b.n	8013044 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	68db      	ldr	r3, [r3, #12]
 8013042:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	2b00      	cmp	r3, #0
 8013048:	d1b3      	bne.n	8012fb2 <tcp_fasttmr+0x1a>
    }
  }
}
 801304a:	bf00      	nop
 801304c:	bf00      	nop
 801304e:	3708      	adds	r7, #8
 8013050:	46bd      	mov	sp, r7
 8013052:	bd80      	pop	{r7, pc}
 8013054:	200046fe 	.word	0x200046fe
 8013058:	2000b61c 	.word	0x2000b61c
 801305c:	2000b618 	.word	0x2000b618

08013060 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8013060:	b590      	push	{r4, r7, lr}
 8013062:	b085      	sub	sp, #20
 8013064:	af00      	add	r7, sp, #0
 8013066:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	2b00      	cmp	r3, #0
 801306c:	d109      	bne.n	8013082 <tcp_process_refused_data+0x22>
 801306e:	4b37      	ldr	r3, [pc, #220]	; (801314c <tcp_process_refused_data+0xec>)
 8013070:	f240 6209 	movw	r2, #1545	; 0x609
 8013074:	4936      	ldr	r1, [pc, #216]	; (8013150 <tcp_process_refused_data+0xf0>)
 8013076:	4837      	ldr	r0, [pc, #220]	; (8013154 <tcp_process_refused_data+0xf4>)
 8013078:	f009 fb32 	bl	801c6e0 <iprintf>
 801307c:	f06f 030f 	mvn.w	r3, #15
 8013080:	e060      	b.n	8013144 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013086:	7b5b      	ldrb	r3, [r3, #13]
 8013088:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801308e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	2200      	movs	r2, #0
 8013094:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801309c:	2b00      	cmp	r3, #0
 801309e:	d00b      	beq.n	80130b8 <tcp_process_refused_data+0x58>
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	6918      	ldr	r0, [r3, #16]
 80130aa:	2300      	movs	r3, #0
 80130ac:	68ba      	ldr	r2, [r7, #8]
 80130ae:	6879      	ldr	r1, [r7, #4]
 80130b0:	47a0      	blx	r4
 80130b2:	4603      	mov	r3, r0
 80130b4:	73fb      	strb	r3, [r7, #15]
 80130b6:	e007      	b.n	80130c8 <tcp_process_refused_data+0x68>
 80130b8:	2300      	movs	r3, #0
 80130ba:	68ba      	ldr	r2, [r7, #8]
 80130bc:	6879      	ldr	r1, [r7, #4]
 80130be:	2000      	movs	r0, #0
 80130c0:	f000 f8c2 	bl	8013248 <tcp_recv_null>
 80130c4:	4603      	mov	r3, r0
 80130c6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80130c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d12a      	bne.n	8013126 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80130d0:	7bbb      	ldrb	r3, [r7, #14]
 80130d2:	f003 0320 	and.w	r3, r3, #32
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	d033      	beq.n	8013142 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80130de:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80130e2:	d005      	beq.n	80130f0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80130e8:	3301      	adds	r3, #1
 80130ea:	b29a      	uxth	r2, r3
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d00b      	beq.n	8013112 <tcp_process_refused_data+0xb2>
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	6918      	ldr	r0, [r3, #16]
 8013104:	2300      	movs	r3, #0
 8013106:	2200      	movs	r2, #0
 8013108:	6879      	ldr	r1, [r7, #4]
 801310a:	47a0      	blx	r4
 801310c:	4603      	mov	r3, r0
 801310e:	73fb      	strb	r3, [r7, #15]
 8013110:	e001      	b.n	8013116 <tcp_process_refused_data+0xb6>
 8013112:	2300      	movs	r3, #0
 8013114:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8013116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801311a:	f113 0f0d 	cmn.w	r3, #13
 801311e:	d110      	bne.n	8013142 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8013120:	f06f 030c 	mvn.w	r3, #12
 8013124:	e00e      	b.n	8013144 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8013126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801312a:	f113 0f0d 	cmn.w	r3, #13
 801312e:	d102      	bne.n	8013136 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8013130:	f06f 030c 	mvn.w	r3, #12
 8013134:	e006      	b.n	8013144 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	68ba      	ldr	r2, [r7, #8]
 801313a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 801313c:	f06f 0304 	mvn.w	r3, #4
 8013140:	e000      	b.n	8013144 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8013142:	2300      	movs	r3, #0
}
 8013144:	4618      	mov	r0, r3
 8013146:	3714      	adds	r7, #20
 8013148:	46bd      	mov	sp, r7
 801314a:	bd90      	pop	{r4, r7, pc}
 801314c:	08020070 	.word	0x08020070
 8013150:	08020580 	.word	0x08020580
 8013154:	080200b4 	.word	0x080200b4

08013158 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8013158:	b580      	push	{r7, lr}
 801315a:	b084      	sub	sp, #16
 801315c:	af00      	add	r7, sp, #0
 801315e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8013160:	e007      	b.n	8013172 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	681b      	ldr	r3, [r3, #0]
 8013166:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8013168:	6878      	ldr	r0, [r7, #4]
 801316a:	f000 f80a 	bl	8013182 <tcp_seg_free>
    seg = next;
 801316e:	68fb      	ldr	r3, [r7, #12]
 8013170:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	2b00      	cmp	r3, #0
 8013176:	d1f4      	bne.n	8013162 <tcp_segs_free+0xa>
  }
}
 8013178:	bf00      	nop
 801317a:	bf00      	nop
 801317c:	3710      	adds	r7, #16
 801317e:	46bd      	mov	sp, r7
 8013180:	bd80      	pop	{r7, pc}

08013182 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8013182:	b580      	push	{r7, lr}
 8013184:	b082      	sub	sp, #8
 8013186:	af00      	add	r7, sp, #0
 8013188:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	2b00      	cmp	r3, #0
 801318e:	d00c      	beq.n	80131aa <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	685b      	ldr	r3, [r3, #4]
 8013194:	2b00      	cmp	r3, #0
 8013196:	d004      	beq.n	80131a2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	685b      	ldr	r3, [r3, #4]
 801319c:	4618      	mov	r0, r3
 801319e:	f7fe fb4b 	bl	8011838 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80131a2:	6879      	ldr	r1, [r7, #4]
 80131a4:	2003      	movs	r0, #3
 80131a6:	f7fd fcc9 	bl	8010b3c <memp_free>
  }
}
 80131aa:	bf00      	nop
 80131ac:	3708      	adds	r7, #8
 80131ae:	46bd      	mov	sp, r7
 80131b0:	bd80      	pop	{r7, pc}
	...

080131b4 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 80131b4:	b580      	push	{r7, lr}
 80131b6:	b082      	sub	sp, #8
 80131b8:	af00      	add	r7, sp, #0
 80131ba:	6078      	str	r0, [r7, #4]
 80131bc:	460b      	mov	r3, r1
 80131be:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	d107      	bne.n	80131d6 <tcp_setprio+0x22>
 80131c6:	4b07      	ldr	r3, [pc, #28]	; (80131e4 <tcp_setprio+0x30>)
 80131c8:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 80131cc:	4906      	ldr	r1, [pc, #24]	; (80131e8 <tcp_setprio+0x34>)
 80131ce:	4807      	ldr	r0, [pc, #28]	; (80131ec <tcp_setprio+0x38>)
 80131d0:	f009 fa86 	bl	801c6e0 <iprintf>
 80131d4:	e002      	b.n	80131dc <tcp_setprio+0x28>

  pcb->prio = prio;
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	78fa      	ldrb	r2, [r7, #3]
 80131da:	755a      	strb	r2, [r3, #21]
}
 80131dc:	3708      	adds	r7, #8
 80131de:	46bd      	mov	sp, r7
 80131e0:	bd80      	pop	{r7, pc}
 80131e2:	bf00      	nop
 80131e4:	08020070 	.word	0x08020070
 80131e8:	080205a8 	.word	0x080205a8
 80131ec:	080200b4 	.word	0x080200b4

080131f0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80131f0:	b580      	push	{r7, lr}
 80131f2:	b084      	sub	sp, #16
 80131f4:	af00      	add	r7, sp, #0
 80131f6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d106      	bne.n	801320c <tcp_seg_copy+0x1c>
 80131fe:	4b0f      	ldr	r3, [pc, #60]	; (801323c <tcp_seg_copy+0x4c>)
 8013200:	f240 6282 	movw	r2, #1666	; 0x682
 8013204:	490e      	ldr	r1, [pc, #56]	; (8013240 <tcp_seg_copy+0x50>)
 8013206:	480f      	ldr	r0, [pc, #60]	; (8013244 <tcp_seg_copy+0x54>)
 8013208:	f009 fa6a 	bl	801c6e0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801320c:	2003      	movs	r0, #3
 801320e:	f7fd fc43 	bl	8010a98 <memp_malloc>
 8013212:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	2b00      	cmp	r3, #0
 8013218:	d101      	bne.n	801321e <tcp_seg_copy+0x2e>
    return NULL;
 801321a:	2300      	movs	r3, #0
 801321c:	e00a      	b.n	8013234 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801321e:	2210      	movs	r2, #16
 8013220:	6879      	ldr	r1, [r7, #4]
 8013222:	68f8      	ldr	r0, [r7, #12]
 8013224:	f008 ffc8 	bl	801c1b8 <memcpy>
  pbuf_ref(cseg->p);
 8013228:	68fb      	ldr	r3, [r7, #12]
 801322a:	685b      	ldr	r3, [r3, #4]
 801322c:	4618      	mov	r0, r3
 801322e:	f7fe fba9 	bl	8011984 <pbuf_ref>
  return cseg;
 8013232:	68fb      	ldr	r3, [r7, #12]
}
 8013234:	4618      	mov	r0, r3
 8013236:	3710      	adds	r7, #16
 8013238:	46bd      	mov	sp, r7
 801323a:	bd80      	pop	{r7, pc}
 801323c:	08020070 	.word	0x08020070
 8013240:	080205c4 	.word	0x080205c4
 8013244:	080200b4 	.word	0x080200b4

08013248 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8013248:	b580      	push	{r7, lr}
 801324a:	b084      	sub	sp, #16
 801324c:	af00      	add	r7, sp, #0
 801324e:	60f8      	str	r0, [r7, #12]
 8013250:	60b9      	str	r1, [r7, #8]
 8013252:	607a      	str	r2, [r7, #4]
 8013254:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8013256:	68bb      	ldr	r3, [r7, #8]
 8013258:	2b00      	cmp	r3, #0
 801325a:	d109      	bne.n	8013270 <tcp_recv_null+0x28>
 801325c:	4b12      	ldr	r3, [pc, #72]	; (80132a8 <tcp_recv_null+0x60>)
 801325e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8013262:	4912      	ldr	r1, [pc, #72]	; (80132ac <tcp_recv_null+0x64>)
 8013264:	4812      	ldr	r0, [pc, #72]	; (80132b0 <tcp_recv_null+0x68>)
 8013266:	f009 fa3b 	bl	801c6e0 <iprintf>
 801326a:	f06f 030f 	mvn.w	r3, #15
 801326e:	e016      	b.n	801329e <tcp_recv_null+0x56>

  if (p != NULL) {
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	2b00      	cmp	r3, #0
 8013274:	d009      	beq.n	801328a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	891b      	ldrh	r3, [r3, #8]
 801327a:	4619      	mov	r1, r3
 801327c:	68b8      	ldr	r0, [r7, #8]
 801327e:	f7ff fab5 	bl	80127ec <tcp_recved>
    pbuf_free(p);
 8013282:	6878      	ldr	r0, [r7, #4]
 8013284:	f7fe fad8 	bl	8011838 <pbuf_free>
 8013288:	e008      	b.n	801329c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801328a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801328e:	2b00      	cmp	r3, #0
 8013290:	d104      	bne.n	801329c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8013292:	68b8      	ldr	r0, [r7, #8]
 8013294:	f7fe ff8a 	bl	80121ac <tcp_close>
 8013298:	4603      	mov	r3, r0
 801329a:	e000      	b.n	801329e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 801329c:	2300      	movs	r3, #0
}
 801329e:	4618      	mov	r0, r3
 80132a0:	3710      	adds	r7, #16
 80132a2:	46bd      	mov	sp, r7
 80132a4:	bd80      	pop	{r7, pc}
 80132a6:	bf00      	nop
 80132a8:	08020070 	.word	0x08020070
 80132ac:	080205e0 	.word	0x080205e0
 80132b0:	080200b4 	.word	0x080200b4

080132b4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80132b4:	b580      	push	{r7, lr}
 80132b6:	b086      	sub	sp, #24
 80132b8:	af00      	add	r7, sp, #0
 80132ba:	4603      	mov	r3, r0
 80132bc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80132be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	db01      	blt.n	80132ca <tcp_kill_prio+0x16>
 80132c6:	79fb      	ldrb	r3, [r7, #7]
 80132c8:	e000      	b.n	80132cc <tcp_kill_prio+0x18>
 80132ca:	237f      	movs	r3, #127	; 0x7f
 80132cc:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80132ce:	7afb      	ldrb	r3, [r7, #11]
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d034      	beq.n	801333e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80132d4:	7afb      	ldrb	r3, [r7, #11]
 80132d6:	3b01      	subs	r3, #1
 80132d8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80132da:	2300      	movs	r3, #0
 80132dc:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80132de:	2300      	movs	r3, #0
 80132e0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80132e2:	4b19      	ldr	r3, [pc, #100]	; (8013348 <tcp_kill_prio+0x94>)
 80132e4:	681b      	ldr	r3, [r3, #0]
 80132e6:	617b      	str	r3, [r7, #20]
 80132e8:	e01f      	b.n	801332a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80132ea:	697b      	ldr	r3, [r7, #20]
 80132ec:	7d5b      	ldrb	r3, [r3, #21]
 80132ee:	7afa      	ldrb	r2, [r7, #11]
 80132f0:	429a      	cmp	r2, r3
 80132f2:	d80c      	bhi.n	801330e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80132f4:	697b      	ldr	r3, [r7, #20]
 80132f6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80132f8:	7afa      	ldrb	r2, [r7, #11]
 80132fa:	429a      	cmp	r2, r3
 80132fc:	d112      	bne.n	8013324 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80132fe:	4b13      	ldr	r3, [pc, #76]	; (801334c <tcp_kill_prio+0x98>)
 8013300:	681a      	ldr	r2, [r3, #0]
 8013302:	697b      	ldr	r3, [r7, #20]
 8013304:	6a1b      	ldr	r3, [r3, #32]
 8013306:	1ad3      	subs	r3, r2, r3
 8013308:	68fa      	ldr	r2, [r7, #12]
 801330a:	429a      	cmp	r2, r3
 801330c:	d80a      	bhi.n	8013324 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801330e:	4b0f      	ldr	r3, [pc, #60]	; (801334c <tcp_kill_prio+0x98>)
 8013310:	681a      	ldr	r2, [r3, #0]
 8013312:	697b      	ldr	r3, [r7, #20]
 8013314:	6a1b      	ldr	r3, [r3, #32]
 8013316:	1ad3      	subs	r3, r2, r3
 8013318:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801331a:	697b      	ldr	r3, [r7, #20]
 801331c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801331e:	697b      	ldr	r3, [r7, #20]
 8013320:	7d5b      	ldrb	r3, [r3, #21]
 8013322:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013324:	697b      	ldr	r3, [r7, #20]
 8013326:	68db      	ldr	r3, [r3, #12]
 8013328:	617b      	str	r3, [r7, #20]
 801332a:	697b      	ldr	r3, [r7, #20]
 801332c:	2b00      	cmp	r3, #0
 801332e:	d1dc      	bne.n	80132ea <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8013330:	693b      	ldr	r3, [r7, #16]
 8013332:	2b00      	cmp	r3, #0
 8013334:	d004      	beq.n	8013340 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8013336:	6938      	ldr	r0, [r7, #16]
 8013338:	f7ff f87e 	bl	8012438 <tcp_abort>
 801333c:	e000      	b.n	8013340 <tcp_kill_prio+0x8c>
    return;
 801333e:	bf00      	nop
  }
}
 8013340:	3718      	adds	r7, #24
 8013342:	46bd      	mov	sp, r7
 8013344:	bd80      	pop	{r7, pc}
 8013346:	bf00      	nop
 8013348:	2000b61c 	.word	0x2000b61c
 801334c:	2000b620 	.word	0x2000b620

08013350 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8013350:	b580      	push	{r7, lr}
 8013352:	b086      	sub	sp, #24
 8013354:	af00      	add	r7, sp, #0
 8013356:	4603      	mov	r3, r0
 8013358:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801335a:	79fb      	ldrb	r3, [r7, #7]
 801335c:	2b08      	cmp	r3, #8
 801335e:	d009      	beq.n	8013374 <tcp_kill_state+0x24>
 8013360:	79fb      	ldrb	r3, [r7, #7]
 8013362:	2b09      	cmp	r3, #9
 8013364:	d006      	beq.n	8013374 <tcp_kill_state+0x24>
 8013366:	4b1a      	ldr	r3, [pc, #104]	; (80133d0 <tcp_kill_state+0x80>)
 8013368:	f240 62dd 	movw	r2, #1757	; 0x6dd
 801336c:	4919      	ldr	r1, [pc, #100]	; (80133d4 <tcp_kill_state+0x84>)
 801336e:	481a      	ldr	r0, [pc, #104]	; (80133d8 <tcp_kill_state+0x88>)
 8013370:	f009 f9b6 	bl	801c6e0 <iprintf>

  inactivity = 0;
 8013374:	2300      	movs	r3, #0
 8013376:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8013378:	2300      	movs	r3, #0
 801337a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801337c:	4b17      	ldr	r3, [pc, #92]	; (80133dc <tcp_kill_state+0x8c>)
 801337e:	681b      	ldr	r3, [r3, #0]
 8013380:	617b      	str	r3, [r7, #20]
 8013382:	e017      	b.n	80133b4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8013384:	697b      	ldr	r3, [r7, #20]
 8013386:	7d1b      	ldrb	r3, [r3, #20]
 8013388:	79fa      	ldrb	r2, [r7, #7]
 801338a:	429a      	cmp	r2, r3
 801338c:	d10f      	bne.n	80133ae <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801338e:	4b14      	ldr	r3, [pc, #80]	; (80133e0 <tcp_kill_state+0x90>)
 8013390:	681a      	ldr	r2, [r3, #0]
 8013392:	697b      	ldr	r3, [r7, #20]
 8013394:	6a1b      	ldr	r3, [r3, #32]
 8013396:	1ad3      	subs	r3, r2, r3
 8013398:	68fa      	ldr	r2, [r7, #12]
 801339a:	429a      	cmp	r2, r3
 801339c:	d807      	bhi.n	80133ae <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801339e:	4b10      	ldr	r3, [pc, #64]	; (80133e0 <tcp_kill_state+0x90>)
 80133a0:	681a      	ldr	r2, [r3, #0]
 80133a2:	697b      	ldr	r3, [r7, #20]
 80133a4:	6a1b      	ldr	r3, [r3, #32]
 80133a6:	1ad3      	subs	r3, r2, r3
 80133a8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80133aa:	697b      	ldr	r3, [r7, #20]
 80133ac:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80133ae:	697b      	ldr	r3, [r7, #20]
 80133b0:	68db      	ldr	r3, [r3, #12]
 80133b2:	617b      	str	r3, [r7, #20]
 80133b4:	697b      	ldr	r3, [r7, #20]
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d1e4      	bne.n	8013384 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80133ba:	693b      	ldr	r3, [r7, #16]
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d003      	beq.n	80133c8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80133c0:	2100      	movs	r1, #0
 80133c2:	6938      	ldr	r0, [r7, #16]
 80133c4:	f7fe ff7a 	bl	80122bc <tcp_abandon>
  }
}
 80133c8:	bf00      	nop
 80133ca:	3718      	adds	r7, #24
 80133cc:	46bd      	mov	sp, r7
 80133ce:	bd80      	pop	{r7, pc}
 80133d0:	08020070 	.word	0x08020070
 80133d4:	080205fc 	.word	0x080205fc
 80133d8:	080200b4 	.word	0x080200b4
 80133dc:	2000b61c 	.word	0x2000b61c
 80133e0:	2000b620 	.word	0x2000b620

080133e4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80133e4:	b580      	push	{r7, lr}
 80133e6:	b084      	sub	sp, #16
 80133e8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80133ea:	2300      	movs	r3, #0
 80133ec:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80133ee:	2300      	movs	r3, #0
 80133f0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80133f2:	4b12      	ldr	r3, [pc, #72]	; (801343c <tcp_kill_timewait+0x58>)
 80133f4:	681b      	ldr	r3, [r3, #0]
 80133f6:	60fb      	str	r3, [r7, #12]
 80133f8:	e012      	b.n	8013420 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80133fa:	4b11      	ldr	r3, [pc, #68]	; (8013440 <tcp_kill_timewait+0x5c>)
 80133fc:	681a      	ldr	r2, [r3, #0]
 80133fe:	68fb      	ldr	r3, [r7, #12]
 8013400:	6a1b      	ldr	r3, [r3, #32]
 8013402:	1ad3      	subs	r3, r2, r3
 8013404:	687a      	ldr	r2, [r7, #4]
 8013406:	429a      	cmp	r2, r3
 8013408:	d807      	bhi.n	801341a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801340a:	4b0d      	ldr	r3, [pc, #52]	; (8013440 <tcp_kill_timewait+0x5c>)
 801340c:	681a      	ldr	r2, [r3, #0]
 801340e:	68fb      	ldr	r3, [r7, #12]
 8013410:	6a1b      	ldr	r3, [r3, #32]
 8013412:	1ad3      	subs	r3, r2, r3
 8013414:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8013416:	68fb      	ldr	r3, [r7, #12]
 8013418:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801341a:	68fb      	ldr	r3, [r7, #12]
 801341c:	68db      	ldr	r3, [r3, #12]
 801341e:	60fb      	str	r3, [r7, #12]
 8013420:	68fb      	ldr	r3, [r7, #12]
 8013422:	2b00      	cmp	r3, #0
 8013424:	d1e9      	bne.n	80133fa <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8013426:	68bb      	ldr	r3, [r7, #8]
 8013428:	2b00      	cmp	r3, #0
 801342a:	d002      	beq.n	8013432 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801342c:	68b8      	ldr	r0, [r7, #8]
 801342e:	f7ff f803 	bl	8012438 <tcp_abort>
  }
}
 8013432:	bf00      	nop
 8013434:	3710      	adds	r7, #16
 8013436:	46bd      	mov	sp, r7
 8013438:	bd80      	pop	{r7, pc}
 801343a:	bf00      	nop
 801343c:	2000b62c 	.word	0x2000b62c
 8013440:	2000b620 	.word	0x2000b620

08013444 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8013444:	b580      	push	{r7, lr}
 8013446:	b082      	sub	sp, #8
 8013448:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801344a:	4b10      	ldr	r3, [pc, #64]	; (801348c <tcp_handle_closepend+0x48>)
 801344c:	681b      	ldr	r3, [r3, #0]
 801344e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8013450:	e014      	b.n	801347c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	68db      	ldr	r3, [r3, #12]
 8013456:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	8b5b      	ldrh	r3, [r3, #26]
 801345c:	f003 0308 	and.w	r3, r3, #8
 8013460:	2b00      	cmp	r3, #0
 8013462:	d009      	beq.n	8013478 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	8b5b      	ldrh	r3, [r3, #26]
 8013468:	f023 0308 	bic.w	r3, r3, #8
 801346c:	b29a      	uxth	r2, r3
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8013472:	6878      	ldr	r0, [r7, #4]
 8013474:	f7fe fe30 	bl	80120d8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8013478:	683b      	ldr	r3, [r7, #0]
 801347a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	2b00      	cmp	r3, #0
 8013480:	d1e7      	bne.n	8013452 <tcp_handle_closepend+0xe>
  }
}
 8013482:	bf00      	nop
 8013484:	bf00      	nop
 8013486:	3708      	adds	r7, #8
 8013488:	46bd      	mov	sp, r7
 801348a:	bd80      	pop	{r7, pc}
 801348c:	2000b61c 	.word	0x2000b61c

08013490 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8013490:	b580      	push	{r7, lr}
 8013492:	b084      	sub	sp, #16
 8013494:	af00      	add	r7, sp, #0
 8013496:	4603      	mov	r3, r0
 8013498:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801349a:	2001      	movs	r0, #1
 801349c:	f7fd fafc 	bl	8010a98 <memp_malloc>
 80134a0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80134a2:	68fb      	ldr	r3, [r7, #12]
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	d126      	bne.n	80134f6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80134a8:	f7ff ffcc 	bl	8013444 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80134ac:	f7ff ff9a 	bl	80133e4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80134b0:	2001      	movs	r0, #1
 80134b2:	f7fd faf1 	bl	8010a98 <memp_malloc>
 80134b6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80134b8:	68fb      	ldr	r3, [r7, #12]
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	d11b      	bne.n	80134f6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80134be:	2009      	movs	r0, #9
 80134c0:	f7ff ff46 	bl	8013350 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80134c4:	2001      	movs	r0, #1
 80134c6:	f7fd fae7 	bl	8010a98 <memp_malloc>
 80134ca:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80134cc:	68fb      	ldr	r3, [r7, #12]
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	d111      	bne.n	80134f6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80134d2:	2008      	movs	r0, #8
 80134d4:	f7ff ff3c 	bl	8013350 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80134d8:	2001      	movs	r0, #1
 80134da:	f7fd fadd 	bl	8010a98 <memp_malloc>
 80134de:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80134e0:	68fb      	ldr	r3, [r7, #12]
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	d107      	bne.n	80134f6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80134e6:	79fb      	ldrb	r3, [r7, #7]
 80134e8:	4618      	mov	r0, r3
 80134ea:	f7ff fee3 	bl	80132b4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80134ee:	2001      	movs	r0, #1
 80134f0:	f7fd fad2 	bl	8010a98 <memp_malloc>
 80134f4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80134f6:	68fb      	ldr	r3, [r7, #12]
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d03f      	beq.n	801357c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80134fc:	229c      	movs	r2, #156	; 0x9c
 80134fe:	2100      	movs	r1, #0
 8013500:	68f8      	ldr	r0, [r7, #12]
 8013502:	f008 fe67 	bl	801c1d4 <memset>
    pcb->prio = prio;
 8013506:	68fb      	ldr	r3, [r7, #12]
 8013508:	79fa      	ldrb	r2, [r7, #7]
 801350a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8013512:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8013516:	68fb      	ldr	r3, [r7, #12]
 8013518:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801351c:	855a      	strh	r2, [r3, #42]	; 0x2a
 801351e:	68fb      	ldr	r3, [r7, #12]
 8013520:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8013522:	68fb      	ldr	r3, [r7, #12]
 8013524:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8013526:	68fb      	ldr	r3, [r7, #12]
 8013528:	22ff      	movs	r2, #255	; 0xff
 801352a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 801352c:	68fb      	ldr	r3, [r7, #12]
 801352e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8013532:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8013534:	68fb      	ldr	r3, [r7, #12]
 8013536:	2206      	movs	r2, #6
 8013538:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801353c:	68fb      	ldr	r3, [r7, #12]
 801353e:	2206      	movs	r2, #6
 8013540:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8013542:	68fb      	ldr	r3, [r7, #12]
 8013544:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013548:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801354a:	68fb      	ldr	r3, [r7, #12]
 801354c:	2201      	movs	r2, #1
 801354e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8013552:	4b0d      	ldr	r3, [pc, #52]	; (8013588 <tcp_alloc+0xf8>)
 8013554:	681a      	ldr	r2, [r3, #0]
 8013556:	68fb      	ldr	r3, [r7, #12]
 8013558:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801355a:	4b0c      	ldr	r3, [pc, #48]	; (801358c <tcp_alloc+0xfc>)
 801355c:	781a      	ldrb	r2, [r3, #0]
 801355e:	68fb      	ldr	r3, [r7, #12]
 8013560:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8013562:	68fb      	ldr	r3, [r7, #12]
 8013564:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8013568:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 801356c:	68fb      	ldr	r3, [r7, #12]
 801356e:	4a08      	ldr	r2, [pc, #32]	; (8013590 <tcp_alloc+0x100>)
 8013570:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8013574:	68fb      	ldr	r3, [r7, #12]
 8013576:	4a07      	ldr	r2, [pc, #28]	; (8013594 <tcp_alloc+0x104>)
 8013578:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 801357c:	68fb      	ldr	r3, [r7, #12]
}
 801357e:	4618      	mov	r0, r3
 8013580:	3710      	adds	r7, #16
 8013582:	46bd      	mov	sp, r7
 8013584:	bd80      	pop	{r7, pc}
 8013586:	bf00      	nop
 8013588:	2000b620 	.word	0x2000b620
 801358c:	200046fe 	.word	0x200046fe
 8013590:	08013249 	.word	0x08013249
 8013594:	006ddd00 	.word	0x006ddd00

08013598 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8013598:	b580      	push	{r7, lr}
 801359a:	b084      	sub	sp, #16
 801359c:	af00      	add	r7, sp, #0
 801359e:	4603      	mov	r3, r0
 80135a0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 80135a2:	2040      	movs	r0, #64	; 0x40
 80135a4:	f7ff ff74 	bl	8013490 <tcp_alloc>
 80135a8:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80135aa:	68fb      	ldr	r3, [r7, #12]
}
 80135ac:	4618      	mov	r0, r3
 80135ae:	3710      	adds	r7, #16
 80135b0:	46bd      	mov	sp, r7
 80135b2:	bd80      	pop	{r7, pc}

080135b4 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 80135b4:	b480      	push	{r7}
 80135b6:	b083      	sub	sp, #12
 80135b8:	af00      	add	r7, sp, #0
 80135ba:	6078      	str	r0, [r7, #4]
 80135bc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d002      	beq.n	80135ca <tcp_arg+0x16>
    pcb->callback_arg = arg;
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	683a      	ldr	r2, [r7, #0]
 80135c8:	611a      	str	r2, [r3, #16]
  }
}
 80135ca:	bf00      	nop
 80135cc:	370c      	adds	r7, #12
 80135ce:	46bd      	mov	sp, r7
 80135d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135d4:	4770      	bx	lr
	...

080135d8 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80135d8:	b580      	push	{r7, lr}
 80135da:	b082      	sub	sp, #8
 80135dc:	af00      	add	r7, sp, #0
 80135de:	6078      	str	r0, [r7, #4]
 80135e0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d00e      	beq.n	8013606 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	7d1b      	ldrb	r3, [r3, #20]
 80135ec:	2b01      	cmp	r3, #1
 80135ee:	d106      	bne.n	80135fe <tcp_recv+0x26>
 80135f0:	4b07      	ldr	r3, [pc, #28]	; (8013610 <tcp_recv+0x38>)
 80135f2:	f240 72df 	movw	r2, #2015	; 0x7df
 80135f6:	4907      	ldr	r1, [pc, #28]	; (8013614 <tcp_recv+0x3c>)
 80135f8:	4807      	ldr	r0, [pc, #28]	; (8013618 <tcp_recv+0x40>)
 80135fa:	f009 f871 	bl	801c6e0 <iprintf>
    pcb->recv = recv;
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	683a      	ldr	r2, [r7, #0]
 8013602:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8013606:	bf00      	nop
 8013608:	3708      	adds	r7, #8
 801360a:	46bd      	mov	sp, r7
 801360c:	bd80      	pop	{r7, pc}
 801360e:	bf00      	nop
 8013610:	08020070 	.word	0x08020070
 8013614:	0802060c 	.word	0x0802060c
 8013618:	080200b4 	.word	0x080200b4

0801361c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 801361c:	b580      	push	{r7, lr}
 801361e:	b082      	sub	sp, #8
 8013620:	af00      	add	r7, sp, #0
 8013622:	6078      	str	r0, [r7, #4]
 8013624:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	2b00      	cmp	r3, #0
 801362a:	d00e      	beq.n	801364a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	7d1b      	ldrb	r3, [r3, #20]
 8013630:	2b01      	cmp	r3, #1
 8013632:	d106      	bne.n	8013642 <tcp_sent+0x26>
 8013634:	4b07      	ldr	r3, [pc, #28]	; (8013654 <tcp_sent+0x38>)
 8013636:	f240 72f3 	movw	r2, #2035	; 0x7f3
 801363a:	4907      	ldr	r1, [pc, #28]	; (8013658 <tcp_sent+0x3c>)
 801363c:	4807      	ldr	r0, [pc, #28]	; (801365c <tcp_sent+0x40>)
 801363e:	f009 f84f 	bl	801c6e0 <iprintf>
    pcb->sent = sent;
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	683a      	ldr	r2, [r7, #0]
 8013646:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 801364a:	bf00      	nop
 801364c:	3708      	adds	r7, #8
 801364e:	46bd      	mov	sp, r7
 8013650:	bd80      	pop	{r7, pc}
 8013652:	bf00      	nop
 8013654:	08020070 	.word	0x08020070
 8013658:	08020634 	.word	0x08020634
 801365c:	080200b4 	.word	0x080200b4

08013660 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8013660:	b580      	push	{r7, lr}
 8013662:	b082      	sub	sp, #8
 8013664:	af00      	add	r7, sp, #0
 8013666:	6078      	str	r0, [r7, #4]
 8013668:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	2b00      	cmp	r3, #0
 801366e:	d00e      	beq.n	801368e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	7d1b      	ldrb	r3, [r3, #20]
 8013674:	2b01      	cmp	r3, #1
 8013676:	d106      	bne.n	8013686 <tcp_err+0x26>
 8013678:	4b07      	ldr	r3, [pc, #28]	; (8013698 <tcp_err+0x38>)
 801367a:	f640 020d 	movw	r2, #2061	; 0x80d
 801367e:	4907      	ldr	r1, [pc, #28]	; (801369c <tcp_err+0x3c>)
 8013680:	4807      	ldr	r0, [pc, #28]	; (80136a0 <tcp_err+0x40>)
 8013682:	f009 f82d 	bl	801c6e0 <iprintf>
    pcb->errf = err;
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	683a      	ldr	r2, [r7, #0]
 801368a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 801368e:	bf00      	nop
 8013690:	3708      	adds	r7, #8
 8013692:	46bd      	mov	sp, r7
 8013694:	bd80      	pop	{r7, pc}
 8013696:	bf00      	nop
 8013698:	08020070 	.word	0x08020070
 801369c:	0802065c 	.word	0x0802065c
 80136a0:	080200b4 	.word	0x080200b4

080136a4 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 80136a4:	b480      	push	{r7}
 80136a6:	b085      	sub	sp, #20
 80136a8:	af00      	add	r7, sp, #0
 80136aa:	6078      	str	r0, [r7, #4]
 80136ac:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	d008      	beq.n	80136c6 <tcp_accept+0x22>
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	7d1b      	ldrb	r3, [r3, #20]
 80136b8:	2b01      	cmp	r3, #1
 80136ba:	d104      	bne.n	80136c6 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 80136c0:	68fb      	ldr	r3, [r7, #12]
 80136c2:	683a      	ldr	r2, [r7, #0]
 80136c4:	619a      	str	r2, [r3, #24]
  }
}
 80136c6:	bf00      	nop
 80136c8:	3714      	adds	r7, #20
 80136ca:	46bd      	mov	sp, r7
 80136cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136d0:	4770      	bx	lr
	...

080136d4 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80136d4:	b580      	push	{r7, lr}
 80136d6:	b084      	sub	sp, #16
 80136d8:	af00      	add	r7, sp, #0
 80136da:	60f8      	str	r0, [r7, #12]
 80136dc:	60b9      	str	r1, [r7, #8]
 80136de:	4613      	mov	r3, r2
 80136e0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 80136e2:	68fb      	ldr	r3, [r7, #12]
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	d107      	bne.n	80136f8 <tcp_poll+0x24>
 80136e8:	4b0e      	ldr	r3, [pc, #56]	; (8013724 <tcp_poll+0x50>)
 80136ea:	f640 023d 	movw	r2, #2109	; 0x83d
 80136ee:	490e      	ldr	r1, [pc, #56]	; (8013728 <tcp_poll+0x54>)
 80136f0:	480e      	ldr	r0, [pc, #56]	; (801372c <tcp_poll+0x58>)
 80136f2:	f008 fff5 	bl	801c6e0 <iprintf>
 80136f6:	e011      	b.n	801371c <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80136f8:	68fb      	ldr	r3, [r7, #12]
 80136fa:	7d1b      	ldrb	r3, [r3, #20]
 80136fc:	2b01      	cmp	r3, #1
 80136fe:	d106      	bne.n	801370e <tcp_poll+0x3a>
 8013700:	4b08      	ldr	r3, [pc, #32]	; (8013724 <tcp_poll+0x50>)
 8013702:	f640 023e 	movw	r2, #2110	; 0x83e
 8013706:	490a      	ldr	r1, [pc, #40]	; (8013730 <tcp_poll+0x5c>)
 8013708:	4808      	ldr	r0, [pc, #32]	; (801372c <tcp_poll+0x58>)
 801370a:	f008 ffe9 	bl	801c6e0 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 801370e:	68fb      	ldr	r3, [r7, #12]
 8013710:	68ba      	ldr	r2, [r7, #8]
 8013712:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8013716:	68fb      	ldr	r3, [r7, #12]
 8013718:	79fa      	ldrb	r2, [r7, #7]
 801371a:	775a      	strb	r2, [r3, #29]
}
 801371c:	3710      	adds	r7, #16
 801371e:	46bd      	mov	sp, r7
 8013720:	bd80      	pop	{r7, pc}
 8013722:	bf00      	nop
 8013724:	08020070 	.word	0x08020070
 8013728:	08020684 	.word	0x08020684
 801372c:	080200b4 	.word	0x080200b4
 8013730:	0802069c 	.word	0x0802069c

08013734 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8013734:	b580      	push	{r7, lr}
 8013736:	b082      	sub	sp, #8
 8013738:	af00      	add	r7, sp, #0
 801373a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	2b00      	cmp	r3, #0
 8013740:	d107      	bne.n	8013752 <tcp_pcb_purge+0x1e>
 8013742:	4b21      	ldr	r3, [pc, #132]	; (80137c8 <tcp_pcb_purge+0x94>)
 8013744:	f640 0251 	movw	r2, #2129	; 0x851
 8013748:	4920      	ldr	r1, [pc, #128]	; (80137cc <tcp_pcb_purge+0x98>)
 801374a:	4821      	ldr	r0, [pc, #132]	; (80137d0 <tcp_pcb_purge+0x9c>)
 801374c:	f008 ffc8 	bl	801c6e0 <iprintf>
 8013750:	e037      	b.n	80137c2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	7d1b      	ldrb	r3, [r3, #20]
 8013756:	2b00      	cmp	r3, #0
 8013758:	d033      	beq.n	80137c2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801375e:	2b0a      	cmp	r3, #10
 8013760:	d02f      	beq.n	80137c2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8013766:	2b01      	cmp	r3, #1
 8013768:	d02b      	beq.n	80137c2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801376e:	2b00      	cmp	r3, #0
 8013770:	d007      	beq.n	8013782 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013776:	4618      	mov	r0, r3
 8013778:	f7fe f85e 	bl	8011838 <pbuf_free>
      pcb->refused_data = NULL;
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	2200      	movs	r2, #0
 8013780:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013786:	2b00      	cmp	r3, #0
 8013788:	d002      	beq.n	8013790 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801378a:	6878      	ldr	r0, [r7, #4]
 801378c:	f000 f986 	bl	8013a9c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013796:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801379c:	4618      	mov	r0, r3
 801379e:	f7ff fcdb 	bl	8013158 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80137a6:	4618      	mov	r0, r3
 80137a8:	f7ff fcd6 	bl	8013158 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	2200      	movs	r2, #0
 80137b0:	66da      	str	r2, [r3, #108]	; 0x6c
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	2200      	movs	r2, #0
 80137be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80137c2:	3708      	adds	r7, #8
 80137c4:	46bd      	mov	sp, r7
 80137c6:	bd80      	pop	{r7, pc}
 80137c8:	08020070 	.word	0x08020070
 80137cc:	080206bc 	.word	0x080206bc
 80137d0:	080200b4 	.word	0x080200b4

080137d4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80137d4:	b580      	push	{r7, lr}
 80137d6:	b084      	sub	sp, #16
 80137d8:	af00      	add	r7, sp, #0
 80137da:	6078      	str	r0, [r7, #4]
 80137dc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80137de:	683b      	ldr	r3, [r7, #0]
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d106      	bne.n	80137f2 <tcp_pcb_remove+0x1e>
 80137e4:	4b3e      	ldr	r3, [pc, #248]	; (80138e0 <tcp_pcb_remove+0x10c>)
 80137e6:	f640 0283 	movw	r2, #2179	; 0x883
 80137ea:	493e      	ldr	r1, [pc, #248]	; (80138e4 <tcp_pcb_remove+0x110>)
 80137ec:	483e      	ldr	r0, [pc, #248]	; (80138e8 <tcp_pcb_remove+0x114>)
 80137ee:	f008 ff77 	bl	801c6e0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	d106      	bne.n	8013806 <tcp_pcb_remove+0x32>
 80137f8:	4b39      	ldr	r3, [pc, #228]	; (80138e0 <tcp_pcb_remove+0x10c>)
 80137fa:	f640 0284 	movw	r2, #2180	; 0x884
 80137fe:	493b      	ldr	r1, [pc, #236]	; (80138ec <tcp_pcb_remove+0x118>)
 8013800:	4839      	ldr	r0, [pc, #228]	; (80138e8 <tcp_pcb_remove+0x114>)
 8013802:	f008 ff6d 	bl	801c6e0 <iprintf>

  TCP_RMV(pcblist, pcb);
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	681b      	ldr	r3, [r3, #0]
 801380a:	683a      	ldr	r2, [r7, #0]
 801380c:	429a      	cmp	r2, r3
 801380e:	d105      	bne.n	801381c <tcp_pcb_remove+0x48>
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	681b      	ldr	r3, [r3, #0]
 8013814:	68da      	ldr	r2, [r3, #12]
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	601a      	str	r2, [r3, #0]
 801381a:	e013      	b.n	8013844 <tcp_pcb_remove+0x70>
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	681b      	ldr	r3, [r3, #0]
 8013820:	60fb      	str	r3, [r7, #12]
 8013822:	e00c      	b.n	801383e <tcp_pcb_remove+0x6a>
 8013824:	68fb      	ldr	r3, [r7, #12]
 8013826:	68db      	ldr	r3, [r3, #12]
 8013828:	683a      	ldr	r2, [r7, #0]
 801382a:	429a      	cmp	r2, r3
 801382c:	d104      	bne.n	8013838 <tcp_pcb_remove+0x64>
 801382e:	683b      	ldr	r3, [r7, #0]
 8013830:	68da      	ldr	r2, [r3, #12]
 8013832:	68fb      	ldr	r3, [r7, #12]
 8013834:	60da      	str	r2, [r3, #12]
 8013836:	e005      	b.n	8013844 <tcp_pcb_remove+0x70>
 8013838:	68fb      	ldr	r3, [r7, #12]
 801383a:	68db      	ldr	r3, [r3, #12]
 801383c:	60fb      	str	r3, [r7, #12]
 801383e:	68fb      	ldr	r3, [r7, #12]
 8013840:	2b00      	cmp	r3, #0
 8013842:	d1ef      	bne.n	8013824 <tcp_pcb_remove+0x50>
 8013844:	683b      	ldr	r3, [r7, #0]
 8013846:	2200      	movs	r2, #0
 8013848:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801384a:	6838      	ldr	r0, [r7, #0]
 801384c:	f7ff ff72 	bl	8013734 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8013850:	683b      	ldr	r3, [r7, #0]
 8013852:	7d1b      	ldrb	r3, [r3, #20]
 8013854:	2b0a      	cmp	r3, #10
 8013856:	d013      	beq.n	8013880 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8013858:	683b      	ldr	r3, [r7, #0]
 801385a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 801385c:	2b01      	cmp	r3, #1
 801385e:	d00f      	beq.n	8013880 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8013860:	683b      	ldr	r3, [r7, #0]
 8013862:	8b5b      	ldrh	r3, [r3, #26]
 8013864:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8013868:	2b00      	cmp	r3, #0
 801386a:	d009      	beq.n	8013880 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 801386c:	683b      	ldr	r3, [r7, #0]
 801386e:	8b5b      	ldrh	r3, [r3, #26]
 8013870:	f043 0302 	orr.w	r3, r3, #2
 8013874:	b29a      	uxth	r2, r3
 8013876:	683b      	ldr	r3, [r7, #0]
 8013878:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801387a:	6838      	ldr	r0, [r7, #0]
 801387c:	f003 fbc2 	bl	8017004 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8013880:	683b      	ldr	r3, [r7, #0]
 8013882:	7d1b      	ldrb	r3, [r3, #20]
 8013884:	2b01      	cmp	r3, #1
 8013886:	d020      	beq.n	80138ca <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8013888:	683b      	ldr	r3, [r7, #0]
 801388a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801388c:	2b00      	cmp	r3, #0
 801388e:	d006      	beq.n	801389e <tcp_pcb_remove+0xca>
 8013890:	4b13      	ldr	r3, [pc, #76]	; (80138e0 <tcp_pcb_remove+0x10c>)
 8013892:	f640 0293 	movw	r2, #2195	; 0x893
 8013896:	4916      	ldr	r1, [pc, #88]	; (80138f0 <tcp_pcb_remove+0x11c>)
 8013898:	4813      	ldr	r0, [pc, #76]	; (80138e8 <tcp_pcb_remove+0x114>)
 801389a:	f008 ff21 	bl	801c6e0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801389e:	683b      	ldr	r3, [r7, #0]
 80138a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d006      	beq.n	80138b4 <tcp_pcb_remove+0xe0>
 80138a6:	4b0e      	ldr	r3, [pc, #56]	; (80138e0 <tcp_pcb_remove+0x10c>)
 80138a8:	f640 0294 	movw	r2, #2196	; 0x894
 80138ac:	4911      	ldr	r1, [pc, #68]	; (80138f4 <tcp_pcb_remove+0x120>)
 80138ae:	480e      	ldr	r0, [pc, #56]	; (80138e8 <tcp_pcb_remove+0x114>)
 80138b0:	f008 ff16 	bl	801c6e0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80138b4:	683b      	ldr	r3, [r7, #0]
 80138b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	d006      	beq.n	80138ca <tcp_pcb_remove+0xf6>
 80138bc:	4b08      	ldr	r3, [pc, #32]	; (80138e0 <tcp_pcb_remove+0x10c>)
 80138be:	f640 0296 	movw	r2, #2198	; 0x896
 80138c2:	490d      	ldr	r1, [pc, #52]	; (80138f8 <tcp_pcb_remove+0x124>)
 80138c4:	4808      	ldr	r0, [pc, #32]	; (80138e8 <tcp_pcb_remove+0x114>)
 80138c6:	f008 ff0b 	bl	801c6e0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80138ca:	683b      	ldr	r3, [r7, #0]
 80138cc:	2200      	movs	r2, #0
 80138ce:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80138d0:	683b      	ldr	r3, [r7, #0]
 80138d2:	2200      	movs	r2, #0
 80138d4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80138d6:	bf00      	nop
 80138d8:	3710      	adds	r7, #16
 80138da:	46bd      	mov	sp, r7
 80138dc:	bd80      	pop	{r7, pc}
 80138de:	bf00      	nop
 80138e0:	08020070 	.word	0x08020070
 80138e4:	080206d8 	.word	0x080206d8
 80138e8:	080200b4 	.word	0x080200b4
 80138ec:	080206f4 	.word	0x080206f4
 80138f0:	08020714 	.word	0x08020714
 80138f4:	0802072c 	.word	0x0802072c
 80138f8:	08020748 	.word	0x08020748

080138fc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80138fc:	b580      	push	{r7, lr}
 80138fe:	b082      	sub	sp, #8
 8013900:	af00      	add	r7, sp, #0
 8013902:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	2b00      	cmp	r3, #0
 8013908:	d106      	bne.n	8013918 <tcp_next_iss+0x1c>
 801390a:	4b0a      	ldr	r3, [pc, #40]	; (8013934 <tcp_next_iss+0x38>)
 801390c:	f640 02af 	movw	r2, #2223	; 0x8af
 8013910:	4909      	ldr	r1, [pc, #36]	; (8013938 <tcp_next_iss+0x3c>)
 8013912:	480a      	ldr	r0, [pc, #40]	; (801393c <tcp_next_iss+0x40>)
 8013914:	f008 fee4 	bl	801c6e0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8013918:	4b09      	ldr	r3, [pc, #36]	; (8013940 <tcp_next_iss+0x44>)
 801391a:	681a      	ldr	r2, [r3, #0]
 801391c:	4b09      	ldr	r3, [pc, #36]	; (8013944 <tcp_next_iss+0x48>)
 801391e:	681b      	ldr	r3, [r3, #0]
 8013920:	4413      	add	r3, r2
 8013922:	4a07      	ldr	r2, [pc, #28]	; (8013940 <tcp_next_iss+0x44>)
 8013924:	6013      	str	r3, [r2, #0]
  return iss;
 8013926:	4b06      	ldr	r3, [pc, #24]	; (8013940 <tcp_next_iss+0x44>)
 8013928:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801392a:	4618      	mov	r0, r3
 801392c:	3708      	adds	r7, #8
 801392e:	46bd      	mov	sp, r7
 8013930:	bd80      	pop	{r7, pc}
 8013932:	bf00      	nop
 8013934:	08020070 	.word	0x08020070
 8013938:	08020760 	.word	0x08020760
 801393c:	080200b4 	.word	0x080200b4
 8013940:	20000134 	.word	0x20000134
 8013944:	2000b620 	.word	0x2000b620

08013948 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8013948:	b580      	push	{r7, lr}
 801394a:	b086      	sub	sp, #24
 801394c:	af00      	add	r7, sp, #0
 801394e:	4603      	mov	r3, r0
 8013950:	60b9      	str	r1, [r7, #8]
 8013952:	607a      	str	r2, [r7, #4]
 8013954:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	2b00      	cmp	r3, #0
 801395a:	d106      	bne.n	801396a <tcp_eff_send_mss_netif+0x22>
 801395c:	4b14      	ldr	r3, [pc, #80]	; (80139b0 <tcp_eff_send_mss_netif+0x68>)
 801395e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8013962:	4914      	ldr	r1, [pc, #80]	; (80139b4 <tcp_eff_send_mss_netif+0x6c>)
 8013964:	4814      	ldr	r0, [pc, #80]	; (80139b8 <tcp_eff_send_mss_netif+0x70>)
 8013966:	f008 febb 	bl	801c6e0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801396a:	68bb      	ldr	r3, [r7, #8]
 801396c:	2b00      	cmp	r3, #0
 801396e:	d101      	bne.n	8013974 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8013970:	89fb      	ldrh	r3, [r7, #14]
 8013972:	e019      	b.n	80139a8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8013974:	68bb      	ldr	r3, [r7, #8]
 8013976:	8c1b      	ldrh	r3, [r3, #32]
 8013978:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801397a:	8afb      	ldrh	r3, [r7, #22]
 801397c:	2b00      	cmp	r3, #0
 801397e:	d012      	beq.n	80139a6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8013980:	2328      	movs	r3, #40	; 0x28
 8013982:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8013984:	8afa      	ldrh	r2, [r7, #22]
 8013986:	8abb      	ldrh	r3, [r7, #20]
 8013988:	429a      	cmp	r2, r3
 801398a:	d904      	bls.n	8013996 <tcp_eff_send_mss_netif+0x4e>
 801398c:	8afa      	ldrh	r2, [r7, #22]
 801398e:	8abb      	ldrh	r3, [r7, #20]
 8013990:	1ad3      	subs	r3, r2, r3
 8013992:	b29b      	uxth	r3, r3
 8013994:	e000      	b.n	8013998 <tcp_eff_send_mss_netif+0x50>
 8013996:	2300      	movs	r3, #0
 8013998:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801399a:	8a7a      	ldrh	r2, [r7, #18]
 801399c:	89fb      	ldrh	r3, [r7, #14]
 801399e:	4293      	cmp	r3, r2
 80139a0:	bf28      	it	cs
 80139a2:	4613      	movcs	r3, r2
 80139a4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80139a6:	89fb      	ldrh	r3, [r7, #14]
}
 80139a8:	4618      	mov	r0, r3
 80139aa:	3718      	adds	r7, #24
 80139ac:	46bd      	mov	sp, r7
 80139ae:	bd80      	pop	{r7, pc}
 80139b0:	08020070 	.word	0x08020070
 80139b4:	0802077c 	.word	0x0802077c
 80139b8:	080200b4 	.word	0x080200b4

080139bc <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80139bc:	b580      	push	{r7, lr}
 80139be:	b084      	sub	sp, #16
 80139c0:	af00      	add	r7, sp, #0
 80139c2:	6078      	str	r0, [r7, #4]
 80139c4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80139c6:	683b      	ldr	r3, [r7, #0]
 80139c8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	d119      	bne.n	8013a04 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80139d0:	4b10      	ldr	r3, [pc, #64]	; (8013a14 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80139d2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80139d6:	4910      	ldr	r1, [pc, #64]	; (8013a18 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80139d8:	4810      	ldr	r0, [pc, #64]	; (8013a1c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80139da:	f008 fe81 	bl	801c6e0 <iprintf>

  while (pcb != NULL) {
 80139de:	e011      	b.n	8013a04 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80139e0:	68fb      	ldr	r3, [r7, #12]
 80139e2:	681a      	ldr	r2, [r3, #0]
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	681b      	ldr	r3, [r3, #0]
 80139e8:	429a      	cmp	r2, r3
 80139ea:	d108      	bne.n	80139fe <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80139ec:	68fb      	ldr	r3, [r7, #12]
 80139ee:	68db      	ldr	r3, [r3, #12]
 80139f0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80139f2:	68f8      	ldr	r0, [r7, #12]
 80139f4:	f7fe fd20 	bl	8012438 <tcp_abort>
      pcb = next;
 80139f8:	68bb      	ldr	r3, [r7, #8]
 80139fa:	60fb      	str	r3, [r7, #12]
 80139fc:	e002      	b.n	8013a04 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80139fe:	68fb      	ldr	r3, [r7, #12]
 8013a00:	68db      	ldr	r3, [r3, #12]
 8013a02:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8013a04:	68fb      	ldr	r3, [r7, #12]
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	d1ea      	bne.n	80139e0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8013a0a:	bf00      	nop
 8013a0c:	bf00      	nop
 8013a0e:	3710      	adds	r7, #16
 8013a10:	46bd      	mov	sp, r7
 8013a12:	bd80      	pop	{r7, pc}
 8013a14:	08020070 	.word	0x08020070
 8013a18:	080207a4 	.word	0x080207a4
 8013a1c:	080200b4 	.word	0x080200b4

08013a20 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013a20:	b580      	push	{r7, lr}
 8013a22:	b084      	sub	sp, #16
 8013a24:	af00      	add	r7, sp, #0
 8013a26:	6078      	str	r0, [r7, #4]
 8013a28:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	d02a      	beq.n	8013a86 <tcp_netif_ip_addr_changed+0x66>
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	681b      	ldr	r3, [r3, #0]
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	d026      	beq.n	8013a86 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8013a38:	4b15      	ldr	r3, [pc, #84]	; (8013a90 <tcp_netif_ip_addr_changed+0x70>)
 8013a3a:	681b      	ldr	r3, [r3, #0]
 8013a3c:	4619      	mov	r1, r3
 8013a3e:	6878      	ldr	r0, [r7, #4]
 8013a40:	f7ff ffbc 	bl	80139bc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8013a44:	4b13      	ldr	r3, [pc, #76]	; (8013a94 <tcp_netif_ip_addr_changed+0x74>)
 8013a46:	681b      	ldr	r3, [r3, #0]
 8013a48:	4619      	mov	r1, r3
 8013a4a:	6878      	ldr	r0, [r7, #4]
 8013a4c:	f7ff ffb6 	bl	80139bc <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8013a50:	683b      	ldr	r3, [r7, #0]
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	d017      	beq.n	8013a86 <tcp_netif_ip_addr_changed+0x66>
 8013a56:	683b      	ldr	r3, [r7, #0]
 8013a58:	681b      	ldr	r3, [r3, #0]
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	d013      	beq.n	8013a86 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013a5e:	4b0e      	ldr	r3, [pc, #56]	; (8013a98 <tcp_netif_ip_addr_changed+0x78>)
 8013a60:	681b      	ldr	r3, [r3, #0]
 8013a62:	60fb      	str	r3, [r7, #12]
 8013a64:	e00c      	b.n	8013a80 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8013a66:	68fb      	ldr	r3, [r7, #12]
 8013a68:	681a      	ldr	r2, [r3, #0]
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	681b      	ldr	r3, [r3, #0]
 8013a6e:	429a      	cmp	r2, r3
 8013a70:	d103      	bne.n	8013a7a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8013a72:	683b      	ldr	r3, [r7, #0]
 8013a74:	681a      	ldr	r2, [r3, #0]
 8013a76:	68fb      	ldr	r3, [r7, #12]
 8013a78:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013a7a:	68fb      	ldr	r3, [r7, #12]
 8013a7c:	68db      	ldr	r3, [r3, #12]
 8013a7e:	60fb      	str	r3, [r7, #12]
 8013a80:	68fb      	ldr	r3, [r7, #12]
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d1ef      	bne.n	8013a66 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8013a86:	bf00      	nop
 8013a88:	3710      	adds	r7, #16
 8013a8a:	46bd      	mov	sp, r7
 8013a8c:	bd80      	pop	{r7, pc}
 8013a8e:	bf00      	nop
 8013a90:	2000b61c 	.word	0x2000b61c
 8013a94:	2000b628 	.word	0x2000b628
 8013a98:	2000b624 	.word	0x2000b624

08013a9c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8013a9c:	b580      	push	{r7, lr}
 8013a9e:	b082      	sub	sp, #8
 8013aa0:	af00      	add	r7, sp, #0
 8013aa2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d007      	beq.n	8013abc <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013ab0:	4618      	mov	r0, r3
 8013ab2:	f7ff fb51 	bl	8013158 <tcp_segs_free>
    pcb->ooseq = NULL;
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	2200      	movs	r2, #0
 8013aba:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8013abc:	bf00      	nop
 8013abe:	3708      	adds	r7, #8
 8013ac0:	46bd      	mov	sp, r7
 8013ac2:	bd80      	pop	{r7, pc}

08013ac4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8013ac4:	b590      	push	{r4, r7, lr}
 8013ac6:	b08d      	sub	sp, #52	; 0x34
 8013ac8:	af04      	add	r7, sp, #16
 8013aca:	6078      	str	r0, [r7, #4]
 8013acc:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	d105      	bne.n	8013ae0 <tcp_input+0x1c>
 8013ad4:	4b9b      	ldr	r3, [pc, #620]	; (8013d44 <tcp_input+0x280>)
 8013ad6:	2283      	movs	r2, #131	; 0x83
 8013ad8:	499b      	ldr	r1, [pc, #620]	; (8013d48 <tcp_input+0x284>)
 8013ada:	489c      	ldr	r0, [pc, #624]	; (8013d4c <tcp_input+0x288>)
 8013adc:	f008 fe00 	bl	801c6e0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	685b      	ldr	r3, [r3, #4]
 8013ae4:	4a9a      	ldr	r2, [pc, #616]	; (8013d50 <tcp_input+0x28c>)
 8013ae6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	895b      	ldrh	r3, [r3, #10]
 8013aec:	2b13      	cmp	r3, #19
 8013aee:	f240 83c4 	bls.w	801427a <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8013af2:	4b98      	ldr	r3, [pc, #608]	; (8013d54 <tcp_input+0x290>)
 8013af4:	695b      	ldr	r3, [r3, #20]
 8013af6:	4a97      	ldr	r2, [pc, #604]	; (8013d54 <tcp_input+0x290>)
 8013af8:	6812      	ldr	r2, [r2, #0]
 8013afa:	4611      	mov	r1, r2
 8013afc:	4618      	mov	r0, r3
 8013afe:	f006 fbcb 	bl	801a298 <ip4_addr_isbroadcast_u32>
 8013b02:	4603      	mov	r3, r0
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	f040 83ba 	bne.w	801427e <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8013b0a:	4b92      	ldr	r3, [pc, #584]	; (8013d54 <tcp_input+0x290>)
 8013b0c:	695b      	ldr	r3, [r3, #20]
 8013b0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8013b12:	2be0      	cmp	r3, #224	; 0xe0
 8013b14:	f000 83b3 	beq.w	801427e <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8013b18:	4b8d      	ldr	r3, [pc, #564]	; (8013d50 <tcp_input+0x28c>)
 8013b1a:	681b      	ldr	r3, [r3, #0]
 8013b1c:	899b      	ldrh	r3, [r3, #12]
 8013b1e:	b29b      	uxth	r3, r3
 8013b20:	4618      	mov	r0, r3
 8013b22:	f7fc facd 	bl	80100c0 <lwip_htons>
 8013b26:	4603      	mov	r3, r0
 8013b28:	0b1b      	lsrs	r3, r3, #12
 8013b2a:	b29b      	uxth	r3, r3
 8013b2c:	b2db      	uxtb	r3, r3
 8013b2e:	009b      	lsls	r3, r3, #2
 8013b30:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8013b32:	7cbb      	ldrb	r3, [r7, #18]
 8013b34:	2b13      	cmp	r3, #19
 8013b36:	f240 83a4 	bls.w	8014282 <tcp_input+0x7be>
 8013b3a:	7cbb      	ldrb	r3, [r7, #18]
 8013b3c:	b29a      	uxth	r2, r3
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	891b      	ldrh	r3, [r3, #8]
 8013b42:	429a      	cmp	r2, r3
 8013b44:	f200 839d 	bhi.w	8014282 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8013b48:	7cbb      	ldrb	r3, [r7, #18]
 8013b4a:	b29b      	uxth	r3, r3
 8013b4c:	3b14      	subs	r3, #20
 8013b4e:	b29a      	uxth	r2, r3
 8013b50:	4b81      	ldr	r3, [pc, #516]	; (8013d58 <tcp_input+0x294>)
 8013b52:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8013b54:	4b81      	ldr	r3, [pc, #516]	; (8013d5c <tcp_input+0x298>)
 8013b56:	2200      	movs	r2, #0
 8013b58:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	895a      	ldrh	r2, [r3, #10]
 8013b5e:	7cbb      	ldrb	r3, [r7, #18]
 8013b60:	b29b      	uxth	r3, r3
 8013b62:	429a      	cmp	r2, r3
 8013b64:	d309      	bcc.n	8013b7a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8013b66:	4b7c      	ldr	r3, [pc, #496]	; (8013d58 <tcp_input+0x294>)
 8013b68:	881a      	ldrh	r2, [r3, #0]
 8013b6a:	4b7d      	ldr	r3, [pc, #500]	; (8013d60 <tcp_input+0x29c>)
 8013b6c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8013b6e:	7cbb      	ldrb	r3, [r7, #18]
 8013b70:	4619      	mov	r1, r3
 8013b72:	6878      	ldr	r0, [r7, #4]
 8013b74:	f7fd fdda 	bl	801172c <pbuf_remove_header>
 8013b78:	e04e      	b.n	8013c18 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	681b      	ldr	r3, [r3, #0]
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	d105      	bne.n	8013b8e <tcp_input+0xca>
 8013b82:	4b70      	ldr	r3, [pc, #448]	; (8013d44 <tcp_input+0x280>)
 8013b84:	22c2      	movs	r2, #194	; 0xc2
 8013b86:	4977      	ldr	r1, [pc, #476]	; (8013d64 <tcp_input+0x2a0>)
 8013b88:	4870      	ldr	r0, [pc, #448]	; (8013d4c <tcp_input+0x288>)
 8013b8a:	f008 fda9 	bl	801c6e0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8013b8e:	2114      	movs	r1, #20
 8013b90:	6878      	ldr	r0, [r7, #4]
 8013b92:	f7fd fdcb 	bl	801172c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	895a      	ldrh	r2, [r3, #10]
 8013b9a:	4b71      	ldr	r3, [pc, #452]	; (8013d60 <tcp_input+0x29c>)
 8013b9c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8013b9e:	4b6e      	ldr	r3, [pc, #440]	; (8013d58 <tcp_input+0x294>)
 8013ba0:	881a      	ldrh	r2, [r3, #0]
 8013ba2:	4b6f      	ldr	r3, [pc, #444]	; (8013d60 <tcp_input+0x29c>)
 8013ba4:	881b      	ldrh	r3, [r3, #0]
 8013ba6:	1ad3      	subs	r3, r2, r3
 8013ba8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8013baa:	4b6d      	ldr	r3, [pc, #436]	; (8013d60 <tcp_input+0x29c>)
 8013bac:	881b      	ldrh	r3, [r3, #0]
 8013bae:	4619      	mov	r1, r3
 8013bb0:	6878      	ldr	r0, [r7, #4]
 8013bb2:	f7fd fdbb 	bl	801172c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	681b      	ldr	r3, [r3, #0]
 8013bba:	895b      	ldrh	r3, [r3, #10]
 8013bbc:	8a3a      	ldrh	r2, [r7, #16]
 8013bbe:	429a      	cmp	r2, r3
 8013bc0:	f200 8361 	bhi.w	8014286 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	681b      	ldr	r3, [r3, #0]
 8013bc8:	685b      	ldr	r3, [r3, #4]
 8013bca:	4a64      	ldr	r2, [pc, #400]	; (8013d5c <tcp_input+0x298>)
 8013bcc:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	681b      	ldr	r3, [r3, #0]
 8013bd2:	8a3a      	ldrh	r2, [r7, #16]
 8013bd4:	4611      	mov	r1, r2
 8013bd6:	4618      	mov	r0, r3
 8013bd8:	f7fd fda8 	bl	801172c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	891a      	ldrh	r2, [r3, #8]
 8013be0:	8a3b      	ldrh	r3, [r7, #16]
 8013be2:	1ad3      	subs	r3, r2, r3
 8013be4:	b29a      	uxth	r2, r3
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	895b      	ldrh	r3, [r3, #10]
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	d005      	beq.n	8013bfe <tcp_input+0x13a>
 8013bf2:	4b54      	ldr	r3, [pc, #336]	; (8013d44 <tcp_input+0x280>)
 8013bf4:	22df      	movs	r2, #223	; 0xdf
 8013bf6:	495c      	ldr	r1, [pc, #368]	; (8013d68 <tcp_input+0x2a4>)
 8013bf8:	4854      	ldr	r0, [pc, #336]	; (8013d4c <tcp_input+0x288>)
 8013bfa:	f008 fd71 	bl	801c6e0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	891a      	ldrh	r2, [r3, #8]
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	681b      	ldr	r3, [r3, #0]
 8013c06:	891b      	ldrh	r3, [r3, #8]
 8013c08:	429a      	cmp	r2, r3
 8013c0a:	d005      	beq.n	8013c18 <tcp_input+0x154>
 8013c0c:	4b4d      	ldr	r3, [pc, #308]	; (8013d44 <tcp_input+0x280>)
 8013c0e:	22e0      	movs	r2, #224	; 0xe0
 8013c10:	4956      	ldr	r1, [pc, #344]	; (8013d6c <tcp_input+0x2a8>)
 8013c12:	484e      	ldr	r0, [pc, #312]	; (8013d4c <tcp_input+0x288>)
 8013c14:	f008 fd64 	bl	801c6e0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8013c18:	4b4d      	ldr	r3, [pc, #308]	; (8013d50 <tcp_input+0x28c>)
 8013c1a:	681b      	ldr	r3, [r3, #0]
 8013c1c:	881b      	ldrh	r3, [r3, #0]
 8013c1e:	b29b      	uxth	r3, r3
 8013c20:	4a4b      	ldr	r2, [pc, #300]	; (8013d50 <tcp_input+0x28c>)
 8013c22:	6814      	ldr	r4, [r2, #0]
 8013c24:	4618      	mov	r0, r3
 8013c26:	f7fc fa4b 	bl	80100c0 <lwip_htons>
 8013c2a:	4603      	mov	r3, r0
 8013c2c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8013c2e:	4b48      	ldr	r3, [pc, #288]	; (8013d50 <tcp_input+0x28c>)
 8013c30:	681b      	ldr	r3, [r3, #0]
 8013c32:	885b      	ldrh	r3, [r3, #2]
 8013c34:	b29b      	uxth	r3, r3
 8013c36:	4a46      	ldr	r2, [pc, #280]	; (8013d50 <tcp_input+0x28c>)
 8013c38:	6814      	ldr	r4, [r2, #0]
 8013c3a:	4618      	mov	r0, r3
 8013c3c:	f7fc fa40 	bl	80100c0 <lwip_htons>
 8013c40:	4603      	mov	r3, r0
 8013c42:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8013c44:	4b42      	ldr	r3, [pc, #264]	; (8013d50 <tcp_input+0x28c>)
 8013c46:	681b      	ldr	r3, [r3, #0]
 8013c48:	685b      	ldr	r3, [r3, #4]
 8013c4a:	4a41      	ldr	r2, [pc, #260]	; (8013d50 <tcp_input+0x28c>)
 8013c4c:	6814      	ldr	r4, [r2, #0]
 8013c4e:	4618      	mov	r0, r3
 8013c50:	f7fc fa4b 	bl	80100ea <lwip_htonl>
 8013c54:	4603      	mov	r3, r0
 8013c56:	6063      	str	r3, [r4, #4]
 8013c58:	6863      	ldr	r3, [r4, #4]
 8013c5a:	4a45      	ldr	r2, [pc, #276]	; (8013d70 <tcp_input+0x2ac>)
 8013c5c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8013c5e:	4b3c      	ldr	r3, [pc, #240]	; (8013d50 <tcp_input+0x28c>)
 8013c60:	681b      	ldr	r3, [r3, #0]
 8013c62:	689b      	ldr	r3, [r3, #8]
 8013c64:	4a3a      	ldr	r2, [pc, #232]	; (8013d50 <tcp_input+0x28c>)
 8013c66:	6814      	ldr	r4, [r2, #0]
 8013c68:	4618      	mov	r0, r3
 8013c6a:	f7fc fa3e 	bl	80100ea <lwip_htonl>
 8013c6e:	4603      	mov	r3, r0
 8013c70:	60a3      	str	r3, [r4, #8]
 8013c72:	68a3      	ldr	r3, [r4, #8]
 8013c74:	4a3f      	ldr	r2, [pc, #252]	; (8013d74 <tcp_input+0x2b0>)
 8013c76:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8013c78:	4b35      	ldr	r3, [pc, #212]	; (8013d50 <tcp_input+0x28c>)
 8013c7a:	681b      	ldr	r3, [r3, #0]
 8013c7c:	89db      	ldrh	r3, [r3, #14]
 8013c7e:	b29b      	uxth	r3, r3
 8013c80:	4a33      	ldr	r2, [pc, #204]	; (8013d50 <tcp_input+0x28c>)
 8013c82:	6814      	ldr	r4, [r2, #0]
 8013c84:	4618      	mov	r0, r3
 8013c86:	f7fc fa1b 	bl	80100c0 <lwip_htons>
 8013c8a:	4603      	mov	r3, r0
 8013c8c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8013c8e:	4b30      	ldr	r3, [pc, #192]	; (8013d50 <tcp_input+0x28c>)
 8013c90:	681b      	ldr	r3, [r3, #0]
 8013c92:	899b      	ldrh	r3, [r3, #12]
 8013c94:	b29b      	uxth	r3, r3
 8013c96:	4618      	mov	r0, r3
 8013c98:	f7fc fa12 	bl	80100c0 <lwip_htons>
 8013c9c:	4603      	mov	r3, r0
 8013c9e:	b2db      	uxtb	r3, r3
 8013ca0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013ca4:	b2da      	uxtb	r2, r3
 8013ca6:	4b34      	ldr	r3, [pc, #208]	; (8013d78 <tcp_input+0x2b4>)
 8013ca8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	891a      	ldrh	r2, [r3, #8]
 8013cae:	4b33      	ldr	r3, [pc, #204]	; (8013d7c <tcp_input+0x2b8>)
 8013cb0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8013cb2:	4b31      	ldr	r3, [pc, #196]	; (8013d78 <tcp_input+0x2b4>)
 8013cb4:	781b      	ldrb	r3, [r3, #0]
 8013cb6:	f003 0303 	and.w	r3, r3, #3
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	d00c      	beq.n	8013cd8 <tcp_input+0x214>
    tcplen++;
 8013cbe:	4b2f      	ldr	r3, [pc, #188]	; (8013d7c <tcp_input+0x2b8>)
 8013cc0:	881b      	ldrh	r3, [r3, #0]
 8013cc2:	3301      	adds	r3, #1
 8013cc4:	b29a      	uxth	r2, r3
 8013cc6:	4b2d      	ldr	r3, [pc, #180]	; (8013d7c <tcp_input+0x2b8>)
 8013cc8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	891a      	ldrh	r2, [r3, #8]
 8013cce:	4b2b      	ldr	r3, [pc, #172]	; (8013d7c <tcp_input+0x2b8>)
 8013cd0:	881b      	ldrh	r3, [r3, #0]
 8013cd2:	429a      	cmp	r2, r3
 8013cd4:	f200 82d9 	bhi.w	801428a <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8013cd8:	2300      	movs	r3, #0
 8013cda:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013cdc:	4b28      	ldr	r3, [pc, #160]	; (8013d80 <tcp_input+0x2bc>)
 8013cde:	681b      	ldr	r3, [r3, #0]
 8013ce0:	61fb      	str	r3, [r7, #28]
 8013ce2:	e09d      	b.n	8013e20 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8013ce4:	69fb      	ldr	r3, [r7, #28]
 8013ce6:	7d1b      	ldrb	r3, [r3, #20]
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d105      	bne.n	8013cf8 <tcp_input+0x234>
 8013cec:	4b15      	ldr	r3, [pc, #84]	; (8013d44 <tcp_input+0x280>)
 8013cee:	22fb      	movs	r2, #251	; 0xfb
 8013cf0:	4924      	ldr	r1, [pc, #144]	; (8013d84 <tcp_input+0x2c0>)
 8013cf2:	4816      	ldr	r0, [pc, #88]	; (8013d4c <tcp_input+0x288>)
 8013cf4:	f008 fcf4 	bl	801c6e0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8013cf8:	69fb      	ldr	r3, [r7, #28]
 8013cfa:	7d1b      	ldrb	r3, [r3, #20]
 8013cfc:	2b0a      	cmp	r3, #10
 8013cfe:	d105      	bne.n	8013d0c <tcp_input+0x248>
 8013d00:	4b10      	ldr	r3, [pc, #64]	; (8013d44 <tcp_input+0x280>)
 8013d02:	22fc      	movs	r2, #252	; 0xfc
 8013d04:	4920      	ldr	r1, [pc, #128]	; (8013d88 <tcp_input+0x2c4>)
 8013d06:	4811      	ldr	r0, [pc, #68]	; (8013d4c <tcp_input+0x288>)
 8013d08:	f008 fcea 	bl	801c6e0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8013d0c:	69fb      	ldr	r3, [r7, #28]
 8013d0e:	7d1b      	ldrb	r3, [r3, #20]
 8013d10:	2b01      	cmp	r3, #1
 8013d12:	d105      	bne.n	8013d20 <tcp_input+0x25c>
 8013d14:	4b0b      	ldr	r3, [pc, #44]	; (8013d44 <tcp_input+0x280>)
 8013d16:	22fd      	movs	r2, #253	; 0xfd
 8013d18:	491c      	ldr	r1, [pc, #112]	; (8013d8c <tcp_input+0x2c8>)
 8013d1a:	480c      	ldr	r0, [pc, #48]	; (8013d4c <tcp_input+0x288>)
 8013d1c:	f008 fce0 	bl	801c6e0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013d20:	69fb      	ldr	r3, [r7, #28]
 8013d22:	7a1b      	ldrb	r3, [r3, #8]
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d033      	beq.n	8013d90 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013d28:	69fb      	ldr	r3, [r7, #28]
 8013d2a:	7a1a      	ldrb	r2, [r3, #8]
 8013d2c:	4b09      	ldr	r3, [pc, #36]	; (8013d54 <tcp_input+0x290>)
 8013d2e:	685b      	ldr	r3, [r3, #4]
 8013d30:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013d34:	3301      	adds	r3, #1
 8013d36:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013d38:	429a      	cmp	r2, r3
 8013d3a:	d029      	beq.n	8013d90 <tcp_input+0x2cc>
      prev = pcb;
 8013d3c:	69fb      	ldr	r3, [r7, #28]
 8013d3e:	61bb      	str	r3, [r7, #24]
      continue;
 8013d40:	e06b      	b.n	8013e1a <tcp_input+0x356>
 8013d42:	bf00      	nop
 8013d44:	080207d8 	.word	0x080207d8
 8013d48:	0802080c 	.word	0x0802080c
 8013d4c:	08020824 	.word	0x08020824
 8013d50:	20004710 	.word	0x20004710
 8013d54:	20007f08 	.word	0x20007f08
 8013d58:	20004714 	.word	0x20004714
 8013d5c:	20004718 	.word	0x20004718
 8013d60:	20004716 	.word	0x20004716
 8013d64:	0802084c 	.word	0x0802084c
 8013d68:	0802085c 	.word	0x0802085c
 8013d6c:	08020868 	.word	0x08020868
 8013d70:	20004720 	.word	0x20004720
 8013d74:	20004724 	.word	0x20004724
 8013d78:	2000472c 	.word	0x2000472c
 8013d7c:	2000472a 	.word	0x2000472a
 8013d80:	2000b61c 	.word	0x2000b61c
 8013d84:	08020888 	.word	0x08020888
 8013d88:	080208b0 	.word	0x080208b0
 8013d8c:	080208dc 	.word	0x080208dc
    }

    if (pcb->remote_port == tcphdr->src &&
 8013d90:	69fb      	ldr	r3, [r7, #28]
 8013d92:	8b1a      	ldrh	r2, [r3, #24]
 8013d94:	4b94      	ldr	r3, [pc, #592]	; (8013fe8 <tcp_input+0x524>)
 8013d96:	681b      	ldr	r3, [r3, #0]
 8013d98:	881b      	ldrh	r3, [r3, #0]
 8013d9a:	b29b      	uxth	r3, r3
 8013d9c:	429a      	cmp	r2, r3
 8013d9e:	d13a      	bne.n	8013e16 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8013da0:	69fb      	ldr	r3, [r7, #28]
 8013da2:	8ada      	ldrh	r2, [r3, #22]
 8013da4:	4b90      	ldr	r3, [pc, #576]	; (8013fe8 <tcp_input+0x524>)
 8013da6:	681b      	ldr	r3, [r3, #0]
 8013da8:	885b      	ldrh	r3, [r3, #2]
 8013daa:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8013dac:	429a      	cmp	r2, r3
 8013dae:	d132      	bne.n	8013e16 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013db0:	69fb      	ldr	r3, [r7, #28]
 8013db2:	685a      	ldr	r2, [r3, #4]
 8013db4:	4b8d      	ldr	r3, [pc, #564]	; (8013fec <tcp_input+0x528>)
 8013db6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8013db8:	429a      	cmp	r2, r3
 8013dba:	d12c      	bne.n	8013e16 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013dbc:	69fb      	ldr	r3, [r7, #28]
 8013dbe:	681a      	ldr	r2, [r3, #0]
 8013dc0:	4b8a      	ldr	r3, [pc, #552]	; (8013fec <tcp_input+0x528>)
 8013dc2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013dc4:	429a      	cmp	r2, r3
 8013dc6:	d126      	bne.n	8013e16 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8013dc8:	69fb      	ldr	r3, [r7, #28]
 8013dca:	68db      	ldr	r3, [r3, #12]
 8013dcc:	69fa      	ldr	r2, [r7, #28]
 8013dce:	429a      	cmp	r2, r3
 8013dd0:	d106      	bne.n	8013de0 <tcp_input+0x31c>
 8013dd2:	4b87      	ldr	r3, [pc, #540]	; (8013ff0 <tcp_input+0x52c>)
 8013dd4:	f240 120d 	movw	r2, #269	; 0x10d
 8013dd8:	4986      	ldr	r1, [pc, #536]	; (8013ff4 <tcp_input+0x530>)
 8013dda:	4887      	ldr	r0, [pc, #540]	; (8013ff8 <tcp_input+0x534>)
 8013ddc:	f008 fc80 	bl	801c6e0 <iprintf>
      if (prev != NULL) {
 8013de0:	69bb      	ldr	r3, [r7, #24]
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	d00a      	beq.n	8013dfc <tcp_input+0x338>
        prev->next = pcb->next;
 8013de6:	69fb      	ldr	r3, [r7, #28]
 8013de8:	68da      	ldr	r2, [r3, #12]
 8013dea:	69bb      	ldr	r3, [r7, #24]
 8013dec:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8013dee:	4b83      	ldr	r3, [pc, #524]	; (8013ffc <tcp_input+0x538>)
 8013df0:	681a      	ldr	r2, [r3, #0]
 8013df2:	69fb      	ldr	r3, [r7, #28]
 8013df4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8013df6:	4a81      	ldr	r2, [pc, #516]	; (8013ffc <tcp_input+0x538>)
 8013df8:	69fb      	ldr	r3, [r7, #28]
 8013dfa:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8013dfc:	69fb      	ldr	r3, [r7, #28]
 8013dfe:	68db      	ldr	r3, [r3, #12]
 8013e00:	69fa      	ldr	r2, [r7, #28]
 8013e02:	429a      	cmp	r2, r3
 8013e04:	d111      	bne.n	8013e2a <tcp_input+0x366>
 8013e06:	4b7a      	ldr	r3, [pc, #488]	; (8013ff0 <tcp_input+0x52c>)
 8013e08:	f240 1215 	movw	r2, #277	; 0x115
 8013e0c:	497c      	ldr	r1, [pc, #496]	; (8014000 <tcp_input+0x53c>)
 8013e0e:	487a      	ldr	r0, [pc, #488]	; (8013ff8 <tcp_input+0x534>)
 8013e10:	f008 fc66 	bl	801c6e0 <iprintf>
      break;
 8013e14:	e009      	b.n	8013e2a <tcp_input+0x366>
    }
    prev = pcb;
 8013e16:	69fb      	ldr	r3, [r7, #28]
 8013e18:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013e1a:	69fb      	ldr	r3, [r7, #28]
 8013e1c:	68db      	ldr	r3, [r3, #12]
 8013e1e:	61fb      	str	r3, [r7, #28]
 8013e20:	69fb      	ldr	r3, [r7, #28]
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	f47f af5e 	bne.w	8013ce4 <tcp_input+0x220>
 8013e28:	e000      	b.n	8013e2c <tcp_input+0x368>
      break;
 8013e2a:	bf00      	nop
  }

  if (pcb == NULL) {
 8013e2c:	69fb      	ldr	r3, [r7, #28]
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	f040 8095 	bne.w	8013f5e <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013e34:	4b73      	ldr	r3, [pc, #460]	; (8014004 <tcp_input+0x540>)
 8013e36:	681b      	ldr	r3, [r3, #0]
 8013e38:	61fb      	str	r3, [r7, #28]
 8013e3a:	e03f      	b.n	8013ebc <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8013e3c:	69fb      	ldr	r3, [r7, #28]
 8013e3e:	7d1b      	ldrb	r3, [r3, #20]
 8013e40:	2b0a      	cmp	r3, #10
 8013e42:	d006      	beq.n	8013e52 <tcp_input+0x38e>
 8013e44:	4b6a      	ldr	r3, [pc, #424]	; (8013ff0 <tcp_input+0x52c>)
 8013e46:	f240 121f 	movw	r2, #287	; 0x11f
 8013e4a:	496f      	ldr	r1, [pc, #444]	; (8014008 <tcp_input+0x544>)
 8013e4c:	486a      	ldr	r0, [pc, #424]	; (8013ff8 <tcp_input+0x534>)
 8013e4e:	f008 fc47 	bl	801c6e0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013e52:	69fb      	ldr	r3, [r7, #28]
 8013e54:	7a1b      	ldrb	r3, [r3, #8]
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	d009      	beq.n	8013e6e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013e5a:	69fb      	ldr	r3, [r7, #28]
 8013e5c:	7a1a      	ldrb	r2, [r3, #8]
 8013e5e:	4b63      	ldr	r3, [pc, #396]	; (8013fec <tcp_input+0x528>)
 8013e60:	685b      	ldr	r3, [r3, #4]
 8013e62:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013e66:	3301      	adds	r3, #1
 8013e68:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013e6a:	429a      	cmp	r2, r3
 8013e6c:	d122      	bne.n	8013eb4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8013e6e:	69fb      	ldr	r3, [r7, #28]
 8013e70:	8b1a      	ldrh	r2, [r3, #24]
 8013e72:	4b5d      	ldr	r3, [pc, #372]	; (8013fe8 <tcp_input+0x524>)
 8013e74:	681b      	ldr	r3, [r3, #0]
 8013e76:	881b      	ldrh	r3, [r3, #0]
 8013e78:	b29b      	uxth	r3, r3
 8013e7a:	429a      	cmp	r2, r3
 8013e7c:	d11b      	bne.n	8013eb6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8013e7e:	69fb      	ldr	r3, [r7, #28]
 8013e80:	8ada      	ldrh	r2, [r3, #22]
 8013e82:	4b59      	ldr	r3, [pc, #356]	; (8013fe8 <tcp_input+0x524>)
 8013e84:	681b      	ldr	r3, [r3, #0]
 8013e86:	885b      	ldrh	r3, [r3, #2]
 8013e88:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8013e8a:	429a      	cmp	r2, r3
 8013e8c:	d113      	bne.n	8013eb6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013e8e:	69fb      	ldr	r3, [r7, #28]
 8013e90:	685a      	ldr	r2, [r3, #4]
 8013e92:	4b56      	ldr	r3, [pc, #344]	; (8013fec <tcp_input+0x528>)
 8013e94:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8013e96:	429a      	cmp	r2, r3
 8013e98:	d10d      	bne.n	8013eb6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013e9a:	69fb      	ldr	r3, [r7, #28]
 8013e9c:	681a      	ldr	r2, [r3, #0]
 8013e9e:	4b53      	ldr	r3, [pc, #332]	; (8013fec <tcp_input+0x528>)
 8013ea0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013ea2:	429a      	cmp	r2, r3
 8013ea4:	d107      	bne.n	8013eb6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8013ea6:	69f8      	ldr	r0, [r7, #28]
 8013ea8:	f000 fb54 	bl	8014554 <tcp_timewait_input>
        }
        pbuf_free(p);
 8013eac:	6878      	ldr	r0, [r7, #4]
 8013eae:	f7fd fcc3 	bl	8011838 <pbuf_free>
        return;
 8013eb2:	e1f0      	b.n	8014296 <tcp_input+0x7d2>
        continue;
 8013eb4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013eb6:	69fb      	ldr	r3, [r7, #28]
 8013eb8:	68db      	ldr	r3, [r3, #12]
 8013eba:	61fb      	str	r3, [r7, #28]
 8013ebc:	69fb      	ldr	r3, [r7, #28]
 8013ebe:	2b00      	cmp	r3, #0
 8013ec0:	d1bc      	bne.n	8013e3c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8013ec2:	2300      	movs	r3, #0
 8013ec4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013ec6:	4b51      	ldr	r3, [pc, #324]	; (801400c <tcp_input+0x548>)
 8013ec8:	681b      	ldr	r3, [r3, #0]
 8013eca:	617b      	str	r3, [r7, #20]
 8013ecc:	e02a      	b.n	8013f24 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8013ece:	697b      	ldr	r3, [r7, #20]
 8013ed0:	7a1b      	ldrb	r3, [r3, #8]
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	d00c      	beq.n	8013ef0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013ed6:	697b      	ldr	r3, [r7, #20]
 8013ed8:	7a1a      	ldrb	r2, [r3, #8]
 8013eda:	4b44      	ldr	r3, [pc, #272]	; (8013fec <tcp_input+0x528>)
 8013edc:	685b      	ldr	r3, [r3, #4]
 8013ede:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013ee2:	3301      	adds	r3, #1
 8013ee4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8013ee6:	429a      	cmp	r2, r3
 8013ee8:	d002      	beq.n	8013ef0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8013eea:	697b      	ldr	r3, [r7, #20]
 8013eec:	61bb      	str	r3, [r7, #24]
        continue;
 8013eee:	e016      	b.n	8013f1e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8013ef0:	697b      	ldr	r3, [r7, #20]
 8013ef2:	8ada      	ldrh	r2, [r3, #22]
 8013ef4:	4b3c      	ldr	r3, [pc, #240]	; (8013fe8 <tcp_input+0x524>)
 8013ef6:	681b      	ldr	r3, [r3, #0]
 8013ef8:	885b      	ldrh	r3, [r3, #2]
 8013efa:	b29b      	uxth	r3, r3
 8013efc:	429a      	cmp	r2, r3
 8013efe:	d10c      	bne.n	8013f1a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8013f00:	697b      	ldr	r3, [r7, #20]
 8013f02:	681a      	ldr	r2, [r3, #0]
 8013f04:	4b39      	ldr	r3, [pc, #228]	; (8013fec <tcp_input+0x528>)
 8013f06:	695b      	ldr	r3, [r3, #20]
 8013f08:	429a      	cmp	r2, r3
 8013f0a:	d00f      	beq.n	8013f2c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8013f0c:	697b      	ldr	r3, [r7, #20]
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d00d      	beq.n	8013f2e <tcp_input+0x46a>
 8013f12:	697b      	ldr	r3, [r7, #20]
 8013f14:	681b      	ldr	r3, [r3, #0]
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	d009      	beq.n	8013f2e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8013f1a:	697b      	ldr	r3, [r7, #20]
 8013f1c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013f1e:	697b      	ldr	r3, [r7, #20]
 8013f20:	68db      	ldr	r3, [r3, #12]
 8013f22:	617b      	str	r3, [r7, #20]
 8013f24:	697b      	ldr	r3, [r7, #20]
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	d1d1      	bne.n	8013ece <tcp_input+0x40a>
 8013f2a:	e000      	b.n	8013f2e <tcp_input+0x46a>
            break;
 8013f2c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8013f2e:	697b      	ldr	r3, [r7, #20]
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	d014      	beq.n	8013f5e <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8013f34:	69bb      	ldr	r3, [r7, #24]
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d00a      	beq.n	8013f50 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8013f3a:	697b      	ldr	r3, [r7, #20]
 8013f3c:	68da      	ldr	r2, [r3, #12]
 8013f3e:	69bb      	ldr	r3, [r7, #24]
 8013f40:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8013f42:	4b32      	ldr	r3, [pc, #200]	; (801400c <tcp_input+0x548>)
 8013f44:	681a      	ldr	r2, [r3, #0]
 8013f46:	697b      	ldr	r3, [r7, #20]
 8013f48:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8013f4a:	4a30      	ldr	r2, [pc, #192]	; (801400c <tcp_input+0x548>)
 8013f4c:	697b      	ldr	r3, [r7, #20]
 8013f4e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8013f50:	6978      	ldr	r0, [r7, #20]
 8013f52:	f000 fa01 	bl	8014358 <tcp_listen_input>
      }
      pbuf_free(p);
 8013f56:	6878      	ldr	r0, [r7, #4]
 8013f58:	f7fd fc6e 	bl	8011838 <pbuf_free>
      return;
 8013f5c:	e19b      	b.n	8014296 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8013f5e:	69fb      	ldr	r3, [r7, #28]
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	f000 8160 	beq.w	8014226 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8013f66:	4b2a      	ldr	r3, [pc, #168]	; (8014010 <tcp_input+0x54c>)
 8013f68:	2200      	movs	r2, #0
 8013f6a:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	891a      	ldrh	r2, [r3, #8]
 8013f70:	4b27      	ldr	r3, [pc, #156]	; (8014010 <tcp_input+0x54c>)
 8013f72:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8013f74:	4a26      	ldr	r2, [pc, #152]	; (8014010 <tcp_input+0x54c>)
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8013f7a:	4b1b      	ldr	r3, [pc, #108]	; (8013fe8 <tcp_input+0x524>)
 8013f7c:	681b      	ldr	r3, [r3, #0]
 8013f7e:	4a24      	ldr	r2, [pc, #144]	; (8014010 <tcp_input+0x54c>)
 8013f80:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8013f82:	4b24      	ldr	r3, [pc, #144]	; (8014014 <tcp_input+0x550>)
 8013f84:	2200      	movs	r2, #0
 8013f86:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8013f88:	4b23      	ldr	r3, [pc, #140]	; (8014018 <tcp_input+0x554>)
 8013f8a:	2200      	movs	r2, #0
 8013f8c:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8013f8e:	4b23      	ldr	r3, [pc, #140]	; (801401c <tcp_input+0x558>)
 8013f90:	2200      	movs	r2, #0
 8013f92:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8013f94:	4b22      	ldr	r3, [pc, #136]	; (8014020 <tcp_input+0x55c>)
 8013f96:	781b      	ldrb	r3, [r3, #0]
 8013f98:	f003 0308 	and.w	r3, r3, #8
 8013f9c:	2b00      	cmp	r3, #0
 8013f9e:	d006      	beq.n	8013fae <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	7b5b      	ldrb	r3, [r3, #13]
 8013fa4:	f043 0301 	orr.w	r3, r3, #1
 8013fa8:	b2da      	uxtb	r2, r3
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8013fae:	69fb      	ldr	r3, [r7, #28]
 8013fb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013fb2:	2b00      	cmp	r3, #0
 8013fb4:	d038      	beq.n	8014028 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8013fb6:	69f8      	ldr	r0, [r7, #28]
 8013fb8:	f7ff f852 	bl	8013060 <tcp_process_refused_data>
 8013fbc:	4603      	mov	r3, r0
 8013fbe:	f113 0f0d 	cmn.w	r3, #13
 8013fc2:	d007      	beq.n	8013fd4 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8013fc4:	69fb      	ldr	r3, [r7, #28]
 8013fc6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	d02d      	beq.n	8014028 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8013fcc:	4b15      	ldr	r3, [pc, #84]	; (8014024 <tcp_input+0x560>)
 8013fce:	881b      	ldrh	r3, [r3, #0]
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	d029      	beq.n	8014028 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8013fd4:	69fb      	ldr	r3, [r7, #28]
 8013fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	f040 8104 	bne.w	80141e6 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8013fde:	69f8      	ldr	r0, [r7, #28]
 8013fe0:	f003 fe16 	bl	8017c10 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8013fe4:	e0ff      	b.n	80141e6 <tcp_input+0x722>
 8013fe6:	bf00      	nop
 8013fe8:	20004710 	.word	0x20004710
 8013fec:	20007f08 	.word	0x20007f08
 8013ff0:	080207d8 	.word	0x080207d8
 8013ff4:	08020904 	.word	0x08020904
 8013ff8:	08020824 	.word	0x08020824
 8013ffc:	2000b61c 	.word	0x2000b61c
 8014000:	08020930 	.word	0x08020930
 8014004:	2000b62c 	.word	0x2000b62c
 8014008:	0802095c 	.word	0x0802095c
 801400c:	2000b624 	.word	0x2000b624
 8014010:	20004700 	.word	0x20004700
 8014014:	20004730 	.word	0x20004730
 8014018:	2000472d 	.word	0x2000472d
 801401c:	20004728 	.word	0x20004728
 8014020:	2000472c 	.word	0x2000472c
 8014024:	2000472a 	.word	0x2000472a
      }
    }
    tcp_input_pcb = pcb;
 8014028:	4a9c      	ldr	r2, [pc, #624]	; (801429c <tcp_input+0x7d8>)
 801402a:	69fb      	ldr	r3, [r7, #28]
 801402c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801402e:	69f8      	ldr	r0, [r7, #28]
 8014030:	f000 fb0a 	bl	8014648 <tcp_process>
 8014034:	4603      	mov	r3, r0
 8014036:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8014038:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801403c:	f113 0f0d 	cmn.w	r3, #13
 8014040:	f000 80d3 	beq.w	80141ea <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8014044:	4b96      	ldr	r3, [pc, #600]	; (80142a0 <tcp_input+0x7dc>)
 8014046:	781b      	ldrb	r3, [r3, #0]
 8014048:	f003 0308 	and.w	r3, r3, #8
 801404c:	2b00      	cmp	r3, #0
 801404e:	d015      	beq.n	801407c <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8014050:	69fb      	ldr	r3, [r7, #28]
 8014052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014056:	2b00      	cmp	r3, #0
 8014058:	d008      	beq.n	801406c <tcp_input+0x5a8>
 801405a:	69fb      	ldr	r3, [r7, #28]
 801405c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014060:	69fa      	ldr	r2, [r7, #28]
 8014062:	6912      	ldr	r2, [r2, #16]
 8014064:	f06f 010d 	mvn.w	r1, #13
 8014068:	4610      	mov	r0, r2
 801406a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801406c:	69f9      	ldr	r1, [r7, #28]
 801406e:	488d      	ldr	r0, [pc, #564]	; (80142a4 <tcp_input+0x7e0>)
 8014070:	f7ff fbb0 	bl	80137d4 <tcp_pcb_remove>
        tcp_free(pcb);
 8014074:	69f8      	ldr	r0, [r7, #28]
 8014076:	f7fd fe9b 	bl	8011db0 <tcp_free>
 801407a:	e0c1      	b.n	8014200 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 801407c:	2300      	movs	r3, #0
 801407e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8014080:	4b89      	ldr	r3, [pc, #548]	; (80142a8 <tcp_input+0x7e4>)
 8014082:	881b      	ldrh	r3, [r3, #0]
 8014084:	2b00      	cmp	r3, #0
 8014086:	d01d      	beq.n	80140c4 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8014088:	4b87      	ldr	r3, [pc, #540]	; (80142a8 <tcp_input+0x7e4>)
 801408a:	881b      	ldrh	r3, [r3, #0]
 801408c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801408e:	69fb      	ldr	r3, [r7, #28]
 8014090:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014094:	2b00      	cmp	r3, #0
 8014096:	d00a      	beq.n	80140ae <tcp_input+0x5ea>
 8014098:	69fb      	ldr	r3, [r7, #28]
 801409a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801409e:	69fa      	ldr	r2, [r7, #28]
 80140a0:	6910      	ldr	r0, [r2, #16]
 80140a2:	89fa      	ldrh	r2, [r7, #14]
 80140a4:	69f9      	ldr	r1, [r7, #28]
 80140a6:	4798      	blx	r3
 80140a8:	4603      	mov	r3, r0
 80140aa:	74fb      	strb	r3, [r7, #19]
 80140ac:	e001      	b.n	80140b2 <tcp_input+0x5ee>
 80140ae:	2300      	movs	r3, #0
 80140b0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80140b2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80140b6:	f113 0f0d 	cmn.w	r3, #13
 80140ba:	f000 8098 	beq.w	80141ee <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 80140be:	4b7a      	ldr	r3, [pc, #488]	; (80142a8 <tcp_input+0x7e4>)
 80140c0:	2200      	movs	r2, #0
 80140c2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80140c4:	69f8      	ldr	r0, [r7, #28]
 80140c6:	f000 f907 	bl	80142d8 <tcp_input_delayed_close>
 80140ca:	4603      	mov	r3, r0
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	f040 8090 	bne.w	80141f2 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80140d2:	4b76      	ldr	r3, [pc, #472]	; (80142ac <tcp_input+0x7e8>)
 80140d4:	681b      	ldr	r3, [r3, #0]
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	d041      	beq.n	801415e <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80140da:	69fb      	ldr	r3, [r7, #28]
 80140dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d006      	beq.n	80140f0 <tcp_input+0x62c>
 80140e2:	4b73      	ldr	r3, [pc, #460]	; (80142b0 <tcp_input+0x7ec>)
 80140e4:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80140e8:	4972      	ldr	r1, [pc, #456]	; (80142b4 <tcp_input+0x7f0>)
 80140ea:	4873      	ldr	r0, [pc, #460]	; (80142b8 <tcp_input+0x7f4>)
 80140ec:	f008 faf8 	bl	801c6e0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80140f0:	69fb      	ldr	r3, [r7, #28]
 80140f2:	8b5b      	ldrh	r3, [r3, #26]
 80140f4:	f003 0310 	and.w	r3, r3, #16
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	d008      	beq.n	801410e <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80140fc:	4b6b      	ldr	r3, [pc, #428]	; (80142ac <tcp_input+0x7e8>)
 80140fe:	681b      	ldr	r3, [r3, #0]
 8014100:	4618      	mov	r0, r3
 8014102:	f7fd fb99 	bl	8011838 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8014106:	69f8      	ldr	r0, [r7, #28]
 8014108:	f7fe f996 	bl	8012438 <tcp_abort>
            goto aborted;
 801410c:	e078      	b.n	8014200 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801410e:	69fb      	ldr	r3, [r7, #28]
 8014110:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014114:	2b00      	cmp	r3, #0
 8014116:	d00c      	beq.n	8014132 <tcp_input+0x66e>
 8014118:	69fb      	ldr	r3, [r7, #28]
 801411a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801411e:	69fb      	ldr	r3, [r7, #28]
 8014120:	6918      	ldr	r0, [r3, #16]
 8014122:	4b62      	ldr	r3, [pc, #392]	; (80142ac <tcp_input+0x7e8>)
 8014124:	681a      	ldr	r2, [r3, #0]
 8014126:	2300      	movs	r3, #0
 8014128:	69f9      	ldr	r1, [r7, #28]
 801412a:	47a0      	blx	r4
 801412c:	4603      	mov	r3, r0
 801412e:	74fb      	strb	r3, [r7, #19]
 8014130:	e008      	b.n	8014144 <tcp_input+0x680>
 8014132:	4b5e      	ldr	r3, [pc, #376]	; (80142ac <tcp_input+0x7e8>)
 8014134:	681a      	ldr	r2, [r3, #0]
 8014136:	2300      	movs	r3, #0
 8014138:	69f9      	ldr	r1, [r7, #28]
 801413a:	2000      	movs	r0, #0
 801413c:	f7ff f884 	bl	8013248 <tcp_recv_null>
 8014140:	4603      	mov	r3, r0
 8014142:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8014144:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014148:	f113 0f0d 	cmn.w	r3, #13
 801414c:	d053      	beq.n	80141f6 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801414e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014152:	2b00      	cmp	r3, #0
 8014154:	d003      	beq.n	801415e <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8014156:	4b55      	ldr	r3, [pc, #340]	; (80142ac <tcp_input+0x7e8>)
 8014158:	681a      	ldr	r2, [r3, #0]
 801415a:	69fb      	ldr	r3, [r7, #28]
 801415c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801415e:	4b50      	ldr	r3, [pc, #320]	; (80142a0 <tcp_input+0x7dc>)
 8014160:	781b      	ldrb	r3, [r3, #0]
 8014162:	f003 0320 	and.w	r3, r3, #32
 8014166:	2b00      	cmp	r3, #0
 8014168:	d030      	beq.n	80141cc <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 801416a:	69fb      	ldr	r3, [r7, #28]
 801416c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801416e:	2b00      	cmp	r3, #0
 8014170:	d009      	beq.n	8014186 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8014172:	69fb      	ldr	r3, [r7, #28]
 8014174:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014176:	7b5a      	ldrb	r2, [r3, #13]
 8014178:	69fb      	ldr	r3, [r7, #28]
 801417a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801417c:	f042 0220 	orr.w	r2, r2, #32
 8014180:	b2d2      	uxtb	r2, r2
 8014182:	735a      	strb	r2, [r3, #13]
 8014184:	e022      	b.n	80141cc <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8014186:	69fb      	ldr	r3, [r7, #28]
 8014188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801418a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801418e:	d005      	beq.n	801419c <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8014190:	69fb      	ldr	r3, [r7, #28]
 8014192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014194:	3301      	adds	r3, #1
 8014196:	b29a      	uxth	r2, r3
 8014198:	69fb      	ldr	r3, [r7, #28]
 801419a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 801419c:	69fb      	ldr	r3, [r7, #28]
 801419e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	d00b      	beq.n	80141be <tcp_input+0x6fa>
 80141a6:	69fb      	ldr	r3, [r7, #28]
 80141a8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80141ac:	69fb      	ldr	r3, [r7, #28]
 80141ae:	6918      	ldr	r0, [r3, #16]
 80141b0:	2300      	movs	r3, #0
 80141b2:	2200      	movs	r2, #0
 80141b4:	69f9      	ldr	r1, [r7, #28]
 80141b6:	47a0      	blx	r4
 80141b8:	4603      	mov	r3, r0
 80141ba:	74fb      	strb	r3, [r7, #19]
 80141bc:	e001      	b.n	80141c2 <tcp_input+0x6fe>
 80141be:	2300      	movs	r3, #0
 80141c0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80141c2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80141c6:	f113 0f0d 	cmn.w	r3, #13
 80141ca:	d016      	beq.n	80141fa <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80141cc:	4b33      	ldr	r3, [pc, #204]	; (801429c <tcp_input+0x7d8>)
 80141ce:	2200      	movs	r2, #0
 80141d0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80141d2:	69f8      	ldr	r0, [r7, #28]
 80141d4:	f000 f880 	bl	80142d8 <tcp_input_delayed_close>
 80141d8:	4603      	mov	r3, r0
 80141da:	2b00      	cmp	r3, #0
 80141dc:	d10f      	bne.n	80141fe <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80141de:	69f8      	ldr	r0, [r7, #28]
 80141e0:	f002 ff10 	bl	8017004 <tcp_output>
 80141e4:	e00c      	b.n	8014200 <tcp_input+0x73c>
        goto aborted;
 80141e6:	bf00      	nop
 80141e8:	e00a      	b.n	8014200 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80141ea:	bf00      	nop
 80141ec:	e008      	b.n	8014200 <tcp_input+0x73c>
              goto aborted;
 80141ee:	bf00      	nop
 80141f0:	e006      	b.n	8014200 <tcp_input+0x73c>
          goto aborted;
 80141f2:	bf00      	nop
 80141f4:	e004      	b.n	8014200 <tcp_input+0x73c>
            goto aborted;
 80141f6:	bf00      	nop
 80141f8:	e002      	b.n	8014200 <tcp_input+0x73c>
              goto aborted;
 80141fa:	bf00      	nop
 80141fc:	e000      	b.n	8014200 <tcp_input+0x73c>
          goto aborted;
 80141fe:	bf00      	nop
    tcp_input_pcb = NULL;
 8014200:	4b26      	ldr	r3, [pc, #152]	; (801429c <tcp_input+0x7d8>)
 8014202:	2200      	movs	r2, #0
 8014204:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8014206:	4b29      	ldr	r3, [pc, #164]	; (80142ac <tcp_input+0x7e8>)
 8014208:	2200      	movs	r2, #0
 801420a:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801420c:	4b2b      	ldr	r3, [pc, #172]	; (80142bc <tcp_input+0x7f8>)
 801420e:	685b      	ldr	r3, [r3, #4]
 8014210:	2b00      	cmp	r3, #0
 8014212:	d03f      	beq.n	8014294 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8014214:	4b29      	ldr	r3, [pc, #164]	; (80142bc <tcp_input+0x7f8>)
 8014216:	685b      	ldr	r3, [r3, #4]
 8014218:	4618      	mov	r0, r3
 801421a:	f7fd fb0d 	bl	8011838 <pbuf_free>
      inseg.p = NULL;
 801421e:	4b27      	ldr	r3, [pc, #156]	; (80142bc <tcp_input+0x7f8>)
 8014220:	2200      	movs	r2, #0
 8014222:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8014224:	e036      	b.n	8014294 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8014226:	4b26      	ldr	r3, [pc, #152]	; (80142c0 <tcp_input+0x7fc>)
 8014228:	681b      	ldr	r3, [r3, #0]
 801422a:	899b      	ldrh	r3, [r3, #12]
 801422c:	b29b      	uxth	r3, r3
 801422e:	4618      	mov	r0, r3
 8014230:	f7fb ff46 	bl	80100c0 <lwip_htons>
 8014234:	4603      	mov	r3, r0
 8014236:	b2db      	uxtb	r3, r3
 8014238:	f003 0304 	and.w	r3, r3, #4
 801423c:	2b00      	cmp	r3, #0
 801423e:	d118      	bne.n	8014272 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014240:	4b20      	ldr	r3, [pc, #128]	; (80142c4 <tcp_input+0x800>)
 8014242:	6819      	ldr	r1, [r3, #0]
 8014244:	4b20      	ldr	r3, [pc, #128]	; (80142c8 <tcp_input+0x804>)
 8014246:	881b      	ldrh	r3, [r3, #0]
 8014248:	461a      	mov	r2, r3
 801424a:	4b20      	ldr	r3, [pc, #128]	; (80142cc <tcp_input+0x808>)
 801424c:	681b      	ldr	r3, [r3, #0]
 801424e:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014250:	4b1b      	ldr	r3, [pc, #108]	; (80142c0 <tcp_input+0x7fc>)
 8014252:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014254:	885b      	ldrh	r3, [r3, #2]
 8014256:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014258:	4a19      	ldr	r2, [pc, #100]	; (80142c0 <tcp_input+0x7fc>)
 801425a:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801425c:	8812      	ldrh	r2, [r2, #0]
 801425e:	b292      	uxth	r2, r2
 8014260:	9202      	str	r2, [sp, #8]
 8014262:	9301      	str	r3, [sp, #4]
 8014264:	4b1a      	ldr	r3, [pc, #104]	; (80142d0 <tcp_input+0x80c>)
 8014266:	9300      	str	r3, [sp, #0]
 8014268:	4b1a      	ldr	r3, [pc, #104]	; (80142d4 <tcp_input+0x810>)
 801426a:	4602      	mov	r2, r0
 801426c:	2000      	movs	r0, #0
 801426e:	f003 fc7d 	bl	8017b6c <tcp_rst>
    pbuf_free(p);
 8014272:	6878      	ldr	r0, [r7, #4]
 8014274:	f7fd fae0 	bl	8011838 <pbuf_free>
  return;
 8014278:	e00c      	b.n	8014294 <tcp_input+0x7d0>
    goto dropped;
 801427a:	bf00      	nop
 801427c:	e006      	b.n	801428c <tcp_input+0x7c8>
    goto dropped;
 801427e:	bf00      	nop
 8014280:	e004      	b.n	801428c <tcp_input+0x7c8>
    goto dropped;
 8014282:	bf00      	nop
 8014284:	e002      	b.n	801428c <tcp_input+0x7c8>
      goto dropped;
 8014286:	bf00      	nop
 8014288:	e000      	b.n	801428c <tcp_input+0x7c8>
      goto dropped;
 801428a:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801428c:	6878      	ldr	r0, [r7, #4]
 801428e:	f7fd fad3 	bl	8011838 <pbuf_free>
 8014292:	e000      	b.n	8014296 <tcp_input+0x7d2>
  return;
 8014294:	bf00      	nop
}
 8014296:	3724      	adds	r7, #36	; 0x24
 8014298:	46bd      	mov	sp, r7
 801429a:	bd90      	pop	{r4, r7, pc}
 801429c:	2000b630 	.word	0x2000b630
 80142a0:	2000472d 	.word	0x2000472d
 80142a4:	2000b61c 	.word	0x2000b61c
 80142a8:	20004728 	.word	0x20004728
 80142ac:	20004730 	.word	0x20004730
 80142b0:	080207d8 	.word	0x080207d8
 80142b4:	0802098c 	.word	0x0802098c
 80142b8:	08020824 	.word	0x08020824
 80142bc:	20004700 	.word	0x20004700
 80142c0:	20004710 	.word	0x20004710
 80142c4:	20004724 	.word	0x20004724
 80142c8:	2000472a 	.word	0x2000472a
 80142cc:	20004720 	.word	0x20004720
 80142d0:	20007f18 	.word	0x20007f18
 80142d4:	20007f1c 	.word	0x20007f1c

080142d8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80142d8:	b580      	push	{r7, lr}
 80142da:	b082      	sub	sp, #8
 80142dc:	af00      	add	r7, sp, #0
 80142de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	2b00      	cmp	r3, #0
 80142e4:	d106      	bne.n	80142f4 <tcp_input_delayed_close+0x1c>
 80142e6:	4b17      	ldr	r3, [pc, #92]	; (8014344 <tcp_input_delayed_close+0x6c>)
 80142e8:	f240 225a 	movw	r2, #602	; 0x25a
 80142ec:	4916      	ldr	r1, [pc, #88]	; (8014348 <tcp_input_delayed_close+0x70>)
 80142ee:	4817      	ldr	r0, [pc, #92]	; (801434c <tcp_input_delayed_close+0x74>)
 80142f0:	f008 f9f6 	bl	801c6e0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80142f4:	4b16      	ldr	r3, [pc, #88]	; (8014350 <tcp_input_delayed_close+0x78>)
 80142f6:	781b      	ldrb	r3, [r3, #0]
 80142f8:	f003 0310 	and.w	r3, r3, #16
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	d01c      	beq.n	801433a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	8b5b      	ldrh	r3, [r3, #26]
 8014304:	f003 0310 	and.w	r3, r3, #16
 8014308:	2b00      	cmp	r3, #0
 801430a:	d10d      	bne.n	8014328 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014312:	2b00      	cmp	r3, #0
 8014314:	d008      	beq.n	8014328 <tcp_input_delayed_close+0x50>
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801431c:	687a      	ldr	r2, [r7, #4]
 801431e:	6912      	ldr	r2, [r2, #16]
 8014320:	f06f 010e 	mvn.w	r1, #14
 8014324:	4610      	mov	r0, r2
 8014326:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8014328:	6879      	ldr	r1, [r7, #4]
 801432a:	480a      	ldr	r0, [pc, #40]	; (8014354 <tcp_input_delayed_close+0x7c>)
 801432c:	f7ff fa52 	bl	80137d4 <tcp_pcb_remove>
    tcp_free(pcb);
 8014330:	6878      	ldr	r0, [r7, #4]
 8014332:	f7fd fd3d 	bl	8011db0 <tcp_free>
    return 1;
 8014336:	2301      	movs	r3, #1
 8014338:	e000      	b.n	801433c <tcp_input_delayed_close+0x64>
  }
  return 0;
 801433a:	2300      	movs	r3, #0
}
 801433c:	4618      	mov	r0, r3
 801433e:	3708      	adds	r7, #8
 8014340:	46bd      	mov	sp, r7
 8014342:	bd80      	pop	{r7, pc}
 8014344:	080207d8 	.word	0x080207d8
 8014348:	080209a8 	.word	0x080209a8
 801434c:	08020824 	.word	0x08020824
 8014350:	2000472d 	.word	0x2000472d
 8014354:	2000b61c 	.word	0x2000b61c

08014358 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8014358:	b590      	push	{r4, r7, lr}
 801435a:	b08b      	sub	sp, #44	; 0x2c
 801435c:	af04      	add	r7, sp, #16
 801435e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8014360:	4b6f      	ldr	r3, [pc, #444]	; (8014520 <tcp_listen_input+0x1c8>)
 8014362:	781b      	ldrb	r3, [r3, #0]
 8014364:	f003 0304 	and.w	r3, r3, #4
 8014368:	2b00      	cmp	r3, #0
 801436a:	f040 80d2 	bne.w	8014512 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	2b00      	cmp	r3, #0
 8014372:	d106      	bne.n	8014382 <tcp_listen_input+0x2a>
 8014374:	4b6b      	ldr	r3, [pc, #428]	; (8014524 <tcp_listen_input+0x1cc>)
 8014376:	f240 2281 	movw	r2, #641	; 0x281
 801437a:	496b      	ldr	r1, [pc, #428]	; (8014528 <tcp_listen_input+0x1d0>)
 801437c:	486b      	ldr	r0, [pc, #428]	; (801452c <tcp_listen_input+0x1d4>)
 801437e:	f008 f9af 	bl	801c6e0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8014382:	4b67      	ldr	r3, [pc, #412]	; (8014520 <tcp_listen_input+0x1c8>)
 8014384:	781b      	ldrb	r3, [r3, #0]
 8014386:	f003 0310 	and.w	r3, r3, #16
 801438a:	2b00      	cmp	r3, #0
 801438c:	d019      	beq.n	80143c2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801438e:	4b68      	ldr	r3, [pc, #416]	; (8014530 <tcp_listen_input+0x1d8>)
 8014390:	6819      	ldr	r1, [r3, #0]
 8014392:	4b68      	ldr	r3, [pc, #416]	; (8014534 <tcp_listen_input+0x1dc>)
 8014394:	881b      	ldrh	r3, [r3, #0]
 8014396:	461a      	mov	r2, r3
 8014398:	4b67      	ldr	r3, [pc, #412]	; (8014538 <tcp_listen_input+0x1e0>)
 801439a:	681b      	ldr	r3, [r3, #0]
 801439c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801439e:	4b67      	ldr	r3, [pc, #412]	; (801453c <tcp_listen_input+0x1e4>)
 80143a0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80143a2:	885b      	ldrh	r3, [r3, #2]
 80143a4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80143a6:	4a65      	ldr	r2, [pc, #404]	; (801453c <tcp_listen_input+0x1e4>)
 80143a8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80143aa:	8812      	ldrh	r2, [r2, #0]
 80143ac:	b292      	uxth	r2, r2
 80143ae:	9202      	str	r2, [sp, #8]
 80143b0:	9301      	str	r3, [sp, #4]
 80143b2:	4b63      	ldr	r3, [pc, #396]	; (8014540 <tcp_listen_input+0x1e8>)
 80143b4:	9300      	str	r3, [sp, #0]
 80143b6:	4b63      	ldr	r3, [pc, #396]	; (8014544 <tcp_listen_input+0x1ec>)
 80143b8:	4602      	mov	r2, r0
 80143ba:	6878      	ldr	r0, [r7, #4]
 80143bc:	f003 fbd6 	bl	8017b6c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80143c0:	e0a9      	b.n	8014516 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80143c2:	4b57      	ldr	r3, [pc, #348]	; (8014520 <tcp_listen_input+0x1c8>)
 80143c4:	781b      	ldrb	r3, [r3, #0]
 80143c6:	f003 0302 	and.w	r3, r3, #2
 80143ca:	2b00      	cmp	r3, #0
 80143cc:	f000 80a3 	beq.w	8014516 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	7d5b      	ldrb	r3, [r3, #21]
 80143d4:	4618      	mov	r0, r3
 80143d6:	f7ff f85b 	bl	8013490 <tcp_alloc>
 80143da:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80143dc:	697b      	ldr	r3, [r7, #20]
 80143de:	2b00      	cmp	r3, #0
 80143e0:	d111      	bne.n	8014406 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	699b      	ldr	r3, [r3, #24]
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	d00a      	beq.n	8014400 <tcp_listen_input+0xa8>
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	699b      	ldr	r3, [r3, #24]
 80143ee:	687a      	ldr	r2, [r7, #4]
 80143f0:	6910      	ldr	r0, [r2, #16]
 80143f2:	f04f 32ff 	mov.w	r2, #4294967295
 80143f6:	2100      	movs	r1, #0
 80143f8:	4798      	blx	r3
 80143fa:	4603      	mov	r3, r0
 80143fc:	73bb      	strb	r3, [r7, #14]
      return;
 80143fe:	e08b      	b.n	8014518 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8014400:	23f0      	movs	r3, #240	; 0xf0
 8014402:	73bb      	strb	r3, [r7, #14]
      return;
 8014404:	e088      	b.n	8014518 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8014406:	4b50      	ldr	r3, [pc, #320]	; (8014548 <tcp_listen_input+0x1f0>)
 8014408:	695a      	ldr	r2, [r3, #20]
 801440a:	697b      	ldr	r3, [r7, #20]
 801440c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801440e:	4b4e      	ldr	r3, [pc, #312]	; (8014548 <tcp_listen_input+0x1f0>)
 8014410:	691a      	ldr	r2, [r3, #16]
 8014412:	697b      	ldr	r3, [r7, #20]
 8014414:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	8ada      	ldrh	r2, [r3, #22]
 801441a:	697b      	ldr	r3, [r7, #20]
 801441c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801441e:	4b47      	ldr	r3, [pc, #284]	; (801453c <tcp_listen_input+0x1e4>)
 8014420:	681b      	ldr	r3, [r3, #0]
 8014422:	881b      	ldrh	r3, [r3, #0]
 8014424:	b29a      	uxth	r2, r3
 8014426:	697b      	ldr	r3, [r7, #20]
 8014428:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801442a:	697b      	ldr	r3, [r7, #20]
 801442c:	2203      	movs	r2, #3
 801442e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8014430:	4b41      	ldr	r3, [pc, #260]	; (8014538 <tcp_listen_input+0x1e0>)
 8014432:	681b      	ldr	r3, [r3, #0]
 8014434:	1c5a      	adds	r2, r3, #1
 8014436:	697b      	ldr	r3, [r7, #20]
 8014438:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801443a:	697b      	ldr	r3, [r7, #20]
 801443c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801443e:	697b      	ldr	r3, [r7, #20]
 8014440:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8014442:	6978      	ldr	r0, [r7, #20]
 8014444:	f7ff fa5a 	bl	80138fc <tcp_next_iss>
 8014448:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801444a:	697b      	ldr	r3, [r7, #20]
 801444c:	693a      	ldr	r2, [r7, #16]
 801444e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8014450:	697b      	ldr	r3, [r7, #20]
 8014452:	693a      	ldr	r2, [r7, #16]
 8014454:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8014456:	697b      	ldr	r3, [r7, #20]
 8014458:	693a      	ldr	r2, [r7, #16]
 801445a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 801445c:	697b      	ldr	r3, [r7, #20]
 801445e:	693a      	ldr	r2, [r7, #16]
 8014460:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8014462:	4b35      	ldr	r3, [pc, #212]	; (8014538 <tcp_listen_input+0x1e0>)
 8014464:	681b      	ldr	r3, [r3, #0]
 8014466:	1e5a      	subs	r2, r3, #1
 8014468:	697b      	ldr	r3, [r7, #20]
 801446a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	691a      	ldr	r2, [r3, #16]
 8014470:	697b      	ldr	r3, [r7, #20]
 8014472:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8014474:	697b      	ldr	r3, [r7, #20]
 8014476:	687a      	ldr	r2, [r7, #4]
 8014478:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	7a5b      	ldrb	r3, [r3, #9]
 801447e:	f003 030c 	and.w	r3, r3, #12
 8014482:	b2da      	uxtb	r2, r3
 8014484:	697b      	ldr	r3, [r7, #20]
 8014486:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	7a1a      	ldrb	r2, [r3, #8]
 801448c:	697b      	ldr	r3, [r7, #20]
 801448e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8014490:	4b2e      	ldr	r3, [pc, #184]	; (801454c <tcp_listen_input+0x1f4>)
 8014492:	681a      	ldr	r2, [r3, #0]
 8014494:	697b      	ldr	r3, [r7, #20]
 8014496:	60da      	str	r2, [r3, #12]
 8014498:	4a2c      	ldr	r2, [pc, #176]	; (801454c <tcp_listen_input+0x1f4>)
 801449a:	697b      	ldr	r3, [r7, #20]
 801449c:	6013      	str	r3, [r2, #0]
 801449e:	f003 fd27 	bl	8017ef0 <tcp_timer_needed>
 80144a2:	4b2b      	ldr	r3, [pc, #172]	; (8014550 <tcp_listen_input+0x1f8>)
 80144a4:	2201      	movs	r2, #1
 80144a6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80144a8:	6978      	ldr	r0, [r7, #20]
 80144aa:	f001 fd8d 	bl	8015fc8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80144ae:	4b23      	ldr	r3, [pc, #140]	; (801453c <tcp_listen_input+0x1e4>)
 80144b0:	681b      	ldr	r3, [r3, #0]
 80144b2:	89db      	ldrh	r3, [r3, #14]
 80144b4:	b29a      	uxth	r2, r3
 80144b6:	697b      	ldr	r3, [r7, #20]
 80144b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80144bc:	697b      	ldr	r3, [r7, #20]
 80144be:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80144c2:	697b      	ldr	r3, [r7, #20]
 80144c4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80144c8:	697b      	ldr	r3, [r7, #20]
 80144ca:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80144cc:	697b      	ldr	r3, [r7, #20]
 80144ce:	3304      	adds	r3, #4
 80144d0:	4618      	mov	r0, r3
 80144d2:	f005 fc4b 	bl	8019d6c <ip4_route>
 80144d6:	4601      	mov	r1, r0
 80144d8:	697b      	ldr	r3, [r7, #20]
 80144da:	3304      	adds	r3, #4
 80144dc:	461a      	mov	r2, r3
 80144de:	4620      	mov	r0, r4
 80144e0:	f7ff fa32 	bl	8013948 <tcp_eff_send_mss_netif>
 80144e4:	4603      	mov	r3, r0
 80144e6:	461a      	mov	r2, r3
 80144e8:	697b      	ldr	r3, [r7, #20]
 80144ea:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80144ec:	2112      	movs	r1, #18
 80144ee:	6978      	ldr	r0, [r7, #20]
 80144f0:	f002 fc9a 	bl	8016e28 <tcp_enqueue_flags>
 80144f4:	4603      	mov	r3, r0
 80144f6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80144f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	d004      	beq.n	801450a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8014500:	2100      	movs	r1, #0
 8014502:	6978      	ldr	r0, [r7, #20]
 8014504:	f7fd feda 	bl	80122bc <tcp_abandon>
      return;
 8014508:	e006      	b.n	8014518 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801450a:	6978      	ldr	r0, [r7, #20]
 801450c:	f002 fd7a 	bl	8017004 <tcp_output>
  return;
 8014510:	e001      	b.n	8014516 <tcp_listen_input+0x1be>
    return;
 8014512:	bf00      	nop
 8014514:	e000      	b.n	8014518 <tcp_listen_input+0x1c0>
  return;
 8014516:	bf00      	nop
}
 8014518:	371c      	adds	r7, #28
 801451a:	46bd      	mov	sp, r7
 801451c:	bd90      	pop	{r4, r7, pc}
 801451e:	bf00      	nop
 8014520:	2000472c 	.word	0x2000472c
 8014524:	080207d8 	.word	0x080207d8
 8014528:	080209d0 	.word	0x080209d0
 801452c:	08020824 	.word	0x08020824
 8014530:	20004724 	.word	0x20004724
 8014534:	2000472a 	.word	0x2000472a
 8014538:	20004720 	.word	0x20004720
 801453c:	20004710 	.word	0x20004710
 8014540:	20007f18 	.word	0x20007f18
 8014544:	20007f1c 	.word	0x20007f1c
 8014548:	20007f08 	.word	0x20007f08
 801454c:	2000b61c 	.word	0x2000b61c
 8014550:	2000b618 	.word	0x2000b618

08014554 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8014554:	b580      	push	{r7, lr}
 8014556:	b086      	sub	sp, #24
 8014558:	af04      	add	r7, sp, #16
 801455a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 801455c:	4b2f      	ldr	r3, [pc, #188]	; (801461c <tcp_timewait_input+0xc8>)
 801455e:	781b      	ldrb	r3, [r3, #0]
 8014560:	f003 0304 	and.w	r3, r3, #4
 8014564:	2b00      	cmp	r3, #0
 8014566:	d153      	bne.n	8014610 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	2b00      	cmp	r3, #0
 801456c:	d106      	bne.n	801457c <tcp_timewait_input+0x28>
 801456e:	4b2c      	ldr	r3, [pc, #176]	; (8014620 <tcp_timewait_input+0xcc>)
 8014570:	f240 22ee 	movw	r2, #750	; 0x2ee
 8014574:	492b      	ldr	r1, [pc, #172]	; (8014624 <tcp_timewait_input+0xd0>)
 8014576:	482c      	ldr	r0, [pc, #176]	; (8014628 <tcp_timewait_input+0xd4>)
 8014578:	f008 f8b2 	bl	801c6e0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801457c:	4b27      	ldr	r3, [pc, #156]	; (801461c <tcp_timewait_input+0xc8>)
 801457e:	781b      	ldrb	r3, [r3, #0]
 8014580:	f003 0302 	and.w	r3, r3, #2
 8014584:	2b00      	cmp	r3, #0
 8014586:	d02a      	beq.n	80145de <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8014588:	4b28      	ldr	r3, [pc, #160]	; (801462c <tcp_timewait_input+0xd8>)
 801458a:	681a      	ldr	r2, [r3, #0]
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014590:	1ad3      	subs	r3, r2, r3
 8014592:	2b00      	cmp	r3, #0
 8014594:	db2d      	blt.n	80145f2 <tcp_timewait_input+0x9e>
 8014596:	4b25      	ldr	r3, [pc, #148]	; (801462c <tcp_timewait_input+0xd8>)
 8014598:	681a      	ldr	r2, [r3, #0]
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801459e:	6879      	ldr	r1, [r7, #4]
 80145a0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80145a2:	440b      	add	r3, r1
 80145a4:	1ad3      	subs	r3, r2, r3
 80145a6:	2b00      	cmp	r3, #0
 80145a8:	dc23      	bgt.n	80145f2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80145aa:	4b21      	ldr	r3, [pc, #132]	; (8014630 <tcp_timewait_input+0xdc>)
 80145ac:	6819      	ldr	r1, [r3, #0]
 80145ae:	4b21      	ldr	r3, [pc, #132]	; (8014634 <tcp_timewait_input+0xe0>)
 80145b0:	881b      	ldrh	r3, [r3, #0]
 80145b2:	461a      	mov	r2, r3
 80145b4:	4b1d      	ldr	r3, [pc, #116]	; (801462c <tcp_timewait_input+0xd8>)
 80145b6:	681b      	ldr	r3, [r3, #0]
 80145b8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80145ba:	4b1f      	ldr	r3, [pc, #124]	; (8014638 <tcp_timewait_input+0xe4>)
 80145bc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80145be:	885b      	ldrh	r3, [r3, #2]
 80145c0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80145c2:	4a1d      	ldr	r2, [pc, #116]	; (8014638 <tcp_timewait_input+0xe4>)
 80145c4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80145c6:	8812      	ldrh	r2, [r2, #0]
 80145c8:	b292      	uxth	r2, r2
 80145ca:	9202      	str	r2, [sp, #8]
 80145cc:	9301      	str	r3, [sp, #4]
 80145ce:	4b1b      	ldr	r3, [pc, #108]	; (801463c <tcp_timewait_input+0xe8>)
 80145d0:	9300      	str	r3, [sp, #0]
 80145d2:	4b1b      	ldr	r3, [pc, #108]	; (8014640 <tcp_timewait_input+0xec>)
 80145d4:	4602      	mov	r2, r0
 80145d6:	6878      	ldr	r0, [r7, #4]
 80145d8:	f003 fac8 	bl	8017b6c <tcp_rst>
      return;
 80145dc:	e01b      	b.n	8014616 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80145de:	4b0f      	ldr	r3, [pc, #60]	; (801461c <tcp_timewait_input+0xc8>)
 80145e0:	781b      	ldrb	r3, [r3, #0]
 80145e2:	f003 0301 	and.w	r3, r3, #1
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	d003      	beq.n	80145f2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80145ea:	4b16      	ldr	r3, [pc, #88]	; (8014644 <tcp_timewait_input+0xf0>)
 80145ec:	681a      	ldr	r2, [r3, #0]
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80145f2:	4b10      	ldr	r3, [pc, #64]	; (8014634 <tcp_timewait_input+0xe0>)
 80145f4:	881b      	ldrh	r3, [r3, #0]
 80145f6:	2b00      	cmp	r3, #0
 80145f8:	d00c      	beq.n	8014614 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	8b5b      	ldrh	r3, [r3, #26]
 80145fe:	f043 0302 	orr.w	r3, r3, #2
 8014602:	b29a      	uxth	r2, r3
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8014608:	6878      	ldr	r0, [r7, #4]
 801460a:	f002 fcfb 	bl	8017004 <tcp_output>
  }
  return;
 801460e:	e001      	b.n	8014614 <tcp_timewait_input+0xc0>
    return;
 8014610:	bf00      	nop
 8014612:	e000      	b.n	8014616 <tcp_timewait_input+0xc2>
  return;
 8014614:	bf00      	nop
}
 8014616:	3708      	adds	r7, #8
 8014618:	46bd      	mov	sp, r7
 801461a:	bd80      	pop	{r7, pc}
 801461c:	2000472c 	.word	0x2000472c
 8014620:	080207d8 	.word	0x080207d8
 8014624:	080209f0 	.word	0x080209f0
 8014628:	08020824 	.word	0x08020824
 801462c:	20004720 	.word	0x20004720
 8014630:	20004724 	.word	0x20004724
 8014634:	2000472a 	.word	0x2000472a
 8014638:	20004710 	.word	0x20004710
 801463c:	20007f18 	.word	0x20007f18
 8014640:	20007f1c 	.word	0x20007f1c
 8014644:	2000b620 	.word	0x2000b620

08014648 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8014648:	b590      	push	{r4, r7, lr}
 801464a:	b08d      	sub	sp, #52	; 0x34
 801464c:	af04      	add	r7, sp, #16
 801464e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8014650:	2300      	movs	r3, #0
 8014652:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8014654:	2300      	movs	r3, #0
 8014656:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	2b00      	cmp	r3, #0
 801465c:	d106      	bne.n	801466c <tcp_process+0x24>
 801465e:	4ba5      	ldr	r3, [pc, #660]	; (80148f4 <tcp_process+0x2ac>)
 8014660:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8014664:	49a4      	ldr	r1, [pc, #656]	; (80148f8 <tcp_process+0x2b0>)
 8014666:	48a5      	ldr	r0, [pc, #660]	; (80148fc <tcp_process+0x2b4>)
 8014668:	f008 f83a 	bl	801c6e0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801466c:	4ba4      	ldr	r3, [pc, #656]	; (8014900 <tcp_process+0x2b8>)
 801466e:	781b      	ldrb	r3, [r3, #0]
 8014670:	f003 0304 	and.w	r3, r3, #4
 8014674:	2b00      	cmp	r3, #0
 8014676:	d04e      	beq.n	8014716 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	7d1b      	ldrb	r3, [r3, #20]
 801467c:	2b02      	cmp	r3, #2
 801467e:	d108      	bne.n	8014692 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014684:	4b9f      	ldr	r3, [pc, #636]	; (8014904 <tcp_process+0x2bc>)
 8014686:	681b      	ldr	r3, [r3, #0]
 8014688:	429a      	cmp	r2, r3
 801468a:	d123      	bne.n	80146d4 <tcp_process+0x8c>
        acceptable = 1;
 801468c:	2301      	movs	r3, #1
 801468e:	76fb      	strb	r3, [r7, #27]
 8014690:	e020      	b.n	80146d4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014696:	4b9c      	ldr	r3, [pc, #624]	; (8014908 <tcp_process+0x2c0>)
 8014698:	681b      	ldr	r3, [r3, #0]
 801469a:	429a      	cmp	r2, r3
 801469c:	d102      	bne.n	80146a4 <tcp_process+0x5c>
        acceptable = 1;
 801469e:	2301      	movs	r3, #1
 80146a0:	76fb      	strb	r3, [r7, #27]
 80146a2:	e017      	b.n	80146d4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80146a4:	4b98      	ldr	r3, [pc, #608]	; (8014908 <tcp_process+0x2c0>)
 80146a6:	681a      	ldr	r2, [r3, #0]
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146ac:	1ad3      	subs	r3, r2, r3
 80146ae:	2b00      	cmp	r3, #0
 80146b0:	db10      	blt.n	80146d4 <tcp_process+0x8c>
 80146b2:	4b95      	ldr	r3, [pc, #596]	; (8014908 <tcp_process+0x2c0>)
 80146b4:	681a      	ldr	r2, [r3, #0]
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146ba:	6879      	ldr	r1, [r7, #4]
 80146bc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80146be:	440b      	add	r3, r1
 80146c0:	1ad3      	subs	r3, r2, r3
 80146c2:	2b00      	cmp	r3, #0
 80146c4:	dc06      	bgt.n	80146d4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	8b5b      	ldrh	r3, [r3, #26]
 80146ca:	f043 0302 	orr.w	r3, r3, #2
 80146ce:	b29a      	uxth	r2, r3
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80146d4:	7efb      	ldrb	r3, [r7, #27]
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	d01b      	beq.n	8014712 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	7d1b      	ldrb	r3, [r3, #20]
 80146de:	2b00      	cmp	r3, #0
 80146e0:	d106      	bne.n	80146f0 <tcp_process+0xa8>
 80146e2:	4b84      	ldr	r3, [pc, #528]	; (80148f4 <tcp_process+0x2ac>)
 80146e4:	f44f 724e 	mov.w	r2, #824	; 0x338
 80146e8:	4988      	ldr	r1, [pc, #544]	; (801490c <tcp_process+0x2c4>)
 80146ea:	4884      	ldr	r0, [pc, #528]	; (80148fc <tcp_process+0x2b4>)
 80146ec:	f007 fff8 	bl	801c6e0 <iprintf>
      recv_flags |= TF_RESET;
 80146f0:	4b87      	ldr	r3, [pc, #540]	; (8014910 <tcp_process+0x2c8>)
 80146f2:	781b      	ldrb	r3, [r3, #0]
 80146f4:	f043 0308 	orr.w	r3, r3, #8
 80146f8:	b2da      	uxtb	r2, r3
 80146fa:	4b85      	ldr	r3, [pc, #532]	; (8014910 <tcp_process+0x2c8>)
 80146fc:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80146fe:	687b      	ldr	r3, [r7, #4]
 8014700:	8b5b      	ldrh	r3, [r3, #26]
 8014702:	f023 0301 	bic.w	r3, r3, #1
 8014706:	b29a      	uxth	r2, r3
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 801470c:	f06f 030d 	mvn.w	r3, #13
 8014710:	e37a      	b.n	8014e08 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8014712:	2300      	movs	r3, #0
 8014714:	e378      	b.n	8014e08 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8014716:	4b7a      	ldr	r3, [pc, #488]	; (8014900 <tcp_process+0x2b8>)
 8014718:	781b      	ldrb	r3, [r3, #0]
 801471a:	f003 0302 	and.w	r3, r3, #2
 801471e:	2b00      	cmp	r3, #0
 8014720:	d010      	beq.n	8014744 <tcp_process+0xfc>
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	7d1b      	ldrb	r3, [r3, #20]
 8014726:	2b02      	cmp	r3, #2
 8014728:	d00c      	beq.n	8014744 <tcp_process+0xfc>
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	7d1b      	ldrb	r3, [r3, #20]
 801472e:	2b03      	cmp	r3, #3
 8014730:	d008      	beq.n	8014744 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	8b5b      	ldrh	r3, [r3, #26]
 8014736:	f043 0302 	orr.w	r3, r3, #2
 801473a:	b29a      	uxth	r2, r3
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8014740:	2300      	movs	r3, #0
 8014742:	e361      	b.n	8014e08 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	8b5b      	ldrh	r3, [r3, #26]
 8014748:	f003 0310 	and.w	r3, r3, #16
 801474c:	2b00      	cmp	r3, #0
 801474e:	d103      	bne.n	8014758 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8014750:	4b70      	ldr	r3, [pc, #448]	; (8014914 <tcp_process+0x2cc>)
 8014752:	681a      	ldr	r2, [r3, #0]
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8014758:	687b      	ldr	r3, [r7, #4]
 801475a:	2200      	movs	r2, #0
 801475c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	2200      	movs	r2, #0
 8014764:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8014768:	6878      	ldr	r0, [r7, #4]
 801476a:	f001 fc2d 	bl	8015fc8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	7d1b      	ldrb	r3, [r3, #20]
 8014772:	3b02      	subs	r3, #2
 8014774:	2b07      	cmp	r3, #7
 8014776:	f200 8337 	bhi.w	8014de8 <tcp_process+0x7a0>
 801477a:	a201      	add	r2, pc, #4	; (adr r2, 8014780 <tcp_process+0x138>)
 801477c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014780:	080147a1 	.word	0x080147a1
 8014784:	080149d1 	.word	0x080149d1
 8014788:	08014b49 	.word	0x08014b49
 801478c:	08014b73 	.word	0x08014b73
 8014790:	08014c97 	.word	0x08014c97
 8014794:	08014b49 	.word	0x08014b49
 8014798:	08014d23 	.word	0x08014d23
 801479c:	08014db3 	.word	0x08014db3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80147a0:	4b57      	ldr	r3, [pc, #348]	; (8014900 <tcp_process+0x2b8>)
 80147a2:	781b      	ldrb	r3, [r3, #0]
 80147a4:	f003 0310 	and.w	r3, r3, #16
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	f000 80e4 	beq.w	8014976 <tcp_process+0x32e>
 80147ae:	4b54      	ldr	r3, [pc, #336]	; (8014900 <tcp_process+0x2b8>)
 80147b0:	781b      	ldrb	r3, [r3, #0]
 80147b2:	f003 0302 	and.w	r3, r3, #2
 80147b6:	2b00      	cmp	r3, #0
 80147b8:	f000 80dd 	beq.w	8014976 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80147c0:	1c5a      	adds	r2, r3, #1
 80147c2:	4b50      	ldr	r3, [pc, #320]	; (8014904 <tcp_process+0x2bc>)
 80147c4:	681b      	ldr	r3, [r3, #0]
 80147c6:	429a      	cmp	r2, r3
 80147c8:	f040 80d5 	bne.w	8014976 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80147cc:	4b4e      	ldr	r3, [pc, #312]	; (8014908 <tcp_process+0x2c0>)
 80147ce:	681b      	ldr	r3, [r3, #0]
 80147d0:	1c5a      	adds	r2, r3, #1
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80147de:	4b49      	ldr	r3, [pc, #292]	; (8014904 <tcp_process+0x2bc>)
 80147e0:	681a      	ldr	r2, [r3, #0]
 80147e2:	687b      	ldr	r3, [r7, #4]
 80147e4:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80147e6:	4b4c      	ldr	r3, [pc, #304]	; (8014918 <tcp_process+0x2d0>)
 80147e8:	681b      	ldr	r3, [r3, #0]
 80147ea:	89db      	ldrh	r3, [r3, #14]
 80147ec:	b29a      	uxth	r2, r3
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8014800:	4b41      	ldr	r3, [pc, #260]	; (8014908 <tcp_process+0x2c0>)
 8014802:	681b      	ldr	r3, [r3, #0]
 8014804:	1e5a      	subs	r2, r3, #1
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	2204      	movs	r2, #4
 801480e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	3304      	adds	r3, #4
 8014818:	4618      	mov	r0, r3
 801481a:	f005 faa7 	bl	8019d6c <ip4_route>
 801481e:	4601      	mov	r1, r0
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	3304      	adds	r3, #4
 8014824:	461a      	mov	r2, r3
 8014826:	4620      	mov	r0, r4
 8014828:	f7ff f88e 	bl	8013948 <tcp_eff_send_mss_netif>
 801482c:	4603      	mov	r3, r0
 801482e:	461a      	mov	r2, r3
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014838:	009a      	lsls	r2, r3, #2
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801483e:	005b      	lsls	r3, r3, #1
 8014840:	f241 111c 	movw	r1, #4380	; 0x111c
 8014844:	428b      	cmp	r3, r1
 8014846:	bf38      	it	cc
 8014848:	460b      	movcc	r3, r1
 801484a:	429a      	cmp	r2, r3
 801484c:	d204      	bcs.n	8014858 <tcp_process+0x210>
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014852:	009b      	lsls	r3, r3, #2
 8014854:	b29b      	uxth	r3, r3
 8014856:	e00d      	b.n	8014874 <tcp_process+0x22c>
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801485c:	005b      	lsls	r3, r3, #1
 801485e:	f241 121c 	movw	r2, #4380	; 0x111c
 8014862:	4293      	cmp	r3, r2
 8014864:	d904      	bls.n	8014870 <tcp_process+0x228>
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801486a:	005b      	lsls	r3, r3, #1
 801486c:	b29b      	uxth	r3, r3
 801486e:	e001      	b.n	8014874 <tcp_process+0x22c>
 8014870:	f241 131c 	movw	r3, #4380	; 0x111c
 8014874:	687a      	ldr	r2, [r7, #4]
 8014876:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014880:	2b00      	cmp	r3, #0
 8014882:	d106      	bne.n	8014892 <tcp_process+0x24a>
 8014884:	4b1b      	ldr	r3, [pc, #108]	; (80148f4 <tcp_process+0x2ac>)
 8014886:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801488a:	4924      	ldr	r1, [pc, #144]	; (801491c <tcp_process+0x2d4>)
 801488c:	481b      	ldr	r0, [pc, #108]	; (80148fc <tcp_process+0x2b4>)
 801488e:	f007 ff27 	bl	801c6e0 <iprintf>
        --pcb->snd_queuelen;
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014898:	3b01      	subs	r3, #1
 801489a:	b29a      	uxth	r2, r3
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80148a6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80148a8:	69fb      	ldr	r3, [r7, #28]
 80148aa:	2b00      	cmp	r3, #0
 80148ac:	d111      	bne.n	80148d2 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80148b2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80148b4:	69fb      	ldr	r3, [r7, #28]
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	d106      	bne.n	80148c8 <tcp_process+0x280>
 80148ba:	4b0e      	ldr	r3, [pc, #56]	; (80148f4 <tcp_process+0x2ac>)
 80148bc:	f44f 725d 	mov.w	r2, #884	; 0x374
 80148c0:	4917      	ldr	r1, [pc, #92]	; (8014920 <tcp_process+0x2d8>)
 80148c2:	480e      	ldr	r0, [pc, #56]	; (80148fc <tcp_process+0x2b4>)
 80148c4:	f007 ff0c 	bl	801c6e0 <iprintf>
          pcb->unsent = rseg->next;
 80148c8:	69fb      	ldr	r3, [r7, #28]
 80148ca:	681a      	ldr	r2, [r3, #0]
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	66da      	str	r2, [r3, #108]	; 0x6c
 80148d0:	e003      	b.n	80148da <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 80148d2:	69fb      	ldr	r3, [r7, #28]
 80148d4:	681a      	ldr	r2, [r3, #0]
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80148da:	69f8      	ldr	r0, [r7, #28]
 80148dc:	f7fe fc51 	bl	8013182 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	d11d      	bne.n	8014924 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80148ee:	861a      	strh	r2, [r3, #48]	; 0x30
 80148f0:	e01f      	b.n	8014932 <tcp_process+0x2ea>
 80148f2:	bf00      	nop
 80148f4:	080207d8 	.word	0x080207d8
 80148f8:	08020a10 	.word	0x08020a10
 80148fc:	08020824 	.word	0x08020824
 8014900:	2000472c 	.word	0x2000472c
 8014904:	20004724 	.word	0x20004724
 8014908:	20004720 	.word	0x20004720
 801490c:	08020a2c 	.word	0x08020a2c
 8014910:	2000472d 	.word	0x2000472d
 8014914:	2000b620 	.word	0x2000b620
 8014918:	20004710 	.word	0x20004710
 801491c:	08020a4c 	.word	0x08020a4c
 8014920:	08020a64 	.word	0x08020a64
        } else {
          pcb->rtime = 0;
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	2200      	movs	r2, #0
 8014928:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	2200      	movs	r2, #0
 801492e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014938:	2b00      	cmp	r3, #0
 801493a:	d00a      	beq.n	8014952 <tcp_process+0x30a>
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014942:	687a      	ldr	r2, [r7, #4]
 8014944:	6910      	ldr	r0, [r2, #16]
 8014946:	2200      	movs	r2, #0
 8014948:	6879      	ldr	r1, [r7, #4]
 801494a:	4798      	blx	r3
 801494c:	4603      	mov	r3, r0
 801494e:	76bb      	strb	r3, [r7, #26]
 8014950:	e001      	b.n	8014956 <tcp_process+0x30e>
 8014952:	2300      	movs	r3, #0
 8014954:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8014956:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801495a:	f113 0f0d 	cmn.w	r3, #13
 801495e:	d102      	bne.n	8014966 <tcp_process+0x31e>
          return ERR_ABRT;
 8014960:	f06f 030c 	mvn.w	r3, #12
 8014964:	e250      	b.n	8014e08 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	8b5b      	ldrh	r3, [r3, #26]
 801496a:	f043 0302 	orr.w	r3, r3, #2
 801496e:	b29a      	uxth	r2, r3
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8014974:	e23a      	b.n	8014dec <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8014976:	4b9d      	ldr	r3, [pc, #628]	; (8014bec <tcp_process+0x5a4>)
 8014978:	781b      	ldrb	r3, [r3, #0]
 801497a:	f003 0310 	and.w	r3, r3, #16
 801497e:	2b00      	cmp	r3, #0
 8014980:	f000 8234 	beq.w	8014dec <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014984:	4b9a      	ldr	r3, [pc, #616]	; (8014bf0 <tcp_process+0x5a8>)
 8014986:	6819      	ldr	r1, [r3, #0]
 8014988:	4b9a      	ldr	r3, [pc, #616]	; (8014bf4 <tcp_process+0x5ac>)
 801498a:	881b      	ldrh	r3, [r3, #0]
 801498c:	461a      	mov	r2, r3
 801498e:	4b9a      	ldr	r3, [pc, #616]	; (8014bf8 <tcp_process+0x5b0>)
 8014990:	681b      	ldr	r3, [r3, #0]
 8014992:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014994:	4b99      	ldr	r3, [pc, #612]	; (8014bfc <tcp_process+0x5b4>)
 8014996:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014998:	885b      	ldrh	r3, [r3, #2]
 801499a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801499c:	4a97      	ldr	r2, [pc, #604]	; (8014bfc <tcp_process+0x5b4>)
 801499e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80149a0:	8812      	ldrh	r2, [r2, #0]
 80149a2:	b292      	uxth	r2, r2
 80149a4:	9202      	str	r2, [sp, #8]
 80149a6:	9301      	str	r3, [sp, #4]
 80149a8:	4b95      	ldr	r3, [pc, #596]	; (8014c00 <tcp_process+0x5b8>)
 80149aa:	9300      	str	r3, [sp, #0]
 80149ac:	4b95      	ldr	r3, [pc, #596]	; (8014c04 <tcp_process+0x5bc>)
 80149ae:	4602      	mov	r2, r0
 80149b0:	6878      	ldr	r0, [r7, #4]
 80149b2:	f003 f8db 	bl	8017b6c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80149b6:	687b      	ldr	r3, [r7, #4]
 80149b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80149bc:	2b05      	cmp	r3, #5
 80149be:	f200 8215 	bhi.w	8014dec <tcp_process+0x7a4>
          pcb->rtime = 0;
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	2200      	movs	r2, #0
 80149c6:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80149c8:	6878      	ldr	r0, [r7, #4]
 80149ca:	f002 fea5 	bl	8017718 <tcp_rexmit_rto>
      break;
 80149ce:	e20d      	b.n	8014dec <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80149d0:	4b86      	ldr	r3, [pc, #536]	; (8014bec <tcp_process+0x5a4>)
 80149d2:	781b      	ldrb	r3, [r3, #0]
 80149d4:	f003 0310 	and.w	r3, r3, #16
 80149d8:	2b00      	cmp	r3, #0
 80149da:	f000 80a1 	beq.w	8014b20 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80149de:	4b84      	ldr	r3, [pc, #528]	; (8014bf0 <tcp_process+0x5a8>)
 80149e0:	681a      	ldr	r2, [r3, #0]
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80149e6:	1ad3      	subs	r3, r2, r3
 80149e8:	3b01      	subs	r3, #1
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	db7e      	blt.n	8014aec <tcp_process+0x4a4>
 80149ee:	4b80      	ldr	r3, [pc, #512]	; (8014bf0 <tcp_process+0x5a8>)
 80149f0:	681a      	ldr	r2, [r3, #0]
 80149f2:	687b      	ldr	r3, [r7, #4]
 80149f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80149f6:	1ad3      	subs	r3, r2, r3
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	dc77      	bgt.n	8014aec <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	2204      	movs	r2, #4
 8014a00:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014a06:	2b00      	cmp	r3, #0
 8014a08:	d102      	bne.n	8014a10 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8014a0a:	23fa      	movs	r3, #250	; 0xfa
 8014a0c:	76bb      	strb	r3, [r7, #26]
 8014a0e:	e01d      	b.n	8014a4c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014a14:	699b      	ldr	r3, [r3, #24]
 8014a16:	2b00      	cmp	r3, #0
 8014a18:	d106      	bne.n	8014a28 <tcp_process+0x3e0>
 8014a1a:	4b7b      	ldr	r3, [pc, #492]	; (8014c08 <tcp_process+0x5c0>)
 8014a1c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8014a20:	497a      	ldr	r1, [pc, #488]	; (8014c0c <tcp_process+0x5c4>)
 8014a22:	487b      	ldr	r0, [pc, #492]	; (8014c10 <tcp_process+0x5c8>)
 8014a24:	f007 fe5c 	bl	801c6e0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014a2c:	699b      	ldr	r3, [r3, #24]
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	d00a      	beq.n	8014a48 <tcp_process+0x400>
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014a36:	699b      	ldr	r3, [r3, #24]
 8014a38:	687a      	ldr	r2, [r7, #4]
 8014a3a:	6910      	ldr	r0, [r2, #16]
 8014a3c:	2200      	movs	r2, #0
 8014a3e:	6879      	ldr	r1, [r7, #4]
 8014a40:	4798      	blx	r3
 8014a42:	4603      	mov	r3, r0
 8014a44:	76bb      	strb	r3, [r7, #26]
 8014a46:	e001      	b.n	8014a4c <tcp_process+0x404>
 8014a48:	23f0      	movs	r3, #240	; 0xf0
 8014a4a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8014a4c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014a50:	2b00      	cmp	r3, #0
 8014a52:	d00a      	beq.n	8014a6a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8014a54:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014a58:	f113 0f0d 	cmn.w	r3, #13
 8014a5c:	d002      	beq.n	8014a64 <tcp_process+0x41c>
              tcp_abort(pcb);
 8014a5e:	6878      	ldr	r0, [r7, #4]
 8014a60:	f7fd fcea 	bl	8012438 <tcp_abort>
            }
            return ERR_ABRT;
 8014a64:	f06f 030c 	mvn.w	r3, #12
 8014a68:	e1ce      	b.n	8014e08 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8014a6a:	6878      	ldr	r0, [r7, #4]
 8014a6c:	f000 fae0 	bl	8015030 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8014a70:	4b68      	ldr	r3, [pc, #416]	; (8014c14 <tcp_process+0x5cc>)
 8014a72:	881b      	ldrh	r3, [r3, #0]
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	d005      	beq.n	8014a84 <tcp_process+0x43c>
            recv_acked--;
 8014a78:	4b66      	ldr	r3, [pc, #408]	; (8014c14 <tcp_process+0x5cc>)
 8014a7a:	881b      	ldrh	r3, [r3, #0]
 8014a7c:	3b01      	subs	r3, #1
 8014a7e:	b29a      	uxth	r2, r3
 8014a80:	4b64      	ldr	r3, [pc, #400]	; (8014c14 <tcp_process+0x5cc>)
 8014a82:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014a88:	009a      	lsls	r2, r3, #2
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014a8e:	005b      	lsls	r3, r3, #1
 8014a90:	f241 111c 	movw	r1, #4380	; 0x111c
 8014a94:	428b      	cmp	r3, r1
 8014a96:	bf38      	it	cc
 8014a98:	460b      	movcc	r3, r1
 8014a9a:	429a      	cmp	r2, r3
 8014a9c:	d204      	bcs.n	8014aa8 <tcp_process+0x460>
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014aa2:	009b      	lsls	r3, r3, #2
 8014aa4:	b29b      	uxth	r3, r3
 8014aa6:	e00d      	b.n	8014ac4 <tcp_process+0x47c>
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014aac:	005b      	lsls	r3, r3, #1
 8014aae:	f241 121c 	movw	r2, #4380	; 0x111c
 8014ab2:	4293      	cmp	r3, r2
 8014ab4:	d904      	bls.n	8014ac0 <tcp_process+0x478>
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014aba:	005b      	lsls	r3, r3, #1
 8014abc:	b29b      	uxth	r3, r3
 8014abe:	e001      	b.n	8014ac4 <tcp_process+0x47c>
 8014ac0:	f241 131c 	movw	r3, #4380	; 0x111c
 8014ac4:	687a      	ldr	r2, [r7, #4]
 8014ac6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8014aca:	4b53      	ldr	r3, [pc, #332]	; (8014c18 <tcp_process+0x5d0>)
 8014acc:	781b      	ldrb	r3, [r3, #0]
 8014ace:	f003 0320 	and.w	r3, r3, #32
 8014ad2:	2b00      	cmp	r3, #0
 8014ad4:	d037      	beq.n	8014b46 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	8b5b      	ldrh	r3, [r3, #26]
 8014ada:	f043 0302 	orr.w	r3, r3, #2
 8014ade:	b29a      	uxth	r2, r3
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	2207      	movs	r2, #7
 8014ae8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8014aea:	e02c      	b.n	8014b46 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014aec:	4b40      	ldr	r3, [pc, #256]	; (8014bf0 <tcp_process+0x5a8>)
 8014aee:	6819      	ldr	r1, [r3, #0]
 8014af0:	4b40      	ldr	r3, [pc, #256]	; (8014bf4 <tcp_process+0x5ac>)
 8014af2:	881b      	ldrh	r3, [r3, #0]
 8014af4:	461a      	mov	r2, r3
 8014af6:	4b40      	ldr	r3, [pc, #256]	; (8014bf8 <tcp_process+0x5b0>)
 8014af8:	681b      	ldr	r3, [r3, #0]
 8014afa:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014afc:	4b3f      	ldr	r3, [pc, #252]	; (8014bfc <tcp_process+0x5b4>)
 8014afe:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014b00:	885b      	ldrh	r3, [r3, #2]
 8014b02:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014b04:	4a3d      	ldr	r2, [pc, #244]	; (8014bfc <tcp_process+0x5b4>)
 8014b06:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014b08:	8812      	ldrh	r2, [r2, #0]
 8014b0a:	b292      	uxth	r2, r2
 8014b0c:	9202      	str	r2, [sp, #8]
 8014b0e:	9301      	str	r3, [sp, #4]
 8014b10:	4b3b      	ldr	r3, [pc, #236]	; (8014c00 <tcp_process+0x5b8>)
 8014b12:	9300      	str	r3, [sp, #0]
 8014b14:	4b3b      	ldr	r3, [pc, #236]	; (8014c04 <tcp_process+0x5bc>)
 8014b16:	4602      	mov	r2, r0
 8014b18:	6878      	ldr	r0, [r7, #4]
 8014b1a:	f003 f827 	bl	8017b6c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8014b1e:	e167      	b.n	8014df0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8014b20:	4b32      	ldr	r3, [pc, #200]	; (8014bec <tcp_process+0x5a4>)
 8014b22:	781b      	ldrb	r3, [r3, #0]
 8014b24:	f003 0302 	and.w	r3, r3, #2
 8014b28:	2b00      	cmp	r3, #0
 8014b2a:	f000 8161 	beq.w	8014df0 <tcp_process+0x7a8>
 8014b2e:	687b      	ldr	r3, [r7, #4]
 8014b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b32:	1e5a      	subs	r2, r3, #1
 8014b34:	4b30      	ldr	r3, [pc, #192]	; (8014bf8 <tcp_process+0x5b0>)
 8014b36:	681b      	ldr	r3, [r3, #0]
 8014b38:	429a      	cmp	r2, r3
 8014b3a:	f040 8159 	bne.w	8014df0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8014b3e:	6878      	ldr	r0, [r7, #4]
 8014b40:	f002 fe0c 	bl	801775c <tcp_rexmit>
      break;
 8014b44:	e154      	b.n	8014df0 <tcp_process+0x7a8>
 8014b46:	e153      	b.n	8014df0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8014b48:	6878      	ldr	r0, [r7, #4]
 8014b4a:	f000 fa71 	bl	8015030 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8014b4e:	4b32      	ldr	r3, [pc, #200]	; (8014c18 <tcp_process+0x5d0>)
 8014b50:	781b      	ldrb	r3, [r3, #0]
 8014b52:	f003 0320 	and.w	r3, r3, #32
 8014b56:	2b00      	cmp	r3, #0
 8014b58:	f000 814c 	beq.w	8014df4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	8b5b      	ldrh	r3, [r3, #26]
 8014b60:	f043 0302 	orr.w	r3, r3, #2
 8014b64:	b29a      	uxth	r2, r3
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	2207      	movs	r2, #7
 8014b6e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014b70:	e140      	b.n	8014df4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8014b72:	6878      	ldr	r0, [r7, #4]
 8014b74:	f000 fa5c 	bl	8015030 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8014b78:	4b27      	ldr	r3, [pc, #156]	; (8014c18 <tcp_process+0x5d0>)
 8014b7a:	781b      	ldrb	r3, [r3, #0]
 8014b7c:	f003 0320 	and.w	r3, r3, #32
 8014b80:	2b00      	cmp	r3, #0
 8014b82:	d071      	beq.n	8014c68 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014b84:	4b19      	ldr	r3, [pc, #100]	; (8014bec <tcp_process+0x5a4>)
 8014b86:	781b      	ldrb	r3, [r3, #0]
 8014b88:	f003 0310 	and.w	r3, r3, #16
 8014b8c:	2b00      	cmp	r3, #0
 8014b8e:	d060      	beq.n	8014c52 <tcp_process+0x60a>
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014b94:	4b16      	ldr	r3, [pc, #88]	; (8014bf0 <tcp_process+0x5a8>)
 8014b96:	681b      	ldr	r3, [r3, #0]
 8014b98:	429a      	cmp	r2, r3
 8014b9a:	d15a      	bne.n	8014c52 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014ba0:	2b00      	cmp	r3, #0
 8014ba2:	d156      	bne.n	8014c52 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	8b5b      	ldrh	r3, [r3, #26]
 8014ba8:	f043 0302 	orr.w	r3, r3, #2
 8014bac:	b29a      	uxth	r2, r3
 8014bae:	687b      	ldr	r3, [r7, #4]
 8014bb0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8014bb2:	6878      	ldr	r0, [r7, #4]
 8014bb4:	f7fe fdbe 	bl	8013734 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8014bb8:	4b18      	ldr	r3, [pc, #96]	; (8014c1c <tcp_process+0x5d4>)
 8014bba:	681b      	ldr	r3, [r3, #0]
 8014bbc:	687a      	ldr	r2, [r7, #4]
 8014bbe:	429a      	cmp	r2, r3
 8014bc0:	d105      	bne.n	8014bce <tcp_process+0x586>
 8014bc2:	4b16      	ldr	r3, [pc, #88]	; (8014c1c <tcp_process+0x5d4>)
 8014bc4:	681b      	ldr	r3, [r3, #0]
 8014bc6:	68db      	ldr	r3, [r3, #12]
 8014bc8:	4a14      	ldr	r2, [pc, #80]	; (8014c1c <tcp_process+0x5d4>)
 8014bca:	6013      	str	r3, [r2, #0]
 8014bcc:	e02e      	b.n	8014c2c <tcp_process+0x5e4>
 8014bce:	4b13      	ldr	r3, [pc, #76]	; (8014c1c <tcp_process+0x5d4>)
 8014bd0:	681b      	ldr	r3, [r3, #0]
 8014bd2:	617b      	str	r3, [r7, #20]
 8014bd4:	e027      	b.n	8014c26 <tcp_process+0x5de>
 8014bd6:	697b      	ldr	r3, [r7, #20]
 8014bd8:	68db      	ldr	r3, [r3, #12]
 8014bda:	687a      	ldr	r2, [r7, #4]
 8014bdc:	429a      	cmp	r2, r3
 8014bde:	d11f      	bne.n	8014c20 <tcp_process+0x5d8>
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	68da      	ldr	r2, [r3, #12]
 8014be4:	697b      	ldr	r3, [r7, #20]
 8014be6:	60da      	str	r2, [r3, #12]
 8014be8:	e020      	b.n	8014c2c <tcp_process+0x5e4>
 8014bea:	bf00      	nop
 8014bec:	2000472c 	.word	0x2000472c
 8014bf0:	20004724 	.word	0x20004724
 8014bf4:	2000472a 	.word	0x2000472a
 8014bf8:	20004720 	.word	0x20004720
 8014bfc:	20004710 	.word	0x20004710
 8014c00:	20007f18 	.word	0x20007f18
 8014c04:	20007f1c 	.word	0x20007f1c
 8014c08:	080207d8 	.word	0x080207d8
 8014c0c:	08020a78 	.word	0x08020a78
 8014c10:	08020824 	.word	0x08020824
 8014c14:	20004728 	.word	0x20004728
 8014c18:	2000472d 	.word	0x2000472d
 8014c1c:	2000b61c 	.word	0x2000b61c
 8014c20:	697b      	ldr	r3, [r7, #20]
 8014c22:	68db      	ldr	r3, [r3, #12]
 8014c24:	617b      	str	r3, [r7, #20]
 8014c26:	697b      	ldr	r3, [r7, #20]
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	d1d4      	bne.n	8014bd6 <tcp_process+0x58e>
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	2200      	movs	r2, #0
 8014c30:	60da      	str	r2, [r3, #12]
 8014c32:	4b77      	ldr	r3, [pc, #476]	; (8014e10 <tcp_process+0x7c8>)
 8014c34:	2201      	movs	r2, #1
 8014c36:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	220a      	movs	r2, #10
 8014c3c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8014c3e:	4b75      	ldr	r3, [pc, #468]	; (8014e14 <tcp_process+0x7cc>)
 8014c40:	681a      	ldr	r2, [r3, #0]
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	60da      	str	r2, [r3, #12]
 8014c46:	4a73      	ldr	r2, [pc, #460]	; (8014e14 <tcp_process+0x7cc>)
 8014c48:	687b      	ldr	r3, [r7, #4]
 8014c4a:	6013      	str	r3, [r2, #0]
 8014c4c:	f003 f950 	bl	8017ef0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8014c50:	e0d2      	b.n	8014df8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	8b5b      	ldrh	r3, [r3, #26]
 8014c56:	f043 0302 	orr.w	r3, r3, #2
 8014c5a:	b29a      	uxth	r2, r3
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	2208      	movs	r2, #8
 8014c64:	751a      	strb	r2, [r3, #20]
      break;
 8014c66:	e0c7      	b.n	8014df8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014c68:	4b6b      	ldr	r3, [pc, #428]	; (8014e18 <tcp_process+0x7d0>)
 8014c6a:	781b      	ldrb	r3, [r3, #0]
 8014c6c:	f003 0310 	and.w	r3, r3, #16
 8014c70:	2b00      	cmp	r3, #0
 8014c72:	f000 80c1 	beq.w	8014df8 <tcp_process+0x7b0>
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014c7a:	4b68      	ldr	r3, [pc, #416]	; (8014e1c <tcp_process+0x7d4>)
 8014c7c:	681b      	ldr	r3, [r3, #0]
 8014c7e:	429a      	cmp	r2, r3
 8014c80:	f040 80ba 	bne.w	8014df8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	f040 80b5 	bne.w	8014df8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	2206      	movs	r2, #6
 8014c92:	751a      	strb	r2, [r3, #20]
      break;
 8014c94:	e0b0      	b.n	8014df8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8014c96:	6878      	ldr	r0, [r7, #4]
 8014c98:	f000 f9ca 	bl	8015030 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8014c9c:	4b60      	ldr	r3, [pc, #384]	; (8014e20 <tcp_process+0x7d8>)
 8014c9e:	781b      	ldrb	r3, [r3, #0]
 8014ca0:	f003 0320 	and.w	r3, r3, #32
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	f000 80a9 	beq.w	8014dfc <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	8b5b      	ldrh	r3, [r3, #26]
 8014cae:	f043 0302 	orr.w	r3, r3, #2
 8014cb2:	b29a      	uxth	r2, r3
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8014cb8:	6878      	ldr	r0, [r7, #4]
 8014cba:	f7fe fd3b 	bl	8013734 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8014cbe:	4b59      	ldr	r3, [pc, #356]	; (8014e24 <tcp_process+0x7dc>)
 8014cc0:	681b      	ldr	r3, [r3, #0]
 8014cc2:	687a      	ldr	r2, [r7, #4]
 8014cc4:	429a      	cmp	r2, r3
 8014cc6:	d105      	bne.n	8014cd4 <tcp_process+0x68c>
 8014cc8:	4b56      	ldr	r3, [pc, #344]	; (8014e24 <tcp_process+0x7dc>)
 8014cca:	681b      	ldr	r3, [r3, #0]
 8014ccc:	68db      	ldr	r3, [r3, #12]
 8014cce:	4a55      	ldr	r2, [pc, #340]	; (8014e24 <tcp_process+0x7dc>)
 8014cd0:	6013      	str	r3, [r2, #0]
 8014cd2:	e013      	b.n	8014cfc <tcp_process+0x6b4>
 8014cd4:	4b53      	ldr	r3, [pc, #332]	; (8014e24 <tcp_process+0x7dc>)
 8014cd6:	681b      	ldr	r3, [r3, #0]
 8014cd8:	613b      	str	r3, [r7, #16]
 8014cda:	e00c      	b.n	8014cf6 <tcp_process+0x6ae>
 8014cdc:	693b      	ldr	r3, [r7, #16]
 8014cde:	68db      	ldr	r3, [r3, #12]
 8014ce0:	687a      	ldr	r2, [r7, #4]
 8014ce2:	429a      	cmp	r2, r3
 8014ce4:	d104      	bne.n	8014cf0 <tcp_process+0x6a8>
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	68da      	ldr	r2, [r3, #12]
 8014cea:	693b      	ldr	r3, [r7, #16]
 8014cec:	60da      	str	r2, [r3, #12]
 8014cee:	e005      	b.n	8014cfc <tcp_process+0x6b4>
 8014cf0:	693b      	ldr	r3, [r7, #16]
 8014cf2:	68db      	ldr	r3, [r3, #12]
 8014cf4:	613b      	str	r3, [r7, #16]
 8014cf6:	693b      	ldr	r3, [r7, #16]
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	d1ef      	bne.n	8014cdc <tcp_process+0x694>
 8014cfc:	687b      	ldr	r3, [r7, #4]
 8014cfe:	2200      	movs	r2, #0
 8014d00:	60da      	str	r2, [r3, #12]
 8014d02:	4b43      	ldr	r3, [pc, #268]	; (8014e10 <tcp_process+0x7c8>)
 8014d04:	2201      	movs	r2, #1
 8014d06:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	220a      	movs	r2, #10
 8014d0c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8014d0e:	4b41      	ldr	r3, [pc, #260]	; (8014e14 <tcp_process+0x7cc>)
 8014d10:	681a      	ldr	r2, [r3, #0]
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	60da      	str	r2, [r3, #12]
 8014d16:	4a3f      	ldr	r2, [pc, #252]	; (8014e14 <tcp_process+0x7cc>)
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	6013      	str	r3, [r2, #0]
 8014d1c:	f003 f8e8 	bl	8017ef0 <tcp_timer_needed>
      }
      break;
 8014d20:	e06c      	b.n	8014dfc <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8014d22:	6878      	ldr	r0, [r7, #4]
 8014d24:	f000 f984 	bl	8015030 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8014d28:	4b3b      	ldr	r3, [pc, #236]	; (8014e18 <tcp_process+0x7d0>)
 8014d2a:	781b      	ldrb	r3, [r3, #0]
 8014d2c:	f003 0310 	and.w	r3, r3, #16
 8014d30:	2b00      	cmp	r3, #0
 8014d32:	d065      	beq.n	8014e00 <tcp_process+0x7b8>
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014d38:	4b38      	ldr	r3, [pc, #224]	; (8014e1c <tcp_process+0x7d4>)
 8014d3a:	681b      	ldr	r3, [r3, #0]
 8014d3c:	429a      	cmp	r2, r3
 8014d3e:	d15f      	bne.n	8014e00 <tcp_process+0x7b8>
 8014d40:	687b      	ldr	r3, [r7, #4]
 8014d42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	d15b      	bne.n	8014e00 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8014d48:	6878      	ldr	r0, [r7, #4]
 8014d4a:	f7fe fcf3 	bl	8013734 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8014d4e:	4b35      	ldr	r3, [pc, #212]	; (8014e24 <tcp_process+0x7dc>)
 8014d50:	681b      	ldr	r3, [r3, #0]
 8014d52:	687a      	ldr	r2, [r7, #4]
 8014d54:	429a      	cmp	r2, r3
 8014d56:	d105      	bne.n	8014d64 <tcp_process+0x71c>
 8014d58:	4b32      	ldr	r3, [pc, #200]	; (8014e24 <tcp_process+0x7dc>)
 8014d5a:	681b      	ldr	r3, [r3, #0]
 8014d5c:	68db      	ldr	r3, [r3, #12]
 8014d5e:	4a31      	ldr	r2, [pc, #196]	; (8014e24 <tcp_process+0x7dc>)
 8014d60:	6013      	str	r3, [r2, #0]
 8014d62:	e013      	b.n	8014d8c <tcp_process+0x744>
 8014d64:	4b2f      	ldr	r3, [pc, #188]	; (8014e24 <tcp_process+0x7dc>)
 8014d66:	681b      	ldr	r3, [r3, #0]
 8014d68:	60fb      	str	r3, [r7, #12]
 8014d6a:	e00c      	b.n	8014d86 <tcp_process+0x73e>
 8014d6c:	68fb      	ldr	r3, [r7, #12]
 8014d6e:	68db      	ldr	r3, [r3, #12]
 8014d70:	687a      	ldr	r2, [r7, #4]
 8014d72:	429a      	cmp	r2, r3
 8014d74:	d104      	bne.n	8014d80 <tcp_process+0x738>
 8014d76:	687b      	ldr	r3, [r7, #4]
 8014d78:	68da      	ldr	r2, [r3, #12]
 8014d7a:	68fb      	ldr	r3, [r7, #12]
 8014d7c:	60da      	str	r2, [r3, #12]
 8014d7e:	e005      	b.n	8014d8c <tcp_process+0x744>
 8014d80:	68fb      	ldr	r3, [r7, #12]
 8014d82:	68db      	ldr	r3, [r3, #12]
 8014d84:	60fb      	str	r3, [r7, #12]
 8014d86:	68fb      	ldr	r3, [r7, #12]
 8014d88:	2b00      	cmp	r3, #0
 8014d8a:	d1ef      	bne.n	8014d6c <tcp_process+0x724>
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	2200      	movs	r2, #0
 8014d90:	60da      	str	r2, [r3, #12]
 8014d92:	4b1f      	ldr	r3, [pc, #124]	; (8014e10 <tcp_process+0x7c8>)
 8014d94:	2201      	movs	r2, #1
 8014d96:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	220a      	movs	r2, #10
 8014d9c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8014d9e:	4b1d      	ldr	r3, [pc, #116]	; (8014e14 <tcp_process+0x7cc>)
 8014da0:	681a      	ldr	r2, [r3, #0]
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	60da      	str	r2, [r3, #12]
 8014da6:	4a1b      	ldr	r2, [pc, #108]	; (8014e14 <tcp_process+0x7cc>)
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	6013      	str	r3, [r2, #0]
 8014dac:	f003 f8a0 	bl	8017ef0 <tcp_timer_needed>
      }
      break;
 8014db0:	e026      	b.n	8014e00 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8014db2:	6878      	ldr	r0, [r7, #4]
 8014db4:	f000 f93c 	bl	8015030 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8014db8:	4b17      	ldr	r3, [pc, #92]	; (8014e18 <tcp_process+0x7d0>)
 8014dba:	781b      	ldrb	r3, [r3, #0]
 8014dbc:	f003 0310 	and.w	r3, r3, #16
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	d01f      	beq.n	8014e04 <tcp_process+0x7bc>
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014dc8:	4b14      	ldr	r3, [pc, #80]	; (8014e1c <tcp_process+0x7d4>)
 8014dca:	681b      	ldr	r3, [r3, #0]
 8014dcc:	429a      	cmp	r2, r3
 8014dce:	d119      	bne.n	8014e04 <tcp_process+0x7bc>
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014dd4:	2b00      	cmp	r3, #0
 8014dd6:	d115      	bne.n	8014e04 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8014dd8:	4b11      	ldr	r3, [pc, #68]	; (8014e20 <tcp_process+0x7d8>)
 8014dda:	781b      	ldrb	r3, [r3, #0]
 8014ddc:	f043 0310 	orr.w	r3, r3, #16
 8014de0:	b2da      	uxtb	r2, r3
 8014de2:	4b0f      	ldr	r3, [pc, #60]	; (8014e20 <tcp_process+0x7d8>)
 8014de4:	701a      	strb	r2, [r3, #0]
      }
      break;
 8014de6:	e00d      	b.n	8014e04 <tcp_process+0x7bc>
    default:
      break;
 8014de8:	bf00      	nop
 8014dea:	e00c      	b.n	8014e06 <tcp_process+0x7be>
      break;
 8014dec:	bf00      	nop
 8014dee:	e00a      	b.n	8014e06 <tcp_process+0x7be>
      break;
 8014df0:	bf00      	nop
 8014df2:	e008      	b.n	8014e06 <tcp_process+0x7be>
      break;
 8014df4:	bf00      	nop
 8014df6:	e006      	b.n	8014e06 <tcp_process+0x7be>
      break;
 8014df8:	bf00      	nop
 8014dfa:	e004      	b.n	8014e06 <tcp_process+0x7be>
      break;
 8014dfc:	bf00      	nop
 8014dfe:	e002      	b.n	8014e06 <tcp_process+0x7be>
      break;
 8014e00:	bf00      	nop
 8014e02:	e000      	b.n	8014e06 <tcp_process+0x7be>
      break;
 8014e04:	bf00      	nop
  }
  return ERR_OK;
 8014e06:	2300      	movs	r3, #0
}
 8014e08:	4618      	mov	r0, r3
 8014e0a:	3724      	adds	r7, #36	; 0x24
 8014e0c:	46bd      	mov	sp, r7
 8014e0e:	bd90      	pop	{r4, r7, pc}
 8014e10:	2000b618 	.word	0x2000b618
 8014e14:	2000b62c 	.word	0x2000b62c
 8014e18:	2000472c 	.word	0x2000472c
 8014e1c:	20004724 	.word	0x20004724
 8014e20:	2000472d 	.word	0x2000472d
 8014e24:	2000b61c 	.word	0x2000b61c

08014e28 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8014e28:	b590      	push	{r4, r7, lr}
 8014e2a:	b085      	sub	sp, #20
 8014e2c:	af00      	add	r7, sp, #0
 8014e2e:	6078      	str	r0, [r7, #4]
 8014e30:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	d106      	bne.n	8014e46 <tcp_oos_insert_segment+0x1e>
 8014e38:	4b3b      	ldr	r3, [pc, #236]	; (8014f28 <tcp_oos_insert_segment+0x100>)
 8014e3a:	f240 421f 	movw	r2, #1055	; 0x41f
 8014e3e:	493b      	ldr	r1, [pc, #236]	; (8014f2c <tcp_oos_insert_segment+0x104>)
 8014e40:	483b      	ldr	r0, [pc, #236]	; (8014f30 <tcp_oos_insert_segment+0x108>)
 8014e42:	f007 fc4d 	bl	801c6e0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	68db      	ldr	r3, [r3, #12]
 8014e4a:	899b      	ldrh	r3, [r3, #12]
 8014e4c:	b29b      	uxth	r3, r3
 8014e4e:	4618      	mov	r0, r3
 8014e50:	f7fb f936 	bl	80100c0 <lwip_htons>
 8014e54:	4603      	mov	r3, r0
 8014e56:	b2db      	uxtb	r3, r3
 8014e58:	f003 0301 	and.w	r3, r3, #1
 8014e5c:	2b00      	cmp	r3, #0
 8014e5e:	d028      	beq.n	8014eb2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8014e60:	6838      	ldr	r0, [r7, #0]
 8014e62:	f7fe f979 	bl	8013158 <tcp_segs_free>
    next = NULL;
 8014e66:	2300      	movs	r3, #0
 8014e68:	603b      	str	r3, [r7, #0]
 8014e6a:	e056      	b.n	8014f1a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8014e6c:	683b      	ldr	r3, [r7, #0]
 8014e6e:	68db      	ldr	r3, [r3, #12]
 8014e70:	899b      	ldrh	r3, [r3, #12]
 8014e72:	b29b      	uxth	r3, r3
 8014e74:	4618      	mov	r0, r3
 8014e76:	f7fb f923 	bl	80100c0 <lwip_htons>
 8014e7a:	4603      	mov	r3, r0
 8014e7c:	b2db      	uxtb	r3, r3
 8014e7e:	f003 0301 	and.w	r3, r3, #1
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	d00d      	beq.n	8014ea2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	68db      	ldr	r3, [r3, #12]
 8014e8a:	899b      	ldrh	r3, [r3, #12]
 8014e8c:	b29c      	uxth	r4, r3
 8014e8e:	2001      	movs	r0, #1
 8014e90:	f7fb f916 	bl	80100c0 <lwip_htons>
 8014e94:	4603      	mov	r3, r0
 8014e96:	461a      	mov	r2, r3
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	68db      	ldr	r3, [r3, #12]
 8014e9c:	4322      	orrs	r2, r4
 8014e9e:	b292      	uxth	r2, r2
 8014ea0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8014ea2:	683b      	ldr	r3, [r7, #0]
 8014ea4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8014ea6:	683b      	ldr	r3, [r7, #0]
 8014ea8:	681b      	ldr	r3, [r3, #0]
 8014eaa:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8014eac:	68f8      	ldr	r0, [r7, #12]
 8014eae:	f7fe f968 	bl	8013182 <tcp_seg_free>
    while (next &&
 8014eb2:	683b      	ldr	r3, [r7, #0]
 8014eb4:	2b00      	cmp	r3, #0
 8014eb6:	d00e      	beq.n	8014ed6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	891b      	ldrh	r3, [r3, #8]
 8014ebc:	461a      	mov	r2, r3
 8014ebe:	4b1d      	ldr	r3, [pc, #116]	; (8014f34 <tcp_oos_insert_segment+0x10c>)
 8014ec0:	681b      	ldr	r3, [r3, #0]
 8014ec2:	441a      	add	r2, r3
 8014ec4:	683b      	ldr	r3, [r7, #0]
 8014ec6:	68db      	ldr	r3, [r3, #12]
 8014ec8:	685b      	ldr	r3, [r3, #4]
 8014eca:	6839      	ldr	r1, [r7, #0]
 8014ecc:	8909      	ldrh	r1, [r1, #8]
 8014ece:	440b      	add	r3, r1
 8014ed0:	1ad3      	subs	r3, r2, r3
    while (next &&
 8014ed2:	2b00      	cmp	r3, #0
 8014ed4:	daca      	bge.n	8014e6c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8014ed6:	683b      	ldr	r3, [r7, #0]
 8014ed8:	2b00      	cmp	r3, #0
 8014eda:	d01e      	beq.n	8014f1a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	891b      	ldrh	r3, [r3, #8]
 8014ee0:	461a      	mov	r2, r3
 8014ee2:	4b14      	ldr	r3, [pc, #80]	; (8014f34 <tcp_oos_insert_segment+0x10c>)
 8014ee4:	681b      	ldr	r3, [r3, #0]
 8014ee6:	441a      	add	r2, r3
 8014ee8:	683b      	ldr	r3, [r7, #0]
 8014eea:	68db      	ldr	r3, [r3, #12]
 8014eec:	685b      	ldr	r3, [r3, #4]
 8014eee:	1ad3      	subs	r3, r2, r3
    if (next &&
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	dd12      	ble.n	8014f1a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8014ef4:	683b      	ldr	r3, [r7, #0]
 8014ef6:	68db      	ldr	r3, [r3, #12]
 8014ef8:	685b      	ldr	r3, [r3, #4]
 8014efa:	b29a      	uxth	r2, r3
 8014efc:	4b0d      	ldr	r3, [pc, #52]	; (8014f34 <tcp_oos_insert_segment+0x10c>)
 8014efe:	681b      	ldr	r3, [r3, #0]
 8014f00:	b29b      	uxth	r3, r3
 8014f02:	1ad3      	subs	r3, r2, r3
 8014f04:	b29a      	uxth	r2, r3
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	685a      	ldr	r2, [r3, #4]
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	891b      	ldrh	r3, [r3, #8]
 8014f12:	4619      	mov	r1, r3
 8014f14:	4610      	mov	r0, r2
 8014f16:	f7fc fb09 	bl	801152c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	683a      	ldr	r2, [r7, #0]
 8014f1e:	601a      	str	r2, [r3, #0]
}
 8014f20:	bf00      	nop
 8014f22:	3714      	adds	r7, #20
 8014f24:	46bd      	mov	sp, r7
 8014f26:	bd90      	pop	{r4, r7, pc}
 8014f28:	080207d8 	.word	0x080207d8
 8014f2c:	08020a98 	.word	0x08020a98
 8014f30:	08020824 	.word	0x08020824
 8014f34:	20004720 	.word	0x20004720

08014f38 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8014f38:	b5b0      	push	{r4, r5, r7, lr}
 8014f3a:	b086      	sub	sp, #24
 8014f3c:	af00      	add	r7, sp, #0
 8014f3e:	60f8      	str	r0, [r7, #12]
 8014f40:	60b9      	str	r1, [r7, #8]
 8014f42:	607a      	str	r2, [r7, #4]
 8014f44:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8014f46:	e03e      	b.n	8014fc6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8014f48:	68bb      	ldr	r3, [r7, #8]
 8014f4a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8014f4c:	68bb      	ldr	r3, [r7, #8]
 8014f4e:	681b      	ldr	r3, [r3, #0]
 8014f50:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8014f52:	697b      	ldr	r3, [r7, #20]
 8014f54:	685b      	ldr	r3, [r3, #4]
 8014f56:	4618      	mov	r0, r3
 8014f58:	f7fc fcfc 	bl	8011954 <pbuf_clen>
 8014f5c:	4603      	mov	r3, r0
 8014f5e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8014f60:	68fb      	ldr	r3, [r7, #12]
 8014f62:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014f66:	8a7a      	ldrh	r2, [r7, #18]
 8014f68:	429a      	cmp	r2, r3
 8014f6a:	d906      	bls.n	8014f7a <tcp_free_acked_segments+0x42>
 8014f6c:	4b2a      	ldr	r3, [pc, #168]	; (8015018 <tcp_free_acked_segments+0xe0>)
 8014f6e:	f240 4257 	movw	r2, #1111	; 0x457
 8014f72:	492a      	ldr	r1, [pc, #168]	; (801501c <tcp_free_acked_segments+0xe4>)
 8014f74:	482a      	ldr	r0, [pc, #168]	; (8015020 <tcp_free_acked_segments+0xe8>)
 8014f76:	f007 fbb3 	bl	801c6e0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8014f7a:	68fb      	ldr	r3, [r7, #12]
 8014f7c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8014f80:	8a7b      	ldrh	r3, [r7, #18]
 8014f82:	1ad3      	subs	r3, r2, r3
 8014f84:	b29a      	uxth	r2, r3
 8014f86:	68fb      	ldr	r3, [r7, #12]
 8014f88:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8014f8c:	697b      	ldr	r3, [r7, #20]
 8014f8e:	891a      	ldrh	r2, [r3, #8]
 8014f90:	4b24      	ldr	r3, [pc, #144]	; (8015024 <tcp_free_acked_segments+0xec>)
 8014f92:	881b      	ldrh	r3, [r3, #0]
 8014f94:	4413      	add	r3, r2
 8014f96:	b29a      	uxth	r2, r3
 8014f98:	4b22      	ldr	r3, [pc, #136]	; (8015024 <tcp_free_acked_segments+0xec>)
 8014f9a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8014f9c:	6978      	ldr	r0, [r7, #20]
 8014f9e:	f7fe f8f0 	bl	8013182 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8014fa2:	68fb      	ldr	r3, [r7, #12]
 8014fa4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014fa8:	2b00      	cmp	r3, #0
 8014faa:	d00c      	beq.n	8014fc6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8014fac:	68bb      	ldr	r3, [r7, #8]
 8014fae:	2b00      	cmp	r3, #0
 8014fb0:	d109      	bne.n	8014fc6 <tcp_free_acked_segments+0x8e>
 8014fb2:	683b      	ldr	r3, [r7, #0]
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	d106      	bne.n	8014fc6 <tcp_free_acked_segments+0x8e>
 8014fb8:	4b17      	ldr	r3, [pc, #92]	; (8015018 <tcp_free_acked_segments+0xe0>)
 8014fba:	f240 4261 	movw	r2, #1121	; 0x461
 8014fbe:	491a      	ldr	r1, [pc, #104]	; (8015028 <tcp_free_acked_segments+0xf0>)
 8014fc0:	4817      	ldr	r0, [pc, #92]	; (8015020 <tcp_free_acked_segments+0xe8>)
 8014fc2:	f007 fb8d 	bl	801c6e0 <iprintf>
  while (seg_list != NULL &&
 8014fc6:	68bb      	ldr	r3, [r7, #8]
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	d020      	beq.n	801500e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8014fcc:	68bb      	ldr	r3, [r7, #8]
 8014fce:	68db      	ldr	r3, [r3, #12]
 8014fd0:	685b      	ldr	r3, [r3, #4]
 8014fd2:	4618      	mov	r0, r3
 8014fd4:	f7fb f889 	bl	80100ea <lwip_htonl>
 8014fd8:	4604      	mov	r4, r0
 8014fda:	68bb      	ldr	r3, [r7, #8]
 8014fdc:	891b      	ldrh	r3, [r3, #8]
 8014fde:	461d      	mov	r5, r3
 8014fe0:	68bb      	ldr	r3, [r7, #8]
 8014fe2:	68db      	ldr	r3, [r3, #12]
 8014fe4:	899b      	ldrh	r3, [r3, #12]
 8014fe6:	b29b      	uxth	r3, r3
 8014fe8:	4618      	mov	r0, r3
 8014fea:	f7fb f869 	bl	80100c0 <lwip_htons>
 8014fee:	4603      	mov	r3, r0
 8014ff0:	b2db      	uxtb	r3, r3
 8014ff2:	f003 0303 	and.w	r3, r3, #3
 8014ff6:	2b00      	cmp	r3, #0
 8014ff8:	d001      	beq.n	8014ffe <tcp_free_acked_segments+0xc6>
 8014ffa:	2301      	movs	r3, #1
 8014ffc:	e000      	b.n	8015000 <tcp_free_acked_segments+0xc8>
 8014ffe:	2300      	movs	r3, #0
 8015000:	442b      	add	r3, r5
 8015002:	18e2      	adds	r2, r4, r3
 8015004:	4b09      	ldr	r3, [pc, #36]	; (801502c <tcp_free_acked_segments+0xf4>)
 8015006:	681b      	ldr	r3, [r3, #0]
 8015008:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801500a:	2b00      	cmp	r3, #0
 801500c:	dd9c      	ble.n	8014f48 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801500e:	68bb      	ldr	r3, [r7, #8]
}
 8015010:	4618      	mov	r0, r3
 8015012:	3718      	adds	r7, #24
 8015014:	46bd      	mov	sp, r7
 8015016:	bdb0      	pop	{r4, r5, r7, pc}
 8015018:	080207d8 	.word	0x080207d8
 801501c:	08020ac0 	.word	0x08020ac0
 8015020:	08020824 	.word	0x08020824
 8015024:	20004728 	.word	0x20004728
 8015028:	08020ae8 	.word	0x08020ae8
 801502c:	20004724 	.word	0x20004724

08015030 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8015030:	b5b0      	push	{r4, r5, r7, lr}
 8015032:	b094      	sub	sp, #80	; 0x50
 8015034:	af00      	add	r7, sp, #0
 8015036:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8015038:	2300      	movs	r3, #0
 801503a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	2b00      	cmp	r3, #0
 8015040:	d106      	bne.n	8015050 <tcp_receive+0x20>
 8015042:	4ba6      	ldr	r3, [pc, #664]	; (80152dc <tcp_receive+0x2ac>)
 8015044:	f240 427b 	movw	r2, #1147	; 0x47b
 8015048:	49a5      	ldr	r1, [pc, #660]	; (80152e0 <tcp_receive+0x2b0>)
 801504a:	48a6      	ldr	r0, [pc, #664]	; (80152e4 <tcp_receive+0x2b4>)
 801504c:	f007 fb48 	bl	801c6e0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	7d1b      	ldrb	r3, [r3, #20]
 8015054:	2b03      	cmp	r3, #3
 8015056:	d806      	bhi.n	8015066 <tcp_receive+0x36>
 8015058:	4ba0      	ldr	r3, [pc, #640]	; (80152dc <tcp_receive+0x2ac>)
 801505a:	f240 427c 	movw	r2, #1148	; 0x47c
 801505e:	49a2      	ldr	r1, [pc, #648]	; (80152e8 <tcp_receive+0x2b8>)
 8015060:	48a0      	ldr	r0, [pc, #640]	; (80152e4 <tcp_receive+0x2b4>)
 8015062:	f007 fb3d 	bl	801c6e0 <iprintf>

  if (flags & TCP_ACK) {
 8015066:	4ba1      	ldr	r3, [pc, #644]	; (80152ec <tcp_receive+0x2bc>)
 8015068:	781b      	ldrb	r3, [r3, #0]
 801506a:	f003 0310 	and.w	r3, r3, #16
 801506e:	2b00      	cmp	r3, #0
 8015070:	f000 8263 	beq.w	801553a <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801507a:	461a      	mov	r2, r3
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015080:	4413      	add	r3, r2
 8015082:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8015088:	4b99      	ldr	r3, [pc, #612]	; (80152f0 <tcp_receive+0x2c0>)
 801508a:	681b      	ldr	r3, [r3, #0]
 801508c:	1ad3      	subs	r3, r2, r3
 801508e:	2b00      	cmp	r3, #0
 8015090:	db1b      	blt.n	80150ca <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8015096:	4b96      	ldr	r3, [pc, #600]	; (80152f0 <tcp_receive+0x2c0>)
 8015098:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801509a:	429a      	cmp	r2, r3
 801509c:	d106      	bne.n	80150ac <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80150a2:	4b94      	ldr	r3, [pc, #592]	; (80152f4 <tcp_receive+0x2c4>)
 80150a4:	681b      	ldr	r3, [r3, #0]
 80150a6:	1ad3      	subs	r3, r2, r3
 80150a8:	2b00      	cmp	r3, #0
 80150aa:	db0e      	blt.n	80150ca <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80150b0:	4b90      	ldr	r3, [pc, #576]	; (80152f4 <tcp_receive+0x2c4>)
 80150b2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80150b4:	429a      	cmp	r2, r3
 80150b6:	d125      	bne.n	8015104 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80150b8:	4b8f      	ldr	r3, [pc, #572]	; (80152f8 <tcp_receive+0x2c8>)
 80150ba:	681b      	ldr	r3, [r3, #0]
 80150bc:	89db      	ldrh	r3, [r3, #14]
 80150be:	b29a      	uxth	r2, r3
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80150c6:	429a      	cmp	r2, r3
 80150c8:	d91c      	bls.n	8015104 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80150ca:	4b8b      	ldr	r3, [pc, #556]	; (80152f8 <tcp_receive+0x2c8>)
 80150cc:	681b      	ldr	r3, [r3, #0]
 80150ce:	89db      	ldrh	r3, [r3, #14]
 80150d0:	b29a      	uxth	r2, r3
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80150e4:	429a      	cmp	r2, r3
 80150e6:	d205      	bcs.n	80150f4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80150f4:	4b7e      	ldr	r3, [pc, #504]	; (80152f0 <tcp_receive+0x2c0>)
 80150f6:	681a      	ldr	r2, [r3, #0]
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80150fc:	4b7d      	ldr	r3, [pc, #500]	; (80152f4 <tcp_receive+0x2c4>)
 80150fe:	681a      	ldr	r2, [r3, #0]
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8015104:	4b7b      	ldr	r3, [pc, #492]	; (80152f4 <tcp_receive+0x2c4>)
 8015106:	681a      	ldr	r2, [r3, #0]
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801510c:	1ad3      	subs	r3, r2, r3
 801510e:	2b00      	cmp	r3, #0
 8015110:	dc58      	bgt.n	80151c4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8015112:	4b7a      	ldr	r3, [pc, #488]	; (80152fc <tcp_receive+0x2cc>)
 8015114:	881b      	ldrh	r3, [r3, #0]
 8015116:	2b00      	cmp	r3, #0
 8015118:	d14b      	bne.n	80151b2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801511e:	687a      	ldr	r2, [r7, #4]
 8015120:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8015124:	4413      	add	r3, r2
 8015126:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015128:	429a      	cmp	r2, r3
 801512a:	d142      	bne.n	80151b2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8015132:	2b00      	cmp	r3, #0
 8015134:	db3d      	blt.n	80151b2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801513a:	4b6e      	ldr	r3, [pc, #440]	; (80152f4 <tcp_receive+0x2c4>)
 801513c:	681b      	ldr	r3, [r3, #0]
 801513e:	429a      	cmp	r2, r3
 8015140:	d137      	bne.n	80151b2 <tcp_receive+0x182>
              found_dupack = 1;
 8015142:	2301      	movs	r3, #1
 8015144:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8015146:	687b      	ldr	r3, [r7, #4]
 8015148:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801514c:	2bff      	cmp	r3, #255	; 0xff
 801514e:	d007      	beq.n	8015160 <tcp_receive+0x130>
                ++pcb->dupacks;
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8015156:	3301      	adds	r3, #1
 8015158:	b2da      	uxtb	r2, r3
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8015166:	2b03      	cmp	r3, #3
 8015168:	d91b      	bls.n	80151a2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015170:	687b      	ldr	r3, [r7, #4]
 8015172:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015174:	4413      	add	r3, r2
 8015176:	b29a      	uxth	r2, r3
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801517e:	429a      	cmp	r2, r3
 8015180:	d30a      	bcc.n	8015198 <tcp_receive+0x168>
 8015182:	687b      	ldr	r3, [r7, #4]
 8015184:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801518c:	4413      	add	r3, r2
 801518e:	b29a      	uxth	r2, r3
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8015196:	e004      	b.n	80151a2 <tcp_receive+0x172>
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801519e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80151a8:	2b02      	cmp	r3, #2
 80151aa:	d902      	bls.n	80151b2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80151ac:	6878      	ldr	r0, [r7, #4]
 80151ae:	f002 fb41 	bl	8017834 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80151b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80151b4:	2b00      	cmp	r3, #0
 80151b6:	f040 8160 	bne.w	801547a <tcp_receive+0x44a>
        pcb->dupacks = 0;
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	2200      	movs	r2, #0
 80151be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80151c2:	e15a      	b.n	801547a <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80151c4:	4b4b      	ldr	r3, [pc, #300]	; (80152f4 <tcp_receive+0x2c4>)
 80151c6:	681a      	ldr	r2, [r3, #0]
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80151cc:	1ad3      	subs	r3, r2, r3
 80151ce:	3b01      	subs	r3, #1
 80151d0:	2b00      	cmp	r3, #0
 80151d2:	f2c0 814d 	blt.w	8015470 <tcp_receive+0x440>
 80151d6:	4b47      	ldr	r3, [pc, #284]	; (80152f4 <tcp_receive+0x2c4>)
 80151d8:	681a      	ldr	r2, [r3, #0]
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80151de:	1ad3      	subs	r3, r2, r3
 80151e0:	2b00      	cmp	r3, #0
 80151e2:	f300 8145 	bgt.w	8015470 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80151e6:	687b      	ldr	r3, [r7, #4]
 80151e8:	8b5b      	ldrh	r3, [r3, #26]
 80151ea:	f003 0304 	and.w	r3, r3, #4
 80151ee:	2b00      	cmp	r3, #0
 80151f0:	d010      	beq.n	8015214 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80151f2:	687b      	ldr	r3, [r7, #4]
 80151f4:	8b5b      	ldrh	r3, [r3, #26]
 80151f6:	f023 0304 	bic.w	r3, r3, #4
 80151fa:	b29a      	uxth	r2, r3
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	2200      	movs	r2, #0
 8015210:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	2200      	movs	r2, #0
 8015218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801521c:	687b      	ldr	r3, [r7, #4]
 801521e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015222:	10db      	asrs	r3, r3, #3
 8015224:	b21b      	sxth	r3, r3
 8015226:	b29a      	uxth	r2, r3
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801522e:	b29b      	uxth	r3, r3
 8015230:	4413      	add	r3, r2
 8015232:	b29b      	uxth	r3, r3
 8015234:	b21a      	sxth	r2, r3
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801523c:	4b2d      	ldr	r3, [pc, #180]	; (80152f4 <tcp_receive+0x2c4>)
 801523e:	681b      	ldr	r3, [r3, #0]
 8015240:	b29a      	uxth	r2, r3
 8015242:	687b      	ldr	r3, [r7, #4]
 8015244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015246:	b29b      	uxth	r3, r3
 8015248:	1ad3      	subs	r3, r2, r3
 801524a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	2200      	movs	r2, #0
 8015250:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8015254:	4b27      	ldr	r3, [pc, #156]	; (80152f4 <tcp_receive+0x2c4>)
 8015256:	681a      	ldr	r2, [r3, #0]
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	7d1b      	ldrb	r3, [r3, #20]
 8015260:	2b03      	cmp	r3, #3
 8015262:	f240 8096 	bls.w	8015392 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8015272:	429a      	cmp	r2, r3
 8015274:	d244      	bcs.n	8015300 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	8b5b      	ldrh	r3, [r3, #26]
 801527a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801527e:	2b00      	cmp	r3, #0
 8015280:	d001      	beq.n	8015286 <tcp_receive+0x256>
 8015282:	2301      	movs	r3, #1
 8015284:	e000      	b.n	8015288 <tcp_receive+0x258>
 8015286:	2302      	movs	r3, #2
 8015288:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801528c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8015290:	b29a      	uxth	r2, r3
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015296:	fb12 f303 	smulbb	r3, r2, r3
 801529a:	b29b      	uxth	r3, r3
 801529c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801529e:	4293      	cmp	r3, r2
 80152a0:	bf28      	it	cs
 80152a2:	4613      	movcs	r3, r2
 80152a4:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80152ac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80152ae:	4413      	add	r3, r2
 80152b0:	b29a      	uxth	r2, r3
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80152b8:	429a      	cmp	r2, r3
 80152ba:	d309      	bcc.n	80152d0 <tcp_receive+0x2a0>
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80152c2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80152c4:	4413      	add	r3, r2
 80152c6:	b29a      	uxth	r2, r3
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80152ce:	e060      	b.n	8015392 <tcp_receive+0x362>
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80152d6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80152da:	e05a      	b.n	8015392 <tcp_receive+0x362>
 80152dc:	080207d8 	.word	0x080207d8
 80152e0:	08020b08 	.word	0x08020b08
 80152e4:	08020824 	.word	0x08020824
 80152e8:	08020b24 	.word	0x08020b24
 80152ec:	2000472c 	.word	0x2000472c
 80152f0:	20004720 	.word	0x20004720
 80152f4:	20004724 	.word	0x20004724
 80152f8:	20004710 	.word	0x20004710
 80152fc:	2000472a 	.word	0x2000472a
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8015306:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8015308:	4413      	add	r3, r2
 801530a:	b29a      	uxth	r2, r3
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8015312:	429a      	cmp	r2, r3
 8015314:	d309      	bcc.n	801532a <tcp_receive+0x2fa>
 8015316:	687b      	ldr	r3, [r7, #4]
 8015318:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801531c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801531e:	4413      	add	r3, r2
 8015320:	b29a      	uxth	r2, r3
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8015328:	e004      	b.n	8015334 <tcp_receive+0x304>
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015330:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015340:	429a      	cmp	r2, r3
 8015342:	d326      	bcc.n	8015392 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015350:	1ad3      	subs	r3, r2, r3
 8015352:	b29a      	uxth	r2, r3
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015364:	4413      	add	r3, r2
 8015366:	b29a      	uxth	r2, r3
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801536e:	429a      	cmp	r2, r3
 8015370:	d30a      	bcc.n	8015388 <tcp_receive+0x358>
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801537c:	4413      	add	r3, r2
 801537e:	b29a      	uxth	r2, r3
 8015380:	687b      	ldr	r3, [r7, #4]
 8015382:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8015386:	e004      	b.n	8015392 <tcp_receive+0x362>
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801538e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8015392:	687b      	ldr	r3, [r7, #4]
 8015394:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8015396:	687b      	ldr	r3, [r7, #4]
 8015398:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801539a:	4a98      	ldr	r2, [pc, #608]	; (80155fc <tcp_receive+0x5cc>)
 801539c:	6878      	ldr	r0, [r7, #4]
 801539e:	f7ff fdcb 	bl	8014f38 <tcp_free_acked_segments>
 80153a2:	4602      	mov	r2, r0
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80153b0:	4a93      	ldr	r2, [pc, #588]	; (8015600 <tcp_receive+0x5d0>)
 80153b2:	6878      	ldr	r0, [r7, #4]
 80153b4:	f7ff fdc0 	bl	8014f38 <tcp_free_acked_segments>
 80153b8:	4602      	mov	r2, r0
 80153ba:	687b      	ldr	r3, [r7, #4]
 80153bc:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80153c2:	2b00      	cmp	r3, #0
 80153c4:	d104      	bne.n	80153d0 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80153cc:	861a      	strh	r2, [r3, #48]	; 0x30
 80153ce:	e002      	b.n	80153d6 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	2200      	movs	r2, #0
 80153d4:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	2200      	movs	r2, #0
 80153da:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80153dc:	687b      	ldr	r3, [r7, #4]
 80153de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80153e0:	2b00      	cmp	r3, #0
 80153e2:	d103      	bne.n	80153ec <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	2200      	movs	r2, #0
 80153e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80153f2:	4b84      	ldr	r3, [pc, #528]	; (8015604 <tcp_receive+0x5d4>)
 80153f4:	881b      	ldrh	r3, [r3, #0]
 80153f6:	4413      	add	r3, r2
 80153f8:	b29a      	uxth	r2, r3
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8015400:	687b      	ldr	r3, [r7, #4]
 8015402:	8b5b      	ldrh	r3, [r3, #26]
 8015404:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015408:	2b00      	cmp	r3, #0
 801540a:	d035      	beq.n	8015478 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801540c:	687b      	ldr	r3, [r7, #4]
 801540e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015410:	2b00      	cmp	r3, #0
 8015412:	d118      	bne.n	8015446 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015418:	2b00      	cmp	r3, #0
 801541a:	d00c      	beq.n	8015436 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015424:	68db      	ldr	r3, [r3, #12]
 8015426:	685b      	ldr	r3, [r3, #4]
 8015428:	4618      	mov	r0, r3
 801542a:	f7fa fe5e 	bl	80100ea <lwip_htonl>
 801542e:	4603      	mov	r3, r0
 8015430:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8015432:	2b00      	cmp	r3, #0
 8015434:	dc20      	bgt.n	8015478 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8015436:	687b      	ldr	r3, [r7, #4]
 8015438:	8b5b      	ldrh	r3, [r3, #26]
 801543a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801543e:	b29a      	uxth	r2, r3
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015444:	e018      	b.n	8015478 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801544e:	68db      	ldr	r3, [r3, #12]
 8015450:	685b      	ldr	r3, [r3, #4]
 8015452:	4618      	mov	r0, r3
 8015454:	f7fa fe49 	bl	80100ea <lwip_htonl>
 8015458:	4603      	mov	r3, r0
 801545a:	1ae3      	subs	r3, r4, r3
 801545c:	2b00      	cmp	r3, #0
 801545e:	dc0b      	bgt.n	8015478 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	8b5b      	ldrh	r3, [r3, #26]
 8015464:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8015468:	b29a      	uxth	r2, r3
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801546e:	e003      	b.n	8015478 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8015470:	6878      	ldr	r0, [r7, #4]
 8015472:	f002 fbcd 	bl	8017c10 <tcp_send_empty_ack>
 8015476:	e000      	b.n	801547a <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015478:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801547e:	2b00      	cmp	r3, #0
 8015480:	d05b      	beq.n	801553a <tcp_receive+0x50a>
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015486:	4b60      	ldr	r3, [pc, #384]	; (8015608 <tcp_receive+0x5d8>)
 8015488:	681b      	ldr	r3, [r3, #0]
 801548a:	1ad3      	subs	r3, r2, r3
 801548c:	2b00      	cmp	r3, #0
 801548e:	da54      	bge.n	801553a <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8015490:	4b5e      	ldr	r3, [pc, #376]	; (801560c <tcp_receive+0x5dc>)
 8015492:	681b      	ldr	r3, [r3, #0]
 8015494:	b29a      	uxth	r2, r3
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801549a:	b29b      	uxth	r3, r3
 801549c:	1ad3      	subs	r3, r2, r3
 801549e:	b29b      	uxth	r3, r3
 80154a0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80154a4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80154ae:	10db      	asrs	r3, r3, #3
 80154b0:	b21b      	sxth	r3, r3
 80154b2:	b29b      	uxth	r3, r3
 80154b4:	1ad3      	subs	r3, r2, r3
 80154b6:	b29b      	uxth	r3, r3
 80154b8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80154bc:	687b      	ldr	r3, [r7, #4]
 80154be:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80154c2:	b29a      	uxth	r2, r3
 80154c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80154c8:	4413      	add	r3, r2
 80154ca:	b29b      	uxth	r3, r3
 80154cc:	b21a      	sxth	r2, r3
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80154d2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80154d6:	2b00      	cmp	r3, #0
 80154d8:	da05      	bge.n	80154e6 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 80154da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80154de:	425b      	negs	r3, r3
 80154e0:	b29b      	uxth	r3, r3
 80154e2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80154e6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80154f0:	109b      	asrs	r3, r3, #2
 80154f2:	b21b      	sxth	r3, r3
 80154f4:	b29b      	uxth	r3, r3
 80154f6:	1ad3      	subs	r3, r2, r3
 80154f8:	b29b      	uxth	r3, r3
 80154fa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8015504:	b29a      	uxth	r2, r3
 8015506:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801550a:	4413      	add	r3, r2
 801550c:	b29b      	uxth	r3, r3
 801550e:	b21a      	sxth	r2, r3
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801551a:	10db      	asrs	r3, r3, #3
 801551c:	b21b      	sxth	r3, r3
 801551e:	b29a      	uxth	r2, r3
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8015526:	b29b      	uxth	r3, r3
 8015528:	4413      	add	r3, r2
 801552a:	b29b      	uxth	r3, r3
 801552c:	b21a      	sxth	r2, r3
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	2200      	movs	r2, #0
 8015538:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801553a:	4b35      	ldr	r3, [pc, #212]	; (8015610 <tcp_receive+0x5e0>)
 801553c:	881b      	ldrh	r3, [r3, #0]
 801553e:	2b00      	cmp	r3, #0
 8015540:	f000 84e1 	beq.w	8015f06 <tcp_receive+0xed6>
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	7d1b      	ldrb	r3, [r3, #20]
 8015548:	2b06      	cmp	r3, #6
 801554a:	f200 84dc 	bhi.w	8015f06 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015552:	4b30      	ldr	r3, [pc, #192]	; (8015614 <tcp_receive+0x5e4>)
 8015554:	681b      	ldr	r3, [r3, #0]
 8015556:	1ad3      	subs	r3, r2, r3
 8015558:	3b01      	subs	r3, #1
 801555a:	2b00      	cmp	r3, #0
 801555c:	f2c0 808e 	blt.w	801567c <tcp_receive+0x64c>
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015564:	4b2a      	ldr	r3, [pc, #168]	; (8015610 <tcp_receive+0x5e0>)
 8015566:	881b      	ldrh	r3, [r3, #0]
 8015568:	4619      	mov	r1, r3
 801556a:	4b2a      	ldr	r3, [pc, #168]	; (8015614 <tcp_receive+0x5e4>)
 801556c:	681b      	ldr	r3, [r3, #0]
 801556e:	440b      	add	r3, r1
 8015570:	1ad3      	subs	r3, r2, r3
 8015572:	3301      	adds	r3, #1
 8015574:	2b00      	cmp	r3, #0
 8015576:	f300 8081 	bgt.w	801567c <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801557a:	4b27      	ldr	r3, [pc, #156]	; (8015618 <tcp_receive+0x5e8>)
 801557c:	685b      	ldr	r3, [r3, #4]
 801557e:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015584:	4b23      	ldr	r3, [pc, #140]	; (8015614 <tcp_receive+0x5e4>)
 8015586:	681b      	ldr	r3, [r3, #0]
 8015588:	1ad3      	subs	r3, r2, r3
 801558a:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801558c:	4b22      	ldr	r3, [pc, #136]	; (8015618 <tcp_receive+0x5e8>)
 801558e:	685b      	ldr	r3, [r3, #4]
 8015590:	2b00      	cmp	r3, #0
 8015592:	d106      	bne.n	80155a2 <tcp_receive+0x572>
 8015594:	4b21      	ldr	r3, [pc, #132]	; (801561c <tcp_receive+0x5ec>)
 8015596:	f240 5294 	movw	r2, #1428	; 0x594
 801559a:	4921      	ldr	r1, [pc, #132]	; (8015620 <tcp_receive+0x5f0>)
 801559c:	4821      	ldr	r0, [pc, #132]	; (8015624 <tcp_receive+0x5f4>)
 801559e:	f007 f89f 	bl	801c6e0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80155a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155a4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80155a8:	4293      	cmp	r3, r2
 80155aa:	d906      	bls.n	80155ba <tcp_receive+0x58a>
 80155ac:	4b1b      	ldr	r3, [pc, #108]	; (801561c <tcp_receive+0x5ec>)
 80155ae:	f240 5295 	movw	r2, #1429	; 0x595
 80155b2:	491d      	ldr	r1, [pc, #116]	; (8015628 <tcp_receive+0x5f8>)
 80155b4:	481b      	ldr	r0, [pc, #108]	; (8015624 <tcp_receive+0x5f4>)
 80155b6:	f007 f893 	bl	801c6e0 <iprintf>
      off = (u16_t)off32;
 80155ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155bc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80155c0:	4b15      	ldr	r3, [pc, #84]	; (8015618 <tcp_receive+0x5e8>)
 80155c2:	685b      	ldr	r3, [r3, #4]
 80155c4:	891b      	ldrh	r3, [r3, #8]
 80155c6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80155ca:	429a      	cmp	r2, r3
 80155cc:	d906      	bls.n	80155dc <tcp_receive+0x5ac>
 80155ce:	4b13      	ldr	r3, [pc, #76]	; (801561c <tcp_receive+0x5ec>)
 80155d0:	f240 5297 	movw	r2, #1431	; 0x597
 80155d4:	4915      	ldr	r1, [pc, #84]	; (801562c <tcp_receive+0x5fc>)
 80155d6:	4813      	ldr	r0, [pc, #76]	; (8015624 <tcp_receive+0x5f4>)
 80155d8:	f007 f882 	bl	801c6e0 <iprintf>
      inseg.len -= off;
 80155dc:	4b0e      	ldr	r3, [pc, #56]	; (8015618 <tcp_receive+0x5e8>)
 80155de:	891a      	ldrh	r2, [r3, #8]
 80155e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80155e4:	1ad3      	subs	r3, r2, r3
 80155e6:	b29a      	uxth	r2, r3
 80155e8:	4b0b      	ldr	r3, [pc, #44]	; (8015618 <tcp_receive+0x5e8>)
 80155ea:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80155ec:	4b0a      	ldr	r3, [pc, #40]	; (8015618 <tcp_receive+0x5e8>)
 80155ee:	685b      	ldr	r3, [r3, #4]
 80155f0:	891a      	ldrh	r2, [r3, #8]
 80155f2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80155f6:	1ad3      	subs	r3, r2, r3
 80155f8:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80155fa:	e029      	b.n	8015650 <tcp_receive+0x620>
 80155fc:	08020b40 	.word	0x08020b40
 8015600:	08020b48 	.word	0x08020b48
 8015604:	20004728 	.word	0x20004728
 8015608:	20004724 	.word	0x20004724
 801560c:	2000b620 	.word	0x2000b620
 8015610:	2000472a 	.word	0x2000472a
 8015614:	20004720 	.word	0x20004720
 8015618:	20004700 	.word	0x20004700
 801561c:	080207d8 	.word	0x080207d8
 8015620:	08020b50 	.word	0x08020b50
 8015624:	08020824 	.word	0x08020824
 8015628:	08020b60 	.word	0x08020b60
 801562c:	08020b70 	.word	0x08020b70
        off -= p->len;
 8015630:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015632:	895b      	ldrh	r3, [r3, #10]
 8015634:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015638:	1ad3      	subs	r3, r2, r3
 801563a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801563e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015640:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8015642:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8015644:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015646:	2200      	movs	r2, #0
 8015648:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801564a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801564c:	681b      	ldr	r3, [r3, #0]
 801564e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8015650:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015652:	895b      	ldrh	r3, [r3, #10]
 8015654:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015658:	429a      	cmp	r2, r3
 801565a:	d8e9      	bhi.n	8015630 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801565c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015660:	4619      	mov	r1, r3
 8015662:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8015664:	f7fc f862 	bl	801172c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801566c:	4a91      	ldr	r2, [pc, #580]	; (80158b4 <tcp_receive+0x884>)
 801566e:	6013      	str	r3, [r2, #0]
 8015670:	4b91      	ldr	r3, [pc, #580]	; (80158b8 <tcp_receive+0x888>)
 8015672:	68db      	ldr	r3, [r3, #12]
 8015674:	4a8f      	ldr	r2, [pc, #572]	; (80158b4 <tcp_receive+0x884>)
 8015676:	6812      	ldr	r2, [r2, #0]
 8015678:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801567a:	e00d      	b.n	8015698 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801567c:	4b8d      	ldr	r3, [pc, #564]	; (80158b4 <tcp_receive+0x884>)
 801567e:	681a      	ldr	r2, [r3, #0]
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015684:	1ad3      	subs	r3, r2, r3
 8015686:	2b00      	cmp	r3, #0
 8015688:	da06      	bge.n	8015698 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	8b5b      	ldrh	r3, [r3, #26]
 801568e:	f043 0302 	orr.w	r3, r3, #2
 8015692:	b29a      	uxth	r2, r3
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015698:	4b86      	ldr	r3, [pc, #536]	; (80158b4 <tcp_receive+0x884>)
 801569a:	681a      	ldr	r2, [r3, #0]
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80156a0:	1ad3      	subs	r3, r2, r3
 80156a2:	2b00      	cmp	r3, #0
 80156a4:	f2c0 842a 	blt.w	8015efc <tcp_receive+0xecc>
 80156a8:	4b82      	ldr	r3, [pc, #520]	; (80158b4 <tcp_receive+0x884>)
 80156aa:	681a      	ldr	r2, [r3, #0]
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80156b0:	6879      	ldr	r1, [r7, #4]
 80156b2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80156b4:	440b      	add	r3, r1
 80156b6:	1ad3      	subs	r3, r2, r3
 80156b8:	3301      	adds	r3, #1
 80156ba:	2b00      	cmp	r3, #0
 80156bc:	f300 841e 	bgt.w	8015efc <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80156c4:	4b7b      	ldr	r3, [pc, #492]	; (80158b4 <tcp_receive+0x884>)
 80156c6:	681b      	ldr	r3, [r3, #0]
 80156c8:	429a      	cmp	r2, r3
 80156ca:	f040 829a 	bne.w	8015c02 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80156ce:	4b7a      	ldr	r3, [pc, #488]	; (80158b8 <tcp_receive+0x888>)
 80156d0:	891c      	ldrh	r4, [r3, #8]
 80156d2:	4b79      	ldr	r3, [pc, #484]	; (80158b8 <tcp_receive+0x888>)
 80156d4:	68db      	ldr	r3, [r3, #12]
 80156d6:	899b      	ldrh	r3, [r3, #12]
 80156d8:	b29b      	uxth	r3, r3
 80156da:	4618      	mov	r0, r3
 80156dc:	f7fa fcf0 	bl	80100c0 <lwip_htons>
 80156e0:	4603      	mov	r3, r0
 80156e2:	b2db      	uxtb	r3, r3
 80156e4:	f003 0303 	and.w	r3, r3, #3
 80156e8:	2b00      	cmp	r3, #0
 80156ea:	d001      	beq.n	80156f0 <tcp_receive+0x6c0>
 80156ec:	2301      	movs	r3, #1
 80156ee:	e000      	b.n	80156f2 <tcp_receive+0x6c2>
 80156f0:	2300      	movs	r3, #0
 80156f2:	4423      	add	r3, r4
 80156f4:	b29a      	uxth	r2, r3
 80156f6:	4b71      	ldr	r3, [pc, #452]	; (80158bc <tcp_receive+0x88c>)
 80156f8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80156fa:	687b      	ldr	r3, [r7, #4]
 80156fc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80156fe:	4b6f      	ldr	r3, [pc, #444]	; (80158bc <tcp_receive+0x88c>)
 8015700:	881b      	ldrh	r3, [r3, #0]
 8015702:	429a      	cmp	r2, r3
 8015704:	d275      	bcs.n	80157f2 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015706:	4b6c      	ldr	r3, [pc, #432]	; (80158b8 <tcp_receive+0x888>)
 8015708:	68db      	ldr	r3, [r3, #12]
 801570a:	899b      	ldrh	r3, [r3, #12]
 801570c:	b29b      	uxth	r3, r3
 801570e:	4618      	mov	r0, r3
 8015710:	f7fa fcd6 	bl	80100c0 <lwip_htons>
 8015714:	4603      	mov	r3, r0
 8015716:	b2db      	uxtb	r3, r3
 8015718:	f003 0301 	and.w	r3, r3, #1
 801571c:	2b00      	cmp	r3, #0
 801571e:	d01f      	beq.n	8015760 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8015720:	4b65      	ldr	r3, [pc, #404]	; (80158b8 <tcp_receive+0x888>)
 8015722:	68db      	ldr	r3, [r3, #12]
 8015724:	899b      	ldrh	r3, [r3, #12]
 8015726:	b29b      	uxth	r3, r3
 8015728:	b21b      	sxth	r3, r3
 801572a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801572e:	b21c      	sxth	r4, r3
 8015730:	4b61      	ldr	r3, [pc, #388]	; (80158b8 <tcp_receive+0x888>)
 8015732:	68db      	ldr	r3, [r3, #12]
 8015734:	899b      	ldrh	r3, [r3, #12]
 8015736:	b29b      	uxth	r3, r3
 8015738:	4618      	mov	r0, r3
 801573a:	f7fa fcc1 	bl	80100c0 <lwip_htons>
 801573e:	4603      	mov	r3, r0
 8015740:	b2db      	uxtb	r3, r3
 8015742:	b29b      	uxth	r3, r3
 8015744:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8015748:	b29b      	uxth	r3, r3
 801574a:	4618      	mov	r0, r3
 801574c:	f7fa fcb8 	bl	80100c0 <lwip_htons>
 8015750:	4603      	mov	r3, r0
 8015752:	b21b      	sxth	r3, r3
 8015754:	4323      	orrs	r3, r4
 8015756:	b21a      	sxth	r2, r3
 8015758:	4b57      	ldr	r3, [pc, #348]	; (80158b8 <tcp_receive+0x888>)
 801575a:	68db      	ldr	r3, [r3, #12]
 801575c:	b292      	uxth	r2, r2
 801575e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8015760:	687b      	ldr	r3, [r7, #4]
 8015762:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015764:	4b54      	ldr	r3, [pc, #336]	; (80158b8 <tcp_receive+0x888>)
 8015766:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8015768:	4b53      	ldr	r3, [pc, #332]	; (80158b8 <tcp_receive+0x888>)
 801576a:	68db      	ldr	r3, [r3, #12]
 801576c:	899b      	ldrh	r3, [r3, #12]
 801576e:	b29b      	uxth	r3, r3
 8015770:	4618      	mov	r0, r3
 8015772:	f7fa fca5 	bl	80100c0 <lwip_htons>
 8015776:	4603      	mov	r3, r0
 8015778:	b2db      	uxtb	r3, r3
 801577a:	f003 0302 	and.w	r3, r3, #2
 801577e:	2b00      	cmp	r3, #0
 8015780:	d005      	beq.n	801578e <tcp_receive+0x75e>
            inseg.len -= 1;
 8015782:	4b4d      	ldr	r3, [pc, #308]	; (80158b8 <tcp_receive+0x888>)
 8015784:	891b      	ldrh	r3, [r3, #8]
 8015786:	3b01      	subs	r3, #1
 8015788:	b29a      	uxth	r2, r3
 801578a:	4b4b      	ldr	r3, [pc, #300]	; (80158b8 <tcp_receive+0x888>)
 801578c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801578e:	4b4a      	ldr	r3, [pc, #296]	; (80158b8 <tcp_receive+0x888>)
 8015790:	685b      	ldr	r3, [r3, #4]
 8015792:	4a49      	ldr	r2, [pc, #292]	; (80158b8 <tcp_receive+0x888>)
 8015794:	8912      	ldrh	r2, [r2, #8]
 8015796:	4611      	mov	r1, r2
 8015798:	4618      	mov	r0, r3
 801579a:	f7fb fec7 	bl	801152c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801579e:	4b46      	ldr	r3, [pc, #280]	; (80158b8 <tcp_receive+0x888>)
 80157a0:	891c      	ldrh	r4, [r3, #8]
 80157a2:	4b45      	ldr	r3, [pc, #276]	; (80158b8 <tcp_receive+0x888>)
 80157a4:	68db      	ldr	r3, [r3, #12]
 80157a6:	899b      	ldrh	r3, [r3, #12]
 80157a8:	b29b      	uxth	r3, r3
 80157aa:	4618      	mov	r0, r3
 80157ac:	f7fa fc88 	bl	80100c0 <lwip_htons>
 80157b0:	4603      	mov	r3, r0
 80157b2:	b2db      	uxtb	r3, r3
 80157b4:	f003 0303 	and.w	r3, r3, #3
 80157b8:	2b00      	cmp	r3, #0
 80157ba:	d001      	beq.n	80157c0 <tcp_receive+0x790>
 80157bc:	2301      	movs	r3, #1
 80157be:	e000      	b.n	80157c2 <tcp_receive+0x792>
 80157c0:	2300      	movs	r3, #0
 80157c2:	4423      	add	r3, r4
 80157c4:	b29a      	uxth	r2, r3
 80157c6:	4b3d      	ldr	r3, [pc, #244]	; (80158bc <tcp_receive+0x88c>)
 80157c8:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80157ca:	4b3c      	ldr	r3, [pc, #240]	; (80158bc <tcp_receive+0x88c>)
 80157cc:	881b      	ldrh	r3, [r3, #0]
 80157ce:	461a      	mov	r2, r3
 80157d0:	4b38      	ldr	r3, [pc, #224]	; (80158b4 <tcp_receive+0x884>)
 80157d2:	681b      	ldr	r3, [r3, #0]
 80157d4:	441a      	add	r2, r3
 80157d6:	687b      	ldr	r3, [r7, #4]
 80157d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157da:	6879      	ldr	r1, [r7, #4]
 80157dc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80157de:	440b      	add	r3, r1
 80157e0:	429a      	cmp	r2, r3
 80157e2:	d006      	beq.n	80157f2 <tcp_receive+0x7c2>
 80157e4:	4b36      	ldr	r3, [pc, #216]	; (80158c0 <tcp_receive+0x890>)
 80157e6:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80157ea:	4936      	ldr	r1, [pc, #216]	; (80158c4 <tcp_receive+0x894>)
 80157ec:	4836      	ldr	r0, [pc, #216]	; (80158c8 <tcp_receive+0x898>)
 80157ee:	f006 ff77 	bl	801c6e0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80157f2:	687b      	ldr	r3, [r7, #4]
 80157f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80157f6:	2b00      	cmp	r3, #0
 80157f8:	f000 80e7 	beq.w	80159ca <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80157fc:	4b2e      	ldr	r3, [pc, #184]	; (80158b8 <tcp_receive+0x888>)
 80157fe:	68db      	ldr	r3, [r3, #12]
 8015800:	899b      	ldrh	r3, [r3, #12]
 8015802:	b29b      	uxth	r3, r3
 8015804:	4618      	mov	r0, r3
 8015806:	f7fa fc5b 	bl	80100c0 <lwip_htons>
 801580a:	4603      	mov	r3, r0
 801580c:	b2db      	uxtb	r3, r3
 801580e:	f003 0301 	and.w	r3, r3, #1
 8015812:	2b00      	cmp	r3, #0
 8015814:	d010      	beq.n	8015838 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8015816:	e00a      	b.n	801582e <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801581c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801581e:	687b      	ldr	r3, [r7, #4]
 8015820:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015822:	681a      	ldr	r2, [r3, #0]
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8015828:	68f8      	ldr	r0, [r7, #12]
 801582a:	f7fd fcaa 	bl	8013182 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801582e:	687b      	ldr	r3, [r7, #4]
 8015830:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015832:	2b00      	cmp	r3, #0
 8015834:	d1f0      	bne.n	8015818 <tcp_receive+0x7e8>
 8015836:	e0c8      	b.n	80159ca <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801583c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801583e:	e052      	b.n	80158e6 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8015840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015842:	68db      	ldr	r3, [r3, #12]
 8015844:	899b      	ldrh	r3, [r3, #12]
 8015846:	b29b      	uxth	r3, r3
 8015848:	4618      	mov	r0, r3
 801584a:	f7fa fc39 	bl	80100c0 <lwip_htons>
 801584e:	4603      	mov	r3, r0
 8015850:	b2db      	uxtb	r3, r3
 8015852:	f003 0301 	and.w	r3, r3, #1
 8015856:	2b00      	cmp	r3, #0
 8015858:	d03d      	beq.n	80158d6 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801585a:	4b17      	ldr	r3, [pc, #92]	; (80158b8 <tcp_receive+0x888>)
 801585c:	68db      	ldr	r3, [r3, #12]
 801585e:	899b      	ldrh	r3, [r3, #12]
 8015860:	b29b      	uxth	r3, r3
 8015862:	4618      	mov	r0, r3
 8015864:	f7fa fc2c 	bl	80100c0 <lwip_htons>
 8015868:	4603      	mov	r3, r0
 801586a:	b2db      	uxtb	r3, r3
 801586c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8015870:	2b00      	cmp	r3, #0
 8015872:	d130      	bne.n	80158d6 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8015874:	4b10      	ldr	r3, [pc, #64]	; (80158b8 <tcp_receive+0x888>)
 8015876:	68db      	ldr	r3, [r3, #12]
 8015878:	899b      	ldrh	r3, [r3, #12]
 801587a:	b29c      	uxth	r4, r3
 801587c:	2001      	movs	r0, #1
 801587e:	f7fa fc1f 	bl	80100c0 <lwip_htons>
 8015882:	4603      	mov	r3, r0
 8015884:	461a      	mov	r2, r3
 8015886:	4b0c      	ldr	r3, [pc, #48]	; (80158b8 <tcp_receive+0x888>)
 8015888:	68db      	ldr	r3, [r3, #12]
 801588a:	4322      	orrs	r2, r4
 801588c:	b292      	uxth	r2, r2
 801588e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8015890:	4b09      	ldr	r3, [pc, #36]	; (80158b8 <tcp_receive+0x888>)
 8015892:	891c      	ldrh	r4, [r3, #8]
 8015894:	4b08      	ldr	r3, [pc, #32]	; (80158b8 <tcp_receive+0x888>)
 8015896:	68db      	ldr	r3, [r3, #12]
 8015898:	899b      	ldrh	r3, [r3, #12]
 801589a:	b29b      	uxth	r3, r3
 801589c:	4618      	mov	r0, r3
 801589e:	f7fa fc0f 	bl	80100c0 <lwip_htons>
 80158a2:	4603      	mov	r3, r0
 80158a4:	b2db      	uxtb	r3, r3
 80158a6:	f003 0303 	and.w	r3, r3, #3
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	d00e      	beq.n	80158cc <tcp_receive+0x89c>
 80158ae:	2301      	movs	r3, #1
 80158b0:	e00d      	b.n	80158ce <tcp_receive+0x89e>
 80158b2:	bf00      	nop
 80158b4:	20004720 	.word	0x20004720
 80158b8:	20004700 	.word	0x20004700
 80158bc:	2000472a 	.word	0x2000472a
 80158c0:	080207d8 	.word	0x080207d8
 80158c4:	08020b80 	.word	0x08020b80
 80158c8:	08020824 	.word	0x08020824
 80158cc:	2300      	movs	r3, #0
 80158ce:	4423      	add	r3, r4
 80158d0:	b29a      	uxth	r2, r3
 80158d2:	4b98      	ldr	r3, [pc, #608]	; (8015b34 <tcp_receive+0xb04>)
 80158d4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80158d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80158d8:	613b      	str	r3, [r7, #16]
              next = next->next;
 80158da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80158dc:	681b      	ldr	r3, [r3, #0]
 80158de:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80158e0:	6938      	ldr	r0, [r7, #16]
 80158e2:	f7fd fc4e 	bl	8013182 <tcp_seg_free>
            while (next &&
 80158e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80158e8:	2b00      	cmp	r3, #0
 80158ea:	d00e      	beq.n	801590a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80158ec:	4b91      	ldr	r3, [pc, #580]	; (8015b34 <tcp_receive+0xb04>)
 80158ee:	881b      	ldrh	r3, [r3, #0]
 80158f0:	461a      	mov	r2, r3
 80158f2:	4b91      	ldr	r3, [pc, #580]	; (8015b38 <tcp_receive+0xb08>)
 80158f4:	681b      	ldr	r3, [r3, #0]
 80158f6:	441a      	add	r2, r3
 80158f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80158fa:	68db      	ldr	r3, [r3, #12]
 80158fc:	685b      	ldr	r3, [r3, #4]
 80158fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015900:	8909      	ldrh	r1, [r1, #8]
 8015902:	440b      	add	r3, r1
 8015904:	1ad3      	subs	r3, r2, r3
            while (next &&
 8015906:	2b00      	cmp	r3, #0
 8015908:	da9a      	bge.n	8015840 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801590a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801590c:	2b00      	cmp	r3, #0
 801590e:	d059      	beq.n	80159c4 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8015910:	4b88      	ldr	r3, [pc, #544]	; (8015b34 <tcp_receive+0xb04>)
 8015912:	881b      	ldrh	r3, [r3, #0]
 8015914:	461a      	mov	r2, r3
 8015916:	4b88      	ldr	r3, [pc, #544]	; (8015b38 <tcp_receive+0xb08>)
 8015918:	681b      	ldr	r3, [r3, #0]
 801591a:	441a      	add	r2, r3
 801591c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801591e:	68db      	ldr	r3, [r3, #12]
 8015920:	685b      	ldr	r3, [r3, #4]
 8015922:	1ad3      	subs	r3, r2, r3
            if (next &&
 8015924:	2b00      	cmp	r3, #0
 8015926:	dd4d      	ble.n	80159c4 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8015928:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801592a:	68db      	ldr	r3, [r3, #12]
 801592c:	685b      	ldr	r3, [r3, #4]
 801592e:	b29a      	uxth	r2, r3
 8015930:	4b81      	ldr	r3, [pc, #516]	; (8015b38 <tcp_receive+0xb08>)
 8015932:	681b      	ldr	r3, [r3, #0]
 8015934:	b29b      	uxth	r3, r3
 8015936:	1ad3      	subs	r3, r2, r3
 8015938:	b29a      	uxth	r2, r3
 801593a:	4b80      	ldr	r3, [pc, #512]	; (8015b3c <tcp_receive+0xb0c>)
 801593c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801593e:	4b7f      	ldr	r3, [pc, #508]	; (8015b3c <tcp_receive+0xb0c>)
 8015940:	68db      	ldr	r3, [r3, #12]
 8015942:	899b      	ldrh	r3, [r3, #12]
 8015944:	b29b      	uxth	r3, r3
 8015946:	4618      	mov	r0, r3
 8015948:	f7fa fbba 	bl	80100c0 <lwip_htons>
 801594c:	4603      	mov	r3, r0
 801594e:	b2db      	uxtb	r3, r3
 8015950:	f003 0302 	and.w	r3, r3, #2
 8015954:	2b00      	cmp	r3, #0
 8015956:	d005      	beq.n	8015964 <tcp_receive+0x934>
                inseg.len -= 1;
 8015958:	4b78      	ldr	r3, [pc, #480]	; (8015b3c <tcp_receive+0xb0c>)
 801595a:	891b      	ldrh	r3, [r3, #8]
 801595c:	3b01      	subs	r3, #1
 801595e:	b29a      	uxth	r2, r3
 8015960:	4b76      	ldr	r3, [pc, #472]	; (8015b3c <tcp_receive+0xb0c>)
 8015962:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8015964:	4b75      	ldr	r3, [pc, #468]	; (8015b3c <tcp_receive+0xb0c>)
 8015966:	685b      	ldr	r3, [r3, #4]
 8015968:	4a74      	ldr	r2, [pc, #464]	; (8015b3c <tcp_receive+0xb0c>)
 801596a:	8912      	ldrh	r2, [r2, #8]
 801596c:	4611      	mov	r1, r2
 801596e:	4618      	mov	r0, r3
 8015970:	f7fb fddc 	bl	801152c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8015974:	4b71      	ldr	r3, [pc, #452]	; (8015b3c <tcp_receive+0xb0c>)
 8015976:	891c      	ldrh	r4, [r3, #8]
 8015978:	4b70      	ldr	r3, [pc, #448]	; (8015b3c <tcp_receive+0xb0c>)
 801597a:	68db      	ldr	r3, [r3, #12]
 801597c:	899b      	ldrh	r3, [r3, #12]
 801597e:	b29b      	uxth	r3, r3
 8015980:	4618      	mov	r0, r3
 8015982:	f7fa fb9d 	bl	80100c0 <lwip_htons>
 8015986:	4603      	mov	r3, r0
 8015988:	b2db      	uxtb	r3, r3
 801598a:	f003 0303 	and.w	r3, r3, #3
 801598e:	2b00      	cmp	r3, #0
 8015990:	d001      	beq.n	8015996 <tcp_receive+0x966>
 8015992:	2301      	movs	r3, #1
 8015994:	e000      	b.n	8015998 <tcp_receive+0x968>
 8015996:	2300      	movs	r3, #0
 8015998:	4423      	add	r3, r4
 801599a:	b29a      	uxth	r2, r3
 801599c:	4b65      	ldr	r3, [pc, #404]	; (8015b34 <tcp_receive+0xb04>)
 801599e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80159a0:	4b64      	ldr	r3, [pc, #400]	; (8015b34 <tcp_receive+0xb04>)
 80159a2:	881b      	ldrh	r3, [r3, #0]
 80159a4:	461a      	mov	r2, r3
 80159a6:	4b64      	ldr	r3, [pc, #400]	; (8015b38 <tcp_receive+0xb08>)
 80159a8:	681b      	ldr	r3, [r3, #0]
 80159aa:	441a      	add	r2, r3
 80159ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80159ae:	68db      	ldr	r3, [r3, #12]
 80159b0:	685b      	ldr	r3, [r3, #4]
 80159b2:	429a      	cmp	r2, r3
 80159b4:	d006      	beq.n	80159c4 <tcp_receive+0x994>
 80159b6:	4b62      	ldr	r3, [pc, #392]	; (8015b40 <tcp_receive+0xb10>)
 80159b8:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80159bc:	4961      	ldr	r1, [pc, #388]	; (8015b44 <tcp_receive+0xb14>)
 80159be:	4862      	ldr	r0, [pc, #392]	; (8015b48 <tcp_receive+0xb18>)
 80159c0:	f006 fe8e 	bl	801c6e0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80159c8:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80159ca:	4b5a      	ldr	r3, [pc, #360]	; (8015b34 <tcp_receive+0xb04>)
 80159cc:	881b      	ldrh	r3, [r3, #0]
 80159ce:	461a      	mov	r2, r3
 80159d0:	4b59      	ldr	r3, [pc, #356]	; (8015b38 <tcp_receive+0xb08>)
 80159d2:	681b      	ldr	r3, [r3, #0]
 80159d4:	441a      	add	r2, r3
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80159de:	4b55      	ldr	r3, [pc, #340]	; (8015b34 <tcp_receive+0xb04>)
 80159e0:	881b      	ldrh	r3, [r3, #0]
 80159e2:	429a      	cmp	r2, r3
 80159e4:	d206      	bcs.n	80159f4 <tcp_receive+0x9c4>
 80159e6:	4b56      	ldr	r3, [pc, #344]	; (8015b40 <tcp_receive+0xb10>)
 80159e8:	f240 6207 	movw	r2, #1543	; 0x607
 80159ec:	4957      	ldr	r1, [pc, #348]	; (8015b4c <tcp_receive+0xb1c>)
 80159ee:	4856      	ldr	r0, [pc, #344]	; (8015b48 <tcp_receive+0xb18>)
 80159f0:	f006 fe76 	bl	801c6e0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80159f8:	4b4e      	ldr	r3, [pc, #312]	; (8015b34 <tcp_receive+0xb04>)
 80159fa:	881b      	ldrh	r3, [r3, #0]
 80159fc:	1ad3      	subs	r3, r2, r3
 80159fe:	b29a      	uxth	r2, r3
 8015a00:	687b      	ldr	r3, [r7, #4]
 8015a02:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8015a04:	6878      	ldr	r0, [r7, #4]
 8015a06:	f7fc fe97 	bl	8012738 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8015a0a:	4b4c      	ldr	r3, [pc, #304]	; (8015b3c <tcp_receive+0xb0c>)
 8015a0c:	685b      	ldr	r3, [r3, #4]
 8015a0e:	891b      	ldrh	r3, [r3, #8]
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	d006      	beq.n	8015a22 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8015a14:	4b49      	ldr	r3, [pc, #292]	; (8015b3c <tcp_receive+0xb0c>)
 8015a16:	685b      	ldr	r3, [r3, #4]
 8015a18:	4a4d      	ldr	r2, [pc, #308]	; (8015b50 <tcp_receive+0xb20>)
 8015a1a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8015a1c:	4b47      	ldr	r3, [pc, #284]	; (8015b3c <tcp_receive+0xb0c>)
 8015a1e:	2200      	movs	r2, #0
 8015a20:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015a22:	4b46      	ldr	r3, [pc, #280]	; (8015b3c <tcp_receive+0xb0c>)
 8015a24:	68db      	ldr	r3, [r3, #12]
 8015a26:	899b      	ldrh	r3, [r3, #12]
 8015a28:	b29b      	uxth	r3, r3
 8015a2a:	4618      	mov	r0, r3
 8015a2c:	f7fa fb48 	bl	80100c0 <lwip_htons>
 8015a30:	4603      	mov	r3, r0
 8015a32:	b2db      	uxtb	r3, r3
 8015a34:	f003 0301 	and.w	r3, r3, #1
 8015a38:	2b00      	cmp	r3, #0
 8015a3a:	f000 80b8 	beq.w	8015bae <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8015a3e:	4b45      	ldr	r3, [pc, #276]	; (8015b54 <tcp_receive+0xb24>)
 8015a40:	781b      	ldrb	r3, [r3, #0]
 8015a42:	f043 0320 	orr.w	r3, r3, #32
 8015a46:	b2da      	uxtb	r2, r3
 8015a48:	4b42      	ldr	r3, [pc, #264]	; (8015b54 <tcp_receive+0xb24>)
 8015a4a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8015a4c:	e0af      	b.n	8015bae <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015a52:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8015a54:	687b      	ldr	r3, [r7, #4]
 8015a56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015a58:	68db      	ldr	r3, [r3, #12]
 8015a5a:	685b      	ldr	r3, [r3, #4]
 8015a5c:	4a36      	ldr	r2, [pc, #216]	; (8015b38 <tcp_receive+0xb08>)
 8015a5e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8015a60:	68bb      	ldr	r3, [r7, #8]
 8015a62:	891b      	ldrh	r3, [r3, #8]
 8015a64:	461c      	mov	r4, r3
 8015a66:	68bb      	ldr	r3, [r7, #8]
 8015a68:	68db      	ldr	r3, [r3, #12]
 8015a6a:	899b      	ldrh	r3, [r3, #12]
 8015a6c:	b29b      	uxth	r3, r3
 8015a6e:	4618      	mov	r0, r3
 8015a70:	f7fa fb26 	bl	80100c0 <lwip_htons>
 8015a74:	4603      	mov	r3, r0
 8015a76:	b2db      	uxtb	r3, r3
 8015a78:	f003 0303 	and.w	r3, r3, #3
 8015a7c:	2b00      	cmp	r3, #0
 8015a7e:	d001      	beq.n	8015a84 <tcp_receive+0xa54>
 8015a80:	2301      	movs	r3, #1
 8015a82:	e000      	b.n	8015a86 <tcp_receive+0xa56>
 8015a84:	2300      	movs	r3, #0
 8015a86:	191a      	adds	r2, r3, r4
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a8c:	441a      	add	r2, r3
 8015a8e:	687b      	ldr	r3, [r7, #4]
 8015a90:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015a96:	461c      	mov	r4, r3
 8015a98:	68bb      	ldr	r3, [r7, #8]
 8015a9a:	891b      	ldrh	r3, [r3, #8]
 8015a9c:	461d      	mov	r5, r3
 8015a9e:	68bb      	ldr	r3, [r7, #8]
 8015aa0:	68db      	ldr	r3, [r3, #12]
 8015aa2:	899b      	ldrh	r3, [r3, #12]
 8015aa4:	b29b      	uxth	r3, r3
 8015aa6:	4618      	mov	r0, r3
 8015aa8:	f7fa fb0a 	bl	80100c0 <lwip_htons>
 8015aac:	4603      	mov	r3, r0
 8015aae:	b2db      	uxtb	r3, r3
 8015ab0:	f003 0303 	and.w	r3, r3, #3
 8015ab4:	2b00      	cmp	r3, #0
 8015ab6:	d001      	beq.n	8015abc <tcp_receive+0xa8c>
 8015ab8:	2301      	movs	r3, #1
 8015aba:	e000      	b.n	8015abe <tcp_receive+0xa8e>
 8015abc:	2300      	movs	r3, #0
 8015abe:	442b      	add	r3, r5
 8015ac0:	429c      	cmp	r4, r3
 8015ac2:	d206      	bcs.n	8015ad2 <tcp_receive+0xaa2>
 8015ac4:	4b1e      	ldr	r3, [pc, #120]	; (8015b40 <tcp_receive+0xb10>)
 8015ac6:	f240 622b 	movw	r2, #1579	; 0x62b
 8015aca:	4923      	ldr	r1, [pc, #140]	; (8015b58 <tcp_receive+0xb28>)
 8015acc:	481e      	ldr	r0, [pc, #120]	; (8015b48 <tcp_receive+0xb18>)
 8015ace:	f006 fe07 	bl	801c6e0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8015ad2:	68bb      	ldr	r3, [r7, #8]
 8015ad4:	891b      	ldrh	r3, [r3, #8]
 8015ad6:	461c      	mov	r4, r3
 8015ad8:	68bb      	ldr	r3, [r7, #8]
 8015ada:	68db      	ldr	r3, [r3, #12]
 8015adc:	899b      	ldrh	r3, [r3, #12]
 8015ade:	b29b      	uxth	r3, r3
 8015ae0:	4618      	mov	r0, r3
 8015ae2:	f7fa faed 	bl	80100c0 <lwip_htons>
 8015ae6:	4603      	mov	r3, r0
 8015ae8:	b2db      	uxtb	r3, r3
 8015aea:	f003 0303 	and.w	r3, r3, #3
 8015aee:	2b00      	cmp	r3, #0
 8015af0:	d001      	beq.n	8015af6 <tcp_receive+0xac6>
 8015af2:	2301      	movs	r3, #1
 8015af4:	e000      	b.n	8015af8 <tcp_receive+0xac8>
 8015af6:	2300      	movs	r3, #0
 8015af8:	1919      	adds	r1, r3, r4
 8015afa:	687b      	ldr	r3, [r7, #4]
 8015afc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015afe:	b28b      	uxth	r3, r1
 8015b00:	1ad3      	subs	r3, r2, r3
 8015b02:	b29a      	uxth	r2, r3
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8015b08:	6878      	ldr	r0, [r7, #4]
 8015b0a:	f7fc fe15 	bl	8012738 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8015b0e:	68bb      	ldr	r3, [r7, #8]
 8015b10:	685b      	ldr	r3, [r3, #4]
 8015b12:	891b      	ldrh	r3, [r3, #8]
 8015b14:	2b00      	cmp	r3, #0
 8015b16:	d028      	beq.n	8015b6a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8015b18:	4b0d      	ldr	r3, [pc, #52]	; (8015b50 <tcp_receive+0xb20>)
 8015b1a:	681b      	ldr	r3, [r3, #0]
 8015b1c:	2b00      	cmp	r3, #0
 8015b1e:	d01d      	beq.n	8015b5c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8015b20:	4b0b      	ldr	r3, [pc, #44]	; (8015b50 <tcp_receive+0xb20>)
 8015b22:	681a      	ldr	r2, [r3, #0]
 8015b24:	68bb      	ldr	r3, [r7, #8]
 8015b26:	685b      	ldr	r3, [r3, #4]
 8015b28:	4619      	mov	r1, r3
 8015b2a:	4610      	mov	r0, r2
 8015b2c:	f7fb ff52 	bl	80119d4 <pbuf_cat>
 8015b30:	e018      	b.n	8015b64 <tcp_receive+0xb34>
 8015b32:	bf00      	nop
 8015b34:	2000472a 	.word	0x2000472a
 8015b38:	20004720 	.word	0x20004720
 8015b3c:	20004700 	.word	0x20004700
 8015b40:	080207d8 	.word	0x080207d8
 8015b44:	08020bb8 	.word	0x08020bb8
 8015b48:	08020824 	.word	0x08020824
 8015b4c:	08020bf4 	.word	0x08020bf4
 8015b50:	20004730 	.word	0x20004730
 8015b54:	2000472d 	.word	0x2000472d
 8015b58:	08020c14 	.word	0x08020c14
            } else {
              recv_data = cseg->p;
 8015b5c:	68bb      	ldr	r3, [r7, #8]
 8015b5e:	685b      	ldr	r3, [r3, #4]
 8015b60:	4a70      	ldr	r2, [pc, #448]	; (8015d24 <tcp_receive+0xcf4>)
 8015b62:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8015b64:	68bb      	ldr	r3, [r7, #8]
 8015b66:	2200      	movs	r2, #0
 8015b68:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8015b6a:	68bb      	ldr	r3, [r7, #8]
 8015b6c:	68db      	ldr	r3, [r3, #12]
 8015b6e:	899b      	ldrh	r3, [r3, #12]
 8015b70:	b29b      	uxth	r3, r3
 8015b72:	4618      	mov	r0, r3
 8015b74:	f7fa faa4 	bl	80100c0 <lwip_htons>
 8015b78:	4603      	mov	r3, r0
 8015b7a:	b2db      	uxtb	r3, r3
 8015b7c:	f003 0301 	and.w	r3, r3, #1
 8015b80:	2b00      	cmp	r3, #0
 8015b82:	d00d      	beq.n	8015ba0 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8015b84:	4b68      	ldr	r3, [pc, #416]	; (8015d28 <tcp_receive+0xcf8>)
 8015b86:	781b      	ldrb	r3, [r3, #0]
 8015b88:	f043 0320 	orr.w	r3, r3, #32
 8015b8c:	b2da      	uxtb	r2, r3
 8015b8e:	4b66      	ldr	r3, [pc, #408]	; (8015d28 <tcp_receive+0xcf8>)
 8015b90:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8015b92:	687b      	ldr	r3, [r7, #4]
 8015b94:	7d1b      	ldrb	r3, [r3, #20]
 8015b96:	2b04      	cmp	r3, #4
 8015b98:	d102      	bne.n	8015ba0 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8015b9a:	687b      	ldr	r3, [r7, #4]
 8015b9c:	2207      	movs	r2, #7
 8015b9e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8015ba0:	68bb      	ldr	r3, [r7, #8]
 8015ba2:	681a      	ldr	r2, [r3, #0]
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8015ba8:	68b8      	ldr	r0, [r7, #8]
 8015baa:	f7fd faea 	bl	8013182 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8015bae:	687b      	ldr	r3, [r7, #4]
 8015bb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015bb2:	2b00      	cmp	r3, #0
 8015bb4:	d008      	beq.n	8015bc8 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015bba:	68db      	ldr	r3, [r3, #12]
 8015bbc:	685a      	ldr	r2, [r3, #4]
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8015bc2:	429a      	cmp	r2, r3
 8015bc4:	f43f af43 	beq.w	8015a4e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8015bc8:	687b      	ldr	r3, [r7, #4]
 8015bca:	8b5b      	ldrh	r3, [r3, #26]
 8015bcc:	f003 0301 	and.w	r3, r3, #1
 8015bd0:	2b00      	cmp	r3, #0
 8015bd2:	d00e      	beq.n	8015bf2 <tcp_receive+0xbc2>
 8015bd4:	687b      	ldr	r3, [r7, #4]
 8015bd6:	8b5b      	ldrh	r3, [r3, #26]
 8015bd8:	f023 0301 	bic.w	r3, r3, #1
 8015bdc:	b29a      	uxth	r2, r3
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	835a      	strh	r2, [r3, #26]
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	8b5b      	ldrh	r3, [r3, #26]
 8015be6:	f043 0302 	orr.w	r3, r3, #2
 8015bea:	b29a      	uxth	r2, r3
 8015bec:	687b      	ldr	r3, [r7, #4]
 8015bee:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8015bf0:	e188      	b.n	8015f04 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8015bf2:	687b      	ldr	r3, [r7, #4]
 8015bf4:	8b5b      	ldrh	r3, [r3, #26]
 8015bf6:	f043 0301 	orr.w	r3, r3, #1
 8015bfa:	b29a      	uxth	r2, r3
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8015c00:	e180      	b.n	8015f04 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015c06:	2b00      	cmp	r3, #0
 8015c08:	d106      	bne.n	8015c18 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8015c0a:	4848      	ldr	r0, [pc, #288]	; (8015d2c <tcp_receive+0xcfc>)
 8015c0c:	f7fd faf0 	bl	80131f0 <tcp_seg_copy>
 8015c10:	4602      	mov	r2, r0
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	675a      	str	r2, [r3, #116]	; 0x74
 8015c16:	e16d      	b.n	8015ef4 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8015c18:	2300      	movs	r3, #0
 8015c1a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015c20:	63bb      	str	r3, [r7, #56]	; 0x38
 8015c22:	e157      	b.n	8015ed4 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8015c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c26:	68db      	ldr	r3, [r3, #12]
 8015c28:	685a      	ldr	r2, [r3, #4]
 8015c2a:	4b41      	ldr	r3, [pc, #260]	; (8015d30 <tcp_receive+0xd00>)
 8015c2c:	681b      	ldr	r3, [r3, #0]
 8015c2e:	429a      	cmp	r2, r3
 8015c30:	d11d      	bne.n	8015c6e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8015c32:	4b3e      	ldr	r3, [pc, #248]	; (8015d2c <tcp_receive+0xcfc>)
 8015c34:	891a      	ldrh	r2, [r3, #8]
 8015c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c38:	891b      	ldrh	r3, [r3, #8]
 8015c3a:	429a      	cmp	r2, r3
 8015c3c:	f240 814f 	bls.w	8015ede <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8015c40:	483a      	ldr	r0, [pc, #232]	; (8015d2c <tcp_receive+0xcfc>)
 8015c42:	f7fd fad5 	bl	80131f0 <tcp_seg_copy>
 8015c46:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8015c48:	697b      	ldr	r3, [r7, #20]
 8015c4a:	2b00      	cmp	r3, #0
 8015c4c:	f000 8149 	beq.w	8015ee2 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8015c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	d003      	beq.n	8015c5e <tcp_receive+0xc2e>
                    prev->next = cseg;
 8015c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015c58:	697a      	ldr	r2, [r7, #20]
 8015c5a:	601a      	str	r2, [r3, #0]
 8015c5c:	e002      	b.n	8015c64 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	697a      	ldr	r2, [r7, #20]
 8015c62:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8015c64:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8015c66:	6978      	ldr	r0, [r7, #20]
 8015c68:	f7ff f8de 	bl	8014e28 <tcp_oos_insert_segment>
                }
                break;
 8015c6c:	e139      	b.n	8015ee2 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8015c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015c70:	2b00      	cmp	r3, #0
 8015c72:	d117      	bne.n	8015ca4 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8015c74:	4b2e      	ldr	r3, [pc, #184]	; (8015d30 <tcp_receive+0xd00>)
 8015c76:	681a      	ldr	r2, [r3, #0]
 8015c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c7a:	68db      	ldr	r3, [r3, #12]
 8015c7c:	685b      	ldr	r3, [r3, #4]
 8015c7e:	1ad3      	subs	r3, r2, r3
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	da57      	bge.n	8015d34 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8015c84:	4829      	ldr	r0, [pc, #164]	; (8015d2c <tcp_receive+0xcfc>)
 8015c86:	f7fd fab3 	bl	80131f0 <tcp_seg_copy>
 8015c8a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8015c8c:	69bb      	ldr	r3, [r7, #24]
 8015c8e:	2b00      	cmp	r3, #0
 8015c90:	f000 8129 	beq.w	8015ee6 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8015c94:	687b      	ldr	r3, [r7, #4]
 8015c96:	69ba      	ldr	r2, [r7, #24]
 8015c98:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8015c9a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8015c9c:	69b8      	ldr	r0, [r7, #24]
 8015c9e:	f7ff f8c3 	bl	8014e28 <tcp_oos_insert_segment>
                  }
                  break;
 8015ca2:	e120      	b.n	8015ee6 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8015ca4:	4b22      	ldr	r3, [pc, #136]	; (8015d30 <tcp_receive+0xd00>)
 8015ca6:	681a      	ldr	r2, [r3, #0]
 8015ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015caa:	68db      	ldr	r3, [r3, #12]
 8015cac:	685b      	ldr	r3, [r3, #4]
 8015cae:	1ad3      	subs	r3, r2, r3
 8015cb0:	3b01      	subs	r3, #1
 8015cb2:	2b00      	cmp	r3, #0
 8015cb4:	db3e      	blt.n	8015d34 <tcp_receive+0xd04>
 8015cb6:	4b1e      	ldr	r3, [pc, #120]	; (8015d30 <tcp_receive+0xd00>)
 8015cb8:	681a      	ldr	r2, [r3, #0]
 8015cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015cbc:	68db      	ldr	r3, [r3, #12]
 8015cbe:	685b      	ldr	r3, [r3, #4]
 8015cc0:	1ad3      	subs	r3, r2, r3
 8015cc2:	3301      	adds	r3, #1
 8015cc4:	2b00      	cmp	r3, #0
 8015cc6:	dc35      	bgt.n	8015d34 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8015cc8:	4818      	ldr	r0, [pc, #96]	; (8015d2c <tcp_receive+0xcfc>)
 8015cca:	f7fd fa91 	bl	80131f0 <tcp_seg_copy>
 8015cce:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8015cd0:	69fb      	ldr	r3, [r7, #28]
 8015cd2:	2b00      	cmp	r3, #0
 8015cd4:	f000 8109 	beq.w	8015eea <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8015cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015cda:	68db      	ldr	r3, [r3, #12]
 8015cdc:	685b      	ldr	r3, [r3, #4]
 8015cde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015ce0:	8912      	ldrh	r2, [r2, #8]
 8015ce2:	441a      	add	r2, r3
 8015ce4:	4b12      	ldr	r3, [pc, #72]	; (8015d30 <tcp_receive+0xd00>)
 8015ce6:	681b      	ldr	r3, [r3, #0]
 8015ce8:	1ad3      	subs	r3, r2, r3
 8015cea:	2b00      	cmp	r3, #0
 8015cec:	dd12      	ble.n	8015d14 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8015cee:	4b10      	ldr	r3, [pc, #64]	; (8015d30 <tcp_receive+0xd00>)
 8015cf0:	681b      	ldr	r3, [r3, #0]
 8015cf2:	b29a      	uxth	r2, r3
 8015cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015cf6:	68db      	ldr	r3, [r3, #12]
 8015cf8:	685b      	ldr	r3, [r3, #4]
 8015cfa:	b29b      	uxth	r3, r3
 8015cfc:	1ad3      	subs	r3, r2, r3
 8015cfe:	b29a      	uxth	r2, r3
 8015d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015d02:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8015d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015d06:	685a      	ldr	r2, [r3, #4]
 8015d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015d0a:	891b      	ldrh	r3, [r3, #8]
 8015d0c:	4619      	mov	r1, r3
 8015d0e:	4610      	mov	r0, r2
 8015d10:	f7fb fc0c 	bl	801152c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8015d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015d16:	69fa      	ldr	r2, [r7, #28]
 8015d18:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8015d1a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8015d1c:	69f8      	ldr	r0, [r7, #28]
 8015d1e:	f7ff f883 	bl	8014e28 <tcp_oos_insert_segment>
                  }
                  break;
 8015d22:	e0e2      	b.n	8015eea <tcp_receive+0xeba>
 8015d24:	20004730 	.word	0x20004730
 8015d28:	2000472d 	.word	0x2000472d
 8015d2c:	20004700 	.word	0x20004700
 8015d30:	20004720 	.word	0x20004720
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8015d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d36:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8015d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d3a:	681b      	ldr	r3, [r3, #0]
 8015d3c:	2b00      	cmp	r3, #0
 8015d3e:	f040 80c6 	bne.w	8015ece <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8015d42:	4b80      	ldr	r3, [pc, #512]	; (8015f44 <tcp_receive+0xf14>)
 8015d44:	681a      	ldr	r2, [r3, #0]
 8015d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d48:	68db      	ldr	r3, [r3, #12]
 8015d4a:	685b      	ldr	r3, [r3, #4]
 8015d4c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8015d4e:	2b00      	cmp	r3, #0
 8015d50:	f340 80bd 	ble.w	8015ece <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8015d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d56:	68db      	ldr	r3, [r3, #12]
 8015d58:	899b      	ldrh	r3, [r3, #12]
 8015d5a:	b29b      	uxth	r3, r3
 8015d5c:	4618      	mov	r0, r3
 8015d5e:	f7fa f9af 	bl	80100c0 <lwip_htons>
 8015d62:	4603      	mov	r3, r0
 8015d64:	b2db      	uxtb	r3, r3
 8015d66:	f003 0301 	and.w	r3, r3, #1
 8015d6a:	2b00      	cmp	r3, #0
 8015d6c:	f040 80bf 	bne.w	8015eee <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8015d70:	4875      	ldr	r0, [pc, #468]	; (8015f48 <tcp_receive+0xf18>)
 8015d72:	f7fd fa3d 	bl	80131f0 <tcp_seg_copy>
 8015d76:	4602      	mov	r2, r0
 8015d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d7a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8015d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d7e:	681b      	ldr	r3, [r3, #0]
 8015d80:	2b00      	cmp	r3, #0
 8015d82:	f000 80b6 	beq.w	8015ef2 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8015d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d88:	68db      	ldr	r3, [r3, #12]
 8015d8a:	685b      	ldr	r3, [r3, #4]
 8015d8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015d8e:	8912      	ldrh	r2, [r2, #8]
 8015d90:	441a      	add	r2, r3
 8015d92:	4b6c      	ldr	r3, [pc, #432]	; (8015f44 <tcp_receive+0xf14>)
 8015d94:	681b      	ldr	r3, [r3, #0]
 8015d96:	1ad3      	subs	r3, r2, r3
 8015d98:	2b00      	cmp	r3, #0
 8015d9a:	dd12      	ble.n	8015dc2 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8015d9c:	4b69      	ldr	r3, [pc, #420]	; (8015f44 <tcp_receive+0xf14>)
 8015d9e:	681b      	ldr	r3, [r3, #0]
 8015da0:	b29a      	uxth	r2, r3
 8015da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015da4:	68db      	ldr	r3, [r3, #12]
 8015da6:	685b      	ldr	r3, [r3, #4]
 8015da8:	b29b      	uxth	r3, r3
 8015daa:	1ad3      	subs	r3, r2, r3
 8015dac:	b29a      	uxth	r2, r3
 8015dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015db0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8015db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015db4:	685a      	ldr	r2, [r3, #4]
 8015db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015db8:	891b      	ldrh	r3, [r3, #8]
 8015dba:	4619      	mov	r1, r3
 8015dbc:	4610      	mov	r0, r2
 8015dbe:	f7fb fbb5 	bl	801152c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8015dc2:	4b62      	ldr	r3, [pc, #392]	; (8015f4c <tcp_receive+0xf1c>)
 8015dc4:	881b      	ldrh	r3, [r3, #0]
 8015dc6:	461a      	mov	r2, r3
 8015dc8:	4b5e      	ldr	r3, [pc, #376]	; (8015f44 <tcp_receive+0xf14>)
 8015dca:	681b      	ldr	r3, [r3, #0]
 8015dcc:	441a      	add	r2, r3
 8015dce:	687b      	ldr	r3, [r7, #4]
 8015dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015dd2:	6879      	ldr	r1, [r7, #4]
 8015dd4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015dd6:	440b      	add	r3, r1
 8015dd8:	1ad3      	subs	r3, r2, r3
 8015dda:	2b00      	cmp	r3, #0
 8015ddc:	f340 8089 	ble.w	8015ef2 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8015de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015de2:	681b      	ldr	r3, [r3, #0]
 8015de4:	68db      	ldr	r3, [r3, #12]
 8015de6:	899b      	ldrh	r3, [r3, #12]
 8015de8:	b29b      	uxth	r3, r3
 8015dea:	4618      	mov	r0, r3
 8015dec:	f7fa f968 	bl	80100c0 <lwip_htons>
 8015df0:	4603      	mov	r3, r0
 8015df2:	b2db      	uxtb	r3, r3
 8015df4:	f003 0301 	and.w	r3, r3, #1
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	d022      	beq.n	8015e42 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8015dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015dfe:	681b      	ldr	r3, [r3, #0]
 8015e00:	68db      	ldr	r3, [r3, #12]
 8015e02:	899b      	ldrh	r3, [r3, #12]
 8015e04:	b29b      	uxth	r3, r3
 8015e06:	b21b      	sxth	r3, r3
 8015e08:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8015e0c:	b21c      	sxth	r4, r3
 8015e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e10:	681b      	ldr	r3, [r3, #0]
 8015e12:	68db      	ldr	r3, [r3, #12]
 8015e14:	899b      	ldrh	r3, [r3, #12]
 8015e16:	b29b      	uxth	r3, r3
 8015e18:	4618      	mov	r0, r3
 8015e1a:	f7fa f951 	bl	80100c0 <lwip_htons>
 8015e1e:	4603      	mov	r3, r0
 8015e20:	b2db      	uxtb	r3, r3
 8015e22:	b29b      	uxth	r3, r3
 8015e24:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8015e28:	b29b      	uxth	r3, r3
 8015e2a:	4618      	mov	r0, r3
 8015e2c:	f7fa f948 	bl	80100c0 <lwip_htons>
 8015e30:	4603      	mov	r3, r0
 8015e32:	b21b      	sxth	r3, r3
 8015e34:	4323      	orrs	r3, r4
 8015e36:	b21a      	sxth	r2, r3
 8015e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e3a:	681b      	ldr	r3, [r3, #0]
 8015e3c:	68db      	ldr	r3, [r3, #12]
 8015e3e:	b292      	uxth	r2, r2
 8015e40:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e46:	b29a      	uxth	r2, r3
 8015e48:	687b      	ldr	r3, [r7, #4]
 8015e4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015e4c:	4413      	add	r3, r2
 8015e4e:	b299      	uxth	r1, r3
 8015e50:	4b3c      	ldr	r3, [pc, #240]	; (8015f44 <tcp_receive+0xf14>)
 8015e52:	681b      	ldr	r3, [r3, #0]
 8015e54:	b29a      	uxth	r2, r3
 8015e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e58:	681b      	ldr	r3, [r3, #0]
 8015e5a:	1a8a      	subs	r2, r1, r2
 8015e5c:	b292      	uxth	r2, r2
 8015e5e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8015e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e62:	681b      	ldr	r3, [r3, #0]
 8015e64:	685a      	ldr	r2, [r3, #4]
 8015e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e68:	681b      	ldr	r3, [r3, #0]
 8015e6a:	891b      	ldrh	r3, [r3, #8]
 8015e6c:	4619      	mov	r1, r3
 8015e6e:	4610      	mov	r0, r2
 8015e70:	f7fb fb5c 	bl	801152c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8015e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e76:	681b      	ldr	r3, [r3, #0]
 8015e78:	891c      	ldrh	r4, [r3, #8]
 8015e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e7c:	681b      	ldr	r3, [r3, #0]
 8015e7e:	68db      	ldr	r3, [r3, #12]
 8015e80:	899b      	ldrh	r3, [r3, #12]
 8015e82:	b29b      	uxth	r3, r3
 8015e84:	4618      	mov	r0, r3
 8015e86:	f7fa f91b 	bl	80100c0 <lwip_htons>
 8015e8a:	4603      	mov	r3, r0
 8015e8c:	b2db      	uxtb	r3, r3
 8015e8e:	f003 0303 	and.w	r3, r3, #3
 8015e92:	2b00      	cmp	r3, #0
 8015e94:	d001      	beq.n	8015e9a <tcp_receive+0xe6a>
 8015e96:	2301      	movs	r3, #1
 8015e98:	e000      	b.n	8015e9c <tcp_receive+0xe6c>
 8015e9a:	2300      	movs	r3, #0
 8015e9c:	4423      	add	r3, r4
 8015e9e:	b29a      	uxth	r2, r3
 8015ea0:	4b2a      	ldr	r3, [pc, #168]	; (8015f4c <tcp_receive+0xf1c>)
 8015ea2:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8015ea4:	4b29      	ldr	r3, [pc, #164]	; (8015f4c <tcp_receive+0xf1c>)
 8015ea6:	881b      	ldrh	r3, [r3, #0]
 8015ea8:	461a      	mov	r2, r3
 8015eaa:	4b26      	ldr	r3, [pc, #152]	; (8015f44 <tcp_receive+0xf14>)
 8015eac:	681b      	ldr	r3, [r3, #0]
 8015eae:	441a      	add	r2, r3
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015eb4:	6879      	ldr	r1, [r7, #4]
 8015eb6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015eb8:	440b      	add	r3, r1
 8015eba:	429a      	cmp	r2, r3
 8015ebc:	d019      	beq.n	8015ef2 <tcp_receive+0xec2>
 8015ebe:	4b24      	ldr	r3, [pc, #144]	; (8015f50 <tcp_receive+0xf20>)
 8015ec0:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8015ec4:	4923      	ldr	r1, [pc, #140]	; (8015f54 <tcp_receive+0xf24>)
 8015ec6:	4824      	ldr	r0, [pc, #144]	; (8015f58 <tcp_receive+0xf28>)
 8015ec8:	f006 fc0a 	bl	801c6e0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8015ecc:	e011      	b.n	8015ef2 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8015ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ed0:	681b      	ldr	r3, [r3, #0]
 8015ed2:	63bb      	str	r3, [r7, #56]	; 0x38
 8015ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ed6:	2b00      	cmp	r3, #0
 8015ed8:	f47f aea4 	bne.w	8015c24 <tcp_receive+0xbf4>
 8015edc:	e00a      	b.n	8015ef4 <tcp_receive+0xec4>
                break;
 8015ede:	bf00      	nop
 8015ee0:	e008      	b.n	8015ef4 <tcp_receive+0xec4>
                break;
 8015ee2:	bf00      	nop
 8015ee4:	e006      	b.n	8015ef4 <tcp_receive+0xec4>
                  break;
 8015ee6:	bf00      	nop
 8015ee8:	e004      	b.n	8015ef4 <tcp_receive+0xec4>
                  break;
 8015eea:	bf00      	nop
 8015eec:	e002      	b.n	8015ef4 <tcp_receive+0xec4>
                  break;
 8015eee:	bf00      	nop
 8015ef0:	e000      	b.n	8015ef4 <tcp_receive+0xec4>
                break;
 8015ef2:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8015ef4:	6878      	ldr	r0, [r7, #4]
 8015ef6:	f001 fe8b 	bl	8017c10 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8015efa:	e003      	b.n	8015f04 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8015efc:	6878      	ldr	r0, [r7, #4]
 8015efe:	f001 fe87 	bl	8017c10 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015f02:	e01a      	b.n	8015f3a <tcp_receive+0xf0a>
 8015f04:	e019      	b.n	8015f3a <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8015f06:	4b0f      	ldr	r3, [pc, #60]	; (8015f44 <tcp_receive+0xf14>)
 8015f08:	681a      	ldr	r2, [r3, #0]
 8015f0a:	687b      	ldr	r3, [r7, #4]
 8015f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f0e:	1ad3      	subs	r3, r2, r3
 8015f10:	2b00      	cmp	r3, #0
 8015f12:	db0a      	blt.n	8015f2a <tcp_receive+0xefa>
 8015f14:	4b0b      	ldr	r3, [pc, #44]	; (8015f44 <tcp_receive+0xf14>)
 8015f16:	681a      	ldr	r2, [r3, #0]
 8015f18:	687b      	ldr	r3, [r7, #4]
 8015f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f1c:	6879      	ldr	r1, [r7, #4]
 8015f1e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015f20:	440b      	add	r3, r1
 8015f22:	1ad3      	subs	r3, r2, r3
 8015f24:	3301      	adds	r3, #1
 8015f26:	2b00      	cmp	r3, #0
 8015f28:	dd07      	ble.n	8015f3a <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	8b5b      	ldrh	r3, [r3, #26]
 8015f2e:	f043 0302 	orr.w	r3, r3, #2
 8015f32:	b29a      	uxth	r2, r3
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8015f38:	e7ff      	b.n	8015f3a <tcp_receive+0xf0a>
 8015f3a:	bf00      	nop
 8015f3c:	3750      	adds	r7, #80	; 0x50
 8015f3e:	46bd      	mov	sp, r7
 8015f40:	bdb0      	pop	{r4, r5, r7, pc}
 8015f42:	bf00      	nop
 8015f44:	20004720 	.word	0x20004720
 8015f48:	20004700 	.word	0x20004700
 8015f4c:	2000472a 	.word	0x2000472a
 8015f50:	080207d8 	.word	0x080207d8
 8015f54:	08020b80 	.word	0x08020b80
 8015f58:	08020824 	.word	0x08020824

08015f5c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8015f5c:	b480      	push	{r7}
 8015f5e:	b083      	sub	sp, #12
 8015f60:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8015f62:	4b15      	ldr	r3, [pc, #84]	; (8015fb8 <tcp_get_next_optbyte+0x5c>)
 8015f64:	881b      	ldrh	r3, [r3, #0]
 8015f66:	1c5a      	adds	r2, r3, #1
 8015f68:	b291      	uxth	r1, r2
 8015f6a:	4a13      	ldr	r2, [pc, #76]	; (8015fb8 <tcp_get_next_optbyte+0x5c>)
 8015f6c:	8011      	strh	r1, [r2, #0]
 8015f6e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8015f70:	4b12      	ldr	r3, [pc, #72]	; (8015fbc <tcp_get_next_optbyte+0x60>)
 8015f72:	681b      	ldr	r3, [r3, #0]
 8015f74:	2b00      	cmp	r3, #0
 8015f76:	d004      	beq.n	8015f82 <tcp_get_next_optbyte+0x26>
 8015f78:	4b11      	ldr	r3, [pc, #68]	; (8015fc0 <tcp_get_next_optbyte+0x64>)
 8015f7a:	881b      	ldrh	r3, [r3, #0]
 8015f7c:	88fa      	ldrh	r2, [r7, #6]
 8015f7e:	429a      	cmp	r2, r3
 8015f80:	d208      	bcs.n	8015f94 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8015f82:	4b10      	ldr	r3, [pc, #64]	; (8015fc4 <tcp_get_next_optbyte+0x68>)
 8015f84:	681b      	ldr	r3, [r3, #0]
 8015f86:	3314      	adds	r3, #20
 8015f88:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8015f8a:	88fb      	ldrh	r3, [r7, #6]
 8015f8c:	683a      	ldr	r2, [r7, #0]
 8015f8e:	4413      	add	r3, r2
 8015f90:	781b      	ldrb	r3, [r3, #0]
 8015f92:	e00b      	b.n	8015fac <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8015f94:	88fb      	ldrh	r3, [r7, #6]
 8015f96:	b2da      	uxtb	r2, r3
 8015f98:	4b09      	ldr	r3, [pc, #36]	; (8015fc0 <tcp_get_next_optbyte+0x64>)
 8015f9a:	881b      	ldrh	r3, [r3, #0]
 8015f9c:	b2db      	uxtb	r3, r3
 8015f9e:	1ad3      	subs	r3, r2, r3
 8015fa0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8015fa2:	4b06      	ldr	r3, [pc, #24]	; (8015fbc <tcp_get_next_optbyte+0x60>)
 8015fa4:	681a      	ldr	r2, [r3, #0]
 8015fa6:	797b      	ldrb	r3, [r7, #5]
 8015fa8:	4413      	add	r3, r2
 8015faa:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015fac:	4618      	mov	r0, r3
 8015fae:	370c      	adds	r7, #12
 8015fb0:	46bd      	mov	sp, r7
 8015fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fb6:	4770      	bx	lr
 8015fb8:	2000471c 	.word	0x2000471c
 8015fbc:	20004718 	.word	0x20004718
 8015fc0:	20004716 	.word	0x20004716
 8015fc4:	20004710 	.word	0x20004710

08015fc8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8015fc8:	b580      	push	{r7, lr}
 8015fca:	b084      	sub	sp, #16
 8015fcc:	af00      	add	r7, sp, #0
 8015fce:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8015fd0:	687b      	ldr	r3, [r7, #4]
 8015fd2:	2b00      	cmp	r3, #0
 8015fd4:	d106      	bne.n	8015fe4 <tcp_parseopt+0x1c>
 8015fd6:	4b32      	ldr	r3, [pc, #200]	; (80160a0 <tcp_parseopt+0xd8>)
 8015fd8:	f240 727d 	movw	r2, #1917	; 0x77d
 8015fdc:	4931      	ldr	r1, [pc, #196]	; (80160a4 <tcp_parseopt+0xdc>)
 8015fde:	4832      	ldr	r0, [pc, #200]	; (80160a8 <tcp_parseopt+0xe0>)
 8015fe0:	f006 fb7e 	bl	801c6e0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8015fe4:	4b31      	ldr	r3, [pc, #196]	; (80160ac <tcp_parseopt+0xe4>)
 8015fe6:	881b      	ldrh	r3, [r3, #0]
 8015fe8:	2b00      	cmp	r3, #0
 8015fea:	d055      	beq.n	8016098 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8015fec:	4b30      	ldr	r3, [pc, #192]	; (80160b0 <tcp_parseopt+0xe8>)
 8015fee:	2200      	movs	r2, #0
 8015ff0:	801a      	strh	r2, [r3, #0]
 8015ff2:	e045      	b.n	8016080 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8015ff4:	f7ff ffb2 	bl	8015f5c <tcp_get_next_optbyte>
 8015ff8:	4603      	mov	r3, r0
 8015ffa:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8015ffc:	7bfb      	ldrb	r3, [r7, #15]
 8015ffe:	2b02      	cmp	r3, #2
 8016000:	d006      	beq.n	8016010 <tcp_parseopt+0x48>
 8016002:	2b02      	cmp	r3, #2
 8016004:	dc2b      	bgt.n	801605e <tcp_parseopt+0x96>
 8016006:	2b00      	cmp	r3, #0
 8016008:	d041      	beq.n	801608e <tcp_parseopt+0xc6>
 801600a:	2b01      	cmp	r3, #1
 801600c:	d127      	bne.n	801605e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801600e:	e037      	b.n	8016080 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8016010:	f7ff ffa4 	bl	8015f5c <tcp_get_next_optbyte>
 8016014:	4603      	mov	r3, r0
 8016016:	2b04      	cmp	r3, #4
 8016018:	d13b      	bne.n	8016092 <tcp_parseopt+0xca>
 801601a:	4b25      	ldr	r3, [pc, #148]	; (80160b0 <tcp_parseopt+0xe8>)
 801601c:	881b      	ldrh	r3, [r3, #0]
 801601e:	3301      	adds	r3, #1
 8016020:	4a22      	ldr	r2, [pc, #136]	; (80160ac <tcp_parseopt+0xe4>)
 8016022:	8812      	ldrh	r2, [r2, #0]
 8016024:	4293      	cmp	r3, r2
 8016026:	da34      	bge.n	8016092 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8016028:	f7ff ff98 	bl	8015f5c <tcp_get_next_optbyte>
 801602c:	4603      	mov	r3, r0
 801602e:	b29b      	uxth	r3, r3
 8016030:	021b      	lsls	r3, r3, #8
 8016032:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8016034:	f7ff ff92 	bl	8015f5c <tcp_get_next_optbyte>
 8016038:	4603      	mov	r3, r0
 801603a:	b29a      	uxth	r2, r3
 801603c:	89bb      	ldrh	r3, [r7, #12]
 801603e:	4313      	orrs	r3, r2
 8016040:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8016042:	89bb      	ldrh	r3, [r7, #12]
 8016044:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8016048:	d804      	bhi.n	8016054 <tcp_parseopt+0x8c>
 801604a:	89bb      	ldrh	r3, [r7, #12]
 801604c:	2b00      	cmp	r3, #0
 801604e:	d001      	beq.n	8016054 <tcp_parseopt+0x8c>
 8016050:	89ba      	ldrh	r2, [r7, #12]
 8016052:	e001      	b.n	8016058 <tcp_parseopt+0x90>
 8016054:	f44f 7206 	mov.w	r2, #536	; 0x218
 8016058:	687b      	ldr	r3, [r7, #4]
 801605a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801605c:	e010      	b.n	8016080 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801605e:	f7ff ff7d 	bl	8015f5c <tcp_get_next_optbyte>
 8016062:	4603      	mov	r3, r0
 8016064:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8016066:	7afb      	ldrb	r3, [r7, #11]
 8016068:	2b01      	cmp	r3, #1
 801606a:	d914      	bls.n	8016096 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801606c:	7afb      	ldrb	r3, [r7, #11]
 801606e:	b29a      	uxth	r2, r3
 8016070:	4b0f      	ldr	r3, [pc, #60]	; (80160b0 <tcp_parseopt+0xe8>)
 8016072:	881b      	ldrh	r3, [r3, #0]
 8016074:	4413      	add	r3, r2
 8016076:	b29b      	uxth	r3, r3
 8016078:	3b02      	subs	r3, #2
 801607a:	b29a      	uxth	r2, r3
 801607c:	4b0c      	ldr	r3, [pc, #48]	; (80160b0 <tcp_parseopt+0xe8>)
 801607e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8016080:	4b0b      	ldr	r3, [pc, #44]	; (80160b0 <tcp_parseopt+0xe8>)
 8016082:	881a      	ldrh	r2, [r3, #0]
 8016084:	4b09      	ldr	r3, [pc, #36]	; (80160ac <tcp_parseopt+0xe4>)
 8016086:	881b      	ldrh	r3, [r3, #0]
 8016088:	429a      	cmp	r2, r3
 801608a:	d3b3      	bcc.n	8015ff4 <tcp_parseopt+0x2c>
 801608c:	e004      	b.n	8016098 <tcp_parseopt+0xd0>
          return;
 801608e:	bf00      	nop
 8016090:	e002      	b.n	8016098 <tcp_parseopt+0xd0>
            return;
 8016092:	bf00      	nop
 8016094:	e000      	b.n	8016098 <tcp_parseopt+0xd0>
            return;
 8016096:	bf00      	nop
      }
    }
  }
}
 8016098:	3710      	adds	r7, #16
 801609a:	46bd      	mov	sp, r7
 801609c:	bd80      	pop	{r7, pc}
 801609e:	bf00      	nop
 80160a0:	080207d8 	.word	0x080207d8
 80160a4:	08020c3c 	.word	0x08020c3c
 80160a8:	08020824 	.word	0x08020824
 80160ac:	20004714 	.word	0x20004714
 80160b0:	2000471c 	.word	0x2000471c

080160b4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80160b4:	b480      	push	{r7}
 80160b6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80160b8:	4b05      	ldr	r3, [pc, #20]	; (80160d0 <tcp_trigger_input_pcb_close+0x1c>)
 80160ba:	781b      	ldrb	r3, [r3, #0]
 80160bc:	f043 0310 	orr.w	r3, r3, #16
 80160c0:	b2da      	uxtb	r2, r3
 80160c2:	4b03      	ldr	r3, [pc, #12]	; (80160d0 <tcp_trigger_input_pcb_close+0x1c>)
 80160c4:	701a      	strb	r2, [r3, #0]
}
 80160c6:	bf00      	nop
 80160c8:	46bd      	mov	sp, r7
 80160ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160ce:	4770      	bx	lr
 80160d0:	2000472d 	.word	0x2000472d

080160d4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80160d4:	b580      	push	{r7, lr}
 80160d6:	b084      	sub	sp, #16
 80160d8:	af00      	add	r7, sp, #0
 80160da:	60f8      	str	r0, [r7, #12]
 80160dc:	60b9      	str	r1, [r7, #8]
 80160de:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80160e0:	68fb      	ldr	r3, [r7, #12]
 80160e2:	2b00      	cmp	r3, #0
 80160e4:	d00a      	beq.n	80160fc <tcp_route+0x28>
 80160e6:	68fb      	ldr	r3, [r7, #12]
 80160e8:	7a1b      	ldrb	r3, [r3, #8]
 80160ea:	2b00      	cmp	r3, #0
 80160ec:	d006      	beq.n	80160fc <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80160ee:	68fb      	ldr	r3, [r7, #12]
 80160f0:	7a1b      	ldrb	r3, [r3, #8]
 80160f2:	4618      	mov	r0, r3
 80160f4:	f7fb f812 	bl	801111c <netif_get_by_index>
 80160f8:	4603      	mov	r3, r0
 80160fa:	e003      	b.n	8016104 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80160fc:	6878      	ldr	r0, [r7, #4]
 80160fe:	f003 fe35 	bl	8019d6c <ip4_route>
 8016102:	4603      	mov	r3, r0
  }
}
 8016104:	4618      	mov	r0, r3
 8016106:	3710      	adds	r7, #16
 8016108:	46bd      	mov	sp, r7
 801610a:	bd80      	pop	{r7, pc}

0801610c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801610c:	b590      	push	{r4, r7, lr}
 801610e:	b087      	sub	sp, #28
 8016110:	af00      	add	r7, sp, #0
 8016112:	60f8      	str	r0, [r7, #12]
 8016114:	60b9      	str	r1, [r7, #8]
 8016116:	603b      	str	r3, [r7, #0]
 8016118:	4613      	mov	r3, r2
 801611a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801611c:	68fb      	ldr	r3, [r7, #12]
 801611e:	2b00      	cmp	r3, #0
 8016120:	d105      	bne.n	801612e <tcp_create_segment+0x22>
 8016122:	4b44      	ldr	r3, [pc, #272]	; (8016234 <tcp_create_segment+0x128>)
 8016124:	22a3      	movs	r2, #163	; 0xa3
 8016126:	4944      	ldr	r1, [pc, #272]	; (8016238 <tcp_create_segment+0x12c>)
 8016128:	4844      	ldr	r0, [pc, #272]	; (801623c <tcp_create_segment+0x130>)
 801612a:	f006 fad9 	bl	801c6e0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801612e:	68bb      	ldr	r3, [r7, #8]
 8016130:	2b00      	cmp	r3, #0
 8016132:	d105      	bne.n	8016140 <tcp_create_segment+0x34>
 8016134:	4b3f      	ldr	r3, [pc, #252]	; (8016234 <tcp_create_segment+0x128>)
 8016136:	22a4      	movs	r2, #164	; 0xa4
 8016138:	4941      	ldr	r1, [pc, #260]	; (8016240 <tcp_create_segment+0x134>)
 801613a:	4840      	ldr	r0, [pc, #256]	; (801623c <tcp_create_segment+0x130>)
 801613c:	f006 fad0 	bl	801c6e0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8016140:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016144:	009b      	lsls	r3, r3, #2
 8016146:	b2db      	uxtb	r3, r3
 8016148:	f003 0304 	and.w	r3, r3, #4
 801614c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801614e:	2003      	movs	r0, #3
 8016150:	f7fa fca2 	bl	8010a98 <memp_malloc>
 8016154:	6138      	str	r0, [r7, #16]
 8016156:	693b      	ldr	r3, [r7, #16]
 8016158:	2b00      	cmp	r3, #0
 801615a:	d104      	bne.n	8016166 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801615c:	68b8      	ldr	r0, [r7, #8]
 801615e:	f7fb fb6b 	bl	8011838 <pbuf_free>
    return NULL;
 8016162:	2300      	movs	r3, #0
 8016164:	e061      	b.n	801622a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8016166:	693b      	ldr	r3, [r7, #16]
 8016168:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801616c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801616e:	693b      	ldr	r3, [r7, #16]
 8016170:	2200      	movs	r2, #0
 8016172:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8016174:	693b      	ldr	r3, [r7, #16]
 8016176:	68ba      	ldr	r2, [r7, #8]
 8016178:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801617a:	68bb      	ldr	r3, [r7, #8]
 801617c:	891a      	ldrh	r2, [r3, #8]
 801617e:	7dfb      	ldrb	r3, [r7, #23]
 8016180:	b29b      	uxth	r3, r3
 8016182:	429a      	cmp	r2, r3
 8016184:	d205      	bcs.n	8016192 <tcp_create_segment+0x86>
 8016186:	4b2b      	ldr	r3, [pc, #172]	; (8016234 <tcp_create_segment+0x128>)
 8016188:	22b0      	movs	r2, #176	; 0xb0
 801618a:	492e      	ldr	r1, [pc, #184]	; (8016244 <tcp_create_segment+0x138>)
 801618c:	482b      	ldr	r0, [pc, #172]	; (801623c <tcp_create_segment+0x130>)
 801618e:	f006 faa7 	bl	801c6e0 <iprintf>
  seg->len = p->tot_len - optlen;
 8016192:	68bb      	ldr	r3, [r7, #8]
 8016194:	891a      	ldrh	r2, [r3, #8]
 8016196:	7dfb      	ldrb	r3, [r7, #23]
 8016198:	b29b      	uxth	r3, r3
 801619a:	1ad3      	subs	r3, r2, r3
 801619c:	b29a      	uxth	r2, r3
 801619e:	693b      	ldr	r3, [r7, #16]
 80161a0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80161a2:	2114      	movs	r1, #20
 80161a4:	68b8      	ldr	r0, [r7, #8]
 80161a6:	f7fb fab1 	bl	801170c <pbuf_add_header>
 80161aa:	4603      	mov	r3, r0
 80161ac:	2b00      	cmp	r3, #0
 80161ae:	d004      	beq.n	80161ba <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80161b0:	6938      	ldr	r0, [r7, #16]
 80161b2:	f7fc ffe6 	bl	8013182 <tcp_seg_free>
    return NULL;
 80161b6:	2300      	movs	r3, #0
 80161b8:	e037      	b.n	801622a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80161ba:	693b      	ldr	r3, [r7, #16]
 80161bc:	685b      	ldr	r3, [r3, #4]
 80161be:	685a      	ldr	r2, [r3, #4]
 80161c0:	693b      	ldr	r3, [r7, #16]
 80161c2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80161c4:	68fb      	ldr	r3, [r7, #12]
 80161c6:	8ada      	ldrh	r2, [r3, #22]
 80161c8:	693b      	ldr	r3, [r7, #16]
 80161ca:	68dc      	ldr	r4, [r3, #12]
 80161cc:	4610      	mov	r0, r2
 80161ce:	f7f9 ff77 	bl	80100c0 <lwip_htons>
 80161d2:	4603      	mov	r3, r0
 80161d4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80161d6:	68fb      	ldr	r3, [r7, #12]
 80161d8:	8b1a      	ldrh	r2, [r3, #24]
 80161da:	693b      	ldr	r3, [r7, #16]
 80161dc:	68dc      	ldr	r4, [r3, #12]
 80161de:	4610      	mov	r0, r2
 80161e0:	f7f9 ff6e 	bl	80100c0 <lwip_htons>
 80161e4:	4603      	mov	r3, r0
 80161e6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80161e8:	693b      	ldr	r3, [r7, #16]
 80161ea:	68dc      	ldr	r4, [r3, #12]
 80161ec:	6838      	ldr	r0, [r7, #0]
 80161ee:	f7f9 ff7c 	bl	80100ea <lwip_htonl>
 80161f2:	4603      	mov	r3, r0
 80161f4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80161f6:	7dfb      	ldrb	r3, [r7, #23]
 80161f8:	089b      	lsrs	r3, r3, #2
 80161fa:	b2db      	uxtb	r3, r3
 80161fc:	b29b      	uxth	r3, r3
 80161fe:	3305      	adds	r3, #5
 8016200:	b29b      	uxth	r3, r3
 8016202:	031b      	lsls	r3, r3, #12
 8016204:	b29a      	uxth	r2, r3
 8016206:	79fb      	ldrb	r3, [r7, #7]
 8016208:	b29b      	uxth	r3, r3
 801620a:	4313      	orrs	r3, r2
 801620c:	b29a      	uxth	r2, r3
 801620e:	693b      	ldr	r3, [r7, #16]
 8016210:	68dc      	ldr	r4, [r3, #12]
 8016212:	4610      	mov	r0, r2
 8016214:	f7f9 ff54 	bl	80100c0 <lwip_htons>
 8016218:	4603      	mov	r3, r0
 801621a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801621c:	693b      	ldr	r3, [r7, #16]
 801621e:	68db      	ldr	r3, [r3, #12]
 8016220:	2200      	movs	r2, #0
 8016222:	749a      	strb	r2, [r3, #18]
 8016224:	2200      	movs	r2, #0
 8016226:	74da      	strb	r2, [r3, #19]
  return seg;
 8016228:	693b      	ldr	r3, [r7, #16]
}
 801622a:	4618      	mov	r0, r3
 801622c:	371c      	adds	r7, #28
 801622e:	46bd      	mov	sp, r7
 8016230:	bd90      	pop	{r4, r7, pc}
 8016232:	bf00      	nop
 8016234:	08020c58 	.word	0x08020c58
 8016238:	08020c8c 	.word	0x08020c8c
 801623c:	08020cac 	.word	0x08020cac
 8016240:	08020cd4 	.word	0x08020cd4
 8016244:	08020cf8 	.word	0x08020cf8

08016248 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8016248:	b580      	push	{r7, lr}
 801624a:	b086      	sub	sp, #24
 801624c:	af00      	add	r7, sp, #0
 801624e:	607b      	str	r3, [r7, #4]
 8016250:	4603      	mov	r3, r0
 8016252:	73fb      	strb	r3, [r7, #15]
 8016254:	460b      	mov	r3, r1
 8016256:	81bb      	strh	r3, [r7, #12]
 8016258:	4613      	mov	r3, r2
 801625a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801625c:	89bb      	ldrh	r3, [r7, #12]
 801625e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8016260:	687b      	ldr	r3, [r7, #4]
 8016262:	2b00      	cmp	r3, #0
 8016264:	d105      	bne.n	8016272 <tcp_pbuf_prealloc+0x2a>
 8016266:	4b30      	ldr	r3, [pc, #192]	; (8016328 <tcp_pbuf_prealloc+0xe0>)
 8016268:	22e8      	movs	r2, #232	; 0xe8
 801626a:	4930      	ldr	r1, [pc, #192]	; (801632c <tcp_pbuf_prealloc+0xe4>)
 801626c:	4830      	ldr	r0, [pc, #192]	; (8016330 <tcp_pbuf_prealloc+0xe8>)
 801626e:	f006 fa37 	bl	801c6e0 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8016272:	6a3b      	ldr	r3, [r7, #32]
 8016274:	2b00      	cmp	r3, #0
 8016276:	d105      	bne.n	8016284 <tcp_pbuf_prealloc+0x3c>
 8016278:	4b2b      	ldr	r3, [pc, #172]	; (8016328 <tcp_pbuf_prealloc+0xe0>)
 801627a:	22e9      	movs	r2, #233	; 0xe9
 801627c:	492d      	ldr	r1, [pc, #180]	; (8016334 <tcp_pbuf_prealloc+0xec>)
 801627e:	482c      	ldr	r0, [pc, #176]	; (8016330 <tcp_pbuf_prealloc+0xe8>)
 8016280:	f006 fa2e 	bl	801c6e0 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8016284:	89ba      	ldrh	r2, [r7, #12]
 8016286:	897b      	ldrh	r3, [r7, #10]
 8016288:	429a      	cmp	r2, r3
 801628a:	d221      	bcs.n	80162d0 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801628c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016290:	f003 0302 	and.w	r3, r3, #2
 8016294:	2b00      	cmp	r3, #0
 8016296:	d111      	bne.n	80162bc <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8016298:	6a3b      	ldr	r3, [r7, #32]
 801629a:	8b5b      	ldrh	r3, [r3, #26]
 801629c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80162a0:	2b00      	cmp	r3, #0
 80162a2:	d115      	bne.n	80162d0 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 80162a4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80162a8:	2b00      	cmp	r3, #0
 80162aa:	d007      	beq.n	80162bc <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 80162ac:	6a3b      	ldr	r3, [r7, #32]
 80162ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 80162b0:	2b00      	cmp	r3, #0
 80162b2:	d103      	bne.n	80162bc <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 80162b4:	6a3b      	ldr	r3, [r7, #32]
 80162b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	d009      	beq.n	80162d0 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80162bc:	89bb      	ldrh	r3, [r7, #12]
 80162be:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80162c2:	f023 0203 	bic.w	r2, r3, #3
 80162c6:	897b      	ldrh	r3, [r7, #10]
 80162c8:	4293      	cmp	r3, r2
 80162ca:	bf28      	it	cs
 80162cc:	4613      	movcs	r3, r2
 80162ce:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80162d0:	8af9      	ldrh	r1, [r7, #22]
 80162d2:	7bfb      	ldrb	r3, [r7, #15]
 80162d4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80162d8:	4618      	mov	r0, r3
 80162da:	f7fa ffc9 	bl	8011270 <pbuf_alloc>
 80162de:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80162e0:	693b      	ldr	r3, [r7, #16]
 80162e2:	2b00      	cmp	r3, #0
 80162e4:	d101      	bne.n	80162ea <tcp_pbuf_prealloc+0xa2>
    return NULL;
 80162e6:	2300      	movs	r3, #0
 80162e8:	e019      	b.n	801631e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80162ea:	693b      	ldr	r3, [r7, #16]
 80162ec:	681b      	ldr	r3, [r3, #0]
 80162ee:	2b00      	cmp	r3, #0
 80162f0:	d006      	beq.n	8016300 <tcp_pbuf_prealloc+0xb8>
 80162f2:	4b0d      	ldr	r3, [pc, #52]	; (8016328 <tcp_pbuf_prealloc+0xe0>)
 80162f4:	f240 120b 	movw	r2, #267	; 0x10b
 80162f8:	490f      	ldr	r1, [pc, #60]	; (8016338 <tcp_pbuf_prealloc+0xf0>)
 80162fa:	480d      	ldr	r0, [pc, #52]	; (8016330 <tcp_pbuf_prealloc+0xe8>)
 80162fc:	f006 f9f0 	bl	801c6e0 <iprintf>
  *oversize = p->len - length;
 8016300:	693b      	ldr	r3, [r7, #16]
 8016302:	895a      	ldrh	r2, [r3, #10]
 8016304:	89bb      	ldrh	r3, [r7, #12]
 8016306:	1ad3      	subs	r3, r2, r3
 8016308:	b29a      	uxth	r2, r3
 801630a:	687b      	ldr	r3, [r7, #4]
 801630c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801630e:	693b      	ldr	r3, [r7, #16]
 8016310:	89ba      	ldrh	r2, [r7, #12]
 8016312:	811a      	strh	r2, [r3, #8]
 8016314:	693b      	ldr	r3, [r7, #16]
 8016316:	891a      	ldrh	r2, [r3, #8]
 8016318:	693b      	ldr	r3, [r7, #16]
 801631a:	815a      	strh	r2, [r3, #10]
  return p;
 801631c:	693b      	ldr	r3, [r7, #16]
}
 801631e:	4618      	mov	r0, r3
 8016320:	3718      	adds	r7, #24
 8016322:	46bd      	mov	sp, r7
 8016324:	bd80      	pop	{r7, pc}
 8016326:	bf00      	nop
 8016328:	08020c58 	.word	0x08020c58
 801632c:	08020d10 	.word	0x08020d10
 8016330:	08020cac 	.word	0x08020cac
 8016334:	08020d34 	.word	0x08020d34
 8016338:	08020d54 	.word	0x08020d54

0801633c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801633c:	b580      	push	{r7, lr}
 801633e:	b082      	sub	sp, #8
 8016340:	af00      	add	r7, sp, #0
 8016342:	6078      	str	r0, [r7, #4]
 8016344:	460b      	mov	r3, r1
 8016346:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8016348:	687b      	ldr	r3, [r7, #4]
 801634a:	2b00      	cmp	r3, #0
 801634c:	d106      	bne.n	801635c <tcp_write_checks+0x20>
 801634e:	4b33      	ldr	r3, [pc, #204]	; (801641c <tcp_write_checks+0xe0>)
 8016350:	f240 1233 	movw	r2, #307	; 0x133
 8016354:	4932      	ldr	r1, [pc, #200]	; (8016420 <tcp_write_checks+0xe4>)
 8016356:	4833      	ldr	r0, [pc, #204]	; (8016424 <tcp_write_checks+0xe8>)
 8016358:	f006 f9c2 	bl	801c6e0 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801635c:	687b      	ldr	r3, [r7, #4]
 801635e:	7d1b      	ldrb	r3, [r3, #20]
 8016360:	2b04      	cmp	r3, #4
 8016362:	d00e      	beq.n	8016382 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8016364:	687b      	ldr	r3, [r7, #4]
 8016366:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8016368:	2b07      	cmp	r3, #7
 801636a:	d00a      	beq.n	8016382 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8016370:	2b02      	cmp	r3, #2
 8016372:	d006      	beq.n	8016382 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8016374:	687b      	ldr	r3, [r7, #4]
 8016376:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8016378:	2b03      	cmp	r3, #3
 801637a:	d002      	beq.n	8016382 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801637c:	f06f 030a 	mvn.w	r3, #10
 8016380:	e048      	b.n	8016414 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8016382:	887b      	ldrh	r3, [r7, #2]
 8016384:	2b00      	cmp	r3, #0
 8016386:	d101      	bne.n	801638c <tcp_write_checks+0x50>
    return ERR_OK;
 8016388:	2300      	movs	r3, #0
 801638a:	e043      	b.n	8016414 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8016392:	887a      	ldrh	r2, [r7, #2]
 8016394:	429a      	cmp	r2, r3
 8016396:	d909      	bls.n	80163ac <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016398:	687b      	ldr	r3, [r7, #4]
 801639a:	8b5b      	ldrh	r3, [r3, #26]
 801639c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80163a0:	b29a      	uxth	r2, r3
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80163a6:	f04f 33ff 	mov.w	r3, #4294967295
 80163aa:	e033      	b.n	8016414 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 80163ac:	687b      	ldr	r3, [r7, #4]
 80163ae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80163b2:	2b08      	cmp	r3, #8
 80163b4:	d909      	bls.n	80163ca <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	8b5b      	ldrh	r3, [r3, #26]
 80163ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80163be:	b29a      	uxth	r2, r3
 80163c0:	687b      	ldr	r3, [r7, #4]
 80163c2:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80163c4:	f04f 33ff 	mov.w	r3, #4294967295
 80163c8:	e024      	b.n	8016414 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 80163ca:	687b      	ldr	r3, [r7, #4]
 80163cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80163d0:	2b00      	cmp	r3, #0
 80163d2:	d00f      	beq.n	80163f4 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80163d4:	687b      	ldr	r3, [r7, #4]
 80163d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80163d8:	2b00      	cmp	r3, #0
 80163da:	d11a      	bne.n	8016412 <tcp_write_checks+0xd6>
 80163dc:	687b      	ldr	r3, [r7, #4]
 80163de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80163e0:	2b00      	cmp	r3, #0
 80163e2:	d116      	bne.n	8016412 <tcp_write_checks+0xd6>
 80163e4:	4b0d      	ldr	r3, [pc, #52]	; (801641c <tcp_write_checks+0xe0>)
 80163e6:	f240 1255 	movw	r2, #341	; 0x155
 80163ea:	490f      	ldr	r1, [pc, #60]	; (8016428 <tcp_write_checks+0xec>)
 80163ec:	480d      	ldr	r0, [pc, #52]	; (8016424 <tcp_write_checks+0xe8>)
 80163ee:	f006 f977 	bl	801c6e0 <iprintf>
 80163f2:	e00e      	b.n	8016412 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80163f4:	687b      	ldr	r3, [r7, #4]
 80163f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80163f8:	2b00      	cmp	r3, #0
 80163fa:	d103      	bne.n	8016404 <tcp_write_checks+0xc8>
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016400:	2b00      	cmp	r3, #0
 8016402:	d006      	beq.n	8016412 <tcp_write_checks+0xd6>
 8016404:	4b05      	ldr	r3, [pc, #20]	; (801641c <tcp_write_checks+0xe0>)
 8016406:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801640a:	4908      	ldr	r1, [pc, #32]	; (801642c <tcp_write_checks+0xf0>)
 801640c:	4805      	ldr	r0, [pc, #20]	; (8016424 <tcp_write_checks+0xe8>)
 801640e:	f006 f967 	bl	801c6e0 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8016412:	2300      	movs	r3, #0
}
 8016414:	4618      	mov	r0, r3
 8016416:	3708      	adds	r7, #8
 8016418:	46bd      	mov	sp, r7
 801641a:	bd80      	pop	{r7, pc}
 801641c:	08020c58 	.word	0x08020c58
 8016420:	08020d68 	.word	0x08020d68
 8016424:	08020cac 	.word	0x08020cac
 8016428:	08020d88 	.word	0x08020d88
 801642c:	08020dc4 	.word	0x08020dc4

08016430 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8016430:	b590      	push	{r4, r7, lr}
 8016432:	b09b      	sub	sp, #108	; 0x6c
 8016434:	af04      	add	r7, sp, #16
 8016436:	60f8      	str	r0, [r7, #12]
 8016438:	60b9      	str	r1, [r7, #8]
 801643a:	4611      	mov	r1, r2
 801643c:	461a      	mov	r2, r3
 801643e:	460b      	mov	r3, r1
 8016440:	80fb      	strh	r3, [r7, #6]
 8016442:	4613      	mov	r3, r2
 8016444:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8016446:	2300      	movs	r3, #0
 8016448:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801644a:	2300      	movs	r3, #0
 801644c:	653b      	str	r3, [r7, #80]	; 0x50
 801644e:	2300      	movs	r3, #0
 8016450:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016452:	2300      	movs	r3, #0
 8016454:	64bb      	str	r3, [r7, #72]	; 0x48
 8016456:	2300      	movs	r3, #0
 8016458:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801645a:	2300      	movs	r3, #0
 801645c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8016460:	2300      	movs	r3, #0
 8016462:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8016466:	2300      	movs	r3, #0
 8016468:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801646a:	2300      	movs	r3, #0
 801646c:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801646e:	2300      	movs	r3, #0
 8016470:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8016472:	68fb      	ldr	r3, [r7, #12]
 8016474:	2b00      	cmp	r3, #0
 8016476:	d109      	bne.n	801648c <tcp_write+0x5c>
 8016478:	4ba4      	ldr	r3, [pc, #656]	; (801670c <tcp_write+0x2dc>)
 801647a:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801647e:	49a4      	ldr	r1, [pc, #656]	; (8016710 <tcp_write+0x2e0>)
 8016480:	48a4      	ldr	r0, [pc, #656]	; (8016714 <tcp_write+0x2e4>)
 8016482:	f006 f92d 	bl	801c6e0 <iprintf>
 8016486:	f06f 030f 	mvn.w	r3, #15
 801648a:	e32a      	b.n	8016ae2 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801648c:	68fb      	ldr	r3, [r7, #12]
 801648e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8016492:	085b      	lsrs	r3, r3, #1
 8016494:	b29a      	uxth	r2, r3
 8016496:	68fb      	ldr	r3, [r7, #12]
 8016498:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801649a:	4293      	cmp	r3, r2
 801649c:	bf28      	it	cs
 801649e:	4613      	movcs	r3, r2
 80164a0:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80164a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	d102      	bne.n	80164ae <tcp_write+0x7e>
 80164a8:	68fb      	ldr	r3, [r7, #12]
 80164aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80164ac:	e000      	b.n	80164b0 <tcp_write+0x80>
 80164ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80164b0:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80164b2:	68bb      	ldr	r3, [r7, #8]
 80164b4:	2b00      	cmp	r3, #0
 80164b6:	d109      	bne.n	80164cc <tcp_write+0x9c>
 80164b8:	4b94      	ldr	r3, [pc, #592]	; (801670c <tcp_write+0x2dc>)
 80164ba:	f240 12ad 	movw	r2, #429	; 0x1ad
 80164be:	4996      	ldr	r1, [pc, #600]	; (8016718 <tcp_write+0x2e8>)
 80164c0:	4894      	ldr	r0, [pc, #592]	; (8016714 <tcp_write+0x2e4>)
 80164c2:	f006 f90d 	bl	801c6e0 <iprintf>
 80164c6:	f06f 030f 	mvn.w	r3, #15
 80164ca:	e30a      	b.n	8016ae2 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80164cc:	88fb      	ldrh	r3, [r7, #6]
 80164ce:	4619      	mov	r1, r3
 80164d0:	68f8      	ldr	r0, [r7, #12]
 80164d2:	f7ff ff33 	bl	801633c <tcp_write_checks>
 80164d6:	4603      	mov	r3, r0
 80164d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 80164dc:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80164e0:	2b00      	cmp	r3, #0
 80164e2:	d002      	beq.n	80164ea <tcp_write+0xba>
    return err;
 80164e4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80164e8:	e2fb      	b.n	8016ae2 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 80164ea:	68fb      	ldr	r3, [r7, #12]
 80164ec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80164f0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80164f4:	2300      	movs	r3, #0
 80164f6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80164fa:	68fb      	ldr	r3, [r7, #12]
 80164fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80164fe:	2b00      	cmp	r3, #0
 8016500:	f000 80f6 	beq.w	80166f0 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016504:	68fb      	ldr	r3, [r7, #12]
 8016506:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016508:	653b      	str	r3, [r7, #80]	; 0x50
 801650a:	e002      	b.n	8016512 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801650c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801650e:	681b      	ldr	r3, [r3, #0]
 8016510:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016512:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016514:	681b      	ldr	r3, [r3, #0]
 8016516:	2b00      	cmp	r3, #0
 8016518:	d1f8      	bne.n	801650c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801651a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801651c:	7a9b      	ldrb	r3, [r3, #10]
 801651e:	009b      	lsls	r3, r3, #2
 8016520:	b29b      	uxth	r3, r3
 8016522:	f003 0304 	and.w	r3, r3, #4
 8016526:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8016528:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801652a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801652c:	891b      	ldrh	r3, [r3, #8]
 801652e:	4619      	mov	r1, r3
 8016530:	8c3b      	ldrh	r3, [r7, #32]
 8016532:	440b      	add	r3, r1
 8016534:	429a      	cmp	r2, r3
 8016536:	da06      	bge.n	8016546 <tcp_write+0x116>
 8016538:	4b74      	ldr	r3, [pc, #464]	; (801670c <tcp_write+0x2dc>)
 801653a:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801653e:	4977      	ldr	r1, [pc, #476]	; (801671c <tcp_write+0x2ec>)
 8016540:	4874      	ldr	r0, [pc, #464]	; (8016714 <tcp_write+0x2e4>)
 8016542:	f006 f8cd 	bl	801c6e0 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8016546:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016548:	891a      	ldrh	r2, [r3, #8]
 801654a:	8c3b      	ldrh	r3, [r7, #32]
 801654c:	4413      	add	r3, r2
 801654e:	b29b      	uxth	r3, r3
 8016550:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016552:	1ad3      	subs	r3, r2, r3
 8016554:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8016556:	68fb      	ldr	r3, [r7, #12]
 8016558:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801655c:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801655e:	8a7b      	ldrh	r3, [r7, #18]
 8016560:	2b00      	cmp	r3, #0
 8016562:	d026      	beq.n	80165b2 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8016564:	8a7b      	ldrh	r3, [r7, #18]
 8016566:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016568:	429a      	cmp	r2, r3
 801656a:	d206      	bcs.n	801657a <tcp_write+0x14a>
 801656c:	4b67      	ldr	r3, [pc, #412]	; (801670c <tcp_write+0x2dc>)
 801656e:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8016572:	496b      	ldr	r1, [pc, #428]	; (8016720 <tcp_write+0x2f0>)
 8016574:	4867      	ldr	r0, [pc, #412]	; (8016714 <tcp_write+0x2e4>)
 8016576:	f006 f8b3 	bl	801c6e0 <iprintf>
      seg = last_unsent;
 801657a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801657c:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801657e:	8a7b      	ldrh	r3, [r7, #18]
 8016580:	88fa      	ldrh	r2, [r7, #6]
 8016582:	4293      	cmp	r3, r2
 8016584:	bf28      	it	cs
 8016586:	4613      	movcs	r3, r2
 8016588:	b29b      	uxth	r3, r3
 801658a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801658c:	4293      	cmp	r3, r2
 801658e:	bf28      	it	cs
 8016590:	4613      	movcs	r3, r2
 8016592:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8016594:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016598:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801659a:	4413      	add	r3, r2
 801659c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 80165a0:	8a7a      	ldrh	r2, [r7, #18]
 80165a2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80165a4:	1ad3      	subs	r3, r2, r3
 80165a6:	b29b      	uxth	r3, r3
 80165a8:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80165aa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80165ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80165ae:	1ad3      	subs	r3, r2, r3
 80165b0:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80165b2:	8a7b      	ldrh	r3, [r7, #18]
 80165b4:	2b00      	cmp	r3, #0
 80165b6:	d00b      	beq.n	80165d0 <tcp_write+0x1a0>
 80165b8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80165bc:	88fb      	ldrh	r3, [r7, #6]
 80165be:	429a      	cmp	r2, r3
 80165c0:	d006      	beq.n	80165d0 <tcp_write+0x1a0>
 80165c2:	4b52      	ldr	r3, [pc, #328]	; (801670c <tcp_write+0x2dc>)
 80165c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80165c8:	4956      	ldr	r1, [pc, #344]	; (8016724 <tcp_write+0x2f4>)
 80165ca:	4852      	ldr	r0, [pc, #328]	; (8016714 <tcp_write+0x2e4>)
 80165cc:	f006 f888 	bl	801c6e0 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80165d0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80165d4:	88fb      	ldrh	r3, [r7, #6]
 80165d6:	429a      	cmp	r2, r3
 80165d8:	f080 8167 	bcs.w	80168aa <tcp_write+0x47a>
 80165dc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80165de:	2b00      	cmp	r3, #0
 80165e0:	f000 8163 	beq.w	80168aa <tcp_write+0x47a>
 80165e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80165e6:	891b      	ldrh	r3, [r3, #8]
 80165e8:	2b00      	cmp	r3, #0
 80165ea:	f000 815e 	beq.w	80168aa <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80165ee:	88fa      	ldrh	r2, [r7, #6]
 80165f0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80165f4:	1ad2      	subs	r2, r2, r3
 80165f6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80165f8:	4293      	cmp	r3, r2
 80165fa:	bfa8      	it	ge
 80165fc:	4613      	movge	r3, r2
 80165fe:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8016600:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016602:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8016604:	797b      	ldrb	r3, [r7, #5]
 8016606:	f003 0301 	and.w	r3, r3, #1
 801660a:	2b00      	cmp	r3, #0
 801660c:	d027      	beq.n	801665e <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801660e:	f107 0012 	add.w	r0, r7, #18
 8016612:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016614:	8bf9      	ldrh	r1, [r7, #30]
 8016616:	2301      	movs	r3, #1
 8016618:	9302      	str	r3, [sp, #8]
 801661a:	797b      	ldrb	r3, [r7, #5]
 801661c:	9301      	str	r3, [sp, #4]
 801661e:	68fb      	ldr	r3, [r7, #12]
 8016620:	9300      	str	r3, [sp, #0]
 8016622:	4603      	mov	r3, r0
 8016624:	2000      	movs	r0, #0
 8016626:	f7ff fe0f 	bl	8016248 <tcp_pbuf_prealloc>
 801662a:	6578      	str	r0, [r7, #84]	; 0x54
 801662c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801662e:	2b00      	cmp	r3, #0
 8016630:	f000 8225 	beq.w	8016a7e <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8016634:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016636:	6858      	ldr	r0, [r3, #4]
 8016638:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801663c:	68ba      	ldr	r2, [r7, #8]
 801663e:	4413      	add	r3, r2
 8016640:	8bfa      	ldrh	r2, [r7, #30]
 8016642:	4619      	mov	r1, r3
 8016644:	f005 fdb8 	bl	801c1b8 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8016648:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801664a:	f7fb f983 	bl	8011954 <pbuf_clen>
 801664e:	4603      	mov	r3, r0
 8016650:	461a      	mov	r2, r3
 8016652:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016656:	4413      	add	r3, r2
 8016658:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801665c:	e041      	b.n	80166e2 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801665e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016660:	685b      	ldr	r3, [r3, #4]
 8016662:	637b      	str	r3, [r7, #52]	; 0x34
 8016664:	e002      	b.n	801666c <tcp_write+0x23c>
 8016666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016668:	681b      	ldr	r3, [r3, #0]
 801666a:	637b      	str	r3, [r7, #52]	; 0x34
 801666c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801666e:	681b      	ldr	r3, [r3, #0]
 8016670:	2b00      	cmp	r3, #0
 8016672:	d1f8      	bne.n	8016666 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8016674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016676:	7b1b      	ldrb	r3, [r3, #12]
 8016678:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801667c:	2b00      	cmp	r3, #0
 801667e:	d115      	bne.n	80166ac <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8016680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016682:	685b      	ldr	r3, [r3, #4]
 8016684:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016686:	8952      	ldrh	r2, [r2, #10]
 8016688:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801668a:	68ba      	ldr	r2, [r7, #8]
 801668c:	429a      	cmp	r2, r3
 801668e:	d10d      	bne.n	80166ac <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8016690:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016694:	2b00      	cmp	r3, #0
 8016696:	d006      	beq.n	80166a6 <tcp_write+0x276>
 8016698:	4b1c      	ldr	r3, [pc, #112]	; (801670c <tcp_write+0x2dc>)
 801669a:	f240 2231 	movw	r2, #561	; 0x231
 801669e:	4922      	ldr	r1, [pc, #136]	; (8016728 <tcp_write+0x2f8>)
 80166a0:	481c      	ldr	r0, [pc, #112]	; (8016714 <tcp_write+0x2e4>)
 80166a2:	f006 f81d 	bl	801c6e0 <iprintf>
          extendlen = seglen;
 80166a6:	8bfb      	ldrh	r3, [r7, #30]
 80166a8:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80166aa:	e01a      	b.n	80166e2 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80166ac:	8bfb      	ldrh	r3, [r7, #30]
 80166ae:	2201      	movs	r2, #1
 80166b0:	4619      	mov	r1, r3
 80166b2:	2000      	movs	r0, #0
 80166b4:	f7fa fddc 	bl	8011270 <pbuf_alloc>
 80166b8:	6578      	str	r0, [r7, #84]	; 0x54
 80166ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80166bc:	2b00      	cmp	r3, #0
 80166be:	f000 81e0 	beq.w	8016a82 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80166c2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80166c6:	68ba      	ldr	r2, [r7, #8]
 80166c8:	441a      	add	r2, r3
 80166ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80166cc:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80166ce:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80166d0:	f7fb f940 	bl	8011954 <pbuf_clen>
 80166d4:	4603      	mov	r3, r0
 80166d6:	461a      	mov	r2, r3
 80166d8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80166dc:	4413      	add	r3, r2
 80166de:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80166e2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80166e6:	8bfb      	ldrh	r3, [r7, #30]
 80166e8:	4413      	add	r3, r2
 80166ea:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80166ee:	e0dc      	b.n	80168aa <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80166f0:	68fb      	ldr	r3, [r7, #12]
 80166f2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80166f6:	2b00      	cmp	r3, #0
 80166f8:	f000 80d7 	beq.w	80168aa <tcp_write+0x47a>
 80166fc:	4b03      	ldr	r3, [pc, #12]	; (801670c <tcp_write+0x2dc>)
 80166fe:	f240 224a 	movw	r2, #586	; 0x24a
 8016702:	490a      	ldr	r1, [pc, #40]	; (801672c <tcp_write+0x2fc>)
 8016704:	4803      	ldr	r0, [pc, #12]	; (8016714 <tcp_write+0x2e4>)
 8016706:	f005 ffeb 	bl	801c6e0 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801670a:	e0ce      	b.n	80168aa <tcp_write+0x47a>
 801670c:	08020c58 	.word	0x08020c58
 8016710:	08020df8 	.word	0x08020df8
 8016714:	08020cac 	.word	0x08020cac
 8016718:	08020e10 	.word	0x08020e10
 801671c:	08020e44 	.word	0x08020e44
 8016720:	08020e5c 	.word	0x08020e5c
 8016724:	08020e7c 	.word	0x08020e7c
 8016728:	08020e9c 	.word	0x08020e9c
 801672c:	08020ec8 	.word	0x08020ec8
    struct pbuf *p;
    u16_t left = len - pos;
 8016730:	88fa      	ldrh	r2, [r7, #6]
 8016732:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016736:	1ad3      	subs	r3, r2, r3
 8016738:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801673a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801673e:	b29b      	uxth	r3, r3
 8016740:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016742:	1ad3      	subs	r3, r2, r3
 8016744:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8016746:	8b7a      	ldrh	r2, [r7, #26]
 8016748:	8bbb      	ldrh	r3, [r7, #28]
 801674a:	4293      	cmp	r3, r2
 801674c:	bf28      	it	cs
 801674e:	4613      	movcs	r3, r2
 8016750:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8016752:	797b      	ldrb	r3, [r7, #5]
 8016754:	f003 0301 	and.w	r3, r3, #1
 8016758:	2b00      	cmp	r3, #0
 801675a:	d036      	beq.n	80167ca <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801675c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016760:	b29a      	uxth	r2, r3
 8016762:	8b3b      	ldrh	r3, [r7, #24]
 8016764:	4413      	add	r3, r2
 8016766:	b299      	uxth	r1, r3
 8016768:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801676a:	2b00      	cmp	r3, #0
 801676c:	bf0c      	ite	eq
 801676e:	2301      	moveq	r3, #1
 8016770:	2300      	movne	r3, #0
 8016772:	b2db      	uxtb	r3, r3
 8016774:	f107 0012 	add.w	r0, r7, #18
 8016778:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801677a:	9302      	str	r3, [sp, #8]
 801677c:	797b      	ldrb	r3, [r7, #5]
 801677e:	9301      	str	r3, [sp, #4]
 8016780:	68fb      	ldr	r3, [r7, #12]
 8016782:	9300      	str	r3, [sp, #0]
 8016784:	4603      	mov	r3, r0
 8016786:	2036      	movs	r0, #54	; 0x36
 8016788:	f7ff fd5e 	bl	8016248 <tcp_pbuf_prealloc>
 801678c:	6338      	str	r0, [r7, #48]	; 0x30
 801678e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016790:	2b00      	cmp	r3, #0
 8016792:	f000 8178 	beq.w	8016a86 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8016796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016798:	895b      	ldrh	r3, [r3, #10]
 801679a:	8b3a      	ldrh	r2, [r7, #24]
 801679c:	429a      	cmp	r2, r3
 801679e:	d906      	bls.n	80167ae <tcp_write+0x37e>
 80167a0:	4b8c      	ldr	r3, [pc, #560]	; (80169d4 <tcp_write+0x5a4>)
 80167a2:	f240 2266 	movw	r2, #614	; 0x266
 80167a6:	498c      	ldr	r1, [pc, #560]	; (80169d8 <tcp_write+0x5a8>)
 80167a8:	488c      	ldr	r0, [pc, #560]	; (80169dc <tcp_write+0x5ac>)
 80167aa:	f005 ff99 	bl	801c6e0 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80167ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167b0:	685a      	ldr	r2, [r3, #4]
 80167b2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80167b6:	18d0      	adds	r0, r2, r3
 80167b8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80167bc:	68ba      	ldr	r2, [r7, #8]
 80167be:	4413      	add	r3, r2
 80167c0:	8b3a      	ldrh	r2, [r7, #24]
 80167c2:	4619      	mov	r1, r3
 80167c4:	f005 fcf8 	bl	801c1b8 <memcpy>
 80167c8:	e02f      	b.n	801682a <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80167ca:	8a7b      	ldrh	r3, [r7, #18]
 80167cc:	2b00      	cmp	r3, #0
 80167ce:	d006      	beq.n	80167de <tcp_write+0x3ae>
 80167d0:	4b80      	ldr	r3, [pc, #512]	; (80169d4 <tcp_write+0x5a4>)
 80167d2:	f240 2271 	movw	r2, #625	; 0x271
 80167d6:	4982      	ldr	r1, [pc, #520]	; (80169e0 <tcp_write+0x5b0>)
 80167d8:	4880      	ldr	r0, [pc, #512]	; (80169dc <tcp_write+0x5ac>)
 80167da:	f005 ff81 	bl	801c6e0 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80167de:	8b3b      	ldrh	r3, [r7, #24]
 80167e0:	2201      	movs	r2, #1
 80167e2:	4619      	mov	r1, r3
 80167e4:	2036      	movs	r0, #54	; 0x36
 80167e6:	f7fa fd43 	bl	8011270 <pbuf_alloc>
 80167ea:	6178      	str	r0, [r7, #20]
 80167ec:	697b      	ldr	r3, [r7, #20]
 80167ee:	2b00      	cmp	r3, #0
 80167f0:	f000 814b 	beq.w	8016a8a <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80167f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80167f8:	68ba      	ldr	r2, [r7, #8]
 80167fa:	441a      	add	r2, r3
 80167fc:	697b      	ldr	r3, [r7, #20]
 80167fe:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8016800:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016804:	b29b      	uxth	r3, r3
 8016806:	f44f 7220 	mov.w	r2, #640	; 0x280
 801680a:	4619      	mov	r1, r3
 801680c:	2036      	movs	r0, #54	; 0x36
 801680e:	f7fa fd2f 	bl	8011270 <pbuf_alloc>
 8016812:	6338      	str	r0, [r7, #48]	; 0x30
 8016814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016816:	2b00      	cmp	r3, #0
 8016818:	d103      	bne.n	8016822 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801681a:	6978      	ldr	r0, [r7, #20]
 801681c:	f7fb f80c 	bl	8011838 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8016820:	e136      	b.n	8016a90 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8016822:	6979      	ldr	r1, [r7, #20]
 8016824:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016826:	f7fb f8d5 	bl	80119d4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801682a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801682c:	f7fb f892 	bl	8011954 <pbuf_clen>
 8016830:	4603      	mov	r3, r0
 8016832:	461a      	mov	r2, r3
 8016834:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016838:	4413      	add	r3, r2
 801683a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801683e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016842:	2b09      	cmp	r3, #9
 8016844:	d903      	bls.n	801684e <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8016846:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016848:	f7fa fff6 	bl	8011838 <pbuf_free>
      goto memerr;
 801684c:	e120      	b.n	8016a90 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801684e:	68fb      	ldr	r3, [r7, #12]
 8016850:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8016852:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016856:	441a      	add	r2, r3
 8016858:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801685c:	9300      	str	r3, [sp, #0]
 801685e:	4613      	mov	r3, r2
 8016860:	2200      	movs	r2, #0
 8016862:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016864:	68f8      	ldr	r0, [r7, #12]
 8016866:	f7ff fc51 	bl	801610c <tcp_create_segment>
 801686a:	64f8      	str	r0, [r7, #76]	; 0x4c
 801686c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801686e:	2b00      	cmp	r3, #0
 8016870:	f000 810d 	beq.w	8016a8e <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8016874:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016876:	2b00      	cmp	r3, #0
 8016878:	d102      	bne.n	8016880 <tcp_write+0x450>
      queue = seg;
 801687a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801687c:	647b      	str	r3, [r7, #68]	; 0x44
 801687e:	e00c      	b.n	801689a <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8016880:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016882:	2b00      	cmp	r3, #0
 8016884:	d106      	bne.n	8016894 <tcp_write+0x464>
 8016886:	4b53      	ldr	r3, [pc, #332]	; (80169d4 <tcp_write+0x5a4>)
 8016888:	f240 22ab 	movw	r2, #683	; 0x2ab
 801688c:	4955      	ldr	r1, [pc, #340]	; (80169e4 <tcp_write+0x5b4>)
 801688e:	4853      	ldr	r0, [pc, #332]	; (80169dc <tcp_write+0x5ac>)
 8016890:	f005 ff26 	bl	801c6e0 <iprintf>
      prev_seg->next = seg;
 8016894:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016896:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016898:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801689a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801689c:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801689e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80168a2:	8b3b      	ldrh	r3, [r7, #24]
 80168a4:	4413      	add	r3, r2
 80168a6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80168aa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80168ae:	88fb      	ldrh	r3, [r7, #6]
 80168b0:	429a      	cmp	r2, r3
 80168b2:	f4ff af3d 	bcc.w	8016730 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80168b6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80168b8:	2b00      	cmp	r3, #0
 80168ba:	d02c      	beq.n	8016916 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80168bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80168be:	685b      	ldr	r3, [r3, #4]
 80168c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80168c2:	e01e      	b.n	8016902 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 80168c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168c6:	891a      	ldrh	r2, [r3, #8]
 80168c8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80168ca:	4413      	add	r3, r2
 80168cc:	b29a      	uxth	r2, r3
 80168ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168d0:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80168d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168d4:	681b      	ldr	r3, [r3, #0]
 80168d6:	2b00      	cmp	r3, #0
 80168d8:	d110      	bne.n	80168fc <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80168da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168dc:	685b      	ldr	r3, [r3, #4]
 80168de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80168e0:	8952      	ldrh	r2, [r2, #10]
 80168e2:	4413      	add	r3, r2
 80168e4:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80168e6:	68b9      	ldr	r1, [r7, #8]
 80168e8:	4618      	mov	r0, r3
 80168ea:	f005 fc65 	bl	801c1b8 <memcpy>
        p->len += oversize_used;
 80168ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168f0:	895a      	ldrh	r2, [r3, #10]
 80168f2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80168f4:	4413      	add	r3, r2
 80168f6:	b29a      	uxth	r2, r3
 80168f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168fa:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80168fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168fe:	681b      	ldr	r3, [r3, #0]
 8016900:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016904:	2b00      	cmp	r3, #0
 8016906:	d1dd      	bne.n	80168c4 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8016908:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801690a:	891a      	ldrh	r2, [r3, #8]
 801690c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801690e:	4413      	add	r3, r2
 8016910:	b29a      	uxth	r2, r3
 8016912:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016914:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8016916:	8a7a      	ldrh	r2, [r7, #18]
 8016918:	68fb      	ldr	r3, [r7, #12]
 801691a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801691e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016920:	2b00      	cmp	r3, #0
 8016922:	d018      	beq.n	8016956 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8016924:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016926:	2b00      	cmp	r3, #0
 8016928:	d106      	bne.n	8016938 <tcp_write+0x508>
 801692a:	4b2a      	ldr	r3, [pc, #168]	; (80169d4 <tcp_write+0x5a4>)
 801692c:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8016930:	492d      	ldr	r1, [pc, #180]	; (80169e8 <tcp_write+0x5b8>)
 8016932:	482a      	ldr	r0, [pc, #168]	; (80169dc <tcp_write+0x5ac>)
 8016934:	f005 fed4 	bl	801c6e0 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8016938:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801693a:	685b      	ldr	r3, [r3, #4]
 801693c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801693e:	4618      	mov	r0, r3
 8016940:	f7fb f848 	bl	80119d4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8016944:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016946:	891a      	ldrh	r2, [r3, #8]
 8016948:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801694a:	891b      	ldrh	r3, [r3, #8]
 801694c:	4413      	add	r3, r2
 801694e:	b29a      	uxth	r2, r3
 8016950:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016952:	811a      	strh	r2, [r3, #8]
 8016954:	e037      	b.n	80169c6 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8016956:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016958:	2b00      	cmp	r3, #0
 801695a:	d034      	beq.n	80169c6 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801695c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801695e:	2b00      	cmp	r3, #0
 8016960:	d003      	beq.n	801696a <tcp_write+0x53a>
 8016962:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016964:	685b      	ldr	r3, [r3, #4]
 8016966:	2b00      	cmp	r3, #0
 8016968:	d106      	bne.n	8016978 <tcp_write+0x548>
 801696a:	4b1a      	ldr	r3, [pc, #104]	; (80169d4 <tcp_write+0x5a4>)
 801696c:	f240 22e6 	movw	r2, #742	; 0x2e6
 8016970:	491e      	ldr	r1, [pc, #120]	; (80169ec <tcp_write+0x5bc>)
 8016972:	481a      	ldr	r0, [pc, #104]	; (80169dc <tcp_write+0x5ac>)
 8016974:	f005 feb4 	bl	801c6e0 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8016978:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801697a:	685b      	ldr	r3, [r3, #4]
 801697c:	62bb      	str	r3, [r7, #40]	; 0x28
 801697e:	e009      	b.n	8016994 <tcp_write+0x564>
      p->tot_len += extendlen;
 8016980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016982:	891a      	ldrh	r2, [r3, #8]
 8016984:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016986:	4413      	add	r3, r2
 8016988:	b29a      	uxth	r2, r3
 801698a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801698c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801698e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016990:	681b      	ldr	r3, [r3, #0]
 8016992:	62bb      	str	r3, [r7, #40]	; 0x28
 8016994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016996:	681b      	ldr	r3, [r3, #0]
 8016998:	2b00      	cmp	r3, #0
 801699a:	d1f1      	bne.n	8016980 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 801699c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801699e:	891a      	ldrh	r2, [r3, #8]
 80169a0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80169a2:	4413      	add	r3, r2
 80169a4:	b29a      	uxth	r2, r3
 80169a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169a8:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80169aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169ac:	895a      	ldrh	r2, [r3, #10]
 80169ae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80169b0:	4413      	add	r3, r2
 80169b2:	b29a      	uxth	r2, r3
 80169b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169b6:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80169b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80169ba:	891a      	ldrh	r2, [r3, #8]
 80169bc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80169be:	4413      	add	r3, r2
 80169c0:	b29a      	uxth	r2, r3
 80169c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80169c4:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80169c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80169c8:	2b00      	cmp	r3, #0
 80169ca:	d111      	bne.n	80169f0 <tcp_write+0x5c0>
    pcb->unsent = queue;
 80169cc:	68fb      	ldr	r3, [r7, #12]
 80169ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80169d0:	66da      	str	r2, [r3, #108]	; 0x6c
 80169d2:	e010      	b.n	80169f6 <tcp_write+0x5c6>
 80169d4:	08020c58 	.word	0x08020c58
 80169d8:	08020ef8 	.word	0x08020ef8
 80169dc:	08020cac 	.word	0x08020cac
 80169e0:	08020f38 	.word	0x08020f38
 80169e4:	08020f48 	.word	0x08020f48
 80169e8:	08020f5c 	.word	0x08020f5c
 80169ec:	08020f94 	.word	0x08020f94
  } else {
    last_unsent->next = queue;
 80169f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80169f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80169f4:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80169f6:	68fb      	ldr	r3, [r7, #12]
 80169f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80169fa:	88fb      	ldrh	r3, [r7, #6]
 80169fc:	441a      	add	r2, r3
 80169fe:	68fb      	ldr	r3, [r7, #12]
 8016a00:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8016a02:	68fb      	ldr	r3, [r7, #12]
 8016a04:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8016a08:	88fb      	ldrh	r3, [r7, #6]
 8016a0a:	1ad3      	subs	r3, r2, r3
 8016a0c:	b29a      	uxth	r2, r3
 8016a0e:	68fb      	ldr	r3, [r7, #12]
 8016a10:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8016a14:	68fb      	ldr	r3, [r7, #12]
 8016a16:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8016a1a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8016a1e:	68fb      	ldr	r3, [r7, #12]
 8016a20:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016a24:	2b00      	cmp	r3, #0
 8016a26:	d00e      	beq.n	8016a46 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8016a28:	68fb      	ldr	r3, [r7, #12]
 8016a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016a2c:	2b00      	cmp	r3, #0
 8016a2e:	d10a      	bne.n	8016a46 <tcp_write+0x616>
 8016a30:	68fb      	ldr	r3, [r7, #12]
 8016a32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016a34:	2b00      	cmp	r3, #0
 8016a36:	d106      	bne.n	8016a46 <tcp_write+0x616>
 8016a38:	4b2c      	ldr	r3, [pc, #176]	; (8016aec <tcp_write+0x6bc>)
 8016a3a:	f240 3212 	movw	r2, #786	; 0x312
 8016a3e:	492c      	ldr	r1, [pc, #176]	; (8016af0 <tcp_write+0x6c0>)
 8016a40:	482c      	ldr	r0, [pc, #176]	; (8016af4 <tcp_write+0x6c4>)
 8016a42:	f005 fe4d 	bl	801c6e0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8016a46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016a48:	2b00      	cmp	r3, #0
 8016a4a:	d016      	beq.n	8016a7a <tcp_write+0x64a>
 8016a4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016a4e:	68db      	ldr	r3, [r3, #12]
 8016a50:	2b00      	cmp	r3, #0
 8016a52:	d012      	beq.n	8016a7a <tcp_write+0x64a>
 8016a54:	797b      	ldrb	r3, [r7, #5]
 8016a56:	f003 0302 	and.w	r3, r3, #2
 8016a5a:	2b00      	cmp	r3, #0
 8016a5c:	d10d      	bne.n	8016a7a <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8016a5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016a60:	68db      	ldr	r3, [r3, #12]
 8016a62:	899b      	ldrh	r3, [r3, #12]
 8016a64:	b29c      	uxth	r4, r3
 8016a66:	2008      	movs	r0, #8
 8016a68:	f7f9 fb2a 	bl	80100c0 <lwip_htons>
 8016a6c:	4603      	mov	r3, r0
 8016a6e:	461a      	mov	r2, r3
 8016a70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016a72:	68db      	ldr	r3, [r3, #12]
 8016a74:	4322      	orrs	r2, r4
 8016a76:	b292      	uxth	r2, r2
 8016a78:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8016a7a:	2300      	movs	r3, #0
 8016a7c:	e031      	b.n	8016ae2 <tcp_write+0x6b2>
          goto memerr;
 8016a7e:	bf00      	nop
 8016a80:	e006      	b.n	8016a90 <tcp_write+0x660>
            goto memerr;
 8016a82:	bf00      	nop
 8016a84:	e004      	b.n	8016a90 <tcp_write+0x660>
        goto memerr;
 8016a86:	bf00      	nop
 8016a88:	e002      	b.n	8016a90 <tcp_write+0x660>
        goto memerr;
 8016a8a:	bf00      	nop
 8016a8c:	e000      	b.n	8016a90 <tcp_write+0x660>
      goto memerr;
 8016a8e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016a90:	68fb      	ldr	r3, [r7, #12]
 8016a92:	8b5b      	ldrh	r3, [r3, #26]
 8016a94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016a98:	b29a      	uxth	r2, r3
 8016a9a:	68fb      	ldr	r3, [r7, #12]
 8016a9c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8016a9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016aa0:	2b00      	cmp	r3, #0
 8016aa2:	d002      	beq.n	8016aaa <tcp_write+0x67a>
    pbuf_free(concat_p);
 8016aa4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8016aa6:	f7fa fec7 	bl	8011838 <pbuf_free>
  }
  if (queue != NULL) {
 8016aaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016aac:	2b00      	cmp	r3, #0
 8016aae:	d002      	beq.n	8016ab6 <tcp_write+0x686>
    tcp_segs_free(queue);
 8016ab0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8016ab2:	f7fc fb51 	bl	8013158 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8016ab6:	68fb      	ldr	r3, [r7, #12]
 8016ab8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016abc:	2b00      	cmp	r3, #0
 8016abe:	d00e      	beq.n	8016ade <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8016ac0:	68fb      	ldr	r3, [r7, #12]
 8016ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016ac4:	2b00      	cmp	r3, #0
 8016ac6:	d10a      	bne.n	8016ade <tcp_write+0x6ae>
 8016ac8:	68fb      	ldr	r3, [r7, #12]
 8016aca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016acc:	2b00      	cmp	r3, #0
 8016ace:	d106      	bne.n	8016ade <tcp_write+0x6ae>
 8016ad0:	4b06      	ldr	r3, [pc, #24]	; (8016aec <tcp_write+0x6bc>)
 8016ad2:	f240 3227 	movw	r2, #807	; 0x327
 8016ad6:	4906      	ldr	r1, [pc, #24]	; (8016af0 <tcp_write+0x6c0>)
 8016ad8:	4806      	ldr	r0, [pc, #24]	; (8016af4 <tcp_write+0x6c4>)
 8016ada:	f005 fe01 	bl	801c6e0 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8016ade:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016ae2:	4618      	mov	r0, r3
 8016ae4:	375c      	adds	r7, #92	; 0x5c
 8016ae6:	46bd      	mov	sp, r7
 8016ae8:	bd90      	pop	{r4, r7, pc}
 8016aea:	bf00      	nop
 8016aec:	08020c58 	.word	0x08020c58
 8016af0:	08020fcc 	.word	0x08020fcc
 8016af4:	08020cac 	.word	0x08020cac

08016af8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8016af8:	b590      	push	{r4, r7, lr}
 8016afa:	b08b      	sub	sp, #44	; 0x2c
 8016afc:	af02      	add	r7, sp, #8
 8016afe:	6078      	str	r0, [r7, #4]
 8016b00:	460b      	mov	r3, r1
 8016b02:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8016b04:	2300      	movs	r3, #0
 8016b06:	61fb      	str	r3, [r7, #28]
 8016b08:	2300      	movs	r3, #0
 8016b0a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8016b0c:	2300      	movs	r3, #0
 8016b0e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8016b10:	687b      	ldr	r3, [r7, #4]
 8016b12:	2b00      	cmp	r3, #0
 8016b14:	d106      	bne.n	8016b24 <tcp_split_unsent_seg+0x2c>
 8016b16:	4b95      	ldr	r3, [pc, #596]	; (8016d6c <tcp_split_unsent_seg+0x274>)
 8016b18:	f240 324b 	movw	r2, #843	; 0x34b
 8016b1c:	4994      	ldr	r1, [pc, #592]	; (8016d70 <tcp_split_unsent_seg+0x278>)
 8016b1e:	4895      	ldr	r0, [pc, #596]	; (8016d74 <tcp_split_unsent_seg+0x27c>)
 8016b20:	f005 fdde 	bl	801c6e0 <iprintf>

  useg = pcb->unsent;
 8016b24:	687b      	ldr	r3, [r7, #4]
 8016b26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016b28:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8016b2a:	697b      	ldr	r3, [r7, #20]
 8016b2c:	2b00      	cmp	r3, #0
 8016b2e:	d102      	bne.n	8016b36 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8016b30:	f04f 33ff 	mov.w	r3, #4294967295
 8016b34:	e116      	b.n	8016d64 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8016b36:	887b      	ldrh	r3, [r7, #2]
 8016b38:	2b00      	cmp	r3, #0
 8016b3a:	d109      	bne.n	8016b50 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8016b3c:	4b8b      	ldr	r3, [pc, #556]	; (8016d6c <tcp_split_unsent_seg+0x274>)
 8016b3e:	f240 3253 	movw	r2, #851	; 0x353
 8016b42:	498d      	ldr	r1, [pc, #564]	; (8016d78 <tcp_split_unsent_seg+0x280>)
 8016b44:	488b      	ldr	r0, [pc, #556]	; (8016d74 <tcp_split_unsent_seg+0x27c>)
 8016b46:	f005 fdcb 	bl	801c6e0 <iprintf>
    return ERR_VAL;
 8016b4a:	f06f 0305 	mvn.w	r3, #5
 8016b4e:	e109      	b.n	8016d64 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8016b50:	697b      	ldr	r3, [r7, #20]
 8016b52:	891b      	ldrh	r3, [r3, #8]
 8016b54:	887a      	ldrh	r2, [r7, #2]
 8016b56:	429a      	cmp	r2, r3
 8016b58:	d301      	bcc.n	8016b5e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8016b5a:	2300      	movs	r3, #0
 8016b5c:	e102      	b.n	8016d64 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8016b5e:	687b      	ldr	r3, [r7, #4]
 8016b60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016b62:	887a      	ldrh	r2, [r7, #2]
 8016b64:	429a      	cmp	r2, r3
 8016b66:	d906      	bls.n	8016b76 <tcp_split_unsent_seg+0x7e>
 8016b68:	4b80      	ldr	r3, [pc, #512]	; (8016d6c <tcp_split_unsent_seg+0x274>)
 8016b6a:	f240 325b 	movw	r2, #859	; 0x35b
 8016b6e:	4983      	ldr	r1, [pc, #524]	; (8016d7c <tcp_split_unsent_seg+0x284>)
 8016b70:	4880      	ldr	r0, [pc, #512]	; (8016d74 <tcp_split_unsent_seg+0x27c>)
 8016b72:	f005 fdb5 	bl	801c6e0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8016b76:	697b      	ldr	r3, [r7, #20]
 8016b78:	891b      	ldrh	r3, [r3, #8]
 8016b7a:	2b00      	cmp	r3, #0
 8016b7c:	d106      	bne.n	8016b8c <tcp_split_unsent_seg+0x94>
 8016b7e:	4b7b      	ldr	r3, [pc, #492]	; (8016d6c <tcp_split_unsent_seg+0x274>)
 8016b80:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8016b84:	497e      	ldr	r1, [pc, #504]	; (8016d80 <tcp_split_unsent_seg+0x288>)
 8016b86:	487b      	ldr	r0, [pc, #492]	; (8016d74 <tcp_split_unsent_seg+0x27c>)
 8016b88:	f005 fdaa 	bl	801c6e0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8016b8c:	697b      	ldr	r3, [r7, #20]
 8016b8e:	7a9b      	ldrb	r3, [r3, #10]
 8016b90:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8016b92:	7bfb      	ldrb	r3, [r7, #15]
 8016b94:	009b      	lsls	r3, r3, #2
 8016b96:	b2db      	uxtb	r3, r3
 8016b98:	f003 0304 	and.w	r3, r3, #4
 8016b9c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8016b9e:	697b      	ldr	r3, [r7, #20]
 8016ba0:	891a      	ldrh	r2, [r3, #8]
 8016ba2:	887b      	ldrh	r3, [r7, #2]
 8016ba4:	1ad3      	subs	r3, r2, r3
 8016ba6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8016ba8:	7bbb      	ldrb	r3, [r7, #14]
 8016baa:	b29a      	uxth	r2, r3
 8016bac:	89bb      	ldrh	r3, [r7, #12]
 8016bae:	4413      	add	r3, r2
 8016bb0:	b29b      	uxth	r3, r3
 8016bb2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016bb6:	4619      	mov	r1, r3
 8016bb8:	2036      	movs	r0, #54	; 0x36
 8016bba:	f7fa fb59 	bl	8011270 <pbuf_alloc>
 8016bbe:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016bc0:	693b      	ldr	r3, [r7, #16]
 8016bc2:	2b00      	cmp	r3, #0
 8016bc4:	f000 80b7 	beq.w	8016d36 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8016bc8:	697b      	ldr	r3, [r7, #20]
 8016bca:	685b      	ldr	r3, [r3, #4]
 8016bcc:	891a      	ldrh	r2, [r3, #8]
 8016bce:	697b      	ldr	r3, [r7, #20]
 8016bd0:	891b      	ldrh	r3, [r3, #8]
 8016bd2:	1ad3      	subs	r3, r2, r3
 8016bd4:	b29a      	uxth	r2, r3
 8016bd6:	887b      	ldrh	r3, [r7, #2]
 8016bd8:	4413      	add	r3, r2
 8016bda:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8016bdc:	697b      	ldr	r3, [r7, #20]
 8016bde:	6858      	ldr	r0, [r3, #4]
 8016be0:	693b      	ldr	r3, [r7, #16]
 8016be2:	685a      	ldr	r2, [r3, #4]
 8016be4:	7bbb      	ldrb	r3, [r7, #14]
 8016be6:	18d1      	adds	r1, r2, r3
 8016be8:	897b      	ldrh	r3, [r7, #10]
 8016bea:	89ba      	ldrh	r2, [r7, #12]
 8016bec:	f7fb f82a 	bl	8011c44 <pbuf_copy_partial>
 8016bf0:	4603      	mov	r3, r0
 8016bf2:	461a      	mov	r2, r3
 8016bf4:	89bb      	ldrh	r3, [r7, #12]
 8016bf6:	4293      	cmp	r3, r2
 8016bf8:	f040 809f 	bne.w	8016d3a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8016bfc:	697b      	ldr	r3, [r7, #20]
 8016bfe:	68db      	ldr	r3, [r3, #12]
 8016c00:	899b      	ldrh	r3, [r3, #12]
 8016c02:	b29b      	uxth	r3, r3
 8016c04:	4618      	mov	r0, r3
 8016c06:	f7f9 fa5b 	bl	80100c0 <lwip_htons>
 8016c0a:	4603      	mov	r3, r0
 8016c0c:	b2db      	uxtb	r3, r3
 8016c0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016c12:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8016c14:	2300      	movs	r3, #0
 8016c16:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8016c18:	7efb      	ldrb	r3, [r7, #27]
 8016c1a:	f003 0308 	and.w	r3, r3, #8
 8016c1e:	2b00      	cmp	r3, #0
 8016c20:	d007      	beq.n	8016c32 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8016c22:	7efb      	ldrb	r3, [r7, #27]
 8016c24:	f023 0308 	bic.w	r3, r3, #8
 8016c28:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8016c2a:	7ebb      	ldrb	r3, [r7, #26]
 8016c2c:	f043 0308 	orr.w	r3, r3, #8
 8016c30:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8016c32:	7efb      	ldrb	r3, [r7, #27]
 8016c34:	f003 0301 	and.w	r3, r3, #1
 8016c38:	2b00      	cmp	r3, #0
 8016c3a:	d007      	beq.n	8016c4c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8016c3c:	7efb      	ldrb	r3, [r7, #27]
 8016c3e:	f023 0301 	bic.w	r3, r3, #1
 8016c42:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8016c44:	7ebb      	ldrb	r3, [r7, #26]
 8016c46:	f043 0301 	orr.w	r3, r3, #1
 8016c4a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8016c4c:	697b      	ldr	r3, [r7, #20]
 8016c4e:	68db      	ldr	r3, [r3, #12]
 8016c50:	685b      	ldr	r3, [r3, #4]
 8016c52:	4618      	mov	r0, r3
 8016c54:	f7f9 fa49 	bl	80100ea <lwip_htonl>
 8016c58:	4602      	mov	r2, r0
 8016c5a:	887b      	ldrh	r3, [r7, #2]
 8016c5c:	18d1      	adds	r1, r2, r3
 8016c5e:	7eba      	ldrb	r2, [r7, #26]
 8016c60:	7bfb      	ldrb	r3, [r7, #15]
 8016c62:	9300      	str	r3, [sp, #0]
 8016c64:	460b      	mov	r3, r1
 8016c66:	6939      	ldr	r1, [r7, #16]
 8016c68:	6878      	ldr	r0, [r7, #4]
 8016c6a:	f7ff fa4f 	bl	801610c <tcp_create_segment>
 8016c6e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8016c70:	69fb      	ldr	r3, [r7, #28]
 8016c72:	2b00      	cmp	r3, #0
 8016c74:	d063      	beq.n	8016d3e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8016c76:	697b      	ldr	r3, [r7, #20]
 8016c78:	685b      	ldr	r3, [r3, #4]
 8016c7a:	4618      	mov	r0, r3
 8016c7c:	f7fa fe6a 	bl	8011954 <pbuf_clen>
 8016c80:	4603      	mov	r3, r0
 8016c82:	461a      	mov	r2, r3
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016c8a:	1a9b      	subs	r3, r3, r2
 8016c8c:	b29a      	uxth	r2, r3
 8016c8e:	687b      	ldr	r3, [r7, #4]
 8016c90:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8016c94:	697b      	ldr	r3, [r7, #20]
 8016c96:	6858      	ldr	r0, [r3, #4]
 8016c98:	697b      	ldr	r3, [r7, #20]
 8016c9a:	685b      	ldr	r3, [r3, #4]
 8016c9c:	891a      	ldrh	r2, [r3, #8]
 8016c9e:	89bb      	ldrh	r3, [r7, #12]
 8016ca0:	1ad3      	subs	r3, r2, r3
 8016ca2:	b29b      	uxth	r3, r3
 8016ca4:	4619      	mov	r1, r3
 8016ca6:	f7fa fc41 	bl	801152c <pbuf_realloc>
  useg->len -= remainder;
 8016caa:	697b      	ldr	r3, [r7, #20]
 8016cac:	891a      	ldrh	r2, [r3, #8]
 8016cae:	89bb      	ldrh	r3, [r7, #12]
 8016cb0:	1ad3      	subs	r3, r2, r3
 8016cb2:	b29a      	uxth	r2, r3
 8016cb4:	697b      	ldr	r3, [r7, #20]
 8016cb6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8016cb8:	697b      	ldr	r3, [r7, #20]
 8016cba:	68db      	ldr	r3, [r3, #12]
 8016cbc:	899b      	ldrh	r3, [r3, #12]
 8016cbe:	b29c      	uxth	r4, r3
 8016cc0:	7efb      	ldrb	r3, [r7, #27]
 8016cc2:	b29b      	uxth	r3, r3
 8016cc4:	4618      	mov	r0, r3
 8016cc6:	f7f9 f9fb 	bl	80100c0 <lwip_htons>
 8016cca:	4603      	mov	r3, r0
 8016ccc:	461a      	mov	r2, r3
 8016cce:	697b      	ldr	r3, [r7, #20]
 8016cd0:	68db      	ldr	r3, [r3, #12]
 8016cd2:	4322      	orrs	r2, r4
 8016cd4:	b292      	uxth	r2, r2
 8016cd6:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8016cd8:	697b      	ldr	r3, [r7, #20]
 8016cda:	685b      	ldr	r3, [r3, #4]
 8016cdc:	4618      	mov	r0, r3
 8016cde:	f7fa fe39 	bl	8011954 <pbuf_clen>
 8016ce2:	4603      	mov	r3, r0
 8016ce4:	461a      	mov	r2, r3
 8016ce6:	687b      	ldr	r3, [r7, #4]
 8016ce8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016cec:	4413      	add	r3, r2
 8016cee:	b29a      	uxth	r2, r3
 8016cf0:	687b      	ldr	r3, [r7, #4]
 8016cf2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8016cf6:	69fb      	ldr	r3, [r7, #28]
 8016cf8:	685b      	ldr	r3, [r3, #4]
 8016cfa:	4618      	mov	r0, r3
 8016cfc:	f7fa fe2a 	bl	8011954 <pbuf_clen>
 8016d00:	4603      	mov	r3, r0
 8016d02:	461a      	mov	r2, r3
 8016d04:	687b      	ldr	r3, [r7, #4]
 8016d06:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016d0a:	4413      	add	r3, r2
 8016d0c:	b29a      	uxth	r2, r3
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8016d14:	697b      	ldr	r3, [r7, #20]
 8016d16:	681a      	ldr	r2, [r3, #0]
 8016d18:	69fb      	ldr	r3, [r7, #28]
 8016d1a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8016d1c:	697b      	ldr	r3, [r7, #20]
 8016d1e:	69fa      	ldr	r2, [r7, #28]
 8016d20:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8016d22:	69fb      	ldr	r3, [r7, #28]
 8016d24:	681b      	ldr	r3, [r3, #0]
 8016d26:	2b00      	cmp	r3, #0
 8016d28:	d103      	bne.n	8016d32 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8016d2a:	687b      	ldr	r3, [r7, #4]
 8016d2c:	2200      	movs	r2, #0
 8016d2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8016d32:	2300      	movs	r3, #0
 8016d34:	e016      	b.n	8016d64 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8016d36:	bf00      	nop
 8016d38:	e002      	b.n	8016d40 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8016d3a:	bf00      	nop
 8016d3c:	e000      	b.n	8016d40 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8016d3e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8016d40:	69fb      	ldr	r3, [r7, #28]
 8016d42:	2b00      	cmp	r3, #0
 8016d44:	d006      	beq.n	8016d54 <tcp_split_unsent_seg+0x25c>
 8016d46:	4b09      	ldr	r3, [pc, #36]	; (8016d6c <tcp_split_unsent_seg+0x274>)
 8016d48:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8016d4c:	490d      	ldr	r1, [pc, #52]	; (8016d84 <tcp_split_unsent_seg+0x28c>)
 8016d4e:	4809      	ldr	r0, [pc, #36]	; (8016d74 <tcp_split_unsent_seg+0x27c>)
 8016d50:	f005 fcc6 	bl	801c6e0 <iprintf>
  if (p != NULL) {
 8016d54:	693b      	ldr	r3, [r7, #16]
 8016d56:	2b00      	cmp	r3, #0
 8016d58:	d002      	beq.n	8016d60 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8016d5a:	6938      	ldr	r0, [r7, #16]
 8016d5c:	f7fa fd6c 	bl	8011838 <pbuf_free>
  }

  return ERR_MEM;
 8016d60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016d64:	4618      	mov	r0, r3
 8016d66:	3724      	adds	r7, #36	; 0x24
 8016d68:	46bd      	mov	sp, r7
 8016d6a:	bd90      	pop	{r4, r7, pc}
 8016d6c:	08020c58 	.word	0x08020c58
 8016d70:	08020fec 	.word	0x08020fec
 8016d74:	08020cac 	.word	0x08020cac
 8016d78:	08021010 	.word	0x08021010
 8016d7c:	08021034 	.word	0x08021034
 8016d80:	08021044 	.word	0x08021044
 8016d84:	08021054 	.word	0x08021054

08016d88 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8016d88:	b590      	push	{r4, r7, lr}
 8016d8a:	b085      	sub	sp, #20
 8016d8c:	af00      	add	r7, sp, #0
 8016d8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8016d90:	687b      	ldr	r3, [r7, #4]
 8016d92:	2b00      	cmp	r3, #0
 8016d94:	d106      	bne.n	8016da4 <tcp_send_fin+0x1c>
 8016d96:	4b21      	ldr	r3, [pc, #132]	; (8016e1c <tcp_send_fin+0x94>)
 8016d98:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8016d9c:	4920      	ldr	r1, [pc, #128]	; (8016e20 <tcp_send_fin+0x98>)
 8016d9e:	4821      	ldr	r0, [pc, #132]	; (8016e24 <tcp_send_fin+0x9c>)
 8016da0:	f005 fc9e 	bl	801c6e0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8016da4:	687b      	ldr	r3, [r7, #4]
 8016da6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016da8:	2b00      	cmp	r3, #0
 8016daa:	d02e      	beq.n	8016e0a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016dac:	687b      	ldr	r3, [r7, #4]
 8016dae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016db0:	60fb      	str	r3, [r7, #12]
 8016db2:	e002      	b.n	8016dba <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8016db4:	68fb      	ldr	r3, [r7, #12]
 8016db6:	681b      	ldr	r3, [r3, #0]
 8016db8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016dba:	68fb      	ldr	r3, [r7, #12]
 8016dbc:	681b      	ldr	r3, [r3, #0]
 8016dbe:	2b00      	cmp	r3, #0
 8016dc0:	d1f8      	bne.n	8016db4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8016dc2:	68fb      	ldr	r3, [r7, #12]
 8016dc4:	68db      	ldr	r3, [r3, #12]
 8016dc6:	899b      	ldrh	r3, [r3, #12]
 8016dc8:	b29b      	uxth	r3, r3
 8016dca:	4618      	mov	r0, r3
 8016dcc:	f7f9 f978 	bl	80100c0 <lwip_htons>
 8016dd0:	4603      	mov	r3, r0
 8016dd2:	b2db      	uxtb	r3, r3
 8016dd4:	f003 0307 	and.w	r3, r3, #7
 8016dd8:	2b00      	cmp	r3, #0
 8016dda:	d116      	bne.n	8016e0a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8016ddc:	68fb      	ldr	r3, [r7, #12]
 8016dde:	68db      	ldr	r3, [r3, #12]
 8016de0:	899b      	ldrh	r3, [r3, #12]
 8016de2:	b29c      	uxth	r4, r3
 8016de4:	2001      	movs	r0, #1
 8016de6:	f7f9 f96b 	bl	80100c0 <lwip_htons>
 8016dea:	4603      	mov	r3, r0
 8016dec:	461a      	mov	r2, r3
 8016dee:	68fb      	ldr	r3, [r7, #12]
 8016df0:	68db      	ldr	r3, [r3, #12]
 8016df2:	4322      	orrs	r2, r4
 8016df4:	b292      	uxth	r2, r2
 8016df6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8016df8:	687b      	ldr	r3, [r7, #4]
 8016dfa:	8b5b      	ldrh	r3, [r3, #26]
 8016dfc:	f043 0320 	orr.w	r3, r3, #32
 8016e00:	b29a      	uxth	r2, r3
 8016e02:	687b      	ldr	r3, [r7, #4]
 8016e04:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8016e06:	2300      	movs	r3, #0
 8016e08:	e004      	b.n	8016e14 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8016e0a:	2101      	movs	r1, #1
 8016e0c:	6878      	ldr	r0, [r7, #4]
 8016e0e:	f000 f80b 	bl	8016e28 <tcp_enqueue_flags>
 8016e12:	4603      	mov	r3, r0
}
 8016e14:	4618      	mov	r0, r3
 8016e16:	3714      	adds	r7, #20
 8016e18:	46bd      	mov	sp, r7
 8016e1a:	bd90      	pop	{r4, r7, pc}
 8016e1c:	08020c58 	.word	0x08020c58
 8016e20:	08021060 	.word	0x08021060
 8016e24:	08020cac 	.word	0x08020cac

08016e28 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8016e28:	b580      	push	{r7, lr}
 8016e2a:	b08a      	sub	sp, #40	; 0x28
 8016e2c:	af02      	add	r7, sp, #8
 8016e2e:	6078      	str	r0, [r7, #4]
 8016e30:	460b      	mov	r3, r1
 8016e32:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8016e34:	2300      	movs	r3, #0
 8016e36:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8016e38:	2300      	movs	r3, #0
 8016e3a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8016e3c:	78fb      	ldrb	r3, [r7, #3]
 8016e3e:	f003 0303 	and.w	r3, r3, #3
 8016e42:	2b00      	cmp	r3, #0
 8016e44:	d106      	bne.n	8016e54 <tcp_enqueue_flags+0x2c>
 8016e46:	4b67      	ldr	r3, [pc, #412]	; (8016fe4 <tcp_enqueue_flags+0x1bc>)
 8016e48:	f240 4211 	movw	r2, #1041	; 0x411
 8016e4c:	4966      	ldr	r1, [pc, #408]	; (8016fe8 <tcp_enqueue_flags+0x1c0>)
 8016e4e:	4867      	ldr	r0, [pc, #412]	; (8016fec <tcp_enqueue_flags+0x1c4>)
 8016e50:	f005 fc46 	bl	801c6e0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8016e54:	687b      	ldr	r3, [r7, #4]
 8016e56:	2b00      	cmp	r3, #0
 8016e58:	d106      	bne.n	8016e68 <tcp_enqueue_flags+0x40>
 8016e5a:	4b62      	ldr	r3, [pc, #392]	; (8016fe4 <tcp_enqueue_flags+0x1bc>)
 8016e5c:	f240 4213 	movw	r2, #1043	; 0x413
 8016e60:	4963      	ldr	r1, [pc, #396]	; (8016ff0 <tcp_enqueue_flags+0x1c8>)
 8016e62:	4862      	ldr	r0, [pc, #392]	; (8016fec <tcp_enqueue_flags+0x1c4>)
 8016e64:	f005 fc3c 	bl	801c6e0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8016e68:	78fb      	ldrb	r3, [r7, #3]
 8016e6a:	f003 0302 	and.w	r3, r3, #2
 8016e6e:	2b00      	cmp	r3, #0
 8016e70:	d001      	beq.n	8016e76 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8016e72:	2301      	movs	r3, #1
 8016e74:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8016e76:	7ffb      	ldrb	r3, [r7, #31]
 8016e78:	009b      	lsls	r3, r3, #2
 8016e7a:	b2db      	uxtb	r3, r3
 8016e7c:	f003 0304 	and.w	r3, r3, #4
 8016e80:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8016e82:	7dfb      	ldrb	r3, [r7, #23]
 8016e84:	b29b      	uxth	r3, r3
 8016e86:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016e8a:	4619      	mov	r1, r3
 8016e8c:	2036      	movs	r0, #54	; 0x36
 8016e8e:	f7fa f9ef 	bl	8011270 <pbuf_alloc>
 8016e92:	6138      	str	r0, [r7, #16]
 8016e94:	693b      	ldr	r3, [r7, #16]
 8016e96:	2b00      	cmp	r3, #0
 8016e98:	d109      	bne.n	8016eae <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016e9a:	687b      	ldr	r3, [r7, #4]
 8016e9c:	8b5b      	ldrh	r3, [r3, #26]
 8016e9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016ea2:	b29a      	uxth	r2, r3
 8016ea4:	687b      	ldr	r3, [r7, #4]
 8016ea6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8016ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8016eac:	e095      	b.n	8016fda <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8016eae:	693b      	ldr	r3, [r7, #16]
 8016eb0:	895a      	ldrh	r2, [r3, #10]
 8016eb2:	7dfb      	ldrb	r3, [r7, #23]
 8016eb4:	b29b      	uxth	r3, r3
 8016eb6:	429a      	cmp	r2, r3
 8016eb8:	d206      	bcs.n	8016ec8 <tcp_enqueue_flags+0xa0>
 8016eba:	4b4a      	ldr	r3, [pc, #296]	; (8016fe4 <tcp_enqueue_flags+0x1bc>)
 8016ebc:	f240 4239 	movw	r2, #1081	; 0x439
 8016ec0:	494c      	ldr	r1, [pc, #304]	; (8016ff4 <tcp_enqueue_flags+0x1cc>)
 8016ec2:	484a      	ldr	r0, [pc, #296]	; (8016fec <tcp_enqueue_flags+0x1c4>)
 8016ec4:	f005 fc0c 	bl	801c6e0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8016ec8:	687b      	ldr	r3, [r7, #4]
 8016eca:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8016ecc:	78fa      	ldrb	r2, [r7, #3]
 8016ece:	7ffb      	ldrb	r3, [r7, #31]
 8016ed0:	9300      	str	r3, [sp, #0]
 8016ed2:	460b      	mov	r3, r1
 8016ed4:	6939      	ldr	r1, [r7, #16]
 8016ed6:	6878      	ldr	r0, [r7, #4]
 8016ed8:	f7ff f918 	bl	801610c <tcp_create_segment>
 8016edc:	60f8      	str	r0, [r7, #12]
 8016ede:	68fb      	ldr	r3, [r7, #12]
 8016ee0:	2b00      	cmp	r3, #0
 8016ee2:	d109      	bne.n	8016ef8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016ee4:	687b      	ldr	r3, [r7, #4]
 8016ee6:	8b5b      	ldrh	r3, [r3, #26]
 8016ee8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016eec:	b29a      	uxth	r2, r3
 8016eee:	687b      	ldr	r3, [r7, #4]
 8016ef0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8016ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8016ef6:	e070      	b.n	8016fda <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8016ef8:	68fb      	ldr	r3, [r7, #12]
 8016efa:	68db      	ldr	r3, [r3, #12]
 8016efc:	f003 0303 	and.w	r3, r3, #3
 8016f00:	2b00      	cmp	r3, #0
 8016f02:	d006      	beq.n	8016f12 <tcp_enqueue_flags+0xea>
 8016f04:	4b37      	ldr	r3, [pc, #220]	; (8016fe4 <tcp_enqueue_flags+0x1bc>)
 8016f06:	f240 4242 	movw	r2, #1090	; 0x442
 8016f0a:	493b      	ldr	r1, [pc, #236]	; (8016ff8 <tcp_enqueue_flags+0x1d0>)
 8016f0c:	4837      	ldr	r0, [pc, #220]	; (8016fec <tcp_enqueue_flags+0x1c4>)
 8016f0e:	f005 fbe7 	bl	801c6e0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8016f12:	68fb      	ldr	r3, [r7, #12]
 8016f14:	891b      	ldrh	r3, [r3, #8]
 8016f16:	2b00      	cmp	r3, #0
 8016f18:	d006      	beq.n	8016f28 <tcp_enqueue_flags+0x100>
 8016f1a:	4b32      	ldr	r3, [pc, #200]	; (8016fe4 <tcp_enqueue_flags+0x1bc>)
 8016f1c:	f240 4243 	movw	r2, #1091	; 0x443
 8016f20:	4936      	ldr	r1, [pc, #216]	; (8016ffc <tcp_enqueue_flags+0x1d4>)
 8016f22:	4832      	ldr	r0, [pc, #200]	; (8016fec <tcp_enqueue_flags+0x1c4>)
 8016f24:	f005 fbdc 	bl	801c6e0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8016f28:	687b      	ldr	r3, [r7, #4]
 8016f2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016f2c:	2b00      	cmp	r3, #0
 8016f2e:	d103      	bne.n	8016f38 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8016f30:	687b      	ldr	r3, [r7, #4]
 8016f32:	68fa      	ldr	r2, [r7, #12]
 8016f34:	66da      	str	r2, [r3, #108]	; 0x6c
 8016f36:	e00d      	b.n	8016f54 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8016f38:	687b      	ldr	r3, [r7, #4]
 8016f3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016f3c:	61bb      	str	r3, [r7, #24]
 8016f3e:	e002      	b.n	8016f46 <tcp_enqueue_flags+0x11e>
 8016f40:	69bb      	ldr	r3, [r7, #24]
 8016f42:	681b      	ldr	r3, [r3, #0]
 8016f44:	61bb      	str	r3, [r7, #24]
 8016f46:	69bb      	ldr	r3, [r7, #24]
 8016f48:	681b      	ldr	r3, [r3, #0]
 8016f4a:	2b00      	cmp	r3, #0
 8016f4c:	d1f8      	bne.n	8016f40 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8016f4e:	69bb      	ldr	r3, [r7, #24]
 8016f50:	68fa      	ldr	r2, [r7, #12]
 8016f52:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8016f54:	687b      	ldr	r3, [r7, #4]
 8016f56:	2200      	movs	r2, #0
 8016f58:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8016f5c:	78fb      	ldrb	r3, [r7, #3]
 8016f5e:	f003 0302 	and.w	r3, r3, #2
 8016f62:	2b00      	cmp	r3, #0
 8016f64:	d104      	bne.n	8016f70 <tcp_enqueue_flags+0x148>
 8016f66:	78fb      	ldrb	r3, [r7, #3]
 8016f68:	f003 0301 	and.w	r3, r3, #1
 8016f6c:	2b00      	cmp	r3, #0
 8016f6e:	d004      	beq.n	8016f7a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8016f70:	687b      	ldr	r3, [r7, #4]
 8016f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016f74:	1c5a      	adds	r2, r3, #1
 8016f76:	687b      	ldr	r3, [r7, #4]
 8016f78:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8016f7a:	78fb      	ldrb	r3, [r7, #3]
 8016f7c:	f003 0301 	and.w	r3, r3, #1
 8016f80:	2b00      	cmp	r3, #0
 8016f82:	d006      	beq.n	8016f92 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8016f84:	687b      	ldr	r3, [r7, #4]
 8016f86:	8b5b      	ldrh	r3, [r3, #26]
 8016f88:	f043 0320 	orr.w	r3, r3, #32
 8016f8c:	b29a      	uxth	r2, r3
 8016f8e:	687b      	ldr	r3, [r7, #4]
 8016f90:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8016f92:	68fb      	ldr	r3, [r7, #12]
 8016f94:	685b      	ldr	r3, [r3, #4]
 8016f96:	4618      	mov	r0, r3
 8016f98:	f7fa fcdc 	bl	8011954 <pbuf_clen>
 8016f9c:	4603      	mov	r3, r0
 8016f9e:	461a      	mov	r2, r3
 8016fa0:	687b      	ldr	r3, [r7, #4]
 8016fa2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016fa6:	4413      	add	r3, r2
 8016fa8:	b29a      	uxth	r2, r3
 8016faa:	687b      	ldr	r3, [r7, #4]
 8016fac:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8016fb0:	687b      	ldr	r3, [r7, #4]
 8016fb2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016fb6:	2b00      	cmp	r3, #0
 8016fb8:	d00e      	beq.n	8016fd8 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8016fba:	687b      	ldr	r3, [r7, #4]
 8016fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016fbe:	2b00      	cmp	r3, #0
 8016fc0:	d10a      	bne.n	8016fd8 <tcp_enqueue_flags+0x1b0>
 8016fc2:	687b      	ldr	r3, [r7, #4]
 8016fc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016fc6:	2b00      	cmp	r3, #0
 8016fc8:	d106      	bne.n	8016fd8 <tcp_enqueue_flags+0x1b0>
 8016fca:	4b06      	ldr	r3, [pc, #24]	; (8016fe4 <tcp_enqueue_flags+0x1bc>)
 8016fcc:	f240 4265 	movw	r2, #1125	; 0x465
 8016fd0:	490b      	ldr	r1, [pc, #44]	; (8017000 <tcp_enqueue_flags+0x1d8>)
 8016fd2:	4806      	ldr	r0, [pc, #24]	; (8016fec <tcp_enqueue_flags+0x1c4>)
 8016fd4:	f005 fb84 	bl	801c6e0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8016fd8:	2300      	movs	r3, #0
}
 8016fda:	4618      	mov	r0, r3
 8016fdc:	3720      	adds	r7, #32
 8016fde:	46bd      	mov	sp, r7
 8016fe0:	bd80      	pop	{r7, pc}
 8016fe2:	bf00      	nop
 8016fe4:	08020c58 	.word	0x08020c58
 8016fe8:	0802107c 	.word	0x0802107c
 8016fec:	08020cac 	.word	0x08020cac
 8016ff0:	080210d4 	.word	0x080210d4
 8016ff4:	080210f4 	.word	0x080210f4
 8016ff8:	08021130 	.word	0x08021130
 8016ffc:	08021148 	.word	0x08021148
 8017000:	08021174 	.word	0x08021174

08017004 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8017004:	b5b0      	push	{r4, r5, r7, lr}
 8017006:	b08a      	sub	sp, #40	; 0x28
 8017008:	af00      	add	r7, sp, #0
 801700a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801700c:	687b      	ldr	r3, [r7, #4]
 801700e:	2b00      	cmp	r3, #0
 8017010:	d106      	bne.n	8017020 <tcp_output+0x1c>
 8017012:	4b9e      	ldr	r3, [pc, #632]	; (801728c <tcp_output+0x288>)
 8017014:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8017018:	499d      	ldr	r1, [pc, #628]	; (8017290 <tcp_output+0x28c>)
 801701a:	489e      	ldr	r0, [pc, #632]	; (8017294 <tcp_output+0x290>)
 801701c:	f005 fb60 	bl	801c6e0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8017020:	687b      	ldr	r3, [r7, #4]
 8017022:	7d1b      	ldrb	r3, [r3, #20]
 8017024:	2b01      	cmp	r3, #1
 8017026:	d106      	bne.n	8017036 <tcp_output+0x32>
 8017028:	4b98      	ldr	r3, [pc, #608]	; (801728c <tcp_output+0x288>)
 801702a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801702e:	499a      	ldr	r1, [pc, #616]	; (8017298 <tcp_output+0x294>)
 8017030:	4898      	ldr	r0, [pc, #608]	; (8017294 <tcp_output+0x290>)
 8017032:	f005 fb55 	bl	801c6e0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8017036:	4b99      	ldr	r3, [pc, #612]	; (801729c <tcp_output+0x298>)
 8017038:	681b      	ldr	r3, [r3, #0]
 801703a:	687a      	ldr	r2, [r7, #4]
 801703c:	429a      	cmp	r2, r3
 801703e:	d101      	bne.n	8017044 <tcp_output+0x40>
    return ERR_OK;
 8017040:	2300      	movs	r3, #0
 8017042:	e1ce      	b.n	80173e2 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8017044:	687b      	ldr	r3, [r7, #4]
 8017046:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801704a:	687b      	ldr	r3, [r7, #4]
 801704c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017050:	4293      	cmp	r3, r2
 8017052:	bf28      	it	cs
 8017054:	4613      	movcs	r3, r2
 8017056:	b29b      	uxth	r3, r3
 8017058:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801705a:	687b      	ldr	r3, [r7, #4]
 801705c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801705e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8017060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017062:	2b00      	cmp	r3, #0
 8017064:	d10b      	bne.n	801707e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8017066:	687b      	ldr	r3, [r7, #4]
 8017068:	8b5b      	ldrh	r3, [r3, #26]
 801706a:	f003 0302 	and.w	r3, r3, #2
 801706e:	2b00      	cmp	r3, #0
 8017070:	f000 81aa 	beq.w	80173c8 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8017074:	6878      	ldr	r0, [r7, #4]
 8017076:	f000 fdcb 	bl	8017c10 <tcp_send_empty_ack>
 801707a:	4603      	mov	r3, r0
 801707c:	e1b1      	b.n	80173e2 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801707e:	6879      	ldr	r1, [r7, #4]
 8017080:	687b      	ldr	r3, [r7, #4]
 8017082:	3304      	adds	r3, #4
 8017084:	461a      	mov	r2, r3
 8017086:	6878      	ldr	r0, [r7, #4]
 8017088:	f7ff f824 	bl	80160d4 <tcp_route>
 801708c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801708e:	697b      	ldr	r3, [r7, #20]
 8017090:	2b00      	cmp	r3, #0
 8017092:	d102      	bne.n	801709a <tcp_output+0x96>
    return ERR_RTE;
 8017094:	f06f 0303 	mvn.w	r3, #3
 8017098:	e1a3      	b.n	80173e2 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801709a:	687b      	ldr	r3, [r7, #4]
 801709c:	2b00      	cmp	r3, #0
 801709e:	d003      	beq.n	80170a8 <tcp_output+0xa4>
 80170a0:	687b      	ldr	r3, [r7, #4]
 80170a2:	681b      	ldr	r3, [r3, #0]
 80170a4:	2b00      	cmp	r3, #0
 80170a6:	d111      	bne.n	80170cc <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80170a8:	697b      	ldr	r3, [r7, #20]
 80170aa:	2b00      	cmp	r3, #0
 80170ac:	d002      	beq.n	80170b4 <tcp_output+0xb0>
 80170ae:	697b      	ldr	r3, [r7, #20]
 80170b0:	3304      	adds	r3, #4
 80170b2:	e000      	b.n	80170b6 <tcp_output+0xb2>
 80170b4:	2300      	movs	r3, #0
 80170b6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80170b8:	693b      	ldr	r3, [r7, #16]
 80170ba:	2b00      	cmp	r3, #0
 80170bc:	d102      	bne.n	80170c4 <tcp_output+0xc0>
      return ERR_RTE;
 80170be:	f06f 0303 	mvn.w	r3, #3
 80170c2:	e18e      	b.n	80173e2 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80170c4:	693b      	ldr	r3, [r7, #16]
 80170c6:	681a      	ldr	r2, [r3, #0]
 80170c8:	687b      	ldr	r3, [r7, #4]
 80170ca:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80170cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170ce:	68db      	ldr	r3, [r3, #12]
 80170d0:	685b      	ldr	r3, [r3, #4]
 80170d2:	4618      	mov	r0, r3
 80170d4:	f7f9 f809 	bl	80100ea <lwip_htonl>
 80170d8:	4602      	mov	r2, r0
 80170da:	687b      	ldr	r3, [r7, #4]
 80170dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80170de:	1ad3      	subs	r3, r2, r3
 80170e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80170e2:	8912      	ldrh	r2, [r2, #8]
 80170e4:	4413      	add	r3, r2
 80170e6:	69ba      	ldr	r2, [r7, #24]
 80170e8:	429a      	cmp	r2, r3
 80170ea:	d227      	bcs.n	801713c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80170ec:	687b      	ldr	r3, [r7, #4]
 80170ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80170f2:	461a      	mov	r2, r3
 80170f4:	69bb      	ldr	r3, [r7, #24]
 80170f6:	4293      	cmp	r3, r2
 80170f8:	d114      	bne.n	8017124 <tcp_output+0x120>
 80170fa:	687b      	ldr	r3, [r7, #4]
 80170fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80170fe:	2b00      	cmp	r3, #0
 8017100:	d110      	bne.n	8017124 <tcp_output+0x120>
 8017102:	687b      	ldr	r3, [r7, #4]
 8017104:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8017108:	2b00      	cmp	r3, #0
 801710a:	d10b      	bne.n	8017124 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	2200      	movs	r2, #0
 8017110:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8017114:	687b      	ldr	r3, [r7, #4]
 8017116:	2201      	movs	r2, #1
 8017118:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801711c:	687b      	ldr	r3, [r7, #4]
 801711e:	2200      	movs	r2, #0
 8017120:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8017124:	687b      	ldr	r3, [r7, #4]
 8017126:	8b5b      	ldrh	r3, [r3, #26]
 8017128:	f003 0302 	and.w	r3, r3, #2
 801712c:	2b00      	cmp	r3, #0
 801712e:	f000 814d 	beq.w	80173cc <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8017132:	6878      	ldr	r0, [r7, #4]
 8017134:	f000 fd6c 	bl	8017c10 <tcp_send_empty_ack>
 8017138:	4603      	mov	r3, r0
 801713a:	e152      	b.n	80173e2 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801713c:	687b      	ldr	r3, [r7, #4]
 801713e:	2200      	movs	r2, #0
 8017140:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8017144:	687b      	ldr	r3, [r7, #4]
 8017146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017148:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801714a:	6a3b      	ldr	r3, [r7, #32]
 801714c:	2b00      	cmp	r3, #0
 801714e:	f000 811c 	beq.w	801738a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8017152:	e002      	b.n	801715a <tcp_output+0x156>
 8017154:	6a3b      	ldr	r3, [r7, #32]
 8017156:	681b      	ldr	r3, [r3, #0]
 8017158:	623b      	str	r3, [r7, #32]
 801715a:	6a3b      	ldr	r3, [r7, #32]
 801715c:	681b      	ldr	r3, [r3, #0]
 801715e:	2b00      	cmp	r3, #0
 8017160:	d1f8      	bne.n	8017154 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8017162:	e112      	b.n	801738a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8017164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017166:	68db      	ldr	r3, [r3, #12]
 8017168:	899b      	ldrh	r3, [r3, #12]
 801716a:	b29b      	uxth	r3, r3
 801716c:	4618      	mov	r0, r3
 801716e:	f7f8 ffa7 	bl	80100c0 <lwip_htons>
 8017172:	4603      	mov	r3, r0
 8017174:	b2db      	uxtb	r3, r3
 8017176:	f003 0304 	and.w	r3, r3, #4
 801717a:	2b00      	cmp	r3, #0
 801717c:	d006      	beq.n	801718c <tcp_output+0x188>
 801717e:	4b43      	ldr	r3, [pc, #268]	; (801728c <tcp_output+0x288>)
 8017180:	f240 5236 	movw	r2, #1334	; 0x536
 8017184:	4946      	ldr	r1, [pc, #280]	; (80172a0 <tcp_output+0x29c>)
 8017186:	4843      	ldr	r0, [pc, #268]	; (8017294 <tcp_output+0x290>)
 8017188:	f005 faaa 	bl	801c6e0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801718c:	687b      	ldr	r3, [r7, #4]
 801718e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017190:	2b00      	cmp	r3, #0
 8017192:	d01f      	beq.n	80171d4 <tcp_output+0x1d0>
 8017194:	687b      	ldr	r3, [r7, #4]
 8017196:	8b5b      	ldrh	r3, [r3, #26]
 8017198:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801719c:	2b00      	cmp	r3, #0
 801719e:	d119      	bne.n	80171d4 <tcp_output+0x1d0>
 80171a0:	687b      	ldr	r3, [r7, #4]
 80171a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80171a4:	2b00      	cmp	r3, #0
 80171a6:	d00b      	beq.n	80171c0 <tcp_output+0x1bc>
 80171a8:	687b      	ldr	r3, [r7, #4]
 80171aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80171ac:	681b      	ldr	r3, [r3, #0]
 80171ae:	2b00      	cmp	r3, #0
 80171b0:	d110      	bne.n	80171d4 <tcp_output+0x1d0>
 80171b2:	687b      	ldr	r3, [r7, #4]
 80171b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80171b6:	891a      	ldrh	r2, [r3, #8]
 80171b8:	687b      	ldr	r3, [r7, #4]
 80171ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80171bc:	429a      	cmp	r2, r3
 80171be:	d209      	bcs.n	80171d4 <tcp_output+0x1d0>
 80171c0:	687b      	ldr	r3, [r7, #4]
 80171c2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80171c6:	2b00      	cmp	r3, #0
 80171c8:	d004      	beq.n	80171d4 <tcp_output+0x1d0>
 80171ca:	687b      	ldr	r3, [r7, #4]
 80171cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80171d0:	2b08      	cmp	r3, #8
 80171d2:	d901      	bls.n	80171d8 <tcp_output+0x1d4>
 80171d4:	2301      	movs	r3, #1
 80171d6:	e000      	b.n	80171da <tcp_output+0x1d6>
 80171d8:	2300      	movs	r3, #0
 80171da:	2b00      	cmp	r3, #0
 80171dc:	d106      	bne.n	80171ec <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80171de:	687b      	ldr	r3, [r7, #4]
 80171e0:	8b5b      	ldrh	r3, [r3, #26]
 80171e2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80171e6:	2b00      	cmp	r3, #0
 80171e8:	f000 80e4 	beq.w	80173b4 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80171ec:	687b      	ldr	r3, [r7, #4]
 80171ee:	7d1b      	ldrb	r3, [r3, #20]
 80171f0:	2b02      	cmp	r3, #2
 80171f2:	d00d      	beq.n	8017210 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80171f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171f6:	68db      	ldr	r3, [r3, #12]
 80171f8:	899b      	ldrh	r3, [r3, #12]
 80171fa:	b29c      	uxth	r4, r3
 80171fc:	2010      	movs	r0, #16
 80171fe:	f7f8 ff5f 	bl	80100c0 <lwip_htons>
 8017202:	4603      	mov	r3, r0
 8017204:	461a      	mov	r2, r3
 8017206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017208:	68db      	ldr	r3, [r3, #12]
 801720a:	4322      	orrs	r2, r4
 801720c:	b292      	uxth	r2, r2
 801720e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8017210:	697a      	ldr	r2, [r7, #20]
 8017212:	6879      	ldr	r1, [r7, #4]
 8017214:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017216:	f000 f909 	bl	801742c <tcp_output_segment>
 801721a:	4603      	mov	r3, r0
 801721c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801721e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017222:	2b00      	cmp	r3, #0
 8017224:	d009      	beq.n	801723a <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017226:	687b      	ldr	r3, [r7, #4]
 8017228:	8b5b      	ldrh	r3, [r3, #26]
 801722a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801722e:	b29a      	uxth	r2, r3
 8017230:	687b      	ldr	r3, [r7, #4]
 8017232:	835a      	strh	r2, [r3, #26]
      return err;
 8017234:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017238:	e0d3      	b.n	80173e2 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801723a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801723c:	681a      	ldr	r2, [r3, #0]
 801723e:	687b      	ldr	r3, [r7, #4]
 8017240:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8017242:	687b      	ldr	r3, [r7, #4]
 8017244:	7d1b      	ldrb	r3, [r3, #20]
 8017246:	2b02      	cmp	r3, #2
 8017248:	d006      	beq.n	8017258 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801724a:	687b      	ldr	r3, [r7, #4]
 801724c:	8b5b      	ldrh	r3, [r3, #26]
 801724e:	f023 0303 	bic.w	r3, r3, #3
 8017252:	b29a      	uxth	r2, r3
 8017254:	687b      	ldr	r3, [r7, #4]
 8017256:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8017258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801725a:	68db      	ldr	r3, [r3, #12]
 801725c:	685b      	ldr	r3, [r3, #4]
 801725e:	4618      	mov	r0, r3
 8017260:	f7f8 ff43 	bl	80100ea <lwip_htonl>
 8017264:	4604      	mov	r4, r0
 8017266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017268:	891b      	ldrh	r3, [r3, #8]
 801726a:	461d      	mov	r5, r3
 801726c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801726e:	68db      	ldr	r3, [r3, #12]
 8017270:	899b      	ldrh	r3, [r3, #12]
 8017272:	b29b      	uxth	r3, r3
 8017274:	4618      	mov	r0, r3
 8017276:	f7f8 ff23 	bl	80100c0 <lwip_htons>
 801727a:	4603      	mov	r3, r0
 801727c:	b2db      	uxtb	r3, r3
 801727e:	f003 0303 	and.w	r3, r3, #3
 8017282:	2b00      	cmp	r3, #0
 8017284:	d00e      	beq.n	80172a4 <tcp_output+0x2a0>
 8017286:	2301      	movs	r3, #1
 8017288:	e00d      	b.n	80172a6 <tcp_output+0x2a2>
 801728a:	bf00      	nop
 801728c:	08020c58 	.word	0x08020c58
 8017290:	0802119c 	.word	0x0802119c
 8017294:	08020cac 	.word	0x08020cac
 8017298:	080211b4 	.word	0x080211b4
 801729c:	2000b630 	.word	0x2000b630
 80172a0:	080211dc 	.word	0x080211dc
 80172a4:	2300      	movs	r3, #0
 80172a6:	442b      	add	r3, r5
 80172a8:	4423      	add	r3, r4
 80172aa:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80172ac:	687b      	ldr	r3, [r7, #4]
 80172ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80172b0:	68bb      	ldr	r3, [r7, #8]
 80172b2:	1ad3      	subs	r3, r2, r3
 80172b4:	2b00      	cmp	r3, #0
 80172b6:	da02      	bge.n	80172be <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80172b8:	687b      	ldr	r3, [r7, #4]
 80172ba:	68ba      	ldr	r2, [r7, #8]
 80172bc:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80172be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172c0:	891b      	ldrh	r3, [r3, #8]
 80172c2:	461c      	mov	r4, r3
 80172c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172c6:	68db      	ldr	r3, [r3, #12]
 80172c8:	899b      	ldrh	r3, [r3, #12]
 80172ca:	b29b      	uxth	r3, r3
 80172cc:	4618      	mov	r0, r3
 80172ce:	f7f8 fef7 	bl	80100c0 <lwip_htons>
 80172d2:	4603      	mov	r3, r0
 80172d4:	b2db      	uxtb	r3, r3
 80172d6:	f003 0303 	and.w	r3, r3, #3
 80172da:	2b00      	cmp	r3, #0
 80172dc:	d001      	beq.n	80172e2 <tcp_output+0x2de>
 80172de:	2301      	movs	r3, #1
 80172e0:	e000      	b.n	80172e4 <tcp_output+0x2e0>
 80172e2:	2300      	movs	r3, #0
 80172e4:	4423      	add	r3, r4
 80172e6:	2b00      	cmp	r3, #0
 80172e8:	d049      	beq.n	801737e <tcp_output+0x37a>
      seg->next = NULL;
 80172ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172ec:	2200      	movs	r2, #0
 80172ee:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80172f0:	687b      	ldr	r3, [r7, #4]
 80172f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80172f4:	2b00      	cmp	r3, #0
 80172f6:	d105      	bne.n	8017304 <tcp_output+0x300>
        pcb->unacked = seg;
 80172f8:	687b      	ldr	r3, [r7, #4]
 80172fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80172fc:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80172fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017300:	623b      	str	r3, [r7, #32]
 8017302:	e03f      	b.n	8017384 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8017304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017306:	68db      	ldr	r3, [r3, #12]
 8017308:	685b      	ldr	r3, [r3, #4]
 801730a:	4618      	mov	r0, r3
 801730c:	f7f8 feed 	bl	80100ea <lwip_htonl>
 8017310:	4604      	mov	r4, r0
 8017312:	6a3b      	ldr	r3, [r7, #32]
 8017314:	68db      	ldr	r3, [r3, #12]
 8017316:	685b      	ldr	r3, [r3, #4]
 8017318:	4618      	mov	r0, r3
 801731a:	f7f8 fee6 	bl	80100ea <lwip_htonl>
 801731e:	4603      	mov	r3, r0
 8017320:	1ae3      	subs	r3, r4, r3
 8017322:	2b00      	cmp	r3, #0
 8017324:	da24      	bge.n	8017370 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8017326:	687b      	ldr	r3, [r7, #4]
 8017328:	3370      	adds	r3, #112	; 0x70
 801732a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801732c:	e002      	b.n	8017334 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801732e:	69fb      	ldr	r3, [r7, #28]
 8017330:	681b      	ldr	r3, [r3, #0]
 8017332:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8017334:	69fb      	ldr	r3, [r7, #28]
 8017336:	681b      	ldr	r3, [r3, #0]
 8017338:	2b00      	cmp	r3, #0
 801733a:	d011      	beq.n	8017360 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801733c:	69fb      	ldr	r3, [r7, #28]
 801733e:	681b      	ldr	r3, [r3, #0]
 8017340:	68db      	ldr	r3, [r3, #12]
 8017342:	685b      	ldr	r3, [r3, #4]
 8017344:	4618      	mov	r0, r3
 8017346:	f7f8 fed0 	bl	80100ea <lwip_htonl>
 801734a:	4604      	mov	r4, r0
 801734c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801734e:	68db      	ldr	r3, [r3, #12]
 8017350:	685b      	ldr	r3, [r3, #4]
 8017352:	4618      	mov	r0, r3
 8017354:	f7f8 fec9 	bl	80100ea <lwip_htonl>
 8017358:	4603      	mov	r3, r0
 801735a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801735c:	2b00      	cmp	r3, #0
 801735e:	dbe6      	blt.n	801732e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8017360:	69fb      	ldr	r3, [r7, #28]
 8017362:	681a      	ldr	r2, [r3, #0]
 8017364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017366:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8017368:	69fb      	ldr	r3, [r7, #28]
 801736a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801736c:	601a      	str	r2, [r3, #0]
 801736e:	e009      	b.n	8017384 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8017370:	6a3b      	ldr	r3, [r7, #32]
 8017372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017374:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8017376:	6a3b      	ldr	r3, [r7, #32]
 8017378:	681b      	ldr	r3, [r3, #0]
 801737a:	623b      	str	r3, [r7, #32]
 801737c:	e002      	b.n	8017384 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801737e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017380:	f7fb feff 	bl	8013182 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017388:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801738a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801738c:	2b00      	cmp	r3, #0
 801738e:	d012      	beq.n	80173b6 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8017390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017392:	68db      	ldr	r3, [r3, #12]
 8017394:	685b      	ldr	r3, [r3, #4]
 8017396:	4618      	mov	r0, r3
 8017398:	f7f8 fea7 	bl	80100ea <lwip_htonl>
 801739c:	4602      	mov	r2, r0
 801739e:	687b      	ldr	r3, [r7, #4]
 80173a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80173a2:	1ad3      	subs	r3, r2, r3
 80173a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80173a6:	8912      	ldrh	r2, [r2, #8]
 80173a8:	4413      	add	r3, r2
  while (seg != NULL &&
 80173aa:	69ba      	ldr	r2, [r7, #24]
 80173ac:	429a      	cmp	r2, r3
 80173ae:	f4bf aed9 	bcs.w	8017164 <tcp_output+0x160>
 80173b2:	e000      	b.n	80173b6 <tcp_output+0x3b2>
      break;
 80173b4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80173b6:	687b      	ldr	r3, [r7, #4]
 80173b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80173ba:	2b00      	cmp	r3, #0
 80173bc:	d108      	bne.n	80173d0 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80173be:	687b      	ldr	r3, [r7, #4]
 80173c0:	2200      	movs	r2, #0
 80173c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80173c6:	e004      	b.n	80173d2 <tcp_output+0x3ce>
    goto output_done;
 80173c8:	bf00      	nop
 80173ca:	e002      	b.n	80173d2 <tcp_output+0x3ce>
    goto output_done;
 80173cc:	bf00      	nop
 80173ce:	e000      	b.n	80173d2 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80173d0:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80173d2:	687b      	ldr	r3, [r7, #4]
 80173d4:	8b5b      	ldrh	r3, [r3, #26]
 80173d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80173da:	b29a      	uxth	r2, r3
 80173dc:	687b      	ldr	r3, [r7, #4]
 80173de:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80173e0:	2300      	movs	r3, #0
}
 80173e2:	4618      	mov	r0, r3
 80173e4:	3728      	adds	r7, #40	; 0x28
 80173e6:	46bd      	mov	sp, r7
 80173e8:	bdb0      	pop	{r4, r5, r7, pc}
 80173ea:	bf00      	nop

080173ec <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80173ec:	b580      	push	{r7, lr}
 80173ee:	b082      	sub	sp, #8
 80173f0:	af00      	add	r7, sp, #0
 80173f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80173f4:	687b      	ldr	r3, [r7, #4]
 80173f6:	2b00      	cmp	r3, #0
 80173f8:	d106      	bne.n	8017408 <tcp_output_segment_busy+0x1c>
 80173fa:	4b09      	ldr	r3, [pc, #36]	; (8017420 <tcp_output_segment_busy+0x34>)
 80173fc:	f240 529a 	movw	r2, #1434	; 0x59a
 8017400:	4908      	ldr	r1, [pc, #32]	; (8017424 <tcp_output_segment_busy+0x38>)
 8017402:	4809      	ldr	r0, [pc, #36]	; (8017428 <tcp_output_segment_busy+0x3c>)
 8017404:	f005 f96c 	bl	801c6e0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8017408:	687b      	ldr	r3, [r7, #4]
 801740a:	685b      	ldr	r3, [r3, #4]
 801740c:	7b9b      	ldrb	r3, [r3, #14]
 801740e:	2b01      	cmp	r3, #1
 8017410:	d001      	beq.n	8017416 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8017412:	2301      	movs	r3, #1
 8017414:	e000      	b.n	8017418 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8017416:	2300      	movs	r3, #0
}
 8017418:	4618      	mov	r0, r3
 801741a:	3708      	adds	r7, #8
 801741c:	46bd      	mov	sp, r7
 801741e:	bd80      	pop	{r7, pc}
 8017420:	08020c58 	.word	0x08020c58
 8017424:	080211f4 	.word	0x080211f4
 8017428:	08020cac 	.word	0x08020cac

0801742c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801742c:	b5b0      	push	{r4, r5, r7, lr}
 801742e:	b08c      	sub	sp, #48	; 0x30
 8017430:	af04      	add	r7, sp, #16
 8017432:	60f8      	str	r0, [r7, #12]
 8017434:	60b9      	str	r1, [r7, #8]
 8017436:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8017438:	68fb      	ldr	r3, [r7, #12]
 801743a:	2b00      	cmp	r3, #0
 801743c:	d106      	bne.n	801744c <tcp_output_segment+0x20>
 801743e:	4b63      	ldr	r3, [pc, #396]	; (80175cc <tcp_output_segment+0x1a0>)
 8017440:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8017444:	4962      	ldr	r1, [pc, #392]	; (80175d0 <tcp_output_segment+0x1a4>)
 8017446:	4863      	ldr	r0, [pc, #396]	; (80175d4 <tcp_output_segment+0x1a8>)
 8017448:	f005 f94a 	bl	801c6e0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801744c:	68bb      	ldr	r3, [r7, #8]
 801744e:	2b00      	cmp	r3, #0
 8017450:	d106      	bne.n	8017460 <tcp_output_segment+0x34>
 8017452:	4b5e      	ldr	r3, [pc, #376]	; (80175cc <tcp_output_segment+0x1a0>)
 8017454:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8017458:	495f      	ldr	r1, [pc, #380]	; (80175d8 <tcp_output_segment+0x1ac>)
 801745a:	485e      	ldr	r0, [pc, #376]	; (80175d4 <tcp_output_segment+0x1a8>)
 801745c:	f005 f940 	bl	801c6e0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8017460:	687b      	ldr	r3, [r7, #4]
 8017462:	2b00      	cmp	r3, #0
 8017464:	d106      	bne.n	8017474 <tcp_output_segment+0x48>
 8017466:	4b59      	ldr	r3, [pc, #356]	; (80175cc <tcp_output_segment+0x1a0>)
 8017468:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801746c:	495b      	ldr	r1, [pc, #364]	; (80175dc <tcp_output_segment+0x1b0>)
 801746e:	4859      	ldr	r0, [pc, #356]	; (80175d4 <tcp_output_segment+0x1a8>)
 8017470:	f005 f936 	bl	801c6e0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8017474:	68f8      	ldr	r0, [r7, #12]
 8017476:	f7ff ffb9 	bl	80173ec <tcp_output_segment_busy>
 801747a:	4603      	mov	r3, r0
 801747c:	2b00      	cmp	r3, #0
 801747e:	d001      	beq.n	8017484 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8017480:	2300      	movs	r3, #0
 8017482:	e09f      	b.n	80175c4 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8017484:	68bb      	ldr	r3, [r7, #8]
 8017486:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017488:	68fb      	ldr	r3, [r7, #12]
 801748a:	68dc      	ldr	r4, [r3, #12]
 801748c:	4610      	mov	r0, r2
 801748e:	f7f8 fe2c 	bl	80100ea <lwip_htonl>
 8017492:	4603      	mov	r3, r0
 8017494:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8017496:	68bb      	ldr	r3, [r7, #8]
 8017498:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801749a:	68fb      	ldr	r3, [r7, #12]
 801749c:	68dc      	ldr	r4, [r3, #12]
 801749e:	4610      	mov	r0, r2
 80174a0:	f7f8 fe0e 	bl	80100c0 <lwip_htons>
 80174a4:	4603      	mov	r3, r0
 80174a6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80174a8:	68bb      	ldr	r3, [r7, #8]
 80174aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80174ac:	68ba      	ldr	r2, [r7, #8]
 80174ae:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80174b0:	441a      	add	r2, r3
 80174b2:	68bb      	ldr	r3, [r7, #8]
 80174b4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80174b6:	68fb      	ldr	r3, [r7, #12]
 80174b8:	68db      	ldr	r3, [r3, #12]
 80174ba:	3314      	adds	r3, #20
 80174bc:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80174be:	68fb      	ldr	r3, [r7, #12]
 80174c0:	7a9b      	ldrb	r3, [r3, #10]
 80174c2:	f003 0301 	and.w	r3, r3, #1
 80174c6:	2b00      	cmp	r3, #0
 80174c8:	d015      	beq.n	80174f6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80174ca:	68bb      	ldr	r3, [r7, #8]
 80174cc:	3304      	adds	r3, #4
 80174ce:	461a      	mov	r2, r3
 80174d0:	6879      	ldr	r1, [r7, #4]
 80174d2:	f44f 7006 	mov.w	r0, #536	; 0x218
 80174d6:	f7fc fa37 	bl	8013948 <tcp_eff_send_mss_netif>
 80174da:	4603      	mov	r3, r0
 80174dc:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80174de:	8b7b      	ldrh	r3, [r7, #26]
 80174e0:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80174e4:	4618      	mov	r0, r3
 80174e6:	f7f8 fe00 	bl	80100ea <lwip_htonl>
 80174ea:	4602      	mov	r2, r0
 80174ec:	69fb      	ldr	r3, [r7, #28]
 80174ee:	601a      	str	r2, [r3, #0]
    opts += 1;
 80174f0:	69fb      	ldr	r3, [r7, #28]
 80174f2:	3304      	adds	r3, #4
 80174f4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80174f6:	68bb      	ldr	r3, [r7, #8]
 80174f8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80174fc:	2b00      	cmp	r3, #0
 80174fe:	da02      	bge.n	8017506 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8017500:	68bb      	ldr	r3, [r7, #8]
 8017502:	2200      	movs	r2, #0
 8017504:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8017506:	68bb      	ldr	r3, [r7, #8]
 8017508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801750a:	2b00      	cmp	r3, #0
 801750c:	d10c      	bne.n	8017528 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801750e:	4b34      	ldr	r3, [pc, #208]	; (80175e0 <tcp_output_segment+0x1b4>)
 8017510:	681a      	ldr	r2, [r3, #0]
 8017512:	68bb      	ldr	r3, [r7, #8]
 8017514:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8017516:	68fb      	ldr	r3, [r7, #12]
 8017518:	68db      	ldr	r3, [r3, #12]
 801751a:	685b      	ldr	r3, [r3, #4]
 801751c:	4618      	mov	r0, r3
 801751e:	f7f8 fde4 	bl	80100ea <lwip_htonl>
 8017522:	4602      	mov	r2, r0
 8017524:	68bb      	ldr	r3, [r7, #8]
 8017526:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8017528:	68fb      	ldr	r3, [r7, #12]
 801752a:	68da      	ldr	r2, [r3, #12]
 801752c:	68fb      	ldr	r3, [r7, #12]
 801752e:	685b      	ldr	r3, [r3, #4]
 8017530:	685b      	ldr	r3, [r3, #4]
 8017532:	1ad3      	subs	r3, r2, r3
 8017534:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8017536:	68fb      	ldr	r3, [r7, #12]
 8017538:	685b      	ldr	r3, [r3, #4]
 801753a:	8959      	ldrh	r1, [r3, #10]
 801753c:	68fb      	ldr	r3, [r7, #12]
 801753e:	685b      	ldr	r3, [r3, #4]
 8017540:	8b3a      	ldrh	r2, [r7, #24]
 8017542:	1a8a      	subs	r2, r1, r2
 8017544:	b292      	uxth	r2, r2
 8017546:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8017548:	68fb      	ldr	r3, [r7, #12]
 801754a:	685b      	ldr	r3, [r3, #4]
 801754c:	8919      	ldrh	r1, [r3, #8]
 801754e:	68fb      	ldr	r3, [r7, #12]
 8017550:	685b      	ldr	r3, [r3, #4]
 8017552:	8b3a      	ldrh	r2, [r7, #24]
 8017554:	1a8a      	subs	r2, r1, r2
 8017556:	b292      	uxth	r2, r2
 8017558:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801755a:	68fb      	ldr	r3, [r7, #12]
 801755c:	685b      	ldr	r3, [r3, #4]
 801755e:	68fa      	ldr	r2, [r7, #12]
 8017560:	68d2      	ldr	r2, [r2, #12]
 8017562:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8017564:	68fb      	ldr	r3, [r7, #12]
 8017566:	68db      	ldr	r3, [r3, #12]
 8017568:	2200      	movs	r2, #0
 801756a:	741a      	strb	r2, [r3, #16]
 801756c:	2200      	movs	r2, #0
 801756e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8017570:	68fb      	ldr	r3, [r7, #12]
 8017572:	68db      	ldr	r3, [r3, #12]
 8017574:	f103 0214 	add.w	r2, r3, #20
 8017578:	68fb      	ldr	r3, [r7, #12]
 801757a:	7a9b      	ldrb	r3, [r3, #10]
 801757c:	009b      	lsls	r3, r3, #2
 801757e:	f003 0304 	and.w	r3, r3, #4
 8017582:	4413      	add	r3, r2
 8017584:	69fa      	ldr	r2, [r7, #28]
 8017586:	429a      	cmp	r2, r3
 8017588:	d006      	beq.n	8017598 <tcp_output_segment+0x16c>
 801758a:	4b10      	ldr	r3, [pc, #64]	; (80175cc <tcp_output_segment+0x1a0>)
 801758c:	f240 621c 	movw	r2, #1564	; 0x61c
 8017590:	4914      	ldr	r1, [pc, #80]	; (80175e4 <tcp_output_segment+0x1b8>)
 8017592:	4810      	ldr	r0, [pc, #64]	; (80175d4 <tcp_output_segment+0x1a8>)
 8017594:	f005 f8a4 	bl	801c6e0 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8017598:	68fb      	ldr	r3, [r7, #12]
 801759a:	6858      	ldr	r0, [r3, #4]
 801759c:	68b9      	ldr	r1, [r7, #8]
 801759e:	68bb      	ldr	r3, [r7, #8]
 80175a0:	1d1c      	adds	r4, r3, #4
 80175a2:	68bb      	ldr	r3, [r7, #8]
 80175a4:	7add      	ldrb	r5, [r3, #11]
 80175a6:	68bb      	ldr	r3, [r7, #8]
 80175a8:	7a9b      	ldrb	r3, [r3, #10]
 80175aa:	687a      	ldr	r2, [r7, #4]
 80175ac:	9202      	str	r2, [sp, #8]
 80175ae:	2206      	movs	r2, #6
 80175b0:	9201      	str	r2, [sp, #4]
 80175b2:	9300      	str	r3, [sp, #0]
 80175b4:	462b      	mov	r3, r5
 80175b6:	4622      	mov	r2, r4
 80175b8:	f002 fd96 	bl	801a0e8 <ip4_output_if>
 80175bc:	4603      	mov	r3, r0
 80175be:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80175c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80175c4:	4618      	mov	r0, r3
 80175c6:	3720      	adds	r7, #32
 80175c8:	46bd      	mov	sp, r7
 80175ca:	bdb0      	pop	{r4, r5, r7, pc}
 80175cc:	08020c58 	.word	0x08020c58
 80175d0:	0802121c 	.word	0x0802121c
 80175d4:	08020cac 	.word	0x08020cac
 80175d8:	0802123c 	.word	0x0802123c
 80175dc:	0802125c 	.word	0x0802125c
 80175e0:	2000b620 	.word	0x2000b620
 80175e4:	08021280 	.word	0x08021280

080175e8 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80175e8:	b5b0      	push	{r4, r5, r7, lr}
 80175ea:	b084      	sub	sp, #16
 80175ec:	af00      	add	r7, sp, #0
 80175ee:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80175f0:	687b      	ldr	r3, [r7, #4]
 80175f2:	2b00      	cmp	r3, #0
 80175f4:	d106      	bne.n	8017604 <tcp_rexmit_rto_prepare+0x1c>
 80175f6:	4b31      	ldr	r3, [pc, #196]	; (80176bc <tcp_rexmit_rto_prepare+0xd4>)
 80175f8:	f240 6263 	movw	r2, #1635	; 0x663
 80175fc:	4930      	ldr	r1, [pc, #192]	; (80176c0 <tcp_rexmit_rto_prepare+0xd8>)
 80175fe:	4831      	ldr	r0, [pc, #196]	; (80176c4 <tcp_rexmit_rto_prepare+0xdc>)
 8017600:	f005 f86e 	bl	801c6e0 <iprintf>

  if (pcb->unacked == NULL) {
 8017604:	687b      	ldr	r3, [r7, #4]
 8017606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017608:	2b00      	cmp	r3, #0
 801760a:	d102      	bne.n	8017612 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801760c:	f06f 0305 	mvn.w	r3, #5
 8017610:	e050      	b.n	80176b4 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8017612:	687b      	ldr	r3, [r7, #4]
 8017614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017616:	60fb      	str	r3, [r7, #12]
 8017618:	e00b      	b.n	8017632 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801761a:	68f8      	ldr	r0, [r7, #12]
 801761c:	f7ff fee6 	bl	80173ec <tcp_output_segment_busy>
 8017620:	4603      	mov	r3, r0
 8017622:	2b00      	cmp	r3, #0
 8017624:	d002      	beq.n	801762c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8017626:	f06f 0305 	mvn.w	r3, #5
 801762a:	e043      	b.n	80176b4 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801762c:	68fb      	ldr	r3, [r7, #12]
 801762e:	681b      	ldr	r3, [r3, #0]
 8017630:	60fb      	str	r3, [r7, #12]
 8017632:	68fb      	ldr	r3, [r7, #12]
 8017634:	681b      	ldr	r3, [r3, #0]
 8017636:	2b00      	cmp	r3, #0
 8017638:	d1ef      	bne.n	801761a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801763a:	68f8      	ldr	r0, [r7, #12]
 801763c:	f7ff fed6 	bl	80173ec <tcp_output_segment_busy>
 8017640:	4603      	mov	r3, r0
 8017642:	2b00      	cmp	r3, #0
 8017644:	d002      	beq.n	801764c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8017646:	f06f 0305 	mvn.w	r3, #5
 801764a:	e033      	b.n	80176b4 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801764c:	687b      	ldr	r3, [r7, #4]
 801764e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8017650:	68fb      	ldr	r3, [r7, #12]
 8017652:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8017654:	687b      	ldr	r3, [r7, #4]
 8017656:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8017658:	687b      	ldr	r3, [r7, #4]
 801765a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801765c:	687b      	ldr	r3, [r7, #4]
 801765e:	2200      	movs	r2, #0
 8017660:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8017662:	687b      	ldr	r3, [r7, #4]
 8017664:	8b5b      	ldrh	r3, [r3, #26]
 8017666:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801766a:	b29a      	uxth	r2, r3
 801766c:	687b      	ldr	r3, [r7, #4]
 801766e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8017670:	68fb      	ldr	r3, [r7, #12]
 8017672:	68db      	ldr	r3, [r3, #12]
 8017674:	685b      	ldr	r3, [r3, #4]
 8017676:	4618      	mov	r0, r3
 8017678:	f7f8 fd37 	bl	80100ea <lwip_htonl>
 801767c:	4604      	mov	r4, r0
 801767e:	68fb      	ldr	r3, [r7, #12]
 8017680:	891b      	ldrh	r3, [r3, #8]
 8017682:	461d      	mov	r5, r3
 8017684:	68fb      	ldr	r3, [r7, #12]
 8017686:	68db      	ldr	r3, [r3, #12]
 8017688:	899b      	ldrh	r3, [r3, #12]
 801768a:	b29b      	uxth	r3, r3
 801768c:	4618      	mov	r0, r3
 801768e:	f7f8 fd17 	bl	80100c0 <lwip_htons>
 8017692:	4603      	mov	r3, r0
 8017694:	b2db      	uxtb	r3, r3
 8017696:	f003 0303 	and.w	r3, r3, #3
 801769a:	2b00      	cmp	r3, #0
 801769c:	d001      	beq.n	80176a2 <tcp_rexmit_rto_prepare+0xba>
 801769e:	2301      	movs	r3, #1
 80176a0:	e000      	b.n	80176a4 <tcp_rexmit_rto_prepare+0xbc>
 80176a2:	2300      	movs	r3, #0
 80176a4:	442b      	add	r3, r5
 80176a6:	18e2      	adds	r2, r4, r3
 80176a8:	687b      	ldr	r3, [r7, #4]
 80176aa:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80176ac:	687b      	ldr	r3, [r7, #4]
 80176ae:	2200      	movs	r2, #0
 80176b0:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80176b2:	2300      	movs	r3, #0
}
 80176b4:	4618      	mov	r0, r3
 80176b6:	3710      	adds	r7, #16
 80176b8:	46bd      	mov	sp, r7
 80176ba:	bdb0      	pop	{r4, r5, r7, pc}
 80176bc:	08020c58 	.word	0x08020c58
 80176c0:	08021294 	.word	0x08021294
 80176c4:	08020cac 	.word	0x08020cac

080176c8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80176c8:	b580      	push	{r7, lr}
 80176ca:	b082      	sub	sp, #8
 80176cc:	af00      	add	r7, sp, #0
 80176ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80176d0:	687b      	ldr	r3, [r7, #4]
 80176d2:	2b00      	cmp	r3, #0
 80176d4:	d106      	bne.n	80176e4 <tcp_rexmit_rto_commit+0x1c>
 80176d6:	4b0d      	ldr	r3, [pc, #52]	; (801770c <tcp_rexmit_rto_commit+0x44>)
 80176d8:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80176dc:	490c      	ldr	r1, [pc, #48]	; (8017710 <tcp_rexmit_rto_commit+0x48>)
 80176de:	480d      	ldr	r0, [pc, #52]	; (8017714 <tcp_rexmit_rto_commit+0x4c>)
 80176e0:	f004 fffe 	bl	801c6e0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80176e4:	687b      	ldr	r3, [r7, #4]
 80176e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80176ea:	2bff      	cmp	r3, #255	; 0xff
 80176ec:	d007      	beq.n	80176fe <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80176ee:	687b      	ldr	r3, [r7, #4]
 80176f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80176f4:	3301      	adds	r3, #1
 80176f6:	b2da      	uxtb	r2, r3
 80176f8:	687b      	ldr	r3, [r7, #4]
 80176fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80176fe:	6878      	ldr	r0, [r7, #4]
 8017700:	f7ff fc80 	bl	8017004 <tcp_output>
}
 8017704:	bf00      	nop
 8017706:	3708      	adds	r7, #8
 8017708:	46bd      	mov	sp, r7
 801770a:	bd80      	pop	{r7, pc}
 801770c:	08020c58 	.word	0x08020c58
 8017710:	080212b8 	.word	0x080212b8
 8017714:	08020cac 	.word	0x08020cac

08017718 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8017718:	b580      	push	{r7, lr}
 801771a:	b082      	sub	sp, #8
 801771c:	af00      	add	r7, sp, #0
 801771e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8017720:	687b      	ldr	r3, [r7, #4]
 8017722:	2b00      	cmp	r3, #0
 8017724:	d106      	bne.n	8017734 <tcp_rexmit_rto+0x1c>
 8017726:	4b0a      	ldr	r3, [pc, #40]	; (8017750 <tcp_rexmit_rto+0x38>)
 8017728:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801772c:	4909      	ldr	r1, [pc, #36]	; (8017754 <tcp_rexmit_rto+0x3c>)
 801772e:	480a      	ldr	r0, [pc, #40]	; (8017758 <tcp_rexmit_rto+0x40>)
 8017730:	f004 ffd6 	bl	801c6e0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8017734:	6878      	ldr	r0, [r7, #4]
 8017736:	f7ff ff57 	bl	80175e8 <tcp_rexmit_rto_prepare>
 801773a:	4603      	mov	r3, r0
 801773c:	2b00      	cmp	r3, #0
 801773e:	d102      	bne.n	8017746 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8017740:	6878      	ldr	r0, [r7, #4]
 8017742:	f7ff ffc1 	bl	80176c8 <tcp_rexmit_rto_commit>
  }
}
 8017746:	bf00      	nop
 8017748:	3708      	adds	r7, #8
 801774a:	46bd      	mov	sp, r7
 801774c:	bd80      	pop	{r7, pc}
 801774e:	bf00      	nop
 8017750:	08020c58 	.word	0x08020c58
 8017754:	080212dc 	.word	0x080212dc
 8017758:	08020cac 	.word	0x08020cac

0801775c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801775c:	b590      	push	{r4, r7, lr}
 801775e:	b085      	sub	sp, #20
 8017760:	af00      	add	r7, sp, #0
 8017762:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8017764:	687b      	ldr	r3, [r7, #4]
 8017766:	2b00      	cmp	r3, #0
 8017768:	d106      	bne.n	8017778 <tcp_rexmit+0x1c>
 801776a:	4b2f      	ldr	r3, [pc, #188]	; (8017828 <tcp_rexmit+0xcc>)
 801776c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8017770:	492e      	ldr	r1, [pc, #184]	; (801782c <tcp_rexmit+0xd0>)
 8017772:	482f      	ldr	r0, [pc, #188]	; (8017830 <tcp_rexmit+0xd4>)
 8017774:	f004 ffb4 	bl	801c6e0 <iprintf>

  if (pcb->unacked == NULL) {
 8017778:	687b      	ldr	r3, [r7, #4]
 801777a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801777c:	2b00      	cmp	r3, #0
 801777e:	d102      	bne.n	8017786 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8017780:	f06f 0305 	mvn.w	r3, #5
 8017784:	e04c      	b.n	8017820 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8017786:	687b      	ldr	r3, [r7, #4]
 8017788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801778a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801778c:	68b8      	ldr	r0, [r7, #8]
 801778e:	f7ff fe2d 	bl	80173ec <tcp_output_segment_busy>
 8017792:	4603      	mov	r3, r0
 8017794:	2b00      	cmp	r3, #0
 8017796:	d002      	beq.n	801779e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8017798:	f06f 0305 	mvn.w	r3, #5
 801779c:	e040      	b.n	8017820 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801779e:	68bb      	ldr	r3, [r7, #8]
 80177a0:	681a      	ldr	r2, [r3, #0]
 80177a2:	687b      	ldr	r3, [r7, #4]
 80177a4:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80177a6:	687b      	ldr	r3, [r7, #4]
 80177a8:	336c      	adds	r3, #108	; 0x6c
 80177aa:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80177ac:	e002      	b.n	80177b4 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80177ae:	68fb      	ldr	r3, [r7, #12]
 80177b0:	681b      	ldr	r3, [r3, #0]
 80177b2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80177b4:	68fb      	ldr	r3, [r7, #12]
 80177b6:	681b      	ldr	r3, [r3, #0]
 80177b8:	2b00      	cmp	r3, #0
 80177ba:	d011      	beq.n	80177e0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80177bc:	68fb      	ldr	r3, [r7, #12]
 80177be:	681b      	ldr	r3, [r3, #0]
 80177c0:	68db      	ldr	r3, [r3, #12]
 80177c2:	685b      	ldr	r3, [r3, #4]
 80177c4:	4618      	mov	r0, r3
 80177c6:	f7f8 fc90 	bl	80100ea <lwip_htonl>
 80177ca:	4604      	mov	r4, r0
 80177cc:	68bb      	ldr	r3, [r7, #8]
 80177ce:	68db      	ldr	r3, [r3, #12]
 80177d0:	685b      	ldr	r3, [r3, #4]
 80177d2:	4618      	mov	r0, r3
 80177d4:	f7f8 fc89 	bl	80100ea <lwip_htonl>
 80177d8:	4603      	mov	r3, r0
 80177da:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80177dc:	2b00      	cmp	r3, #0
 80177de:	dbe6      	blt.n	80177ae <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80177e0:	68fb      	ldr	r3, [r7, #12]
 80177e2:	681a      	ldr	r2, [r3, #0]
 80177e4:	68bb      	ldr	r3, [r7, #8]
 80177e6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80177e8:	68fb      	ldr	r3, [r7, #12]
 80177ea:	68ba      	ldr	r2, [r7, #8]
 80177ec:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80177ee:	68bb      	ldr	r3, [r7, #8]
 80177f0:	681b      	ldr	r3, [r3, #0]
 80177f2:	2b00      	cmp	r3, #0
 80177f4:	d103      	bne.n	80177fe <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80177f6:	687b      	ldr	r3, [r7, #4]
 80177f8:	2200      	movs	r2, #0
 80177fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80177fe:	687b      	ldr	r3, [r7, #4]
 8017800:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017804:	2bff      	cmp	r3, #255	; 0xff
 8017806:	d007      	beq.n	8017818 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8017808:	687b      	ldr	r3, [r7, #4]
 801780a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801780e:	3301      	adds	r3, #1
 8017810:	b2da      	uxtb	r2, r3
 8017812:	687b      	ldr	r3, [r7, #4]
 8017814:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8017818:	687b      	ldr	r3, [r7, #4]
 801781a:	2200      	movs	r2, #0
 801781c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801781e:	2300      	movs	r3, #0
}
 8017820:	4618      	mov	r0, r3
 8017822:	3714      	adds	r7, #20
 8017824:	46bd      	mov	sp, r7
 8017826:	bd90      	pop	{r4, r7, pc}
 8017828:	08020c58 	.word	0x08020c58
 801782c:	080212f8 	.word	0x080212f8
 8017830:	08020cac 	.word	0x08020cac

08017834 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8017834:	b580      	push	{r7, lr}
 8017836:	b082      	sub	sp, #8
 8017838:	af00      	add	r7, sp, #0
 801783a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801783c:	687b      	ldr	r3, [r7, #4]
 801783e:	2b00      	cmp	r3, #0
 8017840:	d106      	bne.n	8017850 <tcp_rexmit_fast+0x1c>
 8017842:	4b2a      	ldr	r3, [pc, #168]	; (80178ec <tcp_rexmit_fast+0xb8>)
 8017844:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8017848:	4929      	ldr	r1, [pc, #164]	; (80178f0 <tcp_rexmit_fast+0xbc>)
 801784a:	482a      	ldr	r0, [pc, #168]	; (80178f4 <tcp_rexmit_fast+0xc0>)
 801784c:	f004 ff48 	bl	801c6e0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8017850:	687b      	ldr	r3, [r7, #4]
 8017852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017854:	2b00      	cmp	r3, #0
 8017856:	d044      	beq.n	80178e2 <tcp_rexmit_fast+0xae>
 8017858:	687b      	ldr	r3, [r7, #4]
 801785a:	8b5b      	ldrh	r3, [r3, #26]
 801785c:	f003 0304 	and.w	r3, r3, #4
 8017860:	2b00      	cmp	r3, #0
 8017862:	d13e      	bne.n	80178e2 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8017864:	6878      	ldr	r0, [r7, #4]
 8017866:	f7ff ff79 	bl	801775c <tcp_rexmit>
 801786a:	4603      	mov	r3, r0
 801786c:	2b00      	cmp	r3, #0
 801786e:	d138      	bne.n	80178e2 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8017870:	687b      	ldr	r3, [r7, #4]
 8017872:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8017876:	687b      	ldr	r3, [r7, #4]
 8017878:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801787c:	4293      	cmp	r3, r2
 801787e:	bf28      	it	cs
 8017880:	4613      	movcs	r3, r2
 8017882:	b29b      	uxth	r3, r3
 8017884:	0fda      	lsrs	r2, r3, #31
 8017886:	4413      	add	r3, r2
 8017888:	105b      	asrs	r3, r3, #1
 801788a:	b29a      	uxth	r2, r3
 801788c:	687b      	ldr	r3, [r7, #4]
 801788e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8017892:	687b      	ldr	r3, [r7, #4]
 8017894:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8017898:	461a      	mov	r2, r3
 801789a:	687b      	ldr	r3, [r7, #4]
 801789c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801789e:	005b      	lsls	r3, r3, #1
 80178a0:	429a      	cmp	r2, r3
 80178a2:	d206      	bcs.n	80178b2 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80178a4:	687b      	ldr	r3, [r7, #4]
 80178a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80178a8:	005b      	lsls	r3, r3, #1
 80178aa:	b29a      	uxth	r2, r3
 80178ac:	687b      	ldr	r3, [r7, #4]
 80178ae:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80178b2:	687b      	ldr	r3, [r7, #4]
 80178b4:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80178b8:	687b      	ldr	r3, [r7, #4]
 80178ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80178bc:	4619      	mov	r1, r3
 80178be:	0049      	lsls	r1, r1, #1
 80178c0:	440b      	add	r3, r1
 80178c2:	b29b      	uxth	r3, r3
 80178c4:	4413      	add	r3, r2
 80178c6:	b29a      	uxth	r2, r3
 80178c8:	687b      	ldr	r3, [r7, #4]
 80178ca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80178ce:	687b      	ldr	r3, [r7, #4]
 80178d0:	8b5b      	ldrh	r3, [r3, #26]
 80178d2:	f043 0304 	orr.w	r3, r3, #4
 80178d6:	b29a      	uxth	r2, r3
 80178d8:	687b      	ldr	r3, [r7, #4]
 80178da:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80178dc:	687b      	ldr	r3, [r7, #4]
 80178de:	2200      	movs	r2, #0
 80178e0:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80178e2:	bf00      	nop
 80178e4:	3708      	adds	r7, #8
 80178e6:	46bd      	mov	sp, r7
 80178e8:	bd80      	pop	{r7, pc}
 80178ea:	bf00      	nop
 80178ec:	08020c58 	.word	0x08020c58
 80178f0:	08021310 	.word	0x08021310
 80178f4:	08020cac 	.word	0x08020cac

080178f8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80178f8:	b580      	push	{r7, lr}
 80178fa:	b086      	sub	sp, #24
 80178fc:	af00      	add	r7, sp, #0
 80178fe:	60f8      	str	r0, [r7, #12]
 8017900:	607b      	str	r3, [r7, #4]
 8017902:	460b      	mov	r3, r1
 8017904:	817b      	strh	r3, [r7, #10]
 8017906:	4613      	mov	r3, r2
 8017908:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801790a:	897a      	ldrh	r2, [r7, #10]
 801790c:	893b      	ldrh	r3, [r7, #8]
 801790e:	4413      	add	r3, r2
 8017910:	b29b      	uxth	r3, r3
 8017912:	3314      	adds	r3, #20
 8017914:	b29b      	uxth	r3, r3
 8017916:	f44f 7220 	mov.w	r2, #640	; 0x280
 801791a:	4619      	mov	r1, r3
 801791c:	2022      	movs	r0, #34	; 0x22
 801791e:	f7f9 fca7 	bl	8011270 <pbuf_alloc>
 8017922:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8017924:	697b      	ldr	r3, [r7, #20]
 8017926:	2b00      	cmp	r3, #0
 8017928:	d04d      	beq.n	80179c6 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801792a:	897b      	ldrh	r3, [r7, #10]
 801792c:	3313      	adds	r3, #19
 801792e:	697a      	ldr	r2, [r7, #20]
 8017930:	8952      	ldrh	r2, [r2, #10]
 8017932:	4293      	cmp	r3, r2
 8017934:	db06      	blt.n	8017944 <tcp_output_alloc_header_common+0x4c>
 8017936:	4b26      	ldr	r3, [pc, #152]	; (80179d0 <tcp_output_alloc_header_common+0xd8>)
 8017938:	f240 7223 	movw	r2, #1827	; 0x723
 801793c:	4925      	ldr	r1, [pc, #148]	; (80179d4 <tcp_output_alloc_header_common+0xdc>)
 801793e:	4826      	ldr	r0, [pc, #152]	; (80179d8 <tcp_output_alloc_header_common+0xe0>)
 8017940:	f004 fece 	bl	801c6e0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8017944:	697b      	ldr	r3, [r7, #20]
 8017946:	685b      	ldr	r3, [r3, #4]
 8017948:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801794a:	8c3b      	ldrh	r3, [r7, #32]
 801794c:	4618      	mov	r0, r3
 801794e:	f7f8 fbb7 	bl	80100c0 <lwip_htons>
 8017952:	4603      	mov	r3, r0
 8017954:	461a      	mov	r2, r3
 8017956:	693b      	ldr	r3, [r7, #16]
 8017958:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801795a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801795c:	4618      	mov	r0, r3
 801795e:	f7f8 fbaf 	bl	80100c0 <lwip_htons>
 8017962:	4603      	mov	r3, r0
 8017964:	461a      	mov	r2, r3
 8017966:	693b      	ldr	r3, [r7, #16]
 8017968:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801796a:	693b      	ldr	r3, [r7, #16]
 801796c:	687a      	ldr	r2, [r7, #4]
 801796e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8017970:	68f8      	ldr	r0, [r7, #12]
 8017972:	f7f8 fbba 	bl	80100ea <lwip_htonl>
 8017976:	4602      	mov	r2, r0
 8017978:	693b      	ldr	r3, [r7, #16]
 801797a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801797c:	897b      	ldrh	r3, [r7, #10]
 801797e:	089b      	lsrs	r3, r3, #2
 8017980:	b29b      	uxth	r3, r3
 8017982:	3305      	adds	r3, #5
 8017984:	b29b      	uxth	r3, r3
 8017986:	031b      	lsls	r3, r3, #12
 8017988:	b29a      	uxth	r2, r3
 801798a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801798e:	b29b      	uxth	r3, r3
 8017990:	4313      	orrs	r3, r2
 8017992:	b29b      	uxth	r3, r3
 8017994:	4618      	mov	r0, r3
 8017996:	f7f8 fb93 	bl	80100c0 <lwip_htons>
 801799a:	4603      	mov	r3, r0
 801799c:	461a      	mov	r2, r3
 801799e:	693b      	ldr	r3, [r7, #16]
 80179a0:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80179a2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80179a4:	4618      	mov	r0, r3
 80179a6:	f7f8 fb8b 	bl	80100c0 <lwip_htons>
 80179aa:	4603      	mov	r3, r0
 80179ac:	461a      	mov	r2, r3
 80179ae:	693b      	ldr	r3, [r7, #16]
 80179b0:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80179b2:	693b      	ldr	r3, [r7, #16]
 80179b4:	2200      	movs	r2, #0
 80179b6:	741a      	strb	r2, [r3, #16]
 80179b8:	2200      	movs	r2, #0
 80179ba:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80179bc:	693b      	ldr	r3, [r7, #16]
 80179be:	2200      	movs	r2, #0
 80179c0:	749a      	strb	r2, [r3, #18]
 80179c2:	2200      	movs	r2, #0
 80179c4:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80179c6:	697b      	ldr	r3, [r7, #20]
}
 80179c8:	4618      	mov	r0, r3
 80179ca:	3718      	adds	r7, #24
 80179cc:	46bd      	mov	sp, r7
 80179ce:	bd80      	pop	{r7, pc}
 80179d0:	08020c58 	.word	0x08020c58
 80179d4:	08021330 	.word	0x08021330
 80179d8:	08020cac 	.word	0x08020cac

080179dc <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80179dc:	b5b0      	push	{r4, r5, r7, lr}
 80179de:	b08a      	sub	sp, #40	; 0x28
 80179e0:	af04      	add	r7, sp, #16
 80179e2:	60f8      	str	r0, [r7, #12]
 80179e4:	607b      	str	r3, [r7, #4]
 80179e6:	460b      	mov	r3, r1
 80179e8:	817b      	strh	r3, [r7, #10]
 80179ea:	4613      	mov	r3, r2
 80179ec:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80179ee:	68fb      	ldr	r3, [r7, #12]
 80179f0:	2b00      	cmp	r3, #0
 80179f2:	d106      	bne.n	8017a02 <tcp_output_alloc_header+0x26>
 80179f4:	4b15      	ldr	r3, [pc, #84]	; (8017a4c <tcp_output_alloc_header+0x70>)
 80179f6:	f240 7242 	movw	r2, #1858	; 0x742
 80179fa:	4915      	ldr	r1, [pc, #84]	; (8017a50 <tcp_output_alloc_header+0x74>)
 80179fc:	4815      	ldr	r0, [pc, #84]	; (8017a54 <tcp_output_alloc_header+0x78>)
 80179fe:	f004 fe6f 	bl	801c6e0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8017a02:	68fb      	ldr	r3, [r7, #12]
 8017a04:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8017a06:	68fb      	ldr	r3, [r7, #12]
 8017a08:	8adb      	ldrh	r3, [r3, #22]
 8017a0a:	68fa      	ldr	r2, [r7, #12]
 8017a0c:	8b12      	ldrh	r2, [r2, #24]
 8017a0e:	68f9      	ldr	r1, [r7, #12]
 8017a10:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8017a12:	893d      	ldrh	r5, [r7, #8]
 8017a14:	897c      	ldrh	r4, [r7, #10]
 8017a16:	9103      	str	r1, [sp, #12]
 8017a18:	2110      	movs	r1, #16
 8017a1a:	9102      	str	r1, [sp, #8]
 8017a1c:	9201      	str	r2, [sp, #4]
 8017a1e:	9300      	str	r3, [sp, #0]
 8017a20:	687b      	ldr	r3, [r7, #4]
 8017a22:	462a      	mov	r2, r5
 8017a24:	4621      	mov	r1, r4
 8017a26:	f7ff ff67 	bl	80178f8 <tcp_output_alloc_header_common>
 8017a2a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8017a2c:	697b      	ldr	r3, [r7, #20]
 8017a2e:	2b00      	cmp	r3, #0
 8017a30:	d006      	beq.n	8017a40 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8017a32:	68fb      	ldr	r3, [r7, #12]
 8017a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017a36:	68fa      	ldr	r2, [r7, #12]
 8017a38:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8017a3a:	441a      	add	r2, r3
 8017a3c:	68fb      	ldr	r3, [r7, #12]
 8017a3e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8017a40:	697b      	ldr	r3, [r7, #20]
}
 8017a42:	4618      	mov	r0, r3
 8017a44:	3718      	adds	r7, #24
 8017a46:	46bd      	mov	sp, r7
 8017a48:	bdb0      	pop	{r4, r5, r7, pc}
 8017a4a:	bf00      	nop
 8017a4c:	08020c58 	.word	0x08020c58
 8017a50:	08021360 	.word	0x08021360
 8017a54:	08020cac 	.word	0x08020cac

08017a58 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8017a58:	b580      	push	{r7, lr}
 8017a5a:	b088      	sub	sp, #32
 8017a5c:	af00      	add	r7, sp, #0
 8017a5e:	60f8      	str	r0, [r7, #12]
 8017a60:	60b9      	str	r1, [r7, #8]
 8017a62:	4611      	mov	r1, r2
 8017a64:	461a      	mov	r2, r3
 8017a66:	460b      	mov	r3, r1
 8017a68:	71fb      	strb	r3, [r7, #7]
 8017a6a:	4613      	mov	r3, r2
 8017a6c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8017a6e:	2300      	movs	r3, #0
 8017a70:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8017a72:	68bb      	ldr	r3, [r7, #8]
 8017a74:	2b00      	cmp	r3, #0
 8017a76:	d106      	bne.n	8017a86 <tcp_output_fill_options+0x2e>
 8017a78:	4b13      	ldr	r3, [pc, #76]	; (8017ac8 <tcp_output_fill_options+0x70>)
 8017a7a:	f240 7256 	movw	r2, #1878	; 0x756
 8017a7e:	4913      	ldr	r1, [pc, #76]	; (8017acc <tcp_output_fill_options+0x74>)
 8017a80:	4813      	ldr	r0, [pc, #76]	; (8017ad0 <tcp_output_fill_options+0x78>)
 8017a82:	f004 fe2d 	bl	801c6e0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8017a86:	68bb      	ldr	r3, [r7, #8]
 8017a88:	685b      	ldr	r3, [r3, #4]
 8017a8a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8017a8c:	69bb      	ldr	r3, [r7, #24]
 8017a8e:	3314      	adds	r3, #20
 8017a90:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8017a92:	69bb      	ldr	r3, [r7, #24]
 8017a94:	f103 0214 	add.w	r2, r3, #20
 8017a98:	8bfb      	ldrh	r3, [r7, #30]
 8017a9a:	009b      	lsls	r3, r3, #2
 8017a9c:	4619      	mov	r1, r3
 8017a9e:	79fb      	ldrb	r3, [r7, #7]
 8017aa0:	009b      	lsls	r3, r3, #2
 8017aa2:	f003 0304 	and.w	r3, r3, #4
 8017aa6:	440b      	add	r3, r1
 8017aa8:	4413      	add	r3, r2
 8017aaa:	697a      	ldr	r2, [r7, #20]
 8017aac:	429a      	cmp	r2, r3
 8017aae:	d006      	beq.n	8017abe <tcp_output_fill_options+0x66>
 8017ab0:	4b05      	ldr	r3, [pc, #20]	; (8017ac8 <tcp_output_fill_options+0x70>)
 8017ab2:	f240 7275 	movw	r2, #1909	; 0x775
 8017ab6:	4907      	ldr	r1, [pc, #28]	; (8017ad4 <tcp_output_fill_options+0x7c>)
 8017ab8:	4805      	ldr	r0, [pc, #20]	; (8017ad0 <tcp_output_fill_options+0x78>)
 8017aba:	f004 fe11 	bl	801c6e0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8017abe:	bf00      	nop
 8017ac0:	3720      	adds	r7, #32
 8017ac2:	46bd      	mov	sp, r7
 8017ac4:	bd80      	pop	{r7, pc}
 8017ac6:	bf00      	nop
 8017ac8:	08020c58 	.word	0x08020c58
 8017acc:	08021388 	.word	0x08021388
 8017ad0:	08020cac 	.word	0x08020cac
 8017ad4:	08021280 	.word	0x08021280

08017ad8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8017ad8:	b580      	push	{r7, lr}
 8017ada:	b08a      	sub	sp, #40	; 0x28
 8017adc:	af04      	add	r7, sp, #16
 8017ade:	60f8      	str	r0, [r7, #12]
 8017ae0:	60b9      	str	r1, [r7, #8]
 8017ae2:	607a      	str	r2, [r7, #4]
 8017ae4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8017ae6:	68bb      	ldr	r3, [r7, #8]
 8017ae8:	2b00      	cmp	r3, #0
 8017aea:	d106      	bne.n	8017afa <tcp_output_control_segment+0x22>
 8017aec:	4b1c      	ldr	r3, [pc, #112]	; (8017b60 <tcp_output_control_segment+0x88>)
 8017aee:	f240 7287 	movw	r2, #1927	; 0x787
 8017af2:	491c      	ldr	r1, [pc, #112]	; (8017b64 <tcp_output_control_segment+0x8c>)
 8017af4:	481c      	ldr	r0, [pc, #112]	; (8017b68 <tcp_output_control_segment+0x90>)
 8017af6:	f004 fdf3 	bl	801c6e0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8017afa:	683a      	ldr	r2, [r7, #0]
 8017afc:	6879      	ldr	r1, [r7, #4]
 8017afe:	68f8      	ldr	r0, [r7, #12]
 8017b00:	f7fe fae8 	bl	80160d4 <tcp_route>
 8017b04:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8017b06:	693b      	ldr	r3, [r7, #16]
 8017b08:	2b00      	cmp	r3, #0
 8017b0a:	d102      	bne.n	8017b12 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8017b0c:	23fc      	movs	r3, #252	; 0xfc
 8017b0e:	75fb      	strb	r3, [r7, #23]
 8017b10:	e01c      	b.n	8017b4c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8017b12:	68fb      	ldr	r3, [r7, #12]
 8017b14:	2b00      	cmp	r3, #0
 8017b16:	d006      	beq.n	8017b26 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8017b18:	68fb      	ldr	r3, [r7, #12]
 8017b1a:	7adb      	ldrb	r3, [r3, #11]
 8017b1c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8017b1e:	68fb      	ldr	r3, [r7, #12]
 8017b20:	7a9b      	ldrb	r3, [r3, #10]
 8017b22:	757b      	strb	r3, [r7, #21]
 8017b24:	e003      	b.n	8017b2e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8017b26:	23ff      	movs	r3, #255	; 0xff
 8017b28:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8017b2a:	2300      	movs	r3, #0
 8017b2c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8017b2e:	7dba      	ldrb	r2, [r7, #22]
 8017b30:	693b      	ldr	r3, [r7, #16]
 8017b32:	9302      	str	r3, [sp, #8]
 8017b34:	2306      	movs	r3, #6
 8017b36:	9301      	str	r3, [sp, #4]
 8017b38:	7d7b      	ldrb	r3, [r7, #21]
 8017b3a:	9300      	str	r3, [sp, #0]
 8017b3c:	4613      	mov	r3, r2
 8017b3e:	683a      	ldr	r2, [r7, #0]
 8017b40:	6879      	ldr	r1, [r7, #4]
 8017b42:	68b8      	ldr	r0, [r7, #8]
 8017b44:	f002 fad0 	bl	801a0e8 <ip4_output_if>
 8017b48:	4603      	mov	r3, r0
 8017b4a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8017b4c:	68b8      	ldr	r0, [r7, #8]
 8017b4e:	f7f9 fe73 	bl	8011838 <pbuf_free>
  return err;
 8017b52:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017b56:	4618      	mov	r0, r3
 8017b58:	3718      	adds	r7, #24
 8017b5a:	46bd      	mov	sp, r7
 8017b5c:	bd80      	pop	{r7, pc}
 8017b5e:	bf00      	nop
 8017b60:	08020c58 	.word	0x08020c58
 8017b64:	080213b0 	.word	0x080213b0
 8017b68:	08020cac 	.word	0x08020cac

08017b6c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8017b6c:	b590      	push	{r4, r7, lr}
 8017b6e:	b08b      	sub	sp, #44	; 0x2c
 8017b70:	af04      	add	r7, sp, #16
 8017b72:	60f8      	str	r0, [r7, #12]
 8017b74:	60b9      	str	r1, [r7, #8]
 8017b76:	607a      	str	r2, [r7, #4]
 8017b78:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8017b7a:	683b      	ldr	r3, [r7, #0]
 8017b7c:	2b00      	cmp	r3, #0
 8017b7e:	d106      	bne.n	8017b8e <tcp_rst+0x22>
 8017b80:	4b1f      	ldr	r3, [pc, #124]	; (8017c00 <tcp_rst+0x94>)
 8017b82:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8017b86:	491f      	ldr	r1, [pc, #124]	; (8017c04 <tcp_rst+0x98>)
 8017b88:	481f      	ldr	r0, [pc, #124]	; (8017c08 <tcp_rst+0x9c>)
 8017b8a:	f004 fda9 	bl	801c6e0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8017b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b90:	2b00      	cmp	r3, #0
 8017b92:	d106      	bne.n	8017ba2 <tcp_rst+0x36>
 8017b94:	4b1a      	ldr	r3, [pc, #104]	; (8017c00 <tcp_rst+0x94>)
 8017b96:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8017b9a:	491c      	ldr	r1, [pc, #112]	; (8017c0c <tcp_rst+0xa0>)
 8017b9c:	481a      	ldr	r0, [pc, #104]	; (8017c08 <tcp_rst+0x9c>)
 8017b9e:	f004 fd9f 	bl	801c6e0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017ba2:	2300      	movs	r3, #0
 8017ba4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8017ba6:	f246 0308 	movw	r3, #24584	; 0x6008
 8017baa:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8017bac:	7dfb      	ldrb	r3, [r7, #23]
 8017bae:	b29c      	uxth	r4, r3
 8017bb0:	68b8      	ldr	r0, [r7, #8]
 8017bb2:	f7f8 fa9a 	bl	80100ea <lwip_htonl>
 8017bb6:	4602      	mov	r2, r0
 8017bb8:	8abb      	ldrh	r3, [r7, #20]
 8017bba:	9303      	str	r3, [sp, #12]
 8017bbc:	2314      	movs	r3, #20
 8017bbe:	9302      	str	r3, [sp, #8]
 8017bc0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8017bc2:	9301      	str	r3, [sp, #4]
 8017bc4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8017bc6:	9300      	str	r3, [sp, #0]
 8017bc8:	4613      	mov	r3, r2
 8017bca:	2200      	movs	r2, #0
 8017bcc:	4621      	mov	r1, r4
 8017bce:	6878      	ldr	r0, [r7, #4]
 8017bd0:	f7ff fe92 	bl	80178f8 <tcp_output_alloc_header_common>
 8017bd4:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8017bd6:	693b      	ldr	r3, [r7, #16]
 8017bd8:	2b00      	cmp	r3, #0
 8017bda:	d00c      	beq.n	8017bf6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017bdc:	7dfb      	ldrb	r3, [r7, #23]
 8017bde:	2200      	movs	r2, #0
 8017be0:	6939      	ldr	r1, [r7, #16]
 8017be2:	68f8      	ldr	r0, [r7, #12]
 8017be4:	f7ff ff38 	bl	8017a58 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8017be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017bea:	683a      	ldr	r2, [r7, #0]
 8017bec:	6939      	ldr	r1, [r7, #16]
 8017bee:	68f8      	ldr	r0, [r7, #12]
 8017bf0:	f7ff ff72 	bl	8017ad8 <tcp_output_control_segment>
 8017bf4:	e000      	b.n	8017bf8 <tcp_rst+0x8c>
    return;
 8017bf6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8017bf8:	371c      	adds	r7, #28
 8017bfa:	46bd      	mov	sp, r7
 8017bfc:	bd90      	pop	{r4, r7, pc}
 8017bfe:	bf00      	nop
 8017c00:	08020c58 	.word	0x08020c58
 8017c04:	080213dc 	.word	0x080213dc
 8017c08:	08020cac 	.word	0x08020cac
 8017c0c:	080213f8 	.word	0x080213f8

08017c10 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8017c10:	b590      	push	{r4, r7, lr}
 8017c12:	b087      	sub	sp, #28
 8017c14:	af00      	add	r7, sp, #0
 8017c16:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8017c18:	2300      	movs	r3, #0
 8017c1a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8017c1c:	2300      	movs	r3, #0
 8017c1e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8017c20:	687b      	ldr	r3, [r7, #4]
 8017c22:	2b00      	cmp	r3, #0
 8017c24:	d106      	bne.n	8017c34 <tcp_send_empty_ack+0x24>
 8017c26:	4b28      	ldr	r3, [pc, #160]	; (8017cc8 <tcp_send_empty_ack+0xb8>)
 8017c28:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8017c2c:	4927      	ldr	r1, [pc, #156]	; (8017ccc <tcp_send_empty_ack+0xbc>)
 8017c2e:	4828      	ldr	r0, [pc, #160]	; (8017cd0 <tcp_send_empty_ack+0xc0>)
 8017c30:	f004 fd56 	bl	801c6e0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8017c34:	7dfb      	ldrb	r3, [r7, #23]
 8017c36:	009b      	lsls	r3, r3, #2
 8017c38:	b2db      	uxtb	r3, r3
 8017c3a:	f003 0304 	and.w	r3, r3, #4
 8017c3e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8017c40:	7d7b      	ldrb	r3, [r7, #21]
 8017c42:	b29c      	uxth	r4, r3
 8017c44:	687b      	ldr	r3, [r7, #4]
 8017c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017c48:	4618      	mov	r0, r3
 8017c4a:	f7f8 fa4e 	bl	80100ea <lwip_htonl>
 8017c4e:	4603      	mov	r3, r0
 8017c50:	2200      	movs	r2, #0
 8017c52:	4621      	mov	r1, r4
 8017c54:	6878      	ldr	r0, [r7, #4]
 8017c56:	f7ff fec1 	bl	80179dc <tcp_output_alloc_header>
 8017c5a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017c5c:	693b      	ldr	r3, [r7, #16]
 8017c5e:	2b00      	cmp	r3, #0
 8017c60:	d109      	bne.n	8017c76 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017c62:	687b      	ldr	r3, [r7, #4]
 8017c64:	8b5b      	ldrh	r3, [r3, #26]
 8017c66:	f043 0303 	orr.w	r3, r3, #3
 8017c6a:	b29a      	uxth	r2, r3
 8017c6c:	687b      	ldr	r3, [r7, #4]
 8017c6e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8017c70:	f06f 0301 	mvn.w	r3, #1
 8017c74:	e023      	b.n	8017cbe <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8017c76:	7dbb      	ldrb	r3, [r7, #22]
 8017c78:	7dfa      	ldrb	r2, [r7, #23]
 8017c7a:	6939      	ldr	r1, [r7, #16]
 8017c7c:	6878      	ldr	r0, [r7, #4]
 8017c7e:	f7ff feeb 	bl	8017a58 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017c82:	687a      	ldr	r2, [r7, #4]
 8017c84:	687b      	ldr	r3, [r7, #4]
 8017c86:	3304      	adds	r3, #4
 8017c88:	6939      	ldr	r1, [r7, #16]
 8017c8a:	6878      	ldr	r0, [r7, #4]
 8017c8c:	f7ff ff24 	bl	8017ad8 <tcp_output_control_segment>
 8017c90:	4603      	mov	r3, r0
 8017c92:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8017c94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017c98:	2b00      	cmp	r3, #0
 8017c9a:	d007      	beq.n	8017cac <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017c9c:	687b      	ldr	r3, [r7, #4]
 8017c9e:	8b5b      	ldrh	r3, [r3, #26]
 8017ca0:	f043 0303 	orr.w	r3, r3, #3
 8017ca4:	b29a      	uxth	r2, r3
 8017ca6:	687b      	ldr	r3, [r7, #4]
 8017ca8:	835a      	strh	r2, [r3, #26]
 8017caa:	e006      	b.n	8017cba <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017cac:	687b      	ldr	r3, [r7, #4]
 8017cae:	8b5b      	ldrh	r3, [r3, #26]
 8017cb0:	f023 0303 	bic.w	r3, r3, #3
 8017cb4:	b29a      	uxth	r2, r3
 8017cb6:	687b      	ldr	r3, [r7, #4]
 8017cb8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8017cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017cbe:	4618      	mov	r0, r3
 8017cc0:	371c      	adds	r7, #28
 8017cc2:	46bd      	mov	sp, r7
 8017cc4:	bd90      	pop	{r4, r7, pc}
 8017cc6:	bf00      	nop
 8017cc8:	08020c58 	.word	0x08020c58
 8017ccc:	08021414 	.word	0x08021414
 8017cd0:	08020cac 	.word	0x08020cac

08017cd4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8017cd4:	b590      	push	{r4, r7, lr}
 8017cd6:	b087      	sub	sp, #28
 8017cd8:	af00      	add	r7, sp, #0
 8017cda:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017cdc:	2300      	movs	r3, #0
 8017cde:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8017ce0:	687b      	ldr	r3, [r7, #4]
 8017ce2:	2b00      	cmp	r3, #0
 8017ce4:	d106      	bne.n	8017cf4 <tcp_keepalive+0x20>
 8017ce6:	4b18      	ldr	r3, [pc, #96]	; (8017d48 <tcp_keepalive+0x74>)
 8017ce8:	f640 0224 	movw	r2, #2084	; 0x824
 8017cec:	4917      	ldr	r1, [pc, #92]	; (8017d4c <tcp_keepalive+0x78>)
 8017cee:	4818      	ldr	r0, [pc, #96]	; (8017d50 <tcp_keepalive+0x7c>)
 8017cf0:	f004 fcf6 	bl	801c6e0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8017cf4:	7dfb      	ldrb	r3, [r7, #23]
 8017cf6:	b29c      	uxth	r4, r3
 8017cf8:	687b      	ldr	r3, [r7, #4]
 8017cfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017cfc:	3b01      	subs	r3, #1
 8017cfe:	4618      	mov	r0, r3
 8017d00:	f7f8 f9f3 	bl	80100ea <lwip_htonl>
 8017d04:	4603      	mov	r3, r0
 8017d06:	2200      	movs	r2, #0
 8017d08:	4621      	mov	r1, r4
 8017d0a:	6878      	ldr	r0, [r7, #4]
 8017d0c:	f7ff fe66 	bl	80179dc <tcp_output_alloc_header>
 8017d10:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017d12:	693b      	ldr	r3, [r7, #16]
 8017d14:	2b00      	cmp	r3, #0
 8017d16:	d102      	bne.n	8017d1e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8017d18:	f04f 33ff 	mov.w	r3, #4294967295
 8017d1c:	e010      	b.n	8017d40 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017d1e:	7dfb      	ldrb	r3, [r7, #23]
 8017d20:	2200      	movs	r2, #0
 8017d22:	6939      	ldr	r1, [r7, #16]
 8017d24:	6878      	ldr	r0, [r7, #4]
 8017d26:	f7ff fe97 	bl	8017a58 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017d2a:	687a      	ldr	r2, [r7, #4]
 8017d2c:	687b      	ldr	r3, [r7, #4]
 8017d2e:	3304      	adds	r3, #4
 8017d30:	6939      	ldr	r1, [r7, #16]
 8017d32:	6878      	ldr	r0, [r7, #4]
 8017d34:	f7ff fed0 	bl	8017ad8 <tcp_output_control_segment>
 8017d38:	4603      	mov	r3, r0
 8017d3a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8017d3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017d40:	4618      	mov	r0, r3
 8017d42:	371c      	adds	r7, #28
 8017d44:	46bd      	mov	sp, r7
 8017d46:	bd90      	pop	{r4, r7, pc}
 8017d48:	08020c58 	.word	0x08020c58
 8017d4c:	08021434 	.word	0x08021434
 8017d50:	08020cac 	.word	0x08020cac

08017d54 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8017d54:	b590      	push	{r4, r7, lr}
 8017d56:	b08b      	sub	sp, #44	; 0x2c
 8017d58:	af00      	add	r7, sp, #0
 8017d5a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017d5c:	2300      	movs	r3, #0
 8017d5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8017d62:	687b      	ldr	r3, [r7, #4]
 8017d64:	2b00      	cmp	r3, #0
 8017d66:	d106      	bne.n	8017d76 <tcp_zero_window_probe+0x22>
 8017d68:	4b4c      	ldr	r3, [pc, #304]	; (8017e9c <tcp_zero_window_probe+0x148>)
 8017d6a:	f640 024f 	movw	r2, #2127	; 0x84f
 8017d6e:	494c      	ldr	r1, [pc, #304]	; (8017ea0 <tcp_zero_window_probe+0x14c>)
 8017d70:	484c      	ldr	r0, [pc, #304]	; (8017ea4 <tcp_zero_window_probe+0x150>)
 8017d72:	f004 fcb5 	bl	801c6e0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8017d76:	687b      	ldr	r3, [r7, #4]
 8017d78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017d7a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8017d7c:	6a3b      	ldr	r3, [r7, #32]
 8017d7e:	2b00      	cmp	r3, #0
 8017d80:	d101      	bne.n	8017d86 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8017d82:	2300      	movs	r3, #0
 8017d84:	e086      	b.n	8017e94 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8017d86:	687b      	ldr	r3, [r7, #4]
 8017d88:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8017d8c:	2bff      	cmp	r3, #255	; 0xff
 8017d8e:	d007      	beq.n	8017da0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8017d90:	687b      	ldr	r3, [r7, #4]
 8017d92:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8017d96:	3301      	adds	r3, #1
 8017d98:	b2da      	uxtb	r2, r3
 8017d9a:	687b      	ldr	r3, [r7, #4]
 8017d9c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8017da0:	6a3b      	ldr	r3, [r7, #32]
 8017da2:	68db      	ldr	r3, [r3, #12]
 8017da4:	899b      	ldrh	r3, [r3, #12]
 8017da6:	b29b      	uxth	r3, r3
 8017da8:	4618      	mov	r0, r3
 8017daa:	f7f8 f989 	bl	80100c0 <lwip_htons>
 8017dae:	4603      	mov	r3, r0
 8017db0:	b2db      	uxtb	r3, r3
 8017db2:	f003 0301 	and.w	r3, r3, #1
 8017db6:	2b00      	cmp	r3, #0
 8017db8:	d005      	beq.n	8017dc6 <tcp_zero_window_probe+0x72>
 8017dba:	6a3b      	ldr	r3, [r7, #32]
 8017dbc:	891b      	ldrh	r3, [r3, #8]
 8017dbe:	2b00      	cmp	r3, #0
 8017dc0:	d101      	bne.n	8017dc6 <tcp_zero_window_probe+0x72>
 8017dc2:	2301      	movs	r3, #1
 8017dc4:	e000      	b.n	8017dc8 <tcp_zero_window_probe+0x74>
 8017dc6:	2300      	movs	r3, #0
 8017dc8:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8017dca:	7ffb      	ldrb	r3, [r7, #31]
 8017dcc:	2b00      	cmp	r3, #0
 8017dce:	bf0c      	ite	eq
 8017dd0:	2301      	moveq	r3, #1
 8017dd2:	2300      	movne	r3, #0
 8017dd4:	b2db      	uxtb	r3, r3
 8017dd6:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8017dd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017ddc:	b299      	uxth	r1, r3
 8017dde:	6a3b      	ldr	r3, [r7, #32]
 8017de0:	68db      	ldr	r3, [r3, #12]
 8017de2:	685b      	ldr	r3, [r3, #4]
 8017de4:	8bba      	ldrh	r2, [r7, #28]
 8017de6:	6878      	ldr	r0, [r7, #4]
 8017de8:	f7ff fdf8 	bl	80179dc <tcp_output_alloc_header>
 8017dec:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8017dee:	69bb      	ldr	r3, [r7, #24]
 8017df0:	2b00      	cmp	r3, #0
 8017df2:	d102      	bne.n	8017dfa <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8017df4:	f04f 33ff 	mov.w	r3, #4294967295
 8017df8:	e04c      	b.n	8017e94 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8017dfa:	69bb      	ldr	r3, [r7, #24]
 8017dfc:	685b      	ldr	r3, [r3, #4]
 8017dfe:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8017e00:	7ffb      	ldrb	r3, [r7, #31]
 8017e02:	2b00      	cmp	r3, #0
 8017e04:	d011      	beq.n	8017e2a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8017e06:	697b      	ldr	r3, [r7, #20]
 8017e08:	899b      	ldrh	r3, [r3, #12]
 8017e0a:	b29b      	uxth	r3, r3
 8017e0c:	b21b      	sxth	r3, r3
 8017e0e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8017e12:	b21c      	sxth	r4, r3
 8017e14:	2011      	movs	r0, #17
 8017e16:	f7f8 f953 	bl	80100c0 <lwip_htons>
 8017e1a:	4603      	mov	r3, r0
 8017e1c:	b21b      	sxth	r3, r3
 8017e1e:	4323      	orrs	r3, r4
 8017e20:	b21b      	sxth	r3, r3
 8017e22:	b29a      	uxth	r2, r3
 8017e24:	697b      	ldr	r3, [r7, #20]
 8017e26:	819a      	strh	r2, [r3, #12]
 8017e28:	e010      	b.n	8017e4c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8017e2a:	69bb      	ldr	r3, [r7, #24]
 8017e2c:	685b      	ldr	r3, [r3, #4]
 8017e2e:	3314      	adds	r3, #20
 8017e30:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8017e32:	6a3b      	ldr	r3, [r7, #32]
 8017e34:	6858      	ldr	r0, [r3, #4]
 8017e36:	6a3b      	ldr	r3, [r7, #32]
 8017e38:	685b      	ldr	r3, [r3, #4]
 8017e3a:	891a      	ldrh	r2, [r3, #8]
 8017e3c:	6a3b      	ldr	r3, [r7, #32]
 8017e3e:	891b      	ldrh	r3, [r3, #8]
 8017e40:	1ad3      	subs	r3, r2, r3
 8017e42:	b29b      	uxth	r3, r3
 8017e44:	2201      	movs	r2, #1
 8017e46:	6939      	ldr	r1, [r7, #16]
 8017e48:	f7f9 fefc 	bl	8011c44 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8017e4c:	6a3b      	ldr	r3, [r7, #32]
 8017e4e:	68db      	ldr	r3, [r3, #12]
 8017e50:	685b      	ldr	r3, [r3, #4]
 8017e52:	4618      	mov	r0, r3
 8017e54:	f7f8 f949 	bl	80100ea <lwip_htonl>
 8017e58:	4603      	mov	r3, r0
 8017e5a:	3301      	adds	r3, #1
 8017e5c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8017e5e:	687b      	ldr	r3, [r7, #4]
 8017e60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017e62:	68fb      	ldr	r3, [r7, #12]
 8017e64:	1ad3      	subs	r3, r2, r3
 8017e66:	2b00      	cmp	r3, #0
 8017e68:	da02      	bge.n	8017e70 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8017e6a:	687b      	ldr	r3, [r7, #4]
 8017e6c:	68fa      	ldr	r2, [r7, #12]
 8017e6e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017e70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017e74:	2200      	movs	r2, #0
 8017e76:	69b9      	ldr	r1, [r7, #24]
 8017e78:	6878      	ldr	r0, [r7, #4]
 8017e7a:	f7ff fded 	bl	8017a58 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017e7e:	687a      	ldr	r2, [r7, #4]
 8017e80:	687b      	ldr	r3, [r7, #4]
 8017e82:	3304      	adds	r3, #4
 8017e84:	69b9      	ldr	r1, [r7, #24]
 8017e86:	6878      	ldr	r0, [r7, #4]
 8017e88:	f7ff fe26 	bl	8017ad8 <tcp_output_control_segment>
 8017e8c:	4603      	mov	r3, r0
 8017e8e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8017e90:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8017e94:	4618      	mov	r0, r3
 8017e96:	372c      	adds	r7, #44	; 0x2c
 8017e98:	46bd      	mov	sp, r7
 8017e9a:	bd90      	pop	{r4, r7, pc}
 8017e9c:	08020c58 	.word	0x08020c58
 8017ea0:	08021450 	.word	0x08021450
 8017ea4:	08020cac 	.word	0x08020cac

08017ea8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8017ea8:	b580      	push	{r7, lr}
 8017eaa:	b082      	sub	sp, #8
 8017eac:	af00      	add	r7, sp, #0
 8017eae:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8017eb0:	f7f9 ffb6 	bl	8011e20 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8017eb4:	4b0a      	ldr	r3, [pc, #40]	; (8017ee0 <tcpip_tcp_timer+0x38>)
 8017eb6:	681b      	ldr	r3, [r3, #0]
 8017eb8:	2b00      	cmp	r3, #0
 8017eba:	d103      	bne.n	8017ec4 <tcpip_tcp_timer+0x1c>
 8017ebc:	4b09      	ldr	r3, [pc, #36]	; (8017ee4 <tcpip_tcp_timer+0x3c>)
 8017ebe:	681b      	ldr	r3, [r3, #0]
 8017ec0:	2b00      	cmp	r3, #0
 8017ec2:	d005      	beq.n	8017ed0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8017ec4:	2200      	movs	r2, #0
 8017ec6:	4908      	ldr	r1, [pc, #32]	; (8017ee8 <tcpip_tcp_timer+0x40>)
 8017ec8:	20fa      	movs	r0, #250	; 0xfa
 8017eca:	f000 f8f3 	bl	80180b4 <sys_timeout>
 8017ece:	e003      	b.n	8017ed8 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8017ed0:	4b06      	ldr	r3, [pc, #24]	; (8017eec <tcpip_tcp_timer+0x44>)
 8017ed2:	2200      	movs	r2, #0
 8017ed4:	601a      	str	r2, [r3, #0]
  }
}
 8017ed6:	bf00      	nop
 8017ed8:	bf00      	nop
 8017eda:	3708      	adds	r7, #8
 8017edc:	46bd      	mov	sp, r7
 8017ede:	bd80      	pop	{r7, pc}
 8017ee0:	2000b61c 	.word	0x2000b61c
 8017ee4:	2000b62c 	.word	0x2000b62c
 8017ee8:	08017ea9 	.word	0x08017ea9
 8017eec:	2000473c 	.word	0x2000473c

08017ef0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8017ef0:	b580      	push	{r7, lr}
 8017ef2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8017ef4:	4b0a      	ldr	r3, [pc, #40]	; (8017f20 <tcp_timer_needed+0x30>)
 8017ef6:	681b      	ldr	r3, [r3, #0]
 8017ef8:	2b00      	cmp	r3, #0
 8017efa:	d10f      	bne.n	8017f1c <tcp_timer_needed+0x2c>
 8017efc:	4b09      	ldr	r3, [pc, #36]	; (8017f24 <tcp_timer_needed+0x34>)
 8017efe:	681b      	ldr	r3, [r3, #0]
 8017f00:	2b00      	cmp	r3, #0
 8017f02:	d103      	bne.n	8017f0c <tcp_timer_needed+0x1c>
 8017f04:	4b08      	ldr	r3, [pc, #32]	; (8017f28 <tcp_timer_needed+0x38>)
 8017f06:	681b      	ldr	r3, [r3, #0]
 8017f08:	2b00      	cmp	r3, #0
 8017f0a:	d007      	beq.n	8017f1c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8017f0c:	4b04      	ldr	r3, [pc, #16]	; (8017f20 <tcp_timer_needed+0x30>)
 8017f0e:	2201      	movs	r2, #1
 8017f10:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8017f12:	2200      	movs	r2, #0
 8017f14:	4905      	ldr	r1, [pc, #20]	; (8017f2c <tcp_timer_needed+0x3c>)
 8017f16:	20fa      	movs	r0, #250	; 0xfa
 8017f18:	f000 f8cc 	bl	80180b4 <sys_timeout>
  }
}
 8017f1c:	bf00      	nop
 8017f1e:	bd80      	pop	{r7, pc}
 8017f20:	2000473c 	.word	0x2000473c
 8017f24:	2000b61c 	.word	0x2000b61c
 8017f28:	2000b62c 	.word	0x2000b62c
 8017f2c:	08017ea9 	.word	0x08017ea9

08017f30 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8017f30:	b580      	push	{r7, lr}
 8017f32:	b086      	sub	sp, #24
 8017f34:	af00      	add	r7, sp, #0
 8017f36:	60f8      	str	r0, [r7, #12]
 8017f38:	60b9      	str	r1, [r7, #8]
 8017f3a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8017f3c:	200a      	movs	r0, #10
 8017f3e:	f7f8 fdab 	bl	8010a98 <memp_malloc>
 8017f42:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8017f44:	693b      	ldr	r3, [r7, #16]
 8017f46:	2b00      	cmp	r3, #0
 8017f48:	d109      	bne.n	8017f5e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8017f4a:	693b      	ldr	r3, [r7, #16]
 8017f4c:	2b00      	cmp	r3, #0
 8017f4e:	d151      	bne.n	8017ff4 <sys_timeout_abs+0xc4>
 8017f50:	4b2a      	ldr	r3, [pc, #168]	; (8017ffc <sys_timeout_abs+0xcc>)
 8017f52:	22be      	movs	r2, #190	; 0xbe
 8017f54:	492a      	ldr	r1, [pc, #168]	; (8018000 <sys_timeout_abs+0xd0>)
 8017f56:	482b      	ldr	r0, [pc, #172]	; (8018004 <sys_timeout_abs+0xd4>)
 8017f58:	f004 fbc2 	bl	801c6e0 <iprintf>
    return;
 8017f5c:	e04a      	b.n	8017ff4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8017f5e:	693b      	ldr	r3, [r7, #16]
 8017f60:	2200      	movs	r2, #0
 8017f62:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8017f64:	693b      	ldr	r3, [r7, #16]
 8017f66:	68ba      	ldr	r2, [r7, #8]
 8017f68:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8017f6a:	693b      	ldr	r3, [r7, #16]
 8017f6c:	687a      	ldr	r2, [r7, #4]
 8017f6e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8017f70:	693b      	ldr	r3, [r7, #16]
 8017f72:	68fa      	ldr	r2, [r7, #12]
 8017f74:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8017f76:	4b24      	ldr	r3, [pc, #144]	; (8018008 <sys_timeout_abs+0xd8>)
 8017f78:	681b      	ldr	r3, [r3, #0]
 8017f7a:	2b00      	cmp	r3, #0
 8017f7c:	d103      	bne.n	8017f86 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8017f7e:	4a22      	ldr	r2, [pc, #136]	; (8018008 <sys_timeout_abs+0xd8>)
 8017f80:	693b      	ldr	r3, [r7, #16]
 8017f82:	6013      	str	r3, [r2, #0]
    return;
 8017f84:	e037      	b.n	8017ff6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8017f86:	693b      	ldr	r3, [r7, #16]
 8017f88:	685a      	ldr	r2, [r3, #4]
 8017f8a:	4b1f      	ldr	r3, [pc, #124]	; (8018008 <sys_timeout_abs+0xd8>)
 8017f8c:	681b      	ldr	r3, [r3, #0]
 8017f8e:	685b      	ldr	r3, [r3, #4]
 8017f90:	1ad3      	subs	r3, r2, r3
 8017f92:	0fdb      	lsrs	r3, r3, #31
 8017f94:	f003 0301 	and.w	r3, r3, #1
 8017f98:	b2db      	uxtb	r3, r3
 8017f9a:	2b00      	cmp	r3, #0
 8017f9c:	d007      	beq.n	8017fae <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8017f9e:	4b1a      	ldr	r3, [pc, #104]	; (8018008 <sys_timeout_abs+0xd8>)
 8017fa0:	681a      	ldr	r2, [r3, #0]
 8017fa2:	693b      	ldr	r3, [r7, #16]
 8017fa4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8017fa6:	4a18      	ldr	r2, [pc, #96]	; (8018008 <sys_timeout_abs+0xd8>)
 8017fa8:	693b      	ldr	r3, [r7, #16]
 8017faa:	6013      	str	r3, [r2, #0]
 8017fac:	e023      	b.n	8017ff6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8017fae:	4b16      	ldr	r3, [pc, #88]	; (8018008 <sys_timeout_abs+0xd8>)
 8017fb0:	681b      	ldr	r3, [r3, #0]
 8017fb2:	617b      	str	r3, [r7, #20]
 8017fb4:	e01a      	b.n	8017fec <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8017fb6:	697b      	ldr	r3, [r7, #20]
 8017fb8:	681b      	ldr	r3, [r3, #0]
 8017fba:	2b00      	cmp	r3, #0
 8017fbc:	d00b      	beq.n	8017fd6 <sys_timeout_abs+0xa6>
 8017fbe:	693b      	ldr	r3, [r7, #16]
 8017fc0:	685a      	ldr	r2, [r3, #4]
 8017fc2:	697b      	ldr	r3, [r7, #20]
 8017fc4:	681b      	ldr	r3, [r3, #0]
 8017fc6:	685b      	ldr	r3, [r3, #4]
 8017fc8:	1ad3      	subs	r3, r2, r3
 8017fca:	0fdb      	lsrs	r3, r3, #31
 8017fcc:	f003 0301 	and.w	r3, r3, #1
 8017fd0:	b2db      	uxtb	r3, r3
 8017fd2:	2b00      	cmp	r3, #0
 8017fd4:	d007      	beq.n	8017fe6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8017fd6:	697b      	ldr	r3, [r7, #20]
 8017fd8:	681a      	ldr	r2, [r3, #0]
 8017fda:	693b      	ldr	r3, [r7, #16]
 8017fdc:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8017fde:	697b      	ldr	r3, [r7, #20]
 8017fe0:	693a      	ldr	r2, [r7, #16]
 8017fe2:	601a      	str	r2, [r3, #0]
        break;
 8017fe4:	e007      	b.n	8017ff6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8017fe6:	697b      	ldr	r3, [r7, #20]
 8017fe8:	681b      	ldr	r3, [r3, #0]
 8017fea:	617b      	str	r3, [r7, #20]
 8017fec:	697b      	ldr	r3, [r7, #20]
 8017fee:	2b00      	cmp	r3, #0
 8017ff0:	d1e1      	bne.n	8017fb6 <sys_timeout_abs+0x86>
 8017ff2:	e000      	b.n	8017ff6 <sys_timeout_abs+0xc6>
    return;
 8017ff4:	bf00      	nop
      }
    }
  }
}
 8017ff6:	3718      	adds	r7, #24
 8017ff8:	46bd      	mov	sp, r7
 8017ffa:	bd80      	pop	{r7, pc}
 8017ffc:	08021474 	.word	0x08021474
 8018000:	080214a8 	.word	0x080214a8
 8018004:	080214e8 	.word	0x080214e8
 8018008:	20004734 	.word	0x20004734

0801800c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801800c:	b580      	push	{r7, lr}
 801800e:	b086      	sub	sp, #24
 8018010:	af00      	add	r7, sp, #0
 8018012:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8018014:	687b      	ldr	r3, [r7, #4]
 8018016:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8018018:	697b      	ldr	r3, [r7, #20]
 801801a:	685b      	ldr	r3, [r3, #4]
 801801c:	4798      	blx	r3

  now = sys_now();
 801801e:	f7f0 fe39 	bl	8008c94 <sys_now>
 8018022:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8018024:	697b      	ldr	r3, [r7, #20]
 8018026:	681a      	ldr	r2, [r3, #0]
 8018028:	4b0f      	ldr	r3, [pc, #60]	; (8018068 <lwip_cyclic_timer+0x5c>)
 801802a:	681b      	ldr	r3, [r3, #0]
 801802c:	4413      	add	r3, r2
 801802e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8018030:	68fa      	ldr	r2, [r7, #12]
 8018032:	693b      	ldr	r3, [r7, #16]
 8018034:	1ad3      	subs	r3, r2, r3
 8018036:	0fdb      	lsrs	r3, r3, #31
 8018038:	f003 0301 	and.w	r3, r3, #1
 801803c:	b2db      	uxtb	r3, r3
 801803e:	2b00      	cmp	r3, #0
 8018040:	d009      	beq.n	8018056 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8018042:	697b      	ldr	r3, [r7, #20]
 8018044:	681a      	ldr	r2, [r3, #0]
 8018046:	693b      	ldr	r3, [r7, #16]
 8018048:	4413      	add	r3, r2
 801804a:	687a      	ldr	r2, [r7, #4]
 801804c:	4907      	ldr	r1, [pc, #28]	; (801806c <lwip_cyclic_timer+0x60>)
 801804e:	4618      	mov	r0, r3
 8018050:	f7ff ff6e 	bl	8017f30 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8018054:	e004      	b.n	8018060 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8018056:	687a      	ldr	r2, [r7, #4]
 8018058:	4904      	ldr	r1, [pc, #16]	; (801806c <lwip_cyclic_timer+0x60>)
 801805a:	68f8      	ldr	r0, [r7, #12]
 801805c:	f7ff ff68 	bl	8017f30 <sys_timeout_abs>
}
 8018060:	bf00      	nop
 8018062:	3718      	adds	r7, #24
 8018064:	46bd      	mov	sp, r7
 8018066:	bd80      	pop	{r7, pc}
 8018068:	20004738 	.word	0x20004738
 801806c:	0801800d 	.word	0x0801800d

08018070 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8018070:	b580      	push	{r7, lr}
 8018072:	b082      	sub	sp, #8
 8018074:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8018076:	2301      	movs	r3, #1
 8018078:	607b      	str	r3, [r7, #4]
 801807a:	e00e      	b.n	801809a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801807c:	4a0b      	ldr	r2, [pc, #44]	; (80180ac <sys_timeouts_init+0x3c>)
 801807e:	687b      	ldr	r3, [r7, #4]
 8018080:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8018084:	687b      	ldr	r3, [r7, #4]
 8018086:	00db      	lsls	r3, r3, #3
 8018088:	4a08      	ldr	r2, [pc, #32]	; (80180ac <sys_timeouts_init+0x3c>)
 801808a:	4413      	add	r3, r2
 801808c:	461a      	mov	r2, r3
 801808e:	4908      	ldr	r1, [pc, #32]	; (80180b0 <sys_timeouts_init+0x40>)
 8018090:	f000 f810 	bl	80180b4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8018094:	687b      	ldr	r3, [r7, #4]
 8018096:	3301      	adds	r3, #1
 8018098:	607b      	str	r3, [r7, #4]
 801809a:	687b      	ldr	r3, [r7, #4]
 801809c:	2b02      	cmp	r3, #2
 801809e:	d9ed      	bls.n	801807c <sys_timeouts_init+0xc>
  }
}
 80180a0:	bf00      	nop
 80180a2:	bf00      	nop
 80180a4:	3708      	adds	r7, #8
 80180a6:	46bd      	mov	sp, r7
 80180a8:	bd80      	pop	{r7, pc}
 80180aa:	bf00      	nop
 80180ac:	08023034 	.word	0x08023034
 80180b0:	0801800d 	.word	0x0801800d

080180b4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80180b4:	b580      	push	{r7, lr}
 80180b6:	b086      	sub	sp, #24
 80180b8:	af00      	add	r7, sp, #0
 80180ba:	60f8      	str	r0, [r7, #12]
 80180bc:	60b9      	str	r1, [r7, #8]
 80180be:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80180c0:	68fb      	ldr	r3, [r7, #12]
 80180c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80180c6:	d306      	bcc.n	80180d6 <sys_timeout+0x22>
 80180c8:	4b0a      	ldr	r3, [pc, #40]	; (80180f4 <sys_timeout+0x40>)
 80180ca:	f240 1229 	movw	r2, #297	; 0x129
 80180ce:	490a      	ldr	r1, [pc, #40]	; (80180f8 <sys_timeout+0x44>)
 80180d0:	480a      	ldr	r0, [pc, #40]	; (80180fc <sys_timeout+0x48>)
 80180d2:	f004 fb05 	bl	801c6e0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80180d6:	f7f0 fddd 	bl	8008c94 <sys_now>
 80180da:	4602      	mov	r2, r0
 80180dc:	68fb      	ldr	r3, [r7, #12]
 80180de:	4413      	add	r3, r2
 80180e0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80180e2:	687a      	ldr	r2, [r7, #4]
 80180e4:	68b9      	ldr	r1, [r7, #8]
 80180e6:	6978      	ldr	r0, [r7, #20]
 80180e8:	f7ff ff22 	bl	8017f30 <sys_timeout_abs>
#endif
}
 80180ec:	bf00      	nop
 80180ee:	3718      	adds	r7, #24
 80180f0:	46bd      	mov	sp, r7
 80180f2:	bd80      	pop	{r7, pc}
 80180f4:	08021474 	.word	0x08021474
 80180f8:	08021510 	.word	0x08021510
 80180fc:	080214e8 	.word	0x080214e8

08018100 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8018100:	b580      	push	{r7, lr}
 8018102:	b084      	sub	sp, #16
 8018104:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8018106:	f7f0 fdc5 	bl	8008c94 <sys_now>
 801810a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801810c:	4b17      	ldr	r3, [pc, #92]	; (801816c <sys_check_timeouts+0x6c>)
 801810e:	681b      	ldr	r3, [r3, #0]
 8018110:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8018112:	68bb      	ldr	r3, [r7, #8]
 8018114:	2b00      	cmp	r3, #0
 8018116:	d022      	beq.n	801815e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8018118:	68bb      	ldr	r3, [r7, #8]
 801811a:	685b      	ldr	r3, [r3, #4]
 801811c:	68fa      	ldr	r2, [r7, #12]
 801811e:	1ad3      	subs	r3, r2, r3
 8018120:	0fdb      	lsrs	r3, r3, #31
 8018122:	f003 0301 	and.w	r3, r3, #1
 8018126:	b2db      	uxtb	r3, r3
 8018128:	2b00      	cmp	r3, #0
 801812a:	d11a      	bne.n	8018162 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801812c:	68bb      	ldr	r3, [r7, #8]
 801812e:	681b      	ldr	r3, [r3, #0]
 8018130:	4a0e      	ldr	r2, [pc, #56]	; (801816c <sys_check_timeouts+0x6c>)
 8018132:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8018134:	68bb      	ldr	r3, [r7, #8]
 8018136:	689b      	ldr	r3, [r3, #8]
 8018138:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801813a:	68bb      	ldr	r3, [r7, #8]
 801813c:	68db      	ldr	r3, [r3, #12]
 801813e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8018140:	68bb      	ldr	r3, [r7, #8]
 8018142:	685b      	ldr	r3, [r3, #4]
 8018144:	4a0a      	ldr	r2, [pc, #40]	; (8018170 <sys_check_timeouts+0x70>)
 8018146:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8018148:	68b9      	ldr	r1, [r7, #8]
 801814a:	200a      	movs	r0, #10
 801814c:	f7f8 fcf6 	bl	8010b3c <memp_free>
    if (handler != NULL) {
 8018150:	687b      	ldr	r3, [r7, #4]
 8018152:	2b00      	cmp	r3, #0
 8018154:	d0da      	beq.n	801810c <sys_check_timeouts+0xc>
      handler(arg);
 8018156:	687b      	ldr	r3, [r7, #4]
 8018158:	6838      	ldr	r0, [r7, #0]
 801815a:	4798      	blx	r3
  do {
 801815c:	e7d6      	b.n	801810c <sys_check_timeouts+0xc>
      return;
 801815e:	bf00      	nop
 8018160:	e000      	b.n	8018164 <sys_check_timeouts+0x64>
      return;
 8018162:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8018164:	3710      	adds	r7, #16
 8018166:	46bd      	mov	sp, r7
 8018168:	bd80      	pop	{r7, pc}
 801816a:	bf00      	nop
 801816c:	20004734 	.word	0x20004734
 8018170:	20004738 	.word	0x20004738

08018174 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8018174:	b580      	push	{r7, lr}
 8018176:	b082      	sub	sp, #8
 8018178:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801817a:	4b16      	ldr	r3, [pc, #88]	; (80181d4 <sys_timeouts_sleeptime+0x60>)
 801817c:	681b      	ldr	r3, [r3, #0]
 801817e:	2b00      	cmp	r3, #0
 8018180:	d102      	bne.n	8018188 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8018182:	f04f 33ff 	mov.w	r3, #4294967295
 8018186:	e020      	b.n	80181ca <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8018188:	f7f0 fd84 	bl	8008c94 <sys_now>
 801818c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801818e:	4b11      	ldr	r3, [pc, #68]	; (80181d4 <sys_timeouts_sleeptime+0x60>)
 8018190:	681b      	ldr	r3, [r3, #0]
 8018192:	685a      	ldr	r2, [r3, #4]
 8018194:	687b      	ldr	r3, [r7, #4]
 8018196:	1ad3      	subs	r3, r2, r3
 8018198:	0fdb      	lsrs	r3, r3, #31
 801819a:	f003 0301 	and.w	r3, r3, #1
 801819e:	b2db      	uxtb	r3, r3
 80181a0:	2b00      	cmp	r3, #0
 80181a2:	d001      	beq.n	80181a8 <sys_timeouts_sleeptime+0x34>
    return 0;
 80181a4:	2300      	movs	r3, #0
 80181a6:	e010      	b.n	80181ca <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80181a8:	4b0a      	ldr	r3, [pc, #40]	; (80181d4 <sys_timeouts_sleeptime+0x60>)
 80181aa:	681b      	ldr	r3, [r3, #0]
 80181ac:	685a      	ldr	r2, [r3, #4]
 80181ae:	687b      	ldr	r3, [r7, #4]
 80181b0:	1ad3      	subs	r3, r2, r3
 80181b2:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80181b4:	683b      	ldr	r3, [r7, #0]
 80181b6:	2b00      	cmp	r3, #0
 80181b8:	da06      	bge.n	80181c8 <sys_timeouts_sleeptime+0x54>
 80181ba:	4b07      	ldr	r3, [pc, #28]	; (80181d8 <sys_timeouts_sleeptime+0x64>)
 80181bc:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80181c0:	4906      	ldr	r1, [pc, #24]	; (80181dc <sys_timeouts_sleeptime+0x68>)
 80181c2:	4807      	ldr	r0, [pc, #28]	; (80181e0 <sys_timeouts_sleeptime+0x6c>)
 80181c4:	f004 fa8c 	bl	801c6e0 <iprintf>
    return ret;
 80181c8:	683b      	ldr	r3, [r7, #0]
  }
}
 80181ca:	4618      	mov	r0, r3
 80181cc:	3708      	adds	r7, #8
 80181ce:	46bd      	mov	sp, r7
 80181d0:	bd80      	pop	{r7, pc}
 80181d2:	bf00      	nop
 80181d4:	20004734 	.word	0x20004734
 80181d8:	08021474 	.word	0x08021474
 80181dc:	08021548 	.word	0x08021548
 80181e0:	080214e8 	.word	0x080214e8

080181e4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80181e4:	b580      	push	{r7, lr}
 80181e6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80181e8:	f004 fa92 	bl	801c710 <rand>
 80181ec:	4603      	mov	r3, r0
 80181ee:	b29b      	uxth	r3, r3
 80181f0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80181f4:	b29b      	uxth	r3, r3
 80181f6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80181fa:	b29a      	uxth	r2, r3
 80181fc:	4b01      	ldr	r3, [pc, #4]	; (8018204 <udp_init+0x20>)
 80181fe:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8018200:	bf00      	nop
 8018202:	bd80      	pop	{r7, pc}
 8018204:	20000138 	.word	0x20000138

08018208 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8018208:	b480      	push	{r7}
 801820a:	b083      	sub	sp, #12
 801820c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801820e:	2300      	movs	r3, #0
 8018210:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8018212:	4b17      	ldr	r3, [pc, #92]	; (8018270 <udp_new_port+0x68>)
 8018214:	881b      	ldrh	r3, [r3, #0]
 8018216:	1c5a      	adds	r2, r3, #1
 8018218:	b291      	uxth	r1, r2
 801821a:	4a15      	ldr	r2, [pc, #84]	; (8018270 <udp_new_port+0x68>)
 801821c:	8011      	strh	r1, [r2, #0]
 801821e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018222:	4293      	cmp	r3, r2
 8018224:	d103      	bne.n	801822e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8018226:	4b12      	ldr	r3, [pc, #72]	; (8018270 <udp_new_port+0x68>)
 8018228:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801822c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801822e:	4b11      	ldr	r3, [pc, #68]	; (8018274 <udp_new_port+0x6c>)
 8018230:	681b      	ldr	r3, [r3, #0]
 8018232:	603b      	str	r3, [r7, #0]
 8018234:	e011      	b.n	801825a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8018236:	683b      	ldr	r3, [r7, #0]
 8018238:	8a5a      	ldrh	r2, [r3, #18]
 801823a:	4b0d      	ldr	r3, [pc, #52]	; (8018270 <udp_new_port+0x68>)
 801823c:	881b      	ldrh	r3, [r3, #0]
 801823e:	429a      	cmp	r2, r3
 8018240:	d108      	bne.n	8018254 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8018242:	88fb      	ldrh	r3, [r7, #6]
 8018244:	3301      	adds	r3, #1
 8018246:	80fb      	strh	r3, [r7, #6]
 8018248:	88fb      	ldrh	r3, [r7, #6]
 801824a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801824e:	d3e0      	bcc.n	8018212 <udp_new_port+0xa>
        return 0;
 8018250:	2300      	movs	r3, #0
 8018252:	e007      	b.n	8018264 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8018254:	683b      	ldr	r3, [r7, #0]
 8018256:	68db      	ldr	r3, [r3, #12]
 8018258:	603b      	str	r3, [r7, #0]
 801825a:	683b      	ldr	r3, [r7, #0]
 801825c:	2b00      	cmp	r3, #0
 801825e:	d1ea      	bne.n	8018236 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8018260:	4b03      	ldr	r3, [pc, #12]	; (8018270 <udp_new_port+0x68>)
 8018262:	881b      	ldrh	r3, [r3, #0]
}
 8018264:	4618      	mov	r0, r3
 8018266:	370c      	adds	r7, #12
 8018268:	46bd      	mov	sp, r7
 801826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801826e:	4770      	bx	lr
 8018270:	20000138 	.word	0x20000138
 8018274:	2000b634 	.word	0x2000b634

08018278 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8018278:	b580      	push	{r7, lr}
 801827a:	b084      	sub	sp, #16
 801827c:	af00      	add	r7, sp, #0
 801827e:	60f8      	str	r0, [r7, #12]
 8018280:	60b9      	str	r1, [r7, #8]
 8018282:	4613      	mov	r3, r2
 8018284:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8018286:	68fb      	ldr	r3, [r7, #12]
 8018288:	2b00      	cmp	r3, #0
 801828a:	d105      	bne.n	8018298 <udp_input_local_match+0x20>
 801828c:	4b27      	ldr	r3, [pc, #156]	; (801832c <udp_input_local_match+0xb4>)
 801828e:	2287      	movs	r2, #135	; 0x87
 8018290:	4927      	ldr	r1, [pc, #156]	; (8018330 <udp_input_local_match+0xb8>)
 8018292:	4828      	ldr	r0, [pc, #160]	; (8018334 <udp_input_local_match+0xbc>)
 8018294:	f004 fa24 	bl	801c6e0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8018298:	68bb      	ldr	r3, [r7, #8]
 801829a:	2b00      	cmp	r3, #0
 801829c:	d105      	bne.n	80182aa <udp_input_local_match+0x32>
 801829e:	4b23      	ldr	r3, [pc, #140]	; (801832c <udp_input_local_match+0xb4>)
 80182a0:	2288      	movs	r2, #136	; 0x88
 80182a2:	4925      	ldr	r1, [pc, #148]	; (8018338 <udp_input_local_match+0xc0>)
 80182a4:	4823      	ldr	r0, [pc, #140]	; (8018334 <udp_input_local_match+0xbc>)
 80182a6:	f004 fa1b 	bl	801c6e0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80182aa:	68fb      	ldr	r3, [r7, #12]
 80182ac:	7a1b      	ldrb	r3, [r3, #8]
 80182ae:	2b00      	cmp	r3, #0
 80182b0:	d00b      	beq.n	80182ca <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80182b2:	68fb      	ldr	r3, [r7, #12]
 80182b4:	7a1a      	ldrb	r2, [r3, #8]
 80182b6:	4b21      	ldr	r3, [pc, #132]	; (801833c <udp_input_local_match+0xc4>)
 80182b8:	685b      	ldr	r3, [r3, #4]
 80182ba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80182be:	3301      	adds	r3, #1
 80182c0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80182c2:	429a      	cmp	r2, r3
 80182c4:	d001      	beq.n	80182ca <udp_input_local_match+0x52>
    return 0;
 80182c6:	2300      	movs	r3, #0
 80182c8:	e02b      	b.n	8018322 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80182ca:	79fb      	ldrb	r3, [r7, #7]
 80182cc:	2b00      	cmp	r3, #0
 80182ce:	d018      	beq.n	8018302 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80182d0:	68fb      	ldr	r3, [r7, #12]
 80182d2:	2b00      	cmp	r3, #0
 80182d4:	d013      	beq.n	80182fe <udp_input_local_match+0x86>
 80182d6:	68fb      	ldr	r3, [r7, #12]
 80182d8:	681b      	ldr	r3, [r3, #0]
 80182da:	2b00      	cmp	r3, #0
 80182dc:	d00f      	beq.n	80182fe <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80182de:	4b17      	ldr	r3, [pc, #92]	; (801833c <udp_input_local_match+0xc4>)
 80182e0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80182e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80182e6:	d00a      	beq.n	80182fe <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80182e8:	68fb      	ldr	r3, [r7, #12]
 80182ea:	681a      	ldr	r2, [r3, #0]
 80182ec:	4b13      	ldr	r3, [pc, #76]	; (801833c <udp_input_local_match+0xc4>)
 80182ee:	695b      	ldr	r3, [r3, #20]
 80182f0:	405a      	eors	r2, r3
 80182f2:	68bb      	ldr	r3, [r7, #8]
 80182f4:	3308      	adds	r3, #8
 80182f6:	681b      	ldr	r3, [r3, #0]
 80182f8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80182fa:	2b00      	cmp	r3, #0
 80182fc:	d110      	bne.n	8018320 <udp_input_local_match+0xa8>
          return 1;
 80182fe:	2301      	movs	r3, #1
 8018300:	e00f      	b.n	8018322 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8018302:	68fb      	ldr	r3, [r7, #12]
 8018304:	2b00      	cmp	r3, #0
 8018306:	d009      	beq.n	801831c <udp_input_local_match+0xa4>
 8018308:	68fb      	ldr	r3, [r7, #12]
 801830a:	681b      	ldr	r3, [r3, #0]
 801830c:	2b00      	cmp	r3, #0
 801830e:	d005      	beq.n	801831c <udp_input_local_match+0xa4>
 8018310:	68fb      	ldr	r3, [r7, #12]
 8018312:	681a      	ldr	r2, [r3, #0]
 8018314:	4b09      	ldr	r3, [pc, #36]	; (801833c <udp_input_local_match+0xc4>)
 8018316:	695b      	ldr	r3, [r3, #20]
 8018318:	429a      	cmp	r2, r3
 801831a:	d101      	bne.n	8018320 <udp_input_local_match+0xa8>
        return 1;
 801831c:	2301      	movs	r3, #1
 801831e:	e000      	b.n	8018322 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8018320:	2300      	movs	r3, #0
}
 8018322:	4618      	mov	r0, r3
 8018324:	3710      	adds	r7, #16
 8018326:	46bd      	mov	sp, r7
 8018328:	bd80      	pop	{r7, pc}
 801832a:	bf00      	nop
 801832c:	0802155c 	.word	0x0802155c
 8018330:	0802158c 	.word	0x0802158c
 8018334:	080215b0 	.word	0x080215b0
 8018338:	080215d8 	.word	0x080215d8
 801833c:	20007f08 	.word	0x20007f08

08018340 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8018340:	b590      	push	{r4, r7, lr}
 8018342:	b08d      	sub	sp, #52	; 0x34
 8018344:	af02      	add	r7, sp, #8
 8018346:	6078      	str	r0, [r7, #4]
 8018348:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801834a:	2300      	movs	r3, #0
 801834c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801834e:	687b      	ldr	r3, [r7, #4]
 8018350:	2b00      	cmp	r3, #0
 8018352:	d105      	bne.n	8018360 <udp_input+0x20>
 8018354:	4b7c      	ldr	r3, [pc, #496]	; (8018548 <udp_input+0x208>)
 8018356:	22cf      	movs	r2, #207	; 0xcf
 8018358:	497c      	ldr	r1, [pc, #496]	; (801854c <udp_input+0x20c>)
 801835a:	487d      	ldr	r0, [pc, #500]	; (8018550 <udp_input+0x210>)
 801835c:	f004 f9c0 	bl	801c6e0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8018360:	683b      	ldr	r3, [r7, #0]
 8018362:	2b00      	cmp	r3, #0
 8018364:	d105      	bne.n	8018372 <udp_input+0x32>
 8018366:	4b78      	ldr	r3, [pc, #480]	; (8018548 <udp_input+0x208>)
 8018368:	22d0      	movs	r2, #208	; 0xd0
 801836a:	497a      	ldr	r1, [pc, #488]	; (8018554 <udp_input+0x214>)
 801836c:	4878      	ldr	r0, [pc, #480]	; (8018550 <udp_input+0x210>)
 801836e:	f004 f9b7 	bl	801c6e0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8018372:	687b      	ldr	r3, [r7, #4]
 8018374:	895b      	ldrh	r3, [r3, #10]
 8018376:	2b07      	cmp	r3, #7
 8018378:	d803      	bhi.n	8018382 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801837a:	6878      	ldr	r0, [r7, #4]
 801837c:	f7f9 fa5c 	bl	8011838 <pbuf_free>
    goto end;
 8018380:	e0de      	b.n	8018540 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8018382:	687b      	ldr	r3, [r7, #4]
 8018384:	685b      	ldr	r3, [r3, #4]
 8018386:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8018388:	4b73      	ldr	r3, [pc, #460]	; (8018558 <udp_input+0x218>)
 801838a:	695b      	ldr	r3, [r3, #20]
 801838c:	4a72      	ldr	r2, [pc, #456]	; (8018558 <udp_input+0x218>)
 801838e:	6812      	ldr	r2, [r2, #0]
 8018390:	4611      	mov	r1, r2
 8018392:	4618      	mov	r0, r3
 8018394:	f001 ff80 	bl	801a298 <ip4_addr_isbroadcast_u32>
 8018398:	4603      	mov	r3, r0
 801839a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801839c:	697b      	ldr	r3, [r7, #20]
 801839e:	881b      	ldrh	r3, [r3, #0]
 80183a0:	b29b      	uxth	r3, r3
 80183a2:	4618      	mov	r0, r3
 80183a4:	f7f7 fe8c 	bl	80100c0 <lwip_htons>
 80183a8:	4603      	mov	r3, r0
 80183aa:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80183ac:	697b      	ldr	r3, [r7, #20]
 80183ae:	885b      	ldrh	r3, [r3, #2]
 80183b0:	b29b      	uxth	r3, r3
 80183b2:	4618      	mov	r0, r3
 80183b4:	f7f7 fe84 	bl	80100c0 <lwip_htons>
 80183b8:	4603      	mov	r3, r0
 80183ba:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80183bc:	2300      	movs	r3, #0
 80183be:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80183c0:	2300      	movs	r3, #0
 80183c2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80183c4:	2300      	movs	r3, #0
 80183c6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80183c8:	4b64      	ldr	r3, [pc, #400]	; (801855c <udp_input+0x21c>)
 80183ca:	681b      	ldr	r3, [r3, #0]
 80183cc:	627b      	str	r3, [r7, #36]	; 0x24
 80183ce:	e054      	b.n	801847a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80183d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183d2:	8a5b      	ldrh	r3, [r3, #18]
 80183d4:	89fa      	ldrh	r2, [r7, #14]
 80183d6:	429a      	cmp	r2, r3
 80183d8:	d14a      	bne.n	8018470 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80183da:	7cfb      	ldrb	r3, [r7, #19]
 80183dc:	461a      	mov	r2, r3
 80183de:	6839      	ldr	r1, [r7, #0]
 80183e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80183e2:	f7ff ff49 	bl	8018278 <udp_input_local_match>
 80183e6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80183e8:	2b00      	cmp	r3, #0
 80183ea:	d041      	beq.n	8018470 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80183ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183ee:	7c1b      	ldrb	r3, [r3, #16]
 80183f0:	f003 0304 	and.w	r3, r3, #4
 80183f4:	2b00      	cmp	r3, #0
 80183f6:	d11d      	bne.n	8018434 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80183f8:	69fb      	ldr	r3, [r7, #28]
 80183fa:	2b00      	cmp	r3, #0
 80183fc:	d102      	bne.n	8018404 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80183fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018400:	61fb      	str	r3, [r7, #28]
 8018402:	e017      	b.n	8018434 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8018404:	7cfb      	ldrb	r3, [r7, #19]
 8018406:	2b00      	cmp	r3, #0
 8018408:	d014      	beq.n	8018434 <udp_input+0xf4>
 801840a:	4b53      	ldr	r3, [pc, #332]	; (8018558 <udp_input+0x218>)
 801840c:	695b      	ldr	r3, [r3, #20]
 801840e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018412:	d10f      	bne.n	8018434 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8018414:	69fb      	ldr	r3, [r7, #28]
 8018416:	681a      	ldr	r2, [r3, #0]
 8018418:	683b      	ldr	r3, [r7, #0]
 801841a:	3304      	adds	r3, #4
 801841c:	681b      	ldr	r3, [r3, #0]
 801841e:	429a      	cmp	r2, r3
 8018420:	d008      	beq.n	8018434 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8018422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018424:	681a      	ldr	r2, [r3, #0]
 8018426:	683b      	ldr	r3, [r7, #0]
 8018428:	3304      	adds	r3, #4
 801842a:	681b      	ldr	r3, [r3, #0]
 801842c:	429a      	cmp	r2, r3
 801842e:	d101      	bne.n	8018434 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8018430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018432:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8018434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018436:	8a9b      	ldrh	r3, [r3, #20]
 8018438:	8a3a      	ldrh	r2, [r7, #16]
 801843a:	429a      	cmp	r2, r3
 801843c:	d118      	bne.n	8018470 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801843e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018440:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8018442:	2b00      	cmp	r3, #0
 8018444:	d005      	beq.n	8018452 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8018446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018448:	685a      	ldr	r2, [r3, #4]
 801844a:	4b43      	ldr	r3, [pc, #268]	; (8018558 <udp_input+0x218>)
 801844c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801844e:	429a      	cmp	r2, r3
 8018450:	d10e      	bne.n	8018470 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8018452:	6a3b      	ldr	r3, [r7, #32]
 8018454:	2b00      	cmp	r3, #0
 8018456:	d014      	beq.n	8018482 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8018458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801845a:	68da      	ldr	r2, [r3, #12]
 801845c:	6a3b      	ldr	r3, [r7, #32]
 801845e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8018460:	4b3e      	ldr	r3, [pc, #248]	; (801855c <udp_input+0x21c>)
 8018462:	681a      	ldr	r2, [r3, #0]
 8018464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018466:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8018468:	4a3c      	ldr	r2, [pc, #240]	; (801855c <udp_input+0x21c>)
 801846a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801846c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801846e:	e008      	b.n	8018482 <udp_input+0x142>
      }
    }

    prev = pcb;
 8018470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018472:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8018474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018476:	68db      	ldr	r3, [r3, #12]
 8018478:	627b      	str	r3, [r7, #36]	; 0x24
 801847a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801847c:	2b00      	cmp	r3, #0
 801847e:	d1a7      	bne.n	80183d0 <udp_input+0x90>
 8018480:	e000      	b.n	8018484 <udp_input+0x144>
        break;
 8018482:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8018484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018486:	2b00      	cmp	r3, #0
 8018488:	d101      	bne.n	801848e <udp_input+0x14e>
    pcb = uncon_pcb;
 801848a:	69fb      	ldr	r3, [r7, #28]
 801848c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801848e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018490:	2b00      	cmp	r3, #0
 8018492:	d002      	beq.n	801849a <udp_input+0x15a>
    for_us = 1;
 8018494:	2301      	movs	r3, #1
 8018496:	76fb      	strb	r3, [r7, #27]
 8018498:	e00a      	b.n	80184b0 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801849a:	683b      	ldr	r3, [r7, #0]
 801849c:	3304      	adds	r3, #4
 801849e:	681a      	ldr	r2, [r3, #0]
 80184a0:	4b2d      	ldr	r3, [pc, #180]	; (8018558 <udp_input+0x218>)
 80184a2:	695b      	ldr	r3, [r3, #20]
 80184a4:	429a      	cmp	r2, r3
 80184a6:	bf0c      	ite	eq
 80184a8:	2301      	moveq	r3, #1
 80184aa:	2300      	movne	r3, #0
 80184ac:	b2db      	uxtb	r3, r3
 80184ae:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80184b0:	7efb      	ldrb	r3, [r7, #27]
 80184b2:	2b00      	cmp	r3, #0
 80184b4:	d041      	beq.n	801853a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80184b6:	2108      	movs	r1, #8
 80184b8:	6878      	ldr	r0, [r7, #4]
 80184ba:	f7f9 f937 	bl	801172c <pbuf_remove_header>
 80184be:	4603      	mov	r3, r0
 80184c0:	2b00      	cmp	r3, #0
 80184c2:	d00a      	beq.n	80184da <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80184c4:	4b20      	ldr	r3, [pc, #128]	; (8018548 <udp_input+0x208>)
 80184c6:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80184ca:	4925      	ldr	r1, [pc, #148]	; (8018560 <udp_input+0x220>)
 80184cc:	4820      	ldr	r0, [pc, #128]	; (8018550 <udp_input+0x210>)
 80184ce:	f004 f907 	bl	801c6e0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80184d2:	6878      	ldr	r0, [r7, #4]
 80184d4:	f7f9 f9b0 	bl	8011838 <pbuf_free>
      goto end;
 80184d8:	e032      	b.n	8018540 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80184da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184dc:	2b00      	cmp	r3, #0
 80184de:	d012      	beq.n	8018506 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80184e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184e2:	699b      	ldr	r3, [r3, #24]
 80184e4:	2b00      	cmp	r3, #0
 80184e6:	d00a      	beq.n	80184fe <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80184e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184ea:	699c      	ldr	r4, [r3, #24]
 80184ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184ee:	69d8      	ldr	r0, [r3, #28]
 80184f0:	8a3b      	ldrh	r3, [r7, #16]
 80184f2:	9300      	str	r3, [sp, #0]
 80184f4:	4b1b      	ldr	r3, [pc, #108]	; (8018564 <udp_input+0x224>)
 80184f6:	687a      	ldr	r2, [r7, #4]
 80184f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80184fa:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80184fc:	e021      	b.n	8018542 <udp_input+0x202>
        pbuf_free(p);
 80184fe:	6878      	ldr	r0, [r7, #4]
 8018500:	f7f9 f99a 	bl	8011838 <pbuf_free>
        goto end;
 8018504:	e01c      	b.n	8018540 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8018506:	7cfb      	ldrb	r3, [r7, #19]
 8018508:	2b00      	cmp	r3, #0
 801850a:	d112      	bne.n	8018532 <udp_input+0x1f2>
 801850c:	4b12      	ldr	r3, [pc, #72]	; (8018558 <udp_input+0x218>)
 801850e:	695b      	ldr	r3, [r3, #20]
 8018510:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018514:	2be0      	cmp	r3, #224	; 0xe0
 8018516:	d00c      	beq.n	8018532 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8018518:	4b0f      	ldr	r3, [pc, #60]	; (8018558 <udp_input+0x218>)
 801851a:	899b      	ldrh	r3, [r3, #12]
 801851c:	3308      	adds	r3, #8
 801851e:	b29b      	uxth	r3, r3
 8018520:	b21b      	sxth	r3, r3
 8018522:	4619      	mov	r1, r3
 8018524:	6878      	ldr	r0, [r7, #4]
 8018526:	f7f9 f974 	bl	8011812 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801852a:	2103      	movs	r1, #3
 801852c:	6878      	ldr	r0, [r7, #4]
 801852e:	f001 fb93 	bl	8019c58 <icmp_dest_unreach>
      pbuf_free(p);
 8018532:	6878      	ldr	r0, [r7, #4]
 8018534:	f7f9 f980 	bl	8011838 <pbuf_free>
  return;
 8018538:	e003      	b.n	8018542 <udp_input+0x202>
    pbuf_free(p);
 801853a:	6878      	ldr	r0, [r7, #4]
 801853c:	f7f9 f97c 	bl	8011838 <pbuf_free>
  return;
 8018540:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8018542:	372c      	adds	r7, #44	; 0x2c
 8018544:	46bd      	mov	sp, r7
 8018546:	bd90      	pop	{r4, r7, pc}
 8018548:	0802155c 	.word	0x0802155c
 801854c:	08021600 	.word	0x08021600
 8018550:	080215b0 	.word	0x080215b0
 8018554:	08021618 	.word	0x08021618
 8018558:	20007f08 	.word	0x20007f08
 801855c:	2000b634 	.word	0x2000b634
 8018560:	08021634 	.word	0x08021634
 8018564:	20007f18 	.word	0x20007f18

08018568 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8018568:	b580      	push	{r7, lr}
 801856a:	b082      	sub	sp, #8
 801856c:	af00      	add	r7, sp, #0
 801856e:	6078      	str	r0, [r7, #4]
 8018570:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8018572:	687b      	ldr	r3, [r7, #4]
 8018574:	2b00      	cmp	r3, #0
 8018576:	d109      	bne.n	801858c <udp_send+0x24>
 8018578:	4b11      	ldr	r3, [pc, #68]	; (80185c0 <udp_send+0x58>)
 801857a:	f240 12d5 	movw	r2, #469	; 0x1d5
 801857e:	4911      	ldr	r1, [pc, #68]	; (80185c4 <udp_send+0x5c>)
 8018580:	4811      	ldr	r0, [pc, #68]	; (80185c8 <udp_send+0x60>)
 8018582:	f004 f8ad 	bl	801c6e0 <iprintf>
 8018586:	f06f 030f 	mvn.w	r3, #15
 801858a:	e015      	b.n	80185b8 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 801858c:	683b      	ldr	r3, [r7, #0]
 801858e:	2b00      	cmp	r3, #0
 8018590:	d109      	bne.n	80185a6 <udp_send+0x3e>
 8018592:	4b0b      	ldr	r3, [pc, #44]	; (80185c0 <udp_send+0x58>)
 8018594:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8018598:	490c      	ldr	r1, [pc, #48]	; (80185cc <udp_send+0x64>)
 801859a:	480b      	ldr	r0, [pc, #44]	; (80185c8 <udp_send+0x60>)
 801859c:	f004 f8a0 	bl	801c6e0 <iprintf>
 80185a0:	f06f 030f 	mvn.w	r3, #15
 80185a4:	e008      	b.n	80185b8 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 80185a6:	687b      	ldr	r3, [r7, #4]
 80185a8:	1d1a      	adds	r2, r3, #4
 80185aa:	687b      	ldr	r3, [r7, #4]
 80185ac:	8a9b      	ldrh	r3, [r3, #20]
 80185ae:	6839      	ldr	r1, [r7, #0]
 80185b0:	6878      	ldr	r0, [r7, #4]
 80185b2:	f000 f80d 	bl	80185d0 <udp_sendto>
 80185b6:	4603      	mov	r3, r0
}
 80185b8:	4618      	mov	r0, r3
 80185ba:	3708      	adds	r7, #8
 80185bc:	46bd      	mov	sp, r7
 80185be:	bd80      	pop	{r7, pc}
 80185c0:	0802155c 	.word	0x0802155c
 80185c4:	08021650 	.word	0x08021650
 80185c8:	080215b0 	.word	0x080215b0
 80185cc:	08021668 	.word	0x08021668

080185d0 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 80185d0:	b580      	push	{r7, lr}
 80185d2:	b088      	sub	sp, #32
 80185d4:	af02      	add	r7, sp, #8
 80185d6:	60f8      	str	r0, [r7, #12]
 80185d8:	60b9      	str	r1, [r7, #8]
 80185da:	607a      	str	r2, [r7, #4]
 80185dc:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 80185de:	68fb      	ldr	r3, [r7, #12]
 80185e0:	2b00      	cmp	r3, #0
 80185e2:	d109      	bne.n	80185f8 <udp_sendto+0x28>
 80185e4:	4b23      	ldr	r3, [pc, #140]	; (8018674 <udp_sendto+0xa4>)
 80185e6:	f44f 7206 	mov.w	r2, #536	; 0x218
 80185ea:	4923      	ldr	r1, [pc, #140]	; (8018678 <udp_sendto+0xa8>)
 80185ec:	4823      	ldr	r0, [pc, #140]	; (801867c <udp_sendto+0xac>)
 80185ee:	f004 f877 	bl	801c6e0 <iprintf>
 80185f2:	f06f 030f 	mvn.w	r3, #15
 80185f6:	e038      	b.n	801866a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 80185f8:	68bb      	ldr	r3, [r7, #8]
 80185fa:	2b00      	cmp	r3, #0
 80185fc:	d109      	bne.n	8018612 <udp_sendto+0x42>
 80185fe:	4b1d      	ldr	r3, [pc, #116]	; (8018674 <udp_sendto+0xa4>)
 8018600:	f240 2219 	movw	r2, #537	; 0x219
 8018604:	491e      	ldr	r1, [pc, #120]	; (8018680 <udp_sendto+0xb0>)
 8018606:	481d      	ldr	r0, [pc, #116]	; (801867c <udp_sendto+0xac>)
 8018608:	f004 f86a 	bl	801c6e0 <iprintf>
 801860c:	f06f 030f 	mvn.w	r3, #15
 8018610:	e02b      	b.n	801866a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8018612:	687b      	ldr	r3, [r7, #4]
 8018614:	2b00      	cmp	r3, #0
 8018616:	d109      	bne.n	801862c <udp_sendto+0x5c>
 8018618:	4b16      	ldr	r3, [pc, #88]	; (8018674 <udp_sendto+0xa4>)
 801861a:	f240 221a 	movw	r2, #538	; 0x21a
 801861e:	4919      	ldr	r1, [pc, #100]	; (8018684 <udp_sendto+0xb4>)
 8018620:	4816      	ldr	r0, [pc, #88]	; (801867c <udp_sendto+0xac>)
 8018622:	f004 f85d 	bl	801c6e0 <iprintf>
 8018626:	f06f 030f 	mvn.w	r3, #15
 801862a:	e01e      	b.n	801866a <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801862c:	68fb      	ldr	r3, [r7, #12]
 801862e:	7a1b      	ldrb	r3, [r3, #8]
 8018630:	2b00      	cmp	r3, #0
 8018632:	d006      	beq.n	8018642 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8018634:	68fb      	ldr	r3, [r7, #12]
 8018636:	7a1b      	ldrb	r3, [r3, #8]
 8018638:	4618      	mov	r0, r3
 801863a:	f7f8 fd6f 	bl	801111c <netif_get_by_index>
 801863e:	6178      	str	r0, [r7, #20]
 8018640:	e003      	b.n	801864a <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8018642:	6878      	ldr	r0, [r7, #4]
 8018644:	f001 fb92 	bl	8019d6c <ip4_route>
 8018648:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801864a:	697b      	ldr	r3, [r7, #20]
 801864c:	2b00      	cmp	r3, #0
 801864e:	d102      	bne.n	8018656 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8018650:	f06f 0303 	mvn.w	r3, #3
 8018654:	e009      	b.n	801866a <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8018656:	887a      	ldrh	r2, [r7, #2]
 8018658:	697b      	ldr	r3, [r7, #20]
 801865a:	9300      	str	r3, [sp, #0]
 801865c:	4613      	mov	r3, r2
 801865e:	687a      	ldr	r2, [r7, #4]
 8018660:	68b9      	ldr	r1, [r7, #8]
 8018662:	68f8      	ldr	r0, [r7, #12]
 8018664:	f000 f810 	bl	8018688 <udp_sendto_if>
 8018668:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801866a:	4618      	mov	r0, r3
 801866c:	3718      	adds	r7, #24
 801866e:	46bd      	mov	sp, r7
 8018670:	bd80      	pop	{r7, pc}
 8018672:	bf00      	nop
 8018674:	0802155c 	.word	0x0802155c
 8018678:	08021680 	.word	0x08021680
 801867c:	080215b0 	.word	0x080215b0
 8018680:	08021698 	.word	0x08021698
 8018684:	080216b4 	.word	0x080216b4

08018688 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8018688:	b580      	push	{r7, lr}
 801868a:	b088      	sub	sp, #32
 801868c:	af02      	add	r7, sp, #8
 801868e:	60f8      	str	r0, [r7, #12]
 8018690:	60b9      	str	r1, [r7, #8]
 8018692:	607a      	str	r2, [r7, #4]
 8018694:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8018696:	68fb      	ldr	r3, [r7, #12]
 8018698:	2b00      	cmp	r3, #0
 801869a:	d109      	bne.n	80186b0 <udp_sendto_if+0x28>
 801869c:	4b2e      	ldr	r3, [pc, #184]	; (8018758 <udp_sendto_if+0xd0>)
 801869e:	f44f 7220 	mov.w	r2, #640	; 0x280
 80186a2:	492e      	ldr	r1, [pc, #184]	; (801875c <udp_sendto_if+0xd4>)
 80186a4:	482e      	ldr	r0, [pc, #184]	; (8018760 <udp_sendto_if+0xd8>)
 80186a6:	f004 f81b 	bl	801c6e0 <iprintf>
 80186aa:	f06f 030f 	mvn.w	r3, #15
 80186ae:	e04f      	b.n	8018750 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80186b0:	68bb      	ldr	r3, [r7, #8]
 80186b2:	2b00      	cmp	r3, #0
 80186b4:	d109      	bne.n	80186ca <udp_sendto_if+0x42>
 80186b6:	4b28      	ldr	r3, [pc, #160]	; (8018758 <udp_sendto_if+0xd0>)
 80186b8:	f240 2281 	movw	r2, #641	; 0x281
 80186bc:	4929      	ldr	r1, [pc, #164]	; (8018764 <udp_sendto_if+0xdc>)
 80186be:	4828      	ldr	r0, [pc, #160]	; (8018760 <udp_sendto_if+0xd8>)
 80186c0:	f004 f80e 	bl	801c6e0 <iprintf>
 80186c4:	f06f 030f 	mvn.w	r3, #15
 80186c8:	e042      	b.n	8018750 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80186ca:	687b      	ldr	r3, [r7, #4]
 80186cc:	2b00      	cmp	r3, #0
 80186ce:	d109      	bne.n	80186e4 <udp_sendto_if+0x5c>
 80186d0:	4b21      	ldr	r3, [pc, #132]	; (8018758 <udp_sendto_if+0xd0>)
 80186d2:	f240 2282 	movw	r2, #642	; 0x282
 80186d6:	4924      	ldr	r1, [pc, #144]	; (8018768 <udp_sendto_if+0xe0>)
 80186d8:	4821      	ldr	r0, [pc, #132]	; (8018760 <udp_sendto_if+0xd8>)
 80186da:	f004 f801 	bl	801c6e0 <iprintf>
 80186de:	f06f 030f 	mvn.w	r3, #15
 80186e2:	e035      	b.n	8018750 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80186e4:	6a3b      	ldr	r3, [r7, #32]
 80186e6:	2b00      	cmp	r3, #0
 80186e8:	d109      	bne.n	80186fe <udp_sendto_if+0x76>
 80186ea:	4b1b      	ldr	r3, [pc, #108]	; (8018758 <udp_sendto_if+0xd0>)
 80186ec:	f240 2283 	movw	r2, #643	; 0x283
 80186f0:	491e      	ldr	r1, [pc, #120]	; (801876c <udp_sendto_if+0xe4>)
 80186f2:	481b      	ldr	r0, [pc, #108]	; (8018760 <udp_sendto_if+0xd8>)
 80186f4:	f003 fff4 	bl	801c6e0 <iprintf>
 80186f8:	f06f 030f 	mvn.w	r3, #15
 80186fc:	e028      	b.n	8018750 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80186fe:	68fb      	ldr	r3, [r7, #12]
 8018700:	2b00      	cmp	r3, #0
 8018702:	d009      	beq.n	8018718 <udp_sendto_if+0x90>
 8018704:	68fb      	ldr	r3, [r7, #12]
 8018706:	681b      	ldr	r3, [r3, #0]
 8018708:	2b00      	cmp	r3, #0
 801870a:	d005      	beq.n	8018718 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801870c:	68fb      	ldr	r3, [r7, #12]
 801870e:	681b      	ldr	r3, [r3, #0]
 8018710:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8018714:	2be0      	cmp	r3, #224	; 0xe0
 8018716:	d103      	bne.n	8018720 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8018718:	6a3b      	ldr	r3, [r7, #32]
 801871a:	3304      	adds	r3, #4
 801871c:	617b      	str	r3, [r7, #20]
 801871e:	e00b      	b.n	8018738 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8018720:	68fb      	ldr	r3, [r7, #12]
 8018722:	681a      	ldr	r2, [r3, #0]
 8018724:	6a3b      	ldr	r3, [r7, #32]
 8018726:	3304      	adds	r3, #4
 8018728:	681b      	ldr	r3, [r3, #0]
 801872a:	429a      	cmp	r2, r3
 801872c:	d002      	beq.n	8018734 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801872e:	f06f 0303 	mvn.w	r3, #3
 8018732:	e00d      	b.n	8018750 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8018734:	68fb      	ldr	r3, [r7, #12]
 8018736:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8018738:	887a      	ldrh	r2, [r7, #2]
 801873a:	697b      	ldr	r3, [r7, #20]
 801873c:	9301      	str	r3, [sp, #4]
 801873e:	6a3b      	ldr	r3, [r7, #32]
 8018740:	9300      	str	r3, [sp, #0]
 8018742:	4613      	mov	r3, r2
 8018744:	687a      	ldr	r2, [r7, #4]
 8018746:	68b9      	ldr	r1, [r7, #8]
 8018748:	68f8      	ldr	r0, [r7, #12]
 801874a:	f000 f811 	bl	8018770 <udp_sendto_if_src>
 801874e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8018750:	4618      	mov	r0, r3
 8018752:	3718      	adds	r7, #24
 8018754:	46bd      	mov	sp, r7
 8018756:	bd80      	pop	{r7, pc}
 8018758:	0802155c 	.word	0x0802155c
 801875c:	080216d0 	.word	0x080216d0
 8018760:	080215b0 	.word	0x080215b0
 8018764:	080216ec 	.word	0x080216ec
 8018768:	08021708 	.word	0x08021708
 801876c:	08021728 	.word	0x08021728

08018770 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8018770:	b580      	push	{r7, lr}
 8018772:	b08c      	sub	sp, #48	; 0x30
 8018774:	af04      	add	r7, sp, #16
 8018776:	60f8      	str	r0, [r7, #12]
 8018778:	60b9      	str	r1, [r7, #8]
 801877a:	607a      	str	r2, [r7, #4]
 801877c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801877e:	68fb      	ldr	r3, [r7, #12]
 8018780:	2b00      	cmp	r3, #0
 8018782:	d109      	bne.n	8018798 <udp_sendto_if_src+0x28>
 8018784:	4b65      	ldr	r3, [pc, #404]	; (801891c <udp_sendto_if_src+0x1ac>)
 8018786:	f240 22d1 	movw	r2, #721	; 0x2d1
 801878a:	4965      	ldr	r1, [pc, #404]	; (8018920 <udp_sendto_if_src+0x1b0>)
 801878c:	4865      	ldr	r0, [pc, #404]	; (8018924 <udp_sendto_if_src+0x1b4>)
 801878e:	f003 ffa7 	bl	801c6e0 <iprintf>
 8018792:	f06f 030f 	mvn.w	r3, #15
 8018796:	e0bc      	b.n	8018912 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8018798:	68bb      	ldr	r3, [r7, #8]
 801879a:	2b00      	cmp	r3, #0
 801879c:	d109      	bne.n	80187b2 <udp_sendto_if_src+0x42>
 801879e:	4b5f      	ldr	r3, [pc, #380]	; (801891c <udp_sendto_if_src+0x1ac>)
 80187a0:	f240 22d2 	movw	r2, #722	; 0x2d2
 80187a4:	4960      	ldr	r1, [pc, #384]	; (8018928 <udp_sendto_if_src+0x1b8>)
 80187a6:	485f      	ldr	r0, [pc, #380]	; (8018924 <udp_sendto_if_src+0x1b4>)
 80187a8:	f003 ff9a 	bl	801c6e0 <iprintf>
 80187ac:	f06f 030f 	mvn.w	r3, #15
 80187b0:	e0af      	b.n	8018912 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80187b2:	687b      	ldr	r3, [r7, #4]
 80187b4:	2b00      	cmp	r3, #0
 80187b6:	d109      	bne.n	80187cc <udp_sendto_if_src+0x5c>
 80187b8:	4b58      	ldr	r3, [pc, #352]	; (801891c <udp_sendto_if_src+0x1ac>)
 80187ba:	f240 22d3 	movw	r2, #723	; 0x2d3
 80187be:	495b      	ldr	r1, [pc, #364]	; (801892c <udp_sendto_if_src+0x1bc>)
 80187c0:	4858      	ldr	r0, [pc, #352]	; (8018924 <udp_sendto_if_src+0x1b4>)
 80187c2:	f003 ff8d 	bl	801c6e0 <iprintf>
 80187c6:	f06f 030f 	mvn.w	r3, #15
 80187ca:	e0a2      	b.n	8018912 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80187cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187ce:	2b00      	cmp	r3, #0
 80187d0:	d109      	bne.n	80187e6 <udp_sendto_if_src+0x76>
 80187d2:	4b52      	ldr	r3, [pc, #328]	; (801891c <udp_sendto_if_src+0x1ac>)
 80187d4:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80187d8:	4955      	ldr	r1, [pc, #340]	; (8018930 <udp_sendto_if_src+0x1c0>)
 80187da:	4852      	ldr	r0, [pc, #328]	; (8018924 <udp_sendto_if_src+0x1b4>)
 80187dc:	f003 ff80 	bl	801c6e0 <iprintf>
 80187e0:	f06f 030f 	mvn.w	r3, #15
 80187e4:	e095      	b.n	8018912 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80187e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187e8:	2b00      	cmp	r3, #0
 80187ea:	d109      	bne.n	8018800 <udp_sendto_if_src+0x90>
 80187ec:	4b4b      	ldr	r3, [pc, #300]	; (801891c <udp_sendto_if_src+0x1ac>)
 80187ee:	f240 22d5 	movw	r2, #725	; 0x2d5
 80187f2:	4950      	ldr	r1, [pc, #320]	; (8018934 <udp_sendto_if_src+0x1c4>)
 80187f4:	484b      	ldr	r0, [pc, #300]	; (8018924 <udp_sendto_if_src+0x1b4>)
 80187f6:	f003 ff73 	bl	801c6e0 <iprintf>
 80187fa:	f06f 030f 	mvn.w	r3, #15
 80187fe:	e088      	b.n	8018912 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8018800:	68fb      	ldr	r3, [r7, #12]
 8018802:	8a5b      	ldrh	r3, [r3, #18]
 8018804:	2b00      	cmp	r3, #0
 8018806:	d10f      	bne.n	8018828 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8018808:	68f9      	ldr	r1, [r7, #12]
 801880a:	68fb      	ldr	r3, [r7, #12]
 801880c:	8a5b      	ldrh	r3, [r3, #18]
 801880e:	461a      	mov	r2, r3
 8018810:	68f8      	ldr	r0, [r7, #12]
 8018812:	f000 f893 	bl	801893c <udp_bind>
 8018816:	4603      	mov	r3, r0
 8018818:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801881a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801881e:	2b00      	cmp	r3, #0
 8018820:	d002      	beq.n	8018828 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8018822:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8018826:	e074      	b.n	8018912 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8018828:	68bb      	ldr	r3, [r7, #8]
 801882a:	891b      	ldrh	r3, [r3, #8]
 801882c:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8018830:	4293      	cmp	r3, r2
 8018832:	d902      	bls.n	801883a <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8018834:	f04f 33ff 	mov.w	r3, #4294967295
 8018838:	e06b      	b.n	8018912 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801883a:	2108      	movs	r1, #8
 801883c:	68b8      	ldr	r0, [r7, #8]
 801883e:	f7f8 ff65 	bl	801170c <pbuf_add_header>
 8018842:	4603      	mov	r3, r0
 8018844:	2b00      	cmp	r3, #0
 8018846:	d015      	beq.n	8018874 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8018848:	f44f 7220 	mov.w	r2, #640	; 0x280
 801884c:	2108      	movs	r1, #8
 801884e:	2022      	movs	r0, #34	; 0x22
 8018850:	f7f8 fd0e 	bl	8011270 <pbuf_alloc>
 8018854:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8018856:	69fb      	ldr	r3, [r7, #28]
 8018858:	2b00      	cmp	r3, #0
 801885a:	d102      	bne.n	8018862 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801885c:	f04f 33ff 	mov.w	r3, #4294967295
 8018860:	e057      	b.n	8018912 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8018862:	68bb      	ldr	r3, [r7, #8]
 8018864:	891b      	ldrh	r3, [r3, #8]
 8018866:	2b00      	cmp	r3, #0
 8018868:	d006      	beq.n	8018878 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801886a:	68b9      	ldr	r1, [r7, #8]
 801886c:	69f8      	ldr	r0, [r7, #28]
 801886e:	f7f9 f907 	bl	8011a80 <pbuf_chain>
 8018872:	e001      	b.n	8018878 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8018874:	68bb      	ldr	r3, [r7, #8]
 8018876:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8018878:	69fb      	ldr	r3, [r7, #28]
 801887a:	895b      	ldrh	r3, [r3, #10]
 801887c:	2b07      	cmp	r3, #7
 801887e:	d806      	bhi.n	801888e <udp_sendto_if_src+0x11e>
 8018880:	4b26      	ldr	r3, [pc, #152]	; (801891c <udp_sendto_if_src+0x1ac>)
 8018882:	f240 320d 	movw	r2, #781	; 0x30d
 8018886:	492c      	ldr	r1, [pc, #176]	; (8018938 <udp_sendto_if_src+0x1c8>)
 8018888:	4826      	ldr	r0, [pc, #152]	; (8018924 <udp_sendto_if_src+0x1b4>)
 801888a:	f003 ff29 	bl	801c6e0 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801888e:	69fb      	ldr	r3, [r7, #28]
 8018890:	685b      	ldr	r3, [r3, #4]
 8018892:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8018894:	68fb      	ldr	r3, [r7, #12]
 8018896:	8a5b      	ldrh	r3, [r3, #18]
 8018898:	4618      	mov	r0, r3
 801889a:	f7f7 fc11 	bl	80100c0 <lwip_htons>
 801889e:	4603      	mov	r3, r0
 80188a0:	461a      	mov	r2, r3
 80188a2:	697b      	ldr	r3, [r7, #20]
 80188a4:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80188a6:	887b      	ldrh	r3, [r7, #2]
 80188a8:	4618      	mov	r0, r3
 80188aa:	f7f7 fc09 	bl	80100c0 <lwip_htons>
 80188ae:	4603      	mov	r3, r0
 80188b0:	461a      	mov	r2, r3
 80188b2:	697b      	ldr	r3, [r7, #20]
 80188b4:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80188b6:	697b      	ldr	r3, [r7, #20]
 80188b8:	2200      	movs	r2, #0
 80188ba:	719a      	strb	r2, [r3, #6]
 80188bc:	2200      	movs	r2, #0
 80188be:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80188c0:	69fb      	ldr	r3, [r7, #28]
 80188c2:	891b      	ldrh	r3, [r3, #8]
 80188c4:	4618      	mov	r0, r3
 80188c6:	f7f7 fbfb 	bl	80100c0 <lwip_htons>
 80188ca:	4603      	mov	r3, r0
 80188cc:	461a      	mov	r2, r3
 80188ce:	697b      	ldr	r3, [r7, #20]
 80188d0:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80188d2:	2311      	movs	r3, #17
 80188d4:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80188d6:	68fb      	ldr	r3, [r7, #12]
 80188d8:	7adb      	ldrb	r3, [r3, #11]
 80188da:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80188dc:	68fb      	ldr	r3, [r7, #12]
 80188de:	7a9b      	ldrb	r3, [r3, #10]
 80188e0:	7cb9      	ldrb	r1, [r7, #18]
 80188e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80188e4:	9202      	str	r2, [sp, #8]
 80188e6:	7cfa      	ldrb	r2, [r7, #19]
 80188e8:	9201      	str	r2, [sp, #4]
 80188ea:	9300      	str	r3, [sp, #0]
 80188ec:	460b      	mov	r3, r1
 80188ee:	687a      	ldr	r2, [r7, #4]
 80188f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80188f2:	69f8      	ldr	r0, [r7, #28]
 80188f4:	f001 fc22 	bl	801a13c <ip4_output_if_src>
 80188f8:	4603      	mov	r3, r0
 80188fa:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80188fc:	69fa      	ldr	r2, [r7, #28]
 80188fe:	68bb      	ldr	r3, [r7, #8]
 8018900:	429a      	cmp	r2, r3
 8018902:	d004      	beq.n	801890e <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8018904:	69f8      	ldr	r0, [r7, #28]
 8018906:	f7f8 ff97 	bl	8011838 <pbuf_free>
    q = NULL;
 801890a:	2300      	movs	r3, #0
 801890c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801890e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8018912:	4618      	mov	r0, r3
 8018914:	3720      	adds	r7, #32
 8018916:	46bd      	mov	sp, r7
 8018918:	bd80      	pop	{r7, pc}
 801891a:	bf00      	nop
 801891c:	0802155c 	.word	0x0802155c
 8018920:	08021748 	.word	0x08021748
 8018924:	080215b0 	.word	0x080215b0
 8018928:	08021768 	.word	0x08021768
 801892c:	08021788 	.word	0x08021788
 8018930:	080217ac 	.word	0x080217ac
 8018934:	080217d0 	.word	0x080217d0
 8018938:	080217f4 	.word	0x080217f4

0801893c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801893c:	b580      	push	{r7, lr}
 801893e:	b086      	sub	sp, #24
 8018940:	af00      	add	r7, sp, #0
 8018942:	60f8      	str	r0, [r7, #12]
 8018944:	60b9      	str	r1, [r7, #8]
 8018946:	4613      	mov	r3, r2
 8018948:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801894a:	68bb      	ldr	r3, [r7, #8]
 801894c:	2b00      	cmp	r3, #0
 801894e:	d101      	bne.n	8018954 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8018950:	4b39      	ldr	r3, [pc, #228]	; (8018a38 <udp_bind+0xfc>)
 8018952:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8018954:	68fb      	ldr	r3, [r7, #12]
 8018956:	2b00      	cmp	r3, #0
 8018958:	d109      	bne.n	801896e <udp_bind+0x32>
 801895a:	4b38      	ldr	r3, [pc, #224]	; (8018a3c <udp_bind+0x100>)
 801895c:	f240 32b7 	movw	r2, #951	; 0x3b7
 8018960:	4937      	ldr	r1, [pc, #220]	; (8018a40 <udp_bind+0x104>)
 8018962:	4838      	ldr	r0, [pc, #224]	; (8018a44 <udp_bind+0x108>)
 8018964:	f003 febc 	bl	801c6e0 <iprintf>
 8018968:	f06f 030f 	mvn.w	r3, #15
 801896c:	e060      	b.n	8018a30 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801896e:	2300      	movs	r3, #0
 8018970:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8018972:	4b35      	ldr	r3, [pc, #212]	; (8018a48 <udp_bind+0x10c>)
 8018974:	681b      	ldr	r3, [r3, #0]
 8018976:	617b      	str	r3, [r7, #20]
 8018978:	e009      	b.n	801898e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801897a:	68fa      	ldr	r2, [r7, #12]
 801897c:	697b      	ldr	r3, [r7, #20]
 801897e:	429a      	cmp	r2, r3
 8018980:	d102      	bne.n	8018988 <udp_bind+0x4c>
      rebind = 1;
 8018982:	2301      	movs	r3, #1
 8018984:	74fb      	strb	r3, [r7, #19]
      break;
 8018986:	e005      	b.n	8018994 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8018988:	697b      	ldr	r3, [r7, #20]
 801898a:	68db      	ldr	r3, [r3, #12]
 801898c:	617b      	str	r3, [r7, #20]
 801898e:	697b      	ldr	r3, [r7, #20]
 8018990:	2b00      	cmp	r3, #0
 8018992:	d1f2      	bne.n	801897a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8018994:	88fb      	ldrh	r3, [r7, #6]
 8018996:	2b00      	cmp	r3, #0
 8018998:	d109      	bne.n	80189ae <udp_bind+0x72>
    port = udp_new_port();
 801899a:	f7ff fc35 	bl	8018208 <udp_new_port>
 801899e:	4603      	mov	r3, r0
 80189a0:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80189a2:	88fb      	ldrh	r3, [r7, #6]
 80189a4:	2b00      	cmp	r3, #0
 80189a6:	d12c      	bne.n	8018a02 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80189a8:	f06f 0307 	mvn.w	r3, #7
 80189ac:	e040      	b.n	8018a30 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80189ae:	4b26      	ldr	r3, [pc, #152]	; (8018a48 <udp_bind+0x10c>)
 80189b0:	681b      	ldr	r3, [r3, #0]
 80189b2:	617b      	str	r3, [r7, #20]
 80189b4:	e022      	b.n	80189fc <udp_bind+0xc0>
      if (pcb != ipcb) {
 80189b6:	68fa      	ldr	r2, [r7, #12]
 80189b8:	697b      	ldr	r3, [r7, #20]
 80189ba:	429a      	cmp	r2, r3
 80189bc:	d01b      	beq.n	80189f6 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80189be:	697b      	ldr	r3, [r7, #20]
 80189c0:	8a5b      	ldrh	r3, [r3, #18]
 80189c2:	88fa      	ldrh	r2, [r7, #6]
 80189c4:	429a      	cmp	r2, r3
 80189c6:	d116      	bne.n	80189f6 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80189c8:	697b      	ldr	r3, [r7, #20]
 80189ca:	681a      	ldr	r2, [r3, #0]
 80189cc:	68bb      	ldr	r3, [r7, #8]
 80189ce:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80189d0:	429a      	cmp	r2, r3
 80189d2:	d00d      	beq.n	80189f0 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80189d4:	68bb      	ldr	r3, [r7, #8]
 80189d6:	2b00      	cmp	r3, #0
 80189d8:	d00a      	beq.n	80189f0 <udp_bind+0xb4>
 80189da:	68bb      	ldr	r3, [r7, #8]
 80189dc:	681b      	ldr	r3, [r3, #0]
 80189de:	2b00      	cmp	r3, #0
 80189e0:	d006      	beq.n	80189f0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80189e2:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80189e4:	2b00      	cmp	r3, #0
 80189e6:	d003      	beq.n	80189f0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80189e8:	697b      	ldr	r3, [r7, #20]
 80189ea:	681b      	ldr	r3, [r3, #0]
 80189ec:	2b00      	cmp	r3, #0
 80189ee:	d102      	bne.n	80189f6 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80189f0:	f06f 0307 	mvn.w	r3, #7
 80189f4:	e01c      	b.n	8018a30 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80189f6:	697b      	ldr	r3, [r7, #20]
 80189f8:	68db      	ldr	r3, [r3, #12]
 80189fa:	617b      	str	r3, [r7, #20]
 80189fc:	697b      	ldr	r3, [r7, #20]
 80189fe:	2b00      	cmp	r3, #0
 8018a00:	d1d9      	bne.n	80189b6 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8018a02:	68bb      	ldr	r3, [r7, #8]
 8018a04:	2b00      	cmp	r3, #0
 8018a06:	d002      	beq.n	8018a0e <udp_bind+0xd2>
 8018a08:	68bb      	ldr	r3, [r7, #8]
 8018a0a:	681b      	ldr	r3, [r3, #0]
 8018a0c:	e000      	b.n	8018a10 <udp_bind+0xd4>
 8018a0e:	2300      	movs	r3, #0
 8018a10:	68fa      	ldr	r2, [r7, #12]
 8018a12:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8018a14:	68fb      	ldr	r3, [r7, #12]
 8018a16:	88fa      	ldrh	r2, [r7, #6]
 8018a18:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8018a1a:	7cfb      	ldrb	r3, [r7, #19]
 8018a1c:	2b00      	cmp	r3, #0
 8018a1e:	d106      	bne.n	8018a2e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8018a20:	4b09      	ldr	r3, [pc, #36]	; (8018a48 <udp_bind+0x10c>)
 8018a22:	681a      	ldr	r2, [r3, #0]
 8018a24:	68fb      	ldr	r3, [r7, #12]
 8018a26:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8018a28:	4a07      	ldr	r2, [pc, #28]	; (8018a48 <udp_bind+0x10c>)
 8018a2a:	68fb      	ldr	r3, [r7, #12]
 8018a2c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8018a2e:	2300      	movs	r3, #0
}
 8018a30:	4618      	mov	r0, r3
 8018a32:	3718      	adds	r7, #24
 8018a34:	46bd      	mov	sp, r7
 8018a36:	bd80      	pop	{r7, pc}
 8018a38:	0802304c 	.word	0x0802304c
 8018a3c:	0802155c 	.word	0x0802155c
 8018a40:	08021824 	.word	0x08021824
 8018a44:	080215b0 	.word	0x080215b0
 8018a48:	2000b634 	.word	0x2000b634

08018a4c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8018a4c:	b580      	push	{r7, lr}
 8018a4e:	b084      	sub	sp, #16
 8018a50:	af00      	add	r7, sp, #0
 8018a52:	60f8      	str	r0, [r7, #12]
 8018a54:	60b9      	str	r1, [r7, #8]
 8018a56:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8018a58:	68fb      	ldr	r3, [r7, #12]
 8018a5a:	2b00      	cmp	r3, #0
 8018a5c:	d107      	bne.n	8018a6e <udp_recv+0x22>
 8018a5e:	4b08      	ldr	r3, [pc, #32]	; (8018a80 <udp_recv+0x34>)
 8018a60:	f240 428a 	movw	r2, #1162	; 0x48a
 8018a64:	4907      	ldr	r1, [pc, #28]	; (8018a84 <udp_recv+0x38>)
 8018a66:	4808      	ldr	r0, [pc, #32]	; (8018a88 <udp_recv+0x3c>)
 8018a68:	f003 fe3a 	bl	801c6e0 <iprintf>
 8018a6c:	e005      	b.n	8018a7a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8018a6e:	68fb      	ldr	r3, [r7, #12]
 8018a70:	68ba      	ldr	r2, [r7, #8]
 8018a72:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8018a74:	68fb      	ldr	r3, [r7, #12]
 8018a76:	687a      	ldr	r2, [r7, #4]
 8018a78:	61da      	str	r2, [r3, #28]
}
 8018a7a:	3710      	adds	r7, #16
 8018a7c:	46bd      	mov	sp, r7
 8018a7e:	bd80      	pop	{r7, pc}
 8018a80:	0802155c 	.word	0x0802155c
 8018a84:	08021890 	.word	0x08021890
 8018a88:	080215b0 	.word	0x080215b0

08018a8c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8018a8c:	b580      	push	{r7, lr}
 8018a8e:	b084      	sub	sp, #16
 8018a90:	af00      	add	r7, sp, #0
 8018a92:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8018a94:	687b      	ldr	r3, [r7, #4]
 8018a96:	2b00      	cmp	r3, #0
 8018a98:	d107      	bne.n	8018aaa <udp_remove+0x1e>
 8018a9a:	4b19      	ldr	r3, [pc, #100]	; (8018b00 <udp_remove+0x74>)
 8018a9c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8018aa0:	4918      	ldr	r1, [pc, #96]	; (8018b04 <udp_remove+0x78>)
 8018aa2:	4819      	ldr	r0, [pc, #100]	; (8018b08 <udp_remove+0x7c>)
 8018aa4:	f003 fe1c 	bl	801c6e0 <iprintf>
 8018aa8:	e026      	b.n	8018af8 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8018aaa:	4b18      	ldr	r3, [pc, #96]	; (8018b0c <udp_remove+0x80>)
 8018aac:	681b      	ldr	r3, [r3, #0]
 8018aae:	687a      	ldr	r2, [r7, #4]
 8018ab0:	429a      	cmp	r2, r3
 8018ab2:	d105      	bne.n	8018ac0 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8018ab4:	4b15      	ldr	r3, [pc, #84]	; (8018b0c <udp_remove+0x80>)
 8018ab6:	681b      	ldr	r3, [r3, #0]
 8018ab8:	68db      	ldr	r3, [r3, #12]
 8018aba:	4a14      	ldr	r2, [pc, #80]	; (8018b0c <udp_remove+0x80>)
 8018abc:	6013      	str	r3, [r2, #0]
 8018abe:	e017      	b.n	8018af0 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8018ac0:	4b12      	ldr	r3, [pc, #72]	; (8018b0c <udp_remove+0x80>)
 8018ac2:	681b      	ldr	r3, [r3, #0]
 8018ac4:	60fb      	str	r3, [r7, #12]
 8018ac6:	e010      	b.n	8018aea <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8018ac8:	68fb      	ldr	r3, [r7, #12]
 8018aca:	68db      	ldr	r3, [r3, #12]
 8018acc:	2b00      	cmp	r3, #0
 8018ace:	d009      	beq.n	8018ae4 <udp_remove+0x58>
 8018ad0:	68fb      	ldr	r3, [r7, #12]
 8018ad2:	68db      	ldr	r3, [r3, #12]
 8018ad4:	687a      	ldr	r2, [r7, #4]
 8018ad6:	429a      	cmp	r2, r3
 8018ad8:	d104      	bne.n	8018ae4 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8018ada:	687b      	ldr	r3, [r7, #4]
 8018adc:	68da      	ldr	r2, [r3, #12]
 8018ade:	68fb      	ldr	r3, [r7, #12]
 8018ae0:	60da      	str	r2, [r3, #12]
        break;
 8018ae2:	e005      	b.n	8018af0 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8018ae4:	68fb      	ldr	r3, [r7, #12]
 8018ae6:	68db      	ldr	r3, [r3, #12]
 8018ae8:	60fb      	str	r3, [r7, #12]
 8018aea:	68fb      	ldr	r3, [r7, #12]
 8018aec:	2b00      	cmp	r3, #0
 8018aee:	d1eb      	bne.n	8018ac8 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8018af0:	6879      	ldr	r1, [r7, #4]
 8018af2:	2000      	movs	r0, #0
 8018af4:	f7f8 f822 	bl	8010b3c <memp_free>
}
 8018af8:	3710      	adds	r7, #16
 8018afa:	46bd      	mov	sp, r7
 8018afc:	bd80      	pop	{r7, pc}
 8018afe:	bf00      	nop
 8018b00:	0802155c 	.word	0x0802155c
 8018b04:	080218a8 	.word	0x080218a8
 8018b08:	080215b0 	.word	0x080215b0
 8018b0c:	2000b634 	.word	0x2000b634

08018b10 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8018b10:	b580      	push	{r7, lr}
 8018b12:	b082      	sub	sp, #8
 8018b14:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8018b16:	2000      	movs	r0, #0
 8018b18:	f7f7 ffbe 	bl	8010a98 <memp_malloc>
 8018b1c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8018b1e:	687b      	ldr	r3, [r7, #4]
 8018b20:	2b00      	cmp	r3, #0
 8018b22:	d007      	beq.n	8018b34 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8018b24:	2220      	movs	r2, #32
 8018b26:	2100      	movs	r1, #0
 8018b28:	6878      	ldr	r0, [r7, #4]
 8018b2a:	f003 fb53 	bl	801c1d4 <memset>
    pcb->ttl = UDP_TTL;
 8018b2e:	687b      	ldr	r3, [r7, #4]
 8018b30:	22ff      	movs	r2, #255	; 0xff
 8018b32:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8018b34:	687b      	ldr	r3, [r7, #4]
}
 8018b36:	4618      	mov	r0, r3
 8018b38:	3708      	adds	r7, #8
 8018b3a:	46bd      	mov	sp, r7
 8018b3c:	bd80      	pop	{r7, pc}

08018b3e <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8018b3e:	b580      	push	{r7, lr}
 8018b40:	b084      	sub	sp, #16
 8018b42:	af00      	add	r7, sp, #0
 8018b44:	4603      	mov	r3, r0
 8018b46:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8018b48:	f7ff ffe2 	bl	8018b10 <udp_new>
 8018b4c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8018b4e:	68fb      	ldr	r3, [r7, #12]
}
 8018b50:	4618      	mov	r0, r3
 8018b52:	3710      	adds	r7, #16
 8018b54:	46bd      	mov	sp, r7
 8018b56:	bd80      	pop	{r7, pc}

08018b58 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8018b58:	b480      	push	{r7}
 8018b5a:	b085      	sub	sp, #20
 8018b5c:	af00      	add	r7, sp, #0
 8018b5e:	6078      	str	r0, [r7, #4]
 8018b60:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8018b62:	687b      	ldr	r3, [r7, #4]
 8018b64:	2b00      	cmp	r3, #0
 8018b66:	d01e      	beq.n	8018ba6 <udp_netif_ip_addr_changed+0x4e>
 8018b68:	687b      	ldr	r3, [r7, #4]
 8018b6a:	681b      	ldr	r3, [r3, #0]
 8018b6c:	2b00      	cmp	r3, #0
 8018b6e:	d01a      	beq.n	8018ba6 <udp_netif_ip_addr_changed+0x4e>
 8018b70:	683b      	ldr	r3, [r7, #0]
 8018b72:	2b00      	cmp	r3, #0
 8018b74:	d017      	beq.n	8018ba6 <udp_netif_ip_addr_changed+0x4e>
 8018b76:	683b      	ldr	r3, [r7, #0]
 8018b78:	681b      	ldr	r3, [r3, #0]
 8018b7a:	2b00      	cmp	r3, #0
 8018b7c:	d013      	beq.n	8018ba6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8018b7e:	4b0d      	ldr	r3, [pc, #52]	; (8018bb4 <udp_netif_ip_addr_changed+0x5c>)
 8018b80:	681b      	ldr	r3, [r3, #0]
 8018b82:	60fb      	str	r3, [r7, #12]
 8018b84:	e00c      	b.n	8018ba0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8018b86:	68fb      	ldr	r3, [r7, #12]
 8018b88:	681a      	ldr	r2, [r3, #0]
 8018b8a:	687b      	ldr	r3, [r7, #4]
 8018b8c:	681b      	ldr	r3, [r3, #0]
 8018b8e:	429a      	cmp	r2, r3
 8018b90:	d103      	bne.n	8018b9a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8018b92:	683b      	ldr	r3, [r7, #0]
 8018b94:	681a      	ldr	r2, [r3, #0]
 8018b96:	68fb      	ldr	r3, [r7, #12]
 8018b98:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8018b9a:	68fb      	ldr	r3, [r7, #12]
 8018b9c:	68db      	ldr	r3, [r3, #12]
 8018b9e:	60fb      	str	r3, [r7, #12]
 8018ba0:	68fb      	ldr	r3, [r7, #12]
 8018ba2:	2b00      	cmp	r3, #0
 8018ba4:	d1ef      	bne.n	8018b86 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8018ba6:	bf00      	nop
 8018ba8:	3714      	adds	r7, #20
 8018baa:	46bd      	mov	sp, r7
 8018bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bb0:	4770      	bx	lr
 8018bb2:	bf00      	nop
 8018bb4:	2000b634 	.word	0x2000b634

08018bb8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8018bb8:	b580      	push	{r7, lr}
 8018bba:	b082      	sub	sp, #8
 8018bbc:	af00      	add	r7, sp, #0
 8018bbe:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8018bc0:	4915      	ldr	r1, [pc, #84]	; (8018c18 <etharp_free_entry+0x60>)
 8018bc2:	687a      	ldr	r2, [r7, #4]
 8018bc4:	4613      	mov	r3, r2
 8018bc6:	005b      	lsls	r3, r3, #1
 8018bc8:	4413      	add	r3, r2
 8018bca:	00db      	lsls	r3, r3, #3
 8018bcc:	440b      	add	r3, r1
 8018bce:	681b      	ldr	r3, [r3, #0]
 8018bd0:	2b00      	cmp	r3, #0
 8018bd2:	d013      	beq.n	8018bfc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8018bd4:	4910      	ldr	r1, [pc, #64]	; (8018c18 <etharp_free_entry+0x60>)
 8018bd6:	687a      	ldr	r2, [r7, #4]
 8018bd8:	4613      	mov	r3, r2
 8018bda:	005b      	lsls	r3, r3, #1
 8018bdc:	4413      	add	r3, r2
 8018bde:	00db      	lsls	r3, r3, #3
 8018be0:	440b      	add	r3, r1
 8018be2:	681b      	ldr	r3, [r3, #0]
 8018be4:	4618      	mov	r0, r3
 8018be6:	f7f8 fe27 	bl	8011838 <pbuf_free>
    arp_table[i].q = NULL;
 8018bea:	490b      	ldr	r1, [pc, #44]	; (8018c18 <etharp_free_entry+0x60>)
 8018bec:	687a      	ldr	r2, [r7, #4]
 8018bee:	4613      	mov	r3, r2
 8018bf0:	005b      	lsls	r3, r3, #1
 8018bf2:	4413      	add	r3, r2
 8018bf4:	00db      	lsls	r3, r3, #3
 8018bf6:	440b      	add	r3, r1
 8018bf8:	2200      	movs	r2, #0
 8018bfa:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8018bfc:	4906      	ldr	r1, [pc, #24]	; (8018c18 <etharp_free_entry+0x60>)
 8018bfe:	687a      	ldr	r2, [r7, #4]
 8018c00:	4613      	mov	r3, r2
 8018c02:	005b      	lsls	r3, r3, #1
 8018c04:	4413      	add	r3, r2
 8018c06:	00db      	lsls	r3, r3, #3
 8018c08:	440b      	add	r3, r1
 8018c0a:	3314      	adds	r3, #20
 8018c0c:	2200      	movs	r2, #0
 8018c0e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8018c10:	bf00      	nop
 8018c12:	3708      	adds	r7, #8
 8018c14:	46bd      	mov	sp, r7
 8018c16:	bd80      	pop	{r7, pc}
 8018c18:	20004740 	.word	0x20004740

08018c1c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8018c1c:	b580      	push	{r7, lr}
 8018c1e:	b082      	sub	sp, #8
 8018c20:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018c22:	2300      	movs	r3, #0
 8018c24:	607b      	str	r3, [r7, #4]
 8018c26:	e096      	b.n	8018d56 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8018c28:	494f      	ldr	r1, [pc, #316]	; (8018d68 <etharp_tmr+0x14c>)
 8018c2a:	687a      	ldr	r2, [r7, #4]
 8018c2c:	4613      	mov	r3, r2
 8018c2e:	005b      	lsls	r3, r3, #1
 8018c30:	4413      	add	r3, r2
 8018c32:	00db      	lsls	r3, r3, #3
 8018c34:	440b      	add	r3, r1
 8018c36:	3314      	adds	r3, #20
 8018c38:	781b      	ldrb	r3, [r3, #0]
 8018c3a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8018c3c:	78fb      	ldrb	r3, [r7, #3]
 8018c3e:	2b00      	cmp	r3, #0
 8018c40:	f000 8086 	beq.w	8018d50 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8018c44:	4948      	ldr	r1, [pc, #288]	; (8018d68 <etharp_tmr+0x14c>)
 8018c46:	687a      	ldr	r2, [r7, #4]
 8018c48:	4613      	mov	r3, r2
 8018c4a:	005b      	lsls	r3, r3, #1
 8018c4c:	4413      	add	r3, r2
 8018c4e:	00db      	lsls	r3, r3, #3
 8018c50:	440b      	add	r3, r1
 8018c52:	3312      	adds	r3, #18
 8018c54:	881b      	ldrh	r3, [r3, #0]
 8018c56:	3301      	adds	r3, #1
 8018c58:	b298      	uxth	r0, r3
 8018c5a:	4943      	ldr	r1, [pc, #268]	; (8018d68 <etharp_tmr+0x14c>)
 8018c5c:	687a      	ldr	r2, [r7, #4]
 8018c5e:	4613      	mov	r3, r2
 8018c60:	005b      	lsls	r3, r3, #1
 8018c62:	4413      	add	r3, r2
 8018c64:	00db      	lsls	r3, r3, #3
 8018c66:	440b      	add	r3, r1
 8018c68:	3312      	adds	r3, #18
 8018c6a:	4602      	mov	r2, r0
 8018c6c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8018c6e:	493e      	ldr	r1, [pc, #248]	; (8018d68 <etharp_tmr+0x14c>)
 8018c70:	687a      	ldr	r2, [r7, #4]
 8018c72:	4613      	mov	r3, r2
 8018c74:	005b      	lsls	r3, r3, #1
 8018c76:	4413      	add	r3, r2
 8018c78:	00db      	lsls	r3, r3, #3
 8018c7a:	440b      	add	r3, r1
 8018c7c:	3312      	adds	r3, #18
 8018c7e:	881b      	ldrh	r3, [r3, #0]
 8018c80:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8018c84:	d215      	bcs.n	8018cb2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8018c86:	4938      	ldr	r1, [pc, #224]	; (8018d68 <etharp_tmr+0x14c>)
 8018c88:	687a      	ldr	r2, [r7, #4]
 8018c8a:	4613      	mov	r3, r2
 8018c8c:	005b      	lsls	r3, r3, #1
 8018c8e:	4413      	add	r3, r2
 8018c90:	00db      	lsls	r3, r3, #3
 8018c92:	440b      	add	r3, r1
 8018c94:	3314      	adds	r3, #20
 8018c96:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8018c98:	2b01      	cmp	r3, #1
 8018c9a:	d10e      	bne.n	8018cba <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8018c9c:	4932      	ldr	r1, [pc, #200]	; (8018d68 <etharp_tmr+0x14c>)
 8018c9e:	687a      	ldr	r2, [r7, #4]
 8018ca0:	4613      	mov	r3, r2
 8018ca2:	005b      	lsls	r3, r3, #1
 8018ca4:	4413      	add	r3, r2
 8018ca6:	00db      	lsls	r3, r3, #3
 8018ca8:	440b      	add	r3, r1
 8018caa:	3312      	adds	r3, #18
 8018cac:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8018cae:	2b04      	cmp	r3, #4
 8018cb0:	d903      	bls.n	8018cba <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8018cb2:	6878      	ldr	r0, [r7, #4]
 8018cb4:	f7ff ff80 	bl	8018bb8 <etharp_free_entry>
 8018cb8:	e04a      	b.n	8018d50 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8018cba:	492b      	ldr	r1, [pc, #172]	; (8018d68 <etharp_tmr+0x14c>)
 8018cbc:	687a      	ldr	r2, [r7, #4]
 8018cbe:	4613      	mov	r3, r2
 8018cc0:	005b      	lsls	r3, r3, #1
 8018cc2:	4413      	add	r3, r2
 8018cc4:	00db      	lsls	r3, r3, #3
 8018cc6:	440b      	add	r3, r1
 8018cc8:	3314      	adds	r3, #20
 8018cca:	781b      	ldrb	r3, [r3, #0]
 8018ccc:	2b03      	cmp	r3, #3
 8018cce:	d10a      	bne.n	8018ce6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8018cd0:	4925      	ldr	r1, [pc, #148]	; (8018d68 <etharp_tmr+0x14c>)
 8018cd2:	687a      	ldr	r2, [r7, #4]
 8018cd4:	4613      	mov	r3, r2
 8018cd6:	005b      	lsls	r3, r3, #1
 8018cd8:	4413      	add	r3, r2
 8018cda:	00db      	lsls	r3, r3, #3
 8018cdc:	440b      	add	r3, r1
 8018cde:	3314      	adds	r3, #20
 8018ce0:	2204      	movs	r2, #4
 8018ce2:	701a      	strb	r2, [r3, #0]
 8018ce4:	e034      	b.n	8018d50 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8018ce6:	4920      	ldr	r1, [pc, #128]	; (8018d68 <etharp_tmr+0x14c>)
 8018ce8:	687a      	ldr	r2, [r7, #4]
 8018cea:	4613      	mov	r3, r2
 8018cec:	005b      	lsls	r3, r3, #1
 8018cee:	4413      	add	r3, r2
 8018cf0:	00db      	lsls	r3, r3, #3
 8018cf2:	440b      	add	r3, r1
 8018cf4:	3314      	adds	r3, #20
 8018cf6:	781b      	ldrb	r3, [r3, #0]
 8018cf8:	2b04      	cmp	r3, #4
 8018cfa:	d10a      	bne.n	8018d12 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8018cfc:	491a      	ldr	r1, [pc, #104]	; (8018d68 <etharp_tmr+0x14c>)
 8018cfe:	687a      	ldr	r2, [r7, #4]
 8018d00:	4613      	mov	r3, r2
 8018d02:	005b      	lsls	r3, r3, #1
 8018d04:	4413      	add	r3, r2
 8018d06:	00db      	lsls	r3, r3, #3
 8018d08:	440b      	add	r3, r1
 8018d0a:	3314      	adds	r3, #20
 8018d0c:	2202      	movs	r2, #2
 8018d0e:	701a      	strb	r2, [r3, #0]
 8018d10:	e01e      	b.n	8018d50 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8018d12:	4915      	ldr	r1, [pc, #84]	; (8018d68 <etharp_tmr+0x14c>)
 8018d14:	687a      	ldr	r2, [r7, #4]
 8018d16:	4613      	mov	r3, r2
 8018d18:	005b      	lsls	r3, r3, #1
 8018d1a:	4413      	add	r3, r2
 8018d1c:	00db      	lsls	r3, r3, #3
 8018d1e:	440b      	add	r3, r1
 8018d20:	3314      	adds	r3, #20
 8018d22:	781b      	ldrb	r3, [r3, #0]
 8018d24:	2b01      	cmp	r3, #1
 8018d26:	d113      	bne.n	8018d50 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8018d28:	490f      	ldr	r1, [pc, #60]	; (8018d68 <etharp_tmr+0x14c>)
 8018d2a:	687a      	ldr	r2, [r7, #4]
 8018d2c:	4613      	mov	r3, r2
 8018d2e:	005b      	lsls	r3, r3, #1
 8018d30:	4413      	add	r3, r2
 8018d32:	00db      	lsls	r3, r3, #3
 8018d34:	440b      	add	r3, r1
 8018d36:	3308      	adds	r3, #8
 8018d38:	6818      	ldr	r0, [r3, #0]
 8018d3a:	687a      	ldr	r2, [r7, #4]
 8018d3c:	4613      	mov	r3, r2
 8018d3e:	005b      	lsls	r3, r3, #1
 8018d40:	4413      	add	r3, r2
 8018d42:	00db      	lsls	r3, r3, #3
 8018d44:	4a08      	ldr	r2, [pc, #32]	; (8018d68 <etharp_tmr+0x14c>)
 8018d46:	4413      	add	r3, r2
 8018d48:	3304      	adds	r3, #4
 8018d4a:	4619      	mov	r1, r3
 8018d4c:	f000 fe6e 	bl	8019a2c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018d50:	687b      	ldr	r3, [r7, #4]
 8018d52:	3301      	adds	r3, #1
 8018d54:	607b      	str	r3, [r7, #4]
 8018d56:	687b      	ldr	r3, [r7, #4]
 8018d58:	2b09      	cmp	r3, #9
 8018d5a:	f77f af65 	ble.w	8018c28 <etharp_tmr+0xc>
      }
    }
  }
}
 8018d5e:	bf00      	nop
 8018d60:	bf00      	nop
 8018d62:	3708      	adds	r7, #8
 8018d64:	46bd      	mov	sp, r7
 8018d66:	bd80      	pop	{r7, pc}
 8018d68:	20004740 	.word	0x20004740

08018d6c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8018d6c:	b580      	push	{r7, lr}
 8018d6e:	b08a      	sub	sp, #40	; 0x28
 8018d70:	af00      	add	r7, sp, #0
 8018d72:	60f8      	str	r0, [r7, #12]
 8018d74:	460b      	mov	r3, r1
 8018d76:	607a      	str	r2, [r7, #4]
 8018d78:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8018d7a:	230a      	movs	r3, #10
 8018d7c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8018d7e:	230a      	movs	r3, #10
 8018d80:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8018d82:	230a      	movs	r3, #10
 8018d84:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8018d86:	2300      	movs	r3, #0
 8018d88:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8018d8a:	230a      	movs	r3, #10
 8018d8c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8018d8e:	2300      	movs	r3, #0
 8018d90:	83bb      	strh	r3, [r7, #28]
 8018d92:	2300      	movs	r3, #0
 8018d94:	837b      	strh	r3, [r7, #26]
 8018d96:	2300      	movs	r3, #0
 8018d98:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018d9a:	2300      	movs	r3, #0
 8018d9c:	843b      	strh	r3, [r7, #32]
 8018d9e:	e0ae      	b.n	8018efe <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8018da0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018da4:	49a6      	ldr	r1, [pc, #664]	; (8019040 <etharp_find_entry+0x2d4>)
 8018da6:	4613      	mov	r3, r2
 8018da8:	005b      	lsls	r3, r3, #1
 8018daa:	4413      	add	r3, r2
 8018dac:	00db      	lsls	r3, r3, #3
 8018dae:	440b      	add	r3, r1
 8018db0:	3314      	adds	r3, #20
 8018db2:	781b      	ldrb	r3, [r3, #0]
 8018db4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8018db6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8018dba:	2b0a      	cmp	r3, #10
 8018dbc:	d105      	bne.n	8018dca <etharp_find_entry+0x5e>
 8018dbe:	7dfb      	ldrb	r3, [r7, #23]
 8018dc0:	2b00      	cmp	r3, #0
 8018dc2:	d102      	bne.n	8018dca <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8018dc4:	8c3b      	ldrh	r3, [r7, #32]
 8018dc6:	847b      	strh	r3, [r7, #34]	; 0x22
 8018dc8:	e095      	b.n	8018ef6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8018dca:	7dfb      	ldrb	r3, [r7, #23]
 8018dcc:	2b00      	cmp	r3, #0
 8018dce:	f000 8092 	beq.w	8018ef6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8018dd2:	7dfb      	ldrb	r3, [r7, #23]
 8018dd4:	2b01      	cmp	r3, #1
 8018dd6:	d009      	beq.n	8018dec <etharp_find_entry+0x80>
 8018dd8:	7dfb      	ldrb	r3, [r7, #23]
 8018dda:	2b01      	cmp	r3, #1
 8018ddc:	d806      	bhi.n	8018dec <etharp_find_entry+0x80>
 8018dde:	4b99      	ldr	r3, [pc, #612]	; (8019044 <etharp_find_entry+0x2d8>)
 8018de0:	f240 1223 	movw	r2, #291	; 0x123
 8018de4:	4998      	ldr	r1, [pc, #608]	; (8019048 <etharp_find_entry+0x2dc>)
 8018de6:	4899      	ldr	r0, [pc, #612]	; (801904c <etharp_find_entry+0x2e0>)
 8018de8:	f003 fc7a 	bl	801c6e0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8018dec:	68fb      	ldr	r3, [r7, #12]
 8018dee:	2b00      	cmp	r3, #0
 8018df0:	d020      	beq.n	8018e34 <etharp_find_entry+0xc8>
 8018df2:	68fb      	ldr	r3, [r7, #12]
 8018df4:	6819      	ldr	r1, [r3, #0]
 8018df6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018dfa:	4891      	ldr	r0, [pc, #580]	; (8019040 <etharp_find_entry+0x2d4>)
 8018dfc:	4613      	mov	r3, r2
 8018dfe:	005b      	lsls	r3, r3, #1
 8018e00:	4413      	add	r3, r2
 8018e02:	00db      	lsls	r3, r3, #3
 8018e04:	4403      	add	r3, r0
 8018e06:	3304      	adds	r3, #4
 8018e08:	681b      	ldr	r3, [r3, #0]
 8018e0a:	4299      	cmp	r1, r3
 8018e0c:	d112      	bne.n	8018e34 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8018e0e:	687b      	ldr	r3, [r7, #4]
 8018e10:	2b00      	cmp	r3, #0
 8018e12:	d00c      	beq.n	8018e2e <etharp_find_entry+0xc2>
 8018e14:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018e18:	4989      	ldr	r1, [pc, #548]	; (8019040 <etharp_find_entry+0x2d4>)
 8018e1a:	4613      	mov	r3, r2
 8018e1c:	005b      	lsls	r3, r3, #1
 8018e1e:	4413      	add	r3, r2
 8018e20:	00db      	lsls	r3, r3, #3
 8018e22:	440b      	add	r3, r1
 8018e24:	3308      	adds	r3, #8
 8018e26:	681b      	ldr	r3, [r3, #0]
 8018e28:	687a      	ldr	r2, [r7, #4]
 8018e2a:	429a      	cmp	r2, r3
 8018e2c:	d102      	bne.n	8018e34 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8018e2e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018e32:	e100      	b.n	8019036 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8018e34:	7dfb      	ldrb	r3, [r7, #23]
 8018e36:	2b01      	cmp	r3, #1
 8018e38:	d140      	bne.n	8018ebc <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8018e3a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018e3e:	4980      	ldr	r1, [pc, #512]	; (8019040 <etharp_find_entry+0x2d4>)
 8018e40:	4613      	mov	r3, r2
 8018e42:	005b      	lsls	r3, r3, #1
 8018e44:	4413      	add	r3, r2
 8018e46:	00db      	lsls	r3, r3, #3
 8018e48:	440b      	add	r3, r1
 8018e4a:	681b      	ldr	r3, [r3, #0]
 8018e4c:	2b00      	cmp	r3, #0
 8018e4e:	d01a      	beq.n	8018e86 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8018e50:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018e54:	497a      	ldr	r1, [pc, #488]	; (8019040 <etharp_find_entry+0x2d4>)
 8018e56:	4613      	mov	r3, r2
 8018e58:	005b      	lsls	r3, r3, #1
 8018e5a:	4413      	add	r3, r2
 8018e5c:	00db      	lsls	r3, r3, #3
 8018e5e:	440b      	add	r3, r1
 8018e60:	3312      	adds	r3, #18
 8018e62:	881b      	ldrh	r3, [r3, #0]
 8018e64:	8bba      	ldrh	r2, [r7, #28]
 8018e66:	429a      	cmp	r2, r3
 8018e68:	d845      	bhi.n	8018ef6 <etharp_find_entry+0x18a>
            old_queue = i;
 8018e6a:	8c3b      	ldrh	r3, [r7, #32]
 8018e6c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8018e6e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018e72:	4973      	ldr	r1, [pc, #460]	; (8019040 <etharp_find_entry+0x2d4>)
 8018e74:	4613      	mov	r3, r2
 8018e76:	005b      	lsls	r3, r3, #1
 8018e78:	4413      	add	r3, r2
 8018e7a:	00db      	lsls	r3, r3, #3
 8018e7c:	440b      	add	r3, r1
 8018e7e:	3312      	adds	r3, #18
 8018e80:	881b      	ldrh	r3, [r3, #0]
 8018e82:	83bb      	strh	r3, [r7, #28]
 8018e84:	e037      	b.n	8018ef6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8018e86:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018e8a:	496d      	ldr	r1, [pc, #436]	; (8019040 <etharp_find_entry+0x2d4>)
 8018e8c:	4613      	mov	r3, r2
 8018e8e:	005b      	lsls	r3, r3, #1
 8018e90:	4413      	add	r3, r2
 8018e92:	00db      	lsls	r3, r3, #3
 8018e94:	440b      	add	r3, r1
 8018e96:	3312      	adds	r3, #18
 8018e98:	881b      	ldrh	r3, [r3, #0]
 8018e9a:	8b7a      	ldrh	r2, [r7, #26]
 8018e9c:	429a      	cmp	r2, r3
 8018e9e:	d82a      	bhi.n	8018ef6 <etharp_find_entry+0x18a>
            old_pending = i;
 8018ea0:	8c3b      	ldrh	r3, [r7, #32]
 8018ea2:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8018ea4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018ea8:	4965      	ldr	r1, [pc, #404]	; (8019040 <etharp_find_entry+0x2d4>)
 8018eaa:	4613      	mov	r3, r2
 8018eac:	005b      	lsls	r3, r3, #1
 8018eae:	4413      	add	r3, r2
 8018eb0:	00db      	lsls	r3, r3, #3
 8018eb2:	440b      	add	r3, r1
 8018eb4:	3312      	adds	r3, #18
 8018eb6:	881b      	ldrh	r3, [r3, #0]
 8018eb8:	837b      	strh	r3, [r7, #26]
 8018eba:	e01c      	b.n	8018ef6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8018ebc:	7dfb      	ldrb	r3, [r7, #23]
 8018ebe:	2b01      	cmp	r3, #1
 8018ec0:	d919      	bls.n	8018ef6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8018ec2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018ec6:	495e      	ldr	r1, [pc, #376]	; (8019040 <etharp_find_entry+0x2d4>)
 8018ec8:	4613      	mov	r3, r2
 8018eca:	005b      	lsls	r3, r3, #1
 8018ecc:	4413      	add	r3, r2
 8018ece:	00db      	lsls	r3, r3, #3
 8018ed0:	440b      	add	r3, r1
 8018ed2:	3312      	adds	r3, #18
 8018ed4:	881b      	ldrh	r3, [r3, #0]
 8018ed6:	8b3a      	ldrh	r2, [r7, #24]
 8018ed8:	429a      	cmp	r2, r3
 8018eda:	d80c      	bhi.n	8018ef6 <etharp_find_entry+0x18a>
            old_stable = i;
 8018edc:	8c3b      	ldrh	r3, [r7, #32]
 8018ede:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8018ee0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018ee4:	4956      	ldr	r1, [pc, #344]	; (8019040 <etharp_find_entry+0x2d4>)
 8018ee6:	4613      	mov	r3, r2
 8018ee8:	005b      	lsls	r3, r3, #1
 8018eea:	4413      	add	r3, r2
 8018eec:	00db      	lsls	r3, r3, #3
 8018eee:	440b      	add	r3, r1
 8018ef0:	3312      	adds	r3, #18
 8018ef2:	881b      	ldrh	r3, [r3, #0]
 8018ef4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018ef6:	8c3b      	ldrh	r3, [r7, #32]
 8018ef8:	3301      	adds	r3, #1
 8018efa:	b29b      	uxth	r3, r3
 8018efc:	843b      	strh	r3, [r7, #32]
 8018efe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018f02:	2b09      	cmp	r3, #9
 8018f04:	f77f af4c 	ble.w	8018da0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8018f08:	7afb      	ldrb	r3, [r7, #11]
 8018f0a:	f003 0302 	and.w	r3, r3, #2
 8018f0e:	2b00      	cmp	r3, #0
 8018f10:	d108      	bne.n	8018f24 <etharp_find_entry+0x1b8>
 8018f12:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8018f16:	2b0a      	cmp	r3, #10
 8018f18:	d107      	bne.n	8018f2a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8018f1a:	7afb      	ldrb	r3, [r7, #11]
 8018f1c:	f003 0301 	and.w	r3, r3, #1
 8018f20:	2b00      	cmp	r3, #0
 8018f22:	d102      	bne.n	8018f2a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8018f24:	f04f 33ff 	mov.w	r3, #4294967295
 8018f28:	e085      	b.n	8019036 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8018f2a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8018f2e:	2b09      	cmp	r3, #9
 8018f30:	dc02      	bgt.n	8018f38 <etharp_find_entry+0x1cc>
    i = empty;
 8018f32:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018f34:	843b      	strh	r3, [r7, #32]
 8018f36:	e039      	b.n	8018fac <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8018f38:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8018f3c:	2b09      	cmp	r3, #9
 8018f3e:	dc14      	bgt.n	8018f6a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8018f40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018f42:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8018f44:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018f48:	493d      	ldr	r1, [pc, #244]	; (8019040 <etharp_find_entry+0x2d4>)
 8018f4a:	4613      	mov	r3, r2
 8018f4c:	005b      	lsls	r3, r3, #1
 8018f4e:	4413      	add	r3, r2
 8018f50:	00db      	lsls	r3, r3, #3
 8018f52:	440b      	add	r3, r1
 8018f54:	681b      	ldr	r3, [r3, #0]
 8018f56:	2b00      	cmp	r3, #0
 8018f58:	d018      	beq.n	8018f8c <etharp_find_entry+0x220>
 8018f5a:	4b3a      	ldr	r3, [pc, #232]	; (8019044 <etharp_find_entry+0x2d8>)
 8018f5c:	f240 126d 	movw	r2, #365	; 0x16d
 8018f60:	493b      	ldr	r1, [pc, #236]	; (8019050 <etharp_find_entry+0x2e4>)
 8018f62:	483a      	ldr	r0, [pc, #232]	; (801904c <etharp_find_entry+0x2e0>)
 8018f64:	f003 fbbc 	bl	801c6e0 <iprintf>
 8018f68:	e010      	b.n	8018f8c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8018f6a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8018f6e:	2b09      	cmp	r3, #9
 8018f70:	dc02      	bgt.n	8018f78 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8018f72:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018f74:	843b      	strh	r3, [r7, #32]
 8018f76:	e009      	b.n	8018f8c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8018f78:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8018f7c:	2b09      	cmp	r3, #9
 8018f7e:	dc02      	bgt.n	8018f86 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8018f80:	8bfb      	ldrh	r3, [r7, #30]
 8018f82:	843b      	strh	r3, [r7, #32]
 8018f84:	e002      	b.n	8018f8c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8018f86:	f04f 33ff 	mov.w	r3, #4294967295
 8018f8a:	e054      	b.n	8019036 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8018f8c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018f90:	2b09      	cmp	r3, #9
 8018f92:	dd06      	ble.n	8018fa2 <etharp_find_entry+0x236>
 8018f94:	4b2b      	ldr	r3, [pc, #172]	; (8019044 <etharp_find_entry+0x2d8>)
 8018f96:	f240 127f 	movw	r2, #383	; 0x17f
 8018f9a:	492e      	ldr	r1, [pc, #184]	; (8019054 <etharp_find_entry+0x2e8>)
 8018f9c:	482b      	ldr	r0, [pc, #172]	; (801904c <etharp_find_entry+0x2e0>)
 8018f9e:	f003 fb9f 	bl	801c6e0 <iprintf>
    etharp_free_entry(i);
 8018fa2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018fa6:	4618      	mov	r0, r3
 8018fa8:	f7ff fe06 	bl	8018bb8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8018fac:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018fb0:	2b09      	cmp	r3, #9
 8018fb2:	dd06      	ble.n	8018fc2 <etharp_find_entry+0x256>
 8018fb4:	4b23      	ldr	r3, [pc, #140]	; (8019044 <etharp_find_entry+0x2d8>)
 8018fb6:	f240 1283 	movw	r2, #387	; 0x183
 8018fba:	4926      	ldr	r1, [pc, #152]	; (8019054 <etharp_find_entry+0x2e8>)
 8018fbc:	4823      	ldr	r0, [pc, #140]	; (801904c <etharp_find_entry+0x2e0>)
 8018fbe:	f003 fb8f 	bl	801c6e0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8018fc2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018fc6:	491e      	ldr	r1, [pc, #120]	; (8019040 <etharp_find_entry+0x2d4>)
 8018fc8:	4613      	mov	r3, r2
 8018fca:	005b      	lsls	r3, r3, #1
 8018fcc:	4413      	add	r3, r2
 8018fce:	00db      	lsls	r3, r3, #3
 8018fd0:	440b      	add	r3, r1
 8018fd2:	3314      	adds	r3, #20
 8018fd4:	781b      	ldrb	r3, [r3, #0]
 8018fd6:	2b00      	cmp	r3, #0
 8018fd8:	d006      	beq.n	8018fe8 <etharp_find_entry+0x27c>
 8018fda:	4b1a      	ldr	r3, [pc, #104]	; (8019044 <etharp_find_entry+0x2d8>)
 8018fdc:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8018fe0:	491d      	ldr	r1, [pc, #116]	; (8019058 <etharp_find_entry+0x2ec>)
 8018fe2:	481a      	ldr	r0, [pc, #104]	; (801904c <etharp_find_entry+0x2e0>)
 8018fe4:	f003 fb7c 	bl	801c6e0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8018fe8:	68fb      	ldr	r3, [r7, #12]
 8018fea:	2b00      	cmp	r3, #0
 8018fec:	d00b      	beq.n	8019006 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8018fee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018ff2:	68fb      	ldr	r3, [r7, #12]
 8018ff4:	6819      	ldr	r1, [r3, #0]
 8018ff6:	4812      	ldr	r0, [pc, #72]	; (8019040 <etharp_find_entry+0x2d4>)
 8018ff8:	4613      	mov	r3, r2
 8018ffa:	005b      	lsls	r3, r3, #1
 8018ffc:	4413      	add	r3, r2
 8018ffe:	00db      	lsls	r3, r3, #3
 8019000:	4403      	add	r3, r0
 8019002:	3304      	adds	r3, #4
 8019004:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8019006:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801900a:	490d      	ldr	r1, [pc, #52]	; (8019040 <etharp_find_entry+0x2d4>)
 801900c:	4613      	mov	r3, r2
 801900e:	005b      	lsls	r3, r3, #1
 8019010:	4413      	add	r3, r2
 8019012:	00db      	lsls	r3, r3, #3
 8019014:	440b      	add	r3, r1
 8019016:	3312      	adds	r3, #18
 8019018:	2200      	movs	r2, #0
 801901a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801901c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019020:	4907      	ldr	r1, [pc, #28]	; (8019040 <etharp_find_entry+0x2d4>)
 8019022:	4613      	mov	r3, r2
 8019024:	005b      	lsls	r3, r3, #1
 8019026:	4413      	add	r3, r2
 8019028:	00db      	lsls	r3, r3, #3
 801902a:	440b      	add	r3, r1
 801902c:	3308      	adds	r3, #8
 801902e:	687a      	ldr	r2, [r7, #4]
 8019030:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8019032:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8019036:	4618      	mov	r0, r3
 8019038:	3728      	adds	r7, #40	; 0x28
 801903a:	46bd      	mov	sp, r7
 801903c:	bd80      	pop	{r7, pc}
 801903e:	bf00      	nop
 8019040:	20004740 	.word	0x20004740
 8019044:	080218c0 	.word	0x080218c0
 8019048:	080218f8 	.word	0x080218f8
 801904c:	08021938 	.word	0x08021938
 8019050:	08021960 	.word	0x08021960
 8019054:	08021978 	.word	0x08021978
 8019058:	0802198c 	.word	0x0802198c

0801905c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801905c:	b580      	push	{r7, lr}
 801905e:	b088      	sub	sp, #32
 8019060:	af02      	add	r7, sp, #8
 8019062:	60f8      	str	r0, [r7, #12]
 8019064:	60b9      	str	r1, [r7, #8]
 8019066:	607a      	str	r2, [r7, #4]
 8019068:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801906a:	68fb      	ldr	r3, [r7, #12]
 801906c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019070:	2b06      	cmp	r3, #6
 8019072:	d006      	beq.n	8019082 <etharp_update_arp_entry+0x26>
 8019074:	4b48      	ldr	r3, [pc, #288]	; (8019198 <etharp_update_arp_entry+0x13c>)
 8019076:	f240 12a9 	movw	r2, #425	; 0x1a9
 801907a:	4948      	ldr	r1, [pc, #288]	; (801919c <etharp_update_arp_entry+0x140>)
 801907c:	4848      	ldr	r0, [pc, #288]	; (80191a0 <etharp_update_arp_entry+0x144>)
 801907e:	f003 fb2f 	bl	801c6e0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8019082:	68bb      	ldr	r3, [r7, #8]
 8019084:	2b00      	cmp	r3, #0
 8019086:	d012      	beq.n	80190ae <etharp_update_arp_entry+0x52>
 8019088:	68bb      	ldr	r3, [r7, #8]
 801908a:	681b      	ldr	r3, [r3, #0]
 801908c:	2b00      	cmp	r3, #0
 801908e:	d00e      	beq.n	80190ae <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8019090:	68bb      	ldr	r3, [r7, #8]
 8019092:	681b      	ldr	r3, [r3, #0]
 8019094:	68f9      	ldr	r1, [r7, #12]
 8019096:	4618      	mov	r0, r3
 8019098:	f001 f8fe 	bl	801a298 <ip4_addr_isbroadcast_u32>
 801909c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801909e:	2b00      	cmp	r3, #0
 80190a0:	d105      	bne.n	80190ae <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80190a2:	68bb      	ldr	r3, [r7, #8]
 80190a4:	681b      	ldr	r3, [r3, #0]
 80190a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80190aa:	2be0      	cmp	r3, #224	; 0xe0
 80190ac:	d102      	bne.n	80190b4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80190ae:	f06f 030f 	mvn.w	r3, #15
 80190b2:	e06c      	b.n	801918e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80190b4:	78fb      	ldrb	r3, [r7, #3]
 80190b6:	68fa      	ldr	r2, [r7, #12]
 80190b8:	4619      	mov	r1, r3
 80190ba:	68b8      	ldr	r0, [r7, #8]
 80190bc:	f7ff fe56 	bl	8018d6c <etharp_find_entry>
 80190c0:	4603      	mov	r3, r0
 80190c2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80190c4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80190c8:	2b00      	cmp	r3, #0
 80190ca:	da02      	bge.n	80190d2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80190cc:	8afb      	ldrh	r3, [r7, #22]
 80190ce:	b25b      	sxtb	r3, r3
 80190d0:	e05d      	b.n	801918e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80190d2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80190d6:	4933      	ldr	r1, [pc, #204]	; (80191a4 <etharp_update_arp_entry+0x148>)
 80190d8:	4613      	mov	r3, r2
 80190da:	005b      	lsls	r3, r3, #1
 80190dc:	4413      	add	r3, r2
 80190de:	00db      	lsls	r3, r3, #3
 80190e0:	440b      	add	r3, r1
 80190e2:	3314      	adds	r3, #20
 80190e4:	2202      	movs	r2, #2
 80190e6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80190e8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80190ec:	492d      	ldr	r1, [pc, #180]	; (80191a4 <etharp_update_arp_entry+0x148>)
 80190ee:	4613      	mov	r3, r2
 80190f0:	005b      	lsls	r3, r3, #1
 80190f2:	4413      	add	r3, r2
 80190f4:	00db      	lsls	r3, r3, #3
 80190f6:	440b      	add	r3, r1
 80190f8:	3308      	adds	r3, #8
 80190fa:	68fa      	ldr	r2, [r7, #12]
 80190fc:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80190fe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019102:	4613      	mov	r3, r2
 8019104:	005b      	lsls	r3, r3, #1
 8019106:	4413      	add	r3, r2
 8019108:	00db      	lsls	r3, r3, #3
 801910a:	3308      	adds	r3, #8
 801910c:	4a25      	ldr	r2, [pc, #148]	; (80191a4 <etharp_update_arp_entry+0x148>)
 801910e:	4413      	add	r3, r2
 8019110:	3304      	adds	r3, #4
 8019112:	2206      	movs	r2, #6
 8019114:	6879      	ldr	r1, [r7, #4]
 8019116:	4618      	mov	r0, r3
 8019118:	f003 f84e 	bl	801c1b8 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801911c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019120:	4920      	ldr	r1, [pc, #128]	; (80191a4 <etharp_update_arp_entry+0x148>)
 8019122:	4613      	mov	r3, r2
 8019124:	005b      	lsls	r3, r3, #1
 8019126:	4413      	add	r3, r2
 8019128:	00db      	lsls	r3, r3, #3
 801912a:	440b      	add	r3, r1
 801912c:	3312      	adds	r3, #18
 801912e:	2200      	movs	r2, #0
 8019130:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8019132:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019136:	491b      	ldr	r1, [pc, #108]	; (80191a4 <etharp_update_arp_entry+0x148>)
 8019138:	4613      	mov	r3, r2
 801913a:	005b      	lsls	r3, r3, #1
 801913c:	4413      	add	r3, r2
 801913e:	00db      	lsls	r3, r3, #3
 8019140:	440b      	add	r3, r1
 8019142:	681b      	ldr	r3, [r3, #0]
 8019144:	2b00      	cmp	r3, #0
 8019146:	d021      	beq.n	801918c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8019148:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801914c:	4915      	ldr	r1, [pc, #84]	; (80191a4 <etharp_update_arp_entry+0x148>)
 801914e:	4613      	mov	r3, r2
 8019150:	005b      	lsls	r3, r3, #1
 8019152:	4413      	add	r3, r2
 8019154:	00db      	lsls	r3, r3, #3
 8019156:	440b      	add	r3, r1
 8019158:	681b      	ldr	r3, [r3, #0]
 801915a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801915c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019160:	4910      	ldr	r1, [pc, #64]	; (80191a4 <etharp_update_arp_entry+0x148>)
 8019162:	4613      	mov	r3, r2
 8019164:	005b      	lsls	r3, r3, #1
 8019166:	4413      	add	r3, r2
 8019168:	00db      	lsls	r3, r3, #3
 801916a:	440b      	add	r3, r1
 801916c:	2200      	movs	r2, #0
 801916e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8019170:	68fb      	ldr	r3, [r7, #12]
 8019172:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8019176:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801917a:	9300      	str	r3, [sp, #0]
 801917c:	687b      	ldr	r3, [r7, #4]
 801917e:	6939      	ldr	r1, [r7, #16]
 8019180:	68f8      	ldr	r0, [r7, #12]
 8019182:	f002 f8bb 	bl	801b2fc <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8019186:	6938      	ldr	r0, [r7, #16]
 8019188:	f7f8 fb56 	bl	8011838 <pbuf_free>
  }
  return ERR_OK;
 801918c:	2300      	movs	r3, #0
}
 801918e:	4618      	mov	r0, r3
 8019190:	3718      	adds	r7, #24
 8019192:	46bd      	mov	sp, r7
 8019194:	bd80      	pop	{r7, pc}
 8019196:	bf00      	nop
 8019198:	080218c0 	.word	0x080218c0
 801919c:	080219b8 	.word	0x080219b8
 80191a0:	08021938 	.word	0x08021938
 80191a4:	20004740 	.word	0x20004740

080191a8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80191a8:	b580      	push	{r7, lr}
 80191aa:	b084      	sub	sp, #16
 80191ac:	af00      	add	r7, sp, #0
 80191ae:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80191b0:	2300      	movs	r3, #0
 80191b2:	60fb      	str	r3, [r7, #12]
 80191b4:	e01e      	b.n	80191f4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80191b6:	4913      	ldr	r1, [pc, #76]	; (8019204 <etharp_cleanup_netif+0x5c>)
 80191b8:	68fa      	ldr	r2, [r7, #12]
 80191ba:	4613      	mov	r3, r2
 80191bc:	005b      	lsls	r3, r3, #1
 80191be:	4413      	add	r3, r2
 80191c0:	00db      	lsls	r3, r3, #3
 80191c2:	440b      	add	r3, r1
 80191c4:	3314      	adds	r3, #20
 80191c6:	781b      	ldrb	r3, [r3, #0]
 80191c8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80191ca:	7afb      	ldrb	r3, [r7, #11]
 80191cc:	2b00      	cmp	r3, #0
 80191ce:	d00e      	beq.n	80191ee <etharp_cleanup_netif+0x46>
 80191d0:	490c      	ldr	r1, [pc, #48]	; (8019204 <etharp_cleanup_netif+0x5c>)
 80191d2:	68fa      	ldr	r2, [r7, #12]
 80191d4:	4613      	mov	r3, r2
 80191d6:	005b      	lsls	r3, r3, #1
 80191d8:	4413      	add	r3, r2
 80191da:	00db      	lsls	r3, r3, #3
 80191dc:	440b      	add	r3, r1
 80191de:	3308      	adds	r3, #8
 80191e0:	681b      	ldr	r3, [r3, #0]
 80191e2:	687a      	ldr	r2, [r7, #4]
 80191e4:	429a      	cmp	r2, r3
 80191e6:	d102      	bne.n	80191ee <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80191e8:	68f8      	ldr	r0, [r7, #12]
 80191ea:	f7ff fce5 	bl	8018bb8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80191ee:	68fb      	ldr	r3, [r7, #12]
 80191f0:	3301      	adds	r3, #1
 80191f2:	60fb      	str	r3, [r7, #12]
 80191f4:	68fb      	ldr	r3, [r7, #12]
 80191f6:	2b09      	cmp	r3, #9
 80191f8:	dddd      	ble.n	80191b6 <etharp_cleanup_netif+0xe>
    }
  }
}
 80191fa:	bf00      	nop
 80191fc:	bf00      	nop
 80191fe:	3710      	adds	r7, #16
 8019200:	46bd      	mov	sp, r7
 8019202:	bd80      	pop	{r7, pc}
 8019204:	20004740 	.word	0x20004740

08019208 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8019208:	b5b0      	push	{r4, r5, r7, lr}
 801920a:	b08a      	sub	sp, #40	; 0x28
 801920c:	af04      	add	r7, sp, #16
 801920e:	6078      	str	r0, [r7, #4]
 8019210:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8019212:	683b      	ldr	r3, [r7, #0]
 8019214:	2b00      	cmp	r3, #0
 8019216:	d107      	bne.n	8019228 <etharp_input+0x20>
 8019218:	4b3d      	ldr	r3, [pc, #244]	; (8019310 <etharp_input+0x108>)
 801921a:	f240 228a 	movw	r2, #650	; 0x28a
 801921e:	493d      	ldr	r1, [pc, #244]	; (8019314 <etharp_input+0x10c>)
 8019220:	483d      	ldr	r0, [pc, #244]	; (8019318 <etharp_input+0x110>)
 8019222:	f003 fa5d 	bl	801c6e0 <iprintf>
 8019226:	e06f      	b.n	8019308 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8019228:	687b      	ldr	r3, [r7, #4]
 801922a:	685b      	ldr	r3, [r3, #4]
 801922c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801922e:	693b      	ldr	r3, [r7, #16]
 8019230:	881b      	ldrh	r3, [r3, #0]
 8019232:	b29b      	uxth	r3, r3
 8019234:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019238:	d10c      	bne.n	8019254 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801923a:	693b      	ldr	r3, [r7, #16]
 801923c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801923e:	2b06      	cmp	r3, #6
 8019240:	d108      	bne.n	8019254 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8019242:	693b      	ldr	r3, [r7, #16]
 8019244:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8019246:	2b04      	cmp	r3, #4
 8019248:	d104      	bne.n	8019254 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801924a:	693b      	ldr	r3, [r7, #16]
 801924c:	885b      	ldrh	r3, [r3, #2]
 801924e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8019250:	2b08      	cmp	r3, #8
 8019252:	d003      	beq.n	801925c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8019254:	6878      	ldr	r0, [r7, #4]
 8019256:	f7f8 faef 	bl	8011838 <pbuf_free>
    return;
 801925a:	e055      	b.n	8019308 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801925c:	693b      	ldr	r3, [r7, #16]
 801925e:	330e      	adds	r3, #14
 8019260:	681b      	ldr	r3, [r3, #0]
 8019262:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8019264:	693b      	ldr	r3, [r7, #16]
 8019266:	3318      	adds	r3, #24
 8019268:	681b      	ldr	r3, [r3, #0]
 801926a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801926c:	683b      	ldr	r3, [r7, #0]
 801926e:	3304      	adds	r3, #4
 8019270:	681b      	ldr	r3, [r3, #0]
 8019272:	2b00      	cmp	r3, #0
 8019274:	d102      	bne.n	801927c <etharp_input+0x74>
    for_us = 0;
 8019276:	2300      	movs	r3, #0
 8019278:	75fb      	strb	r3, [r7, #23]
 801927a:	e009      	b.n	8019290 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801927c:	68ba      	ldr	r2, [r7, #8]
 801927e:	683b      	ldr	r3, [r7, #0]
 8019280:	3304      	adds	r3, #4
 8019282:	681b      	ldr	r3, [r3, #0]
 8019284:	429a      	cmp	r2, r3
 8019286:	bf0c      	ite	eq
 8019288:	2301      	moveq	r3, #1
 801928a:	2300      	movne	r3, #0
 801928c:	b2db      	uxtb	r3, r3
 801928e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8019290:	693b      	ldr	r3, [r7, #16]
 8019292:	f103 0208 	add.w	r2, r3, #8
 8019296:	7dfb      	ldrb	r3, [r7, #23]
 8019298:	2b00      	cmp	r3, #0
 801929a:	d001      	beq.n	80192a0 <etharp_input+0x98>
 801929c:	2301      	movs	r3, #1
 801929e:	e000      	b.n	80192a2 <etharp_input+0x9a>
 80192a0:	2302      	movs	r3, #2
 80192a2:	f107 010c 	add.w	r1, r7, #12
 80192a6:	6838      	ldr	r0, [r7, #0]
 80192a8:	f7ff fed8 	bl	801905c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80192ac:	693b      	ldr	r3, [r7, #16]
 80192ae:	88db      	ldrh	r3, [r3, #6]
 80192b0:	b29b      	uxth	r3, r3
 80192b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80192b6:	d003      	beq.n	80192c0 <etharp_input+0xb8>
 80192b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80192bc:	d01e      	beq.n	80192fc <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80192be:	e020      	b.n	8019302 <etharp_input+0xfa>
      if (for_us) {
 80192c0:	7dfb      	ldrb	r3, [r7, #23]
 80192c2:	2b00      	cmp	r3, #0
 80192c4:	d01c      	beq.n	8019300 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80192c6:	683b      	ldr	r3, [r7, #0]
 80192c8:	f103 0022 	add.w	r0, r3, #34	; 0x22
 80192cc:	693b      	ldr	r3, [r7, #16]
 80192ce:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80192d2:	683b      	ldr	r3, [r7, #0]
 80192d4:	f103 0522 	add.w	r5, r3, #34	; 0x22
 80192d8:	683b      	ldr	r3, [r7, #0]
 80192da:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80192dc:	693a      	ldr	r2, [r7, #16]
 80192de:	3208      	adds	r2, #8
        etharp_raw(netif,
 80192e0:	2102      	movs	r1, #2
 80192e2:	9103      	str	r1, [sp, #12]
 80192e4:	f107 010c 	add.w	r1, r7, #12
 80192e8:	9102      	str	r1, [sp, #8]
 80192ea:	9201      	str	r2, [sp, #4]
 80192ec:	9300      	str	r3, [sp, #0]
 80192ee:	462b      	mov	r3, r5
 80192f0:	4622      	mov	r2, r4
 80192f2:	4601      	mov	r1, r0
 80192f4:	6838      	ldr	r0, [r7, #0]
 80192f6:	f000 faeb 	bl	80198d0 <etharp_raw>
      break;
 80192fa:	e001      	b.n	8019300 <etharp_input+0xf8>
      break;
 80192fc:	bf00      	nop
 80192fe:	e000      	b.n	8019302 <etharp_input+0xfa>
      break;
 8019300:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8019302:	6878      	ldr	r0, [r7, #4]
 8019304:	f7f8 fa98 	bl	8011838 <pbuf_free>
}
 8019308:	3718      	adds	r7, #24
 801930a:	46bd      	mov	sp, r7
 801930c:	bdb0      	pop	{r4, r5, r7, pc}
 801930e:	bf00      	nop
 8019310:	080218c0 	.word	0x080218c0
 8019314:	08021a10 	.word	0x08021a10
 8019318:	08021938 	.word	0x08021938

0801931c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801931c:	b580      	push	{r7, lr}
 801931e:	b086      	sub	sp, #24
 8019320:	af02      	add	r7, sp, #8
 8019322:	60f8      	str	r0, [r7, #12]
 8019324:	60b9      	str	r1, [r7, #8]
 8019326:	4613      	mov	r3, r2
 8019328:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801932a:	79fa      	ldrb	r2, [r7, #7]
 801932c:	4944      	ldr	r1, [pc, #272]	; (8019440 <etharp_output_to_arp_index+0x124>)
 801932e:	4613      	mov	r3, r2
 8019330:	005b      	lsls	r3, r3, #1
 8019332:	4413      	add	r3, r2
 8019334:	00db      	lsls	r3, r3, #3
 8019336:	440b      	add	r3, r1
 8019338:	3314      	adds	r3, #20
 801933a:	781b      	ldrb	r3, [r3, #0]
 801933c:	2b01      	cmp	r3, #1
 801933e:	d806      	bhi.n	801934e <etharp_output_to_arp_index+0x32>
 8019340:	4b40      	ldr	r3, [pc, #256]	; (8019444 <etharp_output_to_arp_index+0x128>)
 8019342:	f240 22ee 	movw	r2, #750	; 0x2ee
 8019346:	4940      	ldr	r1, [pc, #256]	; (8019448 <etharp_output_to_arp_index+0x12c>)
 8019348:	4840      	ldr	r0, [pc, #256]	; (801944c <etharp_output_to_arp_index+0x130>)
 801934a:	f003 f9c9 	bl	801c6e0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801934e:	79fa      	ldrb	r2, [r7, #7]
 8019350:	493b      	ldr	r1, [pc, #236]	; (8019440 <etharp_output_to_arp_index+0x124>)
 8019352:	4613      	mov	r3, r2
 8019354:	005b      	lsls	r3, r3, #1
 8019356:	4413      	add	r3, r2
 8019358:	00db      	lsls	r3, r3, #3
 801935a:	440b      	add	r3, r1
 801935c:	3314      	adds	r3, #20
 801935e:	781b      	ldrb	r3, [r3, #0]
 8019360:	2b02      	cmp	r3, #2
 8019362:	d153      	bne.n	801940c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8019364:	79fa      	ldrb	r2, [r7, #7]
 8019366:	4936      	ldr	r1, [pc, #216]	; (8019440 <etharp_output_to_arp_index+0x124>)
 8019368:	4613      	mov	r3, r2
 801936a:	005b      	lsls	r3, r3, #1
 801936c:	4413      	add	r3, r2
 801936e:	00db      	lsls	r3, r3, #3
 8019370:	440b      	add	r3, r1
 8019372:	3312      	adds	r3, #18
 8019374:	881b      	ldrh	r3, [r3, #0]
 8019376:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801937a:	d919      	bls.n	80193b0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801937c:	79fa      	ldrb	r2, [r7, #7]
 801937e:	4613      	mov	r3, r2
 8019380:	005b      	lsls	r3, r3, #1
 8019382:	4413      	add	r3, r2
 8019384:	00db      	lsls	r3, r3, #3
 8019386:	4a2e      	ldr	r2, [pc, #184]	; (8019440 <etharp_output_to_arp_index+0x124>)
 8019388:	4413      	add	r3, r2
 801938a:	3304      	adds	r3, #4
 801938c:	4619      	mov	r1, r3
 801938e:	68f8      	ldr	r0, [r7, #12]
 8019390:	f000 fb4c 	bl	8019a2c <etharp_request>
 8019394:	4603      	mov	r3, r0
 8019396:	2b00      	cmp	r3, #0
 8019398:	d138      	bne.n	801940c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801939a:	79fa      	ldrb	r2, [r7, #7]
 801939c:	4928      	ldr	r1, [pc, #160]	; (8019440 <etharp_output_to_arp_index+0x124>)
 801939e:	4613      	mov	r3, r2
 80193a0:	005b      	lsls	r3, r3, #1
 80193a2:	4413      	add	r3, r2
 80193a4:	00db      	lsls	r3, r3, #3
 80193a6:	440b      	add	r3, r1
 80193a8:	3314      	adds	r3, #20
 80193aa:	2203      	movs	r2, #3
 80193ac:	701a      	strb	r2, [r3, #0]
 80193ae:	e02d      	b.n	801940c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80193b0:	79fa      	ldrb	r2, [r7, #7]
 80193b2:	4923      	ldr	r1, [pc, #140]	; (8019440 <etharp_output_to_arp_index+0x124>)
 80193b4:	4613      	mov	r3, r2
 80193b6:	005b      	lsls	r3, r3, #1
 80193b8:	4413      	add	r3, r2
 80193ba:	00db      	lsls	r3, r3, #3
 80193bc:	440b      	add	r3, r1
 80193be:	3312      	adds	r3, #18
 80193c0:	881b      	ldrh	r3, [r3, #0]
 80193c2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80193c6:	d321      	bcc.n	801940c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80193c8:	79fa      	ldrb	r2, [r7, #7]
 80193ca:	4613      	mov	r3, r2
 80193cc:	005b      	lsls	r3, r3, #1
 80193ce:	4413      	add	r3, r2
 80193d0:	00db      	lsls	r3, r3, #3
 80193d2:	4a1b      	ldr	r2, [pc, #108]	; (8019440 <etharp_output_to_arp_index+0x124>)
 80193d4:	4413      	add	r3, r2
 80193d6:	1d19      	adds	r1, r3, #4
 80193d8:	79fa      	ldrb	r2, [r7, #7]
 80193da:	4613      	mov	r3, r2
 80193dc:	005b      	lsls	r3, r3, #1
 80193de:	4413      	add	r3, r2
 80193e0:	00db      	lsls	r3, r3, #3
 80193e2:	3308      	adds	r3, #8
 80193e4:	4a16      	ldr	r2, [pc, #88]	; (8019440 <etharp_output_to_arp_index+0x124>)
 80193e6:	4413      	add	r3, r2
 80193e8:	3304      	adds	r3, #4
 80193ea:	461a      	mov	r2, r3
 80193ec:	68f8      	ldr	r0, [r7, #12]
 80193ee:	f000 fafb 	bl	80199e8 <etharp_request_dst>
 80193f2:	4603      	mov	r3, r0
 80193f4:	2b00      	cmp	r3, #0
 80193f6:	d109      	bne.n	801940c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80193f8:	79fa      	ldrb	r2, [r7, #7]
 80193fa:	4911      	ldr	r1, [pc, #68]	; (8019440 <etharp_output_to_arp_index+0x124>)
 80193fc:	4613      	mov	r3, r2
 80193fe:	005b      	lsls	r3, r3, #1
 8019400:	4413      	add	r3, r2
 8019402:	00db      	lsls	r3, r3, #3
 8019404:	440b      	add	r3, r1
 8019406:	3314      	adds	r3, #20
 8019408:	2203      	movs	r2, #3
 801940a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801940c:	68fb      	ldr	r3, [r7, #12]
 801940e:	f103 0122 	add.w	r1, r3, #34	; 0x22
 8019412:	79fa      	ldrb	r2, [r7, #7]
 8019414:	4613      	mov	r3, r2
 8019416:	005b      	lsls	r3, r3, #1
 8019418:	4413      	add	r3, r2
 801941a:	00db      	lsls	r3, r3, #3
 801941c:	3308      	adds	r3, #8
 801941e:	4a08      	ldr	r2, [pc, #32]	; (8019440 <etharp_output_to_arp_index+0x124>)
 8019420:	4413      	add	r3, r2
 8019422:	3304      	adds	r3, #4
 8019424:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8019428:	9200      	str	r2, [sp, #0]
 801942a:	460a      	mov	r2, r1
 801942c:	68b9      	ldr	r1, [r7, #8]
 801942e:	68f8      	ldr	r0, [r7, #12]
 8019430:	f001 ff64 	bl	801b2fc <ethernet_output>
 8019434:	4603      	mov	r3, r0
}
 8019436:	4618      	mov	r0, r3
 8019438:	3710      	adds	r7, #16
 801943a:	46bd      	mov	sp, r7
 801943c:	bd80      	pop	{r7, pc}
 801943e:	bf00      	nop
 8019440:	20004740 	.word	0x20004740
 8019444:	080218c0 	.word	0x080218c0
 8019448:	08021a30 	.word	0x08021a30
 801944c:	08021938 	.word	0x08021938

08019450 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8019450:	b580      	push	{r7, lr}
 8019452:	b08a      	sub	sp, #40	; 0x28
 8019454:	af02      	add	r7, sp, #8
 8019456:	60f8      	str	r0, [r7, #12]
 8019458:	60b9      	str	r1, [r7, #8]
 801945a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801945c:	687b      	ldr	r3, [r7, #4]
 801945e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8019460:	68fb      	ldr	r3, [r7, #12]
 8019462:	2b00      	cmp	r3, #0
 8019464:	d106      	bne.n	8019474 <etharp_output+0x24>
 8019466:	4b73      	ldr	r3, [pc, #460]	; (8019634 <etharp_output+0x1e4>)
 8019468:	f240 321e 	movw	r2, #798	; 0x31e
 801946c:	4972      	ldr	r1, [pc, #456]	; (8019638 <etharp_output+0x1e8>)
 801946e:	4873      	ldr	r0, [pc, #460]	; (801963c <etharp_output+0x1ec>)
 8019470:	f003 f936 	bl	801c6e0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8019474:	68bb      	ldr	r3, [r7, #8]
 8019476:	2b00      	cmp	r3, #0
 8019478:	d106      	bne.n	8019488 <etharp_output+0x38>
 801947a:	4b6e      	ldr	r3, [pc, #440]	; (8019634 <etharp_output+0x1e4>)
 801947c:	f240 321f 	movw	r2, #799	; 0x31f
 8019480:	496f      	ldr	r1, [pc, #444]	; (8019640 <etharp_output+0x1f0>)
 8019482:	486e      	ldr	r0, [pc, #440]	; (801963c <etharp_output+0x1ec>)
 8019484:	f003 f92c 	bl	801c6e0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8019488:	687b      	ldr	r3, [r7, #4]
 801948a:	2b00      	cmp	r3, #0
 801948c:	d106      	bne.n	801949c <etharp_output+0x4c>
 801948e:	4b69      	ldr	r3, [pc, #420]	; (8019634 <etharp_output+0x1e4>)
 8019490:	f44f 7248 	mov.w	r2, #800	; 0x320
 8019494:	496b      	ldr	r1, [pc, #428]	; (8019644 <etharp_output+0x1f4>)
 8019496:	4869      	ldr	r0, [pc, #420]	; (801963c <etharp_output+0x1ec>)
 8019498:	f003 f922 	bl	801c6e0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801949c:	687b      	ldr	r3, [r7, #4]
 801949e:	681b      	ldr	r3, [r3, #0]
 80194a0:	68f9      	ldr	r1, [r7, #12]
 80194a2:	4618      	mov	r0, r3
 80194a4:	f000 fef8 	bl	801a298 <ip4_addr_isbroadcast_u32>
 80194a8:	4603      	mov	r3, r0
 80194aa:	2b00      	cmp	r3, #0
 80194ac:	d002      	beq.n	80194b4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80194ae:	4b66      	ldr	r3, [pc, #408]	; (8019648 <etharp_output+0x1f8>)
 80194b0:	61fb      	str	r3, [r7, #28]
 80194b2:	e0af      	b.n	8019614 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80194b4:	687b      	ldr	r3, [r7, #4]
 80194b6:	681b      	ldr	r3, [r3, #0]
 80194b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80194bc:	2be0      	cmp	r3, #224	; 0xe0
 80194be:	d118      	bne.n	80194f2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80194c0:	2301      	movs	r3, #1
 80194c2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80194c4:	2300      	movs	r3, #0
 80194c6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80194c8:	235e      	movs	r3, #94	; 0x5e
 80194ca:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80194cc:	687b      	ldr	r3, [r7, #4]
 80194ce:	3301      	adds	r3, #1
 80194d0:	781b      	ldrb	r3, [r3, #0]
 80194d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80194d6:	b2db      	uxtb	r3, r3
 80194d8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80194da:	687b      	ldr	r3, [r7, #4]
 80194dc:	3302      	adds	r3, #2
 80194de:	781b      	ldrb	r3, [r3, #0]
 80194e0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80194e2:	687b      	ldr	r3, [r7, #4]
 80194e4:	3303      	adds	r3, #3
 80194e6:	781b      	ldrb	r3, [r3, #0]
 80194e8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80194ea:	f107 0310 	add.w	r3, r7, #16
 80194ee:	61fb      	str	r3, [r7, #28]
 80194f0:	e090      	b.n	8019614 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80194f2:	687b      	ldr	r3, [r7, #4]
 80194f4:	681a      	ldr	r2, [r3, #0]
 80194f6:	68fb      	ldr	r3, [r7, #12]
 80194f8:	3304      	adds	r3, #4
 80194fa:	681b      	ldr	r3, [r3, #0]
 80194fc:	405a      	eors	r2, r3
 80194fe:	68fb      	ldr	r3, [r7, #12]
 8019500:	3308      	adds	r3, #8
 8019502:	681b      	ldr	r3, [r3, #0]
 8019504:	4013      	ands	r3, r2
 8019506:	2b00      	cmp	r3, #0
 8019508:	d012      	beq.n	8019530 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801950a:	687b      	ldr	r3, [r7, #4]
 801950c:	681b      	ldr	r3, [r3, #0]
 801950e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8019510:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8019514:	4293      	cmp	r3, r2
 8019516:	d00b      	beq.n	8019530 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8019518:	68fb      	ldr	r3, [r7, #12]
 801951a:	330c      	adds	r3, #12
 801951c:	681b      	ldr	r3, [r3, #0]
 801951e:	2b00      	cmp	r3, #0
 8019520:	d003      	beq.n	801952a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8019522:	68fb      	ldr	r3, [r7, #12]
 8019524:	330c      	adds	r3, #12
 8019526:	61bb      	str	r3, [r7, #24]
 8019528:	e002      	b.n	8019530 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801952a:	f06f 0303 	mvn.w	r3, #3
 801952e:	e07d      	b.n	801962c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8019530:	4b46      	ldr	r3, [pc, #280]	; (801964c <etharp_output+0x1fc>)
 8019532:	781b      	ldrb	r3, [r3, #0]
 8019534:	4619      	mov	r1, r3
 8019536:	4a46      	ldr	r2, [pc, #280]	; (8019650 <etharp_output+0x200>)
 8019538:	460b      	mov	r3, r1
 801953a:	005b      	lsls	r3, r3, #1
 801953c:	440b      	add	r3, r1
 801953e:	00db      	lsls	r3, r3, #3
 8019540:	4413      	add	r3, r2
 8019542:	3314      	adds	r3, #20
 8019544:	781b      	ldrb	r3, [r3, #0]
 8019546:	2b01      	cmp	r3, #1
 8019548:	d925      	bls.n	8019596 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801954a:	4b40      	ldr	r3, [pc, #256]	; (801964c <etharp_output+0x1fc>)
 801954c:	781b      	ldrb	r3, [r3, #0]
 801954e:	4619      	mov	r1, r3
 8019550:	4a3f      	ldr	r2, [pc, #252]	; (8019650 <etharp_output+0x200>)
 8019552:	460b      	mov	r3, r1
 8019554:	005b      	lsls	r3, r3, #1
 8019556:	440b      	add	r3, r1
 8019558:	00db      	lsls	r3, r3, #3
 801955a:	4413      	add	r3, r2
 801955c:	3308      	adds	r3, #8
 801955e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8019560:	68fa      	ldr	r2, [r7, #12]
 8019562:	429a      	cmp	r2, r3
 8019564:	d117      	bne.n	8019596 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8019566:	69bb      	ldr	r3, [r7, #24]
 8019568:	681a      	ldr	r2, [r3, #0]
 801956a:	4b38      	ldr	r3, [pc, #224]	; (801964c <etharp_output+0x1fc>)
 801956c:	781b      	ldrb	r3, [r3, #0]
 801956e:	4618      	mov	r0, r3
 8019570:	4937      	ldr	r1, [pc, #220]	; (8019650 <etharp_output+0x200>)
 8019572:	4603      	mov	r3, r0
 8019574:	005b      	lsls	r3, r3, #1
 8019576:	4403      	add	r3, r0
 8019578:	00db      	lsls	r3, r3, #3
 801957a:	440b      	add	r3, r1
 801957c:	3304      	adds	r3, #4
 801957e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8019580:	429a      	cmp	r2, r3
 8019582:	d108      	bne.n	8019596 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8019584:	4b31      	ldr	r3, [pc, #196]	; (801964c <etharp_output+0x1fc>)
 8019586:	781b      	ldrb	r3, [r3, #0]
 8019588:	461a      	mov	r2, r3
 801958a:	68b9      	ldr	r1, [r7, #8]
 801958c:	68f8      	ldr	r0, [r7, #12]
 801958e:	f7ff fec5 	bl	801931c <etharp_output_to_arp_index>
 8019592:	4603      	mov	r3, r0
 8019594:	e04a      	b.n	801962c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8019596:	2300      	movs	r3, #0
 8019598:	75fb      	strb	r3, [r7, #23]
 801959a:	e031      	b.n	8019600 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801959c:	7dfa      	ldrb	r2, [r7, #23]
 801959e:	492c      	ldr	r1, [pc, #176]	; (8019650 <etharp_output+0x200>)
 80195a0:	4613      	mov	r3, r2
 80195a2:	005b      	lsls	r3, r3, #1
 80195a4:	4413      	add	r3, r2
 80195a6:	00db      	lsls	r3, r3, #3
 80195a8:	440b      	add	r3, r1
 80195aa:	3314      	adds	r3, #20
 80195ac:	781b      	ldrb	r3, [r3, #0]
 80195ae:	2b01      	cmp	r3, #1
 80195b0:	d923      	bls.n	80195fa <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80195b2:	7dfa      	ldrb	r2, [r7, #23]
 80195b4:	4926      	ldr	r1, [pc, #152]	; (8019650 <etharp_output+0x200>)
 80195b6:	4613      	mov	r3, r2
 80195b8:	005b      	lsls	r3, r3, #1
 80195ba:	4413      	add	r3, r2
 80195bc:	00db      	lsls	r3, r3, #3
 80195be:	440b      	add	r3, r1
 80195c0:	3308      	adds	r3, #8
 80195c2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80195c4:	68fa      	ldr	r2, [r7, #12]
 80195c6:	429a      	cmp	r2, r3
 80195c8:	d117      	bne.n	80195fa <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80195ca:	69bb      	ldr	r3, [r7, #24]
 80195cc:	6819      	ldr	r1, [r3, #0]
 80195ce:	7dfa      	ldrb	r2, [r7, #23]
 80195d0:	481f      	ldr	r0, [pc, #124]	; (8019650 <etharp_output+0x200>)
 80195d2:	4613      	mov	r3, r2
 80195d4:	005b      	lsls	r3, r3, #1
 80195d6:	4413      	add	r3, r2
 80195d8:	00db      	lsls	r3, r3, #3
 80195da:	4403      	add	r3, r0
 80195dc:	3304      	adds	r3, #4
 80195de:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80195e0:	4299      	cmp	r1, r3
 80195e2:	d10a      	bne.n	80195fa <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80195e4:	4a19      	ldr	r2, [pc, #100]	; (801964c <etharp_output+0x1fc>)
 80195e6:	7dfb      	ldrb	r3, [r7, #23]
 80195e8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80195ea:	7dfb      	ldrb	r3, [r7, #23]
 80195ec:	461a      	mov	r2, r3
 80195ee:	68b9      	ldr	r1, [r7, #8]
 80195f0:	68f8      	ldr	r0, [r7, #12]
 80195f2:	f7ff fe93 	bl	801931c <etharp_output_to_arp_index>
 80195f6:	4603      	mov	r3, r0
 80195f8:	e018      	b.n	801962c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80195fa:	7dfb      	ldrb	r3, [r7, #23]
 80195fc:	3301      	adds	r3, #1
 80195fe:	75fb      	strb	r3, [r7, #23]
 8019600:	7dfb      	ldrb	r3, [r7, #23]
 8019602:	2b09      	cmp	r3, #9
 8019604:	d9ca      	bls.n	801959c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8019606:	68ba      	ldr	r2, [r7, #8]
 8019608:	69b9      	ldr	r1, [r7, #24]
 801960a:	68f8      	ldr	r0, [r7, #12]
 801960c:	f000 f822 	bl	8019654 <etharp_query>
 8019610:	4603      	mov	r3, r0
 8019612:	e00b      	b.n	801962c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8019614:	68fb      	ldr	r3, [r7, #12]
 8019616:	f103 0222 	add.w	r2, r3, #34	; 0x22
 801961a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801961e:	9300      	str	r3, [sp, #0]
 8019620:	69fb      	ldr	r3, [r7, #28]
 8019622:	68b9      	ldr	r1, [r7, #8]
 8019624:	68f8      	ldr	r0, [r7, #12]
 8019626:	f001 fe69 	bl	801b2fc <ethernet_output>
 801962a:	4603      	mov	r3, r0
}
 801962c:	4618      	mov	r0, r3
 801962e:	3720      	adds	r7, #32
 8019630:	46bd      	mov	sp, r7
 8019632:	bd80      	pop	{r7, pc}
 8019634:	080218c0 	.word	0x080218c0
 8019638:	08021a10 	.word	0x08021a10
 801963c:	08021938 	.word	0x08021938
 8019640:	08021a60 	.word	0x08021a60
 8019644:	08021a00 	.word	0x08021a00
 8019648:	08023050 	.word	0x08023050
 801964c:	20004830 	.word	0x20004830
 8019650:	20004740 	.word	0x20004740

08019654 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8019654:	b580      	push	{r7, lr}
 8019656:	b08c      	sub	sp, #48	; 0x30
 8019658:	af02      	add	r7, sp, #8
 801965a:	60f8      	str	r0, [r7, #12]
 801965c:	60b9      	str	r1, [r7, #8]
 801965e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8019660:	68fb      	ldr	r3, [r7, #12]
 8019662:	3322      	adds	r3, #34	; 0x22
 8019664:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8019666:	23ff      	movs	r3, #255	; 0xff
 8019668:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801966c:	2300      	movs	r3, #0
 801966e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8019670:	68bb      	ldr	r3, [r7, #8]
 8019672:	681b      	ldr	r3, [r3, #0]
 8019674:	68f9      	ldr	r1, [r7, #12]
 8019676:	4618      	mov	r0, r3
 8019678:	f000 fe0e 	bl	801a298 <ip4_addr_isbroadcast_u32>
 801967c:	4603      	mov	r3, r0
 801967e:	2b00      	cmp	r3, #0
 8019680:	d10c      	bne.n	801969c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8019682:	68bb      	ldr	r3, [r7, #8]
 8019684:	681b      	ldr	r3, [r3, #0]
 8019686:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801968a:	2be0      	cmp	r3, #224	; 0xe0
 801968c:	d006      	beq.n	801969c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801968e:	68bb      	ldr	r3, [r7, #8]
 8019690:	2b00      	cmp	r3, #0
 8019692:	d003      	beq.n	801969c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8019694:	68bb      	ldr	r3, [r7, #8]
 8019696:	681b      	ldr	r3, [r3, #0]
 8019698:	2b00      	cmp	r3, #0
 801969a:	d102      	bne.n	80196a2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801969c:	f06f 030f 	mvn.w	r3, #15
 80196a0:	e101      	b.n	80198a6 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80196a2:	68fa      	ldr	r2, [r7, #12]
 80196a4:	2101      	movs	r1, #1
 80196a6:	68b8      	ldr	r0, [r7, #8]
 80196a8:	f7ff fb60 	bl	8018d6c <etharp_find_entry>
 80196ac:	4603      	mov	r3, r0
 80196ae:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80196b0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80196b4:	2b00      	cmp	r3, #0
 80196b6:	da02      	bge.n	80196be <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80196b8:	8a7b      	ldrh	r3, [r7, #18]
 80196ba:	b25b      	sxtb	r3, r3
 80196bc:	e0f3      	b.n	80198a6 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80196be:	8a7b      	ldrh	r3, [r7, #18]
 80196c0:	2b7e      	cmp	r3, #126	; 0x7e
 80196c2:	d906      	bls.n	80196d2 <etharp_query+0x7e>
 80196c4:	4b7a      	ldr	r3, [pc, #488]	; (80198b0 <etharp_query+0x25c>)
 80196c6:	f240 32c1 	movw	r2, #961	; 0x3c1
 80196ca:	497a      	ldr	r1, [pc, #488]	; (80198b4 <etharp_query+0x260>)
 80196cc:	487a      	ldr	r0, [pc, #488]	; (80198b8 <etharp_query+0x264>)
 80196ce:	f003 f807 	bl	801c6e0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80196d2:	8a7b      	ldrh	r3, [r7, #18]
 80196d4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80196d6:	7c7a      	ldrb	r2, [r7, #17]
 80196d8:	4978      	ldr	r1, [pc, #480]	; (80198bc <etharp_query+0x268>)
 80196da:	4613      	mov	r3, r2
 80196dc:	005b      	lsls	r3, r3, #1
 80196de:	4413      	add	r3, r2
 80196e0:	00db      	lsls	r3, r3, #3
 80196e2:	440b      	add	r3, r1
 80196e4:	3314      	adds	r3, #20
 80196e6:	781b      	ldrb	r3, [r3, #0]
 80196e8:	2b00      	cmp	r3, #0
 80196ea:	d115      	bne.n	8019718 <etharp_query+0xc4>
    is_new_entry = 1;
 80196ec:	2301      	movs	r3, #1
 80196ee:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80196f0:	7c7a      	ldrb	r2, [r7, #17]
 80196f2:	4972      	ldr	r1, [pc, #456]	; (80198bc <etharp_query+0x268>)
 80196f4:	4613      	mov	r3, r2
 80196f6:	005b      	lsls	r3, r3, #1
 80196f8:	4413      	add	r3, r2
 80196fa:	00db      	lsls	r3, r3, #3
 80196fc:	440b      	add	r3, r1
 80196fe:	3314      	adds	r3, #20
 8019700:	2201      	movs	r2, #1
 8019702:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8019704:	7c7a      	ldrb	r2, [r7, #17]
 8019706:	496d      	ldr	r1, [pc, #436]	; (80198bc <etharp_query+0x268>)
 8019708:	4613      	mov	r3, r2
 801970a:	005b      	lsls	r3, r3, #1
 801970c:	4413      	add	r3, r2
 801970e:	00db      	lsls	r3, r3, #3
 8019710:	440b      	add	r3, r1
 8019712:	3308      	adds	r3, #8
 8019714:	68fa      	ldr	r2, [r7, #12]
 8019716:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8019718:	7c7a      	ldrb	r2, [r7, #17]
 801971a:	4968      	ldr	r1, [pc, #416]	; (80198bc <etharp_query+0x268>)
 801971c:	4613      	mov	r3, r2
 801971e:	005b      	lsls	r3, r3, #1
 8019720:	4413      	add	r3, r2
 8019722:	00db      	lsls	r3, r3, #3
 8019724:	440b      	add	r3, r1
 8019726:	3314      	adds	r3, #20
 8019728:	781b      	ldrb	r3, [r3, #0]
 801972a:	2b01      	cmp	r3, #1
 801972c:	d011      	beq.n	8019752 <etharp_query+0xfe>
 801972e:	7c7a      	ldrb	r2, [r7, #17]
 8019730:	4962      	ldr	r1, [pc, #392]	; (80198bc <etharp_query+0x268>)
 8019732:	4613      	mov	r3, r2
 8019734:	005b      	lsls	r3, r3, #1
 8019736:	4413      	add	r3, r2
 8019738:	00db      	lsls	r3, r3, #3
 801973a:	440b      	add	r3, r1
 801973c:	3314      	adds	r3, #20
 801973e:	781b      	ldrb	r3, [r3, #0]
 8019740:	2b01      	cmp	r3, #1
 8019742:	d806      	bhi.n	8019752 <etharp_query+0xfe>
 8019744:	4b5a      	ldr	r3, [pc, #360]	; (80198b0 <etharp_query+0x25c>)
 8019746:	f240 32cd 	movw	r2, #973	; 0x3cd
 801974a:	495d      	ldr	r1, [pc, #372]	; (80198c0 <etharp_query+0x26c>)
 801974c:	485a      	ldr	r0, [pc, #360]	; (80198b8 <etharp_query+0x264>)
 801974e:	f002 ffc7 	bl	801c6e0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8019752:	6a3b      	ldr	r3, [r7, #32]
 8019754:	2b00      	cmp	r3, #0
 8019756:	d102      	bne.n	801975e <etharp_query+0x10a>
 8019758:	687b      	ldr	r3, [r7, #4]
 801975a:	2b00      	cmp	r3, #0
 801975c:	d10c      	bne.n	8019778 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801975e:	68b9      	ldr	r1, [r7, #8]
 8019760:	68f8      	ldr	r0, [r7, #12]
 8019762:	f000 f963 	bl	8019a2c <etharp_request>
 8019766:	4603      	mov	r3, r0
 8019768:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801976c:	687b      	ldr	r3, [r7, #4]
 801976e:	2b00      	cmp	r3, #0
 8019770:	d102      	bne.n	8019778 <etharp_query+0x124>
      return result;
 8019772:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8019776:	e096      	b.n	80198a6 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8019778:	687b      	ldr	r3, [r7, #4]
 801977a:	2b00      	cmp	r3, #0
 801977c:	d106      	bne.n	801978c <etharp_query+0x138>
 801977e:	4b4c      	ldr	r3, [pc, #304]	; (80198b0 <etharp_query+0x25c>)
 8019780:	f240 32e1 	movw	r2, #993	; 0x3e1
 8019784:	494f      	ldr	r1, [pc, #316]	; (80198c4 <etharp_query+0x270>)
 8019786:	484c      	ldr	r0, [pc, #304]	; (80198b8 <etharp_query+0x264>)
 8019788:	f002 ffaa 	bl	801c6e0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801978c:	7c7a      	ldrb	r2, [r7, #17]
 801978e:	494b      	ldr	r1, [pc, #300]	; (80198bc <etharp_query+0x268>)
 8019790:	4613      	mov	r3, r2
 8019792:	005b      	lsls	r3, r3, #1
 8019794:	4413      	add	r3, r2
 8019796:	00db      	lsls	r3, r3, #3
 8019798:	440b      	add	r3, r1
 801979a:	3314      	adds	r3, #20
 801979c:	781b      	ldrb	r3, [r3, #0]
 801979e:	2b01      	cmp	r3, #1
 80197a0:	d917      	bls.n	80197d2 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80197a2:	4a49      	ldr	r2, [pc, #292]	; (80198c8 <etharp_query+0x274>)
 80197a4:	7c7b      	ldrb	r3, [r7, #17]
 80197a6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80197a8:	7c7a      	ldrb	r2, [r7, #17]
 80197aa:	4613      	mov	r3, r2
 80197ac:	005b      	lsls	r3, r3, #1
 80197ae:	4413      	add	r3, r2
 80197b0:	00db      	lsls	r3, r3, #3
 80197b2:	3308      	adds	r3, #8
 80197b4:	4a41      	ldr	r2, [pc, #260]	; (80198bc <etharp_query+0x268>)
 80197b6:	4413      	add	r3, r2
 80197b8:	3304      	adds	r3, #4
 80197ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80197be:	9200      	str	r2, [sp, #0]
 80197c0:	697a      	ldr	r2, [r7, #20]
 80197c2:	6879      	ldr	r1, [r7, #4]
 80197c4:	68f8      	ldr	r0, [r7, #12]
 80197c6:	f001 fd99 	bl	801b2fc <ethernet_output>
 80197ca:	4603      	mov	r3, r0
 80197cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80197d0:	e067      	b.n	80198a2 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80197d2:	7c7a      	ldrb	r2, [r7, #17]
 80197d4:	4939      	ldr	r1, [pc, #228]	; (80198bc <etharp_query+0x268>)
 80197d6:	4613      	mov	r3, r2
 80197d8:	005b      	lsls	r3, r3, #1
 80197da:	4413      	add	r3, r2
 80197dc:	00db      	lsls	r3, r3, #3
 80197de:	440b      	add	r3, r1
 80197e0:	3314      	adds	r3, #20
 80197e2:	781b      	ldrb	r3, [r3, #0]
 80197e4:	2b01      	cmp	r3, #1
 80197e6:	d15c      	bne.n	80198a2 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80197e8:	2300      	movs	r3, #0
 80197ea:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80197ec:	687b      	ldr	r3, [r7, #4]
 80197ee:	61fb      	str	r3, [r7, #28]
    while (p) {
 80197f0:	e01c      	b.n	801982c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80197f2:	69fb      	ldr	r3, [r7, #28]
 80197f4:	895a      	ldrh	r2, [r3, #10]
 80197f6:	69fb      	ldr	r3, [r7, #28]
 80197f8:	891b      	ldrh	r3, [r3, #8]
 80197fa:	429a      	cmp	r2, r3
 80197fc:	d10a      	bne.n	8019814 <etharp_query+0x1c0>
 80197fe:	69fb      	ldr	r3, [r7, #28]
 8019800:	681b      	ldr	r3, [r3, #0]
 8019802:	2b00      	cmp	r3, #0
 8019804:	d006      	beq.n	8019814 <etharp_query+0x1c0>
 8019806:	4b2a      	ldr	r3, [pc, #168]	; (80198b0 <etharp_query+0x25c>)
 8019808:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801980c:	492f      	ldr	r1, [pc, #188]	; (80198cc <etharp_query+0x278>)
 801980e:	482a      	ldr	r0, [pc, #168]	; (80198b8 <etharp_query+0x264>)
 8019810:	f002 ff66 	bl	801c6e0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8019814:	69fb      	ldr	r3, [r7, #28]
 8019816:	7b1b      	ldrb	r3, [r3, #12]
 8019818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801981c:	2b00      	cmp	r3, #0
 801981e:	d002      	beq.n	8019826 <etharp_query+0x1d2>
        copy_needed = 1;
 8019820:	2301      	movs	r3, #1
 8019822:	61bb      	str	r3, [r7, #24]
        break;
 8019824:	e005      	b.n	8019832 <etharp_query+0x1de>
      }
      p = p->next;
 8019826:	69fb      	ldr	r3, [r7, #28]
 8019828:	681b      	ldr	r3, [r3, #0]
 801982a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801982c:	69fb      	ldr	r3, [r7, #28]
 801982e:	2b00      	cmp	r3, #0
 8019830:	d1df      	bne.n	80197f2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8019832:	69bb      	ldr	r3, [r7, #24]
 8019834:	2b00      	cmp	r3, #0
 8019836:	d007      	beq.n	8019848 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8019838:	687a      	ldr	r2, [r7, #4]
 801983a:	f44f 7120 	mov.w	r1, #640	; 0x280
 801983e:	200e      	movs	r0, #14
 8019840:	f7f8 fa72 	bl	8011d28 <pbuf_clone>
 8019844:	61f8      	str	r0, [r7, #28]
 8019846:	e004      	b.n	8019852 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8019848:	687b      	ldr	r3, [r7, #4]
 801984a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801984c:	69f8      	ldr	r0, [r7, #28]
 801984e:	f7f8 f899 	bl	8011984 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8019852:	69fb      	ldr	r3, [r7, #28]
 8019854:	2b00      	cmp	r3, #0
 8019856:	d021      	beq.n	801989c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8019858:	7c7a      	ldrb	r2, [r7, #17]
 801985a:	4918      	ldr	r1, [pc, #96]	; (80198bc <etharp_query+0x268>)
 801985c:	4613      	mov	r3, r2
 801985e:	005b      	lsls	r3, r3, #1
 8019860:	4413      	add	r3, r2
 8019862:	00db      	lsls	r3, r3, #3
 8019864:	440b      	add	r3, r1
 8019866:	681b      	ldr	r3, [r3, #0]
 8019868:	2b00      	cmp	r3, #0
 801986a:	d00a      	beq.n	8019882 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801986c:	7c7a      	ldrb	r2, [r7, #17]
 801986e:	4913      	ldr	r1, [pc, #76]	; (80198bc <etharp_query+0x268>)
 8019870:	4613      	mov	r3, r2
 8019872:	005b      	lsls	r3, r3, #1
 8019874:	4413      	add	r3, r2
 8019876:	00db      	lsls	r3, r3, #3
 8019878:	440b      	add	r3, r1
 801987a:	681b      	ldr	r3, [r3, #0]
 801987c:	4618      	mov	r0, r3
 801987e:	f7f7 ffdb 	bl	8011838 <pbuf_free>
      }
      arp_table[i].q = p;
 8019882:	7c7a      	ldrb	r2, [r7, #17]
 8019884:	490d      	ldr	r1, [pc, #52]	; (80198bc <etharp_query+0x268>)
 8019886:	4613      	mov	r3, r2
 8019888:	005b      	lsls	r3, r3, #1
 801988a:	4413      	add	r3, r2
 801988c:	00db      	lsls	r3, r3, #3
 801988e:	440b      	add	r3, r1
 8019890:	69fa      	ldr	r2, [r7, #28]
 8019892:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8019894:	2300      	movs	r3, #0
 8019896:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801989a:	e002      	b.n	80198a2 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801989c:	23ff      	movs	r3, #255	; 0xff
 801989e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80198a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80198a6:	4618      	mov	r0, r3
 80198a8:	3728      	adds	r7, #40	; 0x28
 80198aa:	46bd      	mov	sp, r7
 80198ac:	bd80      	pop	{r7, pc}
 80198ae:	bf00      	nop
 80198b0:	080218c0 	.word	0x080218c0
 80198b4:	08021a6c 	.word	0x08021a6c
 80198b8:	08021938 	.word	0x08021938
 80198bc:	20004740 	.word	0x20004740
 80198c0:	08021a7c 	.word	0x08021a7c
 80198c4:	08021a60 	.word	0x08021a60
 80198c8:	20004830 	.word	0x20004830
 80198cc:	08021aa4 	.word	0x08021aa4

080198d0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80198d0:	b580      	push	{r7, lr}
 80198d2:	b08a      	sub	sp, #40	; 0x28
 80198d4:	af02      	add	r7, sp, #8
 80198d6:	60f8      	str	r0, [r7, #12]
 80198d8:	60b9      	str	r1, [r7, #8]
 80198da:	607a      	str	r2, [r7, #4]
 80198dc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80198de:	2300      	movs	r3, #0
 80198e0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80198e2:	68fb      	ldr	r3, [r7, #12]
 80198e4:	2b00      	cmp	r3, #0
 80198e6:	d106      	bne.n	80198f6 <etharp_raw+0x26>
 80198e8:	4b3a      	ldr	r3, [pc, #232]	; (80199d4 <etharp_raw+0x104>)
 80198ea:	f240 4257 	movw	r2, #1111	; 0x457
 80198ee:	493a      	ldr	r1, [pc, #232]	; (80199d8 <etharp_raw+0x108>)
 80198f0:	483a      	ldr	r0, [pc, #232]	; (80199dc <etharp_raw+0x10c>)
 80198f2:	f002 fef5 	bl	801c6e0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80198f6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80198fa:	211c      	movs	r1, #28
 80198fc:	200e      	movs	r0, #14
 80198fe:	f7f7 fcb7 	bl	8011270 <pbuf_alloc>
 8019902:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8019904:	69bb      	ldr	r3, [r7, #24]
 8019906:	2b00      	cmp	r3, #0
 8019908:	d102      	bne.n	8019910 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801990a:	f04f 33ff 	mov.w	r3, #4294967295
 801990e:	e05d      	b.n	80199cc <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8019910:	69bb      	ldr	r3, [r7, #24]
 8019912:	895b      	ldrh	r3, [r3, #10]
 8019914:	2b1b      	cmp	r3, #27
 8019916:	d806      	bhi.n	8019926 <etharp_raw+0x56>
 8019918:	4b2e      	ldr	r3, [pc, #184]	; (80199d4 <etharp_raw+0x104>)
 801991a:	f240 4262 	movw	r2, #1122	; 0x462
 801991e:	4930      	ldr	r1, [pc, #192]	; (80199e0 <etharp_raw+0x110>)
 8019920:	482e      	ldr	r0, [pc, #184]	; (80199dc <etharp_raw+0x10c>)
 8019922:	f002 fedd 	bl	801c6e0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8019926:	69bb      	ldr	r3, [r7, #24]
 8019928:	685b      	ldr	r3, [r3, #4]
 801992a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801992c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801992e:	4618      	mov	r0, r3
 8019930:	f7f6 fbc6 	bl	80100c0 <lwip_htons>
 8019934:	4603      	mov	r3, r0
 8019936:	461a      	mov	r2, r3
 8019938:	697b      	ldr	r3, [r7, #20]
 801993a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801993c:	68fb      	ldr	r3, [r7, #12]
 801993e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019942:	2b06      	cmp	r3, #6
 8019944:	d006      	beq.n	8019954 <etharp_raw+0x84>
 8019946:	4b23      	ldr	r3, [pc, #140]	; (80199d4 <etharp_raw+0x104>)
 8019948:	f240 4269 	movw	r2, #1129	; 0x469
 801994c:	4925      	ldr	r1, [pc, #148]	; (80199e4 <etharp_raw+0x114>)
 801994e:	4823      	ldr	r0, [pc, #140]	; (80199dc <etharp_raw+0x10c>)
 8019950:	f002 fec6 	bl	801c6e0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8019954:	697b      	ldr	r3, [r7, #20]
 8019956:	3308      	adds	r3, #8
 8019958:	2206      	movs	r2, #6
 801995a:	6839      	ldr	r1, [r7, #0]
 801995c:	4618      	mov	r0, r3
 801995e:	f002 fc2b 	bl	801c1b8 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8019962:	697b      	ldr	r3, [r7, #20]
 8019964:	3312      	adds	r3, #18
 8019966:	2206      	movs	r2, #6
 8019968:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801996a:	4618      	mov	r0, r3
 801996c:	f002 fc24 	bl	801c1b8 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8019970:	697b      	ldr	r3, [r7, #20]
 8019972:	330e      	adds	r3, #14
 8019974:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019976:	6812      	ldr	r2, [r2, #0]
 8019978:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801997a:	697b      	ldr	r3, [r7, #20]
 801997c:	3318      	adds	r3, #24
 801997e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019980:	6812      	ldr	r2, [r2, #0]
 8019982:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8019984:	697b      	ldr	r3, [r7, #20]
 8019986:	2200      	movs	r2, #0
 8019988:	701a      	strb	r2, [r3, #0]
 801998a:	2200      	movs	r2, #0
 801998c:	f042 0201 	orr.w	r2, r2, #1
 8019990:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8019992:	697b      	ldr	r3, [r7, #20]
 8019994:	2200      	movs	r2, #0
 8019996:	f042 0208 	orr.w	r2, r2, #8
 801999a:	709a      	strb	r2, [r3, #2]
 801999c:	2200      	movs	r2, #0
 801999e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80199a0:	697b      	ldr	r3, [r7, #20]
 80199a2:	2206      	movs	r2, #6
 80199a4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80199a6:	697b      	ldr	r3, [r7, #20]
 80199a8:	2204      	movs	r2, #4
 80199aa:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80199ac:	f640 0306 	movw	r3, #2054	; 0x806
 80199b0:	9300      	str	r3, [sp, #0]
 80199b2:	687b      	ldr	r3, [r7, #4]
 80199b4:	68ba      	ldr	r2, [r7, #8]
 80199b6:	69b9      	ldr	r1, [r7, #24]
 80199b8:	68f8      	ldr	r0, [r7, #12]
 80199ba:	f001 fc9f 	bl	801b2fc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80199be:	69b8      	ldr	r0, [r7, #24]
 80199c0:	f7f7 ff3a 	bl	8011838 <pbuf_free>
  p = NULL;
 80199c4:	2300      	movs	r3, #0
 80199c6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80199c8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80199cc:	4618      	mov	r0, r3
 80199ce:	3720      	adds	r7, #32
 80199d0:	46bd      	mov	sp, r7
 80199d2:	bd80      	pop	{r7, pc}
 80199d4:	080218c0 	.word	0x080218c0
 80199d8:	08021a10 	.word	0x08021a10
 80199dc:	08021938 	.word	0x08021938
 80199e0:	08021ac0 	.word	0x08021ac0
 80199e4:	08021af4 	.word	0x08021af4

080199e8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80199e8:	b580      	push	{r7, lr}
 80199ea:	b088      	sub	sp, #32
 80199ec:	af04      	add	r7, sp, #16
 80199ee:	60f8      	str	r0, [r7, #12]
 80199f0:	60b9      	str	r1, [r7, #8]
 80199f2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80199f4:	68fb      	ldr	r3, [r7, #12]
 80199f6:	f103 0122 	add.w	r1, r3, #34	; 0x22
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80199fa:	68fb      	ldr	r3, [r7, #12]
 80199fc:	f103 0022 	add.w	r0, r3, #34	; 0x22
 8019a00:	68fb      	ldr	r3, [r7, #12]
 8019a02:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8019a04:	2201      	movs	r2, #1
 8019a06:	9203      	str	r2, [sp, #12]
 8019a08:	68ba      	ldr	r2, [r7, #8]
 8019a0a:	9202      	str	r2, [sp, #8]
 8019a0c:	4a06      	ldr	r2, [pc, #24]	; (8019a28 <etharp_request_dst+0x40>)
 8019a0e:	9201      	str	r2, [sp, #4]
 8019a10:	9300      	str	r3, [sp, #0]
 8019a12:	4603      	mov	r3, r0
 8019a14:	687a      	ldr	r2, [r7, #4]
 8019a16:	68f8      	ldr	r0, [r7, #12]
 8019a18:	f7ff ff5a 	bl	80198d0 <etharp_raw>
 8019a1c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8019a1e:	4618      	mov	r0, r3
 8019a20:	3710      	adds	r7, #16
 8019a22:	46bd      	mov	sp, r7
 8019a24:	bd80      	pop	{r7, pc}
 8019a26:	bf00      	nop
 8019a28:	08023058 	.word	0x08023058

08019a2c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8019a2c:	b580      	push	{r7, lr}
 8019a2e:	b082      	sub	sp, #8
 8019a30:	af00      	add	r7, sp, #0
 8019a32:	6078      	str	r0, [r7, #4]
 8019a34:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8019a36:	4a05      	ldr	r2, [pc, #20]	; (8019a4c <etharp_request+0x20>)
 8019a38:	6839      	ldr	r1, [r7, #0]
 8019a3a:	6878      	ldr	r0, [r7, #4]
 8019a3c:	f7ff ffd4 	bl	80199e8 <etharp_request_dst>
 8019a40:	4603      	mov	r3, r0
}
 8019a42:	4618      	mov	r0, r3
 8019a44:	3708      	adds	r7, #8
 8019a46:	46bd      	mov	sp, r7
 8019a48:	bd80      	pop	{r7, pc}
 8019a4a:	bf00      	nop
 8019a4c:	08023050 	.word	0x08023050

08019a50 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8019a50:	b580      	push	{r7, lr}
 8019a52:	b08e      	sub	sp, #56	; 0x38
 8019a54:	af04      	add	r7, sp, #16
 8019a56:	6078      	str	r0, [r7, #4]
 8019a58:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8019a5a:	4b79      	ldr	r3, [pc, #484]	; (8019c40 <icmp_input+0x1f0>)
 8019a5c:	689b      	ldr	r3, [r3, #8]
 8019a5e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8019a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a62:	781b      	ldrb	r3, [r3, #0]
 8019a64:	f003 030f 	and.w	r3, r3, #15
 8019a68:	b2db      	uxtb	r3, r3
 8019a6a:	009b      	lsls	r3, r3, #2
 8019a6c:	b2db      	uxtb	r3, r3
 8019a6e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8019a70:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019a72:	2b13      	cmp	r3, #19
 8019a74:	f240 80cd 	bls.w	8019c12 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8019a78:	687b      	ldr	r3, [r7, #4]
 8019a7a:	895b      	ldrh	r3, [r3, #10]
 8019a7c:	2b03      	cmp	r3, #3
 8019a7e:	f240 80ca 	bls.w	8019c16 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8019a82:	687b      	ldr	r3, [r7, #4]
 8019a84:	685b      	ldr	r3, [r3, #4]
 8019a86:	781b      	ldrb	r3, [r3, #0]
 8019a88:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8019a8c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8019a90:	2b00      	cmp	r3, #0
 8019a92:	f000 80b7 	beq.w	8019c04 <icmp_input+0x1b4>
 8019a96:	2b08      	cmp	r3, #8
 8019a98:	f040 80b7 	bne.w	8019c0a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8019a9c:	4b69      	ldr	r3, [pc, #420]	; (8019c44 <icmp_input+0x1f4>)
 8019a9e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019aa0:	4b67      	ldr	r3, [pc, #412]	; (8019c40 <icmp_input+0x1f0>)
 8019aa2:	695b      	ldr	r3, [r3, #20]
 8019aa4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019aa8:	2be0      	cmp	r3, #224	; 0xe0
 8019aaa:	f000 80bb 	beq.w	8019c24 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8019aae:	4b64      	ldr	r3, [pc, #400]	; (8019c40 <icmp_input+0x1f0>)
 8019ab0:	695b      	ldr	r3, [r3, #20]
 8019ab2:	4a63      	ldr	r2, [pc, #396]	; (8019c40 <icmp_input+0x1f0>)
 8019ab4:	6812      	ldr	r2, [r2, #0]
 8019ab6:	4611      	mov	r1, r2
 8019ab8:	4618      	mov	r0, r3
 8019aba:	f000 fbed 	bl	801a298 <ip4_addr_isbroadcast_u32>
 8019abe:	4603      	mov	r3, r0
 8019ac0:	2b00      	cmp	r3, #0
 8019ac2:	f040 80b1 	bne.w	8019c28 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8019ac6:	687b      	ldr	r3, [r7, #4]
 8019ac8:	891b      	ldrh	r3, [r3, #8]
 8019aca:	2b07      	cmp	r3, #7
 8019acc:	f240 80a5 	bls.w	8019c1a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8019ad0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019ad2:	330e      	adds	r3, #14
 8019ad4:	4619      	mov	r1, r3
 8019ad6:	6878      	ldr	r0, [r7, #4]
 8019ad8:	f7f7 fe18 	bl	801170c <pbuf_add_header>
 8019adc:	4603      	mov	r3, r0
 8019ade:	2b00      	cmp	r3, #0
 8019ae0:	d04b      	beq.n	8019b7a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8019ae2:	687b      	ldr	r3, [r7, #4]
 8019ae4:	891a      	ldrh	r2, [r3, #8]
 8019ae6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019ae8:	4413      	add	r3, r2
 8019aea:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8019aec:	687b      	ldr	r3, [r7, #4]
 8019aee:	891b      	ldrh	r3, [r3, #8]
 8019af0:	8b7a      	ldrh	r2, [r7, #26]
 8019af2:	429a      	cmp	r2, r3
 8019af4:	f0c0 809a 	bcc.w	8019c2c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8019af8:	8b7b      	ldrh	r3, [r7, #26]
 8019afa:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019afe:	4619      	mov	r1, r3
 8019b00:	200e      	movs	r0, #14
 8019b02:	f7f7 fbb5 	bl	8011270 <pbuf_alloc>
 8019b06:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8019b08:	697b      	ldr	r3, [r7, #20]
 8019b0a:	2b00      	cmp	r3, #0
 8019b0c:	f000 8090 	beq.w	8019c30 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8019b10:	697b      	ldr	r3, [r7, #20]
 8019b12:	895b      	ldrh	r3, [r3, #10]
 8019b14:	461a      	mov	r2, r3
 8019b16:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019b18:	3308      	adds	r3, #8
 8019b1a:	429a      	cmp	r2, r3
 8019b1c:	d203      	bcs.n	8019b26 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8019b1e:	6978      	ldr	r0, [r7, #20]
 8019b20:	f7f7 fe8a 	bl	8011838 <pbuf_free>
          goto icmperr;
 8019b24:	e085      	b.n	8019c32 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8019b26:	697b      	ldr	r3, [r7, #20]
 8019b28:	685b      	ldr	r3, [r3, #4]
 8019b2a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8019b2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019b2e:	4618      	mov	r0, r3
 8019b30:	f002 fb42 	bl	801c1b8 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8019b34:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019b36:	4619      	mov	r1, r3
 8019b38:	6978      	ldr	r0, [r7, #20]
 8019b3a:	f7f7 fdf7 	bl	801172c <pbuf_remove_header>
 8019b3e:	4603      	mov	r3, r0
 8019b40:	2b00      	cmp	r3, #0
 8019b42:	d009      	beq.n	8019b58 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8019b44:	4b40      	ldr	r3, [pc, #256]	; (8019c48 <icmp_input+0x1f8>)
 8019b46:	22b6      	movs	r2, #182	; 0xb6
 8019b48:	4940      	ldr	r1, [pc, #256]	; (8019c4c <icmp_input+0x1fc>)
 8019b4a:	4841      	ldr	r0, [pc, #260]	; (8019c50 <icmp_input+0x200>)
 8019b4c:	f002 fdc8 	bl	801c6e0 <iprintf>
          pbuf_free(r);
 8019b50:	6978      	ldr	r0, [r7, #20]
 8019b52:	f7f7 fe71 	bl	8011838 <pbuf_free>
          goto icmperr;
 8019b56:	e06c      	b.n	8019c32 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8019b58:	6879      	ldr	r1, [r7, #4]
 8019b5a:	6978      	ldr	r0, [r7, #20]
 8019b5c:	f7f7 ffa0 	bl	8011aa0 <pbuf_copy>
 8019b60:	4603      	mov	r3, r0
 8019b62:	2b00      	cmp	r3, #0
 8019b64:	d003      	beq.n	8019b6e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8019b66:	6978      	ldr	r0, [r7, #20]
 8019b68:	f7f7 fe66 	bl	8011838 <pbuf_free>
          goto icmperr;
 8019b6c:	e061      	b.n	8019c32 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8019b6e:	6878      	ldr	r0, [r7, #4]
 8019b70:	f7f7 fe62 	bl	8011838 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8019b74:	697b      	ldr	r3, [r7, #20]
 8019b76:	607b      	str	r3, [r7, #4]
 8019b78:	e00f      	b.n	8019b9a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8019b7a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019b7c:	330e      	adds	r3, #14
 8019b7e:	4619      	mov	r1, r3
 8019b80:	6878      	ldr	r0, [r7, #4]
 8019b82:	f7f7 fdd3 	bl	801172c <pbuf_remove_header>
 8019b86:	4603      	mov	r3, r0
 8019b88:	2b00      	cmp	r3, #0
 8019b8a:	d006      	beq.n	8019b9a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8019b8c:	4b2e      	ldr	r3, [pc, #184]	; (8019c48 <icmp_input+0x1f8>)
 8019b8e:	22c7      	movs	r2, #199	; 0xc7
 8019b90:	4930      	ldr	r1, [pc, #192]	; (8019c54 <icmp_input+0x204>)
 8019b92:	482f      	ldr	r0, [pc, #188]	; (8019c50 <icmp_input+0x200>)
 8019b94:	f002 fda4 	bl	801c6e0 <iprintf>
          goto icmperr;
 8019b98:	e04b      	b.n	8019c32 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8019b9a:	687b      	ldr	r3, [r7, #4]
 8019b9c:	685b      	ldr	r3, [r3, #4]
 8019b9e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8019ba0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019ba2:	4619      	mov	r1, r3
 8019ba4:	6878      	ldr	r0, [r7, #4]
 8019ba6:	f7f7 fdb1 	bl	801170c <pbuf_add_header>
 8019baa:	4603      	mov	r3, r0
 8019bac:	2b00      	cmp	r3, #0
 8019bae:	d12b      	bne.n	8019c08 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8019bb0:	687b      	ldr	r3, [r7, #4]
 8019bb2:	685b      	ldr	r3, [r3, #4]
 8019bb4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8019bb6:	69fb      	ldr	r3, [r7, #28]
 8019bb8:	681a      	ldr	r2, [r3, #0]
 8019bba:	68fb      	ldr	r3, [r7, #12]
 8019bbc:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8019bbe:	4b20      	ldr	r3, [pc, #128]	; (8019c40 <icmp_input+0x1f0>)
 8019bc0:	691a      	ldr	r2, [r3, #16]
 8019bc2:	68fb      	ldr	r3, [r7, #12]
 8019bc4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8019bc6:	693b      	ldr	r3, [r7, #16]
 8019bc8:	2200      	movs	r2, #0
 8019bca:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8019bcc:	693b      	ldr	r3, [r7, #16]
 8019bce:	2200      	movs	r2, #0
 8019bd0:	709a      	strb	r2, [r3, #2]
 8019bd2:	2200      	movs	r2, #0
 8019bd4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8019bd6:	68fb      	ldr	r3, [r7, #12]
 8019bd8:	22ff      	movs	r2, #255	; 0xff
 8019bda:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8019bdc:	68fb      	ldr	r3, [r7, #12]
 8019bde:	2200      	movs	r2, #0
 8019be0:	729a      	strb	r2, [r3, #10]
 8019be2:	2200      	movs	r2, #0
 8019be4:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8019be6:	683b      	ldr	r3, [r7, #0]
 8019be8:	9302      	str	r3, [sp, #8]
 8019bea:	2301      	movs	r3, #1
 8019bec:	9301      	str	r3, [sp, #4]
 8019bee:	2300      	movs	r3, #0
 8019bf0:	9300      	str	r3, [sp, #0]
 8019bf2:	23ff      	movs	r3, #255	; 0xff
 8019bf4:	2200      	movs	r2, #0
 8019bf6:	69f9      	ldr	r1, [r7, #28]
 8019bf8:	6878      	ldr	r0, [r7, #4]
 8019bfa:	f000 fa75 	bl	801a0e8 <ip4_output_if>
 8019bfe:	4603      	mov	r3, r0
 8019c00:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8019c02:	e001      	b.n	8019c08 <icmp_input+0x1b8>
      break;
 8019c04:	bf00      	nop
 8019c06:	e000      	b.n	8019c0a <icmp_input+0x1ba>
      break;
 8019c08:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8019c0a:	6878      	ldr	r0, [r7, #4]
 8019c0c:	f7f7 fe14 	bl	8011838 <pbuf_free>
  return;
 8019c10:	e013      	b.n	8019c3a <icmp_input+0x1ea>
    goto lenerr;
 8019c12:	bf00      	nop
 8019c14:	e002      	b.n	8019c1c <icmp_input+0x1cc>
    goto lenerr;
 8019c16:	bf00      	nop
 8019c18:	e000      	b.n	8019c1c <icmp_input+0x1cc>
        goto lenerr;
 8019c1a:	bf00      	nop
lenerr:
  pbuf_free(p);
 8019c1c:	6878      	ldr	r0, [r7, #4]
 8019c1e:	f7f7 fe0b 	bl	8011838 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8019c22:	e00a      	b.n	8019c3a <icmp_input+0x1ea>
        goto icmperr;
 8019c24:	bf00      	nop
 8019c26:	e004      	b.n	8019c32 <icmp_input+0x1e2>
        goto icmperr;
 8019c28:	bf00      	nop
 8019c2a:	e002      	b.n	8019c32 <icmp_input+0x1e2>
          goto icmperr;
 8019c2c:	bf00      	nop
 8019c2e:	e000      	b.n	8019c32 <icmp_input+0x1e2>
          goto icmperr;
 8019c30:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8019c32:	6878      	ldr	r0, [r7, #4]
 8019c34:	f7f7 fe00 	bl	8011838 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8019c38:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8019c3a:	3728      	adds	r7, #40	; 0x28
 8019c3c:	46bd      	mov	sp, r7
 8019c3e:	bd80      	pop	{r7, pc}
 8019c40:	20007f08 	.word	0x20007f08
 8019c44:	20007f1c 	.word	0x20007f1c
 8019c48:	08021b38 	.word	0x08021b38
 8019c4c:	08021b70 	.word	0x08021b70
 8019c50:	08021ba8 	.word	0x08021ba8
 8019c54:	08021bd0 	.word	0x08021bd0

08019c58 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8019c58:	b580      	push	{r7, lr}
 8019c5a:	b082      	sub	sp, #8
 8019c5c:	af00      	add	r7, sp, #0
 8019c5e:	6078      	str	r0, [r7, #4]
 8019c60:	460b      	mov	r3, r1
 8019c62:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8019c64:	78fb      	ldrb	r3, [r7, #3]
 8019c66:	461a      	mov	r2, r3
 8019c68:	2103      	movs	r1, #3
 8019c6a:	6878      	ldr	r0, [r7, #4]
 8019c6c:	f000 f814 	bl	8019c98 <icmp_send_response>
}
 8019c70:	bf00      	nop
 8019c72:	3708      	adds	r7, #8
 8019c74:	46bd      	mov	sp, r7
 8019c76:	bd80      	pop	{r7, pc}

08019c78 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8019c78:	b580      	push	{r7, lr}
 8019c7a:	b082      	sub	sp, #8
 8019c7c:	af00      	add	r7, sp, #0
 8019c7e:	6078      	str	r0, [r7, #4]
 8019c80:	460b      	mov	r3, r1
 8019c82:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8019c84:	78fb      	ldrb	r3, [r7, #3]
 8019c86:	461a      	mov	r2, r3
 8019c88:	210b      	movs	r1, #11
 8019c8a:	6878      	ldr	r0, [r7, #4]
 8019c8c:	f000 f804 	bl	8019c98 <icmp_send_response>
}
 8019c90:	bf00      	nop
 8019c92:	3708      	adds	r7, #8
 8019c94:	46bd      	mov	sp, r7
 8019c96:	bd80      	pop	{r7, pc}

08019c98 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8019c98:	b580      	push	{r7, lr}
 8019c9a:	b08c      	sub	sp, #48	; 0x30
 8019c9c:	af04      	add	r7, sp, #16
 8019c9e:	6078      	str	r0, [r7, #4]
 8019ca0:	460b      	mov	r3, r1
 8019ca2:	70fb      	strb	r3, [r7, #3]
 8019ca4:	4613      	mov	r3, r2
 8019ca6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8019ca8:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019cac:	2124      	movs	r1, #36	; 0x24
 8019cae:	2022      	movs	r0, #34	; 0x22
 8019cb0:	f7f7 fade 	bl	8011270 <pbuf_alloc>
 8019cb4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8019cb6:	69fb      	ldr	r3, [r7, #28]
 8019cb8:	2b00      	cmp	r3, #0
 8019cba:	d04c      	beq.n	8019d56 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8019cbc:	69fb      	ldr	r3, [r7, #28]
 8019cbe:	895b      	ldrh	r3, [r3, #10]
 8019cc0:	2b23      	cmp	r3, #35	; 0x23
 8019cc2:	d806      	bhi.n	8019cd2 <icmp_send_response+0x3a>
 8019cc4:	4b26      	ldr	r3, [pc, #152]	; (8019d60 <icmp_send_response+0xc8>)
 8019cc6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8019cca:	4926      	ldr	r1, [pc, #152]	; (8019d64 <icmp_send_response+0xcc>)
 8019ccc:	4826      	ldr	r0, [pc, #152]	; (8019d68 <icmp_send_response+0xd0>)
 8019cce:	f002 fd07 	bl	801c6e0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8019cd2:	687b      	ldr	r3, [r7, #4]
 8019cd4:	685b      	ldr	r3, [r3, #4]
 8019cd6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8019cd8:	69fb      	ldr	r3, [r7, #28]
 8019cda:	685b      	ldr	r3, [r3, #4]
 8019cdc:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8019cde:	697b      	ldr	r3, [r7, #20]
 8019ce0:	78fa      	ldrb	r2, [r7, #3]
 8019ce2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8019ce4:	697b      	ldr	r3, [r7, #20]
 8019ce6:	78ba      	ldrb	r2, [r7, #2]
 8019ce8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8019cea:	697b      	ldr	r3, [r7, #20]
 8019cec:	2200      	movs	r2, #0
 8019cee:	711a      	strb	r2, [r3, #4]
 8019cf0:	2200      	movs	r2, #0
 8019cf2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8019cf4:	697b      	ldr	r3, [r7, #20]
 8019cf6:	2200      	movs	r2, #0
 8019cf8:	719a      	strb	r2, [r3, #6]
 8019cfa:	2200      	movs	r2, #0
 8019cfc:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8019cfe:	69fb      	ldr	r3, [r7, #28]
 8019d00:	685b      	ldr	r3, [r3, #4]
 8019d02:	f103 0008 	add.w	r0, r3, #8
 8019d06:	687b      	ldr	r3, [r7, #4]
 8019d08:	685b      	ldr	r3, [r3, #4]
 8019d0a:	221c      	movs	r2, #28
 8019d0c:	4619      	mov	r1, r3
 8019d0e:	f002 fa53 	bl	801c1b8 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8019d12:	69bb      	ldr	r3, [r7, #24]
 8019d14:	68db      	ldr	r3, [r3, #12]
 8019d16:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8019d18:	f107 030c 	add.w	r3, r7, #12
 8019d1c:	4618      	mov	r0, r3
 8019d1e:	f000 f825 	bl	8019d6c <ip4_route>
 8019d22:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8019d24:	693b      	ldr	r3, [r7, #16]
 8019d26:	2b00      	cmp	r3, #0
 8019d28:	d011      	beq.n	8019d4e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8019d2a:	697b      	ldr	r3, [r7, #20]
 8019d2c:	2200      	movs	r2, #0
 8019d2e:	709a      	strb	r2, [r3, #2]
 8019d30:	2200      	movs	r2, #0
 8019d32:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8019d34:	f107 020c 	add.w	r2, r7, #12
 8019d38:	693b      	ldr	r3, [r7, #16]
 8019d3a:	9302      	str	r3, [sp, #8]
 8019d3c:	2301      	movs	r3, #1
 8019d3e:	9301      	str	r3, [sp, #4]
 8019d40:	2300      	movs	r3, #0
 8019d42:	9300      	str	r3, [sp, #0]
 8019d44:	23ff      	movs	r3, #255	; 0xff
 8019d46:	2100      	movs	r1, #0
 8019d48:	69f8      	ldr	r0, [r7, #28]
 8019d4a:	f000 f9cd 	bl	801a0e8 <ip4_output_if>
  }
  pbuf_free(q);
 8019d4e:	69f8      	ldr	r0, [r7, #28]
 8019d50:	f7f7 fd72 	bl	8011838 <pbuf_free>
 8019d54:	e000      	b.n	8019d58 <icmp_send_response+0xc0>
    return;
 8019d56:	bf00      	nop
}
 8019d58:	3720      	adds	r7, #32
 8019d5a:	46bd      	mov	sp, r7
 8019d5c:	bd80      	pop	{r7, pc}
 8019d5e:	bf00      	nop
 8019d60:	08021b38 	.word	0x08021b38
 8019d64:	08021c04 	.word	0x08021c04
 8019d68:	08021ba8 	.word	0x08021ba8

08019d6c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8019d6c:	b480      	push	{r7}
 8019d6e:	b085      	sub	sp, #20
 8019d70:	af00      	add	r7, sp, #0
 8019d72:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8019d74:	4b33      	ldr	r3, [pc, #204]	; (8019e44 <ip4_route+0xd8>)
 8019d76:	681b      	ldr	r3, [r3, #0]
 8019d78:	60fb      	str	r3, [r7, #12]
 8019d7a:	e036      	b.n	8019dea <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8019d7c:	68fb      	ldr	r3, [r7, #12]
 8019d7e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8019d82:	f003 0301 	and.w	r3, r3, #1
 8019d86:	b2db      	uxtb	r3, r3
 8019d88:	2b00      	cmp	r3, #0
 8019d8a:	d02b      	beq.n	8019de4 <ip4_route+0x78>
 8019d8c:	68fb      	ldr	r3, [r7, #12]
 8019d8e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8019d92:	089b      	lsrs	r3, r3, #2
 8019d94:	f003 0301 	and.w	r3, r3, #1
 8019d98:	b2db      	uxtb	r3, r3
 8019d9a:	2b00      	cmp	r3, #0
 8019d9c:	d022      	beq.n	8019de4 <ip4_route+0x78>
 8019d9e:	68fb      	ldr	r3, [r7, #12]
 8019da0:	3304      	adds	r3, #4
 8019da2:	681b      	ldr	r3, [r3, #0]
 8019da4:	2b00      	cmp	r3, #0
 8019da6:	d01d      	beq.n	8019de4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8019da8:	687b      	ldr	r3, [r7, #4]
 8019daa:	681a      	ldr	r2, [r3, #0]
 8019dac:	68fb      	ldr	r3, [r7, #12]
 8019dae:	3304      	adds	r3, #4
 8019db0:	681b      	ldr	r3, [r3, #0]
 8019db2:	405a      	eors	r2, r3
 8019db4:	68fb      	ldr	r3, [r7, #12]
 8019db6:	3308      	adds	r3, #8
 8019db8:	681b      	ldr	r3, [r3, #0]
 8019dba:	4013      	ands	r3, r2
 8019dbc:	2b00      	cmp	r3, #0
 8019dbe:	d101      	bne.n	8019dc4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8019dc0:	68fb      	ldr	r3, [r7, #12]
 8019dc2:	e038      	b.n	8019e36 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8019dc4:	68fb      	ldr	r3, [r7, #12]
 8019dc6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8019dca:	f003 0302 	and.w	r3, r3, #2
 8019dce:	2b00      	cmp	r3, #0
 8019dd0:	d108      	bne.n	8019de4 <ip4_route+0x78>
 8019dd2:	687b      	ldr	r3, [r7, #4]
 8019dd4:	681a      	ldr	r2, [r3, #0]
 8019dd6:	68fb      	ldr	r3, [r7, #12]
 8019dd8:	330c      	adds	r3, #12
 8019dda:	681b      	ldr	r3, [r3, #0]
 8019ddc:	429a      	cmp	r2, r3
 8019dde:	d101      	bne.n	8019de4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8019de0:	68fb      	ldr	r3, [r7, #12]
 8019de2:	e028      	b.n	8019e36 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8019de4:	68fb      	ldr	r3, [r7, #12]
 8019de6:	681b      	ldr	r3, [r3, #0]
 8019de8:	60fb      	str	r3, [r7, #12]
 8019dea:	68fb      	ldr	r3, [r7, #12]
 8019dec:	2b00      	cmp	r3, #0
 8019dee:	d1c5      	bne.n	8019d7c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8019df0:	4b15      	ldr	r3, [pc, #84]	; (8019e48 <ip4_route+0xdc>)
 8019df2:	681b      	ldr	r3, [r3, #0]
 8019df4:	2b00      	cmp	r3, #0
 8019df6:	d01a      	beq.n	8019e2e <ip4_route+0xc2>
 8019df8:	4b13      	ldr	r3, [pc, #76]	; (8019e48 <ip4_route+0xdc>)
 8019dfa:	681b      	ldr	r3, [r3, #0]
 8019dfc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8019e00:	f003 0301 	and.w	r3, r3, #1
 8019e04:	2b00      	cmp	r3, #0
 8019e06:	d012      	beq.n	8019e2e <ip4_route+0xc2>
 8019e08:	4b0f      	ldr	r3, [pc, #60]	; (8019e48 <ip4_route+0xdc>)
 8019e0a:	681b      	ldr	r3, [r3, #0]
 8019e0c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8019e10:	f003 0304 	and.w	r3, r3, #4
 8019e14:	2b00      	cmp	r3, #0
 8019e16:	d00a      	beq.n	8019e2e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8019e18:	4b0b      	ldr	r3, [pc, #44]	; (8019e48 <ip4_route+0xdc>)
 8019e1a:	681b      	ldr	r3, [r3, #0]
 8019e1c:	3304      	adds	r3, #4
 8019e1e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8019e20:	2b00      	cmp	r3, #0
 8019e22:	d004      	beq.n	8019e2e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8019e24:	687b      	ldr	r3, [r7, #4]
 8019e26:	681b      	ldr	r3, [r3, #0]
 8019e28:	b2db      	uxtb	r3, r3
 8019e2a:	2b7f      	cmp	r3, #127	; 0x7f
 8019e2c:	d101      	bne.n	8019e32 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8019e2e:	2300      	movs	r3, #0
 8019e30:	e001      	b.n	8019e36 <ip4_route+0xca>
  }

  return netif_default;
 8019e32:	4b05      	ldr	r3, [pc, #20]	; (8019e48 <ip4_route+0xdc>)
 8019e34:	681b      	ldr	r3, [r3, #0]
}
 8019e36:	4618      	mov	r0, r3
 8019e38:	3714      	adds	r7, #20
 8019e3a:	46bd      	mov	sp, r7
 8019e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e40:	4770      	bx	lr
 8019e42:	bf00      	nop
 8019e44:	2000b60c 	.word	0x2000b60c
 8019e48:	2000b610 	.word	0x2000b610

08019e4c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8019e4c:	b580      	push	{r7, lr}
 8019e4e:	b082      	sub	sp, #8
 8019e50:	af00      	add	r7, sp, #0
 8019e52:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8019e54:	687b      	ldr	r3, [r7, #4]
 8019e56:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8019e5a:	f003 0301 	and.w	r3, r3, #1
 8019e5e:	b2db      	uxtb	r3, r3
 8019e60:	2b00      	cmp	r3, #0
 8019e62:	d016      	beq.n	8019e92 <ip4_input_accept+0x46>
 8019e64:	687b      	ldr	r3, [r7, #4]
 8019e66:	3304      	adds	r3, #4
 8019e68:	681b      	ldr	r3, [r3, #0]
 8019e6a:	2b00      	cmp	r3, #0
 8019e6c:	d011      	beq.n	8019e92 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8019e6e:	4b0b      	ldr	r3, [pc, #44]	; (8019e9c <ip4_input_accept+0x50>)
 8019e70:	695a      	ldr	r2, [r3, #20]
 8019e72:	687b      	ldr	r3, [r7, #4]
 8019e74:	3304      	adds	r3, #4
 8019e76:	681b      	ldr	r3, [r3, #0]
 8019e78:	429a      	cmp	r2, r3
 8019e7a:	d008      	beq.n	8019e8e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8019e7c:	4b07      	ldr	r3, [pc, #28]	; (8019e9c <ip4_input_accept+0x50>)
 8019e7e:	695b      	ldr	r3, [r3, #20]
 8019e80:	6879      	ldr	r1, [r7, #4]
 8019e82:	4618      	mov	r0, r3
 8019e84:	f000 fa08 	bl	801a298 <ip4_addr_isbroadcast_u32>
 8019e88:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8019e8a:	2b00      	cmp	r3, #0
 8019e8c:	d001      	beq.n	8019e92 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8019e8e:	2301      	movs	r3, #1
 8019e90:	e000      	b.n	8019e94 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8019e92:	2300      	movs	r3, #0
}
 8019e94:	4618      	mov	r0, r3
 8019e96:	3708      	adds	r7, #8
 8019e98:	46bd      	mov	sp, r7
 8019e9a:	bd80      	pop	{r7, pc}
 8019e9c:	20007f08 	.word	0x20007f08

08019ea0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8019ea0:	b580      	push	{r7, lr}
 8019ea2:	b086      	sub	sp, #24
 8019ea4:	af00      	add	r7, sp, #0
 8019ea6:	6078      	str	r0, [r7, #4]
 8019ea8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8019eaa:	687b      	ldr	r3, [r7, #4]
 8019eac:	685b      	ldr	r3, [r3, #4]
 8019eae:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8019eb0:	697b      	ldr	r3, [r7, #20]
 8019eb2:	781b      	ldrb	r3, [r3, #0]
 8019eb4:	091b      	lsrs	r3, r3, #4
 8019eb6:	b2db      	uxtb	r3, r3
 8019eb8:	2b04      	cmp	r3, #4
 8019eba:	d004      	beq.n	8019ec6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8019ebc:	6878      	ldr	r0, [r7, #4]
 8019ebe:	f7f7 fcbb 	bl	8011838 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8019ec2:	2300      	movs	r3, #0
 8019ec4:	e107      	b.n	801a0d6 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8019ec6:	697b      	ldr	r3, [r7, #20]
 8019ec8:	781b      	ldrb	r3, [r3, #0]
 8019eca:	f003 030f 	and.w	r3, r3, #15
 8019ece:	b2db      	uxtb	r3, r3
 8019ed0:	009b      	lsls	r3, r3, #2
 8019ed2:	b2db      	uxtb	r3, r3
 8019ed4:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8019ed6:	697b      	ldr	r3, [r7, #20]
 8019ed8:	885b      	ldrh	r3, [r3, #2]
 8019eda:	b29b      	uxth	r3, r3
 8019edc:	4618      	mov	r0, r3
 8019ede:	f7f6 f8ef 	bl	80100c0 <lwip_htons>
 8019ee2:	4603      	mov	r3, r0
 8019ee4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8019ee6:	687b      	ldr	r3, [r7, #4]
 8019ee8:	891b      	ldrh	r3, [r3, #8]
 8019eea:	89ba      	ldrh	r2, [r7, #12]
 8019eec:	429a      	cmp	r2, r3
 8019eee:	d204      	bcs.n	8019efa <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8019ef0:	89bb      	ldrh	r3, [r7, #12]
 8019ef2:	4619      	mov	r1, r3
 8019ef4:	6878      	ldr	r0, [r7, #4]
 8019ef6:	f7f7 fb19 	bl	801152c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8019efa:	687b      	ldr	r3, [r7, #4]
 8019efc:	895b      	ldrh	r3, [r3, #10]
 8019efe:	89fa      	ldrh	r2, [r7, #14]
 8019f00:	429a      	cmp	r2, r3
 8019f02:	d807      	bhi.n	8019f14 <ip4_input+0x74>
 8019f04:	687b      	ldr	r3, [r7, #4]
 8019f06:	891b      	ldrh	r3, [r3, #8]
 8019f08:	89ba      	ldrh	r2, [r7, #12]
 8019f0a:	429a      	cmp	r2, r3
 8019f0c:	d802      	bhi.n	8019f14 <ip4_input+0x74>
 8019f0e:	89fb      	ldrh	r3, [r7, #14]
 8019f10:	2b13      	cmp	r3, #19
 8019f12:	d804      	bhi.n	8019f1e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8019f14:	6878      	ldr	r0, [r7, #4]
 8019f16:	f7f7 fc8f 	bl	8011838 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8019f1a:	2300      	movs	r3, #0
 8019f1c:	e0db      	b.n	801a0d6 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8019f1e:	697b      	ldr	r3, [r7, #20]
 8019f20:	691b      	ldr	r3, [r3, #16]
 8019f22:	4a6f      	ldr	r2, [pc, #444]	; (801a0e0 <ip4_input+0x240>)
 8019f24:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8019f26:	697b      	ldr	r3, [r7, #20]
 8019f28:	68db      	ldr	r3, [r3, #12]
 8019f2a:	4a6d      	ldr	r2, [pc, #436]	; (801a0e0 <ip4_input+0x240>)
 8019f2c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019f2e:	4b6c      	ldr	r3, [pc, #432]	; (801a0e0 <ip4_input+0x240>)
 8019f30:	695b      	ldr	r3, [r3, #20]
 8019f32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019f36:	2be0      	cmp	r3, #224	; 0xe0
 8019f38:	d112      	bne.n	8019f60 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8019f3a:	683b      	ldr	r3, [r7, #0]
 8019f3c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8019f40:	f003 0301 	and.w	r3, r3, #1
 8019f44:	b2db      	uxtb	r3, r3
 8019f46:	2b00      	cmp	r3, #0
 8019f48:	d007      	beq.n	8019f5a <ip4_input+0xba>
 8019f4a:	683b      	ldr	r3, [r7, #0]
 8019f4c:	3304      	adds	r3, #4
 8019f4e:	681b      	ldr	r3, [r3, #0]
 8019f50:	2b00      	cmp	r3, #0
 8019f52:	d002      	beq.n	8019f5a <ip4_input+0xba>
      netif = inp;
 8019f54:	683b      	ldr	r3, [r7, #0]
 8019f56:	613b      	str	r3, [r7, #16]
 8019f58:	e02a      	b.n	8019fb0 <ip4_input+0x110>
    } else {
      netif = NULL;
 8019f5a:	2300      	movs	r3, #0
 8019f5c:	613b      	str	r3, [r7, #16]
 8019f5e:	e027      	b.n	8019fb0 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8019f60:	6838      	ldr	r0, [r7, #0]
 8019f62:	f7ff ff73 	bl	8019e4c <ip4_input_accept>
 8019f66:	4603      	mov	r3, r0
 8019f68:	2b00      	cmp	r3, #0
 8019f6a:	d002      	beq.n	8019f72 <ip4_input+0xd2>
      netif = inp;
 8019f6c:	683b      	ldr	r3, [r7, #0]
 8019f6e:	613b      	str	r3, [r7, #16]
 8019f70:	e01e      	b.n	8019fb0 <ip4_input+0x110>
    } else {
      netif = NULL;
 8019f72:	2300      	movs	r3, #0
 8019f74:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8019f76:	4b5a      	ldr	r3, [pc, #360]	; (801a0e0 <ip4_input+0x240>)
 8019f78:	695b      	ldr	r3, [r3, #20]
 8019f7a:	b2db      	uxtb	r3, r3
 8019f7c:	2b7f      	cmp	r3, #127	; 0x7f
 8019f7e:	d017      	beq.n	8019fb0 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8019f80:	4b58      	ldr	r3, [pc, #352]	; (801a0e4 <ip4_input+0x244>)
 8019f82:	681b      	ldr	r3, [r3, #0]
 8019f84:	613b      	str	r3, [r7, #16]
 8019f86:	e00e      	b.n	8019fa6 <ip4_input+0x106>
          if (netif == inp) {
 8019f88:	693a      	ldr	r2, [r7, #16]
 8019f8a:	683b      	ldr	r3, [r7, #0]
 8019f8c:	429a      	cmp	r2, r3
 8019f8e:	d006      	beq.n	8019f9e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8019f90:	6938      	ldr	r0, [r7, #16]
 8019f92:	f7ff ff5b 	bl	8019e4c <ip4_input_accept>
 8019f96:	4603      	mov	r3, r0
 8019f98:	2b00      	cmp	r3, #0
 8019f9a:	d108      	bne.n	8019fae <ip4_input+0x10e>
 8019f9c:	e000      	b.n	8019fa0 <ip4_input+0x100>
            continue;
 8019f9e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8019fa0:	693b      	ldr	r3, [r7, #16]
 8019fa2:	681b      	ldr	r3, [r3, #0]
 8019fa4:	613b      	str	r3, [r7, #16]
 8019fa6:	693b      	ldr	r3, [r7, #16]
 8019fa8:	2b00      	cmp	r3, #0
 8019faa:	d1ed      	bne.n	8019f88 <ip4_input+0xe8>
 8019fac:	e000      	b.n	8019fb0 <ip4_input+0x110>
            break;
 8019fae:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8019fb0:	4b4b      	ldr	r3, [pc, #300]	; (801a0e0 <ip4_input+0x240>)
 8019fb2:	691b      	ldr	r3, [r3, #16]
 8019fb4:	6839      	ldr	r1, [r7, #0]
 8019fb6:	4618      	mov	r0, r3
 8019fb8:	f000 f96e 	bl	801a298 <ip4_addr_isbroadcast_u32>
 8019fbc:	4603      	mov	r3, r0
 8019fbe:	2b00      	cmp	r3, #0
 8019fc0:	d105      	bne.n	8019fce <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8019fc2:	4b47      	ldr	r3, [pc, #284]	; (801a0e0 <ip4_input+0x240>)
 8019fc4:	691b      	ldr	r3, [r3, #16]
 8019fc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8019fca:	2be0      	cmp	r3, #224	; 0xe0
 8019fcc:	d104      	bne.n	8019fd8 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8019fce:	6878      	ldr	r0, [r7, #4]
 8019fd0:	f7f7 fc32 	bl	8011838 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8019fd4:	2300      	movs	r3, #0
 8019fd6:	e07e      	b.n	801a0d6 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8019fd8:	693b      	ldr	r3, [r7, #16]
 8019fda:	2b00      	cmp	r3, #0
 8019fdc:	d104      	bne.n	8019fe8 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8019fde:	6878      	ldr	r0, [r7, #4]
 8019fe0:	f7f7 fc2a 	bl	8011838 <pbuf_free>
    return ERR_OK;
 8019fe4:	2300      	movs	r3, #0
 8019fe6:	e076      	b.n	801a0d6 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8019fe8:	697b      	ldr	r3, [r7, #20]
 8019fea:	88db      	ldrh	r3, [r3, #6]
 8019fec:	b29b      	uxth	r3, r3
 8019fee:	461a      	mov	r2, r3
 8019ff0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8019ff4:	4013      	ands	r3, r2
 8019ff6:	2b00      	cmp	r3, #0
 8019ff8:	d00b      	beq.n	801a012 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8019ffa:	6878      	ldr	r0, [r7, #4]
 8019ffc:	f000 fdbc 	bl	801ab78 <ip4_reass>
 801a000:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801a002:	687b      	ldr	r3, [r7, #4]
 801a004:	2b00      	cmp	r3, #0
 801a006:	d101      	bne.n	801a00c <ip4_input+0x16c>
      return ERR_OK;
 801a008:	2300      	movs	r3, #0
 801a00a:	e064      	b.n	801a0d6 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801a00c:	687b      	ldr	r3, [r7, #4]
 801a00e:	685b      	ldr	r3, [r3, #4]
 801a010:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801a012:	4a33      	ldr	r2, [pc, #204]	; (801a0e0 <ip4_input+0x240>)
 801a014:	693b      	ldr	r3, [r7, #16]
 801a016:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801a018:	4a31      	ldr	r2, [pc, #196]	; (801a0e0 <ip4_input+0x240>)
 801a01a:	683b      	ldr	r3, [r7, #0]
 801a01c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801a01e:	4a30      	ldr	r2, [pc, #192]	; (801a0e0 <ip4_input+0x240>)
 801a020:	697b      	ldr	r3, [r7, #20]
 801a022:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801a024:	697b      	ldr	r3, [r7, #20]
 801a026:	781b      	ldrb	r3, [r3, #0]
 801a028:	f003 030f 	and.w	r3, r3, #15
 801a02c:	b2db      	uxtb	r3, r3
 801a02e:	009b      	lsls	r3, r3, #2
 801a030:	b2db      	uxtb	r3, r3
 801a032:	b29a      	uxth	r2, r3
 801a034:	4b2a      	ldr	r3, [pc, #168]	; (801a0e0 <ip4_input+0x240>)
 801a036:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801a038:	89fb      	ldrh	r3, [r7, #14]
 801a03a:	4619      	mov	r1, r3
 801a03c:	6878      	ldr	r0, [r7, #4]
 801a03e:	f7f7 fb75 	bl	801172c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801a042:	697b      	ldr	r3, [r7, #20]
 801a044:	7a5b      	ldrb	r3, [r3, #9]
 801a046:	2b11      	cmp	r3, #17
 801a048:	d006      	beq.n	801a058 <ip4_input+0x1b8>
 801a04a:	2b11      	cmp	r3, #17
 801a04c:	dc13      	bgt.n	801a076 <ip4_input+0x1d6>
 801a04e:	2b01      	cmp	r3, #1
 801a050:	d00c      	beq.n	801a06c <ip4_input+0x1cc>
 801a052:	2b06      	cmp	r3, #6
 801a054:	d005      	beq.n	801a062 <ip4_input+0x1c2>
 801a056:	e00e      	b.n	801a076 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801a058:	6839      	ldr	r1, [r7, #0]
 801a05a:	6878      	ldr	r0, [r7, #4]
 801a05c:	f7fe f970 	bl	8018340 <udp_input>
        break;
 801a060:	e026      	b.n	801a0b0 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801a062:	6839      	ldr	r1, [r7, #0]
 801a064:	6878      	ldr	r0, [r7, #4]
 801a066:	f7f9 fd2d 	bl	8013ac4 <tcp_input>
        break;
 801a06a:	e021      	b.n	801a0b0 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801a06c:	6839      	ldr	r1, [r7, #0]
 801a06e:	6878      	ldr	r0, [r7, #4]
 801a070:	f7ff fcee 	bl	8019a50 <icmp_input>
        break;
 801a074:	e01c      	b.n	801a0b0 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801a076:	4b1a      	ldr	r3, [pc, #104]	; (801a0e0 <ip4_input+0x240>)
 801a078:	695b      	ldr	r3, [r3, #20]
 801a07a:	6939      	ldr	r1, [r7, #16]
 801a07c:	4618      	mov	r0, r3
 801a07e:	f000 f90b 	bl	801a298 <ip4_addr_isbroadcast_u32>
 801a082:	4603      	mov	r3, r0
 801a084:	2b00      	cmp	r3, #0
 801a086:	d10f      	bne.n	801a0a8 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801a088:	4b15      	ldr	r3, [pc, #84]	; (801a0e0 <ip4_input+0x240>)
 801a08a:	695b      	ldr	r3, [r3, #20]
 801a08c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801a090:	2be0      	cmp	r3, #224	; 0xe0
 801a092:	d009      	beq.n	801a0a8 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801a094:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801a098:	4619      	mov	r1, r3
 801a09a:	6878      	ldr	r0, [r7, #4]
 801a09c:	f7f7 fbb9 	bl	8011812 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801a0a0:	2102      	movs	r1, #2
 801a0a2:	6878      	ldr	r0, [r7, #4]
 801a0a4:	f7ff fdd8 	bl	8019c58 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801a0a8:	6878      	ldr	r0, [r7, #4]
 801a0aa:	f7f7 fbc5 	bl	8011838 <pbuf_free>
        break;
 801a0ae:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801a0b0:	4b0b      	ldr	r3, [pc, #44]	; (801a0e0 <ip4_input+0x240>)
 801a0b2:	2200      	movs	r2, #0
 801a0b4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801a0b6:	4b0a      	ldr	r3, [pc, #40]	; (801a0e0 <ip4_input+0x240>)
 801a0b8:	2200      	movs	r2, #0
 801a0ba:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801a0bc:	4b08      	ldr	r3, [pc, #32]	; (801a0e0 <ip4_input+0x240>)
 801a0be:	2200      	movs	r2, #0
 801a0c0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801a0c2:	4b07      	ldr	r3, [pc, #28]	; (801a0e0 <ip4_input+0x240>)
 801a0c4:	2200      	movs	r2, #0
 801a0c6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801a0c8:	4b05      	ldr	r3, [pc, #20]	; (801a0e0 <ip4_input+0x240>)
 801a0ca:	2200      	movs	r2, #0
 801a0cc:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801a0ce:	4b04      	ldr	r3, [pc, #16]	; (801a0e0 <ip4_input+0x240>)
 801a0d0:	2200      	movs	r2, #0
 801a0d2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801a0d4:	2300      	movs	r3, #0
}
 801a0d6:	4618      	mov	r0, r3
 801a0d8:	3718      	adds	r7, #24
 801a0da:	46bd      	mov	sp, r7
 801a0dc:	bd80      	pop	{r7, pc}
 801a0de:	bf00      	nop
 801a0e0:	20007f08 	.word	0x20007f08
 801a0e4:	2000b60c 	.word	0x2000b60c

0801a0e8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801a0e8:	b580      	push	{r7, lr}
 801a0ea:	b08a      	sub	sp, #40	; 0x28
 801a0ec:	af04      	add	r7, sp, #16
 801a0ee:	60f8      	str	r0, [r7, #12]
 801a0f0:	60b9      	str	r1, [r7, #8]
 801a0f2:	607a      	str	r2, [r7, #4]
 801a0f4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801a0f6:	68bb      	ldr	r3, [r7, #8]
 801a0f8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801a0fa:	687b      	ldr	r3, [r7, #4]
 801a0fc:	2b00      	cmp	r3, #0
 801a0fe:	d009      	beq.n	801a114 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801a100:	68bb      	ldr	r3, [r7, #8]
 801a102:	2b00      	cmp	r3, #0
 801a104:	d003      	beq.n	801a10e <ip4_output_if+0x26>
 801a106:	68bb      	ldr	r3, [r7, #8]
 801a108:	681b      	ldr	r3, [r3, #0]
 801a10a:	2b00      	cmp	r3, #0
 801a10c:	d102      	bne.n	801a114 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801a10e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a110:	3304      	adds	r3, #4
 801a112:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801a114:	78fa      	ldrb	r2, [r7, #3]
 801a116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a118:	9302      	str	r3, [sp, #8]
 801a11a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801a11e:	9301      	str	r3, [sp, #4]
 801a120:	f897 3020 	ldrb.w	r3, [r7, #32]
 801a124:	9300      	str	r3, [sp, #0]
 801a126:	4613      	mov	r3, r2
 801a128:	687a      	ldr	r2, [r7, #4]
 801a12a:	6979      	ldr	r1, [r7, #20]
 801a12c:	68f8      	ldr	r0, [r7, #12]
 801a12e:	f000 f805 	bl	801a13c <ip4_output_if_src>
 801a132:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801a134:	4618      	mov	r0, r3
 801a136:	3718      	adds	r7, #24
 801a138:	46bd      	mov	sp, r7
 801a13a:	bd80      	pop	{r7, pc}

0801a13c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801a13c:	b580      	push	{r7, lr}
 801a13e:	b088      	sub	sp, #32
 801a140:	af00      	add	r7, sp, #0
 801a142:	60f8      	str	r0, [r7, #12]
 801a144:	60b9      	str	r1, [r7, #8]
 801a146:	607a      	str	r2, [r7, #4]
 801a148:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801a14a:	68fb      	ldr	r3, [r7, #12]
 801a14c:	7b9b      	ldrb	r3, [r3, #14]
 801a14e:	2b01      	cmp	r3, #1
 801a150:	d006      	beq.n	801a160 <ip4_output_if_src+0x24>
 801a152:	4b4b      	ldr	r3, [pc, #300]	; (801a280 <ip4_output_if_src+0x144>)
 801a154:	f44f 7255 	mov.w	r2, #852	; 0x354
 801a158:	494a      	ldr	r1, [pc, #296]	; (801a284 <ip4_output_if_src+0x148>)
 801a15a:	484b      	ldr	r0, [pc, #300]	; (801a288 <ip4_output_if_src+0x14c>)
 801a15c:	f002 fac0 	bl	801c6e0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801a160:	687b      	ldr	r3, [r7, #4]
 801a162:	2b00      	cmp	r3, #0
 801a164:	d060      	beq.n	801a228 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801a166:	2314      	movs	r3, #20
 801a168:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801a16a:	2114      	movs	r1, #20
 801a16c:	68f8      	ldr	r0, [r7, #12]
 801a16e:	f7f7 facd 	bl	801170c <pbuf_add_header>
 801a172:	4603      	mov	r3, r0
 801a174:	2b00      	cmp	r3, #0
 801a176:	d002      	beq.n	801a17e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801a178:	f06f 0301 	mvn.w	r3, #1
 801a17c:	e07c      	b.n	801a278 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801a17e:	68fb      	ldr	r3, [r7, #12]
 801a180:	685b      	ldr	r3, [r3, #4]
 801a182:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801a184:	68fb      	ldr	r3, [r7, #12]
 801a186:	895b      	ldrh	r3, [r3, #10]
 801a188:	2b13      	cmp	r3, #19
 801a18a:	d806      	bhi.n	801a19a <ip4_output_if_src+0x5e>
 801a18c:	4b3c      	ldr	r3, [pc, #240]	; (801a280 <ip4_output_if_src+0x144>)
 801a18e:	f44f 7262 	mov.w	r2, #904	; 0x388
 801a192:	493e      	ldr	r1, [pc, #248]	; (801a28c <ip4_output_if_src+0x150>)
 801a194:	483c      	ldr	r0, [pc, #240]	; (801a288 <ip4_output_if_src+0x14c>)
 801a196:	f002 faa3 	bl	801c6e0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801a19a:	69fb      	ldr	r3, [r7, #28]
 801a19c:	78fa      	ldrb	r2, [r7, #3]
 801a19e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801a1a0:	69fb      	ldr	r3, [r7, #28]
 801a1a2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801a1a6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801a1a8:	687b      	ldr	r3, [r7, #4]
 801a1aa:	681a      	ldr	r2, [r3, #0]
 801a1ac:	69fb      	ldr	r3, [r7, #28]
 801a1ae:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801a1b0:	8b7b      	ldrh	r3, [r7, #26]
 801a1b2:	089b      	lsrs	r3, r3, #2
 801a1b4:	b29b      	uxth	r3, r3
 801a1b6:	b2db      	uxtb	r3, r3
 801a1b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a1bc:	b2da      	uxtb	r2, r3
 801a1be:	69fb      	ldr	r3, [r7, #28]
 801a1c0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801a1c2:	69fb      	ldr	r3, [r7, #28]
 801a1c4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801a1c8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801a1ca:	68fb      	ldr	r3, [r7, #12]
 801a1cc:	891b      	ldrh	r3, [r3, #8]
 801a1ce:	4618      	mov	r0, r3
 801a1d0:	f7f5 ff76 	bl	80100c0 <lwip_htons>
 801a1d4:	4603      	mov	r3, r0
 801a1d6:	461a      	mov	r2, r3
 801a1d8:	69fb      	ldr	r3, [r7, #28]
 801a1da:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801a1dc:	69fb      	ldr	r3, [r7, #28]
 801a1de:	2200      	movs	r2, #0
 801a1e0:	719a      	strb	r2, [r3, #6]
 801a1e2:	2200      	movs	r2, #0
 801a1e4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801a1e6:	4b2a      	ldr	r3, [pc, #168]	; (801a290 <ip4_output_if_src+0x154>)
 801a1e8:	881b      	ldrh	r3, [r3, #0]
 801a1ea:	4618      	mov	r0, r3
 801a1ec:	f7f5 ff68 	bl	80100c0 <lwip_htons>
 801a1f0:	4603      	mov	r3, r0
 801a1f2:	461a      	mov	r2, r3
 801a1f4:	69fb      	ldr	r3, [r7, #28]
 801a1f6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801a1f8:	4b25      	ldr	r3, [pc, #148]	; (801a290 <ip4_output_if_src+0x154>)
 801a1fa:	881b      	ldrh	r3, [r3, #0]
 801a1fc:	3301      	adds	r3, #1
 801a1fe:	b29a      	uxth	r2, r3
 801a200:	4b23      	ldr	r3, [pc, #140]	; (801a290 <ip4_output_if_src+0x154>)
 801a202:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801a204:	68bb      	ldr	r3, [r7, #8]
 801a206:	2b00      	cmp	r3, #0
 801a208:	d104      	bne.n	801a214 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801a20a:	4b22      	ldr	r3, [pc, #136]	; (801a294 <ip4_output_if_src+0x158>)
 801a20c:	681a      	ldr	r2, [r3, #0]
 801a20e:	69fb      	ldr	r3, [r7, #28]
 801a210:	60da      	str	r2, [r3, #12]
 801a212:	e003      	b.n	801a21c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801a214:	68bb      	ldr	r3, [r7, #8]
 801a216:	681a      	ldr	r2, [r3, #0]
 801a218:	69fb      	ldr	r3, [r7, #28]
 801a21a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801a21c:	69fb      	ldr	r3, [r7, #28]
 801a21e:	2200      	movs	r2, #0
 801a220:	729a      	strb	r2, [r3, #10]
 801a222:	2200      	movs	r2, #0
 801a224:	72da      	strb	r2, [r3, #11]
 801a226:	e00f      	b.n	801a248 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801a228:	68fb      	ldr	r3, [r7, #12]
 801a22a:	895b      	ldrh	r3, [r3, #10]
 801a22c:	2b13      	cmp	r3, #19
 801a22e:	d802      	bhi.n	801a236 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801a230:	f06f 0301 	mvn.w	r3, #1
 801a234:	e020      	b.n	801a278 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801a236:	68fb      	ldr	r3, [r7, #12]
 801a238:	685b      	ldr	r3, [r3, #4]
 801a23a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801a23c:	69fb      	ldr	r3, [r7, #28]
 801a23e:	691b      	ldr	r3, [r3, #16]
 801a240:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801a242:	f107 0314 	add.w	r3, r7, #20
 801a246:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801a248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a24a:	8c1b      	ldrh	r3, [r3, #32]
 801a24c:	2b00      	cmp	r3, #0
 801a24e:	d00c      	beq.n	801a26a <ip4_output_if_src+0x12e>
 801a250:	68fb      	ldr	r3, [r7, #12]
 801a252:	891a      	ldrh	r2, [r3, #8]
 801a254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a256:	8c1b      	ldrh	r3, [r3, #32]
 801a258:	429a      	cmp	r2, r3
 801a25a:	d906      	bls.n	801a26a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801a25c:	687a      	ldr	r2, [r7, #4]
 801a25e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801a260:	68f8      	ldr	r0, [r7, #12]
 801a262:	f000 fe77 	bl	801af54 <ip4_frag>
 801a266:	4603      	mov	r3, r0
 801a268:	e006      	b.n	801a278 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801a26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a26c:	695b      	ldr	r3, [r3, #20]
 801a26e:	687a      	ldr	r2, [r7, #4]
 801a270:	68f9      	ldr	r1, [r7, #12]
 801a272:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a274:	4798      	blx	r3
 801a276:	4603      	mov	r3, r0
}
 801a278:	4618      	mov	r0, r3
 801a27a:	3720      	adds	r7, #32
 801a27c:	46bd      	mov	sp, r7
 801a27e:	bd80      	pop	{r7, pc}
 801a280:	08021c30 	.word	0x08021c30
 801a284:	08021c64 	.word	0x08021c64
 801a288:	08021c70 	.word	0x08021c70
 801a28c:	08021c98 	.word	0x08021c98
 801a290:	20004832 	.word	0x20004832
 801a294:	0802304c 	.word	0x0802304c

0801a298 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801a298:	b480      	push	{r7}
 801a29a:	b085      	sub	sp, #20
 801a29c:	af00      	add	r7, sp, #0
 801a29e:	6078      	str	r0, [r7, #4]
 801a2a0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801a2a2:	687b      	ldr	r3, [r7, #4]
 801a2a4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801a2a6:	687b      	ldr	r3, [r7, #4]
 801a2a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a2ac:	d002      	beq.n	801a2b4 <ip4_addr_isbroadcast_u32+0x1c>
 801a2ae:	687b      	ldr	r3, [r7, #4]
 801a2b0:	2b00      	cmp	r3, #0
 801a2b2:	d101      	bne.n	801a2b8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801a2b4:	2301      	movs	r3, #1
 801a2b6:	e02a      	b.n	801a30e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801a2b8:	683b      	ldr	r3, [r7, #0]
 801a2ba:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801a2be:	f003 0302 	and.w	r3, r3, #2
 801a2c2:	2b00      	cmp	r3, #0
 801a2c4:	d101      	bne.n	801a2ca <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801a2c6:	2300      	movs	r3, #0
 801a2c8:	e021      	b.n	801a30e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801a2ca:	683b      	ldr	r3, [r7, #0]
 801a2cc:	3304      	adds	r3, #4
 801a2ce:	681b      	ldr	r3, [r3, #0]
 801a2d0:	687a      	ldr	r2, [r7, #4]
 801a2d2:	429a      	cmp	r2, r3
 801a2d4:	d101      	bne.n	801a2da <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801a2d6:	2300      	movs	r3, #0
 801a2d8:	e019      	b.n	801a30e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801a2da:	68fa      	ldr	r2, [r7, #12]
 801a2dc:	683b      	ldr	r3, [r7, #0]
 801a2de:	3304      	adds	r3, #4
 801a2e0:	681b      	ldr	r3, [r3, #0]
 801a2e2:	405a      	eors	r2, r3
 801a2e4:	683b      	ldr	r3, [r7, #0]
 801a2e6:	3308      	adds	r3, #8
 801a2e8:	681b      	ldr	r3, [r3, #0]
 801a2ea:	4013      	ands	r3, r2
 801a2ec:	2b00      	cmp	r3, #0
 801a2ee:	d10d      	bne.n	801a30c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801a2f0:	683b      	ldr	r3, [r7, #0]
 801a2f2:	3308      	adds	r3, #8
 801a2f4:	681b      	ldr	r3, [r3, #0]
 801a2f6:	43da      	mvns	r2, r3
 801a2f8:	687b      	ldr	r3, [r7, #4]
 801a2fa:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801a2fc:	683b      	ldr	r3, [r7, #0]
 801a2fe:	3308      	adds	r3, #8
 801a300:	681b      	ldr	r3, [r3, #0]
 801a302:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801a304:	429a      	cmp	r2, r3
 801a306:	d101      	bne.n	801a30c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801a308:	2301      	movs	r3, #1
 801a30a:	e000      	b.n	801a30e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801a30c:	2300      	movs	r3, #0
  }
}
 801a30e:	4618      	mov	r0, r3
 801a310:	3714      	adds	r7, #20
 801a312:	46bd      	mov	sp, r7
 801a314:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a318:	4770      	bx	lr
	...

0801a31c <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 801a31c:	b580      	push	{r7, lr}
 801a31e:	b08a      	sub	sp, #40	; 0x28
 801a320:	af00      	add	r7, sp, #0
 801a322:	6078      	str	r0, [r7, #4]
 801a324:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 801a326:	f107 030c 	add.w	r3, r7, #12
 801a32a:	61fb      	str	r3, [r7, #28]

  c = *cp;
 801a32c:	687b      	ldr	r3, [r7, #4]
 801a32e:	781b      	ldrb	r3, [r3, #0]
 801a330:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 801a334:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a338:	3301      	adds	r3, #1
 801a33a:	4a89      	ldr	r2, [pc, #548]	; (801a560 <ip4addr_aton+0x244>)
 801a33c:	4413      	add	r3, r2
 801a33e:	781b      	ldrb	r3, [r3, #0]
 801a340:	f003 0304 	and.w	r3, r3, #4
 801a344:	2b00      	cmp	r3, #0
 801a346:	d101      	bne.n	801a34c <ip4addr_aton+0x30>
      return 0;
 801a348:	2300      	movs	r3, #0
 801a34a:	e105      	b.n	801a558 <ip4addr_aton+0x23c>
    }
    val = 0;
 801a34c:	2300      	movs	r3, #0
 801a34e:	627b      	str	r3, [r7, #36]	; 0x24
    base = 10;
 801a350:	230a      	movs	r3, #10
 801a352:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (c == '0') {
 801a356:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a35a:	2b30      	cmp	r3, #48	; 0x30
 801a35c:	d11c      	bne.n	801a398 <ip4addr_aton+0x7c>
      c = *++cp;
 801a35e:	687b      	ldr	r3, [r7, #4]
 801a360:	3301      	adds	r3, #1
 801a362:	607b      	str	r3, [r7, #4]
 801a364:	687b      	ldr	r3, [r7, #4]
 801a366:	781b      	ldrb	r3, [r3, #0]
 801a368:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (c == 'x' || c == 'X') {
 801a36c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a370:	2b78      	cmp	r3, #120	; 0x78
 801a372:	d003      	beq.n	801a37c <ip4addr_aton+0x60>
 801a374:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a378:	2b58      	cmp	r3, #88	; 0x58
 801a37a:	d10a      	bne.n	801a392 <ip4addr_aton+0x76>
        base = 16;
 801a37c:	2310      	movs	r3, #16
 801a37e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        c = *++cp;
 801a382:	687b      	ldr	r3, [r7, #4]
 801a384:	3301      	adds	r3, #1
 801a386:	607b      	str	r3, [r7, #4]
 801a388:	687b      	ldr	r3, [r7, #4]
 801a38a:	781b      	ldrb	r3, [r3, #0]
 801a38c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801a390:	e002      	b.n	801a398 <ip4addr_aton+0x7c>
      } else {
        base = 8;
 801a392:	2308      	movs	r3, #8
 801a394:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 801a398:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a39c:	3301      	adds	r3, #1
 801a39e:	4a70      	ldr	r2, [pc, #448]	; (801a560 <ip4addr_aton+0x244>)
 801a3a0:	4413      	add	r3, r2
 801a3a2:	781b      	ldrb	r3, [r3, #0]
 801a3a4:	f003 0304 	and.w	r3, r3, #4
 801a3a8:	2b00      	cmp	r3, #0
 801a3aa:	d011      	beq.n	801a3d0 <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 801a3ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a3b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a3b2:	fb02 f203 	mul.w	r2, r2, r3
 801a3b6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a3ba:	4413      	add	r3, r2
 801a3bc:	3b30      	subs	r3, #48	; 0x30
 801a3be:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 801a3c0:	687b      	ldr	r3, [r7, #4]
 801a3c2:	3301      	adds	r3, #1
 801a3c4:	607b      	str	r3, [r7, #4]
 801a3c6:	687b      	ldr	r3, [r7, #4]
 801a3c8:	781b      	ldrb	r3, [r3, #0]
 801a3ca:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801a3ce:	e7e3      	b.n	801a398 <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 801a3d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a3d4:	2b10      	cmp	r3, #16
 801a3d6:	d127      	bne.n	801a428 <ip4addr_aton+0x10c>
 801a3d8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a3dc:	3301      	adds	r3, #1
 801a3de:	4a60      	ldr	r2, [pc, #384]	; (801a560 <ip4addr_aton+0x244>)
 801a3e0:	4413      	add	r3, r2
 801a3e2:	781b      	ldrb	r3, [r3, #0]
 801a3e4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801a3e8:	2b00      	cmp	r3, #0
 801a3ea:	d01d      	beq.n	801a428 <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 801a3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3ee:	011b      	lsls	r3, r3, #4
 801a3f0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801a3f4:	f102 010a 	add.w	r1, r2, #10
 801a3f8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801a3fc:	3201      	adds	r2, #1
 801a3fe:	4858      	ldr	r0, [pc, #352]	; (801a560 <ip4addr_aton+0x244>)
 801a400:	4402      	add	r2, r0
 801a402:	7812      	ldrb	r2, [r2, #0]
 801a404:	f002 0203 	and.w	r2, r2, #3
 801a408:	2a02      	cmp	r2, #2
 801a40a:	d101      	bne.n	801a410 <ip4addr_aton+0xf4>
 801a40c:	2261      	movs	r2, #97	; 0x61
 801a40e:	e000      	b.n	801a412 <ip4addr_aton+0xf6>
 801a410:	2241      	movs	r2, #65	; 0x41
 801a412:	1a8a      	subs	r2, r1, r2
 801a414:	4313      	orrs	r3, r2
 801a416:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 801a418:	687b      	ldr	r3, [r7, #4]
 801a41a:	3301      	adds	r3, #1
 801a41c:	607b      	str	r3, [r7, #4]
 801a41e:	687b      	ldr	r3, [r7, #4]
 801a420:	781b      	ldrb	r3, [r3, #0]
 801a422:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (lwip_isdigit(c)) {
 801a426:	e7b7      	b.n	801a398 <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 801a428:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a42c:	2b2e      	cmp	r3, #46	; 0x2e
 801a42e:	d114      	bne.n	801a45a <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 801a430:	f107 030c 	add.w	r3, r7, #12
 801a434:	330c      	adds	r3, #12
 801a436:	69fa      	ldr	r2, [r7, #28]
 801a438:	429a      	cmp	r2, r3
 801a43a:	d301      	bcc.n	801a440 <ip4addr_aton+0x124>
        return 0;
 801a43c:	2300      	movs	r3, #0
 801a43e:	e08b      	b.n	801a558 <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 801a440:	69fb      	ldr	r3, [r7, #28]
 801a442:	1d1a      	adds	r2, r3, #4
 801a444:	61fa      	str	r2, [r7, #28]
 801a446:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a448:	601a      	str	r2, [r3, #0]
      c = *++cp;
 801a44a:	687b      	ldr	r3, [r7, #4]
 801a44c:	3301      	adds	r3, #1
 801a44e:	607b      	str	r3, [r7, #4]
 801a450:	687b      	ldr	r3, [r7, #4]
 801a452:	781b      	ldrb	r3, [r3, #0]
 801a454:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (!lwip_isdigit(c)) {
 801a458:	e76c      	b.n	801a334 <ip4addr_aton+0x18>
    } else {
      break;
 801a45a:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 801a45c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a460:	2b00      	cmp	r3, #0
 801a462:	d00b      	beq.n	801a47c <ip4addr_aton+0x160>
 801a464:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a468:	3301      	adds	r3, #1
 801a46a:	4a3d      	ldr	r2, [pc, #244]	; (801a560 <ip4addr_aton+0x244>)
 801a46c:	4413      	add	r3, r2
 801a46e:	781b      	ldrb	r3, [r3, #0]
 801a470:	f003 0308 	and.w	r3, r3, #8
 801a474:	2b00      	cmp	r3, #0
 801a476:	d101      	bne.n	801a47c <ip4addr_aton+0x160>
    return 0;
 801a478:	2300      	movs	r3, #0
 801a47a:	e06d      	b.n	801a558 <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 801a47c:	f107 030c 	add.w	r3, r7, #12
 801a480:	69fa      	ldr	r2, [r7, #28]
 801a482:	1ad3      	subs	r3, r2, r3
 801a484:	109b      	asrs	r3, r3, #2
 801a486:	3301      	adds	r3, #1
 801a488:	2b04      	cmp	r3, #4
 801a48a:	d853      	bhi.n	801a534 <ip4addr_aton+0x218>
 801a48c:	a201      	add	r2, pc, #4	; (adr r2, 801a494 <ip4addr_aton+0x178>)
 801a48e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a492:	bf00      	nop
 801a494:	0801a4a9 	.word	0x0801a4a9
 801a498:	0801a543 	.word	0x0801a543
 801a49c:	0801a4ad 	.word	0x0801a4ad
 801a4a0:	0801a4cf 	.word	0x0801a4cf
 801a4a4:	0801a4fd 	.word	0x0801a4fd

    case 0:
      return 0;       /* initial nondigit */
 801a4a8:	2300      	movs	r3, #0
 801a4aa:	e055      	b.n	801a558 <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 801a4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4ae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801a4b2:	d301      	bcc.n	801a4b8 <ip4addr_aton+0x19c>
        return 0;
 801a4b4:	2300      	movs	r3, #0
 801a4b6:	e04f      	b.n	801a558 <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 801a4b8:	68fb      	ldr	r3, [r7, #12]
 801a4ba:	2bff      	cmp	r3, #255	; 0xff
 801a4bc:	d901      	bls.n	801a4c2 <ip4addr_aton+0x1a6>
        return 0;
 801a4be:	2300      	movs	r3, #0
 801a4c0:	e04a      	b.n	801a558 <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 801a4c2:	68fb      	ldr	r3, [r7, #12]
 801a4c4:	061b      	lsls	r3, r3, #24
 801a4c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a4c8:	4313      	orrs	r3, r2
 801a4ca:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801a4cc:	e03a      	b.n	801a544 <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 801a4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a4d4:	d301      	bcc.n	801a4da <ip4addr_aton+0x1be>
        return 0;
 801a4d6:	2300      	movs	r3, #0
 801a4d8:	e03e      	b.n	801a558 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 801a4da:	68fb      	ldr	r3, [r7, #12]
 801a4dc:	2bff      	cmp	r3, #255	; 0xff
 801a4de:	d802      	bhi.n	801a4e6 <ip4addr_aton+0x1ca>
 801a4e0:	693b      	ldr	r3, [r7, #16]
 801a4e2:	2bff      	cmp	r3, #255	; 0xff
 801a4e4:	d901      	bls.n	801a4ea <ip4addr_aton+0x1ce>
        return 0;
 801a4e6:	2300      	movs	r3, #0
 801a4e8:	e036      	b.n	801a558 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 801a4ea:	68fb      	ldr	r3, [r7, #12]
 801a4ec:	061a      	lsls	r2, r3, #24
 801a4ee:	693b      	ldr	r3, [r7, #16]
 801a4f0:	041b      	lsls	r3, r3, #16
 801a4f2:	4313      	orrs	r3, r2
 801a4f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a4f6:	4313      	orrs	r3, r2
 801a4f8:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801a4fa:	e023      	b.n	801a544 <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 801a4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4fe:	2bff      	cmp	r3, #255	; 0xff
 801a500:	d901      	bls.n	801a506 <ip4addr_aton+0x1ea>
        return 0;
 801a502:	2300      	movs	r3, #0
 801a504:	e028      	b.n	801a558 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 801a506:	68fb      	ldr	r3, [r7, #12]
 801a508:	2bff      	cmp	r3, #255	; 0xff
 801a50a:	d805      	bhi.n	801a518 <ip4addr_aton+0x1fc>
 801a50c:	693b      	ldr	r3, [r7, #16]
 801a50e:	2bff      	cmp	r3, #255	; 0xff
 801a510:	d802      	bhi.n	801a518 <ip4addr_aton+0x1fc>
 801a512:	697b      	ldr	r3, [r7, #20]
 801a514:	2bff      	cmp	r3, #255	; 0xff
 801a516:	d901      	bls.n	801a51c <ip4addr_aton+0x200>
        return 0;
 801a518:	2300      	movs	r3, #0
 801a51a:	e01d      	b.n	801a558 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 801a51c:	68fb      	ldr	r3, [r7, #12]
 801a51e:	061a      	lsls	r2, r3, #24
 801a520:	693b      	ldr	r3, [r7, #16]
 801a522:	041b      	lsls	r3, r3, #16
 801a524:	431a      	orrs	r2, r3
 801a526:	697b      	ldr	r3, [r7, #20]
 801a528:	021b      	lsls	r3, r3, #8
 801a52a:	4313      	orrs	r3, r2
 801a52c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a52e:	4313      	orrs	r3, r2
 801a530:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801a532:	e007      	b.n	801a544 <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 801a534:	4b0b      	ldr	r3, [pc, #44]	; (801a564 <ip4addr_aton+0x248>)
 801a536:	22f9      	movs	r2, #249	; 0xf9
 801a538:	490b      	ldr	r1, [pc, #44]	; (801a568 <ip4addr_aton+0x24c>)
 801a53a:	480c      	ldr	r0, [pc, #48]	; (801a56c <ip4addr_aton+0x250>)
 801a53c:	f002 f8d0 	bl	801c6e0 <iprintf>
      break;
 801a540:	e000      	b.n	801a544 <ip4addr_aton+0x228>
      break;
 801a542:	bf00      	nop
  }
  if (addr) {
 801a544:	683b      	ldr	r3, [r7, #0]
 801a546:	2b00      	cmp	r3, #0
 801a548:	d005      	beq.n	801a556 <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 801a54a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a54c:	f7f5 fdcd 	bl	80100ea <lwip_htonl>
 801a550:	4602      	mov	r2, r0
 801a552:	683b      	ldr	r3, [r7, #0]
 801a554:	601a      	str	r2, [r3, #0]
  }
  return 1;
 801a556:	2301      	movs	r3, #1
}
 801a558:	4618      	mov	r0, r3
 801a55a:	3728      	adds	r7, #40	; 0x28
 801a55c:	46bd      	mov	sp, r7
 801a55e:	bd80      	pop	{r7, pc}
 801a560:	08023068 	.word	0x08023068
 801a564:	08021cc8 	.word	0x08021cc8
 801a568:	08021d04 	.word	0x08021d04
 801a56c:	08021d10 	.word	0x08021d10

0801a570 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801a570:	b580      	push	{r7, lr}
 801a572:	b084      	sub	sp, #16
 801a574:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801a576:	2300      	movs	r3, #0
 801a578:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801a57a:	4b12      	ldr	r3, [pc, #72]	; (801a5c4 <ip_reass_tmr+0x54>)
 801a57c:	681b      	ldr	r3, [r3, #0]
 801a57e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801a580:	e018      	b.n	801a5b4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801a582:	68fb      	ldr	r3, [r7, #12]
 801a584:	7fdb      	ldrb	r3, [r3, #31]
 801a586:	2b00      	cmp	r3, #0
 801a588:	d00b      	beq.n	801a5a2 <ip_reass_tmr+0x32>
      r->timer--;
 801a58a:	68fb      	ldr	r3, [r7, #12]
 801a58c:	7fdb      	ldrb	r3, [r3, #31]
 801a58e:	3b01      	subs	r3, #1
 801a590:	b2da      	uxtb	r2, r3
 801a592:	68fb      	ldr	r3, [r7, #12]
 801a594:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801a596:	68fb      	ldr	r3, [r7, #12]
 801a598:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801a59a:	68fb      	ldr	r3, [r7, #12]
 801a59c:	681b      	ldr	r3, [r3, #0]
 801a59e:	60fb      	str	r3, [r7, #12]
 801a5a0:	e008      	b.n	801a5b4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801a5a2:	68fb      	ldr	r3, [r7, #12]
 801a5a4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801a5a6:	68fb      	ldr	r3, [r7, #12]
 801a5a8:	681b      	ldr	r3, [r3, #0]
 801a5aa:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801a5ac:	68b9      	ldr	r1, [r7, #8]
 801a5ae:	6878      	ldr	r0, [r7, #4]
 801a5b0:	f000 f80a 	bl	801a5c8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801a5b4:	68fb      	ldr	r3, [r7, #12]
 801a5b6:	2b00      	cmp	r3, #0
 801a5b8:	d1e3      	bne.n	801a582 <ip_reass_tmr+0x12>
    }
  }
}
 801a5ba:	bf00      	nop
 801a5bc:	bf00      	nop
 801a5be:	3710      	adds	r7, #16
 801a5c0:	46bd      	mov	sp, r7
 801a5c2:	bd80      	pop	{r7, pc}
 801a5c4:	20004834 	.word	0x20004834

0801a5c8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801a5c8:	b580      	push	{r7, lr}
 801a5ca:	b088      	sub	sp, #32
 801a5cc:	af00      	add	r7, sp, #0
 801a5ce:	6078      	str	r0, [r7, #4]
 801a5d0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801a5d2:	2300      	movs	r3, #0
 801a5d4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801a5d6:	683a      	ldr	r2, [r7, #0]
 801a5d8:	687b      	ldr	r3, [r7, #4]
 801a5da:	429a      	cmp	r2, r3
 801a5dc:	d105      	bne.n	801a5ea <ip_reass_free_complete_datagram+0x22>
 801a5de:	4b45      	ldr	r3, [pc, #276]	; (801a6f4 <ip_reass_free_complete_datagram+0x12c>)
 801a5e0:	22ab      	movs	r2, #171	; 0xab
 801a5e2:	4945      	ldr	r1, [pc, #276]	; (801a6f8 <ip_reass_free_complete_datagram+0x130>)
 801a5e4:	4845      	ldr	r0, [pc, #276]	; (801a6fc <ip_reass_free_complete_datagram+0x134>)
 801a5e6:	f002 f87b 	bl	801c6e0 <iprintf>
  if (prev != NULL) {
 801a5ea:	683b      	ldr	r3, [r7, #0]
 801a5ec:	2b00      	cmp	r3, #0
 801a5ee:	d00a      	beq.n	801a606 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801a5f0:	683b      	ldr	r3, [r7, #0]
 801a5f2:	681b      	ldr	r3, [r3, #0]
 801a5f4:	687a      	ldr	r2, [r7, #4]
 801a5f6:	429a      	cmp	r2, r3
 801a5f8:	d005      	beq.n	801a606 <ip_reass_free_complete_datagram+0x3e>
 801a5fa:	4b3e      	ldr	r3, [pc, #248]	; (801a6f4 <ip_reass_free_complete_datagram+0x12c>)
 801a5fc:	22ad      	movs	r2, #173	; 0xad
 801a5fe:	4940      	ldr	r1, [pc, #256]	; (801a700 <ip_reass_free_complete_datagram+0x138>)
 801a600:	483e      	ldr	r0, [pc, #248]	; (801a6fc <ip_reass_free_complete_datagram+0x134>)
 801a602:	f002 f86d 	bl	801c6e0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801a606:	687b      	ldr	r3, [r7, #4]
 801a608:	685b      	ldr	r3, [r3, #4]
 801a60a:	685b      	ldr	r3, [r3, #4]
 801a60c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801a60e:	697b      	ldr	r3, [r7, #20]
 801a610:	889b      	ldrh	r3, [r3, #4]
 801a612:	b29b      	uxth	r3, r3
 801a614:	2b00      	cmp	r3, #0
 801a616:	d12a      	bne.n	801a66e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801a618:	687b      	ldr	r3, [r7, #4]
 801a61a:	685b      	ldr	r3, [r3, #4]
 801a61c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801a61e:	697b      	ldr	r3, [r7, #20]
 801a620:	681a      	ldr	r2, [r3, #0]
 801a622:	687b      	ldr	r3, [r7, #4]
 801a624:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801a626:	69bb      	ldr	r3, [r7, #24]
 801a628:	6858      	ldr	r0, [r3, #4]
 801a62a:	687b      	ldr	r3, [r7, #4]
 801a62c:	3308      	adds	r3, #8
 801a62e:	2214      	movs	r2, #20
 801a630:	4619      	mov	r1, r3
 801a632:	f001 fdc1 	bl	801c1b8 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801a636:	2101      	movs	r1, #1
 801a638:	69b8      	ldr	r0, [r7, #24]
 801a63a:	f7ff fb1d 	bl	8019c78 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801a63e:	69b8      	ldr	r0, [r7, #24]
 801a640:	f7f7 f988 	bl	8011954 <pbuf_clen>
 801a644:	4603      	mov	r3, r0
 801a646:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801a648:	8bfa      	ldrh	r2, [r7, #30]
 801a64a:	8a7b      	ldrh	r3, [r7, #18]
 801a64c:	4413      	add	r3, r2
 801a64e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a652:	db05      	blt.n	801a660 <ip_reass_free_complete_datagram+0x98>
 801a654:	4b27      	ldr	r3, [pc, #156]	; (801a6f4 <ip_reass_free_complete_datagram+0x12c>)
 801a656:	22bc      	movs	r2, #188	; 0xbc
 801a658:	492a      	ldr	r1, [pc, #168]	; (801a704 <ip_reass_free_complete_datagram+0x13c>)
 801a65a:	4828      	ldr	r0, [pc, #160]	; (801a6fc <ip_reass_free_complete_datagram+0x134>)
 801a65c:	f002 f840 	bl	801c6e0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801a660:	8bfa      	ldrh	r2, [r7, #30]
 801a662:	8a7b      	ldrh	r3, [r7, #18]
 801a664:	4413      	add	r3, r2
 801a666:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801a668:	69b8      	ldr	r0, [r7, #24]
 801a66a:	f7f7 f8e5 	bl	8011838 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801a66e:	687b      	ldr	r3, [r7, #4]
 801a670:	685b      	ldr	r3, [r3, #4]
 801a672:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801a674:	e01f      	b.n	801a6b6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801a676:	69bb      	ldr	r3, [r7, #24]
 801a678:	685b      	ldr	r3, [r3, #4]
 801a67a:	617b      	str	r3, [r7, #20]
    pcur = p;
 801a67c:	69bb      	ldr	r3, [r7, #24]
 801a67e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801a680:	697b      	ldr	r3, [r7, #20]
 801a682:	681b      	ldr	r3, [r3, #0]
 801a684:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801a686:	68f8      	ldr	r0, [r7, #12]
 801a688:	f7f7 f964 	bl	8011954 <pbuf_clen>
 801a68c:	4603      	mov	r3, r0
 801a68e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801a690:	8bfa      	ldrh	r2, [r7, #30]
 801a692:	8a7b      	ldrh	r3, [r7, #18]
 801a694:	4413      	add	r3, r2
 801a696:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a69a:	db05      	blt.n	801a6a8 <ip_reass_free_complete_datagram+0xe0>
 801a69c:	4b15      	ldr	r3, [pc, #84]	; (801a6f4 <ip_reass_free_complete_datagram+0x12c>)
 801a69e:	22cc      	movs	r2, #204	; 0xcc
 801a6a0:	4918      	ldr	r1, [pc, #96]	; (801a704 <ip_reass_free_complete_datagram+0x13c>)
 801a6a2:	4816      	ldr	r0, [pc, #88]	; (801a6fc <ip_reass_free_complete_datagram+0x134>)
 801a6a4:	f002 f81c 	bl	801c6e0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801a6a8:	8bfa      	ldrh	r2, [r7, #30]
 801a6aa:	8a7b      	ldrh	r3, [r7, #18]
 801a6ac:	4413      	add	r3, r2
 801a6ae:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801a6b0:	68f8      	ldr	r0, [r7, #12]
 801a6b2:	f7f7 f8c1 	bl	8011838 <pbuf_free>
  while (p != NULL) {
 801a6b6:	69bb      	ldr	r3, [r7, #24]
 801a6b8:	2b00      	cmp	r3, #0
 801a6ba:	d1dc      	bne.n	801a676 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801a6bc:	6839      	ldr	r1, [r7, #0]
 801a6be:	6878      	ldr	r0, [r7, #4]
 801a6c0:	f000 f8c2 	bl	801a848 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801a6c4:	4b10      	ldr	r3, [pc, #64]	; (801a708 <ip_reass_free_complete_datagram+0x140>)
 801a6c6:	881b      	ldrh	r3, [r3, #0]
 801a6c8:	8bfa      	ldrh	r2, [r7, #30]
 801a6ca:	429a      	cmp	r2, r3
 801a6cc:	d905      	bls.n	801a6da <ip_reass_free_complete_datagram+0x112>
 801a6ce:	4b09      	ldr	r3, [pc, #36]	; (801a6f4 <ip_reass_free_complete_datagram+0x12c>)
 801a6d0:	22d2      	movs	r2, #210	; 0xd2
 801a6d2:	490e      	ldr	r1, [pc, #56]	; (801a70c <ip_reass_free_complete_datagram+0x144>)
 801a6d4:	4809      	ldr	r0, [pc, #36]	; (801a6fc <ip_reass_free_complete_datagram+0x134>)
 801a6d6:	f002 f803 	bl	801c6e0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801a6da:	4b0b      	ldr	r3, [pc, #44]	; (801a708 <ip_reass_free_complete_datagram+0x140>)
 801a6dc:	881a      	ldrh	r2, [r3, #0]
 801a6de:	8bfb      	ldrh	r3, [r7, #30]
 801a6e0:	1ad3      	subs	r3, r2, r3
 801a6e2:	b29a      	uxth	r2, r3
 801a6e4:	4b08      	ldr	r3, [pc, #32]	; (801a708 <ip_reass_free_complete_datagram+0x140>)
 801a6e6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801a6e8:	8bfb      	ldrh	r3, [r7, #30]
}
 801a6ea:	4618      	mov	r0, r3
 801a6ec:	3720      	adds	r7, #32
 801a6ee:	46bd      	mov	sp, r7
 801a6f0:	bd80      	pop	{r7, pc}
 801a6f2:	bf00      	nop
 801a6f4:	08021d38 	.word	0x08021d38
 801a6f8:	08021d74 	.word	0x08021d74
 801a6fc:	08021d80 	.word	0x08021d80
 801a700:	08021da8 	.word	0x08021da8
 801a704:	08021dbc 	.word	0x08021dbc
 801a708:	20004838 	.word	0x20004838
 801a70c:	08021ddc 	.word	0x08021ddc

0801a710 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801a710:	b580      	push	{r7, lr}
 801a712:	b08a      	sub	sp, #40	; 0x28
 801a714:	af00      	add	r7, sp, #0
 801a716:	6078      	str	r0, [r7, #4]
 801a718:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801a71a:	2300      	movs	r3, #0
 801a71c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801a71e:	2300      	movs	r3, #0
 801a720:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801a722:	2300      	movs	r3, #0
 801a724:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801a726:	2300      	movs	r3, #0
 801a728:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801a72a:	2300      	movs	r3, #0
 801a72c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801a72e:	4b28      	ldr	r3, [pc, #160]	; (801a7d0 <ip_reass_remove_oldest_datagram+0xc0>)
 801a730:	681b      	ldr	r3, [r3, #0]
 801a732:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801a734:	e030      	b.n	801a798 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801a736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a738:	695a      	ldr	r2, [r3, #20]
 801a73a:	687b      	ldr	r3, [r7, #4]
 801a73c:	68db      	ldr	r3, [r3, #12]
 801a73e:	429a      	cmp	r2, r3
 801a740:	d10c      	bne.n	801a75c <ip_reass_remove_oldest_datagram+0x4c>
 801a742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a744:	699a      	ldr	r2, [r3, #24]
 801a746:	687b      	ldr	r3, [r7, #4]
 801a748:	691b      	ldr	r3, [r3, #16]
 801a74a:	429a      	cmp	r2, r3
 801a74c:	d106      	bne.n	801a75c <ip_reass_remove_oldest_datagram+0x4c>
 801a74e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a750:	899a      	ldrh	r2, [r3, #12]
 801a752:	687b      	ldr	r3, [r7, #4]
 801a754:	889b      	ldrh	r3, [r3, #4]
 801a756:	b29b      	uxth	r3, r3
 801a758:	429a      	cmp	r2, r3
 801a75a:	d014      	beq.n	801a786 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801a75c:	693b      	ldr	r3, [r7, #16]
 801a75e:	3301      	adds	r3, #1
 801a760:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801a762:	6a3b      	ldr	r3, [r7, #32]
 801a764:	2b00      	cmp	r3, #0
 801a766:	d104      	bne.n	801a772 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801a768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a76a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801a76c:	69fb      	ldr	r3, [r7, #28]
 801a76e:	61bb      	str	r3, [r7, #24]
 801a770:	e009      	b.n	801a786 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801a772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a774:	7fda      	ldrb	r2, [r3, #31]
 801a776:	6a3b      	ldr	r3, [r7, #32]
 801a778:	7fdb      	ldrb	r3, [r3, #31]
 801a77a:	429a      	cmp	r2, r3
 801a77c:	d803      	bhi.n	801a786 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801a77e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a780:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801a782:	69fb      	ldr	r3, [r7, #28]
 801a784:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801a786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a788:	681b      	ldr	r3, [r3, #0]
 801a78a:	2b00      	cmp	r3, #0
 801a78c:	d001      	beq.n	801a792 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801a78e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a790:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801a792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a794:	681b      	ldr	r3, [r3, #0]
 801a796:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801a798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a79a:	2b00      	cmp	r3, #0
 801a79c:	d1cb      	bne.n	801a736 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801a79e:	6a3b      	ldr	r3, [r7, #32]
 801a7a0:	2b00      	cmp	r3, #0
 801a7a2:	d008      	beq.n	801a7b6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801a7a4:	69b9      	ldr	r1, [r7, #24]
 801a7a6:	6a38      	ldr	r0, [r7, #32]
 801a7a8:	f7ff ff0e 	bl	801a5c8 <ip_reass_free_complete_datagram>
 801a7ac:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801a7ae:	697a      	ldr	r2, [r7, #20]
 801a7b0:	68fb      	ldr	r3, [r7, #12]
 801a7b2:	4413      	add	r3, r2
 801a7b4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801a7b6:	697a      	ldr	r2, [r7, #20]
 801a7b8:	683b      	ldr	r3, [r7, #0]
 801a7ba:	429a      	cmp	r2, r3
 801a7bc:	da02      	bge.n	801a7c4 <ip_reass_remove_oldest_datagram+0xb4>
 801a7be:	693b      	ldr	r3, [r7, #16]
 801a7c0:	2b01      	cmp	r3, #1
 801a7c2:	dcac      	bgt.n	801a71e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801a7c4:	697b      	ldr	r3, [r7, #20]
}
 801a7c6:	4618      	mov	r0, r3
 801a7c8:	3728      	adds	r7, #40	; 0x28
 801a7ca:	46bd      	mov	sp, r7
 801a7cc:	bd80      	pop	{r7, pc}
 801a7ce:	bf00      	nop
 801a7d0:	20004834 	.word	0x20004834

0801a7d4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801a7d4:	b580      	push	{r7, lr}
 801a7d6:	b084      	sub	sp, #16
 801a7d8:	af00      	add	r7, sp, #0
 801a7da:	6078      	str	r0, [r7, #4]
 801a7dc:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801a7de:	2004      	movs	r0, #4
 801a7e0:	f7f6 f95a 	bl	8010a98 <memp_malloc>
 801a7e4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801a7e6:	68fb      	ldr	r3, [r7, #12]
 801a7e8:	2b00      	cmp	r3, #0
 801a7ea:	d110      	bne.n	801a80e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801a7ec:	6839      	ldr	r1, [r7, #0]
 801a7ee:	6878      	ldr	r0, [r7, #4]
 801a7f0:	f7ff ff8e 	bl	801a710 <ip_reass_remove_oldest_datagram>
 801a7f4:	4602      	mov	r2, r0
 801a7f6:	683b      	ldr	r3, [r7, #0]
 801a7f8:	4293      	cmp	r3, r2
 801a7fa:	dc03      	bgt.n	801a804 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801a7fc:	2004      	movs	r0, #4
 801a7fe:	f7f6 f94b 	bl	8010a98 <memp_malloc>
 801a802:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801a804:	68fb      	ldr	r3, [r7, #12]
 801a806:	2b00      	cmp	r3, #0
 801a808:	d101      	bne.n	801a80e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801a80a:	2300      	movs	r3, #0
 801a80c:	e016      	b.n	801a83c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801a80e:	2220      	movs	r2, #32
 801a810:	2100      	movs	r1, #0
 801a812:	68f8      	ldr	r0, [r7, #12]
 801a814:	f001 fcde 	bl	801c1d4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801a818:	68fb      	ldr	r3, [r7, #12]
 801a81a:	220f      	movs	r2, #15
 801a81c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801a81e:	4b09      	ldr	r3, [pc, #36]	; (801a844 <ip_reass_enqueue_new_datagram+0x70>)
 801a820:	681a      	ldr	r2, [r3, #0]
 801a822:	68fb      	ldr	r3, [r7, #12]
 801a824:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801a826:	4a07      	ldr	r2, [pc, #28]	; (801a844 <ip_reass_enqueue_new_datagram+0x70>)
 801a828:	68fb      	ldr	r3, [r7, #12]
 801a82a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801a82c:	68fb      	ldr	r3, [r7, #12]
 801a82e:	3308      	adds	r3, #8
 801a830:	2214      	movs	r2, #20
 801a832:	6879      	ldr	r1, [r7, #4]
 801a834:	4618      	mov	r0, r3
 801a836:	f001 fcbf 	bl	801c1b8 <memcpy>
  return ipr;
 801a83a:	68fb      	ldr	r3, [r7, #12]
}
 801a83c:	4618      	mov	r0, r3
 801a83e:	3710      	adds	r7, #16
 801a840:	46bd      	mov	sp, r7
 801a842:	bd80      	pop	{r7, pc}
 801a844:	20004834 	.word	0x20004834

0801a848 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801a848:	b580      	push	{r7, lr}
 801a84a:	b082      	sub	sp, #8
 801a84c:	af00      	add	r7, sp, #0
 801a84e:	6078      	str	r0, [r7, #4]
 801a850:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801a852:	4b10      	ldr	r3, [pc, #64]	; (801a894 <ip_reass_dequeue_datagram+0x4c>)
 801a854:	681b      	ldr	r3, [r3, #0]
 801a856:	687a      	ldr	r2, [r7, #4]
 801a858:	429a      	cmp	r2, r3
 801a85a:	d104      	bne.n	801a866 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801a85c:	687b      	ldr	r3, [r7, #4]
 801a85e:	681b      	ldr	r3, [r3, #0]
 801a860:	4a0c      	ldr	r2, [pc, #48]	; (801a894 <ip_reass_dequeue_datagram+0x4c>)
 801a862:	6013      	str	r3, [r2, #0]
 801a864:	e00d      	b.n	801a882 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801a866:	683b      	ldr	r3, [r7, #0]
 801a868:	2b00      	cmp	r3, #0
 801a86a:	d106      	bne.n	801a87a <ip_reass_dequeue_datagram+0x32>
 801a86c:	4b0a      	ldr	r3, [pc, #40]	; (801a898 <ip_reass_dequeue_datagram+0x50>)
 801a86e:	f240 1245 	movw	r2, #325	; 0x145
 801a872:	490a      	ldr	r1, [pc, #40]	; (801a89c <ip_reass_dequeue_datagram+0x54>)
 801a874:	480a      	ldr	r0, [pc, #40]	; (801a8a0 <ip_reass_dequeue_datagram+0x58>)
 801a876:	f001 ff33 	bl	801c6e0 <iprintf>
    prev->next = ipr->next;
 801a87a:	687b      	ldr	r3, [r7, #4]
 801a87c:	681a      	ldr	r2, [r3, #0]
 801a87e:	683b      	ldr	r3, [r7, #0]
 801a880:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801a882:	6879      	ldr	r1, [r7, #4]
 801a884:	2004      	movs	r0, #4
 801a886:	f7f6 f959 	bl	8010b3c <memp_free>
}
 801a88a:	bf00      	nop
 801a88c:	3708      	adds	r7, #8
 801a88e:	46bd      	mov	sp, r7
 801a890:	bd80      	pop	{r7, pc}
 801a892:	bf00      	nop
 801a894:	20004834 	.word	0x20004834
 801a898:	08021d38 	.word	0x08021d38
 801a89c:	08021e00 	.word	0x08021e00
 801a8a0:	08021d80 	.word	0x08021d80

0801a8a4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801a8a4:	b580      	push	{r7, lr}
 801a8a6:	b08c      	sub	sp, #48	; 0x30
 801a8a8:	af00      	add	r7, sp, #0
 801a8aa:	60f8      	str	r0, [r7, #12]
 801a8ac:	60b9      	str	r1, [r7, #8]
 801a8ae:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801a8b0:	2300      	movs	r3, #0
 801a8b2:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801a8b4:	2301      	movs	r3, #1
 801a8b6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801a8b8:	68bb      	ldr	r3, [r7, #8]
 801a8ba:	685b      	ldr	r3, [r3, #4]
 801a8bc:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801a8be:	69fb      	ldr	r3, [r7, #28]
 801a8c0:	885b      	ldrh	r3, [r3, #2]
 801a8c2:	b29b      	uxth	r3, r3
 801a8c4:	4618      	mov	r0, r3
 801a8c6:	f7f5 fbfb 	bl	80100c0 <lwip_htons>
 801a8ca:	4603      	mov	r3, r0
 801a8cc:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801a8ce:	69fb      	ldr	r3, [r7, #28]
 801a8d0:	781b      	ldrb	r3, [r3, #0]
 801a8d2:	f003 030f 	and.w	r3, r3, #15
 801a8d6:	b2db      	uxtb	r3, r3
 801a8d8:	009b      	lsls	r3, r3, #2
 801a8da:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801a8dc:	7e7b      	ldrb	r3, [r7, #25]
 801a8de:	b29b      	uxth	r3, r3
 801a8e0:	8b7a      	ldrh	r2, [r7, #26]
 801a8e2:	429a      	cmp	r2, r3
 801a8e4:	d202      	bcs.n	801a8ec <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a8e6:	f04f 33ff 	mov.w	r3, #4294967295
 801a8ea:	e135      	b.n	801ab58 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801a8ec:	7e7b      	ldrb	r3, [r7, #25]
 801a8ee:	b29b      	uxth	r3, r3
 801a8f0:	8b7a      	ldrh	r2, [r7, #26]
 801a8f2:	1ad3      	subs	r3, r2, r3
 801a8f4:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801a8f6:	69fb      	ldr	r3, [r7, #28]
 801a8f8:	88db      	ldrh	r3, [r3, #6]
 801a8fa:	b29b      	uxth	r3, r3
 801a8fc:	4618      	mov	r0, r3
 801a8fe:	f7f5 fbdf 	bl	80100c0 <lwip_htons>
 801a902:	4603      	mov	r3, r0
 801a904:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a908:	b29b      	uxth	r3, r3
 801a90a:	00db      	lsls	r3, r3, #3
 801a90c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801a90e:	68bb      	ldr	r3, [r7, #8]
 801a910:	685b      	ldr	r3, [r3, #4]
 801a912:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801a914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a916:	2200      	movs	r2, #0
 801a918:	701a      	strb	r2, [r3, #0]
 801a91a:	2200      	movs	r2, #0
 801a91c:	705a      	strb	r2, [r3, #1]
 801a91e:	2200      	movs	r2, #0
 801a920:	709a      	strb	r2, [r3, #2]
 801a922:	2200      	movs	r2, #0
 801a924:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801a926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a928:	8afa      	ldrh	r2, [r7, #22]
 801a92a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801a92c:	8afa      	ldrh	r2, [r7, #22]
 801a92e:	8b7b      	ldrh	r3, [r7, #26]
 801a930:	4413      	add	r3, r2
 801a932:	b29a      	uxth	r2, r3
 801a934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a936:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801a938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a93a:	88db      	ldrh	r3, [r3, #6]
 801a93c:	b29b      	uxth	r3, r3
 801a93e:	8afa      	ldrh	r2, [r7, #22]
 801a940:	429a      	cmp	r2, r3
 801a942:	d902      	bls.n	801a94a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a944:	f04f 33ff 	mov.w	r3, #4294967295
 801a948:	e106      	b.n	801ab58 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801a94a:	68fb      	ldr	r3, [r7, #12]
 801a94c:	685b      	ldr	r3, [r3, #4]
 801a94e:	627b      	str	r3, [r7, #36]	; 0x24
 801a950:	e068      	b.n	801aa24 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801a952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a954:	685b      	ldr	r3, [r3, #4]
 801a956:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801a958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a95a:	889b      	ldrh	r3, [r3, #4]
 801a95c:	b29a      	uxth	r2, r3
 801a95e:	693b      	ldr	r3, [r7, #16]
 801a960:	889b      	ldrh	r3, [r3, #4]
 801a962:	b29b      	uxth	r3, r3
 801a964:	429a      	cmp	r2, r3
 801a966:	d235      	bcs.n	801a9d4 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801a968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a96a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a96c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801a96e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a970:	2b00      	cmp	r3, #0
 801a972:	d020      	beq.n	801a9b6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801a974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a976:	889b      	ldrh	r3, [r3, #4]
 801a978:	b29a      	uxth	r2, r3
 801a97a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a97c:	88db      	ldrh	r3, [r3, #6]
 801a97e:	b29b      	uxth	r3, r3
 801a980:	429a      	cmp	r2, r3
 801a982:	d307      	bcc.n	801a994 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801a984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a986:	88db      	ldrh	r3, [r3, #6]
 801a988:	b29a      	uxth	r2, r3
 801a98a:	693b      	ldr	r3, [r7, #16]
 801a98c:	889b      	ldrh	r3, [r3, #4]
 801a98e:	b29b      	uxth	r3, r3
 801a990:	429a      	cmp	r2, r3
 801a992:	d902      	bls.n	801a99a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a994:	f04f 33ff 	mov.w	r3, #4294967295
 801a998:	e0de      	b.n	801ab58 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801a99a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a99c:	68ba      	ldr	r2, [r7, #8]
 801a99e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801a9a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a9a2:	88db      	ldrh	r3, [r3, #6]
 801a9a4:	b29a      	uxth	r2, r3
 801a9a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a9a8:	889b      	ldrh	r3, [r3, #4]
 801a9aa:	b29b      	uxth	r3, r3
 801a9ac:	429a      	cmp	r2, r3
 801a9ae:	d03d      	beq.n	801aa2c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801a9b0:	2300      	movs	r3, #0
 801a9b2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801a9b4:	e03a      	b.n	801aa2c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801a9b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a9b8:	88db      	ldrh	r3, [r3, #6]
 801a9ba:	b29a      	uxth	r2, r3
 801a9bc:	693b      	ldr	r3, [r7, #16]
 801a9be:	889b      	ldrh	r3, [r3, #4]
 801a9c0:	b29b      	uxth	r3, r3
 801a9c2:	429a      	cmp	r2, r3
 801a9c4:	d902      	bls.n	801a9cc <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a9c6:	f04f 33ff 	mov.w	r3, #4294967295
 801a9ca:	e0c5      	b.n	801ab58 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801a9cc:	68fb      	ldr	r3, [r7, #12]
 801a9ce:	68ba      	ldr	r2, [r7, #8]
 801a9d0:	605a      	str	r2, [r3, #4]
      break;
 801a9d2:	e02b      	b.n	801aa2c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801a9d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a9d6:	889b      	ldrh	r3, [r3, #4]
 801a9d8:	b29a      	uxth	r2, r3
 801a9da:	693b      	ldr	r3, [r7, #16]
 801a9dc:	889b      	ldrh	r3, [r3, #4]
 801a9de:	b29b      	uxth	r3, r3
 801a9e0:	429a      	cmp	r2, r3
 801a9e2:	d102      	bne.n	801a9ea <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a9e4:	f04f 33ff 	mov.w	r3, #4294967295
 801a9e8:	e0b6      	b.n	801ab58 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801a9ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a9ec:	889b      	ldrh	r3, [r3, #4]
 801a9ee:	b29a      	uxth	r2, r3
 801a9f0:	693b      	ldr	r3, [r7, #16]
 801a9f2:	88db      	ldrh	r3, [r3, #6]
 801a9f4:	b29b      	uxth	r3, r3
 801a9f6:	429a      	cmp	r2, r3
 801a9f8:	d202      	bcs.n	801aa00 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a9fa:	f04f 33ff 	mov.w	r3, #4294967295
 801a9fe:	e0ab      	b.n	801ab58 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801aa00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa02:	2b00      	cmp	r3, #0
 801aa04:	d009      	beq.n	801aa1a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801aa06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa08:	88db      	ldrh	r3, [r3, #6]
 801aa0a:	b29a      	uxth	r2, r3
 801aa0c:	693b      	ldr	r3, [r7, #16]
 801aa0e:	889b      	ldrh	r3, [r3, #4]
 801aa10:	b29b      	uxth	r3, r3
 801aa12:	429a      	cmp	r2, r3
 801aa14:	d001      	beq.n	801aa1a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801aa16:	2300      	movs	r3, #0
 801aa18:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801aa1a:	693b      	ldr	r3, [r7, #16]
 801aa1c:	681b      	ldr	r3, [r3, #0]
 801aa1e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801aa20:	693b      	ldr	r3, [r7, #16]
 801aa22:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801aa24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa26:	2b00      	cmp	r3, #0
 801aa28:	d193      	bne.n	801a952 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801aa2a:	e000      	b.n	801aa2e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801aa2c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801aa2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa30:	2b00      	cmp	r3, #0
 801aa32:	d12d      	bne.n	801aa90 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801aa34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa36:	2b00      	cmp	r3, #0
 801aa38:	d01c      	beq.n	801aa74 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801aa3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa3c:	88db      	ldrh	r3, [r3, #6]
 801aa3e:	b29a      	uxth	r2, r3
 801aa40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa42:	889b      	ldrh	r3, [r3, #4]
 801aa44:	b29b      	uxth	r3, r3
 801aa46:	429a      	cmp	r2, r3
 801aa48:	d906      	bls.n	801aa58 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801aa4a:	4b45      	ldr	r3, [pc, #276]	; (801ab60 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801aa4c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801aa50:	4944      	ldr	r1, [pc, #272]	; (801ab64 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801aa52:	4845      	ldr	r0, [pc, #276]	; (801ab68 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801aa54:	f001 fe44 	bl	801c6e0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801aa58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa5a:	68ba      	ldr	r2, [r7, #8]
 801aa5c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801aa5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa60:	88db      	ldrh	r3, [r3, #6]
 801aa62:	b29a      	uxth	r2, r3
 801aa64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa66:	889b      	ldrh	r3, [r3, #4]
 801aa68:	b29b      	uxth	r3, r3
 801aa6a:	429a      	cmp	r2, r3
 801aa6c:	d010      	beq.n	801aa90 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801aa6e:	2300      	movs	r3, #0
 801aa70:	623b      	str	r3, [r7, #32]
 801aa72:	e00d      	b.n	801aa90 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801aa74:	68fb      	ldr	r3, [r7, #12]
 801aa76:	685b      	ldr	r3, [r3, #4]
 801aa78:	2b00      	cmp	r3, #0
 801aa7a:	d006      	beq.n	801aa8a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801aa7c:	4b38      	ldr	r3, [pc, #224]	; (801ab60 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801aa7e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801aa82:	493a      	ldr	r1, [pc, #232]	; (801ab6c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801aa84:	4838      	ldr	r0, [pc, #224]	; (801ab68 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801aa86:	f001 fe2b 	bl	801c6e0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801aa8a:	68fb      	ldr	r3, [r7, #12]
 801aa8c:	68ba      	ldr	r2, [r7, #8]
 801aa8e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801aa90:	687b      	ldr	r3, [r7, #4]
 801aa92:	2b00      	cmp	r3, #0
 801aa94:	d105      	bne.n	801aaa2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801aa96:	68fb      	ldr	r3, [r7, #12]
 801aa98:	7f9b      	ldrb	r3, [r3, #30]
 801aa9a:	f003 0301 	and.w	r3, r3, #1
 801aa9e:	2b00      	cmp	r3, #0
 801aaa0:	d059      	beq.n	801ab56 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801aaa2:	6a3b      	ldr	r3, [r7, #32]
 801aaa4:	2b00      	cmp	r3, #0
 801aaa6:	d04f      	beq.n	801ab48 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801aaa8:	68fb      	ldr	r3, [r7, #12]
 801aaaa:	685b      	ldr	r3, [r3, #4]
 801aaac:	2b00      	cmp	r3, #0
 801aaae:	d006      	beq.n	801aabe <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801aab0:	68fb      	ldr	r3, [r7, #12]
 801aab2:	685b      	ldr	r3, [r3, #4]
 801aab4:	685b      	ldr	r3, [r3, #4]
 801aab6:	889b      	ldrh	r3, [r3, #4]
 801aab8:	b29b      	uxth	r3, r3
 801aaba:	2b00      	cmp	r3, #0
 801aabc:	d002      	beq.n	801aac4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801aabe:	2300      	movs	r3, #0
 801aac0:	623b      	str	r3, [r7, #32]
 801aac2:	e041      	b.n	801ab48 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801aac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aac6:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801aac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aaca:	681b      	ldr	r3, [r3, #0]
 801aacc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801aace:	e012      	b.n	801aaf6 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801aad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aad2:	685b      	ldr	r3, [r3, #4]
 801aad4:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801aad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aad8:	88db      	ldrh	r3, [r3, #6]
 801aada:	b29a      	uxth	r2, r3
 801aadc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aade:	889b      	ldrh	r3, [r3, #4]
 801aae0:	b29b      	uxth	r3, r3
 801aae2:	429a      	cmp	r2, r3
 801aae4:	d002      	beq.n	801aaec <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801aae6:	2300      	movs	r3, #0
 801aae8:	623b      	str	r3, [r7, #32]
            break;
 801aaea:	e007      	b.n	801aafc <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801aaec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aaee:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801aaf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aaf2:	681b      	ldr	r3, [r3, #0]
 801aaf4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801aaf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aaf8:	2b00      	cmp	r3, #0
 801aafa:	d1e9      	bne.n	801aad0 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801aafc:	6a3b      	ldr	r3, [r7, #32]
 801aafe:	2b00      	cmp	r3, #0
 801ab00:	d022      	beq.n	801ab48 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801ab02:	68fb      	ldr	r3, [r7, #12]
 801ab04:	685b      	ldr	r3, [r3, #4]
 801ab06:	2b00      	cmp	r3, #0
 801ab08:	d106      	bne.n	801ab18 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801ab0a:	4b15      	ldr	r3, [pc, #84]	; (801ab60 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801ab0c:	f240 12df 	movw	r2, #479	; 0x1df
 801ab10:	4917      	ldr	r1, [pc, #92]	; (801ab70 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801ab12:	4815      	ldr	r0, [pc, #84]	; (801ab68 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801ab14:	f001 fde4 	bl	801c6e0 <iprintf>
          LWIP_ASSERT("sanity check",
 801ab18:	68fb      	ldr	r3, [r7, #12]
 801ab1a:	685b      	ldr	r3, [r3, #4]
 801ab1c:	685b      	ldr	r3, [r3, #4]
 801ab1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ab20:	429a      	cmp	r2, r3
 801ab22:	d106      	bne.n	801ab32 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801ab24:	4b0e      	ldr	r3, [pc, #56]	; (801ab60 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801ab26:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801ab2a:	4911      	ldr	r1, [pc, #68]	; (801ab70 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801ab2c:	480e      	ldr	r0, [pc, #56]	; (801ab68 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801ab2e:	f001 fdd7 	bl	801c6e0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801ab32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab34:	681b      	ldr	r3, [r3, #0]
 801ab36:	2b00      	cmp	r3, #0
 801ab38:	d006      	beq.n	801ab48 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801ab3a:	4b09      	ldr	r3, [pc, #36]	; (801ab60 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801ab3c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801ab40:	490c      	ldr	r1, [pc, #48]	; (801ab74 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801ab42:	4809      	ldr	r0, [pc, #36]	; (801ab68 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801ab44:	f001 fdcc 	bl	801c6e0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801ab48:	6a3b      	ldr	r3, [r7, #32]
 801ab4a:	2b00      	cmp	r3, #0
 801ab4c:	bf14      	ite	ne
 801ab4e:	2301      	movne	r3, #1
 801ab50:	2300      	moveq	r3, #0
 801ab52:	b2db      	uxtb	r3, r3
 801ab54:	e000      	b.n	801ab58 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801ab56:	2300      	movs	r3, #0
}
 801ab58:	4618      	mov	r0, r3
 801ab5a:	3730      	adds	r7, #48	; 0x30
 801ab5c:	46bd      	mov	sp, r7
 801ab5e:	bd80      	pop	{r7, pc}
 801ab60:	08021d38 	.word	0x08021d38
 801ab64:	08021e1c 	.word	0x08021e1c
 801ab68:	08021d80 	.word	0x08021d80
 801ab6c:	08021e3c 	.word	0x08021e3c
 801ab70:	08021e74 	.word	0x08021e74
 801ab74:	08021e84 	.word	0x08021e84

0801ab78 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801ab78:	b580      	push	{r7, lr}
 801ab7a:	b08e      	sub	sp, #56	; 0x38
 801ab7c:	af00      	add	r7, sp, #0
 801ab7e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801ab80:	687b      	ldr	r3, [r7, #4]
 801ab82:	685b      	ldr	r3, [r3, #4]
 801ab84:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801ab86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab88:	781b      	ldrb	r3, [r3, #0]
 801ab8a:	f003 030f 	and.w	r3, r3, #15
 801ab8e:	b2db      	uxtb	r3, r3
 801ab90:	009b      	lsls	r3, r3, #2
 801ab92:	b2db      	uxtb	r3, r3
 801ab94:	2b14      	cmp	r3, #20
 801ab96:	f040 8167 	bne.w	801ae68 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801ab9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab9c:	88db      	ldrh	r3, [r3, #6]
 801ab9e:	b29b      	uxth	r3, r3
 801aba0:	4618      	mov	r0, r3
 801aba2:	f7f5 fa8d 	bl	80100c0 <lwip_htons>
 801aba6:	4603      	mov	r3, r0
 801aba8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801abac:	b29b      	uxth	r3, r3
 801abae:	00db      	lsls	r3, r3, #3
 801abb0:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801abb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801abb4:	885b      	ldrh	r3, [r3, #2]
 801abb6:	b29b      	uxth	r3, r3
 801abb8:	4618      	mov	r0, r3
 801abba:	f7f5 fa81 	bl	80100c0 <lwip_htons>
 801abbe:	4603      	mov	r3, r0
 801abc0:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801abc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801abc4:	781b      	ldrb	r3, [r3, #0]
 801abc6:	f003 030f 	and.w	r3, r3, #15
 801abca:	b2db      	uxtb	r3, r3
 801abcc:	009b      	lsls	r3, r3, #2
 801abce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801abd2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801abd6:	b29b      	uxth	r3, r3
 801abd8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801abda:	429a      	cmp	r2, r3
 801abdc:	f0c0 8146 	bcc.w	801ae6c <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801abe0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801abe4:	b29b      	uxth	r3, r3
 801abe6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801abe8:	1ad3      	subs	r3, r2, r3
 801abea:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801abec:	6878      	ldr	r0, [r7, #4]
 801abee:	f7f6 feb1 	bl	8011954 <pbuf_clen>
 801abf2:	4603      	mov	r3, r0
 801abf4:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801abf6:	4b9f      	ldr	r3, [pc, #636]	; (801ae74 <ip4_reass+0x2fc>)
 801abf8:	881b      	ldrh	r3, [r3, #0]
 801abfa:	461a      	mov	r2, r3
 801abfc:	8c3b      	ldrh	r3, [r7, #32]
 801abfe:	4413      	add	r3, r2
 801ac00:	2b0a      	cmp	r3, #10
 801ac02:	dd10      	ble.n	801ac26 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801ac04:	8c3b      	ldrh	r3, [r7, #32]
 801ac06:	4619      	mov	r1, r3
 801ac08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801ac0a:	f7ff fd81 	bl	801a710 <ip_reass_remove_oldest_datagram>
 801ac0e:	4603      	mov	r3, r0
 801ac10:	2b00      	cmp	r3, #0
 801ac12:	f000 812d 	beq.w	801ae70 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801ac16:	4b97      	ldr	r3, [pc, #604]	; (801ae74 <ip4_reass+0x2fc>)
 801ac18:	881b      	ldrh	r3, [r3, #0]
 801ac1a:	461a      	mov	r2, r3
 801ac1c:	8c3b      	ldrh	r3, [r7, #32]
 801ac1e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801ac20:	2b0a      	cmp	r3, #10
 801ac22:	f300 8125 	bgt.w	801ae70 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801ac26:	4b94      	ldr	r3, [pc, #592]	; (801ae78 <ip4_reass+0x300>)
 801ac28:	681b      	ldr	r3, [r3, #0]
 801ac2a:	633b      	str	r3, [r7, #48]	; 0x30
 801ac2c:	e015      	b.n	801ac5a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801ac2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ac30:	695a      	ldr	r2, [r3, #20]
 801ac32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ac34:	68db      	ldr	r3, [r3, #12]
 801ac36:	429a      	cmp	r2, r3
 801ac38:	d10c      	bne.n	801ac54 <ip4_reass+0xdc>
 801ac3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ac3c:	699a      	ldr	r2, [r3, #24]
 801ac3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ac40:	691b      	ldr	r3, [r3, #16]
 801ac42:	429a      	cmp	r2, r3
 801ac44:	d106      	bne.n	801ac54 <ip4_reass+0xdc>
 801ac46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ac48:	899a      	ldrh	r2, [r3, #12]
 801ac4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ac4c:	889b      	ldrh	r3, [r3, #4]
 801ac4e:	b29b      	uxth	r3, r3
 801ac50:	429a      	cmp	r2, r3
 801ac52:	d006      	beq.n	801ac62 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801ac54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ac56:	681b      	ldr	r3, [r3, #0]
 801ac58:	633b      	str	r3, [r7, #48]	; 0x30
 801ac5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ac5c:	2b00      	cmp	r3, #0
 801ac5e:	d1e6      	bne.n	801ac2e <ip4_reass+0xb6>
 801ac60:	e000      	b.n	801ac64 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801ac62:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801ac64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ac66:	2b00      	cmp	r3, #0
 801ac68:	d109      	bne.n	801ac7e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801ac6a:	8c3b      	ldrh	r3, [r7, #32]
 801ac6c:	4619      	mov	r1, r3
 801ac6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801ac70:	f7ff fdb0 	bl	801a7d4 <ip_reass_enqueue_new_datagram>
 801ac74:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801ac76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ac78:	2b00      	cmp	r3, #0
 801ac7a:	d11c      	bne.n	801acb6 <ip4_reass+0x13e>
      goto nullreturn;
 801ac7c:	e109      	b.n	801ae92 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801ac7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ac80:	88db      	ldrh	r3, [r3, #6]
 801ac82:	b29b      	uxth	r3, r3
 801ac84:	4618      	mov	r0, r3
 801ac86:	f7f5 fa1b 	bl	80100c0 <lwip_htons>
 801ac8a:	4603      	mov	r3, r0
 801ac8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ac90:	2b00      	cmp	r3, #0
 801ac92:	d110      	bne.n	801acb6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801ac94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ac96:	89db      	ldrh	r3, [r3, #14]
 801ac98:	4618      	mov	r0, r3
 801ac9a:	f7f5 fa11 	bl	80100c0 <lwip_htons>
 801ac9e:	4603      	mov	r3, r0
 801aca0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801aca4:	2b00      	cmp	r3, #0
 801aca6:	d006      	beq.n	801acb6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801aca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801acaa:	3308      	adds	r3, #8
 801acac:	2214      	movs	r2, #20
 801acae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801acb0:	4618      	mov	r0, r3
 801acb2:	f001 fa81 	bl	801c1b8 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801acb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801acb8:	88db      	ldrh	r3, [r3, #6]
 801acba:	b29b      	uxth	r3, r3
 801acbc:	f003 0320 	and.w	r3, r3, #32
 801acc0:	2b00      	cmp	r3, #0
 801acc2:	bf0c      	ite	eq
 801acc4:	2301      	moveq	r3, #1
 801acc6:	2300      	movne	r3, #0
 801acc8:	b2db      	uxtb	r3, r3
 801acca:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801accc:	69fb      	ldr	r3, [r7, #28]
 801acce:	2b00      	cmp	r3, #0
 801acd0:	d00e      	beq.n	801acf0 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801acd2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801acd4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801acd6:	4413      	add	r3, r2
 801acd8:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801acda:	8b7a      	ldrh	r2, [r7, #26]
 801acdc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801acde:	429a      	cmp	r2, r3
 801ace0:	f0c0 80a0 	bcc.w	801ae24 <ip4_reass+0x2ac>
 801ace4:	8b7b      	ldrh	r3, [r7, #26]
 801ace6:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801acea:	4293      	cmp	r3, r2
 801acec:	f200 809a 	bhi.w	801ae24 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801acf0:	69fa      	ldr	r2, [r7, #28]
 801acf2:	6879      	ldr	r1, [r7, #4]
 801acf4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801acf6:	f7ff fdd5 	bl	801a8a4 <ip_reass_chain_frag_into_datagram_and_validate>
 801acfa:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801acfc:	697b      	ldr	r3, [r7, #20]
 801acfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ad02:	f000 8091 	beq.w	801ae28 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801ad06:	4b5b      	ldr	r3, [pc, #364]	; (801ae74 <ip4_reass+0x2fc>)
 801ad08:	881a      	ldrh	r2, [r3, #0]
 801ad0a:	8c3b      	ldrh	r3, [r7, #32]
 801ad0c:	4413      	add	r3, r2
 801ad0e:	b29a      	uxth	r2, r3
 801ad10:	4b58      	ldr	r3, [pc, #352]	; (801ae74 <ip4_reass+0x2fc>)
 801ad12:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801ad14:	69fb      	ldr	r3, [r7, #28]
 801ad16:	2b00      	cmp	r3, #0
 801ad18:	d00d      	beq.n	801ad36 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801ad1a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801ad1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801ad1e:	4413      	add	r3, r2
 801ad20:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801ad22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad24:	8a7a      	ldrh	r2, [r7, #18]
 801ad26:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801ad28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad2a:	7f9b      	ldrb	r3, [r3, #30]
 801ad2c:	f043 0301 	orr.w	r3, r3, #1
 801ad30:	b2da      	uxtb	r2, r3
 801ad32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad34:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801ad36:	697b      	ldr	r3, [r7, #20]
 801ad38:	2b01      	cmp	r3, #1
 801ad3a:	d171      	bne.n	801ae20 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801ad3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad3e:	8b9b      	ldrh	r3, [r3, #28]
 801ad40:	3314      	adds	r3, #20
 801ad42:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801ad44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad46:	685b      	ldr	r3, [r3, #4]
 801ad48:	685b      	ldr	r3, [r3, #4]
 801ad4a:	681b      	ldr	r3, [r3, #0]
 801ad4c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801ad4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad50:	685b      	ldr	r3, [r3, #4]
 801ad52:	685b      	ldr	r3, [r3, #4]
 801ad54:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801ad56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad58:	3308      	adds	r3, #8
 801ad5a:	2214      	movs	r2, #20
 801ad5c:	4619      	mov	r1, r3
 801ad5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801ad60:	f001 fa2a 	bl	801c1b8 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801ad64:	8a3b      	ldrh	r3, [r7, #16]
 801ad66:	4618      	mov	r0, r3
 801ad68:	f7f5 f9aa 	bl	80100c0 <lwip_htons>
 801ad6c:	4603      	mov	r3, r0
 801ad6e:	461a      	mov	r2, r3
 801ad70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad72:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801ad74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad76:	2200      	movs	r2, #0
 801ad78:	719a      	strb	r2, [r3, #6]
 801ad7a:	2200      	movs	r2, #0
 801ad7c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801ad7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad80:	2200      	movs	r2, #0
 801ad82:	729a      	strb	r2, [r3, #10]
 801ad84:	2200      	movs	r2, #0
 801ad86:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801ad88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad8a:	685b      	ldr	r3, [r3, #4]
 801ad8c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801ad8e:	e00d      	b.n	801adac <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801ad90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ad92:	685b      	ldr	r3, [r3, #4]
 801ad94:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801ad96:	2114      	movs	r1, #20
 801ad98:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801ad9a:	f7f6 fcc7 	bl	801172c <pbuf_remove_header>
      pbuf_cat(p, r);
 801ad9e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801ada0:	6878      	ldr	r0, [r7, #4]
 801ada2:	f7f6 fe17 	bl	80119d4 <pbuf_cat>
      r = iprh->next_pbuf;
 801ada6:	68fb      	ldr	r3, [r7, #12]
 801ada8:	681b      	ldr	r3, [r3, #0]
 801adaa:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801adac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801adae:	2b00      	cmp	r3, #0
 801adb0:	d1ee      	bne.n	801ad90 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801adb2:	4b31      	ldr	r3, [pc, #196]	; (801ae78 <ip4_reass+0x300>)
 801adb4:	681b      	ldr	r3, [r3, #0]
 801adb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801adb8:	429a      	cmp	r2, r3
 801adba:	d102      	bne.n	801adc2 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801adbc:	2300      	movs	r3, #0
 801adbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 801adc0:	e010      	b.n	801ade4 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801adc2:	4b2d      	ldr	r3, [pc, #180]	; (801ae78 <ip4_reass+0x300>)
 801adc4:	681b      	ldr	r3, [r3, #0]
 801adc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 801adc8:	e007      	b.n	801adda <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801adca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801adcc:	681b      	ldr	r3, [r3, #0]
 801adce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801add0:	429a      	cmp	r2, r3
 801add2:	d006      	beq.n	801ade2 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801add4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801add6:	681b      	ldr	r3, [r3, #0]
 801add8:	62fb      	str	r3, [r7, #44]	; 0x2c
 801adda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801addc:	2b00      	cmp	r3, #0
 801adde:	d1f4      	bne.n	801adca <ip4_reass+0x252>
 801ade0:	e000      	b.n	801ade4 <ip4_reass+0x26c>
          break;
 801ade2:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801ade4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801ade6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801ade8:	f7ff fd2e 	bl	801a848 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801adec:	6878      	ldr	r0, [r7, #4]
 801adee:	f7f6 fdb1 	bl	8011954 <pbuf_clen>
 801adf2:	4603      	mov	r3, r0
 801adf4:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801adf6:	4b1f      	ldr	r3, [pc, #124]	; (801ae74 <ip4_reass+0x2fc>)
 801adf8:	881b      	ldrh	r3, [r3, #0]
 801adfa:	8c3a      	ldrh	r2, [r7, #32]
 801adfc:	429a      	cmp	r2, r3
 801adfe:	d906      	bls.n	801ae0e <ip4_reass+0x296>
 801ae00:	4b1e      	ldr	r3, [pc, #120]	; (801ae7c <ip4_reass+0x304>)
 801ae02:	f240 229b 	movw	r2, #667	; 0x29b
 801ae06:	491e      	ldr	r1, [pc, #120]	; (801ae80 <ip4_reass+0x308>)
 801ae08:	481e      	ldr	r0, [pc, #120]	; (801ae84 <ip4_reass+0x30c>)
 801ae0a:	f001 fc69 	bl	801c6e0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801ae0e:	4b19      	ldr	r3, [pc, #100]	; (801ae74 <ip4_reass+0x2fc>)
 801ae10:	881a      	ldrh	r2, [r3, #0]
 801ae12:	8c3b      	ldrh	r3, [r7, #32]
 801ae14:	1ad3      	subs	r3, r2, r3
 801ae16:	b29a      	uxth	r2, r3
 801ae18:	4b16      	ldr	r3, [pc, #88]	; (801ae74 <ip4_reass+0x2fc>)
 801ae1a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801ae1c:	687b      	ldr	r3, [r7, #4]
 801ae1e:	e03c      	b.n	801ae9a <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801ae20:	2300      	movs	r3, #0
 801ae22:	e03a      	b.n	801ae9a <ip4_reass+0x322>
      goto nullreturn_ipr;
 801ae24:	bf00      	nop
 801ae26:	e000      	b.n	801ae2a <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 801ae28:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801ae2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae2c:	2b00      	cmp	r3, #0
 801ae2e:	d106      	bne.n	801ae3e <ip4_reass+0x2c6>
 801ae30:	4b12      	ldr	r3, [pc, #72]	; (801ae7c <ip4_reass+0x304>)
 801ae32:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801ae36:	4914      	ldr	r1, [pc, #80]	; (801ae88 <ip4_reass+0x310>)
 801ae38:	4812      	ldr	r0, [pc, #72]	; (801ae84 <ip4_reass+0x30c>)
 801ae3a:	f001 fc51 	bl	801c6e0 <iprintf>
  if (ipr->p == NULL) {
 801ae3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae40:	685b      	ldr	r3, [r3, #4]
 801ae42:	2b00      	cmp	r3, #0
 801ae44:	d124      	bne.n	801ae90 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801ae46:	4b0c      	ldr	r3, [pc, #48]	; (801ae78 <ip4_reass+0x300>)
 801ae48:	681b      	ldr	r3, [r3, #0]
 801ae4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ae4c:	429a      	cmp	r2, r3
 801ae4e:	d006      	beq.n	801ae5e <ip4_reass+0x2e6>
 801ae50:	4b0a      	ldr	r3, [pc, #40]	; (801ae7c <ip4_reass+0x304>)
 801ae52:	f240 22ab 	movw	r2, #683	; 0x2ab
 801ae56:	490d      	ldr	r1, [pc, #52]	; (801ae8c <ip4_reass+0x314>)
 801ae58:	480a      	ldr	r0, [pc, #40]	; (801ae84 <ip4_reass+0x30c>)
 801ae5a:	f001 fc41 	bl	801c6e0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801ae5e:	2100      	movs	r1, #0
 801ae60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801ae62:	f7ff fcf1 	bl	801a848 <ip_reass_dequeue_datagram>
 801ae66:	e014      	b.n	801ae92 <ip4_reass+0x31a>
    goto nullreturn;
 801ae68:	bf00      	nop
 801ae6a:	e012      	b.n	801ae92 <ip4_reass+0x31a>
    goto nullreturn;
 801ae6c:	bf00      	nop
 801ae6e:	e010      	b.n	801ae92 <ip4_reass+0x31a>
      goto nullreturn;
 801ae70:	bf00      	nop
 801ae72:	e00e      	b.n	801ae92 <ip4_reass+0x31a>
 801ae74:	20004838 	.word	0x20004838
 801ae78:	20004834 	.word	0x20004834
 801ae7c:	08021d38 	.word	0x08021d38
 801ae80:	08021ea8 	.word	0x08021ea8
 801ae84:	08021d80 	.word	0x08021d80
 801ae88:	08021ec4 	.word	0x08021ec4
 801ae8c:	08021ed0 	.word	0x08021ed0
  }

nullreturn:
 801ae90:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801ae92:	6878      	ldr	r0, [r7, #4]
 801ae94:	f7f6 fcd0 	bl	8011838 <pbuf_free>
  return NULL;
 801ae98:	2300      	movs	r3, #0
}
 801ae9a:	4618      	mov	r0, r3
 801ae9c:	3738      	adds	r7, #56	; 0x38
 801ae9e:	46bd      	mov	sp, r7
 801aea0:	bd80      	pop	{r7, pc}
 801aea2:	bf00      	nop

0801aea4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801aea4:	b580      	push	{r7, lr}
 801aea6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801aea8:	2005      	movs	r0, #5
 801aeaa:	f7f5 fdf5 	bl	8010a98 <memp_malloc>
 801aeae:	4603      	mov	r3, r0
}
 801aeb0:	4618      	mov	r0, r3
 801aeb2:	bd80      	pop	{r7, pc}

0801aeb4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801aeb4:	b580      	push	{r7, lr}
 801aeb6:	b082      	sub	sp, #8
 801aeb8:	af00      	add	r7, sp, #0
 801aeba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801aebc:	687b      	ldr	r3, [r7, #4]
 801aebe:	2b00      	cmp	r3, #0
 801aec0:	d106      	bne.n	801aed0 <ip_frag_free_pbuf_custom_ref+0x1c>
 801aec2:	4b07      	ldr	r3, [pc, #28]	; (801aee0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801aec4:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801aec8:	4906      	ldr	r1, [pc, #24]	; (801aee4 <ip_frag_free_pbuf_custom_ref+0x30>)
 801aeca:	4807      	ldr	r0, [pc, #28]	; (801aee8 <ip_frag_free_pbuf_custom_ref+0x34>)
 801aecc:	f001 fc08 	bl	801c6e0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801aed0:	6879      	ldr	r1, [r7, #4]
 801aed2:	2005      	movs	r0, #5
 801aed4:	f7f5 fe32 	bl	8010b3c <memp_free>
}
 801aed8:	bf00      	nop
 801aeda:	3708      	adds	r7, #8
 801aedc:	46bd      	mov	sp, r7
 801aede:	bd80      	pop	{r7, pc}
 801aee0:	08021d38 	.word	0x08021d38
 801aee4:	08021ef0 	.word	0x08021ef0
 801aee8:	08021d80 	.word	0x08021d80

0801aeec <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801aeec:	b580      	push	{r7, lr}
 801aeee:	b084      	sub	sp, #16
 801aef0:	af00      	add	r7, sp, #0
 801aef2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801aef4:	687b      	ldr	r3, [r7, #4]
 801aef6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801aef8:	68fb      	ldr	r3, [r7, #12]
 801aefa:	2b00      	cmp	r3, #0
 801aefc:	d106      	bne.n	801af0c <ipfrag_free_pbuf_custom+0x20>
 801aefe:	4b11      	ldr	r3, [pc, #68]	; (801af44 <ipfrag_free_pbuf_custom+0x58>)
 801af00:	f240 22ce 	movw	r2, #718	; 0x2ce
 801af04:	4910      	ldr	r1, [pc, #64]	; (801af48 <ipfrag_free_pbuf_custom+0x5c>)
 801af06:	4811      	ldr	r0, [pc, #68]	; (801af4c <ipfrag_free_pbuf_custom+0x60>)
 801af08:	f001 fbea 	bl	801c6e0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801af0c:	68fa      	ldr	r2, [r7, #12]
 801af0e:	687b      	ldr	r3, [r7, #4]
 801af10:	429a      	cmp	r2, r3
 801af12:	d006      	beq.n	801af22 <ipfrag_free_pbuf_custom+0x36>
 801af14:	4b0b      	ldr	r3, [pc, #44]	; (801af44 <ipfrag_free_pbuf_custom+0x58>)
 801af16:	f240 22cf 	movw	r2, #719	; 0x2cf
 801af1a:	490d      	ldr	r1, [pc, #52]	; (801af50 <ipfrag_free_pbuf_custom+0x64>)
 801af1c:	480b      	ldr	r0, [pc, #44]	; (801af4c <ipfrag_free_pbuf_custom+0x60>)
 801af1e:	f001 fbdf 	bl	801c6e0 <iprintf>
  if (pcr->original != NULL) {
 801af22:	68fb      	ldr	r3, [r7, #12]
 801af24:	695b      	ldr	r3, [r3, #20]
 801af26:	2b00      	cmp	r3, #0
 801af28:	d004      	beq.n	801af34 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801af2a:	68fb      	ldr	r3, [r7, #12]
 801af2c:	695b      	ldr	r3, [r3, #20]
 801af2e:	4618      	mov	r0, r3
 801af30:	f7f6 fc82 	bl	8011838 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801af34:	68f8      	ldr	r0, [r7, #12]
 801af36:	f7ff ffbd 	bl	801aeb4 <ip_frag_free_pbuf_custom_ref>
}
 801af3a:	bf00      	nop
 801af3c:	3710      	adds	r7, #16
 801af3e:	46bd      	mov	sp, r7
 801af40:	bd80      	pop	{r7, pc}
 801af42:	bf00      	nop
 801af44:	08021d38 	.word	0x08021d38
 801af48:	08021efc 	.word	0x08021efc
 801af4c:	08021d80 	.word	0x08021d80
 801af50:	08021f08 	.word	0x08021f08

0801af54 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801af54:	b580      	push	{r7, lr}
 801af56:	b094      	sub	sp, #80	; 0x50
 801af58:	af02      	add	r7, sp, #8
 801af5a:	60f8      	str	r0, [r7, #12]
 801af5c:	60b9      	str	r1, [r7, #8]
 801af5e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801af60:	2300      	movs	r3, #0
 801af62:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801af66:	68bb      	ldr	r3, [r7, #8]
 801af68:	8c1b      	ldrh	r3, [r3, #32]
 801af6a:	3b14      	subs	r3, #20
 801af6c:	2b00      	cmp	r3, #0
 801af6e:	da00      	bge.n	801af72 <ip4_frag+0x1e>
 801af70:	3307      	adds	r3, #7
 801af72:	10db      	asrs	r3, r3, #3
 801af74:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801af76:	2314      	movs	r3, #20
 801af78:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801af7a:	68fb      	ldr	r3, [r7, #12]
 801af7c:	685b      	ldr	r3, [r3, #4]
 801af7e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801af80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801af82:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801af84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801af86:	781b      	ldrb	r3, [r3, #0]
 801af88:	f003 030f 	and.w	r3, r3, #15
 801af8c:	b2db      	uxtb	r3, r3
 801af8e:	009b      	lsls	r3, r3, #2
 801af90:	b2db      	uxtb	r3, r3
 801af92:	2b14      	cmp	r3, #20
 801af94:	d002      	beq.n	801af9c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801af96:	f06f 0305 	mvn.w	r3, #5
 801af9a:	e110      	b.n	801b1be <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801af9c:	68fb      	ldr	r3, [r7, #12]
 801af9e:	895b      	ldrh	r3, [r3, #10]
 801afa0:	2b13      	cmp	r3, #19
 801afa2:	d809      	bhi.n	801afb8 <ip4_frag+0x64>
 801afa4:	4b88      	ldr	r3, [pc, #544]	; (801b1c8 <ip4_frag+0x274>)
 801afa6:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801afaa:	4988      	ldr	r1, [pc, #544]	; (801b1cc <ip4_frag+0x278>)
 801afac:	4888      	ldr	r0, [pc, #544]	; (801b1d0 <ip4_frag+0x27c>)
 801afae:	f001 fb97 	bl	801c6e0 <iprintf>
 801afb2:	f06f 0305 	mvn.w	r3, #5
 801afb6:	e102      	b.n	801b1be <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801afb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801afba:	88db      	ldrh	r3, [r3, #6]
 801afbc:	b29b      	uxth	r3, r3
 801afbe:	4618      	mov	r0, r3
 801afc0:	f7f5 f87e 	bl	80100c0 <lwip_htons>
 801afc4:	4603      	mov	r3, r0
 801afc6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801afc8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801afca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801afce:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801afd2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801afd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801afd8:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801afda:	68fb      	ldr	r3, [r7, #12]
 801afdc:	891b      	ldrh	r3, [r3, #8]
 801afde:	3b14      	subs	r3, #20
 801afe0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801afe4:	e0e1      	b.n	801b1aa <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801afe6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801afe8:	00db      	lsls	r3, r3, #3
 801afea:	b29b      	uxth	r3, r3
 801afec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801aff0:	4293      	cmp	r3, r2
 801aff2:	bf28      	it	cs
 801aff4:	4613      	movcs	r3, r2
 801aff6:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801aff8:	f44f 7220 	mov.w	r2, #640	; 0x280
 801affc:	2114      	movs	r1, #20
 801affe:	200e      	movs	r0, #14
 801b000:	f7f6 f936 	bl	8011270 <pbuf_alloc>
 801b004:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801b006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b008:	2b00      	cmp	r3, #0
 801b00a:	f000 80d5 	beq.w	801b1b8 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801b00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b010:	895b      	ldrh	r3, [r3, #10]
 801b012:	2b13      	cmp	r3, #19
 801b014:	d806      	bhi.n	801b024 <ip4_frag+0xd0>
 801b016:	4b6c      	ldr	r3, [pc, #432]	; (801b1c8 <ip4_frag+0x274>)
 801b018:	f44f 7249 	mov.w	r2, #804	; 0x324
 801b01c:	496d      	ldr	r1, [pc, #436]	; (801b1d4 <ip4_frag+0x280>)
 801b01e:	486c      	ldr	r0, [pc, #432]	; (801b1d0 <ip4_frag+0x27c>)
 801b020:	f001 fb5e 	bl	801c6e0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801b024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b026:	685b      	ldr	r3, [r3, #4]
 801b028:	2214      	movs	r2, #20
 801b02a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801b02c:	4618      	mov	r0, r3
 801b02e:	f001 f8c3 	bl	801c1b8 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801b032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b034:	685b      	ldr	r3, [r3, #4]
 801b036:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801b038:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801b03a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801b03e:	e064      	b.n	801b10a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801b040:	68fb      	ldr	r3, [r7, #12]
 801b042:	895a      	ldrh	r2, [r3, #10]
 801b044:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801b046:	1ad3      	subs	r3, r2, r3
 801b048:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801b04a:	68fb      	ldr	r3, [r7, #12]
 801b04c:	895b      	ldrh	r3, [r3, #10]
 801b04e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801b050:	429a      	cmp	r2, r3
 801b052:	d906      	bls.n	801b062 <ip4_frag+0x10e>
 801b054:	4b5c      	ldr	r3, [pc, #368]	; (801b1c8 <ip4_frag+0x274>)
 801b056:	f240 322d 	movw	r2, #813	; 0x32d
 801b05a:	495f      	ldr	r1, [pc, #380]	; (801b1d8 <ip4_frag+0x284>)
 801b05c:	485c      	ldr	r0, [pc, #368]	; (801b1d0 <ip4_frag+0x27c>)
 801b05e:	f001 fb3f 	bl	801c6e0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801b062:	8bfa      	ldrh	r2, [r7, #30]
 801b064:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801b068:	4293      	cmp	r3, r2
 801b06a:	bf28      	it	cs
 801b06c:	4613      	movcs	r3, r2
 801b06e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801b072:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801b076:	2b00      	cmp	r3, #0
 801b078:	d105      	bne.n	801b086 <ip4_frag+0x132>
        poff = 0;
 801b07a:	2300      	movs	r3, #0
 801b07c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801b07e:	68fb      	ldr	r3, [r7, #12]
 801b080:	681b      	ldr	r3, [r3, #0]
 801b082:	60fb      	str	r3, [r7, #12]
        continue;
 801b084:	e041      	b.n	801b10a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801b086:	f7ff ff0d 	bl	801aea4 <ip_frag_alloc_pbuf_custom_ref>
 801b08a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801b08c:	69bb      	ldr	r3, [r7, #24]
 801b08e:	2b00      	cmp	r3, #0
 801b090:	d103      	bne.n	801b09a <ip4_frag+0x146>
        pbuf_free(rambuf);
 801b092:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b094:	f7f6 fbd0 	bl	8011838 <pbuf_free>
        goto memerr;
 801b098:	e08f      	b.n	801b1ba <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801b09a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801b09c:	68fb      	ldr	r3, [r7, #12]
 801b09e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801b0a0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801b0a2:	4413      	add	r3, r2
 801b0a4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801b0a8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801b0ac:	9201      	str	r2, [sp, #4]
 801b0ae:	9300      	str	r3, [sp, #0]
 801b0b0:	4603      	mov	r3, r0
 801b0b2:	2241      	movs	r2, #65	; 0x41
 801b0b4:	2000      	movs	r0, #0
 801b0b6:	f7f6 fa05 	bl	80114c4 <pbuf_alloced_custom>
 801b0ba:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801b0bc:	697b      	ldr	r3, [r7, #20]
 801b0be:	2b00      	cmp	r3, #0
 801b0c0:	d106      	bne.n	801b0d0 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801b0c2:	69b8      	ldr	r0, [r7, #24]
 801b0c4:	f7ff fef6 	bl	801aeb4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801b0c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b0ca:	f7f6 fbb5 	bl	8011838 <pbuf_free>
        goto memerr;
 801b0ce:	e074      	b.n	801b1ba <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801b0d0:	68f8      	ldr	r0, [r7, #12]
 801b0d2:	f7f6 fc57 	bl	8011984 <pbuf_ref>
      pcr->original = p;
 801b0d6:	69bb      	ldr	r3, [r7, #24]
 801b0d8:	68fa      	ldr	r2, [r7, #12]
 801b0da:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801b0dc:	69bb      	ldr	r3, [r7, #24]
 801b0de:	4a3f      	ldr	r2, [pc, #252]	; (801b1dc <ip4_frag+0x288>)
 801b0e0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801b0e2:	6979      	ldr	r1, [r7, #20]
 801b0e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b0e6:	f7f6 fc75 	bl	80119d4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801b0ea:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801b0ee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801b0f2:	1ad3      	subs	r3, r2, r3
 801b0f4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801b0f8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801b0fc:	2b00      	cmp	r3, #0
 801b0fe:	d004      	beq.n	801b10a <ip4_frag+0x1b6>
        poff = 0;
 801b100:	2300      	movs	r3, #0
 801b102:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801b104:	68fb      	ldr	r3, [r7, #12]
 801b106:	681b      	ldr	r3, [r3, #0]
 801b108:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801b10a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801b10e:	2b00      	cmp	r3, #0
 801b110:	d196      	bne.n	801b040 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801b112:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801b114:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801b118:	4413      	add	r3, r2
 801b11a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801b11c:	68bb      	ldr	r3, [r7, #8]
 801b11e:	8c1b      	ldrh	r3, [r3, #32]
 801b120:	f1a3 0213 	sub.w	r2, r3, #19
 801b124:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801b128:	429a      	cmp	r2, r3
 801b12a:	bfcc      	ite	gt
 801b12c:	2301      	movgt	r3, #1
 801b12e:	2300      	movle	r3, #0
 801b130:	b2db      	uxtb	r3, r3
 801b132:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801b134:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801b138:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b13c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801b13e:	6a3b      	ldr	r3, [r7, #32]
 801b140:	2b00      	cmp	r3, #0
 801b142:	d002      	beq.n	801b14a <ip4_frag+0x1f6>
 801b144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b146:	2b00      	cmp	r3, #0
 801b148:	d003      	beq.n	801b152 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801b14a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b14c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801b150:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801b152:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b154:	4618      	mov	r0, r3
 801b156:	f7f4 ffb3 	bl	80100c0 <lwip_htons>
 801b15a:	4603      	mov	r3, r0
 801b15c:	461a      	mov	r2, r3
 801b15e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b160:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801b162:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801b164:	3314      	adds	r3, #20
 801b166:	b29b      	uxth	r3, r3
 801b168:	4618      	mov	r0, r3
 801b16a:	f7f4 ffa9 	bl	80100c0 <lwip_htons>
 801b16e:	4603      	mov	r3, r0
 801b170:	461a      	mov	r2, r3
 801b172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b174:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801b176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b178:	2200      	movs	r2, #0
 801b17a:	729a      	strb	r2, [r3, #10]
 801b17c:	2200      	movs	r2, #0
 801b17e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801b180:	68bb      	ldr	r3, [r7, #8]
 801b182:	695b      	ldr	r3, [r3, #20]
 801b184:	687a      	ldr	r2, [r7, #4]
 801b186:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801b188:	68b8      	ldr	r0, [r7, #8]
 801b18a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801b18c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b18e:	f7f6 fb53 	bl	8011838 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801b192:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801b196:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801b198:	1ad3      	subs	r3, r2, r3
 801b19a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801b19e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801b1a2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b1a4:	4413      	add	r3, r2
 801b1a6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801b1aa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801b1ae:	2b00      	cmp	r3, #0
 801b1b0:	f47f af19 	bne.w	801afe6 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801b1b4:	2300      	movs	r3, #0
 801b1b6:	e002      	b.n	801b1be <ip4_frag+0x26a>
      goto memerr;
 801b1b8:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801b1ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 801b1be:	4618      	mov	r0, r3
 801b1c0:	3748      	adds	r7, #72	; 0x48
 801b1c2:	46bd      	mov	sp, r7
 801b1c4:	bd80      	pop	{r7, pc}
 801b1c6:	bf00      	nop
 801b1c8:	08021d38 	.word	0x08021d38
 801b1cc:	08021f14 	.word	0x08021f14
 801b1d0:	08021d80 	.word	0x08021d80
 801b1d4:	08021f30 	.word	0x08021f30
 801b1d8:	08021f50 	.word	0x08021f50
 801b1dc:	0801aeed 	.word	0x0801aeed

0801b1e0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801b1e0:	b580      	push	{r7, lr}
 801b1e2:	b086      	sub	sp, #24
 801b1e4:	af00      	add	r7, sp, #0
 801b1e6:	6078      	str	r0, [r7, #4]
 801b1e8:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801b1ea:	230e      	movs	r3, #14
 801b1ec:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801b1ee:	687b      	ldr	r3, [r7, #4]
 801b1f0:	895b      	ldrh	r3, [r3, #10]
 801b1f2:	2b0e      	cmp	r3, #14
 801b1f4:	d96e      	bls.n	801b2d4 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801b1f6:	687b      	ldr	r3, [r7, #4]
 801b1f8:	7bdb      	ldrb	r3, [r3, #15]
 801b1fa:	2b00      	cmp	r3, #0
 801b1fc:	d106      	bne.n	801b20c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801b1fe:	683b      	ldr	r3, [r7, #0]
 801b200:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801b204:	3301      	adds	r3, #1
 801b206:	b2da      	uxtb	r2, r3
 801b208:	687b      	ldr	r3, [r7, #4]
 801b20a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801b20c:	687b      	ldr	r3, [r7, #4]
 801b20e:	685b      	ldr	r3, [r3, #4]
 801b210:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801b212:	693b      	ldr	r3, [r7, #16]
 801b214:	7b1a      	ldrb	r2, [r3, #12]
 801b216:	7b5b      	ldrb	r3, [r3, #13]
 801b218:	021b      	lsls	r3, r3, #8
 801b21a:	4313      	orrs	r3, r2
 801b21c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801b21e:	693b      	ldr	r3, [r7, #16]
 801b220:	781b      	ldrb	r3, [r3, #0]
 801b222:	f003 0301 	and.w	r3, r3, #1
 801b226:	2b00      	cmp	r3, #0
 801b228:	d023      	beq.n	801b272 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801b22a:	693b      	ldr	r3, [r7, #16]
 801b22c:	781b      	ldrb	r3, [r3, #0]
 801b22e:	2b01      	cmp	r3, #1
 801b230:	d10f      	bne.n	801b252 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801b232:	693b      	ldr	r3, [r7, #16]
 801b234:	785b      	ldrb	r3, [r3, #1]
 801b236:	2b00      	cmp	r3, #0
 801b238:	d11b      	bne.n	801b272 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801b23a:	693b      	ldr	r3, [r7, #16]
 801b23c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801b23e:	2b5e      	cmp	r3, #94	; 0x5e
 801b240:	d117      	bne.n	801b272 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801b242:	687b      	ldr	r3, [r7, #4]
 801b244:	7b5b      	ldrb	r3, [r3, #13]
 801b246:	f043 0310 	orr.w	r3, r3, #16
 801b24a:	b2da      	uxtb	r2, r3
 801b24c:	687b      	ldr	r3, [r7, #4]
 801b24e:	735a      	strb	r2, [r3, #13]
 801b250:	e00f      	b.n	801b272 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801b252:	693b      	ldr	r3, [r7, #16]
 801b254:	2206      	movs	r2, #6
 801b256:	4928      	ldr	r1, [pc, #160]	; (801b2f8 <ethernet_input+0x118>)
 801b258:	4618      	mov	r0, r3
 801b25a:	f000 ff9f 	bl	801c19c <memcmp>
 801b25e:	4603      	mov	r3, r0
 801b260:	2b00      	cmp	r3, #0
 801b262:	d106      	bne.n	801b272 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801b264:	687b      	ldr	r3, [r7, #4]
 801b266:	7b5b      	ldrb	r3, [r3, #13]
 801b268:	f043 0308 	orr.w	r3, r3, #8
 801b26c:	b2da      	uxtb	r2, r3
 801b26e:	687b      	ldr	r3, [r7, #4]
 801b270:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801b272:	89fb      	ldrh	r3, [r7, #14]
 801b274:	2b08      	cmp	r3, #8
 801b276:	d003      	beq.n	801b280 <ethernet_input+0xa0>
 801b278:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801b27c:	d014      	beq.n	801b2a8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801b27e:	e032      	b.n	801b2e6 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801b280:	683b      	ldr	r3, [r7, #0]
 801b282:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801b286:	f003 0308 	and.w	r3, r3, #8
 801b28a:	2b00      	cmp	r3, #0
 801b28c:	d024      	beq.n	801b2d8 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801b28e:	8afb      	ldrh	r3, [r7, #22]
 801b290:	4619      	mov	r1, r3
 801b292:	6878      	ldr	r0, [r7, #4]
 801b294:	f7f6 fa4a 	bl	801172c <pbuf_remove_header>
 801b298:	4603      	mov	r3, r0
 801b29a:	2b00      	cmp	r3, #0
 801b29c:	d11e      	bne.n	801b2dc <ethernet_input+0xfc>
        ip4_input(p, netif);
 801b29e:	6839      	ldr	r1, [r7, #0]
 801b2a0:	6878      	ldr	r0, [r7, #4]
 801b2a2:	f7fe fdfd 	bl	8019ea0 <ip4_input>
      break;
 801b2a6:	e013      	b.n	801b2d0 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801b2a8:	683b      	ldr	r3, [r7, #0]
 801b2aa:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801b2ae:	f003 0308 	and.w	r3, r3, #8
 801b2b2:	2b00      	cmp	r3, #0
 801b2b4:	d014      	beq.n	801b2e0 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801b2b6:	8afb      	ldrh	r3, [r7, #22]
 801b2b8:	4619      	mov	r1, r3
 801b2ba:	6878      	ldr	r0, [r7, #4]
 801b2bc:	f7f6 fa36 	bl	801172c <pbuf_remove_header>
 801b2c0:	4603      	mov	r3, r0
 801b2c2:	2b00      	cmp	r3, #0
 801b2c4:	d10e      	bne.n	801b2e4 <ethernet_input+0x104>
        etharp_input(p, netif);
 801b2c6:	6839      	ldr	r1, [r7, #0]
 801b2c8:	6878      	ldr	r0, [r7, #4]
 801b2ca:	f7fd ff9d 	bl	8019208 <etharp_input>
      break;
 801b2ce:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801b2d0:	2300      	movs	r3, #0
 801b2d2:	e00c      	b.n	801b2ee <ethernet_input+0x10e>
    goto free_and_return;
 801b2d4:	bf00      	nop
 801b2d6:	e006      	b.n	801b2e6 <ethernet_input+0x106>
        goto free_and_return;
 801b2d8:	bf00      	nop
 801b2da:	e004      	b.n	801b2e6 <ethernet_input+0x106>
        goto free_and_return;
 801b2dc:	bf00      	nop
 801b2de:	e002      	b.n	801b2e6 <ethernet_input+0x106>
        goto free_and_return;
 801b2e0:	bf00      	nop
 801b2e2:	e000      	b.n	801b2e6 <ethernet_input+0x106>
        goto free_and_return;
 801b2e4:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801b2e6:	6878      	ldr	r0, [r7, #4]
 801b2e8:	f7f6 faa6 	bl	8011838 <pbuf_free>
  return ERR_OK;
 801b2ec:	2300      	movs	r3, #0
}
 801b2ee:	4618      	mov	r0, r3
 801b2f0:	3718      	adds	r7, #24
 801b2f2:	46bd      	mov	sp, r7
 801b2f4:	bd80      	pop	{r7, pc}
 801b2f6:	bf00      	nop
 801b2f8:	08023050 	.word	0x08023050

0801b2fc <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801b2fc:	b580      	push	{r7, lr}
 801b2fe:	b086      	sub	sp, #24
 801b300:	af00      	add	r7, sp, #0
 801b302:	60f8      	str	r0, [r7, #12]
 801b304:	60b9      	str	r1, [r7, #8]
 801b306:	607a      	str	r2, [r7, #4]
 801b308:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801b30a:	8c3b      	ldrh	r3, [r7, #32]
 801b30c:	4618      	mov	r0, r3
 801b30e:	f7f4 fed7 	bl	80100c0 <lwip_htons>
 801b312:	4603      	mov	r3, r0
 801b314:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801b316:	210e      	movs	r1, #14
 801b318:	68b8      	ldr	r0, [r7, #8]
 801b31a:	f7f6 f9f7 	bl	801170c <pbuf_add_header>
 801b31e:	4603      	mov	r3, r0
 801b320:	2b00      	cmp	r3, #0
 801b322:	d125      	bne.n	801b370 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801b324:	68bb      	ldr	r3, [r7, #8]
 801b326:	685b      	ldr	r3, [r3, #4]
 801b328:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801b32a:	693b      	ldr	r3, [r7, #16]
 801b32c:	8afa      	ldrh	r2, [r7, #22]
 801b32e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801b330:	693b      	ldr	r3, [r7, #16]
 801b332:	2206      	movs	r2, #6
 801b334:	6839      	ldr	r1, [r7, #0]
 801b336:	4618      	mov	r0, r3
 801b338:	f000 ff3e 	bl	801c1b8 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801b33c:	693b      	ldr	r3, [r7, #16]
 801b33e:	3306      	adds	r3, #6
 801b340:	2206      	movs	r2, #6
 801b342:	6879      	ldr	r1, [r7, #4]
 801b344:	4618      	mov	r0, r3
 801b346:	f000 ff37 	bl	801c1b8 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801b34a:	68fb      	ldr	r3, [r7, #12]
 801b34c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b350:	2b06      	cmp	r3, #6
 801b352:	d006      	beq.n	801b362 <ethernet_output+0x66>
 801b354:	4b0a      	ldr	r3, [pc, #40]	; (801b380 <ethernet_output+0x84>)
 801b356:	f44f 7299 	mov.w	r2, #306	; 0x132
 801b35a:	490a      	ldr	r1, [pc, #40]	; (801b384 <ethernet_output+0x88>)
 801b35c:	480a      	ldr	r0, [pc, #40]	; (801b388 <ethernet_output+0x8c>)
 801b35e:	f001 f9bf 	bl	801c6e0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801b362:	68fb      	ldr	r3, [r7, #12]
 801b364:	699b      	ldr	r3, [r3, #24]
 801b366:	68b9      	ldr	r1, [r7, #8]
 801b368:	68f8      	ldr	r0, [r7, #12]
 801b36a:	4798      	blx	r3
 801b36c:	4603      	mov	r3, r0
 801b36e:	e002      	b.n	801b376 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801b370:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801b372:	f06f 0301 	mvn.w	r3, #1
}
 801b376:	4618      	mov	r0, r3
 801b378:	3718      	adds	r7, #24
 801b37a:	46bd      	mov	sp, r7
 801b37c:	bd80      	pop	{r7, pc}
 801b37e:	bf00      	nop
 801b380:	08021f60 	.word	0x08021f60
 801b384:	08021f98 	.word	0x08021f98
 801b388:	08021fcc 	.word	0x08021fcc

0801b38c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801b38c:	b580      	push	{r7, lr}
 801b38e:	b086      	sub	sp, #24
 801b390:	af00      	add	r7, sp, #0
 801b392:	6078      	str	r0, [r7, #4]
 801b394:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801b396:	683b      	ldr	r3, [r7, #0]
 801b398:	60bb      	str	r3, [r7, #8]
 801b39a:	2304      	movs	r3, #4
 801b39c:	60fb      	str	r3, [r7, #12]
 801b39e:	2300      	movs	r3, #0
 801b3a0:	613b      	str	r3, [r7, #16]
 801b3a2:	2300      	movs	r3, #0
 801b3a4:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801b3a6:	f107 0308 	add.w	r3, r7, #8
 801b3aa:	2100      	movs	r1, #0
 801b3ac:	4618      	mov	r0, r3
 801b3ae:	f7ef fac8 	bl	800a942 <osMessageCreate>
 801b3b2:	4602      	mov	r2, r0
 801b3b4:	687b      	ldr	r3, [r7, #4]
 801b3b6:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801b3b8:	687b      	ldr	r3, [r7, #4]
 801b3ba:	681b      	ldr	r3, [r3, #0]
 801b3bc:	2b00      	cmp	r3, #0
 801b3be:	d102      	bne.n	801b3c6 <sys_mbox_new+0x3a>
    return ERR_MEM;
 801b3c0:	f04f 33ff 	mov.w	r3, #4294967295
 801b3c4:	e000      	b.n	801b3c8 <sys_mbox_new+0x3c>

  return ERR_OK;
 801b3c6:	2300      	movs	r3, #0
}
 801b3c8:	4618      	mov	r0, r3
 801b3ca:	3718      	adds	r7, #24
 801b3cc:	46bd      	mov	sp, r7
 801b3ce:	bd80      	pop	{r7, pc}

0801b3d0 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801b3d0:	b580      	push	{r7, lr}
 801b3d2:	b082      	sub	sp, #8
 801b3d4:	af00      	add	r7, sp, #0
 801b3d6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 801b3d8:	687b      	ldr	r3, [r7, #4]
 801b3da:	681b      	ldr	r3, [r3, #0]
 801b3dc:	4618      	mov	r0, r3
 801b3de:	f7ef fb8d 	bl	800aafc <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 801b3e2:	687b      	ldr	r3, [r7, #4]
 801b3e4:	681b      	ldr	r3, [r3, #0]
 801b3e6:	4618      	mov	r0, r3
 801b3e8:	f7ef fb9e 	bl	800ab28 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801b3ec:	bf00      	nop
 801b3ee:	3708      	adds	r7, #8
 801b3f0:	46bd      	mov	sp, r7
 801b3f2:	bd80      	pop	{r7, pc}

0801b3f4 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801b3f4:	b580      	push	{r7, lr}
 801b3f6:	b084      	sub	sp, #16
 801b3f8:	af00      	add	r7, sp, #0
 801b3fa:	6078      	str	r0, [r7, #4]
 801b3fc:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801b3fe:	687b      	ldr	r3, [r7, #4]
 801b400:	681b      	ldr	r3, [r3, #0]
 801b402:	6839      	ldr	r1, [r7, #0]
 801b404:	2200      	movs	r2, #0
 801b406:	4618      	mov	r0, r3
 801b408:	f7ef fac4 	bl	800a994 <osMessagePut>
 801b40c:	4603      	mov	r3, r0
 801b40e:	2b00      	cmp	r3, #0
 801b410:	d102      	bne.n	801b418 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801b412:	2300      	movs	r3, #0
 801b414:	73fb      	strb	r3, [r7, #15]
 801b416:	e001      	b.n	801b41c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801b418:	23ff      	movs	r3, #255	; 0xff
 801b41a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801b41c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801b420:	4618      	mov	r0, r3
 801b422:	3710      	adds	r7, #16
 801b424:	46bd      	mov	sp, r7
 801b426:	bd80      	pop	{r7, pc}

0801b428 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801b428:	b580      	push	{r7, lr}
 801b42a:	b08c      	sub	sp, #48	; 0x30
 801b42c:	af00      	add	r7, sp, #0
 801b42e:	61f8      	str	r0, [r7, #28]
 801b430:	61b9      	str	r1, [r7, #24]
 801b432:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801b434:	f7ef f8c4 	bl	800a5c0 <osKernelSysTick>
 801b438:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801b43a:	697b      	ldr	r3, [r7, #20]
 801b43c:	2b00      	cmp	r3, #0
 801b43e:	d017      	beq.n	801b470 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801b440:	69fb      	ldr	r3, [r7, #28]
 801b442:	6819      	ldr	r1, [r3, #0]
 801b444:	f107 0320 	add.w	r3, r7, #32
 801b448:	697a      	ldr	r2, [r7, #20]
 801b44a:	4618      	mov	r0, r3
 801b44c:	f7ef fae2 	bl	800aa14 <osMessageGet>

    if(event.status == osEventMessage)
 801b450:	6a3b      	ldr	r3, [r7, #32]
 801b452:	2b10      	cmp	r3, #16
 801b454:	d109      	bne.n	801b46a <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801b456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b458:	461a      	mov	r2, r3
 801b45a:	69bb      	ldr	r3, [r7, #24]
 801b45c:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801b45e:	f7ef f8af 	bl	800a5c0 <osKernelSysTick>
 801b462:	4602      	mov	r2, r0
 801b464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b466:	1ad3      	subs	r3, r2, r3
 801b468:	e019      	b.n	801b49e <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801b46a:	f04f 33ff 	mov.w	r3, #4294967295
 801b46e:	e016      	b.n	801b49e <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801b470:	69fb      	ldr	r3, [r7, #28]
 801b472:	6819      	ldr	r1, [r3, #0]
 801b474:	463b      	mov	r3, r7
 801b476:	f04f 32ff 	mov.w	r2, #4294967295
 801b47a:	4618      	mov	r0, r3
 801b47c:	f7ef faca 	bl	800aa14 <osMessageGet>
 801b480:	f107 0320 	add.w	r3, r7, #32
 801b484:	463a      	mov	r2, r7
 801b486:	ca07      	ldmia	r2, {r0, r1, r2}
 801b488:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801b48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b48e:	461a      	mov	r2, r3
 801b490:	69bb      	ldr	r3, [r7, #24]
 801b492:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801b494:	f7ef f894 	bl	800a5c0 <osKernelSysTick>
 801b498:	4602      	mov	r2, r0
 801b49a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b49c:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801b49e:	4618      	mov	r0, r3
 801b4a0:	3730      	adds	r7, #48	; 0x30
 801b4a2:	46bd      	mov	sp, r7
 801b4a4:	bd80      	pop	{r7, pc}

0801b4a6 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801b4a6:	b580      	push	{r7, lr}
 801b4a8:	b086      	sub	sp, #24
 801b4aa:	af00      	add	r7, sp, #0
 801b4ac:	6078      	str	r0, [r7, #4]
 801b4ae:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 801b4b0:	687b      	ldr	r3, [r7, #4]
 801b4b2:	6819      	ldr	r1, [r3, #0]
 801b4b4:	f107 030c 	add.w	r3, r7, #12
 801b4b8:	2200      	movs	r2, #0
 801b4ba:	4618      	mov	r0, r3
 801b4bc:	f7ef faaa 	bl	800aa14 <osMessageGet>

  if(event.status == osEventMessage)
 801b4c0:	68fb      	ldr	r3, [r7, #12]
 801b4c2:	2b10      	cmp	r3, #16
 801b4c4:	d105      	bne.n	801b4d2 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 801b4c6:	693b      	ldr	r3, [r7, #16]
 801b4c8:	461a      	mov	r2, r3
 801b4ca:	683b      	ldr	r3, [r7, #0]
 801b4cc:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 801b4ce:	2300      	movs	r3, #0
 801b4d0:	e001      	b.n	801b4d6 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801b4d2:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801b4d6:	4618      	mov	r0, r3
 801b4d8:	3718      	adds	r7, #24
 801b4da:	46bd      	mov	sp, r7
 801b4dc:	bd80      	pop	{r7, pc}

0801b4de <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801b4de:	b480      	push	{r7}
 801b4e0:	b083      	sub	sp, #12
 801b4e2:	af00      	add	r7, sp, #0
 801b4e4:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801b4e6:	687b      	ldr	r3, [r7, #4]
 801b4e8:	681b      	ldr	r3, [r3, #0]
 801b4ea:	2b00      	cmp	r3, #0
 801b4ec:	d101      	bne.n	801b4f2 <sys_mbox_valid+0x14>
    return 0;
 801b4ee:	2300      	movs	r3, #0
 801b4f0:	e000      	b.n	801b4f4 <sys_mbox_valid+0x16>
  else
    return 1;
 801b4f2:	2301      	movs	r3, #1
}
 801b4f4:	4618      	mov	r0, r3
 801b4f6:	370c      	adds	r7, #12
 801b4f8:	46bd      	mov	sp, r7
 801b4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4fe:	4770      	bx	lr

0801b500 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801b500:	b480      	push	{r7}
 801b502:	b083      	sub	sp, #12
 801b504:	af00      	add	r7, sp, #0
 801b506:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801b508:	687b      	ldr	r3, [r7, #4]
 801b50a:	2200      	movs	r2, #0
 801b50c:	601a      	str	r2, [r3, #0]
}
 801b50e:	bf00      	nop
 801b510:	370c      	adds	r7, #12
 801b512:	46bd      	mov	sp, r7
 801b514:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b518:	4770      	bx	lr

0801b51a <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801b51a:	b580      	push	{r7, lr}
 801b51c:	b084      	sub	sp, #16
 801b51e:	af00      	add	r7, sp, #0
 801b520:	6078      	str	r0, [r7, #4]
 801b522:	460b      	mov	r3, r1
 801b524:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 801b526:	2300      	movs	r3, #0
 801b528:	60bb      	str	r3, [r7, #8]
 801b52a:	2300      	movs	r3, #0
 801b52c:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801b52e:	f107 0308 	add.w	r3, r7, #8
 801b532:	2101      	movs	r1, #1
 801b534:	4618      	mov	r0, r3
 801b536:	f7ef f93b 	bl	800a7b0 <osSemaphoreCreate>
 801b53a:	4602      	mov	r2, r0
 801b53c:	687b      	ldr	r3, [r7, #4]
 801b53e:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 801b540:	687b      	ldr	r3, [r7, #4]
 801b542:	681b      	ldr	r3, [r3, #0]
 801b544:	2b00      	cmp	r3, #0
 801b546:	d102      	bne.n	801b54e <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801b548:	f04f 33ff 	mov.w	r3, #4294967295
 801b54c:	e009      	b.n	801b562 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 801b54e:	78fb      	ldrb	r3, [r7, #3]
 801b550:	2b00      	cmp	r3, #0
 801b552:	d105      	bne.n	801b560 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 801b554:	687b      	ldr	r3, [r7, #4]
 801b556:	681b      	ldr	r3, [r3, #0]
 801b558:	2100      	movs	r1, #0
 801b55a:	4618      	mov	r0, r3
 801b55c:	f7ef f95a 	bl	800a814 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801b560:	2300      	movs	r3, #0
}
 801b562:	4618      	mov	r0, r3
 801b564:	3710      	adds	r7, #16
 801b566:	46bd      	mov	sp, r7
 801b568:	bd80      	pop	{r7, pc}

0801b56a <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801b56a:	b580      	push	{r7, lr}
 801b56c:	b084      	sub	sp, #16
 801b56e:	af00      	add	r7, sp, #0
 801b570:	6078      	str	r0, [r7, #4]
 801b572:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 801b574:	f7ef f824 	bl	800a5c0 <osKernelSysTick>
 801b578:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801b57a:	683b      	ldr	r3, [r7, #0]
 801b57c:	2b00      	cmp	r3, #0
 801b57e:	d011      	beq.n	801b5a4 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 801b580:	687b      	ldr	r3, [r7, #4]
 801b582:	681b      	ldr	r3, [r3, #0]
 801b584:	6839      	ldr	r1, [r7, #0]
 801b586:	4618      	mov	r0, r3
 801b588:	f7ef f944 	bl	800a814 <osSemaphoreWait>
 801b58c:	4603      	mov	r3, r0
 801b58e:	2b00      	cmp	r3, #0
 801b590:	d105      	bne.n	801b59e <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 801b592:	f7ef f815 	bl	800a5c0 <osKernelSysTick>
 801b596:	4602      	mov	r2, r0
 801b598:	68fb      	ldr	r3, [r7, #12]
 801b59a:	1ad3      	subs	r3, r2, r3
 801b59c:	e012      	b.n	801b5c4 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801b59e:	f04f 33ff 	mov.w	r3, #4294967295
 801b5a2:	e00f      	b.n	801b5c4 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 801b5a4:	bf00      	nop
 801b5a6:	687b      	ldr	r3, [r7, #4]
 801b5a8:	681b      	ldr	r3, [r3, #0]
 801b5aa:	f04f 31ff 	mov.w	r1, #4294967295
 801b5ae:	4618      	mov	r0, r3
 801b5b0:	f7ef f930 	bl	800a814 <osSemaphoreWait>
 801b5b4:	4603      	mov	r3, r0
 801b5b6:	2b00      	cmp	r3, #0
 801b5b8:	d1f5      	bne.n	801b5a6 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 801b5ba:	f7ef f801 	bl	800a5c0 <osKernelSysTick>
 801b5be:	4602      	mov	r2, r0
 801b5c0:	68fb      	ldr	r3, [r7, #12]
 801b5c2:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801b5c4:	4618      	mov	r0, r3
 801b5c6:	3710      	adds	r7, #16
 801b5c8:	46bd      	mov	sp, r7
 801b5ca:	bd80      	pop	{r7, pc}

0801b5cc <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801b5cc:	b580      	push	{r7, lr}
 801b5ce:	b082      	sub	sp, #8
 801b5d0:	af00      	add	r7, sp, #0
 801b5d2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801b5d4:	687b      	ldr	r3, [r7, #4]
 801b5d6:	681b      	ldr	r3, [r3, #0]
 801b5d8:	4618      	mov	r0, r3
 801b5da:	f7ef f969 	bl	800a8b0 <osSemaphoreRelease>
}
 801b5de:	bf00      	nop
 801b5e0:	3708      	adds	r7, #8
 801b5e2:	46bd      	mov	sp, r7
 801b5e4:	bd80      	pop	{r7, pc}

0801b5e6 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801b5e6:	b580      	push	{r7, lr}
 801b5e8:	b082      	sub	sp, #8
 801b5ea:	af00      	add	r7, sp, #0
 801b5ec:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801b5ee:	687b      	ldr	r3, [r7, #4]
 801b5f0:	681b      	ldr	r3, [r3, #0]
 801b5f2:	4618      	mov	r0, r3
 801b5f4:	f7ef f992 	bl	800a91c <osSemaphoreDelete>
}
 801b5f8:	bf00      	nop
 801b5fa:	3708      	adds	r7, #8
 801b5fc:	46bd      	mov	sp, r7
 801b5fe:	bd80      	pop	{r7, pc}

0801b600 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801b600:	b480      	push	{r7}
 801b602:	b083      	sub	sp, #12
 801b604:	af00      	add	r7, sp, #0
 801b606:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801b608:	687b      	ldr	r3, [r7, #4]
 801b60a:	681b      	ldr	r3, [r3, #0]
 801b60c:	2b00      	cmp	r3, #0
 801b60e:	d101      	bne.n	801b614 <sys_sem_valid+0x14>
    return 0;
 801b610:	2300      	movs	r3, #0
 801b612:	e000      	b.n	801b616 <sys_sem_valid+0x16>
  else
    return 1;
 801b614:	2301      	movs	r3, #1
}
 801b616:	4618      	mov	r0, r3
 801b618:	370c      	adds	r7, #12
 801b61a:	46bd      	mov	sp, r7
 801b61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b620:	4770      	bx	lr

0801b622 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801b622:	b480      	push	{r7}
 801b624:	b083      	sub	sp, #12
 801b626:	af00      	add	r7, sp, #0
 801b628:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801b62a:	687b      	ldr	r3, [r7, #4]
 801b62c:	2200      	movs	r2, #0
 801b62e:	601a      	str	r2, [r3, #0]
}
 801b630:	bf00      	nop
 801b632:	370c      	adds	r7, #12
 801b634:	46bd      	mov	sp, r7
 801b636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b63a:	4770      	bx	lr

0801b63c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801b63c:	b580      	push	{r7, lr}
 801b63e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801b640:	4803      	ldr	r0, [pc, #12]	; (801b650 <sys_init+0x14>)
 801b642:	f7ef f819 	bl	800a678 <osMutexCreate>
 801b646:	4603      	mov	r3, r0
 801b648:	4a02      	ldr	r2, [pc, #8]	; (801b654 <sys_init+0x18>)
 801b64a:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801b64c:	bf00      	nop
 801b64e:	bd80      	pop	{r7, pc}
 801b650:	08023060 	.word	0x08023060
 801b654:	2000b63c 	.word	0x2000b63c

0801b658 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801b658:	b580      	push	{r7, lr}
 801b65a:	b084      	sub	sp, #16
 801b65c:	af00      	add	r7, sp, #0
 801b65e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801b660:	2300      	movs	r3, #0
 801b662:	60bb      	str	r3, [r7, #8]
 801b664:	2300      	movs	r3, #0
 801b666:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801b668:	f107 0308 	add.w	r3, r7, #8
 801b66c:	4618      	mov	r0, r3
 801b66e:	f7ef f803 	bl	800a678 <osMutexCreate>
 801b672:	4602      	mov	r2, r0
 801b674:	687b      	ldr	r3, [r7, #4]
 801b676:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801b678:	687b      	ldr	r3, [r7, #4]
 801b67a:	681b      	ldr	r3, [r3, #0]
 801b67c:	2b00      	cmp	r3, #0
 801b67e:	d102      	bne.n	801b686 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801b680:	f04f 33ff 	mov.w	r3, #4294967295
 801b684:	e000      	b.n	801b688 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801b686:	2300      	movs	r3, #0
}
 801b688:	4618      	mov	r0, r3
 801b68a:	3710      	adds	r7, #16
 801b68c:	46bd      	mov	sp, r7
 801b68e:	bd80      	pop	{r7, pc}

0801b690 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801b690:	b580      	push	{r7, lr}
 801b692:	b082      	sub	sp, #8
 801b694:	af00      	add	r7, sp, #0
 801b696:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801b698:	687b      	ldr	r3, [r7, #4]
 801b69a:	681b      	ldr	r3, [r3, #0]
 801b69c:	f04f 31ff 	mov.w	r1, #4294967295
 801b6a0:	4618      	mov	r0, r3
 801b6a2:	f7ef f801 	bl	800a6a8 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801b6a6:	bf00      	nop
 801b6a8:	3708      	adds	r7, #8
 801b6aa:	46bd      	mov	sp, r7
 801b6ac:	bd80      	pop	{r7, pc}

0801b6ae <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801b6ae:	b580      	push	{r7, lr}
 801b6b0:	b082      	sub	sp, #8
 801b6b2:	af00      	add	r7, sp, #0
 801b6b4:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801b6b6:	687b      	ldr	r3, [r7, #4]
 801b6b8:	681b      	ldr	r3, [r3, #0]
 801b6ba:	4618      	mov	r0, r3
 801b6bc:	f7ef f842 	bl	800a744 <osMutexRelease>
}
 801b6c0:	bf00      	nop
 801b6c2:	3708      	adds	r7, #8
 801b6c4:	46bd      	mov	sp, r7
 801b6c6:	bd80      	pop	{r7, pc}

0801b6c8 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801b6c8:	b580      	push	{r7, lr}
 801b6ca:	b08c      	sub	sp, #48	; 0x30
 801b6cc:	af00      	add	r7, sp, #0
 801b6ce:	60f8      	str	r0, [r7, #12]
 801b6d0:	60b9      	str	r1, [r7, #8]
 801b6d2:	607a      	str	r2, [r7, #4]
 801b6d4:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801b6d6:	f107 0314 	add.w	r3, r7, #20
 801b6da:	2200      	movs	r2, #0
 801b6dc:	601a      	str	r2, [r3, #0]
 801b6de:	605a      	str	r2, [r3, #4]
 801b6e0:	609a      	str	r2, [r3, #8]
 801b6e2:	60da      	str	r2, [r3, #12]
 801b6e4:	611a      	str	r2, [r3, #16]
 801b6e6:	615a      	str	r2, [r3, #20]
 801b6e8:	619a      	str	r2, [r3, #24]
 801b6ea:	68fb      	ldr	r3, [r7, #12]
 801b6ec:	617b      	str	r3, [r7, #20]
 801b6ee:	68bb      	ldr	r3, [r7, #8]
 801b6f0:	61bb      	str	r3, [r7, #24]
 801b6f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b6f4:	b21b      	sxth	r3, r3
 801b6f6:	83bb      	strh	r3, [r7, #28]
 801b6f8:	683b      	ldr	r3, [r7, #0]
 801b6fa:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 801b6fc:	f107 0314 	add.w	r3, r7, #20
 801b700:	6879      	ldr	r1, [r7, #4]
 801b702:	4618      	mov	r0, r3
 801b704:	f7ee ff6c 	bl	800a5e0 <osThreadCreate>
 801b708:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801b70a:	4618      	mov	r0, r3
 801b70c:	3730      	adds	r7, #48	; 0x30
 801b70e:	46bd      	mov	sp, r7
 801b710:	bd80      	pop	{r7, pc}
	...

0801b714 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801b714:	b580      	push	{r7, lr}
 801b716:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801b718:	4b04      	ldr	r3, [pc, #16]	; (801b72c <sys_arch_protect+0x18>)
 801b71a:	681b      	ldr	r3, [r3, #0]
 801b71c:	f04f 31ff 	mov.w	r1, #4294967295
 801b720:	4618      	mov	r0, r3
 801b722:	f7ee ffc1 	bl	800a6a8 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801b726:	2301      	movs	r3, #1
}
 801b728:	4618      	mov	r0, r3
 801b72a:	bd80      	pop	{r7, pc}
 801b72c:	2000b63c 	.word	0x2000b63c

0801b730 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801b730:	b580      	push	{r7, lr}
 801b732:	b082      	sub	sp, #8
 801b734:	af00      	add	r7, sp, #0
 801b736:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801b738:	4b04      	ldr	r3, [pc, #16]	; (801b74c <sys_arch_unprotect+0x1c>)
 801b73a:	681b      	ldr	r3, [r3, #0]
 801b73c:	4618      	mov	r0, r3
 801b73e:	f7ef f801 	bl	800a744 <osMutexRelease>
}
 801b742:	bf00      	nop
 801b744:	3708      	adds	r7, #8
 801b746:	46bd      	mov	sp, r7
 801b748:	bd80      	pop	{r7, pc}
 801b74a:	bf00      	nop
 801b74c:	2000b63c 	.word	0x2000b63c

0801b750 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801b750:	b580      	push	{r7, lr}
 801b752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801b754:	2200      	movs	r2, #0
 801b756:	4912      	ldr	r1, [pc, #72]	; (801b7a0 <MX_USB_DEVICE_Init+0x50>)
 801b758:	4812      	ldr	r0, [pc, #72]	; (801b7a4 <MX_USB_DEVICE_Init+0x54>)
 801b75a:	f7ed fd97 	bl	800928c <USBD_Init>
 801b75e:	4603      	mov	r3, r0
 801b760:	2b00      	cmp	r3, #0
 801b762:	d001      	beq.n	801b768 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801b764:	f7e6 f9e6 	bl	8001b34 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801b768:	490f      	ldr	r1, [pc, #60]	; (801b7a8 <MX_USB_DEVICE_Init+0x58>)
 801b76a:	480e      	ldr	r0, [pc, #56]	; (801b7a4 <MX_USB_DEVICE_Init+0x54>)
 801b76c:	f7ed fdbe 	bl	80092ec <USBD_RegisterClass>
 801b770:	4603      	mov	r3, r0
 801b772:	2b00      	cmp	r3, #0
 801b774:	d001      	beq.n	801b77a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801b776:	f7e6 f9dd 	bl	8001b34 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801b77a:	490c      	ldr	r1, [pc, #48]	; (801b7ac <MX_USB_DEVICE_Init+0x5c>)
 801b77c:	4809      	ldr	r0, [pc, #36]	; (801b7a4 <MX_USB_DEVICE_Init+0x54>)
 801b77e:	f7ed fd0f 	bl	80091a0 <USBD_CDC_RegisterInterface>
 801b782:	4603      	mov	r3, r0
 801b784:	2b00      	cmp	r3, #0
 801b786:	d001      	beq.n	801b78c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801b788:	f7e6 f9d4 	bl	8001b34 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801b78c:	4805      	ldr	r0, [pc, #20]	; (801b7a4 <MX_USB_DEVICE_Init+0x54>)
 801b78e:	f7ed fdd4 	bl	800933a <USBD_Start>
 801b792:	4603      	mov	r3, r0
 801b794:	2b00      	cmp	r3, #0
 801b796:	d001      	beq.n	801b79c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801b798:	f7e6 f9cc 	bl	8001b34 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801b79c:	bf00      	nop
 801b79e:	bd80      	pop	{r7, pc}
 801b7a0:	20000150 	.word	0x20000150
 801b7a4:	2000b640 	.word	0x2000b640
 801b7a8:	20000028 	.word	0x20000028
 801b7ac:	2000013c 	.word	0x2000013c

0801b7b0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801b7b0:	b580      	push	{r7, lr}
 801b7b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801b7b4:	2200      	movs	r2, #0
 801b7b6:	4905      	ldr	r1, [pc, #20]	; (801b7cc <CDC_Init_FS+0x1c>)
 801b7b8:	4805      	ldr	r0, [pc, #20]	; (801b7d0 <CDC_Init_FS+0x20>)
 801b7ba:	f7ed fd06 	bl	80091ca <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801b7be:	4905      	ldr	r1, [pc, #20]	; (801b7d4 <CDC_Init_FS+0x24>)
 801b7c0:	4803      	ldr	r0, [pc, #12]	; (801b7d0 <CDC_Init_FS+0x20>)
 801b7c2:	f7ed fd20 	bl	8009206 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801b7c6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801b7c8:	4618      	mov	r0, r3
 801b7ca:	bd80      	pop	{r7, pc}
 801b7cc:	2000c110 	.word	0x2000c110
 801b7d0:	2000b640 	.word	0x2000b640
 801b7d4:	2000b910 	.word	0x2000b910

0801b7d8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801b7d8:	b480      	push	{r7}
 801b7da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801b7dc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801b7de:	4618      	mov	r0, r3
 801b7e0:	46bd      	mov	sp, r7
 801b7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7e6:	4770      	bx	lr

0801b7e8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801b7e8:	b480      	push	{r7}
 801b7ea:	b083      	sub	sp, #12
 801b7ec:	af00      	add	r7, sp, #0
 801b7ee:	4603      	mov	r3, r0
 801b7f0:	6039      	str	r1, [r7, #0]
 801b7f2:	71fb      	strb	r3, [r7, #7]
 801b7f4:	4613      	mov	r3, r2
 801b7f6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801b7f8:	79fb      	ldrb	r3, [r7, #7]
 801b7fa:	2b23      	cmp	r3, #35	; 0x23
 801b7fc:	d84a      	bhi.n	801b894 <CDC_Control_FS+0xac>
 801b7fe:	a201      	add	r2, pc, #4	; (adr r2, 801b804 <CDC_Control_FS+0x1c>)
 801b800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b804:	0801b895 	.word	0x0801b895
 801b808:	0801b895 	.word	0x0801b895
 801b80c:	0801b895 	.word	0x0801b895
 801b810:	0801b895 	.word	0x0801b895
 801b814:	0801b895 	.word	0x0801b895
 801b818:	0801b895 	.word	0x0801b895
 801b81c:	0801b895 	.word	0x0801b895
 801b820:	0801b895 	.word	0x0801b895
 801b824:	0801b895 	.word	0x0801b895
 801b828:	0801b895 	.word	0x0801b895
 801b82c:	0801b895 	.word	0x0801b895
 801b830:	0801b895 	.word	0x0801b895
 801b834:	0801b895 	.word	0x0801b895
 801b838:	0801b895 	.word	0x0801b895
 801b83c:	0801b895 	.word	0x0801b895
 801b840:	0801b895 	.word	0x0801b895
 801b844:	0801b895 	.word	0x0801b895
 801b848:	0801b895 	.word	0x0801b895
 801b84c:	0801b895 	.word	0x0801b895
 801b850:	0801b895 	.word	0x0801b895
 801b854:	0801b895 	.word	0x0801b895
 801b858:	0801b895 	.word	0x0801b895
 801b85c:	0801b895 	.word	0x0801b895
 801b860:	0801b895 	.word	0x0801b895
 801b864:	0801b895 	.word	0x0801b895
 801b868:	0801b895 	.word	0x0801b895
 801b86c:	0801b895 	.word	0x0801b895
 801b870:	0801b895 	.word	0x0801b895
 801b874:	0801b895 	.word	0x0801b895
 801b878:	0801b895 	.word	0x0801b895
 801b87c:	0801b895 	.word	0x0801b895
 801b880:	0801b895 	.word	0x0801b895
 801b884:	0801b895 	.word	0x0801b895
 801b888:	0801b895 	.word	0x0801b895
 801b88c:	0801b895 	.word	0x0801b895
 801b890:	0801b895 	.word	0x0801b895
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801b894:	bf00      	nop
  }

  return (USBD_OK);
 801b896:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801b898:	4618      	mov	r0, r3
 801b89a:	370c      	adds	r7, #12
 801b89c:	46bd      	mov	sp, r7
 801b89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8a2:	4770      	bx	lr

0801b8a4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801b8a4:	b580      	push	{r7, lr}
 801b8a6:	b082      	sub	sp, #8
 801b8a8:	af00      	add	r7, sp, #0
 801b8aa:	6078      	str	r0, [r7, #4]
 801b8ac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801b8ae:	6879      	ldr	r1, [r7, #4]
 801b8b0:	4805      	ldr	r0, [pc, #20]	; (801b8c8 <CDC_Receive_FS+0x24>)
 801b8b2:	f7ed fca8 	bl	8009206 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801b8b6:	4804      	ldr	r0, [pc, #16]	; (801b8c8 <CDC_Receive_FS+0x24>)
 801b8b8:	f7ed fcbe 	bl	8009238 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801b8bc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801b8be:	4618      	mov	r0, r3
 801b8c0:	3708      	adds	r7, #8
 801b8c2:	46bd      	mov	sp, r7
 801b8c4:	bd80      	pop	{r7, pc}
 801b8c6:	bf00      	nop
 801b8c8:	2000b640 	.word	0x2000b640

0801b8cc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801b8cc:	b480      	push	{r7}
 801b8ce:	b087      	sub	sp, #28
 801b8d0:	af00      	add	r7, sp, #0
 801b8d2:	60f8      	str	r0, [r7, #12]
 801b8d4:	60b9      	str	r1, [r7, #8]
 801b8d6:	4613      	mov	r3, r2
 801b8d8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801b8da:	2300      	movs	r3, #0
 801b8dc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801b8de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801b8e2:	4618      	mov	r0, r3
 801b8e4:	371c      	adds	r7, #28
 801b8e6:	46bd      	mov	sp, r7
 801b8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8ec:	4770      	bx	lr
	...

0801b8f0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b8f0:	b480      	push	{r7}
 801b8f2:	b083      	sub	sp, #12
 801b8f4:	af00      	add	r7, sp, #0
 801b8f6:	4603      	mov	r3, r0
 801b8f8:	6039      	str	r1, [r7, #0]
 801b8fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801b8fc:	683b      	ldr	r3, [r7, #0]
 801b8fe:	2212      	movs	r2, #18
 801b900:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801b902:	4b03      	ldr	r3, [pc, #12]	; (801b910 <USBD_FS_DeviceDescriptor+0x20>)
}
 801b904:	4618      	mov	r0, r3
 801b906:	370c      	adds	r7, #12
 801b908:	46bd      	mov	sp, r7
 801b90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b90e:	4770      	bx	lr
 801b910:	2000016c 	.word	0x2000016c

0801b914 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b914:	b480      	push	{r7}
 801b916:	b083      	sub	sp, #12
 801b918:	af00      	add	r7, sp, #0
 801b91a:	4603      	mov	r3, r0
 801b91c:	6039      	str	r1, [r7, #0]
 801b91e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801b920:	683b      	ldr	r3, [r7, #0]
 801b922:	2204      	movs	r2, #4
 801b924:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801b926:	4b03      	ldr	r3, [pc, #12]	; (801b934 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801b928:	4618      	mov	r0, r3
 801b92a:	370c      	adds	r7, #12
 801b92c:	46bd      	mov	sp, r7
 801b92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b932:	4770      	bx	lr
 801b934:	20000180 	.word	0x20000180

0801b938 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b938:	b580      	push	{r7, lr}
 801b93a:	b082      	sub	sp, #8
 801b93c:	af00      	add	r7, sp, #0
 801b93e:	4603      	mov	r3, r0
 801b940:	6039      	str	r1, [r7, #0]
 801b942:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801b944:	79fb      	ldrb	r3, [r7, #7]
 801b946:	2b00      	cmp	r3, #0
 801b948:	d105      	bne.n	801b956 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801b94a:	683a      	ldr	r2, [r7, #0]
 801b94c:	4907      	ldr	r1, [pc, #28]	; (801b96c <USBD_FS_ProductStrDescriptor+0x34>)
 801b94e:	4808      	ldr	r0, [pc, #32]	; (801b970 <USBD_FS_ProductStrDescriptor+0x38>)
 801b950:	f7ee fd25 	bl	800a39e <USBD_GetString>
 801b954:	e004      	b.n	801b960 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801b956:	683a      	ldr	r2, [r7, #0]
 801b958:	4904      	ldr	r1, [pc, #16]	; (801b96c <USBD_FS_ProductStrDescriptor+0x34>)
 801b95a:	4805      	ldr	r0, [pc, #20]	; (801b970 <USBD_FS_ProductStrDescriptor+0x38>)
 801b95c:	f7ee fd1f 	bl	800a39e <USBD_GetString>
  }
  return USBD_StrDesc;
 801b960:	4b02      	ldr	r3, [pc, #8]	; (801b96c <USBD_FS_ProductStrDescriptor+0x34>)
}
 801b962:	4618      	mov	r0, r3
 801b964:	3708      	adds	r7, #8
 801b966:	46bd      	mov	sp, r7
 801b968:	bd80      	pop	{r7, pc}
 801b96a:	bf00      	nop
 801b96c:	2000c910 	.word	0x2000c910
 801b970:	08021ff4 	.word	0x08021ff4

0801b974 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b974:	b580      	push	{r7, lr}
 801b976:	b082      	sub	sp, #8
 801b978:	af00      	add	r7, sp, #0
 801b97a:	4603      	mov	r3, r0
 801b97c:	6039      	str	r1, [r7, #0]
 801b97e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801b980:	683a      	ldr	r2, [r7, #0]
 801b982:	4904      	ldr	r1, [pc, #16]	; (801b994 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801b984:	4804      	ldr	r0, [pc, #16]	; (801b998 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801b986:	f7ee fd0a 	bl	800a39e <USBD_GetString>
  return USBD_StrDesc;
 801b98a:	4b02      	ldr	r3, [pc, #8]	; (801b994 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801b98c:	4618      	mov	r0, r3
 801b98e:	3708      	adds	r7, #8
 801b990:	46bd      	mov	sp, r7
 801b992:	bd80      	pop	{r7, pc}
 801b994:	2000c910 	.word	0x2000c910
 801b998:	0802200c 	.word	0x0802200c

0801b99c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b99c:	b580      	push	{r7, lr}
 801b99e:	b082      	sub	sp, #8
 801b9a0:	af00      	add	r7, sp, #0
 801b9a2:	4603      	mov	r3, r0
 801b9a4:	6039      	str	r1, [r7, #0]
 801b9a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801b9a8:	683b      	ldr	r3, [r7, #0]
 801b9aa:	221a      	movs	r2, #26
 801b9ac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801b9ae:	f000 f843 	bl	801ba38 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801b9b2:	4b02      	ldr	r3, [pc, #8]	; (801b9bc <USBD_FS_SerialStrDescriptor+0x20>)
}
 801b9b4:	4618      	mov	r0, r3
 801b9b6:	3708      	adds	r7, #8
 801b9b8:	46bd      	mov	sp, r7
 801b9ba:	bd80      	pop	{r7, pc}
 801b9bc:	20000184 	.word	0x20000184

0801b9c0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b9c0:	b580      	push	{r7, lr}
 801b9c2:	b082      	sub	sp, #8
 801b9c4:	af00      	add	r7, sp, #0
 801b9c6:	4603      	mov	r3, r0
 801b9c8:	6039      	str	r1, [r7, #0]
 801b9ca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801b9cc:	79fb      	ldrb	r3, [r7, #7]
 801b9ce:	2b00      	cmp	r3, #0
 801b9d0:	d105      	bne.n	801b9de <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801b9d2:	683a      	ldr	r2, [r7, #0]
 801b9d4:	4907      	ldr	r1, [pc, #28]	; (801b9f4 <USBD_FS_ConfigStrDescriptor+0x34>)
 801b9d6:	4808      	ldr	r0, [pc, #32]	; (801b9f8 <USBD_FS_ConfigStrDescriptor+0x38>)
 801b9d8:	f7ee fce1 	bl	800a39e <USBD_GetString>
 801b9dc:	e004      	b.n	801b9e8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801b9de:	683a      	ldr	r2, [r7, #0]
 801b9e0:	4904      	ldr	r1, [pc, #16]	; (801b9f4 <USBD_FS_ConfigStrDescriptor+0x34>)
 801b9e2:	4805      	ldr	r0, [pc, #20]	; (801b9f8 <USBD_FS_ConfigStrDescriptor+0x38>)
 801b9e4:	f7ee fcdb 	bl	800a39e <USBD_GetString>
  }
  return USBD_StrDesc;
 801b9e8:	4b02      	ldr	r3, [pc, #8]	; (801b9f4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801b9ea:	4618      	mov	r0, r3
 801b9ec:	3708      	adds	r7, #8
 801b9ee:	46bd      	mov	sp, r7
 801b9f0:	bd80      	pop	{r7, pc}
 801b9f2:	bf00      	nop
 801b9f4:	2000c910 	.word	0x2000c910
 801b9f8:	08022020 	.word	0x08022020

0801b9fc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b9fc:	b580      	push	{r7, lr}
 801b9fe:	b082      	sub	sp, #8
 801ba00:	af00      	add	r7, sp, #0
 801ba02:	4603      	mov	r3, r0
 801ba04:	6039      	str	r1, [r7, #0]
 801ba06:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801ba08:	79fb      	ldrb	r3, [r7, #7]
 801ba0a:	2b00      	cmp	r3, #0
 801ba0c:	d105      	bne.n	801ba1a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801ba0e:	683a      	ldr	r2, [r7, #0]
 801ba10:	4907      	ldr	r1, [pc, #28]	; (801ba30 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801ba12:	4808      	ldr	r0, [pc, #32]	; (801ba34 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801ba14:	f7ee fcc3 	bl	800a39e <USBD_GetString>
 801ba18:	e004      	b.n	801ba24 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801ba1a:	683a      	ldr	r2, [r7, #0]
 801ba1c:	4904      	ldr	r1, [pc, #16]	; (801ba30 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801ba1e:	4805      	ldr	r0, [pc, #20]	; (801ba34 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801ba20:	f7ee fcbd 	bl	800a39e <USBD_GetString>
  }
  return USBD_StrDesc;
 801ba24:	4b02      	ldr	r3, [pc, #8]	; (801ba30 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801ba26:	4618      	mov	r0, r3
 801ba28:	3708      	adds	r7, #8
 801ba2a:	46bd      	mov	sp, r7
 801ba2c:	bd80      	pop	{r7, pc}
 801ba2e:	bf00      	nop
 801ba30:	2000c910 	.word	0x2000c910
 801ba34:	0802202c 	.word	0x0802202c

0801ba38 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801ba38:	b580      	push	{r7, lr}
 801ba3a:	b084      	sub	sp, #16
 801ba3c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801ba3e:	4b0f      	ldr	r3, [pc, #60]	; (801ba7c <Get_SerialNum+0x44>)
 801ba40:	681b      	ldr	r3, [r3, #0]
 801ba42:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801ba44:	4b0e      	ldr	r3, [pc, #56]	; (801ba80 <Get_SerialNum+0x48>)
 801ba46:	681b      	ldr	r3, [r3, #0]
 801ba48:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801ba4a:	4b0e      	ldr	r3, [pc, #56]	; (801ba84 <Get_SerialNum+0x4c>)
 801ba4c:	681b      	ldr	r3, [r3, #0]
 801ba4e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801ba50:	68fa      	ldr	r2, [r7, #12]
 801ba52:	687b      	ldr	r3, [r7, #4]
 801ba54:	4413      	add	r3, r2
 801ba56:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801ba58:	68fb      	ldr	r3, [r7, #12]
 801ba5a:	2b00      	cmp	r3, #0
 801ba5c:	d009      	beq.n	801ba72 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801ba5e:	2208      	movs	r2, #8
 801ba60:	4909      	ldr	r1, [pc, #36]	; (801ba88 <Get_SerialNum+0x50>)
 801ba62:	68f8      	ldr	r0, [r7, #12]
 801ba64:	f000 f814 	bl	801ba90 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801ba68:	2204      	movs	r2, #4
 801ba6a:	4908      	ldr	r1, [pc, #32]	; (801ba8c <Get_SerialNum+0x54>)
 801ba6c:	68b8      	ldr	r0, [r7, #8]
 801ba6e:	f000 f80f 	bl	801ba90 <IntToUnicode>
  }
}
 801ba72:	bf00      	nop
 801ba74:	3710      	adds	r7, #16
 801ba76:	46bd      	mov	sp, r7
 801ba78:	bd80      	pop	{r7, pc}
 801ba7a:	bf00      	nop
 801ba7c:	1fff7a10 	.word	0x1fff7a10
 801ba80:	1fff7a14 	.word	0x1fff7a14
 801ba84:	1fff7a18 	.word	0x1fff7a18
 801ba88:	20000186 	.word	0x20000186
 801ba8c:	20000196 	.word	0x20000196

0801ba90 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801ba90:	b480      	push	{r7}
 801ba92:	b087      	sub	sp, #28
 801ba94:	af00      	add	r7, sp, #0
 801ba96:	60f8      	str	r0, [r7, #12]
 801ba98:	60b9      	str	r1, [r7, #8]
 801ba9a:	4613      	mov	r3, r2
 801ba9c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801ba9e:	2300      	movs	r3, #0
 801baa0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801baa2:	2300      	movs	r3, #0
 801baa4:	75fb      	strb	r3, [r7, #23]
 801baa6:	e027      	b.n	801baf8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801baa8:	68fb      	ldr	r3, [r7, #12]
 801baaa:	0f1b      	lsrs	r3, r3, #28
 801baac:	2b09      	cmp	r3, #9
 801baae:	d80b      	bhi.n	801bac8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801bab0:	68fb      	ldr	r3, [r7, #12]
 801bab2:	0f1b      	lsrs	r3, r3, #28
 801bab4:	b2da      	uxtb	r2, r3
 801bab6:	7dfb      	ldrb	r3, [r7, #23]
 801bab8:	005b      	lsls	r3, r3, #1
 801baba:	4619      	mov	r1, r3
 801babc:	68bb      	ldr	r3, [r7, #8]
 801babe:	440b      	add	r3, r1
 801bac0:	3230      	adds	r2, #48	; 0x30
 801bac2:	b2d2      	uxtb	r2, r2
 801bac4:	701a      	strb	r2, [r3, #0]
 801bac6:	e00a      	b.n	801bade <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801bac8:	68fb      	ldr	r3, [r7, #12]
 801baca:	0f1b      	lsrs	r3, r3, #28
 801bacc:	b2da      	uxtb	r2, r3
 801bace:	7dfb      	ldrb	r3, [r7, #23]
 801bad0:	005b      	lsls	r3, r3, #1
 801bad2:	4619      	mov	r1, r3
 801bad4:	68bb      	ldr	r3, [r7, #8]
 801bad6:	440b      	add	r3, r1
 801bad8:	3237      	adds	r2, #55	; 0x37
 801bada:	b2d2      	uxtb	r2, r2
 801badc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801bade:	68fb      	ldr	r3, [r7, #12]
 801bae0:	011b      	lsls	r3, r3, #4
 801bae2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801bae4:	7dfb      	ldrb	r3, [r7, #23]
 801bae6:	005b      	lsls	r3, r3, #1
 801bae8:	3301      	adds	r3, #1
 801baea:	68ba      	ldr	r2, [r7, #8]
 801baec:	4413      	add	r3, r2
 801baee:	2200      	movs	r2, #0
 801baf0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801baf2:	7dfb      	ldrb	r3, [r7, #23]
 801baf4:	3301      	adds	r3, #1
 801baf6:	75fb      	strb	r3, [r7, #23]
 801baf8:	7dfa      	ldrb	r2, [r7, #23]
 801bafa:	79fb      	ldrb	r3, [r7, #7]
 801bafc:	429a      	cmp	r2, r3
 801bafe:	d3d3      	bcc.n	801baa8 <IntToUnicode+0x18>
  }
}
 801bb00:	bf00      	nop
 801bb02:	bf00      	nop
 801bb04:	371c      	adds	r7, #28
 801bb06:	46bd      	mov	sp, r7
 801bb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb0c:	4770      	bx	lr
	...

0801bb10 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801bb10:	b580      	push	{r7, lr}
 801bb12:	b08a      	sub	sp, #40	; 0x28
 801bb14:	af00      	add	r7, sp, #0
 801bb16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801bb18:	f107 0314 	add.w	r3, r7, #20
 801bb1c:	2200      	movs	r2, #0
 801bb1e:	601a      	str	r2, [r3, #0]
 801bb20:	605a      	str	r2, [r3, #4]
 801bb22:	609a      	str	r2, [r3, #8]
 801bb24:	60da      	str	r2, [r3, #12]
 801bb26:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801bb28:	687b      	ldr	r3, [r7, #4]
 801bb2a:	681b      	ldr	r3, [r3, #0]
 801bb2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801bb30:	d147      	bne.n	801bbc2 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801bb32:	2300      	movs	r3, #0
 801bb34:	613b      	str	r3, [r7, #16]
 801bb36:	4b25      	ldr	r3, [pc, #148]	; (801bbcc <HAL_PCD_MspInit+0xbc>)
 801bb38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bb3a:	4a24      	ldr	r2, [pc, #144]	; (801bbcc <HAL_PCD_MspInit+0xbc>)
 801bb3c:	f043 0301 	orr.w	r3, r3, #1
 801bb40:	6313      	str	r3, [r2, #48]	; 0x30
 801bb42:	4b22      	ldr	r3, [pc, #136]	; (801bbcc <HAL_PCD_MspInit+0xbc>)
 801bb44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bb46:	f003 0301 	and.w	r3, r3, #1
 801bb4a:	613b      	str	r3, [r7, #16]
 801bb4c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 801bb4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 801bb52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801bb54:	2300      	movs	r3, #0
 801bb56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801bb58:	2300      	movs	r3, #0
 801bb5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801bb5c:	f107 0314 	add.w	r3, r7, #20
 801bb60:	4619      	mov	r1, r3
 801bb62:	481b      	ldr	r0, [pc, #108]	; (801bbd0 <HAL_PCD_MspInit+0xc0>)
 801bb64:	f7e7 fc1a 	bl	800339c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801bb68:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801bb6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801bb6e:	2302      	movs	r3, #2
 801bb70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801bb72:	2300      	movs	r3, #0
 801bb74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801bb76:	2303      	movs	r3, #3
 801bb78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801bb7a:	230a      	movs	r3, #10
 801bb7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801bb7e:	f107 0314 	add.w	r3, r7, #20
 801bb82:	4619      	mov	r1, r3
 801bb84:	4812      	ldr	r0, [pc, #72]	; (801bbd0 <HAL_PCD_MspInit+0xc0>)
 801bb86:	f7e7 fc09 	bl	800339c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801bb8a:	4b10      	ldr	r3, [pc, #64]	; (801bbcc <HAL_PCD_MspInit+0xbc>)
 801bb8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bb8e:	4a0f      	ldr	r2, [pc, #60]	; (801bbcc <HAL_PCD_MspInit+0xbc>)
 801bb90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bb94:	6353      	str	r3, [r2, #52]	; 0x34
 801bb96:	2300      	movs	r3, #0
 801bb98:	60fb      	str	r3, [r7, #12]
 801bb9a:	4b0c      	ldr	r3, [pc, #48]	; (801bbcc <HAL_PCD_MspInit+0xbc>)
 801bb9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bb9e:	4a0b      	ldr	r2, [pc, #44]	; (801bbcc <HAL_PCD_MspInit+0xbc>)
 801bba0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801bba4:	6453      	str	r3, [r2, #68]	; 0x44
 801bba6:	4b09      	ldr	r3, [pc, #36]	; (801bbcc <HAL_PCD_MspInit+0xbc>)
 801bba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bbaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801bbae:	60fb      	str	r3, [r7, #12]
 801bbb0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801bbb2:	2200      	movs	r2, #0
 801bbb4:	2105      	movs	r1, #5
 801bbb6:	2043      	movs	r0, #67	; 0x43
 801bbb8:	f7e6 fbb4 	bl	8002324 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801bbbc:	2043      	movs	r0, #67	; 0x43
 801bbbe:	f7e6 fbcd 	bl	800235c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801bbc2:	bf00      	nop
 801bbc4:	3728      	adds	r7, #40	; 0x28
 801bbc6:	46bd      	mov	sp, r7
 801bbc8:	bd80      	pop	{r7, pc}
 801bbca:	bf00      	nop
 801bbcc:	40023800 	.word	0x40023800
 801bbd0:	40020000 	.word	0x40020000

0801bbd4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801bbd4:	b580      	push	{r7, lr}
 801bbd6:	b082      	sub	sp, #8
 801bbd8:	af00      	add	r7, sp, #0
 801bbda:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801bbdc:	687b      	ldr	r3, [r7, #4]
 801bbde:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801bbe2:	687b      	ldr	r3, [r7, #4]
 801bbe4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801bbe8:	4619      	mov	r1, r3
 801bbea:	4610      	mov	r0, r2
 801bbec:	f7ed fbf0 	bl	80093d0 <USBD_LL_SetupStage>
}
 801bbf0:	bf00      	nop
 801bbf2:	3708      	adds	r7, #8
 801bbf4:	46bd      	mov	sp, r7
 801bbf6:	bd80      	pop	{r7, pc}

0801bbf8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801bbf8:	b580      	push	{r7, lr}
 801bbfa:	b082      	sub	sp, #8
 801bbfc:	af00      	add	r7, sp, #0
 801bbfe:	6078      	str	r0, [r7, #4]
 801bc00:	460b      	mov	r3, r1
 801bc02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801bc04:	687b      	ldr	r3, [r7, #4]
 801bc06:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801bc0a:	78fa      	ldrb	r2, [r7, #3]
 801bc0c:	6879      	ldr	r1, [r7, #4]
 801bc0e:	4613      	mov	r3, r2
 801bc10:	00db      	lsls	r3, r3, #3
 801bc12:	1a9b      	subs	r3, r3, r2
 801bc14:	009b      	lsls	r3, r3, #2
 801bc16:	440b      	add	r3, r1
 801bc18:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801bc1c:	681a      	ldr	r2, [r3, #0]
 801bc1e:	78fb      	ldrb	r3, [r7, #3]
 801bc20:	4619      	mov	r1, r3
 801bc22:	f7ed fc2a 	bl	800947a <USBD_LL_DataOutStage>
}
 801bc26:	bf00      	nop
 801bc28:	3708      	adds	r7, #8
 801bc2a:	46bd      	mov	sp, r7
 801bc2c:	bd80      	pop	{r7, pc}

0801bc2e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801bc2e:	b580      	push	{r7, lr}
 801bc30:	b082      	sub	sp, #8
 801bc32:	af00      	add	r7, sp, #0
 801bc34:	6078      	str	r0, [r7, #4]
 801bc36:	460b      	mov	r3, r1
 801bc38:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801bc3a:	687b      	ldr	r3, [r7, #4]
 801bc3c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801bc40:	78fa      	ldrb	r2, [r7, #3]
 801bc42:	6879      	ldr	r1, [r7, #4]
 801bc44:	4613      	mov	r3, r2
 801bc46:	00db      	lsls	r3, r3, #3
 801bc48:	1a9b      	subs	r3, r3, r2
 801bc4a:	009b      	lsls	r3, r3, #2
 801bc4c:	440b      	add	r3, r1
 801bc4e:	3348      	adds	r3, #72	; 0x48
 801bc50:	681a      	ldr	r2, [r3, #0]
 801bc52:	78fb      	ldrb	r3, [r7, #3]
 801bc54:	4619      	mov	r1, r3
 801bc56:	f7ed fc73 	bl	8009540 <USBD_LL_DataInStage>
}
 801bc5a:	bf00      	nop
 801bc5c:	3708      	adds	r7, #8
 801bc5e:	46bd      	mov	sp, r7
 801bc60:	bd80      	pop	{r7, pc}

0801bc62 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801bc62:	b580      	push	{r7, lr}
 801bc64:	b082      	sub	sp, #8
 801bc66:	af00      	add	r7, sp, #0
 801bc68:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801bc6a:	687b      	ldr	r3, [r7, #4]
 801bc6c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801bc70:	4618      	mov	r0, r3
 801bc72:	f7ed fd87 	bl	8009784 <USBD_LL_SOF>
}
 801bc76:	bf00      	nop
 801bc78:	3708      	adds	r7, #8
 801bc7a:	46bd      	mov	sp, r7
 801bc7c:	bd80      	pop	{r7, pc}

0801bc7e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801bc7e:	b580      	push	{r7, lr}
 801bc80:	b084      	sub	sp, #16
 801bc82:	af00      	add	r7, sp, #0
 801bc84:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801bc86:	2301      	movs	r3, #1
 801bc88:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801bc8a:	687b      	ldr	r3, [r7, #4]
 801bc8c:	68db      	ldr	r3, [r3, #12]
 801bc8e:	2b00      	cmp	r3, #0
 801bc90:	d102      	bne.n	801bc98 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801bc92:	2300      	movs	r3, #0
 801bc94:	73fb      	strb	r3, [r7, #15]
 801bc96:	e008      	b.n	801bcaa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801bc98:	687b      	ldr	r3, [r7, #4]
 801bc9a:	68db      	ldr	r3, [r3, #12]
 801bc9c:	2b02      	cmp	r3, #2
 801bc9e:	d102      	bne.n	801bca6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801bca0:	2301      	movs	r3, #1
 801bca2:	73fb      	strb	r3, [r7, #15]
 801bca4:	e001      	b.n	801bcaa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801bca6:	f7e5 ff45 	bl	8001b34 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801bcaa:	687b      	ldr	r3, [r7, #4]
 801bcac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801bcb0:	7bfa      	ldrb	r2, [r7, #15]
 801bcb2:	4611      	mov	r1, r2
 801bcb4:	4618      	mov	r0, r3
 801bcb6:	f7ed fd27 	bl	8009708 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801bcba:	687b      	ldr	r3, [r7, #4]
 801bcbc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801bcc0:	4618      	mov	r0, r3
 801bcc2:	f7ed fcd3 	bl	800966c <USBD_LL_Reset>
}
 801bcc6:	bf00      	nop
 801bcc8:	3710      	adds	r7, #16
 801bcca:	46bd      	mov	sp, r7
 801bccc:	bd80      	pop	{r7, pc}
	...

0801bcd0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801bcd0:	b580      	push	{r7, lr}
 801bcd2:	b082      	sub	sp, #8
 801bcd4:	af00      	add	r7, sp, #0
 801bcd6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801bcd8:	687b      	ldr	r3, [r7, #4]
 801bcda:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801bcde:	4618      	mov	r0, r3
 801bce0:	f7ed fd22 	bl	8009728 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801bce4:	687b      	ldr	r3, [r7, #4]
 801bce6:	681b      	ldr	r3, [r3, #0]
 801bce8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801bcec:	681b      	ldr	r3, [r3, #0]
 801bcee:	687a      	ldr	r2, [r7, #4]
 801bcf0:	6812      	ldr	r2, [r2, #0]
 801bcf2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801bcf6:	f043 0301 	orr.w	r3, r3, #1
 801bcfa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801bcfc:	687b      	ldr	r3, [r7, #4]
 801bcfe:	6a1b      	ldr	r3, [r3, #32]
 801bd00:	2b00      	cmp	r3, #0
 801bd02:	d005      	beq.n	801bd10 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801bd04:	4b04      	ldr	r3, [pc, #16]	; (801bd18 <HAL_PCD_SuspendCallback+0x48>)
 801bd06:	691b      	ldr	r3, [r3, #16]
 801bd08:	4a03      	ldr	r2, [pc, #12]	; (801bd18 <HAL_PCD_SuspendCallback+0x48>)
 801bd0a:	f043 0306 	orr.w	r3, r3, #6
 801bd0e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801bd10:	bf00      	nop
 801bd12:	3708      	adds	r7, #8
 801bd14:	46bd      	mov	sp, r7
 801bd16:	bd80      	pop	{r7, pc}
 801bd18:	e000ed00 	.word	0xe000ed00

0801bd1c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801bd1c:	b580      	push	{r7, lr}
 801bd1e:	b082      	sub	sp, #8
 801bd20:	af00      	add	r7, sp, #0
 801bd22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801bd24:	687b      	ldr	r3, [r7, #4]
 801bd26:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801bd2a:	4618      	mov	r0, r3
 801bd2c:	f7ed fd12 	bl	8009754 <USBD_LL_Resume>
}
 801bd30:	bf00      	nop
 801bd32:	3708      	adds	r7, #8
 801bd34:	46bd      	mov	sp, r7
 801bd36:	bd80      	pop	{r7, pc}

0801bd38 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801bd38:	b580      	push	{r7, lr}
 801bd3a:	b082      	sub	sp, #8
 801bd3c:	af00      	add	r7, sp, #0
 801bd3e:	6078      	str	r0, [r7, #4]
 801bd40:	460b      	mov	r3, r1
 801bd42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801bd44:	687b      	ldr	r3, [r7, #4]
 801bd46:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801bd4a:	78fa      	ldrb	r2, [r7, #3]
 801bd4c:	4611      	mov	r1, r2
 801bd4e:	4618      	mov	r0, r3
 801bd50:	f7ed fd60 	bl	8009814 <USBD_LL_IsoOUTIncomplete>
}
 801bd54:	bf00      	nop
 801bd56:	3708      	adds	r7, #8
 801bd58:	46bd      	mov	sp, r7
 801bd5a:	bd80      	pop	{r7, pc}

0801bd5c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801bd5c:	b580      	push	{r7, lr}
 801bd5e:	b082      	sub	sp, #8
 801bd60:	af00      	add	r7, sp, #0
 801bd62:	6078      	str	r0, [r7, #4]
 801bd64:	460b      	mov	r3, r1
 801bd66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801bd68:	687b      	ldr	r3, [r7, #4]
 801bd6a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801bd6e:	78fa      	ldrb	r2, [r7, #3]
 801bd70:	4611      	mov	r1, r2
 801bd72:	4618      	mov	r0, r3
 801bd74:	f7ed fd28 	bl	80097c8 <USBD_LL_IsoINIncomplete>
}
 801bd78:	bf00      	nop
 801bd7a:	3708      	adds	r7, #8
 801bd7c:	46bd      	mov	sp, r7
 801bd7e:	bd80      	pop	{r7, pc}

0801bd80 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801bd80:	b580      	push	{r7, lr}
 801bd82:	b082      	sub	sp, #8
 801bd84:	af00      	add	r7, sp, #0
 801bd86:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801bd88:	687b      	ldr	r3, [r7, #4]
 801bd8a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801bd8e:	4618      	mov	r0, r3
 801bd90:	f7ed fd66 	bl	8009860 <USBD_LL_DevConnected>
}
 801bd94:	bf00      	nop
 801bd96:	3708      	adds	r7, #8
 801bd98:	46bd      	mov	sp, r7
 801bd9a:	bd80      	pop	{r7, pc}

0801bd9c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801bd9c:	b580      	push	{r7, lr}
 801bd9e:	b082      	sub	sp, #8
 801bda0:	af00      	add	r7, sp, #0
 801bda2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801bda4:	687b      	ldr	r3, [r7, #4]
 801bda6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801bdaa:	4618      	mov	r0, r3
 801bdac:	f7ed fd63 	bl	8009876 <USBD_LL_DevDisconnected>
}
 801bdb0:	bf00      	nop
 801bdb2:	3708      	adds	r7, #8
 801bdb4:	46bd      	mov	sp, r7
 801bdb6:	bd80      	pop	{r7, pc}

0801bdb8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801bdb8:	b580      	push	{r7, lr}
 801bdba:	b082      	sub	sp, #8
 801bdbc:	af00      	add	r7, sp, #0
 801bdbe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801bdc0:	687b      	ldr	r3, [r7, #4]
 801bdc2:	781b      	ldrb	r3, [r3, #0]
 801bdc4:	2b00      	cmp	r3, #0
 801bdc6:	d13c      	bne.n	801be42 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801bdc8:	4a20      	ldr	r2, [pc, #128]	; (801be4c <USBD_LL_Init+0x94>)
 801bdca:	687b      	ldr	r3, [r7, #4]
 801bdcc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 801bdd0:	687b      	ldr	r3, [r7, #4]
 801bdd2:	4a1e      	ldr	r2, [pc, #120]	; (801be4c <USBD_LL_Init+0x94>)
 801bdd4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801bdd8:	4b1c      	ldr	r3, [pc, #112]	; (801be4c <USBD_LL_Init+0x94>)
 801bdda:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801bdde:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801bde0:	4b1a      	ldr	r3, [pc, #104]	; (801be4c <USBD_LL_Init+0x94>)
 801bde2:	2204      	movs	r2, #4
 801bde4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801bde6:	4b19      	ldr	r3, [pc, #100]	; (801be4c <USBD_LL_Init+0x94>)
 801bde8:	2202      	movs	r2, #2
 801bdea:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801bdec:	4b17      	ldr	r3, [pc, #92]	; (801be4c <USBD_LL_Init+0x94>)
 801bdee:	2200      	movs	r2, #0
 801bdf0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801bdf2:	4b16      	ldr	r3, [pc, #88]	; (801be4c <USBD_LL_Init+0x94>)
 801bdf4:	2202      	movs	r2, #2
 801bdf6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801bdf8:	4b14      	ldr	r3, [pc, #80]	; (801be4c <USBD_LL_Init+0x94>)
 801bdfa:	2200      	movs	r2, #0
 801bdfc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801bdfe:	4b13      	ldr	r3, [pc, #76]	; (801be4c <USBD_LL_Init+0x94>)
 801be00:	2200      	movs	r2, #0
 801be02:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801be04:	4b11      	ldr	r3, [pc, #68]	; (801be4c <USBD_LL_Init+0x94>)
 801be06:	2200      	movs	r2, #0
 801be08:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 801be0a:	4b10      	ldr	r3, [pc, #64]	; (801be4c <USBD_LL_Init+0x94>)
 801be0c:	2201      	movs	r2, #1
 801be0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801be10:	4b0e      	ldr	r3, [pc, #56]	; (801be4c <USBD_LL_Init+0x94>)
 801be12:	2200      	movs	r2, #0
 801be14:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801be16:	480d      	ldr	r0, [pc, #52]	; (801be4c <USBD_LL_Init+0x94>)
 801be18:	f7e7 fc8e 	bl	8003738 <HAL_PCD_Init>
 801be1c:	4603      	mov	r3, r0
 801be1e:	2b00      	cmp	r3, #0
 801be20:	d001      	beq.n	801be26 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801be22:	f7e5 fe87 	bl	8001b34 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801be26:	2180      	movs	r1, #128	; 0x80
 801be28:	4808      	ldr	r0, [pc, #32]	; (801be4c <USBD_LL_Init+0x94>)
 801be2a:	f7e8 fdec 	bl	8004a06 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801be2e:	2240      	movs	r2, #64	; 0x40
 801be30:	2100      	movs	r1, #0
 801be32:	4806      	ldr	r0, [pc, #24]	; (801be4c <USBD_LL_Init+0x94>)
 801be34:	f7e8 fda0 	bl	8004978 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801be38:	2280      	movs	r2, #128	; 0x80
 801be3a:	2101      	movs	r1, #1
 801be3c:	4803      	ldr	r0, [pc, #12]	; (801be4c <USBD_LL_Init+0x94>)
 801be3e:	f7e8 fd9b 	bl	8004978 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801be42:	2300      	movs	r3, #0
}
 801be44:	4618      	mov	r0, r3
 801be46:	3708      	adds	r7, #8
 801be48:	46bd      	mov	sp, r7
 801be4a:	bd80      	pop	{r7, pc}
 801be4c:	2000cb10 	.word	0x2000cb10

0801be50 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801be50:	b580      	push	{r7, lr}
 801be52:	b084      	sub	sp, #16
 801be54:	af00      	add	r7, sp, #0
 801be56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801be58:	2300      	movs	r3, #0
 801be5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801be5c:	2300      	movs	r3, #0
 801be5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801be60:	687b      	ldr	r3, [r7, #4]
 801be62:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801be66:	4618      	mov	r0, r3
 801be68:	f7e7 fd83 	bl	8003972 <HAL_PCD_Start>
 801be6c:	4603      	mov	r3, r0
 801be6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801be70:	7bfb      	ldrb	r3, [r7, #15]
 801be72:	4618      	mov	r0, r3
 801be74:	f000 f942 	bl	801c0fc <USBD_Get_USB_Status>
 801be78:	4603      	mov	r3, r0
 801be7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801be7c:	7bbb      	ldrb	r3, [r7, #14]
}
 801be7e:	4618      	mov	r0, r3
 801be80:	3710      	adds	r7, #16
 801be82:	46bd      	mov	sp, r7
 801be84:	bd80      	pop	{r7, pc}

0801be86 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801be86:	b580      	push	{r7, lr}
 801be88:	b084      	sub	sp, #16
 801be8a:	af00      	add	r7, sp, #0
 801be8c:	6078      	str	r0, [r7, #4]
 801be8e:	4608      	mov	r0, r1
 801be90:	4611      	mov	r1, r2
 801be92:	461a      	mov	r2, r3
 801be94:	4603      	mov	r3, r0
 801be96:	70fb      	strb	r3, [r7, #3]
 801be98:	460b      	mov	r3, r1
 801be9a:	70bb      	strb	r3, [r7, #2]
 801be9c:	4613      	mov	r3, r2
 801be9e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801bea0:	2300      	movs	r3, #0
 801bea2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801bea4:	2300      	movs	r3, #0
 801bea6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801bea8:	687b      	ldr	r3, [r7, #4]
 801beaa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801beae:	78bb      	ldrb	r3, [r7, #2]
 801beb0:	883a      	ldrh	r2, [r7, #0]
 801beb2:	78f9      	ldrb	r1, [r7, #3]
 801beb4:	f7e8 f967 	bl	8004186 <HAL_PCD_EP_Open>
 801beb8:	4603      	mov	r3, r0
 801beba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801bebc:	7bfb      	ldrb	r3, [r7, #15]
 801bebe:	4618      	mov	r0, r3
 801bec0:	f000 f91c 	bl	801c0fc <USBD_Get_USB_Status>
 801bec4:	4603      	mov	r3, r0
 801bec6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801bec8:	7bbb      	ldrb	r3, [r7, #14]
}
 801beca:	4618      	mov	r0, r3
 801becc:	3710      	adds	r7, #16
 801bece:	46bd      	mov	sp, r7
 801bed0:	bd80      	pop	{r7, pc}

0801bed2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801bed2:	b580      	push	{r7, lr}
 801bed4:	b084      	sub	sp, #16
 801bed6:	af00      	add	r7, sp, #0
 801bed8:	6078      	str	r0, [r7, #4]
 801beda:	460b      	mov	r3, r1
 801bedc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801bede:	2300      	movs	r3, #0
 801bee0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801bee2:	2300      	movs	r3, #0
 801bee4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801bee6:	687b      	ldr	r3, [r7, #4]
 801bee8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801beec:	78fa      	ldrb	r2, [r7, #3]
 801beee:	4611      	mov	r1, r2
 801bef0:	4618      	mov	r0, r3
 801bef2:	f7e8 f9b0 	bl	8004256 <HAL_PCD_EP_Close>
 801bef6:	4603      	mov	r3, r0
 801bef8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801befa:	7bfb      	ldrb	r3, [r7, #15]
 801befc:	4618      	mov	r0, r3
 801befe:	f000 f8fd 	bl	801c0fc <USBD_Get_USB_Status>
 801bf02:	4603      	mov	r3, r0
 801bf04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801bf06:	7bbb      	ldrb	r3, [r7, #14]
}
 801bf08:	4618      	mov	r0, r3
 801bf0a:	3710      	adds	r7, #16
 801bf0c:	46bd      	mov	sp, r7
 801bf0e:	bd80      	pop	{r7, pc}

0801bf10 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801bf10:	b580      	push	{r7, lr}
 801bf12:	b084      	sub	sp, #16
 801bf14:	af00      	add	r7, sp, #0
 801bf16:	6078      	str	r0, [r7, #4]
 801bf18:	460b      	mov	r3, r1
 801bf1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801bf1c:	2300      	movs	r3, #0
 801bf1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801bf20:	2300      	movs	r3, #0
 801bf22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801bf24:	687b      	ldr	r3, [r7, #4]
 801bf26:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801bf2a:	78fa      	ldrb	r2, [r7, #3]
 801bf2c:	4611      	mov	r1, r2
 801bf2e:	4618      	mov	r0, r3
 801bf30:	f7e8 fa88 	bl	8004444 <HAL_PCD_EP_SetStall>
 801bf34:	4603      	mov	r3, r0
 801bf36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801bf38:	7bfb      	ldrb	r3, [r7, #15]
 801bf3a:	4618      	mov	r0, r3
 801bf3c:	f000 f8de 	bl	801c0fc <USBD_Get_USB_Status>
 801bf40:	4603      	mov	r3, r0
 801bf42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801bf44:	7bbb      	ldrb	r3, [r7, #14]
}
 801bf46:	4618      	mov	r0, r3
 801bf48:	3710      	adds	r7, #16
 801bf4a:	46bd      	mov	sp, r7
 801bf4c:	bd80      	pop	{r7, pc}

0801bf4e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801bf4e:	b580      	push	{r7, lr}
 801bf50:	b084      	sub	sp, #16
 801bf52:	af00      	add	r7, sp, #0
 801bf54:	6078      	str	r0, [r7, #4]
 801bf56:	460b      	mov	r3, r1
 801bf58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801bf5a:	2300      	movs	r3, #0
 801bf5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801bf5e:	2300      	movs	r3, #0
 801bf60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801bf62:	687b      	ldr	r3, [r7, #4]
 801bf64:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801bf68:	78fa      	ldrb	r2, [r7, #3]
 801bf6a:	4611      	mov	r1, r2
 801bf6c:	4618      	mov	r0, r3
 801bf6e:	f7e8 facd 	bl	800450c <HAL_PCD_EP_ClrStall>
 801bf72:	4603      	mov	r3, r0
 801bf74:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801bf76:	7bfb      	ldrb	r3, [r7, #15]
 801bf78:	4618      	mov	r0, r3
 801bf7a:	f000 f8bf 	bl	801c0fc <USBD_Get_USB_Status>
 801bf7e:	4603      	mov	r3, r0
 801bf80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801bf82:	7bbb      	ldrb	r3, [r7, #14]
}
 801bf84:	4618      	mov	r0, r3
 801bf86:	3710      	adds	r7, #16
 801bf88:	46bd      	mov	sp, r7
 801bf8a:	bd80      	pop	{r7, pc}

0801bf8c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801bf8c:	b480      	push	{r7}
 801bf8e:	b085      	sub	sp, #20
 801bf90:	af00      	add	r7, sp, #0
 801bf92:	6078      	str	r0, [r7, #4]
 801bf94:	460b      	mov	r3, r1
 801bf96:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801bf98:	687b      	ldr	r3, [r7, #4]
 801bf9a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801bf9e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801bfa0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801bfa4:	2b00      	cmp	r3, #0
 801bfa6:	da0b      	bge.n	801bfc0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801bfa8:	78fb      	ldrb	r3, [r7, #3]
 801bfaa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801bfae:	68f9      	ldr	r1, [r7, #12]
 801bfb0:	4613      	mov	r3, r2
 801bfb2:	00db      	lsls	r3, r3, #3
 801bfb4:	1a9b      	subs	r3, r3, r2
 801bfb6:	009b      	lsls	r3, r3, #2
 801bfb8:	440b      	add	r3, r1
 801bfba:	333e      	adds	r3, #62	; 0x3e
 801bfbc:	781b      	ldrb	r3, [r3, #0]
 801bfbe:	e00b      	b.n	801bfd8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801bfc0:	78fb      	ldrb	r3, [r7, #3]
 801bfc2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801bfc6:	68f9      	ldr	r1, [r7, #12]
 801bfc8:	4613      	mov	r3, r2
 801bfca:	00db      	lsls	r3, r3, #3
 801bfcc:	1a9b      	subs	r3, r3, r2
 801bfce:	009b      	lsls	r3, r3, #2
 801bfd0:	440b      	add	r3, r1
 801bfd2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801bfd6:	781b      	ldrb	r3, [r3, #0]
  }
}
 801bfd8:	4618      	mov	r0, r3
 801bfda:	3714      	adds	r7, #20
 801bfdc:	46bd      	mov	sp, r7
 801bfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bfe2:	4770      	bx	lr

0801bfe4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801bfe4:	b580      	push	{r7, lr}
 801bfe6:	b084      	sub	sp, #16
 801bfe8:	af00      	add	r7, sp, #0
 801bfea:	6078      	str	r0, [r7, #4]
 801bfec:	460b      	mov	r3, r1
 801bfee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801bff0:	2300      	movs	r3, #0
 801bff2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801bff4:	2300      	movs	r3, #0
 801bff6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801bff8:	687b      	ldr	r3, [r7, #4]
 801bffa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801bffe:	78fa      	ldrb	r2, [r7, #3]
 801c000:	4611      	mov	r1, r2
 801c002:	4618      	mov	r0, r3
 801c004:	f7e8 f89a 	bl	800413c <HAL_PCD_SetAddress>
 801c008:	4603      	mov	r3, r0
 801c00a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c00c:	7bfb      	ldrb	r3, [r7, #15]
 801c00e:	4618      	mov	r0, r3
 801c010:	f000 f874 	bl	801c0fc <USBD_Get_USB_Status>
 801c014:	4603      	mov	r3, r0
 801c016:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801c018:	7bbb      	ldrb	r3, [r7, #14]
}
 801c01a:	4618      	mov	r0, r3
 801c01c:	3710      	adds	r7, #16
 801c01e:	46bd      	mov	sp, r7
 801c020:	bd80      	pop	{r7, pc}

0801c022 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801c022:	b580      	push	{r7, lr}
 801c024:	b086      	sub	sp, #24
 801c026:	af00      	add	r7, sp, #0
 801c028:	60f8      	str	r0, [r7, #12]
 801c02a:	607a      	str	r2, [r7, #4]
 801c02c:	603b      	str	r3, [r7, #0]
 801c02e:	460b      	mov	r3, r1
 801c030:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c032:	2300      	movs	r3, #0
 801c034:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c036:	2300      	movs	r3, #0
 801c038:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801c03a:	68fb      	ldr	r3, [r7, #12]
 801c03c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801c040:	7af9      	ldrb	r1, [r7, #11]
 801c042:	683b      	ldr	r3, [r7, #0]
 801c044:	687a      	ldr	r2, [r7, #4]
 801c046:	f7e8 f9b3 	bl	80043b0 <HAL_PCD_EP_Transmit>
 801c04a:	4603      	mov	r3, r0
 801c04c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c04e:	7dfb      	ldrb	r3, [r7, #23]
 801c050:	4618      	mov	r0, r3
 801c052:	f000 f853 	bl	801c0fc <USBD_Get_USB_Status>
 801c056:	4603      	mov	r3, r0
 801c058:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801c05a:	7dbb      	ldrb	r3, [r7, #22]
}
 801c05c:	4618      	mov	r0, r3
 801c05e:	3718      	adds	r7, #24
 801c060:	46bd      	mov	sp, r7
 801c062:	bd80      	pop	{r7, pc}

0801c064 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801c064:	b580      	push	{r7, lr}
 801c066:	b086      	sub	sp, #24
 801c068:	af00      	add	r7, sp, #0
 801c06a:	60f8      	str	r0, [r7, #12]
 801c06c:	607a      	str	r2, [r7, #4]
 801c06e:	603b      	str	r3, [r7, #0]
 801c070:	460b      	mov	r3, r1
 801c072:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c074:	2300      	movs	r3, #0
 801c076:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c078:	2300      	movs	r3, #0
 801c07a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801c07c:	68fb      	ldr	r3, [r7, #12]
 801c07e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801c082:	7af9      	ldrb	r1, [r7, #11]
 801c084:	683b      	ldr	r3, [r7, #0]
 801c086:	687a      	ldr	r2, [r7, #4]
 801c088:	f7e8 f92f 	bl	80042ea <HAL_PCD_EP_Receive>
 801c08c:	4603      	mov	r3, r0
 801c08e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c090:	7dfb      	ldrb	r3, [r7, #23]
 801c092:	4618      	mov	r0, r3
 801c094:	f000 f832 	bl	801c0fc <USBD_Get_USB_Status>
 801c098:	4603      	mov	r3, r0
 801c09a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801c09c:	7dbb      	ldrb	r3, [r7, #22]
}
 801c09e:	4618      	mov	r0, r3
 801c0a0:	3718      	adds	r7, #24
 801c0a2:	46bd      	mov	sp, r7
 801c0a4:	bd80      	pop	{r7, pc}

0801c0a6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801c0a6:	b580      	push	{r7, lr}
 801c0a8:	b082      	sub	sp, #8
 801c0aa:	af00      	add	r7, sp, #0
 801c0ac:	6078      	str	r0, [r7, #4]
 801c0ae:	460b      	mov	r3, r1
 801c0b0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801c0b2:	687b      	ldr	r3, [r7, #4]
 801c0b4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801c0b8:	78fa      	ldrb	r2, [r7, #3]
 801c0ba:	4611      	mov	r1, r2
 801c0bc:	4618      	mov	r0, r3
 801c0be:	f7e8 f95f 	bl	8004380 <HAL_PCD_EP_GetRxCount>
 801c0c2:	4603      	mov	r3, r0
}
 801c0c4:	4618      	mov	r0, r3
 801c0c6:	3708      	adds	r7, #8
 801c0c8:	46bd      	mov	sp, r7
 801c0ca:	bd80      	pop	{r7, pc}

0801c0cc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801c0cc:	b480      	push	{r7}
 801c0ce:	b083      	sub	sp, #12
 801c0d0:	af00      	add	r7, sp, #0
 801c0d2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801c0d4:	4b03      	ldr	r3, [pc, #12]	; (801c0e4 <USBD_static_malloc+0x18>)
}
 801c0d6:	4618      	mov	r0, r3
 801c0d8:	370c      	adds	r7, #12
 801c0da:	46bd      	mov	sp, r7
 801c0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0e0:	4770      	bx	lr
 801c0e2:	bf00      	nop
 801c0e4:	2000483c 	.word	0x2000483c

0801c0e8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801c0e8:	b480      	push	{r7}
 801c0ea:	b083      	sub	sp, #12
 801c0ec:	af00      	add	r7, sp, #0
 801c0ee:	6078      	str	r0, [r7, #4]

}
 801c0f0:	bf00      	nop
 801c0f2:	370c      	adds	r7, #12
 801c0f4:	46bd      	mov	sp, r7
 801c0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0fa:	4770      	bx	lr

0801c0fc <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801c0fc:	b480      	push	{r7}
 801c0fe:	b085      	sub	sp, #20
 801c100:	af00      	add	r7, sp, #0
 801c102:	4603      	mov	r3, r0
 801c104:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c106:	2300      	movs	r3, #0
 801c108:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801c10a:	79fb      	ldrb	r3, [r7, #7]
 801c10c:	2b03      	cmp	r3, #3
 801c10e:	d817      	bhi.n	801c140 <USBD_Get_USB_Status+0x44>
 801c110:	a201      	add	r2, pc, #4	; (adr r2, 801c118 <USBD_Get_USB_Status+0x1c>)
 801c112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c116:	bf00      	nop
 801c118:	0801c129 	.word	0x0801c129
 801c11c:	0801c12f 	.word	0x0801c12f
 801c120:	0801c135 	.word	0x0801c135
 801c124:	0801c13b 	.word	0x0801c13b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801c128:	2300      	movs	r3, #0
 801c12a:	73fb      	strb	r3, [r7, #15]
    break;
 801c12c:	e00b      	b.n	801c146 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801c12e:	2303      	movs	r3, #3
 801c130:	73fb      	strb	r3, [r7, #15]
    break;
 801c132:	e008      	b.n	801c146 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801c134:	2301      	movs	r3, #1
 801c136:	73fb      	strb	r3, [r7, #15]
    break;
 801c138:	e005      	b.n	801c146 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801c13a:	2303      	movs	r3, #3
 801c13c:	73fb      	strb	r3, [r7, #15]
    break;
 801c13e:	e002      	b.n	801c146 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801c140:	2303      	movs	r3, #3
 801c142:	73fb      	strb	r3, [r7, #15]
    break;
 801c144:	bf00      	nop
  }
  return usb_status;
 801c146:	7bfb      	ldrb	r3, [r7, #15]
}
 801c148:	4618      	mov	r0, r3
 801c14a:	3714      	adds	r7, #20
 801c14c:	46bd      	mov	sp, r7
 801c14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c152:	4770      	bx	lr

0801c154 <__libc_init_array>:
 801c154:	b570      	push	{r4, r5, r6, lr}
 801c156:	4d0d      	ldr	r5, [pc, #52]	; (801c18c <__libc_init_array+0x38>)
 801c158:	4c0d      	ldr	r4, [pc, #52]	; (801c190 <__libc_init_array+0x3c>)
 801c15a:	1b64      	subs	r4, r4, r5
 801c15c:	10a4      	asrs	r4, r4, #2
 801c15e:	2600      	movs	r6, #0
 801c160:	42a6      	cmp	r6, r4
 801c162:	d109      	bne.n	801c178 <__libc_init_array+0x24>
 801c164:	4d0b      	ldr	r5, [pc, #44]	; (801c194 <__libc_init_array+0x40>)
 801c166:	4c0c      	ldr	r4, [pc, #48]	; (801c198 <__libc_init_array+0x44>)
 801c168:	f002 faa6 	bl	801e6b8 <_init>
 801c16c:	1b64      	subs	r4, r4, r5
 801c16e:	10a4      	asrs	r4, r4, #2
 801c170:	2600      	movs	r6, #0
 801c172:	42a6      	cmp	r6, r4
 801c174:	d105      	bne.n	801c182 <__libc_init_array+0x2e>
 801c176:	bd70      	pop	{r4, r5, r6, pc}
 801c178:	f855 3b04 	ldr.w	r3, [r5], #4
 801c17c:	4798      	blx	r3
 801c17e:	3601      	adds	r6, #1
 801c180:	e7ee      	b.n	801c160 <__libc_init_array+0xc>
 801c182:	f855 3b04 	ldr.w	r3, [r5], #4
 801c186:	4798      	blx	r3
 801c188:	3601      	adds	r6, #1
 801c18a:	e7f2      	b.n	801c172 <__libc_init_array+0x1e>
 801c18c:	080233d8 	.word	0x080233d8
 801c190:	080233d8 	.word	0x080233d8
 801c194:	080233d8 	.word	0x080233d8
 801c198:	080233dc 	.word	0x080233dc

0801c19c <memcmp>:
 801c19c:	b530      	push	{r4, r5, lr}
 801c19e:	3901      	subs	r1, #1
 801c1a0:	2400      	movs	r4, #0
 801c1a2:	42a2      	cmp	r2, r4
 801c1a4:	d101      	bne.n	801c1aa <memcmp+0xe>
 801c1a6:	2000      	movs	r0, #0
 801c1a8:	e005      	b.n	801c1b6 <memcmp+0x1a>
 801c1aa:	5d03      	ldrb	r3, [r0, r4]
 801c1ac:	3401      	adds	r4, #1
 801c1ae:	5d0d      	ldrb	r5, [r1, r4]
 801c1b0:	42ab      	cmp	r3, r5
 801c1b2:	d0f6      	beq.n	801c1a2 <memcmp+0x6>
 801c1b4:	1b58      	subs	r0, r3, r5
 801c1b6:	bd30      	pop	{r4, r5, pc}

0801c1b8 <memcpy>:
 801c1b8:	440a      	add	r2, r1
 801c1ba:	4291      	cmp	r1, r2
 801c1bc:	f100 33ff 	add.w	r3, r0, #4294967295
 801c1c0:	d100      	bne.n	801c1c4 <memcpy+0xc>
 801c1c2:	4770      	bx	lr
 801c1c4:	b510      	push	{r4, lr}
 801c1c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c1ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c1ce:	4291      	cmp	r1, r2
 801c1d0:	d1f9      	bne.n	801c1c6 <memcpy+0xe>
 801c1d2:	bd10      	pop	{r4, pc}

0801c1d4 <memset>:
 801c1d4:	4402      	add	r2, r0
 801c1d6:	4603      	mov	r3, r0
 801c1d8:	4293      	cmp	r3, r2
 801c1da:	d100      	bne.n	801c1de <memset+0xa>
 801c1dc:	4770      	bx	lr
 801c1de:	f803 1b01 	strb.w	r1, [r3], #1
 801c1e2:	e7f9      	b.n	801c1d8 <memset+0x4>

0801c1e4 <validate_structure>:
 801c1e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c1e6:	6801      	ldr	r1, [r0, #0]
 801c1e8:	293b      	cmp	r1, #59	; 0x3b
 801c1ea:	4604      	mov	r4, r0
 801c1ec:	d911      	bls.n	801c212 <validate_structure+0x2e>
 801c1ee:	223c      	movs	r2, #60	; 0x3c
 801c1f0:	4668      	mov	r0, sp
 801c1f2:	f000 fdc7 	bl	801cd84 <div>
 801c1f6:	9a01      	ldr	r2, [sp, #4]
 801c1f8:	6863      	ldr	r3, [r4, #4]
 801c1fa:	9900      	ldr	r1, [sp, #0]
 801c1fc:	2a00      	cmp	r2, #0
 801c1fe:	440b      	add	r3, r1
 801c200:	6063      	str	r3, [r4, #4]
 801c202:	bfbb      	ittet	lt
 801c204:	323c      	addlt	r2, #60	; 0x3c
 801c206:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801c20a:	6022      	strge	r2, [r4, #0]
 801c20c:	6022      	strlt	r2, [r4, #0]
 801c20e:	bfb8      	it	lt
 801c210:	6063      	strlt	r3, [r4, #4]
 801c212:	6861      	ldr	r1, [r4, #4]
 801c214:	293b      	cmp	r1, #59	; 0x3b
 801c216:	d911      	bls.n	801c23c <validate_structure+0x58>
 801c218:	223c      	movs	r2, #60	; 0x3c
 801c21a:	4668      	mov	r0, sp
 801c21c:	f000 fdb2 	bl	801cd84 <div>
 801c220:	9a01      	ldr	r2, [sp, #4]
 801c222:	68a3      	ldr	r3, [r4, #8]
 801c224:	9900      	ldr	r1, [sp, #0]
 801c226:	2a00      	cmp	r2, #0
 801c228:	440b      	add	r3, r1
 801c22a:	60a3      	str	r3, [r4, #8]
 801c22c:	bfbb      	ittet	lt
 801c22e:	323c      	addlt	r2, #60	; 0x3c
 801c230:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801c234:	6062      	strge	r2, [r4, #4]
 801c236:	6062      	strlt	r2, [r4, #4]
 801c238:	bfb8      	it	lt
 801c23a:	60a3      	strlt	r3, [r4, #8]
 801c23c:	68a1      	ldr	r1, [r4, #8]
 801c23e:	2917      	cmp	r1, #23
 801c240:	d911      	bls.n	801c266 <validate_structure+0x82>
 801c242:	2218      	movs	r2, #24
 801c244:	4668      	mov	r0, sp
 801c246:	f000 fd9d 	bl	801cd84 <div>
 801c24a:	9a01      	ldr	r2, [sp, #4]
 801c24c:	68e3      	ldr	r3, [r4, #12]
 801c24e:	9900      	ldr	r1, [sp, #0]
 801c250:	2a00      	cmp	r2, #0
 801c252:	440b      	add	r3, r1
 801c254:	60e3      	str	r3, [r4, #12]
 801c256:	bfbb      	ittet	lt
 801c258:	3218      	addlt	r2, #24
 801c25a:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801c25e:	60a2      	strge	r2, [r4, #8]
 801c260:	60a2      	strlt	r2, [r4, #8]
 801c262:	bfb8      	it	lt
 801c264:	60e3      	strlt	r3, [r4, #12]
 801c266:	6921      	ldr	r1, [r4, #16]
 801c268:	290b      	cmp	r1, #11
 801c26a:	d911      	bls.n	801c290 <validate_structure+0xac>
 801c26c:	220c      	movs	r2, #12
 801c26e:	4668      	mov	r0, sp
 801c270:	f000 fd88 	bl	801cd84 <div>
 801c274:	9a01      	ldr	r2, [sp, #4]
 801c276:	6963      	ldr	r3, [r4, #20]
 801c278:	9900      	ldr	r1, [sp, #0]
 801c27a:	2a00      	cmp	r2, #0
 801c27c:	440b      	add	r3, r1
 801c27e:	6163      	str	r3, [r4, #20]
 801c280:	bfbb      	ittet	lt
 801c282:	320c      	addlt	r2, #12
 801c284:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801c288:	6122      	strge	r2, [r4, #16]
 801c28a:	6122      	strlt	r2, [r4, #16]
 801c28c:	bfb8      	it	lt
 801c28e:	6163      	strlt	r3, [r4, #20]
 801c290:	6963      	ldr	r3, [r4, #20]
 801c292:	0799      	lsls	r1, r3, #30
 801c294:	d120      	bne.n	801c2d8 <validate_structure+0xf4>
 801c296:	2164      	movs	r1, #100	; 0x64
 801c298:	fb93 f2f1 	sdiv	r2, r3, r1
 801c29c:	fb01 3212 	mls	r2, r1, r2, r3
 801c2a0:	b9e2      	cbnz	r2, 801c2dc <validate_structure+0xf8>
 801c2a2:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 801c2a6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801c2aa:	fb93 f2f1 	sdiv	r2, r3, r1
 801c2ae:	fb01 3312 	mls	r3, r1, r2, r3
 801c2b2:	2b00      	cmp	r3, #0
 801c2b4:	bf14      	ite	ne
 801c2b6:	231c      	movne	r3, #28
 801c2b8:	231d      	moveq	r3, #29
 801c2ba:	68e2      	ldr	r2, [r4, #12]
 801c2bc:	2a00      	cmp	r2, #0
 801c2be:	dc0f      	bgt.n	801c2e0 <validate_structure+0xfc>
 801c2c0:	4f33      	ldr	r7, [pc, #204]	; (801c390 <validate_structure+0x1ac>)
 801c2c2:	260b      	movs	r6, #11
 801c2c4:	2064      	movs	r0, #100	; 0x64
 801c2c6:	f44f 75c8 	mov.w	r5, #400	; 0x190
 801c2ca:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 801c2ce:	f1bc 0f00 	cmp.w	ip, #0
 801c2d2:	dd31      	ble.n	801c338 <validate_structure+0x154>
 801c2d4:	b003      	add	sp, #12
 801c2d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c2d8:	231c      	movs	r3, #28
 801c2da:	e7ee      	b.n	801c2ba <validate_structure+0xd6>
 801c2dc:	231d      	movs	r3, #29
 801c2de:	e7ec      	b.n	801c2ba <validate_structure+0xd6>
 801c2e0:	4f2b      	ldr	r7, [pc, #172]	; (801c390 <validate_structure+0x1ac>)
 801c2e2:	f04f 0c00 	mov.w	ip, #0
 801c2e6:	2564      	movs	r5, #100	; 0x64
 801c2e8:	f44f 76c8 	mov.w	r6, #400	; 0x190
 801c2ec:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 801c2f0:	2a01      	cmp	r2, #1
 801c2f2:	bf14      	ite	ne
 801c2f4:	f857 0022 	ldrne.w	r0, [r7, r2, lsl #2]
 801c2f8:	4618      	moveq	r0, r3
 801c2fa:	4281      	cmp	r1, r0
 801c2fc:	ddea      	ble.n	801c2d4 <validate_structure+0xf0>
 801c2fe:	3201      	adds	r2, #1
 801c300:	1a09      	subs	r1, r1, r0
 801c302:	2a0c      	cmp	r2, #12
 801c304:	60e1      	str	r1, [r4, #12]
 801c306:	6122      	str	r2, [r4, #16]
 801c308:	d1f0      	bne.n	801c2ec <validate_structure+0x108>
 801c30a:	6963      	ldr	r3, [r4, #20]
 801c30c:	1c5a      	adds	r2, r3, #1
 801c30e:	0791      	lsls	r1, r2, #30
 801c310:	e9c4 c204 	strd	ip, r2, [r4, #16]
 801c314:	d137      	bne.n	801c386 <validate_structure+0x1a2>
 801c316:	fb92 f1f5 	sdiv	r1, r2, r5
 801c31a:	fb05 2211 	mls	r2, r5, r1, r2
 801c31e:	2a00      	cmp	r2, #0
 801c320:	d133      	bne.n	801c38a <validate_structure+0x1a6>
 801c322:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 801c326:	fb93 f2f6 	sdiv	r2, r3, r6
 801c32a:	fb06 3312 	mls	r3, r6, r2, r3
 801c32e:	2b00      	cmp	r3, #0
 801c330:	bf14      	ite	ne
 801c332:	231c      	movne	r3, #28
 801c334:	231d      	moveq	r3, #29
 801c336:	e7d9      	b.n	801c2ec <validate_structure+0x108>
 801c338:	6921      	ldr	r1, [r4, #16]
 801c33a:	3901      	subs	r1, #1
 801c33c:	6121      	str	r1, [r4, #16]
 801c33e:	3101      	adds	r1, #1
 801c340:	d114      	bne.n	801c36c <validate_structure+0x188>
 801c342:	6963      	ldr	r3, [r4, #20]
 801c344:	1e59      	subs	r1, r3, #1
 801c346:	078a      	lsls	r2, r1, #30
 801c348:	e9c4 6104 	strd	r6, r1, [r4, #16]
 801c34c:	d117      	bne.n	801c37e <validate_structure+0x19a>
 801c34e:	fb91 f2f0 	sdiv	r2, r1, r0
 801c352:	fb00 1112 	mls	r1, r0, r2, r1
 801c356:	b9a1      	cbnz	r1, 801c382 <validate_structure+0x19e>
 801c358:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 801c35c:	fb93 f2f5 	sdiv	r2, r3, r5
 801c360:	fb05 3312 	mls	r3, r5, r2, r3
 801c364:	2b00      	cmp	r3, #0
 801c366:	bf14      	ite	ne
 801c368:	231c      	movne	r3, #28
 801c36a:	231d      	moveq	r3, #29
 801c36c:	6922      	ldr	r2, [r4, #16]
 801c36e:	2a01      	cmp	r2, #1
 801c370:	bf14      	ite	ne
 801c372:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 801c376:	461a      	moveq	r2, r3
 801c378:	4462      	add	r2, ip
 801c37a:	60e2      	str	r2, [r4, #12]
 801c37c:	e7a5      	b.n	801c2ca <validate_structure+0xe6>
 801c37e:	231c      	movs	r3, #28
 801c380:	e7f4      	b.n	801c36c <validate_structure+0x188>
 801c382:	231d      	movs	r3, #29
 801c384:	e7f2      	b.n	801c36c <validate_structure+0x188>
 801c386:	231c      	movs	r3, #28
 801c388:	e7b0      	b.n	801c2ec <validate_structure+0x108>
 801c38a:	231d      	movs	r3, #29
 801c38c:	e7ae      	b.n	801c2ec <validate_structure+0x108>
 801c38e:	bf00      	nop
 801c390:	08023170 	.word	0x08023170

0801c394 <mktime>:
 801c394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c398:	b08b      	sub	sp, #44	; 0x2c
 801c39a:	4605      	mov	r5, r0
 801c39c:	f000 fe56 	bl	801d04c <__gettzinfo>
 801c3a0:	4607      	mov	r7, r0
 801c3a2:	4628      	mov	r0, r5
 801c3a4:	f7ff ff1e 	bl	801c1e4 <validate_structure>
 801c3a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 801c3ac:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
 801c3b0:	68a8      	ldr	r0, [r5, #8]
 801c3b2:	696e      	ldr	r6, [r5, #20]
 801c3b4:	fb0a 2303 	mla	r3, sl, r3, r2
 801c3b8:	f44f 6a61 	mov.w	sl, #3600	; 0xe10
 801c3bc:	fb0a 3a00 	mla	sl, sl, r0, r3
 801c3c0:	e9d5 4303 	ldrd	r4, r3, [r5, #12]
 801c3c4:	4ac3      	ldr	r2, [pc, #780]	; (801c6d4 <mktime+0x340>)
 801c3c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801c3ca:	3c01      	subs	r4, #1
 801c3cc:	2b01      	cmp	r3, #1
 801c3ce:	4414      	add	r4, r2
 801c3d0:	dd11      	ble.n	801c3f6 <mktime+0x62>
 801c3d2:	07b1      	lsls	r1, r6, #30
 801c3d4:	d10f      	bne.n	801c3f6 <mktime+0x62>
 801c3d6:	2264      	movs	r2, #100	; 0x64
 801c3d8:	fb96 f3f2 	sdiv	r3, r6, r2
 801c3dc:	fb02 6313 	mls	r3, r2, r3, r6
 801c3e0:	b943      	cbnz	r3, 801c3f4 <mktime+0x60>
 801c3e2:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 801c3e6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801c3ea:	fb91 f3f2 	sdiv	r3, r1, r2
 801c3ee:	fb02 1313 	mls	r3, r2, r3, r1
 801c3f2:	b903      	cbnz	r3, 801c3f6 <mktime+0x62>
 801c3f4:	3401      	adds	r4, #1
 801c3f6:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 801c3fa:	3310      	adds	r3, #16
 801c3fc:	f644 6220 	movw	r2, #20000	; 0x4e20
 801c400:	4293      	cmp	r3, r2
 801c402:	61ec      	str	r4, [r5, #28]
 801c404:	f200 8161 	bhi.w	801c6ca <mktime+0x336>
 801c408:	2e46      	cmp	r6, #70	; 0x46
 801c40a:	dd77      	ble.n	801c4fc <mktime+0x168>
 801c40c:	2346      	movs	r3, #70	; 0x46
 801c40e:	f240 1e6d 	movw	lr, #365	; 0x16d
 801c412:	2164      	movs	r1, #100	; 0x64
 801c414:	f44f 70c8 	mov.w	r0, #400	; 0x190
 801c418:	079a      	lsls	r2, r3, #30
 801c41a:	d169      	bne.n	801c4f0 <mktime+0x15c>
 801c41c:	fb93 f2f1 	sdiv	r2, r3, r1
 801c420:	fb01 3212 	mls	r2, r1, r2, r3
 801c424:	2a00      	cmp	r2, #0
 801c426:	d166      	bne.n	801c4f6 <mktime+0x162>
 801c428:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 801c42c:	fb9c f2f0 	sdiv	r2, ip, r0
 801c430:	fb00 c212 	mls	r2, r0, r2, ip
 801c434:	2a00      	cmp	r2, #0
 801c436:	bf14      	ite	ne
 801c438:	4672      	movne	r2, lr
 801c43a:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 801c43e:	3301      	adds	r3, #1
 801c440:	429e      	cmp	r6, r3
 801c442:	4414      	add	r4, r2
 801c444:	d1e8      	bne.n	801c418 <mktime+0x84>
 801c446:	4ba4      	ldr	r3, [pc, #656]	; (801c6d8 <mktime+0x344>)
 801c448:	ea4f 7bea 	mov.w	fp, sl, asr #31
 801c44c:	fbc3 ab04 	smlal	sl, fp, r3, r4
 801c450:	f000 faec 	bl	801ca2c <__tz_lock>
 801c454:	f000 faf6 	bl	801ca44 <_tzset_unlocked>
 801c458:	4ba0      	ldr	r3, [pc, #640]	; (801c6dc <mktime+0x348>)
 801c45a:	f8d3 9000 	ldr.w	r9, [r3]
 801c45e:	f1b9 0f00 	cmp.w	r9, #0
 801c462:	d03f      	beq.n	801c4e4 <mktime+0x150>
 801c464:	f8d5 9020 	ldr.w	r9, [r5, #32]
 801c468:	6968      	ldr	r0, [r5, #20]
 801c46a:	687b      	ldr	r3, [r7, #4]
 801c46c:	f1b9 0f01 	cmp.w	r9, #1
 801c470:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801c474:	46c8      	mov	r8, r9
 801c476:	bfa8      	it	ge
 801c478:	f04f 0801 	movge.w	r8, #1
 801c47c:	4283      	cmp	r3, r0
 801c47e:	d17f      	bne.n	801c580 <mktime+0x1ec>
 801c480:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c482:	4619      	mov	r1, r3
 801c484:	17da      	asrs	r2, r3, #31
 801c486:	e9cd 1200 	strd	r1, r2, [sp]
 801c48a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 801c48e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801c492:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c496:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c498:	1a80      	subs	r0, r0, r2
 801c49a:	eb61 71e2 	sbc.w	r1, r1, r2, asr #31
 801c49e:	4582      	cmp	sl, r0
 801c4a0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801c4a4:	eb7b 0101 	sbcs.w	r1, fp, r1
 801c4a8:	da71      	bge.n	801c58e <mktime+0x1fa>
 801c4aa:	9800      	ldr	r0, [sp, #0]
 801c4ac:	6a39      	ldr	r1, [r7, #32]
 801c4ae:	1a09      	subs	r1, r1, r0
 801c4b0:	9104      	str	r1, [sp, #16]
 801c4b2:	9801      	ldr	r0, [sp, #4]
 801c4b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801c4b6:	eb61 0100 	sbc.w	r1, r1, r0
 801c4ba:	9105      	str	r1, [sp, #20]
 801c4bc:	6839      	ldr	r1, [r7, #0]
 801c4be:	2900      	cmp	r1, #0
 801c4c0:	d075      	beq.n	801c5ae <mktime+0x21a>
 801c4c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801c4c6:	4582      	cmp	sl, r0
 801c4c8:	eb7b 0101 	sbcs.w	r1, fp, r1
 801c4cc:	db05      	blt.n	801c4da <mktime+0x146>
 801c4ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801c4d2:	4582      	cmp	sl, r0
 801c4d4:	eb7b 0101 	sbcs.w	r1, fp, r1
 801c4d8:	db6f      	blt.n	801c5ba <mktime+0x226>
 801c4da:	f1b9 0f00 	cmp.w	r9, #0
 801c4de:	f04f 0900 	mov.w	r9, #0
 801c4e2:	da6f      	bge.n	801c5c4 <mktime+0x230>
 801c4e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c4e6:	eb1a 0a03 	adds.w	sl, sl, r3
 801c4ea:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 801c4ee:	e0ae      	b.n	801c64e <mktime+0x2ba>
 801c4f0:	f240 126d 	movw	r2, #365	; 0x16d
 801c4f4:	e7a3      	b.n	801c43e <mktime+0xaa>
 801c4f6:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 801c4fa:	e7a0      	b.n	801c43e <mktime+0xaa>
 801c4fc:	d0a3      	beq.n	801c446 <mktime+0xb2>
 801c4fe:	2345      	movs	r3, #69	; 0x45
 801c500:	f240 1e6d 	movw	lr, #365	; 0x16d
 801c504:	2164      	movs	r1, #100	; 0x64
 801c506:	f44f 70c8 	mov.w	r0, #400	; 0x190
 801c50a:	e012      	b.n	801c532 <mktime+0x19e>
 801c50c:	bb62      	cbnz	r2, 801c568 <mktime+0x1d4>
 801c50e:	fb93 f2f1 	sdiv	r2, r3, r1
 801c512:	fb01 3212 	mls	r2, r1, r2, r3
 801c516:	bb52      	cbnz	r2, 801c56e <mktime+0x1da>
 801c518:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 801c51c:	fb9c f2f0 	sdiv	r2, ip, r0
 801c520:	fb00 c212 	mls	r2, r0, r2, ip
 801c524:	2a00      	cmp	r2, #0
 801c526:	bf14      	ite	ne
 801c528:	4672      	movne	r2, lr
 801c52a:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 801c52e:	1aa4      	subs	r4, r4, r2
 801c530:	3b01      	subs	r3, #1
 801c532:	429e      	cmp	r6, r3
 801c534:	f003 0203 	and.w	r2, r3, #3
 801c538:	dbe8      	blt.n	801c50c <mktime+0x178>
 801c53a:	b9da      	cbnz	r2, 801c574 <mktime+0x1e0>
 801c53c:	2264      	movs	r2, #100	; 0x64
 801c53e:	fb96 f3f2 	sdiv	r3, r6, r2
 801c542:	fb02 6313 	mls	r3, r2, r3, r6
 801c546:	b9c3      	cbnz	r3, 801c57a <mktime+0x1e6>
 801c548:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 801c54c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801c550:	fb91 f3f2 	sdiv	r3, r1, r2
 801c554:	fb02 1313 	mls	r3, r2, r3, r1
 801c558:	2b00      	cmp	r3, #0
 801c55a:	f240 136d 	movw	r3, #365	; 0x16d
 801c55e:	bf08      	it	eq
 801c560:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 801c564:	1ae4      	subs	r4, r4, r3
 801c566:	e76e      	b.n	801c446 <mktime+0xb2>
 801c568:	f240 126d 	movw	r2, #365	; 0x16d
 801c56c:	e7df      	b.n	801c52e <mktime+0x19a>
 801c56e:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 801c572:	e7dc      	b.n	801c52e <mktime+0x19a>
 801c574:	f240 136d 	movw	r3, #365	; 0x16d
 801c578:	e7f4      	b.n	801c564 <mktime+0x1d0>
 801c57a:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 801c57e:	e7f1      	b.n	801c564 <mktime+0x1d0>
 801c580:	f000 f9ac 	bl	801c8dc <__tzcalc_limits>
 801c584:	2800      	cmp	r0, #0
 801c586:	f47f af7b 	bne.w	801c480 <mktime+0xec>
 801c58a:	46c1      	mov	r9, r8
 801c58c:	e054      	b.n	801c638 <mktime+0x2a4>
 801c58e:	9800      	ldr	r0, [sp, #0]
 801c590:	9902      	ldr	r1, [sp, #8]
 801c592:	1a09      	subs	r1, r1, r0
 801c594:	9108      	str	r1, [sp, #32]
 801c596:	9801      	ldr	r0, [sp, #4]
 801c598:	9903      	ldr	r1, [sp, #12]
 801c59a:	eb61 0100 	sbc.w	r1, r1, r0
 801c59e:	9109      	str	r1, [sp, #36]	; 0x24
 801c5a0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801c5a4:	4582      	cmp	sl, r0
 801c5a6:	eb7b 0101 	sbcs.w	r1, fp, r1
 801c5aa:	dbee      	blt.n	801c58a <mktime+0x1f6>
 801c5ac:	e77d      	b.n	801c4aa <mktime+0x116>
 801c5ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801c5b2:	4582      	cmp	sl, r0
 801c5b4:	eb7b 0101 	sbcs.w	r1, fp, r1
 801c5b8:	db89      	blt.n	801c4ce <mktime+0x13a>
 801c5ba:	f1b9 0f00 	cmp.w	r9, #0
 801c5be:	db3f      	blt.n	801c640 <mktime+0x2ac>
 801c5c0:	f04f 0901 	mov.w	r9, #1
 801c5c4:	ea88 0809 	eor.w	r8, r8, r9
 801c5c8:	f1b8 0f01 	cmp.w	r8, #1
 801c5cc:	d134      	bne.n	801c638 <mktime+0x2a4>
 801c5ce:	f1b9 0f00 	cmp.w	r9, #0
 801c5d2:	d04f      	beq.n	801c674 <mktime+0x2e0>
 801c5d4:	1ad3      	subs	r3, r2, r3
 801c5d6:	682a      	ldr	r2, [r5, #0]
 801c5d8:	f8d5 800c 	ldr.w	r8, [r5, #12]
 801c5dc:	441a      	add	r2, r3
 801c5de:	eb1a 0a03 	adds.w	sl, sl, r3
 801c5e2:	602a      	str	r2, [r5, #0]
 801c5e4:	4628      	mov	r0, r5
 801c5e6:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 801c5ea:	f7ff fdfb 	bl	801c1e4 <validate_structure>
 801c5ee:	68ea      	ldr	r2, [r5, #12]
 801c5f0:	ebb2 0208 	subs.w	r2, r2, r8
 801c5f4:	d020      	beq.n	801c638 <mktime+0x2a4>
 801c5f6:	2a01      	cmp	r2, #1
 801c5f8:	dc3e      	bgt.n	801c678 <mktime+0x2e4>
 801c5fa:	1c90      	adds	r0, r2, #2
 801c5fc:	bfd8      	it	le
 801c5fe:	2201      	movle	r2, #1
 801c600:	69eb      	ldr	r3, [r5, #28]
 801c602:	18d3      	adds	r3, r2, r3
 801c604:	4414      	add	r4, r2
 801c606:	d540      	bpl.n	801c68a <mktime+0x2f6>
 801c608:	1e72      	subs	r2, r6, #1
 801c60a:	0791      	lsls	r1, r2, #30
 801c60c:	d137      	bne.n	801c67e <mktime+0x2ea>
 801c60e:	2164      	movs	r1, #100	; 0x64
 801c610:	fb92 f3f1 	sdiv	r3, r2, r1
 801c614:	fb01 2313 	mls	r3, r1, r3, r2
 801c618:	bba3      	cbnz	r3, 801c684 <mktime+0x2f0>
 801c61a:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 801c61e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801c622:	fb96 f3f2 	sdiv	r3, r6, r2
 801c626:	fb02 6613 	mls	r6, r2, r3, r6
 801c62a:	2e00      	cmp	r6, #0
 801c62c:	f240 136d 	movw	r3, #365	; 0x16d
 801c630:	bf18      	it	ne
 801c632:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 801c636:	61eb      	str	r3, [r5, #28]
 801c638:	f1b9 0f01 	cmp.w	r9, #1
 801c63c:	f47f af52 	bne.w	801c4e4 <mktime+0x150>
 801c640:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c642:	eb1a 0a03 	adds.w	sl, sl, r3
 801c646:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 801c64a:	f04f 0901 	mov.w	r9, #1
 801c64e:	f000 f9f3 	bl	801ca38 <__tz_unlock>
 801c652:	3404      	adds	r4, #4
 801c654:	2307      	movs	r3, #7
 801c656:	fb94 f3f3 	sdiv	r3, r4, r3
 801c65a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801c65e:	1ae4      	subs	r4, r4, r3
 801c660:	bf48      	it	mi
 801c662:	3407      	addmi	r4, #7
 801c664:	f8c5 9020 	str.w	r9, [r5, #32]
 801c668:	61ac      	str	r4, [r5, #24]
 801c66a:	4650      	mov	r0, sl
 801c66c:	4659      	mov	r1, fp
 801c66e:	b00b      	add	sp, #44	; 0x2c
 801c670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c674:	1a9b      	subs	r3, r3, r2
 801c676:	e7ae      	b.n	801c5d6 <mktime+0x242>
 801c678:	f04f 32ff 	mov.w	r2, #4294967295
 801c67c:	e7c0      	b.n	801c600 <mktime+0x26c>
 801c67e:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 801c682:	e7d8      	b.n	801c636 <mktime+0x2a2>
 801c684:	f240 136d 	movw	r3, #365	; 0x16d
 801c688:	e7d5      	b.n	801c636 <mktime+0x2a2>
 801c68a:	07b2      	lsls	r2, r6, #30
 801c68c:	d117      	bne.n	801c6be <mktime+0x32a>
 801c68e:	2164      	movs	r1, #100	; 0x64
 801c690:	fb96 f2f1 	sdiv	r2, r6, r1
 801c694:	fb01 6212 	mls	r2, r1, r2, r6
 801c698:	b9a2      	cbnz	r2, 801c6c4 <mktime+0x330>
 801c69a:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 801c69e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801c6a2:	fb96 f2f1 	sdiv	r2, r6, r1
 801c6a6:	fb01 6612 	mls	r6, r1, r2, r6
 801c6aa:	2e00      	cmp	r6, #0
 801c6ac:	f240 126d 	movw	r2, #365	; 0x16d
 801c6b0:	bf08      	it	eq
 801c6b2:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 801c6b6:	4293      	cmp	r3, r2
 801c6b8:	bfa8      	it	ge
 801c6ba:	1a9b      	subge	r3, r3, r2
 801c6bc:	e7bb      	b.n	801c636 <mktime+0x2a2>
 801c6be:	f240 126d 	movw	r2, #365	; 0x16d
 801c6c2:	e7f8      	b.n	801c6b6 <mktime+0x322>
 801c6c4:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 801c6c8:	e7f5      	b.n	801c6b6 <mktime+0x322>
 801c6ca:	f04f 3aff 	mov.w	sl, #4294967295
 801c6ce:	f04f 3bff 	mov.w	fp, #4294967295
 801c6d2:	e7ca      	b.n	801c66a <mktime+0x2d6>
 801c6d4:	080231a0 	.word	0x080231a0
 801c6d8:	00015180 	.word	0x00015180
 801c6dc:	20004a78 	.word	0x20004a78

0801c6e0 <iprintf>:
 801c6e0:	b40f      	push	{r0, r1, r2, r3}
 801c6e2:	4b0a      	ldr	r3, [pc, #40]	; (801c70c <iprintf+0x2c>)
 801c6e4:	b513      	push	{r0, r1, r4, lr}
 801c6e6:	681c      	ldr	r4, [r3, #0]
 801c6e8:	b124      	cbz	r4, 801c6f4 <iprintf+0x14>
 801c6ea:	69a3      	ldr	r3, [r4, #24]
 801c6ec:	b913      	cbnz	r3, 801c6f4 <iprintf+0x14>
 801c6ee:	4620      	mov	r0, r4
 801c6f0:	f000 fbba 	bl	801ce68 <__sinit>
 801c6f4:	ab05      	add	r3, sp, #20
 801c6f6:	9a04      	ldr	r2, [sp, #16]
 801c6f8:	68a1      	ldr	r1, [r4, #8]
 801c6fa:	9301      	str	r3, [sp, #4]
 801c6fc:	4620      	mov	r0, r4
 801c6fe:	f000 fd93 	bl	801d228 <_vfiprintf_r>
 801c702:	b002      	add	sp, #8
 801c704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c708:	b004      	add	sp, #16
 801c70a:	4770      	bx	lr
 801c70c:	200001a0 	.word	0x200001a0

0801c710 <rand>:
 801c710:	4b17      	ldr	r3, [pc, #92]	; (801c770 <rand+0x60>)
 801c712:	b510      	push	{r4, lr}
 801c714:	681c      	ldr	r4, [r3, #0]
 801c716:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801c718:	b9b3      	cbnz	r3, 801c748 <rand+0x38>
 801c71a:	2018      	movs	r0, #24
 801c71c:	f000 fca0 	bl	801d060 <malloc>
 801c720:	63a0      	str	r0, [r4, #56]	; 0x38
 801c722:	b928      	cbnz	r0, 801c730 <rand+0x20>
 801c724:	4602      	mov	r2, r0
 801c726:	4b13      	ldr	r3, [pc, #76]	; (801c774 <rand+0x64>)
 801c728:	4813      	ldr	r0, [pc, #76]	; (801c778 <rand+0x68>)
 801c72a:	214e      	movs	r1, #78	; 0x4e
 801c72c:	f000 fb0c 	bl	801cd48 <__assert_func>
 801c730:	4a12      	ldr	r2, [pc, #72]	; (801c77c <rand+0x6c>)
 801c732:	4b13      	ldr	r3, [pc, #76]	; (801c780 <rand+0x70>)
 801c734:	e9c0 2300 	strd	r2, r3, [r0]
 801c738:	4b12      	ldr	r3, [pc, #72]	; (801c784 <rand+0x74>)
 801c73a:	6083      	str	r3, [r0, #8]
 801c73c:	230b      	movs	r3, #11
 801c73e:	8183      	strh	r3, [r0, #12]
 801c740:	2201      	movs	r2, #1
 801c742:	2300      	movs	r3, #0
 801c744:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801c748:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801c74a:	480f      	ldr	r0, [pc, #60]	; (801c788 <rand+0x78>)
 801c74c:	690a      	ldr	r2, [r1, #16]
 801c74e:	694b      	ldr	r3, [r1, #20]
 801c750:	4c0e      	ldr	r4, [pc, #56]	; (801c78c <rand+0x7c>)
 801c752:	4350      	muls	r0, r2
 801c754:	fb04 0003 	mla	r0, r4, r3, r0
 801c758:	fba2 3404 	umull	r3, r4, r2, r4
 801c75c:	1c5a      	adds	r2, r3, #1
 801c75e:	4404      	add	r4, r0
 801c760:	f144 0000 	adc.w	r0, r4, #0
 801c764:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801c768:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801c76c:	bd10      	pop	{r4, pc}
 801c76e:	bf00      	nop
 801c770:	200001a0 	.word	0x200001a0
 801c774:	08023230 	.word	0x08023230
 801c778:	08023247 	.word	0x08023247
 801c77c:	abcd330e 	.word	0xabcd330e
 801c780:	e66d1234 	.word	0xe66d1234
 801c784:	0005deec 	.word	0x0005deec
 801c788:	5851f42d 	.word	0x5851f42d
 801c78c:	4c957f2d 	.word	0x4c957f2d

0801c790 <strchr>:
 801c790:	b2c9      	uxtb	r1, r1
 801c792:	4603      	mov	r3, r0
 801c794:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c798:	b11a      	cbz	r2, 801c7a2 <strchr+0x12>
 801c79a:	428a      	cmp	r2, r1
 801c79c:	d1f9      	bne.n	801c792 <strchr+0x2>
 801c79e:	4618      	mov	r0, r3
 801c7a0:	4770      	bx	lr
 801c7a2:	2900      	cmp	r1, #0
 801c7a4:	bf18      	it	ne
 801c7a6:	2300      	movne	r3, #0
 801c7a8:	e7f9      	b.n	801c79e <strchr+0xe>

0801c7aa <strncmp>:
 801c7aa:	b510      	push	{r4, lr}
 801c7ac:	b16a      	cbz	r2, 801c7ca <strncmp+0x20>
 801c7ae:	3901      	subs	r1, #1
 801c7b0:	1884      	adds	r4, r0, r2
 801c7b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 801c7b6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801c7ba:	4293      	cmp	r3, r2
 801c7bc:	d103      	bne.n	801c7c6 <strncmp+0x1c>
 801c7be:	42a0      	cmp	r0, r4
 801c7c0:	d001      	beq.n	801c7c6 <strncmp+0x1c>
 801c7c2:	2b00      	cmp	r3, #0
 801c7c4:	d1f5      	bne.n	801c7b2 <strncmp+0x8>
 801c7c6:	1a98      	subs	r0, r3, r2
 801c7c8:	bd10      	pop	{r4, pc}
 801c7ca:	4610      	mov	r0, r2
 801c7cc:	e7fc      	b.n	801c7c8 <strncmp+0x1e>
	...

0801c7d0 <_strtol_l.isra.0>:
 801c7d0:	2b01      	cmp	r3, #1
 801c7d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c7d6:	d001      	beq.n	801c7dc <_strtol_l.isra.0+0xc>
 801c7d8:	2b24      	cmp	r3, #36	; 0x24
 801c7da:	d906      	bls.n	801c7ea <_strtol_l.isra.0+0x1a>
 801c7dc:	f000 fae6 	bl	801cdac <__errno>
 801c7e0:	2316      	movs	r3, #22
 801c7e2:	6003      	str	r3, [r0, #0]
 801c7e4:	2000      	movs	r0, #0
 801c7e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c7ea:	4f3a      	ldr	r7, [pc, #232]	; (801c8d4 <_strtol_l.isra.0+0x104>)
 801c7ec:	468e      	mov	lr, r1
 801c7ee:	4676      	mov	r6, lr
 801c7f0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801c7f4:	5de5      	ldrb	r5, [r4, r7]
 801c7f6:	f015 0508 	ands.w	r5, r5, #8
 801c7fa:	d1f8      	bne.n	801c7ee <_strtol_l.isra.0+0x1e>
 801c7fc:	2c2d      	cmp	r4, #45	; 0x2d
 801c7fe:	d134      	bne.n	801c86a <_strtol_l.isra.0+0x9a>
 801c800:	f89e 4000 	ldrb.w	r4, [lr]
 801c804:	f04f 0801 	mov.w	r8, #1
 801c808:	f106 0e02 	add.w	lr, r6, #2
 801c80c:	2b00      	cmp	r3, #0
 801c80e:	d05c      	beq.n	801c8ca <_strtol_l.isra.0+0xfa>
 801c810:	2b10      	cmp	r3, #16
 801c812:	d10c      	bne.n	801c82e <_strtol_l.isra.0+0x5e>
 801c814:	2c30      	cmp	r4, #48	; 0x30
 801c816:	d10a      	bne.n	801c82e <_strtol_l.isra.0+0x5e>
 801c818:	f89e 4000 	ldrb.w	r4, [lr]
 801c81c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801c820:	2c58      	cmp	r4, #88	; 0x58
 801c822:	d14d      	bne.n	801c8c0 <_strtol_l.isra.0+0xf0>
 801c824:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801c828:	2310      	movs	r3, #16
 801c82a:	f10e 0e02 	add.w	lr, lr, #2
 801c82e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801c832:	f10c 3cff 	add.w	ip, ip, #4294967295
 801c836:	2600      	movs	r6, #0
 801c838:	fbbc f9f3 	udiv	r9, ip, r3
 801c83c:	4635      	mov	r5, r6
 801c83e:	fb03 ca19 	mls	sl, r3, r9, ip
 801c842:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801c846:	2f09      	cmp	r7, #9
 801c848:	d818      	bhi.n	801c87c <_strtol_l.isra.0+0xac>
 801c84a:	463c      	mov	r4, r7
 801c84c:	42a3      	cmp	r3, r4
 801c84e:	dd24      	ble.n	801c89a <_strtol_l.isra.0+0xca>
 801c850:	2e00      	cmp	r6, #0
 801c852:	db1f      	blt.n	801c894 <_strtol_l.isra.0+0xc4>
 801c854:	45a9      	cmp	r9, r5
 801c856:	d31d      	bcc.n	801c894 <_strtol_l.isra.0+0xc4>
 801c858:	d101      	bne.n	801c85e <_strtol_l.isra.0+0x8e>
 801c85a:	45a2      	cmp	sl, r4
 801c85c:	db1a      	blt.n	801c894 <_strtol_l.isra.0+0xc4>
 801c85e:	fb05 4503 	mla	r5, r5, r3, r4
 801c862:	2601      	movs	r6, #1
 801c864:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801c868:	e7eb      	b.n	801c842 <_strtol_l.isra.0+0x72>
 801c86a:	2c2b      	cmp	r4, #43	; 0x2b
 801c86c:	bf08      	it	eq
 801c86e:	f89e 4000 	ldrbeq.w	r4, [lr]
 801c872:	46a8      	mov	r8, r5
 801c874:	bf08      	it	eq
 801c876:	f106 0e02 	addeq.w	lr, r6, #2
 801c87a:	e7c7      	b.n	801c80c <_strtol_l.isra.0+0x3c>
 801c87c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801c880:	2f19      	cmp	r7, #25
 801c882:	d801      	bhi.n	801c888 <_strtol_l.isra.0+0xb8>
 801c884:	3c37      	subs	r4, #55	; 0x37
 801c886:	e7e1      	b.n	801c84c <_strtol_l.isra.0+0x7c>
 801c888:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801c88c:	2f19      	cmp	r7, #25
 801c88e:	d804      	bhi.n	801c89a <_strtol_l.isra.0+0xca>
 801c890:	3c57      	subs	r4, #87	; 0x57
 801c892:	e7db      	b.n	801c84c <_strtol_l.isra.0+0x7c>
 801c894:	f04f 36ff 	mov.w	r6, #4294967295
 801c898:	e7e4      	b.n	801c864 <_strtol_l.isra.0+0x94>
 801c89a:	2e00      	cmp	r6, #0
 801c89c:	da05      	bge.n	801c8aa <_strtol_l.isra.0+0xda>
 801c89e:	2322      	movs	r3, #34	; 0x22
 801c8a0:	6003      	str	r3, [r0, #0]
 801c8a2:	4665      	mov	r5, ip
 801c8a4:	b942      	cbnz	r2, 801c8b8 <_strtol_l.isra.0+0xe8>
 801c8a6:	4628      	mov	r0, r5
 801c8a8:	e79d      	b.n	801c7e6 <_strtol_l.isra.0+0x16>
 801c8aa:	f1b8 0f00 	cmp.w	r8, #0
 801c8ae:	d000      	beq.n	801c8b2 <_strtol_l.isra.0+0xe2>
 801c8b0:	426d      	negs	r5, r5
 801c8b2:	2a00      	cmp	r2, #0
 801c8b4:	d0f7      	beq.n	801c8a6 <_strtol_l.isra.0+0xd6>
 801c8b6:	b10e      	cbz	r6, 801c8bc <_strtol_l.isra.0+0xec>
 801c8b8:	f10e 31ff 	add.w	r1, lr, #4294967295
 801c8bc:	6011      	str	r1, [r2, #0]
 801c8be:	e7f2      	b.n	801c8a6 <_strtol_l.isra.0+0xd6>
 801c8c0:	2430      	movs	r4, #48	; 0x30
 801c8c2:	2b00      	cmp	r3, #0
 801c8c4:	d1b3      	bne.n	801c82e <_strtol_l.isra.0+0x5e>
 801c8c6:	2308      	movs	r3, #8
 801c8c8:	e7b1      	b.n	801c82e <_strtol_l.isra.0+0x5e>
 801c8ca:	2c30      	cmp	r4, #48	; 0x30
 801c8cc:	d0a4      	beq.n	801c818 <_strtol_l.isra.0+0x48>
 801c8ce:	230a      	movs	r3, #10
 801c8d0:	e7ad      	b.n	801c82e <_strtol_l.isra.0+0x5e>
 801c8d2:	bf00      	nop
 801c8d4:	08023069 	.word	0x08023069

0801c8d8 <_strtol_r>:
 801c8d8:	f7ff bf7a 	b.w	801c7d0 <_strtol_l.isra.0>

0801c8dc <__tzcalc_limits>:
 801c8dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c8e0:	4680      	mov	r8, r0
 801c8e2:	f000 fbb3 	bl	801d04c <__gettzinfo>
 801c8e6:	f240 73b1 	movw	r3, #1969	; 0x7b1
 801c8ea:	4598      	cmp	r8, r3
 801c8ec:	f340 8098 	ble.w	801ca20 <__tzcalc_limits+0x144>
 801c8f0:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 801c8f4:	4443      	add	r3, r8
 801c8f6:	109b      	asrs	r3, r3, #2
 801c8f8:	f240 126d 	movw	r2, #365	; 0x16d
 801c8fc:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 801c900:	fb02 3505 	mla	r5, r2, r5, r3
 801c904:	f06f 0263 	mvn.w	r2, #99	; 0x63
 801c908:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 801c90c:	fb93 f3f2 	sdiv	r3, r3, r2
 801c910:	441d      	add	r5, r3
 801c912:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801c916:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 801c91a:	fb98 f7f3 	sdiv	r7, r8, r3
 801c91e:	fb03 8717 	mls	r7, r3, r7, r8
 801c922:	4442      	add	r2, r8
 801c924:	fab7 fc87 	clz	ip, r7
 801c928:	fbb2 f2f3 	udiv	r2, r2, r3
 801c92c:	f008 0303 	and.w	r3, r8, #3
 801c930:	4415      	add	r5, r2
 801c932:	2264      	movs	r2, #100	; 0x64
 801c934:	f8c0 8004 	str.w	r8, [r0, #4]
 801c938:	fb98 f6f2 	sdiv	r6, r8, r2
 801c93c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801c940:	fb02 8616 	mls	r6, r2, r6, r8
 801c944:	4604      	mov	r4, r0
 801c946:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 801c94a:	9300      	str	r3, [sp, #0]
 801c94c:	f04f 0e07 	mov.w	lr, #7
 801c950:	7a22      	ldrb	r2, [r4, #8]
 801c952:	6963      	ldr	r3, [r4, #20]
 801c954:	2a4a      	cmp	r2, #74	; 0x4a
 801c956:	d128      	bne.n	801c9aa <__tzcalc_limits+0xce>
 801c958:	9900      	ldr	r1, [sp, #0]
 801c95a:	18ea      	adds	r2, r5, r3
 801c95c:	b901      	cbnz	r1, 801c960 <__tzcalc_limits+0x84>
 801c95e:	b906      	cbnz	r6, 801c962 <__tzcalc_limits+0x86>
 801c960:	bb0f      	cbnz	r7, 801c9a6 <__tzcalc_limits+0xca>
 801c962:	2b3b      	cmp	r3, #59	; 0x3b
 801c964:	bfd4      	ite	le
 801c966:	2300      	movle	r3, #0
 801c968:	2301      	movgt	r3, #1
 801c96a:	4413      	add	r3, r2
 801c96c:	1e5a      	subs	r2, r3, #1
 801c96e:	69a3      	ldr	r3, [r4, #24]
 801c970:	492c      	ldr	r1, [pc, #176]	; (801ca24 <__tzcalc_limits+0x148>)
 801c972:	fb01 3202 	mla	r2, r1, r2, r3
 801c976:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801c978:	4413      	add	r3, r2
 801c97a:	461a      	mov	r2, r3
 801c97c:	17db      	asrs	r3, r3, #31
 801c97e:	e9c4 2308 	strd	r2, r3, [r4, #32]
 801c982:	3428      	adds	r4, #40	; 0x28
 801c984:	45a3      	cmp	fp, r4
 801c986:	d1e3      	bne.n	801c950 <__tzcalc_limits+0x74>
 801c988:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 801c98c:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 801c990:	4294      	cmp	r4, r2
 801c992:	eb75 0303 	sbcs.w	r3, r5, r3
 801c996:	bfb4      	ite	lt
 801c998:	2301      	movlt	r3, #1
 801c99a:	2300      	movge	r3, #0
 801c99c:	6003      	str	r3, [r0, #0]
 801c99e:	2001      	movs	r0, #1
 801c9a0:	b003      	add	sp, #12
 801c9a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c9a6:	2300      	movs	r3, #0
 801c9a8:	e7df      	b.n	801c96a <__tzcalc_limits+0x8e>
 801c9aa:	2a44      	cmp	r2, #68	; 0x44
 801c9ac:	d101      	bne.n	801c9b2 <__tzcalc_limits+0xd6>
 801c9ae:	18ea      	adds	r2, r5, r3
 801c9b0:	e7dd      	b.n	801c96e <__tzcalc_limits+0x92>
 801c9b2:	9a00      	ldr	r2, [sp, #0]
 801c9b4:	bb72      	cbnz	r2, 801ca14 <__tzcalc_limits+0x138>
 801c9b6:	2e00      	cmp	r6, #0
 801c9b8:	bf0c      	ite	eq
 801c9ba:	46e0      	moveq	r8, ip
 801c9bc:	f04f 0801 	movne.w	r8, #1
 801c9c0:	4919      	ldr	r1, [pc, #100]	; (801ca28 <__tzcalc_limits+0x14c>)
 801c9c2:	68e2      	ldr	r2, [r4, #12]
 801c9c4:	9201      	str	r2, [sp, #4]
 801c9c6:	f04f 0a30 	mov.w	sl, #48	; 0x30
 801c9ca:	fb0a 1808 	mla	r8, sl, r8, r1
 801c9ce:	462a      	mov	r2, r5
 801c9d0:	f04f 0900 	mov.w	r9, #0
 801c9d4:	f1a8 0804 	sub.w	r8, r8, #4
 801c9d8:	9901      	ldr	r1, [sp, #4]
 801c9da:	f109 0901 	add.w	r9, r9, #1
 801c9de:	4549      	cmp	r1, r9
 801c9e0:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 801c9e4:	dc18      	bgt.n	801ca18 <__tzcalc_limits+0x13c>
 801c9e6:	f102 0804 	add.w	r8, r2, #4
 801c9ea:	fb98 f9fe 	sdiv	r9, r8, lr
 801c9ee:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 801c9f2:	eba8 0909 	sub.w	r9, r8, r9
 801c9f6:	ebb3 0909 	subs.w	r9, r3, r9
 801c9fa:	6923      	ldr	r3, [r4, #16]
 801c9fc:	f103 33ff 	add.w	r3, r3, #4294967295
 801ca00:	bf48      	it	mi
 801ca02:	f109 0907 	addmi.w	r9, r9, #7
 801ca06:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801ca0a:	444b      	add	r3, r9
 801ca0c:	4553      	cmp	r3, sl
 801ca0e:	da05      	bge.n	801ca1c <__tzcalc_limits+0x140>
 801ca10:	441a      	add	r2, r3
 801ca12:	e7ac      	b.n	801c96e <__tzcalc_limits+0x92>
 801ca14:	46e0      	mov	r8, ip
 801ca16:	e7d3      	b.n	801c9c0 <__tzcalc_limits+0xe4>
 801ca18:	4452      	add	r2, sl
 801ca1a:	e7dd      	b.n	801c9d8 <__tzcalc_limits+0xfc>
 801ca1c:	3b07      	subs	r3, #7
 801ca1e:	e7f5      	b.n	801ca0c <__tzcalc_limits+0x130>
 801ca20:	2000      	movs	r0, #0
 801ca22:	e7bd      	b.n	801c9a0 <__tzcalc_limits+0xc4>
 801ca24:	00015180 	.word	0x00015180
 801ca28:	080231d0 	.word	0x080231d0

0801ca2c <__tz_lock>:
 801ca2c:	4801      	ldr	r0, [pc, #4]	; (801ca34 <__tz_lock+0x8>)
 801ca2e:	f000 bb12 	b.w	801d056 <__retarget_lock_acquire>
 801ca32:	bf00      	nop
 801ca34:	2000cf1f 	.word	0x2000cf1f

0801ca38 <__tz_unlock>:
 801ca38:	4801      	ldr	r0, [pc, #4]	; (801ca40 <__tz_unlock+0x8>)
 801ca3a:	f000 bb0e 	b.w	801d05a <__retarget_lock_release>
 801ca3e:	bf00      	nop
 801ca40:	2000cf1f 	.word	0x2000cf1f

0801ca44 <_tzset_unlocked>:
 801ca44:	4b01      	ldr	r3, [pc, #4]	; (801ca4c <_tzset_unlocked+0x8>)
 801ca46:	6818      	ldr	r0, [r3, #0]
 801ca48:	f000 b802 	b.w	801ca50 <_tzset_unlocked_r>
 801ca4c:	200001a0 	.word	0x200001a0

0801ca50 <_tzset_unlocked_r>:
 801ca50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca54:	b08d      	sub	sp, #52	; 0x34
 801ca56:	4607      	mov	r7, r0
 801ca58:	f000 faf8 	bl	801d04c <__gettzinfo>
 801ca5c:	49ae      	ldr	r1, [pc, #696]	; (801cd18 <_tzset_unlocked_r+0x2c8>)
 801ca5e:	4eaf      	ldr	r6, [pc, #700]	; (801cd1c <_tzset_unlocked_r+0x2cc>)
 801ca60:	4605      	mov	r5, r0
 801ca62:	4638      	mov	r0, r7
 801ca64:	f000 faea 	bl	801d03c <_getenv_r>
 801ca68:	4604      	mov	r4, r0
 801ca6a:	b970      	cbnz	r0, 801ca8a <_tzset_unlocked_r+0x3a>
 801ca6c:	4bac      	ldr	r3, [pc, #688]	; (801cd20 <_tzset_unlocked_r+0x2d0>)
 801ca6e:	4aad      	ldr	r2, [pc, #692]	; (801cd24 <_tzset_unlocked_r+0x2d4>)
 801ca70:	6018      	str	r0, [r3, #0]
 801ca72:	4bad      	ldr	r3, [pc, #692]	; (801cd28 <_tzset_unlocked_r+0x2d8>)
 801ca74:	6018      	str	r0, [r3, #0]
 801ca76:	4bad      	ldr	r3, [pc, #692]	; (801cd2c <_tzset_unlocked_r+0x2dc>)
 801ca78:	6830      	ldr	r0, [r6, #0]
 801ca7a:	e9c3 2200 	strd	r2, r2, [r3]
 801ca7e:	f000 faf7 	bl	801d070 <free>
 801ca82:	6034      	str	r4, [r6, #0]
 801ca84:	b00d      	add	sp, #52	; 0x34
 801ca86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ca8a:	6831      	ldr	r1, [r6, #0]
 801ca8c:	2900      	cmp	r1, #0
 801ca8e:	d15f      	bne.n	801cb50 <_tzset_unlocked_r+0x100>
 801ca90:	6830      	ldr	r0, [r6, #0]
 801ca92:	f000 faed 	bl	801d070 <free>
 801ca96:	4620      	mov	r0, r4
 801ca98:	f7e3 fba4 	bl	80001e4 <strlen>
 801ca9c:	1c41      	adds	r1, r0, #1
 801ca9e:	4638      	mov	r0, r7
 801caa0:	f000 fb3e 	bl	801d120 <_malloc_r>
 801caa4:	6030      	str	r0, [r6, #0]
 801caa6:	2800      	cmp	r0, #0
 801caa8:	d157      	bne.n	801cb5a <_tzset_unlocked_r+0x10a>
 801caaa:	7823      	ldrb	r3, [r4, #0]
 801caac:	4aa0      	ldr	r2, [pc, #640]	; (801cd30 <_tzset_unlocked_r+0x2e0>)
 801caae:	49a1      	ldr	r1, [pc, #644]	; (801cd34 <_tzset_unlocked_r+0x2e4>)
 801cab0:	2b3a      	cmp	r3, #58	; 0x3a
 801cab2:	bf08      	it	eq
 801cab4:	3401      	addeq	r4, #1
 801cab6:	ae0a      	add	r6, sp, #40	; 0x28
 801cab8:	4633      	mov	r3, r6
 801caba:	4620      	mov	r0, r4
 801cabc:	f000 fe88 	bl	801d7d0 <siscanf>
 801cac0:	2800      	cmp	r0, #0
 801cac2:	dddf      	ble.n	801ca84 <_tzset_unlocked_r+0x34>
 801cac4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cac6:	18e7      	adds	r7, r4, r3
 801cac8:	5ce3      	ldrb	r3, [r4, r3]
 801caca:	2b2d      	cmp	r3, #45	; 0x2d
 801cacc:	d149      	bne.n	801cb62 <_tzset_unlocked_r+0x112>
 801cace:	3701      	adds	r7, #1
 801cad0:	f04f 34ff 	mov.w	r4, #4294967295
 801cad4:	f10d 0a20 	add.w	sl, sp, #32
 801cad8:	f10d 0b1e 	add.w	fp, sp, #30
 801cadc:	f04f 0800 	mov.w	r8, #0
 801cae0:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 801cae4:	4994      	ldr	r1, [pc, #592]	; (801cd38 <_tzset_unlocked_r+0x2e8>)
 801cae6:	9603      	str	r6, [sp, #12]
 801cae8:	f8cd b000 	str.w	fp, [sp]
 801caec:	4633      	mov	r3, r6
 801caee:	aa07      	add	r2, sp, #28
 801caf0:	4638      	mov	r0, r7
 801caf2:	f8ad 801e 	strh.w	r8, [sp, #30]
 801caf6:	f8ad 8020 	strh.w	r8, [sp, #32]
 801cafa:	f000 fe69 	bl	801d7d0 <siscanf>
 801cafe:	4540      	cmp	r0, r8
 801cb00:	ddc0      	ble.n	801ca84 <_tzset_unlocked_r+0x34>
 801cb02:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801cb06:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801cb0a:	f8df 9238 	ldr.w	r9, [pc, #568]	; 801cd44 <_tzset_unlocked_r+0x2f4>
 801cb0e:	213c      	movs	r1, #60	; 0x3c
 801cb10:	fb01 2203 	mla	r2, r1, r3, r2
 801cb14:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801cb18:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801cb1c:	fb01 2303 	mla	r3, r1, r3, r2
 801cb20:	435c      	muls	r4, r3
 801cb22:	62ac      	str	r4, [r5, #40]	; 0x28
 801cb24:	4c81      	ldr	r4, [pc, #516]	; (801cd2c <_tzset_unlocked_r+0x2dc>)
 801cb26:	4b82      	ldr	r3, [pc, #520]	; (801cd30 <_tzset_unlocked_r+0x2e0>)
 801cb28:	6023      	str	r3, [r4, #0]
 801cb2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cb2c:	4981      	ldr	r1, [pc, #516]	; (801cd34 <_tzset_unlocked_r+0x2e4>)
 801cb2e:	441f      	add	r7, r3
 801cb30:	464a      	mov	r2, r9
 801cb32:	4633      	mov	r3, r6
 801cb34:	4638      	mov	r0, r7
 801cb36:	f000 fe4b 	bl	801d7d0 <siscanf>
 801cb3a:	4540      	cmp	r0, r8
 801cb3c:	dc16      	bgt.n	801cb6c <_tzset_unlocked_r+0x11c>
 801cb3e:	6823      	ldr	r3, [r4, #0]
 801cb40:	6063      	str	r3, [r4, #4]
 801cb42:	4b77      	ldr	r3, [pc, #476]	; (801cd20 <_tzset_unlocked_r+0x2d0>)
 801cb44:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801cb46:	601a      	str	r2, [r3, #0]
 801cb48:	4b77      	ldr	r3, [pc, #476]	; (801cd28 <_tzset_unlocked_r+0x2d8>)
 801cb4a:	f8c3 8000 	str.w	r8, [r3]
 801cb4e:	e799      	b.n	801ca84 <_tzset_unlocked_r+0x34>
 801cb50:	f7e3 fb3e 	bl	80001d0 <strcmp>
 801cb54:	2800      	cmp	r0, #0
 801cb56:	d19b      	bne.n	801ca90 <_tzset_unlocked_r+0x40>
 801cb58:	e794      	b.n	801ca84 <_tzset_unlocked_r+0x34>
 801cb5a:	4621      	mov	r1, r4
 801cb5c:	f000 fea9 	bl	801d8b2 <strcpy>
 801cb60:	e7a3      	b.n	801caaa <_tzset_unlocked_r+0x5a>
 801cb62:	2b2b      	cmp	r3, #43	; 0x2b
 801cb64:	bf08      	it	eq
 801cb66:	3701      	addeq	r7, #1
 801cb68:	2401      	movs	r4, #1
 801cb6a:	e7b3      	b.n	801cad4 <_tzset_unlocked_r+0x84>
 801cb6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cb6e:	f8c4 9004 	str.w	r9, [r4, #4]
 801cb72:	18fc      	adds	r4, r7, r3
 801cb74:	5cfb      	ldrb	r3, [r7, r3]
 801cb76:	2b2d      	cmp	r3, #45	; 0x2d
 801cb78:	f040 808b 	bne.w	801cc92 <_tzset_unlocked_r+0x242>
 801cb7c:	3401      	adds	r4, #1
 801cb7e:	f04f 37ff 	mov.w	r7, #4294967295
 801cb82:	2300      	movs	r3, #0
 801cb84:	f8ad 301c 	strh.w	r3, [sp, #28]
 801cb88:	f8ad 301e 	strh.w	r3, [sp, #30]
 801cb8c:	f8ad 3020 	strh.w	r3, [sp, #32]
 801cb90:	930a      	str	r3, [sp, #40]	; 0x28
 801cb92:	e9cd a602 	strd	sl, r6, [sp, #8]
 801cb96:	e9cd b600 	strd	fp, r6, [sp]
 801cb9a:	4967      	ldr	r1, [pc, #412]	; (801cd38 <_tzset_unlocked_r+0x2e8>)
 801cb9c:	4633      	mov	r3, r6
 801cb9e:	aa07      	add	r2, sp, #28
 801cba0:	4620      	mov	r0, r4
 801cba2:	f000 fe15 	bl	801d7d0 <siscanf>
 801cba6:	2800      	cmp	r0, #0
 801cba8:	dc78      	bgt.n	801cc9c <_tzset_unlocked_r+0x24c>
 801cbaa:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 801cbac:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 801cbb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cbb2:	652f      	str	r7, [r5, #80]	; 0x50
 801cbb4:	441c      	add	r4, r3
 801cbb6:	462f      	mov	r7, r5
 801cbb8:	f04f 0900 	mov.w	r9, #0
 801cbbc:	7823      	ldrb	r3, [r4, #0]
 801cbbe:	2b2c      	cmp	r3, #44	; 0x2c
 801cbc0:	bf08      	it	eq
 801cbc2:	3401      	addeq	r4, #1
 801cbc4:	f894 8000 	ldrb.w	r8, [r4]
 801cbc8:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 801cbcc:	d178      	bne.n	801ccc0 <_tzset_unlocked_r+0x270>
 801cbce:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 801cbd2:	e9cd 6301 	strd	r6, r3, [sp, #4]
 801cbd6:	ab09      	add	r3, sp, #36	; 0x24
 801cbd8:	9300      	str	r3, [sp, #0]
 801cbda:	4958      	ldr	r1, [pc, #352]	; (801cd3c <_tzset_unlocked_r+0x2ec>)
 801cbdc:	9603      	str	r6, [sp, #12]
 801cbde:	4633      	mov	r3, r6
 801cbe0:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 801cbe4:	4620      	mov	r0, r4
 801cbe6:	f000 fdf3 	bl	801d7d0 <siscanf>
 801cbea:	2803      	cmp	r0, #3
 801cbec:	f47f af4a 	bne.w	801ca84 <_tzset_unlocked_r+0x34>
 801cbf0:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801cbf4:	1e4b      	subs	r3, r1, #1
 801cbf6:	2b0b      	cmp	r3, #11
 801cbf8:	f63f af44 	bhi.w	801ca84 <_tzset_unlocked_r+0x34>
 801cbfc:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801cc00:	1e53      	subs	r3, r2, #1
 801cc02:	2b04      	cmp	r3, #4
 801cc04:	f63f af3e 	bhi.w	801ca84 <_tzset_unlocked_r+0x34>
 801cc08:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801cc0c:	2b06      	cmp	r3, #6
 801cc0e:	f63f af39 	bhi.w	801ca84 <_tzset_unlocked_r+0x34>
 801cc12:	e9c7 1203 	strd	r1, r2, [r7, #12]
 801cc16:	f887 8008 	strb.w	r8, [r7, #8]
 801cc1a:	617b      	str	r3, [r7, #20]
 801cc1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cc1e:	eb04 0803 	add.w	r8, r4, r3
 801cc22:	2302      	movs	r3, #2
 801cc24:	f8ad 301c 	strh.w	r3, [sp, #28]
 801cc28:	2300      	movs	r3, #0
 801cc2a:	f8ad 301e 	strh.w	r3, [sp, #30]
 801cc2e:	f8ad 3020 	strh.w	r3, [sp, #32]
 801cc32:	930a      	str	r3, [sp, #40]	; 0x28
 801cc34:	f898 3000 	ldrb.w	r3, [r8]
 801cc38:	2b2f      	cmp	r3, #47	; 0x2f
 801cc3a:	d109      	bne.n	801cc50 <_tzset_unlocked_r+0x200>
 801cc3c:	e9cd a602 	strd	sl, r6, [sp, #8]
 801cc40:	e9cd b600 	strd	fp, r6, [sp]
 801cc44:	493e      	ldr	r1, [pc, #248]	; (801cd40 <_tzset_unlocked_r+0x2f0>)
 801cc46:	4633      	mov	r3, r6
 801cc48:	aa07      	add	r2, sp, #28
 801cc4a:	4640      	mov	r0, r8
 801cc4c:	f000 fdc0 	bl	801d7d0 <siscanf>
 801cc50:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801cc54:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801cc58:	213c      	movs	r1, #60	; 0x3c
 801cc5a:	fb01 2203 	mla	r2, r1, r3, r2
 801cc5e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801cc62:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801cc66:	fb01 2303 	mla	r3, r1, r3, r2
 801cc6a:	61bb      	str	r3, [r7, #24]
 801cc6c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801cc6e:	3728      	adds	r7, #40	; 0x28
 801cc70:	4444      	add	r4, r8
 801cc72:	f1b9 0f00 	cmp.w	r9, #0
 801cc76:	d020      	beq.n	801ccba <_tzset_unlocked_r+0x26a>
 801cc78:	6868      	ldr	r0, [r5, #4]
 801cc7a:	f7ff fe2f 	bl	801c8dc <__tzcalc_limits>
 801cc7e:	4b28      	ldr	r3, [pc, #160]	; (801cd20 <_tzset_unlocked_r+0x2d0>)
 801cc80:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801cc82:	601a      	str	r2, [r3, #0]
 801cc84:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 801cc86:	1a9b      	subs	r3, r3, r2
 801cc88:	4a27      	ldr	r2, [pc, #156]	; (801cd28 <_tzset_unlocked_r+0x2d8>)
 801cc8a:	bf18      	it	ne
 801cc8c:	2301      	movne	r3, #1
 801cc8e:	6013      	str	r3, [r2, #0]
 801cc90:	e6f8      	b.n	801ca84 <_tzset_unlocked_r+0x34>
 801cc92:	2b2b      	cmp	r3, #43	; 0x2b
 801cc94:	bf08      	it	eq
 801cc96:	3401      	addeq	r4, #1
 801cc98:	2701      	movs	r7, #1
 801cc9a:	e772      	b.n	801cb82 <_tzset_unlocked_r+0x132>
 801cc9c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801cca0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801cca4:	213c      	movs	r1, #60	; 0x3c
 801cca6:	fb01 2203 	mla	r2, r1, r3, r2
 801ccaa:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801ccae:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801ccb2:	fb01 2303 	mla	r3, r1, r3, r2
 801ccb6:	435f      	muls	r7, r3
 801ccb8:	e77a      	b.n	801cbb0 <_tzset_unlocked_r+0x160>
 801ccba:	f04f 0901 	mov.w	r9, #1
 801ccbe:	e77d      	b.n	801cbbc <_tzset_unlocked_r+0x16c>
 801ccc0:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 801ccc4:	bf06      	itte	eq
 801ccc6:	3401      	addeq	r4, #1
 801ccc8:	4643      	moveq	r3, r8
 801ccca:	2344      	movne	r3, #68	; 0x44
 801cccc:	220a      	movs	r2, #10
 801ccce:	a90b      	add	r1, sp, #44	; 0x2c
 801ccd0:	4620      	mov	r0, r4
 801ccd2:	9305      	str	r3, [sp, #20]
 801ccd4:	f000 fe74 	bl	801d9c0 <strtoul>
 801ccd8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 801ccdc:	9b05      	ldr	r3, [sp, #20]
 801ccde:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 801cce2:	45a0      	cmp	r8, r4
 801cce4:	d114      	bne.n	801cd10 <_tzset_unlocked_r+0x2c0>
 801cce6:	234d      	movs	r3, #77	; 0x4d
 801cce8:	f1b9 0f00 	cmp.w	r9, #0
 801ccec:	d107      	bne.n	801ccfe <_tzset_unlocked_r+0x2ae>
 801ccee:	722b      	strb	r3, [r5, #8]
 801ccf0:	2103      	movs	r1, #3
 801ccf2:	2302      	movs	r3, #2
 801ccf4:	e9c5 1303 	strd	r1, r3, [r5, #12]
 801ccf8:	f8c5 9014 	str.w	r9, [r5, #20]
 801ccfc:	e791      	b.n	801cc22 <_tzset_unlocked_r+0x1d2>
 801ccfe:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 801cd02:	220b      	movs	r2, #11
 801cd04:	2301      	movs	r3, #1
 801cd06:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 801cd0a:	2300      	movs	r3, #0
 801cd0c:	63eb      	str	r3, [r5, #60]	; 0x3c
 801cd0e:	e788      	b.n	801cc22 <_tzset_unlocked_r+0x1d2>
 801cd10:	b280      	uxth	r0, r0
 801cd12:	723b      	strb	r3, [r7, #8]
 801cd14:	6178      	str	r0, [r7, #20]
 801cd16:	e784      	b.n	801cc22 <_tzset_unlocked_r+0x1d2>
 801cd18:	080232a6 	.word	0x080232a6
 801cd1c:	20004a74 	.word	0x20004a74
 801cd20:	20004a7c 	.word	0x20004a7c
 801cd24:	080232a9 	.word	0x080232a9
 801cd28:	20004a78 	.word	0x20004a78
 801cd2c:	20000204 	.word	0x20000204
 801cd30:	20004a67 	.word	0x20004a67
 801cd34:	080232ad 	.word	0x080232ad
 801cd38:	080232d0 	.word	0x080232d0
 801cd3c:	080232bc 	.word	0x080232bc
 801cd40:	080232cf 	.word	0x080232cf
 801cd44:	20004a5c 	.word	0x20004a5c

0801cd48 <__assert_func>:
 801cd48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801cd4a:	4614      	mov	r4, r2
 801cd4c:	461a      	mov	r2, r3
 801cd4e:	4b09      	ldr	r3, [pc, #36]	; (801cd74 <__assert_func+0x2c>)
 801cd50:	681b      	ldr	r3, [r3, #0]
 801cd52:	4605      	mov	r5, r0
 801cd54:	68d8      	ldr	r0, [r3, #12]
 801cd56:	b14c      	cbz	r4, 801cd6c <__assert_func+0x24>
 801cd58:	4b07      	ldr	r3, [pc, #28]	; (801cd78 <__assert_func+0x30>)
 801cd5a:	9100      	str	r1, [sp, #0]
 801cd5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801cd60:	4906      	ldr	r1, [pc, #24]	; (801cd7c <__assert_func+0x34>)
 801cd62:	462b      	mov	r3, r5
 801cd64:	f000 f8fe 	bl	801cf64 <fiprintf>
 801cd68:	f000 ff06 	bl	801db78 <abort>
 801cd6c:	4b04      	ldr	r3, [pc, #16]	; (801cd80 <__assert_func+0x38>)
 801cd6e:	461c      	mov	r4, r3
 801cd70:	e7f3      	b.n	801cd5a <__assert_func+0x12>
 801cd72:	bf00      	nop
 801cd74:	200001a0 	.word	0x200001a0
 801cd78:	080232e2 	.word	0x080232e2
 801cd7c:	080232ef 	.word	0x080232ef
 801cd80:	0802331d 	.word	0x0802331d

0801cd84 <div>:
 801cd84:	2900      	cmp	r1, #0
 801cd86:	b510      	push	{r4, lr}
 801cd88:	fb91 f4f2 	sdiv	r4, r1, r2
 801cd8c:	fb02 1314 	mls	r3, r2, r4, r1
 801cd90:	db06      	blt.n	801cda0 <div+0x1c>
 801cd92:	2b00      	cmp	r3, #0
 801cd94:	da01      	bge.n	801cd9a <div+0x16>
 801cd96:	3401      	adds	r4, #1
 801cd98:	1a9b      	subs	r3, r3, r2
 801cd9a:	e9c0 4300 	strd	r4, r3, [r0]
 801cd9e:	bd10      	pop	{r4, pc}
 801cda0:	2b00      	cmp	r3, #0
 801cda2:	bfc4      	itt	gt
 801cda4:	f104 34ff 	addgt.w	r4, r4, #4294967295
 801cda8:	189b      	addgt	r3, r3, r2
 801cdaa:	e7f6      	b.n	801cd9a <div+0x16>

0801cdac <__errno>:
 801cdac:	4b01      	ldr	r3, [pc, #4]	; (801cdb4 <__errno+0x8>)
 801cdae:	6818      	ldr	r0, [r3, #0]
 801cdb0:	4770      	bx	lr
 801cdb2:	bf00      	nop
 801cdb4:	200001a0 	.word	0x200001a0

0801cdb8 <std>:
 801cdb8:	2300      	movs	r3, #0
 801cdba:	b510      	push	{r4, lr}
 801cdbc:	4604      	mov	r4, r0
 801cdbe:	e9c0 3300 	strd	r3, r3, [r0]
 801cdc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801cdc6:	6083      	str	r3, [r0, #8]
 801cdc8:	8181      	strh	r1, [r0, #12]
 801cdca:	6643      	str	r3, [r0, #100]	; 0x64
 801cdcc:	81c2      	strh	r2, [r0, #14]
 801cdce:	6183      	str	r3, [r0, #24]
 801cdd0:	4619      	mov	r1, r3
 801cdd2:	2208      	movs	r2, #8
 801cdd4:	305c      	adds	r0, #92	; 0x5c
 801cdd6:	f7ff f9fd 	bl	801c1d4 <memset>
 801cdda:	4b05      	ldr	r3, [pc, #20]	; (801cdf0 <std+0x38>)
 801cddc:	6263      	str	r3, [r4, #36]	; 0x24
 801cdde:	4b05      	ldr	r3, [pc, #20]	; (801cdf4 <std+0x3c>)
 801cde0:	62a3      	str	r3, [r4, #40]	; 0x28
 801cde2:	4b05      	ldr	r3, [pc, #20]	; (801cdf8 <std+0x40>)
 801cde4:	62e3      	str	r3, [r4, #44]	; 0x2c
 801cde6:	4b05      	ldr	r3, [pc, #20]	; (801cdfc <std+0x44>)
 801cde8:	6224      	str	r4, [r4, #32]
 801cdea:	6323      	str	r3, [r4, #48]	; 0x30
 801cdec:	bd10      	pop	{r4, pc}
 801cdee:	bf00      	nop
 801cdf0:	0801d829 	.word	0x0801d829
 801cdf4:	0801d84f 	.word	0x0801d84f
 801cdf8:	0801d887 	.word	0x0801d887
 801cdfc:	0801d8ab 	.word	0x0801d8ab

0801ce00 <_cleanup_r>:
 801ce00:	4901      	ldr	r1, [pc, #4]	; (801ce08 <_cleanup_r+0x8>)
 801ce02:	f000 b8c1 	b.w	801cf88 <_fwalk_reent>
 801ce06:	bf00      	nop
 801ce08:	0801dccd 	.word	0x0801dccd

0801ce0c <__sfmoreglue>:
 801ce0c:	b570      	push	{r4, r5, r6, lr}
 801ce0e:	1e4a      	subs	r2, r1, #1
 801ce10:	2568      	movs	r5, #104	; 0x68
 801ce12:	4355      	muls	r5, r2
 801ce14:	460e      	mov	r6, r1
 801ce16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801ce1a:	f000 f981 	bl	801d120 <_malloc_r>
 801ce1e:	4604      	mov	r4, r0
 801ce20:	b140      	cbz	r0, 801ce34 <__sfmoreglue+0x28>
 801ce22:	2100      	movs	r1, #0
 801ce24:	e9c0 1600 	strd	r1, r6, [r0]
 801ce28:	300c      	adds	r0, #12
 801ce2a:	60a0      	str	r0, [r4, #8]
 801ce2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801ce30:	f7ff f9d0 	bl	801c1d4 <memset>
 801ce34:	4620      	mov	r0, r4
 801ce36:	bd70      	pop	{r4, r5, r6, pc}

0801ce38 <__sfp_lock_acquire>:
 801ce38:	4801      	ldr	r0, [pc, #4]	; (801ce40 <__sfp_lock_acquire+0x8>)
 801ce3a:	f000 b90d 	b.w	801d058 <__retarget_lock_acquire_recursive>
 801ce3e:	bf00      	nop
 801ce40:	2000cf20 	.word	0x2000cf20

0801ce44 <__sfp_lock_release>:
 801ce44:	4801      	ldr	r0, [pc, #4]	; (801ce4c <__sfp_lock_release+0x8>)
 801ce46:	f000 b909 	b.w	801d05c <__retarget_lock_release_recursive>
 801ce4a:	bf00      	nop
 801ce4c:	2000cf20 	.word	0x2000cf20

0801ce50 <__sinit_lock_acquire>:
 801ce50:	4801      	ldr	r0, [pc, #4]	; (801ce58 <__sinit_lock_acquire+0x8>)
 801ce52:	f000 b901 	b.w	801d058 <__retarget_lock_acquire_recursive>
 801ce56:	bf00      	nop
 801ce58:	2000cf1b 	.word	0x2000cf1b

0801ce5c <__sinit_lock_release>:
 801ce5c:	4801      	ldr	r0, [pc, #4]	; (801ce64 <__sinit_lock_release+0x8>)
 801ce5e:	f000 b8fd 	b.w	801d05c <__retarget_lock_release_recursive>
 801ce62:	bf00      	nop
 801ce64:	2000cf1b 	.word	0x2000cf1b

0801ce68 <__sinit>:
 801ce68:	b510      	push	{r4, lr}
 801ce6a:	4604      	mov	r4, r0
 801ce6c:	f7ff fff0 	bl	801ce50 <__sinit_lock_acquire>
 801ce70:	69a3      	ldr	r3, [r4, #24]
 801ce72:	b11b      	cbz	r3, 801ce7c <__sinit+0x14>
 801ce74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ce78:	f7ff bff0 	b.w	801ce5c <__sinit_lock_release>
 801ce7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801ce80:	6523      	str	r3, [r4, #80]	; 0x50
 801ce82:	4b13      	ldr	r3, [pc, #76]	; (801ced0 <__sinit+0x68>)
 801ce84:	4a13      	ldr	r2, [pc, #76]	; (801ced4 <__sinit+0x6c>)
 801ce86:	681b      	ldr	r3, [r3, #0]
 801ce88:	62a2      	str	r2, [r4, #40]	; 0x28
 801ce8a:	42a3      	cmp	r3, r4
 801ce8c:	bf04      	itt	eq
 801ce8e:	2301      	moveq	r3, #1
 801ce90:	61a3      	streq	r3, [r4, #24]
 801ce92:	4620      	mov	r0, r4
 801ce94:	f000 f820 	bl	801ced8 <__sfp>
 801ce98:	6060      	str	r0, [r4, #4]
 801ce9a:	4620      	mov	r0, r4
 801ce9c:	f000 f81c 	bl	801ced8 <__sfp>
 801cea0:	60a0      	str	r0, [r4, #8]
 801cea2:	4620      	mov	r0, r4
 801cea4:	f000 f818 	bl	801ced8 <__sfp>
 801cea8:	2200      	movs	r2, #0
 801ceaa:	60e0      	str	r0, [r4, #12]
 801ceac:	2104      	movs	r1, #4
 801ceae:	6860      	ldr	r0, [r4, #4]
 801ceb0:	f7ff ff82 	bl	801cdb8 <std>
 801ceb4:	68a0      	ldr	r0, [r4, #8]
 801ceb6:	2201      	movs	r2, #1
 801ceb8:	2109      	movs	r1, #9
 801ceba:	f7ff ff7d 	bl	801cdb8 <std>
 801cebe:	68e0      	ldr	r0, [r4, #12]
 801cec0:	2202      	movs	r2, #2
 801cec2:	2112      	movs	r1, #18
 801cec4:	f7ff ff78 	bl	801cdb8 <std>
 801cec8:	2301      	movs	r3, #1
 801ceca:	61a3      	str	r3, [r4, #24]
 801cecc:	e7d2      	b.n	801ce74 <__sinit+0xc>
 801cece:	bf00      	nop
 801ced0:	0802316c 	.word	0x0802316c
 801ced4:	0801ce01 	.word	0x0801ce01

0801ced8 <__sfp>:
 801ced8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ceda:	4607      	mov	r7, r0
 801cedc:	f7ff ffac 	bl	801ce38 <__sfp_lock_acquire>
 801cee0:	4b1e      	ldr	r3, [pc, #120]	; (801cf5c <__sfp+0x84>)
 801cee2:	681e      	ldr	r6, [r3, #0]
 801cee4:	69b3      	ldr	r3, [r6, #24]
 801cee6:	b913      	cbnz	r3, 801ceee <__sfp+0x16>
 801cee8:	4630      	mov	r0, r6
 801ceea:	f7ff ffbd 	bl	801ce68 <__sinit>
 801ceee:	3648      	adds	r6, #72	; 0x48
 801cef0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801cef4:	3b01      	subs	r3, #1
 801cef6:	d503      	bpl.n	801cf00 <__sfp+0x28>
 801cef8:	6833      	ldr	r3, [r6, #0]
 801cefa:	b30b      	cbz	r3, 801cf40 <__sfp+0x68>
 801cefc:	6836      	ldr	r6, [r6, #0]
 801cefe:	e7f7      	b.n	801cef0 <__sfp+0x18>
 801cf00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801cf04:	b9d5      	cbnz	r5, 801cf3c <__sfp+0x64>
 801cf06:	4b16      	ldr	r3, [pc, #88]	; (801cf60 <__sfp+0x88>)
 801cf08:	60e3      	str	r3, [r4, #12]
 801cf0a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801cf0e:	6665      	str	r5, [r4, #100]	; 0x64
 801cf10:	f000 f8a0 	bl	801d054 <__retarget_lock_init_recursive>
 801cf14:	f7ff ff96 	bl	801ce44 <__sfp_lock_release>
 801cf18:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801cf1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801cf20:	6025      	str	r5, [r4, #0]
 801cf22:	61a5      	str	r5, [r4, #24]
 801cf24:	2208      	movs	r2, #8
 801cf26:	4629      	mov	r1, r5
 801cf28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801cf2c:	f7ff f952 	bl	801c1d4 <memset>
 801cf30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801cf34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801cf38:	4620      	mov	r0, r4
 801cf3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cf3c:	3468      	adds	r4, #104	; 0x68
 801cf3e:	e7d9      	b.n	801cef4 <__sfp+0x1c>
 801cf40:	2104      	movs	r1, #4
 801cf42:	4638      	mov	r0, r7
 801cf44:	f7ff ff62 	bl	801ce0c <__sfmoreglue>
 801cf48:	4604      	mov	r4, r0
 801cf4a:	6030      	str	r0, [r6, #0]
 801cf4c:	2800      	cmp	r0, #0
 801cf4e:	d1d5      	bne.n	801cefc <__sfp+0x24>
 801cf50:	f7ff ff78 	bl	801ce44 <__sfp_lock_release>
 801cf54:	230c      	movs	r3, #12
 801cf56:	603b      	str	r3, [r7, #0]
 801cf58:	e7ee      	b.n	801cf38 <__sfp+0x60>
 801cf5a:	bf00      	nop
 801cf5c:	0802316c 	.word	0x0802316c
 801cf60:	ffff0001 	.word	0xffff0001

0801cf64 <fiprintf>:
 801cf64:	b40e      	push	{r1, r2, r3}
 801cf66:	b503      	push	{r0, r1, lr}
 801cf68:	4601      	mov	r1, r0
 801cf6a:	ab03      	add	r3, sp, #12
 801cf6c:	4805      	ldr	r0, [pc, #20]	; (801cf84 <fiprintf+0x20>)
 801cf6e:	f853 2b04 	ldr.w	r2, [r3], #4
 801cf72:	6800      	ldr	r0, [r0, #0]
 801cf74:	9301      	str	r3, [sp, #4]
 801cf76:	f000 f957 	bl	801d228 <_vfiprintf_r>
 801cf7a:	b002      	add	sp, #8
 801cf7c:	f85d eb04 	ldr.w	lr, [sp], #4
 801cf80:	b003      	add	sp, #12
 801cf82:	4770      	bx	lr
 801cf84:	200001a0 	.word	0x200001a0

0801cf88 <_fwalk_reent>:
 801cf88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cf8c:	4606      	mov	r6, r0
 801cf8e:	4688      	mov	r8, r1
 801cf90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801cf94:	2700      	movs	r7, #0
 801cf96:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801cf9a:	f1b9 0901 	subs.w	r9, r9, #1
 801cf9e:	d505      	bpl.n	801cfac <_fwalk_reent+0x24>
 801cfa0:	6824      	ldr	r4, [r4, #0]
 801cfa2:	2c00      	cmp	r4, #0
 801cfa4:	d1f7      	bne.n	801cf96 <_fwalk_reent+0xe>
 801cfa6:	4638      	mov	r0, r7
 801cfa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cfac:	89ab      	ldrh	r3, [r5, #12]
 801cfae:	2b01      	cmp	r3, #1
 801cfb0:	d907      	bls.n	801cfc2 <_fwalk_reent+0x3a>
 801cfb2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801cfb6:	3301      	adds	r3, #1
 801cfb8:	d003      	beq.n	801cfc2 <_fwalk_reent+0x3a>
 801cfba:	4629      	mov	r1, r5
 801cfbc:	4630      	mov	r0, r6
 801cfbe:	47c0      	blx	r8
 801cfc0:	4307      	orrs	r7, r0
 801cfc2:	3568      	adds	r5, #104	; 0x68
 801cfc4:	e7e9      	b.n	801cf9a <_fwalk_reent+0x12>
	...

0801cfc8 <_findenv_r>:
 801cfc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cfcc:	4607      	mov	r7, r0
 801cfce:	4689      	mov	r9, r1
 801cfd0:	4616      	mov	r6, r2
 801cfd2:	f000 fde9 	bl	801dba8 <__env_lock>
 801cfd6:	4b18      	ldr	r3, [pc, #96]	; (801d038 <_findenv_r+0x70>)
 801cfd8:	681c      	ldr	r4, [r3, #0]
 801cfda:	469a      	mov	sl, r3
 801cfdc:	b134      	cbz	r4, 801cfec <_findenv_r+0x24>
 801cfde:	464b      	mov	r3, r9
 801cfe0:	4698      	mov	r8, r3
 801cfe2:	f813 1b01 	ldrb.w	r1, [r3], #1
 801cfe6:	b139      	cbz	r1, 801cff8 <_findenv_r+0x30>
 801cfe8:	293d      	cmp	r1, #61	; 0x3d
 801cfea:	d1f9      	bne.n	801cfe0 <_findenv_r+0x18>
 801cfec:	4638      	mov	r0, r7
 801cfee:	f000 fde1 	bl	801dbb4 <__env_unlock>
 801cff2:	2000      	movs	r0, #0
 801cff4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cff8:	eba8 0809 	sub.w	r8, r8, r9
 801cffc:	46a3      	mov	fp, r4
 801cffe:	f854 0b04 	ldr.w	r0, [r4], #4
 801d002:	2800      	cmp	r0, #0
 801d004:	d0f2      	beq.n	801cfec <_findenv_r+0x24>
 801d006:	4642      	mov	r2, r8
 801d008:	4649      	mov	r1, r9
 801d00a:	f7ff fbce 	bl	801c7aa <strncmp>
 801d00e:	2800      	cmp	r0, #0
 801d010:	d1f4      	bne.n	801cffc <_findenv_r+0x34>
 801d012:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801d016:	eb03 0508 	add.w	r5, r3, r8
 801d01a:	f813 3008 	ldrb.w	r3, [r3, r8]
 801d01e:	2b3d      	cmp	r3, #61	; 0x3d
 801d020:	d1ec      	bne.n	801cffc <_findenv_r+0x34>
 801d022:	f8da 3000 	ldr.w	r3, [sl]
 801d026:	ebab 0303 	sub.w	r3, fp, r3
 801d02a:	109b      	asrs	r3, r3, #2
 801d02c:	4638      	mov	r0, r7
 801d02e:	6033      	str	r3, [r6, #0]
 801d030:	f000 fdc0 	bl	801dbb4 <__env_unlock>
 801d034:	1c68      	adds	r0, r5, #1
 801d036:	e7dd      	b.n	801cff4 <_findenv_r+0x2c>
 801d038:	2000000c 	.word	0x2000000c

0801d03c <_getenv_r>:
 801d03c:	b507      	push	{r0, r1, r2, lr}
 801d03e:	aa01      	add	r2, sp, #4
 801d040:	f7ff ffc2 	bl	801cfc8 <_findenv_r>
 801d044:	b003      	add	sp, #12
 801d046:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801d04c <__gettzinfo>:
 801d04c:	4800      	ldr	r0, [pc, #0]	; (801d050 <__gettzinfo+0x4>)
 801d04e:	4770      	bx	lr
 801d050:	20000210 	.word	0x20000210

0801d054 <__retarget_lock_init_recursive>:
 801d054:	4770      	bx	lr

0801d056 <__retarget_lock_acquire>:
 801d056:	4770      	bx	lr

0801d058 <__retarget_lock_acquire_recursive>:
 801d058:	4770      	bx	lr

0801d05a <__retarget_lock_release>:
 801d05a:	4770      	bx	lr

0801d05c <__retarget_lock_release_recursive>:
 801d05c:	4770      	bx	lr
	...

0801d060 <malloc>:
 801d060:	4b02      	ldr	r3, [pc, #8]	; (801d06c <malloc+0xc>)
 801d062:	4601      	mov	r1, r0
 801d064:	6818      	ldr	r0, [r3, #0]
 801d066:	f000 b85b 	b.w	801d120 <_malloc_r>
 801d06a:	bf00      	nop
 801d06c:	200001a0 	.word	0x200001a0

0801d070 <free>:
 801d070:	4b02      	ldr	r3, [pc, #8]	; (801d07c <free+0xc>)
 801d072:	4601      	mov	r1, r0
 801d074:	6818      	ldr	r0, [r3, #0]
 801d076:	f000 b803 	b.w	801d080 <_free_r>
 801d07a:	bf00      	nop
 801d07c:	200001a0 	.word	0x200001a0

0801d080 <_free_r>:
 801d080:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d082:	2900      	cmp	r1, #0
 801d084:	d048      	beq.n	801d118 <_free_r+0x98>
 801d086:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d08a:	9001      	str	r0, [sp, #4]
 801d08c:	2b00      	cmp	r3, #0
 801d08e:	f1a1 0404 	sub.w	r4, r1, #4
 801d092:	bfb8      	it	lt
 801d094:	18e4      	addlt	r4, r4, r3
 801d096:	f000 fecb 	bl	801de30 <__malloc_lock>
 801d09a:	4a20      	ldr	r2, [pc, #128]	; (801d11c <_free_r+0x9c>)
 801d09c:	9801      	ldr	r0, [sp, #4]
 801d09e:	6813      	ldr	r3, [r2, #0]
 801d0a0:	4615      	mov	r5, r2
 801d0a2:	b933      	cbnz	r3, 801d0b2 <_free_r+0x32>
 801d0a4:	6063      	str	r3, [r4, #4]
 801d0a6:	6014      	str	r4, [r2, #0]
 801d0a8:	b003      	add	sp, #12
 801d0aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d0ae:	f000 bec5 	b.w	801de3c <__malloc_unlock>
 801d0b2:	42a3      	cmp	r3, r4
 801d0b4:	d90b      	bls.n	801d0ce <_free_r+0x4e>
 801d0b6:	6821      	ldr	r1, [r4, #0]
 801d0b8:	1862      	adds	r2, r4, r1
 801d0ba:	4293      	cmp	r3, r2
 801d0bc:	bf04      	itt	eq
 801d0be:	681a      	ldreq	r2, [r3, #0]
 801d0c0:	685b      	ldreq	r3, [r3, #4]
 801d0c2:	6063      	str	r3, [r4, #4]
 801d0c4:	bf04      	itt	eq
 801d0c6:	1852      	addeq	r2, r2, r1
 801d0c8:	6022      	streq	r2, [r4, #0]
 801d0ca:	602c      	str	r4, [r5, #0]
 801d0cc:	e7ec      	b.n	801d0a8 <_free_r+0x28>
 801d0ce:	461a      	mov	r2, r3
 801d0d0:	685b      	ldr	r3, [r3, #4]
 801d0d2:	b10b      	cbz	r3, 801d0d8 <_free_r+0x58>
 801d0d4:	42a3      	cmp	r3, r4
 801d0d6:	d9fa      	bls.n	801d0ce <_free_r+0x4e>
 801d0d8:	6811      	ldr	r1, [r2, #0]
 801d0da:	1855      	adds	r5, r2, r1
 801d0dc:	42a5      	cmp	r5, r4
 801d0de:	d10b      	bne.n	801d0f8 <_free_r+0x78>
 801d0e0:	6824      	ldr	r4, [r4, #0]
 801d0e2:	4421      	add	r1, r4
 801d0e4:	1854      	adds	r4, r2, r1
 801d0e6:	42a3      	cmp	r3, r4
 801d0e8:	6011      	str	r1, [r2, #0]
 801d0ea:	d1dd      	bne.n	801d0a8 <_free_r+0x28>
 801d0ec:	681c      	ldr	r4, [r3, #0]
 801d0ee:	685b      	ldr	r3, [r3, #4]
 801d0f0:	6053      	str	r3, [r2, #4]
 801d0f2:	4421      	add	r1, r4
 801d0f4:	6011      	str	r1, [r2, #0]
 801d0f6:	e7d7      	b.n	801d0a8 <_free_r+0x28>
 801d0f8:	d902      	bls.n	801d100 <_free_r+0x80>
 801d0fa:	230c      	movs	r3, #12
 801d0fc:	6003      	str	r3, [r0, #0]
 801d0fe:	e7d3      	b.n	801d0a8 <_free_r+0x28>
 801d100:	6825      	ldr	r5, [r4, #0]
 801d102:	1961      	adds	r1, r4, r5
 801d104:	428b      	cmp	r3, r1
 801d106:	bf04      	itt	eq
 801d108:	6819      	ldreq	r1, [r3, #0]
 801d10a:	685b      	ldreq	r3, [r3, #4]
 801d10c:	6063      	str	r3, [r4, #4]
 801d10e:	bf04      	itt	eq
 801d110:	1949      	addeq	r1, r1, r5
 801d112:	6021      	streq	r1, [r4, #0]
 801d114:	6054      	str	r4, [r2, #4]
 801d116:	e7c7      	b.n	801d0a8 <_free_r+0x28>
 801d118:	b003      	add	sp, #12
 801d11a:	bd30      	pop	{r4, r5, pc}
 801d11c:	20004a80 	.word	0x20004a80

0801d120 <_malloc_r>:
 801d120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d122:	1ccd      	adds	r5, r1, #3
 801d124:	f025 0503 	bic.w	r5, r5, #3
 801d128:	3508      	adds	r5, #8
 801d12a:	2d0c      	cmp	r5, #12
 801d12c:	bf38      	it	cc
 801d12e:	250c      	movcc	r5, #12
 801d130:	2d00      	cmp	r5, #0
 801d132:	4606      	mov	r6, r0
 801d134:	db01      	blt.n	801d13a <_malloc_r+0x1a>
 801d136:	42a9      	cmp	r1, r5
 801d138:	d903      	bls.n	801d142 <_malloc_r+0x22>
 801d13a:	230c      	movs	r3, #12
 801d13c:	6033      	str	r3, [r6, #0]
 801d13e:	2000      	movs	r0, #0
 801d140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d142:	f000 fe75 	bl	801de30 <__malloc_lock>
 801d146:	4921      	ldr	r1, [pc, #132]	; (801d1cc <_malloc_r+0xac>)
 801d148:	680a      	ldr	r2, [r1, #0]
 801d14a:	4614      	mov	r4, r2
 801d14c:	b99c      	cbnz	r4, 801d176 <_malloc_r+0x56>
 801d14e:	4f20      	ldr	r7, [pc, #128]	; (801d1d0 <_malloc_r+0xb0>)
 801d150:	683b      	ldr	r3, [r7, #0]
 801d152:	b923      	cbnz	r3, 801d15e <_malloc_r+0x3e>
 801d154:	4621      	mov	r1, r4
 801d156:	4630      	mov	r0, r6
 801d158:	f000 fb2a 	bl	801d7b0 <_sbrk_r>
 801d15c:	6038      	str	r0, [r7, #0]
 801d15e:	4629      	mov	r1, r5
 801d160:	4630      	mov	r0, r6
 801d162:	f000 fb25 	bl	801d7b0 <_sbrk_r>
 801d166:	1c43      	adds	r3, r0, #1
 801d168:	d123      	bne.n	801d1b2 <_malloc_r+0x92>
 801d16a:	230c      	movs	r3, #12
 801d16c:	6033      	str	r3, [r6, #0]
 801d16e:	4630      	mov	r0, r6
 801d170:	f000 fe64 	bl	801de3c <__malloc_unlock>
 801d174:	e7e3      	b.n	801d13e <_malloc_r+0x1e>
 801d176:	6823      	ldr	r3, [r4, #0]
 801d178:	1b5b      	subs	r3, r3, r5
 801d17a:	d417      	bmi.n	801d1ac <_malloc_r+0x8c>
 801d17c:	2b0b      	cmp	r3, #11
 801d17e:	d903      	bls.n	801d188 <_malloc_r+0x68>
 801d180:	6023      	str	r3, [r4, #0]
 801d182:	441c      	add	r4, r3
 801d184:	6025      	str	r5, [r4, #0]
 801d186:	e004      	b.n	801d192 <_malloc_r+0x72>
 801d188:	6863      	ldr	r3, [r4, #4]
 801d18a:	42a2      	cmp	r2, r4
 801d18c:	bf0c      	ite	eq
 801d18e:	600b      	streq	r3, [r1, #0]
 801d190:	6053      	strne	r3, [r2, #4]
 801d192:	4630      	mov	r0, r6
 801d194:	f000 fe52 	bl	801de3c <__malloc_unlock>
 801d198:	f104 000b 	add.w	r0, r4, #11
 801d19c:	1d23      	adds	r3, r4, #4
 801d19e:	f020 0007 	bic.w	r0, r0, #7
 801d1a2:	1ac2      	subs	r2, r0, r3
 801d1a4:	d0cc      	beq.n	801d140 <_malloc_r+0x20>
 801d1a6:	1a1b      	subs	r3, r3, r0
 801d1a8:	50a3      	str	r3, [r4, r2]
 801d1aa:	e7c9      	b.n	801d140 <_malloc_r+0x20>
 801d1ac:	4622      	mov	r2, r4
 801d1ae:	6864      	ldr	r4, [r4, #4]
 801d1b0:	e7cc      	b.n	801d14c <_malloc_r+0x2c>
 801d1b2:	1cc4      	adds	r4, r0, #3
 801d1b4:	f024 0403 	bic.w	r4, r4, #3
 801d1b8:	42a0      	cmp	r0, r4
 801d1ba:	d0e3      	beq.n	801d184 <_malloc_r+0x64>
 801d1bc:	1a21      	subs	r1, r4, r0
 801d1be:	4630      	mov	r0, r6
 801d1c0:	f000 faf6 	bl	801d7b0 <_sbrk_r>
 801d1c4:	3001      	adds	r0, #1
 801d1c6:	d1dd      	bne.n	801d184 <_malloc_r+0x64>
 801d1c8:	e7cf      	b.n	801d16a <_malloc_r+0x4a>
 801d1ca:	bf00      	nop
 801d1cc:	20004a80 	.word	0x20004a80
 801d1d0:	20004a84 	.word	0x20004a84

0801d1d4 <__sfputc_r>:
 801d1d4:	6893      	ldr	r3, [r2, #8]
 801d1d6:	3b01      	subs	r3, #1
 801d1d8:	2b00      	cmp	r3, #0
 801d1da:	b410      	push	{r4}
 801d1dc:	6093      	str	r3, [r2, #8]
 801d1de:	da08      	bge.n	801d1f2 <__sfputc_r+0x1e>
 801d1e0:	6994      	ldr	r4, [r2, #24]
 801d1e2:	42a3      	cmp	r3, r4
 801d1e4:	db01      	blt.n	801d1ea <__sfputc_r+0x16>
 801d1e6:	290a      	cmp	r1, #10
 801d1e8:	d103      	bne.n	801d1f2 <__sfputc_r+0x1e>
 801d1ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d1ee:	f000 bbf1 	b.w	801d9d4 <__swbuf_r>
 801d1f2:	6813      	ldr	r3, [r2, #0]
 801d1f4:	1c58      	adds	r0, r3, #1
 801d1f6:	6010      	str	r0, [r2, #0]
 801d1f8:	7019      	strb	r1, [r3, #0]
 801d1fa:	4608      	mov	r0, r1
 801d1fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d200:	4770      	bx	lr

0801d202 <__sfputs_r>:
 801d202:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d204:	4606      	mov	r6, r0
 801d206:	460f      	mov	r7, r1
 801d208:	4614      	mov	r4, r2
 801d20a:	18d5      	adds	r5, r2, r3
 801d20c:	42ac      	cmp	r4, r5
 801d20e:	d101      	bne.n	801d214 <__sfputs_r+0x12>
 801d210:	2000      	movs	r0, #0
 801d212:	e007      	b.n	801d224 <__sfputs_r+0x22>
 801d214:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d218:	463a      	mov	r2, r7
 801d21a:	4630      	mov	r0, r6
 801d21c:	f7ff ffda 	bl	801d1d4 <__sfputc_r>
 801d220:	1c43      	adds	r3, r0, #1
 801d222:	d1f3      	bne.n	801d20c <__sfputs_r+0xa>
 801d224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801d228 <_vfiprintf_r>:
 801d228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d22c:	460d      	mov	r5, r1
 801d22e:	b09d      	sub	sp, #116	; 0x74
 801d230:	4614      	mov	r4, r2
 801d232:	4698      	mov	r8, r3
 801d234:	4606      	mov	r6, r0
 801d236:	b118      	cbz	r0, 801d240 <_vfiprintf_r+0x18>
 801d238:	6983      	ldr	r3, [r0, #24]
 801d23a:	b90b      	cbnz	r3, 801d240 <_vfiprintf_r+0x18>
 801d23c:	f7ff fe14 	bl	801ce68 <__sinit>
 801d240:	4b89      	ldr	r3, [pc, #548]	; (801d468 <_vfiprintf_r+0x240>)
 801d242:	429d      	cmp	r5, r3
 801d244:	d11b      	bne.n	801d27e <_vfiprintf_r+0x56>
 801d246:	6875      	ldr	r5, [r6, #4]
 801d248:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d24a:	07d9      	lsls	r1, r3, #31
 801d24c:	d405      	bmi.n	801d25a <_vfiprintf_r+0x32>
 801d24e:	89ab      	ldrh	r3, [r5, #12]
 801d250:	059a      	lsls	r2, r3, #22
 801d252:	d402      	bmi.n	801d25a <_vfiprintf_r+0x32>
 801d254:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d256:	f7ff feff 	bl	801d058 <__retarget_lock_acquire_recursive>
 801d25a:	89ab      	ldrh	r3, [r5, #12]
 801d25c:	071b      	lsls	r3, r3, #28
 801d25e:	d501      	bpl.n	801d264 <_vfiprintf_r+0x3c>
 801d260:	692b      	ldr	r3, [r5, #16]
 801d262:	b9eb      	cbnz	r3, 801d2a0 <_vfiprintf_r+0x78>
 801d264:	4629      	mov	r1, r5
 801d266:	4630      	mov	r0, r6
 801d268:	f000 fc18 	bl	801da9c <__swsetup_r>
 801d26c:	b1c0      	cbz	r0, 801d2a0 <_vfiprintf_r+0x78>
 801d26e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d270:	07dc      	lsls	r4, r3, #31
 801d272:	d50e      	bpl.n	801d292 <_vfiprintf_r+0x6a>
 801d274:	f04f 30ff 	mov.w	r0, #4294967295
 801d278:	b01d      	add	sp, #116	; 0x74
 801d27a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d27e:	4b7b      	ldr	r3, [pc, #492]	; (801d46c <_vfiprintf_r+0x244>)
 801d280:	429d      	cmp	r5, r3
 801d282:	d101      	bne.n	801d288 <_vfiprintf_r+0x60>
 801d284:	68b5      	ldr	r5, [r6, #8]
 801d286:	e7df      	b.n	801d248 <_vfiprintf_r+0x20>
 801d288:	4b79      	ldr	r3, [pc, #484]	; (801d470 <_vfiprintf_r+0x248>)
 801d28a:	429d      	cmp	r5, r3
 801d28c:	bf08      	it	eq
 801d28e:	68f5      	ldreq	r5, [r6, #12]
 801d290:	e7da      	b.n	801d248 <_vfiprintf_r+0x20>
 801d292:	89ab      	ldrh	r3, [r5, #12]
 801d294:	0598      	lsls	r0, r3, #22
 801d296:	d4ed      	bmi.n	801d274 <_vfiprintf_r+0x4c>
 801d298:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d29a:	f7ff fedf 	bl	801d05c <__retarget_lock_release_recursive>
 801d29e:	e7e9      	b.n	801d274 <_vfiprintf_r+0x4c>
 801d2a0:	2300      	movs	r3, #0
 801d2a2:	9309      	str	r3, [sp, #36]	; 0x24
 801d2a4:	2320      	movs	r3, #32
 801d2a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d2aa:	f8cd 800c 	str.w	r8, [sp, #12]
 801d2ae:	2330      	movs	r3, #48	; 0x30
 801d2b0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801d474 <_vfiprintf_r+0x24c>
 801d2b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d2b8:	f04f 0901 	mov.w	r9, #1
 801d2bc:	4623      	mov	r3, r4
 801d2be:	469a      	mov	sl, r3
 801d2c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d2c4:	b10a      	cbz	r2, 801d2ca <_vfiprintf_r+0xa2>
 801d2c6:	2a25      	cmp	r2, #37	; 0x25
 801d2c8:	d1f9      	bne.n	801d2be <_vfiprintf_r+0x96>
 801d2ca:	ebba 0b04 	subs.w	fp, sl, r4
 801d2ce:	d00b      	beq.n	801d2e8 <_vfiprintf_r+0xc0>
 801d2d0:	465b      	mov	r3, fp
 801d2d2:	4622      	mov	r2, r4
 801d2d4:	4629      	mov	r1, r5
 801d2d6:	4630      	mov	r0, r6
 801d2d8:	f7ff ff93 	bl	801d202 <__sfputs_r>
 801d2dc:	3001      	adds	r0, #1
 801d2de:	f000 80aa 	beq.w	801d436 <_vfiprintf_r+0x20e>
 801d2e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d2e4:	445a      	add	r2, fp
 801d2e6:	9209      	str	r2, [sp, #36]	; 0x24
 801d2e8:	f89a 3000 	ldrb.w	r3, [sl]
 801d2ec:	2b00      	cmp	r3, #0
 801d2ee:	f000 80a2 	beq.w	801d436 <_vfiprintf_r+0x20e>
 801d2f2:	2300      	movs	r3, #0
 801d2f4:	f04f 32ff 	mov.w	r2, #4294967295
 801d2f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d2fc:	f10a 0a01 	add.w	sl, sl, #1
 801d300:	9304      	str	r3, [sp, #16]
 801d302:	9307      	str	r3, [sp, #28]
 801d304:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d308:	931a      	str	r3, [sp, #104]	; 0x68
 801d30a:	4654      	mov	r4, sl
 801d30c:	2205      	movs	r2, #5
 801d30e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d312:	4858      	ldr	r0, [pc, #352]	; (801d474 <_vfiprintf_r+0x24c>)
 801d314:	f7e2 ff74 	bl	8000200 <memchr>
 801d318:	9a04      	ldr	r2, [sp, #16]
 801d31a:	b9d8      	cbnz	r0, 801d354 <_vfiprintf_r+0x12c>
 801d31c:	06d1      	lsls	r1, r2, #27
 801d31e:	bf44      	itt	mi
 801d320:	2320      	movmi	r3, #32
 801d322:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d326:	0713      	lsls	r3, r2, #28
 801d328:	bf44      	itt	mi
 801d32a:	232b      	movmi	r3, #43	; 0x2b
 801d32c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d330:	f89a 3000 	ldrb.w	r3, [sl]
 801d334:	2b2a      	cmp	r3, #42	; 0x2a
 801d336:	d015      	beq.n	801d364 <_vfiprintf_r+0x13c>
 801d338:	9a07      	ldr	r2, [sp, #28]
 801d33a:	4654      	mov	r4, sl
 801d33c:	2000      	movs	r0, #0
 801d33e:	f04f 0c0a 	mov.w	ip, #10
 801d342:	4621      	mov	r1, r4
 801d344:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d348:	3b30      	subs	r3, #48	; 0x30
 801d34a:	2b09      	cmp	r3, #9
 801d34c:	d94e      	bls.n	801d3ec <_vfiprintf_r+0x1c4>
 801d34e:	b1b0      	cbz	r0, 801d37e <_vfiprintf_r+0x156>
 801d350:	9207      	str	r2, [sp, #28]
 801d352:	e014      	b.n	801d37e <_vfiprintf_r+0x156>
 801d354:	eba0 0308 	sub.w	r3, r0, r8
 801d358:	fa09 f303 	lsl.w	r3, r9, r3
 801d35c:	4313      	orrs	r3, r2
 801d35e:	9304      	str	r3, [sp, #16]
 801d360:	46a2      	mov	sl, r4
 801d362:	e7d2      	b.n	801d30a <_vfiprintf_r+0xe2>
 801d364:	9b03      	ldr	r3, [sp, #12]
 801d366:	1d19      	adds	r1, r3, #4
 801d368:	681b      	ldr	r3, [r3, #0]
 801d36a:	9103      	str	r1, [sp, #12]
 801d36c:	2b00      	cmp	r3, #0
 801d36e:	bfbb      	ittet	lt
 801d370:	425b      	neglt	r3, r3
 801d372:	f042 0202 	orrlt.w	r2, r2, #2
 801d376:	9307      	strge	r3, [sp, #28]
 801d378:	9307      	strlt	r3, [sp, #28]
 801d37a:	bfb8      	it	lt
 801d37c:	9204      	strlt	r2, [sp, #16]
 801d37e:	7823      	ldrb	r3, [r4, #0]
 801d380:	2b2e      	cmp	r3, #46	; 0x2e
 801d382:	d10c      	bne.n	801d39e <_vfiprintf_r+0x176>
 801d384:	7863      	ldrb	r3, [r4, #1]
 801d386:	2b2a      	cmp	r3, #42	; 0x2a
 801d388:	d135      	bne.n	801d3f6 <_vfiprintf_r+0x1ce>
 801d38a:	9b03      	ldr	r3, [sp, #12]
 801d38c:	1d1a      	adds	r2, r3, #4
 801d38e:	681b      	ldr	r3, [r3, #0]
 801d390:	9203      	str	r2, [sp, #12]
 801d392:	2b00      	cmp	r3, #0
 801d394:	bfb8      	it	lt
 801d396:	f04f 33ff 	movlt.w	r3, #4294967295
 801d39a:	3402      	adds	r4, #2
 801d39c:	9305      	str	r3, [sp, #20]
 801d39e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801d484 <_vfiprintf_r+0x25c>
 801d3a2:	7821      	ldrb	r1, [r4, #0]
 801d3a4:	2203      	movs	r2, #3
 801d3a6:	4650      	mov	r0, sl
 801d3a8:	f7e2 ff2a 	bl	8000200 <memchr>
 801d3ac:	b140      	cbz	r0, 801d3c0 <_vfiprintf_r+0x198>
 801d3ae:	2340      	movs	r3, #64	; 0x40
 801d3b0:	eba0 000a 	sub.w	r0, r0, sl
 801d3b4:	fa03 f000 	lsl.w	r0, r3, r0
 801d3b8:	9b04      	ldr	r3, [sp, #16]
 801d3ba:	4303      	orrs	r3, r0
 801d3bc:	3401      	adds	r4, #1
 801d3be:	9304      	str	r3, [sp, #16]
 801d3c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d3c4:	482c      	ldr	r0, [pc, #176]	; (801d478 <_vfiprintf_r+0x250>)
 801d3c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d3ca:	2206      	movs	r2, #6
 801d3cc:	f7e2 ff18 	bl	8000200 <memchr>
 801d3d0:	2800      	cmp	r0, #0
 801d3d2:	d03f      	beq.n	801d454 <_vfiprintf_r+0x22c>
 801d3d4:	4b29      	ldr	r3, [pc, #164]	; (801d47c <_vfiprintf_r+0x254>)
 801d3d6:	bb1b      	cbnz	r3, 801d420 <_vfiprintf_r+0x1f8>
 801d3d8:	9b03      	ldr	r3, [sp, #12]
 801d3da:	3307      	adds	r3, #7
 801d3dc:	f023 0307 	bic.w	r3, r3, #7
 801d3e0:	3308      	adds	r3, #8
 801d3e2:	9303      	str	r3, [sp, #12]
 801d3e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d3e6:	443b      	add	r3, r7
 801d3e8:	9309      	str	r3, [sp, #36]	; 0x24
 801d3ea:	e767      	b.n	801d2bc <_vfiprintf_r+0x94>
 801d3ec:	fb0c 3202 	mla	r2, ip, r2, r3
 801d3f0:	460c      	mov	r4, r1
 801d3f2:	2001      	movs	r0, #1
 801d3f4:	e7a5      	b.n	801d342 <_vfiprintf_r+0x11a>
 801d3f6:	2300      	movs	r3, #0
 801d3f8:	3401      	adds	r4, #1
 801d3fa:	9305      	str	r3, [sp, #20]
 801d3fc:	4619      	mov	r1, r3
 801d3fe:	f04f 0c0a 	mov.w	ip, #10
 801d402:	4620      	mov	r0, r4
 801d404:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d408:	3a30      	subs	r2, #48	; 0x30
 801d40a:	2a09      	cmp	r2, #9
 801d40c:	d903      	bls.n	801d416 <_vfiprintf_r+0x1ee>
 801d40e:	2b00      	cmp	r3, #0
 801d410:	d0c5      	beq.n	801d39e <_vfiprintf_r+0x176>
 801d412:	9105      	str	r1, [sp, #20]
 801d414:	e7c3      	b.n	801d39e <_vfiprintf_r+0x176>
 801d416:	fb0c 2101 	mla	r1, ip, r1, r2
 801d41a:	4604      	mov	r4, r0
 801d41c:	2301      	movs	r3, #1
 801d41e:	e7f0      	b.n	801d402 <_vfiprintf_r+0x1da>
 801d420:	ab03      	add	r3, sp, #12
 801d422:	9300      	str	r3, [sp, #0]
 801d424:	462a      	mov	r2, r5
 801d426:	4b16      	ldr	r3, [pc, #88]	; (801d480 <_vfiprintf_r+0x258>)
 801d428:	a904      	add	r1, sp, #16
 801d42a:	4630      	mov	r0, r6
 801d42c:	f3af 8000 	nop.w
 801d430:	4607      	mov	r7, r0
 801d432:	1c78      	adds	r0, r7, #1
 801d434:	d1d6      	bne.n	801d3e4 <_vfiprintf_r+0x1bc>
 801d436:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d438:	07d9      	lsls	r1, r3, #31
 801d43a:	d405      	bmi.n	801d448 <_vfiprintf_r+0x220>
 801d43c:	89ab      	ldrh	r3, [r5, #12]
 801d43e:	059a      	lsls	r2, r3, #22
 801d440:	d402      	bmi.n	801d448 <_vfiprintf_r+0x220>
 801d442:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d444:	f7ff fe0a 	bl	801d05c <__retarget_lock_release_recursive>
 801d448:	89ab      	ldrh	r3, [r5, #12]
 801d44a:	065b      	lsls	r3, r3, #25
 801d44c:	f53f af12 	bmi.w	801d274 <_vfiprintf_r+0x4c>
 801d450:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d452:	e711      	b.n	801d278 <_vfiprintf_r+0x50>
 801d454:	ab03      	add	r3, sp, #12
 801d456:	9300      	str	r3, [sp, #0]
 801d458:	462a      	mov	r2, r5
 801d45a:	4b09      	ldr	r3, [pc, #36]	; (801d480 <_vfiprintf_r+0x258>)
 801d45c:	a904      	add	r1, sp, #16
 801d45e:	4630      	mov	r0, r6
 801d460:	f000 f880 	bl	801d564 <_printf_i>
 801d464:	e7e4      	b.n	801d430 <_vfiprintf_r+0x208>
 801d466:	bf00      	nop
 801d468:	08023340 	.word	0x08023340
 801d46c:	08023360 	.word	0x08023360
 801d470:	08023320 	.word	0x08023320
 801d474:	08023380 	.word	0x08023380
 801d478:	0802338a 	.word	0x0802338a
 801d47c:	00000000 	.word	0x00000000
 801d480:	0801d203 	.word	0x0801d203
 801d484:	08023386 	.word	0x08023386

0801d488 <_printf_common>:
 801d488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d48c:	4616      	mov	r6, r2
 801d48e:	4699      	mov	r9, r3
 801d490:	688a      	ldr	r2, [r1, #8]
 801d492:	690b      	ldr	r3, [r1, #16]
 801d494:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801d498:	4293      	cmp	r3, r2
 801d49a:	bfb8      	it	lt
 801d49c:	4613      	movlt	r3, r2
 801d49e:	6033      	str	r3, [r6, #0]
 801d4a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801d4a4:	4607      	mov	r7, r0
 801d4a6:	460c      	mov	r4, r1
 801d4a8:	b10a      	cbz	r2, 801d4ae <_printf_common+0x26>
 801d4aa:	3301      	adds	r3, #1
 801d4ac:	6033      	str	r3, [r6, #0]
 801d4ae:	6823      	ldr	r3, [r4, #0]
 801d4b0:	0699      	lsls	r1, r3, #26
 801d4b2:	bf42      	ittt	mi
 801d4b4:	6833      	ldrmi	r3, [r6, #0]
 801d4b6:	3302      	addmi	r3, #2
 801d4b8:	6033      	strmi	r3, [r6, #0]
 801d4ba:	6825      	ldr	r5, [r4, #0]
 801d4bc:	f015 0506 	ands.w	r5, r5, #6
 801d4c0:	d106      	bne.n	801d4d0 <_printf_common+0x48>
 801d4c2:	f104 0a19 	add.w	sl, r4, #25
 801d4c6:	68e3      	ldr	r3, [r4, #12]
 801d4c8:	6832      	ldr	r2, [r6, #0]
 801d4ca:	1a9b      	subs	r3, r3, r2
 801d4cc:	42ab      	cmp	r3, r5
 801d4ce:	dc26      	bgt.n	801d51e <_printf_common+0x96>
 801d4d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801d4d4:	1e13      	subs	r3, r2, #0
 801d4d6:	6822      	ldr	r2, [r4, #0]
 801d4d8:	bf18      	it	ne
 801d4da:	2301      	movne	r3, #1
 801d4dc:	0692      	lsls	r2, r2, #26
 801d4de:	d42b      	bmi.n	801d538 <_printf_common+0xb0>
 801d4e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801d4e4:	4649      	mov	r1, r9
 801d4e6:	4638      	mov	r0, r7
 801d4e8:	47c0      	blx	r8
 801d4ea:	3001      	adds	r0, #1
 801d4ec:	d01e      	beq.n	801d52c <_printf_common+0xa4>
 801d4ee:	6823      	ldr	r3, [r4, #0]
 801d4f0:	68e5      	ldr	r5, [r4, #12]
 801d4f2:	6832      	ldr	r2, [r6, #0]
 801d4f4:	f003 0306 	and.w	r3, r3, #6
 801d4f8:	2b04      	cmp	r3, #4
 801d4fa:	bf08      	it	eq
 801d4fc:	1aad      	subeq	r5, r5, r2
 801d4fe:	68a3      	ldr	r3, [r4, #8]
 801d500:	6922      	ldr	r2, [r4, #16]
 801d502:	bf0c      	ite	eq
 801d504:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801d508:	2500      	movne	r5, #0
 801d50a:	4293      	cmp	r3, r2
 801d50c:	bfc4      	itt	gt
 801d50e:	1a9b      	subgt	r3, r3, r2
 801d510:	18ed      	addgt	r5, r5, r3
 801d512:	2600      	movs	r6, #0
 801d514:	341a      	adds	r4, #26
 801d516:	42b5      	cmp	r5, r6
 801d518:	d11a      	bne.n	801d550 <_printf_common+0xc8>
 801d51a:	2000      	movs	r0, #0
 801d51c:	e008      	b.n	801d530 <_printf_common+0xa8>
 801d51e:	2301      	movs	r3, #1
 801d520:	4652      	mov	r2, sl
 801d522:	4649      	mov	r1, r9
 801d524:	4638      	mov	r0, r7
 801d526:	47c0      	blx	r8
 801d528:	3001      	adds	r0, #1
 801d52a:	d103      	bne.n	801d534 <_printf_common+0xac>
 801d52c:	f04f 30ff 	mov.w	r0, #4294967295
 801d530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d534:	3501      	adds	r5, #1
 801d536:	e7c6      	b.n	801d4c6 <_printf_common+0x3e>
 801d538:	18e1      	adds	r1, r4, r3
 801d53a:	1c5a      	adds	r2, r3, #1
 801d53c:	2030      	movs	r0, #48	; 0x30
 801d53e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801d542:	4422      	add	r2, r4
 801d544:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801d548:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801d54c:	3302      	adds	r3, #2
 801d54e:	e7c7      	b.n	801d4e0 <_printf_common+0x58>
 801d550:	2301      	movs	r3, #1
 801d552:	4622      	mov	r2, r4
 801d554:	4649      	mov	r1, r9
 801d556:	4638      	mov	r0, r7
 801d558:	47c0      	blx	r8
 801d55a:	3001      	adds	r0, #1
 801d55c:	d0e6      	beq.n	801d52c <_printf_common+0xa4>
 801d55e:	3601      	adds	r6, #1
 801d560:	e7d9      	b.n	801d516 <_printf_common+0x8e>
	...

0801d564 <_printf_i>:
 801d564:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d568:	460c      	mov	r4, r1
 801d56a:	4691      	mov	r9, r2
 801d56c:	7e27      	ldrb	r7, [r4, #24]
 801d56e:	990c      	ldr	r1, [sp, #48]	; 0x30
 801d570:	2f78      	cmp	r7, #120	; 0x78
 801d572:	4680      	mov	r8, r0
 801d574:	469a      	mov	sl, r3
 801d576:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801d57a:	d807      	bhi.n	801d58c <_printf_i+0x28>
 801d57c:	2f62      	cmp	r7, #98	; 0x62
 801d57e:	d80a      	bhi.n	801d596 <_printf_i+0x32>
 801d580:	2f00      	cmp	r7, #0
 801d582:	f000 80d8 	beq.w	801d736 <_printf_i+0x1d2>
 801d586:	2f58      	cmp	r7, #88	; 0x58
 801d588:	f000 80a3 	beq.w	801d6d2 <_printf_i+0x16e>
 801d58c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801d590:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801d594:	e03a      	b.n	801d60c <_printf_i+0xa8>
 801d596:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801d59a:	2b15      	cmp	r3, #21
 801d59c:	d8f6      	bhi.n	801d58c <_printf_i+0x28>
 801d59e:	a001      	add	r0, pc, #4	; (adr r0, 801d5a4 <_printf_i+0x40>)
 801d5a0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801d5a4:	0801d5fd 	.word	0x0801d5fd
 801d5a8:	0801d611 	.word	0x0801d611
 801d5ac:	0801d58d 	.word	0x0801d58d
 801d5b0:	0801d58d 	.word	0x0801d58d
 801d5b4:	0801d58d 	.word	0x0801d58d
 801d5b8:	0801d58d 	.word	0x0801d58d
 801d5bc:	0801d611 	.word	0x0801d611
 801d5c0:	0801d58d 	.word	0x0801d58d
 801d5c4:	0801d58d 	.word	0x0801d58d
 801d5c8:	0801d58d 	.word	0x0801d58d
 801d5cc:	0801d58d 	.word	0x0801d58d
 801d5d0:	0801d71d 	.word	0x0801d71d
 801d5d4:	0801d641 	.word	0x0801d641
 801d5d8:	0801d6ff 	.word	0x0801d6ff
 801d5dc:	0801d58d 	.word	0x0801d58d
 801d5e0:	0801d58d 	.word	0x0801d58d
 801d5e4:	0801d73f 	.word	0x0801d73f
 801d5e8:	0801d58d 	.word	0x0801d58d
 801d5ec:	0801d641 	.word	0x0801d641
 801d5f0:	0801d58d 	.word	0x0801d58d
 801d5f4:	0801d58d 	.word	0x0801d58d
 801d5f8:	0801d707 	.word	0x0801d707
 801d5fc:	680b      	ldr	r3, [r1, #0]
 801d5fe:	1d1a      	adds	r2, r3, #4
 801d600:	681b      	ldr	r3, [r3, #0]
 801d602:	600a      	str	r2, [r1, #0]
 801d604:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801d608:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801d60c:	2301      	movs	r3, #1
 801d60e:	e0a3      	b.n	801d758 <_printf_i+0x1f4>
 801d610:	6825      	ldr	r5, [r4, #0]
 801d612:	6808      	ldr	r0, [r1, #0]
 801d614:	062e      	lsls	r6, r5, #24
 801d616:	f100 0304 	add.w	r3, r0, #4
 801d61a:	d50a      	bpl.n	801d632 <_printf_i+0xce>
 801d61c:	6805      	ldr	r5, [r0, #0]
 801d61e:	600b      	str	r3, [r1, #0]
 801d620:	2d00      	cmp	r5, #0
 801d622:	da03      	bge.n	801d62c <_printf_i+0xc8>
 801d624:	232d      	movs	r3, #45	; 0x2d
 801d626:	426d      	negs	r5, r5
 801d628:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d62c:	485e      	ldr	r0, [pc, #376]	; (801d7a8 <_printf_i+0x244>)
 801d62e:	230a      	movs	r3, #10
 801d630:	e019      	b.n	801d666 <_printf_i+0x102>
 801d632:	f015 0f40 	tst.w	r5, #64	; 0x40
 801d636:	6805      	ldr	r5, [r0, #0]
 801d638:	600b      	str	r3, [r1, #0]
 801d63a:	bf18      	it	ne
 801d63c:	b22d      	sxthne	r5, r5
 801d63e:	e7ef      	b.n	801d620 <_printf_i+0xbc>
 801d640:	680b      	ldr	r3, [r1, #0]
 801d642:	6825      	ldr	r5, [r4, #0]
 801d644:	1d18      	adds	r0, r3, #4
 801d646:	6008      	str	r0, [r1, #0]
 801d648:	0628      	lsls	r0, r5, #24
 801d64a:	d501      	bpl.n	801d650 <_printf_i+0xec>
 801d64c:	681d      	ldr	r5, [r3, #0]
 801d64e:	e002      	b.n	801d656 <_printf_i+0xf2>
 801d650:	0669      	lsls	r1, r5, #25
 801d652:	d5fb      	bpl.n	801d64c <_printf_i+0xe8>
 801d654:	881d      	ldrh	r5, [r3, #0]
 801d656:	4854      	ldr	r0, [pc, #336]	; (801d7a8 <_printf_i+0x244>)
 801d658:	2f6f      	cmp	r7, #111	; 0x6f
 801d65a:	bf0c      	ite	eq
 801d65c:	2308      	moveq	r3, #8
 801d65e:	230a      	movne	r3, #10
 801d660:	2100      	movs	r1, #0
 801d662:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801d666:	6866      	ldr	r6, [r4, #4]
 801d668:	60a6      	str	r6, [r4, #8]
 801d66a:	2e00      	cmp	r6, #0
 801d66c:	bfa2      	ittt	ge
 801d66e:	6821      	ldrge	r1, [r4, #0]
 801d670:	f021 0104 	bicge.w	r1, r1, #4
 801d674:	6021      	strge	r1, [r4, #0]
 801d676:	b90d      	cbnz	r5, 801d67c <_printf_i+0x118>
 801d678:	2e00      	cmp	r6, #0
 801d67a:	d04d      	beq.n	801d718 <_printf_i+0x1b4>
 801d67c:	4616      	mov	r6, r2
 801d67e:	fbb5 f1f3 	udiv	r1, r5, r3
 801d682:	fb03 5711 	mls	r7, r3, r1, r5
 801d686:	5dc7      	ldrb	r7, [r0, r7]
 801d688:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801d68c:	462f      	mov	r7, r5
 801d68e:	42bb      	cmp	r3, r7
 801d690:	460d      	mov	r5, r1
 801d692:	d9f4      	bls.n	801d67e <_printf_i+0x11a>
 801d694:	2b08      	cmp	r3, #8
 801d696:	d10b      	bne.n	801d6b0 <_printf_i+0x14c>
 801d698:	6823      	ldr	r3, [r4, #0]
 801d69a:	07df      	lsls	r7, r3, #31
 801d69c:	d508      	bpl.n	801d6b0 <_printf_i+0x14c>
 801d69e:	6923      	ldr	r3, [r4, #16]
 801d6a0:	6861      	ldr	r1, [r4, #4]
 801d6a2:	4299      	cmp	r1, r3
 801d6a4:	bfde      	ittt	le
 801d6a6:	2330      	movle	r3, #48	; 0x30
 801d6a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 801d6ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 801d6b0:	1b92      	subs	r2, r2, r6
 801d6b2:	6122      	str	r2, [r4, #16]
 801d6b4:	f8cd a000 	str.w	sl, [sp]
 801d6b8:	464b      	mov	r3, r9
 801d6ba:	aa03      	add	r2, sp, #12
 801d6bc:	4621      	mov	r1, r4
 801d6be:	4640      	mov	r0, r8
 801d6c0:	f7ff fee2 	bl	801d488 <_printf_common>
 801d6c4:	3001      	adds	r0, #1
 801d6c6:	d14c      	bne.n	801d762 <_printf_i+0x1fe>
 801d6c8:	f04f 30ff 	mov.w	r0, #4294967295
 801d6cc:	b004      	add	sp, #16
 801d6ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d6d2:	4835      	ldr	r0, [pc, #212]	; (801d7a8 <_printf_i+0x244>)
 801d6d4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801d6d8:	6823      	ldr	r3, [r4, #0]
 801d6da:	680e      	ldr	r6, [r1, #0]
 801d6dc:	061f      	lsls	r7, r3, #24
 801d6de:	f856 5b04 	ldr.w	r5, [r6], #4
 801d6e2:	600e      	str	r6, [r1, #0]
 801d6e4:	d514      	bpl.n	801d710 <_printf_i+0x1ac>
 801d6e6:	07d9      	lsls	r1, r3, #31
 801d6e8:	bf44      	itt	mi
 801d6ea:	f043 0320 	orrmi.w	r3, r3, #32
 801d6ee:	6023      	strmi	r3, [r4, #0]
 801d6f0:	b91d      	cbnz	r5, 801d6fa <_printf_i+0x196>
 801d6f2:	6823      	ldr	r3, [r4, #0]
 801d6f4:	f023 0320 	bic.w	r3, r3, #32
 801d6f8:	6023      	str	r3, [r4, #0]
 801d6fa:	2310      	movs	r3, #16
 801d6fc:	e7b0      	b.n	801d660 <_printf_i+0xfc>
 801d6fe:	6823      	ldr	r3, [r4, #0]
 801d700:	f043 0320 	orr.w	r3, r3, #32
 801d704:	6023      	str	r3, [r4, #0]
 801d706:	2378      	movs	r3, #120	; 0x78
 801d708:	4828      	ldr	r0, [pc, #160]	; (801d7ac <_printf_i+0x248>)
 801d70a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801d70e:	e7e3      	b.n	801d6d8 <_printf_i+0x174>
 801d710:	065e      	lsls	r6, r3, #25
 801d712:	bf48      	it	mi
 801d714:	b2ad      	uxthmi	r5, r5
 801d716:	e7e6      	b.n	801d6e6 <_printf_i+0x182>
 801d718:	4616      	mov	r6, r2
 801d71a:	e7bb      	b.n	801d694 <_printf_i+0x130>
 801d71c:	680b      	ldr	r3, [r1, #0]
 801d71e:	6826      	ldr	r6, [r4, #0]
 801d720:	6960      	ldr	r0, [r4, #20]
 801d722:	1d1d      	adds	r5, r3, #4
 801d724:	600d      	str	r5, [r1, #0]
 801d726:	0635      	lsls	r5, r6, #24
 801d728:	681b      	ldr	r3, [r3, #0]
 801d72a:	d501      	bpl.n	801d730 <_printf_i+0x1cc>
 801d72c:	6018      	str	r0, [r3, #0]
 801d72e:	e002      	b.n	801d736 <_printf_i+0x1d2>
 801d730:	0671      	lsls	r1, r6, #25
 801d732:	d5fb      	bpl.n	801d72c <_printf_i+0x1c8>
 801d734:	8018      	strh	r0, [r3, #0]
 801d736:	2300      	movs	r3, #0
 801d738:	6123      	str	r3, [r4, #16]
 801d73a:	4616      	mov	r6, r2
 801d73c:	e7ba      	b.n	801d6b4 <_printf_i+0x150>
 801d73e:	680b      	ldr	r3, [r1, #0]
 801d740:	1d1a      	adds	r2, r3, #4
 801d742:	600a      	str	r2, [r1, #0]
 801d744:	681e      	ldr	r6, [r3, #0]
 801d746:	6862      	ldr	r2, [r4, #4]
 801d748:	2100      	movs	r1, #0
 801d74a:	4630      	mov	r0, r6
 801d74c:	f7e2 fd58 	bl	8000200 <memchr>
 801d750:	b108      	cbz	r0, 801d756 <_printf_i+0x1f2>
 801d752:	1b80      	subs	r0, r0, r6
 801d754:	6060      	str	r0, [r4, #4]
 801d756:	6863      	ldr	r3, [r4, #4]
 801d758:	6123      	str	r3, [r4, #16]
 801d75a:	2300      	movs	r3, #0
 801d75c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d760:	e7a8      	b.n	801d6b4 <_printf_i+0x150>
 801d762:	6923      	ldr	r3, [r4, #16]
 801d764:	4632      	mov	r2, r6
 801d766:	4649      	mov	r1, r9
 801d768:	4640      	mov	r0, r8
 801d76a:	47d0      	blx	sl
 801d76c:	3001      	adds	r0, #1
 801d76e:	d0ab      	beq.n	801d6c8 <_printf_i+0x164>
 801d770:	6823      	ldr	r3, [r4, #0]
 801d772:	079b      	lsls	r3, r3, #30
 801d774:	d413      	bmi.n	801d79e <_printf_i+0x23a>
 801d776:	68e0      	ldr	r0, [r4, #12]
 801d778:	9b03      	ldr	r3, [sp, #12]
 801d77a:	4298      	cmp	r0, r3
 801d77c:	bfb8      	it	lt
 801d77e:	4618      	movlt	r0, r3
 801d780:	e7a4      	b.n	801d6cc <_printf_i+0x168>
 801d782:	2301      	movs	r3, #1
 801d784:	4632      	mov	r2, r6
 801d786:	4649      	mov	r1, r9
 801d788:	4640      	mov	r0, r8
 801d78a:	47d0      	blx	sl
 801d78c:	3001      	adds	r0, #1
 801d78e:	d09b      	beq.n	801d6c8 <_printf_i+0x164>
 801d790:	3501      	adds	r5, #1
 801d792:	68e3      	ldr	r3, [r4, #12]
 801d794:	9903      	ldr	r1, [sp, #12]
 801d796:	1a5b      	subs	r3, r3, r1
 801d798:	42ab      	cmp	r3, r5
 801d79a:	dcf2      	bgt.n	801d782 <_printf_i+0x21e>
 801d79c:	e7eb      	b.n	801d776 <_printf_i+0x212>
 801d79e:	2500      	movs	r5, #0
 801d7a0:	f104 0619 	add.w	r6, r4, #25
 801d7a4:	e7f5      	b.n	801d792 <_printf_i+0x22e>
 801d7a6:	bf00      	nop
 801d7a8:	08023391 	.word	0x08023391
 801d7ac:	080233a2 	.word	0x080233a2

0801d7b0 <_sbrk_r>:
 801d7b0:	b538      	push	{r3, r4, r5, lr}
 801d7b2:	4d06      	ldr	r5, [pc, #24]	; (801d7cc <_sbrk_r+0x1c>)
 801d7b4:	2300      	movs	r3, #0
 801d7b6:	4604      	mov	r4, r0
 801d7b8:	4608      	mov	r0, r1
 801d7ba:	602b      	str	r3, [r5, #0]
 801d7bc:	f7e4 fc20 	bl	8002000 <_sbrk>
 801d7c0:	1c43      	adds	r3, r0, #1
 801d7c2:	d102      	bne.n	801d7ca <_sbrk_r+0x1a>
 801d7c4:	682b      	ldr	r3, [r5, #0]
 801d7c6:	b103      	cbz	r3, 801d7ca <_sbrk_r+0x1a>
 801d7c8:	6023      	str	r3, [r4, #0]
 801d7ca:	bd38      	pop	{r3, r4, r5, pc}
 801d7cc:	2000b638 	.word	0x2000b638

0801d7d0 <siscanf>:
 801d7d0:	b40e      	push	{r1, r2, r3}
 801d7d2:	b510      	push	{r4, lr}
 801d7d4:	b09f      	sub	sp, #124	; 0x7c
 801d7d6:	ac21      	add	r4, sp, #132	; 0x84
 801d7d8:	f44f 7101 	mov.w	r1, #516	; 0x204
 801d7dc:	f854 2b04 	ldr.w	r2, [r4], #4
 801d7e0:	9201      	str	r2, [sp, #4]
 801d7e2:	f8ad 101c 	strh.w	r1, [sp, #28]
 801d7e6:	9004      	str	r0, [sp, #16]
 801d7e8:	9008      	str	r0, [sp, #32]
 801d7ea:	f7e2 fcfb 	bl	80001e4 <strlen>
 801d7ee:	4b0c      	ldr	r3, [pc, #48]	; (801d820 <siscanf+0x50>)
 801d7f0:	9005      	str	r0, [sp, #20]
 801d7f2:	9009      	str	r0, [sp, #36]	; 0x24
 801d7f4:	930d      	str	r3, [sp, #52]	; 0x34
 801d7f6:	480b      	ldr	r0, [pc, #44]	; (801d824 <siscanf+0x54>)
 801d7f8:	9a01      	ldr	r2, [sp, #4]
 801d7fa:	6800      	ldr	r0, [r0, #0]
 801d7fc:	9403      	str	r4, [sp, #12]
 801d7fe:	2300      	movs	r3, #0
 801d800:	9311      	str	r3, [sp, #68]	; 0x44
 801d802:	9316      	str	r3, [sp, #88]	; 0x58
 801d804:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d808:	f8ad 301e 	strh.w	r3, [sp, #30]
 801d80c:	a904      	add	r1, sp, #16
 801d80e:	4623      	mov	r3, r4
 801d810:	f000 fb9a 	bl	801df48 <__ssvfiscanf_r>
 801d814:	b01f      	add	sp, #124	; 0x7c
 801d816:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d81a:	b003      	add	sp, #12
 801d81c:	4770      	bx	lr
 801d81e:	bf00      	nop
 801d820:	0801d84b 	.word	0x0801d84b
 801d824:	200001a0 	.word	0x200001a0

0801d828 <__sread>:
 801d828:	b510      	push	{r4, lr}
 801d82a:	460c      	mov	r4, r1
 801d82c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d830:	f000 fe4e 	bl	801e4d0 <_read_r>
 801d834:	2800      	cmp	r0, #0
 801d836:	bfab      	itete	ge
 801d838:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801d83a:	89a3      	ldrhlt	r3, [r4, #12]
 801d83c:	181b      	addge	r3, r3, r0
 801d83e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801d842:	bfac      	ite	ge
 801d844:	6563      	strge	r3, [r4, #84]	; 0x54
 801d846:	81a3      	strhlt	r3, [r4, #12]
 801d848:	bd10      	pop	{r4, pc}

0801d84a <__seofread>:
 801d84a:	2000      	movs	r0, #0
 801d84c:	4770      	bx	lr

0801d84e <__swrite>:
 801d84e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d852:	461f      	mov	r7, r3
 801d854:	898b      	ldrh	r3, [r1, #12]
 801d856:	05db      	lsls	r3, r3, #23
 801d858:	4605      	mov	r5, r0
 801d85a:	460c      	mov	r4, r1
 801d85c:	4616      	mov	r6, r2
 801d85e:	d505      	bpl.n	801d86c <__swrite+0x1e>
 801d860:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d864:	2302      	movs	r3, #2
 801d866:	2200      	movs	r2, #0
 801d868:	f000 fa6c 	bl	801dd44 <_lseek_r>
 801d86c:	89a3      	ldrh	r3, [r4, #12]
 801d86e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d872:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801d876:	81a3      	strh	r3, [r4, #12]
 801d878:	4632      	mov	r2, r6
 801d87a:	463b      	mov	r3, r7
 801d87c:	4628      	mov	r0, r5
 801d87e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d882:	f000 b8f9 	b.w	801da78 <_write_r>

0801d886 <__sseek>:
 801d886:	b510      	push	{r4, lr}
 801d888:	460c      	mov	r4, r1
 801d88a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d88e:	f000 fa59 	bl	801dd44 <_lseek_r>
 801d892:	1c43      	adds	r3, r0, #1
 801d894:	89a3      	ldrh	r3, [r4, #12]
 801d896:	bf15      	itete	ne
 801d898:	6560      	strne	r0, [r4, #84]	; 0x54
 801d89a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801d89e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801d8a2:	81a3      	strheq	r3, [r4, #12]
 801d8a4:	bf18      	it	ne
 801d8a6:	81a3      	strhne	r3, [r4, #12]
 801d8a8:	bd10      	pop	{r4, pc}

0801d8aa <__sclose>:
 801d8aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d8ae:	f000 b96b 	b.w	801db88 <_close_r>

0801d8b2 <strcpy>:
 801d8b2:	4603      	mov	r3, r0
 801d8b4:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d8b8:	f803 2b01 	strb.w	r2, [r3], #1
 801d8bc:	2a00      	cmp	r2, #0
 801d8be:	d1f9      	bne.n	801d8b4 <strcpy+0x2>
 801d8c0:	4770      	bx	lr
	...

0801d8c4 <_strtoul_l.isra.0>:
 801d8c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d8c8:	4e3b      	ldr	r6, [pc, #236]	; (801d9b8 <_strtoul_l.isra.0+0xf4>)
 801d8ca:	4686      	mov	lr, r0
 801d8cc:	468c      	mov	ip, r1
 801d8ce:	4660      	mov	r0, ip
 801d8d0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801d8d4:	5da5      	ldrb	r5, [r4, r6]
 801d8d6:	f015 0508 	ands.w	r5, r5, #8
 801d8da:	d1f8      	bne.n	801d8ce <_strtoul_l.isra.0+0xa>
 801d8dc:	2c2d      	cmp	r4, #45	; 0x2d
 801d8de:	d134      	bne.n	801d94a <_strtoul_l.isra.0+0x86>
 801d8e0:	f89c 4000 	ldrb.w	r4, [ip]
 801d8e4:	f04f 0801 	mov.w	r8, #1
 801d8e8:	f100 0c02 	add.w	ip, r0, #2
 801d8ec:	2b00      	cmp	r3, #0
 801d8ee:	d05e      	beq.n	801d9ae <_strtoul_l.isra.0+0xea>
 801d8f0:	2b10      	cmp	r3, #16
 801d8f2:	d10c      	bne.n	801d90e <_strtoul_l.isra.0+0x4a>
 801d8f4:	2c30      	cmp	r4, #48	; 0x30
 801d8f6:	d10a      	bne.n	801d90e <_strtoul_l.isra.0+0x4a>
 801d8f8:	f89c 0000 	ldrb.w	r0, [ip]
 801d8fc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801d900:	2858      	cmp	r0, #88	; 0x58
 801d902:	d14f      	bne.n	801d9a4 <_strtoul_l.isra.0+0xe0>
 801d904:	f89c 4001 	ldrb.w	r4, [ip, #1]
 801d908:	2310      	movs	r3, #16
 801d90a:	f10c 0c02 	add.w	ip, ip, #2
 801d90e:	f04f 37ff 	mov.w	r7, #4294967295
 801d912:	2500      	movs	r5, #0
 801d914:	fbb7 f7f3 	udiv	r7, r7, r3
 801d918:	fb03 f907 	mul.w	r9, r3, r7
 801d91c:	ea6f 0909 	mvn.w	r9, r9
 801d920:	4628      	mov	r0, r5
 801d922:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 801d926:	2e09      	cmp	r6, #9
 801d928:	d818      	bhi.n	801d95c <_strtoul_l.isra.0+0x98>
 801d92a:	4634      	mov	r4, r6
 801d92c:	42a3      	cmp	r3, r4
 801d92e:	dd24      	ble.n	801d97a <_strtoul_l.isra.0+0xb6>
 801d930:	2d00      	cmp	r5, #0
 801d932:	db1f      	blt.n	801d974 <_strtoul_l.isra.0+0xb0>
 801d934:	4287      	cmp	r7, r0
 801d936:	d31d      	bcc.n	801d974 <_strtoul_l.isra.0+0xb0>
 801d938:	d101      	bne.n	801d93e <_strtoul_l.isra.0+0x7a>
 801d93a:	45a1      	cmp	r9, r4
 801d93c:	db1a      	blt.n	801d974 <_strtoul_l.isra.0+0xb0>
 801d93e:	fb00 4003 	mla	r0, r0, r3, r4
 801d942:	2501      	movs	r5, #1
 801d944:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801d948:	e7eb      	b.n	801d922 <_strtoul_l.isra.0+0x5e>
 801d94a:	2c2b      	cmp	r4, #43	; 0x2b
 801d94c:	bf08      	it	eq
 801d94e:	f89c 4000 	ldrbeq.w	r4, [ip]
 801d952:	46a8      	mov	r8, r5
 801d954:	bf08      	it	eq
 801d956:	f100 0c02 	addeq.w	ip, r0, #2
 801d95a:	e7c7      	b.n	801d8ec <_strtoul_l.isra.0+0x28>
 801d95c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 801d960:	2e19      	cmp	r6, #25
 801d962:	d801      	bhi.n	801d968 <_strtoul_l.isra.0+0xa4>
 801d964:	3c37      	subs	r4, #55	; 0x37
 801d966:	e7e1      	b.n	801d92c <_strtoul_l.isra.0+0x68>
 801d968:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 801d96c:	2e19      	cmp	r6, #25
 801d96e:	d804      	bhi.n	801d97a <_strtoul_l.isra.0+0xb6>
 801d970:	3c57      	subs	r4, #87	; 0x57
 801d972:	e7db      	b.n	801d92c <_strtoul_l.isra.0+0x68>
 801d974:	f04f 35ff 	mov.w	r5, #4294967295
 801d978:	e7e4      	b.n	801d944 <_strtoul_l.isra.0+0x80>
 801d97a:	2d00      	cmp	r5, #0
 801d97c:	da07      	bge.n	801d98e <_strtoul_l.isra.0+0xca>
 801d97e:	2322      	movs	r3, #34	; 0x22
 801d980:	f8ce 3000 	str.w	r3, [lr]
 801d984:	f04f 30ff 	mov.w	r0, #4294967295
 801d988:	b942      	cbnz	r2, 801d99c <_strtoul_l.isra.0+0xd8>
 801d98a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d98e:	f1b8 0f00 	cmp.w	r8, #0
 801d992:	d000      	beq.n	801d996 <_strtoul_l.isra.0+0xd2>
 801d994:	4240      	negs	r0, r0
 801d996:	2a00      	cmp	r2, #0
 801d998:	d0f7      	beq.n	801d98a <_strtoul_l.isra.0+0xc6>
 801d99a:	b10d      	cbz	r5, 801d9a0 <_strtoul_l.isra.0+0xdc>
 801d99c:	f10c 31ff 	add.w	r1, ip, #4294967295
 801d9a0:	6011      	str	r1, [r2, #0]
 801d9a2:	e7f2      	b.n	801d98a <_strtoul_l.isra.0+0xc6>
 801d9a4:	2430      	movs	r4, #48	; 0x30
 801d9a6:	2b00      	cmp	r3, #0
 801d9a8:	d1b1      	bne.n	801d90e <_strtoul_l.isra.0+0x4a>
 801d9aa:	2308      	movs	r3, #8
 801d9ac:	e7af      	b.n	801d90e <_strtoul_l.isra.0+0x4a>
 801d9ae:	2c30      	cmp	r4, #48	; 0x30
 801d9b0:	d0a2      	beq.n	801d8f8 <_strtoul_l.isra.0+0x34>
 801d9b2:	230a      	movs	r3, #10
 801d9b4:	e7ab      	b.n	801d90e <_strtoul_l.isra.0+0x4a>
 801d9b6:	bf00      	nop
 801d9b8:	08023069 	.word	0x08023069

0801d9bc <_strtoul_r>:
 801d9bc:	f7ff bf82 	b.w	801d8c4 <_strtoul_l.isra.0>

0801d9c0 <strtoul>:
 801d9c0:	4613      	mov	r3, r2
 801d9c2:	460a      	mov	r2, r1
 801d9c4:	4601      	mov	r1, r0
 801d9c6:	4802      	ldr	r0, [pc, #8]	; (801d9d0 <strtoul+0x10>)
 801d9c8:	6800      	ldr	r0, [r0, #0]
 801d9ca:	f7ff bf7b 	b.w	801d8c4 <_strtoul_l.isra.0>
 801d9ce:	bf00      	nop
 801d9d0:	200001a0 	.word	0x200001a0

0801d9d4 <__swbuf_r>:
 801d9d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d9d6:	460e      	mov	r6, r1
 801d9d8:	4614      	mov	r4, r2
 801d9da:	4605      	mov	r5, r0
 801d9dc:	b118      	cbz	r0, 801d9e6 <__swbuf_r+0x12>
 801d9de:	6983      	ldr	r3, [r0, #24]
 801d9e0:	b90b      	cbnz	r3, 801d9e6 <__swbuf_r+0x12>
 801d9e2:	f7ff fa41 	bl	801ce68 <__sinit>
 801d9e6:	4b21      	ldr	r3, [pc, #132]	; (801da6c <__swbuf_r+0x98>)
 801d9e8:	429c      	cmp	r4, r3
 801d9ea:	d12b      	bne.n	801da44 <__swbuf_r+0x70>
 801d9ec:	686c      	ldr	r4, [r5, #4]
 801d9ee:	69a3      	ldr	r3, [r4, #24]
 801d9f0:	60a3      	str	r3, [r4, #8]
 801d9f2:	89a3      	ldrh	r3, [r4, #12]
 801d9f4:	071a      	lsls	r2, r3, #28
 801d9f6:	d52f      	bpl.n	801da58 <__swbuf_r+0x84>
 801d9f8:	6923      	ldr	r3, [r4, #16]
 801d9fa:	b36b      	cbz	r3, 801da58 <__swbuf_r+0x84>
 801d9fc:	6923      	ldr	r3, [r4, #16]
 801d9fe:	6820      	ldr	r0, [r4, #0]
 801da00:	1ac0      	subs	r0, r0, r3
 801da02:	6963      	ldr	r3, [r4, #20]
 801da04:	b2f6      	uxtb	r6, r6
 801da06:	4283      	cmp	r3, r0
 801da08:	4637      	mov	r7, r6
 801da0a:	dc04      	bgt.n	801da16 <__swbuf_r+0x42>
 801da0c:	4621      	mov	r1, r4
 801da0e:	4628      	mov	r0, r5
 801da10:	f000 f95c 	bl	801dccc <_fflush_r>
 801da14:	bb30      	cbnz	r0, 801da64 <__swbuf_r+0x90>
 801da16:	68a3      	ldr	r3, [r4, #8]
 801da18:	3b01      	subs	r3, #1
 801da1a:	60a3      	str	r3, [r4, #8]
 801da1c:	6823      	ldr	r3, [r4, #0]
 801da1e:	1c5a      	adds	r2, r3, #1
 801da20:	6022      	str	r2, [r4, #0]
 801da22:	701e      	strb	r6, [r3, #0]
 801da24:	6963      	ldr	r3, [r4, #20]
 801da26:	3001      	adds	r0, #1
 801da28:	4283      	cmp	r3, r0
 801da2a:	d004      	beq.n	801da36 <__swbuf_r+0x62>
 801da2c:	89a3      	ldrh	r3, [r4, #12]
 801da2e:	07db      	lsls	r3, r3, #31
 801da30:	d506      	bpl.n	801da40 <__swbuf_r+0x6c>
 801da32:	2e0a      	cmp	r6, #10
 801da34:	d104      	bne.n	801da40 <__swbuf_r+0x6c>
 801da36:	4621      	mov	r1, r4
 801da38:	4628      	mov	r0, r5
 801da3a:	f000 f947 	bl	801dccc <_fflush_r>
 801da3e:	b988      	cbnz	r0, 801da64 <__swbuf_r+0x90>
 801da40:	4638      	mov	r0, r7
 801da42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801da44:	4b0a      	ldr	r3, [pc, #40]	; (801da70 <__swbuf_r+0x9c>)
 801da46:	429c      	cmp	r4, r3
 801da48:	d101      	bne.n	801da4e <__swbuf_r+0x7a>
 801da4a:	68ac      	ldr	r4, [r5, #8]
 801da4c:	e7cf      	b.n	801d9ee <__swbuf_r+0x1a>
 801da4e:	4b09      	ldr	r3, [pc, #36]	; (801da74 <__swbuf_r+0xa0>)
 801da50:	429c      	cmp	r4, r3
 801da52:	bf08      	it	eq
 801da54:	68ec      	ldreq	r4, [r5, #12]
 801da56:	e7ca      	b.n	801d9ee <__swbuf_r+0x1a>
 801da58:	4621      	mov	r1, r4
 801da5a:	4628      	mov	r0, r5
 801da5c:	f000 f81e 	bl	801da9c <__swsetup_r>
 801da60:	2800      	cmp	r0, #0
 801da62:	d0cb      	beq.n	801d9fc <__swbuf_r+0x28>
 801da64:	f04f 37ff 	mov.w	r7, #4294967295
 801da68:	e7ea      	b.n	801da40 <__swbuf_r+0x6c>
 801da6a:	bf00      	nop
 801da6c:	08023340 	.word	0x08023340
 801da70:	08023360 	.word	0x08023360
 801da74:	08023320 	.word	0x08023320

0801da78 <_write_r>:
 801da78:	b538      	push	{r3, r4, r5, lr}
 801da7a:	4d07      	ldr	r5, [pc, #28]	; (801da98 <_write_r+0x20>)
 801da7c:	4604      	mov	r4, r0
 801da7e:	4608      	mov	r0, r1
 801da80:	4611      	mov	r1, r2
 801da82:	2200      	movs	r2, #0
 801da84:	602a      	str	r2, [r5, #0]
 801da86:	461a      	mov	r2, r3
 801da88:	f7e4 fa69 	bl	8001f5e <_write>
 801da8c:	1c43      	adds	r3, r0, #1
 801da8e:	d102      	bne.n	801da96 <_write_r+0x1e>
 801da90:	682b      	ldr	r3, [r5, #0]
 801da92:	b103      	cbz	r3, 801da96 <_write_r+0x1e>
 801da94:	6023      	str	r3, [r4, #0]
 801da96:	bd38      	pop	{r3, r4, r5, pc}
 801da98:	2000b638 	.word	0x2000b638

0801da9c <__swsetup_r>:
 801da9c:	4b32      	ldr	r3, [pc, #200]	; (801db68 <__swsetup_r+0xcc>)
 801da9e:	b570      	push	{r4, r5, r6, lr}
 801daa0:	681d      	ldr	r5, [r3, #0]
 801daa2:	4606      	mov	r6, r0
 801daa4:	460c      	mov	r4, r1
 801daa6:	b125      	cbz	r5, 801dab2 <__swsetup_r+0x16>
 801daa8:	69ab      	ldr	r3, [r5, #24]
 801daaa:	b913      	cbnz	r3, 801dab2 <__swsetup_r+0x16>
 801daac:	4628      	mov	r0, r5
 801daae:	f7ff f9db 	bl	801ce68 <__sinit>
 801dab2:	4b2e      	ldr	r3, [pc, #184]	; (801db6c <__swsetup_r+0xd0>)
 801dab4:	429c      	cmp	r4, r3
 801dab6:	d10f      	bne.n	801dad8 <__swsetup_r+0x3c>
 801dab8:	686c      	ldr	r4, [r5, #4]
 801daba:	89a3      	ldrh	r3, [r4, #12]
 801dabc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801dac0:	0719      	lsls	r1, r3, #28
 801dac2:	d42c      	bmi.n	801db1e <__swsetup_r+0x82>
 801dac4:	06dd      	lsls	r5, r3, #27
 801dac6:	d411      	bmi.n	801daec <__swsetup_r+0x50>
 801dac8:	2309      	movs	r3, #9
 801daca:	6033      	str	r3, [r6, #0]
 801dacc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801dad0:	81a3      	strh	r3, [r4, #12]
 801dad2:	f04f 30ff 	mov.w	r0, #4294967295
 801dad6:	e03e      	b.n	801db56 <__swsetup_r+0xba>
 801dad8:	4b25      	ldr	r3, [pc, #148]	; (801db70 <__swsetup_r+0xd4>)
 801dada:	429c      	cmp	r4, r3
 801dadc:	d101      	bne.n	801dae2 <__swsetup_r+0x46>
 801dade:	68ac      	ldr	r4, [r5, #8]
 801dae0:	e7eb      	b.n	801daba <__swsetup_r+0x1e>
 801dae2:	4b24      	ldr	r3, [pc, #144]	; (801db74 <__swsetup_r+0xd8>)
 801dae4:	429c      	cmp	r4, r3
 801dae6:	bf08      	it	eq
 801dae8:	68ec      	ldreq	r4, [r5, #12]
 801daea:	e7e6      	b.n	801daba <__swsetup_r+0x1e>
 801daec:	0758      	lsls	r0, r3, #29
 801daee:	d512      	bpl.n	801db16 <__swsetup_r+0x7a>
 801daf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801daf2:	b141      	cbz	r1, 801db06 <__swsetup_r+0x6a>
 801daf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801daf8:	4299      	cmp	r1, r3
 801dafa:	d002      	beq.n	801db02 <__swsetup_r+0x66>
 801dafc:	4630      	mov	r0, r6
 801dafe:	f7ff fabf 	bl	801d080 <_free_r>
 801db02:	2300      	movs	r3, #0
 801db04:	6363      	str	r3, [r4, #52]	; 0x34
 801db06:	89a3      	ldrh	r3, [r4, #12]
 801db08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801db0c:	81a3      	strh	r3, [r4, #12]
 801db0e:	2300      	movs	r3, #0
 801db10:	6063      	str	r3, [r4, #4]
 801db12:	6923      	ldr	r3, [r4, #16]
 801db14:	6023      	str	r3, [r4, #0]
 801db16:	89a3      	ldrh	r3, [r4, #12]
 801db18:	f043 0308 	orr.w	r3, r3, #8
 801db1c:	81a3      	strh	r3, [r4, #12]
 801db1e:	6923      	ldr	r3, [r4, #16]
 801db20:	b94b      	cbnz	r3, 801db36 <__swsetup_r+0x9a>
 801db22:	89a3      	ldrh	r3, [r4, #12]
 801db24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801db28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801db2c:	d003      	beq.n	801db36 <__swsetup_r+0x9a>
 801db2e:	4621      	mov	r1, r4
 801db30:	4630      	mov	r0, r6
 801db32:	f000 f93d 	bl	801ddb0 <__smakebuf_r>
 801db36:	89a0      	ldrh	r0, [r4, #12]
 801db38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801db3c:	f010 0301 	ands.w	r3, r0, #1
 801db40:	d00a      	beq.n	801db58 <__swsetup_r+0xbc>
 801db42:	2300      	movs	r3, #0
 801db44:	60a3      	str	r3, [r4, #8]
 801db46:	6963      	ldr	r3, [r4, #20]
 801db48:	425b      	negs	r3, r3
 801db4a:	61a3      	str	r3, [r4, #24]
 801db4c:	6923      	ldr	r3, [r4, #16]
 801db4e:	b943      	cbnz	r3, 801db62 <__swsetup_r+0xc6>
 801db50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801db54:	d1ba      	bne.n	801dacc <__swsetup_r+0x30>
 801db56:	bd70      	pop	{r4, r5, r6, pc}
 801db58:	0781      	lsls	r1, r0, #30
 801db5a:	bf58      	it	pl
 801db5c:	6963      	ldrpl	r3, [r4, #20]
 801db5e:	60a3      	str	r3, [r4, #8]
 801db60:	e7f4      	b.n	801db4c <__swsetup_r+0xb0>
 801db62:	2000      	movs	r0, #0
 801db64:	e7f7      	b.n	801db56 <__swsetup_r+0xba>
 801db66:	bf00      	nop
 801db68:	200001a0 	.word	0x200001a0
 801db6c:	08023340 	.word	0x08023340
 801db70:	08023360 	.word	0x08023360
 801db74:	08023320 	.word	0x08023320

0801db78 <abort>:
 801db78:	b508      	push	{r3, lr}
 801db7a:	2006      	movs	r0, #6
 801db7c:	f000 fd1c 	bl	801e5b8 <raise>
 801db80:	2001      	movs	r0, #1
 801db82:	f7e4 f9c5 	bl	8001f10 <_exit>
	...

0801db88 <_close_r>:
 801db88:	b538      	push	{r3, r4, r5, lr}
 801db8a:	4d06      	ldr	r5, [pc, #24]	; (801dba4 <_close_r+0x1c>)
 801db8c:	2300      	movs	r3, #0
 801db8e:	4604      	mov	r4, r0
 801db90:	4608      	mov	r0, r1
 801db92:	602b      	str	r3, [r5, #0]
 801db94:	f7e4 f9ff 	bl	8001f96 <_close>
 801db98:	1c43      	adds	r3, r0, #1
 801db9a:	d102      	bne.n	801dba2 <_close_r+0x1a>
 801db9c:	682b      	ldr	r3, [r5, #0]
 801db9e:	b103      	cbz	r3, 801dba2 <_close_r+0x1a>
 801dba0:	6023      	str	r3, [r4, #0]
 801dba2:	bd38      	pop	{r3, r4, r5, pc}
 801dba4:	2000b638 	.word	0x2000b638

0801dba8 <__env_lock>:
 801dba8:	4801      	ldr	r0, [pc, #4]	; (801dbb0 <__env_lock+0x8>)
 801dbaa:	f7ff ba55 	b.w	801d058 <__retarget_lock_acquire_recursive>
 801dbae:	bf00      	nop
 801dbb0:	2000cf1a 	.word	0x2000cf1a

0801dbb4 <__env_unlock>:
 801dbb4:	4801      	ldr	r0, [pc, #4]	; (801dbbc <__env_unlock+0x8>)
 801dbb6:	f7ff ba51 	b.w	801d05c <__retarget_lock_release_recursive>
 801dbba:	bf00      	nop
 801dbbc:	2000cf1a 	.word	0x2000cf1a

0801dbc0 <__sflush_r>:
 801dbc0:	898a      	ldrh	r2, [r1, #12]
 801dbc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dbc6:	4605      	mov	r5, r0
 801dbc8:	0710      	lsls	r0, r2, #28
 801dbca:	460c      	mov	r4, r1
 801dbcc:	d458      	bmi.n	801dc80 <__sflush_r+0xc0>
 801dbce:	684b      	ldr	r3, [r1, #4]
 801dbd0:	2b00      	cmp	r3, #0
 801dbd2:	dc05      	bgt.n	801dbe0 <__sflush_r+0x20>
 801dbd4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801dbd6:	2b00      	cmp	r3, #0
 801dbd8:	dc02      	bgt.n	801dbe0 <__sflush_r+0x20>
 801dbda:	2000      	movs	r0, #0
 801dbdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dbe0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801dbe2:	2e00      	cmp	r6, #0
 801dbe4:	d0f9      	beq.n	801dbda <__sflush_r+0x1a>
 801dbe6:	2300      	movs	r3, #0
 801dbe8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801dbec:	682f      	ldr	r7, [r5, #0]
 801dbee:	602b      	str	r3, [r5, #0]
 801dbf0:	d032      	beq.n	801dc58 <__sflush_r+0x98>
 801dbf2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801dbf4:	89a3      	ldrh	r3, [r4, #12]
 801dbf6:	075a      	lsls	r2, r3, #29
 801dbf8:	d505      	bpl.n	801dc06 <__sflush_r+0x46>
 801dbfa:	6863      	ldr	r3, [r4, #4]
 801dbfc:	1ac0      	subs	r0, r0, r3
 801dbfe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801dc00:	b10b      	cbz	r3, 801dc06 <__sflush_r+0x46>
 801dc02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801dc04:	1ac0      	subs	r0, r0, r3
 801dc06:	2300      	movs	r3, #0
 801dc08:	4602      	mov	r2, r0
 801dc0a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801dc0c:	6a21      	ldr	r1, [r4, #32]
 801dc0e:	4628      	mov	r0, r5
 801dc10:	47b0      	blx	r6
 801dc12:	1c43      	adds	r3, r0, #1
 801dc14:	89a3      	ldrh	r3, [r4, #12]
 801dc16:	d106      	bne.n	801dc26 <__sflush_r+0x66>
 801dc18:	6829      	ldr	r1, [r5, #0]
 801dc1a:	291d      	cmp	r1, #29
 801dc1c:	d82c      	bhi.n	801dc78 <__sflush_r+0xb8>
 801dc1e:	4a2a      	ldr	r2, [pc, #168]	; (801dcc8 <__sflush_r+0x108>)
 801dc20:	40ca      	lsrs	r2, r1
 801dc22:	07d6      	lsls	r6, r2, #31
 801dc24:	d528      	bpl.n	801dc78 <__sflush_r+0xb8>
 801dc26:	2200      	movs	r2, #0
 801dc28:	6062      	str	r2, [r4, #4]
 801dc2a:	04d9      	lsls	r1, r3, #19
 801dc2c:	6922      	ldr	r2, [r4, #16]
 801dc2e:	6022      	str	r2, [r4, #0]
 801dc30:	d504      	bpl.n	801dc3c <__sflush_r+0x7c>
 801dc32:	1c42      	adds	r2, r0, #1
 801dc34:	d101      	bne.n	801dc3a <__sflush_r+0x7a>
 801dc36:	682b      	ldr	r3, [r5, #0]
 801dc38:	b903      	cbnz	r3, 801dc3c <__sflush_r+0x7c>
 801dc3a:	6560      	str	r0, [r4, #84]	; 0x54
 801dc3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801dc3e:	602f      	str	r7, [r5, #0]
 801dc40:	2900      	cmp	r1, #0
 801dc42:	d0ca      	beq.n	801dbda <__sflush_r+0x1a>
 801dc44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801dc48:	4299      	cmp	r1, r3
 801dc4a:	d002      	beq.n	801dc52 <__sflush_r+0x92>
 801dc4c:	4628      	mov	r0, r5
 801dc4e:	f7ff fa17 	bl	801d080 <_free_r>
 801dc52:	2000      	movs	r0, #0
 801dc54:	6360      	str	r0, [r4, #52]	; 0x34
 801dc56:	e7c1      	b.n	801dbdc <__sflush_r+0x1c>
 801dc58:	6a21      	ldr	r1, [r4, #32]
 801dc5a:	2301      	movs	r3, #1
 801dc5c:	4628      	mov	r0, r5
 801dc5e:	47b0      	blx	r6
 801dc60:	1c41      	adds	r1, r0, #1
 801dc62:	d1c7      	bne.n	801dbf4 <__sflush_r+0x34>
 801dc64:	682b      	ldr	r3, [r5, #0]
 801dc66:	2b00      	cmp	r3, #0
 801dc68:	d0c4      	beq.n	801dbf4 <__sflush_r+0x34>
 801dc6a:	2b1d      	cmp	r3, #29
 801dc6c:	d001      	beq.n	801dc72 <__sflush_r+0xb2>
 801dc6e:	2b16      	cmp	r3, #22
 801dc70:	d101      	bne.n	801dc76 <__sflush_r+0xb6>
 801dc72:	602f      	str	r7, [r5, #0]
 801dc74:	e7b1      	b.n	801dbda <__sflush_r+0x1a>
 801dc76:	89a3      	ldrh	r3, [r4, #12]
 801dc78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dc7c:	81a3      	strh	r3, [r4, #12]
 801dc7e:	e7ad      	b.n	801dbdc <__sflush_r+0x1c>
 801dc80:	690f      	ldr	r7, [r1, #16]
 801dc82:	2f00      	cmp	r7, #0
 801dc84:	d0a9      	beq.n	801dbda <__sflush_r+0x1a>
 801dc86:	0793      	lsls	r3, r2, #30
 801dc88:	680e      	ldr	r6, [r1, #0]
 801dc8a:	bf08      	it	eq
 801dc8c:	694b      	ldreq	r3, [r1, #20]
 801dc8e:	600f      	str	r7, [r1, #0]
 801dc90:	bf18      	it	ne
 801dc92:	2300      	movne	r3, #0
 801dc94:	eba6 0807 	sub.w	r8, r6, r7
 801dc98:	608b      	str	r3, [r1, #8]
 801dc9a:	f1b8 0f00 	cmp.w	r8, #0
 801dc9e:	dd9c      	ble.n	801dbda <__sflush_r+0x1a>
 801dca0:	6a21      	ldr	r1, [r4, #32]
 801dca2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801dca4:	4643      	mov	r3, r8
 801dca6:	463a      	mov	r2, r7
 801dca8:	4628      	mov	r0, r5
 801dcaa:	47b0      	blx	r6
 801dcac:	2800      	cmp	r0, #0
 801dcae:	dc06      	bgt.n	801dcbe <__sflush_r+0xfe>
 801dcb0:	89a3      	ldrh	r3, [r4, #12]
 801dcb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dcb6:	81a3      	strh	r3, [r4, #12]
 801dcb8:	f04f 30ff 	mov.w	r0, #4294967295
 801dcbc:	e78e      	b.n	801dbdc <__sflush_r+0x1c>
 801dcbe:	4407      	add	r7, r0
 801dcc0:	eba8 0800 	sub.w	r8, r8, r0
 801dcc4:	e7e9      	b.n	801dc9a <__sflush_r+0xda>
 801dcc6:	bf00      	nop
 801dcc8:	20400001 	.word	0x20400001

0801dccc <_fflush_r>:
 801dccc:	b538      	push	{r3, r4, r5, lr}
 801dcce:	690b      	ldr	r3, [r1, #16]
 801dcd0:	4605      	mov	r5, r0
 801dcd2:	460c      	mov	r4, r1
 801dcd4:	b913      	cbnz	r3, 801dcdc <_fflush_r+0x10>
 801dcd6:	2500      	movs	r5, #0
 801dcd8:	4628      	mov	r0, r5
 801dcda:	bd38      	pop	{r3, r4, r5, pc}
 801dcdc:	b118      	cbz	r0, 801dce6 <_fflush_r+0x1a>
 801dcde:	6983      	ldr	r3, [r0, #24]
 801dce0:	b90b      	cbnz	r3, 801dce6 <_fflush_r+0x1a>
 801dce2:	f7ff f8c1 	bl	801ce68 <__sinit>
 801dce6:	4b14      	ldr	r3, [pc, #80]	; (801dd38 <_fflush_r+0x6c>)
 801dce8:	429c      	cmp	r4, r3
 801dcea:	d11b      	bne.n	801dd24 <_fflush_r+0x58>
 801dcec:	686c      	ldr	r4, [r5, #4]
 801dcee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dcf2:	2b00      	cmp	r3, #0
 801dcf4:	d0ef      	beq.n	801dcd6 <_fflush_r+0xa>
 801dcf6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801dcf8:	07d0      	lsls	r0, r2, #31
 801dcfa:	d404      	bmi.n	801dd06 <_fflush_r+0x3a>
 801dcfc:	0599      	lsls	r1, r3, #22
 801dcfe:	d402      	bmi.n	801dd06 <_fflush_r+0x3a>
 801dd00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dd02:	f7ff f9a9 	bl	801d058 <__retarget_lock_acquire_recursive>
 801dd06:	4628      	mov	r0, r5
 801dd08:	4621      	mov	r1, r4
 801dd0a:	f7ff ff59 	bl	801dbc0 <__sflush_r>
 801dd0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801dd10:	07da      	lsls	r2, r3, #31
 801dd12:	4605      	mov	r5, r0
 801dd14:	d4e0      	bmi.n	801dcd8 <_fflush_r+0xc>
 801dd16:	89a3      	ldrh	r3, [r4, #12]
 801dd18:	059b      	lsls	r3, r3, #22
 801dd1a:	d4dd      	bmi.n	801dcd8 <_fflush_r+0xc>
 801dd1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dd1e:	f7ff f99d 	bl	801d05c <__retarget_lock_release_recursive>
 801dd22:	e7d9      	b.n	801dcd8 <_fflush_r+0xc>
 801dd24:	4b05      	ldr	r3, [pc, #20]	; (801dd3c <_fflush_r+0x70>)
 801dd26:	429c      	cmp	r4, r3
 801dd28:	d101      	bne.n	801dd2e <_fflush_r+0x62>
 801dd2a:	68ac      	ldr	r4, [r5, #8]
 801dd2c:	e7df      	b.n	801dcee <_fflush_r+0x22>
 801dd2e:	4b04      	ldr	r3, [pc, #16]	; (801dd40 <_fflush_r+0x74>)
 801dd30:	429c      	cmp	r4, r3
 801dd32:	bf08      	it	eq
 801dd34:	68ec      	ldreq	r4, [r5, #12]
 801dd36:	e7da      	b.n	801dcee <_fflush_r+0x22>
 801dd38:	08023340 	.word	0x08023340
 801dd3c:	08023360 	.word	0x08023360
 801dd40:	08023320 	.word	0x08023320

0801dd44 <_lseek_r>:
 801dd44:	b538      	push	{r3, r4, r5, lr}
 801dd46:	4d07      	ldr	r5, [pc, #28]	; (801dd64 <_lseek_r+0x20>)
 801dd48:	4604      	mov	r4, r0
 801dd4a:	4608      	mov	r0, r1
 801dd4c:	4611      	mov	r1, r2
 801dd4e:	2200      	movs	r2, #0
 801dd50:	602a      	str	r2, [r5, #0]
 801dd52:	461a      	mov	r2, r3
 801dd54:	f7e4 f946 	bl	8001fe4 <_lseek>
 801dd58:	1c43      	adds	r3, r0, #1
 801dd5a:	d102      	bne.n	801dd62 <_lseek_r+0x1e>
 801dd5c:	682b      	ldr	r3, [r5, #0]
 801dd5e:	b103      	cbz	r3, 801dd62 <_lseek_r+0x1e>
 801dd60:	6023      	str	r3, [r4, #0]
 801dd62:	bd38      	pop	{r3, r4, r5, pc}
 801dd64:	2000b638 	.word	0x2000b638

0801dd68 <__swhatbuf_r>:
 801dd68:	b570      	push	{r4, r5, r6, lr}
 801dd6a:	460e      	mov	r6, r1
 801dd6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dd70:	2900      	cmp	r1, #0
 801dd72:	b096      	sub	sp, #88	; 0x58
 801dd74:	4614      	mov	r4, r2
 801dd76:	461d      	mov	r5, r3
 801dd78:	da07      	bge.n	801dd8a <__swhatbuf_r+0x22>
 801dd7a:	2300      	movs	r3, #0
 801dd7c:	602b      	str	r3, [r5, #0]
 801dd7e:	89b3      	ldrh	r3, [r6, #12]
 801dd80:	061a      	lsls	r2, r3, #24
 801dd82:	d410      	bmi.n	801dda6 <__swhatbuf_r+0x3e>
 801dd84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801dd88:	e00e      	b.n	801dda8 <__swhatbuf_r+0x40>
 801dd8a:	466a      	mov	r2, sp
 801dd8c:	f000 fc6a 	bl	801e664 <_fstat_r>
 801dd90:	2800      	cmp	r0, #0
 801dd92:	dbf2      	blt.n	801dd7a <__swhatbuf_r+0x12>
 801dd94:	9a01      	ldr	r2, [sp, #4]
 801dd96:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801dd9a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801dd9e:	425a      	negs	r2, r3
 801dda0:	415a      	adcs	r2, r3
 801dda2:	602a      	str	r2, [r5, #0]
 801dda4:	e7ee      	b.n	801dd84 <__swhatbuf_r+0x1c>
 801dda6:	2340      	movs	r3, #64	; 0x40
 801dda8:	2000      	movs	r0, #0
 801ddaa:	6023      	str	r3, [r4, #0]
 801ddac:	b016      	add	sp, #88	; 0x58
 801ddae:	bd70      	pop	{r4, r5, r6, pc}

0801ddb0 <__smakebuf_r>:
 801ddb0:	898b      	ldrh	r3, [r1, #12]
 801ddb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801ddb4:	079d      	lsls	r5, r3, #30
 801ddb6:	4606      	mov	r6, r0
 801ddb8:	460c      	mov	r4, r1
 801ddba:	d507      	bpl.n	801ddcc <__smakebuf_r+0x1c>
 801ddbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801ddc0:	6023      	str	r3, [r4, #0]
 801ddc2:	6123      	str	r3, [r4, #16]
 801ddc4:	2301      	movs	r3, #1
 801ddc6:	6163      	str	r3, [r4, #20]
 801ddc8:	b002      	add	sp, #8
 801ddca:	bd70      	pop	{r4, r5, r6, pc}
 801ddcc:	ab01      	add	r3, sp, #4
 801ddce:	466a      	mov	r2, sp
 801ddd0:	f7ff ffca 	bl	801dd68 <__swhatbuf_r>
 801ddd4:	9900      	ldr	r1, [sp, #0]
 801ddd6:	4605      	mov	r5, r0
 801ddd8:	4630      	mov	r0, r6
 801ddda:	f7ff f9a1 	bl	801d120 <_malloc_r>
 801ddde:	b948      	cbnz	r0, 801ddf4 <__smakebuf_r+0x44>
 801dde0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dde4:	059a      	lsls	r2, r3, #22
 801dde6:	d4ef      	bmi.n	801ddc8 <__smakebuf_r+0x18>
 801dde8:	f023 0303 	bic.w	r3, r3, #3
 801ddec:	f043 0302 	orr.w	r3, r3, #2
 801ddf0:	81a3      	strh	r3, [r4, #12]
 801ddf2:	e7e3      	b.n	801ddbc <__smakebuf_r+0xc>
 801ddf4:	4b0d      	ldr	r3, [pc, #52]	; (801de2c <__smakebuf_r+0x7c>)
 801ddf6:	62b3      	str	r3, [r6, #40]	; 0x28
 801ddf8:	89a3      	ldrh	r3, [r4, #12]
 801ddfa:	6020      	str	r0, [r4, #0]
 801ddfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801de00:	81a3      	strh	r3, [r4, #12]
 801de02:	9b00      	ldr	r3, [sp, #0]
 801de04:	6163      	str	r3, [r4, #20]
 801de06:	9b01      	ldr	r3, [sp, #4]
 801de08:	6120      	str	r0, [r4, #16]
 801de0a:	b15b      	cbz	r3, 801de24 <__smakebuf_r+0x74>
 801de0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801de10:	4630      	mov	r0, r6
 801de12:	f000 fc39 	bl	801e688 <_isatty_r>
 801de16:	b128      	cbz	r0, 801de24 <__smakebuf_r+0x74>
 801de18:	89a3      	ldrh	r3, [r4, #12]
 801de1a:	f023 0303 	bic.w	r3, r3, #3
 801de1e:	f043 0301 	orr.w	r3, r3, #1
 801de22:	81a3      	strh	r3, [r4, #12]
 801de24:	89a0      	ldrh	r0, [r4, #12]
 801de26:	4305      	orrs	r5, r0
 801de28:	81a5      	strh	r5, [r4, #12]
 801de2a:	e7cd      	b.n	801ddc8 <__smakebuf_r+0x18>
 801de2c:	0801ce01 	.word	0x0801ce01

0801de30 <__malloc_lock>:
 801de30:	4801      	ldr	r0, [pc, #4]	; (801de38 <__malloc_lock+0x8>)
 801de32:	f7ff b911 	b.w	801d058 <__retarget_lock_acquire_recursive>
 801de36:	bf00      	nop
 801de38:	2000cf1c 	.word	0x2000cf1c

0801de3c <__malloc_unlock>:
 801de3c:	4801      	ldr	r0, [pc, #4]	; (801de44 <__malloc_unlock+0x8>)
 801de3e:	f7ff b90d 	b.w	801d05c <__retarget_lock_release_recursive>
 801de42:	bf00      	nop
 801de44:	2000cf1c 	.word	0x2000cf1c

0801de48 <_realloc_r>:
 801de48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801de4a:	4607      	mov	r7, r0
 801de4c:	4614      	mov	r4, r2
 801de4e:	460e      	mov	r6, r1
 801de50:	b921      	cbnz	r1, 801de5c <_realloc_r+0x14>
 801de52:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801de56:	4611      	mov	r1, r2
 801de58:	f7ff b962 	b.w	801d120 <_malloc_r>
 801de5c:	b922      	cbnz	r2, 801de68 <_realloc_r+0x20>
 801de5e:	f7ff f90f 	bl	801d080 <_free_r>
 801de62:	4625      	mov	r5, r4
 801de64:	4628      	mov	r0, r5
 801de66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801de68:	f000 fc1e 	bl	801e6a8 <_malloc_usable_size_r>
 801de6c:	42a0      	cmp	r0, r4
 801de6e:	d20f      	bcs.n	801de90 <_realloc_r+0x48>
 801de70:	4621      	mov	r1, r4
 801de72:	4638      	mov	r0, r7
 801de74:	f7ff f954 	bl	801d120 <_malloc_r>
 801de78:	4605      	mov	r5, r0
 801de7a:	2800      	cmp	r0, #0
 801de7c:	d0f2      	beq.n	801de64 <_realloc_r+0x1c>
 801de7e:	4631      	mov	r1, r6
 801de80:	4622      	mov	r2, r4
 801de82:	f7fe f999 	bl	801c1b8 <memcpy>
 801de86:	4631      	mov	r1, r6
 801de88:	4638      	mov	r0, r7
 801de8a:	f7ff f8f9 	bl	801d080 <_free_r>
 801de8e:	e7e9      	b.n	801de64 <_realloc_r+0x1c>
 801de90:	4635      	mov	r5, r6
 801de92:	e7e7      	b.n	801de64 <_realloc_r+0x1c>

0801de94 <_sungetc_r>:
 801de94:	b538      	push	{r3, r4, r5, lr}
 801de96:	1c4b      	adds	r3, r1, #1
 801de98:	4614      	mov	r4, r2
 801de9a:	d103      	bne.n	801dea4 <_sungetc_r+0x10>
 801de9c:	f04f 35ff 	mov.w	r5, #4294967295
 801dea0:	4628      	mov	r0, r5
 801dea2:	bd38      	pop	{r3, r4, r5, pc}
 801dea4:	8993      	ldrh	r3, [r2, #12]
 801dea6:	f023 0320 	bic.w	r3, r3, #32
 801deaa:	8193      	strh	r3, [r2, #12]
 801deac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801deae:	6852      	ldr	r2, [r2, #4]
 801deb0:	b2cd      	uxtb	r5, r1
 801deb2:	b18b      	cbz	r3, 801ded8 <_sungetc_r+0x44>
 801deb4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801deb6:	4293      	cmp	r3, r2
 801deb8:	dd08      	ble.n	801decc <_sungetc_r+0x38>
 801deba:	6823      	ldr	r3, [r4, #0]
 801debc:	1e5a      	subs	r2, r3, #1
 801debe:	6022      	str	r2, [r4, #0]
 801dec0:	f803 5c01 	strb.w	r5, [r3, #-1]
 801dec4:	6863      	ldr	r3, [r4, #4]
 801dec6:	3301      	adds	r3, #1
 801dec8:	6063      	str	r3, [r4, #4]
 801deca:	e7e9      	b.n	801dea0 <_sungetc_r+0xc>
 801decc:	4621      	mov	r1, r4
 801dece:	f000 fb8f 	bl	801e5f0 <__submore>
 801ded2:	2800      	cmp	r0, #0
 801ded4:	d0f1      	beq.n	801deba <_sungetc_r+0x26>
 801ded6:	e7e1      	b.n	801de9c <_sungetc_r+0x8>
 801ded8:	6921      	ldr	r1, [r4, #16]
 801deda:	6823      	ldr	r3, [r4, #0]
 801dedc:	b151      	cbz	r1, 801def4 <_sungetc_r+0x60>
 801dede:	4299      	cmp	r1, r3
 801dee0:	d208      	bcs.n	801def4 <_sungetc_r+0x60>
 801dee2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801dee6:	42a9      	cmp	r1, r5
 801dee8:	d104      	bne.n	801def4 <_sungetc_r+0x60>
 801deea:	3b01      	subs	r3, #1
 801deec:	3201      	adds	r2, #1
 801deee:	6023      	str	r3, [r4, #0]
 801def0:	6062      	str	r2, [r4, #4]
 801def2:	e7d5      	b.n	801dea0 <_sungetc_r+0xc>
 801def4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801def8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801defc:	6363      	str	r3, [r4, #52]	; 0x34
 801defe:	2303      	movs	r3, #3
 801df00:	63a3      	str	r3, [r4, #56]	; 0x38
 801df02:	4623      	mov	r3, r4
 801df04:	f803 5f46 	strb.w	r5, [r3, #70]!
 801df08:	6023      	str	r3, [r4, #0]
 801df0a:	2301      	movs	r3, #1
 801df0c:	e7dc      	b.n	801dec8 <_sungetc_r+0x34>

0801df0e <__ssrefill_r>:
 801df0e:	b510      	push	{r4, lr}
 801df10:	460c      	mov	r4, r1
 801df12:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801df14:	b169      	cbz	r1, 801df32 <__ssrefill_r+0x24>
 801df16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801df1a:	4299      	cmp	r1, r3
 801df1c:	d001      	beq.n	801df22 <__ssrefill_r+0x14>
 801df1e:	f7ff f8af 	bl	801d080 <_free_r>
 801df22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801df24:	6063      	str	r3, [r4, #4]
 801df26:	2000      	movs	r0, #0
 801df28:	6360      	str	r0, [r4, #52]	; 0x34
 801df2a:	b113      	cbz	r3, 801df32 <__ssrefill_r+0x24>
 801df2c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801df2e:	6023      	str	r3, [r4, #0]
 801df30:	bd10      	pop	{r4, pc}
 801df32:	6923      	ldr	r3, [r4, #16]
 801df34:	6023      	str	r3, [r4, #0]
 801df36:	2300      	movs	r3, #0
 801df38:	6063      	str	r3, [r4, #4]
 801df3a:	89a3      	ldrh	r3, [r4, #12]
 801df3c:	f043 0320 	orr.w	r3, r3, #32
 801df40:	81a3      	strh	r3, [r4, #12]
 801df42:	f04f 30ff 	mov.w	r0, #4294967295
 801df46:	e7f3      	b.n	801df30 <__ssrefill_r+0x22>

0801df48 <__ssvfiscanf_r>:
 801df48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df4c:	460c      	mov	r4, r1
 801df4e:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 801df52:	2100      	movs	r1, #0
 801df54:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801df58:	49b2      	ldr	r1, [pc, #712]	; (801e224 <__ssvfiscanf_r+0x2dc>)
 801df5a:	91a0      	str	r1, [sp, #640]	; 0x280
 801df5c:	f10d 0804 	add.w	r8, sp, #4
 801df60:	49b1      	ldr	r1, [pc, #708]	; (801e228 <__ssvfiscanf_r+0x2e0>)
 801df62:	4fb2      	ldr	r7, [pc, #712]	; (801e22c <__ssvfiscanf_r+0x2e4>)
 801df64:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 801e230 <__ssvfiscanf_r+0x2e8>
 801df68:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801df6c:	4606      	mov	r6, r0
 801df6e:	91a1      	str	r1, [sp, #644]	; 0x284
 801df70:	9300      	str	r3, [sp, #0]
 801df72:	f892 a000 	ldrb.w	sl, [r2]
 801df76:	f1ba 0f00 	cmp.w	sl, #0
 801df7a:	f000 8151 	beq.w	801e220 <__ssvfiscanf_r+0x2d8>
 801df7e:	f81a 3007 	ldrb.w	r3, [sl, r7]
 801df82:	f013 0308 	ands.w	r3, r3, #8
 801df86:	f102 0501 	add.w	r5, r2, #1
 801df8a:	d019      	beq.n	801dfc0 <__ssvfiscanf_r+0x78>
 801df8c:	6863      	ldr	r3, [r4, #4]
 801df8e:	2b00      	cmp	r3, #0
 801df90:	dd0f      	ble.n	801dfb2 <__ssvfiscanf_r+0x6a>
 801df92:	6823      	ldr	r3, [r4, #0]
 801df94:	781a      	ldrb	r2, [r3, #0]
 801df96:	5cba      	ldrb	r2, [r7, r2]
 801df98:	0712      	lsls	r2, r2, #28
 801df9a:	d401      	bmi.n	801dfa0 <__ssvfiscanf_r+0x58>
 801df9c:	462a      	mov	r2, r5
 801df9e:	e7e8      	b.n	801df72 <__ssvfiscanf_r+0x2a>
 801dfa0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801dfa2:	3201      	adds	r2, #1
 801dfa4:	9245      	str	r2, [sp, #276]	; 0x114
 801dfa6:	6862      	ldr	r2, [r4, #4]
 801dfa8:	3301      	adds	r3, #1
 801dfaa:	3a01      	subs	r2, #1
 801dfac:	6062      	str	r2, [r4, #4]
 801dfae:	6023      	str	r3, [r4, #0]
 801dfb0:	e7ec      	b.n	801df8c <__ssvfiscanf_r+0x44>
 801dfb2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801dfb4:	4621      	mov	r1, r4
 801dfb6:	4630      	mov	r0, r6
 801dfb8:	4798      	blx	r3
 801dfba:	2800      	cmp	r0, #0
 801dfbc:	d0e9      	beq.n	801df92 <__ssvfiscanf_r+0x4a>
 801dfbe:	e7ed      	b.n	801df9c <__ssvfiscanf_r+0x54>
 801dfc0:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 801dfc4:	f040 8083 	bne.w	801e0ce <__ssvfiscanf_r+0x186>
 801dfc8:	9341      	str	r3, [sp, #260]	; 0x104
 801dfca:	9343      	str	r3, [sp, #268]	; 0x10c
 801dfcc:	7853      	ldrb	r3, [r2, #1]
 801dfce:	2b2a      	cmp	r3, #42	; 0x2a
 801dfd0:	bf02      	ittt	eq
 801dfd2:	2310      	moveq	r3, #16
 801dfd4:	1c95      	addeq	r5, r2, #2
 801dfd6:	9341      	streq	r3, [sp, #260]	; 0x104
 801dfd8:	220a      	movs	r2, #10
 801dfda:	46ab      	mov	fp, r5
 801dfdc:	f81b 1b01 	ldrb.w	r1, [fp], #1
 801dfe0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801dfe4:	2b09      	cmp	r3, #9
 801dfe6:	d91d      	bls.n	801e024 <__ssvfiscanf_r+0xdc>
 801dfe8:	4891      	ldr	r0, [pc, #580]	; (801e230 <__ssvfiscanf_r+0x2e8>)
 801dfea:	2203      	movs	r2, #3
 801dfec:	f7e2 f908 	bl	8000200 <memchr>
 801dff0:	b140      	cbz	r0, 801e004 <__ssvfiscanf_r+0xbc>
 801dff2:	2301      	movs	r3, #1
 801dff4:	eba0 0009 	sub.w	r0, r0, r9
 801dff8:	fa03 f000 	lsl.w	r0, r3, r0
 801dffc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801dffe:	4318      	orrs	r0, r3
 801e000:	9041      	str	r0, [sp, #260]	; 0x104
 801e002:	465d      	mov	r5, fp
 801e004:	f815 3b01 	ldrb.w	r3, [r5], #1
 801e008:	2b78      	cmp	r3, #120	; 0x78
 801e00a:	d806      	bhi.n	801e01a <__ssvfiscanf_r+0xd2>
 801e00c:	2b57      	cmp	r3, #87	; 0x57
 801e00e:	d810      	bhi.n	801e032 <__ssvfiscanf_r+0xea>
 801e010:	2b25      	cmp	r3, #37	; 0x25
 801e012:	d05c      	beq.n	801e0ce <__ssvfiscanf_r+0x186>
 801e014:	d856      	bhi.n	801e0c4 <__ssvfiscanf_r+0x17c>
 801e016:	2b00      	cmp	r3, #0
 801e018:	d074      	beq.n	801e104 <__ssvfiscanf_r+0x1bc>
 801e01a:	2303      	movs	r3, #3
 801e01c:	9347      	str	r3, [sp, #284]	; 0x11c
 801e01e:	230a      	movs	r3, #10
 801e020:	9342      	str	r3, [sp, #264]	; 0x108
 801e022:	e081      	b.n	801e128 <__ssvfiscanf_r+0x1e0>
 801e024:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801e026:	fb02 1303 	mla	r3, r2, r3, r1
 801e02a:	3b30      	subs	r3, #48	; 0x30
 801e02c:	9343      	str	r3, [sp, #268]	; 0x10c
 801e02e:	465d      	mov	r5, fp
 801e030:	e7d3      	b.n	801dfda <__ssvfiscanf_r+0x92>
 801e032:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801e036:	2a20      	cmp	r2, #32
 801e038:	d8ef      	bhi.n	801e01a <__ssvfiscanf_r+0xd2>
 801e03a:	a101      	add	r1, pc, #4	; (adr r1, 801e040 <__ssvfiscanf_r+0xf8>)
 801e03c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801e040:	0801e113 	.word	0x0801e113
 801e044:	0801e01b 	.word	0x0801e01b
 801e048:	0801e01b 	.word	0x0801e01b
 801e04c:	0801e171 	.word	0x0801e171
 801e050:	0801e01b 	.word	0x0801e01b
 801e054:	0801e01b 	.word	0x0801e01b
 801e058:	0801e01b 	.word	0x0801e01b
 801e05c:	0801e01b 	.word	0x0801e01b
 801e060:	0801e01b 	.word	0x0801e01b
 801e064:	0801e01b 	.word	0x0801e01b
 801e068:	0801e01b 	.word	0x0801e01b
 801e06c:	0801e187 	.word	0x0801e187
 801e070:	0801e15d 	.word	0x0801e15d
 801e074:	0801e0cb 	.word	0x0801e0cb
 801e078:	0801e0cb 	.word	0x0801e0cb
 801e07c:	0801e0cb 	.word	0x0801e0cb
 801e080:	0801e01b 	.word	0x0801e01b
 801e084:	0801e161 	.word	0x0801e161
 801e088:	0801e01b 	.word	0x0801e01b
 801e08c:	0801e01b 	.word	0x0801e01b
 801e090:	0801e01b 	.word	0x0801e01b
 801e094:	0801e01b 	.word	0x0801e01b
 801e098:	0801e197 	.word	0x0801e197
 801e09c:	0801e169 	.word	0x0801e169
 801e0a0:	0801e10b 	.word	0x0801e10b
 801e0a4:	0801e01b 	.word	0x0801e01b
 801e0a8:	0801e01b 	.word	0x0801e01b
 801e0ac:	0801e193 	.word	0x0801e193
 801e0b0:	0801e01b 	.word	0x0801e01b
 801e0b4:	0801e15d 	.word	0x0801e15d
 801e0b8:	0801e01b 	.word	0x0801e01b
 801e0bc:	0801e01b 	.word	0x0801e01b
 801e0c0:	0801e113 	.word	0x0801e113
 801e0c4:	3b45      	subs	r3, #69	; 0x45
 801e0c6:	2b02      	cmp	r3, #2
 801e0c8:	d8a7      	bhi.n	801e01a <__ssvfiscanf_r+0xd2>
 801e0ca:	2305      	movs	r3, #5
 801e0cc:	e02b      	b.n	801e126 <__ssvfiscanf_r+0x1de>
 801e0ce:	6863      	ldr	r3, [r4, #4]
 801e0d0:	2b00      	cmp	r3, #0
 801e0d2:	dd0d      	ble.n	801e0f0 <__ssvfiscanf_r+0x1a8>
 801e0d4:	6823      	ldr	r3, [r4, #0]
 801e0d6:	781a      	ldrb	r2, [r3, #0]
 801e0d8:	4552      	cmp	r2, sl
 801e0da:	f040 80a1 	bne.w	801e220 <__ssvfiscanf_r+0x2d8>
 801e0de:	3301      	adds	r3, #1
 801e0e0:	6862      	ldr	r2, [r4, #4]
 801e0e2:	6023      	str	r3, [r4, #0]
 801e0e4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801e0e6:	3a01      	subs	r2, #1
 801e0e8:	3301      	adds	r3, #1
 801e0ea:	6062      	str	r2, [r4, #4]
 801e0ec:	9345      	str	r3, [sp, #276]	; 0x114
 801e0ee:	e755      	b.n	801df9c <__ssvfiscanf_r+0x54>
 801e0f0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801e0f2:	4621      	mov	r1, r4
 801e0f4:	4630      	mov	r0, r6
 801e0f6:	4798      	blx	r3
 801e0f8:	2800      	cmp	r0, #0
 801e0fa:	d0eb      	beq.n	801e0d4 <__ssvfiscanf_r+0x18c>
 801e0fc:	9844      	ldr	r0, [sp, #272]	; 0x110
 801e0fe:	2800      	cmp	r0, #0
 801e100:	f040 8084 	bne.w	801e20c <__ssvfiscanf_r+0x2c4>
 801e104:	f04f 30ff 	mov.w	r0, #4294967295
 801e108:	e086      	b.n	801e218 <__ssvfiscanf_r+0x2d0>
 801e10a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801e10c:	f042 0220 	orr.w	r2, r2, #32
 801e110:	9241      	str	r2, [sp, #260]	; 0x104
 801e112:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801e114:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801e118:	9241      	str	r2, [sp, #260]	; 0x104
 801e11a:	2210      	movs	r2, #16
 801e11c:	2b6f      	cmp	r3, #111	; 0x6f
 801e11e:	9242      	str	r2, [sp, #264]	; 0x108
 801e120:	bf34      	ite	cc
 801e122:	2303      	movcc	r3, #3
 801e124:	2304      	movcs	r3, #4
 801e126:	9347      	str	r3, [sp, #284]	; 0x11c
 801e128:	6863      	ldr	r3, [r4, #4]
 801e12a:	2b00      	cmp	r3, #0
 801e12c:	dd41      	ble.n	801e1b2 <__ssvfiscanf_r+0x26a>
 801e12e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801e130:	0659      	lsls	r1, r3, #25
 801e132:	d404      	bmi.n	801e13e <__ssvfiscanf_r+0x1f6>
 801e134:	6823      	ldr	r3, [r4, #0]
 801e136:	781a      	ldrb	r2, [r3, #0]
 801e138:	5cba      	ldrb	r2, [r7, r2]
 801e13a:	0712      	lsls	r2, r2, #28
 801e13c:	d440      	bmi.n	801e1c0 <__ssvfiscanf_r+0x278>
 801e13e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801e140:	2b02      	cmp	r3, #2
 801e142:	dc4f      	bgt.n	801e1e4 <__ssvfiscanf_r+0x29c>
 801e144:	466b      	mov	r3, sp
 801e146:	4622      	mov	r2, r4
 801e148:	a941      	add	r1, sp, #260	; 0x104
 801e14a:	4630      	mov	r0, r6
 801e14c:	f000 f874 	bl	801e238 <_scanf_chars>
 801e150:	2801      	cmp	r0, #1
 801e152:	d065      	beq.n	801e220 <__ssvfiscanf_r+0x2d8>
 801e154:	2802      	cmp	r0, #2
 801e156:	f47f af21 	bne.w	801df9c <__ssvfiscanf_r+0x54>
 801e15a:	e7cf      	b.n	801e0fc <__ssvfiscanf_r+0x1b4>
 801e15c:	220a      	movs	r2, #10
 801e15e:	e7dd      	b.n	801e11c <__ssvfiscanf_r+0x1d4>
 801e160:	2300      	movs	r3, #0
 801e162:	9342      	str	r3, [sp, #264]	; 0x108
 801e164:	2303      	movs	r3, #3
 801e166:	e7de      	b.n	801e126 <__ssvfiscanf_r+0x1de>
 801e168:	2308      	movs	r3, #8
 801e16a:	9342      	str	r3, [sp, #264]	; 0x108
 801e16c:	2304      	movs	r3, #4
 801e16e:	e7da      	b.n	801e126 <__ssvfiscanf_r+0x1de>
 801e170:	4629      	mov	r1, r5
 801e172:	4640      	mov	r0, r8
 801e174:	f000 f9be 	bl	801e4f4 <__sccl>
 801e178:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801e17a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e17e:	9341      	str	r3, [sp, #260]	; 0x104
 801e180:	4605      	mov	r5, r0
 801e182:	2301      	movs	r3, #1
 801e184:	e7cf      	b.n	801e126 <__ssvfiscanf_r+0x1de>
 801e186:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801e188:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e18c:	9341      	str	r3, [sp, #260]	; 0x104
 801e18e:	2300      	movs	r3, #0
 801e190:	e7c9      	b.n	801e126 <__ssvfiscanf_r+0x1de>
 801e192:	2302      	movs	r3, #2
 801e194:	e7c7      	b.n	801e126 <__ssvfiscanf_r+0x1de>
 801e196:	9841      	ldr	r0, [sp, #260]	; 0x104
 801e198:	06c3      	lsls	r3, r0, #27
 801e19a:	f53f aeff 	bmi.w	801df9c <__ssvfiscanf_r+0x54>
 801e19e:	9b00      	ldr	r3, [sp, #0]
 801e1a0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801e1a2:	1d19      	adds	r1, r3, #4
 801e1a4:	9100      	str	r1, [sp, #0]
 801e1a6:	681b      	ldr	r3, [r3, #0]
 801e1a8:	07c0      	lsls	r0, r0, #31
 801e1aa:	bf4c      	ite	mi
 801e1ac:	801a      	strhmi	r2, [r3, #0]
 801e1ae:	601a      	strpl	r2, [r3, #0]
 801e1b0:	e6f4      	b.n	801df9c <__ssvfiscanf_r+0x54>
 801e1b2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801e1b4:	4621      	mov	r1, r4
 801e1b6:	4630      	mov	r0, r6
 801e1b8:	4798      	blx	r3
 801e1ba:	2800      	cmp	r0, #0
 801e1bc:	d0b7      	beq.n	801e12e <__ssvfiscanf_r+0x1e6>
 801e1be:	e79d      	b.n	801e0fc <__ssvfiscanf_r+0x1b4>
 801e1c0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801e1c2:	3201      	adds	r2, #1
 801e1c4:	9245      	str	r2, [sp, #276]	; 0x114
 801e1c6:	6862      	ldr	r2, [r4, #4]
 801e1c8:	3a01      	subs	r2, #1
 801e1ca:	2a00      	cmp	r2, #0
 801e1cc:	6062      	str	r2, [r4, #4]
 801e1ce:	dd02      	ble.n	801e1d6 <__ssvfiscanf_r+0x28e>
 801e1d0:	3301      	adds	r3, #1
 801e1d2:	6023      	str	r3, [r4, #0]
 801e1d4:	e7ae      	b.n	801e134 <__ssvfiscanf_r+0x1ec>
 801e1d6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801e1d8:	4621      	mov	r1, r4
 801e1da:	4630      	mov	r0, r6
 801e1dc:	4798      	blx	r3
 801e1de:	2800      	cmp	r0, #0
 801e1e0:	d0a8      	beq.n	801e134 <__ssvfiscanf_r+0x1ec>
 801e1e2:	e78b      	b.n	801e0fc <__ssvfiscanf_r+0x1b4>
 801e1e4:	2b04      	cmp	r3, #4
 801e1e6:	dc06      	bgt.n	801e1f6 <__ssvfiscanf_r+0x2ae>
 801e1e8:	466b      	mov	r3, sp
 801e1ea:	4622      	mov	r2, r4
 801e1ec:	a941      	add	r1, sp, #260	; 0x104
 801e1ee:	4630      	mov	r0, r6
 801e1f0:	f000 f87a 	bl	801e2e8 <_scanf_i>
 801e1f4:	e7ac      	b.n	801e150 <__ssvfiscanf_r+0x208>
 801e1f6:	4b0f      	ldr	r3, [pc, #60]	; (801e234 <__ssvfiscanf_r+0x2ec>)
 801e1f8:	2b00      	cmp	r3, #0
 801e1fa:	f43f aecf 	beq.w	801df9c <__ssvfiscanf_r+0x54>
 801e1fe:	466b      	mov	r3, sp
 801e200:	4622      	mov	r2, r4
 801e202:	a941      	add	r1, sp, #260	; 0x104
 801e204:	4630      	mov	r0, r6
 801e206:	f3af 8000 	nop.w
 801e20a:	e7a1      	b.n	801e150 <__ssvfiscanf_r+0x208>
 801e20c:	89a3      	ldrh	r3, [r4, #12]
 801e20e:	f013 0f40 	tst.w	r3, #64	; 0x40
 801e212:	bf18      	it	ne
 801e214:	f04f 30ff 	movne.w	r0, #4294967295
 801e218:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 801e21c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e220:	9844      	ldr	r0, [sp, #272]	; 0x110
 801e222:	e7f9      	b.n	801e218 <__ssvfiscanf_r+0x2d0>
 801e224:	0801de95 	.word	0x0801de95
 801e228:	0801df0f 	.word	0x0801df0f
 801e22c:	08023069 	.word	0x08023069
 801e230:	08023386 	.word	0x08023386
 801e234:	00000000 	.word	0x00000000

0801e238 <_scanf_chars>:
 801e238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e23c:	4615      	mov	r5, r2
 801e23e:	688a      	ldr	r2, [r1, #8]
 801e240:	4680      	mov	r8, r0
 801e242:	460c      	mov	r4, r1
 801e244:	b932      	cbnz	r2, 801e254 <_scanf_chars+0x1c>
 801e246:	698a      	ldr	r2, [r1, #24]
 801e248:	2a00      	cmp	r2, #0
 801e24a:	bf0c      	ite	eq
 801e24c:	2201      	moveq	r2, #1
 801e24e:	f04f 32ff 	movne.w	r2, #4294967295
 801e252:	608a      	str	r2, [r1, #8]
 801e254:	6822      	ldr	r2, [r4, #0]
 801e256:	f8df 908c 	ldr.w	r9, [pc, #140]	; 801e2e4 <_scanf_chars+0xac>
 801e25a:	06d1      	lsls	r1, r2, #27
 801e25c:	bf5f      	itttt	pl
 801e25e:	681a      	ldrpl	r2, [r3, #0]
 801e260:	1d11      	addpl	r1, r2, #4
 801e262:	6019      	strpl	r1, [r3, #0]
 801e264:	6816      	ldrpl	r6, [r2, #0]
 801e266:	2700      	movs	r7, #0
 801e268:	69a0      	ldr	r0, [r4, #24]
 801e26a:	b188      	cbz	r0, 801e290 <_scanf_chars+0x58>
 801e26c:	2801      	cmp	r0, #1
 801e26e:	d107      	bne.n	801e280 <_scanf_chars+0x48>
 801e270:	682b      	ldr	r3, [r5, #0]
 801e272:	781a      	ldrb	r2, [r3, #0]
 801e274:	6963      	ldr	r3, [r4, #20]
 801e276:	5c9b      	ldrb	r3, [r3, r2]
 801e278:	b953      	cbnz	r3, 801e290 <_scanf_chars+0x58>
 801e27a:	bb27      	cbnz	r7, 801e2c6 <_scanf_chars+0x8e>
 801e27c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e280:	2802      	cmp	r0, #2
 801e282:	d120      	bne.n	801e2c6 <_scanf_chars+0x8e>
 801e284:	682b      	ldr	r3, [r5, #0]
 801e286:	781b      	ldrb	r3, [r3, #0]
 801e288:	f813 3009 	ldrb.w	r3, [r3, r9]
 801e28c:	071b      	lsls	r3, r3, #28
 801e28e:	d41a      	bmi.n	801e2c6 <_scanf_chars+0x8e>
 801e290:	6823      	ldr	r3, [r4, #0]
 801e292:	06da      	lsls	r2, r3, #27
 801e294:	bf5e      	ittt	pl
 801e296:	682b      	ldrpl	r3, [r5, #0]
 801e298:	781b      	ldrbpl	r3, [r3, #0]
 801e29a:	f806 3b01 	strbpl.w	r3, [r6], #1
 801e29e:	682a      	ldr	r2, [r5, #0]
 801e2a0:	686b      	ldr	r3, [r5, #4]
 801e2a2:	3201      	adds	r2, #1
 801e2a4:	602a      	str	r2, [r5, #0]
 801e2a6:	68a2      	ldr	r2, [r4, #8]
 801e2a8:	3b01      	subs	r3, #1
 801e2aa:	3a01      	subs	r2, #1
 801e2ac:	606b      	str	r3, [r5, #4]
 801e2ae:	3701      	adds	r7, #1
 801e2b0:	60a2      	str	r2, [r4, #8]
 801e2b2:	b142      	cbz	r2, 801e2c6 <_scanf_chars+0x8e>
 801e2b4:	2b00      	cmp	r3, #0
 801e2b6:	dcd7      	bgt.n	801e268 <_scanf_chars+0x30>
 801e2b8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801e2bc:	4629      	mov	r1, r5
 801e2be:	4640      	mov	r0, r8
 801e2c0:	4798      	blx	r3
 801e2c2:	2800      	cmp	r0, #0
 801e2c4:	d0d0      	beq.n	801e268 <_scanf_chars+0x30>
 801e2c6:	6823      	ldr	r3, [r4, #0]
 801e2c8:	f013 0310 	ands.w	r3, r3, #16
 801e2cc:	d105      	bne.n	801e2da <_scanf_chars+0xa2>
 801e2ce:	68e2      	ldr	r2, [r4, #12]
 801e2d0:	3201      	adds	r2, #1
 801e2d2:	60e2      	str	r2, [r4, #12]
 801e2d4:	69a2      	ldr	r2, [r4, #24]
 801e2d6:	b102      	cbz	r2, 801e2da <_scanf_chars+0xa2>
 801e2d8:	7033      	strb	r3, [r6, #0]
 801e2da:	6923      	ldr	r3, [r4, #16]
 801e2dc:	441f      	add	r7, r3
 801e2de:	6127      	str	r7, [r4, #16]
 801e2e0:	2000      	movs	r0, #0
 801e2e2:	e7cb      	b.n	801e27c <_scanf_chars+0x44>
 801e2e4:	08023069 	.word	0x08023069

0801e2e8 <_scanf_i>:
 801e2e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e2ec:	4698      	mov	r8, r3
 801e2ee:	4b74      	ldr	r3, [pc, #464]	; (801e4c0 <_scanf_i+0x1d8>)
 801e2f0:	460c      	mov	r4, r1
 801e2f2:	4682      	mov	sl, r0
 801e2f4:	4616      	mov	r6, r2
 801e2f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801e2fa:	b087      	sub	sp, #28
 801e2fc:	ab03      	add	r3, sp, #12
 801e2fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801e302:	4b70      	ldr	r3, [pc, #448]	; (801e4c4 <_scanf_i+0x1dc>)
 801e304:	69a1      	ldr	r1, [r4, #24]
 801e306:	4a70      	ldr	r2, [pc, #448]	; (801e4c8 <_scanf_i+0x1e0>)
 801e308:	2903      	cmp	r1, #3
 801e30a:	bf18      	it	ne
 801e30c:	461a      	movne	r2, r3
 801e30e:	68a3      	ldr	r3, [r4, #8]
 801e310:	9201      	str	r2, [sp, #4]
 801e312:	1e5a      	subs	r2, r3, #1
 801e314:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801e318:	bf88      	it	hi
 801e31a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801e31e:	4627      	mov	r7, r4
 801e320:	bf82      	ittt	hi
 801e322:	eb03 0905 	addhi.w	r9, r3, r5
 801e326:	f240 135d 	movwhi	r3, #349	; 0x15d
 801e32a:	60a3      	strhi	r3, [r4, #8]
 801e32c:	f857 3b1c 	ldr.w	r3, [r7], #28
 801e330:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801e334:	bf98      	it	ls
 801e336:	f04f 0900 	movls.w	r9, #0
 801e33a:	6023      	str	r3, [r4, #0]
 801e33c:	463d      	mov	r5, r7
 801e33e:	f04f 0b00 	mov.w	fp, #0
 801e342:	6831      	ldr	r1, [r6, #0]
 801e344:	ab03      	add	r3, sp, #12
 801e346:	7809      	ldrb	r1, [r1, #0]
 801e348:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801e34c:	2202      	movs	r2, #2
 801e34e:	f7e1 ff57 	bl	8000200 <memchr>
 801e352:	b328      	cbz	r0, 801e3a0 <_scanf_i+0xb8>
 801e354:	f1bb 0f01 	cmp.w	fp, #1
 801e358:	d159      	bne.n	801e40e <_scanf_i+0x126>
 801e35a:	6862      	ldr	r2, [r4, #4]
 801e35c:	b92a      	cbnz	r2, 801e36a <_scanf_i+0x82>
 801e35e:	6822      	ldr	r2, [r4, #0]
 801e360:	2308      	movs	r3, #8
 801e362:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801e366:	6063      	str	r3, [r4, #4]
 801e368:	6022      	str	r2, [r4, #0]
 801e36a:	6822      	ldr	r2, [r4, #0]
 801e36c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801e370:	6022      	str	r2, [r4, #0]
 801e372:	68a2      	ldr	r2, [r4, #8]
 801e374:	1e51      	subs	r1, r2, #1
 801e376:	60a1      	str	r1, [r4, #8]
 801e378:	b192      	cbz	r2, 801e3a0 <_scanf_i+0xb8>
 801e37a:	6832      	ldr	r2, [r6, #0]
 801e37c:	1c51      	adds	r1, r2, #1
 801e37e:	6031      	str	r1, [r6, #0]
 801e380:	7812      	ldrb	r2, [r2, #0]
 801e382:	f805 2b01 	strb.w	r2, [r5], #1
 801e386:	6872      	ldr	r2, [r6, #4]
 801e388:	3a01      	subs	r2, #1
 801e38a:	2a00      	cmp	r2, #0
 801e38c:	6072      	str	r2, [r6, #4]
 801e38e:	dc07      	bgt.n	801e3a0 <_scanf_i+0xb8>
 801e390:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801e394:	4631      	mov	r1, r6
 801e396:	4650      	mov	r0, sl
 801e398:	4790      	blx	r2
 801e39a:	2800      	cmp	r0, #0
 801e39c:	f040 8085 	bne.w	801e4aa <_scanf_i+0x1c2>
 801e3a0:	f10b 0b01 	add.w	fp, fp, #1
 801e3a4:	f1bb 0f03 	cmp.w	fp, #3
 801e3a8:	d1cb      	bne.n	801e342 <_scanf_i+0x5a>
 801e3aa:	6863      	ldr	r3, [r4, #4]
 801e3ac:	b90b      	cbnz	r3, 801e3b2 <_scanf_i+0xca>
 801e3ae:	230a      	movs	r3, #10
 801e3b0:	6063      	str	r3, [r4, #4]
 801e3b2:	6863      	ldr	r3, [r4, #4]
 801e3b4:	4945      	ldr	r1, [pc, #276]	; (801e4cc <_scanf_i+0x1e4>)
 801e3b6:	6960      	ldr	r0, [r4, #20]
 801e3b8:	1ac9      	subs	r1, r1, r3
 801e3ba:	f000 f89b 	bl	801e4f4 <__sccl>
 801e3be:	f04f 0b00 	mov.w	fp, #0
 801e3c2:	68a3      	ldr	r3, [r4, #8]
 801e3c4:	6822      	ldr	r2, [r4, #0]
 801e3c6:	2b00      	cmp	r3, #0
 801e3c8:	d03d      	beq.n	801e446 <_scanf_i+0x15e>
 801e3ca:	6831      	ldr	r1, [r6, #0]
 801e3cc:	6960      	ldr	r0, [r4, #20]
 801e3ce:	f891 c000 	ldrb.w	ip, [r1]
 801e3d2:	f810 000c 	ldrb.w	r0, [r0, ip]
 801e3d6:	2800      	cmp	r0, #0
 801e3d8:	d035      	beq.n	801e446 <_scanf_i+0x15e>
 801e3da:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801e3de:	d124      	bne.n	801e42a <_scanf_i+0x142>
 801e3e0:	0510      	lsls	r0, r2, #20
 801e3e2:	d522      	bpl.n	801e42a <_scanf_i+0x142>
 801e3e4:	f10b 0b01 	add.w	fp, fp, #1
 801e3e8:	f1b9 0f00 	cmp.w	r9, #0
 801e3ec:	d003      	beq.n	801e3f6 <_scanf_i+0x10e>
 801e3ee:	3301      	adds	r3, #1
 801e3f0:	f109 39ff 	add.w	r9, r9, #4294967295
 801e3f4:	60a3      	str	r3, [r4, #8]
 801e3f6:	6873      	ldr	r3, [r6, #4]
 801e3f8:	3b01      	subs	r3, #1
 801e3fa:	2b00      	cmp	r3, #0
 801e3fc:	6073      	str	r3, [r6, #4]
 801e3fe:	dd1b      	ble.n	801e438 <_scanf_i+0x150>
 801e400:	6833      	ldr	r3, [r6, #0]
 801e402:	3301      	adds	r3, #1
 801e404:	6033      	str	r3, [r6, #0]
 801e406:	68a3      	ldr	r3, [r4, #8]
 801e408:	3b01      	subs	r3, #1
 801e40a:	60a3      	str	r3, [r4, #8]
 801e40c:	e7d9      	b.n	801e3c2 <_scanf_i+0xda>
 801e40e:	f1bb 0f02 	cmp.w	fp, #2
 801e412:	d1ae      	bne.n	801e372 <_scanf_i+0x8a>
 801e414:	6822      	ldr	r2, [r4, #0]
 801e416:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801e41a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801e41e:	d1bf      	bne.n	801e3a0 <_scanf_i+0xb8>
 801e420:	2310      	movs	r3, #16
 801e422:	6063      	str	r3, [r4, #4]
 801e424:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801e428:	e7a2      	b.n	801e370 <_scanf_i+0x88>
 801e42a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801e42e:	6022      	str	r2, [r4, #0]
 801e430:	780b      	ldrb	r3, [r1, #0]
 801e432:	f805 3b01 	strb.w	r3, [r5], #1
 801e436:	e7de      	b.n	801e3f6 <_scanf_i+0x10e>
 801e438:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801e43c:	4631      	mov	r1, r6
 801e43e:	4650      	mov	r0, sl
 801e440:	4798      	blx	r3
 801e442:	2800      	cmp	r0, #0
 801e444:	d0df      	beq.n	801e406 <_scanf_i+0x11e>
 801e446:	6823      	ldr	r3, [r4, #0]
 801e448:	05d9      	lsls	r1, r3, #23
 801e44a:	d50d      	bpl.n	801e468 <_scanf_i+0x180>
 801e44c:	42bd      	cmp	r5, r7
 801e44e:	d909      	bls.n	801e464 <_scanf_i+0x17c>
 801e450:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801e454:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801e458:	4632      	mov	r2, r6
 801e45a:	4650      	mov	r0, sl
 801e45c:	4798      	blx	r3
 801e45e:	f105 39ff 	add.w	r9, r5, #4294967295
 801e462:	464d      	mov	r5, r9
 801e464:	42bd      	cmp	r5, r7
 801e466:	d028      	beq.n	801e4ba <_scanf_i+0x1d2>
 801e468:	6822      	ldr	r2, [r4, #0]
 801e46a:	f012 0210 	ands.w	r2, r2, #16
 801e46e:	d113      	bne.n	801e498 <_scanf_i+0x1b0>
 801e470:	702a      	strb	r2, [r5, #0]
 801e472:	6863      	ldr	r3, [r4, #4]
 801e474:	9e01      	ldr	r6, [sp, #4]
 801e476:	4639      	mov	r1, r7
 801e478:	4650      	mov	r0, sl
 801e47a:	47b0      	blx	r6
 801e47c:	f8d8 3000 	ldr.w	r3, [r8]
 801e480:	6821      	ldr	r1, [r4, #0]
 801e482:	1d1a      	adds	r2, r3, #4
 801e484:	f8c8 2000 	str.w	r2, [r8]
 801e488:	f011 0f20 	tst.w	r1, #32
 801e48c:	681b      	ldr	r3, [r3, #0]
 801e48e:	d00f      	beq.n	801e4b0 <_scanf_i+0x1c8>
 801e490:	6018      	str	r0, [r3, #0]
 801e492:	68e3      	ldr	r3, [r4, #12]
 801e494:	3301      	adds	r3, #1
 801e496:	60e3      	str	r3, [r4, #12]
 801e498:	1bed      	subs	r5, r5, r7
 801e49a:	44ab      	add	fp, r5
 801e49c:	6925      	ldr	r5, [r4, #16]
 801e49e:	445d      	add	r5, fp
 801e4a0:	6125      	str	r5, [r4, #16]
 801e4a2:	2000      	movs	r0, #0
 801e4a4:	b007      	add	sp, #28
 801e4a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e4aa:	f04f 0b00 	mov.w	fp, #0
 801e4ae:	e7ca      	b.n	801e446 <_scanf_i+0x15e>
 801e4b0:	07ca      	lsls	r2, r1, #31
 801e4b2:	bf4c      	ite	mi
 801e4b4:	8018      	strhmi	r0, [r3, #0]
 801e4b6:	6018      	strpl	r0, [r3, #0]
 801e4b8:	e7eb      	b.n	801e492 <_scanf_i+0x1aa>
 801e4ba:	2001      	movs	r0, #1
 801e4bc:	e7f2      	b.n	801e4a4 <_scanf_i+0x1bc>
 801e4be:	bf00      	nop
 801e4c0:	0802203c 	.word	0x0802203c
 801e4c4:	0801d9bd 	.word	0x0801d9bd
 801e4c8:	0801c8d9 	.word	0x0801c8d9
 801e4cc:	080233cc 	.word	0x080233cc

0801e4d0 <_read_r>:
 801e4d0:	b538      	push	{r3, r4, r5, lr}
 801e4d2:	4d07      	ldr	r5, [pc, #28]	; (801e4f0 <_read_r+0x20>)
 801e4d4:	4604      	mov	r4, r0
 801e4d6:	4608      	mov	r0, r1
 801e4d8:	4611      	mov	r1, r2
 801e4da:	2200      	movs	r2, #0
 801e4dc:	602a      	str	r2, [r5, #0]
 801e4de:	461a      	mov	r2, r3
 801e4e0:	f7e3 fd20 	bl	8001f24 <_read>
 801e4e4:	1c43      	adds	r3, r0, #1
 801e4e6:	d102      	bne.n	801e4ee <_read_r+0x1e>
 801e4e8:	682b      	ldr	r3, [r5, #0]
 801e4ea:	b103      	cbz	r3, 801e4ee <_read_r+0x1e>
 801e4ec:	6023      	str	r3, [r4, #0]
 801e4ee:	bd38      	pop	{r3, r4, r5, pc}
 801e4f0:	2000b638 	.word	0x2000b638

0801e4f4 <__sccl>:
 801e4f4:	b570      	push	{r4, r5, r6, lr}
 801e4f6:	780b      	ldrb	r3, [r1, #0]
 801e4f8:	4604      	mov	r4, r0
 801e4fa:	2b5e      	cmp	r3, #94	; 0x5e
 801e4fc:	bf0b      	itete	eq
 801e4fe:	784b      	ldrbeq	r3, [r1, #1]
 801e500:	1c48      	addne	r0, r1, #1
 801e502:	1c88      	addeq	r0, r1, #2
 801e504:	2200      	movne	r2, #0
 801e506:	bf08      	it	eq
 801e508:	2201      	moveq	r2, #1
 801e50a:	1e61      	subs	r1, r4, #1
 801e50c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801e510:	f801 2f01 	strb.w	r2, [r1, #1]!
 801e514:	42a9      	cmp	r1, r5
 801e516:	d1fb      	bne.n	801e510 <__sccl+0x1c>
 801e518:	b90b      	cbnz	r3, 801e51e <__sccl+0x2a>
 801e51a:	3801      	subs	r0, #1
 801e51c:	bd70      	pop	{r4, r5, r6, pc}
 801e51e:	f082 0101 	eor.w	r1, r2, #1
 801e522:	54e1      	strb	r1, [r4, r3]
 801e524:	1c42      	adds	r2, r0, #1
 801e526:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 801e52a:	2d2d      	cmp	r5, #45	; 0x2d
 801e52c:	f102 36ff 	add.w	r6, r2, #4294967295
 801e530:	4610      	mov	r0, r2
 801e532:	d006      	beq.n	801e542 <__sccl+0x4e>
 801e534:	2d5d      	cmp	r5, #93	; 0x5d
 801e536:	d0f1      	beq.n	801e51c <__sccl+0x28>
 801e538:	b90d      	cbnz	r5, 801e53e <__sccl+0x4a>
 801e53a:	4630      	mov	r0, r6
 801e53c:	e7ee      	b.n	801e51c <__sccl+0x28>
 801e53e:	462b      	mov	r3, r5
 801e540:	e7ef      	b.n	801e522 <__sccl+0x2e>
 801e542:	7816      	ldrb	r6, [r2, #0]
 801e544:	2e5d      	cmp	r6, #93	; 0x5d
 801e546:	d0fa      	beq.n	801e53e <__sccl+0x4a>
 801e548:	42b3      	cmp	r3, r6
 801e54a:	dcf8      	bgt.n	801e53e <__sccl+0x4a>
 801e54c:	4618      	mov	r0, r3
 801e54e:	3001      	adds	r0, #1
 801e550:	4286      	cmp	r6, r0
 801e552:	5421      	strb	r1, [r4, r0]
 801e554:	dcfb      	bgt.n	801e54e <__sccl+0x5a>
 801e556:	43d8      	mvns	r0, r3
 801e558:	4430      	add	r0, r6
 801e55a:	1c5d      	adds	r5, r3, #1
 801e55c:	42b3      	cmp	r3, r6
 801e55e:	bfa8      	it	ge
 801e560:	2000      	movge	r0, #0
 801e562:	182b      	adds	r3, r5, r0
 801e564:	3202      	adds	r2, #2
 801e566:	e7de      	b.n	801e526 <__sccl+0x32>

0801e568 <_raise_r>:
 801e568:	291f      	cmp	r1, #31
 801e56a:	b538      	push	{r3, r4, r5, lr}
 801e56c:	4604      	mov	r4, r0
 801e56e:	460d      	mov	r5, r1
 801e570:	d904      	bls.n	801e57c <_raise_r+0x14>
 801e572:	2316      	movs	r3, #22
 801e574:	6003      	str	r3, [r0, #0]
 801e576:	f04f 30ff 	mov.w	r0, #4294967295
 801e57a:	bd38      	pop	{r3, r4, r5, pc}
 801e57c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801e57e:	b112      	cbz	r2, 801e586 <_raise_r+0x1e>
 801e580:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e584:	b94b      	cbnz	r3, 801e59a <_raise_r+0x32>
 801e586:	4620      	mov	r0, r4
 801e588:	f000 f830 	bl	801e5ec <_getpid_r>
 801e58c:	462a      	mov	r2, r5
 801e58e:	4601      	mov	r1, r0
 801e590:	4620      	mov	r0, r4
 801e592:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e596:	f000 b817 	b.w	801e5c8 <_kill_r>
 801e59a:	2b01      	cmp	r3, #1
 801e59c:	d00a      	beq.n	801e5b4 <_raise_r+0x4c>
 801e59e:	1c59      	adds	r1, r3, #1
 801e5a0:	d103      	bne.n	801e5aa <_raise_r+0x42>
 801e5a2:	2316      	movs	r3, #22
 801e5a4:	6003      	str	r3, [r0, #0]
 801e5a6:	2001      	movs	r0, #1
 801e5a8:	e7e7      	b.n	801e57a <_raise_r+0x12>
 801e5aa:	2400      	movs	r4, #0
 801e5ac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801e5b0:	4628      	mov	r0, r5
 801e5b2:	4798      	blx	r3
 801e5b4:	2000      	movs	r0, #0
 801e5b6:	e7e0      	b.n	801e57a <_raise_r+0x12>

0801e5b8 <raise>:
 801e5b8:	4b02      	ldr	r3, [pc, #8]	; (801e5c4 <raise+0xc>)
 801e5ba:	4601      	mov	r1, r0
 801e5bc:	6818      	ldr	r0, [r3, #0]
 801e5be:	f7ff bfd3 	b.w	801e568 <_raise_r>
 801e5c2:	bf00      	nop
 801e5c4:	200001a0 	.word	0x200001a0

0801e5c8 <_kill_r>:
 801e5c8:	b538      	push	{r3, r4, r5, lr}
 801e5ca:	4d07      	ldr	r5, [pc, #28]	; (801e5e8 <_kill_r+0x20>)
 801e5cc:	2300      	movs	r3, #0
 801e5ce:	4604      	mov	r4, r0
 801e5d0:	4608      	mov	r0, r1
 801e5d2:	4611      	mov	r1, r2
 801e5d4:	602b      	str	r3, [r5, #0]
 801e5d6:	f7e3 fc89 	bl	8001eec <_kill>
 801e5da:	1c43      	adds	r3, r0, #1
 801e5dc:	d102      	bne.n	801e5e4 <_kill_r+0x1c>
 801e5de:	682b      	ldr	r3, [r5, #0]
 801e5e0:	b103      	cbz	r3, 801e5e4 <_kill_r+0x1c>
 801e5e2:	6023      	str	r3, [r4, #0]
 801e5e4:	bd38      	pop	{r3, r4, r5, pc}
 801e5e6:	bf00      	nop
 801e5e8:	2000b638 	.word	0x2000b638

0801e5ec <_getpid_r>:
 801e5ec:	f7e3 bc76 	b.w	8001edc <_getpid>

0801e5f0 <__submore>:
 801e5f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e5f4:	460c      	mov	r4, r1
 801e5f6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801e5f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e5fc:	4299      	cmp	r1, r3
 801e5fe:	d11d      	bne.n	801e63c <__submore+0x4c>
 801e600:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801e604:	f7fe fd8c 	bl	801d120 <_malloc_r>
 801e608:	b918      	cbnz	r0, 801e612 <__submore+0x22>
 801e60a:	f04f 30ff 	mov.w	r0, #4294967295
 801e60e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e612:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801e616:	63a3      	str	r3, [r4, #56]	; 0x38
 801e618:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801e61c:	6360      	str	r0, [r4, #52]	; 0x34
 801e61e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801e622:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801e626:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801e62a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801e62e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801e632:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801e636:	6020      	str	r0, [r4, #0]
 801e638:	2000      	movs	r0, #0
 801e63a:	e7e8      	b.n	801e60e <__submore+0x1e>
 801e63c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801e63e:	0077      	lsls	r7, r6, #1
 801e640:	463a      	mov	r2, r7
 801e642:	f7ff fc01 	bl	801de48 <_realloc_r>
 801e646:	4605      	mov	r5, r0
 801e648:	2800      	cmp	r0, #0
 801e64a:	d0de      	beq.n	801e60a <__submore+0x1a>
 801e64c:	eb00 0806 	add.w	r8, r0, r6
 801e650:	4601      	mov	r1, r0
 801e652:	4632      	mov	r2, r6
 801e654:	4640      	mov	r0, r8
 801e656:	f7fd fdaf 	bl	801c1b8 <memcpy>
 801e65a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801e65e:	f8c4 8000 	str.w	r8, [r4]
 801e662:	e7e9      	b.n	801e638 <__submore+0x48>

0801e664 <_fstat_r>:
 801e664:	b538      	push	{r3, r4, r5, lr}
 801e666:	4d07      	ldr	r5, [pc, #28]	; (801e684 <_fstat_r+0x20>)
 801e668:	2300      	movs	r3, #0
 801e66a:	4604      	mov	r4, r0
 801e66c:	4608      	mov	r0, r1
 801e66e:	4611      	mov	r1, r2
 801e670:	602b      	str	r3, [r5, #0]
 801e672:	f7e3 fc9c 	bl	8001fae <_fstat>
 801e676:	1c43      	adds	r3, r0, #1
 801e678:	d102      	bne.n	801e680 <_fstat_r+0x1c>
 801e67a:	682b      	ldr	r3, [r5, #0]
 801e67c:	b103      	cbz	r3, 801e680 <_fstat_r+0x1c>
 801e67e:	6023      	str	r3, [r4, #0]
 801e680:	bd38      	pop	{r3, r4, r5, pc}
 801e682:	bf00      	nop
 801e684:	2000b638 	.word	0x2000b638

0801e688 <_isatty_r>:
 801e688:	b538      	push	{r3, r4, r5, lr}
 801e68a:	4d06      	ldr	r5, [pc, #24]	; (801e6a4 <_isatty_r+0x1c>)
 801e68c:	2300      	movs	r3, #0
 801e68e:	4604      	mov	r4, r0
 801e690:	4608      	mov	r0, r1
 801e692:	602b      	str	r3, [r5, #0]
 801e694:	f7e3 fc9b 	bl	8001fce <_isatty>
 801e698:	1c43      	adds	r3, r0, #1
 801e69a:	d102      	bne.n	801e6a2 <_isatty_r+0x1a>
 801e69c:	682b      	ldr	r3, [r5, #0]
 801e69e:	b103      	cbz	r3, 801e6a2 <_isatty_r+0x1a>
 801e6a0:	6023      	str	r3, [r4, #0]
 801e6a2:	bd38      	pop	{r3, r4, r5, pc}
 801e6a4:	2000b638 	.word	0x2000b638

0801e6a8 <_malloc_usable_size_r>:
 801e6a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e6ac:	1f18      	subs	r0, r3, #4
 801e6ae:	2b00      	cmp	r3, #0
 801e6b0:	bfbc      	itt	lt
 801e6b2:	580b      	ldrlt	r3, [r1, r0]
 801e6b4:	18c0      	addlt	r0, r0, r3
 801e6b6:	4770      	bx	lr

0801e6b8 <_init>:
 801e6b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e6ba:	bf00      	nop
 801e6bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e6be:	bc08      	pop	{r3}
 801e6c0:	469e      	mov	lr, r3
 801e6c2:	4770      	bx	lr

0801e6c4 <_fini>:
 801e6c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e6c6:	bf00      	nop
 801e6c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e6ca:	bc08      	pop	{r3}
 801e6cc:	469e      	mov	lr, r3
 801e6ce:	4770      	bx	lr
