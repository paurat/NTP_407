
NTP_STM32_F407VGT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000173c0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002e08  08017550  08017550  00027550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a358  0801a358  000301f4  2**0
                  CONTENTS
  4 .ARM          00000008  0801a358  0801a358  0002a358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a360  0801a360  000301f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a360  0801a360  0002a360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a364  0801a364  0002a364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0801a368  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c670  200001f4  0801a55c  000301f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000c864  0801a55c  0003c864  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004f746  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000989e  00000000  00000000  0007f96a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000028b8  00000000  00000000  00089208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000026b8  00000000  00000000  0008bac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00034cb6  00000000  00000000  0008e178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003eacf  00000000  00000000  000c2e2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000faceb  00000000  00000000  001018fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001fc5e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b0c8  00000000  00000000  001fc63c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f4 	.word	0x200001f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08017538 	.word	0x08017538

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	08017538 	.word	0x08017538

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000568:	b480      	push	{r7}
 800056a:	b085      	sub	sp, #20
 800056c:	af00      	add	r7, sp, #0
 800056e:	60f8      	str	r0, [r7, #12]
 8000570:	60b9      	str	r1, [r7, #8]
 8000572:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	4a07      	ldr	r2, [pc, #28]	; (8000594 <vApplicationGetIdleTaskMemory+0x2c>)
 8000578:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800057a:	68bb      	ldr	r3, [r7, #8]
 800057c:	4a06      	ldr	r2, [pc, #24]	; (8000598 <vApplicationGetIdleTaskMemory+0x30>)
 800057e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	2280      	movs	r2, #128	; 0x80
 8000584:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000586:	bf00      	nop
 8000588:	3714      	adds	r7, #20
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	20000210 	.word	0x20000210
 8000598:	20000264 	.word	0x20000264

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b5b0      	push	{r4, r5, r7, lr}
 800059e:	b088      	sub	sp, #32
 80005a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a2:	f000 fd47 	bl	8001034 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a6:	f000 f825 	bl	80005f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005aa:	f000 f9a1 	bl	80008f0 <MX_GPIO_Init>
  MX_RTC_Init();
 80005ae:	f000 f8a3 	bl	80006f8 <MX_RTC_Init>
  MX_USART1_UART_Init();
 80005b2:	f000 f949 	bl	8000848 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80005b6:	f000 f971 	bl	800089c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80005ba:	f000 f8f9 	bl	80007b0 <MX_TIM2_Init>
  MX_SPI3_Init();
 80005be:	f000 f8c1 	bl	8000744 <MX_SPI3_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005c2:	4b0a      	ldr	r3, [pc, #40]	; (80005ec <main+0x50>)
 80005c4:	1d3c      	adds	r4, r7, #4
 80005c6:	461d      	mov	r5, r3
 80005c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	2100      	movs	r1, #0
 80005d8:	4618      	mov	r0, r3
 80005da:	f008 fbb3 	bl	8008d44 <osThreadCreate>
 80005de:	4603      	mov	r3, r0
 80005e0:	4a03      	ldr	r2, [pc, #12]	; (80005f0 <main+0x54>)
 80005e2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005e4:	f008 fb97 	bl	8008d16 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e8:	e7fe      	b.n	80005e8 <main+0x4c>
 80005ea:	bf00      	nop
 80005ec:	0801755c 	.word	0x0801755c
 80005f0:	2000457c 	.word	0x2000457c

080005f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b098      	sub	sp, #96	; 0x60
 80005f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005fe:	2230      	movs	r2, #48	; 0x30
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f015 ff76 	bl	80164f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000608:	f107 031c 	add.w	r3, r7, #28
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000618:	f107 030c 	add.w	r3, r7, #12
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000626:	2300      	movs	r3, #0
 8000628:	60bb      	str	r3, [r7, #8]
 800062a:	4b31      	ldr	r3, [pc, #196]	; (80006f0 <SystemClock_Config+0xfc>)
 800062c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062e:	4a30      	ldr	r2, [pc, #192]	; (80006f0 <SystemClock_Config+0xfc>)
 8000630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000634:	6413      	str	r3, [r2, #64]	; 0x40
 8000636:	4b2e      	ldr	r3, [pc, #184]	; (80006f0 <SystemClock_Config+0xfc>)
 8000638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000642:	2300      	movs	r3, #0
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	4b2b      	ldr	r3, [pc, #172]	; (80006f4 <SystemClock_Config+0x100>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4a2a      	ldr	r2, [pc, #168]	; (80006f4 <SystemClock_Config+0x100>)
 800064c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000650:	6013      	str	r3, [r2, #0]
 8000652:	4b28      	ldr	r3, [pc, #160]	; (80006f4 <SystemClock_Config+0x100>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800065e:	2309      	movs	r3, #9
 8000660:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000662:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000666:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000668:	2301      	movs	r3, #1
 800066a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066c:	2302      	movs	r3, #2
 800066e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000670:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000674:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000676:	2319      	movs	r3, #25
 8000678:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 800067a:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800067e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000680:	2302      	movs	r3, #2
 8000682:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000684:	2307      	movs	r3, #7
 8000686:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000688:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800068c:	4618      	mov	r0, r3
 800068e:	f003 f963 	bl	8003958 <HAL_RCC_OscConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000698:	f000 fa0a 	bl	8000ab0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069c:	230f      	movs	r3, #15
 800069e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a0:	2302      	movs	r3, #2
 80006a2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006b4:	f107 031c 	add.w	r3, r7, #28
 80006b8:	2105      	movs	r1, #5
 80006ba:	4618      	mov	r0, r3
 80006bc:	f003 fbc4 	bl	8003e48 <HAL_RCC_ClockConfig>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80006c6:	f000 f9f3 	bl	8000ab0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80006ca:	2302      	movs	r3, #2
 80006cc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80006ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006d2:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	4618      	mov	r0, r3
 80006da:	f003 fdb7 	bl	800424c <HAL_RCCEx_PeriphCLKConfig>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80006e4:	f000 f9e4 	bl	8000ab0 <Error_Handler>
  }
}
 80006e8:	bf00      	nop
 80006ea:	3760      	adds	r7, #96	; 0x60
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40023800 	.word	0x40023800
 80006f4:	40007000 	.word	0x40007000

080006f8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80006fc:	4b0f      	ldr	r3, [pc, #60]	; (800073c <MX_RTC_Init+0x44>)
 80006fe:	4a10      	ldr	r2, [pc, #64]	; (8000740 <MX_RTC_Init+0x48>)
 8000700:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000702:	4b0e      	ldr	r3, [pc, #56]	; (800073c <MX_RTC_Init+0x44>)
 8000704:	2200      	movs	r2, #0
 8000706:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000708:	4b0c      	ldr	r3, [pc, #48]	; (800073c <MX_RTC_Init+0x44>)
 800070a:	227f      	movs	r2, #127	; 0x7f
 800070c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800070e:	4b0b      	ldr	r3, [pc, #44]	; (800073c <MX_RTC_Init+0x44>)
 8000710:	22ff      	movs	r2, #255	; 0xff
 8000712:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000714:	4b09      	ldr	r3, [pc, #36]	; (800073c <MX_RTC_Init+0x44>)
 8000716:	2200      	movs	r2, #0
 8000718:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800071a:	4b08      	ldr	r3, [pc, #32]	; (800073c <MX_RTC_Init+0x44>)
 800071c:	2200      	movs	r2, #0
 800071e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <MX_RTC_Init+0x44>)
 8000722:	2200      	movs	r2, #0
 8000724:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000726:	4805      	ldr	r0, [pc, #20]	; (800073c <MX_RTC_Init+0x44>)
 8000728:	f003 fe72 	bl	8004410 <HAL_RTC_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000732:	f000 f9bd 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	2000461c 	.word	0x2000461c
 8000740:	40002800 	.word	0x40002800

08000744 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000748:	4b17      	ldr	r3, [pc, #92]	; (80007a8 <MX_SPI3_Init+0x64>)
 800074a:	4a18      	ldr	r2, [pc, #96]	; (80007ac <MX_SPI3_Init+0x68>)
 800074c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800074e:	4b16      	ldr	r3, [pc, #88]	; (80007a8 <MX_SPI3_Init+0x64>)
 8000750:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000754:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000756:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <MX_SPI3_Init+0x64>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800075c:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <MX_SPI3_Init+0x64>)
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_SPI3_Init+0x64>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_SPI3_Init+0x64>)
 800076a:	2200      	movs	r2, #0
 800076c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_SPI3_Init+0x64>)
 8000770:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000774:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000776:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_SPI3_Init+0x64>)
 8000778:	2200      	movs	r2, #0
 800077a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800077c:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <MX_SPI3_Init+0x64>)
 800077e:	2200      	movs	r2, #0
 8000780:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000782:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_SPI3_Init+0x64>)
 8000784:	2200      	movs	r2, #0
 8000786:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000788:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <MX_SPI3_Init+0x64>)
 800078a:	2200      	movs	r2, #0
 800078c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800078e:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_SPI3_Init+0x64>)
 8000790:	220a      	movs	r2, #10
 8000792:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000794:	4804      	ldr	r0, [pc, #16]	; (80007a8 <MX_SPI3_Init+0x64>)
 8000796:	f003 ff20 	bl	80045da <HAL_SPI_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80007a0:	f000 f986 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	20004580 	.word	0x20004580
 80007ac:	40003c00 	.word	0x40003c00

080007b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b086      	sub	sp, #24
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007b6:	f107 0308 	add.w	r3, r7, #8
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007c4:	463b      	mov	r3, r7
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007cc:	4b1d      	ldr	r3, [pc, #116]	; (8000844 <MX_TIM2_Init+0x94>)
 80007ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80007d4:	4b1b      	ldr	r3, [pc, #108]	; (8000844 <MX_TIM2_Init+0x94>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007da:	4b1a      	ldr	r3, [pc, #104]	; (8000844 <MX_TIM2_Init+0x94>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80007e0:	4b18      	ldr	r3, [pc, #96]	; (8000844 <MX_TIM2_Init+0x94>)
 80007e2:	f04f 32ff 	mov.w	r2, #4294967295
 80007e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e8:	4b16      	ldr	r3, [pc, #88]	; (8000844 <MX_TIM2_Init+0x94>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ee:	4b15      	ldr	r3, [pc, #84]	; (8000844 <MX_TIM2_Init+0x94>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007f4:	4813      	ldr	r0, [pc, #76]	; (8000844 <MX_TIM2_Init+0x94>)
 80007f6:	f003 ff79 	bl	80046ec <HAL_TIM_Base_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000800:	f000 f956 	bl	8000ab0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000804:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000808:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800080a:	f107 0308 	add.w	r3, r7, #8
 800080e:	4619      	mov	r1, r3
 8000810:	480c      	ldr	r0, [pc, #48]	; (8000844 <MX_TIM2_Init+0x94>)
 8000812:	f004 f933 	bl	8004a7c <HAL_TIM_ConfigClockSource>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800081c:	f000 f948 	bl	8000ab0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000820:	2300      	movs	r3, #0
 8000822:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000824:	2300      	movs	r3, #0
 8000826:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000828:	463b      	mov	r3, r7
 800082a:	4619      	mov	r1, r3
 800082c:	4805      	ldr	r0, [pc, #20]	; (8000844 <MX_TIM2_Init+0x94>)
 800082e:	f004 fb4f 	bl	8004ed0 <HAL_TIMEx_MasterConfigSynchronization>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000838:	f000 f93a 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800083c:	bf00      	nop
 800083e:	3718      	adds	r7, #24
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	2000463c 	.word	0x2000463c

08000848 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800084c:	4b11      	ldr	r3, [pc, #68]	; (8000894 <MX_USART1_UART_Init+0x4c>)
 800084e:	4a12      	ldr	r2, [pc, #72]	; (8000898 <MX_USART1_UART_Init+0x50>)
 8000850:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000852:	4b10      	ldr	r3, [pc, #64]	; (8000894 <MX_USART1_UART_Init+0x4c>)
 8000854:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000858:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800085a:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <MX_USART1_UART_Init+0x4c>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000860:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <MX_USART1_UART_Init+0x4c>)
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000866:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <MX_USART1_UART_Init+0x4c>)
 8000868:	2200      	movs	r2, #0
 800086a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800086c:	4b09      	ldr	r3, [pc, #36]	; (8000894 <MX_USART1_UART_Init+0x4c>)
 800086e:	220c      	movs	r2, #12
 8000870:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000872:	4b08      	ldr	r3, [pc, #32]	; (8000894 <MX_USART1_UART_Init+0x4c>)
 8000874:	2200      	movs	r2, #0
 8000876:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000878:	4b06      	ldr	r3, [pc, #24]	; (8000894 <MX_USART1_UART_Init+0x4c>)
 800087a:	2200      	movs	r2, #0
 800087c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800087e:	4805      	ldr	r0, [pc, #20]	; (8000894 <MX_USART1_UART_Init+0x4c>)
 8000880:	f004 fbb6 	bl	8004ff0 <HAL_UART_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800088a:	f000 f911 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	200045d8 	.word	0x200045d8
 8000898:	40011000 	.word	0x40011000

0800089c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008a0:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008a2:	4a12      	ldr	r2, [pc, #72]	; (80008ec <MX_USART2_UART_Init+0x50>)
 80008a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008a6:	4b10      	ldr	r3, [pc, #64]	; (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008b4:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008c0:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008c2:	220c      	movs	r2, #12
 80008c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c6:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008d2:	4805      	ldr	r0, [pc, #20]	; (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008d4:	f004 fb8c 	bl	8004ff0 <HAL_UART_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008de:	f000 f8e7 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20004684 	.word	0x20004684
 80008ec:	40004400 	.word	0x40004400

080008f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08c      	sub	sp, #48	; 0x30
 80008f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]
 8000904:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	61bb      	str	r3, [r7, #24]
 800090a:	4b54      	ldr	r3, [pc, #336]	; (8000a5c <MX_GPIO_Init+0x16c>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a53      	ldr	r2, [pc, #332]	; (8000a5c <MX_GPIO_Init+0x16c>)
 8000910:	f043 0310 	orr.w	r3, r3, #16
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b51      	ldr	r3, [pc, #324]	; (8000a5c <MX_GPIO_Init+0x16c>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0310 	and.w	r3, r3, #16
 800091e:	61bb      	str	r3, [r7, #24]
 8000920:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]
 8000926:	4b4d      	ldr	r3, [pc, #308]	; (8000a5c <MX_GPIO_Init+0x16c>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a4c      	ldr	r2, [pc, #304]	; (8000a5c <MX_GPIO_Init+0x16c>)
 800092c:	f043 0304 	orr.w	r3, r3, #4
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b4a      	ldr	r3, [pc, #296]	; (8000a5c <MX_GPIO_Init+0x16c>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0304 	and.w	r3, r3, #4
 800093a:	617b      	str	r3, [r7, #20]
 800093c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	613b      	str	r3, [r7, #16]
 8000942:	4b46      	ldr	r3, [pc, #280]	; (8000a5c <MX_GPIO_Init+0x16c>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a45      	ldr	r2, [pc, #276]	; (8000a5c <MX_GPIO_Init+0x16c>)
 8000948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b43      	ldr	r3, [pc, #268]	; (8000a5c <MX_GPIO_Init+0x16c>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000956:	613b      	str	r3, [r7, #16]
 8000958:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	4b3f      	ldr	r3, [pc, #252]	; (8000a5c <MX_GPIO_Init+0x16c>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a3e      	ldr	r2, [pc, #248]	; (8000a5c <MX_GPIO_Init+0x16c>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b3c      	ldr	r3, [pc, #240]	; (8000a5c <MX_GPIO_Init+0x16c>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	60bb      	str	r3, [r7, #8]
 800097a:	4b38      	ldr	r3, [pc, #224]	; (8000a5c <MX_GPIO_Init+0x16c>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a37      	ldr	r2, [pc, #220]	; (8000a5c <MX_GPIO_Init+0x16c>)
 8000980:	f043 0302 	orr.w	r3, r3, #2
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b35      	ldr	r3, [pc, #212]	; (8000a5c <MX_GPIO_Init+0x16c>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0302 	and.w	r3, r3, #2
 800098e:	60bb      	str	r3, [r7, #8]
 8000990:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	607b      	str	r3, [r7, #4]
 8000996:	4b31      	ldr	r3, [pc, #196]	; (8000a5c <MX_GPIO_Init+0x16c>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a30      	ldr	r2, [pc, #192]	; (8000a5c <MX_GPIO_Init+0x16c>)
 800099c:	f043 0308 	orr.w	r3, r3, #8
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b2e      	ldr	r3, [pc, #184]	; (8000a5c <MX_GPIO_Init+0x16c>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0308 	and.w	r3, r3, #8
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80009ae:	2200      	movs	r2, #0
 80009b0:	21c0      	movs	r1, #192	; 0xc0
 80009b2:	482b      	ldr	r0, [pc, #172]	; (8000a60 <MX_GPIO_Init+0x170>)
 80009b4:	f001 fe34 	bl	8002620 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80009b8:	2318      	movs	r3, #24
 80009ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009bc:	2300      	movs	r3, #0
 80009be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009c4:	f107 031c 	add.w	r3, r7, #28
 80009c8:	4619      	mov	r1, r3
 80009ca:	4826      	ldr	r0, [pc, #152]	; (8000a64 <MX_GPIO_Init+0x174>)
 80009cc:	f001 fc8c 	bl	80022e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80009d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80009d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d6:	2300      	movs	r3, #0
 80009d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009de:	f107 031c 	add.w	r3, r7, #28
 80009e2:	4619      	mov	r1, r3
 80009e4:	4820      	ldr	r0, [pc, #128]	; (8000a68 <MX_GPIO_Init+0x178>)
 80009e6:	f001 fc7f 	bl	80022e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80009ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80009ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009f0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	4619      	mov	r1, r3
 8000a00:	481a      	ldr	r0, [pc, #104]	; (8000a6c <MX_GPIO_Init+0x17c>)
 8000a02:	f001 fc71 	bl	80022e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a06:	23c0      	movs	r3, #192	; 0xc0
 8000a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a12:	2300      	movs	r3, #0
 8000a14:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a16:	f107 031c 	add.w	r3, r7, #28
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4810      	ldr	r0, [pc, #64]	; (8000a60 <MX_GPIO_Init+0x170>)
 8000a1e:	f001 fc63 	bl	80022e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a30:	f107 031c 	add.w	r3, r7, #28
 8000a34:	4619      	mov	r1, r3
 8000a36:	480e      	ldr	r0, [pc, #56]	; (8000a70 <MX_GPIO_Init+0x180>)
 8000a38:	f001 fc56 	bl	80022e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a3c:	2310      	movs	r3, #16
 8000a3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a40:	2300      	movs	r3, #0
 8000a42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a48:	f107 031c 	add.w	r3, r7, #28
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4807      	ldr	r0, [pc, #28]	; (8000a6c <MX_GPIO_Init+0x17c>)
 8000a50:	f001 fc4a 	bl	80022e8 <HAL_GPIO_Init>

}
 8000a54:	bf00      	nop
 8000a56:	3730      	adds	r7, #48	; 0x30
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40023800 	.word	0x40023800
 8000a60:	40020800 	.word	0x40020800
 8000a64:	40021000 	.word	0x40021000
 8000a68:	40020400 	.word	0x40020400
 8000a6c:	40020c00 	.word	0x40020c00
 8000a70:	40020000 	.word	0x40020000

08000a74 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000a7c:	f006 f848 	bl	8006b10 <MX_LWIP_Init>

  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000a80:	f014 fff6 	bl	8015a70 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a84:	2001      	movs	r0, #1
 8000a86:	f008 f9a9 	bl	8008ddc <osDelay>
 8000a8a:	e7fb      	b.n	8000a84 <StartDefaultTask+0x10>

08000a8c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a04      	ldr	r2, [pc, #16]	; (8000aac <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d101      	bne.n	8000aa2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a9e:	f000 faeb 	bl	8001078 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40010000 	.word	0x40010000

08000ab0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab4:	b672      	cpsid	i
}
 8000ab6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <Error_Handler+0x8>
	...

08000abc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	607b      	str	r3, [r7, #4]
 8000ac6:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <HAL_MspInit+0x54>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aca:	4a11      	ldr	r2, [pc, #68]	; (8000b10 <HAL_MspInit+0x54>)
 8000acc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ad2:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <HAL_MspInit+0x54>)
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	603b      	str	r3, [r7, #0]
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <HAL_MspInit+0x54>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	4a0a      	ldr	r2, [pc, #40]	; (8000b10 <HAL_MspInit+0x54>)
 8000ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aec:	6413      	str	r3, [r2, #64]	; 0x40
 8000aee:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <HAL_MspInit+0x54>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af6:	603b      	str	r3, [r7, #0]
 8000af8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000afa:	2200      	movs	r2, #0
 8000afc:	210f      	movs	r1, #15
 8000afe:	f06f 0001 	mvn.w	r0, #1
 8000b02:	f000 fbb5 	bl	8001270 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b06:	bf00      	nop
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40023800 	.word	0x40023800

08000b14 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a05      	ldr	r2, [pc, #20]	; (8000b38 <HAL_RTC_MspInit+0x24>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d102      	bne.n	8000b2c <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000b26:	4b05      	ldr	r3, [pc, #20]	; (8000b3c <HAL_RTC_MspInit+0x28>)
 8000b28:	2201      	movs	r2, #1
 8000b2a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000b2c:	bf00      	nop
 8000b2e:	370c      	adds	r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr
 8000b38:	40002800 	.word	0x40002800
 8000b3c:	42470e3c 	.word	0x42470e3c

08000b40 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08a      	sub	sp, #40	; 0x28
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a19      	ldr	r2, [pc, #100]	; (8000bc4 <HAL_SPI_MspInit+0x84>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d12c      	bne.n	8000bbc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	613b      	str	r3, [r7, #16]
 8000b66:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <HAL_SPI_MspInit+0x88>)
 8000b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6a:	4a17      	ldr	r2, [pc, #92]	; (8000bc8 <HAL_SPI_MspInit+0x88>)
 8000b6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b70:	6413      	str	r3, [r2, #64]	; 0x40
 8000b72:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <HAL_SPI_MspInit+0x88>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b7a:	613b      	str	r3, [r7, #16]
 8000b7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <HAL_SPI_MspInit+0x88>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a10      	ldr	r2, [pc, #64]	; (8000bc8 <HAL_SPI_MspInit+0x88>)
 8000b88:	f043 0304 	orr.w	r3, r3, #4
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <HAL_SPI_MspInit+0x88>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0304 	and.w	r3, r3, #4
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000b9a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000b9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba8:	2303      	movs	r3, #3
 8000baa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bac:	2306      	movs	r3, #6
 8000bae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4805      	ldr	r0, [pc, #20]	; (8000bcc <HAL_SPI_MspInit+0x8c>)
 8000bb8:	f001 fb96 	bl	80022e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000bbc:	bf00      	nop
 8000bbe:	3728      	adds	r7, #40	; 0x28
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40003c00 	.word	0x40003c00
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40020800 	.word	0x40020800

08000bd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b085      	sub	sp, #20
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000be0:	d10d      	bne.n	8000bfe <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	60fb      	str	r3, [r7, #12]
 8000be6:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <HAL_TIM_Base_MspInit+0x3c>)
 8000be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bea:	4a08      	ldr	r2, [pc, #32]	; (8000c0c <HAL_TIM_Base_MspInit+0x3c>)
 8000bec:	f043 0301 	orr.w	r3, r3, #1
 8000bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf2:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <HAL_TIM_Base_MspInit+0x3c>)
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000bfe:	bf00      	nop
 8000c00:	3714      	adds	r7, #20
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	40023800 	.word	0x40023800

08000c10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b08c      	sub	sp, #48	; 0x30
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c18:	f107 031c 	add.w	r3, r7, #28
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]
 8000c26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a32      	ldr	r2, [pc, #200]	; (8000cf8 <HAL_UART_MspInit+0xe8>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d12c      	bne.n	8000c8c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	61bb      	str	r3, [r7, #24]
 8000c36:	4b31      	ldr	r3, [pc, #196]	; (8000cfc <HAL_UART_MspInit+0xec>)
 8000c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3a:	4a30      	ldr	r2, [pc, #192]	; (8000cfc <HAL_UART_MspInit+0xec>)
 8000c3c:	f043 0310 	orr.w	r3, r3, #16
 8000c40:	6453      	str	r3, [r2, #68]	; 0x44
 8000c42:	4b2e      	ldr	r3, [pc, #184]	; (8000cfc <HAL_UART_MspInit+0xec>)
 8000c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c46:	f003 0310 	and.w	r3, r3, #16
 8000c4a:	61bb      	str	r3, [r7, #24]
 8000c4c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	617b      	str	r3, [r7, #20]
 8000c52:	4b2a      	ldr	r3, [pc, #168]	; (8000cfc <HAL_UART_MspInit+0xec>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	4a29      	ldr	r2, [pc, #164]	; (8000cfc <HAL_UART_MspInit+0xec>)
 8000c58:	f043 0302 	orr.w	r3, r3, #2
 8000c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5e:	4b27      	ldr	r3, [pc, #156]	; (8000cfc <HAL_UART_MspInit+0xec>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	f003 0302 	and.w	r3, r3, #2
 8000c66:	617b      	str	r3, [r7, #20]
 8000c68:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c6a:	23c0      	movs	r3, #192	; 0xc0
 8000c6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c76:	2303      	movs	r3, #3
 8000c78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c7a:	2307      	movs	r3, #7
 8000c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c7e:	f107 031c 	add.w	r3, r7, #28
 8000c82:	4619      	mov	r1, r3
 8000c84:	481e      	ldr	r0, [pc, #120]	; (8000d00 <HAL_UART_MspInit+0xf0>)
 8000c86:	f001 fb2f 	bl	80022e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c8a:	e030      	b.n	8000cee <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART2)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a1c      	ldr	r2, [pc, #112]	; (8000d04 <HAL_UART_MspInit+0xf4>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d12b      	bne.n	8000cee <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	613b      	str	r3, [r7, #16]
 8000c9a:	4b18      	ldr	r3, [pc, #96]	; (8000cfc <HAL_UART_MspInit+0xec>)
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9e:	4a17      	ldr	r2, [pc, #92]	; (8000cfc <HAL_UART_MspInit+0xec>)
 8000ca0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ca6:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <HAL_UART_MspInit+0xec>)
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cae:	613b      	str	r3, [r7, #16]
 8000cb0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <HAL_UART_MspInit+0xec>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	4a10      	ldr	r2, [pc, #64]	; (8000cfc <HAL_UART_MspInit+0xec>)
 8000cbc:	f043 0308 	orr.w	r3, r3, #8
 8000cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc2:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <HAL_UART_MspInit+0xec>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	f003 0308 	and.w	r3, r3, #8
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000cce:	2360      	movs	r3, #96	; 0x60
 8000cd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cde:	2307      	movs	r3, #7
 8000ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ce2:	f107 031c 	add.w	r3, r7, #28
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4807      	ldr	r0, [pc, #28]	; (8000d08 <HAL_UART_MspInit+0xf8>)
 8000cea:	f001 fafd 	bl	80022e8 <HAL_GPIO_Init>
}
 8000cee:	bf00      	nop
 8000cf0:	3730      	adds	r7, #48	; 0x30
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40011000 	.word	0x40011000
 8000cfc:	40023800 	.word	0x40023800
 8000d00:	40020400 	.word	0x40020400
 8000d04:	40004400 	.word	0x40004400
 8000d08:	40020c00 	.word	0x40020c00

08000d0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b08c      	sub	sp, #48	; 0x30
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d14:	2300      	movs	r3, #0
 8000d16:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	6879      	ldr	r1, [r7, #4]
 8000d20:	2019      	movs	r0, #25
 8000d22:	f000 faa5 	bl	8001270 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000d26:	2019      	movs	r0, #25
 8000d28:	f000 fabe 	bl	80012a8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	4b1f      	ldr	r3, [pc, #124]	; (8000db0 <HAL_InitTick+0xa4>)
 8000d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d34:	4a1e      	ldr	r2, [pc, #120]	; (8000db0 <HAL_InitTick+0xa4>)
 8000d36:	f043 0301 	orr.w	r3, r3, #1
 8000d3a:	6453      	str	r3, [r2, #68]	; 0x44
 8000d3c:	4b1c      	ldr	r3, [pc, #112]	; (8000db0 <HAL_InitTick+0xa4>)
 8000d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d40:	f003 0301 	and.w	r3, r3, #1
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d48:	f107 0210 	add.w	r2, r7, #16
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	4611      	mov	r1, r2
 8000d52:	4618      	mov	r0, r3
 8000d54:	f003 fa48 	bl	80041e8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000d58:	f003 fa32 	bl	80041c0 <HAL_RCC_GetPCLK2Freq>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d64:	4a13      	ldr	r2, [pc, #76]	; (8000db4 <HAL_InitTick+0xa8>)
 8000d66:	fba2 2303 	umull	r2, r3, r2, r3
 8000d6a:	0c9b      	lsrs	r3, r3, #18
 8000d6c:	3b01      	subs	r3, #1
 8000d6e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000d70:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <HAL_InitTick+0xac>)
 8000d72:	4a12      	ldr	r2, [pc, #72]	; (8000dbc <HAL_InitTick+0xb0>)
 8000d74:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000d76:	4b10      	ldr	r3, [pc, #64]	; (8000db8 <HAL_InitTick+0xac>)
 8000d78:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d7c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000d7e:	4a0e      	ldr	r2, [pc, #56]	; (8000db8 <HAL_InitTick+0xac>)
 8000d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d82:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000d84:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <HAL_InitTick+0xac>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d8a:	4b0b      	ldr	r3, [pc, #44]	; (8000db8 <HAL_InitTick+0xac>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000d90:	4809      	ldr	r0, [pc, #36]	; (8000db8 <HAL_InitTick+0xac>)
 8000d92:	f003 fcab 	bl	80046ec <HAL_TIM_Base_Init>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d104      	bne.n	8000da6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000d9c:	4806      	ldr	r0, [pc, #24]	; (8000db8 <HAL_InitTick+0xac>)
 8000d9e:	f003 fcf5 	bl	800478c <HAL_TIM_Base_Start_IT>
 8000da2:	4603      	mov	r3, r0
 8000da4:	e000      	b.n	8000da8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3730      	adds	r7, #48	; 0x30
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40023800 	.word	0x40023800
 8000db4:	431bde83 	.word	0x431bde83
 8000db8:	200046c8 	.word	0x200046c8
 8000dbc:	40010000 	.word	0x40010000

08000dc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <NMI_Handler+0x4>

08000dc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dca:	e7fe      	b.n	8000dca <HardFault_Handler+0x4>

08000dcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <MemManage_Handler+0x4>

08000dd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dd6:	e7fe      	b.n	8000dd6 <BusFault_Handler+0x4>

08000dd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <UsageFault_Handler+0x4>

08000dde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000df0:	4802      	ldr	r0, [pc, #8]	; (8000dfc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000df2:	f003 fd3b 	bl	800486c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	200046c8 	.word	0x200046c8

08000e00 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000e04:	4802      	ldr	r0, [pc, #8]	; (8000e10 <ETH_IRQHandler+0x10>)
 8000e06:	f000 fe41 	bl	8001a8c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	2000602c 	.word	0x2000602c

08000e14 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e18:	4802      	ldr	r0, [pc, #8]	; (8000e24 <OTG_FS_IRQHandler+0x10>)
 8000e1a:	f001 fd6a 	bl	80028f2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	2000c450 	.word	0x2000c450

08000e28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
	return 1;
 8000e2c:	2301      	movs	r3, #1
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <_kill>:

int _kill(int pid, int sig)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000e42:	4b05      	ldr	r3, [pc, #20]	; (8000e58 <_kill+0x20>)
 8000e44:	2216      	movs	r2, #22
 8000e46:	601a      	str	r2, [r3, #0]
	return -1;
 8000e48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	2000af78 	.word	0x2000af78

08000e5c <_exit>:

void _exit (int status)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000e64:	f04f 31ff 	mov.w	r1, #4294967295
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f7ff ffe5 	bl	8000e38 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000e6e:	e7fe      	b.n	8000e6e <_exit+0x12>

08000e70 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b086      	sub	sp, #24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]
 8000e80:	e00a      	b.n	8000e98 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e82:	f3af 8000 	nop.w
 8000e86:	4601      	mov	r1, r0
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	1c5a      	adds	r2, r3, #1
 8000e8c:	60ba      	str	r2, [r7, #8]
 8000e8e:	b2ca      	uxtb	r2, r1
 8000e90:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	3301      	adds	r3, #1
 8000e96:	617b      	str	r3, [r7, #20]
 8000e98:	697a      	ldr	r2, [r7, #20]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	dbf0      	blt.n	8000e82 <_read+0x12>
	}

return len;
 8000ea0:	687b      	ldr	r3, [r7, #4]
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3718      	adds	r7, #24
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b086      	sub	sp, #24
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	60f8      	str	r0, [r7, #12]
 8000eb2:	60b9      	str	r1, [r7, #8]
 8000eb4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	617b      	str	r3, [r7, #20]
 8000eba:	e009      	b.n	8000ed0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	1c5a      	adds	r2, r3, #1
 8000ec0:	60ba      	str	r2, [r7, #8]
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	617b      	str	r3, [r7, #20]
 8000ed0:	697a      	ldr	r2, [r7, #20]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	dbf1      	blt.n	8000ebc <_write+0x12>
	}
	return len;
 8000ed8:	687b      	ldr	r3, [r7, #4]
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3718      	adds	r7, #24
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <_close>:

int _close(int file)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	b083      	sub	sp, #12
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
	return -1;
 8000eea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000efa:	b480      	push	{r7}
 8000efc:	b083      	sub	sp, #12
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
 8000f02:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f0a:	605a      	str	r2, [r3, #4]
	return 0;
 8000f0c:	2300      	movs	r3, #0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr

08000f1a <_isatty>:

int _isatty(int file)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	b083      	sub	sp, #12
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
	return 1;
 8000f22:	2301      	movs	r3, #1
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	607a      	str	r2, [r7, #4]
	return 0;
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3714      	adds	r7, #20
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
	...

08000f4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b087      	sub	sp, #28
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f54:	4a14      	ldr	r2, [pc, #80]	; (8000fa8 <_sbrk+0x5c>)
 8000f56:	4b15      	ldr	r3, [pc, #84]	; (8000fac <_sbrk+0x60>)
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f60:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <_sbrk+0x64>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d102      	bne.n	8000f6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f68:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <_sbrk+0x64>)
 8000f6a:	4a12      	ldr	r2, [pc, #72]	; (8000fb4 <_sbrk+0x68>)
 8000f6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f6e:	4b10      	ldr	r3, [pc, #64]	; (8000fb0 <_sbrk+0x64>)
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4413      	add	r3, r2
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d205      	bcs.n	8000f88 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000f7c:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <_sbrk+0x6c>)
 8000f7e:	220c      	movs	r2, #12
 8000f80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f82:	f04f 33ff 	mov.w	r3, #4294967295
 8000f86:	e009      	b.n	8000f9c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f88:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <_sbrk+0x64>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f8e:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <_sbrk+0x64>)
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4413      	add	r3, r2
 8000f96:	4a06      	ldr	r2, [pc, #24]	; (8000fb0 <_sbrk+0x64>)
 8000f98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	371c      	adds	r7, #28
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	20020000 	.word	0x20020000
 8000fac:	00000400 	.word	0x00000400
 8000fb0:	20000464 	.word	0x20000464
 8000fb4:	2000c868 	.word	0x2000c868
 8000fb8:	2000af78 	.word	0x2000af78

08000fbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fc0:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <SystemInit+0x20>)
 8000fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fc6:	4a05      	ldr	r2, [pc, #20]	; (8000fdc <SystemInit+0x20>)
 8000fc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000fe0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001018 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fe4:	480d      	ldr	r0, [pc, #52]	; (800101c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fe6:	490e      	ldr	r1, [pc, #56]	; (8001020 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fe8:	4a0e      	ldr	r2, [pc, #56]	; (8001024 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fec:	e002      	b.n	8000ff4 <LoopCopyDataInit>

08000fee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ff2:	3304      	adds	r3, #4

08000ff4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ff4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ff6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ff8:	d3f9      	bcc.n	8000fee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ffa:	4a0b      	ldr	r2, [pc, #44]	; (8001028 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ffc:	4c0b      	ldr	r4, [pc, #44]	; (800102c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ffe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001000:	e001      	b.n	8001006 <LoopFillZerobss>

08001002 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001002:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001004:	3204      	adds	r2, #4

08001006 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001006:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001008:	d3fb      	bcc.n	8001002 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800100a:	f7ff ffd7 	bl	8000fbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800100e:	f015 fa31 	bl	8016474 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001012:	f7ff fac3 	bl	800059c <main>
  bx  lr    
 8001016:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001018:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800101c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001020:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8001024:	0801a368 	.word	0x0801a368
  ldr r2, =_sbss
 8001028:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 800102c:	2000c864 	.word	0x2000c864

08001030 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001030:	e7fe      	b.n	8001030 <ADC_IRQHandler>
	...

08001034 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001038:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <HAL_Init+0x40>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a0d      	ldr	r2, [pc, #52]	; (8001074 <HAL_Init+0x40>)
 800103e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001042:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001044:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <HAL_Init+0x40>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a0a      	ldr	r2, [pc, #40]	; (8001074 <HAL_Init+0x40>)
 800104a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800104e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001050:	4b08      	ldr	r3, [pc, #32]	; (8001074 <HAL_Init+0x40>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a07      	ldr	r2, [pc, #28]	; (8001074 <HAL_Init+0x40>)
 8001056:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800105a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800105c:	2003      	movs	r0, #3
 800105e:	f000 f8fc 	bl	800125a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001062:	2000      	movs	r0, #0
 8001064:	f7ff fe52 	bl	8000d0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001068:	f7ff fd28 	bl	8000abc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40023c00 	.word	0x40023c00

08001078 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800107c:	4b06      	ldr	r3, [pc, #24]	; (8001098 <HAL_IncTick+0x20>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	461a      	mov	r2, r3
 8001082:	4b06      	ldr	r3, [pc, #24]	; (800109c <HAL_IncTick+0x24>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4413      	add	r3, r2
 8001088:	4a04      	ldr	r2, [pc, #16]	; (800109c <HAL_IncTick+0x24>)
 800108a:	6013      	str	r3, [r2, #0]
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	20000008 	.word	0x20000008
 800109c:	20004710 	.word	0x20004710

080010a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  return uwTick;
 80010a4:	4b03      	ldr	r3, [pc, #12]	; (80010b4 <HAL_GetTick+0x14>)
 80010a6:	681b      	ldr	r3, [r3, #0]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	20004710 	.word	0x20004710

080010b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010c0:	f7ff ffee 	bl	80010a0 <HAL_GetTick>
 80010c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010d0:	d005      	beq.n	80010de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010d2:	4b0a      	ldr	r3, [pc, #40]	; (80010fc <HAL_Delay+0x44>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	461a      	mov	r2, r3
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	4413      	add	r3, r2
 80010dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010de:	bf00      	nop
 80010e0:	f7ff ffde 	bl	80010a0 <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	68fa      	ldr	r2, [r7, #12]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d8f7      	bhi.n	80010e0 <HAL_Delay+0x28>
  {
  }
}
 80010f0:	bf00      	nop
 80010f2:	bf00      	nop
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000008 	.word	0x20000008

08001100 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f003 0307 	and.w	r3, r3, #7
 800110e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001110:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <__NVIC_SetPriorityGrouping+0x44>)
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001116:	68ba      	ldr	r2, [r7, #8]
 8001118:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800111c:	4013      	ands	r3, r2
 800111e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001128:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800112c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001130:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001132:	4a04      	ldr	r2, [pc, #16]	; (8001144 <__NVIC_SetPriorityGrouping+0x44>)
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	60d3      	str	r3, [r2, #12]
}
 8001138:	bf00      	nop
 800113a:	3714      	adds	r7, #20
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	e000ed00 	.word	0xe000ed00

08001148 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800114c:	4b04      	ldr	r3, [pc, #16]	; (8001160 <__NVIC_GetPriorityGrouping+0x18>)
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	0a1b      	lsrs	r3, r3, #8
 8001152:	f003 0307 	and.w	r3, r3, #7
}
 8001156:	4618      	mov	r0, r3
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800116e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001172:	2b00      	cmp	r3, #0
 8001174:	db0b      	blt.n	800118e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	f003 021f 	and.w	r2, r3, #31
 800117c:	4907      	ldr	r1, [pc, #28]	; (800119c <__NVIC_EnableIRQ+0x38>)
 800117e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001182:	095b      	lsrs	r3, r3, #5
 8001184:	2001      	movs	r0, #1
 8001186:	fa00 f202 	lsl.w	r2, r0, r2
 800118a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800118e:	bf00      	nop
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	e000e100 	.word	0xe000e100

080011a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	6039      	str	r1, [r7, #0]
 80011aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	db0a      	blt.n	80011ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	b2da      	uxtb	r2, r3
 80011b8:	490c      	ldr	r1, [pc, #48]	; (80011ec <__NVIC_SetPriority+0x4c>)
 80011ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011be:	0112      	lsls	r2, r2, #4
 80011c0:	b2d2      	uxtb	r2, r2
 80011c2:	440b      	add	r3, r1
 80011c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011c8:	e00a      	b.n	80011e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	b2da      	uxtb	r2, r3
 80011ce:	4908      	ldr	r1, [pc, #32]	; (80011f0 <__NVIC_SetPriority+0x50>)
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	f003 030f 	and.w	r3, r3, #15
 80011d6:	3b04      	subs	r3, #4
 80011d8:	0112      	lsls	r2, r2, #4
 80011da:	b2d2      	uxtb	r2, r2
 80011dc:	440b      	add	r3, r1
 80011de:	761a      	strb	r2, [r3, #24]
}
 80011e0:	bf00      	nop
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	e000e100 	.word	0xe000e100
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b089      	sub	sp, #36	; 0x24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	f1c3 0307 	rsb	r3, r3, #7
 800120e:	2b04      	cmp	r3, #4
 8001210:	bf28      	it	cs
 8001212:	2304      	movcs	r3, #4
 8001214:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	3304      	adds	r3, #4
 800121a:	2b06      	cmp	r3, #6
 800121c:	d902      	bls.n	8001224 <NVIC_EncodePriority+0x30>
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	3b03      	subs	r3, #3
 8001222:	e000      	b.n	8001226 <NVIC_EncodePriority+0x32>
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001228:	f04f 32ff 	mov.w	r2, #4294967295
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	43da      	mvns	r2, r3
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	401a      	ands	r2, r3
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800123c:	f04f 31ff 	mov.w	r1, #4294967295
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	fa01 f303 	lsl.w	r3, r1, r3
 8001246:	43d9      	mvns	r1, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800124c:	4313      	orrs	r3, r2
         );
}
 800124e:	4618      	mov	r0, r3
 8001250:	3724      	adds	r7, #36	; 0x24
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr

0800125a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b082      	sub	sp, #8
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f7ff ff4c 	bl	8001100 <__NVIC_SetPriorityGrouping>
}
 8001268:	bf00      	nop
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
 800127c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800127e:	2300      	movs	r3, #0
 8001280:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001282:	f7ff ff61 	bl	8001148 <__NVIC_GetPriorityGrouping>
 8001286:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	68b9      	ldr	r1, [r7, #8]
 800128c:	6978      	ldr	r0, [r7, #20]
 800128e:	f7ff ffb1 	bl	80011f4 <NVIC_EncodePriority>
 8001292:	4602      	mov	r2, r0
 8001294:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001298:	4611      	mov	r1, r2
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff ff80 	bl	80011a0 <__NVIC_SetPriority>
}
 80012a0:	bf00      	nop
 80012a2:	3718      	adds	r7, #24
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff ff54 	bl	8001164 <__NVIC_EnableIRQ>
}
 80012bc:	bf00      	nop
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b088      	sub	sp, #32
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80012cc:	2300      	movs	r3, #0
 80012ce:	61fb      	str	r3, [r7, #28]
 80012d0:	2300      	movs	r3, #0
 80012d2:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 80012d4:	4baa      	ldr	r3, [pc, #680]	; (8001580 <HAL_ETH_Init+0x2bc>)
 80012d6:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80012dc:	2300      	movs	r3, #0
 80012de:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d101      	bne.n	80012ea <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e183      	b.n	80015f2 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d106      	bne.n	8001304 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2200      	movs	r2, #0
 80012fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f005 fd34 	bl	8006d6c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001304:	2300      	movs	r3, #0
 8001306:	60bb      	str	r3, [r7, #8]
 8001308:	4b9e      	ldr	r3, [pc, #632]	; (8001584 <HAL_ETH_Init+0x2c0>)
 800130a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130c:	4a9d      	ldr	r2, [pc, #628]	; (8001584 <HAL_ETH_Init+0x2c0>)
 800130e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001312:	6453      	str	r3, [r2, #68]	; 0x44
 8001314:	4b9b      	ldr	r3, [pc, #620]	; (8001584 <HAL_ETH_Init+0x2c0>)
 8001316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001318:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800131c:	60bb      	str	r3, [r7, #8]
 800131e:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001320:	4b99      	ldr	r3, [pc, #612]	; (8001588 <HAL_ETH_Init+0x2c4>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	4a98      	ldr	r2, [pc, #608]	; (8001588 <HAL_ETH_Init+0x2c4>)
 8001326:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800132a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800132c:	4b96      	ldr	r3, [pc, #600]	; (8001588 <HAL_ETH_Init+0x2c4>)
 800132e:	685a      	ldr	r2, [r3, #4]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6a1b      	ldr	r3, [r3, #32]
 8001334:	4994      	ldr	r1, [pc, #592]	; (8001588 <HAL_ETH_Init+0x2c4>)
 8001336:	4313      	orrs	r3, r2
 8001338:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f042 0201 	orr.w	r2, r2, #1
 800134c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001350:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001352:	f7ff fea5 	bl	80010a0 <HAL_GetTick>
 8001356:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001358:	e011      	b.n	800137e <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800135a:	f7ff fea1 	bl	80010a0 <HAL_GetTick>
 800135e:	4602      	mov	r2, r0
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001368:	d909      	bls.n	800137e <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2203      	movs	r2, #3
 800136e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2200      	movs	r2, #0
 8001376:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e139      	b.n	80015f2 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 0301 	and.w	r3, r3, #1
 800138c:	2b00      	cmp	r3, #0
 800138e:	d1e4      	bne.n	800135a <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	691b      	ldr	r3, [r3, #16]
 8001396:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	f023 031c 	bic.w	r3, r3, #28
 800139e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80013a0:	f002 feee 	bl	8004180 <HAL_RCC_GetHCLKFreq>
 80013a4:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	4a78      	ldr	r2, [pc, #480]	; (800158c <HAL_ETH_Init+0x2c8>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d908      	bls.n	80013c0 <HAL_ETH_Init+0xfc>
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	4a77      	ldr	r2, [pc, #476]	; (8001590 <HAL_ETH_Init+0x2cc>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d804      	bhi.n	80013c0 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	f043 0308 	orr.w	r3, r3, #8
 80013bc:	61fb      	str	r3, [r7, #28]
 80013be:	e027      	b.n	8001410 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	4a73      	ldr	r2, [pc, #460]	; (8001590 <HAL_ETH_Init+0x2cc>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d908      	bls.n	80013da <HAL_ETH_Init+0x116>
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	4a6d      	ldr	r2, [pc, #436]	; (8001580 <HAL_ETH_Init+0x2bc>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d204      	bcs.n	80013da <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	f043 030c 	orr.w	r3, r3, #12
 80013d6:	61fb      	str	r3, [r7, #28]
 80013d8:	e01a      	b.n	8001410 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	4a68      	ldr	r2, [pc, #416]	; (8001580 <HAL_ETH_Init+0x2bc>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d303      	bcc.n	80013ea <HAL_ETH_Init+0x126>
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	4a6b      	ldr	r2, [pc, #428]	; (8001594 <HAL_ETH_Init+0x2d0>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d911      	bls.n	800140e <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	4a69      	ldr	r2, [pc, #420]	; (8001594 <HAL_ETH_Init+0x2d0>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d908      	bls.n	8001404 <HAL_ETH_Init+0x140>
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	4a68      	ldr	r2, [pc, #416]	; (8001598 <HAL_ETH_Init+0x2d4>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d804      	bhi.n	8001404 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	f043 0304 	orr.w	r3, r3, #4
 8001400:	61fb      	str	r3, [r7, #28]
 8001402:	e005      	b.n	8001410 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	f043 0310 	orr.w	r3, r3, #16
 800140a:	61fb      	str	r3, [r7, #28]
 800140c:	e000      	b.n	8001410 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800140e:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	69fa      	ldr	r2, [r7, #28]
 8001416:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001418:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800141c:	2100      	movs	r1, #0
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f000 fc17 	bl	8001c52 <HAL_ETH_WritePHYRegister>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d00b      	beq.n	8001442 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800142e:	6939      	ldr	r1, [r7, #16]
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f000 fca3 	bl	8001d7c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2201      	movs	r2, #1
 800143a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e0d7      	b.n	80015f2 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001442:	20ff      	movs	r0, #255	; 0xff
 8001444:	f7ff fe38 	bl	80010b8 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	2b00      	cmp	r3, #0
 800144e:	f000 80a5 	beq.w	800159c <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001452:	f7ff fe25 	bl	80010a0 <HAL_GetTick>
 8001456:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001458:	f107 030c 	add.w	r3, r7, #12
 800145c:	461a      	mov	r2, r3
 800145e:	2101      	movs	r1, #1
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f000 fb8e 	bl	8001b82 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001466:	f7ff fe1b 	bl	80010a0 <HAL_GetTick>
 800146a:	4602      	mov	r2, r0
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	f241 3288 	movw	r2, #5000	; 0x1388
 8001474:	4293      	cmp	r3, r2
 8001476:	d90f      	bls.n	8001498 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800147c:	6939      	ldr	r1, [r7, #16]
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f000 fc7c 	bl	8001d7c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2201      	movs	r2, #1
 8001488:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2200      	movs	r2, #0
 8001490:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	e0ac      	b.n	80015f2 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	f003 0304 	and.w	r3, r3, #4
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d0da      	beq.n	8001458 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80014a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014a6:	2100      	movs	r1, #0
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f000 fbd2 	bl	8001c52 <HAL_ETH_WritePHYRegister>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d00b      	beq.n	80014cc <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80014b8:	6939      	ldr	r1, [r7, #16]
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f000 fc5e 	bl	8001d7c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2201      	movs	r2, #1
 80014c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80014c8:	2301      	movs	r3, #1
 80014ca:	e092      	b.n	80015f2 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80014cc:	f7ff fde8 	bl	80010a0 <HAL_GetTick>
 80014d0:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80014d2:	f107 030c 	add.w	r3, r7, #12
 80014d6:	461a      	mov	r2, r3
 80014d8:	2101      	movs	r1, #1
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f000 fb51 	bl	8001b82 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80014e0:	f7ff fdde 	bl	80010a0 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d90f      	bls.n	8001512 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80014f6:	6939      	ldr	r1, [r7, #16]
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f000 fc3f 	bl	8001d7c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2201      	movs	r2, #1
 8001502:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2200      	movs	r2, #0
 800150a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e06f      	b.n	80015f2 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	f003 0320 	and.w	r3, r3, #32
 8001518:	2b00      	cmp	r3, #0
 800151a:	d0da      	beq.n	80014d2 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800151c:	f107 030c 	add.w	r3, r7, #12
 8001520:	461a      	mov	r2, r3
 8001522:	2110      	movs	r1, #16
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f000 fb2c 	bl	8001b82 <HAL_ETH_ReadPHYRegister>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d00b      	beq.n	8001548 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001534:	6939      	ldr	r1, [r7, #16]
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f000 fc20 	bl	8001d7c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2201      	movs	r2, #1
 8001540:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001544:	2301      	movs	r3, #1
 8001546:	e054      	b.n	80015f2 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	f003 0304 	and.w	r3, r3, #4
 800154e:	2b00      	cmp	r3, #0
 8001550:	d004      	beq.n	800155c <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	e002      	b.n	8001562 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	f003 0302 	and.w	r3, r3, #2
 8001568:	2b00      	cmp	r3, #0
 800156a:	d003      	beq.n	8001574 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2200      	movs	r2, #0
 8001570:	609a      	str	r2, [r3, #8]
 8001572:	e035      	b.n	80015e0 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800157a:	609a      	str	r2, [r3, #8]
 800157c:	e030      	b.n	80015e0 <HAL_ETH_Init+0x31c>
 800157e:	bf00      	nop
 8001580:	03938700 	.word	0x03938700
 8001584:	40023800 	.word	0x40023800
 8001588:	40013800 	.word	0x40013800
 800158c:	01312cff 	.word	0x01312cff
 8001590:	02160ebf 	.word	0x02160ebf
 8001594:	05f5e0ff 	.word	0x05f5e0ff
 8001598:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	08db      	lsrs	r3, r3, #3
 80015a2:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	085b      	lsrs	r3, r3, #1
 80015aa:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80015ac:	4313      	orrs	r3, r2
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	461a      	mov	r2, r3
 80015b2:	2100      	movs	r1, #0
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f000 fb4c 	bl	8001c52 <HAL_ETH_WritePHYRegister>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d00b      	beq.n	80015d8 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80015c4:	6939      	ldr	r1, [r7, #16]
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f000 fbd8 	bl	8001d7c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2201      	movs	r2, #1
 80015d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e00c      	b.n	80015f2 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80015d8:	f640 70ff 	movw	r0, #4095	; 0xfff
 80015dc:	f7ff fd6c 	bl	80010b8 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80015e0:	6939      	ldr	r1, [r7, #16]
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f000 fbca 	bl	8001d7c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2201      	movs	r2, #1
 80015ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3720      	adds	r7, #32
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop

080015fc <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b087      	sub	sp, #28
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
 8001608:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800160a:	2300      	movs	r3, #0
 800160c:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001614:	2b01      	cmp	r3, #1
 8001616:	d101      	bne.n	800161c <HAL_ETH_DMATxDescListInit+0x20>
 8001618:	2302      	movs	r3, #2
 800161a:	e052      	b.n	80016c2 <HAL_ETH_DMATxDescListInit+0xc6>
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2201      	movs	r2, #1
 8001620:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2202      	movs	r2, #2
 8001628:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	68ba      	ldr	r2, [r7, #8]
 8001630:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8001632:	2300      	movs	r3, #0
 8001634:	617b      	str	r3, [r7, #20]
 8001636:	e030      	b.n	800169a <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	015b      	lsls	r3, r3, #5
 800163c:	68ba      	ldr	r2, [r7, #8]
 800163e:	4413      	add	r3, r2
 8001640:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001648:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001650:	fb02 f303 	mul.w	r3, r2, r3
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	4413      	add	r3, r2
 8001658:	461a      	mov	r2, r3
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	69db      	ldr	r3, [r3, #28]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d105      	bne.n	8001672 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	3b01      	subs	r3, #1
 8001676:	697a      	ldr	r2, [r7, #20]
 8001678:	429a      	cmp	r2, r3
 800167a:	d208      	bcs.n	800168e <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	3301      	adds	r3, #1
 8001680:	015b      	lsls	r3, r3, #5
 8001682:	68ba      	ldr	r2, [r7, #8]
 8001684:	4413      	add	r3, r2
 8001686:	461a      	mov	r2, r3
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	60da      	str	r2, [r3, #12]
 800168c:	e002      	b.n	8001694 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800168e:	68ba      	ldr	r2, [r7, #8]
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	3301      	adds	r3, #1
 8001698:	617b      	str	r3, [r7, #20]
 800169a:	697a      	ldr	r2, [r7, #20]
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	429a      	cmp	r2, r3
 80016a0:	d3ca      	bcc.n	8001638 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	68ba      	ldr	r2, [r7, #8]
 80016a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016ac:	3310      	adds	r3, #16
 80016ae:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2201      	movs	r2, #1
 80016b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2200      	movs	r2, #0
 80016bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	371c      	adds	r7, #28
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr

080016ce <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80016ce:	b480      	push	{r7}
 80016d0:	b087      	sub	sp, #28
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	60f8      	str	r0, [r7, #12]
 80016d6:	60b9      	str	r1, [r7, #8]
 80016d8:	607a      	str	r2, [r7, #4]
 80016da:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d101      	bne.n	80016ee <HAL_ETH_DMARxDescListInit+0x20>
 80016ea:	2302      	movs	r3, #2
 80016ec:	e056      	b.n	800179c <HAL_ETH_DMARxDescListInit+0xce>
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	2201      	movs	r2, #1
 80016f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2202      	movs	r2, #2
 80016fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	68ba      	ldr	r2, [r7, #8]
 8001702:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]
 8001708:	e034      	b.n	8001774 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	015b      	lsls	r3, r3, #5
 800170e:	68ba      	ldr	r2, [r7, #8]
 8001710:	4413      	add	r3, r2
 8001712:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800171a:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001722:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800172a:	fb02 f303 	mul.w	r3, r2, r3
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	4413      	add	r3, r2
 8001732:	461a      	mov	r2, r3
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d105      	bne.n	800174c <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	3b01      	subs	r3, #1
 8001750:	697a      	ldr	r2, [r7, #20]
 8001752:	429a      	cmp	r2, r3
 8001754:	d208      	bcs.n	8001768 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	3301      	adds	r3, #1
 800175a:	015b      	lsls	r3, r3, #5
 800175c:	68ba      	ldr	r2, [r7, #8]
 800175e:	4413      	add	r3, r2
 8001760:	461a      	mov	r2, r3
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	60da      	str	r2, [r3, #12]
 8001766:	e002      	b.n	800176e <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001768:	68ba      	ldr	r2, [r7, #8]
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	3301      	adds	r3, #1
 8001772:	617b      	str	r3, [r7, #20]
 8001774:	697a      	ldr	r2, [r7, #20]
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	429a      	cmp	r2, r3
 800177a:	d3c6      	bcc.n	800170a <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	68ba      	ldr	r2, [r7, #8]
 8001782:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001786:	330c      	adds	r3, #12
 8001788:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2201      	movs	r2, #1
 800178e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2200      	movs	r2, #0
 8001796:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800179a:	2300      	movs	r3, #0
}
 800179c:	4618      	mov	r0, r3
 800179e:	371c      	adds	r7, #28
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b087      	sub	sp, #28
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 80017b2:	2300      	movs	r3, #0
 80017b4:	617b      	str	r3, [r7, #20]
 80017b6:	2300      	movs	r3, #0
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	2300      	movs	r3, #0
 80017bc:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d101      	bne.n	80017cc <HAL_ETH_TransmitFrame+0x24>
 80017c8:	2302      	movs	r3, #2
 80017ca:	e0cd      	b.n	8001968 <HAL_ETH_TransmitFrame+0x1c0>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2201      	movs	r2, #1
 80017d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2202      	movs	r2, #2
 80017d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d109      	bne.n	80017f6 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2201      	movs	r2, #1
 80017e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80017f2:	2301      	movs	r3, #1
 80017f4:	e0b8      	b.n	8001968 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	da09      	bge.n	8001814 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2212      	movs	r2, #18
 8001804:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e0a9      	b.n	8001968 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800181a:	4293      	cmp	r3, r2
 800181c:	d915      	bls.n	800184a <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	4a54      	ldr	r2, [pc, #336]	; (8001974 <HAL_ETH_TransmitFrame+0x1cc>)
 8001822:	fba2 2303 	umull	r2, r3, r2, r3
 8001826:	0a9b      	lsrs	r3, r3, #10
 8001828:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800182a:	683a      	ldr	r2, [r7, #0]
 800182c:	4b51      	ldr	r3, [pc, #324]	; (8001974 <HAL_ETH_TransmitFrame+0x1cc>)
 800182e:	fba3 1302 	umull	r1, r3, r3, r2
 8001832:	0a9b      	lsrs	r3, r3, #10
 8001834:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001838:	fb01 f303 	mul.w	r3, r1, r3
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b00      	cmp	r3, #0
 8001840:	d005      	beq.n	800184e <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	3301      	adds	r3, #1
 8001846:	617b      	str	r3, [r7, #20]
 8001848:	e001      	b.n	800184e <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 800184a:	2301      	movs	r3, #1
 800184c:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d11c      	bne.n	800188e <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800185e:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001862:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001868:	683a      	ldr	r2, [r7, #0]
 800186a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800186e:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800187e:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	461a      	mov	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	62da      	str	r2, [r3, #44]	; 0x2c
 800188c:	e04b      	b.n	8001926 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 800188e:	2300      	movs	r3, #0
 8001890:	613b      	str	r3, [r7, #16]
 8001892:	e044      	b.n	800191e <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800189e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018a2:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d107      	bne.n	80018ba <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80018b8:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018be:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80018c2:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d116      	bne.n	80018fc <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80018dc:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	4a25      	ldr	r2, [pc, #148]	; (8001978 <HAL_ETH_TransmitFrame+0x1d0>)
 80018e2:	fb02 f203 	mul.w	r2, r2, r3
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	4413      	add	r3, r2
 80018ea:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80018ee:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f4:	68fa      	ldr	r2, [r7, #12]
 80018f6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80018fa:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001906:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800190a:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	461a      	mov	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	3301      	adds	r3, #1
 800191c:	613b      	str	r3, [r7, #16]
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	429a      	cmp	r2, r3
 8001924:	d3b6      	bcc.n	8001894 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800192e:	3314      	adds	r3, #20
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0304 	and.w	r3, r3, #4
 8001936:	2b00      	cmp	r3, #0
 8001938:	d00d      	beq.n	8001956 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001942:	3314      	adds	r3, #20
 8001944:	2204      	movs	r2, #4
 8001946:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001950:	3304      	adds	r3, #4
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2201      	movs	r2, #1
 800195a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001966:	2300      	movs	r3, #0
}
 8001968:	4618      	mov	r0, r3
 800196a:	371c      	adds	r7, #28
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	ac02b00b 	.word	0xac02b00b
 8001978:	fffffa0c 	.word	0xfffffa0c

0800197c <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8001984:	2300      	movs	r3, #0
 8001986:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800198e:	2b01      	cmp	r3, #1
 8001990:	d101      	bne.n	8001996 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8001992:	2302      	movs	r3, #2
 8001994:	e074      	b.n	8001a80 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2201      	movs	r2, #1
 800199a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2202      	movs	r2, #2
 80019a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80019a6:	e05a      	b.n	8001a5e <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	3301      	adds	r3, #1
 80019ac:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019bc:	d10d      	bne.n	80019da <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2201      	movs	r2, #1
 80019ca:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	461a      	mov	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	629a      	str	r2, [r3, #40]	; 0x28
 80019d8:	e041      	b.n	8001a5e <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d10b      	bne.n	8001a00 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ec:	1c5a      	adds	r2, r3, #1
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	461a      	mov	r2, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	629a      	str	r2, [r3, #40]	; 0x28
 80019fe:	e02e      	b.n	8001a5e <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a0c:	1c5a      	adds	r2, r3, #1
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d103      	bne.n	8001a22 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	0c1b      	lsrs	r3, r3, #16
 8001a2a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001a2e:	1f1a      	subs	r2, r3, #4
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a38:	689a      	ldr	r2, [r3, #8]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	461a      	mov	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	e010      	b.n	8001a80 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	db02      	blt.n	8001a6e <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2b03      	cmp	r3, #3
 8001a6c:	d99c      	bls.n	80019a8 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2201      	movs	r2, #1
 8001a72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3714      	adds	r7, #20
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a9c:	3314      	adds	r3, #20
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aa4:	2b40      	cmp	r3, #64	; 0x40
 8001aa6:	d112      	bne.n	8001ace <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f005 fa0d 	bl	8006ec8 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ab6:	3314      	adds	r3, #20
 8001ab8:	2240      	movs	r2, #64	; 0x40
 8001aba:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001acc:	e01b      	b.n	8001b06 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ad6:	3314      	adds	r3, #20
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d111      	bne.n	8001b06 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f000 f839 	bl	8001b5a <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001af0:	3314      	adds	r3, #20
 8001af2:	2201      	movs	r2, #1
 8001af4:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2201      	movs	r2, #1
 8001afa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b0e:	3314      	adds	r3, #20
 8001b10:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b14:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b1e:	3314      	adds	r3, #20
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b2a:	d112      	bne.n	8001b52 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f000 f81e 	bl	8001b6e <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b3a:	3314      	adds	r3, #20
 8001b3c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b40:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2201      	movs	r2, #1
 8001b46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001b52:	bf00      	nop
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b083      	sub	sp, #12
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	b083      	sub	sp, #12
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001b76:	bf00      	nop
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b086      	sub	sp, #24
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	60f8      	str	r0, [r7, #12]
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	607a      	str	r2, [r7, #4]
 8001b8e:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8001b90:	2300      	movs	r3, #0
 8001b92:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001b94:	2300      	movs	r3, #0
 8001b96:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	2b82      	cmp	r3, #130	; 0x82
 8001ba2:	d101      	bne.n	8001ba8 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	e050      	b.n	8001c4a <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2282      	movs	r2, #130	; 0x82
 8001bac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	f003 031c 	and.w	r3, r3, #28
 8001bbe:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	8a1b      	ldrh	r3, [r3, #16]
 8001bc4:	02db      	lsls	r3, r3, #11
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	697a      	ldr	r2, [r7, #20]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001bce:	897b      	ldrh	r3, [r7, #10]
 8001bd0:	019b      	lsls	r3, r3, #6
 8001bd2:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001bd6:	697a      	ldr	r2, [r7, #20]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	f023 0302 	bic.w	r3, r3, #2
 8001be2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	f043 0301 	orr.w	r3, r3, #1
 8001bea:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	697a      	ldr	r2, [r7, #20]
 8001bf2:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001bf4:	f7ff fa54 	bl	80010a0 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001bfa:	e015      	b.n	8001c28 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001bfc:	f7ff fa50 	bl	80010a0 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c0a:	d309      	bcc.n	8001c20 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2200      	movs	r2, #0
 8001c18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e014      	b.n	8001c4a <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1e4      	bne.n	8001bfc <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	695b      	ldr	r3, [r3, #20]
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3718      	adds	r7, #24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b086      	sub	sp, #24
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	60f8      	str	r0, [r7, #12]
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	607a      	str	r2, [r7, #4]
 8001c5e:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001c60:	2300      	movs	r3, #0
 8001c62:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001c64:	2300      	movs	r3, #0
 8001c66:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	2b42      	cmp	r3, #66	; 0x42
 8001c72:	d101      	bne.n	8001c78 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001c74:	2302      	movs	r3, #2
 8001c76:	e04e      	b.n	8001d16 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2242      	movs	r2, #66	; 0x42
 8001c7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	691b      	ldr	r3, [r3, #16]
 8001c86:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	f003 031c 	and.w	r3, r3, #28
 8001c8e:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	8a1b      	ldrh	r3, [r3, #16]
 8001c94:	02db      	lsls	r3, r3, #11
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	697a      	ldr	r2, [r7, #20]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001c9e:	897b      	ldrh	r3, [r7, #10]
 8001ca0:	019b      	lsls	r3, r3, #6
 8001ca2:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001ca6:	697a      	ldr	r2, [r7, #20]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	f043 0302 	orr.w	r3, r3, #2
 8001cb2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	f043 0301 	orr.w	r3, r3, #1
 8001cba:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	b29a      	uxth	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	697a      	ldr	r2, [r7, #20]
 8001ccc:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001cce:	f7ff f9e7 	bl	80010a0 <HAL_GetTick>
 8001cd2:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001cd4:	e015      	b.n	8001d02 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001cd6:	f7ff f9e3 	bl	80010a0 <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ce4:	d309      	bcc.n	8001cfa <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e00d      	b.n	8001d16 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	691b      	ldr	r3, [r3, #16]
 8001d00:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	f003 0301 	and.w	r3, r3, #1
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d1e4      	bne.n	8001cd6 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3718      	adds	r7, #24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b082      	sub	sp, #8
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d101      	bne.n	8001d34 <HAL_ETH_Start+0x16>
 8001d30:	2302      	movs	r3, #2
 8001d32:	e01f      	b.n	8001d74 <HAL_ETH_Start+0x56>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2202      	movs	r2, #2
 8001d40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 fa1b 	bl	8002180 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 fa35 	bl	80021ba <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f000 fa7f 	bl	8002254 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 fa4c 	bl	80021f4 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f000 fa61 	bl	8002224 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2201      	movs	r2, #1
 8001d66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b0b0      	sub	sp, #192	; 0xc0
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001d86:	2300      	movs	r3, #0
 8001d88:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d007      	beq.n	8001da2 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d98:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001da0:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001da2:	2300      	movs	r3, #0
 8001da4:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001da6:	2300      	movs	r3, #0
 8001da8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001daa:	2300      	movs	r3, #0
 8001dac:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001dae:	2300      	movs	r3, #0
 8001db0:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001db2:	2300      	movs	r3, #0
 8001db4:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001db6:	2300      	movs	r3, #0
 8001db8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	69db      	ldr	r3, [r3, #28]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d103      	bne.n	8001dca <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001dc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dc6:	663b      	str	r3, [r7, #96]	; 0x60
 8001dc8:	e001      	b.n	8001dce <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001dce:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dd2:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001de0:	2300      	movs	r3, #0
 8001de2:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001de4:	2300      	movs	r3, #0
 8001de6:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001de8:	2340      	movs	r3, #64	; 0x40
 8001dea:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001dec:	2300      	movs	r3, #0
 8001dee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001df2:	2300      	movs	r3, #0
 8001df4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001e04:	2300      	movs	r3, #0
 8001e06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8001e10:	2300      	movs	r3, #0
 8001e12:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8001e16:	2300      	movs	r3, #0
 8001e18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001e1c:	2380      	movs	r3, #128	; 0x80
 8001e1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001e22:	2300      	movs	r3, #0
 8001e24:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001e34:	2300      	movs	r3, #0
 8001e36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001e40:	2300      	movs	r3, #0
 8001e42:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001e50:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e54:	4bac      	ldr	r3, [pc, #688]	; (8002108 <ETH_MACDMAConfig+0x38c>)
 8001e56:	4013      	ands	r3, r2
 8001e58:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001e5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001e5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001e60:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001e62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001e64:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001e66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001e68:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001e6e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001e70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001e72:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001e74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001e76:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001e7c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001e7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001e80:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001e82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001e84:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001e86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001e88:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001e8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001e8c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001e8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001e90:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001e92:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e96:	4313      	orrs	r3, r2
 8001e98:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ea4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001eb0:	2001      	movs	r0, #1
 8001eb2:	f7ff f901 	bl	80010b8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ebe:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001ec0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001ec2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001ec4:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001ec6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001ec8:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001eca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001ece:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001ed0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001ed4:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001ed6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001eda:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001edc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001ee0:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001ee4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001eec:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001eee:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001efa:	2001      	movs	r0, #1
 8001efc:	f7ff f8dc 	bl	80010b8 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f08:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001f12:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001f1c:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001f28:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f2c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001f30:	4013      	ands	r3, r2
 8001f32:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001f36:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f3a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001f3c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001f40:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001f42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001f46:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001f48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001f4c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001f4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001f52:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001f54:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001f58:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001f5a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f6c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f78:	2001      	movs	r0, #1
 8001f7a:	f7ff f89d 	bl	80010b8 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f86:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001f88:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001f8c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	430a      	orrs	r2, r1
 8001f96:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fa2:	2001      	movs	r0, #1
 8001fa4:	f7ff f888 	bl	80010b8 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fb0:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001fb6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fba:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001fc0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001fc4:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001fd6:	2304      	movs	r3, #4
 8001fd8:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001fda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fde:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001fe0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fe4:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001fe6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001fea:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001fec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ff0:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001ff2:	2380      	movs	r3, #128	; 0x80
 8001ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002006:	3318      	adds	r3, #24
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800200e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002012:	4b3e      	ldr	r3, [pc, #248]	; (800210c <ETH_MACDMAConfig+0x390>)
 8002014:	4013      	ands	r3, r2
 8002016:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800201a:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 800201c:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800201e:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002020:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002022:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002024:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002026:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002028:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800202a:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 800202c:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800202e:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002030:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002032:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002036:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002038:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800203a:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800203c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002040:	4313      	orrs	r3, r2
 8002042:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800204e:	3318      	adds	r3, #24
 8002050:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002054:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800205e:	3318      	adds	r3, #24
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002066:	2001      	movs	r0, #1
 8002068:	f7ff f826 	bl	80010b8 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002074:	3318      	adds	r3, #24
 8002076:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800207a:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800207c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800207e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002080:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002084:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002088:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800208a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 800208c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 800208e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002090:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002092:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002094:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002096:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80020a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020a4:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80020b4:	2001      	movs	r0, #1
 80020b6:	f7fe ffff 	bl	80010b8 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020c2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020c6:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d10f      	bne.n	80020f0 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020d8:	331c      	adds	r3, #28
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80020e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020ec:	331c      	adds	r3, #28
 80020ee:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	695b      	ldr	r3, [r3, #20]
 80020f4:	461a      	mov	r2, r3
 80020f6:	2100      	movs	r1, #0
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f000 f809 	bl	8002110 <ETH_MACAddressConfig>
}
 80020fe:	bf00      	nop
 8002100:	37c0      	adds	r7, #192	; 0xc0
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	ff20810f 	.word	0xff20810f
 800210c:	f8de3f23 	.word	0xf8de3f23

08002110 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002110:	b480      	push	{r7}
 8002112:	b087      	sub	sp, #28
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	3305      	adds	r3, #5
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	021b      	lsls	r3, r3, #8
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	3204      	adds	r2, #4
 8002128:	7812      	ldrb	r2, [r2, #0]
 800212a:	4313      	orrs	r3, r2
 800212c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800212e:	68ba      	ldr	r2, [r7, #8]
 8002130:	4b11      	ldr	r3, [pc, #68]	; (8002178 <ETH_MACAddressConfig+0x68>)
 8002132:	4413      	add	r3, r2
 8002134:	461a      	mov	r2, r3
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	3303      	adds	r3, #3
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	061a      	lsls	r2, r3, #24
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	3302      	adds	r3, #2
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	041b      	lsls	r3, r3, #16
 800214a:	431a      	orrs	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	3301      	adds	r3, #1
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	021b      	lsls	r3, r3, #8
 8002154:	4313      	orrs	r3, r2
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	7812      	ldrb	r2, [r2, #0]
 800215a:	4313      	orrs	r3, r2
 800215c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800215e:	68ba      	ldr	r2, [r7, #8]
 8002160:	4b06      	ldr	r3, [pc, #24]	; (800217c <ETH_MACAddressConfig+0x6c>)
 8002162:	4413      	add	r3, r2
 8002164:	461a      	mov	r2, r3
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	6013      	str	r3, [r2, #0]
}
 800216a:	bf00      	nop
 800216c:	371c      	adds	r7, #28
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	40028040 	.word	0x40028040
 800217c:	40028044 	.word	0x40028044

08002180 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002188:	2300      	movs	r3, #0
 800218a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f042 0208 	orr.w	r2, r2, #8
 800219a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80021a4:	2001      	movs	r0, #1
 80021a6:	f000 f87f 	bl	80022a8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68fa      	ldr	r2, [r7, #12]
 80021b0:	601a      	str	r2, [r3, #0]
}
 80021b2:	bf00      	nop
 80021b4:	3710      	adds	r7, #16
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b084      	sub	sp, #16
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80021c2:	2300      	movs	r3, #0
 80021c4:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f042 0204 	orr.w	r2, r2, #4
 80021d4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80021de:	2001      	movs	r0, #1
 80021e0:	f000 f862 	bl	80022a8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	601a      	str	r2, [r3, #0]
}
 80021ec:	bf00      	nop
 80021ee:	3710      	adds	r7, #16
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002204:	3318      	adds	r3, #24
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002210:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002214:	3318      	adds	r3, #24
 8002216:	601a      	str	r2, [r3, #0]
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002234:	3318      	adds	r3, #24
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f042 0202 	orr.w	r2, r2, #2
 8002240:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002244:	3318      	adds	r3, #24
 8002246:	601a      	str	r2, [r3, #0]
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800225c:	2300      	movs	r3, #0
 800225e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002268:	3318      	adds	r3, #24
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002274:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002278:	3318      	adds	r3, #24
 800227a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002284:	3318      	adds	r3, #24
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800228a:	2001      	movs	r0, #1
 800228c:	f000 f80c 	bl	80022a8 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68fa      	ldr	r2, [r7, #12]
 8002296:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800229a:	3318      	adds	r3, #24
 800229c:	601a      	str	r2, [r3, #0]
}
 800229e:	bf00      	nop
 80022a0:	3710      	adds	r7, #16
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
	...

080022a8 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022b0:	4b0b      	ldr	r3, [pc, #44]	; (80022e0 <ETH_Delay+0x38>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a0b      	ldr	r2, [pc, #44]	; (80022e4 <ETH_Delay+0x3c>)
 80022b6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ba:	0a5b      	lsrs	r3, r3, #9
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	fb02 f303 	mul.w	r3, r2, r3
 80022c2:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 80022c4:	bf00      	nop
  } 
  while (Delay --);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	1e5a      	subs	r2, r3, #1
 80022ca:	60fa      	str	r2, [r7, #12]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d1f9      	bne.n	80022c4 <ETH_Delay+0x1c>
}
 80022d0:	bf00      	nop
 80022d2:	bf00      	nop
 80022d4:	3714      	adds	r7, #20
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	20000000 	.word	0x20000000
 80022e4:	10624dd3 	.word	0x10624dd3

080022e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b089      	sub	sp, #36	; 0x24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022f2:	2300      	movs	r3, #0
 80022f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022f6:	2300      	movs	r3, #0
 80022f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022fa:	2300      	movs	r3, #0
 80022fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022fe:	2300      	movs	r3, #0
 8002300:	61fb      	str	r3, [r7, #28]
 8002302:	e16b      	b.n	80025dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002304:	2201      	movs	r2, #1
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	697a      	ldr	r2, [r7, #20]
 8002314:	4013      	ands	r3, r2
 8002316:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	429a      	cmp	r2, r3
 800231e:	f040 815a 	bne.w	80025d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f003 0303 	and.w	r3, r3, #3
 800232a:	2b01      	cmp	r3, #1
 800232c:	d005      	beq.n	800233a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002336:	2b02      	cmp	r3, #2
 8002338:	d130      	bne.n	800239c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	2203      	movs	r2, #3
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	43db      	mvns	r3, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4013      	ands	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	68da      	ldr	r2, [r3, #12]
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	4313      	orrs	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002370:	2201      	movs	r2, #1
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	43db      	mvns	r3, r3
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	4013      	ands	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	091b      	lsrs	r3, r3, #4
 8002386:	f003 0201 	and.w	r2, r3, #1
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	4313      	orrs	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f003 0303 	and.w	r3, r3, #3
 80023a4:	2b03      	cmp	r3, #3
 80023a6:	d017      	beq.n	80023d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	2203      	movs	r2, #3
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	43db      	mvns	r3, r3
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	4013      	ands	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	689a      	ldr	r2, [r3, #8]
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f003 0303 	and.w	r3, r3, #3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d123      	bne.n	800242c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	08da      	lsrs	r2, r3, #3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3208      	adds	r2, #8
 80023ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	f003 0307 	and.w	r3, r3, #7
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	220f      	movs	r2, #15
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	43db      	mvns	r3, r3
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	4013      	ands	r3, r2
 8002406:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	691a      	ldr	r2, [r3, #16]
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	f003 0307 	and.w	r3, r3, #7
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	4313      	orrs	r3, r2
 800241c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	08da      	lsrs	r2, r3, #3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	3208      	adds	r2, #8
 8002426:	69b9      	ldr	r1, [r7, #24]
 8002428:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	2203      	movs	r2, #3
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	43db      	mvns	r3, r3
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	4013      	ands	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f003 0203 	and.w	r2, r3, #3
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4313      	orrs	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002468:	2b00      	cmp	r3, #0
 800246a:	f000 80b4 	beq.w	80025d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800246e:	2300      	movs	r3, #0
 8002470:	60fb      	str	r3, [r7, #12]
 8002472:	4b60      	ldr	r3, [pc, #384]	; (80025f4 <HAL_GPIO_Init+0x30c>)
 8002474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002476:	4a5f      	ldr	r2, [pc, #380]	; (80025f4 <HAL_GPIO_Init+0x30c>)
 8002478:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800247c:	6453      	str	r3, [r2, #68]	; 0x44
 800247e:	4b5d      	ldr	r3, [pc, #372]	; (80025f4 <HAL_GPIO_Init+0x30c>)
 8002480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002482:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002486:	60fb      	str	r3, [r7, #12]
 8002488:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800248a:	4a5b      	ldr	r2, [pc, #364]	; (80025f8 <HAL_GPIO_Init+0x310>)
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	089b      	lsrs	r3, r3, #2
 8002490:	3302      	adds	r3, #2
 8002492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002496:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	f003 0303 	and.w	r3, r3, #3
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	220f      	movs	r2, #15
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	43db      	mvns	r3, r3
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	4013      	ands	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a52      	ldr	r2, [pc, #328]	; (80025fc <HAL_GPIO_Init+0x314>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d02b      	beq.n	800250e <HAL_GPIO_Init+0x226>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a51      	ldr	r2, [pc, #324]	; (8002600 <HAL_GPIO_Init+0x318>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d025      	beq.n	800250a <HAL_GPIO_Init+0x222>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a50      	ldr	r2, [pc, #320]	; (8002604 <HAL_GPIO_Init+0x31c>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d01f      	beq.n	8002506 <HAL_GPIO_Init+0x21e>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a4f      	ldr	r2, [pc, #316]	; (8002608 <HAL_GPIO_Init+0x320>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d019      	beq.n	8002502 <HAL_GPIO_Init+0x21a>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a4e      	ldr	r2, [pc, #312]	; (800260c <HAL_GPIO_Init+0x324>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d013      	beq.n	80024fe <HAL_GPIO_Init+0x216>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a4d      	ldr	r2, [pc, #308]	; (8002610 <HAL_GPIO_Init+0x328>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d00d      	beq.n	80024fa <HAL_GPIO_Init+0x212>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a4c      	ldr	r2, [pc, #304]	; (8002614 <HAL_GPIO_Init+0x32c>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d007      	beq.n	80024f6 <HAL_GPIO_Init+0x20e>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a4b      	ldr	r2, [pc, #300]	; (8002618 <HAL_GPIO_Init+0x330>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d101      	bne.n	80024f2 <HAL_GPIO_Init+0x20a>
 80024ee:	2307      	movs	r3, #7
 80024f0:	e00e      	b.n	8002510 <HAL_GPIO_Init+0x228>
 80024f2:	2308      	movs	r3, #8
 80024f4:	e00c      	b.n	8002510 <HAL_GPIO_Init+0x228>
 80024f6:	2306      	movs	r3, #6
 80024f8:	e00a      	b.n	8002510 <HAL_GPIO_Init+0x228>
 80024fa:	2305      	movs	r3, #5
 80024fc:	e008      	b.n	8002510 <HAL_GPIO_Init+0x228>
 80024fe:	2304      	movs	r3, #4
 8002500:	e006      	b.n	8002510 <HAL_GPIO_Init+0x228>
 8002502:	2303      	movs	r3, #3
 8002504:	e004      	b.n	8002510 <HAL_GPIO_Init+0x228>
 8002506:	2302      	movs	r3, #2
 8002508:	e002      	b.n	8002510 <HAL_GPIO_Init+0x228>
 800250a:	2301      	movs	r3, #1
 800250c:	e000      	b.n	8002510 <HAL_GPIO_Init+0x228>
 800250e:	2300      	movs	r3, #0
 8002510:	69fa      	ldr	r2, [r7, #28]
 8002512:	f002 0203 	and.w	r2, r2, #3
 8002516:	0092      	lsls	r2, r2, #2
 8002518:	4093      	lsls	r3, r2
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	4313      	orrs	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002520:	4935      	ldr	r1, [pc, #212]	; (80025f8 <HAL_GPIO_Init+0x310>)
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	089b      	lsrs	r3, r3, #2
 8002526:	3302      	adds	r3, #2
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800252e:	4b3b      	ldr	r3, [pc, #236]	; (800261c <HAL_GPIO_Init+0x334>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	43db      	mvns	r3, r3
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	4013      	ands	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d003      	beq.n	8002552 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	4313      	orrs	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002552:	4a32      	ldr	r2, [pc, #200]	; (800261c <HAL_GPIO_Init+0x334>)
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002558:	4b30      	ldr	r3, [pc, #192]	; (800261c <HAL_GPIO_Init+0x334>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	43db      	mvns	r3, r3
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	4013      	ands	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d003      	beq.n	800257c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	4313      	orrs	r3, r2
 800257a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800257c:	4a27      	ldr	r2, [pc, #156]	; (800261c <HAL_GPIO_Init+0x334>)
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002582:	4b26      	ldr	r3, [pc, #152]	; (800261c <HAL_GPIO_Init+0x334>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	43db      	mvns	r3, r3
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	4013      	ands	r3, r2
 8002590:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d003      	beq.n	80025a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025a6:	4a1d      	ldr	r2, [pc, #116]	; (800261c <HAL_GPIO_Init+0x334>)
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025ac:	4b1b      	ldr	r3, [pc, #108]	; (800261c <HAL_GPIO_Init+0x334>)
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	43db      	mvns	r3, r3
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	4013      	ands	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d003      	beq.n	80025d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025d0:	4a12      	ldr	r2, [pc, #72]	; (800261c <HAL_GPIO_Init+0x334>)
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	3301      	adds	r3, #1
 80025da:	61fb      	str	r3, [r7, #28]
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	2b0f      	cmp	r3, #15
 80025e0:	f67f ae90 	bls.w	8002304 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025e4:	bf00      	nop
 80025e6:	bf00      	nop
 80025e8:	3724      	adds	r7, #36	; 0x24
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	40023800 	.word	0x40023800
 80025f8:	40013800 	.word	0x40013800
 80025fc:	40020000 	.word	0x40020000
 8002600:	40020400 	.word	0x40020400
 8002604:	40020800 	.word	0x40020800
 8002608:	40020c00 	.word	0x40020c00
 800260c:	40021000 	.word	0x40021000
 8002610:	40021400 	.word	0x40021400
 8002614:	40021800 	.word	0x40021800
 8002618:	40021c00 	.word	0x40021c00
 800261c:	40013c00 	.word	0x40013c00

08002620 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	460b      	mov	r3, r1
 800262a:	807b      	strh	r3, [r7, #2]
 800262c:	4613      	mov	r3, r2
 800262e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002630:	787b      	ldrb	r3, [r7, #1]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002636:	887a      	ldrh	r2, [r7, #2]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800263c:	e003      	b.n	8002646 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800263e:	887b      	ldrh	r3, [r7, #2]
 8002640:	041a      	lsls	r2, r3, #16
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	619a      	str	r2, [r3, #24]
}
 8002646:	bf00      	nop
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr

08002652 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002652:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002654:	b08f      	sub	sp, #60	; 0x3c
 8002656:	af0a      	add	r7, sp, #40	; 0x28
 8002658:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d101      	bne.n	8002664 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e10f      	b.n	8002884 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d106      	bne.n	8002684 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f013 fbd6 	bl	8015e30 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2203      	movs	r2, #3
 8002688:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002694:	2b00      	cmp	r3, #0
 8002696:	d102      	bne.n	800269e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f002 ffcf 	bl	8005646 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	603b      	str	r3, [r7, #0]
 80026ae:	687e      	ldr	r6, [r7, #4]
 80026b0:	466d      	mov	r5, sp
 80026b2:	f106 0410 	add.w	r4, r6, #16
 80026b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026c2:	e885 0003 	stmia.w	r5, {r0, r1}
 80026c6:	1d33      	adds	r3, r6, #4
 80026c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026ca:	6838      	ldr	r0, [r7, #0]
 80026cc:	f002 fea6 	bl	800541c <USB_CoreInit>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d005      	beq.n	80026e2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2202      	movs	r2, #2
 80026da:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e0d0      	b.n	8002884 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2100      	movs	r1, #0
 80026e8:	4618      	mov	r0, r3
 80026ea:	f002 ffbd 	bl	8005668 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026ee:	2300      	movs	r3, #0
 80026f0:	73fb      	strb	r3, [r7, #15]
 80026f2:	e04a      	b.n	800278a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80026f4:	7bfa      	ldrb	r2, [r7, #15]
 80026f6:	6879      	ldr	r1, [r7, #4]
 80026f8:	4613      	mov	r3, r2
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	1a9b      	subs	r3, r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	440b      	add	r3, r1
 8002702:	333d      	adds	r3, #61	; 0x3d
 8002704:	2201      	movs	r2, #1
 8002706:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002708:	7bfa      	ldrb	r2, [r7, #15]
 800270a:	6879      	ldr	r1, [r7, #4]
 800270c:	4613      	mov	r3, r2
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	1a9b      	subs	r3, r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	440b      	add	r3, r1
 8002716:	333c      	adds	r3, #60	; 0x3c
 8002718:	7bfa      	ldrb	r2, [r7, #15]
 800271a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800271c:	7bfa      	ldrb	r2, [r7, #15]
 800271e:	7bfb      	ldrb	r3, [r7, #15]
 8002720:	b298      	uxth	r0, r3
 8002722:	6879      	ldr	r1, [r7, #4]
 8002724:	4613      	mov	r3, r2
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	1a9b      	subs	r3, r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	440b      	add	r3, r1
 800272e:	3342      	adds	r3, #66	; 0x42
 8002730:	4602      	mov	r2, r0
 8002732:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002734:	7bfa      	ldrb	r2, [r7, #15]
 8002736:	6879      	ldr	r1, [r7, #4]
 8002738:	4613      	mov	r3, r2
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	1a9b      	subs	r3, r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	440b      	add	r3, r1
 8002742:	333f      	adds	r3, #63	; 0x3f
 8002744:	2200      	movs	r2, #0
 8002746:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002748:	7bfa      	ldrb	r2, [r7, #15]
 800274a:	6879      	ldr	r1, [r7, #4]
 800274c:	4613      	mov	r3, r2
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	1a9b      	subs	r3, r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	440b      	add	r3, r1
 8002756:	3344      	adds	r3, #68	; 0x44
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800275c:	7bfa      	ldrb	r2, [r7, #15]
 800275e:	6879      	ldr	r1, [r7, #4]
 8002760:	4613      	mov	r3, r2
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	1a9b      	subs	r3, r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	440b      	add	r3, r1
 800276a:	3348      	adds	r3, #72	; 0x48
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002770:	7bfa      	ldrb	r2, [r7, #15]
 8002772:	6879      	ldr	r1, [r7, #4]
 8002774:	4613      	mov	r3, r2
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	1a9b      	subs	r3, r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	440b      	add	r3, r1
 800277e:	3350      	adds	r3, #80	; 0x50
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002784:	7bfb      	ldrb	r3, [r7, #15]
 8002786:	3301      	adds	r3, #1
 8002788:	73fb      	strb	r3, [r7, #15]
 800278a:	7bfa      	ldrb	r2, [r7, #15]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	429a      	cmp	r2, r3
 8002792:	d3af      	bcc.n	80026f4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002794:	2300      	movs	r3, #0
 8002796:	73fb      	strb	r3, [r7, #15]
 8002798:	e044      	b.n	8002824 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800279a:	7bfa      	ldrb	r2, [r7, #15]
 800279c:	6879      	ldr	r1, [r7, #4]
 800279e:	4613      	mov	r3, r2
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	1a9b      	subs	r3, r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	440b      	add	r3, r1
 80027a8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80027ac:	2200      	movs	r2, #0
 80027ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80027b0:	7bfa      	ldrb	r2, [r7, #15]
 80027b2:	6879      	ldr	r1, [r7, #4]
 80027b4:	4613      	mov	r3, r2
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	1a9b      	subs	r3, r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	440b      	add	r3, r1
 80027be:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80027c2:	7bfa      	ldrb	r2, [r7, #15]
 80027c4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80027c6:	7bfa      	ldrb	r2, [r7, #15]
 80027c8:	6879      	ldr	r1, [r7, #4]
 80027ca:	4613      	mov	r3, r2
 80027cc:	00db      	lsls	r3, r3, #3
 80027ce:	1a9b      	subs	r3, r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	440b      	add	r3, r1
 80027d4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80027d8:	2200      	movs	r2, #0
 80027da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80027dc:	7bfa      	ldrb	r2, [r7, #15]
 80027de:	6879      	ldr	r1, [r7, #4]
 80027e0:	4613      	mov	r3, r2
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	1a9b      	subs	r3, r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	440b      	add	r3, r1
 80027ea:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80027ee:	2200      	movs	r2, #0
 80027f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80027f2:	7bfa      	ldrb	r2, [r7, #15]
 80027f4:	6879      	ldr	r1, [r7, #4]
 80027f6:	4613      	mov	r3, r2
 80027f8:	00db      	lsls	r3, r3, #3
 80027fa:	1a9b      	subs	r3, r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	440b      	add	r3, r1
 8002800:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002804:	2200      	movs	r2, #0
 8002806:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002808:	7bfa      	ldrb	r2, [r7, #15]
 800280a:	6879      	ldr	r1, [r7, #4]
 800280c:	4613      	mov	r3, r2
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	1a9b      	subs	r3, r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	440b      	add	r3, r1
 8002816:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800281a:	2200      	movs	r2, #0
 800281c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800281e:	7bfb      	ldrb	r3, [r7, #15]
 8002820:	3301      	adds	r3, #1
 8002822:	73fb      	strb	r3, [r7, #15]
 8002824:	7bfa      	ldrb	r2, [r7, #15]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	429a      	cmp	r2, r3
 800282c:	d3b5      	bcc.n	800279a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	603b      	str	r3, [r7, #0]
 8002834:	687e      	ldr	r6, [r7, #4]
 8002836:	466d      	mov	r5, sp
 8002838:	f106 0410 	add.w	r4, r6, #16
 800283c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800283e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002840:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002842:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002844:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002848:	e885 0003 	stmia.w	r5, {r0, r1}
 800284c:	1d33      	adds	r3, r6, #4
 800284e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002850:	6838      	ldr	r0, [r7, #0]
 8002852:	f002 ff55 	bl	8005700 <USB_DevInit>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d005      	beq.n	8002868 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2202      	movs	r2, #2
 8002860:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e00d      	b.n	8002884 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4618      	mov	r0, r3
 800287e:	f003 ffd1 	bl	8006824 <USB_DevDisconnect>

  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	3714      	adds	r7, #20
 8002888:	46bd      	mov	sp, r7
 800288a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800288c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d101      	bne.n	80028a8 <HAL_PCD_Start+0x1c>
 80028a4:	2302      	movs	r3, #2
 80028a6:	e020      	b.n	80028ea <HAL_PCD_Start+0x5e>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d109      	bne.n	80028cc <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d005      	beq.n	80028cc <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f002 fea7 	bl	8005624 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4618      	mov	r0, r3
 80028dc:	f003 ff81 	bl	80067e2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3710      	adds	r7, #16
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80028f2:	b590      	push	{r4, r7, lr}
 80028f4:	b08d      	sub	sp, #52	; 0x34
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002900:	6a3b      	ldr	r3, [r7, #32]
 8002902:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4618      	mov	r0, r3
 800290a:	f004 f83f 	bl	800698c <USB_GetMode>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	f040 839d 	bne.w	8003050 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4618      	mov	r0, r3
 800291c:	f003 ffa3 	bl	8006866 <USB_ReadInterrupts>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	f000 8393 	beq.w	800304e <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4618      	mov	r0, r3
 800292e:	f003 ff9a 	bl	8006866 <USB_ReadInterrupts>
 8002932:	4603      	mov	r3, r0
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	2b02      	cmp	r3, #2
 800293a:	d107      	bne.n	800294c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	695a      	ldr	r2, [r3, #20]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f002 0202 	and.w	r2, r2, #2
 800294a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4618      	mov	r0, r3
 8002952:	f003 ff88 	bl	8006866 <USB_ReadInterrupts>
 8002956:	4603      	mov	r3, r0
 8002958:	f003 0310 	and.w	r3, r3, #16
 800295c:	2b10      	cmp	r3, #16
 800295e:	d161      	bne.n	8002a24 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	699a      	ldr	r2, [r3, #24]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f022 0210 	bic.w	r2, r2, #16
 800296e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002970:	6a3b      	ldr	r3, [r7, #32]
 8002972:	6a1b      	ldr	r3, [r3, #32]
 8002974:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	f003 020f 	and.w	r2, r3, #15
 800297c:	4613      	mov	r3, r2
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	1a9b      	subs	r3, r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	4413      	add	r3, r2
 800298c:	3304      	adds	r3, #4
 800298e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	0c5b      	lsrs	r3, r3, #17
 8002994:	f003 030f 	and.w	r3, r3, #15
 8002998:	2b02      	cmp	r3, #2
 800299a:	d124      	bne.n	80029e6 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80029a2:	4013      	ands	r3, r2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d035      	beq.n	8002a14 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	091b      	lsrs	r3, r3, #4
 80029b0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80029b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	461a      	mov	r2, r3
 80029ba:	6a38      	ldr	r0, [r7, #32]
 80029bc:	f003 fdbf 	bl	800653e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	68da      	ldr	r2, [r3, #12]
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	091b      	lsrs	r3, r3, #4
 80029c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029cc:	441a      	add	r2, r3
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	699a      	ldr	r2, [r3, #24]
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	091b      	lsrs	r3, r3, #4
 80029da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029de:	441a      	add	r2, r3
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	619a      	str	r2, [r3, #24]
 80029e4:	e016      	b.n	8002a14 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	0c5b      	lsrs	r3, r3, #17
 80029ea:	f003 030f 	and.w	r3, r3, #15
 80029ee:	2b06      	cmp	r3, #6
 80029f0:	d110      	bne.n	8002a14 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80029f8:	2208      	movs	r2, #8
 80029fa:	4619      	mov	r1, r3
 80029fc:	6a38      	ldr	r0, [r7, #32]
 80029fe:	f003 fd9e 	bl	800653e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	699a      	ldr	r2, [r3, #24]
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	091b      	lsrs	r3, r3, #4
 8002a0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a0e:	441a      	add	r2, r3
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	699a      	ldr	r2, [r3, #24]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f042 0210 	orr.w	r2, r2, #16
 8002a22:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f003 ff1c 	bl	8006866 <USB_ReadInterrupts>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a34:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002a38:	d16e      	bne.n	8002b18 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f003 ff22 	bl	800688c <USB_ReadDevAllOutEpInterrupt>
 8002a48:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002a4a:	e062      	b.n	8002b12 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d057      	beq.n	8002b06 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a5c:	b2d2      	uxtb	r2, r2
 8002a5e:	4611      	mov	r1, r2
 8002a60:	4618      	mov	r0, r3
 8002a62:	f003 ff47 	bl	80068f4 <USB_ReadDevOutEPInterrupt>
 8002a66:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00c      	beq.n	8002a8c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a74:	015a      	lsls	r2, r3, #5
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	4413      	add	r3, r2
 8002a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a7e:	461a      	mov	r2, r3
 8002a80:	2301      	movs	r3, #1
 8002a82:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002a84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 fdb0 	bl	80035ec <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	f003 0308 	and.w	r3, r3, #8
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00c      	beq.n	8002ab0 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a98:	015a      	lsls	r2, r3, #5
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	4413      	add	r3, r2
 8002a9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	2308      	movs	r3, #8
 8002aa6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002aa8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 feaa 	bl	8003804 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	f003 0310 	and.w	r3, r3, #16
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d008      	beq.n	8002acc <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abc:	015a      	lsls	r2, r3, #5
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	2310      	movs	r3, #16
 8002aca:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	f003 0320 	and.w	r3, r3, #32
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d008      	beq.n	8002ae8 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad8:	015a      	lsls	r2, r3, #5
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	4413      	add	r3, r2
 8002ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	2320      	movs	r3, #32
 8002ae6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d009      	beq.n	8002b06 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af4:	015a      	lsls	r2, r3, #5
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	4413      	add	r3, r2
 8002afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002afe:	461a      	mov	r2, r3
 8002b00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b04:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b08:	3301      	adds	r3, #1
 8002b0a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b0e:	085b      	lsrs	r3, r3, #1
 8002b10:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d199      	bne.n	8002a4c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f003 fea2 	bl	8006866 <USB_ReadInterrupts>
 8002b22:	4603      	mov	r3, r0
 8002b24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b28:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b2c:	f040 80c0 	bne.w	8002cb0 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f003 fec3 	bl	80068c0 <USB_ReadDevAllInEpInterrupt>
 8002b3a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002b40:	e0b2      	b.n	8002ca8 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b44:	f003 0301 	and.w	r3, r3, #1
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f000 80a7 	beq.w	8002c9c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b54:	b2d2      	uxtb	r2, r2
 8002b56:	4611      	mov	r1, r2
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f003 fee9 	bl	8006930 <USB_ReadDevInEPInterrupt>
 8002b5e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d057      	beq.n	8002c1a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6c:	f003 030f 	and.w	r3, r3, #15
 8002b70:	2201      	movs	r2, #1
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	43db      	mvns	r3, r3
 8002b84:	69f9      	ldr	r1, [r7, #28]
 8002b86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b90:	015a      	lsls	r2, r3, #5
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	4413      	add	r3, r2
 8002b96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d132      	bne.n	8002c0e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002ba8:	6879      	ldr	r1, [r7, #4]
 8002baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bac:	4613      	mov	r3, r2
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	1a9b      	subs	r3, r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	3348      	adds	r3, #72	; 0x48
 8002bb8:	6819      	ldr	r1, [r3, #0]
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	00db      	lsls	r3, r3, #3
 8002bc2:	1a9b      	subs	r3, r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	4403      	add	r3, r0
 8002bc8:	3344      	adds	r3, #68	; 0x44
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4419      	add	r1, r3
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	00db      	lsls	r3, r3, #3
 8002bd6:	1a9b      	subs	r3, r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	4403      	add	r3, r0
 8002bdc:	3348      	adds	r3, #72	; 0x48
 8002bde:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d113      	bne.n	8002c0e <HAL_PCD_IRQHandler+0x31c>
 8002be6:	6879      	ldr	r1, [r7, #4]
 8002be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bea:	4613      	mov	r3, r2
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	1a9b      	subs	r3, r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	440b      	add	r3, r1
 8002bf4:	3350      	adds	r3, #80	; 0x50
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d108      	bne.n	8002c0e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6818      	ldr	r0, [r3, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002c06:	461a      	mov	r2, r3
 8002c08:	2101      	movs	r1, #1
 8002c0a:	f003 fef1 	bl	80069f0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	4619      	mov	r1, r3
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f013 f99a 	bl	8015f4e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	f003 0308 	and.w	r3, r3, #8
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d008      	beq.n	8002c36 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c26:	015a      	lsls	r2, r3, #5
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c30:	461a      	mov	r2, r3
 8002c32:	2308      	movs	r3, #8
 8002c34:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	f003 0310 	and.w	r3, r3, #16
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d008      	beq.n	8002c52 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c42:	015a      	lsls	r2, r3, #5
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	4413      	add	r3, r2
 8002c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	2310      	movs	r3, #16
 8002c50:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d008      	beq.n	8002c6e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5e:	015a      	lsls	r2, r3, #5
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	4413      	add	r3, r2
 8002c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c68:	461a      	mov	r2, r3
 8002c6a:	2340      	movs	r3, #64	; 0x40
 8002c6c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d008      	beq.n	8002c8a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7a:	015a      	lsls	r2, r3, #5
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	4413      	add	r3, r2
 8002c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c84:	461a      	mov	r2, r3
 8002c86:	2302      	movs	r3, #2
 8002c88:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d003      	beq.n	8002c9c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002c94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 fc1b 	bl	80034d2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca4:	085b      	lsrs	r3, r3, #1
 8002ca6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	f47f af49 	bne.w	8002b42 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f003 fdd6 	bl	8006866 <USB_ReadInterrupts>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002cc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002cc4:	d122      	bne.n	8002d0c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	69fa      	ldr	r2, [r7, #28]
 8002cd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cd4:	f023 0301 	bic.w	r3, r3, #1
 8002cd8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d108      	bne.n	8002cf6 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002cec:	2100      	movs	r1, #0
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 fe26 	bl	8003940 <HAL_PCDEx_LPM_Callback>
 8002cf4:	e002      	b.n	8002cfc <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f013 f9a0 	bl	801603c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	695a      	ldr	r2, [r3, #20]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002d0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f003 fda8 	bl	8006866 <USB_ReadInterrupts>
 8002d16:	4603      	mov	r3, r0
 8002d18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d20:	d112      	bne.n	8002d48 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d102      	bne.n	8002d38 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f013 f95c 	bl	8015ff0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	695a      	ldr	r2, [r3, #20]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002d46:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f003 fd8a 	bl	8006866 <USB_ReadInterrupts>
 8002d52:	4603      	mov	r3, r0
 8002d54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d5c:	f040 80c7 	bne.w	8002eee <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	69fa      	ldr	r2, [r7, #28]
 8002d6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d6e:	f023 0301 	bic.w	r3, r3, #1
 8002d72:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2110      	movs	r1, #16
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f002 fe24 	bl	80059c8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d80:	2300      	movs	r3, #0
 8002d82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d84:	e056      	b.n	8002e34 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d88:	015a      	lsls	r2, r3, #5
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d92:	461a      	mov	r2, r3
 8002d94:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002d98:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d9c:	015a      	lsls	r2, r3, #5
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	4413      	add	r3, r2
 8002da2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002daa:	0151      	lsls	r1, r2, #5
 8002dac:	69fa      	ldr	r2, [r7, #28]
 8002dae:	440a      	add	r2, r1
 8002db0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002db4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002db8:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dbc:	015a      	lsls	r2, r3, #5
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dca:	0151      	lsls	r1, r2, #5
 8002dcc:	69fa      	ldr	r2, [r7, #28]
 8002dce:	440a      	add	r2, r1
 8002dd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002dd4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002dd8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ddc:	015a      	lsls	r2, r3, #5
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	4413      	add	r3, r2
 8002de2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002de6:	461a      	mov	r2, r3
 8002de8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002dec:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df0:	015a      	lsls	r2, r3, #5
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	4413      	add	r3, r2
 8002df6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dfe:	0151      	lsls	r1, r2, #5
 8002e00:	69fa      	ldr	r2, [r7, #28]
 8002e02:	440a      	add	r2, r1
 8002e04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002e08:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002e0c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e10:	015a      	lsls	r2, r3, #5
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	4413      	add	r3, r2
 8002e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e1e:	0151      	lsls	r1, r2, #5
 8002e20:	69fa      	ldr	r2, [r7, #28]
 8002e22:	440a      	add	r2, r1
 8002e24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002e28:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002e2c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e30:	3301      	adds	r3, #1
 8002e32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d3a3      	bcc.n	8002d86 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e44:	69db      	ldr	r3, [r3, #28]
 8002e46:	69fa      	ldr	r2, [r7, #28]
 8002e48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e4c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002e50:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d016      	beq.n	8002e88 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e64:	69fa      	ldr	r2, [r7, #28]
 8002e66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e6a:	f043 030b 	orr.w	r3, r3, #11
 8002e6e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7a:	69fa      	ldr	r2, [r7, #28]
 8002e7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e80:	f043 030b 	orr.w	r3, r3, #11
 8002e84:	6453      	str	r3, [r2, #68]	; 0x44
 8002e86:	e015      	b.n	8002eb4 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e8e:	695b      	ldr	r3, [r3, #20]
 8002e90:	69fa      	ldr	r2, [r7, #28]
 8002e92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e96:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e9a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002e9e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ea6:	691b      	ldr	r3, [r3, #16]
 8002ea8:	69fa      	ldr	r2, [r7, #28]
 8002eaa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002eae:	f043 030b 	orr.w	r3, r3, #11
 8002eb2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	69fa      	ldr	r2, [r7, #28]
 8002ebe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ec2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002ec6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6818      	ldr	r0, [r3, #0]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002ed8:	461a      	mov	r2, r3
 8002eda:	f003 fd89 	bl	80069f0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	695a      	ldr	r2, [r3, #20]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002eec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f003 fcb7 	bl	8006866 <USB_ReadInterrupts>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002efe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f02:	d124      	bne.n	8002f4e <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f003 fd4d 	bl	80069a8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f002 fdb5 	bl	8005a82 <USB_GetDevSpeed>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681c      	ldr	r4, [r3, #0]
 8002f24:	f001 f92c 	bl	8004180 <HAL_RCC_GetHCLKFreq>
 8002f28:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	461a      	mov	r2, r3
 8002f32:	4620      	mov	r0, r4
 8002f34:	f002 fad4 	bl	80054e0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f013 f830 	bl	8015f9e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	695a      	ldr	r2, [r3, #20]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002f4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f003 fc87 	bl	8006866 <USB_ReadInterrupts>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	f003 0308 	and.w	r3, r3, #8
 8002f5e:	2b08      	cmp	r3, #8
 8002f60:	d10a      	bne.n	8002f78 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f013 f80d 	bl	8015f82 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	695a      	ldr	r2, [r3, #20]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f002 0208 	and.w	r2, r2, #8
 8002f76:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f003 fc72 	bl	8006866 <USB_ReadInterrupts>
 8002f82:	4603      	mov	r3, r0
 8002f84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f8c:	d10f      	bne.n	8002fae <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	4619      	mov	r1, r3
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f013 f86f 	bl	801607c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	695a      	ldr	r2, [r3, #20]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002fac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f003 fc57 	bl	8006866 <USB_ReadInterrupts>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002fc2:	d10f      	bne.n	8002fe4 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	4619      	mov	r1, r3
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f013 f842 	bl	8016058 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	695a      	ldr	r2, [r3, #20]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002fe2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f003 fc3c 	bl	8006866 <USB_ReadInterrupts>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ff8:	d10a      	bne.n	8003010 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f013 f850 	bl	80160a0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	695a      	ldr	r2, [r3, #20]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800300e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4618      	mov	r0, r3
 8003016:	f003 fc26 	bl	8006866 <USB_ReadInterrupts>
 800301a:	4603      	mov	r3, r0
 800301c:	f003 0304 	and.w	r3, r3, #4
 8003020:	2b04      	cmp	r3, #4
 8003022:	d115      	bne.n	8003050 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	f003 0304 	and.w	r3, r3, #4
 8003032:	2b00      	cmp	r3, #0
 8003034:	d002      	beq.n	800303c <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f013 f840 	bl	80160bc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	6859      	ldr	r1, [r3, #4]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	430a      	orrs	r2, r1
 800304a:	605a      	str	r2, [r3, #4]
 800304c:	e000      	b.n	8003050 <HAL_PCD_IRQHandler+0x75e>
      return;
 800304e:	bf00      	nop
    }
  }
}
 8003050:	3734      	adds	r7, #52	; 0x34
 8003052:	46bd      	mov	sp, r7
 8003054:	bd90      	pop	{r4, r7, pc}

08003056 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b082      	sub	sp, #8
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
 800305e:	460b      	mov	r3, r1
 8003060:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003068:	2b01      	cmp	r3, #1
 800306a:	d101      	bne.n	8003070 <HAL_PCD_SetAddress+0x1a>
 800306c:	2302      	movs	r3, #2
 800306e:	e013      	b.n	8003098 <HAL_PCD_SetAddress+0x42>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	78fa      	ldrb	r2, [r7, #3]
 800307c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	78fa      	ldrb	r2, [r7, #3]
 8003086:	4611      	mov	r1, r2
 8003088:	4618      	mov	r0, r3
 800308a:	f003 fb84 	bl	8006796 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	3708      	adds	r7, #8
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	4608      	mov	r0, r1
 80030aa:	4611      	mov	r1, r2
 80030ac:	461a      	mov	r2, r3
 80030ae:	4603      	mov	r3, r0
 80030b0:	70fb      	strb	r3, [r7, #3]
 80030b2:	460b      	mov	r3, r1
 80030b4:	803b      	strh	r3, [r7, #0]
 80030b6:	4613      	mov	r3, r2
 80030b8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80030ba:	2300      	movs	r3, #0
 80030bc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80030be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	da0f      	bge.n	80030e6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030c6:	78fb      	ldrb	r3, [r7, #3]
 80030c8:	f003 020f 	and.w	r2, r3, #15
 80030cc:	4613      	mov	r3, r2
 80030ce:	00db      	lsls	r3, r3, #3
 80030d0:	1a9b      	subs	r3, r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	3338      	adds	r3, #56	; 0x38
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	4413      	add	r3, r2
 80030da:	3304      	adds	r3, #4
 80030dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2201      	movs	r2, #1
 80030e2:	705a      	strb	r2, [r3, #1]
 80030e4:	e00f      	b.n	8003106 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030e6:	78fb      	ldrb	r3, [r7, #3]
 80030e8:	f003 020f 	and.w	r2, r3, #15
 80030ec:	4613      	mov	r3, r2
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	1a9b      	subs	r3, r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	4413      	add	r3, r2
 80030fc:	3304      	adds	r3, #4
 80030fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003106:	78fb      	ldrb	r3, [r7, #3]
 8003108:	f003 030f 	and.w	r3, r3, #15
 800310c:	b2da      	uxtb	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003112:	883a      	ldrh	r2, [r7, #0]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	78ba      	ldrb	r2, [r7, #2]
 800311c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	785b      	ldrb	r3, [r3, #1]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d004      	beq.n	8003130 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	b29a      	uxth	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003130:	78bb      	ldrb	r3, [r7, #2]
 8003132:	2b02      	cmp	r3, #2
 8003134:	d102      	bne.n	800313c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003142:	2b01      	cmp	r3, #1
 8003144:	d101      	bne.n	800314a <HAL_PCD_EP_Open+0xaa>
 8003146:	2302      	movs	r3, #2
 8003148:	e00e      	b.n	8003168 <HAL_PCD_EP_Open+0xc8>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2201      	movs	r2, #1
 800314e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68f9      	ldr	r1, [r7, #12]
 8003158:	4618      	mov	r0, r3
 800315a:	f002 fcb7 	bl	8005acc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003166:	7afb      	ldrb	r3, [r7, #11]
}
 8003168:	4618      	mov	r0, r3
 800316a:	3710      	adds	r7, #16
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	460b      	mov	r3, r1
 800317a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800317c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003180:	2b00      	cmp	r3, #0
 8003182:	da0f      	bge.n	80031a4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003184:	78fb      	ldrb	r3, [r7, #3]
 8003186:	f003 020f 	and.w	r2, r3, #15
 800318a:	4613      	mov	r3, r2
 800318c:	00db      	lsls	r3, r3, #3
 800318e:	1a9b      	subs	r3, r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	3338      	adds	r3, #56	; 0x38
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	4413      	add	r3, r2
 8003198:	3304      	adds	r3, #4
 800319a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2201      	movs	r2, #1
 80031a0:	705a      	strb	r2, [r3, #1]
 80031a2:	e00f      	b.n	80031c4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031a4:	78fb      	ldrb	r3, [r7, #3]
 80031a6:	f003 020f 	and.w	r2, r3, #15
 80031aa:	4613      	mov	r3, r2
 80031ac:	00db      	lsls	r3, r3, #3
 80031ae:	1a9b      	subs	r3, r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	4413      	add	r3, r2
 80031ba:	3304      	adds	r3, #4
 80031bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80031c4:	78fb      	ldrb	r3, [r7, #3]
 80031c6:	f003 030f 	and.w	r3, r3, #15
 80031ca:	b2da      	uxtb	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d101      	bne.n	80031de <HAL_PCD_EP_Close+0x6e>
 80031da:	2302      	movs	r3, #2
 80031dc:	e00e      	b.n	80031fc <HAL_PCD_EP_Close+0x8c>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2201      	movs	r2, #1
 80031e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68f9      	ldr	r1, [r7, #12]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f002 fcf5 	bl	8005bdc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80031fa:	2300      	movs	r3, #0
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3710      	adds	r7, #16
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	607a      	str	r2, [r7, #4]
 800320e:	603b      	str	r3, [r7, #0]
 8003210:	460b      	mov	r3, r1
 8003212:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003214:	7afb      	ldrb	r3, [r7, #11]
 8003216:	f003 020f 	and.w	r2, r3, #15
 800321a:	4613      	mov	r3, r2
 800321c:	00db      	lsls	r3, r3, #3
 800321e:	1a9b      	subs	r3, r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	4413      	add	r3, r2
 800322a:	3304      	adds	r3, #4
 800322c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	683a      	ldr	r2, [r7, #0]
 8003238:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	2200      	movs	r2, #0
 800323e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	2200      	movs	r2, #0
 8003244:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003246:	7afb      	ldrb	r3, [r7, #11]
 8003248:	f003 030f 	and.w	r3, r3, #15
 800324c:	b2da      	uxtb	r2, r3
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d102      	bne.n	8003260 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003260:	7afb      	ldrb	r3, [r7, #11]
 8003262:	f003 030f 	and.w	r3, r3, #15
 8003266:	2b00      	cmp	r3, #0
 8003268:	d109      	bne.n	800327e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6818      	ldr	r0, [r3, #0]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	b2db      	uxtb	r3, r3
 8003274:	461a      	mov	r2, r3
 8003276:	6979      	ldr	r1, [r7, #20]
 8003278:	f002 ffd0 	bl	800621c <USB_EP0StartXfer>
 800327c:	e008      	b.n	8003290 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6818      	ldr	r0, [r3, #0]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	b2db      	uxtb	r3, r3
 8003288:	461a      	mov	r2, r3
 800328a:	6979      	ldr	r1, [r7, #20]
 800328c:	f002 fd82 	bl	8005d94 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3718      	adds	r7, #24
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800329a:	b480      	push	{r7}
 800329c:	b083      	sub	sp, #12
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
 80032a2:	460b      	mov	r3, r1
 80032a4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80032a6:	78fb      	ldrb	r3, [r7, #3]
 80032a8:	f003 020f 	and.w	r2, r3, #15
 80032ac:	6879      	ldr	r1, [r7, #4]
 80032ae:	4613      	mov	r3, r2
 80032b0:	00db      	lsls	r3, r3, #3
 80032b2:	1a9b      	subs	r3, r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	440b      	add	r3, r1
 80032b8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80032bc:	681b      	ldr	r3, [r3, #0]
}
 80032be:	4618      	mov	r0, r3
 80032c0:	370c      	adds	r7, #12
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr

080032ca <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b086      	sub	sp, #24
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	60f8      	str	r0, [r7, #12]
 80032d2:	607a      	str	r2, [r7, #4]
 80032d4:	603b      	str	r3, [r7, #0]
 80032d6:	460b      	mov	r3, r1
 80032d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032da:	7afb      	ldrb	r3, [r7, #11]
 80032dc:	f003 020f 	and.w	r2, r3, #15
 80032e0:	4613      	mov	r3, r2
 80032e2:	00db      	lsls	r3, r3, #3
 80032e4:	1a9b      	subs	r3, r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	3338      	adds	r3, #56	; 0x38
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	4413      	add	r3, r2
 80032ee:	3304      	adds	r3, #4
 80032f0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	683a      	ldr	r2, [r7, #0]
 80032fc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	2200      	movs	r2, #0
 8003302:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	2201      	movs	r2, #1
 8003308:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800330a:	7afb      	ldrb	r3, [r7, #11]
 800330c:	f003 030f 	and.w	r3, r3, #15
 8003310:	b2da      	uxtb	r2, r3
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d102      	bne.n	8003324 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003324:	7afb      	ldrb	r3, [r7, #11]
 8003326:	f003 030f 	and.w	r3, r3, #15
 800332a:	2b00      	cmp	r3, #0
 800332c:	d109      	bne.n	8003342 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6818      	ldr	r0, [r3, #0]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	b2db      	uxtb	r3, r3
 8003338:	461a      	mov	r2, r3
 800333a:	6979      	ldr	r1, [r7, #20]
 800333c:	f002 ff6e 	bl	800621c <USB_EP0StartXfer>
 8003340:	e008      	b.n	8003354 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6818      	ldr	r0, [r3, #0]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	b2db      	uxtb	r3, r3
 800334c:	461a      	mov	r2, r3
 800334e:	6979      	ldr	r1, [r7, #20]
 8003350:	f002 fd20 	bl	8005d94 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3718      	adds	r7, #24
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800335e:	b580      	push	{r7, lr}
 8003360:	b084      	sub	sp, #16
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
 8003366:	460b      	mov	r3, r1
 8003368:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800336a:	78fb      	ldrb	r3, [r7, #3]
 800336c:	f003 020f 	and.w	r2, r3, #15
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	429a      	cmp	r2, r3
 8003376:	d901      	bls.n	800337c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e050      	b.n	800341e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800337c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003380:	2b00      	cmp	r3, #0
 8003382:	da0f      	bge.n	80033a4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003384:	78fb      	ldrb	r3, [r7, #3]
 8003386:	f003 020f 	and.w	r2, r3, #15
 800338a:	4613      	mov	r3, r2
 800338c:	00db      	lsls	r3, r3, #3
 800338e:	1a9b      	subs	r3, r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	3338      	adds	r3, #56	; 0x38
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	4413      	add	r3, r2
 8003398:	3304      	adds	r3, #4
 800339a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2201      	movs	r2, #1
 80033a0:	705a      	strb	r2, [r3, #1]
 80033a2:	e00d      	b.n	80033c0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80033a4:	78fa      	ldrb	r2, [r7, #3]
 80033a6:	4613      	mov	r3, r2
 80033a8:	00db      	lsls	r3, r3, #3
 80033aa:	1a9b      	subs	r3, r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	4413      	add	r3, r2
 80033b6:	3304      	adds	r3, #4
 80033b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2200      	movs	r2, #0
 80033be:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2201      	movs	r2, #1
 80033c4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033c6:	78fb      	ldrb	r3, [r7, #3]
 80033c8:	f003 030f 	and.w	r3, r3, #15
 80033cc:	b2da      	uxtb	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d101      	bne.n	80033e0 <HAL_PCD_EP_SetStall+0x82>
 80033dc:	2302      	movs	r3, #2
 80033de:	e01e      	b.n	800341e <HAL_PCD_EP_SetStall+0xc0>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68f9      	ldr	r1, [r7, #12]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f003 f8fd 	bl	80065ee <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80033f4:	78fb      	ldrb	r3, [r7, #3]
 80033f6:	f003 030f 	and.w	r3, r3, #15
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d10a      	bne.n	8003414 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6818      	ldr	r0, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	b2d9      	uxtb	r1, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800340e:	461a      	mov	r2, r3
 8003410:	f003 faee 	bl	80069f0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3710      	adds	r7, #16
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}

08003426 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003426:	b580      	push	{r7, lr}
 8003428:	b084      	sub	sp, #16
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
 800342e:	460b      	mov	r3, r1
 8003430:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003432:	78fb      	ldrb	r3, [r7, #3]
 8003434:	f003 020f 	and.w	r2, r3, #15
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	429a      	cmp	r2, r3
 800343e:	d901      	bls.n	8003444 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e042      	b.n	80034ca <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003444:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003448:	2b00      	cmp	r3, #0
 800344a:	da0f      	bge.n	800346c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800344c:	78fb      	ldrb	r3, [r7, #3]
 800344e:	f003 020f 	and.w	r2, r3, #15
 8003452:	4613      	mov	r3, r2
 8003454:	00db      	lsls	r3, r3, #3
 8003456:	1a9b      	subs	r3, r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	3338      	adds	r3, #56	; 0x38
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	4413      	add	r3, r2
 8003460:	3304      	adds	r3, #4
 8003462:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2201      	movs	r2, #1
 8003468:	705a      	strb	r2, [r3, #1]
 800346a:	e00f      	b.n	800348c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800346c:	78fb      	ldrb	r3, [r7, #3]
 800346e:	f003 020f 	and.w	r2, r3, #15
 8003472:	4613      	mov	r3, r2
 8003474:	00db      	lsls	r3, r3, #3
 8003476:	1a9b      	subs	r3, r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	4413      	add	r3, r2
 8003482:	3304      	adds	r3, #4
 8003484:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003492:	78fb      	ldrb	r3, [r7, #3]
 8003494:	f003 030f 	and.w	r3, r3, #15
 8003498:	b2da      	uxtb	r2, r3
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d101      	bne.n	80034ac <HAL_PCD_EP_ClrStall+0x86>
 80034a8:	2302      	movs	r3, #2
 80034aa:	e00e      	b.n	80034ca <HAL_PCD_EP_ClrStall+0xa4>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68f9      	ldr	r1, [r7, #12]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f003 f905 	bl	80066ca <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3710      	adds	r7, #16
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b08a      	sub	sp, #40	; 0x28
 80034d6:	af02      	add	r7, sp, #8
 80034d8:	6078      	str	r0, [r7, #4]
 80034da:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80034e6:	683a      	ldr	r2, [r7, #0]
 80034e8:	4613      	mov	r3, r2
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	1a9b      	subs	r3, r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	3338      	adds	r3, #56	; 0x38
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	4413      	add	r3, r2
 80034f6:	3304      	adds	r3, #4
 80034f8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	699a      	ldr	r2, [r3, #24]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	695b      	ldr	r3, [r3, #20]
 8003502:	429a      	cmp	r2, r3
 8003504:	d901      	bls.n	800350a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e06c      	b.n	80035e4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	695a      	ldr	r2, [r3, #20]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	69fa      	ldr	r2, [r7, #28]
 800351c:	429a      	cmp	r2, r3
 800351e:	d902      	bls.n	8003526 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	3303      	adds	r3, #3
 800352a:	089b      	lsrs	r3, r3, #2
 800352c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800352e:	e02b      	b.n	8003588 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	695a      	ldr	r2, [r3, #20]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	69fa      	ldr	r2, [r7, #28]
 8003542:	429a      	cmp	r2, r3
 8003544:	d902      	bls.n	800354c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	3303      	adds	r3, #3
 8003550:	089b      	lsrs	r3, r3, #2
 8003552:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	68d9      	ldr	r1, [r3, #12]
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	b2da      	uxtb	r2, r3
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003564:	b2db      	uxtb	r3, r3
 8003566:	9300      	str	r3, [sp, #0]
 8003568:	4603      	mov	r3, r0
 800356a:	6978      	ldr	r0, [r7, #20]
 800356c:	f002 ffa9 	bl	80064c2 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	68da      	ldr	r2, [r3, #12]
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	441a      	add	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	699a      	ldr	r2, [r3, #24]
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	441a      	add	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	015a      	lsls	r2, r3, #5
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	4413      	add	r3, r2
 8003590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	b29b      	uxth	r3, r3
 8003598:	69ba      	ldr	r2, [r7, #24]
 800359a:	429a      	cmp	r2, r3
 800359c:	d809      	bhi.n	80035b2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	699a      	ldr	r2, [r3, #24]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d203      	bcs.n	80035b2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	695b      	ldr	r3, [r3, #20]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1be      	bne.n	8003530 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	695a      	ldr	r2, [r3, #20]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d811      	bhi.n	80035e2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	f003 030f 	and.w	r3, r3, #15
 80035c4:	2201      	movs	r2, #1
 80035c6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ca:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	43db      	mvns	r3, r3
 80035d8:	6939      	ldr	r1, [r7, #16]
 80035da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035de:	4013      	ands	r3, r2
 80035e0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3720      	adds	r7, #32
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b086      	sub	sp, #24
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	333c      	adds	r3, #60	; 0x3c
 8003604:	3304      	adds	r3, #4
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	015a      	lsls	r2, r3, #5
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	4413      	add	r3, r2
 8003612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	2b01      	cmp	r3, #1
 8003620:	f040 80a0 	bne.w	8003764 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	f003 0308 	and.w	r3, r3, #8
 800362a:	2b00      	cmp	r3, #0
 800362c:	d015      	beq.n	800365a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	4a72      	ldr	r2, [pc, #456]	; (80037fc <PCD_EP_OutXfrComplete_int+0x210>)
 8003632:	4293      	cmp	r3, r2
 8003634:	f240 80dd 	bls.w	80037f2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800363e:	2b00      	cmp	r3, #0
 8003640:	f000 80d7 	beq.w	80037f2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	015a      	lsls	r2, r3, #5
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	4413      	add	r3, r2
 800364c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003650:	461a      	mov	r2, r3
 8003652:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003656:	6093      	str	r3, [r2, #8]
 8003658:	e0cb      	b.n	80037f2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	f003 0320 	and.w	r3, r3, #32
 8003660:	2b00      	cmp	r3, #0
 8003662:	d009      	beq.n	8003678 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	015a      	lsls	r2, r3, #5
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	4413      	add	r3, r2
 800366c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003670:	461a      	mov	r2, r3
 8003672:	2320      	movs	r3, #32
 8003674:	6093      	str	r3, [r2, #8]
 8003676:	e0bc      	b.n	80037f2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800367e:	2b00      	cmp	r3, #0
 8003680:	f040 80b7 	bne.w	80037f2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	4a5d      	ldr	r2, [pc, #372]	; (80037fc <PCD_EP_OutXfrComplete_int+0x210>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d90f      	bls.n	80036ac <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00a      	beq.n	80036ac <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	015a      	lsls	r2, r3, #5
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	4413      	add	r3, r2
 800369e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036a2:	461a      	mov	r2, r3
 80036a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036a8:	6093      	str	r3, [r2, #8]
 80036aa:	e0a2      	b.n	80037f2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80036ac:	6879      	ldr	r1, [r7, #4]
 80036ae:	683a      	ldr	r2, [r7, #0]
 80036b0:	4613      	mov	r3, r2
 80036b2:	00db      	lsls	r3, r3, #3
 80036b4:	1a9b      	subs	r3, r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	440b      	add	r3, r1
 80036ba:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80036be:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	0159      	lsls	r1, r3, #5
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	440b      	add	r3, r1
 80036c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80036d2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	683a      	ldr	r2, [r7, #0]
 80036d8:	4613      	mov	r3, r2
 80036da:	00db      	lsls	r3, r3, #3
 80036dc:	1a9b      	subs	r3, r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	4403      	add	r3, r0
 80036e2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80036e6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80036e8:	6879      	ldr	r1, [r7, #4]
 80036ea:	683a      	ldr	r2, [r7, #0]
 80036ec:	4613      	mov	r3, r2
 80036ee:	00db      	lsls	r3, r3, #3
 80036f0:	1a9b      	subs	r3, r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	440b      	add	r3, r1
 80036f6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80036fa:	6819      	ldr	r1, [r3, #0]
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	683a      	ldr	r2, [r7, #0]
 8003700:	4613      	mov	r3, r2
 8003702:	00db      	lsls	r3, r3, #3
 8003704:	1a9b      	subs	r3, r3, r2
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	4403      	add	r3, r0
 800370a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4419      	add	r1, r3
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	683a      	ldr	r2, [r7, #0]
 8003716:	4613      	mov	r3, r2
 8003718:	00db      	lsls	r3, r3, #3
 800371a:	1a9b      	subs	r3, r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	4403      	add	r3, r0
 8003720:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003724:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d114      	bne.n	8003756 <PCD_EP_OutXfrComplete_int+0x16a>
 800372c:	6879      	ldr	r1, [r7, #4]
 800372e:	683a      	ldr	r2, [r7, #0]
 8003730:	4613      	mov	r3, r2
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	1a9b      	subs	r3, r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	440b      	add	r3, r1
 800373a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d108      	bne.n	8003756 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6818      	ldr	r0, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800374e:	461a      	mov	r2, r3
 8003750:	2101      	movs	r1, #1
 8003752:	f003 f94d 	bl	80069f0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	b2db      	uxtb	r3, r3
 800375a:	4619      	mov	r1, r3
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f012 fbdb 	bl	8015f18 <HAL_PCD_DataOutStageCallback>
 8003762:	e046      	b.n	80037f2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	4a26      	ldr	r2, [pc, #152]	; (8003800 <PCD_EP_OutXfrComplete_int+0x214>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d124      	bne.n	80037b6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00a      	beq.n	800378c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	015a      	lsls	r2, r3, #5
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	4413      	add	r3, r2
 800377e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003782:	461a      	mov	r2, r3
 8003784:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003788:	6093      	str	r3, [r2, #8]
 800378a:	e032      	b.n	80037f2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	f003 0320 	and.w	r3, r3, #32
 8003792:	2b00      	cmp	r3, #0
 8003794:	d008      	beq.n	80037a8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	015a      	lsls	r2, r3, #5
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	4413      	add	r3, r2
 800379e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037a2:	461a      	mov	r2, r3
 80037a4:	2320      	movs	r3, #32
 80037a6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	4619      	mov	r1, r3
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f012 fbb2 	bl	8015f18 <HAL_PCD_DataOutStageCallback>
 80037b4:	e01d      	b.n	80037f2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d114      	bne.n	80037e6 <PCD_EP_OutXfrComplete_int+0x1fa>
 80037bc:	6879      	ldr	r1, [r7, #4]
 80037be:	683a      	ldr	r2, [r7, #0]
 80037c0:	4613      	mov	r3, r2
 80037c2:	00db      	lsls	r3, r3, #3
 80037c4:	1a9b      	subs	r3, r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	440b      	add	r3, r1
 80037ca:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d108      	bne.n	80037e6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6818      	ldr	r0, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80037de:	461a      	mov	r2, r3
 80037e0:	2100      	movs	r1, #0
 80037e2:	f003 f905 	bl	80069f0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	4619      	mov	r1, r3
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f012 fb93 	bl	8015f18 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3718      	adds	r7, #24
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	4f54300a 	.word	0x4f54300a
 8003800:	4f54310a 	.word	0x4f54310a

08003804 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b086      	sub	sp, #24
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	333c      	adds	r3, #60	; 0x3c
 800381c:	3304      	adds	r3, #4
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	015a      	lsls	r2, r3, #5
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	4413      	add	r3, r2
 800382a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	4a15      	ldr	r2, [pc, #84]	; (800388c <PCD_EP_OutSetupPacket_int+0x88>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d90e      	bls.n	8003858 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003840:	2b00      	cmp	r3, #0
 8003842:	d009      	beq.n	8003858 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	015a      	lsls	r2, r3, #5
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	4413      	add	r3, r2
 800384c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003850:	461a      	mov	r2, r3
 8003852:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003856:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f012 fb4b 	bl	8015ef4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	4a0a      	ldr	r2, [pc, #40]	; (800388c <PCD_EP_OutSetupPacket_int+0x88>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d90c      	bls.n	8003880 <PCD_EP_OutSetupPacket_int+0x7c>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d108      	bne.n	8003880 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6818      	ldr	r0, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003878:	461a      	mov	r2, r3
 800387a:	2101      	movs	r1, #1
 800387c:	f003 f8b8 	bl	80069f0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3718      	adds	r7, #24
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	4f54300a 	.word	0x4f54300a

08003890 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003890:	b480      	push	{r7}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	460b      	mov	r3, r1
 800389a:	70fb      	strb	r3, [r7, #3]
 800389c:	4613      	mov	r3, r2
 800389e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80038a8:	78fb      	ldrb	r3, [r7, #3]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d107      	bne.n	80038be <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80038ae:	883b      	ldrh	r3, [r7, #0]
 80038b0:	0419      	lsls	r1, r3, #16
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68ba      	ldr	r2, [r7, #8]
 80038b8:	430a      	orrs	r2, r1
 80038ba:	629a      	str	r2, [r3, #40]	; 0x28
 80038bc:	e028      	b.n	8003910 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c4:	0c1b      	lsrs	r3, r3, #16
 80038c6:	68ba      	ldr	r2, [r7, #8]
 80038c8:	4413      	add	r3, r2
 80038ca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80038cc:	2300      	movs	r3, #0
 80038ce:	73fb      	strb	r3, [r7, #15]
 80038d0:	e00d      	b.n	80038ee <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	7bfb      	ldrb	r3, [r7, #15]
 80038d8:	3340      	adds	r3, #64	; 0x40
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	4413      	add	r3, r2
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	0c1b      	lsrs	r3, r3, #16
 80038e2:	68ba      	ldr	r2, [r7, #8]
 80038e4:	4413      	add	r3, r2
 80038e6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80038e8:	7bfb      	ldrb	r3, [r7, #15]
 80038ea:	3301      	adds	r3, #1
 80038ec:	73fb      	strb	r3, [r7, #15]
 80038ee:	7bfa      	ldrb	r2, [r7, #15]
 80038f0:	78fb      	ldrb	r3, [r7, #3]
 80038f2:	3b01      	subs	r3, #1
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d3ec      	bcc.n	80038d2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80038f8:	883b      	ldrh	r3, [r7, #0]
 80038fa:	0418      	lsls	r0, r3, #16
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6819      	ldr	r1, [r3, #0]
 8003900:	78fb      	ldrb	r3, [r7, #3]
 8003902:	3b01      	subs	r3, #1
 8003904:	68ba      	ldr	r2, [r7, #8]
 8003906:	4302      	orrs	r2, r0
 8003908:	3340      	adds	r3, #64	; 0x40
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	440b      	add	r3, r1
 800390e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3714      	adds	r7, #20
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr

0800391e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800391e:	b480      	push	{r7}
 8003920:	b083      	sub	sp, #12
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
 8003926:	460b      	mov	r3, r1
 8003928:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	887a      	ldrh	r2, [r7, #2]
 8003930:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	460b      	mov	r3, r1
 800394a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800394c:	bf00      	nop
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d101      	bne.n	800396a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e264      	b.n	8003e34 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	2b00      	cmp	r3, #0
 8003974:	d075      	beq.n	8003a62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003976:	4ba3      	ldr	r3, [pc, #652]	; (8003c04 <HAL_RCC_OscConfig+0x2ac>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f003 030c 	and.w	r3, r3, #12
 800397e:	2b04      	cmp	r3, #4
 8003980:	d00c      	beq.n	800399c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003982:	4ba0      	ldr	r3, [pc, #640]	; (8003c04 <HAL_RCC_OscConfig+0x2ac>)
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800398a:	2b08      	cmp	r3, #8
 800398c:	d112      	bne.n	80039b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800398e:	4b9d      	ldr	r3, [pc, #628]	; (8003c04 <HAL_RCC_OscConfig+0x2ac>)
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003996:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800399a:	d10b      	bne.n	80039b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800399c:	4b99      	ldr	r3, [pc, #612]	; (8003c04 <HAL_RCC_OscConfig+0x2ac>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d05b      	beq.n	8003a60 <HAL_RCC_OscConfig+0x108>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d157      	bne.n	8003a60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e23f      	b.n	8003e34 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039bc:	d106      	bne.n	80039cc <HAL_RCC_OscConfig+0x74>
 80039be:	4b91      	ldr	r3, [pc, #580]	; (8003c04 <HAL_RCC_OscConfig+0x2ac>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a90      	ldr	r2, [pc, #576]	; (8003c04 <HAL_RCC_OscConfig+0x2ac>)
 80039c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039c8:	6013      	str	r3, [r2, #0]
 80039ca:	e01d      	b.n	8003a08 <HAL_RCC_OscConfig+0xb0>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039d4:	d10c      	bne.n	80039f0 <HAL_RCC_OscConfig+0x98>
 80039d6:	4b8b      	ldr	r3, [pc, #556]	; (8003c04 <HAL_RCC_OscConfig+0x2ac>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a8a      	ldr	r2, [pc, #552]	; (8003c04 <HAL_RCC_OscConfig+0x2ac>)
 80039dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039e0:	6013      	str	r3, [r2, #0]
 80039e2:	4b88      	ldr	r3, [pc, #544]	; (8003c04 <HAL_RCC_OscConfig+0x2ac>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a87      	ldr	r2, [pc, #540]	; (8003c04 <HAL_RCC_OscConfig+0x2ac>)
 80039e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ec:	6013      	str	r3, [r2, #0]
 80039ee:	e00b      	b.n	8003a08 <HAL_RCC_OscConfig+0xb0>
 80039f0:	4b84      	ldr	r3, [pc, #528]	; (8003c04 <HAL_RCC_OscConfig+0x2ac>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a83      	ldr	r2, [pc, #524]	; (8003c04 <HAL_RCC_OscConfig+0x2ac>)
 80039f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039fa:	6013      	str	r3, [r2, #0]
 80039fc:	4b81      	ldr	r3, [pc, #516]	; (8003c04 <HAL_RCC_OscConfig+0x2ac>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a80      	ldr	r2, [pc, #512]	; (8003c04 <HAL_RCC_OscConfig+0x2ac>)
 8003a02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d013      	beq.n	8003a38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a10:	f7fd fb46 	bl	80010a0 <HAL_GetTick>
 8003a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a16:	e008      	b.n	8003a2a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a18:	f7fd fb42 	bl	80010a0 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b64      	cmp	r3, #100	; 0x64
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e204      	b.n	8003e34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a2a:	4b76      	ldr	r3, [pc, #472]	; (8003c04 <HAL_RCC_OscConfig+0x2ac>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d0f0      	beq.n	8003a18 <HAL_RCC_OscConfig+0xc0>
 8003a36:	e014      	b.n	8003a62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a38:	f7fd fb32 	bl	80010a0 <HAL_GetTick>
 8003a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a3e:	e008      	b.n	8003a52 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a40:	f7fd fb2e 	bl	80010a0 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b64      	cmp	r3, #100	; 0x64
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e1f0      	b.n	8003e34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a52:	4b6c      	ldr	r3, [pc, #432]	; (8003c04 <HAL_RCC_OscConfig+0x2ac>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1f0      	bne.n	8003a40 <HAL_RCC_OscConfig+0xe8>
 8003a5e:	e000      	b.n	8003a62 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0302 	and.w	r3, r3, #2
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d063      	beq.n	8003b36 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a6e:	4b65      	ldr	r3, [pc, #404]	; (8003c04 <HAL_RCC_OscConfig+0x2ac>)
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f003 030c 	and.w	r3, r3, #12
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00b      	beq.n	8003a92 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a7a:	4b62      	ldr	r3, [pc, #392]	; (8003c04 <HAL_RCC_OscConfig+0x2ac>)
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a82:	2b08      	cmp	r3, #8
 8003a84:	d11c      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a86:	4b5f      	ldr	r3, [pc, #380]	; (8003c04 <HAL_RCC_OscConfig+0x2ac>)
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d116      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a92:	4b5c      	ldr	r3, [pc, #368]	; (8003c04 <HAL_RCC_OscConfig+0x2ac>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0302 	and.w	r3, r3, #2
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d005      	beq.n	8003aaa <HAL_RCC_OscConfig+0x152>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d001      	beq.n	8003aaa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e1c4      	b.n	8003e34 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aaa:	4b56      	ldr	r3, [pc, #344]	; (8003c04 <HAL_RCC_OscConfig+0x2ac>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	00db      	lsls	r3, r3, #3
 8003ab8:	4952      	ldr	r1, [pc, #328]	; (8003c04 <HAL_RCC_OscConfig+0x2ac>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003abe:	e03a      	b.n	8003b36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d020      	beq.n	8003b0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ac8:	4b4f      	ldr	r3, [pc, #316]	; (8003c08 <HAL_RCC_OscConfig+0x2b0>)
 8003aca:	2201      	movs	r2, #1
 8003acc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ace:	f7fd fae7 	bl	80010a0 <HAL_GetTick>
 8003ad2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ad4:	e008      	b.n	8003ae8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ad6:	f7fd fae3 	bl	80010a0 <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d901      	bls.n	8003ae8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e1a5      	b.n	8003e34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ae8:	4b46      	ldr	r3, [pc, #280]	; (8003c04 <HAL_RCC_OscConfig+0x2ac>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0302 	and.w	r3, r3, #2
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d0f0      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003af4:	4b43      	ldr	r3, [pc, #268]	; (8003c04 <HAL_RCC_OscConfig+0x2ac>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	00db      	lsls	r3, r3, #3
 8003b02:	4940      	ldr	r1, [pc, #256]	; (8003c04 <HAL_RCC_OscConfig+0x2ac>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	600b      	str	r3, [r1, #0]
 8003b08:	e015      	b.n	8003b36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b0a:	4b3f      	ldr	r3, [pc, #252]	; (8003c08 <HAL_RCC_OscConfig+0x2b0>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b10:	f7fd fac6 	bl	80010a0 <HAL_GetTick>
 8003b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b16:	e008      	b.n	8003b2a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b18:	f7fd fac2 	bl	80010a0 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d901      	bls.n	8003b2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e184      	b.n	8003e34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b2a:	4b36      	ldr	r3, [pc, #216]	; (8003c04 <HAL_RCC_OscConfig+0x2ac>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0302 	and.w	r3, r3, #2
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1f0      	bne.n	8003b18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0308 	and.w	r3, r3, #8
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d030      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d016      	beq.n	8003b78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b4a:	4b30      	ldr	r3, [pc, #192]	; (8003c0c <HAL_RCC_OscConfig+0x2b4>)
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b50:	f7fd faa6 	bl	80010a0 <HAL_GetTick>
 8003b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b56:	e008      	b.n	8003b6a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b58:	f7fd faa2 	bl	80010a0 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d901      	bls.n	8003b6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e164      	b.n	8003e34 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b6a:	4b26      	ldr	r3, [pc, #152]	; (8003c04 <HAL_RCC_OscConfig+0x2ac>)
 8003b6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b6e:	f003 0302 	and.w	r3, r3, #2
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d0f0      	beq.n	8003b58 <HAL_RCC_OscConfig+0x200>
 8003b76:	e015      	b.n	8003ba4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b78:	4b24      	ldr	r3, [pc, #144]	; (8003c0c <HAL_RCC_OscConfig+0x2b4>)
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b7e:	f7fd fa8f 	bl	80010a0 <HAL_GetTick>
 8003b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b84:	e008      	b.n	8003b98 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b86:	f7fd fa8b 	bl	80010a0 <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d901      	bls.n	8003b98 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e14d      	b.n	8003e34 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b98:	4b1a      	ldr	r3, [pc, #104]	; (8003c04 <HAL_RCC_OscConfig+0x2ac>)
 8003b9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b9c:	f003 0302 	and.w	r3, r3, #2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d1f0      	bne.n	8003b86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0304 	and.w	r3, r3, #4
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f000 80a0 	beq.w	8003cf2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bb6:	4b13      	ldr	r3, [pc, #76]	; (8003c04 <HAL_RCC_OscConfig+0x2ac>)
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d10f      	bne.n	8003be2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	60bb      	str	r3, [r7, #8]
 8003bc6:	4b0f      	ldr	r3, [pc, #60]	; (8003c04 <HAL_RCC_OscConfig+0x2ac>)
 8003bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bca:	4a0e      	ldr	r2, [pc, #56]	; (8003c04 <HAL_RCC_OscConfig+0x2ac>)
 8003bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8003bd2:	4b0c      	ldr	r3, [pc, #48]	; (8003c04 <HAL_RCC_OscConfig+0x2ac>)
 8003bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bda:	60bb      	str	r3, [r7, #8]
 8003bdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bde:	2301      	movs	r3, #1
 8003be0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003be2:	4b0b      	ldr	r3, [pc, #44]	; (8003c10 <HAL_RCC_OscConfig+0x2b8>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d121      	bne.n	8003c32 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bee:	4b08      	ldr	r3, [pc, #32]	; (8003c10 <HAL_RCC_OscConfig+0x2b8>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a07      	ldr	r2, [pc, #28]	; (8003c10 <HAL_RCC_OscConfig+0x2b8>)
 8003bf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bf8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bfa:	f7fd fa51 	bl	80010a0 <HAL_GetTick>
 8003bfe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c00:	e011      	b.n	8003c26 <HAL_RCC_OscConfig+0x2ce>
 8003c02:	bf00      	nop
 8003c04:	40023800 	.word	0x40023800
 8003c08:	42470000 	.word	0x42470000
 8003c0c:	42470e80 	.word	0x42470e80
 8003c10:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c14:	f7fd fa44 	bl	80010a0 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d901      	bls.n	8003c26 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e106      	b.n	8003e34 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c26:	4b85      	ldr	r3, [pc, #532]	; (8003e3c <HAL_RCC_OscConfig+0x4e4>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d0f0      	beq.n	8003c14 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d106      	bne.n	8003c48 <HAL_RCC_OscConfig+0x2f0>
 8003c3a:	4b81      	ldr	r3, [pc, #516]	; (8003e40 <HAL_RCC_OscConfig+0x4e8>)
 8003c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c3e:	4a80      	ldr	r2, [pc, #512]	; (8003e40 <HAL_RCC_OscConfig+0x4e8>)
 8003c40:	f043 0301 	orr.w	r3, r3, #1
 8003c44:	6713      	str	r3, [r2, #112]	; 0x70
 8003c46:	e01c      	b.n	8003c82 <HAL_RCC_OscConfig+0x32a>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	2b05      	cmp	r3, #5
 8003c4e:	d10c      	bne.n	8003c6a <HAL_RCC_OscConfig+0x312>
 8003c50:	4b7b      	ldr	r3, [pc, #492]	; (8003e40 <HAL_RCC_OscConfig+0x4e8>)
 8003c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c54:	4a7a      	ldr	r2, [pc, #488]	; (8003e40 <HAL_RCC_OscConfig+0x4e8>)
 8003c56:	f043 0304 	orr.w	r3, r3, #4
 8003c5a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c5c:	4b78      	ldr	r3, [pc, #480]	; (8003e40 <HAL_RCC_OscConfig+0x4e8>)
 8003c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c60:	4a77      	ldr	r2, [pc, #476]	; (8003e40 <HAL_RCC_OscConfig+0x4e8>)
 8003c62:	f043 0301 	orr.w	r3, r3, #1
 8003c66:	6713      	str	r3, [r2, #112]	; 0x70
 8003c68:	e00b      	b.n	8003c82 <HAL_RCC_OscConfig+0x32a>
 8003c6a:	4b75      	ldr	r3, [pc, #468]	; (8003e40 <HAL_RCC_OscConfig+0x4e8>)
 8003c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c6e:	4a74      	ldr	r2, [pc, #464]	; (8003e40 <HAL_RCC_OscConfig+0x4e8>)
 8003c70:	f023 0301 	bic.w	r3, r3, #1
 8003c74:	6713      	str	r3, [r2, #112]	; 0x70
 8003c76:	4b72      	ldr	r3, [pc, #456]	; (8003e40 <HAL_RCC_OscConfig+0x4e8>)
 8003c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c7a:	4a71      	ldr	r2, [pc, #452]	; (8003e40 <HAL_RCC_OscConfig+0x4e8>)
 8003c7c:	f023 0304 	bic.w	r3, r3, #4
 8003c80:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d015      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c8a:	f7fd fa09 	bl	80010a0 <HAL_GetTick>
 8003c8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c90:	e00a      	b.n	8003ca8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c92:	f7fd fa05 	bl	80010a0 <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d901      	bls.n	8003ca8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e0c5      	b.n	8003e34 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ca8:	4b65      	ldr	r3, [pc, #404]	; (8003e40 <HAL_RCC_OscConfig+0x4e8>)
 8003caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cac:	f003 0302 	and.w	r3, r3, #2
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d0ee      	beq.n	8003c92 <HAL_RCC_OscConfig+0x33a>
 8003cb4:	e014      	b.n	8003ce0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cb6:	f7fd f9f3 	bl	80010a0 <HAL_GetTick>
 8003cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cbc:	e00a      	b.n	8003cd4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cbe:	f7fd f9ef 	bl	80010a0 <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d901      	bls.n	8003cd4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e0af      	b.n	8003e34 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cd4:	4b5a      	ldr	r3, [pc, #360]	; (8003e40 <HAL_RCC_OscConfig+0x4e8>)
 8003cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd8:	f003 0302 	and.w	r3, r3, #2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d1ee      	bne.n	8003cbe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ce0:	7dfb      	ldrb	r3, [r7, #23]
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d105      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ce6:	4b56      	ldr	r3, [pc, #344]	; (8003e40 <HAL_RCC_OscConfig+0x4e8>)
 8003ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cea:	4a55      	ldr	r2, [pc, #340]	; (8003e40 <HAL_RCC_OscConfig+0x4e8>)
 8003cec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cf0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	f000 809b 	beq.w	8003e32 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cfc:	4b50      	ldr	r3, [pc, #320]	; (8003e40 <HAL_RCC_OscConfig+0x4e8>)
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f003 030c 	and.w	r3, r3, #12
 8003d04:	2b08      	cmp	r3, #8
 8003d06:	d05c      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	699b      	ldr	r3, [r3, #24]
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d141      	bne.n	8003d94 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d10:	4b4c      	ldr	r3, [pc, #304]	; (8003e44 <HAL_RCC_OscConfig+0x4ec>)
 8003d12:	2200      	movs	r2, #0
 8003d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d16:	f7fd f9c3 	bl	80010a0 <HAL_GetTick>
 8003d1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d1c:	e008      	b.n	8003d30 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d1e:	f7fd f9bf 	bl	80010a0 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d901      	bls.n	8003d30 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e081      	b.n	8003e34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d30:	4b43      	ldr	r3, [pc, #268]	; (8003e40 <HAL_RCC_OscConfig+0x4e8>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d1f0      	bne.n	8003d1e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	69da      	ldr	r2, [r3, #28]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a1b      	ldr	r3, [r3, #32]
 8003d44:	431a      	orrs	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4a:	019b      	lsls	r3, r3, #6
 8003d4c:	431a      	orrs	r2, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d52:	085b      	lsrs	r3, r3, #1
 8003d54:	3b01      	subs	r3, #1
 8003d56:	041b      	lsls	r3, r3, #16
 8003d58:	431a      	orrs	r2, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5e:	061b      	lsls	r3, r3, #24
 8003d60:	4937      	ldr	r1, [pc, #220]	; (8003e40 <HAL_RCC_OscConfig+0x4e8>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d66:	4b37      	ldr	r3, [pc, #220]	; (8003e44 <HAL_RCC_OscConfig+0x4ec>)
 8003d68:	2201      	movs	r2, #1
 8003d6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d6c:	f7fd f998 	bl	80010a0 <HAL_GetTick>
 8003d70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d72:	e008      	b.n	8003d86 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d74:	f7fd f994 	bl	80010a0 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d901      	bls.n	8003d86 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e056      	b.n	8003e34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d86:	4b2e      	ldr	r3, [pc, #184]	; (8003e40 <HAL_RCC_OscConfig+0x4e8>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d0f0      	beq.n	8003d74 <HAL_RCC_OscConfig+0x41c>
 8003d92:	e04e      	b.n	8003e32 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d94:	4b2b      	ldr	r3, [pc, #172]	; (8003e44 <HAL_RCC_OscConfig+0x4ec>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d9a:	f7fd f981 	bl	80010a0 <HAL_GetTick>
 8003d9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003da0:	e008      	b.n	8003db4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003da2:	f7fd f97d 	bl	80010a0 <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d901      	bls.n	8003db4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e03f      	b.n	8003e34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003db4:	4b22      	ldr	r3, [pc, #136]	; (8003e40 <HAL_RCC_OscConfig+0x4e8>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d1f0      	bne.n	8003da2 <HAL_RCC_OscConfig+0x44a>
 8003dc0:	e037      	b.n	8003e32 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d101      	bne.n	8003dce <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e032      	b.n	8003e34 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003dce:	4b1c      	ldr	r3, [pc, #112]	; (8003e40 <HAL_RCC_OscConfig+0x4e8>)
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	699b      	ldr	r3, [r3, #24]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d028      	beq.n	8003e2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d121      	bne.n	8003e2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d11a      	bne.n	8003e2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003dfe:	4013      	ands	r3, r2
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e04:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d111      	bne.n	8003e2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e14:	085b      	lsrs	r3, r3, #1
 8003e16:	3b01      	subs	r3, #1
 8003e18:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d107      	bne.n	8003e2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e28:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d001      	beq.n	8003e32 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e000      	b.n	8003e34 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003e32:	2300      	movs	r3, #0
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3718      	adds	r7, #24
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	40007000 	.word	0x40007000
 8003e40:	40023800 	.word	0x40023800
 8003e44:	42470060 	.word	0x42470060

08003e48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d101      	bne.n	8003e5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e0cc      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e5c:	4b68      	ldr	r3, [pc, #416]	; (8004000 <HAL_RCC_ClockConfig+0x1b8>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0307 	and.w	r3, r3, #7
 8003e64:	683a      	ldr	r2, [r7, #0]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d90c      	bls.n	8003e84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e6a:	4b65      	ldr	r3, [pc, #404]	; (8004000 <HAL_RCC_ClockConfig+0x1b8>)
 8003e6c:	683a      	ldr	r2, [r7, #0]
 8003e6e:	b2d2      	uxtb	r2, r2
 8003e70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e72:	4b63      	ldr	r3, [pc, #396]	; (8004000 <HAL_RCC_ClockConfig+0x1b8>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0307 	and.w	r3, r3, #7
 8003e7a:	683a      	ldr	r2, [r7, #0]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d001      	beq.n	8003e84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e0b8      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0302 	and.w	r3, r3, #2
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d020      	beq.n	8003ed2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0304 	and.w	r3, r3, #4
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d005      	beq.n	8003ea8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e9c:	4b59      	ldr	r3, [pc, #356]	; (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	4a58      	ldr	r2, [pc, #352]	; (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ea6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0308 	and.w	r3, r3, #8
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d005      	beq.n	8003ec0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003eb4:	4b53      	ldr	r3, [pc, #332]	; (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	4a52      	ldr	r2, [pc, #328]	; (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003eba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ebe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ec0:	4b50      	ldr	r3, [pc, #320]	; (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	494d      	ldr	r1, [pc, #308]	; (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d044      	beq.n	8003f68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d107      	bne.n	8003ef6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ee6:	4b47      	ldr	r3, [pc, #284]	; (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d119      	bne.n	8003f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e07f      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d003      	beq.n	8003f06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f02:	2b03      	cmp	r3, #3
 8003f04:	d107      	bne.n	8003f16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f06:	4b3f      	ldr	r3, [pc, #252]	; (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d109      	bne.n	8003f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e06f      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f16:	4b3b      	ldr	r3, [pc, #236]	; (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d101      	bne.n	8003f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e067      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f26:	4b37      	ldr	r3, [pc, #220]	; (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f023 0203 	bic.w	r2, r3, #3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	4934      	ldr	r1, [pc, #208]	; (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f38:	f7fd f8b2 	bl	80010a0 <HAL_GetTick>
 8003f3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f3e:	e00a      	b.n	8003f56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f40:	f7fd f8ae 	bl	80010a0 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e04f      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f56:	4b2b      	ldr	r3, [pc, #172]	; (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f003 020c 	and.w	r2, r3, #12
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d1eb      	bne.n	8003f40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f68:	4b25      	ldr	r3, [pc, #148]	; (8004000 <HAL_RCC_ClockConfig+0x1b8>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0307 	and.w	r3, r3, #7
 8003f70:	683a      	ldr	r2, [r7, #0]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d20c      	bcs.n	8003f90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f76:	4b22      	ldr	r3, [pc, #136]	; (8004000 <HAL_RCC_ClockConfig+0x1b8>)
 8003f78:	683a      	ldr	r2, [r7, #0]
 8003f7a:	b2d2      	uxtb	r2, r2
 8003f7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f7e:	4b20      	ldr	r3, [pc, #128]	; (8004000 <HAL_RCC_ClockConfig+0x1b8>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0307 	and.w	r3, r3, #7
 8003f86:	683a      	ldr	r2, [r7, #0]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d001      	beq.n	8003f90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e032      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0304 	and.w	r3, r3, #4
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d008      	beq.n	8003fae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f9c:	4b19      	ldr	r3, [pc, #100]	; (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	4916      	ldr	r1, [pc, #88]	; (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0308 	and.w	r3, r3, #8
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d009      	beq.n	8003fce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fba:	4b12      	ldr	r3, [pc, #72]	; (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	00db      	lsls	r3, r3, #3
 8003fc8:	490e      	ldr	r1, [pc, #56]	; (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003fce:	f000 f821 	bl	8004014 <HAL_RCC_GetSysClockFreq>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	4b0b      	ldr	r3, [pc, #44]	; (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	091b      	lsrs	r3, r3, #4
 8003fda:	f003 030f 	and.w	r3, r3, #15
 8003fde:	490a      	ldr	r1, [pc, #40]	; (8004008 <HAL_RCC_ClockConfig+0x1c0>)
 8003fe0:	5ccb      	ldrb	r3, [r1, r3]
 8003fe2:	fa22 f303 	lsr.w	r3, r2, r3
 8003fe6:	4a09      	ldr	r2, [pc, #36]	; (800400c <HAL_RCC_ClockConfig+0x1c4>)
 8003fe8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003fea:	4b09      	ldr	r3, [pc, #36]	; (8004010 <HAL_RCC_ClockConfig+0x1c8>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f7fc fe8c 	bl	8000d0c <HAL_InitTick>

  return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3710      	adds	r7, #16
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	40023c00 	.word	0x40023c00
 8004004:	40023800 	.word	0x40023800
 8004008:	0801a0c8 	.word	0x0801a0c8
 800400c:	20000000 	.word	0x20000000
 8004010:	20000004 	.word	0x20000004

08004014 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004014:	b5b0      	push	{r4, r5, r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800401a:	2100      	movs	r1, #0
 800401c:	6079      	str	r1, [r7, #4]
 800401e:	2100      	movs	r1, #0
 8004020:	60f9      	str	r1, [r7, #12]
 8004022:	2100      	movs	r1, #0
 8004024:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004026:	2100      	movs	r1, #0
 8004028:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800402a:	4952      	ldr	r1, [pc, #328]	; (8004174 <HAL_RCC_GetSysClockFreq+0x160>)
 800402c:	6889      	ldr	r1, [r1, #8]
 800402e:	f001 010c 	and.w	r1, r1, #12
 8004032:	2908      	cmp	r1, #8
 8004034:	d00d      	beq.n	8004052 <HAL_RCC_GetSysClockFreq+0x3e>
 8004036:	2908      	cmp	r1, #8
 8004038:	f200 8094 	bhi.w	8004164 <HAL_RCC_GetSysClockFreq+0x150>
 800403c:	2900      	cmp	r1, #0
 800403e:	d002      	beq.n	8004046 <HAL_RCC_GetSysClockFreq+0x32>
 8004040:	2904      	cmp	r1, #4
 8004042:	d003      	beq.n	800404c <HAL_RCC_GetSysClockFreq+0x38>
 8004044:	e08e      	b.n	8004164 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004046:	4b4c      	ldr	r3, [pc, #304]	; (8004178 <HAL_RCC_GetSysClockFreq+0x164>)
 8004048:	60bb      	str	r3, [r7, #8]
       break;
 800404a:	e08e      	b.n	800416a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800404c:	4b4b      	ldr	r3, [pc, #300]	; (800417c <HAL_RCC_GetSysClockFreq+0x168>)
 800404e:	60bb      	str	r3, [r7, #8]
      break;
 8004050:	e08b      	b.n	800416a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004052:	4948      	ldr	r1, [pc, #288]	; (8004174 <HAL_RCC_GetSysClockFreq+0x160>)
 8004054:	6849      	ldr	r1, [r1, #4]
 8004056:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800405a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800405c:	4945      	ldr	r1, [pc, #276]	; (8004174 <HAL_RCC_GetSysClockFreq+0x160>)
 800405e:	6849      	ldr	r1, [r1, #4]
 8004060:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004064:	2900      	cmp	r1, #0
 8004066:	d024      	beq.n	80040b2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004068:	4942      	ldr	r1, [pc, #264]	; (8004174 <HAL_RCC_GetSysClockFreq+0x160>)
 800406a:	6849      	ldr	r1, [r1, #4]
 800406c:	0989      	lsrs	r1, r1, #6
 800406e:	4608      	mov	r0, r1
 8004070:	f04f 0100 	mov.w	r1, #0
 8004074:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004078:	f04f 0500 	mov.w	r5, #0
 800407c:	ea00 0204 	and.w	r2, r0, r4
 8004080:	ea01 0305 	and.w	r3, r1, r5
 8004084:	493d      	ldr	r1, [pc, #244]	; (800417c <HAL_RCC_GetSysClockFreq+0x168>)
 8004086:	fb01 f003 	mul.w	r0, r1, r3
 800408a:	2100      	movs	r1, #0
 800408c:	fb01 f102 	mul.w	r1, r1, r2
 8004090:	1844      	adds	r4, r0, r1
 8004092:	493a      	ldr	r1, [pc, #232]	; (800417c <HAL_RCC_GetSysClockFreq+0x168>)
 8004094:	fba2 0101 	umull	r0, r1, r2, r1
 8004098:	1863      	adds	r3, r4, r1
 800409a:	4619      	mov	r1, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	461a      	mov	r2, r3
 80040a0:	f04f 0300 	mov.w	r3, #0
 80040a4:	f7fc f8e4 	bl	8000270 <__aeabi_uldivmod>
 80040a8:	4602      	mov	r2, r0
 80040aa:	460b      	mov	r3, r1
 80040ac:	4613      	mov	r3, r2
 80040ae:	60fb      	str	r3, [r7, #12]
 80040b0:	e04a      	b.n	8004148 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040b2:	4b30      	ldr	r3, [pc, #192]	; (8004174 <HAL_RCC_GetSysClockFreq+0x160>)
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	099b      	lsrs	r3, r3, #6
 80040b8:	461a      	mov	r2, r3
 80040ba:	f04f 0300 	mov.w	r3, #0
 80040be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80040c2:	f04f 0100 	mov.w	r1, #0
 80040c6:	ea02 0400 	and.w	r4, r2, r0
 80040ca:	ea03 0501 	and.w	r5, r3, r1
 80040ce:	4620      	mov	r0, r4
 80040d0:	4629      	mov	r1, r5
 80040d2:	f04f 0200 	mov.w	r2, #0
 80040d6:	f04f 0300 	mov.w	r3, #0
 80040da:	014b      	lsls	r3, r1, #5
 80040dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80040e0:	0142      	lsls	r2, r0, #5
 80040e2:	4610      	mov	r0, r2
 80040e4:	4619      	mov	r1, r3
 80040e6:	1b00      	subs	r0, r0, r4
 80040e8:	eb61 0105 	sbc.w	r1, r1, r5
 80040ec:	f04f 0200 	mov.w	r2, #0
 80040f0:	f04f 0300 	mov.w	r3, #0
 80040f4:	018b      	lsls	r3, r1, #6
 80040f6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80040fa:	0182      	lsls	r2, r0, #6
 80040fc:	1a12      	subs	r2, r2, r0
 80040fe:	eb63 0301 	sbc.w	r3, r3, r1
 8004102:	f04f 0000 	mov.w	r0, #0
 8004106:	f04f 0100 	mov.w	r1, #0
 800410a:	00d9      	lsls	r1, r3, #3
 800410c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004110:	00d0      	lsls	r0, r2, #3
 8004112:	4602      	mov	r2, r0
 8004114:	460b      	mov	r3, r1
 8004116:	1912      	adds	r2, r2, r4
 8004118:	eb45 0303 	adc.w	r3, r5, r3
 800411c:	f04f 0000 	mov.w	r0, #0
 8004120:	f04f 0100 	mov.w	r1, #0
 8004124:	0299      	lsls	r1, r3, #10
 8004126:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800412a:	0290      	lsls	r0, r2, #10
 800412c:	4602      	mov	r2, r0
 800412e:	460b      	mov	r3, r1
 8004130:	4610      	mov	r0, r2
 8004132:	4619      	mov	r1, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	461a      	mov	r2, r3
 8004138:	f04f 0300 	mov.w	r3, #0
 800413c:	f7fc f898 	bl	8000270 <__aeabi_uldivmod>
 8004140:	4602      	mov	r2, r0
 8004142:	460b      	mov	r3, r1
 8004144:	4613      	mov	r3, r2
 8004146:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004148:	4b0a      	ldr	r3, [pc, #40]	; (8004174 <HAL_RCC_GetSysClockFreq+0x160>)
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	0c1b      	lsrs	r3, r3, #16
 800414e:	f003 0303 	and.w	r3, r3, #3
 8004152:	3301      	adds	r3, #1
 8004154:	005b      	lsls	r3, r3, #1
 8004156:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004160:	60bb      	str	r3, [r7, #8]
      break;
 8004162:	e002      	b.n	800416a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004164:	4b04      	ldr	r3, [pc, #16]	; (8004178 <HAL_RCC_GetSysClockFreq+0x164>)
 8004166:	60bb      	str	r3, [r7, #8]
      break;
 8004168:	bf00      	nop
    }
  }
  return sysclockfreq;
 800416a:	68bb      	ldr	r3, [r7, #8]
}
 800416c:	4618      	mov	r0, r3
 800416e:	3710      	adds	r7, #16
 8004170:	46bd      	mov	sp, r7
 8004172:	bdb0      	pop	{r4, r5, r7, pc}
 8004174:	40023800 	.word	0x40023800
 8004178:	00f42400 	.word	0x00f42400
 800417c:	017d7840 	.word	0x017d7840

08004180 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004180:	b480      	push	{r7}
 8004182:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004184:	4b03      	ldr	r3, [pc, #12]	; (8004194 <HAL_RCC_GetHCLKFreq+0x14>)
 8004186:	681b      	ldr	r3, [r3, #0]
}
 8004188:	4618      	mov	r0, r3
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	20000000 	.word	0x20000000

08004198 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800419c:	f7ff fff0 	bl	8004180 <HAL_RCC_GetHCLKFreq>
 80041a0:	4602      	mov	r2, r0
 80041a2:	4b05      	ldr	r3, [pc, #20]	; (80041b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	0a9b      	lsrs	r3, r3, #10
 80041a8:	f003 0307 	and.w	r3, r3, #7
 80041ac:	4903      	ldr	r1, [pc, #12]	; (80041bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80041ae:	5ccb      	ldrb	r3, [r1, r3]
 80041b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	40023800 	.word	0x40023800
 80041bc:	0801a0d8 	.word	0x0801a0d8

080041c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80041c4:	f7ff ffdc 	bl	8004180 <HAL_RCC_GetHCLKFreq>
 80041c8:	4602      	mov	r2, r0
 80041ca:	4b05      	ldr	r3, [pc, #20]	; (80041e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	0b5b      	lsrs	r3, r3, #13
 80041d0:	f003 0307 	and.w	r3, r3, #7
 80041d4:	4903      	ldr	r1, [pc, #12]	; (80041e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041d6:	5ccb      	ldrb	r3, [r1, r3]
 80041d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041dc:	4618      	mov	r0, r3
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	40023800 	.word	0x40023800
 80041e4:	0801a0d8 	.word	0x0801a0d8

080041e8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	220f      	movs	r2, #15
 80041f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80041f8:	4b12      	ldr	r3, [pc, #72]	; (8004244 <HAL_RCC_GetClockConfig+0x5c>)
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	f003 0203 	and.w	r2, r3, #3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004204:	4b0f      	ldr	r3, [pc, #60]	; (8004244 <HAL_RCC_GetClockConfig+0x5c>)
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004210:	4b0c      	ldr	r3, [pc, #48]	; (8004244 <HAL_RCC_GetClockConfig+0x5c>)
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800421c:	4b09      	ldr	r3, [pc, #36]	; (8004244 <HAL_RCC_GetClockConfig+0x5c>)
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	08db      	lsrs	r3, r3, #3
 8004222:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800422a:	4b07      	ldr	r3, [pc, #28]	; (8004248 <HAL_RCC_GetClockConfig+0x60>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0207 	and.w	r2, r3, #7
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	601a      	str	r2, [r3, #0]
}
 8004236:	bf00      	nop
 8004238:	370c      	adds	r7, #12
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	40023800 	.word	0x40023800
 8004248:	40023c00 	.word	0x40023c00

0800424c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b086      	sub	sp, #24
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004254:	2300      	movs	r3, #0
 8004256:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004258:	2300      	movs	r3, #0
 800425a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0301 	and.w	r3, r3, #1
 8004264:	2b00      	cmp	r3, #0
 8004266:	d105      	bne.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004270:	2b00      	cmp	r3, #0
 8004272:	d035      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004274:	4b62      	ldr	r3, [pc, #392]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004276:	2200      	movs	r2, #0
 8004278:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800427a:	f7fc ff11 	bl	80010a0 <HAL_GetTick>
 800427e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004280:	e008      	b.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004282:	f7fc ff0d 	bl	80010a0 <HAL_GetTick>
 8004286:	4602      	mov	r2, r0
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	2b02      	cmp	r3, #2
 800428e:	d901      	bls.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004290:	2303      	movs	r3, #3
 8004292:	e0b0      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004294:	4b5b      	ldr	r3, [pc, #364]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d1f0      	bne.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	019a      	lsls	r2, r3, #6
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	071b      	lsls	r3, r3, #28
 80042ac:	4955      	ldr	r1, [pc, #340]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80042b4:	4b52      	ldr	r3, [pc, #328]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80042b6:	2201      	movs	r2, #1
 80042b8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80042ba:	f7fc fef1 	bl	80010a0 <HAL_GetTick>
 80042be:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042c0:	e008      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80042c2:	f7fc feed 	bl	80010a0 <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d901      	bls.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	e090      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042d4:	4b4b      	ldr	r3, [pc, #300]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d0f0      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0302 	and.w	r3, r3, #2
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f000 8083 	beq.w	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80042ee:	2300      	movs	r3, #0
 80042f0:	60fb      	str	r3, [r7, #12]
 80042f2:	4b44      	ldr	r3, [pc, #272]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f6:	4a43      	ldr	r2, [pc, #268]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042fc:	6413      	str	r3, [r2, #64]	; 0x40
 80042fe:	4b41      	ldr	r3, [pc, #260]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004306:	60fb      	str	r3, [r7, #12]
 8004308:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800430a:	4b3f      	ldr	r3, [pc, #252]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a3e      	ldr	r2, [pc, #248]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004310:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004314:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004316:	f7fc fec3 	bl	80010a0 <HAL_GetTick>
 800431a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800431c:	e008      	b.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800431e:	f7fc febf 	bl	80010a0 <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	2b02      	cmp	r3, #2
 800432a:	d901      	bls.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e062      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004330:	4b35      	ldr	r3, [pc, #212]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004338:	2b00      	cmp	r3, #0
 800433a:	d0f0      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800433c:	4b31      	ldr	r3, [pc, #196]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800433e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004340:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004344:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d02f      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x160>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	429a      	cmp	r2, r3
 8004358:	d028      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800435a:	4b2a      	ldr	r3, [pc, #168]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800435c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800435e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004362:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004364:	4b29      	ldr	r3, [pc, #164]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004366:	2201      	movs	r2, #1
 8004368:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800436a:	4b28      	ldr	r3, [pc, #160]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800436c:	2200      	movs	r2, #0
 800436e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004370:	4a24      	ldr	r2, [pc, #144]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004376:	4b23      	ldr	r3, [pc, #140]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	2b01      	cmp	r3, #1
 8004380:	d114      	bne.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004382:	f7fc fe8d 	bl	80010a0 <HAL_GetTick>
 8004386:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004388:	e00a      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800438a:	f7fc fe89 	bl	80010a0 <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	f241 3288 	movw	r2, #5000	; 0x1388
 8004398:	4293      	cmp	r3, r2
 800439a:	d901      	bls.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	e02a      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043a0:	4b18      	ldr	r3, [pc, #96]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a4:	f003 0302 	and.w	r3, r3, #2
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d0ee      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043b8:	d10d      	bne.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80043ba:	4b12      	ldr	r3, [pc, #72]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80043ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043ce:	490d      	ldr	r1, [pc, #52]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	608b      	str	r3, [r1, #8]
 80043d4:	e005      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80043d6:	4b0b      	ldr	r3, [pc, #44]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	4a0a      	ldr	r2, [pc, #40]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043dc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80043e0:	6093      	str	r3, [r2, #8]
 80043e2:	4b08      	ldr	r3, [pc, #32]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043ee:	4905      	ldr	r1, [pc, #20]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3718      	adds	r7, #24
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	42470068 	.word	0x42470068
 8004404:	40023800 	.word	0x40023800
 8004408:	40007000 	.word	0x40007000
 800440c:	42470e40 	.word	0x42470e40

08004410 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b082      	sub	sp, #8
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d101      	bne.n	8004422 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e083      	b.n	800452a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	7f5b      	ldrb	r3, [r3, #29]
 8004426:	b2db      	uxtb	r3, r3
 8004428:	2b00      	cmp	r3, #0
 800442a:	d105      	bne.n	8004438 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f7fc fb6e 	bl	8000b14 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2202      	movs	r2, #2
 800443c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	22ca      	movs	r2, #202	; 0xca
 8004444:	625a      	str	r2, [r3, #36]	; 0x24
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2253      	movs	r2, #83	; 0x53
 800444c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 f897 	bl	8004582 <RTC_EnterInitMode>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d008      	beq.n	800446c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	22ff      	movs	r2, #255	; 0xff
 8004460:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2204      	movs	r2, #4
 8004466:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e05e      	b.n	800452a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	6812      	ldr	r2, [r2, #0]
 8004476:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800447a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800447e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	6899      	ldr	r1, [r3, #8]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685a      	ldr	r2, [r3, #4]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	431a      	orrs	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	695b      	ldr	r3, [r3, #20]
 8004494:	431a      	orrs	r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	430a      	orrs	r2, r1
 800449c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	68d2      	ldr	r2, [r2, #12]
 80044a6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	6919      	ldr	r1, [r3, #16]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	041a      	lsls	r2, r3, #16
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	430a      	orrs	r2, r1
 80044ba:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68da      	ldr	r2, [r3, #12]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044ca:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f003 0320 	and.w	r3, r3, #32
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d10e      	bne.n	80044f8 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 f829 	bl	8004532 <HAL_RTC_WaitForSynchro>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d008      	beq.n	80044f8 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	22ff      	movs	r2, #255	; 0xff
 80044ec:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2204      	movs	r2, #4
 80044f2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e018      	b.n	800452a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004506:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	699a      	ldr	r2, [r3, #24]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	430a      	orrs	r2, r1
 8004518:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	22ff      	movs	r2, #255	; 0xff
 8004520:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2201      	movs	r2, #1
 8004526:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004528:	2300      	movs	r3, #0
  }
}
 800452a:	4618      	mov	r0, r3
 800452c:	3708      	adds	r7, #8
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}

08004532 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004532:	b580      	push	{r7, lr}
 8004534:	b084      	sub	sp, #16
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800453a:	2300      	movs	r3, #0
 800453c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68da      	ldr	r2, [r3, #12]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800454c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800454e:	f7fc fda7 	bl	80010a0 <HAL_GetTick>
 8004552:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004554:	e009      	b.n	800456a <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004556:	f7fc fda3 	bl	80010a0 <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004564:	d901      	bls.n	800456a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e007      	b.n	800457a <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	f003 0320 	and.w	r3, r3, #32
 8004574:	2b00      	cmp	r3, #0
 8004576:	d0ee      	beq.n	8004556 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004578:	2300      	movs	r3, #0
}
 800457a:	4618      	mov	r0, r3
 800457c:	3710      	adds	r7, #16
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}

08004582 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004582:	b580      	push	{r7, lr}
 8004584:	b084      	sub	sp, #16
 8004586:	af00      	add	r7, sp, #0
 8004588:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800458a:	2300      	movs	r3, #0
 800458c:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004598:	2b00      	cmp	r3, #0
 800459a:	d119      	bne.n	80045d0 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f04f 32ff 	mov.w	r2, #4294967295
 80045a4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80045a6:	f7fc fd7b 	bl	80010a0 <HAL_GetTick>
 80045aa:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80045ac:	e009      	b.n	80045c2 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80045ae:	f7fc fd77 	bl	80010a0 <HAL_GetTick>
 80045b2:	4602      	mov	r2, r0
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045bc:	d901      	bls.n	80045c2 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e007      	b.n	80045d2 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d0ee      	beq.n	80045ae <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3710      	adds	r7, #16
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}

080045da <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045da:	b580      	push	{r7, lr}
 80045dc:	b082      	sub	sp, #8
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d101      	bne.n	80045ec <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e07b      	b.n	80046e4 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d108      	bne.n	8004606 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045fc:	d009      	beq.n	8004612 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	61da      	str	r2, [r3, #28]
 8004604:	e005      	b.n	8004612 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800461e:	b2db      	uxtb	r3, r3
 8004620:	2b00      	cmp	r3, #0
 8004622:	d106      	bne.n	8004632 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f7fc fa87 	bl	8000b40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2202      	movs	r2, #2
 8004636:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004648:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800465a:	431a      	orrs	r2, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004664:	431a      	orrs	r2, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	f003 0302 	and.w	r3, r3, #2
 800466e:	431a      	orrs	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	695b      	ldr	r3, [r3, #20]
 8004674:	f003 0301 	and.w	r3, r3, #1
 8004678:	431a      	orrs	r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004682:	431a      	orrs	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	69db      	ldr	r3, [r3, #28]
 8004688:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800468c:	431a      	orrs	r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a1b      	ldr	r3, [r3, #32]
 8004692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004696:	ea42 0103 	orr.w	r1, r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800469e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	430a      	orrs	r2, r1
 80046a8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	0c1b      	lsrs	r3, r3, #16
 80046b0:	f003 0104 	and.w	r1, r3, #4
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b8:	f003 0210 	and.w	r2, r3, #16
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	430a      	orrs	r2, r1
 80046c2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	69da      	ldr	r2, [r3, #28]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046d2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2201      	movs	r2, #1
 80046de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3708      	adds	r7, #8
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d101      	bne.n	80046fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e041      	b.n	8004782 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d106      	bne.n	8004718 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f7fc fa5c 	bl	8000bd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2202      	movs	r2, #2
 800471c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	3304      	adds	r3, #4
 8004728:	4619      	mov	r1, r3
 800472a:	4610      	mov	r0, r2
 800472c:	f000 fa96 	bl	8004c5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3708      	adds	r7, #8
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
	...

0800478c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800478c:	b480      	push	{r7}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800479a:	b2db      	uxtb	r3, r3
 800479c:	2b01      	cmp	r3, #1
 800479e:	d001      	beq.n	80047a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e04e      	b.n	8004842 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2202      	movs	r2, #2
 80047a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68da      	ldr	r2, [r3, #12]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f042 0201 	orr.w	r2, r2, #1
 80047ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a23      	ldr	r2, [pc, #140]	; (8004850 <HAL_TIM_Base_Start_IT+0xc4>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d022      	beq.n	800480c <HAL_TIM_Base_Start_IT+0x80>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047ce:	d01d      	beq.n	800480c <HAL_TIM_Base_Start_IT+0x80>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a1f      	ldr	r2, [pc, #124]	; (8004854 <HAL_TIM_Base_Start_IT+0xc8>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d018      	beq.n	800480c <HAL_TIM_Base_Start_IT+0x80>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a1e      	ldr	r2, [pc, #120]	; (8004858 <HAL_TIM_Base_Start_IT+0xcc>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d013      	beq.n	800480c <HAL_TIM_Base_Start_IT+0x80>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a1c      	ldr	r2, [pc, #112]	; (800485c <HAL_TIM_Base_Start_IT+0xd0>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d00e      	beq.n	800480c <HAL_TIM_Base_Start_IT+0x80>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a1b      	ldr	r2, [pc, #108]	; (8004860 <HAL_TIM_Base_Start_IT+0xd4>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d009      	beq.n	800480c <HAL_TIM_Base_Start_IT+0x80>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a19      	ldr	r2, [pc, #100]	; (8004864 <HAL_TIM_Base_Start_IT+0xd8>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d004      	beq.n	800480c <HAL_TIM_Base_Start_IT+0x80>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a18      	ldr	r2, [pc, #96]	; (8004868 <HAL_TIM_Base_Start_IT+0xdc>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d111      	bne.n	8004830 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f003 0307 	and.w	r3, r3, #7
 8004816:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2b06      	cmp	r3, #6
 800481c:	d010      	beq.n	8004840 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f042 0201 	orr.w	r2, r2, #1
 800482c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800482e:	e007      	b.n	8004840 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f042 0201 	orr.w	r2, r2, #1
 800483e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3714      	adds	r7, #20
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	40010000 	.word	0x40010000
 8004854:	40000400 	.word	0x40000400
 8004858:	40000800 	.word	0x40000800
 800485c:	40000c00 	.word	0x40000c00
 8004860:	40010400 	.word	0x40010400
 8004864:	40014000 	.word	0x40014000
 8004868:	40001800 	.word	0x40001800

0800486c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b082      	sub	sp, #8
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	f003 0302 	and.w	r3, r3, #2
 800487e:	2b02      	cmp	r3, #2
 8004880:	d122      	bne.n	80048c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	2b02      	cmp	r3, #2
 800488e:	d11b      	bne.n	80048c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f06f 0202 	mvn.w	r2, #2
 8004898:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2201      	movs	r2, #1
 800489e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	699b      	ldr	r3, [r3, #24]
 80048a6:	f003 0303 	and.w	r3, r3, #3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d003      	beq.n	80048b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 f9b5 	bl	8004c1e <HAL_TIM_IC_CaptureCallback>
 80048b4:	e005      	b.n	80048c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 f9a7 	bl	8004c0a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f000 f9b8 	bl	8004c32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	f003 0304 	and.w	r3, r3, #4
 80048d2:	2b04      	cmp	r3, #4
 80048d4:	d122      	bne.n	800491c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	f003 0304 	and.w	r3, r3, #4
 80048e0:	2b04      	cmp	r3, #4
 80048e2:	d11b      	bne.n	800491c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f06f 0204 	mvn.w	r2, #4
 80048ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2202      	movs	r2, #2
 80048f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d003      	beq.n	800490a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 f98b 	bl	8004c1e <HAL_TIM_IC_CaptureCallback>
 8004908:	e005      	b.n	8004916 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 f97d 	bl	8004c0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 f98e 	bl	8004c32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	f003 0308 	and.w	r3, r3, #8
 8004926:	2b08      	cmp	r3, #8
 8004928:	d122      	bne.n	8004970 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	f003 0308 	and.w	r3, r3, #8
 8004934:	2b08      	cmp	r3, #8
 8004936:	d11b      	bne.n	8004970 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f06f 0208 	mvn.w	r2, #8
 8004940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2204      	movs	r2, #4
 8004946:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	69db      	ldr	r3, [r3, #28]
 800494e:	f003 0303 	and.w	r3, r3, #3
 8004952:	2b00      	cmp	r3, #0
 8004954:	d003      	beq.n	800495e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 f961 	bl	8004c1e <HAL_TIM_IC_CaptureCallback>
 800495c:	e005      	b.n	800496a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 f953 	bl	8004c0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f000 f964 	bl	8004c32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	f003 0310 	and.w	r3, r3, #16
 800497a:	2b10      	cmp	r3, #16
 800497c:	d122      	bne.n	80049c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	f003 0310 	and.w	r3, r3, #16
 8004988:	2b10      	cmp	r3, #16
 800498a:	d11b      	bne.n	80049c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f06f 0210 	mvn.w	r2, #16
 8004994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2208      	movs	r2, #8
 800499a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	69db      	ldr	r3, [r3, #28]
 80049a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d003      	beq.n	80049b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 f937 	bl	8004c1e <HAL_TIM_IC_CaptureCallback>
 80049b0:	e005      	b.n	80049be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 f929 	bl	8004c0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f000 f93a 	bl	8004c32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	f003 0301 	and.w	r3, r3, #1
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d10e      	bne.n	80049f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	f003 0301 	and.w	r3, r3, #1
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d107      	bne.n	80049f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f06f 0201 	mvn.w	r2, #1
 80049e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f7fc f84e 	bl	8000a8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049fa:	2b80      	cmp	r3, #128	; 0x80
 80049fc:	d10e      	bne.n	8004a1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a08:	2b80      	cmp	r3, #128	; 0x80
 8004a0a:	d107      	bne.n	8004a1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 fae0 	bl	8004fdc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a26:	2b40      	cmp	r3, #64	; 0x40
 8004a28:	d10e      	bne.n	8004a48 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a34:	2b40      	cmp	r3, #64	; 0x40
 8004a36:	d107      	bne.n	8004a48 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 f8ff 	bl	8004c46 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	f003 0320 	and.w	r3, r3, #32
 8004a52:	2b20      	cmp	r3, #32
 8004a54:	d10e      	bne.n	8004a74 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	f003 0320 	and.w	r3, r3, #32
 8004a60:	2b20      	cmp	r3, #32
 8004a62:	d107      	bne.n	8004a74 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f06f 0220 	mvn.w	r2, #32
 8004a6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 faaa 	bl	8004fc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a74:	bf00      	nop
 8004a76:	3708      	adds	r7, #8
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a86:	2300      	movs	r3, #0
 8004a88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d101      	bne.n	8004a98 <HAL_TIM_ConfigClockSource+0x1c>
 8004a94:	2302      	movs	r3, #2
 8004a96:	e0b4      	b.n	8004c02 <HAL_TIM_ConfigClockSource+0x186>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2202      	movs	r2, #2
 8004aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004ab6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004abe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68ba      	ldr	r2, [r7, #8]
 8004ac6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ad0:	d03e      	beq.n	8004b50 <HAL_TIM_ConfigClockSource+0xd4>
 8004ad2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ad6:	f200 8087 	bhi.w	8004be8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ada:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ade:	f000 8086 	beq.w	8004bee <HAL_TIM_ConfigClockSource+0x172>
 8004ae2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ae6:	d87f      	bhi.n	8004be8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ae8:	2b70      	cmp	r3, #112	; 0x70
 8004aea:	d01a      	beq.n	8004b22 <HAL_TIM_ConfigClockSource+0xa6>
 8004aec:	2b70      	cmp	r3, #112	; 0x70
 8004aee:	d87b      	bhi.n	8004be8 <HAL_TIM_ConfigClockSource+0x16c>
 8004af0:	2b60      	cmp	r3, #96	; 0x60
 8004af2:	d050      	beq.n	8004b96 <HAL_TIM_ConfigClockSource+0x11a>
 8004af4:	2b60      	cmp	r3, #96	; 0x60
 8004af6:	d877      	bhi.n	8004be8 <HAL_TIM_ConfigClockSource+0x16c>
 8004af8:	2b50      	cmp	r3, #80	; 0x50
 8004afa:	d03c      	beq.n	8004b76 <HAL_TIM_ConfigClockSource+0xfa>
 8004afc:	2b50      	cmp	r3, #80	; 0x50
 8004afe:	d873      	bhi.n	8004be8 <HAL_TIM_ConfigClockSource+0x16c>
 8004b00:	2b40      	cmp	r3, #64	; 0x40
 8004b02:	d058      	beq.n	8004bb6 <HAL_TIM_ConfigClockSource+0x13a>
 8004b04:	2b40      	cmp	r3, #64	; 0x40
 8004b06:	d86f      	bhi.n	8004be8 <HAL_TIM_ConfigClockSource+0x16c>
 8004b08:	2b30      	cmp	r3, #48	; 0x30
 8004b0a:	d064      	beq.n	8004bd6 <HAL_TIM_ConfigClockSource+0x15a>
 8004b0c:	2b30      	cmp	r3, #48	; 0x30
 8004b0e:	d86b      	bhi.n	8004be8 <HAL_TIM_ConfigClockSource+0x16c>
 8004b10:	2b20      	cmp	r3, #32
 8004b12:	d060      	beq.n	8004bd6 <HAL_TIM_ConfigClockSource+0x15a>
 8004b14:	2b20      	cmp	r3, #32
 8004b16:	d867      	bhi.n	8004be8 <HAL_TIM_ConfigClockSource+0x16c>
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d05c      	beq.n	8004bd6 <HAL_TIM_ConfigClockSource+0x15a>
 8004b1c:	2b10      	cmp	r3, #16
 8004b1e:	d05a      	beq.n	8004bd6 <HAL_TIM_ConfigClockSource+0x15a>
 8004b20:	e062      	b.n	8004be8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6818      	ldr	r0, [r3, #0]
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	6899      	ldr	r1, [r3, #8]
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	685a      	ldr	r2, [r3, #4]
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	f000 f9ad 	bl	8004e90 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b44:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68ba      	ldr	r2, [r7, #8]
 8004b4c:	609a      	str	r2, [r3, #8]
      break;
 8004b4e:	e04f      	b.n	8004bf0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6818      	ldr	r0, [r3, #0]
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	6899      	ldr	r1, [r3, #8]
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	685a      	ldr	r2, [r3, #4]
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	f000 f996 	bl	8004e90 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	689a      	ldr	r2, [r3, #8]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b72:	609a      	str	r2, [r3, #8]
      break;
 8004b74:	e03c      	b.n	8004bf0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6818      	ldr	r0, [r3, #0]
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	6859      	ldr	r1, [r3, #4]
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	461a      	mov	r2, r3
 8004b84:	f000 f90a 	bl	8004d9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2150      	movs	r1, #80	; 0x50
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f000 f963 	bl	8004e5a <TIM_ITRx_SetConfig>
      break;
 8004b94:	e02c      	b.n	8004bf0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6818      	ldr	r0, [r3, #0]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	6859      	ldr	r1, [r3, #4]
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	f000 f929 	bl	8004dfa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2160      	movs	r1, #96	; 0x60
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f000 f953 	bl	8004e5a <TIM_ITRx_SetConfig>
      break;
 8004bb4:	e01c      	b.n	8004bf0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6818      	ldr	r0, [r3, #0]
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	6859      	ldr	r1, [r3, #4]
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	f000 f8ea 	bl	8004d9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2140      	movs	r1, #64	; 0x40
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f000 f943 	bl	8004e5a <TIM_ITRx_SetConfig>
      break;
 8004bd4:	e00c      	b.n	8004bf0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4619      	mov	r1, r3
 8004be0:	4610      	mov	r0, r2
 8004be2:	f000 f93a 	bl	8004e5a <TIM_ITRx_SetConfig>
      break;
 8004be6:	e003      	b.n	8004bf0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	73fb      	strb	r3, [r7, #15]
      break;
 8004bec:	e000      	b.n	8004bf0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004bee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3710      	adds	r7, #16
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}

08004c0a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c0a:	b480      	push	{r7}
 8004c0c:	b083      	sub	sp, #12
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c12:	bf00      	nop
 8004c14:	370c      	adds	r7, #12
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr

08004c1e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c1e:	b480      	push	{r7}
 8004c20:	b083      	sub	sp, #12
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c26:	bf00      	nop
 8004c28:	370c      	adds	r7, #12
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr

08004c32 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c32:	b480      	push	{r7}
 8004c34:	b083      	sub	sp, #12
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c3a:	bf00      	nop
 8004c3c:	370c      	adds	r7, #12
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr

08004c46 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c46:	b480      	push	{r7}
 8004c48:	b083      	sub	sp, #12
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c4e:	bf00      	nop
 8004c50:	370c      	adds	r7, #12
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
	...

08004c5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b085      	sub	sp, #20
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4a40      	ldr	r2, [pc, #256]	; (8004d70 <TIM_Base_SetConfig+0x114>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d013      	beq.n	8004c9c <TIM_Base_SetConfig+0x40>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c7a:	d00f      	beq.n	8004c9c <TIM_Base_SetConfig+0x40>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a3d      	ldr	r2, [pc, #244]	; (8004d74 <TIM_Base_SetConfig+0x118>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d00b      	beq.n	8004c9c <TIM_Base_SetConfig+0x40>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a3c      	ldr	r2, [pc, #240]	; (8004d78 <TIM_Base_SetConfig+0x11c>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d007      	beq.n	8004c9c <TIM_Base_SetConfig+0x40>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4a3b      	ldr	r2, [pc, #236]	; (8004d7c <TIM_Base_SetConfig+0x120>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d003      	beq.n	8004c9c <TIM_Base_SetConfig+0x40>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a3a      	ldr	r2, [pc, #232]	; (8004d80 <TIM_Base_SetConfig+0x124>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d108      	bne.n	8004cae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ca2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a2f      	ldr	r2, [pc, #188]	; (8004d70 <TIM_Base_SetConfig+0x114>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d02b      	beq.n	8004d0e <TIM_Base_SetConfig+0xb2>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cbc:	d027      	beq.n	8004d0e <TIM_Base_SetConfig+0xb2>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a2c      	ldr	r2, [pc, #176]	; (8004d74 <TIM_Base_SetConfig+0x118>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d023      	beq.n	8004d0e <TIM_Base_SetConfig+0xb2>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a2b      	ldr	r2, [pc, #172]	; (8004d78 <TIM_Base_SetConfig+0x11c>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d01f      	beq.n	8004d0e <TIM_Base_SetConfig+0xb2>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a2a      	ldr	r2, [pc, #168]	; (8004d7c <TIM_Base_SetConfig+0x120>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d01b      	beq.n	8004d0e <TIM_Base_SetConfig+0xb2>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a29      	ldr	r2, [pc, #164]	; (8004d80 <TIM_Base_SetConfig+0x124>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d017      	beq.n	8004d0e <TIM_Base_SetConfig+0xb2>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a28      	ldr	r2, [pc, #160]	; (8004d84 <TIM_Base_SetConfig+0x128>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d013      	beq.n	8004d0e <TIM_Base_SetConfig+0xb2>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a27      	ldr	r2, [pc, #156]	; (8004d88 <TIM_Base_SetConfig+0x12c>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d00f      	beq.n	8004d0e <TIM_Base_SetConfig+0xb2>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a26      	ldr	r2, [pc, #152]	; (8004d8c <TIM_Base_SetConfig+0x130>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d00b      	beq.n	8004d0e <TIM_Base_SetConfig+0xb2>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a25      	ldr	r2, [pc, #148]	; (8004d90 <TIM_Base_SetConfig+0x134>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d007      	beq.n	8004d0e <TIM_Base_SetConfig+0xb2>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a24      	ldr	r2, [pc, #144]	; (8004d94 <TIM_Base_SetConfig+0x138>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d003      	beq.n	8004d0e <TIM_Base_SetConfig+0xb2>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a23      	ldr	r2, [pc, #140]	; (8004d98 <TIM_Base_SetConfig+0x13c>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d108      	bne.n	8004d20 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	695b      	ldr	r3, [r3, #20]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	68fa      	ldr	r2, [r7, #12]
 8004d32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	689a      	ldr	r2, [r3, #8]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a0a      	ldr	r2, [pc, #40]	; (8004d70 <TIM_Base_SetConfig+0x114>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d003      	beq.n	8004d54 <TIM_Base_SetConfig+0xf8>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a0c      	ldr	r2, [pc, #48]	; (8004d80 <TIM_Base_SetConfig+0x124>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d103      	bne.n	8004d5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	691a      	ldr	r2, [r3, #16]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	615a      	str	r2, [r3, #20]
}
 8004d62:	bf00      	nop
 8004d64:	3714      	adds	r7, #20
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	40010000 	.word	0x40010000
 8004d74:	40000400 	.word	0x40000400
 8004d78:	40000800 	.word	0x40000800
 8004d7c:	40000c00 	.word	0x40000c00
 8004d80:	40010400 	.word	0x40010400
 8004d84:	40014000 	.word	0x40014000
 8004d88:	40014400 	.word	0x40014400
 8004d8c:	40014800 	.word	0x40014800
 8004d90:	40001800 	.word	0x40001800
 8004d94:	40001c00 	.word	0x40001c00
 8004d98:	40002000 	.word	0x40002000

08004d9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b087      	sub	sp, #28
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6a1b      	ldr	r3, [r3, #32]
 8004dac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6a1b      	ldr	r3, [r3, #32]
 8004db2:	f023 0201 	bic.w	r2, r3, #1
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	699b      	ldr	r3, [r3, #24]
 8004dbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004dc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	011b      	lsls	r3, r3, #4
 8004dcc:	693a      	ldr	r2, [r7, #16]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	f023 030a 	bic.w	r3, r3, #10
 8004dd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004dda:	697a      	ldr	r2, [r7, #20]
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	693a      	ldr	r2, [r7, #16]
 8004de6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	697a      	ldr	r2, [r7, #20]
 8004dec:	621a      	str	r2, [r3, #32]
}
 8004dee:	bf00      	nop
 8004df0:	371c      	adds	r7, #28
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr

08004dfa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dfa:	b480      	push	{r7}
 8004dfc:	b087      	sub	sp, #28
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	60f8      	str	r0, [r7, #12]
 8004e02:	60b9      	str	r1, [r7, #8]
 8004e04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6a1b      	ldr	r3, [r3, #32]
 8004e0a:	f023 0210 	bic.w	r2, r3, #16
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	699b      	ldr	r3, [r3, #24]
 8004e16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6a1b      	ldr	r3, [r3, #32]
 8004e1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	031b      	lsls	r3, r3, #12
 8004e2a:	697a      	ldr	r2, [r7, #20]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e36:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	011b      	lsls	r3, r3, #4
 8004e3c:	693a      	ldr	r2, [r7, #16]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	697a      	ldr	r2, [r7, #20]
 8004e46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	621a      	str	r2, [r3, #32]
}
 8004e4e:	bf00      	nop
 8004e50:	371c      	adds	r7, #28
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr

08004e5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	b085      	sub	sp, #20
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
 8004e62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e72:	683a      	ldr	r2, [r7, #0]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	f043 0307 	orr.w	r3, r3, #7
 8004e7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	68fa      	ldr	r2, [r7, #12]
 8004e82:	609a      	str	r2, [r3, #8]
}
 8004e84:	bf00      	nop
 8004e86:	3714      	adds	r7, #20
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b087      	sub	sp, #28
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	607a      	str	r2, [r7, #4]
 8004e9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004eaa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	021a      	lsls	r2, r3, #8
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	431a      	orrs	r2, r3
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	697a      	ldr	r2, [r7, #20]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	697a      	ldr	r2, [r7, #20]
 8004ec2:	609a      	str	r2, [r3, #8]
}
 8004ec4:	bf00      	nop
 8004ec6:	371c      	adds	r7, #28
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d101      	bne.n	8004ee8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ee4:	2302      	movs	r3, #2
 8004ee6:	e05a      	b.n	8004f9e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2202      	movs	r2, #2
 8004ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a21      	ldr	r2, [pc, #132]	; (8004fac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d022      	beq.n	8004f72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f34:	d01d      	beq.n	8004f72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a1d      	ldr	r2, [pc, #116]	; (8004fb0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d018      	beq.n	8004f72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a1b      	ldr	r2, [pc, #108]	; (8004fb4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d013      	beq.n	8004f72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a1a      	ldr	r2, [pc, #104]	; (8004fb8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d00e      	beq.n	8004f72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a18      	ldr	r2, [pc, #96]	; (8004fbc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d009      	beq.n	8004f72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a17      	ldr	r2, [pc, #92]	; (8004fc0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d004      	beq.n	8004f72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a15      	ldr	r2, [pc, #84]	; (8004fc4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d10c      	bne.n	8004f8c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	68ba      	ldr	r2, [r7, #8]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68ba      	ldr	r2, [r7, #8]
 8004f8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3714      	adds	r7, #20
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	40010000 	.word	0x40010000
 8004fb0:	40000400 	.word	0x40000400
 8004fb4:	40000800 	.word	0x40000800
 8004fb8:	40000c00 	.word	0x40000c00
 8004fbc:	40010400 	.word	0x40010400
 8004fc0:	40014000 	.word	0x40014000
 8004fc4:	40001800 	.word	0x40001800

08004fc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004fd0:	bf00      	nop
 8004fd2:	370c      	adds	r7, #12
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr

08004fdc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004fe4:	bf00      	nop
 8004fe6:	370c      	adds	r7, #12
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d101      	bne.n	8005002 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e03f      	b.n	8005082 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005008:	b2db      	uxtb	r3, r3
 800500a:	2b00      	cmp	r3, #0
 800500c:	d106      	bne.n	800501c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f7fb fdfa 	bl	8000c10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2224      	movs	r2, #36	; 0x24
 8005020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68da      	ldr	r2, [r3, #12]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005032:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f000 f829 	bl	800508c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	691a      	ldr	r2, [r3, #16]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005048:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	695a      	ldr	r2, [r3, #20]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005058:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68da      	ldr	r2, [r3, #12]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005068:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2220      	movs	r2, #32
 8005074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2220      	movs	r2, #32
 800507c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3708      	adds	r7, #8
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
	...

0800508c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800508c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005090:	b09f      	sub	sp, #124	; 0x7c
 8005092:	af00      	add	r7, sp, #0
 8005094:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005096:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	691b      	ldr	r3, [r3, #16]
 800509c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80050a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050a2:	68d9      	ldr	r1, [r3, #12]
 80050a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	ea40 0301 	orr.w	r3, r0, r1
 80050ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80050ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050b0:	689a      	ldr	r2, [r3, #8]
 80050b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	431a      	orrs	r2, r3
 80050b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050ba:	695b      	ldr	r3, [r3, #20]
 80050bc:	431a      	orrs	r2, r3
 80050be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050c0:	69db      	ldr	r3, [r3, #28]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80050c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80050d0:	f021 010c 	bic.w	r1, r1, #12
 80050d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80050da:	430b      	orrs	r3, r1
 80050dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	695b      	ldr	r3, [r3, #20]
 80050e4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80050e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050ea:	6999      	ldr	r1, [r3, #24]
 80050ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	ea40 0301 	orr.w	r3, r0, r1
 80050f4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80050f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	4bc5      	ldr	r3, [pc, #788]	; (8005410 <UART_SetConfig+0x384>)
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d004      	beq.n	800510a <UART_SetConfig+0x7e>
 8005100:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	4bc3      	ldr	r3, [pc, #780]	; (8005414 <UART_SetConfig+0x388>)
 8005106:	429a      	cmp	r2, r3
 8005108:	d103      	bne.n	8005112 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800510a:	f7ff f859 	bl	80041c0 <HAL_RCC_GetPCLK2Freq>
 800510e:	6778      	str	r0, [r7, #116]	; 0x74
 8005110:	e002      	b.n	8005118 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005112:	f7ff f841 	bl	8004198 <HAL_RCC_GetPCLK1Freq>
 8005116:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005118:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800511a:	69db      	ldr	r3, [r3, #28]
 800511c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005120:	f040 80b6 	bne.w	8005290 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005124:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005126:	461c      	mov	r4, r3
 8005128:	f04f 0500 	mov.w	r5, #0
 800512c:	4622      	mov	r2, r4
 800512e:	462b      	mov	r3, r5
 8005130:	1891      	adds	r1, r2, r2
 8005132:	6439      	str	r1, [r7, #64]	; 0x40
 8005134:	415b      	adcs	r3, r3
 8005136:	647b      	str	r3, [r7, #68]	; 0x44
 8005138:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800513c:	1912      	adds	r2, r2, r4
 800513e:	eb45 0303 	adc.w	r3, r5, r3
 8005142:	f04f 0000 	mov.w	r0, #0
 8005146:	f04f 0100 	mov.w	r1, #0
 800514a:	00d9      	lsls	r1, r3, #3
 800514c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005150:	00d0      	lsls	r0, r2, #3
 8005152:	4602      	mov	r2, r0
 8005154:	460b      	mov	r3, r1
 8005156:	1911      	adds	r1, r2, r4
 8005158:	6639      	str	r1, [r7, #96]	; 0x60
 800515a:	416b      	adcs	r3, r5
 800515c:	667b      	str	r3, [r7, #100]	; 0x64
 800515e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	461a      	mov	r2, r3
 8005164:	f04f 0300 	mov.w	r3, #0
 8005168:	1891      	adds	r1, r2, r2
 800516a:	63b9      	str	r1, [r7, #56]	; 0x38
 800516c:	415b      	adcs	r3, r3
 800516e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005170:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005174:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005178:	f7fb f87a 	bl	8000270 <__aeabi_uldivmod>
 800517c:	4602      	mov	r2, r0
 800517e:	460b      	mov	r3, r1
 8005180:	4ba5      	ldr	r3, [pc, #660]	; (8005418 <UART_SetConfig+0x38c>)
 8005182:	fba3 2302 	umull	r2, r3, r3, r2
 8005186:	095b      	lsrs	r3, r3, #5
 8005188:	011e      	lsls	r6, r3, #4
 800518a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800518c:	461c      	mov	r4, r3
 800518e:	f04f 0500 	mov.w	r5, #0
 8005192:	4622      	mov	r2, r4
 8005194:	462b      	mov	r3, r5
 8005196:	1891      	adds	r1, r2, r2
 8005198:	6339      	str	r1, [r7, #48]	; 0x30
 800519a:	415b      	adcs	r3, r3
 800519c:	637b      	str	r3, [r7, #52]	; 0x34
 800519e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80051a2:	1912      	adds	r2, r2, r4
 80051a4:	eb45 0303 	adc.w	r3, r5, r3
 80051a8:	f04f 0000 	mov.w	r0, #0
 80051ac:	f04f 0100 	mov.w	r1, #0
 80051b0:	00d9      	lsls	r1, r3, #3
 80051b2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80051b6:	00d0      	lsls	r0, r2, #3
 80051b8:	4602      	mov	r2, r0
 80051ba:	460b      	mov	r3, r1
 80051bc:	1911      	adds	r1, r2, r4
 80051be:	65b9      	str	r1, [r7, #88]	; 0x58
 80051c0:	416b      	adcs	r3, r5
 80051c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	461a      	mov	r2, r3
 80051ca:	f04f 0300 	mov.w	r3, #0
 80051ce:	1891      	adds	r1, r2, r2
 80051d0:	62b9      	str	r1, [r7, #40]	; 0x28
 80051d2:	415b      	adcs	r3, r3
 80051d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80051da:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80051de:	f7fb f847 	bl	8000270 <__aeabi_uldivmod>
 80051e2:	4602      	mov	r2, r0
 80051e4:	460b      	mov	r3, r1
 80051e6:	4b8c      	ldr	r3, [pc, #560]	; (8005418 <UART_SetConfig+0x38c>)
 80051e8:	fba3 1302 	umull	r1, r3, r3, r2
 80051ec:	095b      	lsrs	r3, r3, #5
 80051ee:	2164      	movs	r1, #100	; 0x64
 80051f0:	fb01 f303 	mul.w	r3, r1, r3
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	00db      	lsls	r3, r3, #3
 80051f8:	3332      	adds	r3, #50	; 0x32
 80051fa:	4a87      	ldr	r2, [pc, #540]	; (8005418 <UART_SetConfig+0x38c>)
 80051fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005200:	095b      	lsrs	r3, r3, #5
 8005202:	005b      	lsls	r3, r3, #1
 8005204:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005208:	441e      	add	r6, r3
 800520a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800520c:	4618      	mov	r0, r3
 800520e:	f04f 0100 	mov.w	r1, #0
 8005212:	4602      	mov	r2, r0
 8005214:	460b      	mov	r3, r1
 8005216:	1894      	adds	r4, r2, r2
 8005218:	623c      	str	r4, [r7, #32]
 800521a:	415b      	adcs	r3, r3
 800521c:	627b      	str	r3, [r7, #36]	; 0x24
 800521e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005222:	1812      	adds	r2, r2, r0
 8005224:	eb41 0303 	adc.w	r3, r1, r3
 8005228:	f04f 0400 	mov.w	r4, #0
 800522c:	f04f 0500 	mov.w	r5, #0
 8005230:	00dd      	lsls	r5, r3, #3
 8005232:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005236:	00d4      	lsls	r4, r2, #3
 8005238:	4622      	mov	r2, r4
 800523a:	462b      	mov	r3, r5
 800523c:	1814      	adds	r4, r2, r0
 800523e:	653c      	str	r4, [r7, #80]	; 0x50
 8005240:	414b      	adcs	r3, r1
 8005242:	657b      	str	r3, [r7, #84]	; 0x54
 8005244:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	461a      	mov	r2, r3
 800524a:	f04f 0300 	mov.w	r3, #0
 800524e:	1891      	adds	r1, r2, r2
 8005250:	61b9      	str	r1, [r7, #24]
 8005252:	415b      	adcs	r3, r3
 8005254:	61fb      	str	r3, [r7, #28]
 8005256:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800525a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800525e:	f7fb f807 	bl	8000270 <__aeabi_uldivmod>
 8005262:	4602      	mov	r2, r0
 8005264:	460b      	mov	r3, r1
 8005266:	4b6c      	ldr	r3, [pc, #432]	; (8005418 <UART_SetConfig+0x38c>)
 8005268:	fba3 1302 	umull	r1, r3, r3, r2
 800526c:	095b      	lsrs	r3, r3, #5
 800526e:	2164      	movs	r1, #100	; 0x64
 8005270:	fb01 f303 	mul.w	r3, r1, r3
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	00db      	lsls	r3, r3, #3
 8005278:	3332      	adds	r3, #50	; 0x32
 800527a:	4a67      	ldr	r2, [pc, #412]	; (8005418 <UART_SetConfig+0x38c>)
 800527c:	fba2 2303 	umull	r2, r3, r2, r3
 8005280:	095b      	lsrs	r3, r3, #5
 8005282:	f003 0207 	and.w	r2, r3, #7
 8005286:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4432      	add	r2, r6
 800528c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800528e:	e0b9      	b.n	8005404 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005290:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005292:	461c      	mov	r4, r3
 8005294:	f04f 0500 	mov.w	r5, #0
 8005298:	4622      	mov	r2, r4
 800529a:	462b      	mov	r3, r5
 800529c:	1891      	adds	r1, r2, r2
 800529e:	6139      	str	r1, [r7, #16]
 80052a0:	415b      	adcs	r3, r3
 80052a2:	617b      	str	r3, [r7, #20]
 80052a4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80052a8:	1912      	adds	r2, r2, r4
 80052aa:	eb45 0303 	adc.w	r3, r5, r3
 80052ae:	f04f 0000 	mov.w	r0, #0
 80052b2:	f04f 0100 	mov.w	r1, #0
 80052b6:	00d9      	lsls	r1, r3, #3
 80052b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80052bc:	00d0      	lsls	r0, r2, #3
 80052be:	4602      	mov	r2, r0
 80052c0:	460b      	mov	r3, r1
 80052c2:	eb12 0804 	adds.w	r8, r2, r4
 80052c6:	eb43 0905 	adc.w	r9, r3, r5
 80052ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	4618      	mov	r0, r3
 80052d0:	f04f 0100 	mov.w	r1, #0
 80052d4:	f04f 0200 	mov.w	r2, #0
 80052d8:	f04f 0300 	mov.w	r3, #0
 80052dc:	008b      	lsls	r3, r1, #2
 80052de:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80052e2:	0082      	lsls	r2, r0, #2
 80052e4:	4640      	mov	r0, r8
 80052e6:	4649      	mov	r1, r9
 80052e8:	f7fa ffc2 	bl	8000270 <__aeabi_uldivmod>
 80052ec:	4602      	mov	r2, r0
 80052ee:	460b      	mov	r3, r1
 80052f0:	4b49      	ldr	r3, [pc, #292]	; (8005418 <UART_SetConfig+0x38c>)
 80052f2:	fba3 2302 	umull	r2, r3, r3, r2
 80052f6:	095b      	lsrs	r3, r3, #5
 80052f8:	011e      	lsls	r6, r3, #4
 80052fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052fc:	4618      	mov	r0, r3
 80052fe:	f04f 0100 	mov.w	r1, #0
 8005302:	4602      	mov	r2, r0
 8005304:	460b      	mov	r3, r1
 8005306:	1894      	adds	r4, r2, r2
 8005308:	60bc      	str	r4, [r7, #8]
 800530a:	415b      	adcs	r3, r3
 800530c:	60fb      	str	r3, [r7, #12]
 800530e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005312:	1812      	adds	r2, r2, r0
 8005314:	eb41 0303 	adc.w	r3, r1, r3
 8005318:	f04f 0400 	mov.w	r4, #0
 800531c:	f04f 0500 	mov.w	r5, #0
 8005320:	00dd      	lsls	r5, r3, #3
 8005322:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005326:	00d4      	lsls	r4, r2, #3
 8005328:	4622      	mov	r2, r4
 800532a:	462b      	mov	r3, r5
 800532c:	1814      	adds	r4, r2, r0
 800532e:	64bc      	str	r4, [r7, #72]	; 0x48
 8005330:	414b      	adcs	r3, r1
 8005332:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005334:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	4618      	mov	r0, r3
 800533a:	f04f 0100 	mov.w	r1, #0
 800533e:	f04f 0200 	mov.w	r2, #0
 8005342:	f04f 0300 	mov.w	r3, #0
 8005346:	008b      	lsls	r3, r1, #2
 8005348:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800534c:	0082      	lsls	r2, r0, #2
 800534e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005352:	f7fa ff8d 	bl	8000270 <__aeabi_uldivmod>
 8005356:	4602      	mov	r2, r0
 8005358:	460b      	mov	r3, r1
 800535a:	4b2f      	ldr	r3, [pc, #188]	; (8005418 <UART_SetConfig+0x38c>)
 800535c:	fba3 1302 	umull	r1, r3, r3, r2
 8005360:	095b      	lsrs	r3, r3, #5
 8005362:	2164      	movs	r1, #100	; 0x64
 8005364:	fb01 f303 	mul.w	r3, r1, r3
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	011b      	lsls	r3, r3, #4
 800536c:	3332      	adds	r3, #50	; 0x32
 800536e:	4a2a      	ldr	r2, [pc, #168]	; (8005418 <UART_SetConfig+0x38c>)
 8005370:	fba2 2303 	umull	r2, r3, r2, r3
 8005374:	095b      	lsrs	r3, r3, #5
 8005376:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800537a:	441e      	add	r6, r3
 800537c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800537e:	4618      	mov	r0, r3
 8005380:	f04f 0100 	mov.w	r1, #0
 8005384:	4602      	mov	r2, r0
 8005386:	460b      	mov	r3, r1
 8005388:	1894      	adds	r4, r2, r2
 800538a:	603c      	str	r4, [r7, #0]
 800538c:	415b      	adcs	r3, r3
 800538e:	607b      	str	r3, [r7, #4]
 8005390:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005394:	1812      	adds	r2, r2, r0
 8005396:	eb41 0303 	adc.w	r3, r1, r3
 800539a:	f04f 0400 	mov.w	r4, #0
 800539e:	f04f 0500 	mov.w	r5, #0
 80053a2:	00dd      	lsls	r5, r3, #3
 80053a4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80053a8:	00d4      	lsls	r4, r2, #3
 80053aa:	4622      	mov	r2, r4
 80053ac:	462b      	mov	r3, r5
 80053ae:	eb12 0a00 	adds.w	sl, r2, r0
 80053b2:	eb43 0b01 	adc.w	fp, r3, r1
 80053b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	4618      	mov	r0, r3
 80053bc:	f04f 0100 	mov.w	r1, #0
 80053c0:	f04f 0200 	mov.w	r2, #0
 80053c4:	f04f 0300 	mov.w	r3, #0
 80053c8:	008b      	lsls	r3, r1, #2
 80053ca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80053ce:	0082      	lsls	r2, r0, #2
 80053d0:	4650      	mov	r0, sl
 80053d2:	4659      	mov	r1, fp
 80053d4:	f7fa ff4c 	bl	8000270 <__aeabi_uldivmod>
 80053d8:	4602      	mov	r2, r0
 80053da:	460b      	mov	r3, r1
 80053dc:	4b0e      	ldr	r3, [pc, #56]	; (8005418 <UART_SetConfig+0x38c>)
 80053de:	fba3 1302 	umull	r1, r3, r3, r2
 80053e2:	095b      	lsrs	r3, r3, #5
 80053e4:	2164      	movs	r1, #100	; 0x64
 80053e6:	fb01 f303 	mul.w	r3, r1, r3
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	011b      	lsls	r3, r3, #4
 80053ee:	3332      	adds	r3, #50	; 0x32
 80053f0:	4a09      	ldr	r2, [pc, #36]	; (8005418 <UART_SetConfig+0x38c>)
 80053f2:	fba2 2303 	umull	r2, r3, r2, r3
 80053f6:	095b      	lsrs	r3, r3, #5
 80053f8:	f003 020f 	and.w	r2, r3, #15
 80053fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4432      	add	r2, r6
 8005402:	609a      	str	r2, [r3, #8]
}
 8005404:	bf00      	nop
 8005406:	377c      	adds	r7, #124	; 0x7c
 8005408:	46bd      	mov	sp, r7
 800540a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800540e:	bf00      	nop
 8005410:	40011000 	.word	0x40011000
 8005414:	40011400 	.word	0x40011400
 8005418:	51eb851f 	.word	0x51eb851f

0800541c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800541c:	b084      	sub	sp, #16
 800541e:	b580      	push	{r7, lr}
 8005420:	b084      	sub	sp, #16
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
 8005426:	f107 001c 	add.w	r0, r7, #28
 800542a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800542e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005430:	2b01      	cmp	r3, #1
 8005432:	d122      	bne.n	800547a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005438:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005448:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800545c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800545e:	2b01      	cmp	r3, #1
 8005460:	d105      	bne.n	800546e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f001 fb1c 	bl	8006aac <USB_CoreReset>
 8005474:	4603      	mov	r3, r0
 8005476:	73fb      	strb	r3, [r7, #15]
 8005478:	e01a      	b.n	80054b0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f001 fb10 	bl	8006aac <USB_CoreReset>
 800548c:	4603      	mov	r3, r0
 800548e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005490:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005492:	2b00      	cmp	r3, #0
 8005494:	d106      	bne.n	80054a4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800549a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	639a      	str	r2, [r3, #56]	; 0x38
 80054a2:	e005      	b.n	80054b0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80054b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d10b      	bne.n	80054ce <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	f043 0206 	orr.w	r2, r3, #6
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	f043 0220 	orr.w	r2, r3, #32
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80054ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3710      	adds	r7, #16
 80054d4:	46bd      	mov	sp, r7
 80054d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80054da:	b004      	add	sp, #16
 80054dc:	4770      	bx	lr
	...

080054e0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b087      	sub	sp, #28
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	4613      	mov	r3, r2
 80054ec:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80054ee:	79fb      	ldrb	r3, [r7, #7]
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d165      	bne.n	80055c0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	4a41      	ldr	r2, [pc, #260]	; (80055fc <USB_SetTurnaroundTime+0x11c>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d906      	bls.n	800550a <USB_SetTurnaroundTime+0x2a>
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	4a40      	ldr	r2, [pc, #256]	; (8005600 <USB_SetTurnaroundTime+0x120>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d202      	bcs.n	800550a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005504:	230f      	movs	r3, #15
 8005506:	617b      	str	r3, [r7, #20]
 8005508:	e062      	b.n	80055d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	4a3c      	ldr	r2, [pc, #240]	; (8005600 <USB_SetTurnaroundTime+0x120>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d306      	bcc.n	8005520 <USB_SetTurnaroundTime+0x40>
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	4a3b      	ldr	r2, [pc, #236]	; (8005604 <USB_SetTurnaroundTime+0x124>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d202      	bcs.n	8005520 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800551a:	230e      	movs	r3, #14
 800551c:	617b      	str	r3, [r7, #20]
 800551e:	e057      	b.n	80055d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	4a38      	ldr	r2, [pc, #224]	; (8005604 <USB_SetTurnaroundTime+0x124>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d306      	bcc.n	8005536 <USB_SetTurnaroundTime+0x56>
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	4a37      	ldr	r2, [pc, #220]	; (8005608 <USB_SetTurnaroundTime+0x128>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d202      	bcs.n	8005536 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005530:	230d      	movs	r3, #13
 8005532:	617b      	str	r3, [r7, #20]
 8005534:	e04c      	b.n	80055d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	4a33      	ldr	r2, [pc, #204]	; (8005608 <USB_SetTurnaroundTime+0x128>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d306      	bcc.n	800554c <USB_SetTurnaroundTime+0x6c>
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	4a32      	ldr	r2, [pc, #200]	; (800560c <USB_SetTurnaroundTime+0x12c>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d802      	bhi.n	800554c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005546:	230c      	movs	r3, #12
 8005548:	617b      	str	r3, [r7, #20]
 800554a:	e041      	b.n	80055d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	4a2f      	ldr	r2, [pc, #188]	; (800560c <USB_SetTurnaroundTime+0x12c>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d906      	bls.n	8005562 <USB_SetTurnaroundTime+0x82>
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	4a2e      	ldr	r2, [pc, #184]	; (8005610 <USB_SetTurnaroundTime+0x130>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d802      	bhi.n	8005562 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800555c:	230b      	movs	r3, #11
 800555e:	617b      	str	r3, [r7, #20]
 8005560:	e036      	b.n	80055d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	4a2a      	ldr	r2, [pc, #168]	; (8005610 <USB_SetTurnaroundTime+0x130>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d906      	bls.n	8005578 <USB_SetTurnaroundTime+0x98>
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	4a29      	ldr	r2, [pc, #164]	; (8005614 <USB_SetTurnaroundTime+0x134>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d802      	bhi.n	8005578 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005572:	230a      	movs	r3, #10
 8005574:	617b      	str	r3, [r7, #20]
 8005576:	e02b      	b.n	80055d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	4a26      	ldr	r2, [pc, #152]	; (8005614 <USB_SetTurnaroundTime+0x134>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d906      	bls.n	800558e <USB_SetTurnaroundTime+0xae>
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	4a25      	ldr	r2, [pc, #148]	; (8005618 <USB_SetTurnaroundTime+0x138>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d202      	bcs.n	800558e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005588:	2309      	movs	r3, #9
 800558a:	617b      	str	r3, [r7, #20]
 800558c:	e020      	b.n	80055d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	4a21      	ldr	r2, [pc, #132]	; (8005618 <USB_SetTurnaroundTime+0x138>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d306      	bcc.n	80055a4 <USB_SetTurnaroundTime+0xc4>
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	4a20      	ldr	r2, [pc, #128]	; (800561c <USB_SetTurnaroundTime+0x13c>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d802      	bhi.n	80055a4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800559e:	2308      	movs	r3, #8
 80055a0:	617b      	str	r3, [r7, #20]
 80055a2:	e015      	b.n	80055d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	4a1d      	ldr	r2, [pc, #116]	; (800561c <USB_SetTurnaroundTime+0x13c>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d906      	bls.n	80055ba <USB_SetTurnaroundTime+0xda>
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	4a1c      	ldr	r2, [pc, #112]	; (8005620 <USB_SetTurnaroundTime+0x140>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d202      	bcs.n	80055ba <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80055b4:	2307      	movs	r3, #7
 80055b6:	617b      	str	r3, [r7, #20]
 80055b8:	e00a      	b.n	80055d0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80055ba:	2306      	movs	r3, #6
 80055bc:	617b      	str	r3, [r7, #20]
 80055be:	e007      	b.n	80055d0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80055c0:	79fb      	ldrb	r3, [r7, #7]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d102      	bne.n	80055cc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80055c6:	2309      	movs	r3, #9
 80055c8:	617b      	str	r3, [r7, #20]
 80055ca:	e001      	b.n	80055d0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80055cc:	2309      	movs	r3, #9
 80055ce:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	68da      	ldr	r2, [r3, #12]
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	029b      	lsls	r3, r3, #10
 80055e4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80055e8:	431a      	orrs	r2, r3
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	371c      	adds	r7, #28
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr
 80055fc:	00d8acbf 	.word	0x00d8acbf
 8005600:	00e4e1c0 	.word	0x00e4e1c0
 8005604:	00f42400 	.word	0x00f42400
 8005608:	01067380 	.word	0x01067380
 800560c:	011a499f 	.word	0x011a499f
 8005610:	01312cff 	.word	0x01312cff
 8005614:	014ca43f 	.word	0x014ca43f
 8005618:	016e3600 	.word	0x016e3600
 800561c:	01a6ab1f 	.word	0x01a6ab1f
 8005620:	01e84800 	.word	0x01e84800

08005624 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	f043 0201 	orr.w	r2, r3, #1
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	370c      	adds	r7, #12
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr

08005646 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005646:	b480      	push	{r7}
 8005648:	b083      	sub	sp, #12
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	f023 0201 	bic.w	r2, r3, #1
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800565a:	2300      	movs	r3, #0
}
 800565c:	4618      	mov	r0, r3
 800565e:	370c      	adds	r7, #12
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr

08005668 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	460b      	mov	r3, r1
 8005672:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005674:	2300      	movs	r3, #0
 8005676:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005684:	78fb      	ldrb	r3, [r7, #3]
 8005686:	2b01      	cmp	r3, #1
 8005688:	d115      	bne.n	80056b6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005696:	2001      	movs	r0, #1
 8005698:	f7fb fd0e 	bl	80010b8 <HAL_Delay>
      ms++;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	3301      	adds	r3, #1
 80056a0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f001 f972 	bl	800698c <USB_GetMode>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d01e      	beq.n	80056ec <USB_SetCurrentMode+0x84>
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2b31      	cmp	r3, #49	; 0x31
 80056b2:	d9f0      	bls.n	8005696 <USB_SetCurrentMode+0x2e>
 80056b4:	e01a      	b.n	80056ec <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80056b6:	78fb      	ldrb	r3, [r7, #3]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d115      	bne.n	80056e8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80056c8:	2001      	movs	r0, #1
 80056ca:	f7fb fcf5 	bl	80010b8 <HAL_Delay>
      ms++;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	3301      	adds	r3, #1
 80056d2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f001 f959 	bl	800698c <USB_GetMode>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d005      	beq.n	80056ec <USB_SetCurrentMode+0x84>
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2b31      	cmp	r3, #49	; 0x31
 80056e4:	d9f0      	bls.n	80056c8 <USB_SetCurrentMode+0x60>
 80056e6:	e001      	b.n	80056ec <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	e005      	b.n	80056f8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2b32      	cmp	r3, #50	; 0x32
 80056f0:	d101      	bne.n	80056f6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e000      	b.n	80056f8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80056f6:	2300      	movs	r3, #0
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3710      	adds	r7, #16
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005700:	b084      	sub	sp, #16
 8005702:	b580      	push	{r7, lr}
 8005704:	b086      	sub	sp, #24
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
 800570a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800570e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005712:	2300      	movs	r3, #0
 8005714:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800571a:	2300      	movs	r3, #0
 800571c:	613b      	str	r3, [r7, #16]
 800571e:	e009      	b.n	8005734 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	3340      	adds	r3, #64	; 0x40
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	4413      	add	r3, r2
 800572a:	2200      	movs	r2, #0
 800572c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	3301      	adds	r3, #1
 8005732:	613b      	str	r3, [r7, #16]
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	2b0e      	cmp	r3, #14
 8005738:	d9f2      	bls.n	8005720 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800573a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800573c:	2b00      	cmp	r3, #0
 800573e:	d11c      	bne.n	800577a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800574e:	f043 0302 	orr.w	r3, r3, #2
 8005752:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005758:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005764:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005770:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	639a      	str	r2, [r3, #56]	; 0x38
 8005778:	e00b      	b.n	8005792 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800577e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800578a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005798:	461a      	mov	r2, r3
 800579a:	2300      	movs	r3, #0
 800579c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057a4:	4619      	mov	r1, r3
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ac:	461a      	mov	r2, r3
 80057ae:	680b      	ldr	r3, [r1, #0]
 80057b0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80057b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d10c      	bne.n	80057d2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80057b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d104      	bne.n	80057c8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80057be:	2100      	movs	r1, #0
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f000 f945 	bl	8005a50 <USB_SetDevSpeed>
 80057c6:	e008      	b.n	80057da <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80057c8:	2101      	movs	r1, #1
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 f940 	bl	8005a50 <USB_SetDevSpeed>
 80057d0:	e003      	b.n	80057da <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80057d2:	2103      	movs	r1, #3
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f000 f93b 	bl	8005a50 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80057da:	2110      	movs	r1, #16
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 f8f3 	bl	80059c8 <USB_FlushTxFifo>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d001      	beq.n	80057ec <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f000 f90f 	bl	8005a10 <USB_FlushRxFifo>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d001      	beq.n	80057fc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005802:	461a      	mov	r2, r3
 8005804:	2300      	movs	r3, #0
 8005806:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800580e:	461a      	mov	r2, r3
 8005810:	2300      	movs	r3, #0
 8005812:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800581a:	461a      	mov	r2, r3
 800581c:	2300      	movs	r3, #0
 800581e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005820:	2300      	movs	r3, #0
 8005822:	613b      	str	r3, [r7, #16]
 8005824:	e043      	b.n	80058ae <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	015a      	lsls	r2, r3, #5
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	4413      	add	r3, r2
 800582e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005838:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800583c:	d118      	bne.n	8005870 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d10a      	bne.n	800585a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	015a      	lsls	r2, r3, #5
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	4413      	add	r3, r2
 800584c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005850:	461a      	mov	r2, r3
 8005852:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005856:	6013      	str	r3, [r2, #0]
 8005858:	e013      	b.n	8005882 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	015a      	lsls	r2, r3, #5
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	4413      	add	r3, r2
 8005862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005866:	461a      	mov	r2, r3
 8005868:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800586c:	6013      	str	r3, [r2, #0]
 800586e:	e008      	b.n	8005882 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	015a      	lsls	r2, r3, #5
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	4413      	add	r3, r2
 8005878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800587c:	461a      	mov	r2, r3
 800587e:	2300      	movs	r3, #0
 8005880:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	015a      	lsls	r2, r3, #5
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	4413      	add	r3, r2
 800588a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800588e:	461a      	mov	r2, r3
 8005890:	2300      	movs	r3, #0
 8005892:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	015a      	lsls	r2, r3, #5
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	4413      	add	r3, r2
 800589c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058a0:	461a      	mov	r2, r3
 80058a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80058a6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	3301      	adds	r3, #1
 80058ac:	613b      	str	r3, [r7, #16]
 80058ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b0:	693a      	ldr	r2, [r7, #16]
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d3b7      	bcc.n	8005826 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058b6:	2300      	movs	r3, #0
 80058b8:	613b      	str	r3, [r7, #16]
 80058ba:	e043      	b.n	8005944 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	015a      	lsls	r2, r3, #5
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	4413      	add	r3, r2
 80058c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058d2:	d118      	bne.n	8005906 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d10a      	bne.n	80058f0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	015a      	lsls	r2, r3, #5
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	4413      	add	r3, r2
 80058e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058e6:	461a      	mov	r2, r3
 80058e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80058ec:	6013      	str	r3, [r2, #0]
 80058ee:	e013      	b.n	8005918 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	015a      	lsls	r2, r3, #5
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	4413      	add	r3, r2
 80058f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058fc:	461a      	mov	r2, r3
 80058fe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005902:	6013      	str	r3, [r2, #0]
 8005904:	e008      	b.n	8005918 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	015a      	lsls	r2, r3, #5
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	4413      	add	r3, r2
 800590e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005912:	461a      	mov	r2, r3
 8005914:	2300      	movs	r3, #0
 8005916:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	015a      	lsls	r2, r3, #5
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	4413      	add	r3, r2
 8005920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005924:	461a      	mov	r2, r3
 8005926:	2300      	movs	r3, #0
 8005928:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	015a      	lsls	r2, r3, #5
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	4413      	add	r3, r2
 8005932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005936:	461a      	mov	r2, r3
 8005938:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800593c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	3301      	adds	r3, #1
 8005942:	613b      	str	r3, [r7, #16]
 8005944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005946:	693a      	ldr	r2, [r7, #16]
 8005948:	429a      	cmp	r2, r3
 800594a:	d3b7      	bcc.n	80058bc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005952:	691b      	ldr	r3, [r3, #16]
 8005954:	68fa      	ldr	r2, [r7, #12]
 8005956:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800595a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800595e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800596c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800596e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005970:	2b00      	cmp	r3, #0
 8005972:	d105      	bne.n	8005980 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	699b      	ldr	r3, [r3, #24]
 8005978:	f043 0210 	orr.w	r2, r3, #16
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	699a      	ldr	r2, [r3, #24]
 8005984:	4b0f      	ldr	r3, [pc, #60]	; (80059c4 <USB_DevInit+0x2c4>)
 8005986:	4313      	orrs	r3, r2
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800598c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800598e:	2b00      	cmp	r3, #0
 8005990:	d005      	beq.n	800599e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	699b      	ldr	r3, [r3, #24]
 8005996:	f043 0208 	orr.w	r2, r3, #8
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800599e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d107      	bne.n	80059b4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	699b      	ldr	r3, [r3, #24]
 80059a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80059ac:	f043 0304 	orr.w	r3, r3, #4
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80059b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3718      	adds	r7, #24
 80059ba:	46bd      	mov	sp, r7
 80059bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059c0:	b004      	add	sp, #16
 80059c2:	4770      	bx	lr
 80059c4:	803c3800 	.word	0x803c3800

080059c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b085      	sub	sp, #20
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80059d2:	2300      	movs	r3, #0
 80059d4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	019b      	lsls	r3, r3, #6
 80059da:	f043 0220 	orr.w	r2, r3, #32
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	3301      	adds	r3, #1
 80059e6:	60fb      	str	r3, [r7, #12]
 80059e8:	4a08      	ldr	r2, [pc, #32]	; (8005a0c <USB_FlushTxFifo+0x44>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d901      	bls.n	80059f2 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80059ee:	2303      	movs	r3, #3
 80059f0:	e006      	b.n	8005a00 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	f003 0320 	and.w	r3, r3, #32
 80059fa:	2b20      	cmp	r3, #32
 80059fc:	d0f1      	beq.n	80059e2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80059fe:	2300      	movs	r3, #0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3714      	adds	r7, #20
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr
 8005a0c:	00030d40 	.word	0x00030d40

08005a10 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b085      	sub	sp, #20
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2210      	movs	r2, #16
 8005a20:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	3301      	adds	r3, #1
 8005a26:	60fb      	str	r3, [r7, #12]
 8005a28:	4a08      	ldr	r2, [pc, #32]	; (8005a4c <USB_FlushRxFifo+0x3c>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d901      	bls.n	8005a32 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8005a2e:	2303      	movs	r3, #3
 8005a30:	e006      	b.n	8005a40 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	691b      	ldr	r3, [r3, #16]
 8005a36:	f003 0310 	and.w	r3, r3, #16
 8005a3a:	2b10      	cmp	r3, #16
 8005a3c:	d0f1      	beq.n	8005a22 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005a3e:	2300      	movs	r3, #0
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3714      	adds	r7, #20
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr
 8005a4c:	00030d40 	.word	0x00030d40

08005a50 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b085      	sub	sp, #20
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	460b      	mov	r3, r1
 8005a5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	78fb      	ldrb	r3, [r7, #3]
 8005a6a:	68f9      	ldr	r1, [r7, #12]
 8005a6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a70:	4313      	orrs	r3, r2
 8005a72:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3714      	adds	r7, #20
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr

08005a82 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005a82:	b480      	push	{r7}
 8005a84:	b087      	sub	sp, #28
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	f003 0306 	and.w	r3, r3, #6
 8005a9a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d102      	bne.n	8005aa8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	75fb      	strb	r3, [r7, #23]
 8005aa6:	e00a      	b.n	8005abe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2b02      	cmp	r3, #2
 8005aac:	d002      	beq.n	8005ab4 <USB_GetDevSpeed+0x32>
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2b06      	cmp	r3, #6
 8005ab2:	d102      	bne.n	8005aba <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005ab4:	2302      	movs	r3, #2
 8005ab6:	75fb      	strb	r3, [r7, #23]
 8005ab8:	e001      	b.n	8005abe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005aba:	230f      	movs	r3, #15
 8005abc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005abe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	371c      	adds	r7, #28
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b085      	sub	sp, #20
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	785b      	ldrb	r3, [r3, #1]
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d13a      	bne.n	8005b5e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aee:	69da      	ldr	r2, [r3, #28]
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	781b      	ldrb	r3, [r3, #0]
 8005af4:	f003 030f 	and.w	r3, r3, #15
 8005af8:	2101      	movs	r1, #1
 8005afa:	fa01 f303 	lsl.w	r3, r1, r3
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	68f9      	ldr	r1, [r7, #12]
 8005b02:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b06:	4313      	orrs	r3, r2
 8005b08:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	015a      	lsls	r2, r3, #5
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	4413      	add	r3, r2
 8005b12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d155      	bne.n	8005bcc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	015a      	lsls	r2, r3, #5
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	4413      	add	r3, r2
 8005b28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	78db      	ldrb	r3, [r3, #3]
 8005b3a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b3c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	059b      	lsls	r3, r3, #22
 8005b42:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b44:	4313      	orrs	r3, r2
 8005b46:	68ba      	ldr	r2, [r7, #8]
 8005b48:	0151      	lsls	r1, r2, #5
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	440a      	add	r2, r1
 8005b4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b5a:	6013      	str	r3, [r2, #0]
 8005b5c:	e036      	b.n	8005bcc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b64:	69da      	ldr	r2, [r3, #28]
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	f003 030f 	and.w	r3, r3, #15
 8005b6e:	2101      	movs	r1, #1
 8005b70:	fa01 f303 	lsl.w	r3, r1, r3
 8005b74:	041b      	lsls	r3, r3, #16
 8005b76:	68f9      	ldr	r1, [r7, #12]
 8005b78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	015a      	lsls	r2, r3, #5
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	4413      	add	r3, r2
 8005b88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d11a      	bne.n	8005bcc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	015a      	lsls	r2, r3, #5
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	4413      	add	r3, r2
 8005b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	78db      	ldrb	r3, [r3, #3]
 8005bb0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005bb2:	430b      	orrs	r3, r1
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	68ba      	ldr	r2, [r7, #8]
 8005bb8:	0151      	lsls	r1, r2, #5
 8005bba:	68fa      	ldr	r2, [r7, #12]
 8005bbc:	440a      	add	r2, r1
 8005bbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bca:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005bcc:	2300      	movs	r3, #0
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3714      	adds	r7, #20
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr
	...

08005bdc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	785b      	ldrb	r3, [r3, #1]
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d161      	bne.n	8005cbc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	015a      	lsls	r2, r3, #5
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	4413      	add	r3, r2
 8005c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c0e:	d11f      	bne.n	8005c50 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	015a      	lsls	r2, r3, #5
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	4413      	add	r3, r2
 8005c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	68ba      	ldr	r2, [r7, #8]
 8005c20:	0151      	lsls	r1, r2, #5
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	440a      	add	r2, r1
 8005c26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c2a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005c2e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	015a      	lsls	r2, r3, #5
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	4413      	add	r3, r2
 8005c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	68ba      	ldr	r2, [r7, #8]
 8005c40:	0151      	lsls	r1, r2, #5
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	440a      	add	r2, r1
 8005c46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c4e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	f003 030f 	and.w	r3, r3, #15
 8005c60:	2101      	movs	r1, #1
 8005c62:	fa01 f303 	lsl.w	r3, r1, r3
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	43db      	mvns	r3, r3
 8005c6a:	68f9      	ldr	r1, [r7, #12]
 8005c6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c70:	4013      	ands	r3, r2
 8005c72:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c7a:	69da      	ldr	r2, [r3, #28]
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	f003 030f 	and.w	r3, r3, #15
 8005c84:	2101      	movs	r1, #1
 8005c86:	fa01 f303 	lsl.w	r3, r1, r3
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	43db      	mvns	r3, r3
 8005c8e:	68f9      	ldr	r1, [r7, #12]
 8005c90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c94:	4013      	ands	r3, r2
 8005c96:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	015a      	lsls	r2, r3, #5
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	4413      	add	r3, r2
 8005ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	0159      	lsls	r1, r3, #5
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	440b      	add	r3, r1
 8005cae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	4b35      	ldr	r3, [pc, #212]	; (8005d8c <USB_DeactivateEndpoint+0x1b0>)
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	600b      	str	r3, [r1, #0]
 8005cba:	e060      	b.n	8005d7e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	015a      	lsls	r2, r3, #5
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cd2:	d11f      	bne.n	8005d14 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	015a      	lsls	r2, r3, #5
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	4413      	add	r3, r2
 8005cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68ba      	ldr	r2, [r7, #8]
 8005ce4:	0151      	lsls	r1, r2, #5
 8005ce6:	68fa      	ldr	r2, [r7, #12]
 8005ce8:	440a      	add	r2, r1
 8005cea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005cf2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	015a      	lsls	r2, r3, #5
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68ba      	ldr	r2, [r7, #8]
 8005d04:	0151      	lsls	r1, r2, #5
 8005d06:	68fa      	ldr	r2, [r7, #12]
 8005d08:	440a      	add	r2, r1
 8005d0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d12:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	f003 030f 	and.w	r3, r3, #15
 8005d24:	2101      	movs	r1, #1
 8005d26:	fa01 f303 	lsl.w	r3, r1, r3
 8005d2a:	041b      	lsls	r3, r3, #16
 8005d2c:	43db      	mvns	r3, r3
 8005d2e:	68f9      	ldr	r1, [r7, #12]
 8005d30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d34:	4013      	ands	r3, r2
 8005d36:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d3e:	69da      	ldr	r2, [r3, #28]
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	f003 030f 	and.w	r3, r3, #15
 8005d48:	2101      	movs	r1, #1
 8005d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8005d4e:	041b      	lsls	r3, r3, #16
 8005d50:	43db      	mvns	r3, r3
 8005d52:	68f9      	ldr	r1, [r7, #12]
 8005d54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d58:	4013      	ands	r3, r2
 8005d5a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	015a      	lsls	r2, r3, #5
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	4413      	add	r3, r2
 8005d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	0159      	lsls	r1, r3, #5
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	440b      	add	r3, r1
 8005d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d76:	4619      	mov	r1, r3
 8005d78:	4b05      	ldr	r3, [pc, #20]	; (8005d90 <USB_DeactivateEndpoint+0x1b4>)
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005d7e:	2300      	movs	r3, #0
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3714      	adds	r7, #20
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr
 8005d8c:	ec337800 	.word	0xec337800
 8005d90:	eff37800 	.word	0xeff37800

08005d94 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b08a      	sub	sp, #40	; 0x28
 8005d98:	af02      	add	r7, sp, #8
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	4613      	mov	r3, r2
 8005da0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	785b      	ldrb	r3, [r3, #1]
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	f040 815c 	bne.w	800606e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	695b      	ldr	r3, [r3, #20]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d132      	bne.n	8005e24 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005dbe:	69bb      	ldr	r3, [r7, #24]
 8005dc0:	015a      	lsls	r2, r3, #5
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	69ba      	ldr	r2, [r7, #24]
 8005dce:	0151      	lsls	r1, r2, #5
 8005dd0:	69fa      	ldr	r2, [r7, #28]
 8005dd2:	440a      	add	r2, r1
 8005dd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dd8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ddc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005de0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	015a      	lsls	r2, r3, #5
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	4413      	add	r3, r2
 8005dea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	69ba      	ldr	r2, [r7, #24]
 8005df2:	0151      	lsls	r1, r2, #5
 8005df4:	69fa      	ldr	r2, [r7, #28]
 8005df6:	440a      	add	r2, r1
 8005df8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dfc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e00:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	015a      	lsls	r2, r3, #5
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	4413      	add	r3, r2
 8005e0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e0e:	691b      	ldr	r3, [r3, #16]
 8005e10:	69ba      	ldr	r2, [r7, #24]
 8005e12:	0151      	lsls	r1, r2, #5
 8005e14:	69fa      	ldr	r2, [r7, #28]
 8005e16:	440a      	add	r2, r1
 8005e18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e1c:	0cdb      	lsrs	r3, r3, #19
 8005e1e:	04db      	lsls	r3, r3, #19
 8005e20:	6113      	str	r3, [r2, #16]
 8005e22:	e074      	b.n	8005f0e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	015a      	lsls	r2, r3, #5
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	69ba      	ldr	r2, [r7, #24]
 8005e34:	0151      	lsls	r1, r2, #5
 8005e36:	69fa      	ldr	r2, [r7, #28]
 8005e38:	440a      	add	r2, r1
 8005e3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e3e:	0cdb      	lsrs	r3, r3, #19
 8005e40:	04db      	lsls	r3, r3, #19
 8005e42:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e44:	69bb      	ldr	r3, [r7, #24]
 8005e46:	015a      	lsls	r2, r3, #5
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	4413      	add	r3, r2
 8005e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	69ba      	ldr	r2, [r7, #24]
 8005e54:	0151      	lsls	r1, r2, #5
 8005e56:	69fa      	ldr	r2, [r7, #28]
 8005e58:	440a      	add	r2, r1
 8005e5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e5e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e62:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e66:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005e68:	69bb      	ldr	r3, [r7, #24]
 8005e6a:	015a      	lsls	r2, r3, #5
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	4413      	add	r3, r2
 8005e70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e74:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	6959      	ldr	r1, [r3, #20]
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	440b      	add	r3, r1
 8005e80:	1e59      	subs	r1, r3, #1
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e8a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005e8c:	4b9d      	ldr	r3, [pc, #628]	; (8006104 <USB_EPStartXfer+0x370>)
 8005e8e:	400b      	ands	r3, r1
 8005e90:	69b9      	ldr	r1, [r7, #24]
 8005e92:	0148      	lsls	r0, r1, #5
 8005e94:	69f9      	ldr	r1, [r7, #28]
 8005e96:	4401      	add	r1, r0
 8005e98:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005ea0:	69bb      	ldr	r3, [r7, #24]
 8005ea2:	015a      	lsls	r2, r3, #5
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	4413      	add	r3, r2
 8005ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eac:	691a      	ldr	r2, [r3, #16]
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	695b      	ldr	r3, [r3, #20]
 8005eb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005eb6:	69b9      	ldr	r1, [r7, #24]
 8005eb8:	0148      	lsls	r0, r1, #5
 8005eba:	69f9      	ldr	r1, [r7, #28]
 8005ebc:	4401      	add	r1, r0
 8005ebe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	78db      	ldrb	r3, [r3, #3]
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d11f      	bne.n	8005f0e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	015a      	lsls	r2, r3, #5
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	69ba      	ldr	r2, [r7, #24]
 8005ede:	0151      	lsls	r1, r2, #5
 8005ee0:	69fa      	ldr	r2, [r7, #28]
 8005ee2:	440a      	add	r2, r1
 8005ee4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ee8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005eec:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	015a      	lsls	r2, r3, #5
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	69ba      	ldr	r2, [r7, #24]
 8005efe:	0151      	lsls	r1, r2, #5
 8005f00:	69fa      	ldr	r2, [r7, #28]
 8005f02:	440a      	add	r2, r1
 8005f04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f08:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f0c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005f0e:	79fb      	ldrb	r3, [r7, #7]
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d14b      	bne.n	8005fac <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	691b      	ldr	r3, [r3, #16]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d009      	beq.n	8005f30 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	015a      	lsls	r2, r3, #5
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	4413      	add	r3, r2
 8005f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f28:	461a      	mov	r2, r3
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	78db      	ldrb	r3, [r3, #3]
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d128      	bne.n	8005f8a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d110      	bne.n	8005f6a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	015a      	lsls	r2, r3, #5
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	4413      	add	r3, r2
 8005f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	69ba      	ldr	r2, [r7, #24]
 8005f58:	0151      	lsls	r1, r2, #5
 8005f5a:	69fa      	ldr	r2, [r7, #28]
 8005f5c:	440a      	add	r2, r1
 8005f5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f62:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f66:	6013      	str	r3, [r2, #0]
 8005f68:	e00f      	b.n	8005f8a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	015a      	lsls	r2, r3, #5
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	4413      	add	r3, r2
 8005f72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	69ba      	ldr	r2, [r7, #24]
 8005f7a:	0151      	lsls	r1, r2, #5
 8005f7c:	69fa      	ldr	r2, [r7, #28]
 8005f7e:	440a      	add	r2, r1
 8005f80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f88:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	015a      	lsls	r2, r3, #5
 8005f8e:	69fb      	ldr	r3, [r7, #28]
 8005f90:	4413      	add	r3, r2
 8005f92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	69ba      	ldr	r2, [r7, #24]
 8005f9a:	0151      	lsls	r1, r2, #5
 8005f9c:	69fa      	ldr	r2, [r7, #28]
 8005f9e:	440a      	add	r2, r1
 8005fa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fa4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005fa8:	6013      	str	r3, [r2, #0]
 8005faa:	e12f      	b.n	800620c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005fac:	69bb      	ldr	r3, [r7, #24]
 8005fae:	015a      	lsls	r2, r3, #5
 8005fb0:	69fb      	ldr	r3, [r7, #28]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	69ba      	ldr	r2, [r7, #24]
 8005fbc:	0151      	lsls	r1, r2, #5
 8005fbe:	69fa      	ldr	r2, [r7, #28]
 8005fc0:	440a      	add	r2, r1
 8005fc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fc6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005fca:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	78db      	ldrb	r3, [r3, #3]
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d015      	beq.n	8006000 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	695b      	ldr	r3, [r3, #20]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	f000 8117 	beq.w	800620c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fe4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	f003 030f 	and.w	r3, r3, #15
 8005fee:	2101      	movs	r1, #1
 8005ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ff4:	69f9      	ldr	r1, [r7, #28]
 8005ff6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	634b      	str	r3, [r1, #52]	; 0x34
 8005ffe:	e105      	b.n	800620c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800600c:	2b00      	cmp	r3, #0
 800600e:	d110      	bne.n	8006032 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	015a      	lsls	r2, r3, #5
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	4413      	add	r3, r2
 8006018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	69ba      	ldr	r2, [r7, #24]
 8006020:	0151      	lsls	r1, r2, #5
 8006022:	69fa      	ldr	r2, [r7, #28]
 8006024:	440a      	add	r2, r1
 8006026:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800602a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800602e:	6013      	str	r3, [r2, #0]
 8006030:	e00f      	b.n	8006052 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	015a      	lsls	r2, r3, #5
 8006036:	69fb      	ldr	r3, [r7, #28]
 8006038:	4413      	add	r3, r2
 800603a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	69ba      	ldr	r2, [r7, #24]
 8006042:	0151      	lsls	r1, r2, #5
 8006044:	69fa      	ldr	r2, [r7, #28]
 8006046:	440a      	add	r2, r1
 8006048:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800604c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006050:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	68d9      	ldr	r1, [r3, #12]
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	781a      	ldrb	r2, [r3, #0]
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	695b      	ldr	r3, [r3, #20]
 800605e:	b298      	uxth	r0, r3
 8006060:	79fb      	ldrb	r3, [r7, #7]
 8006062:	9300      	str	r3, [sp, #0]
 8006064:	4603      	mov	r3, r0
 8006066:	68f8      	ldr	r0, [r7, #12]
 8006068:	f000 fa2b 	bl	80064c2 <USB_WritePacket>
 800606c:	e0ce      	b.n	800620c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	015a      	lsls	r2, r3, #5
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	4413      	add	r3, r2
 8006076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	69ba      	ldr	r2, [r7, #24]
 800607e:	0151      	lsls	r1, r2, #5
 8006080:	69fa      	ldr	r2, [r7, #28]
 8006082:	440a      	add	r2, r1
 8006084:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006088:	0cdb      	lsrs	r3, r3, #19
 800608a:	04db      	lsls	r3, r3, #19
 800608c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800608e:	69bb      	ldr	r3, [r7, #24]
 8006090:	015a      	lsls	r2, r3, #5
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	4413      	add	r3, r2
 8006096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	69ba      	ldr	r2, [r7, #24]
 800609e:	0151      	lsls	r1, r2, #5
 80060a0:	69fa      	ldr	r2, [r7, #28]
 80060a2:	440a      	add	r2, r1
 80060a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80060ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80060b0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	695b      	ldr	r3, [r3, #20]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d126      	bne.n	8006108 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	015a      	lsls	r2, r3, #5
 80060be:	69fb      	ldr	r3, [r7, #28]
 80060c0:	4413      	add	r3, r2
 80060c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060c6:	691a      	ldr	r2, [r3, #16]
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060d0:	69b9      	ldr	r1, [r7, #24]
 80060d2:	0148      	lsls	r0, r1, #5
 80060d4:	69f9      	ldr	r1, [r7, #28]
 80060d6:	4401      	add	r1, r0
 80060d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80060dc:	4313      	orrs	r3, r2
 80060de:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80060e0:	69bb      	ldr	r3, [r7, #24]
 80060e2:	015a      	lsls	r2, r3, #5
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	4413      	add	r3, r2
 80060e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	69ba      	ldr	r2, [r7, #24]
 80060f0:	0151      	lsls	r1, r2, #5
 80060f2:	69fa      	ldr	r2, [r7, #28]
 80060f4:	440a      	add	r2, r1
 80060f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80060fe:	6113      	str	r3, [r2, #16]
 8006100:	e036      	b.n	8006170 <USB_EPStartXfer+0x3dc>
 8006102:	bf00      	nop
 8006104:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	695a      	ldr	r2, [r3, #20]
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	4413      	add	r3, r2
 8006112:	1e5a      	subs	r2, r3, #1
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	fbb2 f3f3 	udiv	r3, r2, r3
 800611c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800611e:	69bb      	ldr	r3, [r7, #24]
 8006120:	015a      	lsls	r2, r3, #5
 8006122:	69fb      	ldr	r3, [r7, #28]
 8006124:	4413      	add	r3, r2
 8006126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800612a:	691a      	ldr	r2, [r3, #16]
 800612c:	8afb      	ldrh	r3, [r7, #22]
 800612e:	04d9      	lsls	r1, r3, #19
 8006130:	4b39      	ldr	r3, [pc, #228]	; (8006218 <USB_EPStartXfer+0x484>)
 8006132:	400b      	ands	r3, r1
 8006134:	69b9      	ldr	r1, [r7, #24]
 8006136:	0148      	lsls	r0, r1, #5
 8006138:	69f9      	ldr	r1, [r7, #28]
 800613a:	4401      	add	r1, r0
 800613c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006140:	4313      	orrs	r3, r2
 8006142:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	015a      	lsls	r2, r3, #5
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	4413      	add	r3, r2
 800614c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006150:	691a      	ldr	r2, [r3, #16]
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	8af9      	ldrh	r1, [r7, #22]
 8006158:	fb01 f303 	mul.w	r3, r1, r3
 800615c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006160:	69b9      	ldr	r1, [r7, #24]
 8006162:	0148      	lsls	r0, r1, #5
 8006164:	69f9      	ldr	r1, [r7, #28]
 8006166:	4401      	add	r1, r0
 8006168:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800616c:	4313      	orrs	r3, r2
 800616e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006170:	79fb      	ldrb	r3, [r7, #7]
 8006172:	2b01      	cmp	r3, #1
 8006174:	d10d      	bne.n	8006192 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d009      	beq.n	8006192 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	68d9      	ldr	r1, [r3, #12]
 8006182:	69bb      	ldr	r3, [r7, #24]
 8006184:	015a      	lsls	r2, r3, #5
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	4413      	add	r3, r2
 800618a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800618e:	460a      	mov	r2, r1
 8006190:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	78db      	ldrb	r3, [r3, #3]
 8006196:	2b01      	cmp	r3, #1
 8006198:	d128      	bne.n	80061ec <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d110      	bne.n	80061cc <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	015a      	lsls	r2, r3, #5
 80061ae:	69fb      	ldr	r3, [r7, #28]
 80061b0:	4413      	add	r3, r2
 80061b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	69ba      	ldr	r2, [r7, #24]
 80061ba:	0151      	lsls	r1, r2, #5
 80061bc:	69fa      	ldr	r2, [r7, #28]
 80061be:	440a      	add	r2, r1
 80061c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80061c8:	6013      	str	r3, [r2, #0]
 80061ca:	e00f      	b.n	80061ec <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	015a      	lsls	r2, r3, #5
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	4413      	add	r3, r2
 80061d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	69ba      	ldr	r2, [r7, #24]
 80061dc:	0151      	lsls	r1, r2, #5
 80061de:	69fa      	ldr	r2, [r7, #28]
 80061e0:	440a      	add	r2, r1
 80061e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061ea:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	015a      	lsls	r2, r3, #5
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	4413      	add	r3, r2
 80061f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	69ba      	ldr	r2, [r7, #24]
 80061fc:	0151      	lsls	r1, r2, #5
 80061fe:	69fa      	ldr	r2, [r7, #28]
 8006200:	440a      	add	r2, r1
 8006202:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006206:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800620a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800620c:	2300      	movs	r3, #0
}
 800620e:	4618      	mov	r0, r3
 8006210:	3720      	adds	r7, #32
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	1ff80000 	.word	0x1ff80000

0800621c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800621c:	b480      	push	{r7}
 800621e:	b087      	sub	sp, #28
 8006220:	af00      	add	r7, sp, #0
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	60b9      	str	r1, [r7, #8]
 8006226:	4613      	mov	r3, r2
 8006228:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	785b      	ldrb	r3, [r3, #1]
 8006238:	2b01      	cmp	r3, #1
 800623a:	f040 80cd 	bne.w	80063d8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	695b      	ldr	r3, [r3, #20]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d132      	bne.n	80062ac <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	015a      	lsls	r2, r3, #5
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	4413      	add	r3, r2
 800624e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006252:	691b      	ldr	r3, [r3, #16]
 8006254:	693a      	ldr	r2, [r7, #16]
 8006256:	0151      	lsls	r1, r2, #5
 8006258:	697a      	ldr	r2, [r7, #20]
 800625a:	440a      	add	r2, r1
 800625c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006260:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006264:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006268:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	015a      	lsls	r2, r3, #5
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	4413      	add	r3, r2
 8006272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006276:	691b      	ldr	r3, [r3, #16]
 8006278:	693a      	ldr	r2, [r7, #16]
 800627a:	0151      	lsls	r1, r2, #5
 800627c:	697a      	ldr	r2, [r7, #20]
 800627e:	440a      	add	r2, r1
 8006280:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006284:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006288:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	015a      	lsls	r2, r3, #5
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	4413      	add	r3, r2
 8006292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006296:	691b      	ldr	r3, [r3, #16]
 8006298:	693a      	ldr	r2, [r7, #16]
 800629a:	0151      	lsls	r1, r2, #5
 800629c:	697a      	ldr	r2, [r7, #20]
 800629e:	440a      	add	r2, r1
 80062a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062a4:	0cdb      	lsrs	r3, r3, #19
 80062a6:	04db      	lsls	r3, r3, #19
 80062a8:	6113      	str	r3, [r2, #16]
 80062aa:	e04e      	b.n	800634a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	015a      	lsls	r2, r3, #5
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	4413      	add	r3, r2
 80062b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	693a      	ldr	r2, [r7, #16]
 80062bc:	0151      	lsls	r1, r2, #5
 80062be:	697a      	ldr	r2, [r7, #20]
 80062c0:	440a      	add	r2, r1
 80062c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062c6:	0cdb      	lsrs	r3, r3, #19
 80062c8:	04db      	lsls	r3, r3, #19
 80062ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	015a      	lsls	r2, r3, #5
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	4413      	add	r3, r2
 80062d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062d8:	691b      	ldr	r3, [r3, #16]
 80062da:	693a      	ldr	r2, [r7, #16]
 80062dc:	0151      	lsls	r1, r2, #5
 80062de:	697a      	ldr	r2, [r7, #20]
 80062e0:	440a      	add	r2, r1
 80062e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062e6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80062ea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80062ee:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	695a      	ldr	r2, [r3, #20]
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d903      	bls.n	8006304 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	689a      	ldr	r2, [r3, #8]
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	015a      	lsls	r2, r3, #5
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	4413      	add	r3, r2
 800630c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	693a      	ldr	r2, [r7, #16]
 8006314:	0151      	lsls	r1, r2, #5
 8006316:	697a      	ldr	r2, [r7, #20]
 8006318:	440a      	add	r2, r1
 800631a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800631e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006322:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	015a      	lsls	r2, r3, #5
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	4413      	add	r3, r2
 800632c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006330:	691a      	ldr	r2, [r3, #16]
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	695b      	ldr	r3, [r3, #20]
 8006336:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800633a:	6939      	ldr	r1, [r7, #16]
 800633c:	0148      	lsls	r0, r1, #5
 800633e:	6979      	ldr	r1, [r7, #20]
 8006340:	4401      	add	r1, r0
 8006342:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006346:	4313      	orrs	r3, r2
 8006348:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800634a:	79fb      	ldrb	r3, [r7, #7]
 800634c:	2b01      	cmp	r3, #1
 800634e:	d11e      	bne.n	800638e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	691b      	ldr	r3, [r3, #16]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d009      	beq.n	800636c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	015a      	lsls	r2, r3, #5
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	4413      	add	r3, r2
 8006360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006364:	461a      	mov	r2, r3
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	015a      	lsls	r2, r3, #5
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	4413      	add	r3, r2
 8006374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	693a      	ldr	r2, [r7, #16]
 800637c:	0151      	lsls	r1, r2, #5
 800637e:	697a      	ldr	r2, [r7, #20]
 8006380:	440a      	add	r2, r1
 8006382:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006386:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800638a:	6013      	str	r3, [r2, #0]
 800638c:	e092      	b.n	80064b4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	015a      	lsls	r2, r3, #5
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	4413      	add	r3, r2
 8006396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	693a      	ldr	r2, [r7, #16]
 800639e:	0151      	lsls	r1, r2, #5
 80063a0:	697a      	ldr	r2, [r7, #20]
 80063a2:	440a      	add	r2, r1
 80063a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063a8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80063ac:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	695b      	ldr	r3, [r3, #20]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d07e      	beq.n	80064b4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	f003 030f 	and.w	r3, r3, #15
 80063c6:	2101      	movs	r1, #1
 80063c8:	fa01 f303 	lsl.w	r3, r1, r3
 80063cc:	6979      	ldr	r1, [r7, #20]
 80063ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063d2:	4313      	orrs	r3, r2
 80063d4:	634b      	str	r3, [r1, #52]	; 0x34
 80063d6:	e06d      	b.n	80064b4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	015a      	lsls	r2, r3, #5
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	4413      	add	r3, r2
 80063e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	693a      	ldr	r2, [r7, #16]
 80063e8:	0151      	lsls	r1, r2, #5
 80063ea:	697a      	ldr	r2, [r7, #20]
 80063ec:	440a      	add	r2, r1
 80063ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063f2:	0cdb      	lsrs	r3, r3, #19
 80063f4:	04db      	lsls	r3, r3, #19
 80063f6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	015a      	lsls	r2, r3, #5
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	4413      	add	r3, r2
 8006400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	693a      	ldr	r2, [r7, #16]
 8006408:	0151      	lsls	r1, r2, #5
 800640a:	697a      	ldr	r2, [r7, #20]
 800640c:	440a      	add	r2, r1
 800640e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006412:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006416:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800641a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	695b      	ldr	r3, [r3, #20]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d003      	beq.n	800642c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	689a      	ldr	r2, [r3, #8]
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	015a      	lsls	r2, r3, #5
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	4413      	add	r3, r2
 8006434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	693a      	ldr	r2, [r7, #16]
 800643c:	0151      	lsls	r1, r2, #5
 800643e:	697a      	ldr	r2, [r7, #20]
 8006440:	440a      	add	r2, r1
 8006442:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006446:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800644a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	015a      	lsls	r2, r3, #5
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	4413      	add	r3, r2
 8006454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006458:	691a      	ldr	r2, [r3, #16]
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006462:	6939      	ldr	r1, [r7, #16]
 8006464:	0148      	lsls	r0, r1, #5
 8006466:	6979      	ldr	r1, [r7, #20]
 8006468:	4401      	add	r1, r0
 800646a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800646e:	4313      	orrs	r3, r2
 8006470:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006472:	79fb      	ldrb	r3, [r7, #7]
 8006474:	2b01      	cmp	r3, #1
 8006476:	d10d      	bne.n	8006494 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d009      	beq.n	8006494 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	68d9      	ldr	r1, [r3, #12]
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	015a      	lsls	r2, r3, #5
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	4413      	add	r3, r2
 800648c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006490:	460a      	mov	r2, r1
 8006492:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	015a      	lsls	r2, r3, #5
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	4413      	add	r3, r2
 800649c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	693a      	ldr	r2, [r7, #16]
 80064a4:	0151      	lsls	r1, r2, #5
 80064a6:	697a      	ldr	r2, [r7, #20]
 80064a8:	440a      	add	r2, r1
 80064aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80064b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80064b4:	2300      	movs	r3, #0
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	371c      	adds	r7, #28
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr

080064c2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80064c2:	b480      	push	{r7}
 80064c4:	b089      	sub	sp, #36	; 0x24
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	60f8      	str	r0, [r7, #12]
 80064ca:	60b9      	str	r1, [r7, #8]
 80064cc:	4611      	mov	r1, r2
 80064ce:	461a      	mov	r2, r3
 80064d0:	460b      	mov	r3, r1
 80064d2:	71fb      	strb	r3, [r7, #7]
 80064d4:	4613      	mov	r3, r2
 80064d6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80064e0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d123      	bne.n	8006530 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80064e8:	88bb      	ldrh	r3, [r7, #4]
 80064ea:	3303      	adds	r3, #3
 80064ec:	089b      	lsrs	r3, r3, #2
 80064ee:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80064f0:	2300      	movs	r3, #0
 80064f2:	61bb      	str	r3, [r7, #24]
 80064f4:	e018      	b.n	8006528 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80064f6:	79fb      	ldrb	r3, [r7, #7]
 80064f8:	031a      	lsls	r2, r3, #12
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	4413      	add	r3, r2
 80064fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006502:	461a      	mov	r2, r3
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	6013      	str	r3, [r2, #0]
      pSrc++;
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	3301      	adds	r3, #1
 800650e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	3301      	adds	r3, #1
 8006514:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	3301      	adds	r3, #1
 800651a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	3301      	adds	r3, #1
 8006520:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006522:	69bb      	ldr	r3, [r7, #24]
 8006524:	3301      	adds	r3, #1
 8006526:	61bb      	str	r3, [r7, #24]
 8006528:	69ba      	ldr	r2, [r7, #24]
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	429a      	cmp	r2, r3
 800652e:	d3e2      	bcc.n	80064f6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3724      	adds	r7, #36	; 0x24
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr

0800653e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800653e:	b480      	push	{r7}
 8006540:	b08b      	sub	sp, #44	; 0x2c
 8006542:	af00      	add	r7, sp, #0
 8006544:	60f8      	str	r0, [r7, #12]
 8006546:	60b9      	str	r1, [r7, #8]
 8006548:	4613      	mov	r3, r2
 800654a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006554:	88fb      	ldrh	r3, [r7, #6]
 8006556:	089b      	lsrs	r3, r3, #2
 8006558:	b29b      	uxth	r3, r3
 800655a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800655c:	88fb      	ldrh	r3, [r7, #6]
 800655e:	f003 0303 	and.w	r3, r3, #3
 8006562:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006564:	2300      	movs	r3, #0
 8006566:	623b      	str	r3, [r7, #32]
 8006568:	e014      	b.n	8006594 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800656a:	69bb      	ldr	r3, [r7, #24]
 800656c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006574:	601a      	str	r2, [r3, #0]
    pDest++;
 8006576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006578:	3301      	adds	r3, #1
 800657a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800657c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657e:	3301      	adds	r3, #1
 8006580:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006584:	3301      	adds	r3, #1
 8006586:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658a:	3301      	adds	r3, #1
 800658c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800658e:	6a3b      	ldr	r3, [r7, #32]
 8006590:	3301      	adds	r3, #1
 8006592:	623b      	str	r3, [r7, #32]
 8006594:	6a3a      	ldr	r2, [r7, #32]
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	429a      	cmp	r2, r3
 800659a:	d3e6      	bcc.n	800656a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800659c:	8bfb      	ldrh	r3, [r7, #30]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d01e      	beq.n	80065e0 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80065a2:	2300      	movs	r3, #0
 80065a4:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80065a6:	69bb      	ldr	r3, [r7, #24]
 80065a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065ac:	461a      	mov	r2, r3
 80065ae:	f107 0310 	add.w	r3, r7, #16
 80065b2:	6812      	ldr	r2, [r2, #0]
 80065b4:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80065b6:	693a      	ldr	r2, [r7, #16]
 80065b8:	6a3b      	ldr	r3, [r7, #32]
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	00db      	lsls	r3, r3, #3
 80065be:	fa22 f303 	lsr.w	r3, r2, r3
 80065c2:	b2da      	uxtb	r2, r3
 80065c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c6:	701a      	strb	r2, [r3, #0]
      i++;
 80065c8:	6a3b      	ldr	r3, [r7, #32]
 80065ca:	3301      	adds	r3, #1
 80065cc:	623b      	str	r3, [r7, #32]
      pDest++;
 80065ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d0:	3301      	adds	r3, #1
 80065d2:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80065d4:	8bfb      	ldrh	r3, [r7, #30]
 80065d6:	3b01      	subs	r3, #1
 80065d8:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80065da:	8bfb      	ldrh	r3, [r7, #30]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d1ea      	bne.n	80065b6 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80065e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	372c      	adds	r7, #44	; 0x2c
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr

080065ee <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80065ee:	b480      	push	{r7}
 80065f0:	b085      	sub	sp, #20
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6078      	str	r0, [r7, #4]
 80065f6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	785b      	ldrb	r3, [r3, #1]
 8006606:	2b01      	cmp	r3, #1
 8006608:	d12c      	bne.n	8006664 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	015a      	lsls	r2, r3, #5
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	4413      	add	r3, r2
 8006612:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	2b00      	cmp	r3, #0
 800661a:	db12      	blt.n	8006642 <USB_EPSetStall+0x54>
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d00f      	beq.n	8006642 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	015a      	lsls	r2, r3, #5
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	4413      	add	r3, r2
 800662a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	68ba      	ldr	r2, [r7, #8]
 8006632:	0151      	lsls	r1, r2, #5
 8006634:	68fa      	ldr	r2, [r7, #12]
 8006636:	440a      	add	r2, r1
 8006638:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800663c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006640:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	015a      	lsls	r2, r3, #5
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	4413      	add	r3, r2
 800664a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	68ba      	ldr	r2, [r7, #8]
 8006652:	0151      	lsls	r1, r2, #5
 8006654:	68fa      	ldr	r2, [r7, #12]
 8006656:	440a      	add	r2, r1
 8006658:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800665c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006660:	6013      	str	r3, [r2, #0]
 8006662:	e02b      	b.n	80066bc <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	015a      	lsls	r2, r3, #5
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	4413      	add	r3, r2
 800666c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	2b00      	cmp	r3, #0
 8006674:	db12      	blt.n	800669c <USB_EPSetStall+0xae>
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d00f      	beq.n	800669c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	015a      	lsls	r2, r3, #5
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	4413      	add	r3, r2
 8006684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68ba      	ldr	r2, [r7, #8]
 800668c:	0151      	lsls	r1, r2, #5
 800668e:	68fa      	ldr	r2, [r7, #12]
 8006690:	440a      	add	r2, r1
 8006692:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006696:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800669a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	015a      	lsls	r2, r3, #5
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	4413      	add	r3, r2
 80066a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	68ba      	ldr	r2, [r7, #8]
 80066ac:	0151      	lsls	r1, r2, #5
 80066ae:	68fa      	ldr	r2, [r7, #12]
 80066b0:	440a      	add	r2, r1
 80066b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80066ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80066bc:	2300      	movs	r3, #0
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3714      	adds	r7, #20
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr

080066ca <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80066ca:	b480      	push	{r7}
 80066cc:	b085      	sub	sp, #20
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
 80066d2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	785b      	ldrb	r3, [r3, #1]
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d128      	bne.n	8006738 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	015a      	lsls	r2, r3, #5
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	4413      	add	r3, r2
 80066ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	68ba      	ldr	r2, [r7, #8]
 80066f6:	0151      	lsls	r1, r2, #5
 80066f8:	68fa      	ldr	r2, [r7, #12]
 80066fa:	440a      	add	r2, r1
 80066fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006700:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006704:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	78db      	ldrb	r3, [r3, #3]
 800670a:	2b03      	cmp	r3, #3
 800670c:	d003      	beq.n	8006716 <USB_EPClearStall+0x4c>
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	78db      	ldrb	r3, [r3, #3]
 8006712:	2b02      	cmp	r3, #2
 8006714:	d138      	bne.n	8006788 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	015a      	lsls	r2, r3, #5
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	4413      	add	r3, r2
 800671e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	68ba      	ldr	r2, [r7, #8]
 8006726:	0151      	lsls	r1, r2, #5
 8006728:	68fa      	ldr	r2, [r7, #12]
 800672a:	440a      	add	r2, r1
 800672c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006734:	6013      	str	r3, [r2, #0]
 8006736:	e027      	b.n	8006788 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	015a      	lsls	r2, r3, #5
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	4413      	add	r3, r2
 8006740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	68ba      	ldr	r2, [r7, #8]
 8006748:	0151      	lsls	r1, r2, #5
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	440a      	add	r2, r1
 800674e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006752:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006756:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	78db      	ldrb	r3, [r3, #3]
 800675c:	2b03      	cmp	r3, #3
 800675e:	d003      	beq.n	8006768 <USB_EPClearStall+0x9e>
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	78db      	ldrb	r3, [r3, #3]
 8006764:	2b02      	cmp	r3, #2
 8006766:	d10f      	bne.n	8006788 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	015a      	lsls	r2, r3, #5
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	4413      	add	r3, r2
 8006770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	68ba      	ldr	r2, [r7, #8]
 8006778:	0151      	lsls	r1, r2, #5
 800677a:	68fa      	ldr	r2, [r7, #12]
 800677c:	440a      	add	r2, r1
 800677e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006782:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006786:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006788:	2300      	movs	r3, #0
}
 800678a:	4618      	mov	r0, r3
 800678c:	3714      	adds	r7, #20
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr

08006796 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006796:	b480      	push	{r7}
 8006798:	b085      	sub	sp, #20
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
 800679e:	460b      	mov	r3, r1
 80067a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	68fa      	ldr	r2, [r7, #12]
 80067b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067b4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80067b8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	78fb      	ldrb	r3, [r7, #3]
 80067c4:	011b      	lsls	r3, r3, #4
 80067c6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80067ca:	68f9      	ldr	r1, [r7, #12]
 80067cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067d0:	4313      	orrs	r3, r2
 80067d2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80067d4:	2300      	movs	r3, #0
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3714      	adds	r7, #20
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr

080067e2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80067e2:	b480      	push	{r7}
 80067e4:	b085      	sub	sp, #20
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	68fa      	ldr	r2, [r7, #12]
 80067f8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80067fc:	f023 0303 	bic.w	r3, r3, #3
 8006800:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	68fa      	ldr	r2, [r7, #12]
 800680c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006810:	f023 0302 	bic.w	r3, r3, #2
 8006814:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006816:	2300      	movs	r3, #0
}
 8006818:	4618      	mov	r0, r3
 800681a:	3714      	adds	r7, #20
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006824:	b480      	push	{r7}
 8006826:	b085      	sub	sp, #20
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	68fa      	ldr	r2, [r7, #12]
 800683a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800683e:	f023 0303 	bic.w	r3, r3, #3
 8006842:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	68fa      	ldr	r2, [r7, #12]
 800684e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006852:	f043 0302 	orr.w	r3, r3, #2
 8006856:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006858:	2300      	movs	r3, #0
}
 800685a:	4618      	mov	r0, r3
 800685c:	3714      	adds	r7, #20
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr

08006866 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006866:	b480      	push	{r7}
 8006868:	b085      	sub	sp, #20
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	695b      	ldr	r3, [r3, #20]
 8006872:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	699b      	ldr	r3, [r3, #24]
 8006878:	68fa      	ldr	r2, [r7, #12]
 800687a:	4013      	ands	r3, r2
 800687c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800687e:	68fb      	ldr	r3, [r7, #12]
}
 8006880:	4618      	mov	r0, r3
 8006882:	3714      	adds	r7, #20
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr

0800688c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800688c:	b480      	push	{r7}
 800688e:	b085      	sub	sp, #20
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800689e:	699b      	ldr	r3, [r3, #24]
 80068a0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068a8:	69db      	ldr	r3, [r3, #28]
 80068aa:	68ba      	ldr	r2, [r7, #8]
 80068ac:	4013      	ands	r3, r2
 80068ae:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	0c1b      	lsrs	r3, r3, #16
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3714      	adds	r7, #20
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b085      	sub	sp, #20
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068d2:	699b      	ldr	r3, [r3, #24]
 80068d4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068dc:	69db      	ldr	r3, [r3, #28]
 80068de:	68ba      	ldr	r2, [r7, #8]
 80068e0:	4013      	ands	r3, r2
 80068e2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	b29b      	uxth	r3, r3
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3714      	adds	r7, #20
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr

080068f4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b085      	sub	sp, #20
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	460b      	mov	r3, r1
 80068fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006904:	78fb      	ldrb	r3, [r7, #3]
 8006906:	015a      	lsls	r2, r3, #5
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	4413      	add	r3, r2
 800690c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800691a:	695b      	ldr	r3, [r3, #20]
 800691c:	68ba      	ldr	r2, [r7, #8]
 800691e:	4013      	ands	r3, r2
 8006920:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006922:	68bb      	ldr	r3, [r7, #8]
}
 8006924:	4618      	mov	r0, r3
 8006926:	3714      	adds	r7, #20
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006930:	b480      	push	{r7}
 8006932:	b087      	sub	sp, #28
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	460b      	mov	r3, r1
 800693a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006946:	691b      	ldr	r3, [r3, #16]
 8006948:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006952:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006954:	78fb      	ldrb	r3, [r7, #3]
 8006956:	f003 030f 	and.w	r3, r3, #15
 800695a:	68fa      	ldr	r2, [r7, #12]
 800695c:	fa22 f303 	lsr.w	r3, r2, r3
 8006960:	01db      	lsls	r3, r3, #7
 8006962:	b2db      	uxtb	r3, r3
 8006964:	693a      	ldr	r2, [r7, #16]
 8006966:	4313      	orrs	r3, r2
 8006968:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800696a:	78fb      	ldrb	r3, [r7, #3]
 800696c:	015a      	lsls	r2, r3, #5
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	4413      	add	r3, r2
 8006972:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	693a      	ldr	r2, [r7, #16]
 800697a:	4013      	ands	r3, r2
 800697c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800697e:	68bb      	ldr	r3, [r7, #8]
}
 8006980:	4618      	mov	r0, r3
 8006982:	371c      	adds	r7, #28
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr

0800698c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800698c:	b480      	push	{r7}
 800698e:	b083      	sub	sp, #12
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	695b      	ldr	r3, [r3, #20]
 8006998:	f003 0301 	and.w	r3, r3, #1
}
 800699c:	4618      	mov	r0, r3
 800699e:	370c      	adds	r7, #12
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr

080069a8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b085      	sub	sp, #20
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	68fa      	ldr	r2, [r7, #12]
 80069be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069c2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80069c6:	f023 0307 	bic.w	r3, r3, #7
 80069ca:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	68fa      	ldr	r2, [r7, #12]
 80069d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069de:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80069e0:	2300      	movs	r3, #0
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3714      	adds	r7, #20
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr
	...

080069f0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b087      	sub	sp, #28
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	460b      	mov	r3, r1
 80069fa:	607a      	str	r2, [r7, #4]
 80069fc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	333c      	adds	r3, #60	; 0x3c
 8006a06:	3304      	adds	r3, #4
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	4a26      	ldr	r2, [pc, #152]	; (8006aa8 <USB_EP0_OutStart+0xb8>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d90a      	bls.n	8006a2a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a24:	d101      	bne.n	8006a2a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006a26:	2300      	movs	r3, #0
 8006a28:	e037      	b.n	8006a9a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a30:	461a      	mov	r2, r3
 8006a32:	2300      	movs	r3, #0
 8006a34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a3c:	691b      	ldr	r3, [r3, #16]
 8006a3e:	697a      	ldr	r2, [r7, #20]
 8006a40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a48:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a50:	691b      	ldr	r3, [r3, #16]
 8006a52:	697a      	ldr	r2, [r7, #20]
 8006a54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a58:	f043 0318 	orr.w	r3, r3, #24
 8006a5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a64:	691b      	ldr	r3, [r3, #16]
 8006a66:	697a      	ldr	r2, [r7, #20]
 8006a68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a6c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006a70:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006a72:	7afb      	ldrb	r3, [r7, #11]
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d10f      	bne.n	8006a98 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a7e:	461a      	mov	r2, r3
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	697a      	ldr	r2, [r7, #20]
 8006a8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a92:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006a96:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006a98:	2300      	movs	r3, #0
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	371c      	adds	r7, #28
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr
 8006aa6:	bf00      	nop
 8006aa8:	4f54300a 	.word	0x4f54300a

08006aac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b085      	sub	sp, #20
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	3301      	adds	r3, #1
 8006abc:	60fb      	str	r3, [r7, #12]
 8006abe:	4a13      	ldr	r2, [pc, #76]	; (8006b0c <USB_CoreReset+0x60>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d901      	bls.n	8006ac8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006ac4:	2303      	movs	r3, #3
 8006ac6:	e01a      	b.n	8006afe <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	691b      	ldr	r3, [r3, #16]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	daf3      	bge.n	8006ab8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	691b      	ldr	r3, [r3, #16]
 8006ad8:	f043 0201 	orr.w	r2, r3, #1
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	60fb      	str	r3, [r7, #12]
 8006ae6:	4a09      	ldr	r2, [pc, #36]	; (8006b0c <USB_CoreReset+0x60>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d901      	bls.n	8006af0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006aec:	2303      	movs	r3, #3
 8006aee:	e006      	b.n	8006afe <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	691b      	ldr	r3, [r3, #16]
 8006af4:	f003 0301 	and.w	r3, r3, #1
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d0f1      	beq.n	8006ae0 <USB_CoreReset+0x34>

  return HAL_OK;
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3714      	adds	r7, #20
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr
 8006b0a:	bf00      	nop
 8006b0c:	00030d40 	.word	0x00030d40

08006b10 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b084      	sub	sp, #16
 8006b14:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8006b16:	4b8c      	ldr	r3, [pc, #560]	; (8006d48 <MX_LWIP_Init+0x238>)
 8006b18:	22c0      	movs	r2, #192	; 0xc0
 8006b1a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8006b1c:	4b8a      	ldr	r3, [pc, #552]	; (8006d48 <MX_LWIP_Init+0x238>)
 8006b1e:	22a8      	movs	r2, #168	; 0xa8
 8006b20:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8006b22:	4b89      	ldr	r3, [pc, #548]	; (8006d48 <MX_LWIP_Init+0x238>)
 8006b24:	2200      	movs	r2, #0
 8006b26:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 68;
 8006b28:	4b87      	ldr	r3, [pc, #540]	; (8006d48 <MX_LWIP_Init+0x238>)
 8006b2a:	2244      	movs	r2, #68	; 0x44
 8006b2c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8006b2e:	4b87      	ldr	r3, [pc, #540]	; (8006d4c <MX_LWIP_Init+0x23c>)
 8006b30:	22ff      	movs	r2, #255	; 0xff
 8006b32:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8006b34:	4b85      	ldr	r3, [pc, #532]	; (8006d4c <MX_LWIP_Init+0x23c>)
 8006b36:	22ff      	movs	r2, #255	; 0xff
 8006b38:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8006b3a:	4b84      	ldr	r3, [pc, #528]	; (8006d4c <MX_LWIP_Init+0x23c>)
 8006b3c:	22ff      	movs	r2, #255	; 0xff
 8006b3e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8006b40:	4b82      	ldr	r3, [pc, #520]	; (8006d4c <MX_LWIP_Init+0x23c>)
 8006b42:	2200      	movs	r2, #0
 8006b44:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8006b46:	4b82      	ldr	r3, [pc, #520]	; (8006d50 <MX_LWIP_Init+0x240>)
 8006b48:	22c0      	movs	r2, #192	; 0xc0
 8006b4a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8006b4c:	4b80      	ldr	r3, [pc, #512]	; (8006d50 <MX_LWIP_Init+0x240>)
 8006b4e:	22a8      	movs	r2, #168	; 0xa8
 8006b50:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8006b52:	4b7f      	ldr	r3, [pc, #508]	; (8006d50 <MX_LWIP_Init+0x240>)
 8006b54:	2200      	movs	r2, #0
 8006b56:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8006b58:	4b7d      	ldr	r3, [pc, #500]	; (8006d50 <MX_LWIP_Init+0x240>)
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8006b5e:	2100      	movs	r1, #0
 8006b60:	2000      	movs	r0, #0
 8006b62:	f005 f90b 	bl	800bd7c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8006b66:	4b78      	ldr	r3, [pc, #480]	; (8006d48 <MX_LWIP_Init+0x238>)
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	061a      	lsls	r2, r3, #24
 8006b6c:	4b76      	ldr	r3, [pc, #472]	; (8006d48 <MX_LWIP_Init+0x238>)
 8006b6e:	785b      	ldrb	r3, [r3, #1]
 8006b70:	041b      	lsls	r3, r3, #16
 8006b72:	431a      	orrs	r2, r3
 8006b74:	4b74      	ldr	r3, [pc, #464]	; (8006d48 <MX_LWIP_Init+0x238>)
 8006b76:	789b      	ldrb	r3, [r3, #2]
 8006b78:	021b      	lsls	r3, r3, #8
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	4a72      	ldr	r2, [pc, #456]	; (8006d48 <MX_LWIP_Init+0x238>)
 8006b7e:	78d2      	ldrb	r2, [r2, #3]
 8006b80:	4313      	orrs	r3, r2
 8006b82:	061a      	lsls	r2, r3, #24
 8006b84:	4b70      	ldr	r3, [pc, #448]	; (8006d48 <MX_LWIP_Init+0x238>)
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	0619      	lsls	r1, r3, #24
 8006b8a:	4b6f      	ldr	r3, [pc, #444]	; (8006d48 <MX_LWIP_Init+0x238>)
 8006b8c:	785b      	ldrb	r3, [r3, #1]
 8006b8e:	041b      	lsls	r3, r3, #16
 8006b90:	4319      	orrs	r1, r3
 8006b92:	4b6d      	ldr	r3, [pc, #436]	; (8006d48 <MX_LWIP_Init+0x238>)
 8006b94:	789b      	ldrb	r3, [r3, #2]
 8006b96:	021b      	lsls	r3, r3, #8
 8006b98:	430b      	orrs	r3, r1
 8006b9a:	496b      	ldr	r1, [pc, #428]	; (8006d48 <MX_LWIP_Init+0x238>)
 8006b9c:	78c9      	ldrb	r1, [r1, #3]
 8006b9e:	430b      	orrs	r3, r1
 8006ba0:	021b      	lsls	r3, r3, #8
 8006ba2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006ba6:	431a      	orrs	r2, r3
 8006ba8:	4b67      	ldr	r3, [pc, #412]	; (8006d48 <MX_LWIP_Init+0x238>)
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	0619      	lsls	r1, r3, #24
 8006bae:	4b66      	ldr	r3, [pc, #408]	; (8006d48 <MX_LWIP_Init+0x238>)
 8006bb0:	785b      	ldrb	r3, [r3, #1]
 8006bb2:	041b      	lsls	r3, r3, #16
 8006bb4:	4319      	orrs	r1, r3
 8006bb6:	4b64      	ldr	r3, [pc, #400]	; (8006d48 <MX_LWIP_Init+0x238>)
 8006bb8:	789b      	ldrb	r3, [r3, #2]
 8006bba:	021b      	lsls	r3, r3, #8
 8006bbc:	430b      	orrs	r3, r1
 8006bbe:	4962      	ldr	r1, [pc, #392]	; (8006d48 <MX_LWIP_Init+0x238>)
 8006bc0:	78c9      	ldrb	r1, [r1, #3]
 8006bc2:	430b      	orrs	r3, r1
 8006bc4:	0a1b      	lsrs	r3, r3, #8
 8006bc6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006bca:	431a      	orrs	r2, r3
 8006bcc:	4b5e      	ldr	r3, [pc, #376]	; (8006d48 <MX_LWIP_Init+0x238>)
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	0619      	lsls	r1, r3, #24
 8006bd2:	4b5d      	ldr	r3, [pc, #372]	; (8006d48 <MX_LWIP_Init+0x238>)
 8006bd4:	785b      	ldrb	r3, [r3, #1]
 8006bd6:	041b      	lsls	r3, r3, #16
 8006bd8:	4319      	orrs	r1, r3
 8006bda:	4b5b      	ldr	r3, [pc, #364]	; (8006d48 <MX_LWIP_Init+0x238>)
 8006bdc:	789b      	ldrb	r3, [r3, #2]
 8006bde:	021b      	lsls	r3, r3, #8
 8006be0:	430b      	orrs	r3, r1
 8006be2:	4959      	ldr	r1, [pc, #356]	; (8006d48 <MX_LWIP_Init+0x238>)
 8006be4:	78c9      	ldrb	r1, [r1, #3]
 8006be6:	430b      	orrs	r3, r1
 8006be8:	0e1b      	lsrs	r3, r3, #24
 8006bea:	4313      	orrs	r3, r2
 8006bec:	4a59      	ldr	r2, [pc, #356]	; (8006d54 <MX_LWIP_Init+0x244>)
 8006bee:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8006bf0:	4b56      	ldr	r3, [pc, #344]	; (8006d4c <MX_LWIP_Init+0x23c>)
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	061a      	lsls	r2, r3, #24
 8006bf6:	4b55      	ldr	r3, [pc, #340]	; (8006d4c <MX_LWIP_Init+0x23c>)
 8006bf8:	785b      	ldrb	r3, [r3, #1]
 8006bfa:	041b      	lsls	r3, r3, #16
 8006bfc:	431a      	orrs	r2, r3
 8006bfe:	4b53      	ldr	r3, [pc, #332]	; (8006d4c <MX_LWIP_Init+0x23c>)
 8006c00:	789b      	ldrb	r3, [r3, #2]
 8006c02:	021b      	lsls	r3, r3, #8
 8006c04:	4313      	orrs	r3, r2
 8006c06:	4a51      	ldr	r2, [pc, #324]	; (8006d4c <MX_LWIP_Init+0x23c>)
 8006c08:	78d2      	ldrb	r2, [r2, #3]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	061a      	lsls	r2, r3, #24
 8006c0e:	4b4f      	ldr	r3, [pc, #316]	; (8006d4c <MX_LWIP_Init+0x23c>)
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	0619      	lsls	r1, r3, #24
 8006c14:	4b4d      	ldr	r3, [pc, #308]	; (8006d4c <MX_LWIP_Init+0x23c>)
 8006c16:	785b      	ldrb	r3, [r3, #1]
 8006c18:	041b      	lsls	r3, r3, #16
 8006c1a:	4319      	orrs	r1, r3
 8006c1c:	4b4b      	ldr	r3, [pc, #300]	; (8006d4c <MX_LWIP_Init+0x23c>)
 8006c1e:	789b      	ldrb	r3, [r3, #2]
 8006c20:	021b      	lsls	r3, r3, #8
 8006c22:	430b      	orrs	r3, r1
 8006c24:	4949      	ldr	r1, [pc, #292]	; (8006d4c <MX_LWIP_Init+0x23c>)
 8006c26:	78c9      	ldrb	r1, [r1, #3]
 8006c28:	430b      	orrs	r3, r1
 8006c2a:	021b      	lsls	r3, r3, #8
 8006c2c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006c30:	431a      	orrs	r2, r3
 8006c32:	4b46      	ldr	r3, [pc, #280]	; (8006d4c <MX_LWIP_Init+0x23c>)
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	0619      	lsls	r1, r3, #24
 8006c38:	4b44      	ldr	r3, [pc, #272]	; (8006d4c <MX_LWIP_Init+0x23c>)
 8006c3a:	785b      	ldrb	r3, [r3, #1]
 8006c3c:	041b      	lsls	r3, r3, #16
 8006c3e:	4319      	orrs	r1, r3
 8006c40:	4b42      	ldr	r3, [pc, #264]	; (8006d4c <MX_LWIP_Init+0x23c>)
 8006c42:	789b      	ldrb	r3, [r3, #2]
 8006c44:	021b      	lsls	r3, r3, #8
 8006c46:	430b      	orrs	r3, r1
 8006c48:	4940      	ldr	r1, [pc, #256]	; (8006d4c <MX_LWIP_Init+0x23c>)
 8006c4a:	78c9      	ldrb	r1, [r1, #3]
 8006c4c:	430b      	orrs	r3, r1
 8006c4e:	0a1b      	lsrs	r3, r3, #8
 8006c50:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006c54:	431a      	orrs	r2, r3
 8006c56:	4b3d      	ldr	r3, [pc, #244]	; (8006d4c <MX_LWIP_Init+0x23c>)
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	0619      	lsls	r1, r3, #24
 8006c5c:	4b3b      	ldr	r3, [pc, #236]	; (8006d4c <MX_LWIP_Init+0x23c>)
 8006c5e:	785b      	ldrb	r3, [r3, #1]
 8006c60:	041b      	lsls	r3, r3, #16
 8006c62:	4319      	orrs	r1, r3
 8006c64:	4b39      	ldr	r3, [pc, #228]	; (8006d4c <MX_LWIP_Init+0x23c>)
 8006c66:	789b      	ldrb	r3, [r3, #2]
 8006c68:	021b      	lsls	r3, r3, #8
 8006c6a:	430b      	orrs	r3, r1
 8006c6c:	4937      	ldr	r1, [pc, #220]	; (8006d4c <MX_LWIP_Init+0x23c>)
 8006c6e:	78c9      	ldrb	r1, [r1, #3]
 8006c70:	430b      	orrs	r3, r1
 8006c72:	0e1b      	lsrs	r3, r3, #24
 8006c74:	4313      	orrs	r3, r2
 8006c76:	4a38      	ldr	r2, [pc, #224]	; (8006d58 <MX_LWIP_Init+0x248>)
 8006c78:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8006c7a:	4b35      	ldr	r3, [pc, #212]	; (8006d50 <MX_LWIP_Init+0x240>)
 8006c7c:	781b      	ldrb	r3, [r3, #0]
 8006c7e:	061a      	lsls	r2, r3, #24
 8006c80:	4b33      	ldr	r3, [pc, #204]	; (8006d50 <MX_LWIP_Init+0x240>)
 8006c82:	785b      	ldrb	r3, [r3, #1]
 8006c84:	041b      	lsls	r3, r3, #16
 8006c86:	431a      	orrs	r2, r3
 8006c88:	4b31      	ldr	r3, [pc, #196]	; (8006d50 <MX_LWIP_Init+0x240>)
 8006c8a:	789b      	ldrb	r3, [r3, #2]
 8006c8c:	021b      	lsls	r3, r3, #8
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	4a2f      	ldr	r2, [pc, #188]	; (8006d50 <MX_LWIP_Init+0x240>)
 8006c92:	78d2      	ldrb	r2, [r2, #3]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	061a      	lsls	r2, r3, #24
 8006c98:	4b2d      	ldr	r3, [pc, #180]	; (8006d50 <MX_LWIP_Init+0x240>)
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	0619      	lsls	r1, r3, #24
 8006c9e:	4b2c      	ldr	r3, [pc, #176]	; (8006d50 <MX_LWIP_Init+0x240>)
 8006ca0:	785b      	ldrb	r3, [r3, #1]
 8006ca2:	041b      	lsls	r3, r3, #16
 8006ca4:	4319      	orrs	r1, r3
 8006ca6:	4b2a      	ldr	r3, [pc, #168]	; (8006d50 <MX_LWIP_Init+0x240>)
 8006ca8:	789b      	ldrb	r3, [r3, #2]
 8006caa:	021b      	lsls	r3, r3, #8
 8006cac:	430b      	orrs	r3, r1
 8006cae:	4928      	ldr	r1, [pc, #160]	; (8006d50 <MX_LWIP_Init+0x240>)
 8006cb0:	78c9      	ldrb	r1, [r1, #3]
 8006cb2:	430b      	orrs	r3, r1
 8006cb4:	021b      	lsls	r3, r3, #8
 8006cb6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006cba:	431a      	orrs	r2, r3
 8006cbc:	4b24      	ldr	r3, [pc, #144]	; (8006d50 <MX_LWIP_Init+0x240>)
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	0619      	lsls	r1, r3, #24
 8006cc2:	4b23      	ldr	r3, [pc, #140]	; (8006d50 <MX_LWIP_Init+0x240>)
 8006cc4:	785b      	ldrb	r3, [r3, #1]
 8006cc6:	041b      	lsls	r3, r3, #16
 8006cc8:	4319      	orrs	r1, r3
 8006cca:	4b21      	ldr	r3, [pc, #132]	; (8006d50 <MX_LWIP_Init+0x240>)
 8006ccc:	789b      	ldrb	r3, [r3, #2]
 8006cce:	021b      	lsls	r3, r3, #8
 8006cd0:	430b      	orrs	r3, r1
 8006cd2:	491f      	ldr	r1, [pc, #124]	; (8006d50 <MX_LWIP_Init+0x240>)
 8006cd4:	78c9      	ldrb	r1, [r1, #3]
 8006cd6:	430b      	orrs	r3, r1
 8006cd8:	0a1b      	lsrs	r3, r3, #8
 8006cda:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006cde:	431a      	orrs	r2, r3
 8006ce0:	4b1b      	ldr	r3, [pc, #108]	; (8006d50 <MX_LWIP_Init+0x240>)
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	0619      	lsls	r1, r3, #24
 8006ce6:	4b1a      	ldr	r3, [pc, #104]	; (8006d50 <MX_LWIP_Init+0x240>)
 8006ce8:	785b      	ldrb	r3, [r3, #1]
 8006cea:	041b      	lsls	r3, r3, #16
 8006cec:	4319      	orrs	r1, r3
 8006cee:	4b18      	ldr	r3, [pc, #96]	; (8006d50 <MX_LWIP_Init+0x240>)
 8006cf0:	789b      	ldrb	r3, [r3, #2]
 8006cf2:	021b      	lsls	r3, r3, #8
 8006cf4:	430b      	orrs	r3, r1
 8006cf6:	4916      	ldr	r1, [pc, #88]	; (8006d50 <MX_LWIP_Init+0x240>)
 8006cf8:	78c9      	ldrb	r1, [r1, #3]
 8006cfa:	430b      	orrs	r3, r1
 8006cfc:	0e1b      	lsrs	r3, r3, #24
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	4a16      	ldr	r2, [pc, #88]	; (8006d5c <MX_LWIP_Init+0x24c>)
 8006d02:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8006d04:	4b16      	ldr	r3, [pc, #88]	; (8006d60 <MX_LWIP_Init+0x250>)
 8006d06:	9302      	str	r3, [sp, #8]
 8006d08:	4b16      	ldr	r3, [pc, #88]	; (8006d64 <MX_LWIP_Init+0x254>)
 8006d0a:	9301      	str	r3, [sp, #4]
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	9300      	str	r3, [sp, #0]
 8006d10:	4b12      	ldr	r3, [pc, #72]	; (8006d5c <MX_LWIP_Init+0x24c>)
 8006d12:	4a11      	ldr	r2, [pc, #68]	; (8006d58 <MX_LWIP_Init+0x248>)
 8006d14:	490f      	ldr	r1, [pc, #60]	; (8006d54 <MX_LWIP_Init+0x244>)
 8006d16:	4814      	ldr	r0, [pc, #80]	; (8006d68 <MX_LWIP_Init+0x258>)
 8006d18:	f005 fdb4 	bl	800c884 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8006d1c:	4812      	ldr	r0, [pc, #72]	; (8006d68 <MX_LWIP_Init+0x258>)
 8006d1e:	f005 ff61 	bl	800cbe4 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8006d22:	4b11      	ldr	r3, [pc, #68]	; (8006d68 <MX_LWIP_Init+0x258>)
 8006d24:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8006d28:	089b      	lsrs	r3, r3, #2
 8006d2a:	f003 0301 	and.w	r3, r3, #1
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d003      	beq.n	8006d3c <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8006d34:	480c      	ldr	r0, [pc, #48]	; (8006d68 <MX_LWIP_Init+0x258>)
 8006d36:	f005 ff65 	bl	800cc04 <netif_set_up>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8006d3a:	e002      	b.n	8006d42 <MX_LWIP_Init+0x232>
    netif_set_down(&gnetif);
 8006d3c:	480a      	ldr	r0, [pc, #40]	; (8006d68 <MX_LWIP_Init+0x258>)
 8006d3e:	f005 ffcd 	bl	800ccdc <netif_set_down>
}
 8006d42:	bf00      	nop
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}
 8006d48:	20004750 	.word	0x20004750
 8006d4c:	2000474c 	.word	0x2000474c
 8006d50:	20004714 	.word	0x20004714
 8006d54:	20004748 	.word	0x20004748
 8006d58:	20004754 	.word	0x20004754
 8006d5c:	20004758 	.word	0x20004758
 8006d60:	0800bcb9 	.word	0x0800bcb9
 8006d64:	0800739d 	.word	0x0800739d
 8006d68:	20004718 	.word	0x20004718

08006d6c <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b08e      	sub	sp, #56	; 0x38
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d78:	2200      	movs	r2, #0
 8006d7a:	601a      	str	r2, [r3, #0]
 8006d7c:	605a      	str	r2, [r3, #4]
 8006d7e:	609a      	str	r2, [r3, #8]
 8006d80:	60da      	str	r2, [r3, #12]
 8006d82:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a4a      	ldr	r2, [pc, #296]	; (8006eb4 <HAL_ETH_MspInit+0x148>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	f040 808d 	bne.w	8006eaa <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8006d90:	2300      	movs	r3, #0
 8006d92:	623b      	str	r3, [r7, #32]
 8006d94:	4b48      	ldr	r3, [pc, #288]	; (8006eb8 <HAL_ETH_MspInit+0x14c>)
 8006d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d98:	4a47      	ldr	r2, [pc, #284]	; (8006eb8 <HAL_ETH_MspInit+0x14c>)
 8006d9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006d9e:	6313      	str	r3, [r2, #48]	; 0x30
 8006da0:	4b45      	ldr	r3, [pc, #276]	; (8006eb8 <HAL_ETH_MspInit+0x14c>)
 8006da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006da4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006da8:	623b      	str	r3, [r7, #32]
 8006daa:	6a3b      	ldr	r3, [r7, #32]
 8006dac:	2300      	movs	r3, #0
 8006dae:	61fb      	str	r3, [r7, #28]
 8006db0:	4b41      	ldr	r3, [pc, #260]	; (8006eb8 <HAL_ETH_MspInit+0x14c>)
 8006db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006db4:	4a40      	ldr	r2, [pc, #256]	; (8006eb8 <HAL_ETH_MspInit+0x14c>)
 8006db6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006dba:	6313      	str	r3, [r2, #48]	; 0x30
 8006dbc:	4b3e      	ldr	r3, [pc, #248]	; (8006eb8 <HAL_ETH_MspInit+0x14c>)
 8006dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dc0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006dc4:	61fb      	str	r3, [r7, #28]
 8006dc6:	69fb      	ldr	r3, [r7, #28]
 8006dc8:	2300      	movs	r3, #0
 8006dca:	61bb      	str	r3, [r7, #24]
 8006dcc:	4b3a      	ldr	r3, [pc, #232]	; (8006eb8 <HAL_ETH_MspInit+0x14c>)
 8006dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dd0:	4a39      	ldr	r2, [pc, #228]	; (8006eb8 <HAL_ETH_MspInit+0x14c>)
 8006dd2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006dd6:	6313      	str	r3, [r2, #48]	; 0x30
 8006dd8:	4b37      	ldr	r3, [pc, #220]	; (8006eb8 <HAL_ETH_MspInit+0x14c>)
 8006dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ddc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006de0:	61bb      	str	r3, [r7, #24]
 8006de2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006de4:	2300      	movs	r3, #0
 8006de6:	617b      	str	r3, [r7, #20]
 8006de8:	4b33      	ldr	r3, [pc, #204]	; (8006eb8 <HAL_ETH_MspInit+0x14c>)
 8006dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dec:	4a32      	ldr	r2, [pc, #200]	; (8006eb8 <HAL_ETH_MspInit+0x14c>)
 8006dee:	f043 0304 	orr.w	r3, r3, #4
 8006df2:	6313      	str	r3, [r2, #48]	; 0x30
 8006df4:	4b30      	ldr	r3, [pc, #192]	; (8006eb8 <HAL_ETH_MspInit+0x14c>)
 8006df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006df8:	f003 0304 	and.w	r3, r3, #4
 8006dfc:	617b      	str	r3, [r7, #20]
 8006dfe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e00:	2300      	movs	r3, #0
 8006e02:	613b      	str	r3, [r7, #16]
 8006e04:	4b2c      	ldr	r3, [pc, #176]	; (8006eb8 <HAL_ETH_MspInit+0x14c>)
 8006e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e08:	4a2b      	ldr	r2, [pc, #172]	; (8006eb8 <HAL_ETH_MspInit+0x14c>)
 8006e0a:	f043 0301 	orr.w	r3, r3, #1
 8006e0e:	6313      	str	r3, [r2, #48]	; 0x30
 8006e10:	4b29      	ldr	r3, [pc, #164]	; (8006eb8 <HAL_ETH_MspInit+0x14c>)
 8006e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e14:	f003 0301 	and.w	r3, r3, #1
 8006e18:	613b      	str	r3, [r7, #16]
 8006e1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	60fb      	str	r3, [r7, #12]
 8006e20:	4b25      	ldr	r3, [pc, #148]	; (8006eb8 <HAL_ETH_MspInit+0x14c>)
 8006e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e24:	4a24      	ldr	r2, [pc, #144]	; (8006eb8 <HAL_ETH_MspInit+0x14c>)
 8006e26:	f043 0302 	orr.w	r3, r3, #2
 8006e2a:	6313      	str	r3, [r2, #48]	; 0x30
 8006e2c:	4b22      	ldr	r3, [pc, #136]	; (8006eb8 <HAL_ETH_MspInit+0x14c>)
 8006e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e30:	f003 0302 	and.w	r3, r3, #2
 8006e34:	60fb      	str	r3, [r7, #12]
 8006e36:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8006e38:	2332      	movs	r3, #50	; 0x32
 8006e3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e3c:	2302      	movs	r3, #2
 8006e3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e40:	2300      	movs	r3, #0
 8006e42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e44:	2303      	movs	r3, #3
 8006e46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006e48:	230b      	movs	r3, #11
 8006e4a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006e4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e50:	4619      	mov	r1, r3
 8006e52:	481a      	ldr	r0, [pc, #104]	; (8006ebc <HAL_ETH_MspInit+0x150>)
 8006e54:	f7fb fa48 	bl	80022e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8006e58:	2386      	movs	r3, #134	; 0x86
 8006e5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e5c:	2302      	movs	r3, #2
 8006e5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e60:	2300      	movs	r3, #0
 8006e62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e64:	2303      	movs	r3, #3
 8006e66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006e68:	230b      	movs	r3, #11
 8006e6a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e70:	4619      	mov	r1, r3
 8006e72:	4813      	ldr	r0, [pc, #76]	; (8006ec0 <HAL_ETH_MspInit+0x154>)
 8006e74:	f7fb fa38 	bl	80022e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8006e78:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8006e7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e7e:	2302      	movs	r3, #2
 8006e80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e82:	2300      	movs	r3, #0
 8006e84:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e86:	2303      	movs	r3, #3
 8006e88:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006e8a:	230b      	movs	r3, #11
 8006e8c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e92:	4619      	mov	r1, r3
 8006e94:	480b      	ldr	r0, [pc, #44]	; (8006ec4 <HAL_ETH_MspInit+0x158>)
 8006e96:	f7fb fa27 	bl	80022e8 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	2105      	movs	r1, #5
 8006e9e:	203d      	movs	r0, #61	; 0x3d
 8006ea0:	f7fa f9e6 	bl	8001270 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8006ea4:	203d      	movs	r0, #61	; 0x3d
 8006ea6:	f7fa f9ff 	bl	80012a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8006eaa:	bf00      	nop
 8006eac:	3738      	adds	r7, #56	; 0x38
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}
 8006eb2:	bf00      	nop
 8006eb4:	40028000 	.word	0x40028000
 8006eb8:	40023800 	.word	0x40023800
 8006ebc:	40020800 	.word	0x40020800
 8006ec0:	40020000 	.word	0x40020000
 8006ec4:	40020400 	.word	0x40020400

08006ec8 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8006ed0:	4b04      	ldr	r3, [pc, #16]	; (8006ee4 <HAL_ETH_RxCpltCallback+0x1c>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f002 f8b1 	bl	800903c <osSemaphoreRelease>
}
 8006eda:	bf00      	nop
 8006edc:	3708      	adds	r7, #8
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
 8006ee2:	bf00      	nop
 8006ee4:	20000468 	.word	0x20000468

08006ee8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8006ee8:	b5b0      	push	{r4, r5, r7, lr}
 8006eea:	b090      	sub	sp, #64	; 0x40
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8006ef4:	4b60      	ldr	r3, [pc, #384]	; (8007078 <low_level_init+0x190>)
 8006ef6:	4a61      	ldr	r2, [pc, #388]	; (800707c <low_level_init+0x194>)
 8006ef8:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8006efa:	4b5f      	ldr	r3, [pc, #380]	; (8007078 <low_level_init+0x190>)
 8006efc:	2201      	movs	r2, #1
 8006efe:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8006f00:	4b5d      	ldr	r3, [pc, #372]	; (8007078 <low_level_init+0x190>)
 8006f02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006f06:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8006f08:	4b5b      	ldr	r3, [pc, #364]	; (8007078 <low_level_init+0x190>)
 8006f0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f0e:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8006f10:	4b59      	ldr	r3, [pc, #356]	; (8007078 <low_level_init+0x190>)
 8006f12:	2201      	movs	r2, #1
 8006f14:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8006f16:	2300      	movs	r3, #0
 8006f18:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 8006f1c:	2380      	movs	r3, #128	; 0x80
 8006f1e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 8006f22:	23e1      	movs	r3, #225	; 0xe1
 8006f24:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 8006f34:	2300      	movs	r3, #0
 8006f36:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 8006f3a:	4a4f      	ldr	r2, [pc, #316]	; (8007078 <low_level_init+0x190>)
 8006f3c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006f40:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8006f42:	4b4d      	ldr	r3, [pc, #308]	; (8007078 <low_level_init+0x190>)
 8006f44:	2201      	movs	r2, #1
 8006f46:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8006f48:	4b4b      	ldr	r3, [pc, #300]	; (8007078 <low_level_init+0x190>)
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8006f4e:	4b4a      	ldr	r3, [pc, #296]	; (8007078 <low_level_init+0x190>)
 8006f50:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006f54:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8006f56:	4848      	ldr	r0, [pc, #288]	; (8007078 <low_level_init+0x190>)
 8006f58:	f7fa f9b4 	bl	80012c4 <HAL_ETH_Init>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8006f62:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d108      	bne.n	8006f7c <low_level_init+0x94>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8006f70:	f043 0304 	orr.w	r3, r3, #4
 8006f74:	b2da      	uxtb	r2, r3
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8006f7c:	2304      	movs	r3, #4
 8006f7e:	4a40      	ldr	r2, [pc, #256]	; (8007080 <low_level_init+0x198>)
 8006f80:	4940      	ldr	r1, [pc, #256]	; (8007084 <low_level_init+0x19c>)
 8006f82:	483d      	ldr	r0, [pc, #244]	; (8007078 <low_level_init+0x190>)
 8006f84:	f7fa fb3a 	bl	80015fc <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8006f88:	2304      	movs	r3, #4
 8006f8a:	4a3f      	ldr	r2, [pc, #252]	; (8007088 <low_level_init+0x1a0>)
 8006f8c:	493f      	ldr	r1, [pc, #252]	; (800708c <low_level_init+0x1a4>)
 8006f8e:	483a      	ldr	r0, [pc, #232]	; (8007078 <low_level_init+0x190>)
 8006f90:	f7fa fb9d 	bl	80016ce <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2206      	movs	r2, #6
 8006f98:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8006f9c:	4b36      	ldr	r3, [pc, #216]	; (8007078 <low_level_init+0x190>)
 8006f9e:	695b      	ldr	r3, [r3, #20]
 8006fa0:	781a      	ldrb	r2, [r3, #0]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8006fa8:	4b33      	ldr	r3, [pc, #204]	; (8007078 <low_level_init+0x190>)
 8006faa:	695b      	ldr	r3, [r3, #20]
 8006fac:	785a      	ldrb	r2, [r3, #1]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8006fb4:	4b30      	ldr	r3, [pc, #192]	; (8007078 <low_level_init+0x190>)
 8006fb6:	695b      	ldr	r3, [r3, #20]
 8006fb8:	789a      	ldrb	r2, [r3, #2]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8006fc0:	4b2d      	ldr	r3, [pc, #180]	; (8007078 <low_level_init+0x190>)
 8006fc2:	695b      	ldr	r3, [r3, #20]
 8006fc4:	78da      	ldrb	r2, [r3, #3]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8006fcc:	4b2a      	ldr	r3, [pc, #168]	; (8007078 <low_level_init+0x190>)
 8006fce:	695b      	ldr	r3, [r3, #20]
 8006fd0:	791a      	ldrb	r2, [r3, #4]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8006fd8:	4b27      	ldr	r3, [pc, #156]	; (8007078 <low_level_init+0x190>)
 8006fda:	695b      	ldr	r3, [r3, #20]
 8006fdc:	795a      	ldrb	r2, [r3, #5]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  /* maximum transfer unit */
  netif->mtu = 1500;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006fea:	841a      	strh	r2, [r3, #32]

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8006ff2:	f043 030a 	orr.w	r3, r3, #10
 8006ff6:	b2da      	uxtb	r2, r3
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8006ffe:	2300      	movs	r3, #0
 8007000:	62bb      	str	r3, [r7, #40]	; 0x28
 8007002:	2300      	movs	r3, #0
 8007004:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8007006:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800700a:	2101      	movs	r1, #1
 800700c:	4618      	mov	r0, r3
 800700e:	f001 ff95 	bl	8008f3c <osSemaphoreCreate>
 8007012:	4603      	mov	r3, r0
 8007014:	4a1e      	ldr	r2, [pc, #120]	; (8007090 <low_level_init+0x1a8>)
 8007016:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8007018:	4b1e      	ldr	r3, [pc, #120]	; (8007094 <low_level_init+0x1ac>)
 800701a:	f107 040c 	add.w	r4, r7, #12
 800701e:	461d      	mov	r5, r3
 8007020:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007022:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007024:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007028:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800702c:	f107 030c 	add.w	r3, r7, #12
 8007030:	6879      	ldr	r1, [r7, #4]
 8007032:	4618      	mov	r0, r3
 8007034:	f001 fe86 	bl	8008d44 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8007038:	480f      	ldr	r0, [pc, #60]	; (8007078 <low_level_init+0x190>)
 800703a:	f7fa fe70 	bl	8001d1e <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800703e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007042:	461a      	mov	r2, r3
 8007044:	211d      	movs	r1, #29
 8007046:	480c      	ldr	r0, [pc, #48]	; (8007078 <low_level_init+0x190>)
 8007048:	f7fa fd9b 	bl	8001b82 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800704c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800704e:	f043 030b 	orr.w	r3, r3, #11
 8007052:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8007054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007056:	461a      	mov	r2, r3
 8007058:	211d      	movs	r1, #29
 800705a:	4807      	ldr	r0, [pc, #28]	; (8007078 <low_level_init+0x190>)
 800705c:	f7fa fdf9 	bl	8001c52 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8007060:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007064:	461a      	mov	r2, r3
 8007066:	211d      	movs	r1, #29
 8007068:	4803      	ldr	r0, [pc, #12]	; (8007078 <low_level_init+0x190>)
 800706a:	f7fa fd8a 	bl	8001b82 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800706e:	bf00      	nop
 8007070:	3740      	adds	r7, #64	; 0x40
 8007072:	46bd      	mov	sp, r7
 8007074:	bdb0      	pop	{r4, r5, r7, pc}
 8007076:	bf00      	nop
 8007078:	2000602c 	.word	0x2000602c
 800707c:	40028000 	.word	0x40028000
 8007080:	20006074 	.word	0x20006074
 8007084:	2000475c 	.word	0x2000475c
 8007088:	200047dc 	.word	0x200047dc
 800708c:	20005fac 	.word	0x20005fac
 8007090:	20000468 	.word	0x20000468
 8007094:	08017580 	.word	0x08017580

08007098 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b08a      	sub	sp, #40	; 0x28
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80070a2:	4b4b      	ldr	r3, [pc, #300]	; (80071d0 <low_level_output+0x138>)
 80070a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80070aa:	2300      	movs	r3, #0
 80070ac:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80070ae:	2300      	movs	r3, #0
 80070b0:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80070b2:	2300      	movs	r3, #0
 80070b4:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80070b6:	2300      	movs	r3, #0
 80070b8:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80070ba:	4b45      	ldr	r3, [pc, #276]	; (80071d0 <low_level_output+0x138>)
 80070bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070be:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80070c0:	2300      	movs	r3, #0
 80070c2:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	623b      	str	r3, [r7, #32]
 80070c8:	e05a      	b.n	8007180 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80070ca:	69bb      	ldr	r3, [r7, #24]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	da03      	bge.n	80070da <low_level_output+0x42>
      {
        errval = ERR_USE;
 80070d2:	23f8      	movs	r3, #248	; 0xf8
 80070d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80070d8:	e05c      	b.n	8007194 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80070da:	6a3b      	ldr	r3, [r7, #32]
 80070dc:	895b      	ldrh	r3, [r3, #10]
 80070de:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80070e0:	2300      	movs	r3, #0
 80070e2:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80070e4:	e02f      	b.n	8007146 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80070e6:	69fa      	ldr	r2, [r7, #28]
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	18d0      	adds	r0, r2, r3
 80070ec:	6a3b      	ldr	r3, [r7, #32]
 80070ee:	685a      	ldr	r2, [r3, #4]
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	18d1      	adds	r1, r2, r3
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80070fa:	3304      	adds	r3, #4
 80070fc:	461a      	mov	r2, r3
 80070fe:	f00f f9eb 	bl	80164d8 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8007102:	69bb      	ldr	r3, [r7, #24]
 8007104:	68db      	ldr	r3, [r3, #12]
 8007106:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8007108:	69bb      	ldr	r3, [r7, #24]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	2b00      	cmp	r3, #0
 800710e:	da03      	bge.n	8007118 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8007110:	23f8      	movs	r3, #248	; 0xf8
 8007112:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8007116:	e03d      	b.n	8007194 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8007118:	69bb      	ldr	r3, [r7, #24]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800711e:	693a      	ldr	r2, [r7, #16]
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	4413      	add	r3, r2
 8007124:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8007128:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800712a:	68ba      	ldr	r2, [r7, #8]
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	1ad3      	subs	r3, r2, r3
 8007130:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8007134:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8007136:	697a      	ldr	r2, [r7, #20]
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	1ad3      	subs	r3, r2, r3
 800713c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8007140:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8007142:	2300      	movs	r3, #0
 8007144:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8007146:	68fa      	ldr	r2, [r7, #12]
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	4413      	add	r3, r2
 800714c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8007150:	4293      	cmp	r3, r2
 8007152:	d8c8      	bhi.n	80070e6 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8007154:	69fa      	ldr	r2, [r7, #28]
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	18d0      	adds	r0, r2, r3
 800715a:	6a3b      	ldr	r3, [r7, #32]
 800715c:	685a      	ldr	r2, [r3, #4]
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	4413      	add	r3, r2
 8007162:	68fa      	ldr	r2, [r7, #12]
 8007164:	4619      	mov	r1, r3
 8007166:	f00f f9b7 	bl	80164d8 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800716a:	693a      	ldr	r2, [r7, #16]
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	4413      	add	r3, r2
 8007170:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8007172:	697a      	ldr	r2, [r7, #20]
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	4413      	add	r3, r2
 8007178:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800717a:	6a3b      	ldr	r3, [r7, #32]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	623b      	str	r3, [r7, #32]
 8007180:	6a3b      	ldr	r3, [r7, #32]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d1a1      	bne.n	80070ca <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8007186:	6979      	ldr	r1, [r7, #20]
 8007188:	4811      	ldr	r0, [pc, #68]	; (80071d0 <low_level_output+0x138>)
 800718a:	f7fa fb0d 	bl	80017a8 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800718e:	2300      	movs	r3, #0
 8007190:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8007194:	4b0e      	ldr	r3, [pc, #56]	; (80071d0 <low_level_output+0x138>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800719c:	3314      	adds	r3, #20
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f003 0320 	and.w	r3, r3, #32
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d00d      	beq.n	80071c4 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80071a8:	4b09      	ldr	r3, [pc, #36]	; (80071d0 <low_level_output+0x138>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071b0:	3314      	adds	r3, #20
 80071b2:	2220      	movs	r2, #32
 80071b4:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80071b6:	4b06      	ldr	r3, [pc, #24]	; (80071d0 <low_level_output+0x138>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071be:	3304      	adds	r3, #4
 80071c0:	2200      	movs	r2, #0
 80071c2:	601a      	str	r2, [r3, #0]
  }
  return errval;
 80071c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3728      	adds	r7, #40	; 0x28
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}
 80071d0:	2000602c 	.word	0x2000602c

080071d4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b08c      	sub	sp, #48	; 0x30
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80071dc:	2300      	movs	r3, #0
 80071de:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80071e0:	2300      	movs	r3, #0
 80071e2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80071e4:	2300      	movs	r3, #0
 80071e6:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80071e8:	2300      	movs	r3, #0
 80071ea:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80071ec:	2300      	movs	r3, #0
 80071ee:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80071f0:	2300      	movs	r3, #0
 80071f2:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80071f4:	2300      	movs	r3, #0
 80071f6:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 80071f8:	484f      	ldr	r0, [pc, #316]	; (8007338 <low_level_input+0x164>)
 80071fa:	f7fa fbbf 	bl	800197c <HAL_ETH_GetReceivedFrame_IT>
 80071fe:	4603      	mov	r3, r0
 8007200:	2b00      	cmp	r3, #0
 8007202:	d001      	beq.n	8007208 <low_level_input+0x34>

    return NULL;
 8007204:	2300      	movs	r3, #0
 8007206:	e092      	b.n	800732e <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8007208:	4b4b      	ldr	r3, [pc, #300]	; (8007338 <low_level_input+0x164>)
 800720a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800720c:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800720e:	4b4a      	ldr	r3, [pc, #296]	; (8007338 <low_level_input+0x164>)
 8007210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007212:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8007214:	89fb      	ldrh	r3, [r7, #14]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d007      	beq.n	800722a <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800721a:	89fb      	ldrh	r3, [r7, #14]
 800721c:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8007220:	4619      	mov	r1, r3
 8007222:	2000      	movs	r0, #0
 8007224:	f005 fe44 	bl	800ceb0 <pbuf_alloc>
 8007228:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800722a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800722c:	2b00      	cmp	r3, #0
 800722e:	d04b      	beq.n	80072c8 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8007230:	4b41      	ldr	r3, [pc, #260]	; (8007338 <low_level_input+0x164>)
 8007232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007234:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8007236:	2300      	movs	r3, #0
 8007238:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800723a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800723c:	62bb      	str	r3, [r7, #40]	; 0x28
 800723e:	e040      	b.n	80072c2 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8007240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007242:	895b      	ldrh	r3, [r3, #10]
 8007244:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8007246:	2300      	movs	r3, #0
 8007248:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800724a:	e021      	b.n	8007290 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800724c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800724e:	685a      	ldr	r2, [r3, #4]
 8007250:	69bb      	ldr	r3, [r7, #24]
 8007252:	18d0      	adds	r0, r2, r3
 8007254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007256:	69fb      	ldr	r3, [r7, #28]
 8007258:	18d1      	adds	r1, r2, r3
 800725a:	69fb      	ldr	r3, [r7, #28]
 800725c:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8007260:	3304      	adds	r3, #4
 8007262:	461a      	mov	r2, r3
 8007264:	f00f f938 	bl	80164d8 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8007268:	6a3b      	ldr	r3, [r7, #32]
 800726a:	68db      	ldr	r3, [r3, #12]
 800726c:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800726e:	6a3b      	ldr	r3, [r7, #32]
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8007274:	69fa      	ldr	r2, [r7, #28]
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	4413      	add	r3, r2
 800727a:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800727e:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8007280:	69ba      	ldr	r2, [r7, #24]
 8007282:	69fb      	ldr	r3, [r7, #28]
 8007284:	1ad3      	subs	r3, r2, r3
 8007286:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800728a:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800728c:	2300      	movs	r3, #0
 800728e:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8007290:	697a      	ldr	r2, [r7, #20]
 8007292:	69fb      	ldr	r3, [r7, #28]
 8007294:	4413      	add	r3, r2
 8007296:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800729a:	4293      	cmp	r3, r2
 800729c:	d8d6      	bhi.n	800724c <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800729e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072a0:	685a      	ldr	r2, [r3, #4]
 80072a2:	69bb      	ldr	r3, [r7, #24]
 80072a4:	18d0      	adds	r0, r2, r3
 80072a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072a8:	69fb      	ldr	r3, [r7, #28]
 80072aa:	4413      	add	r3, r2
 80072ac:	697a      	ldr	r2, [r7, #20]
 80072ae:	4619      	mov	r1, r3
 80072b0:	f00f f912 	bl	80164d8 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80072b4:	69fa      	ldr	r2, [r7, #28]
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	4413      	add	r3, r2
 80072ba:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80072bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80072c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d1bb      	bne.n	8007240 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80072c8:	4b1b      	ldr	r3, [pc, #108]	; (8007338 <low_level_input+0x164>)
 80072ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072cc:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80072ce:	2300      	movs	r3, #0
 80072d0:	613b      	str	r3, [r7, #16]
 80072d2:	e00b      	b.n	80072ec <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80072d4:	6a3b      	ldr	r3, [r7, #32]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80072dc:	6a3b      	ldr	r3, [r7, #32]
 80072de:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80072e0:	6a3b      	ldr	r3, [r7, #32]
 80072e2:	68db      	ldr	r3, [r3, #12]
 80072e4:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	3301      	adds	r3, #1
 80072ea:	613b      	str	r3, [r7, #16]
 80072ec:	4b12      	ldr	r3, [pc, #72]	; (8007338 <low_level_input+0x164>)
 80072ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f0:	693a      	ldr	r2, [r7, #16]
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d3ee      	bcc.n	80072d4 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80072f6:	4b10      	ldr	r3, [pc, #64]	; (8007338 <low_level_input+0x164>)
 80072f8:	2200      	movs	r2, #0
 80072fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80072fc:	4b0e      	ldr	r3, [pc, #56]	; (8007338 <low_level_input+0x164>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007304:	3314      	adds	r3, #20
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800730c:	2b00      	cmp	r3, #0
 800730e:	d00d      	beq.n	800732c <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8007310:	4b09      	ldr	r3, [pc, #36]	; (8007338 <low_level_input+0x164>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007318:	3314      	adds	r3, #20
 800731a:	2280      	movs	r2, #128	; 0x80
 800731c:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800731e:	4b06      	ldr	r3, [pc, #24]	; (8007338 <low_level_input+0x164>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007326:	3308      	adds	r3, #8
 8007328:	2200      	movs	r2, #0
 800732a:	601a      	str	r2, [r3, #0]
  }
  return p;
 800732c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800732e:	4618      	mov	r0, r3
 8007330:	3730      	adds	r7, #48	; 0x30
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}
 8007336:	bf00      	nop
 8007338:	2000602c 	.word	0x2000602c

0800733c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b084      	sub	sp, #16
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8007348:	4b12      	ldr	r3, [pc, #72]	; (8007394 <ethernetif_input+0x58>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f04f 31ff 	mov.w	r1, #4294967295
 8007350:	4618      	mov	r0, r3
 8007352:	f001 fe25 	bl	8008fa0 <osSemaphoreWait>
 8007356:	4603      	mov	r3, r0
 8007358:	2b00      	cmp	r3, #0
 800735a:	d1f5      	bne.n	8007348 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 800735c:	480e      	ldr	r0, [pc, #56]	; (8007398 <ethernetif_input+0x5c>)
 800735e:	f00e fb27 	bl	80159b0 <sys_mutex_lock>
        p = low_level_input( netif );
 8007362:	68f8      	ldr	r0, [r7, #12]
 8007364:	f7ff ff36 	bl	80071d4 <low_level_input>
 8007368:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d00a      	beq.n	8007386 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	691b      	ldr	r3, [r3, #16]
 8007374:	68f9      	ldr	r1, [r7, #12]
 8007376:	68b8      	ldr	r0, [r7, #8]
 8007378:	4798      	blx	r3
 800737a:	4603      	mov	r3, r0
 800737c:	2b00      	cmp	r3, #0
 800737e:	d002      	beq.n	8007386 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8007380:	68b8      	ldr	r0, [r7, #8]
 8007382:	f006 f879 	bl	800d478 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8007386:	4804      	ldr	r0, [pc, #16]	; (8007398 <ethernetif_input+0x5c>)
 8007388:	f00e fb21 	bl	80159ce <sys_mutex_unlock>
      } while(p!=NULL);
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d1e4      	bne.n	800735c <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8007392:	e7d9      	b.n	8007348 <ethernetif_input+0xc>
 8007394:	20000468 	.word	0x20000468
 8007398:	20007844 	.word	0x20007844

0800739c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b082      	sub	sp, #8
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d106      	bne.n	80073b8 <ethernetif_init+0x1c>
 80073aa:	4b0e      	ldr	r3, [pc, #56]	; (80073e4 <ethernetif_init+0x48>)
 80073ac:	f240 222b 	movw	r2, #555	; 0x22b
 80073b0:	490d      	ldr	r1, [pc, #52]	; (80073e8 <ethernetif_init+0x4c>)
 80073b2:	480e      	ldr	r0, [pc, #56]	; (80073ec <ethernetif_init+0x50>)
 80073b4:	f00f f8a6 	bl	8016504 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2273      	movs	r2, #115	; 0x73
 80073bc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->name[1] = IFNAME1;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2274      	movs	r2, #116	; 0x74
 80073c4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	4a09      	ldr	r2, [pc, #36]	; (80073f0 <ethernetif_init+0x54>)
 80073cc:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	4a08      	ldr	r2, [pc, #32]	; (80073f4 <ethernetif_init+0x58>)
 80073d2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f7ff fd87 	bl	8006ee8 <low_level_init>

  return ERR_OK;
 80073da:	2300      	movs	r3, #0
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3708      	adds	r7, #8
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}
 80073e4:	0801759c 	.word	0x0801759c
 80073e8:	080175b8 	.word	0x080175b8
 80073ec:	080175c8 	.word	0x080175c8
 80073f0:	08013b5d 	.word	0x08013b5d
 80073f4:	08007099 	.word	0x08007099

080073f8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80073fc:	f7f9 fe50 	bl	80010a0 <HAL_GetTick>
 8007400:	4603      	mov	r3, r0
}
 8007402:	4618      	mov	r0, r3
 8007404:	bd80      	pop	{r7, pc}

08007406 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007406:	b580      	push	{r7, lr}
 8007408:	b084      	sub	sp, #16
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
 800740e:	460b      	mov	r3, r1
 8007410:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007412:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007416:	f00e ffe9 	bl	80163ec <USBD_static_malloc>
 800741a:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d105      	bne.n	800742e <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2200      	movs	r2, #0
 8007426:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800742a:	2302      	movs	r3, #2
 800742c:	e066      	b.n	80074fc <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	68fa      	ldr	r2, [r7, #12]
 8007432:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	7c1b      	ldrb	r3, [r3, #16]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d119      	bne.n	8007472 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800743e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007442:	2202      	movs	r2, #2
 8007444:	2181      	movs	r1, #129	; 0x81
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f00e fead 	bl	80161a6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2201      	movs	r2, #1
 8007450:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007452:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007456:	2202      	movs	r2, #2
 8007458:	2101      	movs	r1, #1
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f00e fea3 	bl	80161a6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2201      	movs	r2, #1
 8007464:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2210      	movs	r2, #16
 800746c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007470:	e016      	b.n	80074a0 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007472:	2340      	movs	r3, #64	; 0x40
 8007474:	2202      	movs	r2, #2
 8007476:	2181      	movs	r1, #129	; 0x81
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f00e fe94 	bl	80161a6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2201      	movs	r2, #1
 8007482:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007484:	2340      	movs	r3, #64	; 0x40
 8007486:	2202      	movs	r2, #2
 8007488:	2101      	movs	r1, #1
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f00e fe8b 	bl	80161a6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2201      	movs	r2, #1
 8007494:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2210      	movs	r2, #16
 800749c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80074a0:	2308      	movs	r3, #8
 80074a2:	2203      	movs	r2, #3
 80074a4:	2182      	movs	r1, #130	; 0x82
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f00e fe7d 	bl	80161a6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2201      	movs	r2, #1
 80074b0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2200      	movs	r2, #0
 80074c2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2200      	movs	r2, #0
 80074ca:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	7c1b      	ldrb	r3, [r3, #16]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d109      	bne.n	80074ea <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80074dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074e0:	2101      	movs	r1, #1
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f00e ff4e 	bl	8016384 <USBD_LL_PrepareReceive>
 80074e8:	e007      	b.n	80074fa <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80074f0:	2340      	movs	r3, #64	; 0x40
 80074f2:	2101      	movs	r1, #1
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f00e ff45 	bl	8016384 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80074fa:	2300      	movs	r3, #0
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3710      	adds	r7, #16
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b082      	sub	sp, #8
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	460b      	mov	r3, r1
 800750e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007510:	2181      	movs	r1, #129	; 0x81
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f00e fe6d 	bl	80161f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2200      	movs	r2, #0
 800751c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800751e:	2101      	movs	r1, #1
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f00e fe66 	bl	80161f2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2200      	movs	r2, #0
 800752a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800752e:	2182      	movs	r1, #130	; 0x82
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f00e fe5e 	bl	80161f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2200      	movs	r2, #0
 8007542:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800754c:	2b00      	cmp	r3, #0
 800754e:	d00e      	beq.n	800756e <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007560:	4618      	mov	r0, r3
 8007562:	f00e ff51 	bl	8016408 <USBD_static_free>
    pdev->pClassData = NULL;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2200      	movs	r2, #0
 800756a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800756e:	2300      	movs	r3, #0
}
 8007570:	4618      	mov	r0, r3
 8007572:	3708      	adds	r7, #8
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b086      	sub	sp, #24
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007588:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800758a:	2300      	movs	r3, #0
 800758c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800758e:	2300      	movs	r3, #0
 8007590:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007592:	2300      	movs	r3, #0
 8007594:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d101      	bne.n	80075a0 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800759c:	2303      	movs	r3, #3
 800759e:	e0af      	b.n	8007700 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d03f      	beq.n	800762c <USBD_CDC_Setup+0xb4>
 80075ac:	2b20      	cmp	r3, #32
 80075ae:	f040 809f 	bne.w	80076f0 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	88db      	ldrh	r3, [r3, #6]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d02e      	beq.n	8007618 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	b25b      	sxtb	r3, r3
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	da16      	bge.n	80075f2 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	683a      	ldr	r2, [r7, #0]
 80075ce:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80075d0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80075d2:	683a      	ldr	r2, [r7, #0]
 80075d4:	88d2      	ldrh	r2, [r2, #6]
 80075d6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	88db      	ldrh	r3, [r3, #6]
 80075dc:	2b07      	cmp	r3, #7
 80075de:	bf28      	it	cs
 80075e0:	2307      	movcs	r3, #7
 80075e2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	89fa      	ldrh	r2, [r7, #14]
 80075e8:	4619      	mov	r1, r3
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f001 fae9 	bl	8008bc2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80075f0:	e085      	b.n	80076fe <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	785a      	ldrb	r2, [r3, #1]
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	88db      	ldrh	r3, [r3, #6]
 8007600:	b2da      	uxtb	r2, r3
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007608:	6939      	ldr	r1, [r7, #16]
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	88db      	ldrh	r3, [r3, #6]
 800760e:	461a      	mov	r2, r3
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f001 fb02 	bl	8008c1a <USBD_CtlPrepareRx>
      break;
 8007616:	e072      	b.n	80076fe <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	683a      	ldr	r2, [r7, #0]
 8007622:	7850      	ldrb	r0, [r2, #1]
 8007624:	2200      	movs	r2, #0
 8007626:	6839      	ldr	r1, [r7, #0]
 8007628:	4798      	blx	r3
      break;
 800762a:	e068      	b.n	80076fe <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	785b      	ldrb	r3, [r3, #1]
 8007630:	2b0b      	cmp	r3, #11
 8007632:	d852      	bhi.n	80076da <USBD_CDC_Setup+0x162>
 8007634:	a201      	add	r2, pc, #4	; (adr r2, 800763c <USBD_CDC_Setup+0xc4>)
 8007636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800763a:	bf00      	nop
 800763c:	0800766d 	.word	0x0800766d
 8007640:	080076e9 	.word	0x080076e9
 8007644:	080076db 	.word	0x080076db
 8007648:	080076db 	.word	0x080076db
 800764c:	080076db 	.word	0x080076db
 8007650:	080076db 	.word	0x080076db
 8007654:	080076db 	.word	0x080076db
 8007658:	080076db 	.word	0x080076db
 800765c:	080076db 	.word	0x080076db
 8007660:	080076db 	.word	0x080076db
 8007664:	08007697 	.word	0x08007697
 8007668:	080076c1 	.word	0x080076c1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007672:	b2db      	uxtb	r3, r3
 8007674:	2b03      	cmp	r3, #3
 8007676:	d107      	bne.n	8007688 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007678:	f107 030a 	add.w	r3, r7, #10
 800767c:	2202      	movs	r2, #2
 800767e:	4619      	mov	r1, r3
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f001 fa9e 	bl	8008bc2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007686:	e032      	b.n	80076ee <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007688:	6839      	ldr	r1, [r7, #0]
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f001 fa28 	bl	8008ae0 <USBD_CtlError>
            ret = USBD_FAIL;
 8007690:	2303      	movs	r3, #3
 8007692:	75fb      	strb	r3, [r7, #23]
          break;
 8007694:	e02b      	b.n	80076ee <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800769c:	b2db      	uxtb	r3, r3
 800769e:	2b03      	cmp	r3, #3
 80076a0:	d107      	bne.n	80076b2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80076a2:	f107 030d 	add.w	r3, r7, #13
 80076a6:	2201      	movs	r2, #1
 80076a8:	4619      	mov	r1, r3
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f001 fa89 	bl	8008bc2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80076b0:	e01d      	b.n	80076ee <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80076b2:	6839      	ldr	r1, [r7, #0]
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f001 fa13 	bl	8008ae0 <USBD_CtlError>
            ret = USBD_FAIL;
 80076ba:	2303      	movs	r3, #3
 80076bc:	75fb      	strb	r3, [r7, #23]
          break;
 80076be:	e016      	b.n	80076ee <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	2b03      	cmp	r3, #3
 80076ca:	d00f      	beq.n	80076ec <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80076cc:	6839      	ldr	r1, [r7, #0]
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f001 fa06 	bl	8008ae0 <USBD_CtlError>
            ret = USBD_FAIL;
 80076d4:	2303      	movs	r3, #3
 80076d6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80076d8:	e008      	b.n	80076ec <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80076da:	6839      	ldr	r1, [r7, #0]
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f001 f9ff 	bl	8008ae0 <USBD_CtlError>
          ret = USBD_FAIL;
 80076e2:	2303      	movs	r3, #3
 80076e4:	75fb      	strb	r3, [r7, #23]
          break;
 80076e6:	e002      	b.n	80076ee <USBD_CDC_Setup+0x176>
          break;
 80076e8:	bf00      	nop
 80076ea:	e008      	b.n	80076fe <USBD_CDC_Setup+0x186>
          break;
 80076ec:	bf00      	nop
      }
      break;
 80076ee:	e006      	b.n	80076fe <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80076f0:	6839      	ldr	r1, [r7, #0]
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f001 f9f4 	bl	8008ae0 <USBD_CtlError>
      ret = USBD_FAIL;
 80076f8:	2303      	movs	r3, #3
 80076fa:	75fb      	strb	r3, [r7, #23]
      break;
 80076fc:	bf00      	nop
  }

  return (uint8_t)ret;
 80076fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007700:	4618      	mov	r0, r3
 8007702:	3718      	adds	r7, #24
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b084      	sub	sp, #16
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	460b      	mov	r3, r1
 8007712:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800771a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007722:	2b00      	cmp	r3, #0
 8007724:	d101      	bne.n	800772a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007726:	2303      	movs	r3, #3
 8007728:	e04f      	b.n	80077ca <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007730:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007732:	78fa      	ldrb	r2, [r7, #3]
 8007734:	6879      	ldr	r1, [r7, #4]
 8007736:	4613      	mov	r3, r2
 8007738:	009b      	lsls	r3, r3, #2
 800773a:	4413      	add	r3, r2
 800773c:	009b      	lsls	r3, r3, #2
 800773e:	440b      	add	r3, r1
 8007740:	3318      	adds	r3, #24
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d029      	beq.n	800779c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007748:	78fa      	ldrb	r2, [r7, #3]
 800774a:	6879      	ldr	r1, [r7, #4]
 800774c:	4613      	mov	r3, r2
 800774e:	009b      	lsls	r3, r3, #2
 8007750:	4413      	add	r3, r2
 8007752:	009b      	lsls	r3, r3, #2
 8007754:	440b      	add	r3, r1
 8007756:	3318      	adds	r3, #24
 8007758:	681a      	ldr	r2, [r3, #0]
 800775a:	78f9      	ldrb	r1, [r7, #3]
 800775c:	68f8      	ldr	r0, [r7, #12]
 800775e:	460b      	mov	r3, r1
 8007760:	00db      	lsls	r3, r3, #3
 8007762:	1a5b      	subs	r3, r3, r1
 8007764:	009b      	lsls	r3, r3, #2
 8007766:	4403      	add	r3, r0
 8007768:	3344      	adds	r3, #68	; 0x44
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007770:	fb03 f301 	mul.w	r3, r3, r1
 8007774:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007776:	2b00      	cmp	r3, #0
 8007778:	d110      	bne.n	800779c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800777a:	78fa      	ldrb	r2, [r7, #3]
 800777c:	6879      	ldr	r1, [r7, #4]
 800777e:	4613      	mov	r3, r2
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	4413      	add	r3, r2
 8007784:	009b      	lsls	r3, r3, #2
 8007786:	440b      	add	r3, r1
 8007788:	3318      	adds	r3, #24
 800778a:	2200      	movs	r2, #0
 800778c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800778e:	78f9      	ldrb	r1, [r7, #3]
 8007790:	2300      	movs	r3, #0
 8007792:	2200      	movs	r2, #0
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f00e fdd4 	bl	8016342 <USBD_LL_Transmit>
 800779a:	e015      	b.n	80077c8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	2200      	movs	r2, #0
 80077a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80077aa:	691b      	ldr	r3, [r3, #16]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d00b      	beq.n	80077c8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80077b6:	691b      	ldr	r3, [r3, #16]
 80077b8:	68ba      	ldr	r2, [r7, #8]
 80077ba:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80077be:	68ba      	ldr	r2, [r7, #8]
 80077c0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80077c4:	78fa      	ldrb	r2, [r7, #3]
 80077c6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80077c8:	2300      	movs	r3, #0
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3710      	adds	r7, #16
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}

080077d2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80077d2:	b580      	push	{r7, lr}
 80077d4:	b084      	sub	sp, #16
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	6078      	str	r0, [r7, #4]
 80077da:	460b      	mov	r3, r1
 80077dc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077e4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d101      	bne.n	80077f4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80077f0:	2303      	movs	r3, #3
 80077f2:	e015      	b.n	8007820 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80077f4:	78fb      	ldrb	r3, [r7, #3]
 80077f6:	4619      	mov	r1, r3
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f00e fde4 	bl	80163c6 <USBD_LL_GetRxDataSize>
 80077fe:	4602      	mov	r2, r0
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800780c:	68db      	ldr	r3, [r3, #12]
 800780e:	68fa      	ldr	r2, [r7, #12]
 8007810:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007814:	68fa      	ldr	r2, [r7, #12]
 8007816:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800781a:	4611      	mov	r1, r2
 800781c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800781e:	2300      	movs	r3, #0
}
 8007820:	4618      	mov	r0, r3
 8007822:	3710      	adds	r7, #16
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}

08007828 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b084      	sub	sp, #16
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007836:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d101      	bne.n	8007842 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800783e:	2303      	movs	r3, #3
 8007840:	e01b      	b.n	800787a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007848:	2b00      	cmp	r3, #0
 800784a:	d015      	beq.n	8007878 <USBD_CDC_EP0_RxReady+0x50>
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007852:	2bff      	cmp	r3, #255	; 0xff
 8007854:	d010      	beq.n	8007878 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800785c:	689b      	ldr	r3, [r3, #8]
 800785e:	68fa      	ldr	r2, [r7, #12]
 8007860:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007864:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007866:	68fa      	ldr	r2, [r7, #12]
 8007868:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800786c:	b292      	uxth	r2, r2
 800786e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	22ff      	movs	r2, #255	; 0xff
 8007874:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007878:	2300      	movs	r3, #0
}
 800787a:	4618      	mov	r0, r3
 800787c:	3710      	adds	r7, #16
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}
	...

08007884 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007884:	b480      	push	{r7}
 8007886:	b083      	sub	sp, #12
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2243      	movs	r2, #67	; 0x43
 8007890:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007892:	4b03      	ldr	r3, [pc, #12]	; (80078a0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007894:	4618      	mov	r0, r3
 8007896:	370c      	adds	r7, #12
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr
 80078a0:	20000094 	.word	0x20000094

080078a4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b083      	sub	sp, #12
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2243      	movs	r2, #67	; 0x43
 80078b0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80078b2:	4b03      	ldr	r3, [pc, #12]	; (80078c0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	370c      	adds	r7, #12
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr
 80078c0:	20000050 	.word	0x20000050

080078c4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2243      	movs	r2, #67	; 0x43
 80078d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80078d2:	4b03      	ldr	r3, [pc, #12]	; (80078e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	370c      	adds	r7, #12
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr
 80078e0:	200000d8 	.word	0x200000d8

080078e4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b083      	sub	sp, #12
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	220a      	movs	r2, #10
 80078f0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80078f2:	4b03      	ldr	r3, [pc, #12]	; (8007900 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	370c      	adds	r7, #12
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr
 8007900:	2000000c 	.word	0x2000000c

08007904 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007904:	b480      	push	{r7}
 8007906:	b083      	sub	sp, #12
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
 800790c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d101      	bne.n	8007918 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007914:	2303      	movs	r3, #3
 8007916:	e004      	b.n	8007922 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	683a      	ldr	r2, [r7, #0]
 800791c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007920:	2300      	movs	r3, #0
}
 8007922:	4618      	mov	r0, r3
 8007924:	370c      	adds	r7, #12
 8007926:	46bd      	mov	sp, r7
 8007928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792c:	4770      	bx	lr

0800792e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800792e:	b480      	push	{r7}
 8007930:	b087      	sub	sp, #28
 8007932:	af00      	add	r7, sp, #0
 8007934:	60f8      	str	r0, [r7, #12]
 8007936:	60b9      	str	r1, [r7, #8]
 8007938:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007940:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d101      	bne.n	800794c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007948:	2303      	movs	r3, #3
 800794a:	e008      	b.n	800795e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	68ba      	ldr	r2, [r7, #8]
 8007950:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	687a      	ldr	r2, [r7, #4]
 8007958:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800795c:	2300      	movs	r3, #0
}
 800795e:	4618      	mov	r0, r3
 8007960:	371c      	adds	r7, #28
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr

0800796a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800796a:	b480      	push	{r7}
 800796c:	b085      	sub	sp, #20
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
 8007972:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800797a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d101      	bne.n	8007986 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8007982:	2303      	movs	r3, #3
 8007984:	e004      	b.n	8007990 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	683a      	ldr	r2, [r7, #0]
 800798a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800798e:	2300      	movs	r3, #0
}
 8007990:	4618      	mov	r0, r3
 8007992:	3714      	adds	r7, #20
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr

0800799c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b084      	sub	sp, #16
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079aa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d101      	bne.n	80079ba <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80079b6:	2303      	movs	r3, #3
 80079b8:	e016      	b.n	80079e8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	7c1b      	ldrb	r3, [r3, #16]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d109      	bne.n	80079d6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80079c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079cc:	2101      	movs	r1, #1
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f00e fcd8 	bl	8016384 <USBD_LL_PrepareReceive>
 80079d4:	e007      	b.n	80079e6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80079dc:	2340      	movs	r3, #64	; 0x40
 80079de:	2101      	movs	r1, #1
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f00e fccf 	bl	8016384 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80079e6:	2300      	movs	r3, #0
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3710      	adds	r7, #16
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}

080079f0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b086      	sub	sp, #24
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	60f8      	str	r0, [r7, #12]
 80079f8:	60b9      	str	r1, [r7, #8]
 80079fa:	4613      	mov	r3, r2
 80079fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d101      	bne.n	8007a08 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007a04:	2303      	movs	r3, #3
 8007a06:	e01f      	b.n	8007a48 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2200      	movs	r2, #0
 8007a14:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d003      	beq.n	8007a2e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	68ba      	ldr	r2, [r7, #8]
 8007a2a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2201      	movs	r2, #1
 8007a32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	79fa      	ldrb	r2, [r7, #7]
 8007a3a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007a3c:	68f8      	ldr	r0, [r7, #12]
 8007a3e:	f00e fb4b 	bl	80160d8 <USBD_LL_Init>
 8007a42:	4603      	mov	r3, r0
 8007a44:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007a46:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3718      	adds	r7, #24
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b084      	sub	sp, #16
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d101      	bne.n	8007a68 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007a64:	2303      	movs	r3, #3
 8007a66:	e016      	b.n	8007a96 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	683a      	ldr	r2, [r7, #0]
 8007a6c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d00b      	beq.n	8007a94 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a84:	f107 020e 	add.w	r2, r7, #14
 8007a88:	4610      	mov	r0, r2
 8007a8a:	4798      	blx	r3
 8007a8c:	4602      	mov	r2, r0
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007a94:	2300      	movs	r3, #0
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3710      	adds	r7, #16
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}

08007a9e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007a9e:	b580      	push	{r7, lr}
 8007aa0:	b082      	sub	sp, #8
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f00e fb62 	bl	8016170 <USBD_LL_Start>
 8007aac:	4603      	mov	r3, r0
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3708      	adds	r7, #8
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}

08007ab6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007ab6:	b480      	push	{r7}
 8007ab8:	b083      	sub	sp, #12
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007abe:	2300      	movs	r3, #0
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	370c      	adds	r7, #12
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr

08007acc <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b084      	sub	sp, #16
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	460b      	mov	r3, r1
 8007ad6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007ad8:	2303      	movs	r3, #3
 8007ada:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d009      	beq.n	8007afa <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	78fa      	ldrb	r2, [r7, #3]
 8007af0:	4611      	mov	r1, r2
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	4798      	blx	r3
 8007af6:	4603      	mov	r3, r0
 8007af8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3710      	adds	r7, #16
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b082      	sub	sp, #8
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	460b      	mov	r3, r1
 8007b0e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d007      	beq.n	8007b2a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	78fa      	ldrb	r2, [r7, #3]
 8007b24:	4611      	mov	r1, r2
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	4798      	blx	r3
  }

  return USBD_OK;
 8007b2a:	2300      	movs	r3, #0
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3708      	adds	r7, #8
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b084      	sub	sp, #16
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007b44:	6839      	ldr	r1, [r7, #0]
 8007b46:	4618      	mov	r0, r3
 8007b48:	f000 ff90 	bl	8008a6c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2201      	movs	r2, #1
 8007b50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007b68:	f003 031f 	and.w	r3, r3, #31
 8007b6c:	2b02      	cmp	r3, #2
 8007b6e:	d01a      	beq.n	8007ba6 <USBD_LL_SetupStage+0x72>
 8007b70:	2b02      	cmp	r3, #2
 8007b72:	d822      	bhi.n	8007bba <USBD_LL_SetupStage+0x86>
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d002      	beq.n	8007b7e <USBD_LL_SetupStage+0x4a>
 8007b78:	2b01      	cmp	r3, #1
 8007b7a:	d00a      	beq.n	8007b92 <USBD_LL_SetupStage+0x5e>
 8007b7c:	e01d      	b.n	8007bba <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007b84:	4619      	mov	r1, r3
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f000 fa62 	bl	8008050 <USBD_StdDevReq>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	73fb      	strb	r3, [r7, #15]
      break;
 8007b90:	e020      	b.n	8007bd4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007b98:	4619      	mov	r1, r3
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 fac6 	bl	800812c <USBD_StdItfReq>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	73fb      	strb	r3, [r7, #15]
      break;
 8007ba4:	e016      	b.n	8007bd4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007bac:	4619      	mov	r1, r3
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 fb05 	bl	80081be <USBD_StdEPReq>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	73fb      	strb	r3, [r7, #15]
      break;
 8007bb8:	e00c      	b.n	8007bd4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007bc0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007bc4:	b2db      	uxtb	r3, r3
 8007bc6:	4619      	mov	r1, r3
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f00e fb31 	bl	8016230 <USBD_LL_StallEP>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	73fb      	strb	r3, [r7, #15]
      break;
 8007bd2:	bf00      	nop
  }

  return ret;
 8007bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3710      	adds	r7, #16
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}

08007bde <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007bde:	b580      	push	{r7, lr}
 8007be0:	b086      	sub	sp, #24
 8007be2:	af00      	add	r7, sp, #0
 8007be4:	60f8      	str	r0, [r7, #12]
 8007be6:	460b      	mov	r3, r1
 8007be8:	607a      	str	r2, [r7, #4]
 8007bea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007bec:	7afb      	ldrb	r3, [r7, #11]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d138      	bne.n	8007c64 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007bf8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007c00:	2b03      	cmp	r3, #3
 8007c02:	d14a      	bne.n	8007c9a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	689a      	ldr	r2, [r3, #8]
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	68db      	ldr	r3, [r3, #12]
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d913      	bls.n	8007c38 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	689a      	ldr	r2, [r3, #8]
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	68db      	ldr	r3, [r3, #12]
 8007c18:	1ad2      	subs	r2, r2, r3
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	68da      	ldr	r2, [r3, #12]
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	689b      	ldr	r3, [r3, #8]
 8007c26:	4293      	cmp	r3, r2
 8007c28:	bf28      	it	cs
 8007c2a:	4613      	movcs	r3, r2
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	6879      	ldr	r1, [r7, #4]
 8007c30:	68f8      	ldr	r0, [r7, #12]
 8007c32:	f001 f80f 	bl	8008c54 <USBD_CtlContinueRx>
 8007c36:	e030      	b.n	8007c9a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c3e:	b2db      	uxtb	r3, r3
 8007c40:	2b03      	cmp	r3, #3
 8007c42:	d10b      	bne.n	8007c5c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c4a:	691b      	ldr	r3, [r3, #16]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d005      	beq.n	8007c5c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c56:	691b      	ldr	r3, [r3, #16]
 8007c58:	68f8      	ldr	r0, [r7, #12]
 8007c5a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007c5c:	68f8      	ldr	r0, [r7, #12]
 8007c5e:	f001 f80a 	bl	8008c76 <USBD_CtlSendStatus>
 8007c62:	e01a      	b.n	8007c9a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c6a:	b2db      	uxtb	r3, r3
 8007c6c:	2b03      	cmp	r3, #3
 8007c6e:	d114      	bne.n	8007c9a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c76:	699b      	ldr	r3, [r3, #24]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d00e      	beq.n	8007c9a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c82:	699b      	ldr	r3, [r3, #24]
 8007c84:	7afa      	ldrb	r2, [r7, #11]
 8007c86:	4611      	mov	r1, r2
 8007c88:	68f8      	ldr	r0, [r7, #12]
 8007c8a:	4798      	blx	r3
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007c90:	7dfb      	ldrb	r3, [r7, #23]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d001      	beq.n	8007c9a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007c96:	7dfb      	ldrb	r3, [r7, #23]
 8007c98:	e000      	b.n	8007c9c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007c9a:	2300      	movs	r3, #0
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3718      	adds	r7, #24
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}

08007ca4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b086      	sub	sp, #24
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	460b      	mov	r3, r1
 8007cae:	607a      	str	r2, [r7, #4]
 8007cb0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007cb2:	7afb      	ldrb	r3, [r7, #11]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d16b      	bne.n	8007d90 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	3314      	adds	r3, #20
 8007cbc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007cc4:	2b02      	cmp	r3, #2
 8007cc6:	d156      	bne.n	8007d76 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	689a      	ldr	r2, [r3, #8]
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	68db      	ldr	r3, [r3, #12]
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	d914      	bls.n	8007cfe <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	689a      	ldr	r2, [r3, #8]
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	68db      	ldr	r3, [r3, #12]
 8007cdc:	1ad2      	subs	r2, r2, r3
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	689b      	ldr	r3, [r3, #8]
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	6879      	ldr	r1, [r7, #4]
 8007cea:	68f8      	ldr	r0, [r7, #12]
 8007cec:	f000 ff84 	bl	8008bf8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	2100      	movs	r1, #0
 8007cf6:	68f8      	ldr	r0, [r7, #12]
 8007cf8:	f00e fb44 	bl	8016384 <USBD_LL_PrepareReceive>
 8007cfc:	e03b      	b.n	8007d76 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	68da      	ldr	r2, [r3, #12]
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	689b      	ldr	r3, [r3, #8]
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d11c      	bne.n	8007d44 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	685a      	ldr	r2, [r3, #4]
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d316      	bcc.n	8007d44 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	685a      	ldr	r2, [r3, #4]
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d20f      	bcs.n	8007d44 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007d24:	2200      	movs	r2, #0
 8007d26:	2100      	movs	r1, #0
 8007d28:	68f8      	ldr	r0, [r7, #12]
 8007d2a:	f000 ff65 	bl	8008bf8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2200      	movs	r2, #0
 8007d32:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d36:	2300      	movs	r3, #0
 8007d38:	2200      	movs	r2, #0
 8007d3a:	2100      	movs	r1, #0
 8007d3c:	68f8      	ldr	r0, [r7, #12]
 8007d3e:	f00e fb21 	bl	8016384 <USBD_LL_PrepareReceive>
 8007d42:	e018      	b.n	8007d76 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	2b03      	cmp	r3, #3
 8007d4e:	d10b      	bne.n	8007d68 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d56:	68db      	ldr	r3, [r3, #12]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d005      	beq.n	8007d68 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d62:	68db      	ldr	r3, [r3, #12]
 8007d64:	68f8      	ldr	r0, [r7, #12]
 8007d66:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d68:	2180      	movs	r1, #128	; 0x80
 8007d6a:	68f8      	ldr	r0, [r7, #12]
 8007d6c:	f00e fa60 	bl	8016230 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007d70:	68f8      	ldr	r0, [r7, #12]
 8007d72:	f000 ff93 	bl	8008c9c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d122      	bne.n	8007dc6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007d80:	68f8      	ldr	r0, [r7, #12]
 8007d82:	f7ff fe98 	bl	8007ab6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007d8e:	e01a      	b.n	8007dc6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d96:	b2db      	uxtb	r3, r3
 8007d98:	2b03      	cmp	r3, #3
 8007d9a:	d114      	bne.n	8007dc6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007da2:	695b      	ldr	r3, [r3, #20]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d00e      	beq.n	8007dc6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dae:	695b      	ldr	r3, [r3, #20]
 8007db0:	7afa      	ldrb	r2, [r7, #11]
 8007db2:	4611      	mov	r1, r2
 8007db4:	68f8      	ldr	r0, [r7, #12]
 8007db6:	4798      	blx	r3
 8007db8:	4603      	mov	r3, r0
 8007dba:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007dbc:	7dfb      	ldrb	r3, [r7, #23]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d001      	beq.n	8007dc6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007dc2:	7dfb      	ldrb	r3, [r7, #23]
 8007dc4:	e000      	b.n	8007dc8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007dc6:	2300      	movs	r3, #0
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3718      	adds	r7, #24
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b082      	sub	sp, #8
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2201      	movs	r2, #1
 8007ddc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2200      	movs	r2, #0
 8007de4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2200      	movs	r2, #0
 8007df2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d101      	bne.n	8007e04 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007e00:	2303      	movs	r3, #3
 8007e02:	e02f      	b.n	8007e64 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d00f      	beq.n	8007e2e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d009      	beq.n	8007e2e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	687a      	ldr	r2, [r7, #4]
 8007e24:	6852      	ldr	r2, [r2, #4]
 8007e26:	b2d2      	uxtb	r2, r2
 8007e28:	4611      	mov	r1, r2
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007e2e:	2340      	movs	r3, #64	; 0x40
 8007e30:	2200      	movs	r2, #0
 8007e32:	2100      	movs	r1, #0
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f00e f9b6 	bl	80161a6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2240      	movs	r2, #64	; 0x40
 8007e46:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007e4a:	2340      	movs	r3, #64	; 0x40
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	2180      	movs	r1, #128	; 0x80
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f00e f9a8 	bl	80161a6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2201      	movs	r2, #1
 8007e5a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2240      	movs	r2, #64	; 0x40
 8007e60:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007e62:	2300      	movs	r3, #0
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3708      	adds	r7, #8
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b083      	sub	sp, #12
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	460b      	mov	r3, r1
 8007e76:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	78fa      	ldrb	r2, [r7, #3]
 8007e7c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007e7e:	2300      	movs	r3, #0
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	370c      	adds	r7, #12
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr

08007e8c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b083      	sub	sp, #12
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e9a:	b2da      	uxtb	r2, r3
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2204      	movs	r2, #4
 8007ea6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007eaa:	2300      	movs	r3, #0
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	370c      	adds	r7, #12
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr

08007eb8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b083      	sub	sp, #12
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ec6:	b2db      	uxtb	r3, r3
 8007ec8:	2b04      	cmp	r3, #4
 8007eca:	d106      	bne.n	8007eda <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007ed2:	b2da      	uxtb	r2, r3
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007eda:	2300      	movs	r3, #0
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	370c      	adds	r7, #12
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee6:	4770      	bx	lr

08007ee8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b082      	sub	sp, #8
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d101      	bne.n	8007efe <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007efa:	2303      	movs	r3, #3
 8007efc:	e012      	b.n	8007f24 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f04:	b2db      	uxtb	r3, r3
 8007f06:	2b03      	cmp	r3, #3
 8007f08:	d10b      	bne.n	8007f22 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f10:	69db      	ldr	r3, [r3, #28]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d005      	beq.n	8007f22 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f1c:	69db      	ldr	r3, [r3, #28]
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007f22:	2300      	movs	r3, #0
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3708      	adds	r7, #8
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b082      	sub	sp, #8
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	460b      	mov	r3, r1
 8007f36:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d101      	bne.n	8007f46 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007f42:	2303      	movs	r3, #3
 8007f44:	e014      	b.n	8007f70 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f4c:	b2db      	uxtb	r3, r3
 8007f4e:	2b03      	cmp	r3, #3
 8007f50:	d10d      	bne.n	8007f6e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f58:	6a1b      	ldr	r3, [r3, #32]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d007      	beq.n	8007f6e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f64:	6a1b      	ldr	r3, [r3, #32]
 8007f66:	78fa      	ldrb	r2, [r7, #3]
 8007f68:	4611      	mov	r1, r2
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007f6e:	2300      	movs	r3, #0
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3708      	adds	r7, #8
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b082      	sub	sp, #8
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	460b      	mov	r3, r1
 8007f82:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d101      	bne.n	8007f92 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007f8e:	2303      	movs	r3, #3
 8007f90:	e014      	b.n	8007fbc <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f98:	b2db      	uxtb	r3, r3
 8007f9a:	2b03      	cmp	r3, #3
 8007f9c:	d10d      	bne.n	8007fba <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d007      	beq.n	8007fba <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb2:	78fa      	ldrb	r2, [r7, #3]
 8007fb4:	4611      	mov	r1, r2
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007fba:	2300      	movs	r3, #0
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	3708      	adds	r7, #8
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b083      	sub	sp, #12
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007fcc:	2300      	movs	r3, #0
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	370c      	adds	r7, #12
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd8:	4770      	bx	lr

08007fda <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007fda:	b580      	push	{r7, lr}
 8007fdc:	b082      	sub	sp, #8
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d009      	beq.n	8008008 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	687a      	ldr	r2, [r7, #4]
 8007ffe:	6852      	ldr	r2, [r2, #4]
 8008000:	b2d2      	uxtb	r2, r2
 8008002:	4611      	mov	r1, r2
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	4798      	blx	r3
  }

  return USBD_OK;
 8008008:	2300      	movs	r3, #0
}
 800800a:	4618      	mov	r0, r3
 800800c:	3708      	adds	r7, #8
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}

08008012 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008012:	b480      	push	{r7}
 8008014:	b087      	sub	sp, #28
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	781b      	ldrb	r3, [r3, #0]
 8008022:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	3301      	adds	r3, #1
 8008028:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	781b      	ldrb	r3, [r3, #0]
 800802e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008030:	8a3b      	ldrh	r3, [r7, #16]
 8008032:	021b      	lsls	r3, r3, #8
 8008034:	b21a      	sxth	r2, r3
 8008036:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800803a:	4313      	orrs	r3, r2
 800803c:	b21b      	sxth	r3, r3
 800803e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008040:	89fb      	ldrh	r3, [r7, #14]
}
 8008042:	4618      	mov	r0, r3
 8008044:	371c      	adds	r7, #28
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr
	...

08008050 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b084      	sub	sp, #16
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800805a:	2300      	movs	r3, #0
 800805c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008066:	2b40      	cmp	r3, #64	; 0x40
 8008068:	d005      	beq.n	8008076 <USBD_StdDevReq+0x26>
 800806a:	2b40      	cmp	r3, #64	; 0x40
 800806c:	d853      	bhi.n	8008116 <USBD_StdDevReq+0xc6>
 800806e:	2b00      	cmp	r3, #0
 8008070:	d00b      	beq.n	800808a <USBD_StdDevReq+0x3a>
 8008072:	2b20      	cmp	r3, #32
 8008074:	d14f      	bne.n	8008116 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800807c:	689b      	ldr	r3, [r3, #8]
 800807e:	6839      	ldr	r1, [r7, #0]
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	4798      	blx	r3
 8008084:	4603      	mov	r3, r0
 8008086:	73fb      	strb	r3, [r7, #15]
      break;
 8008088:	e04a      	b.n	8008120 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	785b      	ldrb	r3, [r3, #1]
 800808e:	2b09      	cmp	r3, #9
 8008090:	d83b      	bhi.n	800810a <USBD_StdDevReq+0xba>
 8008092:	a201      	add	r2, pc, #4	; (adr r2, 8008098 <USBD_StdDevReq+0x48>)
 8008094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008098:	080080ed 	.word	0x080080ed
 800809c:	08008101 	.word	0x08008101
 80080a0:	0800810b 	.word	0x0800810b
 80080a4:	080080f7 	.word	0x080080f7
 80080a8:	0800810b 	.word	0x0800810b
 80080ac:	080080cb 	.word	0x080080cb
 80080b0:	080080c1 	.word	0x080080c1
 80080b4:	0800810b 	.word	0x0800810b
 80080b8:	080080e3 	.word	0x080080e3
 80080bc:	080080d5 	.word	0x080080d5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80080c0:	6839      	ldr	r1, [r7, #0]
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 f9de 	bl	8008484 <USBD_GetDescriptor>
          break;
 80080c8:	e024      	b.n	8008114 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80080ca:	6839      	ldr	r1, [r7, #0]
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 fb43 	bl	8008758 <USBD_SetAddress>
          break;
 80080d2:	e01f      	b.n	8008114 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80080d4:	6839      	ldr	r1, [r7, #0]
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f000 fb82 	bl	80087e0 <USBD_SetConfig>
 80080dc:	4603      	mov	r3, r0
 80080de:	73fb      	strb	r3, [r7, #15]
          break;
 80080e0:	e018      	b.n	8008114 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80080e2:	6839      	ldr	r1, [r7, #0]
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f000 fc21 	bl	800892c <USBD_GetConfig>
          break;
 80080ea:	e013      	b.n	8008114 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80080ec:	6839      	ldr	r1, [r7, #0]
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 fc52 	bl	8008998 <USBD_GetStatus>
          break;
 80080f4:	e00e      	b.n	8008114 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80080f6:	6839      	ldr	r1, [r7, #0]
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f000 fc81 	bl	8008a00 <USBD_SetFeature>
          break;
 80080fe:	e009      	b.n	8008114 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008100:	6839      	ldr	r1, [r7, #0]
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 fc90 	bl	8008a28 <USBD_ClrFeature>
          break;
 8008108:	e004      	b.n	8008114 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800810a:	6839      	ldr	r1, [r7, #0]
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f000 fce7 	bl	8008ae0 <USBD_CtlError>
          break;
 8008112:	bf00      	nop
      }
      break;
 8008114:	e004      	b.n	8008120 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008116:	6839      	ldr	r1, [r7, #0]
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 fce1 	bl	8008ae0 <USBD_CtlError>
      break;
 800811e:	bf00      	nop
  }

  return ret;
 8008120:	7bfb      	ldrb	r3, [r7, #15]
}
 8008122:	4618      	mov	r0, r3
 8008124:	3710      	adds	r7, #16
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
 800812a:	bf00      	nop

0800812c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b084      	sub	sp, #16
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008136:	2300      	movs	r3, #0
 8008138:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	781b      	ldrb	r3, [r3, #0]
 800813e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008142:	2b40      	cmp	r3, #64	; 0x40
 8008144:	d005      	beq.n	8008152 <USBD_StdItfReq+0x26>
 8008146:	2b40      	cmp	r3, #64	; 0x40
 8008148:	d82f      	bhi.n	80081aa <USBD_StdItfReq+0x7e>
 800814a:	2b00      	cmp	r3, #0
 800814c:	d001      	beq.n	8008152 <USBD_StdItfReq+0x26>
 800814e:	2b20      	cmp	r3, #32
 8008150:	d12b      	bne.n	80081aa <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008158:	b2db      	uxtb	r3, r3
 800815a:	3b01      	subs	r3, #1
 800815c:	2b02      	cmp	r3, #2
 800815e:	d81d      	bhi.n	800819c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	889b      	ldrh	r3, [r3, #4]
 8008164:	b2db      	uxtb	r3, r3
 8008166:	2b01      	cmp	r3, #1
 8008168:	d813      	bhi.n	8008192 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008170:	689b      	ldr	r3, [r3, #8]
 8008172:	6839      	ldr	r1, [r7, #0]
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	4798      	blx	r3
 8008178:	4603      	mov	r3, r0
 800817a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	88db      	ldrh	r3, [r3, #6]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d110      	bne.n	80081a6 <USBD_StdItfReq+0x7a>
 8008184:	7bfb      	ldrb	r3, [r7, #15]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d10d      	bne.n	80081a6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 fd73 	bl	8008c76 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008190:	e009      	b.n	80081a6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008192:	6839      	ldr	r1, [r7, #0]
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f000 fca3 	bl	8008ae0 <USBD_CtlError>
          break;
 800819a:	e004      	b.n	80081a6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800819c:	6839      	ldr	r1, [r7, #0]
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f000 fc9e 	bl	8008ae0 <USBD_CtlError>
          break;
 80081a4:	e000      	b.n	80081a8 <USBD_StdItfReq+0x7c>
          break;
 80081a6:	bf00      	nop
      }
      break;
 80081a8:	e004      	b.n	80081b4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80081aa:	6839      	ldr	r1, [r7, #0]
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f000 fc97 	bl	8008ae0 <USBD_CtlError>
      break;
 80081b2:	bf00      	nop
  }

  return ret;
 80081b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3710      	adds	r7, #16
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}

080081be <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081be:	b580      	push	{r7, lr}
 80081c0:	b084      	sub	sp, #16
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	6078      	str	r0, [r7, #4]
 80081c6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80081c8:	2300      	movs	r3, #0
 80081ca:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	889b      	ldrh	r3, [r3, #4]
 80081d0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	781b      	ldrb	r3, [r3, #0]
 80081d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80081da:	2b40      	cmp	r3, #64	; 0x40
 80081dc:	d007      	beq.n	80081ee <USBD_StdEPReq+0x30>
 80081de:	2b40      	cmp	r3, #64	; 0x40
 80081e0:	f200 8145 	bhi.w	800846e <USBD_StdEPReq+0x2b0>
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d00c      	beq.n	8008202 <USBD_StdEPReq+0x44>
 80081e8:	2b20      	cmp	r3, #32
 80081ea:	f040 8140 	bne.w	800846e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081f4:	689b      	ldr	r3, [r3, #8]
 80081f6:	6839      	ldr	r1, [r7, #0]
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	4798      	blx	r3
 80081fc:	4603      	mov	r3, r0
 80081fe:	73fb      	strb	r3, [r7, #15]
      break;
 8008200:	e13a      	b.n	8008478 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	785b      	ldrb	r3, [r3, #1]
 8008206:	2b03      	cmp	r3, #3
 8008208:	d007      	beq.n	800821a <USBD_StdEPReq+0x5c>
 800820a:	2b03      	cmp	r3, #3
 800820c:	f300 8129 	bgt.w	8008462 <USBD_StdEPReq+0x2a4>
 8008210:	2b00      	cmp	r3, #0
 8008212:	d07f      	beq.n	8008314 <USBD_StdEPReq+0x156>
 8008214:	2b01      	cmp	r3, #1
 8008216:	d03c      	beq.n	8008292 <USBD_StdEPReq+0xd4>
 8008218:	e123      	b.n	8008462 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008220:	b2db      	uxtb	r3, r3
 8008222:	2b02      	cmp	r3, #2
 8008224:	d002      	beq.n	800822c <USBD_StdEPReq+0x6e>
 8008226:	2b03      	cmp	r3, #3
 8008228:	d016      	beq.n	8008258 <USBD_StdEPReq+0x9a>
 800822a:	e02c      	b.n	8008286 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800822c:	7bbb      	ldrb	r3, [r7, #14]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d00d      	beq.n	800824e <USBD_StdEPReq+0x90>
 8008232:	7bbb      	ldrb	r3, [r7, #14]
 8008234:	2b80      	cmp	r3, #128	; 0x80
 8008236:	d00a      	beq.n	800824e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008238:	7bbb      	ldrb	r3, [r7, #14]
 800823a:	4619      	mov	r1, r3
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f00d fff7 	bl	8016230 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008242:	2180      	movs	r1, #128	; 0x80
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f00d fff3 	bl	8016230 <USBD_LL_StallEP>
 800824a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800824c:	e020      	b.n	8008290 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800824e:	6839      	ldr	r1, [r7, #0]
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f000 fc45 	bl	8008ae0 <USBD_CtlError>
              break;
 8008256:	e01b      	b.n	8008290 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	885b      	ldrh	r3, [r3, #2]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d10e      	bne.n	800827e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008260:	7bbb      	ldrb	r3, [r7, #14]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d00b      	beq.n	800827e <USBD_StdEPReq+0xc0>
 8008266:	7bbb      	ldrb	r3, [r7, #14]
 8008268:	2b80      	cmp	r3, #128	; 0x80
 800826a:	d008      	beq.n	800827e <USBD_StdEPReq+0xc0>
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	88db      	ldrh	r3, [r3, #6]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d104      	bne.n	800827e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008274:	7bbb      	ldrb	r3, [r7, #14]
 8008276:	4619      	mov	r1, r3
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f00d ffd9 	bl	8016230 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 fcf9 	bl	8008c76 <USBD_CtlSendStatus>

              break;
 8008284:	e004      	b.n	8008290 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008286:	6839      	ldr	r1, [r7, #0]
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f000 fc29 	bl	8008ae0 <USBD_CtlError>
              break;
 800828e:	bf00      	nop
          }
          break;
 8008290:	e0ec      	b.n	800846c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008298:	b2db      	uxtb	r3, r3
 800829a:	2b02      	cmp	r3, #2
 800829c:	d002      	beq.n	80082a4 <USBD_StdEPReq+0xe6>
 800829e:	2b03      	cmp	r3, #3
 80082a0:	d016      	beq.n	80082d0 <USBD_StdEPReq+0x112>
 80082a2:	e030      	b.n	8008306 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80082a4:	7bbb      	ldrb	r3, [r7, #14]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d00d      	beq.n	80082c6 <USBD_StdEPReq+0x108>
 80082aa:	7bbb      	ldrb	r3, [r7, #14]
 80082ac:	2b80      	cmp	r3, #128	; 0x80
 80082ae:	d00a      	beq.n	80082c6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80082b0:	7bbb      	ldrb	r3, [r7, #14]
 80082b2:	4619      	mov	r1, r3
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f00d ffbb 	bl	8016230 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80082ba:	2180      	movs	r1, #128	; 0x80
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f00d ffb7 	bl	8016230 <USBD_LL_StallEP>
 80082c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80082c4:	e025      	b.n	8008312 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80082c6:	6839      	ldr	r1, [r7, #0]
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 fc09 	bl	8008ae0 <USBD_CtlError>
              break;
 80082ce:	e020      	b.n	8008312 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	885b      	ldrh	r3, [r3, #2]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d11b      	bne.n	8008310 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80082d8:	7bbb      	ldrb	r3, [r7, #14]
 80082da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d004      	beq.n	80082ec <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80082e2:	7bbb      	ldrb	r3, [r7, #14]
 80082e4:	4619      	mov	r1, r3
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f00d ffc1 	bl	801626e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f000 fcc2 	bl	8008c76 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082f8:	689b      	ldr	r3, [r3, #8]
 80082fa:	6839      	ldr	r1, [r7, #0]
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	4798      	blx	r3
 8008300:	4603      	mov	r3, r0
 8008302:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008304:	e004      	b.n	8008310 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8008306:	6839      	ldr	r1, [r7, #0]
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f000 fbe9 	bl	8008ae0 <USBD_CtlError>
              break;
 800830e:	e000      	b.n	8008312 <USBD_StdEPReq+0x154>
              break;
 8008310:	bf00      	nop
          }
          break;
 8008312:	e0ab      	b.n	800846c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800831a:	b2db      	uxtb	r3, r3
 800831c:	2b02      	cmp	r3, #2
 800831e:	d002      	beq.n	8008326 <USBD_StdEPReq+0x168>
 8008320:	2b03      	cmp	r3, #3
 8008322:	d032      	beq.n	800838a <USBD_StdEPReq+0x1cc>
 8008324:	e097      	b.n	8008456 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008326:	7bbb      	ldrb	r3, [r7, #14]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d007      	beq.n	800833c <USBD_StdEPReq+0x17e>
 800832c:	7bbb      	ldrb	r3, [r7, #14]
 800832e:	2b80      	cmp	r3, #128	; 0x80
 8008330:	d004      	beq.n	800833c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8008332:	6839      	ldr	r1, [r7, #0]
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f000 fbd3 	bl	8008ae0 <USBD_CtlError>
                break;
 800833a:	e091      	b.n	8008460 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800833c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008340:	2b00      	cmp	r3, #0
 8008342:	da0b      	bge.n	800835c <USBD_StdEPReq+0x19e>
 8008344:	7bbb      	ldrb	r3, [r7, #14]
 8008346:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800834a:	4613      	mov	r3, r2
 800834c:	009b      	lsls	r3, r3, #2
 800834e:	4413      	add	r3, r2
 8008350:	009b      	lsls	r3, r3, #2
 8008352:	3310      	adds	r3, #16
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	4413      	add	r3, r2
 8008358:	3304      	adds	r3, #4
 800835a:	e00b      	b.n	8008374 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800835c:	7bbb      	ldrb	r3, [r7, #14]
 800835e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008362:	4613      	mov	r3, r2
 8008364:	009b      	lsls	r3, r3, #2
 8008366:	4413      	add	r3, r2
 8008368:	009b      	lsls	r3, r3, #2
 800836a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	4413      	add	r3, r2
 8008372:	3304      	adds	r3, #4
 8008374:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	2200      	movs	r2, #0
 800837a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	2202      	movs	r2, #2
 8008380:	4619      	mov	r1, r3
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 fc1d 	bl	8008bc2 <USBD_CtlSendData>
              break;
 8008388:	e06a      	b.n	8008460 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800838a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800838e:	2b00      	cmp	r3, #0
 8008390:	da11      	bge.n	80083b6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008392:	7bbb      	ldrb	r3, [r7, #14]
 8008394:	f003 020f 	and.w	r2, r3, #15
 8008398:	6879      	ldr	r1, [r7, #4]
 800839a:	4613      	mov	r3, r2
 800839c:	009b      	lsls	r3, r3, #2
 800839e:	4413      	add	r3, r2
 80083a0:	009b      	lsls	r3, r3, #2
 80083a2:	440b      	add	r3, r1
 80083a4:	3324      	adds	r3, #36	; 0x24
 80083a6:	881b      	ldrh	r3, [r3, #0]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d117      	bne.n	80083dc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80083ac:	6839      	ldr	r1, [r7, #0]
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 fb96 	bl	8008ae0 <USBD_CtlError>
                  break;
 80083b4:	e054      	b.n	8008460 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80083b6:	7bbb      	ldrb	r3, [r7, #14]
 80083b8:	f003 020f 	and.w	r2, r3, #15
 80083bc:	6879      	ldr	r1, [r7, #4]
 80083be:	4613      	mov	r3, r2
 80083c0:	009b      	lsls	r3, r3, #2
 80083c2:	4413      	add	r3, r2
 80083c4:	009b      	lsls	r3, r3, #2
 80083c6:	440b      	add	r3, r1
 80083c8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80083cc:	881b      	ldrh	r3, [r3, #0]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d104      	bne.n	80083dc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80083d2:	6839      	ldr	r1, [r7, #0]
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f000 fb83 	bl	8008ae0 <USBD_CtlError>
                  break;
 80083da:	e041      	b.n	8008460 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	da0b      	bge.n	80083fc <USBD_StdEPReq+0x23e>
 80083e4:	7bbb      	ldrb	r3, [r7, #14]
 80083e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083ea:	4613      	mov	r3, r2
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	4413      	add	r3, r2
 80083f0:	009b      	lsls	r3, r3, #2
 80083f2:	3310      	adds	r3, #16
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	4413      	add	r3, r2
 80083f8:	3304      	adds	r3, #4
 80083fa:	e00b      	b.n	8008414 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80083fc:	7bbb      	ldrb	r3, [r7, #14]
 80083fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008402:	4613      	mov	r3, r2
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	4413      	add	r3, r2
 8008408:	009b      	lsls	r3, r3, #2
 800840a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800840e:	687a      	ldr	r2, [r7, #4]
 8008410:	4413      	add	r3, r2
 8008412:	3304      	adds	r3, #4
 8008414:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008416:	7bbb      	ldrb	r3, [r7, #14]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d002      	beq.n	8008422 <USBD_StdEPReq+0x264>
 800841c:	7bbb      	ldrb	r3, [r7, #14]
 800841e:	2b80      	cmp	r3, #128	; 0x80
 8008420:	d103      	bne.n	800842a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	2200      	movs	r2, #0
 8008426:	601a      	str	r2, [r3, #0]
 8008428:	e00e      	b.n	8008448 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800842a:	7bbb      	ldrb	r3, [r7, #14]
 800842c:	4619      	mov	r1, r3
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f00d ff3c 	bl	80162ac <USBD_LL_IsStallEP>
 8008434:	4603      	mov	r3, r0
 8008436:	2b00      	cmp	r3, #0
 8008438:	d003      	beq.n	8008442 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	2201      	movs	r2, #1
 800843e:	601a      	str	r2, [r3, #0]
 8008440:	e002      	b.n	8008448 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	2200      	movs	r2, #0
 8008446:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	2202      	movs	r2, #2
 800844c:	4619      	mov	r1, r3
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 fbb7 	bl	8008bc2 <USBD_CtlSendData>
              break;
 8008454:	e004      	b.n	8008460 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008456:	6839      	ldr	r1, [r7, #0]
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f000 fb41 	bl	8008ae0 <USBD_CtlError>
              break;
 800845e:	bf00      	nop
          }
          break;
 8008460:	e004      	b.n	800846c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8008462:	6839      	ldr	r1, [r7, #0]
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f000 fb3b 	bl	8008ae0 <USBD_CtlError>
          break;
 800846a:	bf00      	nop
      }
      break;
 800846c:	e004      	b.n	8008478 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800846e:	6839      	ldr	r1, [r7, #0]
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f000 fb35 	bl	8008ae0 <USBD_CtlError>
      break;
 8008476:	bf00      	nop
  }

  return ret;
 8008478:	7bfb      	ldrb	r3, [r7, #15]
}
 800847a:	4618      	mov	r0, r3
 800847c:	3710      	adds	r7, #16
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}
	...

08008484 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b084      	sub	sp, #16
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800848e:	2300      	movs	r3, #0
 8008490:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008492:	2300      	movs	r3, #0
 8008494:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008496:	2300      	movs	r3, #0
 8008498:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	885b      	ldrh	r3, [r3, #2]
 800849e:	0a1b      	lsrs	r3, r3, #8
 80084a0:	b29b      	uxth	r3, r3
 80084a2:	3b01      	subs	r3, #1
 80084a4:	2b06      	cmp	r3, #6
 80084a6:	f200 8128 	bhi.w	80086fa <USBD_GetDescriptor+0x276>
 80084aa:	a201      	add	r2, pc, #4	; (adr r2, 80084b0 <USBD_GetDescriptor+0x2c>)
 80084ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084b0:	080084cd 	.word	0x080084cd
 80084b4:	080084e5 	.word	0x080084e5
 80084b8:	08008525 	.word	0x08008525
 80084bc:	080086fb 	.word	0x080086fb
 80084c0:	080086fb 	.word	0x080086fb
 80084c4:	0800869b 	.word	0x0800869b
 80084c8:	080086c7 	.word	0x080086c7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	687a      	ldr	r2, [r7, #4]
 80084d6:	7c12      	ldrb	r2, [r2, #16]
 80084d8:	f107 0108 	add.w	r1, r7, #8
 80084dc:	4610      	mov	r0, r2
 80084de:	4798      	blx	r3
 80084e0:	60f8      	str	r0, [r7, #12]
      break;
 80084e2:	e112      	b.n	800870a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	7c1b      	ldrb	r3, [r3, #16]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d10d      	bne.n	8008508 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084f4:	f107 0208 	add.w	r2, r7, #8
 80084f8:	4610      	mov	r0, r2
 80084fa:	4798      	blx	r3
 80084fc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	3301      	adds	r3, #1
 8008502:	2202      	movs	r2, #2
 8008504:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008506:	e100      	b.n	800870a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800850e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008510:	f107 0208 	add.w	r2, r7, #8
 8008514:	4610      	mov	r0, r2
 8008516:	4798      	blx	r3
 8008518:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	3301      	adds	r3, #1
 800851e:	2202      	movs	r2, #2
 8008520:	701a      	strb	r2, [r3, #0]
      break;
 8008522:	e0f2      	b.n	800870a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	885b      	ldrh	r3, [r3, #2]
 8008528:	b2db      	uxtb	r3, r3
 800852a:	2b05      	cmp	r3, #5
 800852c:	f200 80ac 	bhi.w	8008688 <USBD_GetDescriptor+0x204>
 8008530:	a201      	add	r2, pc, #4	; (adr r2, 8008538 <USBD_GetDescriptor+0xb4>)
 8008532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008536:	bf00      	nop
 8008538:	08008551 	.word	0x08008551
 800853c:	08008585 	.word	0x08008585
 8008540:	080085b9 	.word	0x080085b9
 8008544:	080085ed 	.word	0x080085ed
 8008548:	08008621 	.word	0x08008621
 800854c:	08008655 	.word	0x08008655
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d00b      	beq.n	8008574 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008562:	685b      	ldr	r3, [r3, #4]
 8008564:	687a      	ldr	r2, [r7, #4]
 8008566:	7c12      	ldrb	r2, [r2, #16]
 8008568:	f107 0108 	add.w	r1, r7, #8
 800856c:	4610      	mov	r0, r2
 800856e:	4798      	blx	r3
 8008570:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008572:	e091      	b.n	8008698 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008574:	6839      	ldr	r1, [r7, #0]
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 fab2 	bl	8008ae0 <USBD_CtlError>
            err++;
 800857c:	7afb      	ldrb	r3, [r7, #11]
 800857e:	3301      	adds	r3, #1
 8008580:	72fb      	strb	r3, [r7, #11]
          break;
 8008582:	e089      	b.n	8008698 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800858a:	689b      	ldr	r3, [r3, #8]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d00b      	beq.n	80085a8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008596:	689b      	ldr	r3, [r3, #8]
 8008598:	687a      	ldr	r2, [r7, #4]
 800859a:	7c12      	ldrb	r2, [r2, #16]
 800859c:	f107 0108 	add.w	r1, r7, #8
 80085a0:	4610      	mov	r0, r2
 80085a2:	4798      	blx	r3
 80085a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085a6:	e077      	b.n	8008698 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085a8:	6839      	ldr	r1, [r7, #0]
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f000 fa98 	bl	8008ae0 <USBD_CtlError>
            err++;
 80085b0:	7afb      	ldrb	r3, [r7, #11]
 80085b2:	3301      	adds	r3, #1
 80085b4:	72fb      	strb	r3, [r7, #11]
          break;
 80085b6:	e06f      	b.n	8008698 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085be:	68db      	ldr	r3, [r3, #12]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d00b      	beq.n	80085dc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085ca:	68db      	ldr	r3, [r3, #12]
 80085cc:	687a      	ldr	r2, [r7, #4]
 80085ce:	7c12      	ldrb	r2, [r2, #16]
 80085d0:	f107 0108 	add.w	r1, r7, #8
 80085d4:	4610      	mov	r0, r2
 80085d6:	4798      	blx	r3
 80085d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085da:	e05d      	b.n	8008698 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085dc:	6839      	ldr	r1, [r7, #0]
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 fa7e 	bl	8008ae0 <USBD_CtlError>
            err++;
 80085e4:	7afb      	ldrb	r3, [r7, #11]
 80085e6:	3301      	adds	r3, #1
 80085e8:	72fb      	strb	r3, [r7, #11]
          break;
 80085ea:	e055      	b.n	8008698 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085f2:	691b      	ldr	r3, [r3, #16]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d00b      	beq.n	8008610 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085fe:	691b      	ldr	r3, [r3, #16]
 8008600:	687a      	ldr	r2, [r7, #4]
 8008602:	7c12      	ldrb	r2, [r2, #16]
 8008604:	f107 0108 	add.w	r1, r7, #8
 8008608:	4610      	mov	r0, r2
 800860a:	4798      	blx	r3
 800860c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800860e:	e043      	b.n	8008698 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008610:	6839      	ldr	r1, [r7, #0]
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 fa64 	bl	8008ae0 <USBD_CtlError>
            err++;
 8008618:	7afb      	ldrb	r3, [r7, #11]
 800861a:	3301      	adds	r3, #1
 800861c:	72fb      	strb	r3, [r7, #11]
          break;
 800861e:	e03b      	b.n	8008698 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008626:	695b      	ldr	r3, [r3, #20]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d00b      	beq.n	8008644 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008632:	695b      	ldr	r3, [r3, #20]
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	7c12      	ldrb	r2, [r2, #16]
 8008638:	f107 0108 	add.w	r1, r7, #8
 800863c:	4610      	mov	r0, r2
 800863e:	4798      	blx	r3
 8008640:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008642:	e029      	b.n	8008698 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008644:	6839      	ldr	r1, [r7, #0]
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 fa4a 	bl	8008ae0 <USBD_CtlError>
            err++;
 800864c:	7afb      	ldrb	r3, [r7, #11]
 800864e:	3301      	adds	r3, #1
 8008650:	72fb      	strb	r3, [r7, #11]
          break;
 8008652:	e021      	b.n	8008698 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800865a:	699b      	ldr	r3, [r3, #24]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d00b      	beq.n	8008678 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008666:	699b      	ldr	r3, [r3, #24]
 8008668:	687a      	ldr	r2, [r7, #4]
 800866a:	7c12      	ldrb	r2, [r2, #16]
 800866c:	f107 0108 	add.w	r1, r7, #8
 8008670:	4610      	mov	r0, r2
 8008672:	4798      	blx	r3
 8008674:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008676:	e00f      	b.n	8008698 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008678:	6839      	ldr	r1, [r7, #0]
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 fa30 	bl	8008ae0 <USBD_CtlError>
            err++;
 8008680:	7afb      	ldrb	r3, [r7, #11]
 8008682:	3301      	adds	r3, #1
 8008684:	72fb      	strb	r3, [r7, #11]
          break;
 8008686:	e007      	b.n	8008698 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008688:	6839      	ldr	r1, [r7, #0]
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 fa28 	bl	8008ae0 <USBD_CtlError>
          err++;
 8008690:	7afb      	ldrb	r3, [r7, #11]
 8008692:	3301      	adds	r3, #1
 8008694:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008696:	bf00      	nop
      }
      break;
 8008698:	e037      	b.n	800870a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	7c1b      	ldrb	r3, [r3, #16]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d109      	bne.n	80086b6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086aa:	f107 0208 	add.w	r2, r7, #8
 80086ae:	4610      	mov	r0, r2
 80086b0:	4798      	blx	r3
 80086b2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80086b4:	e029      	b.n	800870a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80086b6:	6839      	ldr	r1, [r7, #0]
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f000 fa11 	bl	8008ae0 <USBD_CtlError>
        err++;
 80086be:	7afb      	ldrb	r3, [r7, #11]
 80086c0:	3301      	adds	r3, #1
 80086c2:	72fb      	strb	r3, [r7, #11]
      break;
 80086c4:	e021      	b.n	800870a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	7c1b      	ldrb	r3, [r3, #16]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d10d      	bne.n	80086ea <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086d6:	f107 0208 	add.w	r2, r7, #8
 80086da:	4610      	mov	r0, r2
 80086dc:	4798      	blx	r3
 80086de:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	3301      	adds	r3, #1
 80086e4:	2207      	movs	r2, #7
 80086e6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80086e8:	e00f      	b.n	800870a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80086ea:	6839      	ldr	r1, [r7, #0]
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f000 f9f7 	bl	8008ae0 <USBD_CtlError>
        err++;
 80086f2:	7afb      	ldrb	r3, [r7, #11]
 80086f4:	3301      	adds	r3, #1
 80086f6:	72fb      	strb	r3, [r7, #11]
      break;
 80086f8:	e007      	b.n	800870a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80086fa:	6839      	ldr	r1, [r7, #0]
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f000 f9ef 	bl	8008ae0 <USBD_CtlError>
      err++;
 8008702:	7afb      	ldrb	r3, [r7, #11]
 8008704:	3301      	adds	r3, #1
 8008706:	72fb      	strb	r3, [r7, #11]
      break;
 8008708:	bf00      	nop
  }

  if (err != 0U)
 800870a:	7afb      	ldrb	r3, [r7, #11]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d11e      	bne.n	800874e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	88db      	ldrh	r3, [r3, #6]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d016      	beq.n	8008746 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008718:	893b      	ldrh	r3, [r7, #8]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d00e      	beq.n	800873c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	88da      	ldrh	r2, [r3, #6]
 8008722:	893b      	ldrh	r3, [r7, #8]
 8008724:	4293      	cmp	r3, r2
 8008726:	bf28      	it	cs
 8008728:	4613      	movcs	r3, r2
 800872a:	b29b      	uxth	r3, r3
 800872c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800872e:	893b      	ldrh	r3, [r7, #8]
 8008730:	461a      	mov	r2, r3
 8008732:	68f9      	ldr	r1, [r7, #12]
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 fa44 	bl	8008bc2 <USBD_CtlSendData>
 800873a:	e009      	b.n	8008750 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800873c:	6839      	ldr	r1, [r7, #0]
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f000 f9ce 	bl	8008ae0 <USBD_CtlError>
 8008744:	e004      	b.n	8008750 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f000 fa95 	bl	8008c76 <USBD_CtlSendStatus>
 800874c:	e000      	b.n	8008750 <USBD_GetDescriptor+0x2cc>
    return;
 800874e:	bf00      	nop
  }
}
 8008750:	3710      	adds	r7, #16
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}
 8008756:	bf00      	nop

08008758 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b084      	sub	sp, #16
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	889b      	ldrh	r3, [r3, #4]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d131      	bne.n	80087ce <USBD_SetAddress+0x76>
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	88db      	ldrh	r3, [r3, #6]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d12d      	bne.n	80087ce <USBD_SetAddress+0x76>
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	885b      	ldrh	r3, [r3, #2]
 8008776:	2b7f      	cmp	r3, #127	; 0x7f
 8008778:	d829      	bhi.n	80087ce <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	885b      	ldrh	r3, [r3, #2]
 800877e:	b2db      	uxtb	r3, r3
 8008780:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008784:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800878c:	b2db      	uxtb	r3, r3
 800878e:	2b03      	cmp	r3, #3
 8008790:	d104      	bne.n	800879c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008792:	6839      	ldr	r1, [r7, #0]
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f000 f9a3 	bl	8008ae0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800879a:	e01d      	b.n	80087d8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	7bfa      	ldrb	r2, [r7, #15]
 80087a0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80087a4:	7bfb      	ldrb	r3, [r7, #15]
 80087a6:	4619      	mov	r1, r3
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f00d fdab 	bl	8016304 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 fa61 	bl	8008c76 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80087b4:	7bfb      	ldrb	r3, [r7, #15]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d004      	beq.n	80087c4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2202      	movs	r2, #2
 80087be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087c2:	e009      	b.n	80087d8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2201      	movs	r2, #1
 80087c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087cc:	e004      	b.n	80087d8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80087ce:	6839      	ldr	r1, [r7, #0]
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f000 f985 	bl	8008ae0 <USBD_CtlError>
  }
}
 80087d6:	bf00      	nop
 80087d8:	bf00      	nop
 80087da:	3710      	adds	r7, #16
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}

080087e0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b084      	sub	sp, #16
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80087ea:	2300      	movs	r3, #0
 80087ec:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	885b      	ldrh	r3, [r3, #2]
 80087f2:	b2da      	uxtb	r2, r3
 80087f4:	4b4c      	ldr	r3, [pc, #304]	; (8008928 <USBD_SetConfig+0x148>)
 80087f6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80087f8:	4b4b      	ldr	r3, [pc, #300]	; (8008928 <USBD_SetConfig+0x148>)
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d905      	bls.n	800880c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008800:	6839      	ldr	r1, [r7, #0]
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 f96c 	bl	8008ae0 <USBD_CtlError>
    return USBD_FAIL;
 8008808:	2303      	movs	r3, #3
 800880a:	e088      	b.n	800891e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008812:	b2db      	uxtb	r3, r3
 8008814:	2b02      	cmp	r3, #2
 8008816:	d002      	beq.n	800881e <USBD_SetConfig+0x3e>
 8008818:	2b03      	cmp	r3, #3
 800881a:	d025      	beq.n	8008868 <USBD_SetConfig+0x88>
 800881c:	e071      	b.n	8008902 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800881e:	4b42      	ldr	r3, [pc, #264]	; (8008928 <USBD_SetConfig+0x148>)
 8008820:	781b      	ldrb	r3, [r3, #0]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d01c      	beq.n	8008860 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008826:	4b40      	ldr	r3, [pc, #256]	; (8008928 <USBD_SetConfig+0x148>)
 8008828:	781b      	ldrb	r3, [r3, #0]
 800882a:	461a      	mov	r2, r3
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008830:	4b3d      	ldr	r3, [pc, #244]	; (8008928 <USBD_SetConfig+0x148>)
 8008832:	781b      	ldrb	r3, [r3, #0]
 8008834:	4619      	mov	r1, r3
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f7ff f948 	bl	8007acc <USBD_SetClassConfig>
 800883c:	4603      	mov	r3, r0
 800883e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008840:	7bfb      	ldrb	r3, [r7, #15]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d004      	beq.n	8008850 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8008846:	6839      	ldr	r1, [r7, #0]
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f000 f949 	bl	8008ae0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800884e:	e065      	b.n	800891c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f000 fa10 	bl	8008c76 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2203      	movs	r2, #3
 800885a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800885e:	e05d      	b.n	800891c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f000 fa08 	bl	8008c76 <USBD_CtlSendStatus>
      break;
 8008866:	e059      	b.n	800891c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008868:	4b2f      	ldr	r3, [pc, #188]	; (8008928 <USBD_SetConfig+0x148>)
 800886a:	781b      	ldrb	r3, [r3, #0]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d112      	bne.n	8008896 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2202      	movs	r2, #2
 8008874:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008878:	4b2b      	ldr	r3, [pc, #172]	; (8008928 <USBD_SetConfig+0x148>)
 800887a:	781b      	ldrb	r3, [r3, #0]
 800887c:	461a      	mov	r2, r3
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008882:	4b29      	ldr	r3, [pc, #164]	; (8008928 <USBD_SetConfig+0x148>)
 8008884:	781b      	ldrb	r3, [r3, #0]
 8008886:	4619      	mov	r1, r3
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f7ff f93b 	bl	8007b04 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f000 f9f1 	bl	8008c76 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008894:	e042      	b.n	800891c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008896:	4b24      	ldr	r3, [pc, #144]	; (8008928 <USBD_SetConfig+0x148>)
 8008898:	781b      	ldrb	r3, [r3, #0]
 800889a:	461a      	mov	r2, r3
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	685b      	ldr	r3, [r3, #4]
 80088a0:	429a      	cmp	r2, r3
 80088a2:	d02a      	beq.n	80088fa <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	b2db      	uxtb	r3, r3
 80088aa:	4619      	mov	r1, r3
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f7ff f929 	bl	8007b04 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80088b2:	4b1d      	ldr	r3, [pc, #116]	; (8008928 <USBD_SetConfig+0x148>)
 80088b4:	781b      	ldrb	r3, [r3, #0]
 80088b6:	461a      	mov	r2, r3
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80088bc:	4b1a      	ldr	r3, [pc, #104]	; (8008928 <USBD_SetConfig+0x148>)
 80088be:	781b      	ldrb	r3, [r3, #0]
 80088c0:	4619      	mov	r1, r3
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f7ff f902 	bl	8007acc <USBD_SetClassConfig>
 80088c8:	4603      	mov	r3, r0
 80088ca:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80088cc:	7bfb      	ldrb	r3, [r7, #15]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d00f      	beq.n	80088f2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80088d2:	6839      	ldr	r1, [r7, #0]
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f000 f903 	bl	8008ae0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	b2db      	uxtb	r3, r3
 80088e0:	4619      	mov	r1, r3
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f7ff f90e 	bl	8007b04 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2202      	movs	r2, #2
 80088ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80088f0:	e014      	b.n	800891c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f000 f9bf 	bl	8008c76 <USBD_CtlSendStatus>
      break;
 80088f8:	e010      	b.n	800891c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f000 f9bb 	bl	8008c76 <USBD_CtlSendStatus>
      break;
 8008900:	e00c      	b.n	800891c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008902:	6839      	ldr	r1, [r7, #0]
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f000 f8eb 	bl	8008ae0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800890a:	4b07      	ldr	r3, [pc, #28]	; (8008928 <USBD_SetConfig+0x148>)
 800890c:	781b      	ldrb	r3, [r3, #0]
 800890e:	4619      	mov	r1, r3
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f7ff f8f7 	bl	8007b04 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008916:	2303      	movs	r3, #3
 8008918:	73fb      	strb	r3, [r7, #15]
      break;
 800891a:	bf00      	nop
  }

  return ret;
 800891c:	7bfb      	ldrb	r3, [r7, #15]
}
 800891e:	4618      	mov	r0, r3
 8008920:	3710      	adds	r7, #16
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}
 8008926:	bf00      	nop
 8008928:	2000046c 	.word	0x2000046c

0800892c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b082      	sub	sp, #8
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	88db      	ldrh	r3, [r3, #6]
 800893a:	2b01      	cmp	r3, #1
 800893c:	d004      	beq.n	8008948 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800893e:	6839      	ldr	r1, [r7, #0]
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f000 f8cd 	bl	8008ae0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008946:	e023      	b.n	8008990 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800894e:	b2db      	uxtb	r3, r3
 8008950:	2b02      	cmp	r3, #2
 8008952:	dc02      	bgt.n	800895a <USBD_GetConfig+0x2e>
 8008954:	2b00      	cmp	r3, #0
 8008956:	dc03      	bgt.n	8008960 <USBD_GetConfig+0x34>
 8008958:	e015      	b.n	8008986 <USBD_GetConfig+0x5a>
 800895a:	2b03      	cmp	r3, #3
 800895c:	d00b      	beq.n	8008976 <USBD_GetConfig+0x4a>
 800895e:	e012      	b.n	8008986 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2200      	movs	r2, #0
 8008964:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	3308      	adds	r3, #8
 800896a:	2201      	movs	r2, #1
 800896c:	4619      	mov	r1, r3
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f000 f927 	bl	8008bc2 <USBD_CtlSendData>
        break;
 8008974:	e00c      	b.n	8008990 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	3304      	adds	r3, #4
 800897a:	2201      	movs	r2, #1
 800897c:	4619      	mov	r1, r3
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 f91f 	bl	8008bc2 <USBD_CtlSendData>
        break;
 8008984:	e004      	b.n	8008990 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008986:	6839      	ldr	r1, [r7, #0]
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f000 f8a9 	bl	8008ae0 <USBD_CtlError>
        break;
 800898e:	bf00      	nop
}
 8008990:	bf00      	nop
 8008992:	3708      	adds	r7, #8
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}

08008998 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b082      	sub	sp, #8
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089a8:	b2db      	uxtb	r3, r3
 80089aa:	3b01      	subs	r3, #1
 80089ac:	2b02      	cmp	r3, #2
 80089ae:	d81e      	bhi.n	80089ee <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	88db      	ldrh	r3, [r3, #6]
 80089b4:	2b02      	cmp	r3, #2
 80089b6:	d004      	beq.n	80089c2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80089b8:	6839      	ldr	r1, [r7, #0]
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f000 f890 	bl	8008ae0 <USBD_CtlError>
        break;
 80089c0:	e01a      	b.n	80089f8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2201      	movs	r2, #1
 80089c6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d005      	beq.n	80089de <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	68db      	ldr	r3, [r3, #12]
 80089d6:	f043 0202 	orr.w	r2, r3, #2
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	330c      	adds	r3, #12
 80089e2:	2202      	movs	r2, #2
 80089e4:	4619      	mov	r1, r3
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f000 f8eb 	bl	8008bc2 <USBD_CtlSendData>
      break;
 80089ec:	e004      	b.n	80089f8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80089ee:	6839      	ldr	r1, [r7, #0]
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f000 f875 	bl	8008ae0 <USBD_CtlError>
      break;
 80089f6:	bf00      	nop
  }
}
 80089f8:	bf00      	nop
 80089fa:	3708      	adds	r7, #8
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b082      	sub	sp, #8
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	885b      	ldrh	r3, [r3, #2]
 8008a0e:	2b01      	cmp	r3, #1
 8008a10:	d106      	bne.n	8008a20 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2201      	movs	r2, #1
 8008a16:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 f92b 	bl	8008c76 <USBD_CtlSendStatus>
  }
}
 8008a20:	bf00      	nop
 8008a22:	3708      	adds	r7, #8
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}

08008a28 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b082      	sub	sp, #8
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
 8008a30:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a38:	b2db      	uxtb	r3, r3
 8008a3a:	3b01      	subs	r3, #1
 8008a3c:	2b02      	cmp	r3, #2
 8008a3e:	d80b      	bhi.n	8008a58 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	885b      	ldrh	r3, [r3, #2]
 8008a44:	2b01      	cmp	r3, #1
 8008a46:	d10c      	bne.n	8008a62 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f000 f910 	bl	8008c76 <USBD_CtlSendStatus>
      }
      break;
 8008a56:	e004      	b.n	8008a62 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008a58:	6839      	ldr	r1, [r7, #0]
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f000 f840 	bl	8008ae0 <USBD_CtlError>
      break;
 8008a60:	e000      	b.n	8008a64 <USBD_ClrFeature+0x3c>
      break;
 8008a62:	bf00      	nop
  }
}
 8008a64:	bf00      	nop
 8008a66:	3708      	adds	r7, #8
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}

08008a6c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b084      	sub	sp, #16
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	781a      	ldrb	r2, [r3, #0]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	3301      	adds	r3, #1
 8008a86:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	781a      	ldrb	r2, [r3, #0]
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	3301      	adds	r3, #1
 8008a94:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008a96:	68f8      	ldr	r0, [r7, #12]
 8008a98:	f7ff fabb 	bl	8008012 <SWAPBYTE>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	3301      	adds	r3, #1
 8008aa8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	3301      	adds	r3, #1
 8008aae:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008ab0:	68f8      	ldr	r0, [r7, #12]
 8008ab2:	f7ff faae 	bl	8008012 <SWAPBYTE>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	461a      	mov	r2, r3
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	3301      	adds	r3, #1
 8008ac2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008aca:	68f8      	ldr	r0, [r7, #12]
 8008acc:	f7ff faa1 	bl	8008012 <SWAPBYTE>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	461a      	mov	r2, r3
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	80da      	strh	r2, [r3, #6]
}
 8008ad8:	bf00      	nop
 8008ada:	3710      	adds	r7, #16
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}

08008ae0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b082      	sub	sp, #8
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008aea:	2180      	movs	r1, #128	; 0x80
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f00d fb9f 	bl	8016230 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008af2:	2100      	movs	r1, #0
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f00d fb9b 	bl	8016230 <USBD_LL_StallEP>
}
 8008afa:	bf00      	nop
 8008afc:	3708      	adds	r7, #8
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}

08008b02 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008b02:	b580      	push	{r7, lr}
 8008b04:	b086      	sub	sp, #24
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	60f8      	str	r0, [r7, #12]
 8008b0a:	60b9      	str	r1, [r7, #8]
 8008b0c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d036      	beq.n	8008b86 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008b1c:	6938      	ldr	r0, [r7, #16]
 8008b1e:	f000 f836 	bl	8008b8e <USBD_GetLen>
 8008b22:	4603      	mov	r3, r0
 8008b24:	3301      	adds	r3, #1
 8008b26:	b29b      	uxth	r3, r3
 8008b28:	005b      	lsls	r3, r3, #1
 8008b2a:	b29a      	uxth	r2, r3
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008b30:	7dfb      	ldrb	r3, [r7, #23]
 8008b32:	68ba      	ldr	r2, [r7, #8]
 8008b34:	4413      	add	r3, r2
 8008b36:	687a      	ldr	r2, [r7, #4]
 8008b38:	7812      	ldrb	r2, [r2, #0]
 8008b3a:	701a      	strb	r2, [r3, #0]
  idx++;
 8008b3c:	7dfb      	ldrb	r3, [r7, #23]
 8008b3e:	3301      	adds	r3, #1
 8008b40:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008b42:	7dfb      	ldrb	r3, [r7, #23]
 8008b44:	68ba      	ldr	r2, [r7, #8]
 8008b46:	4413      	add	r3, r2
 8008b48:	2203      	movs	r2, #3
 8008b4a:	701a      	strb	r2, [r3, #0]
  idx++;
 8008b4c:	7dfb      	ldrb	r3, [r7, #23]
 8008b4e:	3301      	adds	r3, #1
 8008b50:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008b52:	e013      	b.n	8008b7c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008b54:	7dfb      	ldrb	r3, [r7, #23]
 8008b56:	68ba      	ldr	r2, [r7, #8]
 8008b58:	4413      	add	r3, r2
 8008b5a:	693a      	ldr	r2, [r7, #16]
 8008b5c:	7812      	ldrb	r2, [r2, #0]
 8008b5e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	3301      	adds	r3, #1
 8008b64:	613b      	str	r3, [r7, #16]
    idx++;
 8008b66:	7dfb      	ldrb	r3, [r7, #23]
 8008b68:	3301      	adds	r3, #1
 8008b6a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008b6c:	7dfb      	ldrb	r3, [r7, #23]
 8008b6e:	68ba      	ldr	r2, [r7, #8]
 8008b70:	4413      	add	r3, r2
 8008b72:	2200      	movs	r2, #0
 8008b74:	701a      	strb	r2, [r3, #0]
    idx++;
 8008b76:	7dfb      	ldrb	r3, [r7, #23]
 8008b78:	3301      	adds	r3, #1
 8008b7a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	781b      	ldrb	r3, [r3, #0]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d1e7      	bne.n	8008b54 <USBD_GetString+0x52>
 8008b84:	e000      	b.n	8008b88 <USBD_GetString+0x86>
    return;
 8008b86:	bf00      	nop
  }
}
 8008b88:	3718      	adds	r7, #24
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}

08008b8e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008b8e:	b480      	push	{r7}
 8008b90:	b085      	sub	sp, #20
 8008b92:	af00      	add	r7, sp, #0
 8008b94:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008b96:	2300      	movs	r3, #0
 8008b98:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008b9e:	e005      	b.n	8008bac <USBD_GetLen+0x1e>
  {
    len++;
 8008ba0:	7bfb      	ldrb	r3, [r7, #15]
 8008ba2:	3301      	adds	r3, #1
 8008ba4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	3301      	adds	r3, #1
 8008baa:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	781b      	ldrb	r3, [r3, #0]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d1f5      	bne.n	8008ba0 <USBD_GetLen+0x12>
  }

  return len;
 8008bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3714      	adds	r7, #20
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc0:	4770      	bx	lr

08008bc2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008bc2:	b580      	push	{r7, lr}
 8008bc4:	b084      	sub	sp, #16
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	60f8      	str	r0, [r7, #12]
 8008bca:	60b9      	str	r1, [r7, #8]
 8008bcc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	2202      	movs	r2, #2
 8008bd2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	687a      	ldr	r2, [r7, #4]
 8008bda:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	687a      	ldr	r2, [r7, #4]
 8008be0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	68ba      	ldr	r2, [r7, #8]
 8008be6:	2100      	movs	r1, #0
 8008be8:	68f8      	ldr	r0, [r7, #12]
 8008bea:	f00d fbaa 	bl	8016342 <USBD_LL_Transmit>

  return USBD_OK;
 8008bee:	2300      	movs	r3, #0
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3710      	adds	r7, #16
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}

08008bf8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b084      	sub	sp, #16
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	60f8      	str	r0, [r7, #12]
 8008c00:	60b9      	str	r1, [r7, #8]
 8008c02:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	68ba      	ldr	r2, [r7, #8]
 8008c08:	2100      	movs	r1, #0
 8008c0a:	68f8      	ldr	r0, [r7, #12]
 8008c0c:	f00d fb99 	bl	8016342 <USBD_LL_Transmit>

  return USBD_OK;
 8008c10:	2300      	movs	r3, #0
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3710      	adds	r7, #16
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}

08008c1a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008c1a:	b580      	push	{r7, lr}
 8008c1c:	b084      	sub	sp, #16
 8008c1e:	af00      	add	r7, sp, #0
 8008c20:	60f8      	str	r0, [r7, #12]
 8008c22:	60b9      	str	r1, [r7, #8]
 8008c24:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	2203      	movs	r2, #3
 8008c2a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	687a      	ldr	r2, [r7, #4]
 8008c32:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	687a      	ldr	r2, [r7, #4]
 8008c3a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	68ba      	ldr	r2, [r7, #8]
 8008c42:	2100      	movs	r1, #0
 8008c44:	68f8      	ldr	r0, [r7, #12]
 8008c46:	f00d fb9d 	bl	8016384 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c4a:	2300      	movs	r3, #0
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3710      	adds	r7, #16
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}

08008c54 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b084      	sub	sp, #16
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	60f8      	str	r0, [r7, #12]
 8008c5c:	60b9      	str	r1, [r7, #8]
 8008c5e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	68ba      	ldr	r2, [r7, #8]
 8008c64:	2100      	movs	r1, #0
 8008c66:	68f8      	ldr	r0, [r7, #12]
 8008c68:	f00d fb8c 	bl	8016384 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c6c:	2300      	movs	r3, #0
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3710      	adds	r7, #16
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}

08008c76 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008c76:	b580      	push	{r7, lr}
 8008c78:	b082      	sub	sp, #8
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2204      	movs	r2, #4
 8008c82:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008c86:	2300      	movs	r3, #0
 8008c88:	2200      	movs	r2, #0
 8008c8a:	2100      	movs	r1, #0
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f00d fb58 	bl	8016342 <USBD_LL_Transmit>

  return USBD_OK;
 8008c92:	2300      	movs	r3, #0
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3708      	adds	r7, #8
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}

08008c9c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b082      	sub	sp, #8
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2205      	movs	r2, #5
 8008ca8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008cac:	2300      	movs	r3, #0
 8008cae:	2200      	movs	r2, #0
 8008cb0:	2100      	movs	r1, #0
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f00d fb66 	bl	8016384 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008cb8:	2300      	movs	r3, #0
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3708      	adds	r7, #8
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}

08008cc2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008cc2:	b480      	push	{r7}
 8008cc4:	b085      	sub	sp, #20
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	4603      	mov	r3, r0
 8008cca:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008ccc:	2300      	movs	r3, #0
 8008cce:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008cd0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008cd4:	2b84      	cmp	r3, #132	; 0x84
 8008cd6:	d005      	beq.n	8008ce4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008cd8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	4413      	add	r3, r2
 8008ce0:	3303      	adds	r3, #3
 8008ce2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3714      	adds	r7, #20
 8008cea:	46bd      	mov	sp, r7
 8008cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf0:	4770      	bx	lr

08008cf2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8008cf2:	b480      	push	{r7}
 8008cf4:	b083      	sub	sp, #12
 8008cf6:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008cf8:	f3ef 8305 	mrs	r3, IPSR
 8008cfc:	607b      	str	r3, [r7, #4]
  return(result);
 8008cfe:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	bf14      	ite	ne
 8008d04:	2301      	movne	r3, #1
 8008d06:	2300      	moveq	r3, #0
 8008d08:	b2db      	uxtb	r3, r3
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	370c      	adds	r7, #12
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d14:	4770      	bx	lr

08008d16 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008d16:	b580      	push	{r7, lr}
 8008d18:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008d1a:	f001 fc5d 	bl	800a5d8 <vTaskStartScheduler>
  
  return osOK;
 8008d1e:	2300      	movs	r3, #0
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8008d28:	f7ff ffe3 	bl	8008cf2 <inHandlerMode>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d003      	beq.n	8008d3a <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8008d32:	f001 fd6b 	bl	800a80c <xTaskGetTickCountFromISR>
 8008d36:	4603      	mov	r3, r0
 8008d38:	e002      	b.n	8008d40 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8008d3a:	f001 fd57 	bl	800a7ec <xTaskGetTickCount>
 8008d3e:	4603      	mov	r3, r0
  }
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	bd80      	pop	{r7, pc}

08008d44 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008d44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d46:	b089      	sub	sp, #36	; 0x24
 8008d48:	af04      	add	r7, sp, #16
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	695b      	ldr	r3, [r3, #20]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d020      	beq.n	8008d98 <osThreadCreate+0x54>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	699b      	ldr	r3, [r3, #24]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d01c      	beq.n	8008d98 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	685c      	ldr	r4, [r3, #4]
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681d      	ldr	r5, [r3, #0]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	691e      	ldr	r6, [r3, #16]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008d70:	4618      	mov	r0, r3
 8008d72:	f7ff ffa6 	bl	8008cc2 <makeFreeRtosPriority>
 8008d76:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	695b      	ldr	r3, [r3, #20]
 8008d7c:	687a      	ldr	r2, [r7, #4]
 8008d7e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008d80:	9202      	str	r2, [sp, #8]
 8008d82:	9301      	str	r3, [sp, #4]
 8008d84:	9100      	str	r1, [sp, #0]
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	4632      	mov	r2, r6
 8008d8a:	4629      	mov	r1, r5
 8008d8c:	4620      	mov	r0, r4
 8008d8e:	f001 fa5b 	bl	800a248 <xTaskCreateStatic>
 8008d92:	4603      	mov	r3, r0
 8008d94:	60fb      	str	r3, [r7, #12]
 8008d96:	e01c      	b.n	8008dd2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	685c      	ldr	r4, [r3, #4]
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008da4:	b29e      	uxth	r6, r3
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008dac:	4618      	mov	r0, r3
 8008dae:	f7ff ff88 	bl	8008cc2 <makeFreeRtosPriority>
 8008db2:	4602      	mov	r2, r0
 8008db4:	f107 030c 	add.w	r3, r7, #12
 8008db8:	9301      	str	r3, [sp, #4]
 8008dba:	9200      	str	r2, [sp, #0]
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	4632      	mov	r2, r6
 8008dc0:	4629      	mov	r1, r5
 8008dc2:	4620      	mov	r0, r4
 8008dc4:	f001 fa9d 	bl	800a302 <xTaskCreate>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	2b01      	cmp	r3, #1
 8008dcc:	d001      	beq.n	8008dd2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	e000      	b.n	8008dd4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3714      	adds	r7, #20
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008ddc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b084      	sub	sp, #16
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d001      	beq.n	8008df2 <osDelay+0x16>
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	e000      	b.n	8008df4 <osDelay+0x18>
 8008df2:	2301      	movs	r3, #1
 8008df4:	4618      	mov	r0, r3
 8008df6:	f001 fbbb 	bl	800a570 <vTaskDelay>
  
  return osOK;
 8008dfa:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	3710      	adds	r7, #16
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}

08008e04 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b082      	sub	sp, #8
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	685b      	ldr	r3, [r3, #4]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d007      	beq.n	8008e24 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	685b      	ldr	r3, [r3, #4]
 8008e18:	4619      	mov	r1, r3
 8008e1a:	2001      	movs	r0, #1
 8008e1c:	f000 fc3f 	bl	800969e <xQueueCreateMutexStatic>
 8008e20:	4603      	mov	r3, r0
 8008e22:	e003      	b.n	8008e2c <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8008e24:	2001      	movs	r0, #1
 8008e26:	f000 fc22 	bl	800966e <xQueueCreateMutex>
 8008e2a:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3708      	adds	r7, #8
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b084      	sub	sp, #16
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8008e3e:	2300      	movs	r3, #0
 8008e40:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d101      	bne.n	8008e4c <osMutexWait+0x18>
    return osErrorParameter;
 8008e48:	2380      	movs	r3, #128	; 0x80
 8008e4a:	e03a      	b.n	8008ec2 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e56:	d103      	bne.n	8008e60 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8008e58:	f04f 33ff 	mov.w	r3, #4294967295
 8008e5c:	60fb      	str	r3, [r7, #12]
 8008e5e:	e009      	b.n	8008e74 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d006      	beq.n	8008e74 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d101      	bne.n	8008e74 <osMutexWait+0x40>
      ticks = 1;
 8008e70:	2301      	movs	r3, #1
 8008e72:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8008e74:	f7ff ff3d 	bl	8008cf2 <inHandlerMode>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d017      	beq.n	8008eae <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8008e7e:	f107 0308 	add.w	r3, r7, #8
 8008e82:	461a      	mov	r2, r3
 8008e84:	2100      	movs	r1, #0
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f001 f836 	bl	8009ef8 <xQueueReceiveFromISR>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	2b01      	cmp	r3, #1
 8008e90:	d001      	beq.n	8008e96 <osMutexWait+0x62>
      return osErrorOS;
 8008e92:	23ff      	movs	r3, #255	; 0xff
 8008e94:	e015      	b.n	8008ec2 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d011      	beq.n	8008ec0 <osMutexWait+0x8c>
 8008e9c:	4b0b      	ldr	r3, [pc, #44]	; (8008ecc <osMutexWait+0x98>)
 8008e9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ea2:	601a      	str	r2, [r3, #0]
 8008ea4:	f3bf 8f4f 	dsb	sy
 8008ea8:	f3bf 8f6f 	isb	sy
 8008eac:	e008      	b.n	8008ec0 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8008eae:	68f9      	ldr	r1, [r7, #12]
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f000 ff15 	bl	8009ce0 <xQueueSemaphoreTake>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	2b01      	cmp	r3, #1
 8008eba:	d001      	beq.n	8008ec0 <osMutexWait+0x8c>
    return osErrorOS;
 8008ebc:	23ff      	movs	r3, #255	; 0xff
 8008ebe:	e000      	b.n	8008ec2 <osMutexWait+0x8e>
  }
  
  return osOK;
 8008ec0:	2300      	movs	r3, #0
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	3710      	adds	r7, #16
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}
 8008eca:	bf00      	nop
 8008ecc:	e000ed04 	.word	0xe000ed04

08008ed0 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b084      	sub	sp, #16
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8008edc:	2300      	movs	r3, #0
 8008ede:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8008ee0:	f7ff ff07 	bl	8008cf2 <inHandlerMode>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d016      	beq.n	8008f18 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8008eea:	f107 0308 	add.w	r3, r7, #8
 8008eee:	4619      	mov	r1, r3
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f000 fd88 	bl	8009a06 <xQueueGiveFromISR>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	d001      	beq.n	8008f00 <osMutexRelease+0x30>
      return osErrorOS;
 8008efc:	23ff      	movs	r3, #255	; 0xff
 8008efe:	e017      	b.n	8008f30 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d013      	beq.n	8008f2e <osMutexRelease+0x5e>
 8008f06:	4b0c      	ldr	r3, [pc, #48]	; (8008f38 <osMutexRelease+0x68>)
 8008f08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f0c:	601a      	str	r2, [r3, #0]
 8008f0e:	f3bf 8f4f 	dsb	sy
 8008f12:	f3bf 8f6f 	isb	sy
 8008f16:	e00a      	b.n	8008f2e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8008f18:	2300      	movs	r3, #0
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	2100      	movs	r1, #0
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 fbd8 	bl	80096d4 <xQueueGenericSend>
 8008f24:	4603      	mov	r3, r0
 8008f26:	2b01      	cmp	r3, #1
 8008f28:	d001      	beq.n	8008f2e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8008f2a:	23ff      	movs	r3, #255	; 0xff
 8008f2c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3710      	adds	r7, #16
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}
 8008f38:	e000ed04 	.word	0xe000ed04

08008f3c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b086      	sub	sp, #24
 8008f40:	af02      	add	r7, sp, #8
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	685b      	ldr	r3, [r3, #4]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d00f      	beq.n	8008f6e <osSemaphoreCreate+0x32>
    if (count == 1) {
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	2b01      	cmp	r3, #1
 8008f52:	d10a      	bne.n	8008f6a <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	2203      	movs	r2, #3
 8008f5a:	9200      	str	r2, [sp, #0]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	2100      	movs	r1, #0
 8008f60:	2001      	movs	r0, #1
 8008f62:	f000 fa99 	bl	8009498 <xQueueGenericCreateStatic>
 8008f66:	4603      	mov	r3, r0
 8008f68:	e016      	b.n	8008f98 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	e014      	b.n	8008f98 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	2b01      	cmp	r3, #1
 8008f72:	d110      	bne.n	8008f96 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8008f74:	2203      	movs	r2, #3
 8008f76:	2100      	movs	r1, #0
 8008f78:	2001      	movs	r0, #1
 8008f7a:	f000 fb05 	bl	8009588 <xQueueGenericCreate>
 8008f7e:	60f8      	str	r0, [r7, #12]
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d005      	beq.n	8008f92 <osSemaphoreCreate+0x56>
 8008f86:	2300      	movs	r3, #0
 8008f88:	2200      	movs	r2, #0
 8008f8a:	2100      	movs	r1, #0
 8008f8c:	68f8      	ldr	r0, [r7, #12]
 8008f8e:	f000 fba1 	bl	80096d4 <xQueueGenericSend>
      return sema;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	e000      	b.n	8008f98 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8008f96:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3710      	adds	r7, #16
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}

08008fa0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b084      	sub	sp, #16
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
 8008fa8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8008faa:	2300      	movs	r3, #0
 8008fac:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d101      	bne.n	8008fb8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8008fb4:	2380      	movs	r3, #128	; 0x80
 8008fb6:	e03a      	b.n	800902e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8008fb8:	2300      	movs	r3, #0
 8008fba:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fc2:	d103      	bne.n	8008fcc <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8008fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8008fc8:	60fb      	str	r3, [r7, #12]
 8008fca:	e009      	b.n	8008fe0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d006      	beq.n	8008fe0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d101      	bne.n	8008fe0 <osSemaphoreWait+0x40>
      ticks = 1;
 8008fdc:	2301      	movs	r3, #1
 8008fde:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8008fe0:	f7ff fe87 	bl	8008cf2 <inHandlerMode>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d017      	beq.n	800901a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8008fea:	f107 0308 	add.w	r3, r7, #8
 8008fee:	461a      	mov	r2, r3
 8008ff0:	2100      	movs	r1, #0
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f000 ff80 	bl	8009ef8 <xQueueReceiveFromISR>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	d001      	beq.n	8009002 <osSemaphoreWait+0x62>
      return osErrorOS;
 8008ffe:	23ff      	movs	r3, #255	; 0xff
 8009000:	e015      	b.n	800902e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d011      	beq.n	800902c <osSemaphoreWait+0x8c>
 8009008:	4b0b      	ldr	r3, [pc, #44]	; (8009038 <osSemaphoreWait+0x98>)
 800900a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800900e:	601a      	str	r2, [r3, #0]
 8009010:	f3bf 8f4f 	dsb	sy
 8009014:	f3bf 8f6f 	isb	sy
 8009018:	e008      	b.n	800902c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800901a:	68f9      	ldr	r1, [r7, #12]
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f000 fe5f 	bl	8009ce0 <xQueueSemaphoreTake>
 8009022:	4603      	mov	r3, r0
 8009024:	2b01      	cmp	r3, #1
 8009026:	d001      	beq.n	800902c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8009028:	23ff      	movs	r3, #255	; 0xff
 800902a:	e000      	b.n	800902e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800902c:	2300      	movs	r3, #0
}
 800902e:	4618      	mov	r0, r3
 8009030:	3710      	adds	r7, #16
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}
 8009036:	bf00      	nop
 8009038:	e000ed04 	.word	0xe000ed04

0800903c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b084      	sub	sp, #16
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8009044:	2300      	movs	r3, #0
 8009046:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8009048:	2300      	movs	r3, #0
 800904a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800904c:	f7ff fe51 	bl	8008cf2 <inHandlerMode>
 8009050:	4603      	mov	r3, r0
 8009052:	2b00      	cmp	r3, #0
 8009054:	d016      	beq.n	8009084 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8009056:	f107 0308 	add.w	r3, r7, #8
 800905a:	4619      	mov	r1, r3
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f000 fcd2 	bl	8009a06 <xQueueGiveFromISR>
 8009062:	4603      	mov	r3, r0
 8009064:	2b01      	cmp	r3, #1
 8009066:	d001      	beq.n	800906c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8009068:	23ff      	movs	r3, #255	; 0xff
 800906a:	e017      	b.n	800909c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d013      	beq.n	800909a <osSemaphoreRelease+0x5e>
 8009072:	4b0c      	ldr	r3, [pc, #48]	; (80090a4 <osSemaphoreRelease+0x68>)
 8009074:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009078:	601a      	str	r2, [r3, #0]
 800907a:	f3bf 8f4f 	dsb	sy
 800907e:	f3bf 8f6f 	isb	sy
 8009082:	e00a      	b.n	800909a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8009084:	2300      	movs	r3, #0
 8009086:	2200      	movs	r2, #0
 8009088:	2100      	movs	r1, #0
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f000 fb22 	bl	80096d4 <xQueueGenericSend>
 8009090:	4603      	mov	r3, r0
 8009092:	2b01      	cmp	r3, #1
 8009094:	d001      	beq.n	800909a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8009096:	23ff      	movs	r3, #255	; 0xff
 8009098:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800909a:	68fb      	ldr	r3, [r7, #12]
}
 800909c:	4618      	mov	r0, r3
 800909e:	3710      	adds	r7, #16
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}
 80090a4:	e000ed04 	.word	0xe000ed04

080090a8 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80090a8:	b590      	push	{r4, r7, lr}
 80090aa:	b085      	sub	sp, #20
 80090ac:	af02      	add	r7, sp, #8
 80090ae:	6078      	str	r0, [r7, #4]
 80090b0:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	689b      	ldr	r3, [r3, #8]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d011      	beq.n	80090de <osMessageCreate+0x36>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	68db      	ldr	r3, [r3, #12]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d00d      	beq.n	80090de <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6818      	ldr	r0, [r3, #0]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6859      	ldr	r1, [r3, #4]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	689a      	ldr	r2, [r3, #8]
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	68db      	ldr	r3, [r3, #12]
 80090d2:	2400      	movs	r4, #0
 80090d4:	9400      	str	r4, [sp, #0]
 80090d6:	f000 f9df 	bl	8009498 <xQueueGenericCreateStatic>
 80090da:	4603      	mov	r3, r0
 80090dc:	e008      	b.n	80090f0 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6818      	ldr	r0, [r3, #0]
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	685b      	ldr	r3, [r3, #4]
 80090e6:	2200      	movs	r2, #0
 80090e8:	4619      	mov	r1, r3
 80090ea:	f000 fa4d 	bl	8009588 <xQueueGenericCreate>
 80090ee:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	370c      	adds	r7, #12
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd90      	pop	{r4, r7, pc}

080090f8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b086      	sub	sp, #24
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	60f8      	str	r0, [r7, #12]
 8009100:	60b9      	str	r1, [r7, #8]
 8009102:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8009104:	2300      	movs	r3, #0
 8009106:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d101      	bne.n	8009116 <osMessagePut+0x1e>
    ticks = 1;
 8009112:	2301      	movs	r3, #1
 8009114:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8009116:	f7ff fdec 	bl	8008cf2 <inHandlerMode>
 800911a:	4603      	mov	r3, r0
 800911c:	2b00      	cmp	r3, #0
 800911e:	d018      	beq.n	8009152 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8009120:	f107 0210 	add.w	r2, r7, #16
 8009124:	f107 0108 	add.w	r1, r7, #8
 8009128:	2300      	movs	r3, #0
 800912a:	68f8      	ldr	r0, [r7, #12]
 800912c:	f000 fbd0 	bl	80098d0 <xQueueGenericSendFromISR>
 8009130:	4603      	mov	r3, r0
 8009132:	2b01      	cmp	r3, #1
 8009134:	d001      	beq.n	800913a <osMessagePut+0x42>
      return osErrorOS;
 8009136:	23ff      	movs	r3, #255	; 0xff
 8009138:	e018      	b.n	800916c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d014      	beq.n	800916a <osMessagePut+0x72>
 8009140:	4b0c      	ldr	r3, [pc, #48]	; (8009174 <osMessagePut+0x7c>)
 8009142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009146:	601a      	str	r2, [r3, #0]
 8009148:	f3bf 8f4f 	dsb	sy
 800914c:	f3bf 8f6f 	isb	sy
 8009150:	e00b      	b.n	800916a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8009152:	f107 0108 	add.w	r1, r7, #8
 8009156:	2300      	movs	r3, #0
 8009158:	697a      	ldr	r2, [r7, #20]
 800915a:	68f8      	ldr	r0, [r7, #12]
 800915c:	f000 faba 	bl	80096d4 <xQueueGenericSend>
 8009160:	4603      	mov	r3, r0
 8009162:	2b01      	cmp	r3, #1
 8009164:	d001      	beq.n	800916a <osMessagePut+0x72>
      return osErrorOS;
 8009166:	23ff      	movs	r3, #255	; 0xff
 8009168:	e000      	b.n	800916c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800916a:	2300      	movs	r3, #0
}
 800916c:	4618      	mov	r0, r3
 800916e:	3718      	adds	r7, #24
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}
 8009174:	e000ed04 	.word	0xe000ed04

08009178 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8009178:	b590      	push	{r4, r7, lr}
 800917a:	b08b      	sub	sp, #44	; 0x2c
 800917c:	af00      	add	r7, sp, #0
 800917e:	60f8      	str	r0, [r7, #12]
 8009180:	60b9      	str	r1, [r7, #8]
 8009182:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8009188:	2300      	movs	r3, #0
 800918a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d10a      	bne.n	80091a8 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8009192:	2380      	movs	r3, #128	; 0x80
 8009194:	617b      	str	r3, [r7, #20]
    return event;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	461c      	mov	r4, r3
 800919a:	f107 0314 	add.w	r3, r7, #20
 800919e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80091a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80091a6:	e054      	b.n	8009252 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80091a8:	2300      	movs	r3, #0
 80091aa:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80091ac:	2300      	movs	r3, #0
 80091ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091b6:	d103      	bne.n	80091c0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80091b8:	f04f 33ff 	mov.w	r3, #4294967295
 80091bc:	627b      	str	r3, [r7, #36]	; 0x24
 80091be:	e009      	b.n	80091d4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d006      	beq.n	80091d4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80091ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d101      	bne.n	80091d4 <osMessageGet+0x5c>
      ticks = 1;
 80091d0:	2301      	movs	r3, #1
 80091d2:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80091d4:	f7ff fd8d 	bl	8008cf2 <inHandlerMode>
 80091d8:	4603      	mov	r3, r0
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d01c      	beq.n	8009218 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80091de:	f107 0220 	add.w	r2, r7, #32
 80091e2:	f107 0314 	add.w	r3, r7, #20
 80091e6:	3304      	adds	r3, #4
 80091e8:	4619      	mov	r1, r3
 80091ea:	68b8      	ldr	r0, [r7, #8]
 80091ec:	f000 fe84 	bl	8009ef8 <xQueueReceiveFromISR>
 80091f0:	4603      	mov	r3, r0
 80091f2:	2b01      	cmp	r3, #1
 80091f4:	d102      	bne.n	80091fc <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80091f6:	2310      	movs	r3, #16
 80091f8:	617b      	str	r3, [r7, #20]
 80091fa:	e001      	b.n	8009200 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80091fc:	2300      	movs	r3, #0
 80091fe:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009200:	6a3b      	ldr	r3, [r7, #32]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d01d      	beq.n	8009242 <osMessageGet+0xca>
 8009206:	4b15      	ldr	r3, [pc, #84]	; (800925c <osMessageGet+0xe4>)
 8009208:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800920c:	601a      	str	r2, [r3, #0]
 800920e:	f3bf 8f4f 	dsb	sy
 8009212:	f3bf 8f6f 	isb	sy
 8009216:	e014      	b.n	8009242 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8009218:	f107 0314 	add.w	r3, r7, #20
 800921c:	3304      	adds	r3, #4
 800921e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009220:	4619      	mov	r1, r3
 8009222:	68b8      	ldr	r0, [r7, #8]
 8009224:	f000 fc7c 	bl	8009b20 <xQueueReceive>
 8009228:	4603      	mov	r3, r0
 800922a:	2b01      	cmp	r3, #1
 800922c:	d102      	bne.n	8009234 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800922e:	2310      	movs	r3, #16
 8009230:	617b      	str	r3, [r7, #20]
 8009232:	e006      	b.n	8009242 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8009234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009236:	2b00      	cmp	r3, #0
 8009238:	d101      	bne.n	800923e <osMessageGet+0xc6>
 800923a:	2300      	movs	r3, #0
 800923c:	e000      	b.n	8009240 <osMessageGet+0xc8>
 800923e:	2340      	movs	r3, #64	; 0x40
 8009240:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	461c      	mov	r4, r3
 8009246:	f107 0314 	add.w	r3, r7, #20
 800924a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800924e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8009252:	68f8      	ldr	r0, [r7, #12]
 8009254:	372c      	adds	r7, #44	; 0x2c
 8009256:	46bd      	mov	sp, r7
 8009258:	bd90      	pop	{r4, r7, pc}
 800925a:	bf00      	nop
 800925c:	e000ed04 	.word	0xe000ed04

08009260 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009260:	b480      	push	{r7}
 8009262:	b083      	sub	sp, #12
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f103 0208 	add.w	r2, r3, #8
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f04f 32ff 	mov.w	r2, #4294967295
 8009278:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f103 0208 	add.w	r2, r3, #8
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f103 0208 	add.w	r2, r3, #8
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2200      	movs	r2, #0
 8009292:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009294:	bf00      	nop
 8009296:	370c      	adds	r7, #12
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr

080092a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80092a0:	b480      	push	{r7}
 80092a2:	b083      	sub	sp, #12
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2200      	movs	r2, #0
 80092ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80092ae:	bf00      	nop
 80092b0:	370c      	adds	r7, #12
 80092b2:	46bd      	mov	sp, r7
 80092b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b8:	4770      	bx	lr

080092ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80092ba:	b480      	push	{r7}
 80092bc:	b085      	sub	sp, #20
 80092be:	af00      	add	r7, sp, #0
 80092c0:	6078      	str	r0, [r7, #4]
 80092c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	68fa      	ldr	r2, [r7, #12]
 80092ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	689a      	ldr	r2, [r3, #8]
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	689b      	ldr	r3, [r3, #8]
 80092dc:	683a      	ldr	r2, [r7, #0]
 80092de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	683a      	ldr	r2, [r7, #0]
 80092e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	687a      	ldr	r2, [r7, #4]
 80092ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	1c5a      	adds	r2, r3, #1
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	601a      	str	r2, [r3, #0]
}
 80092f6:	bf00      	nop
 80092f8:	3714      	adds	r7, #20
 80092fa:	46bd      	mov	sp, r7
 80092fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009300:	4770      	bx	lr

08009302 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009302:	b480      	push	{r7}
 8009304:	b085      	sub	sp, #20
 8009306:	af00      	add	r7, sp, #0
 8009308:	6078      	str	r0, [r7, #4]
 800930a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009318:	d103      	bne.n	8009322 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	691b      	ldr	r3, [r3, #16]
 800931e:	60fb      	str	r3, [r7, #12]
 8009320:	e00c      	b.n	800933c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	3308      	adds	r3, #8
 8009326:	60fb      	str	r3, [r7, #12]
 8009328:	e002      	b.n	8009330 <vListInsert+0x2e>
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	685b      	ldr	r3, [r3, #4]
 800932e:	60fb      	str	r3, [r7, #12]
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	68ba      	ldr	r2, [r7, #8]
 8009338:	429a      	cmp	r2, r3
 800933a:	d2f6      	bcs.n	800932a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	685a      	ldr	r2, [r3, #4]
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	685b      	ldr	r3, [r3, #4]
 8009348:	683a      	ldr	r2, [r7, #0]
 800934a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	68fa      	ldr	r2, [r7, #12]
 8009350:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	683a      	ldr	r2, [r7, #0]
 8009356:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	687a      	ldr	r2, [r7, #4]
 800935c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	1c5a      	adds	r2, r3, #1
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	601a      	str	r2, [r3, #0]
}
 8009368:	bf00      	nop
 800936a:	3714      	adds	r7, #20
 800936c:	46bd      	mov	sp, r7
 800936e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009372:	4770      	bx	lr

08009374 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009374:	b480      	push	{r7}
 8009376:	b085      	sub	sp, #20
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	691b      	ldr	r3, [r3, #16]
 8009380:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	685b      	ldr	r3, [r3, #4]
 8009386:	687a      	ldr	r2, [r7, #4]
 8009388:	6892      	ldr	r2, [r2, #8]
 800938a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	689b      	ldr	r3, [r3, #8]
 8009390:	687a      	ldr	r2, [r7, #4]
 8009392:	6852      	ldr	r2, [r2, #4]
 8009394:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	685b      	ldr	r3, [r3, #4]
 800939a:	687a      	ldr	r2, [r7, #4]
 800939c:	429a      	cmp	r2, r3
 800939e:	d103      	bne.n	80093a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	689a      	ldr	r2, [r3, #8]
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2200      	movs	r2, #0
 80093ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	1e5a      	subs	r2, r3, #1
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
}
 80093bc:	4618      	mov	r0, r3
 80093be:	3714      	adds	r7, #20
 80093c0:	46bd      	mov	sp, r7
 80093c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c6:	4770      	bx	lr

080093c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b084      	sub	sp, #16
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
 80093d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d10a      	bne.n	80093f2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80093dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e0:	f383 8811 	msr	BASEPRI, r3
 80093e4:	f3bf 8f6f 	isb	sy
 80093e8:	f3bf 8f4f 	dsb	sy
 80093ec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80093ee:	bf00      	nop
 80093f0:	e7fe      	b.n	80093f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80093f2:	f002 f85f 	bl	800b4b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681a      	ldr	r2, [r3, #0]
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093fe:	68f9      	ldr	r1, [r7, #12]
 8009400:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009402:	fb01 f303 	mul.w	r3, r1, r3
 8009406:	441a      	add	r2, r3
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	2200      	movs	r2, #0
 8009410:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681a      	ldr	r2, [r3, #0]
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681a      	ldr	r2, [r3, #0]
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009422:	3b01      	subs	r3, #1
 8009424:	68f9      	ldr	r1, [r7, #12]
 8009426:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009428:	fb01 f303 	mul.w	r3, r1, r3
 800942c:	441a      	add	r2, r3
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	22ff      	movs	r2, #255	; 0xff
 8009436:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	22ff      	movs	r2, #255	; 0xff
 800943e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d114      	bne.n	8009472 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	691b      	ldr	r3, [r3, #16]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d01a      	beq.n	8009486 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	3310      	adds	r3, #16
 8009454:	4618      	mov	r0, r3
 8009456:	f001 fb23 	bl	800aaa0 <xTaskRemoveFromEventList>
 800945a:	4603      	mov	r3, r0
 800945c:	2b00      	cmp	r3, #0
 800945e:	d012      	beq.n	8009486 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009460:	4b0c      	ldr	r3, [pc, #48]	; (8009494 <xQueueGenericReset+0xcc>)
 8009462:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009466:	601a      	str	r2, [r3, #0]
 8009468:	f3bf 8f4f 	dsb	sy
 800946c:	f3bf 8f6f 	isb	sy
 8009470:	e009      	b.n	8009486 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	3310      	adds	r3, #16
 8009476:	4618      	mov	r0, r3
 8009478:	f7ff fef2 	bl	8009260 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	3324      	adds	r3, #36	; 0x24
 8009480:	4618      	mov	r0, r3
 8009482:	f7ff feed 	bl	8009260 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009486:	f002 f845 	bl	800b514 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800948a:	2301      	movs	r3, #1
}
 800948c:	4618      	mov	r0, r3
 800948e:	3710      	adds	r7, #16
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}
 8009494:	e000ed04 	.word	0xe000ed04

08009498 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009498:	b580      	push	{r7, lr}
 800949a:	b08e      	sub	sp, #56	; 0x38
 800949c:	af02      	add	r7, sp, #8
 800949e:	60f8      	str	r0, [r7, #12]
 80094a0:	60b9      	str	r1, [r7, #8]
 80094a2:	607a      	str	r2, [r7, #4]
 80094a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d10a      	bne.n	80094c2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80094ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b0:	f383 8811 	msr	BASEPRI, r3
 80094b4:	f3bf 8f6f 	isb	sy
 80094b8:	f3bf 8f4f 	dsb	sy
 80094bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80094be:	bf00      	nop
 80094c0:	e7fe      	b.n	80094c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d10a      	bne.n	80094de <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80094c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094cc:	f383 8811 	msr	BASEPRI, r3
 80094d0:	f3bf 8f6f 	isb	sy
 80094d4:	f3bf 8f4f 	dsb	sy
 80094d8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80094da:	bf00      	nop
 80094dc:	e7fe      	b.n	80094dc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d002      	beq.n	80094ea <xQueueGenericCreateStatic+0x52>
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d001      	beq.n	80094ee <xQueueGenericCreateStatic+0x56>
 80094ea:	2301      	movs	r3, #1
 80094ec:	e000      	b.n	80094f0 <xQueueGenericCreateStatic+0x58>
 80094ee:	2300      	movs	r3, #0
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d10a      	bne.n	800950a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80094f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094f8:	f383 8811 	msr	BASEPRI, r3
 80094fc:	f3bf 8f6f 	isb	sy
 8009500:	f3bf 8f4f 	dsb	sy
 8009504:	623b      	str	r3, [r7, #32]
}
 8009506:	bf00      	nop
 8009508:	e7fe      	b.n	8009508 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d102      	bne.n	8009516 <xQueueGenericCreateStatic+0x7e>
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d101      	bne.n	800951a <xQueueGenericCreateStatic+0x82>
 8009516:	2301      	movs	r3, #1
 8009518:	e000      	b.n	800951c <xQueueGenericCreateStatic+0x84>
 800951a:	2300      	movs	r3, #0
 800951c:	2b00      	cmp	r3, #0
 800951e:	d10a      	bne.n	8009536 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009524:	f383 8811 	msr	BASEPRI, r3
 8009528:	f3bf 8f6f 	isb	sy
 800952c:	f3bf 8f4f 	dsb	sy
 8009530:	61fb      	str	r3, [r7, #28]
}
 8009532:	bf00      	nop
 8009534:	e7fe      	b.n	8009534 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009536:	2348      	movs	r3, #72	; 0x48
 8009538:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800953a:	697b      	ldr	r3, [r7, #20]
 800953c:	2b48      	cmp	r3, #72	; 0x48
 800953e:	d00a      	beq.n	8009556 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009544:	f383 8811 	msr	BASEPRI, r3
 8009548:	f3bf 8f6f 	isb	sy
 800954c:	f3bf 8f4f 	dsb	sy
 8009550:	61bb      	str	r3, [r7, #24]
}
 8009552:	bf00      	nop
 8009554:	e7fe      	b.n	8009554 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009556:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800955c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800955e:	2b00      	cmp	r3, #0
 8009560:	d00d      	beq.n	800957e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009564:	2201      	movs	r2, #1
 8009566:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800956a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800956e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009570:	9300      	str	r3, [sp, #0]
 8009572:	4613      	mov	r3, r2
 8009574:	687a      	ldr	r2, [r7, #4]
 8009576:	68b9      	ldr	r1, [r7, #8]
 8009578:	68f8      	ldr	r0, [r7, #12]
 800957a:	f000 f83f 	bl	80095fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800957e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009580:	4618      	mov	r0, r3
 8009582:	3730      	adds	r7, #48	; 0x30
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}

08009588 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009588:	b580      	push	{r7, lr}
 800958a:	b08a      	sub	sp, #40	; 0x28
 800958c:	af02      	add	r7, sp, #8
 800958e:	60f8      	str	r0, [r7, #12]
 8009590:	60b9      	str	r1, [r7, #8]
 8009592:	4613      	mov	r3, r2
 8009594:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d10a      	bne.n	80095b2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800959c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a0:	f383 8811 	msr	BASEPRI, r3
 80095a4:	f3bf 8f6f 	isb	sy
 80095a8:	f3bf 8f4f 	dsb	sy
 80095ac:	613b      	str	r3, [r7, #16]
}
 80095ae:	bf00      	nop
 80095b0:	e7fe      	b.n	80095b0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	68ba      	ldr	r2, [r7, #8]
 80095b6:	fb02 f303 	mul.w	r3, r2, r3
 80095ba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80095bc:	69fb      	ldr	r3, [r7, #28]
 80095be:	3348      	adds	r3, #72	; 0x48
 80095c0:	4618      	mov	r0, r3
 80095c2:	f002 f899 	bl	800b6f8 <pvPortMalloc>
 80095c6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80095c8:	69bb      	ldr	r3, [r7, #24]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d011      	beq.n	80095f2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80095ce:	69bb      	ldr	r3, [r7, #24]
 80095d0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	3348      	adds	r3, #72	; 0x48
 80095d6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80095d8:	69bb      	ldr	r3, [r7, #24]
 80095da:	2200      	movs	r2, #0
 80095dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80095e0:	79fa      	ldrb	r2, [r7, #7]
 80095e2:	69bb      	ldr	r3, [r7, #24]
 80095e4:	9300      	str	r3, [sp, #0]
 80095e6:	4613      	mov	r3, r2
 80095e8:	697a      	ldr	r2, [r7, #20]
 80095ea:	68b9      	ldr	r1, [r7, #8]
 80095ec:	68f8      	ldr	r0, [r7, #12]
 80095ee:	f000 f805 	bl	80095fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80095f2:	69bb      	ldr	r3, [r7, #24]
	}
 80095f4:	4618      	mov	r0, r3
 80095f6:	3720      	adds	r7, #32
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}

080095fc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b084      	sub	sp, #16
 8009600:	af00      	add	r7, sp, #0
 8009602:	60f8      	str	r0, [r7, #12]
 8009604:	60b9      	str	r1, [r7, #8]
 8009606:	607a      	str	r2, [r7, #4]
 8009608:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d103      	bne.n	8009618 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009610:	69bb      	ldr	r3, [r7, #24]
 8009612:	69ba      	ldr	r2, [r7, #24]
 8009614:	601a      	str	r2, [r3, #0]
 8009616:	e002      	b.n	800961e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009618:	69bb      	ldr	r3, [r7, #24]
 800961a:	687a      	ldr	r2, [r7, #4]
 800961c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800961e:	69bb      	ldr	r3, [r7, #24]
 8009620:	68fa      	ldr	r2, [r7, #12]
 8009622:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009624:	69bb      	ldr	r3, [r7, #24]
 8009626:	68ba      	ldr	r2, [r7, #8]
 8009628:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800962a:	2101      	movs	r1, #1
 800962c:	69b8      	ldr	r0, [r7, #24]
 800962e:	f7ff fecb 	bl	80093c8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009632:	bf00      	nop
 8009634:	3710      	adds	r7, #16
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}

0800963a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800963a:	b580      	push	{r7, lr}
 800963c:	b082      	sub	sp, #8
 800963e:	af00      	add	r7, sp, #0
 8009640:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d00e      	beq.n	8009666 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2200      	movs	r2, #0
 800964c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2200      	movs	r2, #0
 8009652:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2200      	movs	r2, #0
 8009658:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800965a:	2300      	movs	r3, #0
 800965c:	2200      	movs	r2, #0
 800965e:	2100      	movs	r1, #0
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f000 f837 	bl	80096d4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009666:	bf00      	nop
 8009668:	3708      	adds	r7, #8
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}

0800966e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800966e:	b580      	push	{r7, lr}
 8009670:	b086      	sub	sp, #24
 8009672:	af00      	add	r7, sp, #0
 8009674:	4603      	mov	r3, r0
 8009676:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009678:	2301      	movs	r3, #1
 800967a:	617b      	str	r3, [r7, #20]
 800967c:	2300      	movs	r3, #0
 800967e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009680:	79fb      	ldrb	r3, [r7, #7]
 8009682:	461a      	mov	r2, r3
 8009684:	6939      	ldr	r1, [r7, #16]
 8009686:	6978      	ldr	r0, [r7, #20]
 8009688:	f7ff ff7e 	bl	8009588 <xQueueGenericCreate>
 800968c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800968e:	68f8      	ldr	r0, [r7, #12]
 8009690:	f7ff ffd3 	bl	800963a <prvInitialiseMutex>

		return xNewQueue;
 8009694:	68fb      	ldr	r3, [r7, #12]
	}
 8009696:	4618      	mov	r0, r3
 8009698:	3718      	adds	r7, #24
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}

0800969e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800969e:	b580      	push	{r7, lr}
 80096a0:	b088      	sub	sp, #32
 80096a2:	af02      	add	r7, sp, #8
 80096a4:	4603      	mov	r3, r0
 80096a6:	6039      	str	r1, [r7, #0]
 80096a8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80096aa:	2301      	movs	r3, #1
 80096ac:	617b      	str	r3, [r7, #20]
 80096ae:	2300      	movs	r3, #0
 80096b0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80096b2:	79fb      	ldrb	r3, [r7, #7]
 80096b4:	9300      	str	r3, [sp, #0]
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	2200      	movs	r2, #0
 80096ba:	6939      	ldr	r1, [r7, #16]
 80096bc:	6978      	ldr	r0, [r7, #20]
 80096be:	f7ff feeb 	bl	8009498 <xQueueGenericCreateStatic>
 80096c2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80096c4:	68f8      	ldr	r0, [r7, #12]
 80096c6:	f7ff ffb8 	bl	800963a <prvInitialiseMutex>

		return xNewQueue;
 80096ca:	68fb      	ldr	r3, [r7, #12]
	}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3718      	adds	r7, #24
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}

080096d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b08e      	sub	sp, #56	; 0x38
 80096d8:	af00      	add	r7, sp, #0
 80096da:	60f8      	str	r0, [r7, #12]
 80096dc:	60b9      	str	r1, [r7, #8]
 80096de:	607a      	str	r2, [r7, #4]
 80096e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80096e2:	2300      	movs	r3, #0
 80096e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80096ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d10a      	bne.n	8009706 <xQueueGenericSend+0x32>
	__asm volatile
 80096f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096f4:	f383 8811 	msr	BASEPRI, r3
 80096f8:	f3bf 8f6f 	isb	sy
 80096fc:	f3bf 8f4f 	dsb	sy
 8009700:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009702:	bf00      	nop
 8009704:	e7fe      	b.n	8009704 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d103      	bne.n	8009714 <xQueueGenericSend+0x40>
 800970c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800970e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009710:	2b00      	cmp	r3, #0
 8009712:	d101      	bne.n	8009718 <xQueueGenericSend+0x44>
 8009714:	2301      	movs	r3, #1
 8009716:	e000      	b.n	800971a <xQueueGenericSend+0x46>
 8009718:	2300      	movs	r3, #0
 800971a:	2b00      	cmp	r3, #0
 800971c:	d10a      	bne.n	8009734 <xQueueGenericSend+0x60>
	__asm volatile
 800971e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009722:	f383 8811 	msr	BASEPRI, r3
 8009726:	f3bf 8f6f 	isb	sy
 800972a:	f3bf 8f4f 	dsb	sy
 800972e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009730:	bf00      	nop
 8009732:	e7fe      	b.n	8009732 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	2b02      	cmp	r3, #2
 8009738:	d103      	bne.n	8009742 <xQueueGenericSend+0x6e>
 800973a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800973c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800973e:	2b01      	cmp	r3, #1
 8009740:	d101      	bne.n	8009746 <xQueueGenericSend+0x72>
 8009742:	2301      	movs	r3, #1
 8009744:	e000      	b.n	8009748 <xQueueGenericSend+0x74>
 8009746:	2300      	movs	r3, #0
 8009748:	2b00      	cmp	r3, #0
 800974a:	d10a      	bne.n	8009762 <xQueueGenericSend+0x8e>
	__asm volatile
 800974c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009750:	f383 8811 	msr	BASEPRI, r3
 8009754:	f3bf 8f6f 	isb	sy
 8009758:	f3bf 8f4f 	dsb	sy
 800975c:	623b      	str	r3, [r7, #32]
}
 800975e:	bf00      	nop
 8009760:	e7fe      	b.n	8009760 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009762:	f001 fb59 	bl	800ae18 <xTaskGetSchedulerState>
 8009766:	4603      	mov	r3, r0
 8009768:	2b00      	cmp	r3, #0
 800976a:	d102      	bne.n	8009772 <xQueueGenericSend+0x9e>
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d101      	bne.n	8009776 <xQueueGenericSend+0xa2>
 8009772:	2301      	movs	r3, #1
 8009774:	e000      	b.n	8009778 <xQueueGenericSend+0xa4>
 8009776:	2300      	movs	r3, #0
 8009778:	2b00      	cmp	r3, #0
 800977a:	d10a      	bne.n	8009792 <xQueueGenericSend+0xbe>
	__asm volatile
 800977c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009780:	f383 8811 	msr	BASEPRI, r3
 8009784:	f3bf 8f6f 	isb	sy
 8009788:	f3bf 8f4f 	dsb	sy
 800978c:	61fb      	str	r3, [r7, #28]
}
 800978e:	bf00      	nop
 8009790:	e7fe      	b.n	8009790 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009792:	f001 fe8f 	bl	800b4b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009798:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800979a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800979c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800979e:	429a      	cmp	r2, r3
 80097a0:	d302      	bcc.n	80097a8 <xQueueGenericSend+0xd4>
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	2b02      	cmp	r3, #2
 80097a6:	d129      	bne.n	80097fc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80097a8:	683a      	ldr	r2, [r7, #0]
 80097aa:	68b9      	ldr	r1, [r7, #8]
 80097ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80097ae:	f000 fc3b 	bl	800a028 <prvCopyDataToQueue>
 80097b2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80097b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d010      	beq.n	80097de <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80097bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097be:	3324      	adds	r3, #36	; 0x24
 80097c0:	4618      	mov	r0, r3
 80097c2:	f001 f96d 	bl	800aaa0 <xTaskRemoveFromEventList>
 80097c6:	4603      	mov	r3, r0
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d013      	beq.n	80097f4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80097cc:	4b3f      	ldr	r3, [pc, #252]	; (80098cc <xQueueGenericSend+0x1f8>)
 80097ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097d2:	601a      	str	r2, [r3, #0]
 80097d4:	f3bf 8f4f 	dsb	sy
 80097d8:	f3bf 8f6f 	isb	sy
 80097dc:	e00a      	b.n	80097f4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80097de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d007      	beq.n	80097f4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80097e4:	4b39      	ldr	r3, [pc, #228]	; (80098cc <xQueueGenericSend+0x1f8>)
 80097e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097ea:	601a      	str	r2, [r3, #0]
 80097ec:	f3bf 8f4f 	dsb	sy
 80097f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80097f4:	f001 fe8e 	bl	800b514 <vPortExitCritical>
				return pdPASS;
 80097f8:	2301      	movs	r3, #1
 80097fa:	e063      	b.n	80098c4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d103      	bne.n	800980a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009802:	f001 fe87 	bl	800b514 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009806:	2300      	movs	r3, #0
 8009808:	e05c      	b.n	80098c4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800980a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800980c:	2b00      	cmp	r3, #0
 800980e:	d106      	bne.n	800981e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009810:	f107 0314 	add.w	r3, r7, #20
 8009814:	4618      	mov	r0, r3
 8009816:	f001 f9a5 	bl	800ab64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800981a:	2301      	movs	r3, #1
 800981c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800981e:	f001 fe79 	bl	800b514 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009822:	f000 ff39 	bl	800a698 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009826:	f001 fe45 	bl	800b4b4 <vPortEnterCritical>
 800982a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800982c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009830:	b25b      	sxtb	r3, r3
 8009832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009836:	d103      	bne.n	8009840 <xQueueGenericSend+0x16c>
 8009838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800983a:	2200      	movs	r2, #0
 800983c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009842:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009846:	b25b      	sxtb	r3, r3
 8009848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800984c:	d103      	bne.n	8009856 <xQueueGenericSend+0x182>
 800984e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009850:	2200      	movs	r2, #0
 8009852:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009856:	f001 fe5d 	bl	800b514 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800985a:	1d3a      	adds	r2, r7, #4
 800985c:	f107 0314 	add.w	r3, r7, #20
 8009860:	4611      	mov	r1, r2
 8009862:	4618      	mov	r0, r3
 8009864:	f001 f994 	bl	800ab90 <xTaskCheckForTimeOut>
 8009868:	4603      	mov	r3, r0
 800986a:	2b00      	cmp	r3, #0
 800986c:	d124      	bne.n	80098b8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800986e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009870:	f000 fcd2 	bl	800a218 <prvIsQueueFull>
 8009874:	4603      	mov	r3, r0
 8009876:	2b00      	cmp	r3, #0
 8009878:	d018      	beq.n	80098ac <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800987a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800987c:	3310      	adds	r3, #16
 800987e:	687a      	ldr	r2, [r7, #4]
 8009880:	4611      	mov	r1, r2
 8009882:	4618      	mov	r0, r3
 8009884:	f001 f8e8 	bl	800aa58 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009888:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800988a:	f000 fc5d 	bl	800a148 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800988e:	f000 ff11 	bl	800a6b4 <xTaskResumeAll>
 8009892:	4603      	mov	r3, r0
 8009894:	2b00      	cmp	r3, #0
 8009896:	f47f af7c 	bne.w	8009792 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800989a:	4b0c      	ldr	r3, [pc, #48]	; (80098cc <xQueueGenericSend+0x1f8>)
 800989c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098a0:	601a      	str	r2, [r3, #0]
 80098a2:	f3bf 8f4f 	dsb	sy
 80098a6:	f3bf 8f6f 	isb	sy
 80098aa:	e772      	b.n	8009792 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80098ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80098ae:	f000 fc4b 	bl	800a148 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80098b2:	f000 feff 	bl	800a6b4 <xTaskResumeAll>
 80098b6:	e76c      	b.n	8009792 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80098b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80098ba:	f000 fc45 	bl	800a148 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80098be:	f000 fef9 	bl	800a6b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80098c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3738      	adds	r7, #56	; 0x38
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}
 80098cc:	e000ed04 	.word	0xe000ed04

080098d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b090      	sub	sp, #64	; 0x40
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	60f8      	str	r0, [r7, #12]
 80098d8:	60b9      	str	r1, [r7, #8]
 80098da:	607a      	str	r2, [r7, #4]
 80098dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80098e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d10a      	bne.n	80098fe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80098e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ec:	f383 8811 	msr	BASEPRI, r3
 80098f0:	f3bf 8f6f 	isb	sy
 80098f4:	f3bf 8f4f 	dsb	sy
 80098f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80098fa:	bf00      	nop
 80098fc:	e7fe      	b.n	80098fc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d103      	bne.n	800990c <xQueueGenericSendFromISR+0x3c>
 8009904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009908:	2b00      	cmp	r3, #0
 800990a:	d101      	bne.n	8009910 <xQueueGenericSendFromISR+0x40>
 800990c:	2301      	movs	r3, #1
 800990e:	e000      	b.n	8009912 <xQueueGenericSendFromISR+0x42>
 8009910:	2300      	movs	r3, #0
 8009912:	2b00      	cmp	r3, #0
 8009914:	d10a      	bne.n	800992c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800991a:	f383 8811 	msr	BASEPRI, r3
 800991e:	f3bf 8f6f 	isb	sy
 8009922:	f3bf 8f4f 	dsb	sy
 8009926:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009928:	bf00      	nop
 800992a:	e7fe      	b.n	800992a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	2b02      	cmp	r3, #2
 8009930:	d103      	bne.n	800993a <xQueueGenericSendFromISR+0x6a>
 8009932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009936:	2b01      	cmp	r3, #1
 8009938:	d101      	bne.n	800993e <xQueueGenericSendFromISR+0x6e>
 800993a:	2301      	movs	r3, #1
 800993c:	e000      	b.n	8009940 <xQueueGenericSendFromISR+0x70>
 800993e:	2300      	movs	r3, #0
 8009940:	2b00      	cmp	r3, #0
 8009942:	d10a      	bne.n	800995a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009948:	f383 8811 	msr	BASEPRI, r3
 800994c:	f3bf 8f6f 	isb	sy
 8009950:	f3bf 8f4f 	dsb	sy
 8009954:	623b      	str	r3, [r7, #32]
}
 8009956:	bf00      	nop
 8009958:	e7fe      	b.n	8009958 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800995a:	f001 fe8d 	bl	800b678 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800995e:	f3ef 8211 	mrs	r2, BASEPRI
 8009962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009966:	f383 8811 	msr	BASEPRI, r3
 800996a:	f3bf 8f6f 	isb	sy
 800996e:	f3bf 8f4f 	dsb	sy
 8009972:	61fa      	str	r2, [r7, #28]
 8009974:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009976:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009978:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800997a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800997c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800997e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009982:	429a      	cmp	r2, r3
 8009984:	d302      	bcc.n	800998c <xQueueGenericSendFromISR+0xbc>
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	2b02      	cmp	r3, #2
 800998a:	d12f      	bne.n	80099ec <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800998c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800998e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009992:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800999a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800999c:	683a      	ldr	r2, [r7, #0]
 800999e:	68b9      	ldr	r1, [r7, #8]
 80099a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80099a2:	f000 fb41 	bl	800a028 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80099a6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80099aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099ae:	d112      	bne.n	80099d6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80099b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d016      	beq.n	80099e6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80099b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ba:	3324      	adds	r3, #36	; 0x24
 80099bc:	4618      	mov	r0, r3
 80099be:	f001 f86f 	bl	800aaa0 <xTaskRemoveFromEventList>
 80099c2:	4603      	mov	r3, r0
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d00e      	beq.n	80099e6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d00b      	beq.n	80099e6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2201      	movs	r2, #1
 80099d2:	601a      	str	r2, [r3, #0]
 80099d4:	e007      	b.n	80099e6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80099d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80099da:	3301      	adds	r3, #1
 80099dc:	b2db      	uxtb	r3, r3
 80099de:	b25a      	sxtb	r2, r3
 80099e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80099e6:	2301      	movs	r3, #1
 80099e8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80099ea:	e001      	b.n	80099f0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80099ec:	2300      	movs	r3, #0
 80099ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099f2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80099fa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80099fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3740      	adds	r7, #64	; 0x40
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}

08009a06 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009a06:	b580      	push	{r7, lr}
 8009a08:	b08e      	sub	sp, #56	; 0x38
 8009a0a:	af00      	add	r7, sp, #0
 8009a0c:	6078      	str	r0, [r7, #4]
 8009a0e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d10a      	bne.n	8009a30 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8009a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a1e:	f383 8811 	msr	BASEPRI, r3
 8009a22:	f3bf 8f6f 	isb	sy
 8009a26:	f3bf 8f4f 	dsb	sy
 8009a2a:	623b      	str	r3, [r7, #32]
}
 8009a2c:	bf00      	nop
 8009a2e:	e7fe      	b.n	8009a2e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d00a      	beq.n	8009a4e <xQueueGiveFromISR+0x48>
	__asm volatile
 8009a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a3c:	f383 8811 	msr	BASEPRI, r3
 8009a40:	f3bf 8f6f 	isb	sy
 8009a44:	f3bf 8f4f 	dsb	sy
 8009a48:	61fb      	str	r3, [r7, #28]
}
 8009a4a:	bf00      	nop
 8009a4c:	e7fe      	b.n	8009a4c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d103      	bne.n	8009a5e <xQueueGiveFromISR+0x58>
 8009a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a58:	689b      	ldr	r3, [r3, #8]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d101      	bne.n	8009a62 <xQueueGiveFromISR+0x5c>
 8009a5e:	2301      	movs	r3, #1
 8009a60:	e000      	b.n	8009a64 <xQueueGiveFromISR+0x5e>
 8009a62:	2300      	movs	r3, #0
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d10a      	bne.n	8009a7e <xQueueGiveFromISR+0x78>
	__asm volatile
 8009a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a6c:	f383 8811 	msr	BASEPRI, r3
 8009a70:	f3bf 8f6f 	isb	sy
 8009a74:	f3bf 8f4f 	dsb	sy
 8009a78:	61bb      	str	r3, [r7, #24]
}
 8009a7a:	bf00      	nop
 8009a7c:	e7fe      	b.n	8009a7c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009a7e:	f001 fdfb 	bl	800b678 <vPortValidateInterruptPriority>
	__asm volatile
 8009a82:	f3ef 8211 	mrs	r2, BASEPRI
 8009a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a8a:	f383 8811 	msr	BASEPRI, r3
 8009a8e:	f3bf 8f6f 	isb	sy
 8009a92:	f3bf 8f4f 	dsb	sy
 8009a96:	617a      	str	r2, [r7, #20]
 8009a98:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009a9a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aa2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009aa8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009aaa:	429a      	cmp	r2, r3
 8009aac:	d22b      	bcs.n	8009b06 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ab0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009ab4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aba:	1c5a      	adds	r2, r3, #1
 8009abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009abe:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009ac0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ac8:	d112      	bne.n	8009af0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d016      	beq.n	8009b00 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ad4:	3324      	adds	r3, #36	; 0x24
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f000 ffe2 	bl	800aaa0 <xTaskRemoveFromEventList>
 8009adc:	4603      	mov	r3, r0
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d00e      	beq.n	8009b00 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d00b      	beq.n	8009b00 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	2201      	movs	r2, #1
 8009aec:	601a      	str	r2, [r3, #0]
 8009aee:	e007      	b.n	8009b00 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009af0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009af4:	3301      	adds	r3, #1
 8009af6:	b2db      	uxtb	r3, r3
 8009af8:	b25a      	sxtb	r2, r3
 8009afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009afc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009b00:	2301      	movs	r3, #1
 8009b02:	637b      	str	r3, [r7, #52]	; 0x34
 8009b04:	e001      	b.n	8009b0a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009b06:	2300      	movs	r3, #0
 8009b08:	637b      	str	r3, [r7, #52]	; 0x34
 8009b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b0c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	f383 8811 	msr	BASEPRI, r3
}
 8009b14:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	3738      	adds	r7, #56	; 0x38
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}

08009b20 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b08c      	sub	sp, #48	; 0x30
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	60f8      	str	r0, [r7, #12]
 8009b28:	60b9      	str	r1, [r7, #8]
 8009b2a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d10a      	bne.n	8009b50 <xQueueReceive+0x30>
	__asm volatile
 8009b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b3e:	f383 8811 	msr	BASEPRI, r3
 8009b42:	f3bf 8f6f 	isb	sy
 8009b46:	f3bf 8f4f 	dsb	sy
 8009b4a:	623b      	str	r3, [r7, #32]
}
 8009b4c:	bf00      	nop
 8009b4e:	e7fe      	b.n	8009b4e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d103      	bne.n	8009b5e <xQueueReceive+0x3e>
 8009b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d101      	bne.n	8009b62 <xQueueReceive+0x42>
 8009b5e:	2301      	movs	r3, #1
 8009b60:	e000      	b.n	8009b64 <xQueueReceive+0x44>
 8009b62:	2300      	movs	r3, #0
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d10a      	bne.n	8009b7e <xQueueReceive+0x5e>
	__asm volatile
 8009b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b6c:	f383 8811 	msr	BASEPRI, r3
 8009b70:	f3bf 8f6f 	isb	sy
 8009b74:	f3bf 8f4f 	dsb	sy
 8009b78:	61fb      	str	r3, [r7, #28]
}
 8009b7a:	bf00      	nop
 8009b7c:	e7fe      	b.n	8009b7c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009b7e:	f001 f94b 	bl	800ae18 <xTaskGetSchedulerState>
 8009b82:	4603      	mov	r3, r0
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d102      	bne.n	8009b8e <xQueueReceive+0x6e>
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d101      	bne.n	8009b92 <xQueueReceive+0x72>
 8009b8e:	2301      	movs	r3, #1
 8009b90:	e000      	b.n	8009b94 <xQueueReceive+0x74>
 8009b92:	2300      	movs	r3, #0
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d10a      	bne.n	8009bae <xQueueReceive+0x8e>
	__asm volatile
 8009b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b9c:	f383 8811 	msr	BASEPRI, r3
 8009ba0:	f3bf 8f6f 	isb	sy
 8009ba4:	f3bf 8f4f 	dsb	sy
 8009ba8:	61bb      	str	r3, [r7, #24]
}
 8009baa:	bf00      	nop
 8009bac:	e7fe      	b.n	8009bac <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009bae:	f001 fc81 	bl	800b4b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bb6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d01f      	beq.n	8009bfe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009bbe:	68b9      	ldr	r1, [r7, #8]
 8009bc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009bc2:	f000 fa9b 	bl	800a0fc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc8:	1e5a      	subs	r2, r3, #1
 8009bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bcc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bd0:	691b      	ldr	r3, [r3, #16]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d00f      	beq.n	8009bf6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bd8:	3310      	adds	r3, #16
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f000 ff60 	bl	800aaa0 <xTaskRemoveFromEventList>
 8009be0:	4603      	mov	r3, r0
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d007      	beq.n	8009bf6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009be6:	4b3d      	ldr	r3, [pc, #244]	; (8009cdc <xQueueReceive+0x1bc>)
 8009be8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bec:	601a      	str	r2, [r3, #0]
 8009bee:	f3bf 8f4f 	dsb	sy
 8009bf2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009bf6:	f001 fc8d 	bl	800b514 <vPortExitCritical>
				return pdPASS;
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	e069      	b.n	8009cd2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d103      	bne.n	8009c0c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009c04:	f001 fc86 	bl	800b514 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	e062      	b.n	8009cd2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d106      	bne.n	8009c20 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009c12:	f107 0310 	add.w	r3, r7, #16
 8009c16:	4618      	mov	r0, r3
 8009c18:	f000 ffa4 	bl	800ab64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009c20:	f001 fc78 	bl	800b514 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009c24:	f000 fd38 	bl	800a698 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009c28:	f001 fc44 	bl	800b4b4 <vPortEnterCritical>
 8009c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c32:	b25b      	sxtb	r3, r3
 8009c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c38:	d103      	bne.n	8009c42 <xQueueReceive+0x122>
 8009c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c48:	b25b      	sxtb	r3, r3
 8009c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c4e:	d103      	bne.n	8009c58 <xQueueReceive+0x138>
 8009c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c52:	2200      	movs	r2, #0
 8009c54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009c58:	f001 fc5c 	bl	800b514 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009c5c:	1d3a      	adds	r2, r7, #4
 8009c5e:	f107 0310 	add.w	r3, r7, #16
 8009c62:	4611      	mov	r1, r2
 8009c64:	4618      	mov	r0, r3
 8009c66:	f000 ff93 	bl	800ab90 <xTaskCheckForTimeOut>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d123      	bne.n	8009cb8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009c70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c72:	f000 fabb 	bl	800a1ec <prvIsQueueEmpty>
 8009c76:	4603      	mov	r3, r0
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d017      	beq.n	8009cac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c7e:	3324      	adds	r3, #36	; 0x24
 8009c80:	687a      	ldr	r2, [r7, #4]
 8009c82:	4611      	mov	r1, r2
 8009c84:	4618      	mov	r0, r3
 8009c86:	f000 fee7 	bl	800aa58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009c8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c8c:	f000 fa5c 	bl	800a148 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009c90:	f000 fd10 	bl	800a6b4 <xTaskResumeAll>
 8009c94:	4603      	mov	r3, r0
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d189      	bne.n	8009bae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009c9a:	4b10      	ldr	r3, [pc, #64]	; (8009cdc <xQueueReceive+0x1bc>)
 8009c9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ca0:	601a      	str	r2, [r3, #0]
 8009ca2:	f3bf 8f4f 	dsb	sy
 8009ca6:	f3bf 8f6f 	isb	sy
 8009caa:	e780      	b.n	8009bae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009cac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cae:	f000 fa4b 	bl	800a148 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009cb2:	f000 fcff 	bl	800a6b4 <xTaskResumeAll>
 8009cb6:	e77a      	b.n	8009bae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009cb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cba:	f000 fa45 	bl	800a148 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009cbe:	f000 fcf9 	bl	800a6b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009cc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cc4:	f000 fa92 	bl	800a1ec <prvIsQueueEmpty>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	f43f af6f 	beq.w	8009bae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009cd0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3730      	adds	r7, #48	; 0x30
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}
 8009cda:	bf00      	nop
 8009cdc:	e000ed04 	.word	0xe000ed04

08009ce0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b08e      	sub	sp, #56	; 0x38
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
 8009ce8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009cea:	2300      	movs	r3, #0
 8009cec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d10a      	bne.n	8009d12 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8009cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d00:	f383 8811 	msr	BASEPRI, r3
 8009d04:	f3bf 8f6f 	isb	sy
 8009d08:	f3bf 8f4f 	dsb	sy
 8009d0c:	623b      	str	r3, [r7, #32]
}
 8009d0e:	bf00      	nop
 8009d10:	e7fe      	b.n	8009d10 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d00a      	beq.n	8009d30 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8009d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d1e:	f383 8811 	msr	BASEPRI, r3
 8009d22:	f3bf 8f6f 	isb	sy
 8009d26:	f3bf 8f4f 	dsb	sy
 8009d2a:	61fb      	str	r3, [r7, #28]
}
 8009d2c:	bf00      	nop
 8009d2e:	e7fe      	b.n	8009d2e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009d30:	f001 f872 	bl	800ae18 <xTaskGetSchedulerState>
 8009d34:	4603      	mov	r3, r0
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d102      	bne.n	8009d40 <xQueueSemaphoreTake+0x60>
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d101      	bne.n	8009d44 <xQueueSemaphoreTake+0x64>
 8009d40:	2301      	movs	r3, #1
 8009d42:	e000      	b.n	8009d46 <xQueueSemaphoreTake+0x66>
 8009d44:	2300      	movs	r3, #0
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d10a      	bne.n	8009d60 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8009d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d4e:	f383 8811 	msr	BASEPRI, r3
 8009d52:	f3bf 8f6f 	isb	sy
 8009d56:	f3bf 8f4f 	dsb	sy
 8009d5a:	61bb      	str	r3, [r7, #24]
}
 8009d5c:	bf00      	nop
 8009d5e:	e7fe      	b.n	8009d5e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009d60:	f001 fba8 	bl	800b4b4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d68:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d024      	beq.n	8009dba <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d72:	1e5a      	subs	r2, r3, #1
 8009d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d76:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d104      	bne.n	8009d8a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009d80:	f001 f9f2 	bl	800b168 <pvTaskIncrementMutexHeldCount>
 8009d84:	4602      	mov	r2, r0
 8009d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d88:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d8c:	691b      	ldr	r3, [r3, #16]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d00f      	beq.n	8009db2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d94:	3310      	adds	r3, #16
 8009d96:	4618      	mov	r0, r3
 8009d98:	f000 fe82 	bl	800aaa0 <xTaskRemoveFromEventList>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d007      	beq.n	8009db2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009da2:	4b54      	ldr	r3, [pc, #336]	; (8009ef4 <xQueueSemaphoreTake+0x214>)
 8009da4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009da8:	601a      	str	r2, [r3, #0]
 8009daa:	f3bf 8f4f 	dsb	sy
 8009dae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009db2:	f001 fbaf 	bl	800b514 <vPortExitCritical>
				return pdPASS;
 8009db6:	2301      	movs	r3, #1
 8009db8:	e097      	b.n	8009eea <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d111      	bne.n	8009de4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d00a      	beq.n	8009ddc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8009dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dca:	f383 8811 	msr	BASEPRI, r3
 8009dce:	f3bf 8f6f 	isb	sy
 8009dd2:	f3bf 8f4f 	dsb	sy
 8009dd6:	617b      	str	r3, [r7, #20]
}
 8009dd8:	bf00      	nop
 8009dda:	e7fe      	b.n	8009dda <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009ddc:	f001 fb9a 	bl	800b514 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009de0:	2300      	movs	r3, #0
 8009de2:	e082      	b.n	8009eea <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d106      	bne.n	8009df8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009dea:	f107 030c 	add.w	r3, r7, #12
 8009dee:	4618      	mov	r0, r3
 8009df0:	f000 feb8 	bl	800ab64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009df4:	2301      	movs	r3, #1
 8009df6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009df8:	f001 fb8c 	bl	800b514 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009dfc:	f000 fc4c 	bl	800a698 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009e00:	f001 fb58 	bl	800b4b4 <vPortEnterCritical>
 8009e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e0a:	b25b      	sxtb	r3, r3
 8009e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e10:	d103      	bne.n	8009e1a <xQueueSemaphoreTake+0x13a>
 8009e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e14:	2200      	movs	r2, #0
 8009e16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e20:	b25b      	sxtb	r3, r3
 8009e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e26:	d103      	bne.n	8009e30 <xQueueSemaphoreTake+0x150>
 8009e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009e30:	f001 fb70 	bl	800b514 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009e34:	463a      	mov	r2, r7
 8009e36:	f107 030c 	add.w	r3, r7, #12
 8009e3a:	4611      	mov	r1, r2
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	f000 fea7 	bl	800ab90 <xTaskCheckForTimeOut>
 8009e42:	4603      	mov	r3, r0
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d132      	bne.n	8009eae <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009e48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009e4a:	f000 f9cf 	bl	800a1ec <prvIsQueueEmpty>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d026      	beq.n	8009ea2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d109      	bne.n	8009e70 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8009e5c:	f001 fb2a 	bl	800b4b4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e62:	689b      	ldr	r3, [r3, #8]
 8009e64:	4618      	mov	r0, r3
 8009e66:	f000 fff5 	bl	800ae54 <xTaskPriorityInherit>
 8009e6a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009e6c:	f001 fb52 	bl	800b514 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e72:	3324      	adds	r3, #36	; 0x24
 8009e74:	683a      	ldr	r2, [r7, #0]
 8009e76:	4611      	mov	r1, r2
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f000 fded 	bl	800aa58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009e7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009e80:	f000 f962 	bl	800a148 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009e84:	f000 fc16 	bl	800a6b4 <xTaskResumeAll>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	f47f af68 	bne.w	8009d60 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8009e90:	4b18      	ldr	r3, [pc, #96]	; (8009ef4 <xQueueSemaphoreTake+0x214>)
 8009e92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e96:	601a      	str	r2, [r3, #0]
 8009e98:	f3bf 8f4f 	dsb	sy
 8009e9c:	f3bf 8f6f 	isb	sy
 8009ea0:	e75e      	b.n	8009d60 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009ea2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009ea4:	f000 f950 	bl	800a148 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009ea8:	f000 fc04 	bl	800a6b4 <xTaskResumeAll>
 8009eac:	e758      	b.n	8009d60 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009eae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009eb0:	f000 f94a 	bl	800a148 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009eb4:	f000 fbfe 	bl	800a6b4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009eb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009eba:	f000 f997 	bl	800a1ec <prvIsQueueEmpty>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	f43f af4d 	beq.w	8009d60 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d00d      	beq.n	8009ee8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8009ecc:	f001 faf2 	bl	800b4b4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009ed0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009ed2:	f000 f891 	bl	8009ff8 <prvGetDisinheritPriorityAfterTimeout>
 8009ed6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eda:	689b      	ldr	r3, [r3, #8]
 8009edc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009ede:	4618      	mov	r0, r3
 8009ee0:	f001 f8b4 	bl	800b04c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009ee4:	f001 fb16 	bl	800b514 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009ee8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009eea:	4618      	mov	r0, r3
 8009eec:	3738      	adds	r7, #56	; 0x38
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd80      	pop	{r7, pc}
 8009ef2:	bf00      	nop
 8009ef4:	e000ed04 	.word	0xe000ed04

08009ef8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b08e      	sub	sp, #56	; 0x38
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	60f8      	str	r0, [r7, #12]
 8009f00:	60b9      	str	r1, [r7, #8]
 8009f02:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d10a      	bne.n	8009f24 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8009f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f12:	f383 8811 	msr	BASEPRI, r3
 8009f16:	f3bf 8f6f 	isb	sy
 8009f1a:	f3bf 8f4f 	dsb	sy
 8009f1e:	623b      	str	r3, [r7, #32]
}
 8009f20:	bf00      	nop
 8009f22:	e7fe      	b.n	8009f22 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d103      	bne.n	8009f32 <xQueueReceiveFromISR+0x3a>
 8009f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d101      	bne.n	8009f36 <xQueueReceiveFromISR+0x3e>
 8009f32:	2301      	movs	r3, #1
 8009f34:	e000      	b.n	8009f38 <xQueueReceiveFromISR+0x40>
 8009f36:	2300      	movs	r3, #0
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d10a      	bne.n	8009f52 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8009f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f40:	f383 8811 	msr	BASEPRI, r3
 8009f44:	f3bf 8f6f 	isb	sy
 8009f48:	f3bf 8f4f 	dsb	sy
 8009f4c:	61fb      	str	r3, [r7, #28]
}
 8009f4e:	bf00      	nop
 8009f50:	e7fe      	b.n	8009f50 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009f52:	f001 fb91 	bl	800b678 <vPortValidateInterruptPriority>
	__asm volatile
 8009f56:	f3ef 8211 	mrs	r2, BASEPRI
 8009f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f5e:	f383 8811 	msr	BASEPRI, r3
 8009f62:	f3bf 8f6f 	isb	sy
 8009f66:	f3bf 8f4f 	dsb	sy
 8009f6a:	61ba      	str	r2, [r7, #24]
 8009f6c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009f6e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009f70:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f76:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d02f      	beq.n	8009fde <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009f88:	68b9      	ldr	r1, [r7, #8]
 8009f8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f8c:	f000 f8b6 	bl	800a0fc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f92:	1e5a      	subs	r2, r3, #1
 8009f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f96:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009f98:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fa0:	d112      	bne.n	8009fc8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fa4:	691b      	ldr	r3, [r3, #16]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d016      	beq.n	8009fd8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fac:	3310      	adds	r3, #16
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f000 fd76 	bl	800aaa0 <xTaskRemoveFromEventList>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d00e      	beq.n	8009fd8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d00b      	beq.n	8009fd8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	601a      	str	r2, [r3, #0]
 8009fc6:	e007      	b.n	8009fd8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009fc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009fcc:	3301      	adds	r3, #1
 8009fce:	b2db      	uxtb	r3, r3
 8009fd0:	b25a      	sxtb	r2, r3
 8009fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009fd8:	2301      	movs	r3, #1
 8009fda:	637b      	str	r3, [r7, #52]	; 0x34
 8009fdc:	e001      	b.n	8009fe2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	637b      	str	r3, [r7, #52]	; 0x34
 8009fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fe4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009fe6:	693b      	ldr	r3, [r7, #16]
 8009fe8:	f383 8811 	msr	BASEPRI, r3
}
 8009fec:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	3738      	adds	r7, #56	; 0x38
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	bd80      	pop	{r7, pc}

08009ff8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009ff8:	b480      	push	{r7}
 8009ffa:	b085      	sub	sp, #20
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a004:	2b00      	cmp	r3, #0
 800a006:	d006      	beq.n	800a016 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f1c3 0307 	rsb	r3, r3, #7
 800a012:	60fb      	str	r3, [r7, #12]
 800a014:	e001      	b.n	800a01a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a016:	2300      	movs	r3, #0
 800a018:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a01a:	68fb      	ldr	r3, [r7, #12]
	}
 800a01c:	4618      	mov	r0, r3
 800a01e:	3714      	adds	r7, #20
 800a020:	46bd      	mov	sp, r7
 800a022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a026:	4770      	bx	lr

0800a028 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b086      	sub	sp, #24
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	60f8      	str	r0, [r7, #12]
 800a030:	60b9      	str	r1, [r7, #8]
 800a032:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a034:	2300      	movs	r3, #0
 800a036:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a03c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a042:	2b00      	cmp	r3, #0
 800a044:	d10d      	bne.n	800a062 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d14d      	bne.n	800a0ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	689b      	ldr	r3, [r3, #8]
 800a052:	4618      	mov	r0, r3
 800a054:	f000 ff74 	bl	800af40 <xTaskPriorityDisinherit>
 800a058:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	2200      	movs	r2, #0
 800a05e:	609a      	str	r2, [r3, #8]
 800a060:	e043      	b.n	800a0ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d119      	bne.n	800a09c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	6858      	ldr	r0, [r3, #4]
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a070:	461a      	mov	r2, r3
 800a072:	68b9      	ldr	r1, [r7, #8]
 800a074:	f00c fa30 	bl	80164d8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	685a      	ldr	r2, [r3, #4]
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a080:	441a      	add	r2, r3
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	685a      	ldr	r2, [r3, #4]
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	689b      	ldr	r3, [r3, #8]
 800a08e:	429a      	cmp	r2, r3
 800a090:	d32b      	bcc.n	800a0ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	681a      	ldr	r2, [r3, #0]
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	605a      	str	r2, [r3, #4]
 800a09a:	e026      	b.n	800a0ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	68d8      	ldr	r0, [r3, #12]
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0a4:	461a      	mov	r2, r3
 800a0a6:	68b9      	ldr	r1, [r7, #8]
 800a0a8:	f00c fa16 	bl	80164d8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	68da      	ldr	r2, [r3, #12]
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0b4:	425b      	negs	r3, r3
 800a0b6:	441a      	add	r2, r3
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	68da      	ldr	r2, [r3, #12]
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	429a      	cmp	r2, r3
 800a0c6:	d207      	bcs.n	800a0d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	689a      	ldr	r2, [r3, #8]
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0d0:	425b      	negs	r3, r3
 800a0d2:	441a      	add	r2, r3
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2b02      	cmp	r3, #2
 800a0dc:	d105      	bne.n	800a0ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a0de:	693b      	ldr	r3, [r7, #16]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d002      	beq.n	800a0ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a0e4:	693b      	ldr	r3, [r7, #16]
 800a0e6:	3b01      	subs	r3, #1
 800a0e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a0ea:	693b      	ldr	r3, [r7, #16]
 800a0ec:	1c5a      	adds	r2, r3, #1
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a0f2:	697b      	ldr	r3, [r7, #20]
}
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	3718      	adds	r7, #24
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bd80      	pop	{r7, pc}

0800a0fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b082      	sub	sp, #8
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
 800a104:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d018      	beq.n	800a140 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	68da      	ldr	r2, [r3, #12]
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a116:	441a      	add	r2, r3
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	68da      	ldr	r2, [r3, #12]
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	689b      	ldr	r3, [r3, #8]
 800a124:	429a      	cmp	r2, r3
 800a126:	d303      	bcc.n	800a130 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681a      	ldr	r2, [r3, #0]
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	68d9      	ldr	r1, [r3, #12]
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a138:	461a      	mov	r2, r3
 800a13a:	6838      	ldr	r0, [r7, #0]
 800a13c:	f00c f9cc 	bl	80164d8 <memcpy>
	}
}
 800a140:	bf00      	nop
 800a142:	3708      	adds	r7, #8
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}

0800a148 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b084      	sub	sp, #16
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a150:	f001 f9b0 	bl	800b4b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a15a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a15c:	e011      	b.n	800a182 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a162:	2b00      	cmp	r3, #0
 800a164:	d012      	beq.n	800a18c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	3324      	adds	r3, #36	; 0x24
 800a16a:	4618      	mov	r0, r3
 800a16c:	f000 fc98 	bl	800aaa0 <xTaskRemoveFromEventList>
 800a170:	4603      	mov	r3, r0
 800a172:	2b00      	cmp	r3, #0
 800a174:	d001      	beq.n	800a17a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a176:	f000 fd6d 	bl	800ac54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a17a:	7bfb      	ldrb	r3, [r7, #15]
 800a17c:	3b01      	subs	r3, #1
 800a17e:	b2db      	uxtb	r3, r3
 800a180:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a186:	2b00      	cmp	r3, #0
 800a188:	dce9      	bgt.n	800a15e <prvUnlockQueue+0x16>
 800a18a:	e000      	b.n	800a18e <prvUnlockQueue+0x46>
					break;
 800a18c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	22ff      	movs	r2, #255	; 0xff
 800a192:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a196:	f001 f9bd 	bl	800b514 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a19a:	f001 f98b 	bl	800b4b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a1a4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a1a6:	e011      	b.n	800a1cc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	691b      	ldr	r3, [r3, #16]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d012      	beq.n	800a1d6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	3310      	adds	r3, #16
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	f000 fc73 	bl	800aaa0 <xTaskRemoveFromEventList>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d001      	beq.n	800a1c4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a1c0:	f000 fd48 	bl	800ac54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a1c4:	7bbb      	ldrb	r3, [r7, #14]
 800a1c6:	3b01      	subs	r3, #1
 800a1c8:	b2db      	uxtb	r3, r3
 800a1ca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a1cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	dce9      	bgt.n	800a1a8 <prvUnlockQueue+0x60>
 800a1d4:	e000      	b.n	800a1d8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a1d6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	22ff      	movs	r2, #255	; 0xff
 800a1dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a1e0:	f001 f998 	bl	800b514 <vPortExitCritical>
}
 800a1e4:	bf00      	nop
 800a1e6:	3710      	adds	r7, #16
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}

0800a1ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b084      	sub	sp, #16
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a1f4:	f001 f95e 	bl	800b4b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d102      	bne.n	800a206 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a200:	2301      	movs	r3, #1
 800a202:	60fb      	str	r3, [r7, #12]
 800a204:	e001      	b.n	800a20a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a206:	2300      	movs	r3, #0
 800a208:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a20a:	f001 f983 	bl	800b514 <vPortExitCritical>

	return xReturn;
 800a20e:	68fb      	ldr	r3, [r7, #12]
}
 800a210:	4618      	mov	r0, r3
 800a212:	3710      	adds	r7, #16
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}

0800a218 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b084      	sub	sp, #16
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a220:	f001 f948 	bl	800b4b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a22c:	429a      	cmp	r2, r3
 800a22e:	d102      	bne.n	800a236 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a230:	2301      	movs	r3, #1
 800a232:	60fb      	str	r3, [r7, #12]
 800a234:	e001      	b.n	800a23a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a236:	2300      	movs	r3, #0
 800a238:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a23a:	f001 f96b 	bl	800b514 <vPortExitCritical>

	return xReturn;
 800a23e:	68fb      	ldr	r3, [r7, #12]
}
 800a240:	4618      	mov	r0, r3
 800a242:	3710      	adds	r7, #16
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}

0800a248 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b08e      	sub	sp, #56	; 0x38
 800a24c:	af04      	add	r7, sp, #16
 800a24e:	60f8      	str	r0, [r7, #12]
 800a250:	60b9      	str	r1, [r7, #8]
 800a252:	607a      	str	r2, [r7, #4]
 800a254:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d10a      	bne.n	800a272 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a25c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a260:	f383 8811 	msr	BASEPRI, r3
 800a264:	f3bf 8f6f 	isb	sy
 800a268:	f3bf 8f4f 	dsb	sy
 800a26c:	623b      	str	r3, [r7, #32]
}
 800a26e:	bf00      	nop
 800a270:	e7fe      	b.n	800a270 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a274:	2b00      	cmp	r3, #0
 800a276:	d10a      	bne.n	800a28e <xTaskCreateStatic+0x46>
	__asm volatile
 800a278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a27c:	f383 8811 	msr	BASEPRI, r3
 800a280:	f3bf 8f6f 	isb	sy
 800a284:	f3bf 8f4f 	dsb	sy
 800a288:	61fb      	str	r3, [r7, #28]
}
 800a28a:	bf00      	nop
 800a28c:	e7fe      	b.n	800a28c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a28e:	2354      	movs	r3, #84	; 0x54
 800a290:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	2b54      	cmp	r3, #84	; 0x54
 800a296:	d00a      	beq.n	800a2ae <xTaskCreateStatic+0x66>
	__asm volatile
 800a298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a29c:	f383 8811 	msr	BASEPRI, r3
 800a2a0:	f3bf 8f6f 	isb	sy
 800a2a4:	f3bf 8f4f 	dsb	sy
 800a2a8:	61bb      	str	r3, [r7, #24]
}
 800a2aa:	bf00      	nop
 800a2ac:	e7fe      	b.n	800a2ac <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a2ae:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a2b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d01e      	beq.n	800a2f4 <xTaskCreateStatic+0xac>
 800a2b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d01b      	beq.n	800a2f4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a2bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2be:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a2c4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2c8:	2202      	movs	r2, #2
 800a2ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	9303      	str	r3, [sp, #12]
 800a2d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2d4:	9302      	str	r3, [sp, #8]
 800a2d6:	f107 0314 	add.w	r3, r7, #20
 800a2da:	9301      	str	r3, [sp, #4]
 800a2dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2de:	9300      	str	r3, [sp, #0]
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	687a      	ldr	r2, [r7, #4]
 800a2e4:	68b9      	ldr	r1, [r7, #8]
 800a2e6:	68f8      	ldr	r0, [r7, #12]
 800a2e8:	f000 f850 	bl	800a38c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a2ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a2ee:	f000 f8d5 	bl	800a49c <prvAddNewTaskToReadyList>
 800a2f2:	e001      	b.n	800a2f8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a2f8:	697b      	ldr	r3, [r7, #20]
	}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	3728      	adds	r7, #40	; 0x28
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}

0800a302 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a302:	b580      	push	{r7, lr}
 800a304:	b08c      	sub	sp, #48	; 0x30
 800a306:	af04      	add	r7, sp, #16
 800a308:	60f8      	str	r0, [r7, #12]
 800a30a:	60b9      	str	r1, [r7, #8]
 800a30c:	603b      	str	r3, [r7, #0]
 800a30e:	4613      	mov	r3, r2
 800a310:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a312:	88fb      	ldrh	r3, [r7, #6]
 800a314:	009b      	lsls	r3, r3, #2
 800a316:	4618      	mov	r0, r3
 800a318:	f001 f9ee 	bl	800b6f8 <pvPortMalloc>
 800a31c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d00e      	beq.n	800a342 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a324:	2054      	movs	r0, #84	; 0x54
 800a326:	f001 f9e7 	bl	800b6f8 <pvPortMalloc>
 800a32a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a32c:	69fb      	ldr	r3, [r7, #28]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d003      	beq.n	800a33a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a332:	69fb      	ldr	r3, [r7, #28]
 800a334:	697a      	ldr	r2, [r7, #20]
 800a336:	631a      	str	r2, [r3, #48]	; 0x30
 800a338:	e005      	b.n	800a346 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a33a:	6978      	ldr	r0, [r7, #20]
 800a33c:	f001 faa8 	bl	800b890 <vPortFree>
 800a340:	e001      	b.n	800a346 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a342:	2300      	movs	r3, #0
 800a344:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a346:	69fb      	ldr	r3, [r7, #28]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d017      	beq.n	800a37c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a34c:	69fb      	ldr	r3, [r7, #28]
 800a34e:	2200      	movs	r2, #0
 800a350:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a354:	88fa      	ldrh	r2, [r7, #6]
 800a356:	2300      	movs	r3, #0
 800a358:	9303      	str	r3, [sp, #12]
 800a35a:	69fb      	ldr	r3, [r7, #28]
 800a35c:	9302      	str	r3, [sp, #8]
 800a35e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a360:	9301      	str	r3, [sp, #4]
 800a362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a364:	9300      	str	r3, [sp, #0]
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	68b9      	ldr	r1, [r7, #8]
 800a36a:	68f8      	ldr	r0, [r7, #12]
 800a36c:	f000 f80e 	bl	800a38c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a370:	69f8      	ldr	r0, [r7, #28]
 800a372:	f000 f893 	bl	800a49c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a376:	2301      	movs	r3, #1
 800a378:	61bb      	str	r3, [r7, #24]
 800a37a:	e002      	b.n	800a382 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a37c:	f04f 33ff 	mov.w	r3, #4294967295
 800a380:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a382:	69bb      	ldr	r3, [r7, #24]
	}
 800a384:	4618      	mov	r0, r3
 800a386:	3720      	adds	r7, #32
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}

0800a38c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b088      	sub	sp, #32
 800a390:	af00      	add	r7, sp, #0
 800a392:	60f8      	str	r0, [r7, #12]
 800a394:	60b9      	str	r1, [r7, #8]
 800a396:	607a      	str	r2, [r7, #4]
 800a398:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a39a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a39c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a3a4:	3b01      	subs	r3, #1
 800a3a6:	009b      	lsls	r3, r3, #2
 800a3a8:	4413      	add	r3, r2
 800a3aa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a3ac:	69bb      	ldr	r3, [r7, #24]
 800a3ae:	f023 0307 	bic.w	r3, r3, #7
 800a3b2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a3b4:	69bb      	ldr	r3, [r7, #24]
 800a3b6:	f003 0307 	and.w	r3, r3, #7
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d00a      	beq.n	800a3d4 <prvInitialiseNewTask+0x48>
	__asm volatile
 800a3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c2:	f383 8811 	msr	BASEPRI, r3
 800a3c6:	f3bf 8f6f 	isb	sy
 800a3ca:	f3bf 8f4f 	dsb	sy
 800a3ce:	617b      	str	r3, [r7, #20]
}
 800a3d0:	bf00      	nop
 800a3d2:	e7fe      	b.n	800a3d2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d01f      	beq.n	800a41a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a3da:	2300      	movs	r3, #0
 800a3dc:	61fb      	str	r3, [r7, #28]
 800a3de:	e012      	b.n	800a406 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a3e0:	68ba      	ldr	r2, [r7, #8]
 800a3e2:	69fb      	ldr	r3, [r7, #28]
 800a3e4:	4413      	add	r3, r2
 800a3e6:	7819      	ldrb	r1, [r3, #0]
 800a3e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3ea:	69fb      	ldr	r3, [r7, #28]
 800a3ec:	4413      	add	r3, r2
 800a3ee:	3334      	adds	r3, #52	; 0x34
 800a3f0:	460a      	mov	r2, r1
 800a3f2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a3f4:	68ba      	ldr	r2, [r7, #8]
 800a3f6:	69fb      	ldr	r3, [r7, #28]
 800a3f8:	4413      	add	r3, r2
 800a3fa:	781b      	ldrb	r3, [r3, #0]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d006      	beq.n	800a40e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a400:	69fb      	ldr	r3, [r7, #28]
 800a402:	3301      	adds	r3, #1
 800a404:	61fb      	str	r3, [r7, #28]
 800a406:	69fb      	ldr	r3, [r7, #28]
 800a408:	2b0f      	cmp	r3, #15
 800a40a:	d9e9      	bls.n	800a3e0 <prvInitialiseNewTask+0x54>
 800a40c:	e000      	b.n	800a410 <prvInitialiseNewTask+0x84>
			{
				break;
 800a40e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a412:	2200      	movs	r2, #0
 800a414:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a418:	e003      	b.n	800a422 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a41a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a41c:	2200      	movs	r2, #0
 800a41e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a424:	2b06      	cmp	r3, #6
 800a426:	d901      	bls.n	800a42c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a428:	2306      	movs	r3, #6
 800a42a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a42c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a42e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a430:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a434:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a436:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a43a:	2200      	movs	r2, #0
 800a43c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a43e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a440:	3304      	adds	r3, #4
 800a442:	4618      	mov	r0, r3
 800a444:	f7fe ff2c 	bl	80092a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a44a:	3318      	adds	r3, #24
 800a44c:	4618      	mov	r0, r3
 800a44e:	f7fe ff27 	bl	80092a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a454:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a456:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a45a:	f1c3 0207 	rsb	r2, r3, #7
 800a45e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a460:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a464:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a466:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a46a:	2200      	movs	r2, #0
 800a46c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a470:	2200      	movs	r2, #0
 800a472:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a476:	683a      	ldr	r2, [r7, #0]
 800a478:	68f9      	ldr	r1, [r7, #12]
 800a47a:	69b8      	ldr	r0, [r7, #24]
 800a47c:	f000 feee 	bl	800b25c <pxPortInitialiseStack>
 800a480:	4602      	mov	r2, r0
 800a482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a484:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d002      	beq.n	800a492 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a48c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a48e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a490:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a492:	bf00      	nop
 800a494:	3720      	adds	r7, #32
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}
	...

0800a49c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b082      	sub	sp, #8
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a4a4:	f001 f806 	bl	800b4b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a4a8:	4b2a      	ldr	r3, [pc, #168]	; (800a554 <prvAddNewTaskToReadyList+0xb8>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	3301      	adds	r3, #1
 800a4ae:	4a29      	ldr	r2, [pc, #164]	; (800a554 <prvAddNewTaskToReadyList+0xb8>)
 800a4b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a4b2:	4b29      	ldr	r3, [pc, #164]	; (800a558 <prvAddNewTaskToReadyList+0xbc>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d109      	bne.n	800a4ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a4ba:	4a27      	ldr	r2, [pc, #156]	; (800a558 <prvAddNewTaskToReadyList+0xbc>)
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a4c0:	4b24      	ldr	r3, [pc, #144]	; (800a554 <prvAddNewTaskToReadyList+0xb8>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	2b01      	cmp	r3, #1
 800a4c6:	d110      	bne.n	800a4ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a4c8:	f000 fbe8 	bl	800ac9c <prvInitialiseTaskLists>
 800a4cc:	e00d      	b.n	800a4ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a4ce:	4b23      	ldr	r3, [pc, #140]	; (800a55c <prvAddNewTaskToReadyList+0xc0>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d109      	bne.n	800a4ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a4d6:	4b20      	ldr	r3, [pc, #128]	; (800a558 <prvAddNewTaskToReadyList+0xbc>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4e0:	429a      	cmp	r2, r3
 800a4e2:	d802      	bhi.n	800a4ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a4e4:	4a1c      	ldr	r2, [pc, #112]	; (800a558 <prvAddNewTaskToReadyList+0xbc>)
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a4ea:	4b1d      	ldr	r3, [pc, #116]	; (800a560 <prvAddNewTaskToReadyList+0xc4>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	3301      	adds	r3, #1
 800a4f0:	4a1b      	ldr	r2, [pc, #108]	; (800a560 <prvAddNewTaskToReadyList+0xc4>)
 800a4f2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4f8:	2201      	movs	r2, #1
 800a4fa:	409a      	lsls	r2, r3
 800a4fc:	4b19      	ldr	r3, [pc, #100]	; (800a564 <prvAddNewTaskToReadyList+0xc8>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	4313      	orrs	r3, r2
 800a502:	4a18      	ldr	r2, [pc, #96]	; (800a564 <prvAddNewTaskToReadyList+0xc8>)
 800a504:	6013      	str	r3, [r2, #0]
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a50a:	4613      	mov	r3, r2
 800a50c:	009b      	lsls	r3, r3, #2
 800a50e:	4413      	add	r3, r2
 800a510:	009b      	lsls	r3, r3, #2
 800a512:	4a15      	ldr	r2, [pc, #84]	; (800a568 <prvAddNewTaskToReadyList+0xcc>)
 800a514:	441a      	add	r2, r3
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	3304      	adds	r3, #4
 800a51a:	4619      	mov	r1, r3
 800a51c:	4610      	mov	r0, r2
 800a51e:	f7fe fecc 	bl	80092ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a522:	f000 fff7 	bl	800b514 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a526:	4b0d      	ldr	r3, [pc, #52]	; (800a55c <prvAddNewTaskToReadyList+0xc0>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d00e      	beq.n	800a54c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a52e:	4b0a      	ldr	r3, [pc, #40]	; (800a558 <prvAddNewTaskToReadyList+0xbc>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a538:	429a      	cmp	r2, r3
 800a53a:	d207      	bcs.n	800a54c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a53c:	4b0b      	ldr	r3, [pc, #44]	; (800a56c <prvAddNewTaskToReadyList+0xd0>)
 800a53e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a542:	601a      	str	r2, [r3, #0]
 800a544:	f3bf 8f4f 	dsb	sy
 800a548:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a54c:	bf00      	nop
 800a54e:	3708      	adds	r7, #8
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}
 800a554:	20000570 	.word	0x20000570
 800a558:	20000470 	.word	0x20000470
 800a55c:	2000057c 	.word	0x2000057c
 800a560:	2000058c 	.word	0x2000058c
 800a564:	20000578 	.word	0x20000578
 800a568:	20000474 	.word	0x20000474
 800a56c:	e000ed04 	.word	0xe000ed04

0800a570 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a570:	b580      	push	{r7, lr}
 800a572:	b084      	sub	sp, #16
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a578:	2300      	movs	r3, #0
 800a57a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d017      	beq.n	800a5b2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a582:	4b13      	ldr	r3, [pc, #76]	; (800a5d0 <vTaskDelay+0x60>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d00a      	beq.n	800a5a0 <vTaskDelay+0x30>
	__asm volatile
 800a58a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a58e:	f383 8811 	msr	BASEPRI, r3
 800a592:	f3bf 8f6f 	isb	sy
 800a596:	f3bf 8f4f 	dsb	sy
 800a59a:	60bb      	str	r3, [r7, #8]
}
 800a59c:	bf00      	nop
 800a59e:	e7fe      	b.n	800a59e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a5a0:	f000 f87a 	bl	800a698 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a5a4:	2100      	movs	r1, #0
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f000 fdf2 	bl	800b190 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a5ac:	f000 f882 	bl	800a6b4 <xTaskResumeAll>
 800a5b0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d107      	bne.n	800a5c8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a5b8:	4b06      	ldr	r3, [pc, #24]	; (800a5d4 <vTaskDelay+0x64>)
 800a5ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5be:	601a      	str	r2, [r3, #0]
 800a5c0:	f3bf 8f4f 	dsb	sy
 800a5c4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a5c8:	bf00      	nop
 800a5ca:	3710      	adds	r7, #16
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}
 800a5d0:	20000598 	.word	0x20000598
 800a5d4:	e000ed04 	.word	0xe000ed04

0800a5d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b08a      	sub	sp, #40	; 0x28
 800a5dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a5e6:	463a      	mov	r2, r7
 800a5e8:	1d39      	adds	r1, r7, #4
 800a5ea:	f107 0308 	add.w	r3, r7, #8
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f7f5 ffba 	bl	8000568 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a5f4:	6839      	ldr	r1, [r7, #0]
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	68ba      	ldr	r2, [r7, #8]
 800a5fa:	9202      	str	r2, [sp, #8]
 800a5fc:	9301      	str	r3, [sp, #4]
 800a5fe:	2300      	movs	r3, #0
 800a600:	9300      	str	r3, [sp, #0]
 800a602:	2300      	movs	r3, #0
 800a604:	460a      	mov	r2, r1
 800a606:	491e      	ldr	r1, [pc, #120]	; (800a680 <vTaskStartScheduler+0xa8>)
 800a608:	481e      	ldr	r0, [pc, #120]	; (800a684 <vTaskStartScheduler+0xac>)
 800a60a:	f7ff fe1d 	bl	800a248 <xTaskCreateStatic>
 800a60e:	4603      	mov	r3, r0
 800a610:	4a1d      	ldr	r2, [pc, #116]	; (800a688 <vTaskStartScheduler+0xb0>)
 800a612:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a614:	4b1c      	ldr	r3, [pc, #112]	; (800a688 <vTaskStartScheduler+0xb0>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d002      	beq.n	800a622 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a61c:	2301      	movs	r3, #1
 800a61e:	617b      	str	r3, [r7, #20]
 800a620:	e001      	b.n	800a626 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a622:	2300      	movs	r3, #0
 800a624:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a626:	697b      	ldr	r3, [r7, #20]
 800a628:	2b01      	cmp	r3, #1
 800a62a:	d116      	bne.n	800a65a <vTaskStartScheduler+0x82>
	__asm volatile
 800a62c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a630:	f383 8811 	msr	BASEPRI, r3
 800a634:	f3bf 8f6f 	isb	sy
 800a638:	f3bf 8f4f 	dsb	sy
 800a63c:	613b      	str	r3, [r7, #16]
}
 800a63e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a640:	4b12      	ldr	r3, [pc, #72]	; (800a68c <vTaskStartScheduler+0xb4>)
 800a642:	f04f 32ff 	mov.w	r2, #4294967295
 800a646:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a648:	4b11      	ldr	r3, [pc, #68]	; (800a690 <vTaskStartScheduler+0xb8>)
 800a64a:	2201      	movs	r2, #1
 800a64c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a64e:	4b11      	ldr	r3, [pc, #68]	; (800a694 <vTaskStartScheduler+0xbc>)
 800a650:	2200      	movs	r2, #0
 800a652:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a654:	f000 fe8c 	bl	800b370 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a658:	e00e      	b.n	800a678 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a65a:	697b      	ldr	r3, [r7, #20]
 800a65c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a660:	d10a      	bne.n	800a678 <vTaskStartScheduler+0xa0>
	__asm volatile
 800a662:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a666:	f383 8811 	msr	BASEPRI, r3
 800a66a:	f3bf 8f6f 	isb	sy
 800a66e:	f3bf 8f4f 	dsb	sy
 800a672:	60fb      	str	r3, [r7, #12]
}
 800a674:	bf00      	nop
 800a676:	e7fe      	b.n	800a676 <vTaskStartScheduler+0x9e>
}
 800a678:	bf00      	nop
 800a67a:	3718      	adds	r7, #24
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bd80      	pop	{r7, pc}
 800a680:	080175f0 	.word	0x080175f0
 800a684:	0800ac6d 	.word	0x0800ac6d
 800a688:	20000594 	.word	0x20000594
 800a68c:	20000590 	.word	0x20000590
 800a690:	2000057c 	.word	0x2000057c
 800a694:	20000574 	.word	0x20000574

0800a698 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a698:	b480      	push	{r7}
 800a69a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a69c:	4b04      	ldr	r3, [pc, #16]	; (800a6b0 <vTaskSuspendAll+0x18>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	3301      	adds	r3, #1
 800a6a2:	4a03      	ldr	r2, [pc, #12]	; (800a6b0 <vTaskSuspendAll+0x18>)
 800a6a4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a6a6:	bf00      	nop
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ae:	4770      	bx	lr
 800a6b0:	20000598 	.word	0x20000598

0800a6b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b084      	sub	sp, #16
 800a6b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a6c2:	4b41      	ldr	r3, [pc, #260]	; (800a7c8 <xTaskResumeAll+0x114>)
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d10a      	bne.n	800a6e0 <xTaskResumeAll+0x2c>
	__asm volatile
 800a6ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ce:	f383 8811 	msr	BASEPRI, r3
 800a6d2:	f3bf 8f6f 	isb	sy
 800a6d6:	f3bf 8f4f 	dsb	sy
 800a6da:	603b      	str	r3, [r7, #0]
}
 800a6dc:	bf00      	nop
 800a6de:	e7fe      	b.n	800a6de <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a6e0:	f000 fee8 	bl	800b4b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a6e4:	4b38      	ldr	r3, [pc, #224]	; (800a7c8 <xTaskResumeAll+0x114>)
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	3b01      	subs	r3, #1
 800a6ea:	4a37      	ldr	r2, [pc, #220]	; (800a7c8 <xTaskResumeAll+0x114>)
 800a6ec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a6ee:	4b36      	ldr	r3, [pc, #216]	; (800a7c8 <xTaskResumeAll+0x114>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d161      	bne.n	800a7ba <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a6f6:	4b35      	ldr	r3, [pc, #212]	; (800a7cc <xTaskResumeAll+0x118>)
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d05d      	beq.n	800a7ba <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a6fe:	e02e      	b.n	800a75e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a700:	4b33      	ldr	r3, [pc, #204]	; (800a7d0 <xTaskResumeAll+0x11c>)
 800a702:	68db      	ldr	r3, [r3, #12]
 800a704:	68db      	ldr	r3, [r3, #12]
 800a706:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	3318      	adds	r3, #24
 800a70c:	4618      	mov	r0, r3
 800a70e:	f7fe fe31 	bl	8009374 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	3304      	adds	r3, #4
 800a716:	4618      	mov	r0, r3
 800a718:	f7fe fe2c 	bl	8009374 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a720:	2201      	movs	r2, #1
 800a722:	409a      	lsls	r2, r3
 800a724:	4b2b      	ldr	r3, [pc, #172]	; (800a7d4 <xTaskResumeAll+0x120>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	4313      	orrs	r3, r2
 800a72a:	4a2a      	ldr	r2, [pc, #168]	; (800a7d4 <xTaskResumeAll+0x120>)
 800a72c:	6013      	str	r3, [r2, #0]
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a732:	4613      	mov	r3, r2
 800a734:	009b      	lsls	r3, r3, #2
 800a736:	4413      	add	r3, r2
 800a738:	009b      	lsls	r3, r3, #2
 800a73a:	4a27      	ldr	r2, [pc, #156]	; (800a7d8 <xTaskResumeAll+0x124>)
 800a73c:	441a      	add	r2, r3
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	3304      	adds	r3, #4
 800a742:	4619      	mov	r1, r3
 800a744:	4610      	mov	r0, r2
 800a746:	f7fe fdb8 	bl	80092ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a74e:	4b23      	ldr	r3, [pc, #140]	; (800a7dc <xTaskResumeAll+0x128>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a754:	429a      	cmp	r2, r3
 800a756:	d302      	bcc.n	800a75e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800a758:	4b21      	ldr	r3, [pc, #132]	; (800a7e0 <xTaskResumeAll+0x12c>)
 800a75a:	2201      	movs	r2, #1
 800a75c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a75e:	4b1c      	ldr	r3, [pc, #112]	; (800a7d0 <xTaskResumeAll+0x11c>)
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d1cc      	bne.n	800a700 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d001      	beq.n	800a770 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a76c:	f000 fb34 	bl	800add8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a770:	4b1c      	ldr	r3, [pc, #112]	; (800a7e4 <xTaskResumeAll+0x130>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d010      	beq.n	800a79e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a77c:	f000 f858 	bl	800a830 <xTaskIncrementTick>
 800a780:	4603      	mov	r3, r0
 800a782:	2b00      	cmp	r3, #0
 800a784:	d002      	beq.n	800a78c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800a786:	4b16      	ldr	r3, [pc, #88]	; (800a7e0 <xTaskResumeAll+0x12c>)
 800a788:	2201      	movs	r2, #1
 800a78a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	3b01      	subs	r3, #1
 800a790:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d1f1      	bne.n	800a77c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800a798:	4b12      	ldr	r3, [pc, #72]	; (800a7e4 <xTaskResumeAll+0x130>)
 800a79a:	2200      	movs	r2, #0
 800a79c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a79e:	4b10      	ldr	r3, [pc, #64]	; (800a7e0 <xTaskResumeAll+0x12c>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d009      	beq.n	800a7ba <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a7aa:	4b0f      	ldr	r3, [pc, #60]	; (800a7e8 <xTaskResumeAll+0x134>)
 800a7ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7b0:	601a      	str	r2, [r3, #0]
 800a7b2:	f3bf 8f4f 	dsb	sy
 800a7b6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a7ba:	f000 feab 	bl	800b514 <vPortExitCritical>

	return xAlreadyYielded;
 800a7be:	68bb      	ldr	r3, [r7, #8]
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3710      	adds	r7, #16
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}
 800a7c8:	20000598 	.word	0x20000598
 800a7cc:	20000570 	.word	0x20000570
 800a7d0:	20000530 	.word	0x20000530
 800a7d4:	20000578 	.word	0x20000578
 800a7d8:	20000474 	.word	0x20000474
 800a7dc:	20000470 	.word	0x20000470
 800a7e0:	20000584 	.word	0x20000584
 800a7e4:	20000580 	.word	0x20000580
 800a7e8:	e000ed04 	.word	0xe000ed04

0800a7ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b083      	sub	sp, #12
 800a7f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a7f2:	4b05      	ldr	r3, [pc, #20]	; (800a808 <xTaskGetTickCount+0x1c>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a7f8:	687b      	ldr	r3, [r7, #4]
}
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	370c      	adds	r7, #12
 800a7fe:	46bd      	mov	sp, r7
 800a800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a804:	4770      	bx	lr
 800a806:	bf00      	nop
 800a808:	20000574 	.word	0x20000574

0800a80c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b082      	sub	sp, #8
 800a810:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a812:	f000 ff31 	bl	800b678 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800a816:	2300      	movs	r3, #0
 800a818:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800a81a:	4b04      	ldr	r3, [pc, #16]	; (800a82c <xTaskGetTickCountFromISR+0x20>)
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a820:	683b      	ldr	r3, [r7, #0]
}
 800a822:	4618      	mov	r0, r3
 800a824:	3708      	adds	r7, #8
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}
 800a82a:	bf00      	nop
 800a82c:	20000574 	.word	0x20000574

0800a830 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b086      	sub	sp, #24
 800a834:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a836:	2300      	movs	r3, #0
 800a838:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a83a:	4b4e      	ldr	r3, [pc, #312]	; (800a974 <xTaskIncrementTick+0x144>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	f040 808e 	bne.w	800a960 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a844:	4b4c      	ldr	r3, [pc, #304]	; (800a978 <xTaskIncrementTick+0x148>)
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	3301      	adds	r3, #1
 800a84a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a84c:	4a4a      	ldr	r2, [pc, #296]	; (800a978 <xTaskIncrementTick+0x148>)
 800a84e:	693b      	ldr	r3, [r7, #16]
 800a850:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a852:	693b      	ldr	r3, [r7, #16]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d120      	bne.n	800a89a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a858:	4b48      	ldr	r3, [pc, #288]	; (800a97c <xTaskIncrementTick+0x14c>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d00a      	beq.n	800a878 <xTaskIncrementTick+0x48>
	__asm volatile
 800a862:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a866:	f383 8811 	msr	BASEPRI, r3
 800a86a:	f3bf 8f6f 	isb	sy
 800a86e:	f3bf 8f4f 	dsb	sy
 800a872:	603b      	str	r3, [r7, #0]
}
 800a874:	bf00      	nop
 800a876:	e7fe      	b.n	800a876 <xTaskIncrementTick+0x46>
 800a878:	4b40      	ldr	r3, [pc, #256]	; (800a97c <xTaskIncrementTick+0x14c>)
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	60fb      	str	r3, [r7, #12]
 800a87e:	4b40      	ldr	r3, [pc, #256]	; (800a980 <xTaskIncrementTick+0x150>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	4a3e      	ldr	r2, [pc, #248]	; (800a97c <xTaskIncrementTick+0x14c>)
 800a884:	6013      	str	r3, [r2, #0]
 800a886:	4a3e      	ldr	r2, [pc, #248]	; (800a980 <xTaskIncrementTick+0x150>)
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	6013      	str	r3, [r2, #0]
 800a88c:	4b3d      	ldr	r3, [pc, #244]	; (800a984 <xTaskIncrementTick+0x154>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	3301      	adds	r3, #1
 800a892:	4a3c      	ldr	r2, [pc, #240]	; (800a984 <xTaskIncrementTick+0x154>)
 800a894:	6013      	str	r3, [r2, #0]
 800a896:	f000 fa9f 	bl	800add8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a89a:	4b3b      	ldr	r3, [pc, #236]	; (800a988 <xTaskIncrementTick+0x158>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	693a      	ldr	r2, [r7, #16]
 800a8a0:	429a      	cmp	r2, r3
 800a8a2:	d348      	bcc.n	800a936 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a8a4:	4b35      	ldr	r3, [pc, #212]	; (800a97c <xTaskIncrementTick+0x14c>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d104      	bne.n	800a8b8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a8ae:	4b36      	ldr	r3, [pc, #216]	; (800a988 <xTaskIncrementTick+0x158>)
 800a8b0:	f04f 32ff 	mov.w	r2, #4294967295
 800a8b4:	601a      	str	r2, [r3, #0]
					break;
 800a8b6:	e03e      	b.n	800a936 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8b8:	4b30      	ldr	r3, [pc, #192]	; (800a97c <xTaskIncrementTick+0x14c>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	68db      	ldr	r3, [r3, #12]
 800a8be:	68db      	ldr	r3, [r3, #12]
 800a8c0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	685b      	ldr	r3, [r3, #4]
 800a8c6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a8c8:	693a      	ldr	r2, [r7, #16]
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	429a      	cmp	r2, r3
 800a8ce:	d203      	bcs.n	800a8d8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a8d0:	4a2d      	ldr	r2, [pc, #180]	; (800a988 <xTaskIncrementTick+0x158>)
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a8d6:	e02e      	b.n	800a936 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	3304      	adds	r3, #4
 800a8dc:	4618      	mov	r0, r3
 800a8de:	f7fe fd49 	bl	8009374 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a8e2:	68bb      	ldr	r3, [r7, #8]
 800a8e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d004      	beq.n	800a8f4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a8ea:	68bb      	ldr	r3, [r7, #8]
 800a8ec:	3318      	adds	r3, #24
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	f7fe fd40 	bl	8009374 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8f8:	2201      	movs	r2, #1
 800a8fa:	409a      	lsls	r2, r3
 800a8fc:	4b23      	ldr	r3, [pc, #140]	; (800a98c <xTaskIncrementTick+0x15c>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	4313      	orrs	r3, r2
 800a902:	4a22      	ldr	r2, [pc, #136]	; (800a98c <xTaskIncrementTick+0x15c>)
 800a904:	6013      	str	r3, [r2, #0]
 800a906:	68bb      	ldr	r3, [r7, #8]
 800a908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a90a:	4613      	mov	r3, r2
 800a90c:	009b      	lsls	r3, r3, #2
 800a90e:	4413      	add	r3, r2
 800a910:	009b      	lsls	r3, r3, #2
 800a912:	4a1f      	ldr	r2, [pc, #124]	; (800a990 <xTaskIncrementTick+0x160>)
 800a914:	441a      	add	r2, r3
 800a916:	68bb      	ldr	r3, [r7, #8]
 800a918:	3304      	adds	r3, #4
 800a91a:	4619      	mov	r1, r3
 800a91c:	4610      	mov	r0, r2
 800a91e:	f7fe fccc 	bl	80092ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a926:	4b1b      	ldr	r3, [pc, #108]	; (800a994 <xTaskIncrementTick+0x164>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a92c:	429a      	cmp	r2, r3
 800a92e:	d3b9      	bcc.n	800a8a4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a930:	2301      	movs	r3, #1
 800a932:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a934:	e7b6      	b.n	800a8a4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a936:	4b17      	ldr	r3, [pc, #92]	; (800a994 <xTaskIncrementTick+0x164>)
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a93c:	4914      	ldr	r1, [pc, #80]	; (800a990 <xTaskIncrementTick+0x160>)
 800a93e:	4613      	mov	r3, r2
 800a940:	009b      	lsls	r3, r3, #2
 800a942:	4413      	add	r3, r2
 800a944:	009b      	lsls	r3, r3, #2
 800a946:	440b      	add	r3, r1
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	2b01      	cmp	r3, #1
 800a94c:	d901      	bls.n	800a952 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800a94e:	2301      	movs	r3, #1
 800a950:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a952:	4b11      	ldr	r3, [pc, #68]	; (800a998 <xTaskIncrementTick+0x168>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d007      	beq.n	800a96a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800a95a:	2301      	movs	r3, #1
 800a95c:	617b      	str	r3, [r7, #20]
 800a95e:	e004      	b.n	800a96a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a960:	4b0e      	ldr	r3, [pc, #56]	; (800a99c <xTaskIncrementTick+0x16c>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	3301      	adds	r3, #1
 800a966:	4a0d      	ldr	r2, [pc, #52]	; (800a99c <xTaskIncrementTick+0x16c>)
 800a968:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a96a:	697b      	ldr	r3, [r7, #20]
}
 800a96c:	4618      	mov	r0, r3
 800a96e:	3718      	adds	r7, #24
 800a970:	46bd      	mov	sp, r7
 800a972:	bd80      	pop	{r7, pc}
 800a974:	20000598 	.word	0x20000598
 800a978:	20000574 	.word	0x20000574
 800a97c:	20000528 	.word	0x20000528
 800a980:	2000052c 	.word	0x2000052c
 800a984:	20000588 	.word	0x20000588
 800a988:	20000590 	.word	0x20000590
 800a98c:	20000578 	.word	0x20000578
 800a990:	20000474 	.word	0x20000474
 800a994:	20000470 	.word	0x20000470
 800a998:	20000584 	.word	0x20000584
 800a99c:	20000580 	.word	0x20000580

0800a9a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a9a0:	b480      	push	{r7}
 800a9a2:	b087      	sub	sp, #28
 800a9a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a9a6:	4b27      	ldr	r3, [pc, #156]	; (800aa44 <vTaskSwitchContext+0xa4>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d003      	beq.n	800a9b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a9ae:	4b26      	ldr	r3, [pc, #152]	; (800aa48 <vTaskSwitchContext+0xa8>)
 800a9b0:	2201      	movs	r2, #1
 800a9b2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a9b4:	e03f      	b.n	800aa36 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800a9b6:	4b24      	ldr	r3, [pc, #144]	; (800aa48 <vTaskSwitchContext+0xa8>)
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9bc:	4b23      	ldr	r3, [pc, #140]	; (800aa4c <vTaskSwitchContext+0xac>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	fab3 f383 	clz	r3, r3
 800a9c8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a9ca:	7afb      	ldrb	r3, [r7, #11]
 800a9cc:	f1c3 031f 	rsb	r3, r3, #31
 800a9d0:	617b      	str	r3, [r7, #20]
 800a9d2:	491f      	ldr	r1, [pc, #124]	; (800aa50 <vTaskSwitchContext+0xb0>)
 800a9d4:	697a      	ldr	r2, [r7, #20]
 800a9d6:	4613      	mov	r3, r2
 800a9d8:	009b      	lsls	r3, r3, #2
 800a9da:	4413      	add	r3, r2
 800a9dc:	009b      	lsls	r3, r3, #2
 800a9de:	440b      	add	r3, r1
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d10a      	bne.n	800a9fc <vTaskSwitchContext+0x5c>
	__asm volatile
 800a9e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ea:	f383 8811 	msr	BASEPRI, r3
 800a9ee:	f3bf 8f6f 	isb	sy
 800a9f2:	f3bf 8f4f 	dsb	sy
 800a9f6:	607b      	str	r3, [r7, #4]
}
 800a9f8:	bf00      	nop
 800a9fa:	e7fe      	b.n	800a9fa <vTaskSwitchContext+0x5a>
 800a9fc:	697a      	ldr	r2, [r7, #20]
 800a9fe:	4613      	mov	r3, r2
 800aa00:	009b      	lsls	r3, r3, #2
 800aa02:	4413      	add	r3, r2
 800aa04:	009b      	lsls	r3, r3, #2
 800aa06:	4a12      	ldr	r2, [pc, #72]	; (800aa50 <vTaskSwitchContext+0xb0>)
 800aa08:	4413      	add	r3, r2
 800aa0a:	613b      	str	r3, [r7, #16]
 800aa0c:	693b      	ldr	r3, [r7, #16]
 800aa0e:	685b      	ldr	r3, [r3, #4]
 800aa10:	685a      	ldr	r2, [r3, #4]
 800aa12:	693b      	ldr	r3, [r7, #16]
 800aa14:	605a      	str	r2, [r3, #4]
 800aa16:	693b      	ldr	r3, [r7, #16]
 800aa18:	685a      	ldr	r2, [r3, #4]
 800aa1a:	693b      	ldr	r3, [r7, #16]
 800aa1c:	3308      	adds	r3, #8
 800aa1e:	429a      	cmp	r2, r3
 800aa20:	d104      	bne.n	800aa2c <vTaskSwitchContext+0x8c>
 800aa22:	693b      	ldr	r3, [r7, #16]
 800aa24:	685b      	ldr	r3, [r3, #4]
 800aa26:	685a      	ldr	r2, [r3, #4]
 800aa28:	693b      	ldr	r3, [r7, #16]
 800aa2a:	605a      	str	r2, [r3, #4]
 800aa2c:	693b      	ldr	r3, [r7, #16]
 800aa2e:	685b      	ldr	r3, [r3, #4]
 800aa30:	68db      	ldr	r3, [r3, #12]
 800aa32:	4a08      	ldr	r2, [pc, #32]	; (800aa54 <vTaskSwitchContext+0xb4>)
 800aa34:	6013      	str	r3, [r2, #0]
}
 800aa36:	bf00      	nop
 800aa38:	371c      	adds	r7, #28
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa40:	4770      	bx	lr
 800aa42:	bf00      	nop
 800aa44:	20000598 	.word	0x20000598
 800aa48:	20000584 	.word	0x20000584
 800aa4c:	20000578 	.word	0x20000578
 800aa50:	20000474 	.word	0x20000474
 800aa54:	20000470 	.word	0x20000470

0800aa58 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b084      	sub	sp, #16
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
 800aa60:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d10a      	bne.n	800aa7e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800aa68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa6c:	f383 8811 	msr	BASEPRI, r3
 800aa70:	f3bf 8f6f 	isb	sy
 800aa74:	f3bf 8f4f 	dsb	sy
 800aa78:	60fb      	str	r3, [r7, #12]
}
 800aa7a:	bf00      	nop
 800aa7c:	e7fe      	b.n	800aa7c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aa7e:	4b07      	ldr	r3, [pc, #28]	; (800aa9c <vTaskPlaceOnEventList+0x44>)
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	3318      	adds	r3, #24
 800aa84:	4619      	mov	r1, r3
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f7fe fc3b 	bl	8009302 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800aa8c:	2101      	movs	r1, #1
 800aa8e:	6838      	ldr	r0, [r7, #0]
 800aa90:	f000 fb7e 	bl	800b190 <prvAddCurrentTaskToDelayedList>
}
 800aa94:	bf00      	nop
 800aa96:	3710      	adds	r7, #16
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	bd80      	pop	{r7, pc}
 800aa9c:	20000470 	.word	0x20000470

0800aaa0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b086      	sub	sp, #24
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	68db      	ldr	r3, [r3, #12]
 800aaac:	68db      	ldr	r3, [r3, #12]
 800aaae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800aab0:	693b      	ldr	r3, [r7, #16]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d10a      	bne.n	800aacc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800aab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaba:	f383 8811 	msr	BASEPRI, r3
 800aabe:	f3bf 8f6f 	isb	sy
 800aac2:	f3bf 8f4f 	dsb	sy
 800aac6:	60fb      	str	r3, [r7, #12]
}
 800aac8:	bf00      	nop
 800aaca:	e7fe      	b.n	800aaca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800aacc:	693b      	ldr	r3, [r7, #16]
 800aace:	3318      	adds	r3, #24
 800aad0:	4618      	mov	r0, r3
 800aad2:	f7fe fc4f 	bl	8009374 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aad6:	4b1d      	ldr	r3, [pc, #116]	; (800ab4c <xTaskRemoveFromEventList+0xac>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d11c      	bne.n	800ab18 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800aade:	693b      	ldr	r3, [r7, #16]
 800aae0:	3304      	adds	r3, #4
 800aae2:	4618      	mov	r0, r3
 800aae4:	f7fe fc46 	bl	8009374 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800aae8:	693b      	ldr	r3, [r7, #16]
 800aaea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaec:	2201      	movs	r2, #1
 800aaee:	409a      	lsls	r2, r3
 800aaf0:	4b17      	ldr	r3, [pc, #92]	; (800ab50 <xTaskRemoveFromEventList+0xb0>)
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	4313      	orrs	r3, r2
 800aaf6:	4a16      	ldr	r2, [pc, #88]	; (800ab50 <xTaskRemoveFromEventList+0xb0>)
 800aaf8:	6013      	str	r3, [r2, #0]
 800aafa:	693b      	ldr	r3, [r7, #16]
 800aafc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aafe:	4613      	mov	r3, r2
 800ab00:	009b      	lsls	r3, r3, #2
 800ab02:	4413      	add	r3, r2
 800ab04:	009b      	lsls	r3, r3, #2
 800ab06:	4a13      	ldr	r2, [pc, #76]	; (800ab54 <xTaskRemoveFromEventList+0xb4>)
 800ab08:	441a      	add	r2, r3
 800ab0a:	693b      	ldr	r3, [r7, #16]
 800ab0c:	3304      	adds	r3, #4
 800ab0e:	4619      	mov	r1, r3
 800ab10:	4610      	mov	r0, r2
 800ab12:	f7fe fbd2 	bl	80092ba <vListInsertEnd>
 800ab16:	e005      	b.n	800ab24 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ab18:	693b      	ldr	r3, [r7, #16]
 800ab1a:	3318      	adds	r3, #24
 800ab1c:	4619      	mov	r1, r3
 800ab1e:	480e      	ldr	r0, [pc, #56]	; (800ab58 <xTaskRemoveFromEventList+0xb8>)
 800ab20:	f7fe fbcb 	bl	80092ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ab24:	693b      	ldr	r3, [r7, #16]
 800ab26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab28:	4b0c      	ldr	r3, [pc, #48]	; (800ab5c <xTaskRemoveFromEventList+0xbc>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab2e:	429a      	cmp	r2, r3
 800ab30:	d905      	bls.n	800ab3e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ab32:	2301      	movs	r3, #1
 800ab34:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ab36:	4b0a      	ldr	r3, [pc, #40]	; (800ab60 <xTaskRemoveFromEventList+0xc0>)
 800ab38:	2201      	movs	r2, #1
 800ab3a:	601a      	str	r2, [r3, #0]
 800ab3c:	e001      	b.n	800ab42 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800ab3e:	2300      	movs	r3, #0
 800ab40:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ab42:	697b      	ldr	r3, [r7, #20]
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	3718      	adds	r7, #24
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}
 800ab4c:	20000598 	.word	0x20000598
 800ab50:	20000578 	.word	0x20000578
 800ab54:	20000474 	.word	0x20000474
 800ab58:	20000530 	.word	0x20000530
 800ab5c:	20000470 	.word	0x20000470
 800ab60:	20000584 	.word	0x20000584

0800ab64 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ab64:	b480      	push	{r7}
 800ab66:	b083      	sub	sp, #12
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ab6c:	4b06      	ldr	r3, [pc, #24]	; (800ab88 <vTaskInternalSetTimeOutState+0x24>)
 800ab6e:	681a      	ldr	r2, [r3, #0]
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ab74:	4b05      	ldr	r3, [pc, #20]	; (800ab8c <vTaskInternalSetTimeOutState+0x28>)
 800ab76:	681a      	ldr	r2, [r3, #0]
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	605a      	str	r2, [r3, #4]
}
 800ab7c:	bf00      	nop
 800ab7e:	370c      	adds	r7, #12
 800ab80:	46bd      	mov	sp, r7
 800ab82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab86:	4770      	bx	lr
 800ab88:	20000588 	.word	0x20000588
 800ab8c:	20000574 	.word	0x20000574

0800ab90 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b088      	sub	sp, #32
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
 800ab98:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d10a      	bne.n	800abb6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800aba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aba4:	f383 8811 	msr	BASEPRI, r3
 800aba8:	f3bf 8f6f 	isb	sy
 800abac:	f3bf 8f4f 	dsb	sy
 800abb0:	613b      	str	r3, [r7, #16]
}
 800abb2:	bf00      	nop
 800abb4:	e7fe      	b.n	800abb4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d10a      	bne.n	800abd2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800abbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc0:	f383 8811 	msr	BASEPRI, r3
 800abc4:	f3bf 8f6f 	isb	sy
 800abc8:	f3bf 8f4f 	dsb	sy
 800abcc:	60fb      	str	r3, [r7, #12]
}
 800abce:	bf00      	nop
 800abd0:	e7fe      	b.n	800abd0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800abd2:	f000 fc6f 	bl	800b4b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800abd6:	4b1d      	ldr	r3, [pc, #116]	; (800ac4c <xTaskCheckForTimeOut+0xbc>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	685b      	ldr	r3, [r3, #4]
 800abe0:	69ba      	ldr	r2, [r7, #24]
 800abe2:	1ad3      	subs	r3, r2, r3
 800abe4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abee:	d102      	bne.n	800abf6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800abf0:	2300      	movs	r3, #0
 800abf2:	61fb      	str	r3, [r7, #28]
 800abf4:	e023      	b.n	800ac3e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681a      	ldr	r2, [r3, #0]
 800abfa:	4b15      	ldr	r3, [pc, #84]	; (800ac50 <xTaskCheckForTimeOut+0xc0>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	429a      	cmp	r2, r3
 800ac00:	d007      	beq.n	800ac12 <xTaskCheckForTimeOut+0x82>
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	685b      	ldr	r3, [r3, #4]
 800ac06:	69ba      	ldr	r2, [r7, #24]
 800ac08:	429a      	cmp	r2, r3
 800ac0a:	d302      	bcc.n	800ac12 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	61fb      	str	r3, [r7, #28]
 800ac10:	e015      	b.n	800ac3e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	697a      	ldr	r2, [r7, #20]
 800ac18:	429a      	cmp	r2, r3
 800ac1a:	d20b      	bcs.n	800ac34 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	681a      	ldr	r2, [r3, #0]
 800ac20:	697b      	ldr	r3, [r7, #20]
 800ac22:	1ad2      	subs	r2, r2, r3
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ac28:	6878      	ldr	r0, [r7, #4]
 800ac2a:	f7ff ff9b 	bl	800ab64 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	61fb      	str	r3, [r7, #28]
 800ac32:	e004      	b.n	800ac3e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	2200      	movs	r2, #0
 800ac38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ac3e:	f000 fc69 	bl	800b514 <vPortExitCritical>

	return xReturn;
 800ac42:	69fb      	ldr	r3, [r7, #28]
}
 800ac44:	4618      	mov	r0, r3
 800ac46:	3720      	adds	r7, #32
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	bd80      	pop	{r7, pc}
 800ac4c:	20000574 	.word	0x20000574
 800ac50:	20000588 	.word	0x20000588

0800ac54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ac54:	b480      	push	{r7}
 800ac56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ac58:	4b03      	ldr	r3, [pc, #12]	; (800ac68 <vTaskMissedYield+0x14>)
 800ac5a:	2201      	movs	r2, #1
 800ac5c:	601a      	str	r2, [r3, #0]
}
 800ac5e:	bf00      	nop
 800ac60:	46bd      	mov	sp, r7
 800ac62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac66:	4770      	bx	lr
 800ac68:	20000584 	.word	0x20000584

0800ac6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b082      	sub	sp, #8
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ac74:	f000 f852 	bl	800ad1c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ac78:	4b06      	ldr	r3, [pc, #24]	; (800ac94 <prvIdleTask+0x28>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	2b01      	cmp	r3, #1
 800ac7e:	d9f9      	bls.n	800ac74 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ac80:	4b05      	ldr	r3, [pc, #20]	; (800ac98 <prvIdleTask+0x2c>)
 800ac82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac86:	601a      	str	r2, [r3, #0]
 800ac88:	f3bf 8f4f 	dsb	sy
 800ac8c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ac90:	e7f0      	b.n	800ac74 <prvIdleTask+0x8>
 800ac92:	bf00      	nop
 800ac94:	20000474 	.word	0x20000474
 800ac98:	e000ed04 	.word	0xe000ed04

0800ac9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b082      	sub	sp, #8
 800aca0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aca2:	2300      	movs	r3, #0
 800aca4:	607b      	str	r3, [r7, #4]
 800aca6:	e00c      	b.n	800acc2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800aca8:	687a      	ldr	r2, [r7, #4]
 800acaa:	4613      	mov	r3, r2
 800acac:	009b      	lsls	r3, r3, #2
 800acae:	4413      	add	r3, r2
 800acb0:	009b      	lsls	r3, r3, #2
 800acb2:	4a12      	ldr	r2, [pc, #72]	; (800acfc <prvInitialiseTaskLists+0x60>)
 800acb4:	4413      	add	r3, r2
 800acb6:	4618      	mov	r0, r3
 800acb8:	f7fe fad2 	bl	8009260 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	3301      	adds	r3, #1
 800acc0:	607b      	str	r3, [r7, #4]
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2b06      	cmp	r3, #6
 800acc6:	d9ef      	bls.n	800aca8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800acc8:	480d      	ldr	r0, [pc, #52]	; (800ad00 <prvInitialiseTaskLists+0x64>)
 800acca:	f7fe fac9 	bl	8009260 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800acce:	480d      	ldr	r0, [pc, #52]	; (800ad04 <prvInitialiseTaskLists+0x68>)
 800acd0:	f7fe fac6 	bl	8009260 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800acd4:	480c      	ldr	r0, [pc, #48]	; (800ad08 <prvInitialiseTaskLists+0x6c>)
 800acd6:	f7fe fac3 	bl	8009260 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800acda:	480c      	ldr	r0, [pc, #48]	; (800ad0c <prvInitialiseTaskLists+0x70>)
 800acdc:	f7fe fac0 	bl	8009260 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ace0:	480b      	ldr	r0, [pc, #44]	; (800ad10 <prvInitialiseTaskLists+0x74>)
 800ace2:	f7fe fabd 	bl	8009260 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ace6:	4b0b      	ldr	r3, [pc, #44]	; (800ad14 <prvInitialiseTaskLists+0x78>)
 800ace8:	4a05      	ldr	r2, [pc, #20]	; (800ad00 <prvInitialiseTaskLists+0x64>)
 800acea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800acec:	4b0a      	ldr	r3, [pc, #40]	; (800ad18 <prvInitialiseTaskLists+0x7c>)
 800acee:	4a05      	ldr	r2, [pc, #20]	; (800ad04 <prvInitialiseTaskLists+0x68>)
 800acf0:	601a      	str	r2, [r3, #0]
}
 800acf2:	bf00      	nop
 800acf4:	3708      	adds	r7, #8
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bd80      	pop	{r7, pc}
 800acfa:	bf00      	nop
 800acfc:	20000474 	.word	0x20000474
 800ad00:	20000500 	.word	0x20000500
 800ad04:	20000514 	.word	0x20000514
 800ad08:	20000530 	.word	0x20000530
 800ad0c:	20000544 	.word	0x20000544
 800ad10:	2000055c 	.word	0x2000055c
 800ad14:	20000528 	.word	0x20000528
 800ad18:	2000052c 	.word	0x2000052c

0800ad1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b082      	sub	sp, #8
 800ad20:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ad22:	e019      	b.n	800ad58 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ad24:	f000 fbc6 	bl	800b4b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad28:	4b10      	ldr	r3, [pc, #64]	; (800ad6c <prvCheckTasksWaitingTermination+0x50>)
 800ad2a:	68db      	ldr	r3, [r3, #12]
 800ad2c:	68db      	ldr	r3, [r3, #12]
 800ad2e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	3304      	adds	r3, #4
 800ad34:	4618      	mov	r0, r3
 800ad36:	f7fe fb1d 	bl	8009374 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ad3a:	4b0d      	ldr	r3, [pc, #52]	; (800ad70 <prvCheckTasksWaitingTermination+0x54>)
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	3b01      	subs	r3, #1
 800ad40:	4a0b      	ldr	r2, [pc, #44]	; (800ad70 <prvCheckTasksWaitingTermination+0x54>)
 800ad42:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ad44:	4b0b      	ldr	r3, [pc, #44]	; (800ad74 <prvCheckTasksWaitingTermination+0x58>)
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	3b01      	subs	r3, #1
 800ad4a:	4a0a      	ldr	r2, [pc, #40]	; (800ad74 <prvCheckTasksWaitingTermination+0x58>)
 800ad4c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ad4e:	f000 fbe1 	bl	800b514 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f000 f810 	bl	800ad78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ad58:	4b06      	ldr	r3, [pc, #24]	; (800ad74 <prvCheckTasksWaitingTermination+0x58>)
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d1e1      	bne.n	800ad24 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ad60:	bf00      	nop
 800ad62:	bf00      	nop
 800ad64:	3708      	adds	r7, #8
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}
 800ad6a:	bf00      	nop
 800ad6c:	20000544 	.word	0x20000544
 800ad70:	20000570 	.word	0x20000570
 800ad74:	20000558 	.word	0x20000558

0800ad78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b084      	sub	sp, #16
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d108      	bne.n	800ad9c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f000 fd7e 	bl	800b890 <vPortFree>
				vPortFree( pxTCB );
 800ad94:	6878      	ldr	r0, [r7, #4]
 800ad96:	f000 fd7b 	bl	800b890 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ad9a:	e018      	b.n	800adce <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ada2:	2b01      	cmp	r3, #1
 800ada4:	d103      	bne.n	800adae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f000 fd72 	bl	800b890 <vPortFree>
	}
 800adac:	e00f      	b.n	800adce <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800adb4:	2b02      	cmp	r3, #2
 800adb6:	d00a      	beq.n	800adce <prvDeleteTCB+0x56>
	__asm volatile
 800adb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adbc:	f383 8811 	msr	BASEPRI, r3
 800adc0:	f3bf 8f6f 	isb	sy
 800adc4:	f3bf 8f4f 	dsb	sy
 800adc8:	60fb      	str	r3, [r7, #12]
}
 800adca:	bf00      	nop
 800adcc:	e7fe      	b.n	800adcc <prvDeleteTCB+0x54>
	}
 800adce:	bf00      	nop
 800add0:	3710      	adds	r7, #16
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}
	...

0800add8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800add8:	b480      	push	{r7}
 800adda:	b083      	sub	sp, #12
 800addc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800adde:	4b0c      	ldr	r3, [pc, #48]	; (800ae10 <prvResetNextTaskUnblockTime+0x38>)
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d104      	bne.n	800adf2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ade8:	4b0a      	ldr	r3, [pc, #40]	; (800ae14 <prvResetNextTaskUnblockTime+0x3c>)
 800adea:	f04f 32ff 	mov.w	r2, #4294967295
 800adee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800adf0:	e008      	b.n	800ae04 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800adf2:	4b07      	ldr	r3, [pc, #28]	; (800ae10 <prvResetNextTaskUnblockTime+0x38>)
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	68db      	ldr	r3, [r3, #12]
 800adf8:	68db      	ldr	r3, [r3, #12]
 800adfa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	685b      	ldr	r3, [r3, #4]
 800ae00:	4a04      	ldr	r2, [pc, #16]	; (800ae14 <prvResetNextTaskUnblockTime+0x3c>)
 800ae02:	6013      	str	r3, [r2, #0]
}
 800ae04:	bf00      	nop
 800ae06:	370c      	adds	r7, #12
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0e:	4770      	bx	lr
 800ae10:	20000528 	.word	0x20000528
 800ae14:	20000590 	.word	0x20000590

0800ae18 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ae18:	b480      	push	{r7}
 800ae1a:	b083      	sub	sp, #12
 800ae1c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ae1e:	4b0b      	ldr	r3, [pc, #44]	; (800ae4c <xTaskGetSchedulerState+0x34>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d102      	bne.n	800ae2c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ae26:	2301      	movs	r3, #1
 800ae28:	607b      	str	r3, [r7, #4]
 800ae2a:	e008      	b.n	800ae3e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae2c:	4b08      	ldr	r3, [pc, #32]	; (800ae50 <xTaskGetSchedulerState+0x38>)
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d102      	bne.n	800ae3a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ae34:	2302      	movs	r3, #2
 800ae36:	607b      	str	r3, [r7, #4]
 800ae38:	e001      	b.n	800ae3e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ae3e:	687b      	ldr	r3, [r7, #4]
	}
 800ae40:	4618      	mov	r0, r3
 800ae42:	370c      	adds	r7, #12
 800ae44:	46bd      	mov	sp, r7
 800ae46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4a:	4770      	bx	lr
 800ae4c:	2000057c 	.word	0x2000057c
 800ae50:	20000598 	.word	0x20000598

0800ae54 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b084      	sub	sp, #16
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ae60:	2300      	movs	r3, #0
 800ae62:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d05e      	beq.n	800af28 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ae6a:	68bb      	ldr	r3, [r7, #8]
 800ae6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae6e:	4b31      	ldr	r3, [pc, #196]	; (800af34 <xTaskPriorityInherit+0xe0>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae74:	429a      	cmp	r2, r3
 800ae76:	d24e      	bcs.n	800af16 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ae78:	68bb      	ldr	r3, [r7, #8]
 800ae7a:	699b      	ldr	r3, [r3, #24]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	db06      	blt.n	800ae8e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae80:	4b2c      	ldr	r3, [pc, #176]	; (800af34 <xTaskPriorityInherit+0xe0>)
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae86:	f1c3 0207 	rsb	r2, r3, #7
 800ae8a:	68bb      	ldr	r3, [r7, #8]
 800ae8c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ae8e:	68bb      	ldr	r3, [r7, #8]
 800ae90:	6959      	ldr	r1, [r3, #20]
 800ae92:	68bb      	ldr	r3, [r7, #8]
 800ae94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae96:	4613      	mov	r3, r2
 800ae98:	009b      	lsls	r3, r3, #2
 800ae9a:	4413      	add	r3, r2
 800ae9c:	009b      	lsls	r3, r3, #2
 800ae9e:	4a26      	ldr	r2, [pc, #152]	; (800af38 <xTaskPriorityInherit+0xe4>)
 800aea0:	4413      	add	r3, r2
 800aea2:	4299      	cmp	r1, r3
 800aea4:	d12f      	bne.n	800af06 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aea6:	68bb      	ldr	r3, [r7, #8]
 800aea8:	3304      	adds	r3, #4
 800aeaa:	4618      	mov	r0, r3
 800aeac:	f7fe fa62 	bl	8009374 <uxListRemove>
 800aeb0:	4603      	mov	r3, r0
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d10a      	bne.n	800aecc <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800aeb6:	68bb      	ldr	r3, [r7, #8]
 800aeb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeba:	2201      	movs	r2, #1
 800aebc:	fa02 f303 	lsl.w	r3, r2, r3
 800aec0:	43da      	mvns	r2, r3
 800aec2:	4b1e      	ldr	r3, [pc, #120]	; (800af3c <xTaskPriorityInherit+0xe8>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	4013      	ands	r3, r2
 800aec8:	4a1c      	ldr	r2, [pc, #112]	; (800af3c <xTaskPriorityInherit+0xe8>)
 800aeca:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800aecc:	4b19      	ldr	r3, [pc, #100]	; (800af34 <xTaskPriorityInherit+0xe0>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800aed6:	68bb      	ldr	r3, [r7, #8]
 800aed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeda:	2201      	movs	r2, #1
 800aedc:	409a      	lsls	r2, r3
 800aede:	4b17      	ldr	r3, [pc, #92]	; (800af3c <xTaskPriorityInherit+0xe8>)
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	4313      	orrs	r3, r2
 800aee4:	4a15      	ldr	r2, [pc, #84]	; (800af3c <xTaskPriorityInherit+0xe8>)
 800aee6:	6013      	str	r3, [r2, #0]
 800aee8:	68bb      	ldr	r3, [r7, #8]
 800aeea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aeec:	4613      	mov	r3, r2
 800aeee:	009b      	lsls	r3, r3, #2
 800aef0:	4413      	add	r3, r2
 800aef2:	009b      	lsls	r3, r3, #2
 800aef4:	4a10      	ldr	r2, [pc, #64]	; (800af38 <xTaskPriorityInherit+0xe4>)
 800aef6:	441a      	add	r2, r3
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	3304      	adds	r3, #4
 800aefc:	4619      	mov	r1, r3
 800aefe:	4610      	mov	r0, r2
 800af00:	f7fe f9db 	bl	80092ba <vListInsertEnd>
 800af04:	e004      	b.n	800af10 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800af06:	4b0b      	ldr	r3, [pc, #44]	; (800af34 <xTaskPriorityInherit+0xe0>)
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800af10:	2301      	movs	r3, #1
 800af12:	60fb      	str	r3, [r7, #12]
 800af14:	e008      	b.n	800af28 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800af16:	68bb      	ldr	r3, [r7, #8]
 800af18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800af1a:	4b06      	ldr	r3, [pc, #24]	; (800af34 <xTaskPriorityInherit+0xe0>)
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af20:	429a      	cmp	r2, r3
 800af22:	d201      	bcs.n	800af28 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800af24:	2301      	movs	r3, #1
 800af26:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800af28:	68fb      	ldr	r3, [r7, #12]
	}
 800af2a:	4618      	mov	r0, r3
 800af2c:	3710      	adds	r7, #16
 800af2e:	46bd      	mov	sp, r7
 800af30:	bd80      	pop	{r7, pc}
 800af32:	bf00      	nop
 800af34:	20000470 	.word	0x20000470
 800af38:	20000474 	.word	0x20000474
 800af3c:	20000578 	.word	0x20000578

0800af40 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800af40:	b580      	push	{r7, lr}
 800af42:	b086      	sub	sp, #24
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800af4c:	2300      	movs	r3, #0
 800af4e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d06e      	beq.n	800b034 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800af56:	4b3a      	ldr	r3, [pc, #232]	; (800b040 <xTaskPriorityDisinherit+0x100>)
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	693a      	ldr	r2, [r7, #16]
 800af5c:	429a      	cmp	r2, r3
 800af5e:	d00a      	beq.n	800af76 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800af60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af64:	f383 8811 	msr	BASEPRI, r3
 800af68:	f3bf 8f6f 	isb	sy
 800af6c:	f3bf 8f4f 	dsb	sy
 800af70:	60fb      	str	r3, [r7, #12]
}
 800af72:	bf00      	nop
 800af74:	e7fe      	b.n	800af74 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800af76:	693b      	ldr	r3, [r7, #16]
 800af78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d10a      	bne.n	800af94 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800af7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af82:	f383 8811 	msr	BASEPRI, r3
 800af86:	f3bf 8f6f 	isb	sy
 800af8a:	f3bf 8f4f 	dsb	sy
 800af8e:	60bb      	str	r3, [r7, #8]
}
 800af90:	bf00      	nop
 800af92:	e7fe      	b.n	800af92 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800af94:	693b      	ldr	r3, [r7, #16]
 800af96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af98:	1e5a      	subs	r2, r3, #1
 800af9a:	693b      	ldr	r3, [r7, #16]
 800af9c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800af9e:	693b      	ldr	r3, [r7, #16]
 800afa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afa2:	693b      	ldr	r3, [r7, #16]
 800afa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afa6:	429a      	cmp	r2, r3
 800afa8:	d044      	beq.n	800b034 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d140      	bne.n	800b034 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800afb2:	693b      	ldr	r3, [r7, #16]
 800afb4:	3304      	adds	r3, #4
 800afb6:	4618      	mov	r0, r3
 800afb8:	f7fe f9dc 	bl	8009374 <uxListRemove>
 800afbc:	4603      	mov	r3, r0
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d115      	bne.n	800afee <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800afc2:	693b      	ldr	r3, [r7, #16]
 800afc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afc6:	491f      	ldr	r1, [pc, #124]	; (800b044 <xTaskPriorityDisinherit+0x104>)
 800afc8:	4613      	mov	r3, r2
 800afca:	009b      	lsls	r3, r3, #2
 800afcc:	4413      	add	r3, r2
 800afce:	009b      	lsls	r3, r3, #2
 800afd0:	440b      	add	r3, r1
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d10a      	bne.n	800afee <xTaskPriorityDisinherit+0xae>
 800afd8:	693b      	ldr	r3, [r7, #16]
 800afda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afdc:	2201      	movs	r2, #1
 800afde:	fa02 f303 	lsl.w	r3, r2, r3
 800afe2:	43da      	mvns	r2, r3
 800afe4:	4b18      	ldr	r3, [pc, #96]	; (800b048 <xTaskPriorityDisinherit+0x108>)
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	4013      	ands	r3, r2
 800afea:	4a17      	ldr	r2, [pc, #92]	; (800b048 <xTaskPriorityDisinherit+0x108>)
 800afec:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800afee:	693b      	ldr	r3, [r7, #16]
 800aff0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aff2:	693b      	ldr	r3, [r7, #16]
 800aff4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aff6:	693b      	ldr	r3, [r7, #16]
 800aff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800affa:	f1c3 0207 	rsb	r2, r3, #7
 800affe:	693b      	ldr	r3, [r7, #16]
 800b000:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b002:	693b      	ldr	r3, [r7, #16]
 800b004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b006:	2201      	movs	r2, #1
 800b008:	409a      	lsls	r2, r3
 800b00a:	4b0f      	ldr	r3, [pc, #60]	; (800b048 <xTaskPriorityDisinherit+0x108>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	4313      	orrs	r3, r2
 800b010:	4a0d      	ldr	r2, [pc, #52]	; (800b048 <xTaskPriorityDisinherit+0x108>)
 800b012:	6013      	str	r3, [r2, #0]
 800b014:	693b      	ldr	r3, [r7, #16]
 800b016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b018:	4613      	mov	r3, r2
 800b01a:	009b      	lsls	r3, r3, #2
 800b01c:	4413      	add	r3, r2
 800b01e:	009b      	lsls	r3, r3, #2
 800b020:	4a08      	ldr	r2, [pc, #32]	; (800b044 <xTaskPriorityDisinherit+0x104>)
 800b022:	441a      	add	r2, r3
 800b024:	693b      	ldr	r3, [r7, #16]
 800b026:	3304      	adds	r3, #4
 800b028:	4619      	mov	r1, r3
 800b02a:	4610      	mov	r0, r2
 800b02c:	f7fe f945 	bl	80092ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b030:	2301      	movs	r3, #1
 800b032:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b034:	697b      	ldr	r3, [r7, #20]
	}
 800b036:	4618      	mov	r0, r3
 800b038:	3718      	adds	r7, #24
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}
 800b03e:	bf00      	nop
 800b040:	20000470 	.word	0x20000470
 800b044:	20000474 	.word	0x20000474
 800b048:	20000578 	.word	0x20000578

0800b04c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b088      	sub	sp, #32
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
 800b054:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b05a:	2301      	movs	r3, #1
 800b05c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d077      	beq.n	800b154 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b064:	69bb      	ldr	r3, [r7, #24]
 800b066:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d10a      	bne.n	800b082 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800b06c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b070:	f383 8811 	msr	BASEPRI, r3
 800b074:	f3bf 8f6f 	isb	sy
 800b078:	f3bf 8f4f 	dsb	sy
 800b07c:	60fb      	str	r3, [r7, #12]
}
 800b07e:	bf00      	nop
 800b080:	e7fe      	b.n	800b080 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b082:	69bb      	ldr	r3, [r7, #24]
 800b084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b086:	683a      	ldr	r2, [r7, #0]
 800b088:	429a      	cmp	r2, r3
 800b08a:	d902      	bls.n	800b092 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	61fb      	str	r3, [r7, #28]
 800b090:	e002      	b.n	800b098 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b092:	69bb      	ldr	r3, [r7, #24]
 800b094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b096:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b098:	69bb      	ldr	r3, [r7, #24]
 800b09a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b09c:	69fa      	ldr	r2, [r7, #28]
 800b09e:	429a      	cmp	r2, r3
 800b0a0:	d058      	beq.n	800b154 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b0a2:	69bb      	ldr	r3, [r7, #24]
 800b0a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b0a6:	697a      	ldr	r2, [r7, #20]
 800b0a8:	429a      	cmp	r2, r3
 800b0aa:	d153      	bne.n	800b154 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b0ac:	4b2b      	ldr	r3, [pc, #172]	; (800b15c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	69ba      	ldr	r2, [r7, #24]
 800b0b2:	429a      	cmp	r2, r3
 800b0b4:	d10a      	bne.n	800b0cc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800b0b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ba:	f383 8811 	msr	BASEPRI, r3
 800b0be:	f3bf 8f6f 	isb	sy
 800b0c2:	f3bf 8f4f 	dsb	sy
 800b0c6:	60bb      	str	r3, [r7, #8]
}
 800b0c8:	bf00      	nop
 800b0ca:	e7fe      	b.n	800b0ca <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b0cc:	69bb      	ldr	r3, [r7, #24]
 800b0ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0d0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b0d2:	69bb      	ldr	r3, [r7, #24]
 800b0d4:	69fa      	ldr	r2, [r7, #28]
 800b0d6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b0d8:	69bb      	ldr	r3, [r7, #24]
 800b0da:	699b      	ldr	r3, [r3, #24]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	db04      	blt.n	800b0ea <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b0e0:	69fb      	ldr	r3, [r7, #28]
 800b0e2:	f1c3 0207 	rsb	r2, r3, #7
 800b0e6:	69bb      	ldr	r3, [r7, #24]
 800b0e8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b0ea:	69bb      	ldr	r3, [r7, #24]
 800b0ec:	6959      	ldr	r1, [r3, #20]
 800b0ee:	693a      	ldr	r2, [r7, #16]
 800b0f0:	4613      	mov	r3, r2
 800b0f2:	009b      	lsls	r3, r3, #2
 800b0f4:	4413      	add	r3, r2
 800b0f6:	009b      	lsls	r3, r3, #2
 800b0f8:	4a19      	ldr	r2, [pc, #100]	; (800b160 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800b0fa:	4413      	add	r3, r2
 800b0fc:	4299      	cmp	r1, r3
 800b0fe:	d129      	bne.n	800b154 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b100:	69bb      	ldr	r3, [r7, #24]
 800b102:	3304      	adds	r3, #4
 800b104:	4618      	mov	r0, r3
 800b106:	f7fe f935 	bl	8009374 <uxListRemove>
 800b10a:	4603      	mov	r3, r0
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d10a      	bne.n	800b126 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800b110:	69bb      	ldr	r3, [r7, #24]
 800b112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b114:	2201      	movs	r2, #1
 800b116:	fa02 f303 	lsl.w	r3, r2, r3
 800b11a:	43da      	mvns	r2, r3
 800b11c:	4b11      	ldr	r3, [pc, #68]	; (800b164 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	4013      	ands	r3, r2
 800b122:	4a10      	ldr	r2, [pc, #64]	; (800b164 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b124:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b126:	69bb      	ldr	r3, [r7, #24]
 800b128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b12a:	2201      	movs	r2, #1
 800b12c:	409a      	lsls	r2, r3
 800b12e:	4b0d      	ldr	r3, [pc, #52]	; (800b164 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	4313      	orrs	r3, r2
 800b134:	4a0b      	ldr	r2, [pc, #44]	; (800b164 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b136:	6013      	str	r3, [r2, #0]
 800b138:	69bb      	ldr	r3, [r7, #24]
 800b13a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b13c:	4613      	mov	r3, r2
 800b13e:	009b      	lsls	r3, r3, #2
 800b140:	4413      	add	r3, r2
 800b142:	009b      	lsls	r3, r3, #2
 800b144:	4a06      	ldr	r2, [pc, #24]	; (800b160 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800b146:	441a      	add	r2, r3
 800b148:	69bb      	ldr	r3, [r7, #24]
 800b14a:	3304      	adds	r3, #4
 800b14c:	4619      	mov	r1, r3
 800b14e:	4610      	mov	r0, r2
 800b150:	f7fe f8b3 	bl	80092ba <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b154:	bf00      	nop
 800b156:	3720      	adds	r7, #32
 800b158:	46bd      	mov	sp, r7
 800b15a:	bd80      	pop	{r7, pc}
 800b15c:	20000470 	.word	0x20000470
 800b160:	20000474 	.word	0x20000474
 800b164:	20000578 	.word	0x20000578

0800b168 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b168:	b480      	push	{r7}
 800b16a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b16c:	4b07      	ldr	r3, [pc, #28]	; (800b18c <pvTaskIncrementMutexHeldCount+0x24>)
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d004      	beq.n	800b17e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b174:	4b05      	ldr	r3, [pc, #20]	; (800b18c <pvTaskIncrementMutexHeldCount+0x24>)
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b17a:	3201      	adds	r2, #1
 800b17c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800b17e:	4b03      	ldr	r3, [pc, #12]	; (800b18c <pvTaskIncrementMutexHeldCount+0x24>)
 800b180:	681b      	ldr	r3, [r3, #0]
	}
 800b182:	4618      	mov	r0, r3
 800b184:	46bd      	mov	sp, r7
 800b186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18a:	4770      	bx	lr
 800b18c:	20000470 	.word	0x20000470

0800b190 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b084      	sub	sp, #16
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
 800b198:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b19a:	4b29      	ldr	r3, [pc, #164]	; (800b240 <prvAddCurrentTaskToDelayedList+0xb0>)
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b1a0:	4b28      	ldr	r3, [pc, #160]	; (800b244 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	3304      	adds	r3, #4
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f7fe f8e4 	bl	8009374 <uxListRemove>
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d10b      	bne.n	800b1ca <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b1b2:	4b24      	ldr	r3, [pc, #144]	; (800b244 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1b8:	2201      	movs	r2, #1
 800b1ba:	fa02 f303 	lsl.w	r3, r2, r3
 800b1be:	43da      	mvns	r2, r3
 800b1c0:	4b21      	ldr	r3, [pc, #132]	; (800b248 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	4013      	ands	r3, r2
 800b1c6:	4a20      	ldr	r2, [pc, #128]	; (800b248 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b1c8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1d0:	d10a      	bne.n	800b1e8 <prvAddCurrentTaskToDelayedList+0x58>
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d007      	beq.n	800b1e8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b1d8:	4b1a      	ldr	r3, [pc, #104]	; (800b244 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	3304      	adds	r3, #4
 800b1de:	4619      	mov	r1, r3
 800b1e0:	481a      	ldr	r0, [pc, #104]	; (800b24c <prvAddCurrentTaskToDelayedList+0xbc>)
 800b1e2:	f7fe f86a 	bl	80092ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b1e6:	e026      	b.n	800b236 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b1e8:	68fa      	ldr	r2, [r7, #12]
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	4413      	add	r3, r2
 800b1ee:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b1f0:	4b14      	ldr	r3, [pc, #80]	; (800b244 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	68ba      	ldr	r2, [r7, #8]
 800b1f6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b1f8:	68ba      	ldr	r2, [r7, #8]
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	429a      	cmp	r2, r3
 800b1fe:	d209      	bcs.n	800b214 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b200:	4b13      	ldr	r3, [pc, #76]	; (800b250 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b202:	681a      	ldr	r2, [r3, #0]
 800b204:	4b0f      	ldr	r3, [pc, #60]	; (800b244 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	3304      	adds	r3, #4
 800b20a:	4619      	mov	r1, r3
 800b20c:	4610      	mov	r0, r2
 800b20e:	f7fe f878 	bl	8009302 <vListInsert>
}
 800b212:	e010      	b.n	800b236 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b214:	4b0f      	ldr	r3, [pc, #60]	; (800b254 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b216:	681a      	ldr	r2, [r3, #0]
 800b218:	4b0a      	ldr	r3, [pc, #40]	; (800b244 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	3304      	adds	r3, #4
 800b21e:	4619      	mov	r1, r3
 800b220:	4610      	mov	r0, r2
 800b222:	f7fe f86e 	bl	8009302 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b226:	4b0c      	ldr	r3, [pc, #48]	; (800b258 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	68ba      	ldr	r2, [r7, #8]
 800b22c:	429a      	cmp	r2, r3
 800b22e:	d202      	bcs.n	800b236 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b230:	4a09      	ldr	r2, [pc, #36]	; (800b258 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b232:	68bb      	ldr	r3, [r7, #8]
 800b234:	6013      	str	r3, [r2, #0]
}
 800b236:	bf00      	nop
 800b238:	3710      	adds	r7, #16
 800b23a:	46bd      	mov	sp, r7
 800b23c:	bd80      	pop	{r7, pc}
 800b23e:	bf00      	nop
 800b240:	20000574 	.word	0x20000574
 800b244:	20000470 	.word	0x20000470
 800b248:	20000578 	.word	0x20000578
 800b24c:	2000055c 	.word	0x2000055c
 800b250:	2000052c 	.word	0x2000052c
 800b254:	20000528 	.word	0x20000528
 800b258:	20000590 	.word	0x20000590

0800b25c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b25c:	b480      	push	{r7}
 800b25e:	b085      	sub	sp, #20
 800b260:	af00      	add	r7, sp, #0
 800b262:	60f8      	str	r0, [r7, #12]
 800b264:	60b9      	str	r1, [r7, #8]
 800b266:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	3b04      	subs	r3, #4
 800b26c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b274:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	3b04      	subs	r3, #4
 800b27a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b27c:	68bb      	ldr	r3, [r7, #8]
 800b27e:	f023 0201 	bic.w	r2, r3, #1
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	3b04      	subs	r3, #4
 800b28a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b28c:	4a0c      	ldr	r2, [pc, #48]	; (800b2c0 <pxPortInitialiseStack+0x64>)
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	3b14      	subs	r3, #20
 800b296:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b298:	687a      	ldr	r2, [r7, #4]
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	3b04      	subs	r3, #4
 800b2a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	f06f 0202 	mvn.w	r2, #2
 800b2aa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	3b20      	subs	r3, #32
 800b2b0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
}
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	3714      	adds	r7, #20
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2be:	4770      	bx	lr
 800b2c0:	0800b2c5 	.word	0x0800b2c5

0800b2c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b085      	sub	sp, #20
 800b2c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b2ce:	4b12      	ldr	r3, [pc, #72]	; (800b318 <prvTaskExitError+0x54>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2d6:	d00a      	beq.n	800b2ee <prvTaskExitError+0x2a>
	__asm volatile
 800b2d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2dc:	f383 8811 	msr	BASEPRI, r3
 800b2e0:	f3bf 8f6f 	isb	sy
 800b2e4:	f3bf 8f4f 	dsb	sy
 800b2e8:	60fb      	str	r3, [r7, #12]
}
 800b2ea:	bf00      	nop
 800b2ec:	e7fe      	b.n	800b2ec <prvTaskExitError+0x28>
	__asm volatile
 800b2ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2f2:	f383 8811 	msr	BASEPRI, r3
 800b2f6:	f3bf 8f6f 	isb	sy
 800b2fa:	f3bf 8f4f 	dsb	sy
 800b2fe:	60bb      	str	r3, [r7, #8]
}
 800b300:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b302:	bf00      	nop
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d0fc      	beq.n	800b304 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b30a:	bf00      	nop
 800b30c:	bf00      	nop
 800b30e:	3714      	adds	r7, #20
 800b310:	46bd      	mov	sp, r7
 800b312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b316:	4770      	bx	lr
 800b318:	2000011c 	.word	0x2000011c
 800b31c:	00000000 	.word	0x00000000

0800b320 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b320:	4b07      	ldr	r3, [pc, #28]	; (800b340 <pxCurrentTCBConst2>)
 800b322:	6819      	ldr	r1, [r3, #0]
 800b324:	6808      	ldr	r0, [r1, #0]
 800b326:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b32a:	f380 8809 	msr	PSP, r0
 800b32e:	f3bf 8f6f 	isb	sy
 800b332:	f04f 0000 	mov.w	r0, #0
 800b336:	f380 8811 	msr	BASEPRI, r0
 800b33a:	4770      	bx	lr
 800b33c:	f3af 8000 	nop.w

0800b340 <pxCurrentTCBConst2>:
 800b340:	20000470 	.word	0x20000470
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b344:	bf00      	nop
 800b346:	bf00      	nop

0800b348 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b348:	4808      	ldr	r0, [pc, #32]	; (800b36c <prvPortStartFirstTask+0x24>)
 800b34a:	6800      	ldr	r0, [r0, #0]
 800b34c:	6800      	ldr	r0, [r0, #0]
 800b34e:	f380 8808 	msr	MSP, r0
 800b352:	f04f 0000 	mov.w	r0, #0
 800b356:	f380 8814 	msr	CONTROL, r0
 800b35a:	b662      	cpsie	i
 800b35c:	b661      	cpsie	f
 800b35e:	f3bf 8f4f 	dsb	sy
 800b362:	f3bf 8f6f 	isb	sy
 800b366:	df00      	svc	0
 800b368:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b36a:	bf00      	nop
 800b36c:	e000ed08 	.word	0xe000ed08

0800b370 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b086      	sub	sp, #24
 800b374:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b376:	4b46      	ldr	r3, [pc, #280]	; (800b490 <xPortStartScheduler+0x120>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	4a46      	ldr	r2, [pc, #280]	; (800b494 <xPortStartScheduler+0x124>)
 800b37c:	4293      	cmp	r3, r2
 800b37e:	d10a      	bne.n	800b396 <xPortStartScheduler+0x26>
	__asm volatile
 800b380:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b384:	f383 8811 	msr	BASEPRI, r3
 800b388:	f3bf 8f6f 	isb	sy
 800b38c:	f3bf 8f4f 	dsb	sy
 800b390:	613b      	str	r3, [r7, #16]
}
 800b392:	bf00      	nop
 800b394:	e7fe      	b.n	800b394 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b396:	4b3e      	ldr	r3, [pc, #248]	; (800b490 <xPortStartScheduler+0x120>)
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	4a3f      	ldr	r2, [pc, #252]	; (800b498 <xPortStartScheduler+0x128>)
 800b39c:	4293      	cmp	r3, r2
 800b39e:	d10a      	bne.n	800b3b6 <xPortStartScheduler+0x46>
	__asm volatile
 800b3a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3a4:	f383 8811 	msr	BASEPRI, r3
 800b3a8:	f3bf 8f6f 	isb	sy
 800b3ac:	f3bf 8f4f 	dsb	sy
 800b3b0:	60fb      	str	r3, [r7, #12]
}
 800b3b2:	bf00      	nop
 800b3b4:	e7fe      	b.n	800b3b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b3b6:	4b39      	ldr	r3, [pc, #228]	; (800b49c <xPortStartScheduler+0x12c>)
 800b3b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b3ba:	697b      	ldr	r3, [r7, #20]
 800b3bc:	781b      	ldrb	r3, [r3, #0]
 800b3be:	b2db      	uxtb	r3, r3
 800b3c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	22ff      	movs	r2, #255	; 0xff
 800b3c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b3c8:	697b      	ldr	r3, [r7, #20]
 800b3ca:	781b      	ldrb	r3, [r3, #0]
 800b3cc:	b2db      	uxtb	r3, r3
 800b3ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b3d0:	78fb      	ldrb	r3, [r7, #3]
 800b3d2:	b2db      	uxtb	r3, r3
 800b3d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b3d8:	b2da      	uxtb	r2, r3
 800b3da:	4b31      	ldr	r3, [pc, #196]	; (800b4a0 <xPortStartScheduler+0x130>)
 800b3dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b3de:	4b31      	ldr	r3, [pc, #196]	; (800b4a4 <xPortStartScheduler+0x134>)
 800b3e0:	2207      	movs	r2, #7
 800b3e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b3e4:	e009      	b.n	800b3fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b3e6:	4b2f      	ldr	r3, [pc, #188]	; (800b4a4 <xPortStartScheduler+0x134>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	3b01      	subs	r3, #1
 800b3ec:	4a2d      	ldr	r2, [pc, #180]	; (800b4a4 <xPortStartScheduler+0x134>)
 800b3ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b3f0:	78fb      	ldrb	r3, [r7, #3]
 800b3f2:	b2db      	uxtb	r3, r3
 800b3f4:	005b      	lsls	r3, r3, #1
 800b3f6:	b2db      	uxtb	r3, r3
 800b3f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b3fa:	78fb      	ldrb	r3, [r7, #3]
 800b3fc:	b2db      	uxtb	r3, r3
 800b3fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b402:	2b80      	cmp	r3, #128	; 0x80
 800b404:	d0ef      	beq.n	800b3e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b406:	4b27      	ldr	r3, [pc, #156]	; (800b4a4 <xPortStartScheduler+0x134>)
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	f1c3 0307 	rsb	r3, r3, #7
 800b40e:	2b04      	cmp	r3, #4
 800b410:	d00a      	beq.n	800b428 <xPortStartScheduler+0xb8>
	__asm volatile
 800b412:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b416:	f383 8811 	msr	BASEPRI, r3
 800b41a:	f3bf 8f6f 	isb	sy
 800b41e:	f3bf 8f4f 	dsb	sy
 800b422:	60bb      	str	r3, [r7, #8]
}
 800b424:	bf00      	nop
 800b426:	e7fe      	b.n	800b426 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b428:	4b1e      	ldr	r3, [pc, #120]	; (800b4a4 <xPortStartScheduler+0x134>)
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	021b      	lsls	r3, r3, #8
 800b42e:	4a1d      	ldr	r2, [pc, #116]	; (800b4a4 <xPortStartScheduler+0x134>)
 800b430:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b432:	4b1c      	ldr	r3, [pc, #112]	; (800b4a4 <xPortStartScheduler+0x134>)
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b43a:	4a1a      	ldr	r2, [pc, #104]	; (800b4a4 <xPortStartScheduler+0x134>)
 800b43c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	b2da      	uxtb	r2, r3
 800b442:	697b      	ldr	r3, [r7, #20]
 800b444:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b446:	4b18      	ldr	r3, [pc, #96]	; (800b4a8 <xPortStartScheduler+0x138>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	4a17      	ldr	r2, [pc, #92]	; (800b4a8 <xPortStartScheduler+0x138>)
 800b44c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b450:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b452:	4b15      	ldr	r3, [pc, #84]	; (800b4a8 <xPortStartScheduler+0x138>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	4a14      	ldr	r2, [pc, #80]	; (800b4a8 <xPortStartScheduler+0x138>)
 800b458:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b45c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b45e:	f000 f8dd 	bl	800b61c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b462:	4b12      	ldr	r3, [pc, #72]	; (800b4ac <xPortStartScheduler+0x13c>)
 800b464:	2200      	movs	r2, #0
 800b466:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b468:	f000 f8fc 	bl	800b664 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b46c:	4b10      	ldr	r3, [pc, #64]	; (800b4b0 <xPortStartScheduler+0x140>)
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	4a0f      	ldr	r2, [pc, #60]	; (800b4b0 <xPortStartScheduler+0x140>)
 800b472:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b476:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b478:	f7ff ff66 	bl	800b348 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b47c:	f7ff fa90 	bl	800a9a0 <vTaskSwitchContext>
	prvTaskExitError();
 800b480:	f7ff ff20 	bl	800b2c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b484:	2300      	movs	r3, #0
}
 800b486:	4618      	mov	r0, r3
 800b488:	3718      	adds	r7, #24
 800b48a:	46bd      	mov	sp, r7
 800b48c:	bd80      	pop	{r7, pc}
 800b48e:	bf00      	nop
 800b490:	e000ed00 	.word	0xe000ed00
 800b494:	410fc271 	.word	0x410fc271
 800b498:	410fc270 	.word	0x410fc270
 800b49c:	e000e400 	.word	0xe000e400
 800b4a0:	2000059c 	.word	0x2000059c
 800b4a4:	200005a0 	.word	0x200005a0
 800b4a8:	e000ed20 	.word	0xe000ed20
 800b4ac:	2000011c 	.word	0x2000011c
 800b4b0:	e000ef34 	.word	0xe000ef34

0800b4b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	b083      	sub	sp, #12
 800b4b8:	af00      	add	r7, sp, #0
	__asm volatile
 800b4ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4be:	f383 8811 	msr	BASEPRI, r3
 800b4c2:	f3bf 8f6f 	isb	sy
 800b4c6:	f3bf 8f4f 	dsb	sy
 800b4ca:	607b      	str	r3, [r7, #4]
}
 800b4cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b4ce:	4b0f      	ldr	r3, [pc, #60]	; (800b50c <vPortEnterCritical+0x58>)
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	3301      	adds	r3, #1
 800b4d4:	4a0d      	ldr	r2, [pc, #52]	; (800b50c <vPortEnterCritical+0x58>)
 800b4d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b4d8:	4b0c      	ldr	r3, [pc, #48]	; (800b50c <vPortEnterCritical+0x58>)
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	2b01      	cmp	r3, #1
 800b4de:	d10f      	bne.n	800b500 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b4e0:	4b0b      	ldr	r3, [pc, #44]	; (800b510 <vPortEnterCritical+0x5c>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	b2db      	uxtb	r3, r3
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d00a      	beq.n	800b500 <vPortEnterCritical+0x4c>
	__asm volatile
 800b4ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ee:	f383 8811 	msr	BASEPRI, r3
 800b4f2:	f3bf 8f6f 	isb	sy
 800b4f6:	f3bf 8f4f 	dsb	sy
 800b4fa:	603b      	str	r3, [r7, #0]
}
 800b4fc:	bf00      	nop
 800b4fe:	e7fe      	b.n	800b4fe <vPortEnterCritical+0x4a>
	}
}
 800b500:	bf00      	nop
 800b502:	370c      	adds	r7, #12
 800b504:	46bd      	mov	sp, r7
 800b506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50a:	4770      	bx	lr
 800b50c:	2000011c 	.word	0x2000011c
 800b510:	e000ed04 	.word	0xe000ed04

0800b514 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b514:	b480      	push	{r7}
 800b516:	b083      	sub	sp, #12
 800b518:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b51a:	4b12      	ldr	r3, [pc, #72]	; (800b564 <vPortExitCritical+0x50>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d10a      	bne.n	800b538 <vPortExitCritical+0x24>
	__asm volatile
 800b522:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b526:	f383 8811 	msr	BASEPRI, r3
 800b52a:	f3bf 8f6f 	isb	sy
 800b52e:	f3bf 8f4f 	dsb	sy
 800b532:	607b      	str	r3, [r7, #4]
}
 800b534:	bf00      	nop
 800b536:	e7fe      	b.n	800b536 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b538:	4b0a      	ldr	r3, [pc, #40]	; (800b564 <vPortExitCritical+0x50>)
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	3b01      	subs	r3, #1
 800b53e:	4a09      	ldr	r2, [pc, #36]	; (800b564 <vPortExitCritical+0x50>)
 800b540:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b542:	4b08      	ldr	r3, [pc, #32]	; (800b564 <vPortExitCritical+0x50>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d105      	bne.n	800b556 <vPortExitCritical+0x42>
 800b54a:	2300      	movs	r3, #0
 800b54c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b54e:	683b      	ldr	r3, [r7, #0]
 800b550:	f383 8811 	msr	BASEPRI, r3
}
 800b554:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b556:	bf00      	nop
 800b558:	370c      	adds	r7, #12
 800b55a:	46bd      	mov	sp, r7
 800b55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b560:	4770      	bx	lr
 800b562:	bf00      	nop
 800b564:	2000011c 	.word	0x2000011c
	...

0800b570 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b570:	f3ef 8009 	mrs	r0, PSP
 800b574:	f3bf 8f6f 	isb	sy
 800b578:	4b15      	ldr	r3, [pc, #84]	; (800b5d0 <pxCurrentTCBConst>)
 800b57a:	681a      	ldr	r2, [r3, #0]
 800b57c:	f01e 0f10 	tst.w	lr, #16
 800b580:	bf08      	it	eq
 800b582:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b586:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b58a:	6010      	str	r0, [r2, #0]
 800b58c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b590:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b594:	f380 8811 	msr	BASEPRI, r0
 800b598:	f3bf 8f4f 	dsb	sy
 800b59c:	f3bf 8f6f 	isb	sy
 800b5a0:	f7ff f9fe 	bl	800a9a0 <vTaskSwitchContext>
 800b5a4:	f04f 0000 	mov.w	r0, #0
 800b5a8:	f380 8811 	msr	BASEPRI, r0
 800b5ac:	bc09      	pop	{r0, r3}
 800b5ae:	6819      	ldr	r1, [r3, #0]
 800b5b0:	6808      	ldr	r0, [r1, #0]
 800b5b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5b6:	f01e 0f10 	tst.w	lr, #16
 800b5ba:	bf08      	it	eq
 800b5bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b5c0:	f380 8809 	msr	PSP, r0
 800b5c4:	f3bf 8f6f 	isb	sy
 800b5c8:	4770      	bx	lr
 800b5ca:	bf00      	nop
 800b5cc:	f3af 8000 	nop.w

0800b5d0 <pxCurrentTCBConst>:
 800b5d0:	20000470 	.word	0x20000470
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b5d4:	bf00      	nop
 800b5d6:	bf00      	nop

0800b5d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b082      	sub	sp, #8
 800b5dc:	af00      	add	r7, sp, #0
	__asm volatile
 800b5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5e2:	f383 8811 	msr	BASEPRI, r3
 800b5e6:	f3bf 8f6f 	isb	sy
 800b5ea:	f3bf 8f4f 	dsb	sy
 800b5ee:	607b      	str	r3, [r7, #4]
}
 800b5f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b5f2:	f7ff f91d 	bl	800a830 <xTaskIncrementTick>
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d003      	beq.n	800b604 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b5fc:	4b06      	ldr	r3, [pc, #24]	; (800b618 <SysTick_Handler+0x40>)
 800b5fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b602:	601a      	str	r2, [r3, #0]
 800b604:	2300      	movs	r3, #0
 800b606:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	f383 8811 	msr	BASEPRI, r3
}
 800b60e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b610:	bf00      	nop
 800b612:	3708      	adds	r7, #8
 800b614:	46bd      	mov	sp, r7
 800b616:	bd80      	pop	{r7, pc}
 800b618:	e000ed04 	.word	0xe000ed04

0800b61c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b61c:	b480      	push	{r7}
 800b61e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b620:	4b0b      	ldr	r3, [pc, #44]	; (800b650 <vPortSetupTimerInterrupt+0x34>)
 800b622:	2200      	movs	r2, #0
 800b624:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b626:	4b0b      	ldr	r3, [pc, #44]	; (800b654 <vPortSetupTimerInterrupt+0x38>)
 800b628:	2200      	movs	r2, #0
 800b62a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b62c:	4b0a      	ldr	r3, [pc, #40]	; (800b658 <vPortSetupTimerInterrupt+0x3c>)
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	4a0a      	ldr	r2, [pc, #40]	; (800b65c <vPortSetupTimerInterrupt+0x40>)
 800b632:	fba2 2303 	umull	r2, r3, r2, r3
 800b636:	099b      	lsrs	r3, r3, #6
 800b638:	4a09      	ldr	r2, [pc, #36]	; (800b660 <vPortSetupTimerInterrupt+0x44>)
 800b63a:	3b01      	subs	r3, #1
 800b63c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b63e:	4b04      	ldr	r3, [pc, #16]	; (800b650 <vPortSetupTimerInterrupt+0x34>)
 800b640:	2207      	movs	r2, #7
 800b642:	601a      	str	r2, [r3, #0]
}
 800b644:	bf00      	nop
 800b646:	46bd      	mov	sp, r7
 800b648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64c:	4770      	bx	lr
 800b64e:	bf00      	nop
 800b650:	e000e010 	.word	0xe000e010
 800b654:	e000e018 	.word	0xe000e018
 800b658:	20000000 	.word	0x20000000
 800b65c:	10624dd3 	.word	0x10624dd3
 800b660:	e000e014 	.word	0xe000e014

0800b664 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b664:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b674 <vPortEnableVFP+0x10>
 800b668:	6801      	ldr	r1, [r0, #0]
 800b66a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b66e:	6001      	str	r1, [r0, #0]
 800b670:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b672:	bf00      	nop
 800b674:	e000ed88 	.word	0xe000ed88

0800b678 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b678:	b480      	push	{r7}
 800b67a:	b085      	sub	sp, #20
 800b67c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b67e:	f3ef 8305 	mrs	r3, IPSR
 800b682:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	2b0f      	cmp	r3, #15
 800b688:	d914      	bls.n	800b6b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b68a:	4a17      	ldr	r2, [pc, #92]	; (800b6e8 <vPortValidateInterruptPriority+0x70>)
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	4413      	add	r3, r2
 800b690:	781b      	ldrb	r3, [r3, #0]
 800b692:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b694:	4b15      	ldr	r3, [pc, #84]	; (800b6ec <vPortValidateInterruptPriority+0x74>)
 800b696:	781b      	ldrb	r3, [r3, #0]
 800b698:	7afa      	ldrb	r2, [r7, #11]
 800b69a:	429a      	cmp	r2, r3
 800b69c:	d20a      	bcs.n	800b6b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b69e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6a2:	f383 8811 	msr	BASEPRI, r3
 800b6a6:	f3bf 8f6f 	isb	sy
 800b6aa:	f3bf 8f4f 	dsb	sy
 800b6ae:	607b      	str	r3, [r7, #4]
}
 800b6b0:	bf00      	nop
 800b6b2:	e7fe      	b.n	800b6b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b6b4:	4b0e      	ldr	r3, [pc, #56]	; (800b6f0 <vPortValidateInterruptPriority+0x78>)
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b6bc:	4b0d      	ldr	r3, [pc, #52]	; (800b6f4 <vPortValidateInterruptPriority+0x7c>)
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	429a      	cmp	r2, r3
 800b6c2:	d90a      	bls.n	800b6da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b6c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6c8:	f383 8811 	msr	BASEPRI, r3
 800b6cc:	f3bf 8f6f 	isb	sy
 800b6d0:	f3bf 8f4f 	dsb	sy
 800b6d4:	603b      	str	r3, [r7, #0]
}
 800b6d6:	bf00      	nop
 800b6d8:	e7fe      	b.n	800b6d8 <vPortValidateInterruptPriority+0x60>
	}
 800b6da:	bf00      	nop
 800b6dc:	3714      	adds	r7, #20
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e4:	4770      	bx	lr
 800b6e6:	bf00      	nop
 800b6e8:	e000e3f0 	.word	0xe000e3f0
 800b6ec:	2000059c 	.word	0x2000059c
 800b6f0:	e000ed0c 	.word	0xe000ed0c
 800b6f4:	200005a0 	.word	0x200005a0

0800b6f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b08a      	sub	sp, #40	; 0x28
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b700:	2300      	movs	r3, #0
 800b702:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b704:	f7fe ffc8 	bl	800a698 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b708:	4b5b      	ldr	r3, [pc, #364]	; (800b878 <pvPortMalloc+0x180>)
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d101      	bne.n	800b714 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b710:	f000 f920 	bl	800b954 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b714:	4b59      	ldr	r3, [pc, #356]	; (800b87c <pvPortMalloc+0x184>)
 800b716:	681a      	ldr	r2, [r3, #0]
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	4013      	ands	r3, r2
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	f040 8093 	bne.w	800b848 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d01d      	beq.n	800b764 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b728:	2208      	movs	r2, #8
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	4413      	add	r3, r2
 800b72e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	f003 0307 	and.w	r3, r3, #7
 800b736:	2b00      	cmp	r3, #0
 800b738:	d014      	beq.n	800b764 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	f023 0307 	bic.w	r3, r3, #7
 800b740:	3308      	adds	r3, #8
 800b742:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	f003 0307 	and.w	r3, r3, #7
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d00a      	beq.n	800b764 <pvPortMalloc+0x6c>
	__asm volatile
 800b74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b752:	f383 8811 	msr	BASEPRI, r3
 800b756:	f3bf 8f6f 	isb	sy
 800b75a:	f3bf 8f4f 	dsb	sy
 800b75e:	617b      	str	r3, [r7, #20]
}
 800b760:	bf00      	nop
 800b762:	e7fe      	b.n	800b762 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d06e      	beq.n	800b848 <pvPortMalloc+0x150>
 800b76a:	4b45      	ldr	r3, [pc, #276]	; (800b880 <pvPortMalloc+0x188>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	687a      	ldr	r2, [r7, #4]
 800b770:	429a      	cmp	r2, r3
 800b772:	d869      	bhi.n	800b848 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b774:	4b43      	ldr	r3, [pc, #268]	; (800b884 <pvPortMalloc+0x18c>)
 800b776:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b778:	4b42      	ldr	r3, [pc, #264]	; (800b884 <pvPortMalloc+0x18c>)
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b77e:	e004      	b.n	800b78a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b782:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b78c:	685b      	ldr	r3, [r3, #4]
 800b78e:	687a      	ldr	r2, [r7, #4]
 800b790:	429a      	cmp	r2, r3
 800b792:	d903      	bls.n	800b79c <pvPortMalloc+0xa4>
 800b794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d1f1      	bne.n	800b780 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b79c:	4b36      	ldr	r3, [pc, #216]	; (800b878 <pvPortMalloc+0x180>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7a2:	429a      	cmp	r2, r3
 800b7a4:	d050      	beq.n	800b848 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b7a6:	6a3b      	ldr	r3, [r7, #32]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	2208      	movs	r2, #8
 800b7ac:	4413      	add	r3, r2
 800b7ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7b2:	681a      	ldr	r2, [r3, #0]
 800b7b4:	6a3b      	ldr	r3, [r7, #32]
 800b7b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b7b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ba:	685a      	ldr	r2, [r3, #4]
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	1ad2      	subs	r2, r2, r3
 800b7c0:	2308      	movs	r3, #8
 800b7c2:	005b      	lsls	r3, r3, #1
 800b7c4:	429a      	cmp	r2, r3
 800b7c6:	d91f      	bls.n	800b808 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b7c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	4413      	add	r3, r2
 800b7ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b7d0:	69bb      	ldr	r3, [r7, #24]
 800b7d2:	f003 0307 	and.w	r3, r3, #7
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d00a      	beq.n	800b7f0 <pvPortMalloc+0xf8>
	__asm volatile
 800b7da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7de:	f383 8811 	msr	BASEPRI, r3
 800b7e2:	f3bf 8f6f 	isb	sy
 800b7e6:	f3bf 8f4f 	dsb	sy
 800b7ea:	613b      	str	r3, [r7, #16]
}
 800b7ec:	bf00      	nop
 800b7ee:	e7fe      	b.n	800b7ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7f2:	685a      	ldr	r2, [r3, #4]
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	1ad2      	subs	r2, r2, r3
 800b7f8:	69bb      	ldr	r3, [r7, #24]
 800b7fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b7fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7fe:	687a      	ldr	r2, [r7, #4]
 800b800:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b802:	69b8      	ldr	r0, [r7, #24]
 800b804:	f000 f908 	bl	800ba18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b808:	4b1d      	ldr	r3, [pc, #116]	; (800b880 <pvPortMalloc+0x188>)
 800b80a:	681a      	ldr	r2, [r3, #0]
 800b80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b80e:	685b      	ldr	r3, [r3, #4]
 800b810:	1ad3      	subs	r3, r2, r3
 800b812:	4a1b      	ldr	r2, [pc, #108]	; (800b880 <pvPortMalloc+0x188>)
 800b814:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b816:	4b1a      	ldr	r3, [pc, #104]	; (800b880 <pvPortMalloc+0x188>)
 800b818:	681a      	ldr	r2, [r3, #0]
 800b81a:	4b1b      	ldr	r3, [pc, #108]	; (800b888 <pvPortMalloc+0x190>)
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	429a      	cmp	r2, r3
 800b820:	d203      	bcs.n	800b82a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b822:	4b17      	ldr	r3, [pc, #92]	; (800b880 <pvPortMalloc+0x188>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	4a18      	ldr	r2, [pc, #96]	; (800b888 <pvPortMalloc+0x190>)
 800b828:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b82c:	685a      	ldr	r2, [r3, #4]
 800b82e:	4b13      	ldr	r3, [pc, #76]	; (800b87c <pvPortMalloc+0x184>)
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	431a      	orrs	r2, r3
 800b834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b836:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b83a:	2200      	movs	r2, #0
 800b83c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b83e:	4b13      	ldr	r3, [pc, #76]	; (800b88c <pvPortMalloc+0x194>)
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	3301      	adds	r3, #1
 800b844:	4a11      	ldr	r2, [pc, #68]	; (800b88c <pvPortMalloc+0x194>)
 800b846:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b848:	f7fe ff34 	bl	800a6b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b84c:	69fb      	ldr	r3, [r7, #28]
 800b84e:	f003 0307 	and.w	r3, r3, #7
 800b852:	2b00      	cmp	r3, #0
 800b854:	d00a      	beq.n	800b86c <pvPortMalloc+0x174>
	__asm volatile
 800b856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b85a:	f383 8811 	msr	BASEPRI, r3
 800b85e:	f3bf 8f6f 	isb	sy
 800b862:	f3bf 8f4f 	dsb	sy
 800b866:	60fb      	str	r3, [r7, #12]
}
 800b868:	bf00      	nop
 800b86a:	e7fe      	b.n	800b86a <pvPortMalloc+0x172>
	return pvReturn;
 800b86c:	69fb      	ldr	r3, [r7, #28]
}
 800b86e:	4618      	mov	r0, r3
 800b870:	3728      	adds	r7, #40	; 0x28
 800b872:	46bd      	mov	sp, r7
 800b874:	bd80      	pop	{r7, pc}
 800b876:	bf00      	nop
 800b878:	200041ac 	.word	0x200041ac
 800b87c:	200041c0 	.word	0x200041c0
 800b880:	200041b0 	.word	0x200041b0
 800b884:	200041a4 	.word	0x200041a4
 800b888:	200041b4 	.word	0x200041b4
 800b88c:	200041b8 	.word	0x200041b8

0800b890 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b086      	sub	sp, #24
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d04d      	beq.n	800b93e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b8a2:	2308      	movs	r3, #8
 800b8a4:	425b      	negs	r3, r3
 800b8a6:	697a      	ldr	r2, [r7, #20]
 800b8a8:	4413      	add	r3, r2
 800b8aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b8ac:	697b      	ldr	r3, [r7, #20]
 800b8ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b8b0:	693b      	ldr	r3, [r7, #16]
 800b8b2:	685a      	ldr	r2, [r3, #4]
 800b8b4:	4b24      	ldr	r3, [pc, #144]	; (800b948 <vPortFree+0xb8>)
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	4013      	ands	r3, r2
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d10a      	bne.n	800b8d4 <vPortFree+0x44>
	__asm volatile
 800b8be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8c2:	f383 8811 	msr	BASEPRI, r3
 800b8c6:	f3bf 8f6f 	isb	sy
 800b8ca:	f3bf 8f4f 	dsb	sy
 800b8ce:	60fb      	str	r3, [r7, #12]
}
 800b8d0:	bf00      	nop
 800b8d2:	e7fe      	b.n	800b8d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b8d4:	693b      	ldr	r3, [r7, #16]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d00a      	beq.n	800b8f2 <vPortFree+0x62>
	__asm volatile
 800b8dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8e0:	f383 8811 	msr	BASEPRI, r3
 800b8e4:	f3bf 8f6f 	isb	sy
 800b8e8:	f3bf 8f4f 	dsb	sy
 800b8ec:	60bb      	str	r3, [r7, #8]
}
 800b8ee:	bf00      	nop
 800b8f0:	e7fe      	b.n	800b8f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b8f2:	693b      	ldr	r3, [r7, #16]
 800b8f4:	685a      	ldr	r2, [r3, #4]
 800b8f6:	4b14      	ldr	r3, [pc, #80]	; (800b948 <vPortFree+0xb8>)
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	4013      	ands	r3, r2
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d01e      	beq.n	800b93e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b900:	693b      	ldr	r3, [r7, #16]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d11a      	bne.n	800b93e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b908:	693b      	ldr	r3, [r7, #16]
 800b90a:	685a      	ldr	r2, [r3, #4]
 800b90c:	4b0e      	ldr	r3, [pc, #56]	; (800b948 <vPortFree+0xb8>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	43db      	mvns	r3, r3
 800b912:	401a      	ands	r2, r3
 800b914:	693b      	ldr	r3, [r7, #16]
 800b916:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b918:	f7fe febe 	bl	800a698 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b91c:	693b      	ldr	r3, [r7, #16]
 800b91e:	685a      	ldr	r2, [r3, #4]
 800b920:	4b0a      	ldr	r3, [pc, #40]	; (800b94c <vPortFree+0xbc>)
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	4413      	add	r3, r2
 800b926:	4a09      	ldr	r2, [pc, #36]	; (800b94c <vPortFree+0xbc>)
 800b928:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b92a:	6938      	ldr	r0, [r7, #16]
 800b92c:	f000 f874 	bl	800ba18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b930:	4b07      	ldr	r3, [pc, #28]	; (800b950 <vPortFree+0xc0>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	3301      	adds	r3, #1
 800b936:	4a06      	ldr	r2, [pc, #24]	; (800b950 <vPortFree+0xc0>)
 800b938:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b93a:	f7fe febb 	bl	800a6b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b93e:	bf00      	nop
 800b940:	3718      	adds	r7, #24
 800b942:	46bd      	mov	sp, r7
 800b944:	bd80      	pop	{r7, pc}
 800b946:	bf00      	nop
 800b948:	200041c0 	.word	0x200041c0
 800b94c:	200041b0 	.word	0x200041b0
 800b950:	200041bc 	.word	0x200041bc

0800b954 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b954:	b480      	push	{r7}
 800b956:	b085      	sub	sp, #20
 800b958:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b95a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b95e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b960:	4b27      	ldr	r3, [pc, #156]	; (800ba00 <prvHeapInit+0xac>)
 800b962:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	f003 0307 	and.w	r3, r3, #7
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d00c      	beq.n	800b988 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	3307      	adds	r3, #7
 800b972:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	f023 0307 	bic.w	r3, r3, #7
 800b97a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b97c:	68ba      	ldr	r2, [r7, #8]
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	1ad3      	subs	r3, r2, r3
 800b982:	4a1f      	ldr	r2, [pc, #124]	; (800ba00 <prvHeapInit+0xac>)
 800b984:	4413      	add	r3, r2
 800b986:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b98c:	4a1d      	ldr	r2, [pc, #116]	; (800ba04 <prvHeapInit+0xb0>)
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b992:	4b1c      	ldr	r3, [pc, #112]	; (800ba04 <prvHeapInit+0xb0>)
 800b994:	2200      	movs	r2, #0
 800b996:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	68ba      	ldr	r2, [r7, #8]
 800b99c:	4413      	add	r3, r2
 800b99e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b9a0:	2208      	movs	r2, #8
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	1a9b      	subs	r3, r3, r2
 800b9a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	f023 0307 	bic.w	r3, r3, #7
 800b9ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	4a15      	ldr	r2, [pc, #84]	; (800ba08 <prvHeapInit+0xb4>)
 800b9b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b9b6:	4b14      	ldr	r3, [pc, #80]	; (800ba08 <prvHeapInit+0xb4>)
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b9be:	4b12      	ldr	r3, [pc, #72]	; (800ba08 <prvHeapInit+0xb4>)
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	68fa      	ldr	r2, [r7, #12]
 800b9ce:	1ad2      	subs	r2, r2, r3
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b9d4:	4b0c      	ldr	r3, [pc, #48]	; (800ba08 <prvHeapInit+0xb4>)
 800b9d6:	681a      	ldr	r2, [r3, #0]
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	685b      	ldr	r3, [r3, #4]
 800b9e0:	4a0a      	ldr	r2, [pc, #40]	; (800ba0c <prvHeapInit+0xb8>)
 800b9e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b9e4:	683b      	ldr	r3, [r7, #0]
 800b9e6:	685b      	ldr	r3, [r3, #4]
 800b9e8:	4a09      	ldr	r2, [pc, #36]	; (800ba10 <prvHeapInit+0xbc>)
 800b9ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b9ec:	4b09      	ldr	r3, [pc, #36]	; (800ba14 <prvHeapInit+0xc0>)
 800b9ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b9f2:	601a      	str	r2, [r3, #0]
}
 800b9f4:	bf00      	nop
 800b9f6:	3714      	adds	r7, #20
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fe:	4770      	bx	lr
 800ba00:	200005a4 	.word	0x200005a4
 800ba04:	200041a4 	.word	0x200041a4
 800ba08:	200041ac 	.word	0x200041ac
 800ba0c:	200041b4 	.word	0x200041b4
 800ba10:	200041b0 	.word	0x200041b0
 800ba14:	200041c0 	.word	0x200041c0

0800ba18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ba18:	b480      	push	{r7}
 800ba1a:	b085      	sub	sp, #20
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ba20:	4b28      	ldr	r3, [pc, #160]	; (800bac4 <prvInsertBlockIntoFreeList+0xac>)
 800ba22:	60fb      	str	r3, [r7, #12]
 800ba24:	e002      	b.n	800ba2c <prvInsertBlockIntoFreeList+0x14>
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	60fb      	str	r3, [r7, #12]
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	687a      	ldr	r2, [r7, #4]
 800ba32:	429a      	cmp	r2, r3
 800ba34:	d8f7      	bhi.n	800ba26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	685b      	ldr	r3, [r3, #4]
 800ba3e:	68ba      	ldr	r2, [r7, #8]
 800ba40:	4413      	add	r3, r2
 800ba42:	687a      	ldr	r2, [r7, #4]
 800ba44:	429a      	cmp	r2, r3
 800ba46:	d108      	bne.n	800ba5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	685a      	ldr	r2, [r3, #4]
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	685b      	ldr	r3, [r3, #4]
 800ba50:	441a      	add	r2, r3
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	685b      	ldr	r3, [r3, #4]
 800ba62:	68ba      	ldr	r2, [r7, #8]
 800ba64:	441a      	add	r2, r3
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	429a      	cmp	r2, r3
 800ba6c:	d118      	bne.n	800baa0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	681a      	ldr	r2, [r3, #0]
 800ba72:	4b15      	ldr	r3, [pc, #84]	; (800bac8 <prvInsertBlockIntoFreeList+0xb0>)
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	429a      	cmp	r2, r3
 800ba78:	d00d      	beq.n	800ba96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	685a      	ldr	r2, [r3, #4]
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	685b      	ldr	r3, [r3, #4]
 800ba84:	441a      	add	r2, r3
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	681a      	ldr	r2, [r3, #0]
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	601a      	str	r2, [r3, #0]
 800ba94:	e008      	b.n	800baa8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ba96:	4b0c      	ldr	r3, [pc, #48]	; (800bac8 <prvInsertBlockIntoFreeList+0xb0>)
 800ba98:	681a      	ldr	r2, [r3, #0]
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	601a      	str	r2, [r3, #0]
 800ba9e:	e003      	b.n	800baa8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	681a      	ldr	r2, [r3, #0]
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800baa8:	68fa      	ldr	r2, [r7, #12]
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	429a      	cmp	r2, r3
 800baae:	d002      	beq.n	800bab6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	687a      	ldr	r2, [r7, #4]
 800bab4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bab6:	bf00      	nop
 800bab8:	3714      	adds	r7, #20
 800baba:	46bd      	mov	sp, r7
 800babc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac0:	4770      	bx	lr
 800bac2:	bf00      	nop
 800bac4:	200041a4 	.word	0x200041a4
 800bac8:	200041ac 	.word	0x200041ac

0800bacc <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b084      	sub	sp, #16
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
 800bad4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800bad6:	f007 fa03 	bl	8012ee0 <sys_timeouts_sleeptime>
 800bada:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bae2:	d10b      	bne.n	800bafc <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800bae4:	4813      	ldr	r0, [pc, #76]	; (800bb34 <tcpip_timeouts_mbox_fetch+0x68>)
 800bae6:	f009 ff72 	bl	80159ce <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800baea:	2200      	movs	r2, #0
 800baec:	6839      	ldr	r1, [r7, #0]
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	f009 fee4 	bl	80158bc <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800baf4:	480f      	ldr	r0, [pc, #60]	; (800bb34 <tcpip_timeouts_mbox_fetch+0x68>)
 800baf6:	f009 ff5b 	bl	80159b0 <sys_mutex_lock>
    return;
 800bafa:	e018      	b.n	800bb2e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d102      	bne.n	800bb08 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800bb02:	f007 f9b3 	bl	8012e6c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800bb06:	e7e6      	b.n	800bad6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800bb08:	480a      	ldr	r0, [pc, #40]	; (800bb34 <tcpip_timeouts_mbox_fetch+0x68>)
 800bb0a:	f009 ff60 	bl	80159ce <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800bb0e:	68fa      	ldr	r2, [r7, #12]
 800bb10:	6839      	ldr	r1, [r7, #0]
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f009 fed2 	bl	80158bc <sys_arch_mbox_fetch>
 800bb18:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800bb1a:	4806      	ldr	r0, [pc, #24]	; (800bb34 <tcpip_timeouts_mbox_fetch+0x68>)
 800bb1c:	f009 ff48 	bl	80159b0 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800bb20:	68bb      	ldr	r3, [r7, #8]
 800bb22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb26:	d102      	bne.n	800bb2e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800bb28:	f007 f9a0 	bl	8012e6c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800bb2c:	e7d3      	b.n	800bad6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800bb2e:	3710      	adds	r7, #16
 800bb30:	46bd      	mov	sp, r7
 800bb32:	bd80      	pop	{r7, pc}
 800bb34:	20007844 	.word	0x20007844

0800bb38 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b084      	sub	sp, #16
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800bb40:	4810      	ldr	r0, [pc, #64]	; (800bb84 <tcpip_thread+0x4c>)
 800bb42:	f009 ff35 	bl	80159b0 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800bb46:	4b10      	ldr	r3, [pc, #64]	; (800bb88 <tcpip_thread+0x50>)
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d005      	beq.n	800bb5a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800bb4e:	4b0e      	ldr	r3, [pc, #56]	; (800bb88 <tcpip_thread+0x50>)
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	4a0e      	ldr	r2, [pc, #56]	; (800bb8c <tcpip_thread+0x54>)
 800bb54:	6812      	ldr	r2, [r2, #0]
 800bb56:	4610      	mov	r0, r2
 800bb58:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800bb5a:	f107 030c 	add.w	r3, r7, #12
 800bb5e:	4619      	mov	r1, r3
 800bb60:	480b      	ldr	r0, [pc, #44]	; (800bb90 <tcpip_thread+0x58>)
 800bb62:	f7ff ffb3 	bl	800bacc <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d106      	bne.n	800bb7a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800bb6c:	4b09      	ldr	r3, [pc, #36]	; (800bb94 <tcpip_thread+0x5c>)
 800bb6e:	2291      	movs	r2, #145	; 0x91
 800bb70:	4909      	ldr	r1, [pc, #36]	; (800bb98 <tcpip_thread+0x60>)
 800bb72:	480a      	ldr	r0, [pc, #40]	; (800bb9c <tcpip_thread+0x64>)
 800bb74:	f00a fcc6 	bl	8016504 <iprintf>
      continue;
 800bb78:	e003      	b.n	800bb82 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	f000 f80f 	bl	800bba0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800bb82:	e7ea      	b.n	800bb5a <tcpip_thread+0x22>
 800bb84:	20007844 	.word	0x20007844
 800bb88:	200041c4 	.word	0x200041c4
 800bb8c:	200041c8 	.word	0x200041c8
 800bb90:	200041cc 	.word	0x200041cc
 800bb94:	080175f8 	.word	0x080175f8
 800bb98:	08017628 	.word	0x08017628
 800bb9c:	08017648 	.word	0x08017648

0800bba0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b082      	sub	sp, #8
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	781b      	ldrb	r3, [r3, #0]
 800bbac:	2b02      	cmp	r3, #2
 800bbae:	d026      	beq.n	800bbfe <tcpip_thread_handle_msg+0x5e>
 800bbb0:	2b02      	cmp	r3, #2
 800bbb2:	dc2b      	bgt.n	800bc0c <tcpip_thread_handle_msg+0x6c>
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d002      	beq.n	800bbbe <tcpip_thread_handle_msg+0x1e>
 800bbb8:	2b01      	cmp	r3, #1
 800bbba:	d015      	beq.n	800bbe8 <tcpip_thread_handle_msg+0x48>
 800bbbc:	e026      	b.n	800bc0c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	68db      	ldr	r3, [r3, #12]
 800bbc2:	687a      	ldr	r2, [r7, #4]
 800bbc4:	6850      	ldr	r0, [r2, #4]
 800bbc6:	687a      	ldr	r2, [r7, #4]
 800bbc8:	6892      	ldr	r2, [r2, #8]
 800bbca:	4611      	mov	r1, r2
 800bbcc:	4798      	blx	r3
 800bbce:	4603      	mov	r3, r0
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d004      	beq.n	800bbde <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	685b      	ldr	r3, [r3, #4]
 800bbd8:	4618      	mov	r0, r3
 800bbda:	f001 fc4d 	bl	800d478 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800bbde:	6879      	ldr	r1, [r7, #4]
 800bbe0:	2009      	movs	r0, #9
 800bbe2:	f000 fe1d 	bl	800c820 <memp_free>
      break;
 800bbe6:	e018      	b.n	800bc1a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	685b      	ldr	r3, [r3, #4]
 800bbec:	687a      	ldr	r2, [r7, #4]
 800bbee:	6892      	ldr	r2, [r2, #8]
 800bbf0:	4610      	mov	r0, r2
 800bbf2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800bbf4:	6879      	ldr	r1, [r7, #4]
 800bbf6:	2008      	movs	r0, #8
 800bbf8:	f000 fe12 	bl	800c820 <memp_free>
      break;
 800bbfc:	e00d      	b.n	800bc1a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	685b      	ldr	r3, [r3, #4]
 800bc02:	687a      	ldr	r2, [r7, #4]
 800bc04:	6892      	ldr	r2, [r2, #8]
 800bc06:	4610      	mov	r0, r2
 800bc08:	4798      	blx	r3
      break;
 800bc0a:	e006      	b.n	800bc1a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800bc0c:	4b05      	ldr	r3, [pc, #20]	; (800bc24 <tcpip_thread_handle_msg+0x84>)
 800bc0e:	22cf      	movs	r2, #207	; 0xcf
 800bc10:	4905      	ldr	r1, [pc, #20]	; (800bc28 <tcpip_thread_handle_msg+0x88>)
 800bc12:	4806      	ldr	r0, [pc, #24]	; (800bc2c <tcpip_thread_handle_msg+0x8c>)
 800bc14:	f00a fc76 	bl	8016504 <iprintf>
      break;
 800bc18:	bf00      	nop
  }
}
 800bc1a:	bf00      	nop
 800bc1c:	3708      	adds	r7, #8
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	bd80      	pop	{r7, pc}
 800bc22:	bf00      	nop
 800bc24:	080175f8 	.word	0x080175f8
 800bc28:	08017628 	.word	0x08017628
 800bc2c:	08017648 	.word	0x08017648

0800bc30 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b086      	sub	sp, #24
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	60f8      	str	r0, [r7, #12]
 800bc38:	60b9      	str	r1, [r7, #8]
 800bc3a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800bc3c:	481a      	ldr	r0, [pc, #104]	; (800bca8 <tcpip_inpkt+0x78>)
 800bc3e:	f009 fe7c 	bl	801593a <sys_mbox_valid>
 800bc42:	4603      	mov	r3, r0
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d105      	bne.n	800bc54 <tcpip_inpkt+0x24>
 800bc48:	4b18      	ldr	r3, [pc, #96]	; (800bcac <tcpip_inpkt+0x7c>)
 800bc4a:	22fc      	movs	r2, #252	; 0xfc
 800bc4c:	4918      	ldr	r1, [pc, #96]	; (800bcb0 <tcpip_inpkt+0x80>)
 800bc4e:	4819      	ldr	r0, [pc, #100]	; (800bcb4 <tcpip_inpkt+0x84>)
 800bc50:	f00a fc58 	bl	8016504 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800bc54:	2009      	movs	r0, #9
 800bc56:	f000 fd91 	bl	800c77c <memp_malloc>
 800bc5a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800bc5c:	697b      	ldr	r3, [r7, #20]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d102      	bne.n	800bc68 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800bc62:	f04f 33ff 	mov.w	r3, #4294967295
 800bc66:	e01a      	b.n	800bc9e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800bc68:	697b      	ldr	r3, [r7, #20]
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800bc6e:	697b      	ldr	r3, [r7, #20]
 800bc70:	68fa      	ldr	r2, [r7, #12]
 800bc72:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800bc74:	697b      	ldr	r3, [r7, #20]
 800bc76:	68ba      	ldr	r2, [r7, #8]
 800bc78:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800bc7a:	697b      	ldr	r3, [r7, #20]
 800bc7c:	687a      	ldr	r2, [r7, #4]
 800bc7e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800bc80:	6979      	ldr	r1, [r7, #20]
 800bc82:	4809      	ldr	r0, [pc, #36]	; (800bca8 <tcpip_inpkt+0x78>)
 800bc84:	f009 fe00 	bl	8015888 <sys_mbox_trypost>
 800bc88:	4603      	mov	r3, r0
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d006      	beq.n	800bc9c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800bc8e:	6979      	ldr	r1, [r7, #20]
 800bc90:	2009      	movs	r0, #9
 800bc92:	f000 fdc5 	bl	800c820 <memp_free>
    return ERR_MEM;
 800bc96:	f04f 33ff 	mov.w	r3, #4294967295
 800bc9a:	e000      	b.n	800bc9e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800bc9c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800bc9e:	4618      	mov	r0, r3
 800bca0:	3718      	adds	r7, #24
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bd80      	pop	{r7, pc}
 800bca6:	bf00      	nop
 800bca8:	200041cc 	.word	0x200041cc
 800bcac:	080175f8 	.word	0x080175f8
 800bcb0:	08017670 	.word	0x08017670
 800bcb4:	08017648 	.word	0x08017648

0800bcb8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b082      	sub	sp, #8
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
 800bcc0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800bcc8:	f003 0318 	and.w	r3, r3, #24
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d006      	beq.n	800bcde <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800bcd0:	4a08      	ldr	r2, [pc, #32]	; (800bcf4 <tcpip_input+0x3c>)
 800bcd2:	6839      	ldr	r1, [r7, #0]
 800bcd4:	6878      	ldr	r0, [r7, #4]
 800bcd6:	f7ff ffab 	bl	800bc30 <tcpip_inpkt>
 800bcda:	4603      	mov	r3, r0
 800bcdc:	e005      	b.n	800bcea <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800bcde:	4a06      	ldr	r2, [pc, #24]	; (800bcf8 <tcpip_input+0x40>)
 800bce0:	6839      	ldr	r1, [r7, #0]
 800bce2:	6878      	ldr	r0, [r7, #4]
 800bce4:	f7ff ffa4 	bl	800bc30 <tcpip_inpkt>
 800bce8:	4603      	mov	r3, r0
}
 800bcea:	4618      	mov	r0, r3
 800bcec:	3708      	adds	r7, #8
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	bd80      	pop	{r7, pc}
 800bcf2:	bf00      	nop
 800bcf4:	08015699 	.word	0x08015699
 800bcf8:	080145ad 	.word	0x080145ad

0800bcfc <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b084      	sub	sp, #16
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
 800bd04:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800bd06:	4819      	ldr	r0, [pc, #100]	; (800bd6c <tcpip_try_callback+0x70>)
 800bd08:	f009 fe17 	bl	801593a <sys_mbox_valid>
 800bd0c:	4603      	mov	r3, r0
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d106      	bne.n	800bd20 <tcpip_try_callback+0x24>
 800bd12:	4b17      	ldr	r3, [pc, #92]	; (800bd70 <tcpip_try_callback+0x74>)
 800bd14:	f240 125d 	movw	r2, #349	; 0x15d
 800bd18:	4916      	ldr	r1, [pc, #88]	; (800bd74 <tcpip_try_callback+0x78>)
 800bd1a:	4817      	ldr	r0, [pc, #92]	; (800bd78 <tcpip_try_callback+0x7c>)
 800bd1c:	f00a fbf2 	bl	8016504 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800bd20:	2008      	movs	r0, #8
 800bd22:	f000 fd2b 	bl	800c77c <memp_malloc>
 800bd26:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d102      	bne.n	800bd34 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800bd2e:	f04f 33ff 	mov.w	r3, #4294967295
 800bd32:	e017      	b.n	800bd64 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	2201      	movs	r2, #1
 800bd38:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	687a      	ldr	r2, [r7, #4]
 800bd3e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	683a      	ldr	r2, [r7, #0]
 800bd44:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800bd46:	68f9      	ldr	r1, [r7, #12]
 800bd48:	4808      	ldr	r0, [pc, #32]	; (800bd6c <tcpip_try_callback+0x70>)
 800bd4a:	f009 fd9d 	bl	8015888 <sys_mbox_trypost>
 800bd4e:	4603      	mov	r3, r0
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d006      	beq.n	800bd62 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800bd54:	68f9      	ldr	r1, [r7, #12]
 800bd56:	2008      	movs	r0, #8
 800bd58:	f000 fd62 	bl	800c820 <memp_free>
    return ERR_MEM;
 800bd5c:	f04f 33ff 	mov.w	r3, #4294967295
 800bd60:	e000      	b.n	800bd64 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800bd62:	2300      	movs	r3, #0
}
 800bd64:	4618      	mov	r0, r3
 800bd66:	3710      	adds	r7, #16
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	bd80      	pop	{r7, pc}
 800bd6c:	200041cc 	.word	0x200041cc
 800bd70:	080175f8 	.word	0x080175f8
 800bd74:	08017670 	.word	0x08017670
 800bd78:	08017648 	.word	0x08017648

0800bd7c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b084      	sub	sp, #16
 800bd80:	af02      	add	r7, sp, #8
 800bd82:	6078      	str	r0, [r7, #4]
 800bd84:	6039      	str	r1, [r7, #0]
  lwip_init();
 800bd86:	f000 f871 	bl	800be6c <lwip_init>

  tcpip_init_done = initfunc;
 800bd8a:	4a17      	ldr	r2, [pc, #92]	; (800bde8 <tcpip_init+0x6c>)
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800bd90:	4a16      	ldr	r2, [pc, #88]	; (800bdec <tcpip_init+0x70>)
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800bd96:	2106      	movs	r1, #6
 800bd98:	4815      	ldr	r0, [pc, #84]	; (800bdf0 <tcpip_init+0x74>)
 800bd9a:	f009 fd53 	bl	8015844 <sys_mbox_new>
 800bd9e:	4603      	mov	r3, r0
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d006      	beq.n	800bdb2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800bda4:	4b13      	ldr	r3, [pc, #76]	; (800bdf4 <tcpip_init+0x78>)
 800bda6:	f240 2261 	movw	r2, #609	; 0x261
 800bdaa:	4913      	ldr	r1, [pc, #76]	; (800bdf8 <tcpip_init+0x7c>)
 800bdac:	4813      	ldr	r0, [pc, #76]	; (800bdfc <tcpip_init+0x80>)
 800bdae:	f00a fba9 	bl	8016504 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800bdb2:	4813      	ldr	r0, [pc, #76]	; (800be00 <tcpip_init+0x84>)
 800bdb4:	f009 fde0 	bl	8015978 <sys_mutex_new>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d006      	beq.n	800bdcc <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800bdbe:	4b0d      	ldr	r3, [pc, #52]	; (800bdf4 <tcpip_init+0x78>)
 800bdc0:	f240 2265 	movw	r2, #613	; 0x265
 800bdc4:	490f      	ldr	r1, [pc, #60]	; (800be04 <tcpip_init+0x88>)
 800bdc6:	480d      	ldr	r0, [pc, #52]	; (800bdfc <tcpip_init+0x80>)
 800bdc8:	f00a fb9c 	bl	8016504 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800bdcc:	2300      	movs	r3, #0
 800bdce:	9300      	str	r3, [sp, #0]
 800bdd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	490c      	ldr	r1, [pc, #48]	; (800be08 <tcpip_init+0x8c>)
 800bdd8:	480c      	ldr	r0, [pc, #48]	; (800be0c <tcpip_init+0x90>)
 800bdda:	f009 fe05 	bl	80159e8 <sys_thread_new>
}
 800bdde:	bf00      	nop
 800bde0:	3708      	adds	r7, #8
 800bde2:	46bd      	mov	sp, r7
 800bde4:	bd80      	pop	{r7, pc}
 800bde6:	bf00      	nop
 800bde8:	200041c4 	.word	0x200041c4
 800bdec:	200041c8 	.word	0x200041c8
 800bdf0:	200041cc 	.word	0x200041cc
 800bdf4:	080175f8 	.word	0x080175f8
 800bdf8:	08017680 	.word	0x08017680
 800bdfc:	08017648 	.word	0x08017648
 800be00:	20007844 	.word	0x20007844
 800be04:	080176a4 	.word	0x080176a4
 800be08:	0800bb39 	.word	0x0800bb39
 800be0c:	080176c8 	.word	0x080176c8

0800be10 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800be10:	b480      	push	{r7}
 800be12:	b083      	sub	sp, #12
 800be14:	af00      	add	r7, sp, #0
 800be16:	4603      	mov	r3, r0
 800be18:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800be1a:	88fb      	ldrh	r3, [r7, #6]
 800be1c:	021b      	lsls	r3, r3, #8
 800be1e:	b21a      	sxth	r2, r3
 800be20:	88fb      	ldrh	r3, [r7, #6]
 800be22:	0a1b      	lsrs	r3, r3, #8
 800be24:	b29b      	uxth	r3, r3
 800be26:	b21b      	sxth	r3, r3
 800be28:	4313      	orrs	r3, r2
 800be2a:	b21b      	sxth	r3, r3
 800be2c:	b29b      	uxth	r3, r3
}
 800be2e:	4618      	mov	r0, r3
 800be30:	370c      	adds	r7, #12
 800be32:	46bd      	mov	sp, r7
 800be34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be38:	4770      	bx	lr

0800be3a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800be3a:	b480      	push	{r7}
 800be3c:	b083      	sub	sp, #12
 800be3e:	af00      	add	r7, sp, #0
 800be40:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	061a      	lsls	r2, r3, #24
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	021b      	lsls	r3, r3, #8
 800be4a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800be4e:	431a      	orrs	r2, r3
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	0a1b      	lsrs	r3, r3, #8
 800be54:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800be58:	431a      	orrs	r2, r3
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	0e1b      	lsrs	r3, r3, #24
 800be5e:	4313      	orrs	r3, r2
}
 800be60:	4618      	mov	r0, r3
 800be62:	370c      	adds	r7, #12
 800be64:	46bd      	mov	sp, r7
 800be66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6a:	4770      	bx	lr

0800be6c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b082      	sub	sp, #8
 800be70:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800be72:	2300      	movs	r3, #0
 800be74:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800be76:	f009 fd71 	bl	801595c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800be7a:	f000 f8d5 	bl	800c028 <mem_init>
  memp_init();
 800be7e:	f000 fc31 	bl	800c6e4 <memp_init>
  pbuf_init();
  netif_init();
 800be82:	f000 fcf7 	bl	800c874 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800be86:	f007 f863 	bl	8012f50 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800be8a:	f001 fd8f 	bl	800d9ac <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800be8e:	f006 ffa5 	bl	8012ddc <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800be92:	bf00      	nop
 800be94:	3708      	adds	r7, #8
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}
	...

0800be9c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800be9c:	b480      	push	{r7}
 800be9e:	b083      	sub	sp, #12
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	4603      	mov	r3, r0
 800bea4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800bea6:	4b05      	ldr	r3, [pc, #20]	; (800bebc <ptr_to_mem+0x20>)
 800bea8:	681a      	ldr	r2, [r3, #0]
 800beaa:	88fb      	ldrh	r3, [r7, #6]
 800beac:	4413      	add	r3, r2
}
 800beae:	4618      	mov	r0, r3
 800beb0:	370c      	adds	r7, #12
 800beb2:	46bd      	mov	sp, r7
 800beb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb8:	4770      	bx	lr
 800beba:	bf00      	nop
 800bebc:	200041d0 	.word	0x200041d0

0800bec0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800bec0:	b480      	push	{r7}
 800bec2:	b083      	sub	sp, #12
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800bec8:	4b05      	ldr	r3, [pc, #20]	; (800bee0 <mem_to_ptr+0x20>)
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	687a      	ldr	r2, [r7, #4]
 800bece:	1ad3      	subs	r3, r2, r3
 800bed0:	b29b      	uxth	r3, r3
}
 800bed2:	4618      	mov	r0, r3
 800bed4:	370c      	adds	r7, #12
 800bed6:	46bd      	mov	sp, r7
 800bed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bedc:	4770      	bx	lr
 800bede:	bf00      	nop
 800bee0:	200041d0 	.word	0x200041d0

0800bee4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800bee4:	b590      	push	{r4, r7, lr}
 800bee6:	b085      	sub	sp, #20
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800beec:	4b45      	ldr	r3, [pc, #276]	; (800c004 <plug_holes+0x120>)
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	687a      	ldr	r2, [r7, #4]
 800bef2:	429a      	cmp	r2, r3
 800bef4:	d206      	bcs.n	800bf04 <plug_holes+0x20>
 800bef6:	4b44      	ldr	r3, [pc, #272]	; (800c008 <plug_holes+0x124>)
 800bef8:	f240 12df 	movw	r2, #479	; 0x1df
 800befc:	4943      	ldr	r1, [pc, #268]	; (800c00c <plug_holes+0x128>)
 800befe:	4844      	ldr	r0, [pc, #272]	; (800c010 <plug_holes+0x12c>)
 800bf00:	f00a fb00 	bl	8016504 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800bf04:	4b43      	ldr	r3, [pc, #268]	; (800c014 <plug_holes+0x130>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	687a      	ldr	r2, [r7, #4]
 800bf0a:	429a      	cmp	r2, r3
 800bf0c:	d306      	bcc.n	800bf1c <plug_holes+0x38>
 800bf0e:	4b3e      	ldr	r3, [pc, #248]	; (800c008 <plug_holes+0x124>)
 800bf10:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800bf14:	4940      	ldr	r1, [pc, #256]	; (800c018 <plug_holes+0x134>)
 800bf16:	483e      	ldr	r0, [pc, #248]	; (800c010 <plug_holes+0x12c>)
 800bf18:	f00a faf4 	bl	8016504 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	791b      	ldrb	r3, [r3, #4]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d006      	beq.n	800bf32 <plug_holes+0x4e>
 800bf24:	4b38      	ldr	r3, [pc, #224]	; (800c008 <plug_holes+0x124>)
 800bf26:	f240 12e1 	movw	r2, #481	; 0x1e1
 800bf2a:	493c      	ldr	r1, [pc, #240]	; (800c01c <plug_holes+0x138>)
 800bf2c:	4838      	ldr	r0, [pc, #224]	; (800c010 <plug_holes+0x12c>)
 800bf2e:	f00a fae9 	bl	8016504 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	881b      	ldrh	r3, [r3, #0]
 800bf36:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bf3a:	d906      	bls.n	800bf4a <plug_holes+0x66>
 800bf3c:	4b32      	ldr	r3, [pc, #200]	; (800c008 <plug_holes+0x124>)
 800bf3e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800bf42:	4937      	ldr	r1, [pc, #220]	; (800c020 <plug_holes+0x13c>)
 800bf44:	4832      	ldr	r0, [pc, #200]	; (800c010 <plug_holes+0x12c>)
 800bf46:	f00a fadd 	bl	8016504 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	881b      	ldrh	r3, [r3, #0]
 800bf4e:	4618      	mov	r0, r3
 800bf50:	f7ff ffa4 	bl	800be9c <ptr_to_mem>
 800bf54:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800bf56:	687a      	ldr	r2, [r7, #4]
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	429a      	cmp	r2, r3
 800bf5c:	d024      	beq.n	800bfa8 <plug_holes+0xc4>
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	791b      	ldrb	r3, [r3, #4]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d120      	bne.n	800bfa8 <plug_holes+0xc4>
 800bf66:	4b2b      	ldr	r3, [pc, #172]	; (800c014 <plug_holes+0x130>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	68fa      	ldr	r2, [r7, #12]
 800bf6c:	429a      	cmp	r2, r3
 800bf6e:	d01b      	beq.n	800bfa8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800bf70:	4b2c      	ldr	r3, [pc, #176]	; (800c024 <plug_holes+0x140>)
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	68fa      	ldr	r2, [r7, #12]
 800bf76:	429a      	cmp	r2, r3
 800bf78:	d102      	bne.n	800bf80 <plug_holes+0x9c>
      lfree = mem;
 800bf7a:	4a2a      	ldr	r2, [pc, #168]	; (800c024 <plug_holes+0x140>)
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	881a      	ldrh	r2, [r3, #0]
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	881b      	ldrh	r3, [r3, #0]
 800bf8c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bf90:	d00a      	beq.n	800bfa8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	881b      	ldrh	r3, [r3, #0]
 800bf96:	4618      	mov	r0, r3
 800bf98:	f7ff ff80 	bl	800be9c <ptr_to_mem>
 800bf9c:	4604      	mov	r4, r0
 800bf9e:	6878      	ldr	r0, [r7, #4]
 800bfa0:	f7ff ff8e 	bl	800bec0 <mem_to_ptr>
 800bfa4:	4603      	mov	r3, r0
 800bfa6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	885b      	ldrh	r3, [r3, #2]
 800bfac:	4618      	mov	r0, r3
 800bfae:	f7ff ff75 	bl	800be9c <ptr_to_mem>
 800bfb2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800bfb4:	68ba      	ldr	r2, [r7, #8]
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	429a      	cmp	r2, r3
 800bfba:	d01f      	beq.n	800bffc <plug_holes+0x118>
 800bfbc:	68bb      	ldr	r3, [r7, #8]
 800bfbe:	791b      	ldrb	r3, [r3, #4]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d11b      	bne.n	800bffc <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800bfc4:	4b17      	ldr	r3, [pc, #92]	; (800c024 <plug_holes+0x140>)
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	687a      	ldr	r2, [r7, #4]
 800bfca:	429a      	cmp	r2, r3
 800bfcc:	d102      	bne.n	800bfd4 <plug_holes+0xf0>
      lfree = pmem;
 800bfce:	4a15      	ldr	r2, [pc, #84]	; (800c024 <plug_holes+0x140>)
 800bfd0:	68bb      	ldr	r3, [r7, #8]
 800bfd2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	881a      	ldrh	r2, [r3, #0]
 800bfd8:	68bb      	ldr	r3, [r7, #8]
 800bfda:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	881b      	ldrh	r3, [r3, #0]
 800bfe0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bfe4:	d00a      	beq.n	800bffc <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	881b      	ldrh	r3, [r3, #0]
 800bfea:	4618      	mov	r0, r3
 800bfec:	f7ff ff56 	bl	800be9c <ptr_to_mem>
 800bff0:	4604      	mov	r4, r0
 800bff2:	68b8      	ldr	r0, [r7, #8]
 800bff4:	f7ff ff64 	bl	800bec0 <mem_to_ptr>
 800bff8:	4603      	mov	r3, r0
 800bffa:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800bffc:	bf00      	nop
 800bffe:	3714      	adds	r7, #20
 800c000:	46bd      	mov	sp, r7
 800c002:	bd90      	pop	{r4, r7, pc}
 800c004:	200041d0 	.word	0x200041d0
 800c008:	080176d8 	.word	0x080176d8
 800c00c:	08017708 	.word	0x08017708
 800c010:	08017720 	.word	0x08017720
 800c014:	200041d4 	.word	0x200041d4
 800c018:	08017748 	.word	0x08017748
 800c01c:	08017764 	.word	0x08017764
 800c020:	08017780 	.word	0x08017780
 800c024:	200041dc 	.word	0x200041dc

0800c028 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b082      	sub	sp, #8
 800c02c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800c02e:	4b1f      	ldr	r3, [pc, #124]	; (800c0ac <mem_init+0x84>)
 800c030:	3303      	adds	r3, #3
 800c032:	f023 0303 	bic.w	r3, r3, #3
 800c036:	461a      	mov	r2, r3
 800c038:	4b1d      	ldr	r3, [pc, #116]	; (800c0b0 <mem_init+0x88>)
 800c03a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800c03c:	4b1c      	ldr	r3, [pc, #112]	; (800c0b0 <mem_init+0x88>)
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c048:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	2200      	movs	r2, #0
 800c04e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2200      	movs	r2, #0
 800c054:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800c056:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800c05a:	f7ff ff1f 	bl	800be9c <ptr_to_mem>
 800c05e:	4603      	mov	r3, r0
 800c060:	4a14      	ldr	r2, [pc, #80]	; (800c0b4 <mem_init+0x8c>)
 800c062:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800c064:	4b13      	ldr	r3, [pc, #76]	; (800c0b4 <mem_init+0x8c>)
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	2201      	movs	r2, #1
 800c06a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800c06c:	4b11      	ldr	r3, [pc, #68]	; (800c0b4 <mem_init+0x8c>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c074:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800c076:	4b0f      	ldr	r3, [pc, #60]	; (800c0b4 <mem_init+0x8c>)
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c07e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800c080:	4b0b      	ldr	r3, [pc, #44]	; (800c0b0 <mem_init+0x88>)
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	4a0c      	ldr	r2, [pc, #48]	; (800c0b8 <mem_init+0x90>)
 800c086:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800c088:	480c      	ldr	r0, [pc, #48]	; (800c0bc <mem_init+0x94>)
 800c08a:	f009 fc75 	bl	8015978 <sys_mutex_new>
 800c08e:	4603      	mov	r3, r0
 800c090:	2b00      	cmp	r3, #0
 800c092:	d006      	beq.n	800c0a2 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800c094:	4b0a      	ldr	r3, [pc, #40]	; (800c0c0 <mem_init+0x98>)
 800c096:	f240 221f 	movw	r2, #543	; 0x21f
 800c09a:	490a      	ldr	r1, [pc, #40]	; (800c0c4 <mem_init+0x9c>)
 800c09c:	480a      	ldr	r0, [pc, #40]	; (800c0c8 <mem_init+0xa0>)
 800c09e:	f00a fa31 	bl	8016504 <iprintf>
  }
}
 800c0a2:	bf00      	nop
 800c0a4:	3708      	adds	r7, #8
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	bd80      	pop	{r7, pc}
 800c0aa:	bf00      	nop
 800c0ac:	20007860 	.word	0x20007860
 800c0b0:	200041d0 	.word	0x200041d0
 800c0b4:	200041d4 	.word	0x200041d4
 800c0b8:	200041dc 	.word	0x200041dc
 800c0bc:	200041d8 	.word	0x200041d8
 800c0c0:	080176d8 	.word	0x080176d8
 800c0c4:	080177ac 	.word	0x080177ac
 800c0c8:	08017720 	.word	0x08017720

0800c0cc <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b086      	sub	sp, #24
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800c0d4:	6878      	ldr	r0, [r7, #4]
 800c0d6:	f7ff fef3 	bl	800bec0 <mem_to_ptr>
 800c0da:	4603      	mov	r3, r0
 800c0dc:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	881b      	ldrh	r3, [r3, #0]
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	f7ff feda 	bl	800be9c <ptr_to_mem>
 800c0e8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	885b      	ldrh	r3, [r3, #2]
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	f7ff fed4 	bl	800be9c <ptr_to_mem>
 800c0f4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	881b      	ldrh	r3, [r3, #0]
 800c0fa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c0fe:	d818      	bhi.n	800c132 <mem_link_valid+0x66>
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	885b      	ldrh	r3, [r3, #2]
 800c104:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c108:	d813      	bhi.n	800c132 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c10e:	8afa      	ldrh	r2, [r7, #22]
 800c110:	429a      	cmp	r2, r3
 800c112:	d004      	beq.n	800c11e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	881b      	ldrh	r3, [r3, #0]
 800c118:	8afa      	ldrh	r2, [r7, #22]
 800c11a:	429a      	cmp	r2, r3
 800c11c:	d109      	bne.n	800c132 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c11e:	4b08      	ldr	r3, [pc, #32]	; (800c140 <mem_link_valid+0x74>)
 800c120:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c122:	693a      	ldr	r2, [r7, #16]
 800c124:	429a      	cmp	r2, r3
 800c126:	d006      	beq.n	800c136 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c128:	693b      	ldr	r3, [r7, #16]
 800c12a:	885b      	ldrh	r3, [r3, #2]
 800c12c:	8afa      	ldrh	r2, [r7, #22]
 800c12e:	429a      	cmp	r2, r3
 800c130:	d001      	beq.n	800c136 <mem_link_valid+0x6a>
    return 0;
 800c132:	2300      	movs	r3, #0
 800c134:	e000      	b.n	800c138 <mem_link_valid+0x6c>
  }
  return 1;
 800c136:	2301      	movs	r3, #1
}
 800c138:	4618      	mov	r0, r3
 800c13a:	3718      	adds	r7, #24
 800c13c:	46bd      	mov	sp, r7
 800c13e:	bd80      	pop	{r7, pc}
 800c140:	200041d4 	.word	0x200041d4

0800c144 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b088      	sub	sp, #32
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d070      	beq.n	800c234 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	f003 0303 	and.w	r3, r3, #3
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d00d      	beq.n	800c178 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800c15c:	4b37      	ldr	r3, [pc, #220]	; (800c23c <mem_free+0xf8>)
 800c15e:	f240 2273 	movw	r2, #627	; 0x273
 800c162:	4937      	ldr	r1, [pc, #220]	; (800c240 <mem_free+0xfc>)
 800c164:	4837      	ldr	r0, [pc, #220]	; (800c244 <mem_free+0x100>)
 800c166:	f00a f9cd 	bl	8016504 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c16a:	f009 fc63 	bl	8015a34 <sys_arch_protect>
 800c16e:	60f8      	str	r0, [r7, #12]
 800c170:	68f8      	ldr	r0, [r7, #12]
 800c172:	f009 fc6d 	bl	8015a50 <sys_arch_unprotect>
    return;
 800c176:	e05e      	b.n	800c236 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	3b08      	subs	r3, #8
 800c17c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800c17e:	4b32      	ldr	r3, [pc, #200]	; (800c248 <mem_free+0x104>)
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	69fa      	ldr	r2, [r7, #28]
 800c184:	429a      	cmp	r2, r3
 800c186:	d306      	bcc.n	800c196 <mem_free+0x52>
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	f103 020c 	add.w	r2, r3, #12
 800c18e:	4b2f      	ldr	r3, [pc, #188]	; (800c24c <mem_free+0x108>)
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	429a      	cmp	r2, r3
 800c194:	d90d      	bls.n	800c1b2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800c196:	4b29      	ldr	r3, [pc, #164]	; (800c23c <mem_free+0xf8>)
 800c198:	f240 227f 	movw	r2, #639	; 0x27f
 800c19c:	492c      	ldr	r1, [pc, #176]	; (800c250 <mem_free+0x10c>)
 800c19e:	4829      	ldr	r0, [pc, #164]	; (800c244 <mem_free+0x100>)
 800c1a0:	f00a f9b0 	bl	8016504 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c1a4:	f009 fc46 	bl	8015a34 <sys_arch_protect>
 800c1a8:	6138      	str	r0, [r7, #16]
 800c1aa:	6938      	ldr	r0, [r7, #16]
 800c1ac:	f009 fc50 	bl	8015a50 <sys_arch_unprotect>
    return;
 800c1b0:	e041      	b.n	800c236 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800c1b2:	4828      	ldr	r0, [pc, #160]	; (800c254 <mem_free+0x110>)
 800c1b4:	f009 fbfc 	bl	80159b0 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800c1b8:	69fb      	ldr	r3, [r7, #28]
 800c1ba:	791b      	ldrb	r3, [r3, #4]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d110      	bne.n	800c1e2 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800c1c0:	4b1e      	ldr	r3, [pc, #120]	; (800c23c <mem_free+0xf8>)
 800c1c2:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800c1c6:	4924      	ldr	r1, [pc, #144]	; (800c258 <mem_free+0x114>)
 800c1c8:	481e      	ldr	r0, [pc, #120]	; (800c244 <mem_free+0x100>)
 800c1ca:	f00a f99b 	bl	8016504 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800c1ce:	4821      	ldr	r0, [pc, #132]	; (800c254 <mem_free+0x110>)
 800c1d0:	f009 fbfd 	bl	80159ce <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c1d4:	f009 fc2e 	bl	8015a34 <sys_arch_protect>
 800c1d8:	6178      	str	r0, [r7, #20]
 800c1da:	6978      	ldr	r0, [r7, #20]
 800c1dc:	f009 fc38 	bl	8015a50 <sys_arch_unprotect>
    return;
 800c1e0:	e029      	b.n	800c236 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800c1e2:	69f8      	ldr	r0, [r7, #28]
 800c1e4:	f7ff ff72 	bl	800c0cc <mem_link_valid>
 800c1e8:	4603      	mov	r3, r0
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d110      	bne.n	800c210 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800c1ee:	4b13      	ldr	r3, [pc, #76]	; (800c23c <mem_free+0xf8>)
 800c1f0:	f240 2295 	movw	r2, #661	; 0x295
 800c1f4:	4919      	ldr	r1, [pc, #100]	; (800c25c <mem_free+0x118>)
 800c1f6:	4813      	ldr	r0, [pc, #76]	; (800c244 <mem_free+0x100>)
 800c1f8:	f00a f984 	bl	8016504 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800c1fc:	4815      	ldr	r0, [pc, #84]	; (800c254 <mem_free+0x110>)
 800c1fe:	f009 fbe6 	bl	80159ce <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c202:	f009 fc17 	bl	8015a34 <sys_arch_protect>
 800c206:	61b8      	str	r0, [r7, #24]
 800c208:	69b8      	ldr	r0, [r7, #24]
 800c20a:	f009 fc21 	bl	8015a50 <sys_arch_unprotect>
    return;
 800c20e:	e012      	b.n	800c236 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800c210:	69fb      	ldr	r3, [r7, #28]
 800c212:	2200      	movs	r2, #0
 800c214:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800c216:	4b12      	ldr	r3, [pc, #72]	; (800c260 <mem_free+0x11c>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	69fa      	ldr	r2, [r7, #28]
 800c21c:	429a      	cmp	r2, r3
 800c21e:	d202      	bcs.n	800c226 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800c220:	4a0f      	ldr	r2, [pc, #60]	; (800c260 <mem_free+0x11c>)
 800c222:	69fb      	ldr	r3, [r7, #28]
 800c224:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800c226:	69f8      	ldr	r0, [r7, #28]
 800c228:	f7ff fe5c 	bl	800bee4 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c22c:	4809      	ldr	r0, [pc, #36]	; (800c254 <mem_free+0x110>)
 800c22e:	f009 fbce 	bl	80159ce <sys_mutex_unlock>
 800c232:	e000      	b.n	800c236 <mem_free+0xf2>
    return;
 800c234:	bf00      	nop
}
 800c236:	3720      	adds	r7, #32
 800c238:	46bd      	mov	sp, r7
 800c23a:	bd80      	pop	{r7, pc}
 800c23c:	080176d8 	.word	0x080176d8
 800c240:	080177c8 	.word	0x080177c8
 800c244:	08017720 	.word	0x08017720
 800c248:	200041d0 	.word	0x200041d0
 800c24c:	200041d4 	.word	0x200041d4
 800c250:	080177ec 	.word	0x080177ec
 800c254:	200041d8 	.word	0x200041d8
 800c258:	08017808 	.word	0x08017808
 800c25c:	08017830 	.word	0x08017830
 800c260:	200041dc 	.word	0x200041dc

0800c264 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b088      	sub	sp, #32
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
 800c26c:	460b      	mov	r3, r1
 800c26e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800c270:	887b      	ldrh	r3, [r7, #2]
 800c272:	3303      	adds	r3, #3
 800c274:	b29b      	uxth	r3, r3
 800c276:	f023 0303 	bic.w	r3, r3, #3
 800c27a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800c27c:	8bfb      	ldrh	r3, [r7, #30]
 800c27e:	2b0b      	cmp	r3, #11
 800c280:	d801      	bhi.n	800c286 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800c282:	230c      	movs	r3, #12
 800c284:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800c286:	8bfb      	ldrh	r3, [r7, #30]
 800c288:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c28c:	d803      	bhi.n	800c296 <mem_trim+0x32>
 800c28e:	8bfa      	ldrh	r2, [r7, #30]
 800c290:	887b      	ldrh	r3, [r7, #2]
 800c292:	429a      	cmp	r2, r3
 800c294:	d201      	bcs.n	800c29a <mem_trim+0x36>
    return NULL;
 800c296:	2300      	movs	r3, #0
 800c298:	e0d8      	b.n	800c44c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800c29a:	4b6e      	ldr	r3, [pc, #440]	; (800c454 <mem_trim+0x1f0>)
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	687a      	ldr	r2, [r7, #4]
 800c2a0:	429a      	cmp	r2, r3
 800c2a2:	d304      	bcc.n	800c2ae <mem_trim+0x4a>
 800c2a4:	4b6c      	ldr	r3, [pc, #432]	; (800c458 <mem_trim+0x1f4>)
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	687a      	ldr	r2, [r7, #4]
 800c2aa:	429a      	cmp	r2, r3
 800c2ac:	d306      	bcc.n	800c2bc <mem_trim+0x58>
 800c2ae:	4b6b      	ldr	r3, [pc, #428]	; (800c45c <mem_trim+0x1f8>)
 800c2b0:	f240 22d1 	movw	r2, #721	; 0x2d1
 800c2b4:	496a      	ldr	r1, [pc, #424]	; (800c460 <mem_trim+0x1fc>)
 800c2b6:	486b      	ldr	r0, [pc, #428]	; (800c464 <mem_trim+0x200>)
 800c2b8:	f00a f924 	bl	8016504 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800c2bc:	4b65      	ldr	r3, [pc, #404]	; (800c454 <mem_trim+0x1f0>)
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	687a      	ldr	r2, [r7, #4]
 800c2c2:	429a      	cmp	r2, r3
 800c2c4:	d304      	bcc.n	800c2d0 <mem_trim+0x6c>
 800c2c6:	4b64      	ldr	r3, [pc, #400]	; (800c458 <mem_trim+0x1f4>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	687a      	ldr	r2, [r7, #4]
 800c2cc:	429a      	cmp	r2, r3
 800c2ce:	d307      	bcc.n	800c2e0 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c2d0:	f009 fbb0 	bl	8015a34 <sys_arch_protect>
 800c2d4:	60b8      	str	r0, [r7, #8]
 800c2d6:	68b8      	ldr	r0, [r7, #8]
 800c2d8:	f009 fbba 	bl	8015a50 <sys_arch_unprotect>
    return rmem;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	e0b5      	b.n	800c44c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	3b08      	subs	r3, #8
 800c2e4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800c2e6:	69b8      	ldr	r0, [r7, #24]
 800c2e8:	f7ff fdea 	bl	800bec0 <mem_to_ptr>
 800c2ec:	4603      	mov	r3, r0
 800c2ee:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800c2f0:	69bb      	ldr	r3, [r7, #24]
 800c2f2:	881a      	ldrh	r2, [r3, #0]
 800c2f4:	8afb      	ldrh	r3, [r7, #22]
 800c2f6:	1ad3      	subs	r3, r2, r3
 800c2f8:	b29b      	uxth	r3, r3
 800c2fa:	3b08      	subs	r3, #8
 800c2fc:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800c2fe:	8bfa      	ldrh	r2, [r7, #30]
 800c300:	8abb      	ldrh	r3, [r7, #20]
 800c302:	429a      	cmp	r2, r3
 800c304:	d906      	bls.n	800c314 <mem_trim+0xb0>
 800c306:	4b55      	ldr	r3, [pc, #340]	; (800c45c <mem_trim+0x1f8>)
 800c308:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800c30c:	4956      	ldr	r1, [pc, #344]	; (800c468 <mem_trim+0x204>)
 800c30e:	4855      	ldr	r0, [pc, #340]	; (800c464 <mem_trim+0x200>)
 800c310:	f00a f8f8 	bl	8016504 <iprintf>
  if (newsize > size) {
 800c314:	8bfa      	ldrh	r2, [r7, #30]
 800c316:	8abb      	ldrh	r3, [r7, #20]
 800c318:	429a      	cmp	r2, r3
 800c31a:	d901      	bls.n	800c320 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800c31c:	2300      	movs	r3, #0
 800c31e:	e095      	b.n	800c44c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800c320:	8bfa      	ldrh	r2, [r7, #30]
 800c322:	8abb      	ldrh	r3, [r7, #20]
 800c324:	429a      	cmp	r2, r3
 800c326:	d101      	bne.n	800c32c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	e08f      	b.n	800c44c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800c32c:	484f      	ldr	r0, [pc, #316]	; (800c46c <mem_trim+0x208>)
 800c32e:	f009 fb3f 	bl	80159b0 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800c332:	69bb      	ldr	r3, [r7, #24]
 800c334:	881b      	ldrh	r3, [r3, #0]
 800c336:	4618      	mov	r0, r3
 800c338:	f7ff fdb0 	bl	800be9c <ptr_to_mem>
 800c33c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800c33e:	693b      	ldr	r3, [r7, #16]
 800c340:	791b      	ldrb	r3, [r3, #4]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d13f      	bne.n	800c3c6 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c346:	69bb      	ldr	r3, [r7, #24]
 800c348:	881b      	ldrh	r3, [r3, #0]
 800c34a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c34e:	d106      	bne.n	800c35e <mem_trim+0xfa>
 800c350:	4b42      	ldr	r3, [pc, #264]	; (800c45c <mem_trim+0x1f8>)
 800c352:	f240 22f5 	movw	r2, #757	; 0x2f5
 800c356:	4946      	ldr	r1, [pc, #280]	; (800c470 <mem_trim+0x20c>)
 800c358:	4842      	ldr	r0, [pc, #264]	; (800c464 <mem_trim+0x200>)
 800c35a:	f00a f8d3 	bl	8016504 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800c35e:	693b      	ldr	r3, [r7, #16]
 800c360:	881b      	ldrh	r3, [r3, #0]
 800c362:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c364:	8afa      	ldrh	r2, [r7, #22]
 800c366:	8bfb      	ldrh	r3, [r7, #30]
 800c368:	4413      	add	r3, r2
 800c36a:	b29b      	uxth	r3, r3
 800c36c:	3308      	adds	r3, #8
 800c36e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800c370:	4b40      	ldr	r3, [pc, #256]	; (800c474 <mem_trim+0x210>)
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	693a      	ldr	r2, [r7, #16]
 800c376:	429a      	cmp	r2, r3
 800c378:	d106      	bne.n	800c388 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800c37a:	89fb      	ldrh	r3, [r7, #14]
 800c37c:	4618      	mov	r0, r3
 800c37e:	f7ff fd8d 	bl	800be9c <ptr_to_mem>
 800c382:	4603      	mov	r3, r0
 800c384:	4a3b      	ldr	r2, [pc, #236]	; (800c474 <mem_trim+0x210>)
 800c386:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800c388:	89fb      	ldrh	r3, [r7, #14]
 800c38a:	4618      	mov	r0, r3
 800c38c:	f7ff fd86 	bl	800be9c <ptr_to_mem>
 800c390:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800c392:	693b      	ldr	r3, [r7, #16]
 800c394:	2200      	movs	r2, #0
 800c396:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800c398:	693b      	ldr	r3, [r7, #16]
 800c39a:	89ba      	ldrh	r2, [r7, #12]
 800c39c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800c39e:	693b      	ldr	r3, [r7, #16]
 800c3a0:	8afa      	ldrh	r2, [r7, #22]
 800c3a2:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800c3a4:	69bb      	ldr	r3, [r7, #24]
 800c3a6:	89fa      	ldrh	r2, [r7, #14]
 800c3a8:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c3aa:	693b      	ldr	r3, [r7, #16]
 800c3ac:	881b      	ldrh	r3, [r3, #0]
 800c3ae:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c3b2:	d047      	beq.n	800c444 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c3b4:	693b      	ldr	r3, [r7, #16]
 800c3b6:	881b      	ldrh	r3, [r3, #0]
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	f7ff fd6f 	bl	800be9c <ptr_to_mem>
 800c3be:	4602      	mov	r2, r0
 800c3c0:	89fb      	ldrh	r3, [r7, #14]
 800c3c2:	8053      	strh	r3, [r2, #2]
 800c3c4:	e03e      	b.n	800c444 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800c3c6:	8bfb      	ldrh	r3, [r7, #30]
 800c3c8:	f103 0214 	add.w	r2, r3, #20
 800c3cc:	8abb      	ldrh	r3, [r7, #20]
 800c3ce:	429a      	cmp	r2, r3
 800c3d0:	d838      	bhi.n	800c444 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c3d2:	8afa      	ldrh	r2, [r7, #22]
 800c3d4:	8bfb      	ldrh	r3, [r7, #30]
 800c3d6:	4413      	add	r3, r2
 800c3d8:	b29b      	uxth	r3, r3
 800c3da:	3308      	adds	r3, #8
 800c3dc:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c3de:	69bb      	ldr	r3, [r7, #24]
 800c3e0:	881b      	ldrh	r3, [r3, #0]
 800c3e2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c3e6:	d106      	bne.n	800c3f6 <mem_trim+0x192>
 800c3e8:	4b1c      	ldr	r3, [pc, #112]	; (800c45c <mem_trim+0x1f8>)
 800c3ea:	f240 3216 	movw	r2, #790	; 0x316
 800c3ee:	4920      	ldr	r1, [pc, #128]	; (800c470 <mem_trim+0x20c>)
 800c3f0:	481c      	ldr	r0, [pc, #112]	; (800c464 <mem_trim+0x200>)
 800c3f2:	f00a f887 	bl	8016504 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800c3f6:	89fb      	ldrh	r3, [r7, #14]
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	f7ff fd4f 	bl	800be9c <ptr_to_mem>
 800c3fe:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800c400:	4b1c      	ldr	r3, [pc, #112]	; (800c474 <mem_trim+0x210>)
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	693a      	ldr	r2, [r7, #16]
 800c406:	429a      	cmp	r2, r3
 800c408:	d202      	bcs.n	800c410 <mem_trim+0x1ac>
      lfree = mem2;
 800c40a:	4a1a      	ldr	r2, [pc, #104]	; (800c474 <mem_trim+0x210>)
 800c40c:	693b      	ldr	r3, [r7, #16]
 800c40e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800c410:	693b      	ldr	r3, [r7, #16]
 800c412:	2200      	movs	r2, #0
 800c414:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800c416:	69bb      	ldr	r3, [r7, #24]
 800c418:	881a      	ldrh	r2, [r3, #0]
 800c41a:	693b      	ldr	r3, [r7, #16]
 800c41c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800c41e:	693b      	ldr	r3, [r7, #16]
 800c420:	8afa      	ldrh	r2, [r7, #22]
 800c422:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800c424:	69bb      	ldr	r3, [r7, #24]
 800c426:	89fa      	ldrh	r2, [r7, #14]
 800c428:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c42a:	693b      	ldr	r3, [r7, #16]
 800c42c:	881b      	ldrh	r3, [r3, #0]
 800c42e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c432:	d007      	beq.n	800c444 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c434:	693b      	ldr	r3, [r7, #16]
 800c436:	881b      	ldrh	r3, [r3, #0]
 800c438:	4618      	mov	r0, r3
 800c43a:	f7ff fd2f 	bl	800be9c <ptr_to_mem>
 800c43e:	4602      	mov	r2, r0
 800c440:	89fb      	ldrh	r3, [r7, #14]
 800c442:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c444:	4809      	ldr	r0, [pc, #36]	; (800c46c <mem_trim+0x208>)
 800c446:	f009 fac2 	bl	80159ce <sys_mutex_unlock>
  return rmem;
 800c44a:	687b      	ldr	r3, [r7, #4]
}
 800c44c:	4618      	mov	r0, r3
 800c44e:	3720      	adds	r7, #32
 800c450:	46bd      	mov	sp, r7
 800c452:	bd80      	pop	{r7, pc}
 800c454:	200041d0 	.word	0x200041d0
 800c458:	200041d4 	.word	0x200041d4
 800c45c:	080176d8 	.word	0x080176d8
 800c460:	08017864 	.word	0x08017864
 800c464:	08017720 	.word	0x08017720
 800c468:	0801787c 	.word	0x0801787c
 800c46c:	200041d8 	.word	0x200041d8
 800c470:	0801789c 	.word	0x0801789c
 800c474:	200041dc 	.word	0x200041dc

0800c478 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b088      	sub	sp, #32
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	4603      	mov	r3, r0
 800c480:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800c482:	88fb      	ldrh	r3, [r7, #6]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d101      	bne.n	800c48c <mem_malloc+0x14>
    return NULL;
 800c488:	2300      	movs	r3, #0
 800c48a:	e0e2      	b.n	800c652 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800c48c:	88fb      	ldrh	r3, [r7, #6]
 800c48e:	3303      	adds	r3, #3
 800c490:	b29b      	uxth	r3, r3
 800c492:	f023 0303 	bic.w	r3, r3, #3
 800c496:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800c498:	8bbb      	ldrh	r3, [r7, #28]
 800c49a:	2b0b      	cmp	r3, #11
 800c49c:	d801      	bhi.n	800c4a2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800c49e:	230c      	movs	r3, #12
 800c4a0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800c4a2:	8bbb      	ldrh	r3, [r7, #28]
 800c4a4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c4a8:	d803      	bhi.n	800c4b2 <mem_malloc+0x3a>
 800c4aa:	8bba      	ldrh	r2, [r7, #28]
 800c4ac:	88fb      	ldrh	r3, [r7, #6]
 800c4ae:	429a      	cmp	r2, r3
 800c4b0:	d201      	bcs.n	800c4b6 <mem_malloc+0x3e>
    return NULL;
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	e0cd      	b.n	800c652 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800c4b6:	4869      	ldr	r0, [pc, #420]	; (800c65c <mem_malloc+0x1e4>)
 800c4b8:	f009 fa7a 	bl	80159b0 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c4bc:	4b68      	ldr	r3, [pc, #416]	; (800c660 <mem_malloc+0x1e8>)
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	f7ff fcfd 	bl	800bec0 <mem_to_ptr>
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	83fb      	strh	r3, [r7, #30]
 800c4ca:	e0b7      	b.n	800c63c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800c4cc:	8bfb      	ldrh	r3, [r7, #30]
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	f7ff fce4 	bl	800be9c <ptr_to_mem>
 800c4d4:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800c4d6:	697b      	ldr	r3, [r7, #20]
 800c4d8:	791b      	ldrb	r3, [r3, #4]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	f040 80a7 	bne.w	800c62e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800c4e0:	697b      	ldr	r3, [r7, #20]
 800c4e2:	881b      	ldrh	r3, [r3, #0]
 800c4e4:	461a      	mov	r2, r3
 800c4e6:	8bfb      	ldrh	r3, [r7, #30]
 800c4e8:	1ad3      	subs	r3, r2, r3
 800c4ea:	f1a3 0208 	sub.w	r2, r3, #8
 800c4ee:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800c4f0:	429a      	cmp	r2, r3
 800c4f2:	f0c0 809c 	bcc.w	800c62e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800c4f6:	697b      	ldr	r3, [r7, #20]
 800c4f8:	881b      	ldrh	r3, [r3, #0]
 800c4fa:	461a      	mov	r2, r3
 800c4fc:	8bfb      	ldrh	r3, [r7, #30]
 800c4fe:	1ad3      	subs	r3, r2, r3
 800c500:	f1a3 0208 	sub.w	r2, r3, #8
 800c504:	8bbb      	ldrh	r3, [r7, #28]
 800c506:	3314      	adds	r3, #20
 800c508:	429a      	cmp	r2, r3
 800c50a:	d333      	bcc.n	800c574 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800c50c:	8bfa      	ldrh	r2, [r7, #30]
 800c50e:	8bbb      	ldrh	r3, [r7, #28]
 800c510:	4413      	add	r3, r2
 800c512:	b29b      	uxth	r3, r3
 800c514:	3308      	adds	r3, #8
 800c516:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800c518:	8a7b      	ldrh	r3, [r7, #18]
 800c51a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c51e:	d106      	bne.n	800c52e <mem_malloc+0xb6>
 800c520:	4b50      	ldr	r3, [pc, #320]	; (800c664 <mem_malloc+0x1ec>)
 800c522:	f240 3287 	movw	r2, #903	; 0x387
 800c526:	4950      	ldr	r1, [pc, #320]	; (800c668 <mem_malloc+0x1f0>)
 800c528:	4850      	ldr	r0, [pc, #320]	; (800c66c <mem_malloc+0x1f4>)
 800c52a:	f009 ffeb 	bl	8016504 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800c52e:	8a7b      	ldrh	r3, [r7, #18]
 800c530:	4618      	mov	r0, r3
 800c532:	f7ff fcb3 	bl	800be9c <ptr_to_mem>
 800c536:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	2200      	movs	r2, #0
 800c53c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800c53e:	697b      	ldr	r3, [r7, #20]
 800c540:	881a      	ldrh	r2, [r3, #0]
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	8bfa      	ldrh	r2, [r7, #30]
 800c54a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800c54c:	697b      	ldr	r3, [r7, #20]
 800c54e:	8a7a      	ldrh	r2, [r7, #18]
 800c550:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800c552:	697b      	ldr	r3, [r7, #20]
 800c554:	2201      	movs	r2, #1
 800c556:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	881b      	ldrh	r3, [r3, #0]
 800c55c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c560:	d00b      	beq.n	800c57a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	881b      	ldrh	r3, [r3, #0]
 800c566:	4618      	mov	r0, r3
 800c568:	f7ff fc98 	bl	800be9c <ptr_to_mem>
 800c56c:	4602      	mov	r2, r0
 800c56e:	8a7b      	ldrh	r3, [r7, #18]
 800c570:	8053      	strh	r3, [r2, #2]
 800c572:	e002      	b.n	800c57a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800c574:	697b      	ldr	r3, [r7, #20]
 800c576:	2201      	movs	r2, #1
 800c578:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800c57a:	4b39      	ldr	r3, [pc, #228]	; (800c660 <mem_malloc+0x1e8>)
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	697a      	ldr	r2, [r7, #20]
 800c580:	429a      	cmp	r2, r3
 800c582:	d127      	bne.n	800c5d4 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800c584:	4b36      	ldr	r3, [pc, #216]	; (800c660 <mem_malloc+0x1e8>)
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800c58a:	e005      	b.n	800c598 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800c58c:	69bb      	ldr	r3, [r7, #24]
 800c58e:	881b      	ldrh	r3, [r3, #0]
 800c590:	4618      	mov	r0, r3
 800c592:	f7ff fc83 	bl	800be9c <ptr_to_mem>
 800c596:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800c598:	69bb      	ldr	r3, [r7, #24]
 800c59a:	791b      	ldrb	r3, [r3, #4]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d004      	beq.n	800c5aa <mem_malloc+0x132>
 800c5a0:	4b33      	ldr	r3, [pc, #204]	; (800c670 <mem_malloc+0x1f8>)
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	69ba      	ldr	r2, [r7, #24]
 800c5a6:	429a      	cmp	r2, r3
 800c5a8:	d1f0      	bne.n	800c58c <mem_malloc+0x114>
          }
          lfree = cur;
 800c5aa:	4a2d      	ldr	r2, [pc, #180]	; (800c660 <mem_malloc+0x1e8>)
 800c5ac:	69bb      	ldr	r3, [r7, #24]
 800c5ae:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800c5b0:	4b2b      	ldr	r3, [pc, #172]	; (800c660 <mem_malloc+0x1e8>)
 800c5b2:	681a      	ldr	r2, [r3, #0]
 800c5b4:	4b2e      	ldr	r3, [pc, #184]	; (800c670 <mem_malloc+0x1f8>)
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	429a      	cmp	r2, r3
 800c5ba:	d00b      	beq.n	800c5d4 <mem_malloc+0x15c>
 800c5bc:	4b28      	ldr	r3, [pc, #160]	; (800c660 <mem_malloc+0x1e8>)
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	791b      	ldrb	r3, [r3, #4]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d006      	beq.n	800c5d4 <mem_malloc+0x15c>
 800c5c6:	4b27      	ldr	r3, [pc, #156]	; (800c664 <mem_malloc+0x1ec>)
 800c5c8:	f240 32b5 	movw	r2, #949	; 0x3b5
 800c5cc:	4929      	ldr	r1, [pc, #164]	; (800c674 <mem_malloc+0x1fc>)
 800c5ce:	4827      	ldr	r0, [pc, #156]	; (800c66c <mem_malloc+0x1f4>)
 800c5d0:	f009 ff98 	bl	8016504 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800c5d4:	4821      	ldr	r0, [pc, #132]	; (800c65c <mem_malloc+0x1e4>)
 800c5d6:	f009 f9fa 	bl	80159ce <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800c5da:	8bba      	ldrh	r2, [r7, #28]
 800c5dc:	697b      	ldr	r3, [r7, #20]
 800c5de:	4413      	add	r3, r2
 800c5e0:	3308      	adds	r3, #8
 800c5e2:	4a23      	ldr	r2, [pc, #140]	; (800c670 <mem_malloc+0x1f8>)
 800c5e4:	6812      	ldr	r2, [r2, #0]
 800c5e6:	4293      	cmp	r3, r2
 800c5e8:	d906      	bls.n	800c5f8 <mem_malloc+0x180>
 800c5ea:	4b1e      	ldr	r3, [pc, #120]	; (800c664 <mem_malloc+0x1ec>)
 800c5ec:	f240 32b9 	movw	r2, #953	; 0x3b9
 800c5f0:	4921      	ldr	r1, [pc, #132]	; (800c678 <mem_malloc+0x200>)
 800c5f2:	481e      	ldr	r0, [pc, #120]	; (800c66c <mem_malloc+0x1f4>)
 800c5f4:	f009 ff86 	bl	8016504 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800c5f8:	697b      	ldr	r3, [r7, #20]
 800c5fa:	f003 0303 	and.w	r3, r3, #3
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d006      	beq.n	800c610 <mem_malloc+0x198>
 800c602:	4b18      	ldr	r3, [pc, #96]	; (800c664 <mem_malloc+0x1ec>)
 800c604:	f240 32bb 	movw	r2, #955	; 0x3bb
 800c608:	491c      	ldr	r1, [pc, #112]	; (800c67c <mem_malloc+0x204>)
 800c60a:	4818      	ldr	r0, [pc, #96]	; (800c66c <mem_malloc+0x1f4>)
 800c60c:	f009 ff7a 	bl	8016504 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800c610:	697b      	ldr	r3, [r7, #20]
 800c612:	f003 0303 	and.w	r3, r3, #3
 800c616:	2b00      	cmp	r3, #0
 800c618:	d006      	beq.n	800c628 <mem_malloc+0x1b0>
 800c61a:	4b12      	ldr	r3, [pc, #72]	; (800c664 <mem_malloc+0x1ec>)
 800c61c:	f240 32bd 	movw	r2, #957	; 0x3bd
 800c620:	4917      	ldr	r1, [pc, #92]	; (800c680 <mem_malloc+0x208>)
 800c622:	4812      	ldr	r0, [pc, #72]	; (800c66c <mem_malloc+0x1f4>)
 800c624:	f009 ff6e 	bl	8016504 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800c628:	697b      	ldr	r3, [r7, #20]
 800c62a:	3308      	adds	r3, #8
 800c62c:	e011      	b.n	800c652 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800c62e:	8bfb      	ldrh	r3, [r7, #30]
 800c630:	4618      	mov	r0, r3
 800c632:	f7ff fc33 	bl	800be9c <ptr_to_mem>
 800c636:	4603      	mov	r3, r0
 800c638:	881b      	ldrh	r3, [r3, #0]
 800c63a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c63c:	8bfa      	ldrh	r2, [r7, #30]
 800c63e:	8bbb      	ldrh	r3, [r7, #28]
 800c640:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800c644:	429a      	cmp	r2, r3
 800c646:	f4ff af41 	bcc.w	800c4cc <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800c64a:	4804      	ldr	r0, [pc, #16]	; (800c65c <mem_malloc+0x1e4>)
 800c64c:	f009 f9bf 	bl	80159ce <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800c650:	2300      	movs	r3, #0
}
 800c652:	4618      	mov	r0, r3
 800c654:	3720      	adds	r7, #32
 800c656:	46bd      	mov	sp, r7
 800c658:	bd80      	pop	{r7, pc}
 800c65a:	bf00      	nop
 800c65c:	200041d8 	.word	0x200041d8
 800c660:	200041dc 	.word	0x200041dc
 800c664:	080176d8 	.word	0x080176d8
 800c668:	0801789c 	.word	0x0801789c
 800c66c:	08017720 	.word	0x08017720
 800c670:	200041d4 	.word	0x200041d4
 800c674:	080178b0 	.word	0x080178b0
 800c678:	080178cc 	.word	0x080178cc
 800c67c:	080178fc 	.word	0x080178fc
 800c680:	0801792c 	.word	0x0801792c

0800c684 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800c684:	b480      	push	{r7}
 800c686:	b085      	sub	sp, #20
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	689b      	ldr	r3, [r3, #8]
 800c690:	2200      	movs	r2, #0
 800c692:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	685b      	ldr	r3, [r3, #4]
 800c698:	3303      	adds	r3, #3
 800c69a:	f023 0303 	bic.w	r3, r3, #3
 800c69e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	60fb      	str	r3, [r7, #12]
 800c6a4:	e011      	b.n	800c6ca <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	689b      	ldr	r3, [r3, #8]
 800c6aa:	681a      	ldr	r2, [r3, #0]
 800c6ac:	68bb      	ldr	r3, [r7, #8]
 800c6ae:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	689b      	ldr	r3, [r3, #8]
 800c6b4:	68ba      	ldr	r2, [r7, #8]
 800c6b6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	881b      	ldrh	r3, [r3, #0]
 800c6bc:	461a      	mov	r2, r3
 800c6be:	68bb      	ldr	r3, [r7, #8]
 800c6c0:	4413      	add	r3, r2
 800c6c2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	3301      	adds	r3, #1
 800c6c8:	60fb      	str	r3, [r7, #12]
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	885b      	ldrh	r3, [r3, #2]
 800c6ce:	461a      	mov	r2, r3
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	4293      	cmp	r3, r2
 800c6d4:	dbe7      	blt.n	800c6a6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800c6d6:	bf00      	nop
 800c6d8:	bf00      	nop
 800c6da:	3714      	adds	r7, #20
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e2:	4770      	bx	lr

0800c6e4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	b082      	sub	sp, #8
 800c6e8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	80fb      	strh	r3, [r7, #6]
 800c6ee:	e009      	b.n	800c704 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800c6f0:	88fb      	ldrh	r3, [r7, #6]
 800c6f2:	4a08      	ldr	r2, [pc, #32]	; (800c714 <memp_init+0x30>)
 800c6f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	f7ff ffc3 	bl	800c684 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c6fe:	88fb      	ldrh	r3, [r7, #6]
 800c700:	3301      	adds	r3, #1
 800c702:	80fb      	strh	r3, [r7, #6]
 800c704:	88fb      	ldrh	r3, [r7, #6]
 800c706:	2b0c      	cmp	r3, #12
 800c708:	d9f2      	bls.n	800c6f0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800c70a:	bf00      	nop
 800c70c:	bf00      	nop
 800c70e:	3708      	adds	r7, #8
 800c710:	46bd      	mov	sp, r7
 800c712:	bd80      	pop	{r7, pc}
 800c714:	0801a17c 	.word	0x0801a17c

0800c718 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b084      	sub	sp, #16
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800c720:	f009 f988 	bl	8015a34 <sys_arch_protect>
 800c724:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	689b      	ldr	r3, [r3, #8]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800c72e:	68bb      	ldr	r3, [r7, #8]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d015      	beq.n	800c760 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	689b      	ldr	r3, [r3, #8]
 800c738:	68ba      	ldr	r2, [r7, #8]
 800c73a:	6812      	ldr	r2, [r2, #0]
 800c73c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800c73e:	68bb      	ldr	r3, [r7, #8]
 800c740:	f003 0303 	and.w	r3, r3, #3
 800c744:	2b00      	cmp	r3, #0
 800c746:	d006      	beq.n	800c756 <do_memp_malloc_pool+0x3e>
 800c748:	4b09      	ldr	r3, [pc, #36]	; (800c770 <do_memp_malloc_pool+0x58>)
 800c74a:	f44f 728c 	mov.w	r2, #280	; 0x118
 800c74e:	4909      	ldr	r1, [pc, #36]	; (800c774 <do_memp_malloc_pool+0x5c>)
 800c750:	4809      	ldr	r0, [pc, #36]	; (800c778 <do_memp_malloc_pool+0x60>)
 800c752:	f009 fed7 	bl	8016504 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c756:	68f8      	ldr	r0, [r7, #12]
 800c758:	f009 f97a 	bl	8015a50 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800c75c:	68bb      	ldr	r3, [r7, #8]
 800c75e:	e003      	b.n	800c768 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c760:	68f8      	ldr	r0, [r7, #12]
 800c762:	f009 f975 	bl	8015a50 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800c766:	2300      	movs	r3, #0
}
 800c768:	4618      	mov	r0, r3
 800c76a:	3710      	adds	r7, #16
 800c76c:	46bd      	mov	sp, r7
 800c76e:	bd80      	pop	{r7, pc}
 800c770:	08017950 	.word	0x08017950
 800c774:	08017980 	.word	0x08017980
 800c778:	080179a4 	.word	0x080179a4

0800c77c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800c77c:	b580      	push	{r7, lr}
 800c77e:	b084      	sub	sp, #16
 800c780:	af00      	add	r7, sp, #0
 800c782:	4603      	mov	r3, r0
 800c784:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c786:	79fb      	ldrb	r3, [r7, #7]
 800c788:	2b0c      	cmp	r3, #12
 800c78a:	d908      	bls.n	800c79e <memp_malloc+0x22>
 800c78c:	4b0a      	ldr	r3, [pc, #40]	; (800c7b8 <memp_malloc+0x3c>)
 800c78e:	f240 1257 	movw	r2, #343	; 0x157
 800c792:	490a      	ldr	r1, [pc, #40]	; (800c7bc <memp_malloc+0x40>)
 800c794:	480a      	ldr	r0, [pc, #40]	; (800c7c0 <memp_malloc+0x44>)
 800c796:	f009 feb5 	bl	8016504 <iprintf>
 800c79a:	2300      	movs	r3, #0
 800c79c:	e008      	b.n	800c7b0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c79e:	79fb      	ldrb	r3, [r7, #7]
 800c7a0:	4a08      	ldr	r2, [pc, #32]	; (800c7c4 <memp_malloc+0x48>)
 800c7a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	f7ff ffb6 	bl	800c718 <do_memp_malloc_pool>
 800c7ac:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800c7ae:	68fb      	ldr	r3, [r7, #12]
}
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	3710      	adds	r7, #16
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	bd80      	pop	{r7, pc}
 800c7b8:	08017950 	.word	0x08017950
 800c7bc:	080179e0 	.word	0x080179e0
 800c7c0:	080179a4 	.word	0x080179a4
 800c7c4:	0801a17c 	.word	0x0801a17c

0800c7c8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b084      	sub	sp, #16
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
 800c7d0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800c7d2:	683b      	ldr	r3, [r7, #0]
 800c7d4:	f003 0303 	and.w	r3, r3, #3
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d006      	beq.n	800c7ea <do_memp_free_pool+0x22>
 800c7dc:	4b0d      	ldr	r3, [pc, #52]	; (800c814 <do_memp_free_pool+0x4c>)
 800c7de:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800c7e2:	490d      	ldr	r1, [pc, #52]	; (800c818 <do_memp_free_pool+0x50>)
 800c7e4:	480d      	ldr	r0, [pc, #52]	; (800c81c <do_memp_free_pool+0x54>)
 800c7e6:	f009 fe8d 	bl	8016504 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800c7ee:	f009 f921 	bl	8015a34 <sys_arch_protect>
 800c7f2:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	689b      	ldr	r3, [r3, #8]
 800c7f8:	681a      	ldr	r2, [r3, #0]
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	689b      	ldr	r3, [r3, #8]
 800c802:	68fa      	ldr	r2, [r7, #12]
 800c804:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800c806:	68b8      	ldr	r0, [r7, #8]
 800c808:	f009 f922 	bl	8015a50 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800c80c:	bf00      	nop
 800c80e:	3710      	adds	r7, #16
 800c810:	46bd      	mov	sp, r7
 800c812:	bd80      	pop	{r7, pc}
 800c814:	08017950 	.word	0x08017950
 800c818:	08017a00 	.word	0x08017a00
 800c81c:	080179a4 	.word	0x080179a4

0800c820 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800c820:	b580      	push	{r7, lr}
 800c822:	b082      	sub	sp, #8
 800c824:	af00      	add	r7, sp, #0
 800c826:	4603      	mov	r3, r0
 800c828:	6039      	str	r1, [r7, #0]
 800c82a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800c82c:	79fb      	ldrb	r3, [r7, #7]
 800c82e:	2b0c      	cmp	r3, #12
 800c830:	d907      	bls.n	800c842 <memp_free+0x22>
 800c832:	4b0c      	ldr	r3, [pc, #48]	; (800c864 <memp_free+0x44>)
 800c834:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800c838:	490b      	ldr	r1, [pc, #44]	; (800c868 <memp_free+0x48>)
 800c83a:	480c      	ldr	r0, [pc, #48]	; (800c86c <memp_free+0x4c>)
 800c83c:	f009 fe62 	bl	8016504 <iprintf>
 800c840:	e00c      	b.n	800c85c <memp_free+0x3c>

  if (mem == NULL) {
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d008      	beq.n	800c85a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800c848:	79fb      	ldrb	r3, [r7, #7]
 800c84a:	4a09      	ldr	r2, [pc, #36]	; (800c870 <memp_free+0x50>)
 800c84c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c850:	6839      	ldr	r1, [r7, #0]
 800c852:	4618      	mov	r0, r3
 800c854:	f7ff ffb8 	bl	800c7c8 <do_memp_free_pool>
 800c858:	e000      	b.n	800c85c <memp_free+0x3c>
    return;
 800c85a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800c85c:	3708      	adds	r7, #8
 800c85e:	46bd      	mov	sp, r7
 800c860:	bd80      	pop	{r7, pc}
 800c862:	bf00      	nop
 800c864:	08017950 	.word	0x08017950
 800c868:	08017a20 	.word	0x08017a20
 800c86c:	080179a4 	.word	0x080179a4
 800c870:	0801a17c 	.word	0x0801a17c

0800c874 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800c874:	b480      	push	{r7}
 800c876:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800c878:	bf00      	nop
 800c87a:	46bd      	mov	sp, r7
 800c87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c880:	4770      	bx	lr
	...

0800c884 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800c884:	b580      	push	{r7, lr}
 800c886:	b086      	sub	sp, #24
 800c888:	af00      	add	r7, sp, #0
 800c88a:	60f8      	str	r0, [r7, #12]
 800c88c:	60b9      	str	r1, [r7, #8]
 800c88e:	607a      	str	r2, [r7, #4]
 800c890:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d108      	bne.n	800c8aa <netif_add+0x26>
 800c898:	4b56      	ldr	r3, [pc, #344]	; (800c9f4 <netif_add+0x170>)
 800c89a:	f240 1227 	movw	r2, #295	; 0x127
 800c89e:	4956      	ldr	r1, [pc, #344]	; (800c9f8 <netif_add+0x174>)
 800c8a0:	4856      	ldr	r0, [pc, #344]	; (800c9fc <netif_add+0x178>)
 800c8a2:	f009 fe2f 	bl	8016504 <iprintf>
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	e09f      	b.n	800c9ea <netif_add+0x166>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800c8aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d108      	bne.n	800c8c2 <netif_add+0x3e>
 800c8b0:	4b50      	ldr	r3, [pc, #320]	; (800c9f4 <netif_add+0x170>)
 800c8b2:	f44f 7294 	mov.w	r2, #296	; 0x128
 800c8b6:	4952      	ldr	r1, [pc, #328]	; (800ca00 <netif_add+0x17c>)
 800c8b8:	4850      	ldr	r0, [pc, #320]	; (800c9fc <netif_add+0x178>)
 800c8ba:	f009 fe23 	bl	8016504 <iprintf>
 800c8be:	2300      	movs	r3, #0
 800c8c0:	e093      	b.n	800c9ea <netif_add+0x166>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800c8c2:	68bb      	ldr	r3, [r7, #8]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d101      	bne.n	800c8cc <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800c8c8:	4b4e      	ldr	r3, [pc, #312]	; (800ca04 <netif_add+0x180>)
 800c8ca:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d101      	bne.n	800c8d6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800c8d2:	4b4c      	ldr	r3, [pc, #304]	; (800ca04 <netif_add+0x180>)
 800c8d4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c8d6:	683b      	ldr	r3, [r7, #0]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d101      	bne.n	800c8e0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800c8dc:	4b49      	ldr	r3, [pc, #292]	; (800ca04 <netif_add+0x180>)
 800c8de:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	4a44      	ldr	r2, [pc, #272]	; (800ca08 <netif_add+0x184>)
 800c8f6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	841a      	strh	r2, [r3, #32]
  netif->flags = 0;
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	2200      	movs	r2, #0
 800c902:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	6a3a      	ldr	r2, [r7, #32]
 800c90a:	61da      	str	r2, [r3, #28]
  netif->num = netif_num;
 800c90c:	4b3f      	ldr	r3, [pc, #252]	; (800ca0c <netif_add+0x188>)
 800c90e:	781a      	ldrb	r2, [r3, #0]
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->input = input;
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c91a:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c91c:	683b      	ldr	r3, [r7, #0]
 800c91e:	687a      	ldr	r2, [r7, #4]
 800c920:	68b9      	ldr	r1, [r7, #8]
 800c922:	68f8      	ldr	r0, [r7, #12]
 800c924:	f000 f914 	bl	800cb50 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800c928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c92a:	68f8      	ldr	r0, [r7, #12]
 800c92c:	4798      	blx	r3
 800c92e:	4603      	mov	r3, r0
 800c930:	2b00      	cmp	r3, #0
 800c932:	d001      	beq.n	800c938 <netif_add+0xb4>
    return NULL;
 800c934:	2300      	movs	r3, #0
 800c936:	e058      	b.n	800c9ea <netif_add+0x166>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c93e:	2bff      	cmp	r3, #255	; 0xff
 800c940:	d103      	bne.n	800c94a <netif_add+0xc6>
        netif->num = 0;
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	2200      	movs	r2, #0
 800c946:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
      }
      num_netifs = 0;
 800c94a:	2300      	movs	r3, #0
 800c94c:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c94e:	4b30      	ldr	r3, [pc, #192]	; (800ca10 <netif_add+0x18c>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	617b      	str	r3, [r7, #20]
 800c954:	e02b      	b.n	800c9ae <netif_add+0x12a>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800c956:	697a      	ldr	r2, [r7, #20]
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	429a      	cmp	r2, r3
 800c95c:	d106      	bne.n	800c96c <netif_add+0xe8>
 800c95e:	4b25      	ldr	r3, [pc, #148]	; (800c9f4 <netif_add+0x170>)
 800c960:	f240 128b 	movw	r2, #395	; 0x18b
 800c964:	492b      	ldr	r1, [pc, #172]	; (800ca14 <netif_add+0x190>)
 800c966:	4825      	ldr	r0, [pc, #148]	; (800c9fc <netif_add+0x178>)
 800c968:	f009 fdcc 	bl	8016504 <iprintf>
        num_netifs++;
 800c96c:	693b      	ldr	r3, [r7, #16]
 800c96e:	3301      	adds	r3, #1
 800c970:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800c972:	693b      	ldr	r3, [r7, #16]
 800c974:	2bff      	cmp	r3, #255	; 0xff
 800c976:	dd06      	ble.n	800c986 <netif_add+0x102>
 800c978:	4b1e      	ldr	r3, [pc, #120]	; (800c9f4 <netif_add+0x170>)
 800c97a:	f240 128d 	movw	r2, #397	; 0x18d
 800c97e:	4926      	ldr	r1, [pc, #152]	; (800ca18 <netif_add+0x194>)
 800c980:	481e      	ldr	r0, [pc, #120]	; (800c9fc <netif_add+0x178>)
 800c982:	f009 fdbf 	bl	8016504 <iprintf>
        if (netif2->num == netif->num) {
 800c986:	697b      	ldr	r3, [r7, #20]
 800c988:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c992:	429a      	cmp	r2, r3
 800c994:	d108      	bne.n	800c9a8 <netif_add+0x124>
          netif->num++;
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c99c:	3301      	adds	r3, #1
 800c99e:	b2da      	uxtb	r2, r3
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
          break;
 800c9a6:	e005      	b.n	800c9b4 <netif_add+0x130>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c9a8:	697b      	ldr	r3, [r7, #20]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	617b      	str	r3, [r7, #20]
 800c9ae:	697b      	ldr	r3, [r7, #20]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d1d0      	bne.n	800c956 <netif_add+0xd2>
        }
      }
    } while (netif2 != NULL);
 800c9b4:	697b      	ldr	r3, [r7, #20]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d1be      	bne.n	800c938 <netif_add+0xb4>
  }
  if (netif->num == 254) {
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c9c0:	2bfe      	cmp	r3, #254	; 0xfe
 800c9c2:	d103      	bne.n	800c9cc <netif_add+0x148>
    netif_num = 0;
 800c9c4:	4b11      	ldr	r3, [pc, #68]	; (800ca0c <netif_add+0x188>)
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	701a      	strb	r2, [r3, #0]
 800c9ca:	e006      	b.n	800c9da <netif_add+0x156>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c9d2:	3301      	adds	r3, #1
 800c9d4:	b2da      	uxtb	r2, r3
 800c9d6:	4b0d      	ldr	r3, [pc, #52]	; (800ca0c <netif_add+0x188>)
 800c9d8:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800c9da:	4b0d      	ldr	r3, [pc, #52]	; (800ca10 <netif_add+0x18c>)
 800c9dc:	681a      	ldr	r2, [r3, #0]
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800c9e2:	4a0b      	ldr	r2, [pc, #44]	; (800ca10 <netif_add+0x18c>)
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800c9e8:	68fb      	ldr	r3, [r7, #12]
}
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	3718      	adds	r7, #24
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	bd80      	pop	{r7, pc}
 800c9f2:	bf00      	nop
 800c9f4:	08017a3c 	.word	0x08017a3c
 800c9f8:	08017ad0 	.word	0x08017ad0
 800c9fc:	08017a8c 	.word	0x08017a8c
 800ca00:	08017aec 	.word	0x08017aec
 800ca04:	0801a1f0 	.word	0x0801a1f0
 800ca08:	0800cd41 	.word	0x0800cd41
 800ca0c:	20004214 	.word	0x20004214
 800ca10:	2000af4c 	.word	0x2000af4c
 800ca14:	08017b10 	.word	0x08017b10
 800ca18:	08017b24 	.word	0x08017b24

0800ca1c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b082      	sub	sp, #8
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
 800ca24:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800ca26:	6839      	ldr	r1, [r7, #0]
 800ca28:	6878      	ldr	r0, [r7, #4]
 800ca2a:	f002 fb07 	bl	800f03c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800ca2e:	6839      	ldr	r1, [r7, #0]
 800ca30:	6878      	ldr	r0, [r7, #4]
 800ca32:	f006 fc17 	bl	8013264 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800ca36:	bf00      	nop
 800ca38:	3708      	adds	r7, #8
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	bd80      	pop	{r7, pc}
	...

0800ca40 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b086      	sub	sp, #24
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	60f8      	str	r0, [r7, #12]
 800ca48:	60b9      	str	r1, [r7, #8]
 800ca4a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800ca4c:	68bb      	ldr	r3, [r7, #8]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d106      	bne.n	800ca60 <netif_do_set_ipaddr+0x20>
 800ca52:	4b1d      	ldr	r3, [pc, #116]	; (800cac8 <netif_do_set_ipaddr+0x88>)
 800ca54:	f240 12cb 	movw	r2, #459	; 0x1cb
 800ca58:	491c      	ldr	r1, [pc, #112]	; (800cacc <netif_do_set_ipaddr+0x8c>)
 800ca5a:	481d      	ldr	r0, [pc, #116]	; (800cad0 <netif_do_set_ipaddr+0x90>)
 800ca5c:	f009 fd52 	bl	8016504 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d106      	bne.n	800ca74 <netif_do_set_ipaddr+0x34>
 800ca66:	4b18      	ldr	r3, [pc, #96]	; (800cac8 <netif_do_set_ipaddr+0x88>)
 800ca68:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800ca6c:	4917      	ldr	r1, [pc, #92]	; (800cacc <netif_do_set_ipaddr+0x8c>)
 800ca6e:	4818      	ldr	r0, [pc, #96]	; (800cad0 <netif_do_set_ipaddr+0x90>)
 800ca70:	f009 fd48 	bl	8016504 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800ca74:	68bb      	ldr	r3, [r7, #8]
 800ca76:	681a      	ldr	r2, [r3, #0]
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	3304      	adds	r3, #4
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	429a      	cmp	r2, r3
 800ca80:	d01c      	beq.n	800cabc <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800ca82:	68bb      	ldr	r3, [r7, #8]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	3304      	adds	r3, #4
 800ca8c:	681a      	ldr	r2, [r3, #0]
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800ca92:	f107 0314 	add.w	r3, r7, #20
 800ca96:	4619      	mov	r1, r3
 800ca98:	6878      	ldr	r0, [r7, #4]
 800ca9a:	f7ff ffbf 	bl	800ca1c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800ca9e:	68bb      	ldr	r3, [r7, #8]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d002      	beq.n	800caaa <netif_do_set_ipaddr+0x6a>
 800caa4:	68bb      	ldr	r3, [r7, #8]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	e000      	b.n	800caac <netif_do_set_ipaddr+0x6c>
 800caaa:	2300      	movs	r3, #0
 800caac:	68fa      	ldr	r2, [r7, #12]
 800caae:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800cab0:	2101      	movs	r1, #1
 800cab2:	68f8      	ldr	r0, [r7, #12]
 800cab4:	f000 f8d2 	bl	800cc5c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800cab8:	2301      	movs	r3, #1
 800caba:	e000      	b.n	800cabe <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800cabc:	2300      	movs	r3, #0
}
 800cabe:	4618      	mov	r0, r3
 800cac0:	3718      	adds	r7, #24
 800cac2:	46bd      	mov	sp, r7
 800cac4:	bd80      	pop	{r7, pc}
 800cac6:	bf00      	nop
 800cac8:	08017a3c 	.word	0x08017a3c
 800cacc:	08017b54 	.word	0x08017b54
 800cad0:	08017a8c 	.word	0x08017a8c

0800cad4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800cad4:	b480      	push	{r7}
 800cad6:	b085      	sub	sp, #20
 800cad8:	af00      	add	r7, sp, #0
 800cada:	60f8      	str	r0, [r7, #12]
 800cadc:	60b9      	str	r1, [r7, #8]
 800cade:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800cae0:	68bb      	ldr	r3, [r7, #8]
 800cae2:	681a      	ldr	r2, [r3, #0]
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	3308      	adds	r3, #8
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	429a      	cmp	r2, r3
 800caec:	d00a      	beq.n	800cb04 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800caee:	68bb      	ldr	r3, [r7, #8]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d002      	beq.n	800cafa <netif_do_set_netmask+0x26>
 800caf4:	68bb      	ldr	r3, [r7, #8]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	e000      	b.n	800cafc <netif_do_set_netmask+0x28>
 800cafa:	2300      	movs	r3, #0
 800cafc:	68fa      	ldr	r2, [r7, #12]
 800cafe:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800cb00:	2301      	movs	r3, #1
 800cb02:	e000      	b.n	800cb06 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800cb04:	2300      	movs	r3, #0
}
 800cb06:	4618      	mov	r0, r3
 800cb08:	3714      	adds	r7, #20
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb10:	4770      	bx	lr

0800cb12 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800cb12:	b480      	push	{r7}
 800cb14:	b085      	sub	sp, #20
 800cb16:	af00      	add	r7, sp, #0
 800cb18:	60f8      	str	r0, [r7, #12]
 800cb1a:	60b9      	str	r1, [r7, #8]
 800cb1c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800cb1e:	68bb      	ldr	r3, [r7, #8]
 800cb20:	681a      	ldr	r2, [r3, #0]
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	330c      	adds	r3, #12
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	429a      	cmp	r2, r3
 800cb2a:	d00a      	beq.n	800cb42 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800cb2c:	68bb      	ldr	r3, [r7, #8]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d002      	beq.n	800cb38 <netif_do_set_gw+0x26>
 800cb32:	68bb      	ldr	r3, [r7, #8]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	e000      	b.n	800cb3a <netif_do_set_gw+0x28>
 800cb38:	2300      	movs	r3, #0
 800cb3a:	68fa      	ldr	r2, [r7, #12]
 800cb3c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800cb3e:	2301      	movs	r3, #1
 800cb40:	e000      	b.n	800cb44 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800cb42:	2300      	movs	r3, #0
}
 800cb44:	4618      	mov	r0, r3
 800cb46:	3714      	adds	r7, #20
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4e:	4770      	bx	lr

0800cb50 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b088      	sub	sp, #32
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	60f8      	str	r0, [r7, #12]
 800cb58:	60b9      	str	r1, [r7, #8]
 800cb5a:	607a      	str	r2, [r7, #4]
 800cb5c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800cb5e:	2300      	movs	r3, #0
 800cb60:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800cb62:	2300      	movs	r3, #0
 800cb64:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800cb66:	68bb      	ldr	r3, [r7, #8]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d101      	bne.n	800cb70 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800cb6c:	4b1c      	ldr	r3, [pc, #112]	; (800cbe0 <netif_set_addr+0x90>)
 800cb6e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d101      	bne.n	800cb7a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800cb76:	4b1a      	ldr	r3, [pc, #104]	; (800cbe0 <netif_set_addr+0x90>)
 800cb78:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d101      	bne.n	800cb84 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800cb80:	4b17      	ldr	r3, [pc, #92]	; (800cbe0 <netif_set_addr+0x90>)
 800cb82:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800cb84:	68bb      	ldr	r3, [r7, #8]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d003      	beq.n	800cb92 <netif_set_addr+0x42>
 800cb8a:	68bb      	ldr	r3, [r7, #8]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d101      	bne.n	800cb96 <netif_set_addr+0x46>
 800cb92:	2301      	movs	r3, #1
 800cb94:	e000      	b.n	800cb98 <netif_set_addr+0x48>
 800cb96:	2300      	movs	r3, #0
 800cb98:	617b      	str	r3, [r7, #20]
  if (remove) {
 800cb9a:	697b      	ldr	r3, [r7, #20]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d006      	beq.n	800cbae <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800cba0:	f107 0310 	add.w	r3, r7, #16
 800cba4:	461a      	mov	r2, r3
 800cba6:	68b9      	ldr	r1, [r7, #8]
 800cba8:	68f8      	ldr	r0, [r7, #12]
 800cbaa:	f7ff ff49 	bl	800ca40 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800cbae:	69fa      	ldr	r2, [r7, #28]
 800cbb0:	6879      	ldr	r1, [r7, #4]
 800cbb2:	68f8      	ldr	r0, [r7, #12]
 800cbb4:	f7ff ff8e 	bl	800cad4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800cbb8:	69ba      	ldr	r2, [r7, #24]
 800cbba:	6839      	ldr	r1, [r7, #0]
 800cbbc:	68f8      	ldr	r0, [r7, #12]
 800cbbe:	f7ff ffa8 	bl	800cb12 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800cbc2:	697b      	ldr	r3, [r7, #20]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d106      	bne.n	800cbd6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800cbc8:	f107 0310 	add.w	r3, r7, #16
 800cbcc:	461a      	mov	r2, r3
 800cbce:	68b9      	ldr	r1, [r7, #8]
 800cbd0:	68f8      	ldr	r0, [r7, #12]
 800cbd2:	f7ff ff35 	bl	800ca40 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800cbd6:	bf00      	nop
 800cbd8:	3720      	adds	r7, #32
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bd80      	pop	{r7, pc}
 800cbde:	bf00      	nop
 800cbe0:	0801a1f0 	.word	0x0801a1f0

0800cbe4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800cbe4:	b480      	push	{r7}
 800cbe6:	b083      	sub	sp, #12
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800cbec:	4a04      	ldr	r2, [pc, #16]	; (800cc00 <netif_set_default+0x1c>)
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800cbf2:	bf00      	nop
 800cbf4:	370c      	adds	r7, #12
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfc:	4770      	bx	lr
 800cbfe:	bf00      	nop
 800cc00:	2000af50 	.word	0x2000af50

0800cc04 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b082      	sub	sp, #8
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d107      	bne.n	800cc22 <netif_set_up+0x1e>
 800cc12:	4b0f      	ldr	r3, [pc, #60]	; (800cc50 <netif_set_up+0x4c>)
 800cc14:	f44f 7254 	mov.w	r2, #848	; 0x350
 800cc18:	490e      	ldr	r1, [pc, #56]	; (800cc54 <netif_set_up+0x50>)
 800cc1a:	480f      	ldr	r0, [pc, #60]	; (800cc58 <netif_set_up+0x54>)
 800cc1c:	f009 fc72 	bl	8016504 <iprintf>
 800cc20:	e013      	b.n	800cc4a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800cc28:	f003 0301 	and.w	r3, r3, #1
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d10c      	bne.n	800cc4a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800cc36:	f043 0301 	orr.w	r3, r3, #1
 800cc3a:	b2da      	uxtb	r2, r3
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800cc42:	2103      	movs	r1, #3
 800cc44:	6878      	ldr	r0, [r7, #4]
 800cc46:	f000 f809 	bl	800cc5c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800cc4a:	3708      	adds	r7, #8
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	bd80      	pop	{r7, pc}
 800cc50:	08017a3c 	.word	0x08017a3c
 800cc54:	08017bc4 	.word	0x08017bc4
 800cc58:	08017a8c 	.word	0x08017a8c

0800cc5c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	b082      	sub	sp, #8
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	6078      	str	r0, [r7, #4]
 800cc64:	460b      	mov	r3, r1
 800cc66:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d106      	bne.n	800cc7c <netif_issue_reports+0x20>
 800cc6e:	4b18      	ldr	r3, [pc, #96]	; (800ccd0 <netif_issue_reports+0x74>)
 800cc70:	f240 326d 	movw	r2, #877	; 0x36d
 800cc74:	4917      	ldr	r1, [pc, #92]	; (800ccd4 <netif_issue_reports+0x78>)
 800cc76:	4818      	ldr	r0, [pc, #96]	; (800ccd8 <netif_issue_reports+0x7c>)
 800cc78:	f009 fc44 	bl	8016504 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800cc82:	f003 0304 	and.w	r3, r3, #4
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d01e      	beq.n	800ccc8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800cc90:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d017      	beq.n	800ccc8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800cc98:	78fb      	ldrb	r3, [r7, #3]
 800cc9a:	f003 0301 	and.w	r3, r3, #1
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d013      	beq.n	800ccca <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	3304      	adds	r3, #4
 800cca6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d00e      	beq.n	800ccca <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800ccb2:	f003 0308 	and.w	r3, r3, #8
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d007      	beq.n	800ccca <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	3304      	adds	r3, #4
 800ccbe:	4619      	mov	r1, r3
 800ccc0:	6878      	ldr	r0, [r7, #4]
 800ccc2:	f007 fa39 	bl	8014138 <etharp_request>
 800ccc6:	e000      	b.n	800ccca <netif_issue_reports+0x6e>
    return;
 800ccc8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800ccca:	3708      	adds	r7, #8
 800cccc:	46bd      	mov	sp, r7
 800ccce:	bd80      	pop	{r7, pc}
 800ccd0:	08017a3c 	.word	0x08017a3c
 800ccd4:	08017be0 	.word	0x08017be0
 800ccd8:	08017a8c 	.word	0x08017a8c

0800ccdc <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b082      	sub	sp, #8
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d107      	bne.n	800ccfa <netif_set_down+0x1e>
 800ccea:	4b12      	ldr	r3, [pc, #72]	; (800cd34 <netif_set_down+0x58>)
 800ccec:	f240 329b 	movw	r2, #923	; 0x39b
 800ccf0:	4911      	ldr	r1, [pc, #68]	; (800cd38 <netif_set_down+0x5c>)
 800ccf2:	4812      	ldr	r0, [pc, #72]	; (800cd3c <netif_set_down+0x60>)
 800ccf4:	f009 fc06 	bl	8016504 <iprintf>
 800ccf8:	e019      	b.n	800cd2e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800cd00:	f003 0301 	and.w	r3, r3, #1
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d012      	beq.n	800cd2e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800cd0e:	f023 0301 	bic.w	r3, r3, #1
 800cd12:	b2da      	uxtb	r2, r3
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800cd20:	f003 0308 	and.w	r3, r3, #8
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d002      	beq.n	800cd2e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800cd28:	6878      	ldr	r0, [r7, #4]
 800cd2a:	f006 fdc3 	bl	80138b4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800cd2e:	3708      	adds	r7, #8
 800cd30:	46bd      	mov	sp, r7
 800cd32:	bd80      	pop	{r7, pc}
 800cd34:	08017a3c 	.word	0x08017a3c
 800cd38:	08017c04 	.word	0x08017c04
 800cd3c:	08017a8c 	.word	0x08017a8c

0800cd40 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800cd40:	b480      	push	{r7}
 800cd42:	b085      	sub	sp, #20
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	60f8      	str	r0, [r7, #12]
 800cd48:	60b9      	str	r1, [r7, #8]
 800cd4a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800cd4c:	f06f 030b 	mvn.w	r3, #11
}
 800cd50:	4618      	mov	r0, r3
 800cd52:	3714      	adds	r7, #20
 800cd54:	46bd      	mov	sp, r7
 800cd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5a:	4770      	bx	lr

0800cd5c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800cd5c:	b480      	push	{r7}
 800cd5e:	b085      	sub	sp, #20
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	4603      	mov	r3, r0
 800cd64:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800cd66:	79fb      	ldrb	r3, [r7, #7]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d013      	beq.n	800cd94 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800cd6c:	4b0d      	ldr	r3, [pc, #52]	; (800cda4 <netif_get_by_index+0x48>)
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	60fb      	str	r3, [r7, #12]
 800cd72:	e00c      	b.n	800cd8e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cd7a:	3301      	adds	r3, #1
 800cd7c:	b2db      	uxtb	r3, r3
 800cd7e:	79fa      	ldrb	r2, [r7, #7]
 800cd80:	429a      	cmp	r2, r3
 800cd82:	d101      	bne.n	800cd88 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	e006      	b.n	800cd96 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	60fb      	str	r3, [r7, #12]
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d1ef      	bne.n	800cd74 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800cd94:	2300      	movs	r3, #0
}
 800cd96:	4618      	mov	r0, r3
 800cd98:	3714      	adds	r7, #20
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda0:	4770      	bx	lr
 800cda2:	bf00      	nop
 800cda4:	2000af4c 	.word	0x2000af4c

0800cda8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b082      	sub	sp, #8
 800cdac:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800cdae:	f008 fe41 	bl	8015a34 <sys_arch_protect>
 800cdb2:	6038      	str	r0, [r7, #0]
 800cdb4:	4b0d      	ldr	r3, [pc, #52]	; (800cdec <pbuf_free_ooseq+0x44>)
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	701a      	strb	r2, [r3, #0]
 800cdba:	6838      	ldr	r0, [r7, #0]
 800cdbc:	f008 fe48 	bl	8015a50 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800cdc0:	4b0b      	ldr	r3, [pc, #44]	; (800cdf0 <pbuf_free_ooseq+0x48>)
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	607b      	str	r3, [r7, #4]
 800cdc6:	e00a      	b.n	800cdde <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d003      	beq.n	800cdd8 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800cdd0:	6878      	ldr	r0, [r7, #4]
 800cdd2:	f002 f971 	bl	800f0b8 <tcp_free_ooseq>
      return;
 800cdd6:	e005      	b.n	800cde4 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	68db      	ldr	r3, [r3, #12]
 800cddc:	607b      	str	r3, [r7, #4]
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d1f1      	bne.n	800cdc8 <pbuf_free_ooseq+0x20>
    }
  }
}
 800cde4:	3708      	adds	r7, #8
 800cde6:	46bd      	mov	sp, r7
 800cde8:	bd80      	pop	{r7, pc}
 800cdea:	bf00      	nop
 800cdec:	2000af54 	.word	0x2000af54
 800cdf0:	2000af5c 	.word	0x2000af5c

0800cdf4 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b082      	sub	sp, #8
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800cdfc:	f7ff ffd4 	bl	800cda8 <pbuf_free_ooseq>
}
 800ce00:	bf00      	nop
 800ce02:	3708      	adds	r7, #8
 800ce04:	46bd      	mov	sp, r7
 800ce06:	bd80      	pop	{r7, pc}

0800ce08 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b082      	sub	sp, #8
 800ce0c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800ce0e:	f008 fe11 	bl	8015a34 <sys_arch_protect>
 800ce12:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800ce14:	4b0f      	ldr	r3, [pc, #60]	; (800ce54 <pbuf_pool_is_empty+0x4c>)
 800ce16:	781b      	ldrb	r3, [r3, #0]
 800ce18:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800ce1a:	4b0e      	ldr	r3, [pc, #56]	; (800ce54 <pbuf_pool_is_empty+0x4c>)
 800ce1c:	2201      	movs	r2, #1
 800ce1e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800ce20:	6878      	ldr	r0, [r7, #4]
 800ce22:	f008 fe15 	bl	8015a50 <sys_arch_unprotect>

  if (!queued) {
 800ce26:	78fb      	ldrb	r3, [r7, #3]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d10f      	bne.n	800ce4c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800ce2c:	2100      	movs	r1, #0
 800ce2e:	480a      	ldr	r0, [pc, #40]	; (800ce58 <pbuf_pool_is_empty+0x50>)
 800ce30:	f7fe ff64 	bl	800bcfc <tcpip_try_callback>
 800ce34:	4603      	mov	r3, r0
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d008      	beq.n	800ce4c <pbuf_pool_is_empty+0x44>
 800ce3a:	f008 fdfb 	bl	8015a34 <sys_arch_protect>
 800ce3e:	6078      	str	r0, [r7, #4]
 800ce40:	4b04      	ldr	r3, [pc, #16]	; (800ce54 <pbuf_pool_is_empty+0x4c>)
 800ce42:	2200      	movs	r2, #0
 800ce44:	701a      	strb	r2, [r3, #0]
 800ce46:	6878      	ldr	r0, [r7, #4]
 800ce48:	f008 fe02 	bl	8015a50 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800ce4c:	bf00      	nop
 800ce4e:	3708      	adds	r7, #8
 800ce50:	46bd      	mov	sp, r7
 800ce52:	bd80      	pop	{r7, pc}
 800ce54:	2000af54 	.word	0x2000af54
 800ce58:	0800cdf5 	.word	0x0800cdf5

0800ce5c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800ce5c:	b480      	push	{r7}
 800ce5e:	b085      	sub	sp, #20
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	60f8      	str	r0, [r7, #12]
 800ce64:	60b9      	str	r1, [r7, #8]
 800ce66:	4611      	mov	r1, r2
 800ce68:	461a      	mov	r2, r3
 800ce6a:	460b      	mov	r3, r1
 800ce6c:	80fb      	strh	r3, [r7, #6]
 800ce6e:	4613      	mov	r3, r2
 800ce70:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	2200      	movs	r2, #0
 800ce76:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	68ba      	ldr	r2, [r7, #8]
 800ce7c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	88fa      	ldrh	r2, [r7, #6]
 800ce82:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	88ba      	ldrh	r2, [r7, #4]
 800ce88:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800ce8a:	8b3b      	ldrh	r3, [r7, #24]
 800ce8c:	b2da      	uxtb	r2, r3
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	7f3a      	ldrb	r2, [r7, #28]
 800ce96:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	2201      	movs	r2, #1
 800ce9c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	2200      	movs	r2, #0
 800cea2:	73da      	strb	r2, [r3, #15]
}
 800cea4:	bf00      	nop
 800cea6:	3714      	adds	r7, #20
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceae:	4770      	bx	lr

0800ceb0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b08c      	sub	sp, #48	; 0x30
 800ceb4:	af02      	add	r7, sp, #8
 800ceb6:	4603      	mov	r3, r0
 800ceb8:	71fb      	strb	r3, [r7, #7]
 800ceba:	460b      	mov	r3, r1
 800cebc:	80bb      	strh	r3, [r7, #4]
 800cebe:	4613      	mov	r3, r2
 800cec0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800cec2:	79fb      	ldrb	r3, [r7, #7]
 800cec4:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800cec6:	887b      	ldrh	r3, [r7, #2]
 800cec8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800cecc:	d07f      	beq.n	800cfce <pbuf_alloc+0x11e>
 800cece:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800ced2:	f300 80c8 	bgt.w	800d066 <pbuf_alloc+0x1b6>
 800ced6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800ceda:	d010      	beq.n	800cefe <pbuf_alloc+0x4e>
 800cedc:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800cee0:	f300 80c1 	bgt.w	800d066 <pbuf_alloc+0x1b6>
 800cee4:	2b01      	cmp	r3, #1
 800cee6:	d002      	beq.n	800ceee <pbuf_alloc+0x3e>
 800cee8:	2b41      	cmp	r3, #65	; 0x41
 800ceea:	f040 80bc 	bne.w	800d066 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800ceee:	887a      	ldrh	r2, [r7, #2]
 800cef0:	88bb      	ldrh	r3, [r7, #4]
 800cef2:	4619      	mov	r1, r3
 800cef4:	2000      	movs	r0, #0
 800cef6:	f000 f8d1 	bl	800d09c <pbuf_alloc_reference>
 800cefa:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800cefc:	e0bd      	b.n	800d07a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800cefe:	2300      	movs	r3, #0
 800cf00:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800cf02:	2300      	movs	r3, #0
 800cf04:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800cf06:	88bb      	ldrh	r3, [r7, #4]
 800cf08:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800cf0a:	200c      	movs	r0, #12
 800cf0c:	f7ff fc36 	bl	800c77c <memp_malloc>
 800cf10:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800cf12:	693b      	ldr	r3, [r7, #16]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d109      	bne.n	800cf2c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800cf18:	f7ff ff76 	bl	800ce08 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800cf1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d002      	beq.n	800cf28 <pbuf_alloc+0x78>
            pbuf_free(p);
 800cf22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cf24:	f000 faa8 	bl	800d478 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800cf28:	2300      	movs	r3, #0
 800cf2a:	e0a7      	b.n	800d07c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800cf2c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cf2e:	3303      	adds	r3, #3
 800cf30:	b29b      	uxth	r3, r3
 800cf32:	f023 0303 	bic.w	r3, r3, #3
 800cf36:	b29b      	uxth	r3, r3
 800cf38:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800cf3c:	b29b      	uxth	r3, r3
 800cf3e:	8b7a      	ldrh	r2, [r7, #26]
 800cf40:	4293      	cmp	r3, r2
 800cf42:	bf28      	it	cs
 800cf44:	4613      	movcs	r3, r2
 800cf46:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800cf48:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cf4a:	3310      	adds	r3, #16
 800cf4c:	693a      	ldr	r2, [r7, #16]
 800cf4e:	4413      	add	r3, r2
 800cf50:	3303      	adds	r3, #3
 800cf52:	f023 0303 	bic.w	r3, r3, #3
 800cf56:	4618      	mov	r0, r3
 800cf58:	89f9      	ldrh	r1, [r7, #14]
 800cf5a:	8b7a      	ldrh	r2, [r7, #26]
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	9301      	str	r3, [sp, #4]
 800cf60:	887b      	ldrh	r3, [r7, #2]
 800cf62:	9300      	str	r3, [sp, #0]
 800cf64:	460b      	mov	r3, r1
 800cf66:	4601      	mov	r1, r0
 800cf68:	6938      	ldr	r0, [r7, #16]
 800cf6a:	f7ff ff77 	bl	800ce5c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800cf6e:	693b      	ldr	r3, [r7, #16]
 800cf70:	685b      	ldr	r3, [r3, #4]
 800cf72:	f003 0303 	and.w	r3, r3, #3
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d006      	beq.n	800cf88 <pbuf_alloc+0xd8>
 800cf7a:	4b42      	ldr	r3, [pc, #264]	; (800d084 <pbuf_alloc+0x1d4>)
 800cf7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cf80:	4941      	ldr	r1, [pc, #260]	; (800d088 <pbuf_alloc+0x1d8>)
 800cf82:	4842      	ldr	r0, [pc, #264]	; (800d08c <pbuf_alloc+0x1dc>)
 800cf84:	f009 fabe 	bl	8016504 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800cf88:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cf8a:	3303      	adds	r3, #3
 800cf8c:	f023 0303 	bic.w	r3, r3, #3
 800cf90:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800cf94:	d106      	bne.n	800cfa4 <pbuf_alloc+0xf4>
 800cf96:	4b3b      	ldr	r3, [pc, #236]	; (800d084 <pbuf_alloc+0x1d4>)
 800cf98:	f44f 7281 	mov.w	r2, #258	; 0x102
 800cf9c:	493c      	ldr	r1, [pc, #240]	; (800d090 <pbuf_alloc+0x1e0>)
 800cf9e:	483b      	ldr	r0, [pc, #236]	; (800d08c <pbuf_alloc+0x1dc>)
 800cfa0:	f009 fab0 	bl	8016504 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800cfa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d102      	bne.n	800cfb0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800cfaa:	693b      	ldr	r3, [r7, #16]
 800cfac:	627b      	str	r3, [r7, #36]	; 0x24
 800cfae:	e002      	b.n	800cfb6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800cfb0:	69fb      	ldr	r3, [r7, #28]
 800cfb2:	693a      	ldr	r2, [r7, #16]
 800cfb4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800cfb6:	693b      	ldr	r3, [r7, #16]
 800cfb8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800cfba:	8b7a      	ldrh	r2, [r7, #26]
 800cfbc:	89fb      	ldrh	r3, [r7, #14]
 800cfbe:	1ad3      	subs	r3, r2, r3
 800cfc0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800cfc6:	8b7b      	ldrh	r3, [r7, #26]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d19e      	bne.n	800cf0a <pbuf_alloc+0x5a>
      break;
 800cfcc:	e055      	b.n	800d07a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800cfce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cfd0:	3303      	adds	r3, #3
 800cfd2:	b29b      	uxth	r3, r3
 800cfd4:	f023 0303 	bic.w	r3, r3, #3
 800cfd8:	b29a      	uxth	r2, r3
 800cfda:	88bb      	ldrh	r3, [r7, #4]
 800cfdc:	3303      	adds	r3, #3
 800cfde:	b29b      	uxth	r3, r3
 800cfe0:	f023 0303 	bic.w	r3, r3, #3
 800cfe4:	b29b      	uxth	r3, r3
 800cfe6:	4413      	add	r3, r2
 800cfe8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800cfea:	8b3b      	ldrh	r3, [r7, #24]
 800cfec:	3310      	adds	r3, #16
 800cfee:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800cff0:	8b3a      	ldrh	r2, [r7, #24]
 800cff2:	88bb      	ldrh	r3, [r7, #4]
 800cff4:	3303      	adds	r3, #3
 800cff6:	f023 0303 	bic.w	r3, r3, #3
 800cffa:	429a      	cmp	r2, r3
 800cffc:	d306      	bcc.n	800d00c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800cffe:	8afa      	ldrh	r2, [r7, #22]
 800d000:	88bb      	ldrh	r3, [r7, #4]
 800d002:	3303      	adds	r3, #3
 800d004:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d008:	429a      	cmp	r2, r3
 800d00a:	d201      	bcs.n	800d010 <pbuf_alloc+0x160>
        return NULL;
 800d00c:	2300      	movs	r3, #0
 800d00e:	e035      	b.n	800d07c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800d010:	8afb      	ldrh	r3, [r7, #22]
 800d012:	4618      	mov	r0, r3
 800d014:	f7ff fa30 	bl	800c478 <mem_malloc>
 800d018:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800d01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d101      	bne.n	800d024 <pbuf_alloc+0x174>
        return NULL;
 800d020:	2300      	movs	r3, #0
 800d022:	e02b      	b.n	800d07c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800d024:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d026:	3310      	adds	r3, #16
 800d028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d02a:	4413      	add	r3, r2
 800d02c:	3303      	adds	r3, #3
 800d02e:	f023 0303 	bic.w	r3, r3, #3
 800d032:	4618      	mov	r0, r3
 800d034:	88b9      	ldrh	r1, [r7, #4]
 800d036:	88ba      	ldrh	r2, [r7, #4]
 800d038:	2300      	movs	r3, #0
 800d03a:	9301      	str	r3, [sp, #4]
 800d03c:	887b      	ldrh	r3, [r7, #2]
 800d03e:	9300      	str	r3, [sp, #0]
 800d040:	460b      	mov	r3, r1
 800d042:	4601      	mov	r1, r0
 800d044:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d046:	f7ff ff09 	bl	800ce5c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800d04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d04c:	685b      	ldr	r3, [r3, #4]
 800d04e:	f003 0303 	and.w	r3, r3, #3
 800d052:	2b00      	cmp	r3, #0
 800d054:	d010      	beq.n	800d078 <pbuf_alloc+0x1c8>
 800d056:	4b0b      	ldr	r3, [pc, #44]	; (800d084 <pbuf_alloc+0x1d4>)
 800d058:	f44f 7291 	mov.w	r2, #290	; 0x122
 800d05c:	490d      	ldr	r1, [pc, #52]	; (800d094 <pbuf_alloc+0x1e4>)
 800d05e:	480b      	ldr	r0, [pc, #44]	; (800d08c <pbuf_alloc+0x1dc>)
 800d060:	f009 fa50 	bl	8016504 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800d064:	e008      	b.n	800d078 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800d066:	4b07      	ldr	r3, [pc, #28]	; (800d084 <pbuf_alloc+0x1d4>)
 800d068:	f240 1227 	movw	r2, #295	; 0x127
 800d06c:	490a      	ldr	r1, [pc, #40]	; (800d098 <pbuf_alloc+0x1e8>)
 800d06e:	4807      	ldr	r0, [pc, #28]	; (800d08c <pbuf_alloc+0x1dc>)
 800d070:	f009 fa48 	bl	8016504 <iprintf>
      return NULL;
 800d074:	2300      	movs	r3, #0
 800d076:	e001      	b.n	800d07c <pbuf_alloc+0x1cc>
      break;
 800d078:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800d07a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d07c:	4618      	mov	r0, r3
 800d07e:	3728      	adds	r7, #40	; 0x28
 800d080:	46bd      	mov	sp, r7
 800d082:	bd80      	pop	{r7, pc}
 800d084:	08017c6c 	.word	0x08017c6c
 800d088:	08017c9c 	.word	0x08017c9c
 800d08c:	08017ccc 	.word	0x08017ccc
 800d090:	08017cf4 	.word	0x08017cf4
 800d094:	08017d28 	.word	0x08017d28
 800d098:	08017d54 	.word	0x08017d54

0800d09c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b086      	sub	sp, #24
 800d0a0:	af02      	add	r7, sp, #8
 800d0a2:	6078      	str	r0, [r7, #4]
 800d0a4:	460b      	mov	r3, r1
 800d0a6:	807b      	strh	r3, [r7, #2]
 800d0a8:	4613      	mov	r3, r2
 800d0aa:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800d0ac:	883b      	ldrh	r3, [r7, #0]
 800d0ae:	2b41      	cmp	r3, #65	; 0x41
 800d0b0:	d009      	beq.n	800d0c6 <pbuf_alloc_reference+0x2a>
 800d0b2:	883b      	ldrh	r3, [r7, #0]
 800d0b4:	2b01      	cmp	r3, #1
 800d0b6:	d006      	beq.n	800d0c6 <pbuf_alloc_reference+0x2a>
 800d0b8:	4b0f      	ldr	r3, [pc, #60]	; (800d0f8 <pbuf_alloc_reference+0x5c>)
 800d0ba:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800d0be:	490f      	ldr	r1, [pc, #60]	; (800d0fc <pbuf_alloc_reference+0x60>)
 800d0c0:	480f      	ldr	r0, [pc, #60]	; (800d100 <pbuf_alloc_reference+0x64>)
 800d0c2:	f009 fa1f 	bl	8016504 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800d0c6:	200b      	movs	r0, #11
 800d0c8:	f7ff fb58 	bl	800c77c <memp_malloc>
 800d0cc:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d101      	bne.n	800d0d8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	e00b      	b.n	800d0f0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800d0d8:	8879      	ldrh	r1, [r7, #2]
 800d0da:	887a      	ldrh	r2, [r7, #2]
 800d0dc:	2300      	movs	r3, #0
 800d0de:	9301      	str	r3, [sp, #4]
 800d0e0:	883b      	ldrh	r3, [r7, #0]
 800d0e2:	9300      	str	r3, [sp, #0]
 800d0e4:	460b      	mov	r3, r1
 800d0e6:	6879      	ldr	r1, [r7, #4]
 800d0e8:	68f8      	ldr	r0, [r7, #12]
 800d0ea:	f7ff feb7 	bl	800ce5c <pbuf_init_alloced_pbuf>
  return p;
 800d0ee:	68fb      	ldr	r3, [r7, #12]
}
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	3710      	adds	r7, #16
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	bd80      	pop	{r7, pc}
 800d0f8:	08017c6c 	.word	0x08017c6c
 800d0fc:	08017d70 	.word	0x08017d70
 800d100:	08017ccc 	.word	0x08017ccc

0800d104 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800d104:	b580      	push	{r7, lr}
 800d106:	b088      	sub	sp, #32
 800d108:	af02      	add	r7, sp, #8
 800d10a:	607b      	str	r3, [r7, #4]
 800d10c:	4603      	mov	r3, r0
 800d10e:	73fb      	strb	r3, [r7, #15]
 800d110:	460b      	mov	r3, r1
 800d112:	81bb      	strh	r3, [r7, #12]
 800d114:	4613      	mov	r3, r2
 800d116:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800d118:	7bfb      	ldrb	r3, [r7, #15]
 800d11a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800d11c:	8a7b      	ldrh	r3, [r7, #18]
 800d11e:	3303      	adds	r3, #3
 800d120:	f023 0203 	bic.w	r2, r3, #3
 800d124:	89bb      	ldrh	r3, [r7, #12]
 800d126:	441a      	add	r2, r3
 800d128:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d12a:	429a      	cmp	r2, r3
 800d12c:	d901      	bls.n	800d132 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800d12e:	2300      	movs	r3, #0
 800d130:	e018      	b.n	800d164 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800d132:	6a3b      	ldr	r3, [r7, #32]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d007      	beq.n	800d148 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800d138:	8a7b      	ldrh	r3, [r7, #18]
 800d13a:	3303      	adds	r3, #3
 800d13c:	f023 0303 	bic.w	r3, r3, #3
 800d140:	6a3a      	ldr	r2, [r7, #32]
 800d142:	4413      	add	r3, r2
 800d144:	617b      	str	r3, [r7, #20]
 800d146:	e001      	b.n	800d14c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800d148:	2300      	movs	r3, #0
 800d14a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800d14c:	6878      	ldr	r0, [r7, #4]
 800d14e:	89b9      	ldrh	r1, [r7, #12]
 800d150:	89ba      	ldrh	r2, [r7, #12]
 800d152:	2302      	movs	r3, #2
 800d154:	9301      	str	r3, [sp, #4]
 800d156:	897b      	ldrh	r3, [r7, #10]
 800d158:	9300      	str	r3, [sp, #0]
 800d15a:	460b      	mov	r3, r1
 800d15c:	6979      	ldr	r1, [r7, #20]
 800d15e:	f7ff fe7d 	bl	800ce5c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800d162:	687b      	ldr	r3, [r7, #4]
}
 800d164:	4618      	mov	r0, r3
 800d166:	3718      	adds	r7, #24
 800d168:	46bd      	mov	sp, r7
 800d16a:	bd80      	pop	{r7, pc}

0800d16c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b084      	sub	sp, #16
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
 800d174:	460b      	mov	r3, r1
 800d176:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d106      	bne.n	800d18c <pbuf_realloc+0x20>
 800d17e:	4b3a      	ldr	r3, [pc, #232]	; (800d268 <pbuf_realloc+0xfc>)
 800d180:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800d184:	4939      	ldr	r1, [pc, #228]	; (800d26c <pbuf_realloc+0x100>)
 800d186:	483a      	ldr	r0, [pc, #232]	; (800d270 <pbuf_realloc+0x104>)
 800d188:	f009 f9bc 	bl	8016504 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	891b      	ldrh	r3, [r3, #8]
 800d190:	887a      	ldrh	r2, [r7, #2]
 800d192:	429a      	cmp	r2, r3
 800d194:	d263      	bcs.n	800d25e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	891a      	ldrh	r2, [r3, #8]
 800d19a:	887b      	ldrh	r3, [r7, #2]
 800d19c:	1ad3      	subs	r3, r2, r3
 800d19e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800d1a0:	887b      	ldrh	r3, [r7, #2]
 800d1a2:	817b      	strh	r3, [r7, #10]
  q = p;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800d1a8:	e018      	b.n	800d1dc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	895b      	ldrh	r3, [r3, #10]
 800d1ae:	897a      	ldrh	r2, [r7, #10]
 800d1b0:	1ad3      	subs	r3, r2, r3
 800d1b2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	891a      	ldrh	r2, [r3, #8]
 800d1b8:	893b      	ldrh	r3, [r7, #8]
 800d1ba:	1ad3      	subs	r3, r2, r3
 800d1bc:	b29a      	uxth	r2, r3
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d106      	bne.n	800d1dc <pbuf_realloc+0x70>
 800d1ce:	4b26      	ldr	r3, [pc, #152]	; (800d268 <pbuf_realloc+0xfc>)
 800d1d0:	f240 12af 	movw	r2, #431	; 0x1af
 800d1d4:	4927      	ldr	r1, [pc, #156]	; (800d274 <pbuf_realloc+0x108>)
 800d1d6:	4826      	ldr	r0, [pc, #152]	; (800d270 <pbuf_realloc+0x104>)
 800d1d8:	f009 f994 	bl	8016504 <iprintf>
  while (rem_len > q->len) {
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	895b      	ldrh	r3, [r3, #10]
 800d1e0:	897a      	ldrh	r2, [r7, #10]
 800d1e2:	429a      	cmp	r2, r3
 800d1e4:	d8e1      	bhi.n	800d1aa <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	7b1b      	ldrb	r3, [r3, #12]
 800d1ea:	f003 030f 	and.w	r3, r3, #15
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d121      	bne.n	800d236 <pbuf_realloc+0xca>
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	895b      	ldrh	r3, [r3, #10]
 800d1f6:	897a      	ldrh	r2, [r7, #10]
 800d1f8:	429a      	cmp	r2, r3
 800d1fa:	d01c      	beq.n	800d236 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	7b5b      	ldrb	r3, [r3, #13]
 800d200:	f003 0302 	and.w	r3, r3, #2
 800d204:	2b00      	cmp	r3, #0
 800d206:	d116      	bne.n	800d236 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	685a      	ldr	r2, [r3, #4]
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	1ad3      	subs	r3, r2, r3
 800d210:	b29a      	uxth	r2, r3
 800d212:	897b      	ldrh	r3, [r7, #10]
 800d214:	4413      	add	r3, r2
 800d216:	b29b      	uxth	r3, r3
 800d218:	4619      	mov	r1, r3
 800d21a:	68f8      	ldr	r0, [r7, #12]
 800d21c:	f7ff f822 	bl	800c264 <mem_trim>
 800d220:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d106      	bne.n	800d236 <pbuf_realloc+0xca>
 800d228:	4b0f      	ldr	r3, [pc, #60]	; (800d268 <pbuf_realloc+0xfc>)
 800d22a:	f240 12bd 	movw	r2, #445	; 0x1bd
 800d22e:	4912      	ldr	r1, [pc, #72]	; (800d278 <pbuf_realloc+0x10c>)
 800d230:	480f      	ldr	r0, [pc, #60]	; (800d270 <pbuf_realloc+0x104>)
 800d232:	f009 f967 	bl	8016504 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	897a      	ldrh	r2, [r7, #10]
 800d23a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	895a      	ldrh	r2, [r3, #10]
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d004      	beq.n	800d256 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	4618      	mov	r0, r3
 800d252:	f000 f911 	bl	800d478 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	2200      	movs	r2, #0
 800d25a:	601a      	str	r2, [r3, #0]
 800d25c:	e000      	b.n	800d260 <pbuf_realloc+0xf4>
    return;
 800d25e:	bf00      	nop

}
 800d260:	3710      	adds	r7, #16
 800d262:	46bd      	mov	sp, r7
 800d264:	bd80      	pop	{r7, pc}
 800d266:	bf00      	nop
 800d268:	08017c6c 	.word	0x08017c6c
 800d26c:	08017d84 	.word	0x08017d84
 800d270:	08017ccc 	.word	0x08017ccc
 800d274:	08017d9c 	.word	0x08017d9c
 800d278:	08017db4 	.word	0x08017db4

0800d27c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b086      	sub	sp, #24
 800d280:	af00      	add	r7, sp, #0
 800d282:	60f8      	str	r0, [r7, #12]
 800d284:	60b9      	str	r1, [r7, #8]
 800d286:	4613      	mov	r3, r2
 800d288:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d106      	bne.n	800d29e <pbuf_add_header_impl+0x22>
 800d290:	4b2b      	ldr	r3, [pc, #172]	; (800d340 <pbuf_add_header_impl+0xc4>)
 800d292:	f240 12df 	movw	r2, #479	; 0x1df
 800d296:	492b      	ldr	r1, [pc, #172]	; (800d344 <pbuf_add_header_impl+0xc8>)
 800d298:	482b      	ldr	r0, [pc, #172]	; (800d348 <pbuf_add_header_impl+0xcc>)
 800d29a:	f009 f933 	bl	8016504 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d003      	beq.n	800d2ac <pbuf_add_header_impl+0x30>
 800d2a4:	68bb      	ldr	r3, [r7, #8]
 800d2a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d2aa:	d301      	bcc.n	800d2b0 <pbuf_add_header_impl+0x34>
    return 1;
 800d2ac:	2301      	movs	r3, #1
 800d2ae:	e043      	b.n	800d338 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800d2b0:	68bb      	ldr	r3, [r7, #8]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d101      	bne.n	800d2ba <pbuf_add_header_impl+0x3e>
    return 0;
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	e03e      	b.n	800d338 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800d2ba:	68bb      	ldr	r3, [r7, #8]
 800d2bc:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	891a      	ldrh	r2, [r3, #8]
 800d2c2:	8a7b      	ldrh	r3, [r7, #18]
 800d2c4:	4413      	add	r3, r2
 800d2c6:	b29b      	uxth	r3, r3
 800d2c8:	8a7a      	ldrh	r2, [r7, #18]
 800d2ca:	429a      	cmp	r2, r3
 800d2cc:	d901      	bls.n	800d2d2 <pbuf_add_header_impl+0x56>
    return 1;
 800d2ce:	2301      	movs	r3, #1
 800d2d0:	e032      	b.n	800d338 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	7b1b      	ldrb	r3, [r3, #12]
 800d2d6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800d2d8:	8a3b      	ldrh	r3, [r7, #16]
 800d2da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d00c      	beq.n	800d2fc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	685a      	ldr	r2, [r3, #4]
 800d2e6:	68bb      	ldr	r3, [r7, #8]
 800d2e8:	425b      	negs	r3, r3
 800d2ea:	4413      	add	r3, r2
 800d2ec:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	3310      	adds	r3, #16
 800d2f2:	697a      	ldr	r2, [r7, #20]
 800d2f4:	429a      	cmp	r2, r3
 800d2f6:	d20d      	bcs.n	800d314 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800d2f8:	2301      	movs	r3, #1
 800d2fa:	e01d      	b.n	800d338 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800d2fc:	79fb      	ldrb	r3, [r7, #7]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d006      	beq.n	800d310 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	685a      	ldr	r2, [r3, #4]
 800d306:	68bb      	ldr	r3, [r7, #8]
 800d308:	425b      	negs	r3, r3
 800d30a:	4413      	add	r3, r2
 800d30c:	617b      	str	r3, [r7, #20]
 800d30e:	e001      	b.n	800d314 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800d310:	2301      	movs	r3, #1
 800d312:	e011      	b.n	800d338 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	697a      	ldr	r2, [r7, #20]
 800d318:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	895a      	ldrh	r2, [r3, #10]
 800d31e:	8a7b      	ldrh	r3, [r7, #18]
 800d320:	4413      	add	r3, r2
 800d322:	b29a      	uxth	r2, r3
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	891a      	ldrh	r2, [r3, #8]
 800d32c:	8a7b      	ldrh	r3, [r7, #18]
 800d32e:	4413      	add	r3, r2
 800d330:	b29a      	uxth	r2, r3
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	811a      	strh	r2, [r3, #8]


  return 0;
 800d336:	2300      	movs	r3, #0
}
 800d338:	4618      	mov	r0, r3
 800d33a:	3718      	adds	r7, #24
 800d33c:	46bd      	mov	sp, r7
 800d33e:	bd80      	pop	{r7, pc}
 800d340:	08017c6c 	.word	0x08017c6c
 800d344:	08017dd0 	.word	0x08017dd0
 800d348:	08017ccc 	.word	0x08017ccc

0800d34c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b082      	sub	sp, #8
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
 800d354:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800d356:	2200      	movs	r2, #0
 800d358:	6839      	ldr	r1, [r7, #0]
 800d35a:	6878      	ldr	r0, [r7, #4]
 800d35c:	f7ff ff8e 	bl	800d27c <pbuf_add_header_impl>
 800d360:	4603      	mov	r3, r0
}
 800d362:	4618      	mov	r0, r3
 800d364:	3708      	adds	r7, #8
 800d366:	46bd      	mov	sp, r7
 800d368:	bd80      	pop	{r7, pc}
	...

0800d36c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b084      	sub	sp, #16
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]
 800d374:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d106      	bne.n	800d38a <pbuf_remove_header+0x1e>
 800d37c:	4b20      	ldr	r3, [pc, #128]	; (800d400 <pbuf_remove_header+0x94>)
 800d37e:	f240 224b 	movw	r2, #587	; 0x24b
 800d382:	4920      	ldr	r1, [pc, #128]	; (800d404 <pbuf_remove_header+0x98>)
 800d384:	4820      	ldr	r0, [pc, #128]	; (800d408 <pbuf_remove_header+0x9c>)
 800d386:	f009 f8bd 	bl	8016504 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d003      	beq.n	800d398 <pbuf_remove_header+0x2c>
 800d390:	683b      	ldr	r3, [r7, #0]
 800d392:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d396:	d301      	bcc.n	800d39c <pbuf_remove_header+0x30>
    return 1;
 800d398:	2301      	movs	r3, #1
 800d39a:	e02c      	b.n	800d3f6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800d39c:	683b      	ldr	r3, [r7, #0]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d101      	bne.n	800d3a6 <pbuf_remove_header+0x3a>
    return 0;
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	e027      	b.n	800d3f6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800d3a6:	683b      	ldr	r3, [r7, #0]
 800d3a8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	895b      	ldrh	r3, [r3, #10]
 800d3ae:	89fa      	ldrh	r2, [r7, #14]
 800d3b0:	429a      	cmp	r2, r3
 800d3b2:	d908      	bls.n	800d3c6 <pbuf_remove_header+0x5a>
 800d3b4:	4b12      	ldr	r3, [pc, #72]	; (800d400 <pbuf_remove_header+0x94>)
 800d3b6:	f240 2255 	movw	r2, #597	; 0x255
 800d3ba:	4914      	ldr	r1, [pc, #80]	; (800d40c <pbuf_remove_header+0xa0>)
 800d3bc:	4812      	ldr	r0, [pc, #72]	; (800d408 <pbuf_remove_header+0x9c>)
 800d3be:	f009 f8a1 	bl	8016504 <iprintf>
 800d3c2:	2301      	movs	r3, #1
 800d3c4:	e017      	b.n	800d3f6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	685b      	ldr	r3, [r3, #4]
 800d3ca:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	685a      	ldr	r2, [r3, #4]
 800d3d0:	683b      	ldr	r3, [r7, #0]
 800d3d2:	441a      	add	r2, r3
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	895a      	ldrh	r2, [r3, #10]
 800d3dc:	89fb      	ldrh	r3, [r7, #14]
 800d3de:	1ad3      	subs	r3, r2, r3
 800d3e0:	b29a      	uxth	r2, r3
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	891a      	ldrh	r2, [r3, #8]
 800d3ea:	89fb      	ldrh	r3, [r7, #14]
 800d3ec:	1ad3      	subs	r3, r2, r3
 800d3ee:	b29a      	uxth	r2, r3
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800d3f4:	2300      	movs	r3, #0
}
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	3710      	adds	r7, #16
 800d3fa:	46bd      	mov	sp, r7
 800d3fc:	bd80      	pop	{r7, pc}
 800d3fe:	bf00      	nop
 800d400:	08017c6c 	.word	0x08017c6c
 800d404:	08017dd0 	.word	0x08017dd0
 800d408:	08017ccc 	.word	0x08017ccc
 800d40c:	08017ddc 	.word	0x08017ddc

0800d410 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800d410:	b580      	push	{r7, lr}
 800d412:	b082      	sub	sp, #8
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]
 800d418:	460b      	mov	r3, r1
 800d41a:	807b      	strh	r3, [r7, #2]
 800d41c:	4613      	mov	r3, r2
 800d41e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800d420:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d424:	2b00      	cmp	r3, #0
 800d426:	da08      	bge.n	800d43a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800d428:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d42c:	425b      	negs	r3, r3
 800d42e:	4619      	mov	r1, r3
 800d430:	6878      	ldr	r0, [r7, #4]
 800d432:	f7ff ff9b 	bl	800d36c <pbuf_remove_header>
 800d436:	4603      	mov	r3, r0
 800d438:	e007      	b.n	800d44a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800d43a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d43e:	787a      	ldrb	r2, [r7, #1]
 800d440:	4619      	mov	r1, r3
 800d442:	6878      	ldr	r0, [r7, #4]
 800d444:	f7ff ff1a 	bl	800d27c <pbuf_add_header_impl>
 800d448:	4603      	mov	r3, r0
  }
}
 800d44a:	4618      	mov	r0, r3
 800d44c:	3708      	adds	r7, #8
 800d44e:	46bd      	mov	sp, r7
 800d450:	bd80      	pop	{r7, pc}

0800d452 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800d452:	b580      	push	{r7, lr}
 800d454:	b082      	sub	sp, #8
 800d456:	af00      	add	r7, sp, #0
 800d458:	6078      	str	r0, [r7, #4]
 800d45a:	460b      	mov	r3, r1
 800d45c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800d45e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d462:	2201      	movs	r2, #1
 800d464:	4619      	mov	r1, r3
 800d466:	6878      	ldr	r0, [r7, #4]
 800d468:	f7ff ffd2 	bl	800d410 <pbuf_header_impl>
 800d46c:	4603      	mov	r3, r0
}
 800d46e:	4618      	mov	r0, r3
 800d470:	3708      	adds	r7, #8
 800d472:	46bd      	mov	sp, r7
 800d474:	bd80      	pop	{r7, pc}
	...

0800d478 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b088      	sub	sp, #32
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	2b00      	cmp	r3, #0
 800d484:	d10b      	bne.n	800d49e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d106      	bne.n	800d49a <pbuf_free+0x22>
 800d48c:	4b3b      	ldr	r3, [pc, #236]	; (800d57c <pbuf_free+0x104>)
 800d48e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800d492:	493b      	ldr	r1, [pc, #236]	; (800d580 <pbuf_free+0x108>)
 800d494:	483b      	ldr	r0, [pc, #236]	; (800d584 <pbuf_free+0x10c>)
 800d496:	f009 f835 	bl	8016504 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800d49a:	2300      	movs	r3, #0
 800d49c:	e069      	b.n	800d572 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800d49e:	2300      	movs	r3, #0
 800d4a0:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800d4a2:	e062      	b.n	800d56a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800d4a4:	f008 fac6 	bl	8015a34 <sys_arch_protect>
 800d4a8:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	7b9b      	ldrb	r3, [r3, #14]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d106      	bne.n	800d4c0 <pbuf_free+0x48>
 800d4b2:	4b32      	ldr	r3, [pc, #200]	; (800d57c <pbuf_free+0x104>)
 800d4b4:	f240 22f1 	movw	r2, #753	; 0x2f1
 800d4b8:	4933      	ldr	r1, [pc, #204]	; (800d588 <pbuf_free+0x110>)
 800d4ba:	4832      	ldr	r0, [pc, #200]	; (800d584 <pbuf_free+0x10c>)
 800d4bc:	f009 f822 	bl	8016504 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	7b9b      	ldrb	r3, [r3, #14]
 800d4c4:	3b01      	subs	r3, #1
 800d4c6:	b2da      	uxtb	r2, r3
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	739a      	strb	r2, [r3, #14]
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	7b9b      	ldrb	r3, [r3, #14]
 800d4d0:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800d4d2:	69b8      	ldr	r0, [r7, #24]
 800d4d4:	f008 fabc 	bl	8015a50 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800d4d8:	7dfb      	ldrb	r3, [r7, #23]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d143      	bne.n	800d566 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	7b1b      	ldrb	r3, [r3, #12]
 800d4e8:	f003 030f 	and.w	r3, r3, #15
 800d4ec:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	7b5b      	ldrb	r3, [r3, #13]
 800d4f2:	f003 0302 	and.w	r3, r3, #2
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d011      	beq.n	800d51e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800d4fe:	68bb      	ldr	r3, [r7, #8]
 800d500:	691b      	ldr	r3, [r3, #16]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d106      	bne.n	800d514 <pbuf_free+0x9c>
 800d506:	4b1d      	ldr	r3, [pc, #116]	; (800d57c <pbuf_free+0x104>)
 800d508:	f240 22ff 	movw	r2, #767	; 0x2ff
 800d50c:	491f      	ldr	r1, [pc, #124]	; (800d58c <pbuf_free+0x114>)
 800d50e:	481d      	ldr	r0, [pc, #116]	; (800d584 <pbuf_free+0x10c>)
 800d510:	f008 fff8 	bl	8016504 <iprintf>
        pc->custom_free_function(p);
 800d514:	68bb      	ldr	r3, [r7, #8]
 800d516:	691b      	ldr	r3, [r3, #16]
 800d518:	6878      	ldr	r0, [r7, #4]
 800d51a:	4798      	blx	r3
 800d51c:	e01d      	b.n	800d55a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800d51e:	7bfb      	ldrb	r3, [r7, #15]
 800d520:	2b02      	cmp	r3, #2
 800d522:	d104      	bne.n	800d52e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800d524:	6879      	ldr	r1, [r7, #4]
 800d526:	200c      	movs	r0, #12
 800d528:	f7ff f97a 	bl	800c820 <memp_free>
 800d52c:	e015      	b.n	800d55a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800d52e:	7bfb      	ldrb	r3, [r7, #15]
 800d530:	2b01      	cmp	r3, #1
 800d532:	d104      	bne.n	800d53e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800d534:	6879      	ldr	r1, [r7, #4]
 800d536:	200b      	movs	r0, #11
 800d538:	f7ff f972 	bl	800c820 <memp_free>
 800d53c:	e00d      	b.n	800d55a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800d53e:	7bfb      	ldrb	r3, [r7, #15]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d103      	bne.n	800d54c <pbuf_free+0xd4>
          mem_free(p);
 800d544:	6878      	ldr	r0, [r7, #4]
 800d546:	f7fe fdfd 	bl	800c144 <mem_free>
 800d54a:	e006      	b.n	800d55a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800d54c:	4b0b      	ldr	r3, [pc, #44]	; (800d57c <pbuf_free+0x104>)
 800d54e:	f240 320f 	movw	r2, #783	; 0x30f
 800d552:	490f      	ldr	r1, [pc, #60]	; (800d590 <pbuf_free+0x118>)
 800d554:	480b      	ldr	r0, [pc, #44]	; (800d584 <pbuf_free+0x10c>)
 800d556:	f008 ffd5 	bl	8016504 <iprintf>
        }
      }
      count++;
 800d55a:	7ffb      	ldrb	r3, [r7, #31]
 800d55c:	3301      	adds	r3, #1
 800d55e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800d560:	693b      	ldr	r3, [r7, #16]
 800d562:	607b      	str	r3, [r7, #4]
 800d564:	e001      	b.n	800d56a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800d566:	2300      	movs	r3, #0
 800d568:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d199      	bne.n	800d4a4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800d570:	7ffb      	ldrb	r3, [r7, #31]
}
 800d572:	4618      	mov	r0, r3
 800d574:	3720      	adds	r7, #32
 800d576:	46bd      	mov	sp, r7
 800d578:	bd80      	pop	{r7, pc}
 800d57a:	bf00      	nop
 800d57c:	08017c6c 	.word	0x08017c6c
 800d580:	08017dd0 	.word	0x08017dd0
 800d584:	08017ccc 	.word	0x08017ccc
 800d588:	08017dfc 	.word	0x08017dfc
 800d58c:	08017e14 	.word	0x08017e14
 800d590:	08017e38 	.word	0x08017e38

0800d594 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800d594:	b480      	push	{r7}
 800d596:	b085      	sub	sp, #20
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800d59c:	2300      	movs	r3, #0
 800d59e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800d5a0:	e005      	b.n	800d5ae <pbuf_clen+0x1a>
    ++len;
 800d5a2:	89fb      	ldrh	r3, [r7, #14]
 800d5a4:	3301      	adds	r3, #1
 800d5a6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d1f6      	bne.n	800d5a2 <pbuf_clen+0xe>
  }
  return len;
 800d5b4:	89fb      	ldrh	r3, [r7, #14]
}
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	3714      	adds	r7, #20
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c0:	4770      	bx	lr
	...

0800d5c4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b084      	sub	sp, #16
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d016      	beq.n	800d600 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800d5d2:	f008 fa2f 	bl	8015a34 <sys_arch_protect>
 800d5d6:	60f8      	str	r0, [r7, #12]
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	7b9b      	ldrb	r3, [r3, #14]
 800d5dc:	3301      	adds	r3, #1
 800d5de:	b2da      	uxtb	r2, r3
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	739a      	strb	r2, [r3, #14]
 800d5e4:	68f8      	ldr	r0, [r7, #12]
 800d5e6:	f008 fa33 	bl	8015a50 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	7b9b      	ldrb	r3, [r3, #14]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d106      	bne.n	800d600 <pbuf_ref+0x3c>
 800d5f2:	4b05      	ldr	r3, [pc, #20]	; (800d608 <pbuf_ref+0x44>)
 800d5f4:	f240 3242 	movw	r2, #834	; 0x342
 800d5f8:	4904      	ldr	r1, [pc, #16]	; (800d60c <pbuf_ref+0x48>)
 800d5fa:	4805      	ldr	r0, [pc, #20]	; (800d610 <pbuf_ref+0x4c>)
 800d5fc:	f008 ff82 	bl	8016504 <iprintf>
  }
}
 800d600:	bf00      	nop
 800d602:	3710      	adds	r7, #16
 800d604:	46bd      	mov	sp, r7
 800d606:	bd80      	pop	{r7, pc}
 800d608:	08017c6c 	.word	0x08017c6c
 800d60c:	08017e4c 	.word	0x08017e4c
 800d610:	08017ccc 	.word	0x08017ccc

0800d614 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800d614:	b580      	push	{r7, lr}
 800d616:	b084      	sub	sp, #16
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
 800d61c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d002      	beq.n	800d62a <pbuf_cat+0x16>
 800d624:	683b      	ldr	r3, [r7, #0]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d107      	bne.n	800d63a <pbuf_cat+0x26>
 800d62a:	4b20      	ldr	r3, [pc, #128]	; (800d6ac <pbuf_cat+0x98>)
 800d62c:	f240 3259 	movw	r2, #857	; 0x359
 800d630:	491f      	ldr	r1, [pc, #124]	; (800d6b0 <pbuf_cat+0x9c>)
 800d632:	4820      	ldr	r0, [pc, #128]	; (800d6b4 <pbuf_cat+0xa0>)
 800d634:	f008 ff66 	bl	8016504 <iprintf>
 800d638:	e034      	b.n	800d6a4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	60fb      	str	r3, [r7, #12]
 800d63e:	e00a      	b.n	800d656 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	891a      	ldrh	r2, [r3, #8]
 800d644:	683b      	ldr	r3, [r7, #0]
 800d646:	891b      	ldrh	r3, [r3, #8]
 800d648:	4413      	add	r3, r2
 800d64a:	b29a      	uxth	r2, r3
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	60fb      	str	r3, [r7, #12]
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d1f0      	bne.n	800d640 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	891a      	ldrh	r2, [r3, #8]
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	895b      	ldrh	r3, [r3, #10]
 800d666:	429a      	cmp	r2, r3
 800d668:	d006      	beq.n	800d678 <pbuf_cat+0x64>
 800d66a:	4b10      	ldr	r3, [pc, #64]	; (800d6ac <pbuf_cat+0x98>)
 800d66c:	f240 3262 	movw	r2, #866	; 0x362
 800d670:	4911      	ldr	r1, [pc, #68]	; (800d6b8 <pbuf_cat+0xa4>)
 800d672:	4810      	ldr	r0, [pc, #64]	; (800d6b4 <pbuf_cat+0xa0>)
 800d674:	f008 ff46 	bl	8016504 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d006      	beq.n	800d68e <pbuf_cat+0x7a>
 800d680:	4b0a      	ldr	r3, [pc, #40]	; (800d6ac <pbuf_cat+0x98>)
 800d682:	f240 3263 	movw	r2, #867	; 0x363
 800d686:	490d      	ldr	r1, [pc, #52]	; (800d6bc <pbuf_cat+0xa8>)
 800d688:	480a      	ldr	r0, [pc, #40]	; (800d6b4 <pbuf_cat+0xa0>)
 800d68a:	f008 ff3b 	bl	8016504 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	891a      	ldrh	r2, [r3, #8]
 800d692:	683b      	ldr	r3, [r7, #0]
 800d694:	891b      	ldrh	r3, [r3, #8]
 800d696:	4413      	add	r3, r2
 800d698:	b29a      	uxth	r2, r3
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	683a      	ldr	r2, [r7, #0]
 800d6a2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800d6a4:	3710      	adds	r7, #16
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	bd80      	pop	{r7, pc}
 800d6aa:	bf00      	nop
 800d6ac:	08017c6c 	.word	0x08017c6c
 800d6b0:	08017e60 	.word	0x08017e60
 800d6b4:	08017ccc 	.word	0x08017ccc
 800d6b8:	08017e98 	.word	0x08017e98
 800d6bc:	08017ec8 	.word	0x08017ec8

0800d6c0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800d6c0:	b580      	push	{r7, lr}
 800d6c2:	b086      	sub	sp, #24
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	6078      	str	r0, [r7, #4]
 800d6c8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	617b      	str	r3, [r7, #20]
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d008      	beq.n	800d6ea <pbuf_copy+0x2a>
 800d6d8:	683b      	ldr	r3, [r7, #0]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d005      	beq.n	800d6ea <pbuf_copy+0x2a>
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	891a      	ldrh	r2, [r3, #8]
 800d6e2:	683b      	ldr	r3, [r7, #0]
 800d6e4:	891b      	ldrh	r3, [r3, #8]
 800d6e6:	429a      	cmp	r2, r3
 800d6e8:	d209      	bcs.n	800d6fe <pbuf_copy+0x3e>
 800d6ea:	4b57      	ldr	r3, [pc, #348]	; (800d848 <pbuf_copy+0x188>)
 800d6ec:	f240 32c9 	movw	r2, #969	; 0x3c9
 800d6f0:	4956      	ldr	r1, [pc, #344]	; (800d84c <pbuf_copy+0x18c>)
 800d6f2:	4857      	ldr	r0, [pc, #348]	; (800d850 <pbuf_copy+0x190>)
 800d6f4:	f008 ff06 	bl	8016504 <iprintf>
 800d6f8:	f06f 030f 	mvn.w	r3, #15
 800d6fc:	e09f      	b.n	800d83e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	895b      	ldrh	r3, [r3, #10]
 800d702:	461a      	mov	r2, r3
 800d704:	697b      	ldr	r3, [r7, #20]
 800d706:	1ad2      	subs	r2, r2, r3
 800d708:	683b      	ldr	r3, [r7, #0]
 800d70a:	895b      	ldrh	r3, [r3, #10]
 800d70c:	4619      	mov	r1, r3
 800d70e:	693b      	ldr	r3, [r7, #16]
 800d710:	1acb      	subs	r3, r1, r3
 800d712:	429a      	cmp	r2, r3
 800d714:	d306      	bcc.n	800d724 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800d716:	683b      	ldr	r3, [r7, #0]
 800d718:	895b      	ldrh	r3, [r3, #10]
 800d71a:	461a      	mov	r2, r3
 800d71c:	693b      	ldr	r3, [r7, #16]
 800d71e:	1ad3      	subs	r3, r2, r3
 800d720:	60fb      	str	r3, [r7, #12]
 800d722:	e005      	b.n	800d730 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	895b      	ldrh	r3, [r3, #10]
 800d728:	461a      	mov	r2, r3
 800d72a:	697b      	ldr	r3, [r7, #20]
 800d72c:	1ad3      	subs	r3, r2, r3
 800d72e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	685a      	ldr	r2, [r3, #4]
 800d734:	697b      	ldr	r3, [r7, #20]
 800d736:	18d0      	adds	r0, r2, r3
 800d738:	683b      	ldr	r3, [r7, #0]
 800d73a:	685a      	ldr	r2, [r3, #4]
 800d73c:	693b      	ldr	r3, [r7, #16]
 800d73e:	4413      	add	r3, r2
 800d740:	68fa      	ldr	r2, [r7, #12]
 800d742:	4619      	mov	r1, r3
 800d744:	f008 fec8 	bl	80164d8 <memcpy>
    offset_to += len;
 800d748:	697a      	ldr	r2, [r7, #20]
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	4413      	add	r3, r2
 800d74e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800d750:	693a      	ldr	r2, [r7, #16]
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	4413      	add	r3, r2
 800d756:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	895b      	ldrh	r3, [r3, #10]
 800d75c:	461a      	mov	r2, r3
 800d75e:	697b      	ldr	r3, [r7, #20]
 800d760:	4293      	cmp	r3, r2
 800d762:	d906      	bls.n	800d772 <pbuf_copy+0xb2>
 800d764:	4b38      	ldr	r3, [pc, #224]	; (800d848 <pbuf_copy+0x188>)
 800d766:	f240 32d9 	movw	r2, #985	; 0x3d9
 800d76a:	493a      	ldr	r1, [pc, #232]	; (800d854 <pbuf_copy+0x194>)
 800d76c:	4838      	ldr	r0, [pc, #224]	; (800d850 <pbuf_copy+0x190>)
 800d76e:	f008 fec9 	bl	8016504 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800d772:	683b      	ldr	r3, [r7, #0]
 800d774:	895b      	ldrh	r3, [r3, #10]
 800d776:	461a      	mov	r2, r3
 800d778:	693b      	ldr	r3, [r7, #16]
 800d77a:	4293      	cmp	r3, r2
 800d77c:	d906      	bls.n	800d78c <pbuf_copy+0xcc>
 800d77e:	4b32      	ldr	r3, [pc, #200]	; (800d848 <pbuf_copy+0x188>)
 800d780:	f240 32da 	movw	r2, #986	; 0x3da
 800d784:	4934      	ldr	r1, [pc, #208]	; (800d858 <pbuf_copy+0x198>)
 800d786:	4832      	ldr	r0, [pc, #200]	; (800d850 <pbuf_copy+0x190>)
 800d788:	f008 febc 	bl	8016504 <iprintf>
    if (offset_from >= p_from->len) {
 800d78c:	683b      	ldr	r3, [r7, #0]
 800d78e:	895b      	ldrh	r3, [r3, #10]
 800d790:	461a      	mov	r2, r3
 800d792:	693b      	ldr	r3, [r7, #16]
 800d794:	4293      	cmp	r3, r2
 800d796:	d304      	bcc.n	800d7a2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800d798:	2300      	movs	r3, #0
 800d79a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800d79c:	683b      	ldr	r3, [r7, #0]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	895b      	ldrh	r3, [r3, #10]
 800d7a6:	461a      	mov	r2, r3
 800d7a8:	697b      	ldr	r3, [r7, #20]
 800d7aa:	4293      	cmp	r3, r2
 800d7ac:	d114      	bne.n	800d7d8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d10c      	bne.n	800d7d8 <pbuf_copy+0x118>
 800d7be:	683b      	ldr	r3, [r7, #0]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d009      	beq.n	800d7d8 <pbuf_copy+0x118>
 800d7c4:	4b20      	ldr	r3, [pc, #128]	; (800d848 <pbuf_copy+0x188>)
 800d7c6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800d7ca:	4924      	ldr	r1, [pc, #144]	; (800d85c <pbuf_copy+0x19c>)
 800d7cc:	4820      	ldr	r0, [pc, #128]	; (800d850 <pbuf_copy+0x190>)
 800d7ce:	f008 fe99 	bl	8016504 <iprintf>
 800d7d2:	f06f 030f 	mvn.w	r3, #15
 800d7d6:	e032      	b.n	800d83e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800d7d8:	683b      	ldr	r3, [r7, #0]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d013      	beq.n	800d806 <pbuf_copy+0x146>
 800d7de:	683b      	ldr	r3, [r7, #0]
 800d7e0:	895a      	ldrh	r2, [r3, #10]
 800d7e2:	683b      	ldr	r3, [r7, #0]
 800d7e4:	891b      	ldrh	r3, [r3, #8]
 800d7e6:	429a      	cmp	r2, r3
 800d7e8:	d10d      	bne.n	800d806 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d7ea:	683b      	ldr	r3, [r7, #0]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d009      	beq.n	800d806 <pbuf_copy+0x146>
 800d7f2:	4b15      	ldr	r3, [pc, #84]	; (800d848 <pbuf_copy+0x188>)
 800d7f4:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800d7f8:	4919      	ldr	r1, [pc, #100]	; (800d860 <pbuf_copy+0x1a0>)
 800d7fa:	4815      	ldr	r0, [pc, #84]	; (800d850 <pbuf_copy+0x190>)
 800d7fc:	f008 fe82 	bl	8016504 <iprintf>
 800d800:	f06f 0305 	mvn.w	r3, #5
 800d804:	e01b      	b.n	800d83e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d013      	beq.n	800d834 <pbuf_copy+0x174>
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	895a      	ldrh	r2, [r3, #10]
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	891b      	ldrh	r3, [r3, #8]
 800d814:	429a      	cmp	r2, r3
 800d816:	d10d      	bne.n	800d834 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d009      	beq.n	800d834 <pbuf_copy+0x174>
 800d820:	4b09      	ldr	r3, [pc, #36]	; (800d848 <pbuf_copy+0x188>)
 800d822:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800d826:	490e      	ldr	r1, [pc, #56]	; (800d860 <pbuf_copy+0x1a0>)
 800d828:	4809      	ldr	r0, [pc, #36]	; (800d850 <pbuf_copy+0x190>)
 800d82a:	f008 fe6b 	bl	8016504 <iprintf>
 800d82e:	f06f 0305 	mvn.w	r3, #5
 800d832:	e004      	b.n	800d83e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800d834:	683b      	ldr	r3, [r7, #0]
 800d836:	2b00      	cmp	r3, #0
 800d838:	f47f af61 	bne.w	800d6fe <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800d83c:	2300      	movs	r3, #0
}
 800d83e:	4618      	mov	r0, r3
 800d840:	3718      	adds	r7, #24
 800d842:	46bd      	mov	sp, r7
 800d844:	bd80      	pop	{r7, pc}
 800d846:	bf00      	nop
 800d848:	08017c6c 	.word	0x08017c6c
 800d84c:	08017f14 	.word	0x08017f14
 800d850:	08017ccc 	.word	0x08017ccc
 800d854:	08017f44 	.word	0x08017f44
 800d858:	08017f5c 	.word	0x08017f5c
 800d85c:	08017f78 	.word	0x08017f78
 800d860:	08017f88 	.word	0x08017f88

0800d864 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800d864:	b580      	push	{r7, lr}
 800d866:	b088      	sub	sp, #32
 800d868:	af00      	add	r7, sp, #0
 800d86a:	60f8      	str	r0, [r7, #12]
 800d86c:	60b9      	str	r1, [r7, #8]
 800d86e:	4611      	mov	r1, r2
 800d870:	461a      	mov	r2, r3
 800d872:	460b      	mov	r3, r1
 800d874:	80fb      	strh	r3, [r7, #6]
 800d876:	4613      	mov	r3, r2
 800d878:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800d87a:	2300      	movs	r3, #0
 800d87c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800d87e:	2300      	movs	r3, #0
 800d880:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	2b00      	cmp	r3, #0
 800d886:	d108      	bne.n	800d89a <pbuf_copy_partial+0x36>
 800d888:	4b2b      	ldr	r3, [pc, #172]	; (800d938 <pbuf_copy_partial+0xd4>)
 800d88a:	f240 420a 	movw	r2, #1034	; 0x40a
 800d88e:	492b      	ldr	r1, [pc, #172]	; (800d93c <pbuf_copy_partial+0xd8>)
 800d890:	482b      	ldr	r0, [pc, #172]	; (800d940 <pbuf_copy_partial+0xdc>)
 800d892:	f008 fe37 	bl	8016504 <iprintf>
 800d896:	2300      	movs	r3, #0
 800d898:	e04a      	b.n	800d930 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800d89a:	68bb      	ldr	r3, [r7, #8]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d108      	bne.n	800d8b2 <pbuf_copy_partial+0x4e>
 800d8a0:	4b25      	ldr	r3, [pc, #148]	; (800d938 <pbuf_copy_partial+0xd4>)
 800d8a2:	f240 420b 	movw	r2, #1035	; 0x40b
 800d8a6:	4927      	ldr	r1, [pc, #156]	; (800d944 <pbuf_copy_partial+0xe0>)
 800d8a8:	4825      	ldr	r0, [pc, #148]	; (800d940 <pbuf_copy_partial+0xdc>)
 800d8aa:	f008 fe2b 	bl	8016504 <iprintf>
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	e03e      	b.n	800d930 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	61fb      	str	r3, [r7, #28]
 800d8b6:	e034      	b.n	800d922 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800d8b8:	88bb      	ldrh	r3, [r7, #4]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d00a      	beq.n	800d8d4 <pbuf_copy_partial+0x70>
 800d8be:	69fb      	ldr	r3, [r7, #28]
 800d8c0:	895b      	ldrh	r3, [r3, #10]
 800d8c2:	88ba      	ldrh	r2, [r7, #4]
 800d8c4:	429a      	cmp	r2, r3
 800d8c6:	d305      	bcc.n	800d8d4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800d8c8:	69fb      	ldr	r3, [r7, #28]
 800d8ca:	895b      	ldrh	r3, [r3, #10]
 800d8cc:	88ba      	ldrh	r2, [r7, #4]
 800d8ce:	1ad3      	subs	r3, r2, r3
 800d8d0:	80bb      	strh	r3, [r7, #4]
 800d8d2:	e023      	b.n	800d91c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800d8d4:	69fb      	ldr	r3, [r7, #28]
 800d8d6:	895a      	ldrh	r2, [r3, #10]
 800d8d8:	88bb      	ldrh	r3, [r7, #4]
 800d8da:	1ad3      	subs	r3, r2, r3
 800d8dc:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800d8de:	8b3a      	ldrh	r2, [r7, #24]
 800d8e0:	88fb      	ldrh	r3, [r7, #6]
 800d8e2:	429a      	cmp	r2, r3
 800d8e4:	d901      	bls.n	800d8ea <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800d8e6:	88fb      	ldrh	r3, [r7, #6]
 800d8e8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800d8ea:	8b7b      	ldrh	r3, [r7, #26]
 800d8ec:	68ba      	ldr	r2, [r7, #8]
 800d8ee:	18d0      	adds	r0, r2, r3
 800d8f0:	69fb      	ldr	r3, [r7, #28]
 800d8f2:	685a      	ldr	r2, [r3, #4]
 800d8f4:	88bb      	ldrh	r3, [r7, #4]
 800d8f6:	4413      	add	r3, r2
 800d8f8:	8b3a      	ldrh	r2, [r7, #24]
 800d8fa:	4619      	mov	r1, r3
 800d8fc:	f008 fdec 	bl	80164d8 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800d900:	8afa      	ldrh	r2, [r7, #22]
 800d902:	8b3b      	ldrh	r3, [r7, #24]
 800d904:	4413      	add	r3, r2
 800d906:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800d908:	8b7a      	ldrh	r2, [r7, #26]
 800d90a:	8b3b      	ldrh	r3, [r7, #24]
 800d90c:	4413      	add	r3, r2
 800d90e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800d910:	88fa      	ldrh	r2, [r7, #6]
 800d912:	8b3b      	ldrh	r3, [r7, #24]
 800d914:	1ad3      	subs	r3, r2, r3
 800d916:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800d918:	2300      	movs	r3, #0
 800d91a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d91c:	69fb      	ldr	r3, [r7, #28]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	61fb      	str	r3, [r7, #28]
 800d922:	88fb      	ldrh	r3, [r7, #6]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d002      	beq.n	800d92e <pbuf_copy_partial+0xca>
 800d928:	69fb      	ldr	r3, [r7, #28]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d1c4      	bne.n	800d8b8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800d92e:	8afb      	ldrh	r3, [r7, #22]
}
 800d930:	4618      	mov	r0, r3
 800d932:	3720      	adds	r7, #32
 800d934:	46bd      	mov	sp, r7
 800d936:	bd80      	pop	{r7, pc}
 800d938:	08017c6c 	.word	0x08017c6c
 800d93c:	08017fb4 	.word	0x08017fb4
 800d940:	08017ccc 	.word	0x08017ccc
 800d944:	08017fd4 	.word	0x08017fd4

0800d948 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b084      	sub	sp, #16
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	4603      	mov	r3, r0
 800d950:	603a      	str	r2, [r7, #0]
 800d952:	71fb      	strb	r3, [r7, #7]
 800d954:	460b      	mov	r3, r1
 800d956:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800d958:	683b      	ldr	r3, [r7, #0]
 800d95a:	8919      	ldrh	r1, [r3, #8]
 800d95c:	88ba      	ldrh	r2, [r7, #4]
 800d95e:	79fb      	ldrb	r3, [r7, #7]
 800d960:	4618      	mov	r0, r3
 800d962:	f7ff faa5 	bl	800ceb0 <pbuf_alloc>
 800d966:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d101      	bne.n	800d972 <pbuf_clone+0x2a>
    return NULL;
 800d96e:	2300      	movs	r3, #0
 800d970:	e011      	b.n	800d996 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800d972:	6839      	ldr	r1, [r7, #0]
 800d974:	68f8      	ldr	r0, [r7, #12]
 800d976:	f7ff fea3 	bl	800d6c0 <pbuf_copy>
 800d97a:	4603      	mov	r3, r0
 800d97c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800d97e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d006      	beq.n	800d994 <pbuf_clone+0x4c>
 800d986:	4b06      	ldr	r3, [pc, #24]	; (800d9a0 <pbuf_clone+0x58>)
 800d988:	f240 5224 	movw	r2, #1316	; 0x524
 800d98c:	4905      	ldr	r1, [pc, #20]	; (800d9a4 <pbuf_clone+0x5c>)
 800d98e:	4806      	ldr	r0, [pc, #24]	; (800d9a8 <pbuf_clone+0x60>)
 800d990:	f008 fdb8 	bl	8016504 <iprintf>
  return q;
 800d994:	68fb      	ldr	r3, [r7, #12]
}
 800d996:	4618      	mov	r0, r3
 800d998:	3710      	adds	r7, #16
 800d99a:	46bd      	mov	sp, r7
 800d99c:	bd80      	pop	{r7, pc}
 800d99e:	bf00      	nop
 800d9a0:	08017c6c 	.word	0x08017c6c
 800d9a4:	080180e0 	.word	0x080180e0
 800d9a8:	08017ccc 	.word	0x08017ccc

0800d9ac <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d9b0:	f008 fdc0 	bl	8016534 <rand>
 800d9b4:	4603      	mov	r3, r0
 800d9b6:	b29b      	uxth	r3, r3
 800d9b8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d9bc:	b29b      	uxth	r3, r3
 800d9be:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800d9c2:	b29a      	uxth	r2, r3
 800d9c4:	4b01      	ldr	r3, [pc, #4]	; (800d9cc <tcp_init+0x20>)
 800d9c6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d9c8:	bf00      	nop
 800d9ca:	bd80      	pop	{r7, pc}
 800d9cc:	20000120 	.word	0x20000120

0800d9d0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b082      	sub	sp, #8
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	7d1b      	ldrb	r3, [r3, #20]
 800d9dc:	2b01      	cmp	r3, #1
 800d9de:	d105      	bne.n	800d9ec <tcp_free+0x1c>
 800d9e0:	4b06      	ldr	r3, [pc, #24]	; (800d9fc <tcp_free+0x2c>)
 800d9e2:	22d4      	movs	r2, #212	; 0xd4
 800d9e4:	4906      	ldr	r1, [pc, #24]	; (800da00 <tcp_free+0x30>)
 800d9e6:	4807      	ldr	r0, [pc, #28]	; (800da04 <tcp_free+0x34>)
 800d9e8:	f008 fd8c 	bl	8016504 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800d9ec:	6879      	ldr	r1, [r7, #4]
 800d9ee:	2001      	movs	r0, #1
 800d9f0:	f7fe ff16 	bl	800c820 <memp_free>
}
 800d9f4:	bf00      	nop
 800d9f6:	3708      	adds	r7, #8
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	bd80      	pop	{r7, pc}
 800d9fc:	0801816c 	.word	0x0801816c
 800da00:	0801819c 	.word	0x0801819c
 800da04:	080181b0 	.word	0x080181b0

0800da08 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	b082      	sub	sp, #8
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	7d1b      	ldrb	r3, [r3, #20]
 800da14:	2b01      	cmp	r3, #1
 800da16:	d105      	bne.n	800da24 <tcp_free_listen+0x1c>
 800da18:	4b06      	ldr	r3, [pc, #24]	; (800da34 <tcp_free_listen+0x2c>)
 800da1a:	22df      	movs	r2, #223	; 0xdf
 800da1c:	4906      	ldr	r1, [pc, #24]	; (800da38 <tcp_free_listen+0x30>)
 800da1e:	4807      	ldr	r0, [pc, #28]	; (800da3c <tcp_free_listen+0x34>)
 800da20:	f008 fd70 	bl	8016504 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800da24:	6879      	ldr	r1, [r7, #4]
 800da26:	2002      	movs	r0, #2
 800da28:	f7fe fefa 	bl	800c820 <memp_free>
}
 800da2c:	bf00      	nop
 800da2e:	3708      	adds	r7, #8
 800da30:	46bd      	mov	sp, r7
 800da32:	bd80      	pop	{r7, pc}
 800da34:	0801816c 	.word	0x0801816c
 800da38:	080181d8 	.word	0x080181d8
 800da3c:	080181b0 	.word	0x080181b0

0800da40 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800da40:	b580      	push	{r7, lr}
 800da42:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800da44:	f000 fea2 	bl	800e78c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800da48:	4b07      	ldr	r3, [pc, #28]	; (800da68 <tcp_tmr+0x28>)
 800da4a:	781b      	ldrb	r3, [r3, #0]
 800da4c:	3301      	adds	r3, #1
 800da4e:	b2da      	uxtb	r2, r3
 800da50:	4b05      	ldr	r3, [pc, #20]	; (800da68 <tcp_tmr+0x28>)
 800da52:	701a      	strb	r2, [r3, #0]
 800da54:	4b04      	ldr	r3, [pc, #16]	; (800da68 <tcp_tmr+0x28>)
 800da56:	781b      	ldrb	r3, [r3, #0]
 800da58:	f003 0301 	and.w	r3, r3, #1
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d001      	beq.n	800da64 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800da60:	f000 fb54 	bl	800e10c <tcp_slowtmr>
  }
}
 800da64:	bf00      	nop
 800da66:	bd80      	pop	{r7, pc}
 800da68:	20004215 	.word	0x20004215

0800da6c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800da6c:	b580      	push	{r7, lr}
 800da6e:	b084      	sub	sp, #16
 800da70:	af00      	add	r7, sp, #0
 800da72:	6078      	str	r0, [r7, #4]
 800da74:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800da76:	683b      	ldr	r3, [r7, #0]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d105      	bne.n	800da88 <tcp_remove_listener+0x1c>
 800da7c:	4b0d      	ldr	r3, [pc, #52]	; (800dab4 <tcp_remove_listener+0x48>)
 800da7e:	22ff      	movs	r2, #255	; 0xff
 800da80:	490d      	ldr	r1, [pc, #52]	; (800dab8 <tcp_remove_listener+0x4c>)
 800da82:	480e      	ldr	r0, [pc, #56]	; (800dabc <tcp_remove_listener+0x50>)
 800da84:	f008 fd3e 	bl	8016504 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	60fb      	str	r3, [r7, #12]
 800da8c:	e00a      	b.n	800daa4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da92:	683a      	ldr	r2, [r7, #0]
 800da94:	429a      	cmp	r2, r3
 800da96:	d102      	bne.n	800da9e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	2200      	movs	r2, #0
 800da9c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	68db      	ldr	r3, [r3, #12]
 800daa2:	60fb      	str	r3, [r7, #12]
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d1f1      	bne.n	800da8e <tcp_remove_listener+0x22>
    }
  }
}
 800daaa:	bf00      	nop
 800daac:	bf00      	nop
 800daae:	3710      	adds	r7, #16
 800dab0:	46bd      	mov	sp, r7
 800dab2:	bd80      	pop	{r7, pc}
 800dab4:	0801816c 	.word	0x0801816c
 800dab8:	080181f4 	.word	0x080181f4
 800dabc:	080181b0 	.word	0x080181b0

0800dac0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800dac0:	b580      	push	{r7, lr}
 800dac2:	b084      	sub	sp, #16
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d106      	bne.n	800dadc <tcp_listen_closed+0x1c>
 800dace:	4b14      	ldr	r3, [pc, #80]	; (800db20 <tcp_listen_closed+0x60>)
 800dad0:	f240 1211 	movw	r2, #273	; 0x111
 800dad4:	4913      	ldr	r1, [pc, #76]	; (800db24 <tcp_listen_closed+0x64>)
 800dad6:	4814      	ldr	r0, [pc, #80]	; (800db28 <tcp_listen_closed+0x68>)
 800dad8:	f008 fd14 	bl	8016504 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	7d1b      	ldrb	r3, [r3, #20]
 800dae0:	2b01      	cmp	r3, #1
 800dae2:	d006      	beq.n	800daf2 <tcp_listen_closed+0x32>
 800dae4:	4b0e      	ldr	r3, [pc, #56]	; (800db20 <tcp_listen_closed+0x60>)
 800dae6:	f44f 7289 	mov.w	r2, #274	; 0x112
 800daea:	4910      	ldr	r1, [pc, #64]	; (800db2c <tcp_listen_closed+0x6c>)
 800daec:	480e      	ldr	r0, [pc, #56]	; (800db28 <tcp_listen_closed+0x68>)
 800daee:	f008 fd09 	bl	8016504 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800daf2:	2301      	movs	r3, #1
 800daf4:	60fb      	str	r3, [r7, #12]
 800daf6:	e00b      	b.n	800db10 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800daf8:	4a0d      	ldr	r2, [pc, #52]	; (800db30 <tcp_listen_closed+0x70>)
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	6879      	ldr	r1, [r7, #4]
 800db04:	4618      	mov	r0, r3
 800db06:	f7ff ffb1 	bl	800da6c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	3301      	adds	r3, #1
 800db0e:	60fb      	str	r3, [r7, #12]
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	2b03      	cmp	r3, #3
 800db14:	d9f0      	bls.n	800daf8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800db16:	bf00      	nop
 800db18:	bf00      	nop
 800db1a:	3710      	adds	r7, #16
 800db1c:	46bd      	mov	sp, r7
 800db1e:	bd80      	pop	{r7, pc}
 800db20:	0801816c 	.word	0x0801816c
 800db24:	0801821c 	.word	0x0801821c
 800db28:	080181b0 	.word	0x080181b0
 800db2c:	08018228 	.word	0x08018228
 800db30:	0801a1c8 	.word	0x0801a1c8

0800db34 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800db34:	b5b0      	push	{r4, r5, r7, lr}
 800db36:	b088      	sub	sp, #32
 800db38:	af04      	add	r7, sp, #16
 800db3a:	6078      	str	r0, [r7, #4]
 800db3c:	460b      	mov	r3, r1
 800db3e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d106      	bne.n	800db54 <tcp_close_shutdown+0x20>
 800db46:	4b63      	ldr	r3, [pc, #396]	; (800dcd4 <tcp_close_shutdown+0x1a0>)
 800db48:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800db4c:	4962      	ldr	r1, [pc, #392]	; (800dcd8 <tcp_close_shutdown+0x1a4>)
 800db4e:	4863      	ldr	r0, [pc, #396]	; (800dcdc <tcp_close_shutdown+0x1a8>)
 800db50:	f008 fcd8 	bl	8016504 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800db54:	78fb      	ldrb	r3, [r7, #3]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d066      	beq.n	800dc28 <tcp_close_shutdown+0xf4>
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	7d1b      	ldrb	r3, [r3, #20]
 800db5e:	2b04      	cmp	r3, #4
 800db60:	d003      	beq.n	800db6a <tcp_close_shutdown+0x36>
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	7d1b      	ldrb	r3, [r3, #20]
 800db66:	2b07      	cmp	r3, #7
 800db68:	d15e      	bne.n	800dc28 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d104      	bne.n	800db7c <tcp_close_shutdown+0x48>
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800db76:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800db7a:	d055      	beq.n	800dc28 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	8b5b      	ldrh	r3, [r3, #26]
 800db80:	f003 0310 	and.w	r3, r3, #16
 800db84:	2b00      	cmp	r3, #0
 800db86:	d106      	bne.n	800db96 <tcp_close_shutdown+0x62>
 800db88:	4b52      	ldr	r3, [pc, #328]	; (800dcd4 <tcp_close_shutdown+0x1a0>)
 800db8a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800db8e:	4954      	ldr	r1, [pc, #336]	; (800dce0 <tcp_close_shutdown+0x1ac>)
 800db90:	4852      	ldr	r0, [pc, #328]	; (800dcdc <tcp_close_shutdown+0x1a8>)
 800db92:	f008 fcb7 	bl	8016504 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800db9e:	687d      	ldr	r5, [r7, #4]
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	3304      	adds	r3, #4
 800dba4:	687a      	ldr	r2, [r7, #4]
 800dba6:	8ad2      	ldrh	r2, [r2, #22]
 800dba8:	6879      	ldr	r1, [r7, #4]
 800dbaa:	8b09      	ldrh	r1, [r1, #24]
 800dbac:	9102      	str	r1, [sp, #8]
 800dbae:	9201      	str	r2, [sp, #4]
 800dbb0:	9300      	str	r3, [sp, #0]
 800dbb2:	462b      	mov	r3, r5
 800dbb4:	4622      	mov	r2, r4
 800dbb6:	4601      	mov	r1, r0
 800dbb8:	6878      	ldr	r0, [r7, #4]
 800dbba:	f004 fe8d 	bl	80128d8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800dbbe:	6878      	ldr	r0, [r7, #4]
 800dbc0:	f001 f8c6 	bl	800ed50 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800dbc4:	4b47      	ldr	r3, [pc, #284]	; (800dce4 <tcp_close_shutdown+0x1b0>)
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	687a      	ldr	r2, [r7, #4]
 800dbca:	429a      	cmp	r2, r3
 800dbcc:	d105      	bne.n	800dbda <tcp_close_shutdown+0xa6>
 800dbce:	4b45      	ldr	r3, [pc, #276]	; (800dce4 <tcp_close_shutdown+0x1b0>)
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	68db      	ldr	r3, [r3, #12]
 800dbd4:	4a43      	ldr	r2, [pc, #268]	; (800dce4 <tcp_close_shutdown+0x1b0>)
 800dbd6:	6013      	str	r3, [r2, #0]
 800dbd8:	e013      	b.n	800dc02 <tcp_close_shutdown+0xce>
 800dbda:	4b42      	ldr	r3, [pc, #264]	; (800dce4 <tcp_close_shutdown+0x1b0>)
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	60fb      	str	r3, [r7, #12]
 800dbe0:	e00c      	b.n	800dbfc <tcp_close_shutdown+0xc8>
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	68db      	ldr	r3, [r3, #12]
 800dbe6:	687a      	ldr	r2, [r7, #4]
 800dbe8:	429a      	cmp	r2, r3
 800dbea:	d104      	bne.n	800dbf6 <tcp_close_shutdown+0xc2>
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	68da      	ldr	r2, [r3, #12]
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	60da      	str	r2, [r3, #12]
 800dbf4:	e005      	b.n	800dc02 <tcp_close_shutdown+0xce>
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	68db      	ldr	r3, [r3, #12]
 800dbfa:	60fb      	str	r3, [r7, #12]
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d1ef      	bne.n	800dbe2 <tcp_close_shutdown+0xae>
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	2200      	movs	r2, #0
 800dc06:	60da      	str	r2, [r3, #12]
 800dc08:	4b37      	ldr	r3, [pc, #220]	; (800dce8 <tcp_close_shutdown+0x1b4>)
 800dc0a:	2201      	movs	r2, #1
 800dc0c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800dc0e:	4b37      	ldr	r3, [pc, #220]	; (800dcec <tcp_close_shutdown+0x1b8>)
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	687a      	ldr	r2, [r7, #4]
 800dc14:	429a      	cmp	r2, r3
 800dc16:	d102      	bne.n	800dc1e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800dc18:	f003 fd5a 	bl	80116d0 <tcp_trigger_input_pcb_close>
 800dc1c:	e002      	b.n	800dc24 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800dc1e:	6878      	ldr	r0, [r7, #4]
 800dc20:	f7ff fed6 	bl	800d9d0 <tcp_free>
      }
      return ERR_OK;
 800dc24:	2300      	movs	r3, #0
 800dc26:	e050      	b.n	800dcca <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	7d1b      	ldrb	r3, [r3, #20]
 800dc2c:	2b02      	cmp	r3, #2
 800dc2e:	d03b      	beq.n	800dca8 <tcp_close_shutdown+0x174>
 800dc30:	2b02      	cmp	r3, #2
 800dc32:	dc44      	bgt.n	800dcbe <tcp_close_shutdown+0x18a>
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d002      	beq.n	800dc3e <tcp_close_shutdown+0x10a>
 800dc38:	2b01      	cmp	r3, #1
 800dc3a:	d02a      	beq.n	800dc92 <tcp_close_shutdown+0x15e>
 800dc3c:	e03f      	b.n	800dcbe <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	8adb      	ldrh	r3, [r3, #22]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d021      	beq.n	800dc8a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800dc46:	4b2a      	ldr	r3, [pc, #168]	; (800dcf0 <tcp_close_shutdown+0x1bc>)
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	687a      	ldr	r2, [r7, #4]
 800dc4c:	429a      	cmp	r2, r3
 800dc4e:	d105      	bne.n	800dc5c <tcp_close_shutdown+0x128>
 800dc50:	4b27      	ldr	r3, [pc, #156]	; (800dcf0 <tcp_close_shutdown+0x1bc>)
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	68db      	ldr	r3, [r3, #12]
 800dc56:	4a26      	ldr	r2, [pc, #152]	; (800dcf0 <tcp_close_shutdown+0x1bc>)
 800dc58:	6013      	str	r3, [r2, #0]
 800dc5a:	e013      	b.n	800dc84 <tcp_close_shutdown+0x150>
 800dc5c:	4b24      	ldr	r3, [pc, #144]	; (800dcf0 <tcp_close_shutdown+0x1bc>)
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	60bb      	str	r3, [r7, #8]
 800dc62:	e00c      	b.n	800dc7e <tcp_close_shutdown+0x14a>
 800dc64:	68bb      	ldr	r3, [r7, #8]
 800dc66:	68db      	ldr	r3, [r3, #12]
 800dc68:	687a      	ldr	r2, [r7, #4]
 800dc6a:	429a      	cmp	r2, r3
 800dc6c:	d104      	bne.n	800dc78 <tcp_close_shutdown+0x144>
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	68da      	ldr	r2, [r3, #12]
 800dc72:	68bb      	ldr	r3, [r7, #8]
 800dc74:	60da      	str	r2, [r3, #12]
 800dc76:	e005      	b.n	800dc84 <tcp_close_shutdown+0x150>
 800dc78:	68bb      	ldr	r3, [r7, #8]
 800dc7a:	68db      	ldr	r3, [r3, #12]
 800dc7c:	60bb      	str	r3, [r7, #8]
 800dc7e:	68bb      	ldr	r3, [r7, #8]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d1ef      	bne.n	800dc64 <tcp_close_shutdown+0x130>
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	2200      	movs	r2, #0
 800dc88:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800dc8a:	6878      	ldr	r0, [r7, #4]
 800dc8c:	f7ff fea0 	bl	800d9d0 <tcp_free>
      break;
 800dc90:	e01a      	b.n	800dcc8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800dc92:	6878      	ldr	r0, [r7, #4]
 800dc94:	f7ff ff14 	bl	800dac0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800dc98:	6879      	ldr	r1, [r7, #4]
 800dc9a:	4816      	ldr	r0, [pc, #88]	; (800dcf4 <tcp_close_shutdown+0x1c0>)
 800dc9c:	f001 f8a8 	bl	800edf0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800dca0:	6878      	ldr	r0, [r7, #4]
 800dca2:	f7ff feb1 	bl	800da08 <tcp_free_listen>
      break;
 800dca6:	e00f      	b.n	800dcc8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800dca8:	6879      	ldr	r1, [r7, #4]
 800dcaa:	480e      	ldr	r0, [pc, #56]	; (800dce4 <tcp_close_shutdown+0x1b0>)
 800dcac:	f001 f8a0 	bl	800edf0 <tcp_pcb_remove>
 800dcb0:	4b0d      	ldr	r3, [pc, #52]	; (800dce8 <tcp_close_shutdown+0x1b4>)
 800dcb2:	2201      	movs	r2, #1
 800dcb4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800dcb6:	6878      	ldr	r0, [r7, #4]
 800dcb8:	f7ff fe8a 	bl	800d9d0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800dcbc:	e004      	b.n	800dcc8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800dcbe:	6878      	ldr	r0, [r7, #4]
 800dcc0:	f000 f81a 	bl	800dcf8 <tcp_close_shutdown_fin>
 800dcc4:	4603      	mov	r3, r0
 800dcc6:	e000      	b.n	800dcca <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800dcc8:	2300      	movs	r3, #0
}
 800dcca:	4618      	mov	r0, r3
 800dccc:	3710      	adds	r7, #16
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	bdb0      	pop	{r4, r5, r7, pc}
 800dcd2:	bf00      	nop
 800dcd4:	0801816c 	.word	0x0801816c
 800dcd8:	08018240 	.word	0x08018240
 800dcdc:	080181b0 	.word	0x080181b0
 800dce0:	08018260 	.word	0x08018260
 800dce4:	2000af5c 	.word	0x2000af5c
 800dce8:	2000af58 	.word	0x2000af58
 800dcec:	2000af70 	.word	0x2000af70
 800dcf0:	2000af68 	.word	0x2000af68
 800dcf4:	2000af64 	.word	0x2000af64

0800dcf8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b084      	sub	sp, #16
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d106      	bne.n	800dd14 <tcp_close_shutdown_fin+0x1c>
 800dd06:	4b2e      	ldr	r3, [pc, #184]	; (800ddc0 <tcp_close_shutdown_fin+0xc8>)
 800dd08:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800dd0c:	492d      	ldr	r1, [pc, #180]	; (800ddc4 <tcp_close_shutdown_fin+0xcc>)
 800dd0e:	482e      	ldr	r0, [pc, #184]	; (800ddc8 <tcp_close_shutdown_fin+0xd0>)
 800dd10:	f008 fbf8 	bl	8016504 <iprintf>

  switch (pcb->state) {
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	7d1b      	ldrb	r3, [r3, #20]
 800dd18:	2b07      	cmp	r3, #7
 800dd1a:	d020      	beq.n	800dd5e <tcp_close_shutdown_fin+0x66>
 800dd1c:	2b07      	cmp	r3, #7
 800dd1e:	dc2b      	bgt.n	800dd78 <tcp_close_shutdown_fin+0x80>
 800dd20:	2b03      	cmp	r3, #3
 800dd22:	d002      	beq.n	800dd2a <tcp_close_shutdown_fin+0x32>
 800dd24:	2b04      	cmp	r3, #4
 800dd26:	d00d      	beq.n	800dd44 <tcp_close_shutdown_fin+0x4c>
 800dd28:	e026      	b.n	800dd78 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800dd2a:	6878      	ldr	r0, [r7, #4]
 800dd2c:	f003 fee2 	bl	8011af4 <tcp_send_fin>
 800dd30:	4603      	mov	r3, r0
 800dd32:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800dd34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d11f      	bne.n	800dd7c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	2205      	movs	r2, #5
 800dd40:	751a      	strb	r2, [r3, #20]
      }
      break;
 800dd42:	e01b      	b.n	800dd7c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800dd44:	6878      	ldr	r0, [r7, #4]
 800dd46:	f003 fed5 	bl	8011af4 <tcp_send_fin>
 800dd4a:	4603      	mov	r3, r0
 800dd4c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800dd4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d114      	bne.n	800dd80 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	2205      	movs	r2, #5
 800dd5a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800dd5c:	e010      	b.n	800dd80 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800dd5e:	6878      	ldr	r0, [r7, #4]
 800dd60:	f003 fec8 	bl	8011af4 <tcp_send_fin>
 800dd64:	4603      	mov	r3, r0
 800dd66:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800dd68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d109      	bne.n	800dd84 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	2209      	movs	r2, #9
 800dd74:	751a      	strb	r2, [r3, #20]
      }
      break;
 800dd76:	e005      	b.n	800dd84 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800dd78:	2300      	movs	r3, #0
 800dd7a:	e01c      	b.n	800ddb6 <tcp_close_shutdown_fin+0xbe>
      break;
 800dd7c:	bf00      	nop
 800dd7e:	e002      	b.n	800dd86 <tcp_close_shutdown_fin+0x8e>
      break;
 800dd80:	bf00      	nop
 800dd82:	e000      	b.n	800dd86 <tcp_close_shutdown_fin+0x8e>
      break;
 800dd84:	bf00      	nop
  }

  if (err == ERR_OK) {
 800dd86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d103      	bne.n	800dd96 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800dd8e:	6878      	ldr	r0, [r7, #4]
 800dd90:	f003 ffee 	bl	8011d70 <tcp_output>
 800dd94:	e00d      	b.n	800ddb2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800dd96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd9e:	d108      	bne.n	800ddb2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	8b5b      	ldrh	r3, [r3, #26]
 800dda4:	f043 0308 	orr.w	r3, r3, #8
 800dda8:	b29a      	uxth	r2, r3
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800ddae:	2300      	movs	r3, #0
 800ddb0:	e001      	b.n	800ddb6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800ddb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	3710      	adds	r7, #16
 800ddba:	46bd      	mov	sp, r7
 800ddbc:	bd80      	pop	{r7, pc}
 800ddbe:	bf00      	nop
 800ddc0:	0801816c 	.word	0x0801816c
 800ddc4:	0801821c 	.word	0x0801821c
 800ddc8:	080181b0 	.word	0x080181b0

0800ddcc <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800ddcc:	b580      	push	{r7, lr}
 800ddce:	b082      	sub	sp, #8
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d109      	bne.n	800ddee <tcp_close+0x22>
 800ddda:	4b0f      	ldr	r3, [pc, #60]	; (800de18 <tcp_close+0x4c>)
 800dddc:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800dde0:	490e      	ldr	r1, [pc, #56]	; (800de1c <tcp_close+0x50>)
 800dde2:	480f      	ldr	r0, [pc, #60]	; (800de20 <tcp_close+0x54>)
 800dde4:	f008 fb8e 	bl	8016504 <iprintf>
 800dde8:	f06f 030f 	mvn.w	r3, #15
 800ddec:	e00f      	b.n	800de0e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	7d1b      	ldrb	r3, [r3, #20]
 800ddf2:	2b01      	cmp	r3, #1
 800ddf4:	d006      	beq.n	800de04 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	8b5b      	ldrh	r3, [r3, #26]
 800ddfa:	f043 0310 	orr.w	r3, r3, #16
 800ddfe:	b29a      	uxth	r2, r3
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800de04:	2101      	movs	r1, #1
 800de06:	6878      	ldr	r0, [r7, #4]
 800de08:	f7ff fe94 	bl	800db34 <tcp_close_shutdown>
 800de0c:	4603      	mov	r3, r0
}
 800de0e:	4618      	mov	r0, r3
 800de10:	3708      	adds	r7, #8
 800de12:	46bd      	mov	sp, r7
 800de14:	bd80      	pop	{r7, pc}
 800de16:	bf00      	nop
 800de18:	0801816c 	.word	0x0801816c
 800de1c:	0801827c 	.word	0x0801827c
 800de20:	080181b0 	.word	0x080181b0

0800de24 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800de24:	b580      	push	{r7, lr}
 800de26:	b08e      	sub	sp, #56	; 0x38
 800de28:	af04      	add	r7, sp, #16
 800de2a:	6078      	str	r0, [r7, #4]
 800de2c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	2b00      	cmp	r3, #0
 800de32:	d107      	bne.n	800de44 <tcp_abandon+0x20>
 800de34:	4b52      	ldr	r3, [pc, #328]	; (800df80 <tcp_abandon+0x15c>)
 800de36:	f240 223d 	movw	r2, #573	; 0x23d
 800de3a:	4952      	ldr	r1, [pc, #328]	; (800df84 <tcp_abandon+0x160>)
 800de3c:	4852      	ldr	r0, [pc, #328]	; (800df88 <tcp_abandon+0x164>)
 800de3e:	f008 fb61 	bl	8016504 <iprintf>
 800de42:	e099      	b.n	800df78 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	7d1b      	ldrb	r3, [r3, #20]
 800de48:	2b01      	cmp	r3, #1
 800de4a:	d106      	bne.n	800de5a <tcp_abandon+0x36>
 800de4c:	4b4c      	ldr	r3, [pc, #304]	; (800df80 <tcp_abandon+0x15c>)
 800de4e:	f44f 7210 	mov.w	r2, #576	; 0x240
 800de52:	494e      	ldr	r1, [pc, #312]	; (800df8c <tcp_abandon+0x168>)
 800de54:	484c      	ldr	r0, [pc, #304]	; (800df88 <tcp_abandon+0x164>)
 800de56:	f008 fb55 	bl	8016504 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	7d1b      	ldrb	r3, [r3, #20]
 800de5e:	2b0a      	cmp	r3, #10
 800de60:	d107      	bne.n	800de72 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800de62:	6879      	ldr	r1, [r7, #4]
 800de64:	484a      	ldr	r0, [pc, #296]	; (800df90 <tcp_abandon+0x16c>)
 800de66:	f000 ffc3 	bl	800edf0 <tcp_pcb_remove>
    tcp_free(pcb);
 800de6a:	6878      	ldr	r0, [r7, #4]
 800de6c:	f7ff fdb0 	bl	800d9d0 <tcp_free>
 800de70:	e082      	b.n	800df78 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800de72:	2300      	movs	r3, #0
 800de74:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800de76:	2300      	movs	r3, #0
 800de78:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de7e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de84:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800de8c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	691b      	ldr	r3, [r3, #16]
 800de92:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	7d1b      	ldrb	r3, [r3, #20]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d126      	bne.n	800deea <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	8adb      	ldrh	r3, [r3, #22]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d02e      	beq.n	800df02 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800dea4:	4b3b      	ldr	r3, [pc, #236]	; (800df94 <tcp_abandon+0x170>)
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	687a      	ldr	r2, [r7, #4]
 800deaa:	429a      	cmp	r2, r3
 800deac:	d105      	bne.n	800deba <tcp_abandon+0x96>
 800deae:	4b39      	ldr	r3, [pc, #228]	; (800df94 <tcp_abandon+0x170>)
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	68db      	ldr	r3, [r3, #12]
 800deb4:	4a37      	ldr	r2, [pc, #220]	; (800df94 <tcp_abandon+0x170>)
 800deb6:	6013      	str	r3, [r2, #0]
 800deb8:	e013      	b.n	800dee2 <tcp_abandon+0xbe>
 800deba:	4b36      	ldr	r3, [pc, #216]	; (800df94 <tcp_abandon+0x170>)
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	61fb      	str	r3, [r7, #28]
 800dec0:	e00c      	b.n	800dedc <tcp_abandon+0xb8>
 800dec2:	69fb      	ldr	r3, [r7, #28]
 800dec4:	68db      	ldr	r3, [r3, #12]
 800dec6:	687a      	ldr	r2, [r7, #4]
 800dec8:	429a      	cmp	r2, r3
 800deca:	d104      	bne.n	800ded6 <tcp_abandon+0xb2>
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	68da      	ldr	r2, [r3, #12]
 800ded0:	69fb      	ldr	r3, [r7, #28]
 800ded2:	60da      	str	r2, [r3, #12]
 800ded4:	e005      	b.n	800dee2 <tcp_abandon+0xbe>
 800ded6:	69fb      	ldr	r3, [r7, #28]
 800ded8:	68db      	ldr	r3, [r3, #12]
 800deda:	61fb      	str	r3, [r7, #28]
 800dedc:	69fb      	ldr	r3, [r7, #28]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d1ef      	bne.n	800dec2 <tcp_abandon+0x9e>
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	2200      	movs	r2, #0
 800dee6:	60da      	str	r2, [r3, #12]
 800dee8:	e00b      	b.n	800df02 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800deea:	683b      	ldr	r3, [r7, #0]
 800deec:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	8adb      	ldrh	r3, [r3, #22]
 800def2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800def4:	6879      	ldr	r1, [r7, #4]
 800def6:	4828      	ldr	r0, [pc, #160]	; (800df98 <tcp_abandon+0x174>)
 800def8:	f000 ff7a 	bl	800edf0 <tcp_pcb_remove>
 800defc:	4b27      	ldr	r3, [pc, #156]	; (800df9c <tcp_abandon+0x178>)
 800defe:	2201      	movs	r2, #1
 800df00:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df06:	2b00      	cmp	r3, #0
 800df08:	d004      	beq.n	800df14 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df0e:	4618      	mov	r0, r3
 800df10:	f000 fd1c 	bl	800e94c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d004      	beq.n	800df26 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df20:	4618      	mov	r0, r3
 800df22:	f000 fd13 	bl	800e94c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d004      	beq.n	800df38 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df32:	4618      	mov	r0, r3
 800df34:	f000 fd0a 	bl	800e94c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800df38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d00e      	beq.n	800df5c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800df3e:	6879      	ldr	r1, [r7, #4]
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	3304      	adds	r3, #4
 800df44:	687a      	ldr	r2, [r7, #4]
 800df46:	8b12      	ldrh	r2, [r2, #24]
 800df48:	9202      	str	r2, [sp, #8]
 800df4a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800df4c:	9201      	str	r2, [sp, #4]
 800df4e:	9300      	str	r3, [sp, #0]
 800df50:	460b      	mov	r3, r1
 800df52:	697a      	ldr	r2, [r7, #20]
 800df54:	69b9      	ldr	r1, [r7, #24]
 800df56:	6878      	ldr	r0, [r7, #4]
 800df58:	f004 fcbe 	bl	80128d8 <tcp_rst>
    }
    last_state = pcb->state;
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	7d1b      	ldrb	r3, [r3, #20]
 800df60:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800df62:	6878      	ldr	r0, [r7, #4]
 800df64:	f7ff fd34 	bl	800d9d0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800df68:	693b      	ldr	r3, [r7, #16]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d004      	beq.n	800df78 <tcp_abandon+0x154>
 800df6e:	693b      	ldr	r3, [r7, #16]
 800df70:	f06f 010c 	mvn.w	r1, #12
 800df74:	68f8      	ldr	r0, [r7, #12]
 800df76:	4798      	blx	r3
  }
}
 800df78:	3728      	adds	r7, #40	; 0x28
 800df7a:	46bd      	mov	sp, r7
 800df7c:	bd80      	pop	{r7, pc}
 800df7e:	bf00      	nop
 800df80:	0801816c 	.word	0x0801816c
 800df84:	080182b0 	.word	0x080182b0
 800df88:	080181b0 	.word	0x080181b0
 800df8c:	080182cc 	.word	0x080182cc
 800df90:	2000af6c 	.word	0x2000af6c
 800df94:	2000af68 	.word	0x2000af68
 800df98:	2000af5c 	.word	0x2000af5c
 800df9c:	2000af58 	.word	0x2000af58

0800dfa0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b082      	sub	sp, #8
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800dfa8:	2101      	movs	r1, #1
 800dfaa:	6878      	ldr	r0, [r7, #4]
 800dfac:	f7ff ff3a 	bl	800de24 <tcp_abandon>
}
 800dfb0:	bf00      	nop
 800dfb2:	3708      	adds	r7, #8
 800dfb4:	46bd      	mov	sp, r7
 800dfb6:	bd80      	pop	{r7, pc}

0800dfb8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800dfb8:	b580      	push	{r7, lr}
 800dfba:	b084      	sub	sp, #16
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d106      	bne.n	800dfd4 <tcp_update_rcv_ann_wnd+0x1c>
 800dfc6:	4b25      	ldr	r3, [pc, #148]	; (800e05c <tcp_update_rcv_ann_wnd+0xa4>)
 800dfc8:	f240 32a6 	movw	r2, #934	; 0x3a6
 800dfcc:	4924      	ldr	r1, [pc, #144]	; (800e060 <tcp_update_rcv_ann_wnd+0xa8>)
 800dfce:	4825      	ldr	r0, [pc, #148]	; (800e064 <tcp_update_rcv_ann_wnd+0xac>)
 800dfd0:	f008 fa98 	bl	8016504 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfd8:	687a      	ldr	r2, [r7, #4]
 800dfda:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800dfdc:	4413      	add	r3, r2
 800dfde:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfe4:	687a      	ldr	r2, [r7, #4]
 800dfe6:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800dfe8:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800dfec:	bf28      	it	cs
 800dfee:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800dff2:	b292      	uxth	r2, r2
 800dff4:	4413      	add	r3, r2
 800dff6:	68fa      	ldr	r2, [r7, #12]
 800dff8:	1ad3      	subs	r3, r2, r3
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	db08      	blt.n	800e010 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e00a:	68fa      	ldr	r2, [r7, #12]
 800e00c:	1ad3      	subs	r3, r2, r3
 800e00e:	e020      	b.n	800e052 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e018:	1ad3      	subs	r3, r2, r3
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	dd03      	ble.n	800e026 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	2200      	movs	r2, #0
 800e022:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e024:	e014      	b.n	800e050 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e02e:	1ad3      	subs	r3, r2, r3
 800e030:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800e032:	68bb      	ldr	r3, [r7, #8]
 800e034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e038:	d306      	bcc.n	800e048 <tcp_update_rcv_ann_wnd+0x90>
 800e03a:	4b08      	ldr	r3, [pc, #32]	; (800e05c <tcp_update_rcv_ann_wnd+0xa4>)
 800e03c:	f240 32b6 	movw	r2, #950	; 0x3b6
 800e040:	4909      	ldr	r1, [pc, #36]	; (800e068 <tcp_update_rcv_ann_wnd+0xb0>)
 800e042:	4808      	ldr	r0, [pc, #32]	; (800e064 <tcp_update_rcv_ann_wnd+0xac>)
 800e044:	f008 fa5e 	bl	8016504 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800e048:	68bb      	ldr	r3, [r7, #8]
 800e04a:	b29a      	uxth	r2, r3
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800e050:	2300      	movs	r3, #0
  }
}
 800e052:	4618      	mov	r0, r3
 800e054:	3710      	adds	r7, #16
 800e056:	46bd      	mov	sp, r7
 800e058:	bd80      	pop	{r7, pc}
 800e05a:	bf00      	nop
 800e05c:	0801816c 	.word	0x0801816c
 800e060:	080183c8 	.word	0x080183c8
 800e064:	080181b0 	.word	0x080181b0
 800e068:	080183ec 	.word	0x080183ec

0800e06c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800e06c:	b580      	push	{r7, lr}
 800e06e:	b084      	sub	sp, #16
 800e070:	af00      	add	r7, sp, #0
 800e072:	6078      	str	r0, [r7, #4]
 800e074:	460b      	mov	r3, r1
 800e076:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d107      	bne.n	800e08e <tcp_recved+0x22>
 800e07e:	4b1f      	ldr	r3, [pc, #124]	; (800e0fc <tcp_recved+0x90>)
 800e080:	f240 32cf 	movw	r2, #975	; 0x3cf
 800e084:	491e      	ldr	r1, [pc, #120]	; (800e100 <tcp_recved+0x94>)
 800e086:	481f      	ldr	r0, [pc, #124]	; (800e104 <tcp_recved+0x98>)
 800e088:	f008 fa3c 	bl	8016504 <iprintf>
 800e08c:	e032      	b.n	800e0f4 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	7d1b      	ldrb	r3, [r3, #20]
 800e092:	2b01      	cmp	r3, #1
 800e094:	d106      	bne.n	800e0a4 <tcp_recved+0x38>
 800e096:	4b19      	ldr	r3, [pc, #100]	; (800e0fc <tcp_recved+0x90>)
 800e098:	f240 32d2 	movw	r2, #978	; 0x3d2
 800e09c:	491a      	ldr	r1, [pc, #104]	; (800e108 <tcp_recved+0x9c>)
 800e09e:	4819      	ldr	r0, [pc, #100]	; (800e104 <tcp_recved+0x98>)
 800e0a0:	f008 fa30 	bl	8016504 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e0a8:	887b      	ldrh	r3, [r7, #2]
 800e0aa:	4413      	add	r3, r2
 800e0ac:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800e0ae:	89fb      	ldrh	r3, [r7, #14]
 800e0b0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e0b4:	d804      	bhi.n	800e0c0 <tcp_recved+0x54>
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e0ba:	89fa      	ldrh	r2, [r7, #14]
 800e0bc:	429a      	cmp	r2, r3
 800e0be:	d204      	bcs.n	800e0ca <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e0c6:	851a      	strh	r2, [r3, #40]	; 0x28
 800e0c8:	e002      	b.n	800e0d0 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	89fa      	ldrh	r2, [r7, #14]
 800e0ce:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800e0d0:	6878      	ldr	r0, [r7, #4]
 800e0d2:	f7ff ff71 	bl	800dfb8 <tcp_update_rcv_ann_wnd>
 800e0d6:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800e0d8:	68bb      	ldr	r3, [r7, #8]
 800e0da:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800e0de:	d309      	bcc.n	800e0f4 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	8b5b      	ldrh	r3, [r3, #26]
 800e0e4:	f043 0302 	orr.w	r3, r3, #2
 800e0e8:	b29a      	uxth	r2, r3
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e0ee:	6878      	ldr	r0, [r7, #4]
 800e0f0:	f003 fe3e 	bl	8011d70 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800e0f4:	3710      	adds	r7, #16
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	bd80      	pop	{r7, pc}
 800e0fa:	bf00      	nop
 800e0fc:	0801816c 	.word	0x0801816c
 800e100:	08018408 	.word	0x08018408
 800e104:	080181b0 	.word	0x080181b0
 800e108:	08018420 	.word	0x08018420

0800e10c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800e10c:	b5b0      	push	{r4, r5, r7, lr}
 800e10e:	b090      	sub	sp, #64	; 0x40
 800e110:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800e112:	2300      	movs	r3, #0
 800e114:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800e118:	4b94      	ldr	r3, [pc, #592]	; (800e36c <tcp_slowtmr+0x260>)
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	3301      	adds	r3, #1
 800e11e:	4a93      	ldr	r2, [pc, #588]	; (800e36c <tcp_slowtmr+0x260>)
 800e120:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800e122:	4b93      	ldr	r3, [pc, #588]	; (800e370 <tcp_slowtmr+0x264>)
 800e124:	781b      	ldrb	r3, [r3, #0]
 800e126:	3301      	adds	r3, #1
 800e128:	b2da      	uxtb	r2, r3
 800e12a:	4b91      	ldr	r3, [pc, #580]	; (800e370 <tcp_slowtmr+0x264>)
 800e12c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800e12e:	2300      	movs	r3, #0
 800e130:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800e132:	4b90      	ldr	r3, [pc, #576]	; (800e374 <tcp_slowtmr+0x268>)
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800e138:	e29f      	b.n	800e67a <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800e13a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e13c:	7d1b      	ldrb	r3, [r3, #20]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d106      	bne.n	800e150 <tcp_slowtmr+0x44>
 800e142:	4b8d      	ldr	r3, [pc, #564]	; (800e378 <tcp_slowtmr+0x26c>)
 800e144:	f240 42be 	movw	r2, #1214	; 0x4be
 800e148:	498c      	ldr	r1, [pc, #560]	; (800e37c <tcp_slowtmr+0x270>)
 800e14a:	488d      	ldr	r0, [pc, #564]	; (800e380 <tcp_slowtmr+0x274>)
 800e14c:	f008 f9da 	bl	8016504 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800e150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e152:	7d1b      	ldrb	r3, [r3, #20]
 800e154:	2b01      	cmp	r3, #1
 800e156:	d106      	bne.n	800e166 <tcp_slowtmr+0x5a>
 800e158:	4b87      	ldr	r3, [pc, #540]	; (800e378 <tcp_slowtmr+0x26c>)
 800e15a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800e15e:	4989      	ldr	r1, [pc, #548]	; (800e384 <tcp_slowtmr+0x278>)
 800e160:	4887      	ldr	r0, [pc, #540]	; (800e380 <tcp_slowtmr+0x274>)
 800e162:	f008 f9cf 	bl	8016504 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800e166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e168:	7d1b      	ldrb	r3, [r3, #20]
 800e16a:	2b0a      	cmp	r3, #10
 800e16c:	d106      	bne.n	800e17c <tcp_slowtmr+0x70>
 800e16e:	4b82      	ldr	r3, [pc, #520]	; (800e378 <tcp_slowtmr+0x26c>)
 800e170:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800e174:	4984      	ldr	r1, [pc, #528]	; (800e388 <tcp_slowtmr+0x27c>)
 800e176:	4882      	ldr	r0, [pc, #520]	; (800e380 <tcp_slowtmr+0x274>)
 800e178:	f008 f9c4 	bl	8016504 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800e17c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e17e:	7f9a      	ldrb	r2, [r3, #30]
 800e180:	4b7b      	ldr	r3, [pc, #492]	; (800e370 <tcp_slowtmr+0x264>)
 800e182:	781b      	ldrb	r3, [r3, #0]
 800e184:	429a      	cmp	r2, r3
 800e186:	d105      	bne.n	800e194 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800e188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e18a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e18c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e18e:	68db      	ldr	r3, [r3, #12]
 800e190:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800e192:	e272      	b.n	800e67a <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800e194:	4b76      	ldr	r3, [pc, #472]	; (800e370 <tcp_slowtmr+0x264>)
 800e196:	781a      	ldrb	r2, [r3, #0]
 800e198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e19a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800e19c:	2300      	movs	r3, #0
 800e19e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800e1a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1aa:	7d1b      	ldrb	r3, [r3, #20]
 800e1ac:	2b02      	cmp	r3, #2
 800e1ae:	d10a      	bne.n	800e1c6 <tcp_slowtmr+0xba>
 800e1b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e1b6:	2b05      	cmp	r3, #5
 800e1b8:	d905      	bls.n	800e1c6 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800e1ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e1be:	3301      	adds	r3, #1
 800e1c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e1c4:	e11e      	b.n	800e404 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800e1c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1c8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e1cc:	2b0b      	cmp	r3, #11
 800e1ce:	d905      	bls.n	800e1dc <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800e1d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e1d4:	3301      	adds	r3, #1
 800e1d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e1da:	e113      	b.n	800e404 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800e1dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1de:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d075      	beq.n	800e2d2 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800e1e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d006      	beq.n	800e1fc <tcp_slowtmr+0xf0>
 800e1ee:	4b62      	ldr	r3, [pc, #392]	; (800e378 <tcp_slowtmr+0x26c>)
 800e1f0:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800e1f4:	4965      	ldr	r1, [pc, #404]	; (800e38c <tcp_slowtmr+0x280>)
 800e1f6:	4862      	ldr	r0, [pc, #392]	; (800e380 <tcp_slowtmr+0x274>)
 800e1f8:	f008 f984 	bl	8016504 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800e1fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e200:	2b00      	cmp	r3, #0
 800e202:	d106      	bne.n	800e212 <tcp_slowtmr+0x106>
 800e204:	4b5c      	ldr	r3, [pc, #368]	; (800e378 <tcp_slowtmr+0x26c>)
 800e206:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800e20a:	4961      	ldr	r1, [pc, #388]	; (800e390 <tcp_slowtmr+0x284>)
 800e20c:	485c      	ldr	r0, [pc, #368]	; (800e380 <tcp_slowtmr+0x274>)
 800e20e:	f008 f979 	bl	8016504 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800e212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e214:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e218:	2b0b      	cmp	r3, #11
 800e21a:	d905      	bls.n	800e228 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800e21c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e220:	3301      	adds	r3, #1
 800e222:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e226:	e0ed      	b.n	800e404 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800e228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e22a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e22e:	3b01      	subs	r3, #1
 800e230:	4a58      	ldr	r2, [pc, #352]	; (800e394 <tcp_slowtmr+0x288>)
 800e232:	5cd3      	ldrb	r3, [r2, r3]
 800e234:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800e236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e238:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e23c:	7c7a      	ldrb	r2, [r7, #17]
 800e23e:	429a      	cmp	r2, r3
 800e240:	d907      	bls.n	800e252 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800e242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e244:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e248:	3301      	adds	r3, #1
 800e24a:	b2da      	uxtb	r2, r3
 800e24c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e24e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800e252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e254:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e258:	7c7a      	ldrb	r2, [r7, #17]
 800e25a:	429a      	cmp	r2, r3
 800e25c:	f200 80d2 	bhi.w	800e404 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800e260:	2301      	movs	r3, #1
 800e262:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800e264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e266:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d108      	bne.n	800e280 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800e26e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e270:	f004 fc26 	bl	8012ac0 <tcp_zero_window_probe>
 800e274:	4603      	mov	r3, r0
 800e276:	2b00      	cmp	r3, #0
 800e278:	d014      	beq.n	800e2a4 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800e27a:	2300      	movs	r3, #0
 800e27c:	623b      	str	r3, [r7, #32]
 800e27e:	e011      	b.n	800e2a4 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800e280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e282:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e286:	4619      	mov	r1, r3
 800e288:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e28a:	f003 faeb 	bl	8011864 <tcp_split_unsent_seg>
 800e28e:	4603      	mov	r3, r0
 800e290:	2b00      	cmp	r3, #0
 800e292:	d107      	bne.n	800e2a4 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800e294:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e296:	f003 fd6b 	bl	8011d70 <tcp_output>
 800e29a:	4603      	mov	r3, r0
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d101      	bne.n	800e2a4 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800e2a4:	6a3b      	ldr	r3, [r7, #32]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	f000 80ac 	beq.w	800e404 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800e2ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2ae:	2200      	movs	r2, #0
 800e2b0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e2b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2b6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e2ba:	2b06      	cmp	r3, #6
 800e2bc:	f200 80a2 	bhi.w	800e404 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800e2c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2c2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e2c6:	3301      	adds	r3, #1
 800e2c8:	b2da      	uxtb	r2, r3
 800e2ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2cc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800e2d0:	e098      	b.n	800e404 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800e2d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2d4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	db0f      	blt.n	800e2fc <tcp_slowtmr+0x1f0>
 800e2dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2de:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e2e2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e2e6:	4293      	cmp	r3, r2
 800e2e8:	d008      	beq.n	800e2fc <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800e2ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2ec:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e2f0:	b29b      	uxth	r3, r3
 800e2f2:	3301      	adds	r3, #1
 800e2f4:	b29b      	uxth	r3, r3
 800e2f6:	b21a      	sxth	r2, r3
 800e2f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2fa:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800e2fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2fe:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800e302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e304:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e308:	429a      	cmp	r2, r3
 800e30a:	db7b      	blt.n	800e404 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800e30c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e30e:	f004 f821 	bl	8012354 <tcp_rexmit_rto_prepare>
 800e312:	4603      	mov	r3, r0
 800e314:	2b00      	cmp	r3, #0
 800e316:	d007      	beq.n	800e328 <tcp_slowtmr+0x21c>
 800e318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e31a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d171      	bne.n	800e404 <tcp_slowtmr+0x2f8>
 800e320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e322:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e324:	2b00      	cmp	r3, #0
 800e326:	d06d      	beq.n	800e404 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800e328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e32a:	7d1b      	ldrb	r3, [r3, #20]
 800e32c:	2b02      	cmp	r3, #2
 800e32e:	d03a      	beq.n	800e3a6 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800e330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e332:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e336:	2b0c      	cmp	r3, #12
 800e338:	bf28      	it	cs
 800e33a:	230c      	movcs	r3, #12
 800e33c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800e33e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e340:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e344:	10db      	asrs	r3, r3, #3
 800e346:	b21b      	sxth	r3, r3
 800e348:	461a      	mov	r2, r3
 800e34a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e34c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e350:	4413      	add	r3, r2
 800e352:	7efa      	ldrb	r2, [r7, #27]
 800e354:	4910      	ldr	r1, [pc, #64]	; (800e398 <tcp_slowtmr+0x28c>)
 800e356:	5c8a      	ldrb	r2, [r1, r2]
 800e358:	4093      	lsls	r3, r2
 800e35a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800e35c:	697b      	ldr	r3, [r7, #20]
 800e35e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800e362:	4293      	cmp	r3, r2
 800e364:	dc1a      	bgt.n	800e39c <tcp_slowtmr+0x290>
 800e366:	697b      	ldr	r3, [r7, #20]
 800e368:	b21a      	sxth	r2, r3
 800e36a:	e019      	b.n	800e3a0 <tcp_slowtmr+0x294>
 800e36c:	2000af60 	.word	0x2000af60
 800e370:	20004216 	.word	0x20004216
 800e374:	2000af5c 	.word	0x2000af5c
 800e378:	0801816c 	.word	0x0801816c
 800e37c:	080184b0 	.word	0x080184b0
 800e380:	080181b0 	.word	0x080181b0
 800e384:	080184dc 	.word	0x080184dc
 800e388:	08018508 	.word	0x08018508
 800e38c:	08018538 	.word	0x08018538
 800e390:	0801856c 	.word	0x0801856c
 800e394:	0801a1c0 	.word	0x0801a1c0
 800e398:	0801a1b0 	.word	0x0801a1b0
 800e39c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e3a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800e3a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3a8:	2200      	movs	r2, #0
 800e3aa:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e3ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3ae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e3b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3b4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e3b8:	4293      	cmp	r3, r2
 800e3ba:	bf28      	it	cs
 800e3bc:	4613      	movcs	r3, r2
 800e3be:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800e3c0:	8a7b      	ldrh	r3, [r7, #18]
 800e3c2:	085b      	lsrs	r3, r3, #1
 800e3c4:	b29a      	uxth	r2, r3
 800e3c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3c8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e3cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3ce:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e3d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e3d6:	005b      	lsls	r3, r3, #1
 800e3d8:	b29b      	uxth	r3, r3
 800e3da:	429a      	cmp	r2, r3
 800e3dc:	d206      	bcs.n	800e3ec <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800e3de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e3e2:	005b      	lsls	r3, r3, #1
 800e3e4:	b29a      	uxth	r2, r3
 800e3e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3e8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800e3ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3ee:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800e3f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3f2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800e3f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3f8:	2200      	movs	r2, #0
 800e3fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800e3fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e400:	f004 f818 	bl	8012434 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800e404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e406:	7d1b      	ldrb	r3, [r3, #20]
 800e408:	2b06      	cmp	r3, #6
 800e40a:	d111      	bne.n	800e430 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800e40c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e40e:	8b5b      	ldrh	r3, [r3, #26]
 800e410:	f003 0310 	and.w	r3, r3, #16
 800e414:	2b00      	cmp	r3, #0
 800e416:	d00b      	beq.n	800e430 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e418:	4b9d      	ldr	r3, [pc, #628]	; (800e690 <tcp_slowtmr+0x584>)
 800e41a:	681a      	ldr	r2, [r3, #0]
 800e41c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e41e:	6a1b      	ldr	r3, [r3, #32]
 800e420:	1ad3      	subs	r3, r2, r3
 800e422:	2b28      	cmp	r3, #40	; 0x28
 800e424:	d904      	bls.n	800e430 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800e426:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e42a:	3301      	adds	r3, #1
 800e42c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e432:	7a5b      	ldrb	r3, [r3, #9]
 800e434:	f003 0308 	and.w	r3, r3, #8
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d04c      	beq.n	800e4d6 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800e43c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e43e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e440:	2b04      	cmp	r3, #4
 800e442:	d003      	beq.n	800e44c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800e444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e446:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800e448:	2b07      	cmp	r3, #7
 800e44a:	d144      	bne.n	800e4d6 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e44c:	4b90      	ldr	r3, [pc, #576]	; (800e690 <tcp_slowtmr+0x584>)
 800e44e:	681a      	ldr	r2, [r3, #0]
 800e450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e452:	6a1b      	ldr	r3, [r3, #32]
 800e454:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800e456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e458:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e45c:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800e460:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800e464:	498b      	ldr	r1, [pc, #556]	; (800e694 <tcp_slowtmr+0x588>)
 800e466:	fba1 1303 	umull	r1, r3, r1, r3
 800e46a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e46c:	429a      	cmp	r2, r3
 800e46e:	d90a      	bls.n	800e486 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800e470:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e474:	3301      	adds	r3, #1
 800e476:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800e47a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e47e:	3301      	adds	r3, #1
 800e480:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e484:	e027      	b.n	800e4d6 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e486:	4b82      	ldr	r3, [pc, #520]	; (800e690 <tcp_slowtmr+0x584>)
 800e488:	681a      	ldr	r2, [r3, #0]
 800e48a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e48c:	6a1b      	ldr	r3, [r3, #32]
 800e48e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800e490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e492:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800e496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e498:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e49c:	4618      	mov	r0, r3
 800e49e:	4b7e      	ldr	r3, [pc, #504]	; (800e698 <tcp_slowtmr+0x58c>)
 800e4a0:	fb03 f300 	mul.w	r3, r3, r0
 800e4a4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800e4a6:	497b      	ldr	r1, [pc, #492]	; (800e694 <tcp_slowtmr+0x588>)
 800e4a8:	fba1 1303 	umull	r1, r3, r1, r3
 800e4ac:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e4ae:	429a      	cmp	r2, r3
 800e4b0:	d911      	bls.n	800e4d6 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800e4b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e4b4:	f004 fac4 	bl	8012a40 <tcp_keepalive>
 800e4b8:	4603      	mov	r3, r0
 800e4ba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800e4be:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d107      	bne.n	800e4d6 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800e4c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4c8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e4cc:	3301      	adds	r3, #1
 800e4ce:	b2da      	uxtb	r2, r3
 800e4d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4d2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800e4d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d011      	beq.n	800e502 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800e4de:	4b6c      	ldr	r3, [pc, #432]	; (800e690 <tcp_slowtmr+0x584>)
 800e4e0:	681a      	ldr	r2, [r3, #0]
 800e4e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4e4:	6a1b      	ldr	r3, [r3, #32]
 800e4e6:	1ad2      	subs	r2, r2, r3
 800e4e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4ea:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e4ee:	4619      	mov	r1, r3
 800e4f0:	460b      	mov	r3, r1
 800e4f2:	005b      	lsls	r3, r3, #1
 800e4f4:	440b      	add	r3, r1
 800e4f6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800e4f8:	429a      	cmp	r2, r3
 800e4fa:	d302      	bcc.n	800e502 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800e4fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e4fe:	f000 fddb 	bl	800f0b8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800e502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e504:	7d1b      	ldrb	r3, [r3, #20]
 800e506:	2b03      	cmp	r3, #3
 800e508:	d10b      	bne.n	800e522 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e50a:	4b61      	ldr	r3, [pc, #388]	; (800e690 <tcp_slowtmr+0x584>)
 800e50c:	681a      	ldr	r2, [r3, #0]
 800e50e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e510:	6a1b      	ldr	r3, [r3, #32]
 800e512:	1ad3      	subs	r3, r2, r3
 800e514:	2b28      	cmp	r3, #40	; 0x28
 800e516:	d904      	bls.n	800e522 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800e518:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e51c:	3301      	adds	r3, #1
 800e51e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800e522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e524:	7d1b      	ldrb	r3, [r3, #20]
 800e526:	2b09      	cmp	r3, #9
 800e528:	d10b      	bne.n	800e542 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e52a:	4b59      	ldr	r3, [pc, #356]	; (800e690 <tcp_slowtmr+0x584>)
 800e52c:	681a      	ldr	r2, [r3, #0]
 800e52e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e530:	6a1b      	ldr	r3, [r3, #32]
 800e532:	1ad3      	subs	r3, r2, r3
 800e534:	2bf0      	cmp	r3, #240	; 0xf0
 800e536:	d904      	bls.n	800e542 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800e538:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e53c:	3301      	adds	r3, #1
 800e53e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e542:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e546:	2b00      	cmp	r3, #0
 800e548:	d060      	beq.n	800e60c <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800e54a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e54c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e550:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800e552:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e554:	f000 fbfc 	bl	800ed50 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800e558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d010      	beq.n	800e580 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e55e:	4b4f      	ldr	r3, [pc, #316]	; (800e69c <tcp_slowtmr+0x590>)
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e564:	429a      	cmp	r2, r3
 800e566:	d106      	bne.n	800e576 <tcp_slowtmr+0x46a>
 800e568:	4b4d      	ldr	r3, [pc, #308]	; (800e6a0 <tcp_slowtmr+0x594>)
 800e56a:	f240 526d 	movw	r2, #1389	; 0x56d
 800e56e:	494d      	ldr	r1, [pc, #308]	; (800e6a4 <tcp_slowtmr+0x598>)
 800e570:	484d      	ldr	r0, [pc, #308]	; (800e6a8 <tcp_slowtmr+0x59c>)
 800e572:	f007 ffc7 	bl	8016504 <iprintf>
        prev->next = pcb->next;
 800e576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e578:	68da      	ldr	r2, [r3, #12]
 800e57a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e57c:	60da      	str	r2, [r3, #12]
 800e57e:	e00f      	b.n	800e5a0 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e580:	4b46      	ldr	r3, [pc, #280]	; (800e69c <tcp_slowtmr+0x590>)
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e586:	429a      	cmp	r2, r3
 800e588:	d006      	beq.n	800e598 <tcp_slowtmr+0x48c>
 800e58a:	4b45      	ldr	r3, [pc, #276]	; (800e6a0 <tcp_slowtmr+0x594>)
 800e58c:	f240 5271 	movw	r2, #1393	; 0x571
 800e590:	4946      	ldr	r1, [pc, #280]	; (800e6ac <tcp_slowtmr+0x5a0>)
 800e592:	4845      	ldr	r0, [pc, #276]	; (800e6a8 <tcp_slowtmr+0x59c>)
 800e594:	f007 ffb6 	bl	8016504 <iprintf>
        tcp_active_pcbs = pcb->next;
 800e598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e59a:	68db      	ldr	r3, [r3, #12]
 800e59c:	4a3f      	ldr	r2, [pc, #252]	; (800e69c <tcp_slowtmr+0x590>)
 800e59e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800e5a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d013      	beq.n	800e5d0 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e5a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5aa:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e5ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5ae:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e5b0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800e5b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5b4:	3304      	adds	r3, #4
 800e5b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e5b8:	8ad2      	ldrh	r2, [r2, #22]
 800e5ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e5bc:	8b09      	ldrh	r1, [r1, #24]
 800e5be:	9102      	str	r1, [sp, #8]
 800e5c0:	9201      	str	r2, [sp, #4]
 800e5c2:	9300      	str	r3, [sp, #0]
 800e5c4:	462b      	mov	r3, r5
 800e5c6:	4622      	mov	r2, r4
 800e5c8:	4601      	mov	r1, r0
 800e5ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e5cc:	f004 f984 	bl	80128d8 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800e5d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5d2:	691b      	ldr	r3, [r3, #16]
 800e5d4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800e5d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5d8:	7d1b      	ldrb	r3, [r3, #20]
 800e5da:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800e5dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5de:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800e5e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5e2:	68db      	ldr	r3, [r3, #12]
 800e5e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e5e6:	6838      	ldr	r0, [r7, #0]
 800e5e8:	f7ff f9f2 	bl	800d9d0 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800e5ec:	4b30      	ldr	r3, [pc, #192]	; (800e6b0 <tcp_slowtmr+0x5a4>)
 800e5ee:	2200      	movs	r2, #0
 800e5f0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d004      	beq.n	800e602 <tcp_slowtmr+0x4f6>
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	f06f 010c 	mvn.w	r1, #12
 800e5fe:	68b8      	ldr	r0, [r7, #8]
 800e600:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800e602:	4b2b      	ldr	r3, [pc, #172]	; (800e6b0 <tcp_slowtmr+0x5a4>)
 800e604:	781b      	ldrb	r3, [r3, #0]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d037      	beq.n	800e67a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800e60a:	e590      	b.n	800e12e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800e60c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e60e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e612:	68db      	ldr	r3, [r3, #12]
 800e614:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800e616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e618:	7f1b      	ldrb	r3, [r3, #28]
 800e61a:	3301      	adds	r3, #1
 800e61c:	b2da      	uxtb	r2, r3
 800e61e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e620:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800e622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e624:	7f1a      	ldrb	r2, [r3, #28]
 800e626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e628:	7f5b      	ldrb	r3, [r3, #29]
 800e62a:	429a      	cmp	r2, r3
 800e62c:	d325      	bcc.n	800e67a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800e62e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e630:	2200      	movs	r2, #0
 800e632:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800e634:	4b1e      	ldr	r3, [pc, #120]	; (800e6b0 <tcp_slowtmr+0x5a4>)
 800e636:	2200      	movs	r2, #0
 800e638:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800e63a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e63c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e640:	2b00      	cmp	r3, #0
 800e642:	d00b      	beq.n	800e65c <tcp_slowtmr+0x550>
 800e644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e646:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e64a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e64c:	6912      	ldr	r2, [r2, #16]
 800e64e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e650:	4610      	mov	r0, r2
 800e652:	4798      	blx	r3
 800e654:	4603      	mov	r3, r0
 800e656:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800e65a:	e002      	b.n	800e662 <tcp_slowtmr+0x556>
 800e65c:	2300      	movs	r3, #0
 800e65e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800e662:	4b13      	ldr	r3, [pc, #76]	; (800e6b0 <tcp_slowtmr+0x5a4>)
 800e664:	781b      	ldrb	r3, [r3, #0]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d000      	beq.n	800e66c <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800e66a:	e560      	b.n	800e12e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800e66c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e670:	2b00      	cmp	r3, #0
 800e672:	d102      	bne.n	800e67a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800e674:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e676:	f003 fb7b 	bl	8011d70 <tcp_output>
  while (pcb != NULL) {
 800e67a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	f47f ad5c 	bne.w	800e13a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800e682:	2300      	movs	r3, #0
 800e684:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800e686:	4b0b      	ldr	r3, [pc, #44]	; (800e6b4 <tcp_slowtmr+0x5a8>)
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e68c:	e067      	b.n	800e75e <tcp_slowtmr+0x652>
 800e68e:	bf00      	nop
 800e690:	2000af60 	.word	0x2000af60
 800e694:	10624dd3 	.word	0x10624dd3
 800e698:	000124f8 	.word	0x000124f8
 800e69c:	2000af5c 	.word	0x2000af5c
 800e6a0:	0801816c 	.word	0x0801816c
 800e6a4:	080185a4 	.word	0x080185a4
 800e6a8:	080181b0 	.word	0x080181b0
 800e6ac:	080185d0 	.word	0x080185d0
 800e6b0:	2000af58 	.word	0x2000af58
 800e6b4:	2000af6c 	.word	0x2000af6c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e6b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6ba:	7d1b      	ldrb	r3, [r3, #20]
 800e6bc:	2b0a      	cmp	r3, #10
 800e6be:	d006      	beq.n	800e6ce <tcp_slowtmr+0x5c2>
 800e6c0:	4b2b      	ldr	r3, [pc, #172]	; (800e770 <tcp_slowtmr+0x664>)
 800e6c2:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800e6c6:	492b      	ldr	r1, [pc, #172]	; (800e774 <tcp_slowtmr+0x668>)
 800e6c8:	482b      	ldr	r0, [pc, #172]	; (800e778 <tcp_slowtmr+0x66c>)
 800e6ca:	f007 ff1b 	bl	8016504 <iprintf>
    pcb_remove = 0;
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e6d4:	4b29      	ldr	r3, [pc, #164]	; (800e77c <tcp_slowtmr+0x670>)
 800e6d6:	681a      	ldr	r2, [r3, #0]
 800e6d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6da:	6a1b      	ldr	r3, [r3, #32]
 800e6dc:	1ad3      	subs	r3, r2, r3
 800e6de:	2bf0      	cmp	r3, #240	; 0xf0
 800e6e0:	d904      	bls.n	800e6ec <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800e6e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e6e6:	3301      	adds	r3, #1
 800e6e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e6ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d02f      	beq.n	800e754 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800e6f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e6f6:	f000 fb2b 	bl	800ed50 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800e6fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d010      	beq.n	800e722 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800e700:	4b1f      	ldr	r3, [pc, #124]	; (800e780 <tcp_slowtmr+0x674>)
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e706:	429a      	cmp	r2, r3
 800e708:	d106      	bne.n	800e718 <tcp_slowtmr+0x60c>
 800e70a:	4b19      	ldr	r3, [pc, #100]	; (800e770 <tcp_slowtmr+0x664>)
 800e70c:	f240 52af 	movw	r2, #1455	; 0x5af
 800e710:	491c      	ldr	r1, [pc, #112]	; (800e784 <tcp_slowtmr+0x678>)
 800e712:	4819      	ldr	r0, [pc, #100]	; (800e778 <tcp_slowtmr+0x66c>)
 800e714:	f007 fef6 	bl	8016504 <iprintf>
        prev->next = pcb->next;
 800e718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e71a:	68da      	ldr	r2, [r3, #12]
 800e71c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e71e:	60da      	str	r2, [r3, #12]
 800e720:	e00f      	b.n	800e742 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800e722:	4b17      	ldr	r3, [pc, #92]	; (800e780 <tcp_slowtmr+0x674>)
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e728:	429a      	cmp	r2, r3
 800e72a:	d006      	beq.n	800e73a <tcp_slowtmr+0x62e>
 800e72c:	4b10      	ldr	r3, [pc, #64]	; (800e770 <tcp_slowtmr+0x664>)
 800e72e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800e732:	4915      	ldr	r1, [pc, #84]	; (800e788 <tcp_slowtmr+0x67c>)
 800e734:	4810      	ldr	r0, [pc, #64]	; (800e778 <tcp_slowtmr+0x66c>)
 800e736:	f007 fee5 	bl	8016504 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800e73a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e73c:	68db      	ldr	r3, [r3, #12]
 800e73e:	4a10      	ldr	r2, [pc, #64]	; (800e780 <tcp_slowtmr+0x674>)
 800e740:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800e742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e744:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800e746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e748:	68db      	ldr	r3, [r3, #12]
 800e74a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e74c:	69f8      	ldr	r0, [r7, #28]
 800e74e:	f7ff f93f 	bl	800d9d0 <tcp_free>
 800e752:	e004      	b.n	800e75e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800e754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e756:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e75a:	68db      	ldr	r3, [r3, #12]
 800e75c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e75e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e760:	2b00      	cmp	r3, #0
 800e762:	d1a9      	bne.n	800e6b8 <tcp_slowtmr+0x5ac>
    }
  }
}
 800e764:	bf00      	nop
 800e766:	bf00      	nop
 800e768:	3730      	adds	r7, #48	; 0x30
 800e76a:	46bd      	mov	sp, r7
 800e76c:	bdb0      	pop	{r4, r5, r7, pc}
 800e76e:	bf00      	nop
 800e770:	0801816c 	.word	0x0801816c
 800e774:	080185fc 	.word	0x080185fc
 800e778:	080181b0 	.word	0x080181b0
 800e77c:	2000af60 	.word	0x2000af60
 800e780:	2000af6c 	.word	0x2000af6c
 800e784:	0801862c 	.word	0x0801862c
 800e788:	08018654 	.word	0x08018654

0800e78c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800e78c:	b580      	push	{r7, lr}
 800e78e:	b082      	sub	sp, #8
 800e790:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800e792:	4b2d      	ldr	r3, [pc, #180]	; (800e848 <tcp_fasttmr+0xbc>)
 800e794:	781b      	ldrb	r3, [r3, #0]
 800e796:	3301      	adds	r3, #1
 800e798:	b2da      	uxtb	r2, r3
 800e79a:	4b2b      	ldr	r3, [pc, #172]	; (800e848 <tcp_fasttmr+0xbc>)
 800e79c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800e79e:	4b2b      	ldr	r3, [pc, #172]	; (800e84c <tcp_fasttmr+0xc0>)
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e7a4:	e048      	b.n	800e838 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	7f9a      	ldrb	r2, [r3, #30]
 800e7aa:	4b27      	ldr	r3, [pc, #156]	; (800e848 <tcp_fasttmr+0xbc>)
 800e7ac:	781b      	ldrb	r3, [r3, #0]
 800e7ae:	429a      	cmp	r2, r3
 800e7b0:	d03f      	beq.n	800e832 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800e7b2:	4b25      	ldr	r3, [pc, #148]	; (800e848 <tcp_fasttmr+0xbc>)
 800e7b4:	781a      	ldrb	r2, [r3, #0]
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	8b5b      	ldrh	r3, [r3, #26]
 800e7be:	f003 0301 	and.w	r3, r3, #1
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d010      	beq.n	800e7e8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	8b5b      	ldrh	r3, [r3, #26]
 800e7ca:	f043 0302 	orr.w	r3, r3, #2
 800e7ce:	b29a      	uxth	r2, r3
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800e7d4:	6878      	ldr	r0, [r7, #4]
 800e7d6:	f003 facb 	bl	8011d70 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	8b5b      	ldrh	r3, [r3, #26]
 800e7de:	f023 0303 	bic.w	r3, r3, #3
 800e7e2:	b29a      	uxth	r2, r3
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	8b5b      	ldrh	r3, [r3, #26]
 800e7ec:	f003 0308 	and.w	r3, r3, #8
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d009      	beq.n	800e808 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	8b5b      	ldrh	r3, [r3, #26]
 800e7f8:	f023 0308 	bic.w	r3, r3, #8
 800e7fc:	b29a      	uxth	r2, r3
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800e802:	6878      	ldr	r0, [r7, #4]
 800e804:	f7ff fa78 	bl	800dcf8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	68db      	ldr	r3, [r3, #12]
 800e80c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e812:	2b00      	cmp	r3, #0
 800e814:	d00a      	beq.n	800e82c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800e816:	4b0e      	ldr	r3, [pc, #56]	; (800e850 <tcp_fasttmr+0xc4>)
 800e818:	2200      	movs	r2, #0
 800e81a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800e81c:	6878      	ldr	r0, [r7, #4]
 800e81e:	f000 f819 	bl	800e854 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800e822:	4b0b      	ldr	r3, [pc, #44]	; (800e850 <tcp_fasttmr+0xc4>)
 800e824:	781b      	ldrb	r3, [r3, #0]
 800e826:	2b00      	cmp	r3, #0
 800e828:	d000      	beq.n	800e82c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800e82a:	e7b8      	b.n	800e79e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800e82c:	683b      	ldr	r3, [r7, #0]
 800e82e:	607b      	str	r3, [r7, #4]
 800e830:	e002      	b.n	800e838 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	68db      	ldr	r3, [r3, #12]
 800e836:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d1b3      	bne.n	800e7a6 <tcp_fasttmr+0x1a>
    }
  }
}
 800e83e:	bf00      	nop
 800e840:	bf00      	nop
 800e842:	3708      	adds	r7, #8
 800e844:	46bd      	mov	sp, r7
 800e846:	bd80      	pop	{r7, pc}
 800e848:	20004216 	.word	0x20004216
 800e84c:	2000af5c 	.word	0x2000af5c
 800e850:	2000af58 	.word	0x2000af58

0800e854 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800e854:	b590      	push	{r4, r7, lr}
 800e856:	b085      	sub	sp, #20
 800e858:	af00      	add	r7, sp, #0
 800e85a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d109      	bne.n	800e876 <tcp_process_refused_data+0x22>
 800e862:	4b37      	ldr	r3, [pc, #220]	; (800e940 <tcp_process_refused_data+0xec>)
 800e864:	f240 6209 	movw	r2, #1545	; 0x609
 800e868:	4936      	ldr	r1, [pc, #216]	; (800e944 <tcp_process_refused_data+0xf0>)
 800e86a:	4837      	ldr	r0, [pc, #220]	; (800e948 <tcp_process_refused_data+0xf4>)
 800e86c:	f007 fe4a 	bl	8016504 <iprintf>
 800e870:	f06f 030f 	mvn.w	r3, #15
 800e874:	e060      	b.n	800e938 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e87a:	7b5b      	ldrb	r3, [r3, #13]
 800e87c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e882:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	2200      	movs	r2, #0
 800e888:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e890:	2b00      	cmp	r3, #0
 800e892:	d00b      	beq.n	800e8ac <tcp_process_refused_data+0x58>
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	6918      	ldr	r0, [r3, #16]
 800e89e:	2300      	movs	r3, #0
 800e8a0:	68ba      	ldr	r2, [r7, #8]
 800e8a2:	6879      	ldr	r1, [r7, #4]
 800e8a4:	47a0      	blx	r4
 800e8a6:	4603      	mov	r3, r0
 800e8a8:	73fb      	strb	r3, [r7, #15]
 800e8aa:	e007      	b.n	800e8bc <tcp_process_refused_data+0x68>
 800e8ac:	2300      	movs	r3, #0
 800e8ae:	68ba      	ldr	r2, [r7, #8]
 800e8b0:	6879      	ldr	r1, [r7, #4]
 800e8b2:	2000      	movs	r0, #0
 800e8b4:	f000 f8a4 	bl	800ea00 <tcp_recv_null>
 800e8b8:	4603      	mov	r3, r0
 800e8ba:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800e8bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d12a      	bne.n	800e91a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800e8c4:	7bbb      	ldrb	r3, [r7, #14]
 800e8c6:	f003 0320 	and.w	r3, r3, #32
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d033      	beq.n	800e936 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e8d2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e8d6:	d005      	beq.n	800e8e4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e8dc:	3301      	adds	r3, #1
 800e8de:	b29a      	uxth	r2, r3
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d00b      	beq.n	800e906 <tcp_process_refused_data+0xb2>
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	6918      	ldr	r0, [r3, #16]
 800e8f8:	2300      	movs	r3, #0
 800e8fa:	2200      	movs	r2, #0
 800e8fc:	6879      	ldr	r1, [r7, #4]
 800e8fe:	47a0      	blx	r4
 800e900:	4603      	mov	r3, r0
 800e902:	73fb      	strb	r3, [r7, #15]
 800e904:	e001      	b.n	800e90a <tcp_process_refused_data+0xb6>
 800e906:	2300      	movs	r3, #0
 800e908:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800e90a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e90e:	f113 0f0d 	cmn.w	r3, #13
 800e912:	d110      	bne.n	800e936 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800e914:	f06f 030c 	mvn.w	r3, #12
 800e918:	e00e      	b.n	800e938 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800e91a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e91e:	f113 0f0d 	cmn.w	r3, #13
 800e922:	d102      	bne.n	800e92a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800e924:	f06f 030c 	mvn.w	r3, #12
 800e928:	e006      	b.n	800e938 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	68ba      	ldr	r2, [r7, #8]
 800e92e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800e930:	f06f 0304 	mvn.w	r3, #4
 800e934:	e000      	b.n	800e938 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800e936:	2300      	movs	r3, #0
}
 800e938:	4618      	mov	r0, r3
 800e93a:	3714      	adds	r7, #20
 800e93c:	46bd      	mov	sp, r7
 800e93e:	bd90      	pop	{r4, r7, pc}
 800e940:	0801816c 	.word	0x0801816c
 800e944:	0801867c 	.word	0x0801867c
 800e948:	080181b0 	.word	0x080181b0

0800e94c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800e94c:	b580      	push	{r7, lr}
 800e94e:	b084      	sub	sp, #16
 800e950:	af00      	add	r7, sp, #0
 800e952:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800e954:	e007      	b.n	800e966 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800e95c:	6878      	ldr	r0, [r7, #4]
 800e95e:	f000 f80a 	bl	800e976 <tcp_seg_free>
    seg = next;
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d1f4      	bne.n	800e956 <tcp_segs_free+0xa>
  }
}
 800e96c:	bf00      	nop
 800e96e:	bf00      	nop
 800e970:	3710      	adds	r7, #16
 800e972:	46bd      	mov	sp, r7
 800e974:	bd80      	pop	{r7, pc}

0800e976 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800e976:	b580      	push	{r7, lr}
 800e978:	b082      	sub	sp, #8
 800e97a:	af00      	add	r7, sp, #0
 800e97c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d00c      	beq.n	800e99e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	685b      	ldr	r3, [r3, #4]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d004      	beq.n	800e996 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	685b      	ldr	r3, [r3, #4]
 800e990:	4618      	mov	r0, r3
 800e992:	f7fe fd71 	bl	800d478 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800e996:	6879      	ldr	r1, [r7, #4]
 800e998:	2003      	movs	r0, #3
 800e99a:	f7fd ff41 	bl	800c820 <memp_free>
  }
}
 800e99e:	bf00      	nop
 800e9a0:	3708      	adds	r7, #8
 800e9a2:	46bd      	mov	sp, r7
 800e9a4:	bd80      	pop	{r7, pc}
	...

0800e9a8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800e9a8:	b580      	push	{r7, lr}
 800e9aa:	b084      	sub	sp, #16
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d106      	bne.n	800e9c4 <tcp_seg_copy+0x1c>
 800e9b6:	4b0f      	ldr	r3, [pc, #60]	; (800e9f4 <tcp_seg_copy+0x4c>)
 800e9b8:	f240 6282 	movw	r2, #1666	; 0x682
 800e9bc:	490e      	ldr	r1, [pc, #56]	; (800e9f8 <tcp_seg_copy+0x50>)
 800e9be:	480f      	ldr	r0, [pc, #60]	; (800e9fc <tcp_seg_copy+0x54>)
 800e9c0:	f007 fda0 	bl	8016504 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800e9c4:	2003      	movs	r0, #3
 800e9c6:	f7fd fed9 	bl	800c77c <memp_malloc>
 800e9ca:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d101      	bne.n	800e9d6 <tcp_seg_copy+0x2e>
    return NULL;
 800e9d2:	2300      	movs	r3, #0
 800e9d4:	e00a      	b.n	800e9ec <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800e9d6:	2210      	movs	r2, #16
 800e9d8:	6879      	ldr	r1, [r7, #4]
 800e9da:	68f8      	ldr	r0, [r7, #12]
 800e9dc:	f007 fd7c 	bl	80164d8 <memcpy>
  pbuf_ref(cseg->p);
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	685b      	ldr	r3, [r3, #4]
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	f7fe fded 	bl	800d5c4 <pbuf_ref>
  return cseg;
 800e9ea:	68fb      	ldr	r3, [r7, #12]
}
 800e9ec:	4618      	mov	r0, r3
 800e9ee:	3710      	adds	r7, #16
 800e9f0:	46bd      	mov	sp, r7
 800e9f2:	bd80      	pop	{r7, pc}
 800e9f4:	0801816c 	.word	0x0801816c
 800e9f8:	080186c0 	.word	0x080186c0
 800e9fc:	080181b0 	.word	0x080181b0

0800ea00 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b084      	sub	sp, #16
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	60f8      	str	r0, [r7, #12]
 800ea08:	60b9      	str	r1, [r7, #8]
 800ea0a:	607a      	str	r2, [r7, #4]
 800ea0c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800ea0e:	68bb      	ldr	r3, [r7, #8]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d109      	bne.n	800ea28 <tcp_recv_null+0x28>
 800ea14:	4b12      	ldr	r3, [pc, #72]	; (800ea60 <tcp_recv_null+0x60>)
 800ea16:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800ea1a:	4912      	ldr	r1, [pc, #72]	; (800ea64 <tcp_recv_null+0x64>)
 800ea1c:	4812      	ldr	r0, [pc, #72]	; (800ea68 <tcp_recv_null+0x68>)
 800ea1e:	f007 fd71 	bl	8016504 <iprintf>
 800ea22:	f06f 030f 	mvn.w	r3, #15
 800ea26:	e016      	b.n	800ea56 <tcp_recv_null+0x56>

  if (p != NULL) {
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d009      	beq.n	800ea42 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	891b      	ldrh	r3, [r3, #8]
 800ea32:	4619      	mov	r1, r3
 800ea34:	68b8      	ldr	r0, [r7, #8]
 800ea36:	f7ff fb19 	bl	800e06c <tcp_recved>
    pbuf_free(p);
 800ea3a:	6878      	ldr	r0, [r7, #4]
 800ea3c:	f7fe fd1c 	bl	800d478 <pbuf_free>
 800ea40:	e008      	b.n	800ea54 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800ea42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d104      	bne.n	800ea54 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800ea4a:	68b8      	ldr	r0, [r7, #8]
 800ea4c:	f7ff f9be 	bl	800ddcc <tcp_close>
 800ea50:	4603      	mov	r3, r0
 800ea52:	e000      	b.n	800ea56 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800ea54:	2300      	movs	r3, #0
}
 800ea56:	4618      	mov	r0, r3
 800ea58:	3710      	adds	r7, #16
 800ea5a:	46bd      	mov	sp, r7
 800ea5c:	bd80      	pop	{r7, pc}
 800ea5e:	bf00      	nop
 800ea60:	0801816c 	.word	0x0801816c
 800ea64:	080186dc 	.word	0x080186dc
 800ea68:	080181b0 	.word	0x080181b0

0800ea6c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b086      	sub	sp, #24
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	4603      	mov	r3, r0
 800ea74:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800ea76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	db01      	blt.n	800ea82 <tcp_kill_prio+0x16>
 800ea7e:	79fb      	ldrb	r3, [r7, #7]
 800ea80:	e000      	b.n	800ea84 <tcp_kill_prio+0x18>
 800ea82:	237f      	movs	r3, #127	; 0x7f
 800ea84:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800ea86:	7afb      	ldrb	r3, [r7, #11]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d034      	beq.n	800eaf6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800ea8c:	7afb      	ldrb	r3, [r7, #11]
 800ea8e:	3b01      	subs	r3, #1
 800ea90:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800ea92:	2300      	movs	r3, #0
 800ea94:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ea96:	2300      	movs	r3, #0
 800ea98:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ea9a:	4b19      	ldr	r3, [pc, #100]	; (800eb00 <tcp_kill_prio+0x94>)
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	617b      	str	r3, [r7, #20]
 800eaa0:	e01f      	b.n	800eae2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800eaa2:	697b      	ldr	r3, [r7, #20]
 800eaa4:	7d5b      	ldrb	r3, [r3, #21]
 800eaa6:	7afa      	ldrb	r2, [r7, #11]
 800eaa8:	429a      	cmp	r2, r3
 800eaaa:	d80c      	bhi.n	800eac6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800eaac:	697b      	ldr	r3, [r7, #20]
 800eaae:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800eab0:	7afa      	ldrb	r2, [r7, #11]
 800eab2:	429a      	cmp	r2, r3
 800eab4:	d112      	bne.n	800eadc <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800eab6:	4b13      	ldr	r3, [pc, #76]	; (800eb04 <tcp_kill_prio+0x98>)
 800eab8:	681a      	ldr	r2, [r3, #0]
 800eaba:	697b      	ldr	r3, [r7, #20]
 800eabc:	6a1b      	ldr	r3, [r3, #32]
 800eabe:	1ad3      	subs	r3, r2, r3
 800eac0:	68fa      	ldr	r2, [r7, #12]
 800eac2:	429a      	cmp	r2, r3
 800eac4:	d80a      	bhi.n	800eadc <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800eac6:	4b0f      	ldr	r3, [pc, #60]	; (800eb04 <tcp_kill_prio+0x98>)
 800eac8:	681a      	ldr	r2, [r3, #0]
 800eaca:	697b      	ldr	r3, [r7, #20]
 800eacc:	6a1b      	ldr	r3, [r3, #32]
 800eace:	1ad3      	subs	r3, r2, r3
 800ead0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800ead2:	697b      	ldr	r3, [r7, #20]
 800ead4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800ead6:	697b      	ldr	r3, [r7, #20]
 800ead8:	7d5b      	ldrb	r3, [r3, #21]
 800eada:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800eadc:	697b      	ldr	r3, [r7, #20]
 800eade:	68db      	ldr	r3, [r3, #12]
 800eae0:	617b      	str	r3, [r7, #20]
 800eae2:	697b      	ldr	r3, [r7, #20]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d1dc      	bne.n	800eaa2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800eae8:	693b      	ldr	r3, [r7, #16]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d004      	beq.n	800eaf8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800eaee:	6938      	ldr	r0, [r7, #16]
 800eaf0:	f7ff fa56 	bl	800dfa0 <tcp_abort>
 800eaf4:	e000      	b.n	800eaf8 <tcp_kill_prio+0x8c>
    return;
 800eaf6:	bf00      	nop
  }
}
 800eaf8:	3718      	adds	r7, #24
 800eafa:	46bd      	mov	sp, r7
 800eafc:	bd80      	pop	{r7, pc}
 800eafe:	bf00      	nop
 800eb00:	2000af5c 	.word	0x2000af5c
 800eb04:	2000af60 	.word	0x2000af60

0800eb08 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800eb08:	b580      	push	{r7, lr}
 800eb0a:	b086      	sub	sp, #24
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	4603      	mov	r3, r0
 800eb10:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800eb12:	79fb      	ldrb	r3, [r7, #7]
 800eb14:	2b08      	cmp	r3, #8
 800eb16:	d009      	beq.n	800eb2c <tcp_kill_state+0x24>
 800eb18:	79fb      	ldrb	r3, [r7, #7]
 800eb1a:	2b09      	cmp	r3, #9
 800eb1c:	d006      	beq.n	800eb2c <tcp_kill_state+0x24>
 800eb1e:	4b1a      	ldr	r3, [pc, #104]	; (800eb88 <tcp_kill_state+0x80>)
 800eb20:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800eb24:	4919      	ldr	r1, [pc, #100]	; (800eb8c <tcp_kill_state+0x84>)
 800eb26:	481a      	ldr	r0, [pc, #104]	; (800eb90 <tcp_kill_state+0x88>)
 800eb28:	f007 fcec 	bl	8016504 <iprintf>

  inactivity = 0;
 800eb2c:	2300      	movs	r3, #0
 800eb2e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800eb30:	2300      	movs	r3, #0
 800eb32:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800eb34:	4b17      	ldr	r3, [pc, #92]	; (800eb94 <tcp_kill_state+0x8c>)
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	617b      	str	r3, [r7, #20]
 800eb3a:	e017      	b.n	800eb6c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800eb3c:	697b      	ldr	r3, [r7, #20]
 800eb3e:	7d1b      	ldrb	r3, [r3, #20]
 800eb40:	79fa      	ldrb	r2, [r7, #7]
 800eb42:	429a      	cmp	r2, r3
 800eb44:	d10f      	bne.n	800eb66 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800eb46:	4b14      	ldr	r3, [pc, #80]	; (800eb98 <tcp_kill_state+0x90>)
 800eb48:	681a      	ldr	r2, [r3, #0]
 800eb4a:	697b      	ldr	r3, [r7, #20]
 800eb4c:	6a1b      	ldr	r3, [r3, #32]
 800eb4e:	1ad3      	subs	r3, r2, r3
 800eb50:	68fa      	ldr	r2, [r7, #12]
 800eb52:	429a      	cmp	r2, r3
 800eb54:	d807      	bhi.n	800eb66 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800eb56:	4b10      	ldr	r3, [pc, #64]	; (800eb98 <tcp_kill_state+0x90>)
 800eb58:	681a      	ldr	r2, [r3, #0]
 800eb5a:	697b      	ldr	r3, [r7, #20]
 800eb5c:	6a1b      	ldr	r3, [r3, #32]
 800eb5e:	1ad3      	subs	r3, r2, r3
 800eb60:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800eb62:	697b      	ldr	r3, [r7, #20]
 800eb64:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800eb66:	697b      	ldr	r3, [r7, #20]
 800eb68:	68db      	ldr	r3, [r3, #12]
 800eb6a:	617b      	str	r3, [r7, #20]
 800eb6c:	697b      	ldr	r3, [r7, #20]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d1e4      	bne.n	800eb3c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800eb72:	693b      	ldr	r3, [r7, #16]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d003      	beq.n	800eb80 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800eb78:	2100      	movs	r1, #0
 800eb7a:	6938      	ldr	r0, [r7, #16]
 800eb7c:	f7ff f952 	bl	800de24 <tcp_abandon>
  }
}
 800eb80:	bf00      	nop
 800eb82:	3718      	adds	r7, #24
 800eb84:	46bd      	mov	sp, r7
 800eb86:	bd80      	pop	{r7, pc}
 800eb88:	0801816c 	.word	0x0801816c
 800eb8c:	080186f8 	.word	0x080186f8
 800eb90:	080181b0 	.word	0x080181b0
 800eb94:	2000af5c 	.word	0x2000af5c
 800eb98:	2000af60 	.word	0x2000af60

0800eb9c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800eb9c:	b580      	push	{r7, lr}
 800eb9e:	b084      	sub	sp, #16
 800eba0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800eba2:	2300      	movs	r3, #0
 800eba4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800eba6:	2300      	movs	r3, #0
 800eba8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ebaa:	4b12      	ldr	r3, [pc, #72]	; (800ebf4 <tcp_kill_timewait+0x58>)
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	60fb      	str	r3, [r7, #12]
 800ebb0:	e012      	b.n	800ebd8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ebb2:	4b11      	ldr	r3, [pc, #68]	; (800ebf8 <tcp_kill_timewait+0x5c>)
 800ebb4:	681a      	ldr	r2, [r3, #0]
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	6a1b      	ldr	r3, [r3, #32]
 800ebba:	1ad3      	subs	r3, r2, r3
 800ebbc:	687a      	ldr	r2, [r7, #4]
 800ebbe:	429a      	cmp	r2, r3
 800ebc0:	d807      	bhi.n	800ebd2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800ebc2:	4b0d      	ldr	r3, [pc, #52]	; (800ebf8 <tcp_kill_timewait+0x5c>)
 800ebc4:	681a      	ldr	r2, [r3, #0]
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	6a1b      	ldr	r3, [r3, #32]
 800ebca:	1ad3      	subs	r3, r2, r3
 800ebcc:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	68db      	ldr	r3, [r3, #12]
 800ebd6:	60fb      	str	r3, [r7, #12]
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d1e9      	bne.n	800ebb2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800ebde:	68bb      	ldr	r3, [r7, #8]
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d002      	beq.n	800ebea <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ebe4:	68b8      	ldr	r0, [r7, #8]
 800ebe6:	f7ff f9db 	bl	800dfa0 <tcp_abort>
  }
}
 800ebea:	bf00      	nop
 800ebec:	3710      	adds	r7, #16
 800ebee:	46bd      	mov	sp, r7
 800ebf0:	bd80      	pop	{r7, pc}
 800ebf2:	bf00      	nop
 800ebf4:	2000af6c 	.word	0x2000af6c
 800ebf8:	2000af60 	.word	0x2000af60

0800ebfc <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800ebfc:	b580      	push	{r7, lr}
 800ebfe:	b082      	sub	sp, #8
 800ec00:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800ec02:	4b10      	ldr	r3, [pc, #64]	; (800ec44 <tcp_handle_closepend+0x48>)
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ec08:	e014      	b.n	800ec34 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	68db      	ldr	r3, [r3, #12]
 800ec0e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	8b5b      	ldrh	r3, [r3, #26]
 800ec14:	f003 0308 	and.w	r3, r3, #8
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d009      	beq.n	800ec30 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	8b5b      	ldrh	r3, [r3, #26]
 800ec20:	f023 0308 	bic.w	r3, r3, #8
 800ec24:	b29a      	uxth	r2, r3
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800ec2a:	6878      	ldr	r0, [r7, #4]
 800ec2c:	f7ff f864 	bl	800dcf8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800ec30:	683b      	ldr	r3, [r7, #0]
 800ec32:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d1e7      	bne.n	800ec0a <tcp_handle_closepend+0xe>
  }
}
 800ec3a:	bf00      	nop
 800ec3c:	bf00      	nop
 800ec3e:	3708      	adds	r7, #8
 800ec40:	46bd      	mov	sp, r7
 800ec42:	bd80      	pop	{r7, pc}
 800ec44:	2000af5c 	.word	0x2000af5c

0800ec48 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800ec48:	b580      	push	{r7, lr}
 800ec4a:	b084      	sub	sp, #16
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	4603      	mov	r3, r0
 800ec50:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ec52:	2001      	movs	r0, #1
 800ec54:	f7fd fd92 	bl	800c77c <memp_malloc>
 800ec58:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d126      	bne.n	800ecae <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800ec60:	f7ff ffcc 	bl	800ebfc <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800ec64:	f7ff ff9a 	bl	800eb9c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ec68:	2001      	movs	r0, #1
 800ec6a:	f7fd fd87 	bl	800c77c <memp_malloc>
 800ec6e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d11b      	bne.n	800ecae <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800ec76:	2009      	movs	r0, #9
 800ec78:	f7ff ff46 	bl	800eb08 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ec7c:	2001      	movs	r0, #1
 800ec7e:	f7fd fd7d 	bl	800c77c <memp_malloc>
 800ec82:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d111      	bne.n	800ecae <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800ec8a:	2008      	movs	r0, #8
 800ec8c:	f7ff ff3c 	bl	800eb08 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ec90:	2001      	movs	r0, #1
 800ec92:	f7fd fd73 	bl	800c77c <memp_malloc>
 800ec96:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d107      	bne.n	800ecae <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800ec9e:	79fb      	ldrb	r3, [r7, #7]
 800eca0:	4618      	mov	r0, r3
 800eca2:	f7ff fee3 	bl	800ea6c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800eca6:	2001      	movs	r0, #1
 800eca8:	f7fd fd68 	bl	800c77c <memp_malloc>
 800ecac:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d03f      	beq.n	800ed34 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800ecb4:	229c      	movs	r2, #156	; 0x9c
 800ecb6:	2100      	movs	r1, #0
 800ecb8:	68f8      	ldr	r0, [r7, #12]
 800ecba:	f007 fc1b 	bl	80164f4 <memset>
    pcb->prio = prio;
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	79fa      	ldrb	r2, [r7, #7]
 800ecc2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ecca:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ecd4:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	22ff      	movs	r2, #255	; 0xff
 800ece2:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ecea:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	2206      	movs	r2, #6
 800ecf0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	2206      	movs	r2, #6
 800ecf8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ed00:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	2201      	movs	r2, #1
 800ed06:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800ed0a:	4b0d      	ldr	r3, [pc, #52]	; (800ed40 <tcp_alloc+0xf8>)
 800ed0c:	681a      	ldr	r2, [r3, #0]
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800ed12:	4b0c      	ldr	r3, [pc, #48]	; (800ed44 <tcp_alloc+0xfc>)
 800ed14:	781a      	ldrb	r2, [r3, #0]
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ed20:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	4a08      	ldr	r2, [pc, #32]	; (800ed48 <tcp_alloc+0x100>)
 800ed28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	4a07      	ldr	r2, [pc, #28]	; (800ed4c <tcp_alloc+0x104>)
 800ed30:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800ed34:	68fb      	ldr	r3, [r7, #12]
}
 800ed36:	4618      	mov	r0, r3
 800ed38:	3710      	adds	r7, #16
 800ed3a:	46bd      	mov	sp, r7
 800ed3c:	bd80      	pop	{r7, pc}
 800ed3e:	bf00      	nop
 800ed40:	2000af60 	.word	0x2000af60
 800ed44:	20004216 	.word	0x20004216
 800ed48:	0800ea01 	.word	0x0800ea01
 800ed4c:	006ddd00 	.word	0x006ddd00

0800ed50 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800ed50:	b580      	push	{r7, lr}
 800ed52:	b082      	sub	sp, #8
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d107      	bne.n	800ed6e <tcp_pcb_purge+0x1e>
 800ed5e:	4b21      	ldr	r3, [pc, #132]	; (800ede4 <tcp_pcb_purge+0x94>)
 800ed60:	f640 0251 	movw	r2, #2129	; 0x851
 800ed64:	4920      	ldr	r1, [pc, #128]	; (800ede8 <tcp_pcb_purge+0x98>)
 800ed66:	4821      	ldr	r0, [pc, #132]	; (800edec <tcp_pcb_purge+0x9c>)
 800ed68:	f007 fbcc 	bl	8016504 <iprintf>
 800ed6c:	e037      	b.n	800edde <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	7d1b      	ldrb	r3, [r3, #20]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d033      	beq.n	800edde <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800ed7a:	2b0a      	cmp	r3, #10
 800ed7c:	d02f      	beq.n	800edde <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800ed82:	2b01      	cmp	r3, #1
 800ed84:	d02b      	beq.n	800edde <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d007      	beq.n	800ed9e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ed92:	4618      	mov	r0, r3
 800ed94:	f7fe fb70 	bl	800d478 <pbuf_free>
      pcb->refused_data = NULL;
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	2200      	movs	r2, #0
 800ed9c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d002      	beq.n	800edac <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800eda6:	6878      	ldr	r0, [r7, #4]
 800eda8:	f000 f986 	bl	800f0b8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800edb2:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800edb8:	4618      	mov	r0, r3
 800edba:	f7ff fdc7 	bl	800e94c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800edc2:	4618      	mov	r0, r3
 800edc4:	f7ff fdc2 	bl	800e94c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	2200      	movs	r2, #0
 800edcc:	66da      	str	r2, [r3, #108]	; 0x6c
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	2200      	movs	r2, #0
 800edda:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800edde:	3708      	adds	r7, #8
 800ede0:	46bd      	mov	sp, r7
 800ede2:	bd80      	pop	{r7, pc}
 800ede4:	0801816c 	.word	0x0801816c
 800ede8:	080187b8 	.word	0x080187b8
 800edec:	080181b0 	.word	0x080181b0

0800edf0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b084      	sub	sp, #16
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
 800edf8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800edfa:	683b      	ldr	r3, [r7, #0]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d106      	bne.n	800ee0e <tcp_pcb_remove+0x1e>
 800ee00:	4b3e      	ldr	r3, [pc, #248]	; (800eefc <tcp_pcb_remove+0x10c>)
 800ee02:	f640 0283 	movw	r2, #2179	; 0x883
 800ee06:	493e      	ldr	r1, [pc, #248]	; (800ef00 <tcp_pcb_remove+0x110>)
 800ee08:	483e      	ldr	r0, [pc, #248]	; (800ef04 <tcp_pcb_remove+0x114>)
 800ee0a:	f007 fb7b 	bl	8016504 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d106      	bne.n	800ee22 <tcp_pcb_remove+0x32>
 800ee14:	4b39      	ldr	r3, [pc, #228]	; (800eefc <tcp_pcb_remove+0x10c>)
 800ee16:	f640 0284 	movw	r2, #2180	; 0x884
 800ee1a:	493b      	ldr	r1, [pc, #236]	; (800ef08 <tcp_pcb_remove+0x118>)
 800ee1c:	4839      	ldr	r0, [pc, #228]	; (800ef04 <tcp_pcb_remove+0x114>)
 800ee1e:	f007 fb71 	bl	8016504 <iprintf>

  TCP_RMV(pcblist, pcb);
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	683a      	ldr	r2, [r7, #0]
 800ee28:	429a      	cmp	r2, r3
 800ee2a:	d105      	bne.n	800ee38 <tcp_pcb_remove+0x48>
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	68da      	ldr	r2, [r3, #12]
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	601a      	str	r2, [r3, #0]
 800ee36:	e013      	b.n	800ee60 <tcp_pcb_remove+0x70>
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	60fb      	str	r3, [r7, #12]
 800ee3e:	e00c      	b.n	800ee5a <tcp_pcb_remove+0x6a>
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	68db      	ldr	r3, [r3, #12]
 800ee44:	683a      	ldr	r2, [r7, #0]
 800ee46:	429a      	cmp	r2, r3
 800ee48:	d104      	bne.n	800ee54 <tcp_pcb_remove+0x64>
 800ee4a:	683b      	ldr	r3, [r7, #0]
 800ee4c:	68da      	ldr	r2, [r3, #12]
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	60da      	str	r2, [r3, #12]
 800ee52:	e005      	b.n	800ee60 <tcp_pcb_remove+0x70>
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	68db      	ldr	r3, [r3, #12]
 800ee58:	60fb      	str	r3, [r7, #12]
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d1ef      	bne.n	800ee40 <tcp_pcb_remove+0x50>
 800ee60:	683b      	ldr	r3, [r7, #0]
 800ee62:	2200      	movs	r2, #0
 800ee64:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800ee66:	6838      	ldr	r0, [r7, #0]
 800ee68:	f7ff ff72 	bl	800ed50 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800ee6c:	683b      	ldr	r3, [r7, #0]
 800ee6e:	7d1b      	ldrb	r3, [r3, #20]
 800ee70:	2b0a      	cmp	r3, #10
 800ee72:	d013      	beq.n	800ee9c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800ee74:	683b      	ldr	r3, [r7, #0]
 800ee76:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800ee78:	2b01      	cmp	r3, #1
 800ee7a:	d00f      	beq.n	800ee9c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800ee7c:	683b      	ldr	r3, [r7, #0]
 800ee7e:	8b5b      	ldrh	r3, [r3, #26]
 800ee80:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d009      	beq.n	800ee9c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800ee88:	683b      	ldr	r3, [r7, #0]
 800ee8a:	8b5b      	ldrh	r3, [r3, #26]
 800ee8c:	f043 0302 	orr.w	r3, r3, #2
 800ee90:	b29a      	uxth	r2, r3
 800ee92:	683b      	ldr	r3, [r7, #0]
 800ee94:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ee96:	6838      	ldr	r0, [r7, #0]
 800ee98:	f002 ff6a 	bl	8011d70 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800ee9c:	683b      	ldr	r3, [r7, #0]
 800ee9e:	7d1b      	ldrb	r3, [r3, #20]
 800eea0:	2b01      	cmp	r3, #1
 800eea2:	d020      	beq.n	800eee6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800eea4:	683b      	ldr	r3, [r7, #0]
 800eea6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d006      	beq.n	800eeba <tcp_pcb_remove+0xca>
 800eeac:	4b13      	ldr	r3, [pc, #76]	; (800eefc <tcp_pcb_remove+0x10c>)
 800eeae:	f640 0293 	movw	r2, #2195	; 0x893
 800eeb2:	4916      	ldr	r1, [pc, #88]	; (800ef0c <tcp_pcb_remove+0x11c>)
 800eeb4:	4813      	ldr	r0, [pc, #76]	; (800ef04 <tcp_pcb_remove+0x114>)
 800eeb6:	f007 fb25 	bl	8016504 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800eeba:	683b      	ldr	r3, [r7, #0]
 800eebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d006      	beq.n	800eed0 <tcp_pcb_remove+0xe0>
 800eec2:	4b0e      	ldr	r3, [pc, #56]	; (800eefc <tcp_pcb_remove+0x10c>)
 800eec4:	f640 0294 	movw	r2, #2196	; 0x894
 800eec8:	4911      	ldr	r1, [pc, #68]	; (800ef10 <tcp_pcb_remove+0x120>)
 800eeca:	480e      	ldr	r0, [pc, #56]	; (800ef04 <tcp_pcb_remove+0x114>)
 800eecc:	f007 fb1a 	bl	8016504 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800eed0:	683b      	ldr	r3, [r7, #0]
 800eed2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d006      	beq.n	800eee6 <tcp_pcb_remove+0xf6>
 800eed8:	4b08      	ldr	r3, [pc, #32]	; (800eefc <tcp_pcb_remove+0x10c>)
 800eeda:	f640 0296 	movw	r2, #2198	; 0x896
 800eede:	490d      	ldr	r1, [pc, #52]	; (800ef14 <tcp_pcb_remove+0x124>)
 800eee0:	4808      	ldr	r0, [pc, #32]	; (800ef04 <tcp_pcb_remove+0x114>)
 800eee2:	f007 fb0f 	bl	8016504 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800eee6:	683b      	ldr	r3, [r7, #0]
 800eee8:	2200      	movs	r2, #0
 800eeea:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800eeec:	683b      	ldr	r3, [r7, #0]
 800eeee:	2200      	movs	r2, #0
 800eef0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800eef2:	bf00      	nop
 800eef4:	3710      	adds	r7, #16
 800eef6:	46bd      	mov	sp, r7
 800eef8:	bd80      	pop	{r7, pc}
 800eefa:	bf00      	nop
 800eefc:	0801816c 	.word	0x0801816c
 800ef00:	080187d4 	.word	0x080187d4
 800ef04:	080181b0 	.word	0x080181b0
 800ef08:	080187f0 	.word	0x080187f0
 800ef0c:	08018810 	.word	0x08018810
 800ef10:	08018828 	.word	0x08018828
 800ef14:	08018844 	.word	0x08018844

0800ef18 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800ef18:	b580      	push	{r7, lr}
 800ef1a:	b082      	sub	sp, #8
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d106      	bne.n	800ef34 <tcp_next_iss+0x1c>
 800ef26:	4b0a      	ldr	r3, [pc, #40]	; (800ef50 <tcp_next_iss+0x38>)
 800ef28:	f640 02af 	movw	r2, #2223	; 0x8af
 800ef2c:	4909      	ldr	r1, [pc, #36]	; (800ef54 <tcp_next_iss+0x3c>)
 800ef2e:	480a      	ldr	r0, [pc, #40]	; (800ef58 <tcp_next_iss+0x40>)
 800ef30:	f007 fae8 	bl	8016504 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800ef34:	4b09      	ldr	r3, [pc, #36]	; (800ef5c <tcp_next_iss+0x44>)
 800ef36:	681a      	ldr	r2, [r3, #0]
 800ef38:	4b09      	ldr	r3, [pc, #36]	; (800ef60 <tcp_next_iss+0x48>)
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	4413      	add	r3, r2
 800ef3e:	4a07      	ldr	r2, [pc, #28]	; (800ef5c <tcp_next_iss+0x44>)
 800ef40:	6013      	str	r3, [r2, #0]
  return iss;
 800ef42:	4b06      	ldr	r3, [pc, #24]	; (800ef5c <tcp_next_iss+0x44>)
 800ef44:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800ef46:	4618      	mov	r0, r3
 800ef48:	3708      	adds	r7, #8
 800ef4a:	46bd      	mov	sp, r7
 800ef4c:	bd80      	pop	{r7, pc}
 800ef4e:	bf00      	nop
 800ef50:	0801816c 	.word	0x0801816c
 800ef54:	0801885c 	.word	0x0801885c
 800ef58:	080181b0 	.word	0x080181b0
 800ef5c:	20000124 	.word	0x20000124
 800ef60:	2000af60 	.word	0x2000af60

0800ef64 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800ef64:	b580      	push	{r7, lr}
 800ef66:	b086      	sub	sp, #24
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	4603      	mov	r3, r0
 800ef6c:	60b9      	str	r1, [r7, #8]
 800ef6e:	607a      	str	r2, [r7, #4]
 800ef70:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d106      	bne.n	800ef86 <tcp_eff_send_mss_netif+0x22>
 800ef78:	4b14      	ldr	r3, [pc, #80]	; (800efcc <tcp_eff_send_mss_netif+0x68>)
 800ef7a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800ef7e:	4914      	ldr	r1, [pc, #80]	; (800efd0 <tcp_eff_send_mss_netif+0x6c>)
 800ef80:	4814      	ldr	r0, [pc, #80]	; (800efd4 <tcp_eff_send_mss_netif+0x70>)
 800ef82:	f007 fabf 	bl	8016504 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800ef86:	68bb      	ldr	r3, [r7, #8]
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d101      	bne.n	800ef90 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800ef8c:	89fb      	ldrh	r3, [r7, #14]
 800ef8e:	e019      	b.n	800efc4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800ef90:	68bb      	ldr	r3, [r7, #8]
 800ef92:	8c1b      	ldrh	r3, [r3, #32]
 800ef94:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800ef96:	8afb      	ldrh	r3, [r7, #22]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d012      	beq.n	800efc2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800ef9c:	2328      	movs	r3, #40	; 0x28
 800ef9e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800efa0:	8afa      	ldrh	r2, [r7, #22]
 800efa2:	8abb      	ldrh	r3, [r7, #20]
 800efa4:	429a      	cmp	r2, r3
 800efa6:	d904      	bls.n	800efb2 <tcp_eff_send_mss_netif+0x4e>
 800efa8:	8afa      	ldrh	r2, [r7, #22]
 800efaa:	8abb      	ldrh	r3, [r7, #20]
 800efac:	1ad3      	subs	r3, r2, r3
 800efae:	b29b      	uxth	r3, r3
 800efb0:	e000      	b.n	800efb4 <tcp_eff_send_mss_netif+0x50>
 800efb2:	2300      	movs	r3, #0
 800efb4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800efb6:	8a7a      	ldrh	r2, [r7, #18]
 800efb8:	89fb      	ldrh	r3, [r7, #14]
 800efba:	4293      	cmp	r3, r2
 800efbc:	bf28      	it	cs
 800efbe:	4613      	movcs	r3, r2
 800efc0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800efc2:	89fb      	ldrh	r3, [r7, #14]
}
 800efc4:	4618      	mov	r0, r3
 800efc6:	3718      	adds	r7, #24
 800efc8:	46bd      	mov	sp, r7
 800efca:	bd80      	pop	{r7, pc}
 800efcc:	0801816c 	.word	0x0801816c
 800efd0:	08018878 	.word	0x08018878
 800efd4:	080181b0 	.word	0x080181b0

0800efd8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800efd8:	b580      	push	{r7, lr}
 800efda:	b084      	sub	sp, #16
 800efdc:	af00      	add	r7, sp, #0
 800efde:	6078      	str	r0, [r7, #4]
 800efe0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800efe2:	683b      	ldr	r3, [r7, #0]
 800efe4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d119      	bne.n	800f020 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800efec:	4b10      	ldr	r3, [pc, #64]	; (800f030 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800efee:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800eff2:	4910      	ldr	r1, [pc, #64]	; (800f034 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800eff4:	4810      	ldr	r0, [pc, #64]	; (800f038 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800eff6:	f007 fa85 	bl	8016504 <iprintf>

  while (pcb != NULL) {
 800effa:	e011      	b.n	800f020 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	681a      	ldr	r2, [r3, #0]
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	429a      	cmp	r2, r3
 800f006:	d108      	bne.n	800f01a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	68db      	ldr	r3, [r3, #12]
 800f00c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800f00e:	68f8      	ldr	r0, [r7, #12]
 800f010:	f7fe ffc6 	bl	800dfa0 <tcp_abort>
      pcb = next;
 800f014:	68bb      	ldr	r3, [r7, #8]
 800f016:	60fb      	str	r3, [r7, #12]
 800f018:	e002      	b.n	800f020 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	68db      	ldr	r3, [r3, #12]
 800f01e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d1ea      	bne.n	800effc <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800f026:	bf00      	nop
 800f028:	bf00      	nop
 800f02a:	3710      	adds	r7, #16
 800f02c:	46bd      	mov	sp, r7
 800f02e:	bd80      	pop	{r7, pc}
 800f030:	0801816c 	.word	0x0801816c
 800f034:	080188a0 	.word	0x080188a0
 800f038:	080181b0 	.word	0x080181b0

0800f03c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f03c:	b580      	push	{r7, lr}
 800f03e:	b084      	sub	sp, #16
 800f040:	af00      	add	r7, sp, #0
 800f042:	6078      	str	r0, [r7, #4]
 800f044:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d02a      	beq.n	800f0a2 <tcp_netif_ip_addr_changed+0x66>
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	2b00      	cmp	r3, #0
 800f052:	d026      	beq.n	800f0a2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800f054:	4b15      	ldr	r3, [pc, #84]	; (800f0ac <tcp_netif_ip_addr_changed+0x70>)
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	4619      	mov	r1, r3
 800f05a:	6878      	ldr	r0, [r7, #4]
 800f05c:	f7ff ffbc 	bl	800efd8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800f060:	4b13      	ldr	r3, [pc, #76]	; (800f0b0 <tcp_netif_ip_addr_changed+0x74>)
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	4619      	mov	r1, r3
 800f066:	6878      	ldr	r0, [r7, #4]
 800f068:	f7ff ffb6 	bl	800efd8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800f06c:	683b      	ldr	r3, [r7, #0]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d017      	beq.n	800f0a2 <tcp_netif_ip_addr_changed+0x66>
 800f072:	683b      	ldr	r3, [r7, #0]
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	2b00      	cmp	r3, #0
 800f078:	d013      	beq.n	800f0a2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f07a:	4b0e      	ldr	r3, [pc, #56]	; (800f0b4 <tcp_netif_ip_addr_changed+0x78>)
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	60fb      	str	r3, [r7, #12]
 800f080:	e00c      	b.n	800f09c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	681a      	ldr	r2, [r3, #0]
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	429a      	cmp	r2, r3
 800f08c:	d103      	bne.n	800f096 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800f08e:	683b      	ldr	r3, [r7, #0]
 800f090:	681a      	ldr	r2, [r3, #0]
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	68db      	ldr	r3, [r3, #12]
 800f09a:	60fb      	str	r3, [r7, #12]
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d1ef      	bne.n	800f082 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f0a2:	bf00      	nop
 800f0a4:	3710      	adds	r7, #16
 800f0a6:	46bd      	mov	sp, r7
 800f0a8:	bd80      	pop	{r7, pc}
 800f0aa:	bf00      	nop
 800f0ac:	2000af5c 	.word	0x2000af5c
 800f0b0:	2000af68 	.word	0x2000af68
 800f0b4:	2000af64 	.word	0x2000af64

0800f0b8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800f0b8:	b580      	push	{r7, lr}
 800f0ba:	b082      	sub	sp, #8
 800f0bc:	af00      	add	r7, sp, #0
 800f0be:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d007      	beq.n	800f0d8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	f7ff fc3d 	bl	800e94c <tcp_segs_free>
    pcb->ooseq = NULL;
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	2200      	movs	r2, #0
 800f0d6:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800f0d8:	bf00      	nop
 800f0da:	3708      	adds	r7, #8
 800f0dc:	46bd      	mov	sp, r7
 800f0de:	bd80      	pop	{r7, pc}

0800f0e0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800f0e0:	b590      	push	{r4, r7, lr}
 800f0e2:	b08d      	sub	sp, #52	; 0x34
 800f0e4:	af04      	add	r7, sp, #16
 800f0e6:	6078      	str	r0, [r7, #4]
 800f0e8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d105      	bne.n	800f0fc <tcp_input+0x1c>
 800f0f0:	4b9b      	ldr	r3, [pc, #620]	; (800f360 <tcp_input+0x280>)
 800f0f2:	2283      	movs	r2, #131	; 0x83
 800f0f4:	499b      	ldr	r1, [pc, #620]	; (800f364 <tcp_input+0x284>)
 800f0f6:	489c      	ldr	r0, [pc, #624]	; (800f368 <tcp_input+0x288>)
 800f0f8:	f007 fa04 	bl	8016504 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	685b      	ldr	r3, [r3, #4]
 800f100:	4a9a      	ldr	r2, [pc, #616]	; (800f36c <tcp_input+0x28c>)
 800f102:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	895b      	ldrh	r3, [r3, #10]
 800f108:	2b13      	cmp	r3, #19
 800f10a:	f240 83c4 	bls.w	800f896 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f10e:	4b98      	ldr	r3, [pc, #608]	; (800f370 <tcp_input+0x290>)
 800f110:	695b      	ldr	r3, [r3, #20]
 800f112:	4a97      	ldr	r2, [pc, #604]	; (800f370 <tcp_input+0x290>)
 800f114:	6812      	ldr	r2, [r2, #0]
 800f116:	4611      	mov	r1, r2
 800f118:	4618      	mov	r0, r3
 800f11a:	f005 fc43 	bl	80149a4 <ip4_addr_isbroadcast_u32>
 800f11e:	4603      	mov	r3, r0
 800f120:	2b00      	cmp	r3, #0
 800f122:	f040 83ba 	bne.w	800f89a <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f126:	4b92      	ldr	r3, [pc, #584]	; (800f370 <tcp_input+0x290>)
 800f128:	695b      	ldr	r3, [r3, #20]
 800f12a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f12e:	2be0      	cmp	r3, #224	; 0xe0
 800f130:	f000 83b3 	beq.w	800f89a <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800f134:	4b8d      	ldr	r3, [pc, #564]	; (800f36c <tcp_input+0x28c>)
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	899b      	ldrh	r3, [r3, #12]
 800f13a:	b29b      	uxth	r3, r3
 800f13c:	4618      	mov	r0, r3
 800f13e:	f7fc fe67 	bl	800be10 <lwip_htons>
 800f142:	4603      	mov	r3, r0
 800f144:	0b1b      	lsrs	r3, r3, #12
 800f146:	b29b      	uxth	r3, r3
 800f148:	b2db      	uxtb	r3, r3
 800f14a:	009b      	lsls	r3, r3, #2
 800f14c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f14e:	7cbb      	ldrb	r3, [r7, #18]
 800f150:	2b13      	cmp	r3, #19
 800f152:	f240 83a4 	bls.w	800f89e <tcp_input+0x7be>
 800f156:	7cbb      	ldrb	r3, [r7, #18]
 800f158:	b29a      	uxth	r2, r3
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	891b      	ldrh	r3, [r3, #8]
 800f15e:	429a      	cmp	r2, r3
 800f160:	f200 839d 	bhi.w	800f89e <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800f164:	7cbb      	ldrb	r3, [r7, #18]
 800f166:	b29b      	uxth	r3, r3
 800f168:	3b14      	subs	r3, #20
 800f16a:	b29a      	uxth	r2, r3
 800f16c:	4b81      	ldr	r3, [pc, #516]	; (800f374 <tcp_input+0x294>)
 800f16e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800f170:	4b81      	ldr	r3, [pc, #516]	; (800f378 <tcp_input+0x298>)
 800f172:	2200      	movs	r2, #0
 800f174:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	895a      	ldrh	r2, [r3, #10]
 800f17a:	7cbb      	ldrb	r3, [r7, #18]
 800f17c:	b29b      	uxth	r3, r3
 800f17e:	429a      	cmp	r2, r3
 800f180:	d309      	bcc.n	800f196 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800f182:	4b7c      	ldr	r3, [pc, #496]	; (800f374 <tcp_input+0x294>)
 800f184:	881a      	ldrh	r2, [r3, #0]
 800f186:	4b7d      	ldr	r3, [pc, #500]	; (800f37c <tcp_input+0x29c>)
 800f188:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800f18a:	7cbb      	ldrb	r3, [r7, #18]
 800f18c:	4619      	mov	r1, r3
 800f18e:	6878      	ldr	r0, [r7, #4]
 800f190:	f7fe f8ec 	bl	800d36c <pbuf_remove_header>
 800f194:	e04e      	b.n	800f234 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d105      	bne.n	800f1aa <tcp_input+0xca>
 800f19e:	4b70      	ldr	r3, [pc, #448]	; (800f360 <tcp_input+0x280>)
 800f1a0:	22c2      	movs	r2, #194	; 0xc2
 800f1a2:	4977      	ldr	r1, [pc, #476]	; (800f380 <tcp_input+0x2a0>)
 800f1a4:	4870      	ldr	r0, [pc, #448]	; (800f368 <tcp_input+0x288>)
 800f1a6:	f007 f9ad 	bl	8016504 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800f1aa:	2114      	movs	r1, #20
 800f1ac:	6878      	ldr	r0, [r7, #4]
 800f1ae:	f7fe f8dd 	bl	800d36c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	895a      	ldrh	r2, [r3, #10]
 800f1b6:	4b71      	ldr	r3, [pc, #452]	; (800f37c <tcp_input+0x29c>)
 800f1b8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800f1ba:	4b6e      	ldr	r3, [pc, #440]	; (800f374 <tcp_input+0x294>)
 800f1bc:	881a      	ldrh	r2, [r3, #0]
 800f1be:	4b6f      	ldr	r3, [pc, #444]	; (800f37c <tcp_input+0x29c>)
 800f1c0:	881b      	ldrh	r3, [r3, #0]
 800f1c2:	1ad3      	subs	r3, r2, r3
 800f1c4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800f1c6:	4b6d      	ldr	r3, [pc, #436]	; (800f37c <tcp_input+0x29c>)
 800f1c8:	881b      	ldrh	r3, [r3, #0]
 800f1ca:	4619      	mov	r1, r3
 800f1cc:	6878      	ldr	r0, [r7, #4]
 800f1ce:	f7fe f8cd 	bl	800d36c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	895b      	ldrh	r3, [r3, #10]
 800f1d8:	8a3a      	ldrh	r2, [r7, #16]
 800f1da:	429a      	cmp	r2, r3
 800f1dc:	f200 8361 	bhi.w	800f8a2 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	685b      	ldr	r3, [r3, #4]
 800f1e6:	4a64      	ldr	r2, [pc, #400]	; (800f378 <tcp_input+0x298>)
 800f1e8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	8a3a      	ldrh	r2, [r7, #16]
 800f1f0:	4611      	mov	r1, r2
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	f7fe f8ba 	bl	800d36c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	891a      	ldrh	r2, [r3, #8]
 800f1fc:	8a3b      	ldrh	r3, [r7, #16]
 800f1fe:	1ad3      	subs	r3, r2, r3
 800f200:	b29a      	uxth	r2, r3
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	895b      	ldrh	r3, [r3, #10]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d005      	beq.n	800f21a <tcp_input+0x13a>
 800f20e:	4b54      	ldr	r3, [pc, #336]	; (800f360 <tcp_input+0x280>)
 800f210:	22df      	movs	r2, #223	; 0xdf
 800f212:	495c      	ldr	r1, [pc, #368]	; (800f384 <tcp_input+0x2a4>)
 800f214:	4854      	ldr	r0, [pc, #336]	; (800f368 <tcp_input+0x288>)
 800f216:	f007 f975 	bl	8016504 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	891a      	ldrh	r2, [r3, #8]
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	891b      	ldrh	r3, [r3, #8]
 800f224:	429a      	cmp	r2, r3
 800f226:	d005      	beq.n	800f234 <tcp_input+0x154>
 800f228:	4b4d      	ldr	r3, [pc, #308]	; (800f360 <tcp_input+0x280>)
 800f22a:	22e0      	movs	r2, #224	; 0xe0
 800f22c:	4956      	ldr	r1, [pc, #344]	; (800f388 <tcp_input+0x2a8>)
 800f22e:	484e      	ldr	r0, [pc, #312]	; (800f368 <tcp_input+0x288>)
 800f230:	f007 f968 	bl	8016504 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f234:	4b4d      	ldr	r3, [pc, #308]	; (800f36c <tcp_input+0x28c>)
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	881b      	ldrh	r3, [r3, #0]
 800f23a:	b29b      	uxth	r3, r3
 800f23c:	4a4b      	ldr	r2, [pc, #300]	; (800f36c <tcp_input+0x28c>)
 800f23e:	6814      	ldr	r4, [r2, #0]
 800f240:	4618      	mov	r0, r3
 800f242:	f7fc fde5 	bl	800be10 <lwip_htons>
 800f246:	4603      	mov	r3, r0
 800f248:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f24a:	4b48      	ldr	r3, [pc, #288]	; (800f36c <tcp_input+0x28c>)
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	885b      	ldrh	r3, [r3, #2]
 800f250:	b29b      	uxth	r3, r3
 800f252:	4a46      	ldr	r2, [pc, #280]	; (800f36c <tcp_input+0x28c>)
 800f254:	6814      	ldr	r4, [r2, #0]
 800f256:	4618      	mov	r0, r3
 800f258:	f7fc fdda 	bl	800be10 <lwip_htons>
 800f25c:	4603      	mov	r3, r0
 800f25e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f260:	4b42      	ldr	r3, [pc, #264]	; (800f36c <tcp_input+0x28c>)
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	685b      	ldr	r3, [r3, #4]
 800f266:	4a41      	ldr	r2, [pc, #260]	; (800f36c <tcp_input+0x28c>)
 800f268:	6814      	ldr	r4, [r2, #0]
 800f26a:	4618      	mov	r0, r3
 800f26c:	f7fc fde5 	bl	800be3a <lwip_htonl>
 800f270:	4603      	mov	r3, r0
 800f272:	6063      	str	r3, [r4, #4]
 800f274:	6863      	ldr	r3, [r4, #4]
 800f276:	4a45      	ldr	r2, [pc, #276]	; (800f38c <tcp_input+0x2ac>)
 800f278:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f27a:	4b3c      	ldr	r3, [pc, #240]	; (800f36c <tcp_input+0x28c>)
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	689b      	ldr	r3, [r3, #8]
 800f280:	4a3a      	ldr	r2, [pc, #232]	; (800f36c <tcp_input+0x28c>)
 800f282:	6814      	ldr	r4, [r2, #0]
 800f284:	4618      	mov	r0, r3
 800f286:	f7fc fdd8 	bl	800be3a <lwip_htonl>
 800f28a:	4603      	mov	r3, r0
 800f28c:	60a3      	str	r3, [r4, #8]
 800f28e:	68a3      	ldr	r3, [r4, #8]
 800f290:	4a3f      	ldr	r2, [pc, #252]	; (800f390 <tcp_input+0x2b0>)
 800f292:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f294:	4b35      	ldr	r3, [pc, #212]	; (800f36c <tcp_input+0x28c>)
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	89db      	ldrh	r3, [r3, #14]
 800f29a:	b29b      	uxth	r3, r3
 800f29c:	4a33      	ldr	r2, [pc, #204]	; (800f36c <tcp_input+0x28c>)
 800f29e:	6814      	ldr	r4, [r2, #0]
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	f7fc fdb5 	bl	800be10 <lwip_htons>
 800f2a6:	4603      	mov	r3, r0
 800f2a8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800f2aa:	4b30      	ldr	r3, [pc, #192]	; (800f36c <tcp_input+0x28c>)
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	899b      	ldrh	r3, [r3, #12]
 800f2b0:	b29b      	uxth	r3, r3
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	f7fc fdac 	bl	800be10 <lwip_htons>
 800f2b8:	4603      	mov	r3, r0
 800f2ba:	b2db      	uxtb	r3, r3
 800f2bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f2c0:	b2da      	uxtb	r2, r3
 800f2c2:	4b34      	ldr	r3, [pc, #208]	; (800f394 <tcp_input+0x2b4>)
 800f2c4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	891a      	ldrh	r2, [r3, #8]
 800f2ca:	4b33      	ldr	r3, [pc, #204]	; (800f398 <tcp_input+0x2b8>)
 800f2cc:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800f2ce:	4b31      	ldr	r3, [pc, #196]	; (800f394 <tcp_input+0x2b4>)
 800f2d0:	781b      	ldrb	r3, [r3, #0]
 800f2d2:	f003 0303 	and.w	r3, r3, #3
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d00c      	beq.n	800f2f4 <tcp_input+0x214>
    tcplen++;
 800f2da:	4b2f      	ldr	r3, [pc, #188]	; (800f398 <tcp_input+0x2b8>)
 800f2dc:	881b      	ldrh	r3, [r3, #0]
 800f2de:	3301      	adds	r3, #1
 800f2e0:	b29a      	uxth	r2, r3
 800f2e2:	4b2d      	ldr	r3, [pc, #180]	; (800f398 <tcp_input+0x2b8>)
 800f2e4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	891a      	ldrh	r2, [r3, #8]
 800f2ea:	4b2b      	ldr	r3, [pc, #172]	; (800f398 <tcp_input+0x2b8>)
 800f2ec:	881b      	ldrh	r3, [r3, #0]
 800f2ee:	429a      	cmp	r2, r3
 800f2f0:	f200 82d9 	bhi.w	800f8a6 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f2f4:	2300      	movs	r3, #0
 800f2f6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f2f8:	4b28      	ldr	r3, [pc, #160]	; (800f39c <tcp_input+0x2bc>)
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	61fb      	str	r3, [r7, #28]
 800f2fe:	e09d      	b.n	800f43c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f300:	69fb      	ldr	r3, [r7, #28]
 800f302:	7d1b      	ldrb	r3, [r3, #20]
 800f304:	2b00      	cmp	r3, #0
 800f306:	d105      	bne.n	800f314 <tcp_input+0x234>
 800f308:	4b15      	ldr	r3, [pc, #84]	; (800f360 <tcp_input+0x280>)
 800f30a:	22fb      	movs	r2, #251	; 0xfb
 800f30c:	4924      	ldr	r1, [pc, #144]	; (800f3a0 <tcp_input+0x2c0>)
 800f30e:	4816      	ldr	r0, [pc, #88]	; (800f368 <tcp_input+0x288>)
 800f310:	f007 f8f8 	bl	8016504 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f314:	69fb      	ldr	r3, [r7, #28]
 800f316:	7d1b      	ldrb	r3, [r3, #20]
 800f318:	2b0a      	cmp	r3, #10
 800f31a:	d105      	bne.n	800f328 <tcp_input+0x248>
 800f31c:	4b10      	ldr	r3, [pc, #64]	; (800f360 <tcp_input+0x280>)
 800f31e:	22fc      	movs	r2, #252	; 0xfc
 800f320:	4920      	ldr	r1, [pc, #128]	; (800f3a4 <tcp_input+0x2c4>)
 800f322:	4811      	ldr	r0, [pc, #68]	; (800f368 <tcp_input+0x288>)
 800f324:	f007 f8ee 	bl	8016504 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f328:	69fb      	ldr	r3, [r7, #28]
 800f32a:	7d1b      	ldrb	r3, [r3, #20]
 800f32c:	2b01      	cmp	r3, #1
 800f32e:	d105      	bne.n	800f33c <tcp_input+0x25c>
 800f330:	4b0b      	ldr	r3, [pc, #44]	; (800f360 <tcp_input+0x280>)
 800f332:	22fd      	movs	r2, #253	; 0xfd
 800f334:	491c      	ldr	r1, [pc, #112]	; (800f3a8 <tcp_input+0x2c8>)
 800f336:	480c      	ldr	r0, [pc, #48]	; (800f368 <tcp_input+0x288>)
 800f338:	f007 f8e4 	bl	8016504 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f33c:	69fb      	ldr	r3, [r7, #28]
 800f33e:	7a1b      	ldrb	r3, [r3, #8]
 800f340:	2b00      	cmp	r3, #0
 800f342:	d033      	beq.n	800f3ac <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f344:	69fb      	ldr	r3, [r7, #28]
 800f346:	7a1a      	ldrb	r2, [r3, #8]
 800f348:	4b09      	ldr	r3, [pc, #36]	; (800f370 <tcp_input+0x290>)
 800f34a:	685b      	ldr	r3, [r3, #4]
 800f34c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f350:	3301      	adds	r3, #1
 800f352:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f354:	429a      	cmp	r2, r3
 800f356:	d029      	beq.n	800f3ac <tcp_input+0x2cc>
      prev = pcb;
 800f358:	69fb      	ldr	r3, [r7, #28]
 800f35a:	61bb      	str	r3, [r7, #24]
      continue;
 800f35c:	e06b      	b.n	800f436 <tcp_input+0x356>
 800f35e:	bf00      	nop
 800f360:	080188d4 	.word	0x080188d4
 800f364:	08018908 	.word	0x08018908
 800f368:	08018920 	.word	0x08018920
 800f36c:	20004228 	.word	0x20004228
 800f370:	20007848 	.word	0x20007848
 800f374:	2000422c 	.word	0x2000422c
 800f378:	20004230 	.word	0x20004230
 800f37c:	2000422e 	.word	0x2000422e
 800f380:	08018948 	.word	0x08018948
 800f384:	08018958 	.word	0x08018958
 800f388:	08018964 	.word	0x08018964
 800f38c:	20004238 	.word	0x20004238
 800f390:	2000423c 	.word	0x2000423c
 800f394:	20004244 	.word	0x20004244
 800f398:	20004242 	.word	0x20004242
 800f39c:	2000af5c 	.word	0x2000af5c
 800f3a0:	08018984 	.word	0x08018984
 800f3a4:	080189ac 	.word	0x080189ac
 800f3a8:	080189d8 	.word	0x080189d8
    }

    if (pcb->remote_port == tcphdr->src &&
 800f3ac:	69fb      	ldr	r3, [r7, #28]
 800f3ae:	8b1a      	ldrh	r2, [r3, #24]
 800f3b0:	4b94      	ldr	r3, [pc, #592]	; (800f604 <tcp_input+0x524>)
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	881b      	ldrh	r3, [r3, #0]
 800f3b6:	b29b      	uxth	r3, r3
 800f3b8:	429a      	cmp	r2, r3
 800f3ba:	d13a      	bne.n	800f432 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800f3bc:	69fb      	ldr	r3, [r7, #28]
 800f3be:	8ada      	ldrh	r2, [r3, #22]
 800f3c0:	4b90      	ldr	r3, [pc, #576]	; (800f604 <tcp_input+0x524>)
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	885b      	ldrh	r3, [r3, #2]
 800f3c6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800f3c8:	429a      	cmp	r2, r3
 800f3ca:	d132      	bne.n	800f432 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f3cc:	69fb      	ldr	r3, [r7, #28]
 800f3ce:	685a      	ldr	r2, [r3, #4]
 800f3d0:	4b8d      	ldr	r3, [pc, #564]	; (800f608 <tcp_input+0x528>)
 800f3d2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800f3d4:	429a      	cmp	r2, r3
 800f3d6:	d12c      	bne.n	800f432 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f3d8:	69fb      	ldr	r3, [r7, #28]
 800f3da:	681a      	ldr	r2, [r3, #0]
 800f3dc:	4b8a      	ldr	r3, [pc, #552]	; (800f608 <tcp_input+0x528>)
 800f3de:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f3e0:	429a      	cmp	r2, r3
 800f3e2:	d126      	bne.n	800f432 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f3e4:	69fb      	ldr	r3, [r7, #28]
 800f3e6:	68db      	ldr	r3, [r3, #12]
 800f3e8:	69fa      	ldr	r2, [r7, #28]
 800f3ea:	429a      	cmp	r2, r3
 800f3ec:	d106      	bne.n	800f3fc <tcp_input+0x31c>
 800f3ee:	4b87      	ldr	r3, [pc, #540]	; (800f60c <tcp_input+0x52c>)
 800f3f0:	f240 120d 	movw	r2, #269	; 0x10d
 800f3f4:	4986      	ldr	r1, [pc, #536]	; (800f610 <tcp_input+0x530>)
 800f3f6:	4887      	ldr	r0, [pc, #540]	; (800f614 <tcp_input+0x534>)
 800f3f8:	f007 f884 	bl	8016504 <iprintf>
      if (prev != NULL) {
 800f3fc:	69bb      	ldr	r3, [r7, #24]
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d00a      	beq.n	800f418 <tcp_input+0x338>
        prev->next = pcb->next;
 800f402:	69fb      	ldr	r3, [r7, #28]
 800f404:	68da      	ldr	r2, [r3, #12]
 800f406:	69bb      	ldr	r3, [r7, #24]
 800f408:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800f40a:	4b83      	ldr	r3, [pc, #524]	; (800f618 <tcp_input+0x538>)
 800f40c:	681a      	ldr	r2, [r3, #0]
 800f40e:	69fb      	ldr	r3, [r7, #28]
 800f410:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800f412:	4a81      	ldr	r2, [pc, #516]	; (800f618 <tcp_input+0x538>)
 800f414:	69fb      	ldr	r3, [r7, #28]
 800f416:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f418:	69fb      	ldr	r3, [r7, #28]
 800f41a:	68db      	ldr	r3, [r3, #12]
 800f41c:	69fa      	ldr	r2, [r7, #28]
 800f41e:	429a      	cmp	r2, r3
 800f420:	d111      	bne.n	800f446 <tcp_input+0x366>
 800f422:	4b7a      	ldr	r3, [pc, #488]	; (800f60c <tcp_input+0x52c>)
 800f424:	f240 1215 	movw	r2, #277	; 0x115
 800f428:	497c      	ldr	r1, [pc, #496]	; (800f61c <tcp_input+0x53c>)
 800f42a:	487a      	ldr	r0, [pc, #488]	; (800f614 <tcp_input+0x534>)
 800f42c:	f007 f86a 	bl	8016504 <iprintf>
      break;
 800f430:	e009      	b.n	800f446 <tcp_input+0x366>
    }
    prev = pcb;
 800f432:	69fb      	ldr	r3, [r7, #28]
 800f434:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f436:	69fb      	ldr	r3, [r7, #28]
 800f438:	68db      	ldr	r3, [r3, #12]
 800f43a:	61fb      	str	r3, [r7, #28]
 800f43c:	69fb      	ldr	r3, [r7, #28]
 800f43e:	2b00      	cmp	r3, #0
 800f440:	f47f af5e 	bne.w	800f300 <tcp_input+0x220>
 800f444:	e000      	b.n	800f448 <tcp_input+0x368>
      break;
 800f446:	bf00      	nop
  }

  if (pcb == NULL) {
 800f448:	69fb      	ldr	r3, [r7, #28]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	f040 8095 	bne.w	800f57a <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f450:	4b73      	ldr	r3, [pc, #460]	; (800f620 <tcp_input+0x540>)
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	61fb      	str	r3, [r7, #28]
 800f456:	e03f      	b.n	800f4d8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f458:	69fb      	ldr	r3, [r7, #28]
 800f45a:	7d1b      	ldrb	r3, [r3, #20]
 800f45c:	2b0a      	cmp	r3, #10
 800f45e:	d006      	beq.n	800f46e <tcp_input+0x38e>
 800f460:	4b6a      	ldr	r3, [pc, #424]	; (800f60c <tcp_input+0x52c>)
 800f462:	f240 121f 	movw	r2, #287	; 0x11f
 800f466:	496f      	ldr	r1, [pc, #444]	; (800f624 <tcp_input+0x544>)
 800f468:	486a      	ldr	r0, [pc, #424]	; (800f614 <tcp_input+0x534>)
 800f46a:	f007 f84b 	bl	8016504 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f46e:	69fb      	ldr	r3, [r7, #28]
 800f470:	7a1b      	ldrb	r3, [r3, #8]
 800f472:	2b00      	cmp	r3, #0
 800f474:	d009      	beq.n	800f48a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f476:	69fb      	ldr	r3, [r7, #28]
 800f478:	7a1a      	ldrb	r2, [r3, #8]
 800f47a:	4b63      	ldr	r3, [pc, #396]	; (800f608 <tcp_input+0x528>)
 800f47c:	685b      	ldr	r3, [r3, #4]
 800f47e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f482:	3301      	adds	r3, #1
 800f484:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f486:	429a      	cmp	r2, r3
 800f488:	d122      	bne.n	800f4d0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800f48a:	69fb      	ldr	r3, [r7, #28]
 800f48c:	8b1a      	ldrh	r2, [r3, #24]
 800f48e:	4b5d      	ldr	r3, [pc, #372]	; (800f604 <tcp_input+0x524>)
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	881b      	ldrh	r3, [r3, #0]
 800f494:	b29b      	uxth	r3, r3
 800f496:	429a      	cmp	r2, r3
 800f498:	d11b      	bne.n	800f4d2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800f49a:	69fb      	ldr	r3, [r7, #28]
 800f49c:	8ada      	ldrh	r2, [r3, #22]
 800f49e:	4b59      	ldr	r3, [pc, #356]	; (800f604 <tcp_input+0x524>)
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	885b      	ldrh	r3, [r3, #2]
 800f4a4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f4a6:	429a      	cmp	r2, r3
 800f4a8:	d113      	bne.n	800f4d2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f4aa:	69fb      	ldr	r3, [r7, #28]
 800f4ac:	685a      	ldr	r2, [r3, #4]
 800f4ae:	4b56      	ldr	r3, [pc, #344]	; (800f608 <tcp_input+0x528>)
 800f4b0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f4b2:	429a      	cmp	r2, r3
 800f4b4:	d10d      	bne.n	800f4d2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f4b6:	69fb      	ldr	r3, [r7, #28]
 800f4b8:	681a      	ldr	r2, [r3, #0]
 800f4ba:	4b53      	ldr	r3, [pc, #332]	; (800f608 <tcp_input+0x528>)
 800f4bc:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f4be:	429a      	cmp	r2, r3
 800f4c0:	d107      	bne.n	800f4d2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800f4c2:	69f8      	ldr	r0, [r7, #28]
 800f4c4:	f000 fb54 	bl	800fb70 <tcp_timewait_input>
        }
        pbuf_free(p);
 800f4c8:	6878      	ldr	r0, [r7, #4]
 800f4ca:	f7fd ffd5 	bl	800d478 <pbuf_free>
        return;
 800f4ce:	e1f0      	b.n	800f8b2 <tcp_input+0x7d2>
        continue;
 800f4d0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f4d2:	69fb      	ldr	r3, [r7, #28]
 800f4d4:	68db      	ldr	r3, [r3, #12]
 800f4d6:	61fb      	str	r3, [r7, #28]
 800f4d8:	69fb      	ldr	r3, [r7, #28]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d1bc      	bne.n	800f458 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800f4de:	2300      	movs	r3, #0
 800f4e0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f4e2:	4b51      	ldr	r3, [pc, #324]	; (800f628 <tcp_input+0x548>)
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	617b      	str	r3, [r7, #20]
 800f4e8:	e02a      	b.n	800f540 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f4ea:	697b      	ldr	r3, [r7, #20]
 800f4ec:	7a1b      	ldrb	r3, [r3, #8]
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d00c      	beq.n	800f50c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f4f2:	697b      	ldr	r3, [r7, #20]
 800f4f4:	7a1a      	ldrb	r2, [r3, #8]
 800f4f6:	4b44      	ldr	r3, [pc, #272]	; (800f608 <tcp_input+0x528>)
 800f4f8:	685b      	ldr	r3, [r3, #4]
 800f4fa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f4fe:	3301      	adds	r3, #1
 800f500:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f502:	429a      	cmp	r2, r3
 800f504:	d002      	beq.n	800f50c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800f506:	697b      	ldr	r3, [r7, #20]
 800f508:	61bb      	str	r3, [r7, #24]
        continue;
 800f50a:	e016      	b.n	800f53a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800f50c:	697b      	ldr	r3, [r7, #20]
 800f50e:	8ada      	ldrh	r2, [r3, #22]
 800f510:	4b3c      	ldr	r3, [pc, #240]	; (800f604 <tcp_input+0x524>)
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	885b      	ldrh	r3, [r3, #2]
 800f516:	b29b      	uxth	r3, r3
 800f518:	429a      	cmp	r2, r3
 800f51a:	d10c      	bne.n	800f536 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f51c:	697b      	ldr	r3, [r7, #20]
 800f51e:	681a      	ldr	r2, [r3, #0]
 800f520:	4b39      	ldr	r3, [pc, #228]	; (800f608 <tcp_input+0x528>)
 800f522:	695b      	ldr	r3, [r3, #20]
 800f524:	429a      	cmp	r2, r3
 800f526:	d00f      	beq.n	800f548 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f528:	697b      	ldr	r3, [r7, #20]
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d00d      	beq.n	800f54a <tcp_input+0x46a>
 800f52e:	697b      	ldr	r3, [r7, #20]
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	2b00      	cmp	r3, #0
 800f534:	d009      	beq.n	800f54a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800f536:	697b      	ldr	r3, [r7, #20]
 800f538:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f53a:	697b      	ldr	r3, [r7, #20]
 800f53c:	68db      	ldr	r3, [r3, #12]
 800f53e:	617b      	str	r3, [r7, #20]
 800f540:	697b      	ldr	r3, [r7, #20]
 800f542:	2b00      	cmp	r3, #0
 800f544:	d1d1      	bne.n	800f4ea <tcp_input+0x40a>
 800f546:	e000      	b.n	800f54a <tcp_input+0x46a>
            break;
 800f548:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800f54a:	697b      	ldr	r3, [r7, #20]
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d014      	beq.n	800f57a <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f550:	69bb      	ldr	r3, [r7, #24]
 800f552:	2b00      	cmp	r3, #0
 800f554:	d00a      	beq.n	800f56c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f556:	697b      	ldr	r3, [r7, #20]
 800f558:	68da      	ldr	r2, [r3, #12]
 800f55a:	69bb      	ldr	r3, [r7, #24]
 800f55c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f55e:	4b32      	ldr	r3, [pc, #200]	; (800f628 <tcp_input+0x548>)
 800f560:	681a      	ldr	r2, [r3, #0]
 800f562:	697b      	ldr	r3, [r7, #20]
 800f564:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f566:	4a30      	ldr	r2, [pc, #192]	; (800f628 <tcp_input+0x548>)
 800f568:	697b      	ldr	r3, [r7, #20]
 800f56a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800f56c:	6978      	ldr	r0, [r7, #20]
 800f56e:	f000 fa01 	bl	800f974 <tcp_listen_input>
      }
      pbuf_free(p);
 800f572:	6878      	ldr	r0, [r7, #4]
 800f574:	f7fd ff80 	bl	800d478 <pbuf_free>
      return;
 800f578:	e19b      	b.n	800f8b2 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800f57a:	69fb      	ldr	r3, [r7, #28]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	f000 8160 	beq.w	800f842 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800f582:	4b2a      	ldr	r3, [pc, #168]	; (800f62c <tcp_input+0x54c>)
 800f584:	2200      	movs	r2, #0
 800f586:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	891a      	ldrh	r2, [r3, #8]
 800f58c:	4b27      	ldr	r3, [pc, #156]	; (800f62c <tcp_input+0x54c>)
 800f58e:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800f590:	4a26      	ldr	r2, [pc, #152]	; (800f62c <tcp_input+0x54c>)
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800f596:	4b1b      	ldr	r3, [pc, #108]	; (800f604 <tcp_input+0x524>)
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	4a24      	ldr	r2, [pc, #144]	; (800f62c <tcp_input+0x54c>)
 800f59c:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800f59e:	4b24      	ldr	r3, [pc, #144]	; (800f630 <tcp_input+0x550>)
 800f5a0:	2200      	movs	r2, #0
 800f5a2:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800f5a4:	4b23      	ldr	r3, [pc, #140]	; (800f634 <tcp_input+0x554>)
 800f5a6:	2200      	movs	r2, #0
 800f5a8:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800f5aa:	4b23      	ldr	r3, [pc, #140]	; (800f638 <tcp_input+0x558>)
 800f5ac:	2200      	movs	r2, #0
 800f5ae:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800f5b0:	4b22      	ldr	r3, [pc, #136]	; (800f63c <tcp_input+0x55c>)
 800f5b2:	781b      	ldrb	r3, [r3, #0]
 800f5b4:	f003 0308 	and.w	r3, r3, #8
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d006      	beq.n	800f5ca <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	7b5b      	ldrb	r3, [r3, #13]
 800f5c0:	f043 0301 	orr.w	r3, r3, #1
 800f5c4:	b2da      	uxtb	r2, r3
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800f5ca:	69fb      	ldr	r3, [r7, #28]
 800f5cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d038      	beq.n	800f644 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f5d2:	69f8      	ldr	r0, [r7, #28]
 800f5d4:	f7ff f93e 	bl	800e854 <tcp_process_refused_data>
 800f5d8:	4603      	mov	r3, r0
 800f5da:	f113 0f0d 	cmn.w	r3, #13
 800f5de:	d007      	beq.n	800f5f0 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f5e0:	69fb      	ldr	r3, [r7, #28]
 800f5e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d02d      	beq.n	800f644 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f5e8:	4b15      	ldr	r3, [pc, #84]	; (800f640 <tcp_input+0x560>)
 800f5ea:	881b      	ldrh	r3, [r3, #0]
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d029      	beq.n	800f644 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800f5f0:	69fb      	ldr	r3, [r7, #28]
 800f5f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	f040 8104 	bne.w	800f802 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800f5fa:	69f8      	ldr	r0, [r7, #28]
 800f5fc:	f003 f9be 	bl	801297c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800f600:	e0ff      	b.n	800f802 <tcp_input+0x722>
 800f602:	bf00      	nop
 800f604:	20004228 	.word	0x20004228
 800f608:	20007848 	.word	0x20007848
 800f60c:	080188d4 	.word	0x080188d4
 800f610:	08018a00 	.word	0x08018a00
 800f614:	08018920 	.word	0x08018920
 800f618:	2000af5c 	.word	0x2000af5c
 800f61c:	08018a2c 	.word	0x08018a2c
 800f620:	2000af6c 	.word	0x2000af6c
 800f624:	08018a58 	.word	0x08018a58
 800f628:	2000af64 	.word	0x2000af64
 800f62c:	20004218 	.word	0x20004218
 800f630:	20004248 	.word	0x20004248
 800f634:	20004245 	.word	0x20004245
 800f638:	20004240 	.word	0x20004240
 800f63c:	20004244 	.word	0x20004244
 800f640:	20004242 	.word	0x20004242
      }
    }
    tcp_input_pcb = pcb;
 800f644:	4a9c      	ldr	r2, [pc, #624]	; (800f8b8 <tcp_input+0x7d8>)
 800f646:	69fb      	ldr	r3, [r7, #28]
 800f648:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800f64a:	69f8      	ldr	r0, [r7, #28]
 800f64c:	f000 fb0a 	bl	800fc64 <tcp_process>
 800f650:	4603      	mov	r3, r0
 800f652:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800f654:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f658:	f113 0f0d 	cmn.w	r3, #13
 800f65c:	f000 80d3 	beq.w	800f806 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800f660:	4b96      	ldr	r3, [pc, #600]	; (800f8bc <tcp_input+0x7dc>)
 800f662:	781b      	ldrb	r3, [r3, #0]
 800f664:	f003 0308 	and.w	r3, r3, #8
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d015      	beq.n	800f698 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800f66c:	69fb      	ldr	r3, [r7, #28]
 800f66e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f672:	2b00      	cmp	r3, #0
 800f674:	d008      	beq.n	800f688 <tcp_input+0x5a8>
 800f676:	69fb      	ldr	r3, [r7, #28]
 800f678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f67c:	69fa      	ldr	r2, [r7, #28]
 800f67e:	6912      	ldr	r2, [r2, #16]
 800f680:	f06f 010d 	mvn.w	r1, #13
 800f684:	4610      	mov	r0, r2
 800f686:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f688:	69f9      	ldr	r1, [r7, #28]
 800f68a:	488d      	ldr	r0, [pc, #564]	; (800f8c0 <tcp_input+0x7e0>)
 800f68c:	f7ff fbb0 	bl	800edf0 <tcp_pcb_remove>
        tcp_free(pcb);
 800f690:	69f8      	ldr	r0, [r7, #28]
 800f692:	f7fe f99d 	bl	800d9d0 <tcp_free>
 800f696:	e0c1      	b.n	800f81c <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800f698:	2300      	movs	r3, #0
 800f69a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800f69c:	4b89      	ldr	r3, [pc, #548]	; (800f8c4 <tcp_input+0x7e4>)
 800f69e:	881b      	ldrh	r3, [r3, #0]
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d01d      	beq.n	800f6e0 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800f6a4:	4b87      	ldr	r3, [pc, #540]	; (800f8c4 <tcp_input+0x7e4>)
 800f6a6:	881b      	ldrh	r3, [r3, #0]
 800f6a8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800f6aa:	69fb      	ldr	r3, [r7, #28]
 800f6ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d00a      	beq.n	800f6ca <tcp_input+0x5ea>
 800f6b4:	69fb      	ldr	r3, [r7, #28]
 800f6b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f6ba:	69fa      	ldr	r2, [r7, #28]
 800f6bc:	6910      	ldr	r0, [r2, #16]
 800f6be:	89fa      	ldrh	r2, [r7, #14]
 800f6c0:	69f9      	ldr	r1, [r7, #28]
 800f6c2:	4798      	blx	r3
 800f6c4:	4603      	mov	r3, r0
 800f6c6:	74fb      	strb	r3, [r7, #19]
 800f6c8:	e001      	b.n	800f6ce <tcp_input+0x5ee>
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f6ce:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f6d2:	f113 0f0d 	cmn.w	r3, #13
 800f6d6:	f000 8098 	beq.w	800f80a <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800f6da:	4b7a      	ldr	r3, [pc, #488]	; (800f8c4 <tcp_input+0x7e4>)
 800f6dc:	2200      	movs	r2, #0
 800f6de:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800f6e0:	69f8      	ldr	r0, [r7, #28]
 800f6e2:	f000 f907 	bl	800f8f4 <tcp_input_delayed_close>
 800f6e6:	4603      	mov	r3, r0
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	f040 8090 	bne.w	800f80e <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800f6ee:	4b76      	ldr	r3, [pc, #472]	; (800f8c8 <tcp_input+0x7e8>)
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d041      	beq.n	800f77a <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800f6f6:	69fb      	ldr	r3, [r7, #28]
 800f6f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d006      	beq.n	800f70c <tcp_input+0x62c>
 800f6fe:	4b73      	ldr	r3, [pc, #460]	; (800f8cc <tcp_input+0x7ec>)
 800f700:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800f704:	4972      	ldr	r1, [pc, #456]	; (800f8d0 <tcp_input+0x7f0>)
 800f706:	4873      	ldr	r0, [pc, #460]	; (800f8d4 <tcp_input+0x7f4>)
 800f708:	f006 fefc 	bl	8016504 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800f70c:	69fb      	ldr	r3, [r7, #28]
 800f70e:	8b5b      	ldrh	r3, [r3, #26]
 800f710:	f003 0310 	and.w	r3, r3, #16
 800f714:	2b00      	cmp	r3, #0
 800f716:	d008      	beq.n	800f72a <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800f718:	4b6b      	ldr	r3, [pc, #428]	; (800f8c8 <tcp_input+0x7e8>)
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	4618      	mov	r0, r3
 800f71e:	f7fd feab 	bl	800d478 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800f722:	69f8      	ldr	r0, [r7, #28]
 800f724:	f7fe fc3c 	bl	800dfa0 <tcp_abort>
            goto aborted;
 800f728:	e078      	b.n	800f81c <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800f72a:	69fb      	ldr	r3, [r7, #28]
 800f72c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f730:	2b00      	cmp	r3, #0
 800f732:	d00c      	beq.n	800f74e <tcp_input+0x66e>
 800f734:	69fb      	ldr	r3, [r7, #28]
 800f736:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f73a:	69fb      	ldr	r3, [r7, #28]
 800f73c:	6918      	ldr	r0, [r3, #16]
 800f73e:	4b62      	ldr	r3, [pc, #392]	; (800f8c8 <tcp_input+0x7e8>)
 800f740:	681a      	ldr	r2, [r3, #0]
 800f742:	2300      	movs	r3, #0
 800f744:	69f9      	ldr	r1, [r7, #28]
 800f746:	47a0      	blx	r4
 800f748:	4603      	mov	r3, r0
 800f74a:	74fb      	strb	r3, [r7, #19]
 800f74c:	e008      	b.n	800f760 <tcp_input+0x680>
 800f74e:	4b5e      	ldr	r3, [pc, #376]	; (800f8c8 <tcp_input+0x7e8>)
 800f750:	681a      	ldr	r2, [r3, #0]
 800f752:	2300      	movs	r3, #0
 800f754:	69f9      	ldr	r1, [r7, #28]
 800f756:	2000      	movs	r0, #0
 800f758:	f7ff f952 	bl	800ea00 <tcp_recv_null>
 800f75c:	4603      	mov	r3, r0
 800f75e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800f760:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f764:	f113 0f0d 	cmn.w	r3, #13
 800f768:	d053      	beq.n	800f812 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800f76a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d003      	beq.n	800f77a <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800f772:	4b55      	ldr	r3, [pc, #340]	; (800f8c8 <tcp_input+0x7e8>)
 800f774:	681a      	ldr	r2, [r3, #0]
 800f776:	69fb      	ldr	r3, [r7, #28]
 800f778:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800f77a:	4b50      	ldr	r3, [pc, #320]	; (800f8bc <tcp_input+0x7dc>)
 800f77c:	781b      	ldrb	r3, [r3, #0]
 800f77e:	f003 0320 	and.w	r3, r3, #32
 800f782:	2b00      	cmp	r3, #0
 800f784:	d030      	beq.n	800f7e8 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800f786:	69fb      	ldr	r3, [r7, #28]
 800f788:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d009      	beq.n	800f7a2 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800f78e:	69fb      	ldr	r3, [r7, #28]
 800f790:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f792:	7b5a      	ldrb	r2, [r3, #13]
 800f794:	69fb      	ldr	r3, [r7, #28]
 800f796:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f798:	f042 0220 	orr.w	r2, r2, #32
 800f79c:	b2d2      	uxtb	r2, r2
 800f79e:	735a      	strb	r2, [r3, #13]
 800f7a0:	e022      	b.n	800f7e8 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f7a2:	69fb      	ldr	r3, [r7, #28]
 800f7a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f7a6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f7aa:	d005      	beq.n	800f7b8 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800f7ac:	69fb      	ldr	r3, [r7, #28]
 800f7ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f7b0:	3301      	adds	r3, #1
 800f7b2:	b29a      	uxth	r2, r3
 800f7b4:	69fb      	ldr	r3, [r7, #28]
 800f7b6:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800f7b8:	69fb      	ldr	r3, [r7, #28]
 800f7ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d00b      	beq.n	800f7da <tcp_input+0x6fa>
 800f7c2:	69fb      	ldr	r3, [r7, #28]
 800f7c4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f7c8:	69fb      	ldr	r3, [r7, #28]
 800f7ca:	6918      	ldr	r0, [r3, #16]
 800f7cc:	2300      	movs	r3, #0
 800f7ce:	2200      	movs	r2, #0
 800f7d0:	69f9      	ldr	r1, [r7, #28]
 800f7d2:	47a0      	blx	r4
 800f7d4:	4603      	mov	r3, r0
 800f7d6:	74fb      	strb	r3, [r7, #19]
 800f7d8:	e001      	b.n	800f7de <tcp_input+0x6fe>
 800f7da:	2300      	movs	r3, #0
 800f7dc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f7de:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f7e2:	f113 0f0d 	cmn.w	r3, #13
 800f7e6:	d016      	beq.n	800f816 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800f7e8:	4b33      	ldr	r3, [pc, #204]	; (800f8b8 <tcp_input+0x7d8>)
 800f7ea:	2200      	movs	r2, #0
 800f7ec:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800f7ee:	69f8      	ldr	r0, [r7, #28]
 800f7f0:	f000 f880 	bl	800f8f4 <tcp_input_delayed_close>
 800f7f4:	4603      	mov	r3, r0
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d10f      	bne.n	800f81a <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800f7fa:	69f8      	ldr	r0, [r7, #28]
 800f7fc:	f002 fab8 	bl	8011d70 <tcp_output>
 800f800:	e00c      	b.n	800f81c <tcp_input+0x73c>
        goto aborted;
 800f802:	bf00      	nop
 800f804:	e00a      	b.n	800f81c <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800f806:	bf00      	nop
 800f808:	e008      	b.n	800f81c <tcp_input+0x73c>
              goto aborted;
 800f80a:	bf00      	nop
 800f80c:	e006      	b.n	800f81c <tcp_input+0x73c>
          goto aborted;
 800f80e:	bf00      	nop
 800f810:	e004      	b.n	800f81c <tcp_input+0x73c>
            goto aborted;
 800f812:	bf00      	nop
 800f814:	e002      	b.n	800f81c <tcp_input+0x73c>
              goto aborted;
 800f816:	bf00      	nop
 800f818:	e000      	b.n	800f81c <tcp_input+0x73c>
          goto aborted;
 800f81a:	bf00      	nop
    tcp_input_pcb = NULL;
 800f81c:	4b26      	ldr	r3, [pc, #152]	; (800f8b8 <tcp_input+0x7d8>)
 800f81e:	2200      	movs	r2, #0
 800f820:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800f822:	4b29      	ldr	r3, [pc, #164]	; (800f8c8 <tcp_input+0x7e8>)
 800f824:	2200      	movs	r2, #0
 800f826:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800f828:	4b2b      	ldr	r3, [pc, #172]	; (800f8d8 <tcp_input+0x7f8>)
 800f82a:	685b      	ldr	r3, [r3, #4]
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d03f      	beq.n	800f8b0 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800f830:	4b29      	ldr	r3, [pc, #164]	; (800f8d8 <tcp_input+0x7f8>)
 800f832:	685b      	ldr	r3, [r3, #4]
 800f834:	4618      	mov	r0, r3
 800f836:	f7fd fe1f 	bl	800d478 <pbuf_free>
      inseg.p = NULL;
 800f83a:	4b27      	ldr	r3, [pc, #156]	; (800f8d8 <tcp_input+0x7f8>)
 800f83c:	2200      	movs	r2, #0
 800f83e:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800f840:	e036      	b.n	800f8b0 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800f842:	4b26      	ldr	r3, [pc, #152]	; (800f8dc <tcp_input+0x7fc>)
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	899b      	ldrh	r3, [r3, #12]
 800f848:	b29b      	uxth	r3, r3
 800f84a:	4618      	mov	r0, r3
 800f84c:	f7fc fae0 	bl	800be10 <lwip_htons>
 800f850:	4603      	mov	r3, r0
 800f852:	b2db      	uxtb	r3, r3
 800f854:	f003 0304 	and.w	r3, r3, #4
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d118      	bne.n	800f88e <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f85c:	4b20      	ldr	r3, [pc, #128]	; (800f8e0 <tcp_input+0x800>)
 800f85e:	6819      	ldr	r1, [r3, #0]
 800f860:	4b20      	ldr	r3, [pc, #128]	; (800f8e4 <tcp_input+0x804>)
 800f862:	881b      	ldrh	r3, [r3, #0]
 800f864:	461a      	mov	r2, r3
 800f866:	4b20      	ldr	r3, [pc, #128]	; (800f8e8 <tcp_input+0x808>)
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f86c:	4b1b      	ldr	r3, [pc, #108]	; (800f8dc <tcp_input+0x7fc>)
 800f86e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f870:	885b      	ldrh	r3, [r3, #2]
 800f872:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f874:	4a19      	ldr	r2, [pc, #100]	; (800f8dc <tcp_input+0x7fc>)
 800f876:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f878:	8812      	ldrh	r2, [r2, #0]
 800f87a:	b292      	uxth	r2, r2
 800f87c:	9202      	str	r2, [sp, #8]
 800f87e:	9301      	str	r3, [sp, #4]
 800f880:	4b1a      	ldr	r3, [pc, #104]	; (800f8ec <tcp_input+0x80c>)
 800f882:	9300      	str	r3, [sp, #0]
 800f884:	4b1a      	ldr	r3, [pc, #104]	; (800f8f0 <tcp_input+0x810>)
 800f886:	4602      	mov	r2, r0
 800f888:	2000      	movs	r0, #0
 800f88a:	f003 f825 	bl	80128d8 <tcp_rst>
    pbuf_free(p);
 800f88e:	6878      	ldr	r0, [r7, #4]
 800f890:	f7fd fdf2 	bl	800d478 <pbuf_free>
  return;
 800f894:	e00c      	b.n	800f8b0 <tcp_input+0x7d0>
    goto dropped;
 800f896:	bf00      	nop
 800f898:	e006      	b.n	800f8a8 <tcp_input+0x7c8>
    goto dropped;
 800f89a:	bf00      	nop
 800f89c:	e004      	b.n	800f8a8 <tcp_input+0x7c8>
    goto dropped;
 800f89e:	bf00      	nop
 800f8a0:	e002      	b.n	800f8a8 <tcp_input+0x7c8>
      goto dropped;
 800f8a2:	bf00      	nop
 800f8a4:	e000      	b.n	800f8a8 <tcp_input+0x7c8>
      goto dropped;
 800f8a6:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800f8a8:	6878      	ldr	r0, [r7, #4]
 800f8aa:	f7fd fde5 	bl	800d478 <pbuf_free>
 800f8ae:	e000      	b.n	800f8b2 <tcp_input+0x7d2>
  return;
 800f8b0:	bf00      	nop
}
 800f8b2:	3724      	adds	r7, #36	; 0x24
 800f8b4:	46bd      	mov	sp, r7
 800f8b6:	bd90      	pop	{r4, r7, pc}
 800f8b8:	2000af70 	.word	0x2000af70
 800f8bc:	20004245 	.word	0x20004245
 800f8c0:	2000af5c 	.word	0x2000af5c
 800f8c4:	20004240 	.word	0x20004240
 800f8c8:	20004248 	.word	0x20004248
 800f8cc:	080188d4 	.word	0x080188d4
 800f8d0:	08018a88 	.word	0x08018a88
 800f8d4:	08018920 	.word	0x08018920
 800f8d8:	20004218 	.word	0x20004218
 800f8dc:	20004228 	.word	0x20004228
 800f8e0:	2000423c 	.word	0x2000423c
 800f8e4:	20004242 	.word	0x20004242
 800f8e8:	20004238 	.word	0x20004238
 800f8ec:	20007858 	.word	0x20007858
 800f8f0:	2000785c 	.word	0x2000785c

0800f8f4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800f8f4:	b580      	push	{r7, lr}
 800f8f6:	b082      	sub	sp, #8
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d106      	bne.n	800f910 <tcp_input_delayed_close+0x1c>
 800f902:	4b17      	ldr	r3, [pc, #92]	; (800f960 <tcp_input_delayed_close+0x6c>)
 800f904:	f240 225a 	movw	r2, #602	; 0x25a
 800f908:	4916      	ldr	r1, [pc, #88]	; (800f964 <tcp_input_delayed_close+0x70>)
 800f90a:	4817      	ldr	r0, [pc, #92]	; (800f968 <tcp_input_delayed_close+0x74>)
 800f90c:	f006 fdfa 	bl	8016504 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800f910:	4b16      	ldr	r3, [pc, #88]	; (800f96c <tcp_input_delayed_close+0x78>)
 800f912:	781b      	ldrb	r3, [r3, #0]
 800f914:	f003 0310 	and.w	r3, r3, #16
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d01c      	beq.n	800f956 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	8b5b      	ldrh	r3, [r3, #26]
 800f920:	f003 0310 	and.w	r3, r3, #16
 800f924:	2b00      	cmp	r3, #0
 800f926:	d10d      	bne.n	800f944 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d008      	beq.n	800f944 <tcp_input_delayed_close+0x50>
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f938:	687a      	ldr	r2, [r7, #4]
 800f93a:	6912      	ldr	r2, [r2, #16]
 800f93c:	f06f 010e 	mvn.w	r1, #14
 800f940:	4610      	mov	r0, r2
 800f942:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f944:	6879      	ldr	r1, [r7, #4]
 800f946:	480a      	ldr	r0, [pc, #40]	; (800f970 <tcp_input_delayed_close+0x7c>)
 800f948:	f7ff fa52 	bl	800edf0 <tcp_pcb_remove>
    tcp_free(pcb);
 800f94c:	6878      	ldr	r0, [r7, #4]
 800f94e:	f7fe f83f 	bl	800d9d0 <tcp_free>
    return 1;
 800f952:	2301      	movs	r3, #1
 800f954:	e000      	b.n	800f958 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800f956:	2300      	movs	r3, #0
}
 800f958:	4618      	mov	r0, r3
 800f95a:	3708      	adds	r7, #8
 800f95c:	46bd      	mov	sp, r7
 800f95e:	bd80      	pop	{r7, pc}
 800f960:	080188d4 	.word	0x080188d4
 800f964:	08018aa4 	.word	0x08018aa4
 800f968:	08018920 	.word	0x08018920
 800f96c:	20004245 	.word	0x20004245
 800f970:	2000af5c 	.word	0x2000af5c

0800f974 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800f974:	b590      	push	{r4, r7, lr}
 800f976:	b08b      	sub	sp, #44	; 0x2c
 800f978:	af04      	add	r7, sp, #16
 800f97a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800f97c:	4b6f      	ldr	r3, [pc, #444]	; (800fb3c <tcp_listen_input+0x1c8>)
 800f97e:	781b      	ldrb	r3, [r3, #0]
 800f980:	f003 0304 	and.w	r3, r3, #4
 800f984:	2b00      	cmp	r3, #0
 800f986:	f040 80d2 	bne.w	800fb2e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d106      	bne.n	800f99e <tcp_listen_input+0x2a>
 800f990:	4b6b      	ldr	r3, [pc, #428]	; (800fb40 <tcp_listen_input+0x1cc>)
 800f992:	f240 2281 	movw	r2, #641	; 0x281
 800f996:	496b      	ldr	r1, [pc, #428]	; (800fb44 <tcp_listen_input+0x1d0>)
 800f998:	486b      	ldr	r0, [pc, #428]	; (800fb48 <tcp_listen_input+0x1d4>)
 800f99a:	f006 fdb3 	bl	8016504 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800f99e:	4b67      	ldr	r3, [pc, #412]	; (800fb3c <tcp_listen_input+0x1c8>)
 800f9a0:	781b      	ldrb	r3, [r3, #0]
 800f9a2:	f003 0310 	and.w	r3, r3, #16
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d019      	beq.n	800f9de <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f9aa:	4b68      	ldr	r3, [pc, #416]	; (800fb4c <tcp_listen_input+0x1d8>)
 800f9ac:	6819      	ldr	r1, [r3, #0]
 800f9ae:	4b68      	ldr	r3, [pc, #416]	; (800fb50 <tcp_listen_input+0x1dc>)
 800f9b0:	881b      	ldrh	r3, [r3, #0]
 800f9b2:	461a      	mov	r2, r3
 800f9b4:	4b67      	ldr	r3, [pc, #412]	; (800fb54 <tcp_listen_input+0x1e0>)
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f9ba:	4b67      	ldr	r3, [pc, #412]	; (800fb58 <tcp_listen_input+0x1e4>)
 800f9bc:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f9be:	885b      	ldrh	r3, [r3, #2]
 800f9c0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f9c2:	4a65      	ldr	r2, [pc, #404]	; (800fb58 <tcp_listen_input+0x1e4>)
 800f9c4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f9c6:	8812      	ldrh	r2, [r2, #0]
 800f9c8:	b292      	uxth	r2, r2
 800f9ca:	9202      	str	r2, [sp, #8]
 800f9cc:	9301      	str	r3, [sp, #4]
 800f9ce:	4b63      	ldr	r3, [pc, #396]	; (800fb5c <tcp_listen_input+0x1e8>)
 800f9d0:	9300      	str	r3, [sp, #0]
 800f9d2:	4b63      	ldr	r3, [pc, #396]	; (800fb60 <tcp_listen_input+0x1ec>)
 800f9d4:	4602      	mov	r2, r0
 800f9d6:	6878      	ldr	r0, [r7, #4]
 800f9d8:	f002 ff7e 	bl	80128d8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800f9dc:	e0a9      	b.n	800fb32 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800f9de:	4b57      	ldr	r3, [pc, #348]	; (800fb3c <tcp_listen_input+0x1c8>)
 800f9e0:	781b      	ldrb	r3, [r3, #0]
 800f9e2:	f003 0302 	and.w	r3, r3, #2
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	f000 80a3 	beq.w	800fb32 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	7d5b      	ldrb	r3, [r3, #21]
 800f9f0:	4618      	mov	r0, r3
 800f9f2:	f7ff f929 	bl	800ec48 <tcp_alloc>
 800f9f6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800f9f8:	697b      	ldr	r3, [r7, #20]
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d111      	bne.n	800fa22 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	699b      	ldr	r3, [r3, #24]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d00a      	beq.n	800fa1c <tcp_listen_input+0xa8>
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	699b      	ldr	r3, [r3, #24]
 800fa0a:	687a      	ldr	r2, [r7, #4]
 800fa0c:	6910      	ldr	r0, [r2, #16]
 800fa0e:	f04f 32ff 	mov.w	r2, #4294967295
 800fa12:	2100      	movs	r1, #0
 800fa14:	4798      	blx	r3
 800fa16:	4603      	mov	r3, r0
 800fa18:	73bb      	strb	r3, [r7, #14]
      return;
 800fa1a:	e08b      	b.n	800fb34 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fa1c:	23f0      	movs	r3, #240	; 0xf0
 800fa1e:	73bb      	strb	r3, [r7, #14]
      return;
 800fa20:	e088      	b.n	800fb34 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800fa22:	4b50      	ldr	r3, [pc, #320]	; (800fb64 <tcp_listen_input+0x1f0>)
 800fa24:	695a      	ldr	r2, [r3, #20]
 800fa26:	697b      	ldr	r3, [r7, #20]
 800fa28:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800fa2a:	4b4e      	ldr	r3, [pc, #312]	; (800fb64 <tcp_listen_input+0x1f0>)
 800fa2c:	691a      	ldr	r2, [r3, #16]
 800fa2e:	697b      	ldr	r3, [r7, #20]
 800fa30:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	8ada      	ldrh	r2, [r3, #22]
 800fa36:	697b      	ldr	r3, [r7, #20]
 800fa38:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800fa3a:	4b47      	ldr	r3, [pc, #284]	; (800fb58 <tcp_listen_input+0x1e4>)
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	881b      	ldrh	r3, [r3, #0]
 800fa40:	b29a      	uxth	r2, r3
 800fa42:	697b      	ldr	r3, [r7, #20]
 800fa44:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800fa46:	697b      	ldr	r3, [r7, #20]
 800fa48:	2203      	movs	r2, #3
 800fa4a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800fa4c:	4b41      	ldr	r3, [pc, #260]	; (800fb54 <tcp_listen_input+0x1e0>)
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	1c5a      	adds	r2, r3, #1
 800fa52:	697b      	ldr	r3, [r7, #20]
 800fa54:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800fa56:	697b      	ldr	r3, [r7, #20]
 800fa58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fa5a:	697b      	ldr	r3, [r7, #20]
 800fa5c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800fa5e:	6978      	ldr	r0, [r7, #20]
 800fa60:	f7ff fa5a 	bl	800ef18 <tcp_next_iss>
 800fa64:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800fa66:	697b      	ldr	r3, [r7, #20]
 800fa68:	693a      	ldr	r2, [r7, #16]
 800fa6a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800fa6c:	697b      	ldr	r3, [r7, #20]
 800fa6e:	693a      	ldr	r2, [r7, #16]
 800fa70:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800fa72:	697b      	ldr	r3, [r7, #20]
 800fa74:	693a      	ldr	r2, [r7, #16]
 800fa76:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800fa78:	697b      	ldr	r3, [r7, #20]
 800fa7a:	693a      	ldr	r2, [r7, #16]
 800fa7c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800fa7e:	4b35      	ldr	r3, [pc, #212]	; (800fb54 <tcp_listen_input+0x1e0>)
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	1e5a      	subs	r2, r3, #1
 800fa84:	697b      	ldr	r3, [r7, #20]
 800fa86:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	691a      	ldr	r2, [r3, #16]
 800fa8c:	697b      	ldr	r3, [r7, #20]
 800fa8e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800fa90:	697b      	ldr	r3, [r7, #20]
 800fa92:	687a      	ldr	r2, [r7, #4]
 800fa94:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	7a5b      	ldrb	r3, [r3, #9]
 800fa9a:	f003 030c 	and.w	r3, r3, #12
 800fa9e:	b2da      	uxtb	r2, r3
 800faa0:	697b      	ldr	r3, [r7, #20]
 800faa2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	7a1a      	ldrb	r2, [r3, #8]
 800faa8:	697b      	ldr	r3, [r7, #20]
 800faaa:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800faac:	4b2e      	ldr	r3, [pc, #184]	; (800fb68 <tcp_listen_input+0x1f4>)
 800faae:	681a      	ldr	r2, [r3, #0]
 800fab0:	697b      	ldr	r3, [r7, #20]
 800fab2:	60da      	str	r2, [r3, #12]
 800fab4:	4a2c      	ldr	r2, [pc, #176]	; (800fb68 <tcp_listen_input+0x1f4>)
 800fab6:	697b      	ldr	r3, [r7, #20]
 800fab8:	6013      	str	r3, [r2, #0]
 800faba:	f003 f8cf 	bl	8012c5c <tcp_timer_needed>
 800fabe:	4b2b      	ldr	r3, [pc, #172]	; (800fb6c <tcp_listen_input+0x1f8>)
 800fac0:	2201      	movs	r2, #1
 800fac2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800fac4:	6978      	ldr	r0, [r7, #20]
 800fac6:	f001 fd8d 	bl	80115e4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800faca:	4b23      	ldr	r3, [pc, #140]	; (800fb58 <tcp_listen_input+0x1e4>)
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	89db      	ldrh	r3, [r3, #14]
 800fad0:	b29a      	uxth	r2, r3
 800fad2:	697b      	ldr	r3, [r7, #20]
 800fad4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800fad8:	697b      	ldr	r3, [r7, #20]
 800fada:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fade:	697b      	ldr	r3, [r7, #20]
 800fae0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800fae4:	697b      	ldr	r3, [r7, #20]
 800fae6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800fae8:	697b      	ldr	r3, [r7, #20]
 800faea:	3304      	adds	r3, #4
 800faec:	4618      	mov	r0, r3
 800faee:	f004 fcc3 	bl	8014478 <ip4_route>
 800faf2:	4601      	mov	r1, r0
 800faf4:	697b      	ldr	r3, [r7, #20]
 800faf6:	3304      	adds	r3, #4
 800faf8:	461a      	mov	r2, r3
 800fafa:	4620      	mov	r0, r4
 800fafc:	f7ff fa32 	bl	800ef64 <tcp_eff_send_mss_netif>
 800fb00:	4603      	mov	r3, r0
 800fb02:	461a      	mov	r2, r3
 800fb04:	697b      	ldr	r3, [r7, #20]
 800fb06:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800fb08:	2112      	movs	r1, #18
 800fb0a:	6978      	ldr	r0, [r7, #20]
 800fb0c:	f002 f842 	bl	8011b94 <tcp_enqueue_flags>
 800fb10:	4603      	mov	r3, r0
 800fb12:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800fb14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d004      	beq.n	800fb26 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800fb1c:	2100      	movs	r1, #0
 800fb1e:	6978      	ldr	r0, [r7, #20]
 800fb20:	f7fe f980 	bl	800de24 <tcp_abandon>
      return;
 800fb24:	e006      	b.n	800fb34 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800fb26:	6978      	ldr	r0, [r7, #20]
 800fb28:	f002 f922 	bl	8011d70 <tcp_output>
  return;
 800fb2c:	e001      	b.n	800fb32 <tcp_listen_input+0x1be>
    return;
 800fb2e:	bf00      	nop
 800fb30:	e000      	b.n	800fb34 <tcp_listen_input+0x1c0>
  return;
 800fb32:	bf00      	nop
}
 800fb34:	371c      	adds	r7, #28
 800fb36:	46bd      	mov	sp, r7
 800fb38:	bd90      	pop	{r4, r7, pc}
 800fb3a:	bf00      	nop
 800fb3c:	20004244 	.word	0x20004244
 800fb40:	080188d4 	.word	0x080188d4
 800fb44:	08018acc 	.word	0x08018acc
 800fb48:	08018920 	.word	0x08018920
 800fb4c:	2000423c 	.word	0x2000423c
 800fb50:	20004242 	.word	0x20004242
 800fb54:	20004238 	.word	0x20004238
 800fb58:	20004228 	.word	0x20004228
 800fb5c:	20007858 	.word	0x20007858
 800fb60:	2000785c 	.word	0x2000785c
 800fb64:	20007848 	.word	0x20007848
 800fb68:	2000af5c 	.word	0x2000af5c
 800fb6c:	2000af58 	.word	0x2000af58

0800fb70 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800fb70:	b580      	push	{r7, lr}
 800fb72:	b086      	sub	sp, #24
 800fb74:	af04      	add	r7, sp, #16
 800fb76:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800fb78:	4b2f      	ldr	r3, [pc, #188]	; (800fc38 <tcp_timewait_input+0xc8>)
 800fb7a:	781b      	ldrb	r3, [r3, #0]
 800fb7c:	f003 0304 	and.w	r3, r3, #4
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d153      	bne.n	800fc2c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d106      	bne.n	800fb98 <tcp_timewait_input+0x28>
 800fb8a:	4b2c      	ldr	r3, [pc, #176]	; (800fc3c <tcp_timewait_input+0xcc>)
 800fb8c:	f240 22ee 	movw	r2, #750	; 0x2ee
 800fb90:	492b      	ldr	r1, [pc, #172]	; (800fc40 <tcp_timewait_input+0xd0>)
 800fb92:	482c      	ldr	r0, [pc, #176]	; (800fc44 <tcp_timewait_input+0xd4>)
 800fb94:	f006 fcb6 	bl	8016504 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800fb98:	4b27      	ldr	r3, [pc, #156]	; (800fc38 <tcp_timewait_input+0xc8>)
 800fb9a:	781b      	ldrb	r3, [r3, #0]
 800fb9c:	f003 0302 	and.w	r3, r3, #2
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d02a      	beq.n	800fbfa <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800fba4:	4b28      	ldr	r3, [pc, #160]	; (800fc48 <tcp_timewait_input+0xd8>)
 800fba6:	681a      	ldr	r2, [r3, #0]
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbac:	1ad3      	subs	r3, r2, r3
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	db2d      	blt.n	800fc0e <tcp_timewait_input+0x9e>
 800fbb2:	4b25      	ldr	r3, [pc, #148]	; (800fc48 <tcp_timewait_input+0xd8>)
 800fbb4:	681a      	ldr	r2, [r3, #0]
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbba:	6879      	ldr	r1, [r7, #4]
 800fbbc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fbbe:	440b      	add	r3, r1
 800fbc0:	1ad3      	subs	r3, r2, r3
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	dc23      	bgt.n	800fc0e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fbc6:	4b21      	ldr	r3, [pc, #132]	; (800fc4c <tcp_timewait_input+0xdc>)
 800fbc8:	6819      	ldr	r1, [r3, #0]
 800fbca:	4b21      	ldr	r3, [pc, #132]	; (800fc50 <tcp_timewait_input+0xe0>)
 800fbcc:	881b      	ldrh	r3, [r3, #0]
 800fbce:	461a      	mov	r2, r3
 800fbd0:	4b1d      	ldr	r3, [pc, #116]	; (800fc48 <tcp_timewait_input+0xd8>)
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fbd6:	4b1f      	ldr	r3, [pc, #124]	; (800fc54 <tcp_timewait_input+0xe4>)
 800fbd8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fbda:	885b      	ldrh	r3, [r3, #2]
 800fbdc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fbde:	4a1d      	ldr	r2, [pc, #116]	; (800fc54 <tcp_timewait_input+0xe4>)
 800fbe0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fbe2:	8812      	ldrh	r2, [r2, #0]
 800fbe4:	b292      	uxth	r2, r2
 800fbe6:	9202      	str	r2, [sp, #8]
 800fbe8:	9301      	str	r3, [sp, #4]
 800fbea:	4b1b      	ldr	r3, [pc, #108]	; (800fc58 <tcp_timewait_input+0xe8>)
 800fbec:	9300      	str	r3, [sp, #0]
 800fbee:	4b1b      	ldr	r3, [pc, #108]	; (800fc5c <tcp_timewait_input+0xec>)
 800fbf0:	4602      	mov	r2, r0
 800fbf2:	6878      	ldr	r0, [r7, #4]
 800fbf4:	f002 fe70 	bl	80128d8 <tcp_rst>
      return;
 800fbf8:	e01b      	b.n	800fc32 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800fbfa:	4b0f      	ldr	r3, [pc, #60]	; (800fc38 <tcp_timewait_input+0xc8>)
 800fbfc:	781b      	ldrb	r3, [r3, #0]
 800fbfe:	f003 0301 	and.w	r3, r3, #1
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d003      	beq.n	800fc0e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800fc06:	4b16      	ldr	r3, [pc, #88]	; (800fc60 <tcp_timewait_input+0xf0>)
 800fc08:	681a      	ldr	r2, [r3, #0]
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800fc0e:	4b10      	ldr	r3, [pc, #64]	; (800fc50 <tcp_timewait_input+0xe0>)
 800fc10:	881b      	ldrh	r3, [r3, #0]
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d00c      	beq.n	800fc30 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	8b5b      	ldrh	r3, [r3, #26]
 800fc1a:	f043 0302 	orr.w	r3, r3, #2
 800fc1e:	b29a      	uxth	r2, r3
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fc24:	6878      	ldr	r0, [r7, #4]
 800fc26:	f002 f8a3 	bl	8011d70 <tcp_output>
  }
  return;
 800fc2a:	e001      	b.n	800fc30 <tcp_timewait_input+0xc0>
    return;
 800fc2c:	bf00      	nop
 800fc2e:	e000      	b.n	800fc32 <tcp_timewait_input+0xc2>
  return;
 800fc30:	bf00      	nop
}
 800fc32:	3708      	adds	r7, #8
 800fc34:	46bd      	mov	sp, r7
 800fc36:	bd80      	pop	{r7, pc}
 800fc38:	20004244 	.word	0x20004244
 800fc3c:	080188d4 	.word	0x080188d4
 800fc40:	08018aec 	.word	0x08018aec
 800fc44:	08018920 	.word	0x08018920
 800fc48:	20004238 	.word	0x20004238
 800fc4c:	2000423c 	.word	0x2000423c
 800fc50:	20004242 	.word	0x20004242
 800fc54:	20004228 	.word	0x20004228
 800fc58:	20007858 	.word	0x20007858
 800fc5c:	2000785c 	.word	0x2000785c
 800fc60:	2000af60 	.word	0x2000af60

0800fc64 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800fc64:	b590      	push	{r4, r7, lr}
 800fc66:	b08d      	sub	sp, #52	; 0x34
 800fc68:	af04      	add	r7, sp, #16
 800fc6a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800fc6c:	2300      	movs	r3, #0
 800fc6e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800fc70:	2300      	movs	r3, #0
 800fc72:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d106      	bne.n	800fc88 <tcp_process+0x24>
 800fc7a:	4ba5      	ldr	r3, [pc, #660]	; (800ff10 <tcp_process+0x2ac>)
 800fc7c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800fc80:	49a4      	ldr	r1, [pc, #656]	; (800ff14 <tcp_process+0x2b0>)
 800fc82:	48a5      	ldr	r0, [pc, #660]	; (800ff18 <tcp_process+0x2b4>)
 800fc84:	f006 fc3e 	bl	8016504 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800fc88:	4ba4      	ldr	r3, [pc, #656]	; (800ff1c <tcp_process+0x2b8>)
 800fc8a:	781b      	ldrb	r3, [r3, #0]
 800fc8c:	f003 0304 	and.w	r3, r3, #4
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d04e      	beq.n	800fd32 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	7d1b      	ldrb	r3, [r3, #20]
 800fc98:	2b02      	cmp	r3, #2
 800fc9a:	d108      	bne.n	800fcae <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fca0:	4b9f      	ldr	r3, [pc, #636]	; (800ff20 <tcp_process+0x2bc>)
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	429a      	cmp	r2, r3
 800fca6:	d123      	bne.n	800fcf0 <tcp_process+0x8c>
        acceptable = 1;
 800fca8:	2301      	movs	r3, #1
 800fcaa:	76fb      	strb	r3, [r7, #27]
 800fcac:	e020      	b.n	800fcf0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fcb2:	4b9c      	ldr	r3, [pc, #624]	; (800ff24 <tcp_process+0x2c0>)
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	429a      	cmp	r2, r3
 800fcb8:	d102      	bne.n	800fcc0 <tcp_process+0x5c>
        acceptable = 1;
 800fcba:	2301      	movs	r3, #1
 800fcbc:	76fb      	strb	r3, [r7, #27]
 800fcbe:	e017      	b.n	800fcf0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fcc0:	4b98      	ldr	r3, [pc, #608]	; (800ff24 <tcp_process+0x2c0>)
 800fcc2:	681a      	ldr	r2, [r3, #0]
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcc8:	1ad3      	subs	r3, r2, r3
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	db10      	blt.n	800fcf0 <tcp_process+0x8c>
 800fcce:	4b95      	ldr	r3, [pc, #596]	; (800ff24 <tcp_process+0x2c0>)
 800fcd0:	681a      	ldr	r2, [r3, #0]
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcd6:	6879      	ldr	r1, [r7, #4]
 800fcd8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fcda:	440b      	add	r3, r1
 800fcdc:	1ad3      	subs	r3, r2, r3
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	dc06      	bgt.n	800fcf0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	8b5b      	ldrh	r3, [r3, #26]
 800fce6:	f043 0302 	orr.w	r3, r3, #2
 800fcea:	b29a      	uxth	r2, r3
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800fcf0:	7efb      	ldrb	r3, [r7, #27]
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d01b      	beq.n	800fd2e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	7d1b      	ldrb	r3, [r3, #20]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d106      	bne.n	800fd0c <tcp_process+0xa8>
 800fcfe:	4b84      	ldr	r3, [pc, #528]	; (800ff10 <tcp_process+0x2ac>)
 800fd00:	f44f 724e 	mov.w	r2, #824	; 0x338
 800fd04:	4988      	ldr	r1, [pc, #544]	; (800ff28 <tcp_process+0x2c4>)
 800fd06:	4884      	ldr	r0, [pc, #528]	; (800ff18 <tcp_process+0x2b4>)
 800fd08:	f006 fbfc 	bl	8016504 <iprintf>
      recv_flags |= TF_RESET;
 800fd0c:	4b87      	ldr	r3, [pc, #540]	; (800ff2c <tcp_process+0x2c8>)
 800fd0e:	781b      	ldrb	r3, [r3, #0]
 800fd10:	f043 0308 	orr.w	r3, r3, #8
 800fd14:	b2da      	uxtb	r2, r3
 800fd16:	4b85      	ldr	r3, [pc, #532]	; (800ff2c <tcp_process+0x2c8>)
 800fd18:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	8b5b      	ldrh	r3, [r3, #26]
 800fd1e:	f023 0301 	bic.w	r3, r3, #1
 800fd22:	b29a      	uxth	r2, r3
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800fd28:	f06f 030d 	mvn.w	r3, #13
 800fd2c:	e37a      	b.n	8010424 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800fd2e:	2300      	movs	r3, #0
 800fd30:	e378      	b.n	8010424 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800fd32:	4b7a      	ldr	r3, [pc, #488]	; (800ff1c <tcp_process+0x2b8>)
 800fd34:	781b      	ldrb	r3, [r3, #0]
 800fd36:	f003 0302 	and.w	r3, r3, #2
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d010      	beq.n	800fd60 <tcp_process+0xfc>
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	7d1b      	ldrb	r3, [r3, #20]
 800fd42:	2b02      	cmp	r3, #2
 800fd44:	d00c      	beq.n	800fd60 <tcp_process+0xfc>
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	7d1b      	ldrb	r3, [r3, #20]
 800fd4a:	2b03      	cmp	r3, #3
 800fd4c:	d008      	beq.n	800fd60 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	8b5b      	ldrh	r3, [r3, #26]
 800fd52:	f043 0302 	orr.w	r3, r3, #2
 800fd56:	b29a      	uxth	r2, r3
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800fd5c:	2300      	movs	r3, #0
 800fd5e:	e361      	b.n	8010424 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	8b5b      	ldrh	r3, [r3, #26]
 800fd64:	f003 0310 	and.w	r3, r3, #16
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d103      	bne.n	800fd74 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800fd6c:	4b70      	ldr	r3, [pc, #448]	; (800ff30 <tcp_process+0x2cc>)
 800fd6e:	681a      	ldr	r2, [r3, #0]
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	2200      	movs	r2, #0
 800fd78:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	2200      	movs	r2, #0
 800fd80:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800fd84:	6878      	ldr	r0, [r7, #4]
 800fd86:	f001 fc2d 	bl	80115e4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	7d1b      	ldrb	r3, [r3, #20]
 800fd8e:	3b02      	subs	r3, #2
 800fd90:	2b07      	cmp	r3, #7
 800fd92:	f200 8337 	bhi.w	8010404 <tcp_process+0x7a0>
 800fd96:	a201      	add	r2, pc, #4	; (adr r2, 800fd9c <tcp_process+0x138>)
 800fd98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd9c:	0800fdbd 	.word	0x0800fdbd
 800fda0:	0800ffed 	.word	0x0800ffed
 800fda4:	08010165 	.word	0x08010165
 800fda8:	0801018f 	.word	0x0801018f
 800fdac:	080102b3 	.word	0x080102b3
 800fdb0:	08010165 	.word	0x08010165
 800fdb4:	0801033f 	.word	0x0801033f
 800fdb8:	080103cf 	.word	0x080103cf
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800fdbc:	4b57      	ldr	r3, [pc, #348]	; (800ff1c <tcp_process+0x2b8>)
 800fdbe:	781b      	ldrb	r3, [r3, #0]
 800fdc0:	f003 0310 	and.w	r3, r3, #16
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	f000 80e4 	beq.w	800ff92 <tcp_process+0x32e>
 800fdca:	4b54      	ldr	r3, [pc, #336]	; (800ff1c <tcp_process+0x2b8>)
 800fdcc:	781b      	ldrb	r3, [r3, #0]
 800fdce:	f003 0302 	and.w	r3, r3, #2
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	f000 80dd 	beq.w	800ff92 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fddc:	1c5a      	adds	r2, r3, #1
 800fdde:	4b50      	ldr	r3, [pc, #320]	; (800ff20 <tcp_process+0x2bc>)
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	429a      	cmp	r2, r3
 800fde4:	f040 80d5 	bne.w	800ff92 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800fde8:	4b4e      	ldr	r3, [pc, #312]	; (800ff24 <tcp_process+0x2c0>)
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	1c5a      	adds	r2, r3, #1
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800fdfa:	4b49      	ldr	r3, [pc, #292]	; (800ff20 <tcp_process+0x2bc>)
 800fdfc:	681a      	ldr	r2, [r3, #0]
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800fe02:	4b4c      	ldr	r3, [pc, #304]	; (800ff34 <tcp_process+0x2d0>)
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	89db      	ldrh	r3, [r3, #14]
 800fe08:	b29a      	uxth	r2, r3
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800fe1c:	4b41      	ldr	r3, [pc, #260]	; (800ff24 <tcp_process+0x2c0>)
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	1e5a      	subs	r2, r3, #1
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	2204      	movs	r2, #4
 800fe2a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	3304      	adds	r3, #4
 800fe34:	4618      	mov	r0, r3
 800fe36:	f004 fb1f 	bl	8014478 <ip4_route>
 800fe3a:	4601      	mov	r1, r0
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	3304      	adds	r3, #4
 800fe40:	461a      	mov	r2, r3
 800fe42:	4620      	mov	r0, r4
 800fe44:	f7ff f88e 	bl	800ef64 <tcp_eff_send_mss_netif>
 800fe48:	4603      	mov	r3, r0
 800fe4a:	461a      	mov	r2, r3
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fe54:	009a      	lsls	r2, r3, #2
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fe5a:	005b      	lsls	r3, r3, #1
 800fe5c:	f241 111c 	movw	r1, #4380	; 0x111c
 800fe60:	428b      	cmp	r3, r1
 800fe62:	bf38      	it	cc
 800fe64:	460b      	movcc	r3, r1
 800fe66:	429a      	cmp	r2, r3
 800fe68:	d204      	bcs.n	800fe74 <tcp_process+0x210>
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fe6e:	009b      	lsls	r3, r3, #2
 800fe70:	b29b      	uxth	r3, r3
 800fe72:	e00d      	b.n	800fe90 <tcp_process+0x22c>
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fe78:	005b      	lsls	r3, r3, #1
 800fe7a:	f241 121c 	movw	r2, #4380	; 0x111c
 800fe7e:	4293      	cmp	r3, r2
 800fe80:	d904      	bls.n	800fe8c <tcp_process+0x228>
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fe86:	005b      	lsls	r3, r3, #1
 800fe88:	b29b      	uxth	r3, r3
 800fe8a:	e001      	b.n	800fe90 <tcp_process+0x22c>
 800fe8c:	f241 131c 	movw	r3, #4380	; 0x111c
 800fe90:	687a      	ldr	r2, [r7, #4]
 800fe92:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d106      	bne.n	800feae <tcp_process+0x24a>
 800fea0:	4b1b      	ldr	r3, [pc, #108]	; (800ff10 <tcp_process+0x2ac>)
 800fea2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800fea6:	4924      	ldr	r1, [pc, #144]	; (800ff38 <tcp_process+0x2d4>)
 800fea8:	481b      	ldr	r0, [pc, #108]	; (800ff18 <tcp_process+0x2b4>)
 800feaa:	f006 fb2b 	bl	8016504 <iprintf>
        --pcb->snd_queuelen;
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800feb4:	3b01      	subs	r3, #1
 800feb6:	b29a      	uxth	r2, r3
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fec2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800fec4:	69fb      	ldr	r3, [r7, #28]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d111      	bne.n	800feee <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fece:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800fed0:	69fb      	ldr	r3, [r7, #28]
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d106      	bne.n	800fee4 <tcp_process+0x280>
 800fed6:	4b0e      	ldr	r3, [pc, #56]	; (800ff10 <tcp_process+0x2ac>)
 800fed8:	f44f 725d 	mov.w	r2, #884	; 0x374
 800fedc:	4917      	ldr	r1, [pc, #92]	; (800ff3c <tcp_process+0x2d8>)
 800fede:	480e      	ldr	r0, [pc, #56]	; (800ff18 <tcp_process+0x2b4>)
 800fee0:	f006 fb10 	bl	8016504 <iprintf>
          pcb->unsent = rseg->next;
 800fee4:	69fb      	ldr	r3, [r7, #28]
 800fee6:	681a      	ldr	r2, [r3, #0]
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	66da      	str	r2, [r3, #108]	; 0x6c
 800feec:	e003      	b.n	800fef6 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800feee:	69fb      	ldr	r3, [r7, #28]
 800fef0:	681a      	ldr	r2, [r3, #0]
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800fef6:	69f8      	ldr	r0, [r7, #28]
 800fef8:	f7fe fd3d 	bl	800e976 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d11d      	bne.n	800ff40 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ff0a:	861a      	strh	r2, [r3, #48]	; 0x30
 800ff0c:	e01f      	b.n	800ff4e <tcp_process+0x2ea>
 800ff0e:	bf00      	nop
 800ff10:	080188d4 	.word	0x080188d4
 800ff14:	08018b0c 	.word	0x08018b0c
 800ff18:	08018920 	.word	0x08018920
 800ff1c:	20004244 	.word	0x20004244
 800ff20:	2000423c 	.word	0x2000423c
 800ff24:	20004238 	.word	0x20004238
 800ff28:	08018b28 	.word	0x08018b28
 800ff2c:	20004245 	.word	0x20004245
 800ff30:	2000af60 	.word	0x2000af60
 800ff34:	20004228 	.word	0x20004228
 800ff38:	08018b48 	.word	0x08018b48
 800ff3c:	08018b60 	.word	0x08018b60
        } else {
          pcb->rtime = 0;
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	2200      	movs	r2, #0
 800ff44:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	2200      	movs	r2, #0
 800ff4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d00a      	beq.n	800ff6e <tcp_process+0x30a>
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ff5e:	687a      	ldr	r2, [r7, #4]
 800ff60:	6910      	ldr	r0, [r2, #16]
 800ff62:	2200      	movs	r2, #0
 800ff64:	6879      	ldr	r1, [r7, #4]
 800ff66:	4798      	blx	r3
 800ff68:	4603      	mov	r3, r0
 800ff6a:	76bb      	strb	r3, [r7, #26]
 800ff6c:	e001      	b.n	800ff72 <tcp_process+0x30e>
 800ff6e:	2300      	movs	r3, #0
 800ff70:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800ff72:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ff76:	f113 0f0d 	cmn.w	r3, #13
 800ff7a:	d102      	bne.n	800ff82 <tcp_process+0x31e>
          return ERR_ABRT;
 800ff7c:	f06f 030c 	mvn.w	r3, #12
 800ff80:	e250      	b.n	8010424 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	8b5b      	ldrh	r3, [r3, #26]
 800ff86:	f043 0302 	orr.w	r3, r3, #2
 800ff8a:	b29a      	uxth	r2, r3
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800ff90:	e23a      	b.n	8010408 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800ff92:	4b9d      	ldr	r3, [pc, #628]	; (8010208 <tcp_process+0x5a4>)
 800ff94:	781b      	ldrb	r3, [r3, #0]
 800ff96:	f003 0310 	and.w	r3, r3, #16
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	f000 8234 	beq.w	8010408 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ffa0:	4b9a      	ldr	r3, [pc, #616]	; (801020c <tcp_process+0x5a8>)
 800ffa2:	6819      	ldr	r1, [r3, #0]
 800ffa4:	4b9a      	ldr	r3, [pc, #616]	; (8010210 <tcp_process+0x5ac>)
 800ffa6:	881b      	ldrh	r3, [r3, #0]
 800ffa8:	461a      	mov	r2, r3
 800ffaa:	4b9a      	ldr	r3, [pc, #616]	; (8010214 <tcp_process+0x5b0>)
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ffb0:	4b99      	ldr	r3, [pc, #612]	; (8010218 <tcp_process+0x5b4>)
 800ffb2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ffb4:	885b      	ldrh	r3, [r3, #2]
 800ffb6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ffb8:	4a97      	ldr	r2, [pc, #604]	; (8010218 <tcp_process+0x5b4>)
 800ffba:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ffbc:	8812      	ldrh	r2, [r2, #0]
 800ffbe:	b292      	uxth	r2, r2
 800ffc0:	9202      	str	r2, [sp, #8]
 800ffc2:	9301      	str	r3, [sp, #4]
 800ffc4:	4b95      	ldr	r3, [pc, #596]	; (801021c <tcp_process+0x5b8>)
 800ffc6:	9300      	str	r3, [sp, #0]
 800ffc8:	4b95      	ldr	r3, [pc, #596]	; (8010220 <tcp_process+0x5bc>)
 800ffca:	4602      	mov	r2, r0
 800ffcc:	6878      	ldr	r0, [r7, #4]
 800ffce:	f002 fc83 	bl	80128d8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ffd8:	2b05      	cmp	r3, #5
 800ffda:	f200 8215 	bhi.w	8010408 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	2200      	movs	r2, #0
 800ffe2:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800ffe4:	6878      	ldr	r0, [r7, #4]
 800ffe6:	f002 fa4d 	bl	8012484 <tcp_rexmit_rto>
      break;
 800ffea:	e20d      	b.n	8010408 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800ffec:	4b86      	ldr	r3, [pc, #536]	; (8010208 <tcp_process+0x5a4>)
 800ffee:	781b      	ldrb	r3, [r3, #0]
 800fff0:	f003 0310 	and.w	r3, r3, #16
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	f000 80a1 	beq.w	801013c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fffa:	4b84      	ldr	r3, [pc, #528]	; (801020c <tcp_process+0x5a8>)
 800fffc:	681a      	ldr	r2, [r3, #0]
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010002:	1ad3      	subs	r3, r2, r3
 8010004:	3b01      	subs	r3, #1
 8010006:	2b00      	cmp	r3, #0
 8010008:	db7e      	blt.n	8010108 <tcp_process+0x4a4>
 801000a:	4b80      	ldr	r3, [pc, #512]	; (801020c <tcp_process+0x5a8>)
 801000c:	681a      	ldr	r2, [r3, #0]
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010012:	1ad3      	subs	r3, r2, r3
 8010014:	2b00      	cmp	r3, #0
 8010016:	dc77      	bgt.n	8010108 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	2204      	movs	r2, #4
 801001c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010022:	2b00      	cmp	r3, #0
 8010024:	d102      	bne.n	801002c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8010026:	23fa      	movs	r3, #250	; 0xfa
 8010028:	76bb      	strb	r3, [r7, #26]
 801002a:	e01d      	b.n	8010068 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010030:	699b      	ldr	r3, [r3, #24]
 8010032:	2b00      	cmp	r3, #0
 8010034:	d106      	bne.n	8010044 <tcp_process+0x3e0>
 8010036:	4b7b      	ldr	r3, [pc, #492]	; (8010224 <tcp_process+0x5c0>)
 8010038:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801003c:	497a      	ldr	r1, [pc, #488]	; (8010228 <tcp_process+0x5c4>)
 801003e:	487b      	ldr	r0, [pc, #492]	; (801022c <tcp_process+0x5c8>)
 8010040:	f006 fa60 	bl	8016504 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010048:	699b      	ldr	r3, [r3, #24]
 801004a:	2b00      	cmp	r3, #0
 801004c:	d00a      	beq.n	8010064 <tcp_process+0x400>
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010052:	699b      	ldr	r3, [r3, #24]
 8010054:	687a      	ldr	r2, [r7, #4]
 8010056:	6910      	ldr	r0, [r2, #16]
 8010058:	2200      	movs	r2, #0
 801005a:	6879      	ldr	r1, [r7, #4]
 801005c:	4798      	blx	r3
 801005e:	4603      	mov	r3, r0
 8010060:	76bb      	strb	r3, [r7, #26]
 8010062:	e001      	b.n	8010068 <tcp_process+0x404>
 8010064:	23f0      	movs	r3, #240	; 0xf0
 8010066:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8010068:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801006c:	2b00      	cmp	r3, #0
 801006e:	d00a      	beq.n	8010086 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8010070:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010074:	f113 0f0d 	cmn.w	r3, #13
 8010078:	d002      	beq.n	8010080 <tcp_process+0x41c>
              tcp_abort(pcb);
 801007a:	6878      	ldr	r0, [r7, #4]
 801007c:	f7fd ff90 	bl	800dfa0 <tcp_abort>
            }
            return ERR_ABRT;
 8010080:	f06f 030c 	mvn.w	r3, #12
 8010084:	e1ce      	b.n	8010424 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8010086:	6878      	ldr	r0, [r7, #4]
 8010088:	f000 fae0 	bl	801064c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 801008c:	4b68      	ldr	r3, [pc, #416]	; (8010230 <tcp_process+0x5cc>)
 801008e:	881b      	ldrh	r3, [r3, #0]
 8010090:	2b00      	cmp	r3, #0
 8010092:	d005      	beq.n	80100a0 <tcp_process+0x43c>
            recv_acked--;
 8010094:	4b66      	ldr	r3, [pc, #408]	; (8010230 <tcp_process+0x5cc>)
 8010096:	881b      	ldrh	r3, [r3, #0]
 8010098:	3b01      	subs	r3, #1
 801009a:	b29a      	uxth	r2, r3
 801009c:	4b64      	ldr	r3, [pc, #400]	; (8010230 <tcp_process+0x5cc>)
 801009e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80100a4:	009a      	lsls	r2, r3, #2
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80100aa:	005b      	lsls	r3, r3, #1
 80100ac:	f241 111c 	movw	r1, #4380	; 0x111c
 80100b0:	428b      	cmp	r3, r1
 80100b2:	bf38      	it	cc
 80100b4:	460b      	movcc	r3, r1
 80100b6:	429a      	cmp	r2, r3
 80100b8:	d204      	bcs.n	80100c4 <tcp_process+0x460>
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80100be:	009b      	lsls	r3, r3, #2
 80100c0:	b29b      	uxth	r3, r3
 80100c2:	e00d      	b.n	80100e0 <tcp_process+0x47c>
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80100c8:	005b      	lsls	r3, r3, #1
 80100ca:	f241 121c 	movw	r2, #4380	; 0x111c
 80100ce:	4293      	cmp	r3, r2
 80100d0:	d904      	bls.n	80100dc <tcp_process+0x478>
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80100d6:	005b      	lsls	r3, r3, #1
 80100d8:	b29b      	uxth	r3, r3
 80100da:	e001      	b.n	80100e0 <tcp_process+0x47c>
 80100dc:	f241 131c 	movw	r3, #4380	; 0x111c
 80100e0:	687a      	ldr	r2, [r7, #4]
 80100e2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80100e6:	4b53      	ldr	r3, [pc, #332]	; (8010234 <tcp_process+0x5d0>)
 80100e8:	781b      	ldrb	r3, [r3, #0]
 80100ea:	f003 0320 	and.w	r3, r3, #32
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d037      	beq.n	8010162 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	8b5b      	ldrh	r3, [r3, #26]
 80100f6:	f043 0302 	orr.w	r3, r3, #2
 80100fa:	b29a      	uxth	r2, r3
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	2207      	movs	r2, #7
 8010104:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8010106:	e02c      	b.n	8010162 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010108:	4b40      	ldr	r3, [pc, #256]	; (801020c <tcp_process+0x5a8>)
 801010a:	6819      	ldr	r1, [r3, #0]
 801010c:	4b40      	ldr	r3, [pc, #256]	; (8010210 <tcp_process+0x5ac>)
 801010e:	881b      	ldrh	r3, [r3, #0]
 8010110:	461a      	mov	r2, r3
 8010112:	4b40      	ldr	r3, [pc, #256]	; (8010214 <tcp_process+0x5b0>)
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010118:	4b3f      	ldr	r3, [pc, #252]	; (8010218 <tcp_process+0x5b4>)
 801011a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801011c:	885b      	ldrh	r3, [r3, #2]
 801011e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010120:	4a3d      	ldr	r2, [pc, #244]	; (8010218 <tcp_process+0x5b4>)
 8010122:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010124:	8812      	ldrh	r2, [r2, #0]
 8010126:	b292      	uxth	r2, r2
 8010128:	9202      	str	r2, [sp, #8]
 801012a:	9301      	str	r3, [sp, #4]
 801012c:	4b3b      	ldr	r3, [pc, #236]	; (801021c <tcp_process+0x5b8>)
 801012e:	9300      	str	r3, [sp, #0]
 8010130:	4b3b      	ldr	r3, [pc, #236]	; (8010220 <tcp_process+0x5bc>)
 8010132:	4602      	mov	r2, r0
 8010134:	6878      	ldr	r0, [r7, #4]
 8010136:	f002 fbcf 	bl	80128d8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801013a:	e167      	b.n	801040c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801013c:	4b32      	ldr	r3, [pc, #200]	; (8010208 <tcp_process+0x5a4>)
 801013e:	781b      	ldrb	r3, [r3, #0]
 8010140:	f003 0302 	and.w	r3, r3, #2
 8010144:	2b00      	cmp	r3, #0
 8010146:	f000 8161 	beq.w	801040c <tcp_process+0x7a8>
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801014e:	1e5a      	subs	r2, r3, #1
 8010150:	4b30      	ldr	r3, [pc, #192]	; (8010214 <tcp_process+0x5b0>)
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	429a      	cmp	r2, r3
 8010156:	f040 8159 	bne.w	801040c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801015a:	6878      	ldr	r0, [r7, #4]
 801015c:	f002 f9b4 	bl	80124c8 <tcp_rexmit>
      break;
 8010160:	e154      	b.n	801040c <tcp_process+0x7a8>
 8010162:	e153      	b.n	801040c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8010164:	6878      	ldr	r0, [r7, #4]
 8010166:	f000 fa71 	bl	801064c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801016a:	4b32      	ldr	r3, [pc, #200]	; (8010234 <tcp_process+0x5d0>)
 801016c:	781b      	ldrb	r3, [r3, #0]
 801016e:	f003 0320 	and.w	r3, r3, #32
 8010172:	2b00      	cmp	r3, #0
 8010174:	f000 814c 	beq.w	8010410 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	8b5b      	ldrh	r3, [r3, #26]
 801017c:	f043 0302 	orr.w	r3, r3, #2
 8010180:	b29a      	uxth	r2, r3
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	2207      	movs	r2, #7
 801018a:	751a      	strb	r2, [r3, #20]
      }
      break;
 801018c:	e140      	b.n	8010410 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801018e:	6878      	ldr	r0, [r7, #4]
 8010190:	f000 fa5c 	bl	801064c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010194:	4b27      	ldr	r3, [pc, #156]	; (8010234 <tcp_process+0x5d0>)
 8010196:	781b      	ldrb	r3, [r3, #0]
 8010198:	f003 0320 	and.w	r3, r3, #32
 801019c:	2b00      	cmp	r3, #0
 801019e:	d071      	beq.n	8010284 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80101a0:	4b19      	ldr	r3, [pc, #100]	; (8010208 <tcp_process+0x5a4>)
 80101a2:	781b      	ldrb	r3, [r3, #0]
 80101a4:	f003 0310 	and.w	r3, r3, #16
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d060      	beq.n	801026e <tcp_process+0x60a>
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80101b0:	4b16      	ldr	r3, [pc, #88]	; (801020c <tcp_process+0x5a8>)
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	429a      	cmp	r2, r3
 80101b6:	d15a      	bne.n	801026e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d156      	bne.n	801026e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	8b5b      	ldrh	r3, [r3, #26]
 80101c4:	f043 0302 	orr.w	r3, r3, #2
 80101c8:	b29a      	uxth	r2, r3
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80101ce:	6878      	ldr	r0, [r7, #4]
 80101d0:	f7fe fdbe 	bl	800ed50 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80101d4:	4b18      	ldr	r3, [pc, #96]	; (8010238 <tcp_process+0x5d4>)
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	687a      	ldr	r2, [r7, #4]
 80101da:	429a      	cmp	r2, r3
 80101dc:	d105      	bne.n	80101ea <tcp_process+0x586>
 80101de:	4b16      	ldr	r3, [pc, #88]	; (8010238 <tcp_process+0x5d4>)
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	68db      	ldr	r3, [r3, #12]
 80101e4:	4a14      	ldr	r2, [pc, #80]	; (8010238 <tcp_process+0x5d4>)
 80101e6:	6013      	str	r3, [r2, #0]
 80101e8:	e02e      	b.n	8010248 <tcp_process+0x5e4>
 80101ea:	4b13      	ldr	r3, [pc, #76]	; (8010238 <tcp_process+0x5d4>)
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	617b      	str	r3, [r7, #20]
 80101f0:	e027      	b.n	8010242 <tcp_process+0x5de>
 80101f2:	697b      	ldr	r3, [r7, #20]
 80101f4:	68db      	ldr	r3, [r3, #12]
 80101f6:	687a      	ldr	r2, [r7, #4]
 80101f8:	429a      	cmp	r2, r3
 80101fa:	d11f      	bne.n	801023c <tcp_process+0x5d8>
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	68da      	ldr	r2, [r3, #12]
 8010200:	697b      	ldr	r3, [r7, #20]
 8010202:	60da      	str	r2, [r3, #12]
 8010204:	e020      	b.n	8010248 <tcp_process+0x5e4>
 8010206:	bf00      	nop
 8010208:	20004244 	.word	0x20004244
 801020c:	2000423c 	.word	0x2000423c
 8010210:	20004242 	.word	0x20004242
 8010214:	20004238 	.word	0x20004238
 8010218:	20004228 	.word	0x20004228
 801021c:	20007858 	.word	0x20007858
 8010220:	2000785c 	.word	0x2000785c
 8010224:	080188d4 	.word	0x080188d4
 8010228:	08018b74 	.word	0x08018b74
 801022c:	08018920 	.word	0x08018920
 8010230:	20004240 	.word	0x20004240
 8010234:	20004245 	.word	0x20004245
 8010238:	2000af5c 	.word	0x2000af5c
 801023c:	697b      	ldr	r3, [r7, #20]
 801023e:	68db      	ldr	r3, [r3, #12]
 8010240:	617b      	str	r3, [r7, #20]
 8010242:	697b      	ldr	r3, [r7, #20]
 8010244:	2b00      	cmp	r3, #0
 8010246:	d1d4      	bne.n	80101f2 <tcp_process+0x58e>
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	2200      	movs	r2, #0
 801024c:	60da      	str	r2, [r3, #12]
 801024e:	4b77      	ldr	r3, [pc, #476]	; (801042c <tcp_process+0x7c8>)
 8010250:	2201      	movs	r2, #1
 8010252:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	220a      	movs	r2, #10
 8010258:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801025a:	4b75      	ldr	r3, [pc, #468]	; (8010430 <tcp_process+0x7cc>)
 801025c:	681a      	ldr	r2, [r3, #0]
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	60da      	str	r2, [r3, #12]
 8010262:	4a73      	ldr	r2, [pc, #460]	; (8010430 <tcp_process+0x7cc>)
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	6013      	str	r3, [r2, #0]
 8010268:	f002 fcf8 	bl	8012c5c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801026c:	e0d2      	b.n	8010414 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	8b5b      	ldrh	r3, [r3, #26]
 8010272:	f043 0302 	orr.w	r3, r3, #2
 8010276:	b29a      	uxth	r2, r3
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	2208      	movs	r2, #8
 8010280:	751a      	strb	r2, [r3, #20]
      break;
 8010282:	e0c7      	b.n	8010414 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010284:	4b6b      	ldr	r3, [pc, #428]	; (8010434 <tcp_process+0x7d0>)
 8010286:	781b      	ldrb	r3, [r3, #0]
 8010288:	f003 0310 	and.w	r3, r3, #16
 801028c:	2b00      	cmp	r3, #0
 801028e:	f000 80c1 	beq.w	8010414 <tcp_process+0x7b0>
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010296:	4b68      	ldr	r3, [pc, #416]	; (8010438 <tcp_process+0x7d4>)
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	429a      	cmp	r2, r3
 801029c:	f040 80ba 	bne.w	8010414 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	f040 80b5 	bne.w	8010414 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	2206      	movs	r2, #6
 80102ae:	751a      	strb	r2, [r3, #20]
      break;
 80102b0:	e0b0      	b.n	8010414 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80102b2:	6878      	ldr	r0, [r7, #4]
 80102b4:	f000 f9ca 	bl	801064c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80102b8:	4b60      	ldr	r3, [pc, #384]	; (801043c <tcp_process+0x7d8>)
 80102ba:	781b      	ldrb	r3, [r3, #0]
 80102bc:	f003 0320 	and.w	r3, r3, #32
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	f000 80a9 	beq.w	8010418 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	8b5b      	ldrh	r3, [r3, #26]
 80102ca:	f043 0302 	orr.w	r3, r3, #2
 80102ce:	b29a      	uxth	r2, r3
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80102d4:	6878      	ldr	r0, [r7, #4]
 80102d6:	f7fe fd3b 	bl	800ed50 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80102da:	4b59      	ldr	r3, [pc, #356]	; (8010440 <tcp_process+0x7dc>)
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	687a      	ldr	r2, [r7, #4]
 80102e0:	429a      	cmp	r2, r3
 80102e2:	d105      	bne.n	80102f0 <tcp_process+0x68c>
 80102e4:	4b56      	ldr	r3, [pc, #344]	; (8010440 <tcp_process+0x7dc>)
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	68db      	ldr	r3, [r3, #12]
 80102ea:	4a55      	ldr	r2, [pc, #340]	; (8010440 <tcp_process+0x7dc>)
 80102ec:	6013      	str	r3, [r2, #0]
 80102ee:	e013      	b.n	8010318 <tcp_process+0x6b4>
 80102f0:	4b53      	ldr	r3, [pc, #332]	; (8010440 <tcp_process+0x7dc>)
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	613b      	str	r3, [r7, #16]
 80102f6:	e00c      	b.n	8010312 <tcp_process+0x6ae>
 80102f8:	693b      	ldr	r3, [r7, #16]
 80102fa:	68db      	ldr	r3, [r3, #12]
 80102fc:	687a      	ldr	r2, [r7, #4]
 80102fe:	429a      	cmp	r2, r3
 8010300:	d104      	bne.n	801030c <tcp_process+0x6a8>
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	68da      	ldr	r2, [r3, #12]
 8010306:	693b      	ldr	r3, [r7, #16]
 8010308:	60da      	str	r2, [r3, #12]
 801030a:	e005      	b.n	8010318 <tcp_process+0x6b4>
 801030c:	693b      	ldr	r3, [r7, #16]
 801030e:	68db      	ldr	r3, [r3, #12]
 8010310:	613b      	str	r3, [r7, #16]
 8010312:	693b      	ldr	r3, [r7, #16]
 8010314:	2b00      	cmp	r3, #0
 8010316:	d1ef      	bne.n	80102f8 <tcp_process+0x694>
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	2200      	movs	r2, #0
 801031c:	60da      	str	r2, [r3, #12]
 801031e:	4b43      	ldr	r3, [pc, #268]	; (801042c <tcp_process+0x7c8>)
 8010320:	2201      	movs	r2, #1
 8010322:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	220a      	movs	r2, #10
 8010328:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801032a:	4b41      	ldr	r3, [pc, #260]	; (8010430 <tcp_process+0x7cc>)
 801032c:	681a      	ldr	r2, [r3, #0]
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	60da      	str	r2, [r3, #12]
 8010332:	4a3f      	ldr	r2, [pc, #252]	; (8010430 <tcp_process+0x7cc>)
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	6013      	str	r3, [r2, #0]
 8010338:	f002 fc90 	bl	8012c5c <tcp_timer_needed>
      }
      break;
 801033c:	e06c      	b.n	8010418 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801033e:	6878      	ldr	r0, [r7, #4]
 8010340:	f000 f984 	bl	801064c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010344:	4b3b      	ldr	r3, [pc, #236]	; (8010434 <tcp_process+0x7d0>)
 8010346:	781b      	ldrb	r3, [r3, #0]
 8010348:	f003 0310 	and.w	r3, r3, #16
 801034c:	2b00      	cmp	r3, #0
 801034e:	d065      	beq.n	801041c <tcp_process+0x7b8>
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010354:	4b38      	ldr	r3, [pc, #224]	; (8010438 <tcp_process+0x7d4>)
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	429a      	cmp	r2, r3
 801035a:	d15f      	bne.n	801041c <tcp_process+0x7b8>
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010360:	2b00      	cmp	r3, #0
 8010362:	d15b      	bne.n	801041c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8010364:	6878      	ldr	r0, [r7, #4]
 8010366:	f7fe fcf3 	bl	800ed50 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801036a:	4b35      	ldr	r3, [pc, #212]	; (8010440 <tcp_process+0x7dc>)
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	687a      	ldr	r2, [r7, #4]
 8010370:	429a      	cmp	r2, r3
 8010372:	d105      	bne.n	8010380 <tcp_process+0x71c>
 8010374:	4b32      	ldr	r3, [pc, #200]	; (8010440 <tcp_process+0x7dc>)
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	68db      	ldr	r3, [r3, #12]
 801037a:	4a31      	ldr	r2, [pc, #196]	; (8010440 <tcp_process+0x7dc>)
 801037c:	6013      	str	r3, [r2, #0]
 801037e:	e013      	b.n	80103a8 <tcp_process+0x744>
 8010380:	4b2f      	ldr	r3, [pc, #188]	; (8010440 <tcp_process+0x7dc>)
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	60fb      	str	r3, [r7, #12]
 8010386:	e00c      	b.n	80103a2 <tcp_process+0x73e>
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	68db      	ldr	r3, [r3, #12]
 801038c:	687a      	ldr	r2, [r7, #4]
 801038e:	429a      	cmp	r2, r3
 8010390:	d104      	bne.n	801039c <tcp_process+0x738>
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	68da      	ldr	r2, [r3, #12]
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	60da      	str	r2, [r3, #12]
 801039a:	e005      	b.n	80103a8 <tcp_process+0x744>
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	68db      	ldr	r3, [r3, #12]
 80103a0:	60fb      	str	r3, [r7, #12]
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d1ef      	bne.n	8010388 <tcp_process+0x724>
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	2200      	movs	r2, #0
 80103ac:	60da      	str	r2, [r3, #12]
 80103ae:	4b1f      	ldr	r3, [pc, #124]	; (801042c <tcp_process+0x7c8>)
 80103b0:	2201      	movs	r2, #1
 80103b2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	220a      	movs	r2, #10
 80103b8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80103ba:	4b1d      	ldr	r3, [pc, #116]	; (8010430 <tcp_process+0x7cc>)
 80103bc:	681a      	ldr	r2, [r3, #0]
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	60da      	str	r2, [r3, #12]
 80103c2:	4a1b      	ldr	r2, [pc, #108]	; (8010430 <tcp_process+0x7cc>)
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	6013      	str	r3, [r2, #0]
 80103c8:	f002 fc48 	bl	8012c5c <tcp_timer_needed>
      }
      break;
 80103cc:	e026      	b.n	801041c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80103ce:	6878      	ldr	r0, [r7, #4]
 80103d0:	f000 f93c 	bl	801064c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80103d4:	4b17      	ldr	r3, [pc, #92]	; (8010434 <tcp_process+0x7d0>)
 80103d6:	781b      	ldrb	r3, [r3, #0]
 80103d8:	f003 0310 	and.w	r3, r3, #16
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d01f      	beq.n	8010420 <tcp_process+0x7bc>
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80103e4:	4b14      	ldr	r3, [pc, #80]	; (8010438 <tcp_process+0x7d4>)
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	429a      	cmp	r2, r3
 80103ea:	d119      	bne.n	8010420 <tcp_process+0x7bc>
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d115      	bne.n	8010420 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80103f4:	4b11      	ldr	r3, [pc, #68]	; (801043c <tcp_process+0x7d8>)
 80103f6:	781b      	ldrb	r3, [r3, #0]
 80103f8:	f043 0310 	orr.w	r3, r3, #16
 80103fc:	b2da      	uxtb	r2, r3
 80103fe:	4b0f      	ldr	r3, [pc, #60]	; (801043c <tcp_process+0x7d8>)
 8010400:	701a      	strb	r2, [r3, #0]
      }
      break;
 8010402:	e00d      	b.n	8010420 <tcp_process+0x7bc>
    default:
      break;
 8010404:	bf00      	nop
 8010406:	e00c      	b.n	8010422 <tcp_process+0x7be>
      break;
 8010408:	bf00      	nop
 801040a:	e00a      	b.n	8010422 <tcp_process+0x7be>
      break;
 801040c:	bf00      	nop
 801040e:	e008      	b.n	8010422 <tcp_process+0x7be>
      break;
 8010410:	bf00      	nop
 8010412:	e006      	b.n	8010422 <tcp_process+0x7be>
      break;
 8010414:	bf00      	nop
 8010416:	e004      	b.n	8010422 <tcp_process+0x7be>
      break;
 8010418:	bf00      	nop
 801041a:	e002      	b.n	8010422 <tcp_process+0x7be>
      break;
 801041c:	bf00      	nop
 801041e:	e000      	b.n	8010422 <tcp_process+0x7be>
      break;
 8010420:	bf00      	nop
  }
  return ERR_OK;
 8010422:	2300      	movs	r3, #0
}
 8010424:	4618      	mov	r0, r3
 8010426:	3724      	adds	r7, #36	; 0x24
 8010428:	46bd      	mov	sp, r7
 801042a:	bd90      	pop	{r4, r7, pc}
 801042c:	2000af58 	.word	0x2000af58
 8010430:	2000af6c 	.word	0x2000af6c
 8010434:	20004244 	.word	0x20004244
 8010438:	2000423c 	.word	0x2000423c
 801043c:	20004245 	.word	0x20004245
 8010440:	2000af5c 	.word	0x2000af5c

08010444 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8010444:	b590      	push	{r4, r7, lr}
 8010446:	b085      	sub	sp, #20
 8010448:	af00      	add	r7, sp, #0
 801044a:	6078      	str	r0, [r7, #4]
 801044c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	2b00      	cmp	r3, #0
 8010452:	d106      	bne.n	8010462 <tcp_oos_insert_segment+0x1e>
 8010454:	4b3b      	ldr	r3, [pc, #236]	; (8010544 <tcp_oos_insert_segment+0x100>)
 8010456:	f240 421f 	movw	r2, #1055	; 0x41f
 801045a:	493b      	ldr	r1, [pc, #236]	; (8010548 <tcp_oos_insert_segment+0x104>)
 801045c:	483b      	ldr	r0, [pc, #236]	; (801054c <tcp_oos_insert_segment+0x108>)
 801045e:	f006 f851 	bl	8016504 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	68db      	ldr	r3, [r3, #12]
 8010466:	899b      	ldrh	r3, [r3, #12]
 8010468:	b29b      	uxth	r3, r3
 801046a:	4618      	mov	r0, r3
 801046c:	f7fb fcd0 	bl	800be10 <lwip_htons>
 8010470:	4603      	mov	r3, r0
 8010472:	b2db      	uxtb	r3, r3
 8010474:	f003 0301 	and.w	r3, r3, #1
 8010478:	2b00      	cmp	r3, #0
 801047a:	d028      	beq.n	80104ce <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801047c:	6838      	ldr	r0, [r7, #0]
 801047e:	f7fe fa65 	bl	800e94c <tcp_segs_free>
    next = NULL;
 8010482:	2300      	movs	r3, #0
 8010484:	603b      	str	r3, [r7, #0]
 8010486:	e056      	b.n	8010536 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010488:	683b      	ldr	r3, [r7, #0]
 801048a:	68db      	ldr	r3, [r3, #12]
 801048c:	899b      	ldrh	r3, [r3, #12]
 801048e:	b29b      	uxth	r3, r3
 8010490:	4618      	mov	r0, r3
 8010492:	f7fb fcbd 	bl	800be10 <lwip_htons>
 8010496:	4603      	mov	r3, r0
 8010498:	b2db      	uxtb	r3, r3
 801049a:	f003 0301 	and.w	r3, r3, #1
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d00d      	beq.n	80104be <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	68db      	ldr	r3, [r3, #12]
 80104a6:	899b      	ldrh	r3, [r3, #12]
 80104a8:	b29c      	uxth	r4, r3
 80104aa:	2001      	movs	r0, #1
 80104ac:	f7fb fcb0 	bl	800be10 <lwip_htons>
 80104b0:	4603      	mov	r3, r0
 80104b2:	461a      	mov	r2, r3
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	68db      	ldr	r3, [r3, #12]
 80104b8:	4322      	orrs	r2, r4
 80104ba:	b292      	uxth	r2, r2
 80104bc:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80104be:	683b      	ldr	r3, [r7, #0]
 80104c0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80104c2:	683b      	ldr	r3, [r7, #0]
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80104c8:	68f8      	ldr	r0, [r7, #12]
 80104ca:	f7fe fa54 	bl	800e976 <tcp_seg_free>
    while (next &&
 80104ce:	683b      	ldr	r3, [r7, #0]
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d00e      	beq.n	80104f2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	891b      	ldrh	r3, [r3, #8]
 80104d8:	461a      	mov	r2, r3
 80104da:	4b1d      	ldr	r3, [pc, #116]	; (8010550 <tcp_oos_insert_segment+0x10c>)
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	441a      	add	r2, r3
 80104e0:	683b      	ldr	r3, [r7, #0]
 80104e2:	68db      	ldr	r3, [r3, #12]
 80104e4:	685b      	ldr	r3, [r3, #4]
 80104e6:	6839      	ldr	r1, [r7, #0]
 80104e8:	8909      	ldrh	r1, [r1, #8]
 80104ea:	440b      	add	r3, r1
 80104ec:	1ad3      	subs	r3, r2, r3
    while (next &&
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	daca      	bge.n	8010488 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80104f2:	683b      	ldr	r3, [r7, #0]
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d01e      	beq.n	8010536 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	891b      	ldrh	r3, [r3, #8]
 80104fc:	461a      	mov	r2, r3
 80104fe:	4b14      	ldr	r3, [pc, #80]	; (8010550 <tcp_oos_insert_segment+0x10c>)
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	441a      	add	r2, r3
 8010504:	683b      	ldr	r3, [r7, #0]
 8010506:	68db      	ldr	r3, [r3, #12]
 8010508:	685b      	ldr	r3, [r3, #4]
 801050a:	1ad3      	subs	r3, r2, r3
    if (next &&
 801050c:	2b00      	cmp	r3, #0
 801050e:	dd12      	ble.n	8010536 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8010510:	683b      	ldr	r3, [r7, #0]
 8010512:	68db      	ldr	r3, [r3, #12]
 8010514:	685b      	ldr	r3, [r3, #4]
 8010516:	b29a      	uxth	r2, r3
 8010518:	4b0d      	ldr	r3, [pc, #52]	; (8010550 <tcp_oos_insert_segment+0x10c>)
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	b29b      	uxth	r3, r3
 801051e:	1ad3      	subs	r3, r2, r3
 8010520:	b29a      	uxth	r2, r3
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	685a      	ldr	r2, [r3, #4]
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	891b      	ldrh	r3, [r3, #8]
 801052e:	4619      	mov	r1, r3
 8010530:	4610      	mov	r0, r2
 8010532:	f7fc fe1b 	bl	800d16c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	683a      	ldr	r2, [r7, #0]
 801053a:	601a      	str	r2, [r3, #0]
}
 801053c:	bf00      	nop
 801053e:	3714      	adds	r7, #20
 8010540:	46bd      	mov	sp, r7
 8010542:	bd90      	pop	{r4, r7, pc}
 8010544:	080188d4 	.word	0x080188d4
 8010548:	08018b94 	.word	0x08018b94
 801054c:	08018920 	.word	0x08018920
 8010550:	20004238 	.word	0x20004238

08010554 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8010554:	b5b0      	push	{r4, r5, r7, lr}
 8010556:	b086      	sub	sp, #24
 8010558:	af00      	add	r7, sp, #0
 801055a:	60f8      	str	r0, [r7, #12]
 801055c:	60b9      	str	r1, [r7, #8]
 801055e:	607a      	str	r2, [r7, #4]
 8010560:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8010562:	e03e      	b.n	80105e2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8010564:	68bb      	ldr	r3, [r7, #8]
 8010566:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8010568:	68bb      	ldr	r3, [r7, #8]
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801056e:	697b      	ldr	r3, [r7, #20]
 8010570:	685b      	ldr	r3, [r3, #4]
 8010572:	4618      	mov	r0, r3
 8010574:	f7fd f80e 	bl	800d594 <pbuf_clen>
 8010578:	4603      	mov	r3, r0
 801057a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010582:	8a7a      	ldrh	r2, [r7, #18]
 8010584:	429a      	cmp	r2, r3
 8010586:	d906      	bls.n	8010596 <tcp_free_acked_segments+0x42>
 8010588:	4b2a      	ldr	r3, [pc, #168]	; (8010634 <tcp_free_acked_segments+0xe0>)
 801058a:	f240 4257 	movw	r2, #1111	; 0x457
 801058e:	492a      	ldr	r1, [pc, #168]	; (8010638 <tcp_free_acked_segments+0xe4>)
 8010590:	482a      	ldr	r0, [pc, #168]	; (801063c <tcp_free_acked_segments+0xe8>)
 8010592:	f005 ffb7 	bl	8016504 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 801059c:	8a7b      	ldrh	r3, [r7, #18]
 801059e:	1ad3      	subs	r3, r2, r3
 80105a0:	b29a      	uxth	r2, r3
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80105a8:	697b      	ldr	r3, [r7, #20]
 80105aa:	891a      	ldrh	r2, [r3, #8]
 80105ac:	4b24      	ldr	r3, [pc, #144]	; (8010640 <tcp_free_acked_segments+0xec>)
 80105ae:	881b      	ldrh	r3, [r3, #0]
 80105b0:	4413      	add	r3, r2
 80105b2:	b29a      	uxth	r2, r3
 80105b4:	4b22      	ldr	r3, [pc, #136]	; (8010640 <tcp_free_acked_segments+0xec>)
 80105b6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80105b8:	6978      	ldr	r0, [r7, #20]
 80105ba:	f7fe f9dc 	bl	800e976 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d00c      	beq.n	80105e2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80105c8:	68bb      	ldr	r3, [r7, #8]
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d109      	bne.n	80105e2 <tcp_free_acked_segments+0x8e>
 80105ce:	683b      	ldr	r3, [r7, #0]
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d106      	bne.n	80105e2 <tcp_free_acked_segments+0x8e>
 80105d4:	4b17      	ldr	r3, [pc, #92]	; (8010634 <tcp_free_acked_segments+0xe0>)
 80105d6:	f240 4261 	movw	r2, #1121	; 0x461
 80105da:	491a      	ldr	r1, [pc, #104]	; (8010644 <tcp_free_acked_segments+0xf0>)
 80105dc:	4817      	ldr	r0, [pc, #92]	; (801063c <tcp_free_acked_segments+0xe8>)
 80105de:	f005 ff91 	bl	8016504 <iprintf>
  while (seg_list != NULL &&
 80105e2:	68bb      	ldr	r3, [r7, #8]
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d020      	beq.n	801062a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80105e8:	68bb      	ldr	r3, [r7, #8]
 80105ea:	68db      	ldr	r3, [r3, #12]
 80105ec:	685b      	ldr	r3, [r3, #4]
 80105ee:	4618      	mov	r0, r3
 80105f0:	f7fb fc23 	bl	800be3a <lwip_htonl>
 80105f4:	4604      	mov	r4, r0
 80105f6:	68bb      	ldr	r3, [r7, #8]
 80105f8:	891b      	ldrh	r3, [r3, #8]
 80105fa:	461d      	mov	r5, r3
 80105fc:	68bb      	ldr	r3, [r7, #8]
 80105fe:	68db      	ldr	r3, [r3, #12]
 8010600:	899b      	ldrh	r3, [r3, #12]
 8010602:	b29b      	uxth	r3, r3
 8010604:	4618      	mov	r0, r3
 8010606:	f7fb fc03 	bl	800be10 <lwip_htons>
 801060a:	4603      	mov	r3, r0
 801060c:	b2db      	uxtb	r3, r3
 801060e:	f003 0303 	and.w	r3, r3, #3
 8010612:	2b00      	cmp	r3, #0
 8010614:	d001      	beq.n	801061a <tcp_free_acked_segments+0xc6>
 8010616:	2301      	movs	r3, #1
 8010618:	e000      	b.n	801061c <tcp_free_acked_segments+0xc8>
 801061a:	2300      	movs	r3, #0
 801061c:	442b      	add	r3, r5
 801061e:	18e2      	adds	r2, r4, r3
 8010620:	4b09      	ldr	r3, [pc, #36]	; (8010648 <tcp_free_acked_segments+0xf4>)
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8010626:	2b00      	cmp	r3, #0
 8010628:	dd9c      	ble.n	8010564 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801062a:	68bb      	ldr	r3, [r7, #8]
}
 801062c:	4618      	mov	r0, r3
 801062e:	3718      	adds	r7, #24
 8010630:	46bd      	mov	sp, r7
 8010632:	bdb0      	pop	{r4, r5, r7, pc}
 8010634:	080188d4 	.word	0x080188d4
 8010638:	08018bbc 	.word	0x08018bbc
 801063c:	08018920 	.word	0x08018920
 8010640:	20004240 	.word	0x20004240
 8010644:	08018be4 	.word	0x08018be4
 8010648:	2000423c 	.word	0x2000423c

0801064c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801064c:	b5b0      	push	{r4, r5, r7, lr}
 801064e:	b094      	sub	sp, #80	; 0x50
 8010650:	af00      	add	r7, sp, #0
 8010652:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8010654:	2300      	movs	r3, #0
 8010656:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	2b00      	cmp	r3, #0
 801065c:	d106      	bne.n	801066c <tcp_receive+0x20>
 801065e:	4ba6      	ldr	r3, [pc, #664]	; (80108f8 <tcp_receive+0x2ac>)
 8010660:	f240 427b 	movw	r2, #1147	; 0x47b
 8010664:	49a5      	ldr	r1, [pc, #660]	; (80108fc <tcp_receive+0x2b0>)
 8010666:	48a6      	ldr	r0, [pc, #664]	; (8010900 <tcp_receive+0x2b4>)
 8010668:	f005 ff4c 	bl	8016504 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	7d1b      	ldrb	r3, [r3, #20]
 8010670:	2b03      	cmp	r3, #3
 8010672:	d806      	bhi.n	8010682 <tcp_receive+0x36>
 8010674:	4ba0      	ldr	r3, [pc, #640]	; (80108f8 <tcp_receive+0x2ac>)
 8010676:	f240 427c 	movw	r2, #1148	; 0x47c
 801067a:	49a2      	ldr	r1, [pc, #648]	; (8010904 <tcp_receive+0x2b8>)
 801067c:	48a0      	ldr	r0, [pc, #640]	; (8010900 <tcp_receive+0x2b4>)
 801067e:	f005 ff41 	bl	8016504 <iprintf>

  if (flags & TCP_ACK) {
 8010682:	4ba1      	ldr	r3, [pc, #644]	; (8010908 <tcp_receive+0x2bc>)
 8010684:	781b      	ldrb	r3, [r3, #0]
 8010686:	f003 0310 	and.w	r3, r3, #16
 801068a:	2b00      	cmp	r3, #0
 801068c:	f000 8263 	beq.w	8010b56 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010696:	461a      	mov	r2, r3
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801069c:	4413      	add	r3, r2
 801069e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80106a4:	4b99      	ldr	r3, [pc, #612]	; (801090c <tcp_receive+0x2c0>)
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	1ad3      	subs	r3, r2, r3
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	db1b      	blt.n	80106e6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80106b2:	4b96      	ldr	r3, [pc, #600]	; (801090c <tcp_receive+0x2c0>)
 80106b4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80106b6:	429a      	cmp	r2, r3
 80106b8:	d106      	bne.n	80106c8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80106be:	4b94      	ldr	r3, [pc, #592]	; (8010910 <tcp_receive+0x2c4>)
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	1ad3      	subs	r3, r2, r3
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	db0e      	blt.n	80106e6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80106cc:	4b90      	ldr	r3, [pc, #576]	; (8010910 <tcp_receive+0x2c4>)
 80106ce:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80106d0:	429a      	cmp	r2, r3
 80106d2:	d125      	bne.n	8010720 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80106d4:	4b8f      	ldr	r3, [pc, #572]	; (8010914 <tcp_receive+0x2c8>)
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	89db      	ldrh	r3, [r3, #14]
 80106da:	b29a      	uxth	r2, r3
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80106e2:	429a      	cmp	r2, r3
 80106e4:	d91c      	bls.n	8010720 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80106e6:	4b8b      	ldr	r3, [pc, #556]	; (8010914 <tcp_receive+0x2c8>)
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	89db      	ldrh	r3, [r3, #14]
 80106ec:	b29a      	uxth	r2, r3
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010700:	429a      	cmp	r2, r3
 8010702:	d205      	bcs.n	8010710 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8010710:	4b7e      	ldr	r3, [pc, #504]	; (801090c <tcp_receive+0x2c0>)
 8010712:	681a      	ldr	r2, [r3, #0]
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8010718:	4b7d      	ldr	r3, [pc, #500]	; (8010910 <tcp_receive+0x2c4>)
 801071a:	681a      	ldr	r2, [r3, #0]
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8010720:	4b7b      	ldr	r3, [pc, #492]	; (8010910 <tcp_receive+0x2c4>)
 8010722:	681a      	ldr	r2, [r3, #0]
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010728:	1ad3      	subs	r3, r2, r3
 801072a:	2b00      	cmp	r3, #0
 801072c:	dc58      	bgt.n	80107e0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801072e:	4b7a      	ldr	r3, [pc, #488]	; (8010918 <tcp_receive+0x2cc>)
 8010730:	881b      	ldrh	r3, [r3, #0]
 8010732:	2b00      	cmp	r3, #0
 8010734:	d14b      	bne.n	80107ce <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801073a:	687a      	ldr	r2, [r7, #4]
 801073c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8010740:	4413      	add	r3, r2
 8010742:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010744:	429a      	cmp	r2, r3
 8010746:	d142      	bne.n	80107ce <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801074e:	2b00      	cmp	r3, #0
 8010750:	db3d      	blt.n	80107ce <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010756:	4b6e      	ldr	r3, [pc, #440]	; (8010910 <tcp_receive+0x2c4>)
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	429a      	cmp	r2, r3
 801075c:	d137      	bne.n	80107ce <tcp_receive+0x182>
              found_dupack = 1;
 801075e:	2301      	movs	r3, #1
 8010760:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010768:	2bff      	cmp	r3, #255	; 0xff
 801076a:	d007      	beq.n	801077c <tcp_receive+0x130>
                ++pcb->dupacks;
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010772:	3301      	adds	r3, #1
 8010774:	b2da      	uxtb	r2, r3
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010782:	2b03      	cmp	r3, #3
 8010784:	d91b      	bls.n	80107be <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010790:	4413      	add	r3, r2
 8010792:	b29a      	uxth	r2, r3
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801079a:	429a      	cmp	r2, r3
 801079c:	d30a      	bcc.n	80107b4 <tcp_receive+0x168>
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80107a8:	4413      	add	r3, r2
 80107aa:	b29a      	uxth	r2, r3
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80107b2:	e004      	b.n	80107be <tcp_receive+0x172>
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80107ba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80107c4:	2b02      	cmp	r3, #2
 80107c6:	d902      	bls.n	80107ce <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80107c8:	6878      	ldr	r0, [r7, #4]
 80107ca:	f001 fee9 	bl	80125a0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80107ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	f040 8160 	bne.w	8010a96 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	2200      	movs	r2, #0
 80107da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80107de:	e15a      	b.n	8010a96 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80107e0:	4b4b      	ldr	r3, [pc, #300]	; (8010910 <tcp_receive+0x2c4>)
 80107e2:	681a      	ldr	r2, [r3, #0]
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80107e8:	1ad3      	subs	r3, r2, r3
 80107ea:	3b01      	subs	r3, #1
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	f2c0 814d 	blt.w	8010a8c <tcp_receive+0x440>
 80107f2:	4b47      	ldr	r3, [pc, #284]	; (8010910 <tcp_receive+0x2c4>)
 80107f4:	681a      	ldr	r2, [r3, #0]
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80107fa:	1ad3      	subs	r3, r2, r3
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	f300 8145 	bgt.w	8010a8c <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	8b5b      	ldrh	r3, [r3, #26]
 8010806:	f003 0304 	and.w	r3, r3, #4
 801080a:	2b00      	cmp	r3, #0
 801080c:	d010      	beq.n	8010830 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	8b5b      	ldrh	r3, [r3, #26]
 8010812:	f023 0304 	bic.w	r3, r3, #4
 8010816:	b29a      	uxth	r2, r3
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	2200      	movs	r2, #0
 801082c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	2200      	movs	r2, #0
 8010834:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801083e:	10db      	asrs	r3, r3, #3
 8010840:	b21b      	sxth	r3, r3
 8010842:	b29a      	uxth	r2, r3
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801084a:	b29b      	uxth	r3, r3
 801084c:	4413      	add	r3, r2
 801084e:	b29b      	uxth	r3, r3
 8010850:	b21a      	sxth	r2, r3
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8010858:	4b2d      	ldr	r3, [pc, #180]	; (8010910 <tcp_receive+0x2c4>)
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	b29a      	uxth	r2, r3
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010862:	b29b      	uxth	r3, r3
 8010864:	1ad3      	subs	r3, r2, r3
 8010866:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	2200      	movs	r2, #0
 801086c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8010870:	4b27      	ldr	r3, [pc, #156]	; (8010910 <tcp_receive+0x2c4>)
 8010872:	681a      	ldr	r2, [r3, #0]
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	7d1b      	ldrb	r3, [r3, #20]
 801087c:	2b03      	cmp	r3, #3
 801087e:	f240 8096 	bls.w	80109ae <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801088e:	429a      	cmp	r2, r3
 8010890:	d244      	bcs.n	801091c <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	8b5b      	ldrh	r3, [r3, #26]
 8010896:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801089a:	2b00      	cmp	r3, #0
 801089c:	d001      	beq.n	80108a2 <tcp_receive+0x256>
 801089e:	2301      	movs	r3, #1
 80108a0:	e000      	b.n	80108a4 <tcp_receive+0x258>
 80108a2:	2302      	movs	r3, #2
 80108a4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80108a8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80108ac:	b29a      	uxth	r2, r3
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80108b2:	fb12 f303 	smulbb	r3, r2, r3
 80108b6:	b29b      	uxth	r3, r3
 80108b8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80108ba:	4293      	cmp	r3, r2
 80108bc:	bf28      	it	cs
 80108be:	4613      	movcs	r3, r2
 80108c0:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80108c8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80108ca:	4413      	add	r3, r2
 80108cc:	b29a      	uxth	r2, r3
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80108d4:	429a      	cmp	r2, r3
 80108d6:	d309      	bcc.n	80108ec <tcp_receive+0x2a0>
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80108de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80108e0:	4413      	add	r3, r2
 80108e2:	b29a      	uxth	r2, r3
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80108ea:	e060      	b.n	80109ae <tcp_receive+0x362>
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80108f2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80108f6:	e05a      	b.n	80109ae <tcp_receive+0x362>
 80108f8:	080188d4 	.word	0x080188d4
 80108fc:	08018c04 	.word	0x08018c04
 8010900:	08018920 	.word	0x08018920
 8010904:	08018c20 	.word	0x08018c20
 8010908:	20004244 	.word	0x20004244
 801090c:	20004238 	.word	0x20004238
 8010910:	2000423c 	.word	0x2000423c
 8010914:	20004228 	.word	0x20004228
 8010918:	20004242 	.word	0x20004242
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010922:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010924:	4413      	add	r3, r2
 8010926:	b29a      	uxth	r2, r3
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801092e:	429a      	cmp	r2, r3
 8010930:	d309      	bcc.n	8010946 <tcp_receive+0x2fa>
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010938:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801093a:	4413      	add	r3, r2
 801093c:	b29a      	uxth	r2, r3
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010944:	e004      	b.n	8010950 <tcp_receive+0x304>
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801094c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801095c:	429a      	cmp	r2, r3
 801095e:	d326      	bcc.n	80109ae <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801096c:	1ad3      	subs	r3, r2, r3
 801096e:	b29a      	uxth	r2, r3
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010980:	4413      	add	r3, r2
 8010982:	b29a      	uxth	r2, r3
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801098a:	429a      	cmp	r2, r3
 801098c:	d30a      	bcc.n	80109a4 <tcp_receive+0x358>
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010998:	4413      	add	r3, r2
 801099a:	b29a      	uxth	r2, r3
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80109a2:	e004      	b.n	80109ae <tcp_receive+0x362>
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80109aa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80109b6:	4a98      	ldr	r2, [pc, #608]	; (8010c18 <tcp_receive+0x5cc>)
 80109b8:	6878      	ldr	r0, [r7, #4]
 80109ba:	f7ff fdcb 	bl	8010554 <tcp_free_acked_segments>
 80109be:	4602      	mov	r2, r0
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80109cc:	4a93      	ldr	r2, [pc, #588]	; (8010c1c <tcp_receive+0x5d0>)
 80109ce:	6878      	ldr	r0, [r7, #4]
 80109d0:	f7ff fdc0 	bl	8010554 <tcp_free_acked_segments>
 80109d4:	4602      	mov	r2, r0
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d104      	bne.n	80109ec <tcp_receive+0x3a0>
        pcb->rtime = -1;
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80109e8:	861a      	strh	r2, [r3, #48]	; 0x30
 80109ea:	e002      	b.n	80109f2 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	2200      	movs	r2, #0
 80109f0:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	2200      	movs	r2, #0
 80109f6:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d103      	bne.n	8010a08 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	2200      	movs	r2, #0
 8010a04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8010a0e:	4b84      	ldr	r3, [pc, #528]	; (8010c20 <tcp_receive+0x5d4>)
 8010a10:	881b      	ldrh	r3, [r3, #0]
 8010a12:	4413      	add	r3, r2
 8010a14:	b29a      	uxth	r2, r3
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	8b5b      	ldrh	r3, [r3, #26]
 8010a20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d035      	beq.n	8010a94 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d118      	bne.n	8010a62 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d00c      	beq.n	8010a52 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a40:	68db      	ldr	r3, [r3, #12]
 8010a42:	685b      	ldr	r3, [r3, #4]
 8010a44:	4618      	mov	r0, r3
 8010a46:	f7fb f9f8 	bl	800be3a <lwip_htonl>
 8010a4a:	4603      	mov	r3, r0
 8010a4c:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	dc20      	bgt.n	8010a94 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	8b5b      	ldrh	r3, [r3, #26]
 8010a56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010a5a:	b29a      	uxth	r2, r3
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010a60:	e018      	b.n	8010a94 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010a6a:	68db      	ldr	r3, [r3, #12]
 8010a6c:	685b      	ldr	r3, [r3, #4]
 8010a6e:	4618      	mov	r0, r3
 8010a70:	f7fb f9e3 	bl	800be3a <lwip_htonl>
 8010a74:	4603      	mov	r3, r0
 8010a76:	1ae3      	subs	r3, r4, r3
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	dc0b      	bgt.n	8010a94 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	8b5b      	ldrh	r3, [r3, #26]
 8010a80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010a84:	b29a      	uxth	r2, r3
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010a8a:	e003      	b.n	8010a94 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8010a8c:	6878      	ldr	r0, [r7, #4]
 8010a8e:	f001 ff75 	bl	801297c <tcp_send_empty_ack>
 8010a92:	e000      	b.n	8010a96 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010a94:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d05b      	beq.n	8010b56 <tcp_receive+0x50a>
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010aa2:	4b60      	ldr	r3, [pc, #384]	; (8010c24 <tcp_receive+0x5d8>)
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	1ad3      	subs	r3, r2, r3
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	da54      	bge.n	8010b56 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8010aac:	4b5e      	ldr	r3, [pc, #376]	; (8010c28 <tcp_receive+0x5dc>)
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	b29a      	uxth	r2, r3
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ab6:	b29b      	uxth	r3, r3
 8010ab8:	1ad3      	subs	r3, r2, r3
 8010aba:	b29b      	uxth	r3, r3
 8010abc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8010ac0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010aca:	10db      	asrs	r3, r3, #3
 8010acc:	b21b      	sxth	r3, r3
 8010ace:	b29b      	uxth	r3, r3
 8010ad0:	1ad3      	subs	r3, r2, r3
 8010ad2:	b29b      	uxth	r3, r3
 8010ad4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010ade:	b29a      	uxth	r2, r3
 8010ae0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010ae4:	4413      	add	r3, r2
 8010ae6:	b29b      	uxth	r3, r3
 8010ae8:	b21a      	sxth	r2, r3
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8010aee:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	da05      	bge.n	8010b02 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8010af6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010afa:	425b      	negs	r3, r3
 8010afc:	b29b      	uxth	r3, r3
 8010afe:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8010b02:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010b0c:	109b      	asrs	r3, r3, #2
 8010b0e:	b21b      	sxth	r3, r3
 8010b10:	b29b      	uxth	r3, r3
 8010b12:	1ad3      	subs	r3, r2, r3
 8010b14:	b29b      	uxth	r3, r3
 8010b16:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010b20:	b29a      	uxth	r2, r3
 8010b22:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010b26:	4413      	add	r3, r2
 8010b28:	b29b      	uxth	r3, r3
 8010b2a:	b21a      	sxth	r2, r3
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010b36:	10db      	asrs	r3, r3, #3
 8010b38:	b21b      	sxth	r3, r3
 8010b3a:	b29a      	uxth	r2, r3
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010b42:	b29b      	uxth	r3, r3
 8010b44:	4413      	add	r3, r2
 8010b46:	b29b      	uxth	r3, r3
 8010b48:	b21a      	sxth	r2, r3
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	2200      	movs	r2, #0
 8010b54:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010b56:	4b35      	ldr	r3, [pc, #212]	; (8010c2c <tcp_receive+0x5e0>)
 8010b58:	881b      	ldrh	r3, [r3, #0]
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	f000 84e1 	beq.w	8011522 <tcp_receive+0xed6>
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	7d1b      	ldrb	r3, [r3, #20]
 8010b64:	2b06      	cmp	r3, #6
 8010b66:	f200 84dc 	bhi.w	8011522 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010b6e:	4b30      	ldr	r3, [pc, #192]	; (8010c30 <tcp_receive+0x5e4>)
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	1ad3      	subs	r3, r2, r3
 8010b74:	3b01      	subs	r3, #1
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	f2c0 808e 	blt.w	8010c98 <tcp_receive+0x64c>
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010b80:	4b2a      	ldr	r3, [pc, #168]	; (8010c2c <tcp_receive+0x5e0>)
 8010b82:	881b      	ldrh	r3, [r3, #0]
 8010b84:	4619      	mov	r1, r3
 8010b86:	4b2a      	ldr	r3, [pc, #168]	; (8010c30 <tcp_receive+0x5e4>)
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	440b      	add	r3, r1
 8010b8c:	1ad3      	subs	r3, r2, r3
 8010b8e:	3301      	adds	r3, #1
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	f300 8081 	bgt.w	8010c98 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8010b96:	4b27      	ldr	r3, [pc, #156]	; (8010c34 <tcp_receive+0x5e8>)
 8010b98:	685b      	ldr	r3, [r3, #4]
 8010b9a:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010ba0:	4b23      	ldr	r3, [pc, #140]	; (8010c30 <tcp_receive+0x5e4>)
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	1ad3      	subs	r3, r2, r3
 8010ba6:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8010ba8:	4b22      	ldr	r3, [pc, #136]	; (8010c34 <tcp_receive+0x5e8>)
 8010baa:	685b      	ldr	r3, [r3, #4]
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d106      	bne.n	8010bbe <tcp_receive+0x572>
 8010bb0:	4b21      	ldr	r3, [pc, #132]	; (8010c38 <tcp_receive+0x5ec>)
 8010bb2:	f240 5294 	movw	r2, #1428	; 0x594
 8010bb6:	4921      	ldr	r1, [pc, #132]	; (8010c3c <tcp_receive+0x5f0>)
 8010bb8:	4821      	ldr	r0, [pc, #132]	; (8010c40 <tcp_receive+0x5f4>)
 8010bba:	f005 fca3 	bl	8016504 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8010bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bc0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010bc4:	4293      	cmp	r3, r2
 8010bc6:	d906      	bls.n	8010bd6 <tcp_receive+0x58a>
 8010bc8:	4b1b      	ldr	r3, [pc, #108]	; (8010c38 <tcp_receive+0x5ec>)
 8010bca:	f240 5295 	movw	r2, #1429	; 0x595
 8010bce:	491d      	ldr	r1, [pc, #116]	; (8010c44 <tcp_receive+0x5f8>)
 8010bd0:	481b      	ldr	r0, [pc, #108]	; (8010c40 <tcp_receive+0x5f4>)
 8010bd2:	f005 fc97 	bl	8016504 <iprintf>
      off = (u16_t)off32;
 8010bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bd8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8010bdc:	4b15      	ldr	r3, [pc, #84]	; (8010c34 <tcp_receive+0x5e8>)
 8010bde:	685b      	ldr	r3, [r3, #4]
 8010be0:	891b      	ldrh	r3, [r3, #8]
 8010be2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010be6:	429a      	cmp	r2, r3
 8010be8:	d906      	bls.n	8010bf8 <tcp_receive+0x5ac>
 8010bea:	4b13      	ldr	r3, [pc, #76]	; (8010c38 <tcp_receive+0x5ec>)
 8010bec:	f240 5297 	movw	r2, #1431	; 0x597
 8010bf0:	4915      	ldr	r1, [pc, #84]	; (8010c48 <tcp_receive+0x5fc>)
 8010bf2:	4813      	ldr	r0, [pc, #76]	; (8010c40 <tcp_receive+0x5f4>)
 8010bf4:	f005 fc86 	bl	8016504 <iprintf>
      inseg.len -= off;
 8010bf8:	4b0e      	ldr	r3, [pc, #56]	; (8010c34 <tcp_receive+0x5e8>)
 8010bfa:	891a      	ldrh	r2, [r3, #8]
 8010bfc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010c00:	1ad3      	subs	r3, r2, r3
 8010c02:	b29a      	uxth	r2, r3
 8010c04:	4b0b      	ldr	r3, [pc, #44]	; (8010c34 <tcp_receive+0x5e8>)
 8010c06:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8010c08:	4b0a      	ldr	r3, [pc, #40]	; (8010c34 <tcp_receive+0x5e8>)
 8010c0a:	685b      	ldr	r3, [r3, #4]
 8010c0c:	891a      	ldrh	r2, [r3, #8]
 8010c0e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010c12:	1ad3      	subs	r3, r2, r3
 8010c14:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8010c16:	e029      	b.n	8010c6c <tcp_receive+0x620>
 8010c18:	08018c3c 	.word	0x08018c3c
 8010c1c:	08018c44 	.word	0x08018c44
 8010c20:	20004240 	.word	0x20004240
 8010c24:	2000423c 	.word	0x2000423c
 8010c28:	2000af60 	.word	0x2000af60
 8010c2c:	20004242 	.word	0x20004242
 8010c30:	20004238 	.word	0x20004238
 8010c34:	20004218 	.word	0x20004218
 8010c38:	080188d4 	.word	0x080188d4
 8010c3c:	08018c4c 	.word	0x08018c4c
 8010c40:	08018920 	.word	0x08018920
 8010c44:	08018c5c 	.word	0x08018c5c
 8010c48:	08018c6c 	.word	0x08018c6c
        off -= p->len;
 8010c4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010c4e:	895b      	ldrh	r3, [r3, #10]
 8010c50:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010c54:	1ad3      	subs	r3, r2, r3
 8010c56:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8010c5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010c5c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010c5e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8010c60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010c62:	2200      	movs	r2, #0
 8010c64:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8010c66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8010c6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010c6e:	895b      	ldrh	r3, [r3, #10]
 8010c70:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010c74:	429a      	cmp	r2, r3
 8010c76:	d8e9      	bhi.n	8010c4c <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8010c78:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010c7c:	4619      	mov	r1, r3
 8010c7e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010c80:	f7fc fb74 	bl	800d36c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c88:	4a91      	ldr	r2, [pc, #580]	; (8010ed0 <tcp_receive+0x884>)
 8010c8a:	6013      	str	r3, [r2, #0]
 8010c8c:	4b91      	ldr	r3, [pc, #580]	; (8010ed4 <tcp_receive+0x888>)
 8010c8e:	68db      	ldr	r3, [r3, #12]
 8010c90:	4a8f      	ldr	r2, [pc, #572]	; (8010ed0 <tcp_receive+0x884>)
 8010c92:	6812      	ldr	r2, [r2, #0]
 8010c94:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010c96:	e00d      	b.n	8010cb4 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8010c98:	4b8d      	ldr	r3, [pc, #564]	; (8010ed0 <tcp_receive+0x884>)
 8010c9a:	681a      	ldr	r2, [r3, #0]
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ca0:	1ad3      	subs	r3, r2, r3
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	da06      	bge.n	8010cb4 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	8b5b      	ldrh	r3, [r3, #26]
 8010caa:	f043 0302 	orr.w	r3, r3, #2
 8010cae:	b29a      	uxth	r2, r3
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010cb4:	4b86      	ldr	r3, [pc, #536]	; (8010ed0 <tcp_receive+0x884>)
 8010cb6:	681a      	ldr	r2, [r3, #0]
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cbc:	1ad3      	subs	r3, r2, r3
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	f2c0 842a 	blt.w	8011518 <tcp_receive+0xecc>
 8010cc4:	4b82      	ldr	r3, [pc, #520]	; (8010ed0 <tcp_receive+0x884>)
 8010cc6:	681a      	ldr	r2, [r3, #0]
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ccc:	6879      	ldr	r1, [r7, #4]
 8010cce:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010cd0:	440b      	add	r3, r1
 8010cd2:	1ad3      	subs	r3, r2, r3
 8010cd4:	3301      	adds	r3, #1
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	f300 841e 	bgt.w	8011518 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010ce0:	4b7b      	ldr	r3, [pc, #492]	; (8010ed0 <tcp_receive+0x884>)
 8010ce2:	681b      	ldr	r3, [r3, #0]
 8010ce4:	429a      	cmp	r2, r3
 8010ce6:	f040 829a 	bne.w	801121e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8010cea:	4b7a      	ldr	r3, [pc, #488]	; (8010ed4 <tcp_receive+0x888>)
 8010cec:	891c      	ldrh	r4, [r3, #8]
 8010cee:	4b79      	ldr	r3, [pc, #484]	; (8010ed4 <tcp_receive+0x888>)
 8010cf0:	68db      	ldr	r3, [r3, #12]
 8010cf2:	899b      	ldrh	r3, [r3, #12]
 8010cf4:	b29b      	uxth	r3, r3
 8010cf6:	4618      	mov	r0, r3
 8010cf8:	f7fb f88a 	bl	800be10 <lwip_htons>
 8010cfc:	4603      	mov	r3, r0
 8010cfe:	b2db      	uxtb	r3, r3
 8010d00:	f003 0303 	and.w	r3, r3, #3
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d001      	beq.n	8010d0c <tcp_receive+0x6c0>
 8010d08:	2301      	movs	r3, #1
 8010d0a:	e000      	b.n	8010d0e <tcp_receive+0x6c2>
 8010d0c:	2300      	movs	r3, #0
 8010d0e:	4423      	add	r3, r4
 8010d10:	b29a      	uxth	r2, r3
 8010d12:	4b71      	ldr	r3, [pc, #452]	; (8010ed8 <tcp_receive+0x88c>)
 8010d14:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010d1a:	4b6f      	ldr	r3, [pc, #444]	; (8010ed8 <tcp_receive+0x88c>)
 8010d1c:	881b      	ldrh	r3, [r3, #0]
 8010d1e:	429a      	cmp	r2, r3
 8010d20:	d275      	bcs.n	8010e0e <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010d22:	4b6c      	ldr	r3, [pc, #432]	; (8010ed4 <tcp_receive+0x888>)
 8010d24:	68db      	ldr	r3, [r3, #12]
 8010d26:	899b      	ldrh	r3, [r3, #12]
 8010d28:	b29b      	uxth	r3, r3
 8010d2a:	4618      	mov	r0, r3
 8010d2c:	f7fb f870 	bl	800be10 <lwip_htons>
 8010d30:	4603      	mov	r3, r0
 8010d32:	b2db      	uxtb	r3, r3
 8010d34:	f003 0301 	and.w	r3, r3, #1
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d01f      	beq.n	8010d7c <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8010d3c:	4b65      	ldr	r3, [pc, #404]	; (8010ed4 <tcp_receive+0x888>)
 8010d3e:	68db      	ldr	r3, [r3, #12]
 8010d40:	899b      	ldrh	r3, [r3, #12]
 8010d42:	b29b      	uxth	r3, r3
 8010d44:	b21b      	sxth	r3, r3
 8010d46:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010d4a:	b21c      	sxth	r4, r3
 8010d4c:	4b61      	ldr	r3, [pc, #388]	; (8010ed4 <tcp_receive+0x888>)
 8010d4e:	68db      	ldr	r3, [r3, #12]
 8010d50:	899b      	ldrh	r3, [r3, #12]
 8010d52:	b29b      	uxth	r3, r3
 8010d54:	4618      	mov	r0, r3
 8010d56:	f7fb f85b 	bl	800be10 <lwip_htons>
 8010d5a:	4603      	mov	r3, r0
 8010d5c:	b2db      	uxtb	r3, r3
 8010d5e:	b29b      	uxth	r3, r3
 8010d60:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010d64:	b29b      	uxth	r3, r3
 8010d66:	4618      	mov	r0, r3
 8010d68:	f7fb f852 	bl	800be10 <lwip_htons>
 8010d6c:	4603      	mov	r3, r0
 8010d6e:	b21b      	sxth	r3, r3
 8010d70:	4323      	orrs	r3, r4
 8010d72:	b21a      	sxth	r2, r3
 8010d74:	4b57      	ldr	r3, [pc, #348]	; (8010ed4 <tcp_receive+0x888>)
 8010d76:	68db      	ldr	r3, [r3, #12]
 8010d78:	b292      	uxth	r2, r2
 8010d7a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010d80:	4b54      	ldr	r3, [pc, #336]	; (8010ed4 <tcp_receive+0x888>)
 8010d82:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010d84:	4b53      	ldr	r3, [pc, #332]	; (8010ed4 <tcp_receive+0x888>)
 8010d86:	68db      	ldr	r3, [r3, #12]
 8010d88:	899b      	ldrh	r3, [r3, #12]
 8010d8a:	b29b      	uxth	r3, r3
 8010d8c:	4618      	mov	r0, r3
 8010d8e:	f7fb f83f 	bl	800be10 <lwip_htons>
 8010d92:	4603      	mov	r3, r0
 8010d94:	b2db      	uxtb	r3, r3
 8010d96:	f003 0302 	and.w	r3, r3, #2
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d005      	beq.n	8010daa <tcp_receive+0x75e>
            inseg.len -= 1;
 8010d9e:	4b4d      	ldr	r3, [pc, #308]	; (8010ed4 <tcp_receive+0x888>)
 8010da0:	891b      	ldrh	r3, [r3, #8]
 8010da2:	3b01      	subs	r3, #1
 8010da4:	b29a      	uxth	r2, r3
 8010da6:	4b4b      	ldr	r3, [pc, #300]	; (8010ed4 <tcp_receive+0x888>)
 8010da8:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8010daa:	4b4a      	ldr	r3, [pc, #296]	; (8010ed4 <tcp_receive+0x888>)
 8010dac:	685b      	ldr	r3, [r3, #4]
 8010dae:	4a49      	ldr	r2, [pc, #292]	; (8010ed4 <tcp_receive+0x888>)
 8010db0:	8912      	ldrh	r2, [r2, #8]
 8010db2:	4611      	mov	r1, r2
 8010db4:	4618      	mov	r0, r3
 8010db6:	f7fc f9d9 	bl	800d16c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8010dba:	4b46      	ldr	r3, [pc, #280]	; (8010ed4 <tcp_receive+0x888>)
 8010dbc:	891c      	ldrh	r4, [r3, #8]
 8010dbe:	4b45      	ldr	r3, [pc, #276]	; (8010ed4 <tcp_receive+0x888>)
 8010dc0:	68db      	ldr	r3, [r3, #12]
 8010dc2:	899b      	ldrh	r3, [r3, #12]
 8010dc4:	b29b      	uxth	r3, r3
 8010dc6:	4618      	mov	r0, r3
 8010dc8:	f7fb f822 	bl	800be10 <lwip_htons>
 8010dcc:	4603      	mov	r3, r0
 8010dce:	b2db      	uxtb	r3, r3
 8010dd0:	f003 0303 	and.w	r3, r3, #3
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d001      	beq.n	8010ddc <tcp_receive+0x790>
 8010dd8:	2301      	movs	r3, #1
 8010dda:	e000      	b.n	8010dde <tcp_receive+0x792>
 8010ddc:	2300      	movs	r3, #0
 8010dde:	4423      	add	r3, r4
 8010de0:	b29a      	uxth	r2, r3
 8010de2:	4b3d      	ldr	r3, [pc, #244]	; (8010ed8 <tcp_receive+0x88c>)
 8010de4:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010de6:	4b3c      	ldr	r3, [pc, #240]	; (8010ed8 <tcp_receive+0x88c>)
 8010de8:	881b      	ldrh	r3, [r3, #0]
 8010dea:	461a      	mov	r2, r3
 8010dec:	4b38      	ldr	r3, [pc, #224]	; (8010ed0 <tcp_receive+0x884>)
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	441a      	add	r2, r3
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010df6:	6879      	ldr	r1, [r7, #4]
 8010df8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010dfa:	440b      	add	r3, r1
 8010dfc:	429a      	cmp	r2, r3
 8010dfe:	d006      	beq.n	8010e0e <tcp_receive+0x7c2>
 8010e00:	4b36      	ldr	r3, [pc, #216]	; (8010edc <tcp_receive+0x890>)
 8010e02:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8010e06:	4936      	ldr	r1, [pc, #216]	; (8010ee0 <tcp_receive+0x894>)
 8010e08:	4836      	ldr	r0, [pc, #216]	; (8010ee4 <tcp_receive+0x898>)
 8010e0a:	f005 fb7b 	bl	8016504 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	f000 80e7 	beq.w	8010fe6 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010e18:	4b2e      	ldr	r3, [pc, #184]	; (8010ed4 <tcp_receive+0x888>)
 8010e1a:	68db      	ldr	r3, [r3, #12]
 8010e1c:	899b      	ldrh	r3, [r3, #12]
 8010e1e:	b29b      	uxth	r3, r3
 8010e20:	4618      	mov	r0, r3
 8010e22:	f7fa fff5 	bl	800be10 <lwip_htons>
 8010e26:	4603      	mov	r3, r0
 8010e28:	b2db      	uxtb	r3, r3
 8010e2a:	f003 0301 	and.w	r3, r3, #1
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d010      	beq.n	8010e54 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8010e32:	e00a      	b.n	8010e4a <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010e38:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010e3e:	681a      	ldr	r2, [r3, #0]
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8010e44:	68f8      	ldr	r0, [r7, #12]
 8010e46:	f7fd fd96 	bl	800e976 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d1f0      	bne.n	8010e34 <tcp_receive+0x7e8>
 8010e52:	e0c8      	b.n	8010fe6 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010e58:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8010e5a:	e052      	b.n	8010f02 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010e5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e5e:	68db      	ldr	r3, [r3, #12]
 8010e60:	899b      	ldrh	r3, [r3, #12]
 8010e62:	b29b      	uxth	r3, r3
 8010e64:	4618      	mov	r0, r3
 8010e66:	f7fa ffd3 	bl	800be10 <lwip_htons>
 8010e6a:	4603      	mov	r3, r0
 8010e6c:	b2db      	uxtb	r3, r3
 8010e6e:	f003 0301 	and.w	r3, r3, #1
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d03d      	beq.n	8010ef2 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8010e76:	4b17      	ldr	r3, [pc, #92]	; (8010ed4 <tcp_receive+0x888>)
 8010e78:	68db      	ldr	r3, [r3, #12]
 8010e7a:	899b      	ldrh	r3, [r3, #12]
 8010e7c:	b29b      	uxth	r3, r3
 8010e7e:	4618      	mov	r0, r3
 8010e80:	f7fa ffc6 	bl	800be10 <lwip_htons>
 8010e84:	4603      	mov	r3, r0
 8010e86:	b2db      	uxtb	r3, r3
 8010e88:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d130      	bne.n	8010ef2 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8010e90:	4b10      	ldr	r3, [pc, #64]	; (8010ed4 <tcp_receive+0x888>)
 8010e92:	68db      	ldr	r3, [r3, #12]
 8010e94:	899b      	ldrh	r3, [r3, #12]
 8010e96:	b29c      	uxth	r4, r3
 8010e98:	2001      	movs	r0, #1
 8010e9a:	f7fa ffb9 	bl	800be10 <lwip_htons>
 8010e9e:	4603      	mov	r3, r0
 8010ea0:	461a      	mov	r2, r3
 8010ea2:	4b0c      	ldr	r3, [pc, #48]	; (8010ed4 <tcp_receive+0x888>)
 8010ea4:	68db      	ldr	r3, [r3, #12]
 8010ea6:	4322      	orrs	r2, r4
 8010ea8:	b292      	uxth	r2, r2
 8010eaa:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8010eac:	4b09      	ldr	r3, [pc, #36]	; (8010ed4 <tcp_receive+0x888>)
 8010eae:	891c      	ldrh	r4, [r3, #8]
 8010eb0:	4b08      	ldr	r3, [pc, #32]	; (8010ed4 <tcp_receive+0x888>)
 8010eb2:	68db      	ldr	r3, [r3, #12]
 8010eb4:	899b      	ldrh	r3, [r3, #12]
 8010eb6:	b29b      	uxth	r3, r3
 8010eb8:	4618      	mov	r0, r3
 8010eba:	f7fa ffa9 	bl	800be10 <lwip_htons>
 8010ebe:	4603      	mov	r3, r0
 8010ec0:	b2db      	uxtb	r3, r3
 8010ec2:	f003 0303 	and.w	r3, r3, #3
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d00e      	beq.n	8010ee8 <tcp_receive+0x89c>
 8010eca:	2301      	movs	r3, #1
 8010ecc:	e00d      	b.n	8010eea <tcp_receive+0x89e>
 8010ece:	bf00      	nop
 8010ed0:	20004238 	.word	0x20004238
 8010ed4:	20004218 	.word	0x20004218
 8010ed8:	20004242 	.word	0x20004242
 8010edc:	080188d4 	.word	0x080188d4
 8010ee0:	08018c7c 	.word	0x08018c7c
 8010ee4:	08018920 	.word	0x08018920
 8010ee8:	2300      	movs	r3, #0
 8010eea:	4423      	add	r3, r4
 8010eec:	b29a      	uxth	r2, r3
 8010eee:	4b98      	ldr	r3, [pc, #608]	; (8011150 <tcp_receive+0xb04>)
 8010ef0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8010ef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ef4:	613b      	str	r3, [r7, #16]
              next = next->next;
 8010ef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8010efc:	6938      	ldr	r0, [r7, #16]
 8010efe:	f7fd fd3a 	bl	800e976 <tcp_seg_free>
            while (next &&
 8010f02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d00e      	beq.n	8010f26 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8010f08:	4b91      	ldr	r3, [pc, #580]	; (8011150 <tcp_receive+0xb04>)
 8010f0a:	881b      	ldrh	r3, [r3, #0]
 8010f0c:	461a      	mov	r2, r3
 8010f0e:	4b91      	ldr	r3, [pc, #580]	; (8011154 <tcp_receive+0xb08>)
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	441a      	add	r2, r3
 8010f14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f16:	68db      	ldr	r3, [r3, #12]
 8010f18:	685b      	ldr	r3, [r3, #4]
 8010f1a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010f1c:	8909      	ldrh	r1, [r1, #8]
 8010f1e:	440b      	add	r3, r1
 8010f20:	1ad3      	subs	r3, r2, r3
            while (next &&
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	da9a      	bge.n	8010e5c <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8010f26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d059      	beq.n	8010fe0 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8010f2c:	4b88      	ldr	r3, [pc, #544]	; (8011150 <tcp_receive+0xb04>)
 8010f2e:	881b      	ldrh	r3, [r3, #0]
 8010f30:	461a      	mov	r2, r3
 8010f32:	4b88      	ldr	r3, [pc, #544]	; (8011154 <tcp_receive+0xb08>)
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	441a      	add	r2, r3
 8010f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f3a:	68db      	ldr	r3, [r3, #12]
 8010f3c:	685b      	ldr	r3, [r3, #4]
 8010f3e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	dd4d      	ble.n	8010fe0 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8010f44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f46:	68db      	ldr	r3, [r3, #12]
 8010f48:	685b      	ldr	r3, [r3, #4]
 8010f4a:	b29a      	uxth	r2, r3
 8010f4c:	4b81      	ldr	r3, [pc, #516]	; (8011154 <tcp_receive+0xb08>)
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	b29b      	uxth	r3, r3
 8010f52:	1ad3      	subs	r3, r2, r3
 8010f54:	b29a      	uxth	r2, r3
 8010f56:	4b80      	ldr	r3, [pc, #512]	; (8011158 <tcp_receive+0xb0c>)
 8010f58:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010f5a:	4b7f      	ldr	r3, [pc, #508]	; (8011158 <tcp_receive+0xb0c>)
 8010f5c:	68db      	ldr	r3, [r3, #12]
 8010f5e:	899b      	ldrh	r3, [r3, #12]
 8010f60:	b29b      	uxth	r3, r3
 8010f62:	4618      	mov	r0, r3
 8010f64:	f7fa ff54 	bl	800be10 <lwip_htons>
 8010f68:	4603      	mov	r3, r0
 8010f6a:	b2db      	uxtb	r3, r3
 8010f6c:	f003 0302 	and.w	r3, r3, #2
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d005      	beq.n	8010f80 <tcp_receive+0x934>
                inseg.len -= 1;
 8010f74:	4b78      	ldr	r3, [pc, #480]	; (8011158 <tcp_receive+0xb0c>)
 8010f76:	891b      	ldrh	r3, [r3, #8]
 8010f78:	3b01      	subs	r3, #1
 8010f7a:	b29a      	uxth	r2, r3
 8010f7c:	4b76      	ldr	r3, [pc, #472]	; (8011158 <tcp_receive+0xb0c>)
 8010f7e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8010f80:	4b75      	ldr	r3, [pc, #468]	; (8011158 <tcp_receive+0xb0c>)
 8010f82:	685b      	ldr	r3, [r3, #4]
 8010f84:	4a74      	ldr	r2, [pc, #464]	; (8011158 <tcp_receive+0xb0c>)
 8010f86:	8912      	ldrh	r2, [r2, #8]
 8010f88:	4611      	mov	r1, r2
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	f7fc f8ee 	bl	800d16c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8010f90:	4b71      	ldr	r3, [pc, #452]	; (8011158 <tcp_receive+0xb0c>)
 8010f92:	891c      	ldrh	r4, [r3, #8]
 8010f94:	4b70      	ldr	r3, [pc, #448]	; (8011158 <tcp_receive+0xb0c>)
 8010f96:	68db      	ldr	r3, [r3, #12]
 8010f98:	899b      	ldrh	r3, [r3, #12]
 8010f9a:	b29b      	uxth	r3, r3
 8010f9c:	4618      	mov	r0, r3
 8010f9e:	f7fa ff37 	bl	800be10 <lwip_htons>
 8010fa2:	4603      	mov	r3, r0
 8010fa4:	b2db      	uxtb	r3, r3
 8010fa6:	f003 0303 	and.w	r3, r3, #3
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d001      	beq.n	8010fb2 <tcp_receive+0x966>
 8010fae:	2301      	movs	r3, #1
 8010fb0:	e000      	b.n	8010fb4 <tcp_receive+0x968>
 8010fb2:	2300      	movs	r3, #0
 8010fb4:	4423      	add	r3, r4
 8010fb6:	b29a      	uxth	r2, r3
 8010fb8:	4b65      	ldr	r3, [pc, #404]	; (8011150 <tcp_receive+0xb04>)
 8010fba:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8010fbc:	4b64      	ldr	r3, [pc, #400]	; (8011150 <tcp_receive+0xb04>)
 8010fbe:	881b      	ldrh	r3, [r3, #0]
 8010fc0:	461a      	mov	r2, r3
 8010fc2:	4b64      	ldr	r3, [pc, #400]	; (8011154 <tcp_receive+0xb08>)
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	441a      	add	r2, r3
 8010fc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010fca:	68db      	ldr	r3, [r3, #12]
 8010fcc:	685b      	ldr	r3, [r3, #4]
 8010fce:	429a      	cmp	r2, r3
 8010fd0:	d006      	beq.n	8010fe0 <tcp_receive+0x994>
 8010fd2:	4b62      	ldr	r3, [pc, #392]	; (801115c <tcp_receive+0xb10>)
 8010fd4:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8010fd8:	4961      	ldr	r1, [pc, #388]	; (8011160 <tcp_receive+0xb14>)
 8010fda:	4862      	ldr	r0, [pc, #392]	; (8011164 <tcp_receive+0xb18>)
 8010fdc:	f005 fa92 	bl	8016504 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010fe4:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8010fe6:	4b5a      	ldr	r3, [pc, #360]	; (8011150 <tcp_receive+0xb04>)
 8010fe8:	881b      	ldrh	r3, [r3, #0]
 8010fea:	461a      	mov	r2, r3
 8010fec:	4b59      	ldr	r3, [pc, #356]	; (8011154 <tcp_receive+0xb08>)
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	441a      	add	r2, r3
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010ffa:	4b55      	ldr	r3, [pc, #340]	; (8011150 <tcp_receive+0xb04>)
 8010ffc:	881b      	ldrh	r3, [r3, #0]
 8010ffe:	429a      	cmp	r2, r3
 8011000:	d206      	bcs.n	8011010 <tcp_receive+0x9c4>
 8011002:	4b56      	ldr	r3, [pc, #344]	; (801115c <tcp_receive+0xb10>)
 8011004:	f240 6207 	movw	r2, #1543	; 0x607
 8011008:	4957      	ldr	r1, [pc, #348]	; (8011168 <tcp_receive+0xb1c>)
 801100a:	4856      	ldr	r0, [pc, #344]	; (8011164 <tcp_receive+0xb18>)
 801100c:	f005 fa7a 	bl	8016504 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011014:	4b4e      	ldr	r3, [pc, #312]	; (8011150 <tcp_receive+0xb04>)
 8011016:	881b      	ldrh	r3, [r3, #0]
 8011018:	1ad3      	subs	r3, r2, r3
 801101a:	b29a      	uxth	r2, r3
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8011020:	6878      	ldr	r0, [r7, #4]
 8011022:	f7fc ffc9 	bl	800dfb8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8011026:	4b4c      	ldr	r3, [pc, #304]	; (8011158 <tcp_receive+0xb0c>)
 8011028:	685b      	ldr	r3, [r3, #4]
 801102a:	891b      	ldrh	r3, [r3, #8]
 801102c:	2b00      	cmp	r3, #0
 801102e:	d006      	beq.n	801103e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8011030:	4b49      	ldr	r3, [pc, #292]	; (8011158 <tcp_receive+0xb0c>)
 8011032:	685b      	ldr	r3, [r3, #4]
 8011034:	4a4d      	ldr	r2, [pc, #308]	; (801116c <tcp_receive+0xb20>)
 8011036:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8011038:	4b47      	ldr	r3, [pc, #284]	; (8011158 <tcp_receive+0xb0c>)
 801103a:	2200      	movs	r2, #0
 801103c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801103e:	4b46      	ldr	r3, [pc, #280]	; (8011158 <tcp_receive+0xb0c>)
 8011040:	68db      	ldr	r3, [r3, #12]
 8011042:	899b      	ldrh	r3, [r3, #12]
 8011044:	b29b      	uxth	r3, r3
 8011046:	4618      	mov	r0, r3
 8011048:	f7fa fee2 	bl	800be10 <lwip_htons>
 801104c:	4603      	mov	r3, r0
 801104e:	b2db      	uxtb	r3, r3
 8011050:	f003 0301 	and.w	r3, r3, #1
 8011054:	2b00      	cmp	r3, #0
 8011056:	f000 80b8 	beq.w	80111ca <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801105a:	4b45      	ldr	r3, [pc, #276]	; (8011170 <tcp_receive+0xb24>)
 801105c:	781b      	ldrb	r3, [r3, #0]
 801105e:	f043 0320 	orr.w	r3, r3, #32
 8011062:	b2da      	uxtb	r2, r3
 8011064:	4b42      	ldr	r3, [pc, #264]	; (8011170 <tcp_receive+0xb24>)
 8011066:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8011068:	e0af      	b.n	80111ca <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801106e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011074:	68db      	ldr	r3, [r3, #12]
 8011076:	685b      	ldr	r3, [r3, #4]
 8011078:	4a36      	ldr	r2, [pc, #216]	; (8011154 <tcp_receive+0xb08>)
 801107a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801107c:	68bb      	ldr	r3, [r7, #8]
 801107e:	891b      	ldrh	r3, [r3, #8]
 8011080:	461c      	mov	r4, r3
 8011082:	68bb      	ldr	r3, [r7, #8]
 8011084:	68db      	ldr	r3, [r3, #12]
 8011086:	899b      	ldrh	r3, [r3, #12]
 8011088:	b29b      	uxth	r3, r3
 801108a:	4618      	mov	r0, r3
 801108c:	f7fa fec0 	bl	800be10 <lwip_htons>
 8011090:	4603      	mov	r3, r0
 8011092:	b2db      	uxtb	r3, r3
 8011094:	f003 0303 	and.w	r3, r3, #3
 8011098:	2b00      	cmp	r3, #0
 801109a:	d001      	beq.n	80110a0 <tcp_receive+0xa54>
 801109c:	2301      	movs	r3, #1
 801109e:	e000      	b.n	80110a2 <tcp_receive+0xa56>
 80110a0:	2300      	movs	r3, #0
 80110a2:	191a      	adds	r2, r3, r4
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110a8:	441a      	add	r2, r3
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80110b2:	461c      	mov	r4, r3
 80110b4:	68bb      	ldr	r3, [r7, #8]
 80110b6:	891b      	ldrh	r3, [r3, #8]
 80110b8:	461d      	mov	r5, r3
 80110ba:	68bb      	ldr	r3, [r7, #8]
 80110bc:	68db      	ldr	r3, [r3, #12]
 80110be:	899b      	ldrh	r3, [r3, #12]
 80110c0:	b29b      	uxth	r3, r3
 80110c2:	4618      	mov	r0, r3
 80110c4:	f7fa fea4 	bl	800be10 <lwip_htons>
 80110c8:	4603      	mov	r3, r0
 80110ca:	b2db      	uxtb	r3, r3
 80110cc:	f003 0303 	and.w	r3, r3, #3
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d001      	beq.n	80110d8 <tcp_receive+0xa8c>
 80110d4:	2301      	movs	r3, #1
 80110d6:	e000      	b.n	80110da <tcp_receive+0xa8e>
 80110d8:	2300      	movs	r3, #0
 80110da:	442b      	add	r3, r5
 80110dc:	429c      	cmp	r4, r3
 80110de:	d206      	bcs.n	80110ee <tcp_receive+0xaa2>
 80110e0:	4b1e      	ldr	r3, [pc, #120]	; (801115c <tcp_receive+0xb10>)
 80110e2:	f240 622b 	movw	r2, #1579	; 0x62b
 80110e6:	4923      	ldr	r1, [pc, #140]	; (8011174 <tcp_receive+0xb28>)
 80110e8:	481e      	ldr	r0, [pc, #120]	; (8011164 <tcp_receive+0xb18>)
 80110ea:	f005 fa0b 	bl	8016504 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80110ee:	68bb      	ldr	r3, [r7, #8]
 80110f0:	891b      	ldrh	r3, [r3, #8]
 80110f2:	461c      	mov	r4, r3
 80110f4:	68bb      	ldr	r3, [r7, #8]
 80110f6:	68db      	ldr	r3, [r3, #12]
 80110f8:	899b      	ldrh	r3, [r3, #12]
 80110fa:	b29b      	uxth	r3, r3
 80110fc:	4618      	mov	r0, r3
 80110fe:	f7fa fe87 	bl	800be10 <lwip_htons>
 8011102:	4603      	mov	r3, r0
 8011104:	b2db      	uxtb	r3, r3
 8011106:	f003 0303 	and.w	r3, r3, #3
 801110a:	2b00      	cmp	r3, #0
 801110c:	d001      	beq.n	8011112 <tcp_receive+0xac6>
 801110e:	2301      	movs	r3, #1
 8011110:	e000      	b.n	8011114 <tcp_receive+0xac8>
 8011112:	2300      	movs	r3, #0
 8011114:	1919      	adds	r1, r3, r4
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801111a:	b28b      	uxth	r3, r1
 801111c:	1ad3      	subs	r3, r2, r3
 801111e:	b29a      	uxth	r2, r3
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8011124:	6878      	ldr	r0, [r7, #4]
 8011126:	f7fc ff47 	bl	800dfb8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801112a:	68bb      	ldr	r3, [r7, #8]
 801112c:	685b      	ldr	r3, [r3, #4]
 801112e:	891b      	ldrh	r3, [r3, #8]
 8011130:	2b00      	cmp	r3, #0
 8011132:	d028      	beq.n	8011186 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8011134:	4b0d      	ldr	r3, [pc, #52]	; (801116c <tcp_receive+0xb20>)
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	2b00      	cmp	r3, #0
 801113a:	d01d      	beq.n	8011178 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 801113c:	4b0b      	ldr	r3, [pc, #44]	; (801116c <tcp_receive+0xb20>)
 801113e:	681a      	ldr	r2, [r3, #0]
 8011140:	68bb      	ldr	r3, [r7, #8]
 8011142:	685b      	ldr	r3, [r3, #4]
 8011144:	4619      	mov	r1, r3
 8011146:	4610      	mov	r0, r2
 8011148:	f7fc fa64 	bl	800d614 <pbuf_cat>
 801114c:	e018      	b.n	8011180 <tcp_receive+0xb34>
 801114e:	bf00      	nop
 8011150:	20004242 	.word	0x20004242
 8011154:	20004238 	.word	0x20004238
 8011158:	20004218 	.word	0x20004218
 801115c:	080188d4 	.word	0x080188d4
 8011160:	08018cb4 	.word	0x08018cb4
 8011164:	08018920 	.word	0x08018920
 8011168:	08018cf0 	.word	0x08018cf0
 801116c:	20004248 	.word	0x20004248
 8011170:	20004245 	.word	0x20004245
 8011174:	08018d10 	.word	0x08018d10
            } else {
              recv_data = cseg->p;
 8011178:	68bb      	ldr	r3, [r7, #8]
 801117a:	685b      	ldr	r3, [r3, #4]
 801117c:	4a70      	ldr	r2, [pc, #448]	; (8011340 <tcp_receive+0xcf4>)
 801117e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8011180:	68bb      	ldr	r3, [r7, #8]
 8011182:	2200      	movs	r2, #0
 8011184:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011186:	68bb      	ldr	r3, [r7, #8]
 8011188:	68db      	ldr	r3, [r3, #12]
 801118a:	899b      	ldrh	r3, [r3, #12]
 801118c:	b29b      	uxth	r3, r3
 801118e:	4618      	mov	r0, r3
 8011190:	f7fa fe3e 	bl	800be10 <lwip_htons>
 8011194:	4603      	mov	r3, r0
 8011196:	b2db      	uxtb	r3, r3
 8011198:	f003 0301 	and.w	r3, r3, #1
 801119c:	2b00      	cmp	r3, #0
 801119e:	d00d      	beq.n	80111bc <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80111a0:	4b68      	ldr	r3, [pc, #416]	; (8011344 <tcp_receive+0xcf8>)
 80111a2:	781b      	ldrb	r3, [r3, #0]
 80111a4:	f043 0320 	orr.w	r3, r3, #32
 80111a8:	b2da      	uxtb	r2, r3
 80111aa:	4b66      	ldr	r3, [pc, #408]	; (8011344 <tcp_receive+0xcf8>)
 80111ac:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	7d1b      	ldrb	r3, [r3, #20]
 80111b2:	2b04      	cmp	r3, #4
 80111b4:	d102      	bne.n	80111bc <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	2207      	movs	r2, #7
 80111ba:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80111bc:	68bb      	ldr	r3, [r7, #8]
 80111be:	681a      	ldr	r2, [r3, #0]
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80111c4:	68b8      	ldr	r0, [r7, #8]
 80111c6:	f7fd fbd6 	bl	800e976 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d008      	beq.n	80111e4 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80111d6:	68db      	ldr	r3, [r3, #12]
 80111d8:	685a      	ldr	r2, [r3, #4]
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80111de:	429a      	cmp	r2, r3
 80111e0:	f43f af43 	beq.w	801106a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	8b5b      	ldrh	r3, [r3, #26]
 80111e8:	f003 0301 	and.w	r3, r3, #1
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d00e      	beq.n	801120e <tcp_receive+0xbc2>
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	8b5b      	ldrh	r3, [r3, #26]
 80111f4:	f023 0301 	bic.w	r3, r3, #1
 80111f8:	b29a      	uxth	r2, r3
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	835a      	strh	r2, [r3, #26]
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	8b5b      	ldrh	r3, [r3, #26]
 8011202:	f043 0302 	orr.w	r3, r3, #2
 8011206:	b29a      	uxth	r2, r3
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801120c:	e188      	b.n	8011520 <tcp_receive+0xed4>
        tcp_ack(pcb);
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	8b5b      	ldrh	r3, [r3, #26]
 8011212:	f043 0301 	orr.w	r3, r3, #1
 8011216:	b29a      	uxth	r2, r3
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801121c:	e180      	b.n	8011520 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011222:	2b00      	cmp	r3, #0
 8011224:	d106      	bne.n	8011234 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8011226:	4848      	ldr	r0, [pc, #288]	; (8011348 <tcp_receive+0xcfc>)
 8011228:	f7fd fbbe 	bl	800e9a8 <tcp_seg_copy>
 801122c:	4602      	mov	r2, r0
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	675a      	str	r2, [r3, #116]	; 0x74
 8011232:	e16d      	b.n	8011510 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8011234:	2300      	movs	r3, #0
 8011236:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801123c:	63bb      	str	r3, [r7, #56]	; 0x38
 801123e:	e157      	b.n	80114f0 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8011240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011242:	68db      	ldr	r3, [r3, #12]
 8011244:	685a      	ldr	r2, [r3, #4]
 8011246:	4b41      	ldr	r3, [pc, #260]	; (801134c <tcp_receive+0xd00>)
 8011248:	681b      	ldr	r3, [r3, #0]
 801124a:	429a      	cmp	r2, r3
 801124c:	d11d      	bne.n	801128a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801124e:	4b3e      	ldr	r3, [pc, #248]	; (8011348 <tcp_receive+0xcfc>)
 8011250:	891a      	ldrh	r2, [r3, #8]
 8011252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011254:	891b      	ldrh	r3, [r3, #8]
 8011256:	429a      	cmp	r2, r3
 8011258:	f240 814f 	bls.w	80114fa <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801125c:	483a      	ldr	r0, [pc, #232]	; (8011348 <tcp_receive+0xcfc>)
 801125e:	f7fd fba3 	bl	800e9a8 <tcp_seg_copy>
 8011262:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8011264:	697b      	ldr	r3, [r7, #20]
 8011266:	2b00      	cmp	r3, #0
 8011268:	f000 8149 	beq.w	80114fe <tcp_receive+0xeb2>
                  if (prev != NULL) {
 801126c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801126e:	2b00      	cmp	r3, #0
 8011270:	d003      	beq.n	801127a <tcp_receive+0xc2e>
                    prev->next = cseg;
 8011272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011274:	697a      	ldr	r2, [r7, #20]
 8011276:	601a      	str	r2, [r3, #0]
 8011278:	e002      	b.n	8011280 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	697a      	ldr	r2, [r7, #20]
 801127e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8011280:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011282:	6978      	ldr	r0, [r7, #20]
 8011284:	f7ff f8de 	bl	8010444 <tcp_oos_insert_segment>
                }
                break;
 8011288:	e139      	b.n	80114fe <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801128a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801128c:	2b00      	cmp	r3, #0
 801128e:	d117      	bne.n	80112c0 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8011290:	4b2e      	ldr	r3, [pc, #184]	; (801134c <tcp_receive+0xd00>)
 8011292:	681a      	ldr	r2, [r3, #0]
 8011294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011296:	68db      	ldr	r3, [r3, #12]
 8011298:	685b      	ldr	r3, [r3, #4]
 801129a:	1ad3      	subs	r3, r2, r3
 801129c:	2b00      	cmp	r3, #0
 801129e:	da57      	bge.n	8011350 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80112a0:	4829      	ldr	r0, [pc, #164]	; (8011348 <tcp_receive+0xcfc>)
 80112a2:	f7fd fb81 	bl	800e9a8 <tcp_seg_copy>
 80112a6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80112a8:	69bb      	ldr	r3, [r7, #24]
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	f000 8129 	beq.w	8011502 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	69ba      	ldr	r2, [r7, #24]
 80112b4:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80112b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80112b8:	69b8      	ldr	r0, [r7, #24]
 80112ba:	f7ff f8c3 	bl	8010444 <tcp_oos_insert_segment>
                  }
                  break;
 80112be:	e120      	b.n	8011502 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80112c0:	4b22      	ldr	r3, [pc, #136]	; (801134c <tcp_receive+0xd00>)
 80112c2:	681a      	ldr	r2, [r3, #0]
 80112c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112c6:	68db      	ldr	r3, [r3, #12]
 80112c8:	685b      	ldr	r3, [r3, #4]
 80112ca:	1ad3      	subs	r3, r2, r3
 80112cc:	3b01      	subs	r3, #1
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	db3e      	blt.n	8011350 <tcp_receive+0xd04>
 80112d2:	4b1e      	ldr	r3, [pc, #120]	; (801134c <tcp_receive+0xd00>)
 80112d4:	681a      	ldr	r2, [r3, #0]
 80112d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112d8:	68db      	ldr	r3, [r3, #12]
 80112da:	685b      	ldr	r3, [r3, #4]
 80112dc:	1ad3      	subs	r3, r2, r3
 80112de:	3301      	adds	r3, #1
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	dc35      	bgt.n	8011350 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80112e4:	4818      	ldr	r0, [pc, #96]	; (8011348 <tcp_receive+0xcfc>)
 80112e6:	f7fd fb5f 	bl	800e9a8 <tcp_seg_copy>
 80112ea:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80112ec:	69fb      	ldr	r3, [r7, #28]
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	f000 8109 	beq.w	8011506 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80112f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112f6:	68db      	ldr	r3, [r3, #12]
 80112f8:	685b      	ldr	r3, [r3, #4]
 80112fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80112fc:	8912      	ldrh	r2, [r2, #8]
 80112fe:	441a      	add	r2, r3
 8011300:	4b12      	ldr	r3, [pc, #72]	; (801134c <tcp_receive+0xd00>)
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	1ad3      	subs	r3, r2, r3
 8011306:	2b00      	cmp	r3, #0
 8011308:	dd12      	ble.n	8011330 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801130a:	4b10      	ldr	r3, [pc, #64]	; (801134c <tcp_receive+0xd00>)
 801130c:	681b      	ldr	r3, [r3, #0]
 801130e:	b29a      	uxth	r2, r3
 8011310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011312:	68db      	ldr	r3, [r3, #12]
 8011314:	685b      	ldr	r3, [r3, #4]
 8011316:	b29b      	uxth	r3, r3
 8011318:	1ad3      	subs	r3, r2, r3
 801131a:	b29a      	uxth	r2, r3
 801131c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801131e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8011320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011322:	685a      	ldr	r2, [r3, #4]
 8011324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011326:	891b      	ldrh	r3, [r3, #8]
 8011328:	4619      	mov	r1, r3
 801132a:	4610      	mov	r0, r2
 801132c:	f7fb ff1e 	bl	800d16c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8011330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011332:	69fa      	ldr	r2, [r7, #28]
 8011334:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8011336:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011338:	69f8      	ldr	r0, [r7, #28]
 801133a:	f7ff f883 	bl	8010444 <tcp_oos_insert_segment>
                  }
                  break;
 801133e:	e0e2      	b.n	8011506 <tcp_receive+0xeba>
 8011340:	20004248 	.word	0x20004248
 8011344:	20004245 	.word	0x20004245
 8011348:	20004218 	.word	0x20004218
 801134c:	20004238 	.word	0x20004238
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8011350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011352:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8011354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011356:	681b      	ldr	r3, [r3, #0]
 8011358:	2b00      	cmp	r3, #0
 801135a:	f040 80c6 	bne.w	80114ea <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801135e:	4b80      	ldr	r3, [pc, #512]	; (8011560 <tcp_receive+0xf14>)
 8011360:	681a      	ldr	r2, [r3, #0]
 8011362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011364:	68db      	ldr	r3, [r3, #12]
 8011366:	685b      	ldr	r3, [r3, #4]
 8011368:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801136a:	2b00      	cmp	r3, #0
 801136c:	f340 80bd 	ble.w	80114ea <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011372:	68db      	ldr	r3, [r3, #12]
 8011374:	899b      	ldrh	r3, [r3, #12]
 8011376:	b29b      	uxth	r3, r3
 8011378:	4618      	mov	r0, r3
 801137a:	f7fa fd49 	bl	800be10 <lwip_htons>
 801137e:	4603      	mov	r3, r0
 8011380:	b2db      	uxtb	r3, r3
 8011382:	f003 0301 	and.w	r3, r3, #1
 8011386:	2b00      	cmp	r3, #0
 8011388:	f040 80bf 	bne.w	801150a <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801138c:	4875      	ldr	r0, [pc, #468]	; (8011564 <tcp_receive+0xf18>)
 801138e:	f7fd fb0b 	bl	800e9a8 <tcp_seg_copy>
 8011392:	4602      	mov	r2, r0
 8011394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011396:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8011398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	2b00      	cmp	r3, #0
 801139e:	f000 80b6 	beq.w	801150e <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80113a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113a4:	68db      	ldr	r3, [r3, #12]
 80113a6:	685b      	ldr	r3, [r3, #4]
 80113a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80113aa:	8912      	ldrh	r2, [r2, #8]
 80113ac:	441a      	add	r2, r3
 80113ae:	4b6c      	ldr	r3, [pc, #432]	; (8011560 <tcp_receive+0xf14>)
 80113b0:	681b      	ldr	r3, [r3, #0]
 80113b2:	1ad3      	subs	r3, r2, r3
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	dd12      	ble.n	80113de <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80113b8:	4b69      	ldr	r3, [pc, #420]	; (8011560 <tcp_receive+0xf14>)
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	b29a      	uxth	r2, r3
 80113be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113c0:	68db      	ldr	r3, [r3, #12]
 80113c2:	685b      	ldr	r3, [r3, #4]
 80113c4:	b29b      	uxth	r3, r3
 80113c6:	1ad3      	subs	r3, r2, r3
 80113c8:	b29a      	uxth	r2, r3
 80113ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113cc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80113ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113d0:	685a      	ldr	r2, [r3, #4]
 80113d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113d4:	891b      	ldrh	r3, [r3, #8]
 80113d6:	4619      	mov	r1, r3
 80113d8:	4610      	mov	r0, r2
 80113da:	f7fb fec7 	bl	800d16c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80113de:	4b62      	ldr	r3, [pc, #392]	; (8011568 <tcp_receive+0xf1c>)
 80113e0:	881b      	ldrh	r3, [r3, #0]
 80113e2:	461a      	mov	r2, r3
 80113e4:	4b5e      	ldr	r3, [pc, #376]	; (8011560 <tcp_receive+0xf14>)
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	441a      	add	r2, r3
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113ee:	6879      	ldr	r1, [r7, #4]
 80113f0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80113f2:	440b      	add	r3, r1
 80113f4:	1ad3      	subs	r3, r2, r3
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	f340 8089 	ble.w	801150e <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80113fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113fe:	681b      	ldr	r3, [r3, #0]
 8011400:	68db      	ldr	r3, [r3, #12]
 8011402:	899b      	ldrh	r3, [r3, #12]
 8011404:	b29b      	uxth	r3, r3
 8011406:	4618      	mov	r0, r3
 8011408:	f7fa fd02 	bl	800be10 <lwip_htons>
 801140c:	4603      	mov	r3, r0
 801140e:	b2db      	uxtb	r3, r3
 8011410:	f003 0301 	and.w	r3, r3, #1
 8011414:	2b00      	cmp	r3, #0
 8011416:	d022      	beq.n	801145e <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8011418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801141a:	681b      	ldr	r3, [r3, #0]
 801141c:	68db      	ldr	r3, [r3, #12]
 801141e:	899b      	ldrh	r3, [r3, #12]
 8011420:	b29b      	uxth	r3, r3
 8011422:	b21b      	sxth	r3, r3
 8011424:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011428:	b21c      	sxth	r4, r3
 801142a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	68db      	ldr	r3, [r3, #12]
 8011430:	899b      	ldrh	r3, [r3, #12]
 8011432:	b29b      	uxth	r3, r3
 8011434:	4618      	mov	r0, r3
 8011436:	f7fa fceb 	bl	800be10 <lwip_htons>
 801143a:	4603      	mov	r3, r0
 801143c:	b2db      	uxtb	r3, r3
 801143e:	b29b      	uxth	r3, r3
 8011440:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011444:	b29b      	uxth	r3, r3
 8011446:	4618      	mov	r0, r3
 8011448:	f7fa fce2 	bl	800be10 <lwip_htons>
 801144c:	4603      	mov	r3, r0
 801144e:	b21b      	sxth	r3, r3
 8011450:	4323      	orrs	r3, r4
 8011452:	b21a      	sxth	r2, r3
 8011454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	68db      	ldr	r3, [r3, #12]
 801145a:	b292      	uxth	r2, r2
 801145c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011462:	b29a      	uxth	r2, r3
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011468:	4413      	add	r3, r2
 801146a:	b299      	uxth	r1, r3
 801146c:	4b3c      	ldr	r3, [pc, #240]	; (8011560 <tcp_receive+0xf14>)
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	b29a      	uxth	r2, r3
 8011472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	1a8a      	subs	r2, r1, r2
 8011478:	b292      	uxth	r2, r2
 801147a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801147c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	685a      	ldr	r2, [r3, #4]
 8011482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011484:	681b      	ldr	r3, [r3, #0]
 8011486:	891b      	ldrh	r3, [r3, #8]
 8011488:	4619      	mov	r1, r3
 801148a:	4610      	mov	r0, r2
 801148c:	f7fb fe6e 	bl	800d16c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8011490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011492:	681b      	ldr	r3, [r3, #0]
 8011494:	891c      	ldrh	r4, [r3, #8]
 8011496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	68db      	ldr	r3, [r3, #12]
 801149c:	899b      	ldrh	r3, [r3, #12]
 801149e:	b29b      	uxth	r3, r3
 80114a0:	4618      	mov	r0, r3
 80114a2:	f7fa fcb5 	bl	800be10 <lwip_htons>
 80114a6:	4603      	mov	r3, r0
 80114a8:	b2db      	uxtb	r3, r3
 80114aa:	f003 0303 	and.w	r3, r3, #3
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d001      	beq.n	80114b6 <tcp_receive+0xe6a>
 80114b2:	2301      	movs	r3, #1
 80114b4:	e000      	b.n	80114b8 <tcp_receive+0xe6c>
 80114b6:	2300      	movs	r3, #0
 80114b8:	4423      	add	r3, r4
 80114ba:	b29a      	uxth	r2, r3
 80114bc:	4b2a      	ldr	r3, [pc, #168]	; (8011568 <tcp_receive+0xf1c>)
 80114be:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80114c0:	4b29      	ldr	r3, [pc, #164]	; (8011568 <tcp_receive+0xf1c>)
 80114c2:	881b      	ldrh	r3, [r3, #0]
 80114c4:	461a      	mov	r2, r3
 80114c6:	4b26      	ldr	r3, [pc, #152]	; (8011560 <tcp_receive+0xf14>)
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	441a      	add	r2, r3
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114d0:	6879      	ldr	r1, [r7, #4]
 80114d2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80114d4:	440b      	add	r3, r1
 80114d6:	429a      	cmp	r2, r3
 80114d8:	d019      	beq.n	801150e <tcp_receive+0xec2>
 80114da:	4b24      	ldr	r3, [pc, #144]	; (801156c <tcp_receive+0xf20>)
 80114dc:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80114e0:	4923      	ldr	r1, [pc, #140]	; (8011570 <tcp_receive+0xf24>)
 80114e2:	4824      	ldr	r0, [pc, #144]	; (8011574 <tcp_receive+0xf28>)
 80114e4:	f005 f80e 	bl	8016504 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80114e8:	e011      	b.n	801150e <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80114ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80114f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	f47f aea4 	bne.w	8011240 <tcp_receive+0xbf4>
 80114f8:	e00a      	b.n	8011510 <tcp_receive+0xec4>
                break;
 80114fa:	bf00      	nop
 80114fc:	e008      	b.n	8011510 <tcp_receive+0xec4>
                break;
 80114fe:	bf00      	nop
 8011500:	e006      	b.n	8011510 <tcp_receive+0xec4>
                  break;
 8011502:	bf00      	nop
 8011504:	e004      	b.n	8011510 <tcp_receive+0xec4>
                  break;
 8011506:	bf00      	nop
 8011508:	e002      	b.n	8011510 <tcp_receive+0xec4>
                  break;
 801150a:	bf00      	nop
 801150c:	e000      	b.n	8011510 <tcp_receive+0xec4>
                break;
 801150e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8011510:	6878      	ldr	r0, [r7, #4]
 8011512:	f001 fa33 	bl	801297c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8011516:	e003      	b.n	8011520 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8011518:	6878      	ldr	r0, [r7, #4]
 801151a:	f001 fa2f 	bl	801297c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801151e:	e01a      	b.n	8011556 <tcp_receive+0xf0a>
 8011520:	e019      	b.n	8011556 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8011522:	4b0f      	ldr	r3, [pc, #60]	; (8011560 <tcp_receive+0xf14>)
 8011524:	681a      	ldr	r2, [r3, #0]
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801152a:	1ad3      	subs	r3, r2, r3
 801152c:	2b00      	cmp	r3, #0
 801152e:	db0a      	blt.n	8011546 <tcp_receive+0xefa>
 8011530:	4b0b      	ldr	r3, [pc, #44]	; (8011560 <tcp_receive+0xf14>)
 8011532:	681a      	ldr	r2, [r3, #0]
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011538:	6879      	ldr	r1, [r7, #4]
 801153a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801153c:	440b      	add	r3, r1
 801153e:	1ad3      	subs	r3, r2, r3
 8011540:	3301      	adds	r3, #1
 8011542:	2b00      	cmp	r3, #0
 8011544:	dd07      	ble.n	8011556 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	8b5b      	ldrh	r3, [r3, #26]
 801154a:	f043 0302 	orr.w	r3, r3, #2
 801154e:	b29a      	uxth	r2, r3
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8011554:	e7ff      	b.n	8011556 <tcp_receive+0xf0a>
 8011556:	bf00      	nop
 8011558:	3750      	adds	r7, #80	; 0x50
 801155a:	46bd      	mov	sp, r7
 801155c:	bdb0      	pop	{r4, r5, r7, pc}
 801155e:	bf00      	nop
 8011560:	20004238 	.word	0x20004238
 8011564:	20004218 	.word	0x20004218
 8011568:	20004242 	.word	0x20004242
 801156c:	080188d4 	.word	0x080188d4
 8011570:	08018c7c 	.word	0x08018c7c
 8011574:	08018920 	.word	0x08018920

08011578 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8011578:	b480      	push	{r7}
 801157a:	b083      	sub	sp, #12
 801157c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801157e:	4b15      	ldr	r3, [pc, #84]	; (80115d4 <tcp_get_next_optbyte+0x5c>)
 8011580:	881b      	ldrh	r3, [r3, #0]
 8011582:	1c5a      	adds	r2, r3, #1
 8011584:	b291      	uxth	r1, r2
 8011586:	4a13      	ldr	r2, [pc, #76]	; (80115d4 <tcp_get_next_optbyte+0x5c>)
 8011588:	8011      	strh	r1, [r2, #0]
 801158a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801158c:	4b12      	ldr	r3, [pc, #72]	; (80115d8 <tcp_get_next_optbyte+0x60>)
 801158e:	681b      	ldr	r3, [r3, #0]
 8011590:	2b00      	cmp	r3, #0
 8011592:	d004      	beq.n	801159e <tcp_get_next_optbyte+0x26>
 8011594:	4b11      	ldr	r3, [pc, #68]	; (80115dc <tcp_get_next_optbyte+0x64>)
 8011596:	881b      	ldrh	r3, [r3, #0]
 8011598:	88fa      	ldrh	r2, [r7, #6]
 801159a:	429a      	cmp	r2, r3
 801159c:	d208      	bcs.n	80115b0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801159e:	4b10      	ldr	r3, [pc, #64]	; (80115e0 <tcp_get_next_optbyte+0x68>)
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	3314      	adds	r3, #20
 80115a4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80115a6:	88fb      	ldrh	r3, [r7, #6]
 80115a8:	683a      	ldr	r2, [r7, #0]
 80115aa:	4413      	add	r3, r2
 80115ac:	781b      	ldrb	r3, [r3, #0]
 80115ae:	e00b      	b.n	80115c8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80115b0:	88fb      	ldrh	r3, [r7, #6]
 80115b2:	b2da      	uxtb	r2, r3
 80115b4:	4b09      	ldr	r3, [pc, #36]	; (80115dc <tcp_get_next_optbyte+0x64>)
 80115b6:	881b      	ldrh	r3, [r3, #0]
 80115b8:	b2db      	uxtb	r3, r3
 80115ba:	1ad3      	subs	r3, r2, r3
 80115bc:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80115be:	4b06      	ldr	r3, [pc, #24]	; (80115d8 <tcp_get_next_optbyte+0x60>)
 80115c0:	681a      	ldr	r2, [r3, #0]
 80115c2:	797b      	ldrb	r3, [r7, #5]
 80115c4:	4413      	add	r3, r2
 80115c6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80115c8:	4618      	mov	r0, r3
 80115ca:	370c      	adds	r7, #12
 80115cc:	46bd      	mov	sp, r7
 80115ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115d2:	4770      	bx	lr
 80115d4:	20004234 	.word	0x20004234
 80115d8:	20004230 	.word	0x20004230
 80115dc:	2000422e 	.word	0x2000422e
 80115e0:	20004228 	.word	0x20004228

080115e4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80115e4:	b580      	push	{r7, lr}
 80115e6:	b084      	sub	sp, #16
 80115e8:	af00      	add	r7, sp, #0
 80115ea:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d106      	bne.n	8011600 <tcp_parseopt+0x1c>
 80115f2:	4b32      	ldr	r3, [pc, #200]	; (80116bc <tcp_parseopt+0xd8>)
 80115f4:	f240 727d 	movw	r2, #1917	; 0x77d
 80115f8:	4931      	ldr	r1, [pc, #196]	; (80116c0 <tcp_parseopt+0xdc>)
 80115fa:	4832      	ldr	r0, [pc, #200]	; (80116c4 <tcp_parseopt+0xe0>)
 80115fc:	f004 ff82 	bl	8016504 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8011600:	4b31      	ldr	r3, [pc, #196]	; (80116c8 <tcp_parseopt+0xe4>)
 8011602:	881b      	ldrh	r3, [r3, #0]
 8011604:	2b00      	cmp	r3, #0
 8011606:	d055      	beq.n	80116b4 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011608:	4b30      	ldr	r3, [pc, #192]	; (80116cc <tcp_parseopt+0xe8>)
 801160a:	2200      	movs	r2, #0
 801160c:	801a      	strh	r2, [r3, #0]
 801160e:	e045      	b.n	801169c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8011610:	f7ff ffb2 	bl	8011578 <tcp_get_next_optbyte>
 8011614:	4603      	mov	r3, r0
 8011616:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8011618:	7bfb      	ldrb	r3, [r7, #15]
 801161a:	2b02      	cmp	r3, #2
 801161c:	d006      	beq.n	801162c <tcp_parseopt+0x48>
 801161e:	2b02      	cmp	r3, #2
 8011620:	dc2b      	bgt.n	801167a <tcp_parseopt+0x96>
 8011622:	2b00      	cmp	r3, #0
 8011624:	d041      	beq.n	80116aa <tcp_parseopt+0xc6>
 8011626:	2b01      	cmp	r3, #1
 8011628:	d127      	bne.n	801167a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801162a:	e037      	b.n	801169c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801162c:	f7ff ffa4 	bl	8011578 <tcp_get_next_optbyte>
 8011630:	4603      	mov	r3, r0
 8011632:	2b04      	cmp	r3, #4
 8011634:	d13b      	bne.n	80116ae <tcp_parseopt+0xca>
 8011636:	4b25      	ldr	r3, [pc, #148]	; (80116cc <tcp_parseopt+0xe8>)
 8011638:	881b      	ldrh	r3, [r3, #0]
 801163a:	3301      	adds	r3, #1
 801163c:	4a22      	ldr	r2, [pc, #136]	; (80116c8 <tcp_parseopt+0xe4>)
 801163e:	8812      	ldrh	r2, [r2, #0]
 8011640:	4293      	cmp	r3, r2
 8011642:	da34      	bge.n	80116ae <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8011644:	f7ff ff98 	bl	8011578 <tcp_get_next_optbyte>
 8011648:	4603      	mov	r3, r0
 801164a:	b29b      	uxth	r3, r3
 801164c:	021b      	lsls	r3, r3, #8
 801164e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8011650:	f7ff ff92 	bl	8011578 <tcp_get_next_optbyte>
 8011654:	4603      	mov	r3, r0
 8011656:	b29a      	uxth	r2, r3
 8011658:	89bb      	ldrh	r3, [r7, #12]
 801165a:	4313      	orrs	r3, r2
 801165c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801165e:	89bb      	ldrh	r3, [r7, #12]
 8011660:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8011664:	d804      	bhi.n	8011670 <tcp_parseopt+0x8c>
 8011666:	89bb      	ldrh	r3, [r7, #12]
 8011668:	2b00      	cmp	r3, #0
 801166a:	d001      	beq.n	8011670 <tcp_parseopt+0x8c>
 801166c:	89ba      	ldrh	r2, [r7, #12]
 801166e:	e001      	b.n	8011674 <tcp_parseopt+0x90>
 8011670:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8011678:	e010      	b.n	801169c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801167a:	f7ff ff7d 	bl	8011578 <tcp_get_next_optbyte>
 801167e:	4603      	mov	r3, r0
 8011680:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8011682:	7afb      	ldrb	r3, [r7, #11]
 8011684:	2b01      	cmp	r3, #1
 8011686:	d914      	bls.n	80116b2 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8011688:	7afb      	ldrb	r3, [r7, #11]
 801168a:	b29a      	uxth	r2, r3
 801168c:	4b0f      	ldr	r3, [pc, #60]	; (80116cc <tcp_parseopt+0xe8>)
 801168e:	881b      	ldrh	r3, [r3, #0]
 8011690:	4413      	add	r3, r2
 8011692:	b29b      	uxth	r3, r3
 8011694:	3b02      	subs	r3, #2
 8011696:	b29a      	uxth	r2, r3
 8011698:	4b0c      	ldr	r3, [pc, #48]	; (80116cc <tcp_parseopt+0xe8>)
 801169a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801169c:	4b0b      	ldr	r3, [pc, #44]	; (80116cc <tcp_parseopt+0xe8>)
 801169e:	881a      	ldrh	r2, [r3, #0]
 80116a0:	4b09      	ldr	r3, [pc, #36]	; (80116c8 <tcp_parseopt+0xe4>)
 80116a2:	881b      	ldrh	r3, [r3, #0]
 80116a4:	429a      	cmp	r2, r3
 80116a6:	d3b3      	bcc.n	8011610 <tcp_parseopt+0x2c>
 80116a8:	e004      	b.n	80116b4 <tcp_parseopt+0xd0>
          return;
 80116aa:	bf00      	nop
 80116ac:	e002      	b.n	80116b4 <tcp_parseopt+0xd0>
            return;
 80116ae:	bf00      	nop
 80116b0:	e000      	b.n	80116b4 <tcp_parseopt+0xd0>
            return;
 80116b2:	bf00      	nop
      }
    }
  }
}
 80116b4:	3710      	adds	r7, #16
 80116b6:	46bd      	mov	sp, r7
 80116b8:	bd80      	pop	{r7, pc}
 80116ba:	bf00      	nop
 80116bc:	080188d4 	.word	0x080188d4
 80116c0:	08018d38 	.word	0x08018d38
 80116c4:	08018920 	.word	0x08018920
 80116c8:	2000422c 	.word	0x2000422c
 80116cc:	20004234 	.word	0x20004234

080116d0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80116d0:	b480      	push	{r7}
 80116d2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80116d4:	4b05      	ldr	r3, [pc, #20]	; (80116ec <tcp_trigger_input_pcb_close+0x1c>)
 80116d6:	781b      	ldrb	r3, [r3, #0]
 80116d8:	f043 0310 	orr.w	r3, r3, #16
 80116dc:	b2da      	uxtb	r2, r3
 80116de:	4b03      	ldr	r3, [pc, #12]	; (80116ec <tcp_trigger_input_pcb_close+0x1c>)
 80116e0:	701a      	strb	r2, [r3, #0]
}
 80116e2:	bf00      	nop
 80116e4:	46bd      	mov	sp, r7
 80116e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ea:	4770      	bx	lr
 80116ec:	20004245 	.word	0x20004245

080116f0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80116f0:	b580      	push	{r7, lr}
 80116f2:	b084      	sub	sp, #16
 80116f4:	af00      	add	r7, sp, #0
 80116f6:	60f8      	str	r0, [r7, #12]
 80116f8:	60b9      	str	r1, [r7, #8]
 80116fa:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d00a      	beq.n	8011718 <tcp_route+0x28>
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	7a1b      	ldrb	r3, [r3, #8]
 8011706:	2b00      	cmp	r3, #0
 8011708:	d006      	beq.n	8011718 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801170a:	68fb      	ldr	r3, [r7, #12]
 801170c:	7a1b      	ldrb	r3, [r3, #8]
 801170e:	4618      	mov	r0, r3
 8011710:	f7fb fb24 	bl	800cd5c <netif_get_by_index>
 8011714:	4603      	mov	r3, r0
 8011716:	e003      	b.n	8011720 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8011718:	6878      	ldr	r0, [r7, #4]
 801171a:	f002 fead 	bl	8014478 <ip4_route>
 801171e:	4603      	mov	r3, r0
  }
}
 8011720:	4618      	mov	r0, r3
 8011722:	3710      	adds	r7, #16
 8011724:	46bd      	mov	sp, r7
 8011726:	bd80      	pop	{r7, pc}

08011728 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8011728:	b590      	push	{r4, r7, lr}
 801172a:	b087      	sub	sp, #28
 801172c:	af00      	add	r7, sp, #0
 801172e:	60f8      	str	r0, [r7, #12]
 8011730:	60b9      	str	r1, [r7, #8]
 8011732:	603b      	str	r3, [r7, #0]
 8011734:	4613      	mov	r3, r2
 8011736:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	2b00      	cmp	r3, #0
 801173c:	d105      	bne.n	801174a <tcp_create_segment+0x22>
 801173e:	4b44      	ldr	r3, [pc, #272]	; (8011850 <tcp_create_segment+0x128>)
 8011740:	22a3      	movs	r2, #163	; 0xa3
 8011742:	4944      	ldr	r1, [pc, #272]	; (8011854 <tcp_create_segment+0x12c>)
 8011744:	4844      	ldr	r0, [pc, #272]	; (8011858 <tcp_create_segment+0x130>)
 8011746:	f004 fedd 	bl	8016504 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801174a:	68bb      	ldr	r3, [r7, #8]
 801174c:	2b00      	cmp	r3, #0
 801174e:	d105      	bne.n	801175c <tcp_create_segment+0x34>
 8011750:	4b3f      	ldr	r3, [pc, #252]	; (8011850 <tcp_create_segment+0x128>)
 8011752:	22a4      	movs	r2, #164	; 0xa4
 8011754:	4941      	ldr	r1, [pc, #260]	; (801185c <tcp_create_segment+0x134>)
 8011756:	4840      	ldr	r0, [pc, #256]	; (8011858 <tcp_create_segment+0x130>)
 8011758:	f004 fed4 	bl	8016504 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801175c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011760:	009b      	lsls	r3, r3, #2
 8011762:	b2db      	uxtb	r3, r3
 8011764:	f003 0304 	and.w	r3, r3, #4
 8011768:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801176a:	2003      	movs	r0, #3
 801176c:	f7fb f806 	bl	800c77c <memp_malloc>
 8011770:	6138      	str	r0, [r7, #16]
 8011772:	693b      	ldr	r3, [r7, #16]
 8011774:	2b00      	cmp	r3, #0
 8011776:	d104      	bne.n	8011782 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011778:	68b8      	ldr	r0, [r7, #8]
 801177a:	f7fb fe7d 	bl	800d478 <pbuf_free>
    return NULL;
 801177e:	2300      	movs	r3, #0
 8011780:	e061      	b.n	8011846 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8011782:	693b      	ldr	r3, [r7, #16]
 8011784:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011788:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801178a:	693b      	ldr	r3, [r7, #16]
 801178c:	2200      	movs	r2, #0
 801178e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8011790:	693b      	ldr	r3, [r7, #16]
 8011792:	68ba      	ldr	r2, [r7, #8]
 8011794:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8011796:	68bb      	ldr	r3, [r7, #8]
 8011798:	891a      	ldrh	r2, [r3, #8]
 801179a:	7dfb      	ldrb	r3, [r7, #23]
 801179c:	b29b      	uxth	r3, r3
 801179e:	429a      	cmp	r2, r3
 80117a0:	d205      	bcs.n	80117ae <tcp_create_segment+0x86>
 80117a2:	4b2b      	ldr	r3, [pc, #172]	; (8011850 <tcp_create_segment+0x128>)
 80117a4:	22b0      	movs	r2, #176	; 0xb0
 80117a6:	492e      	ldr	r1, [pc, #184]	; (8011860 <tcp_create_segment+0x138>)
 80117a8:	482b      	ldr	r0, [pc, #172]	; (8011858 <tcp_create_segment+0x130>)
 80117aa:	f004 feab 	bl	8016504 <iprintf>
  seg->len = p->tot_len - optlen;
 80117ae:	68bb      	ldr	r3, [r7, #8]
 80117b0:	891a      	ldrh	r2, [r3, #8]
 80117b2:	7dfb      	ldrb	r3, [r7, #23]
 80117b4:	b29b      	uxth	r3, r3
 80117b6:	1ad3      	subs	r3, r2, r3
 80117b8:	b29a      	uxth	r2, r3
 80117ba:	693b      	ldr	r3, [r7, #16]
 80117bc:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80117be:	2114      	movs	r1, #20
 80117c0:	68b8      	ldr	r0, [r7, #8]
 80117c2:	f7fb fdc3 	bl	800d34c <pbuf_add_header>
 80117c6:	4603      	mov	r3, r0
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d004      	beq.n	80117d6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80117cc:	6938      	ldr	r0, [r7, #16]
 80117ce:	f7fd f8d2 	bl	800e976 <tcp_seg_free>
    return NULL;
 80117d2:	2300      	movs	r3, #0
 80117d4:	e037      	b.n	8011846 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80117d6:	693b      	ldr	r3, [r7, #16]
 80117d8:	685b      	ldr	r3, [r3, #4]
 80117da:	685a      	ldr	r2, [r3, #4]
 80117dc:	693b      	ldr	r3, [r7, #16]
 80117de:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80117e0:	68fb      	ldr	r3, [r7, #12]
 80117e2:	8ada      	ldrh	r2, [r3, #22]
 80117e4:	693b      	ldr	r3, [r7, #16]
 80117e6:	68dc      	ldr	r4, [r3, #12]
 80117e8:	4610      	mov	r0, r2
 80117ea:	f7fa fb11 	bl	800be10 <lwip_htons>
 80117ee:	4603      	mov	r3, r0
 80117f0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	8b1a      	ldrh	r2, [r3, #24]
 80117f6:	693b      	ldr	r3, [r7, #16]
 80117f8:	68dc      	ldr	r4, [r3, #12]
 80117fa:	4610      	mov	r0, r2
 80117fc:	f7fa fb08 	bl	800be10 <lwip_htons>
 8011800:	4603      	mov	r3, r0
 8011802:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8011804:	693b      	ldr	r3, [r7, #16]
 8011806:	68dc      	ldr	r4, [r3, #12]
 8011808:	6838      	ldr	r0, [r7, #0]
 801180a:	f7fa fb16 	bl	800be3a <lwip_htonl>
 801180e:	4603      	mov	r3, r0
 8011810:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8011812:	7dfb      	ldrb	r3, [r7, #23]
 8011814:	089b      	lsrs	r3, r3, #2
 8011816:	b2db      	uxtb	r3, r3
 8011818:	b29b      	uxth	r3, r3
 801181a:	3305      	adds	r3, #5
 801181c:	b29b      	uxth	r3, r3
 801181e:	031b      	lsls	r3, r3, #12
 8011820:	b29a      	uxth	r2, r3
 8011822:	79fb      	ldrb	r3, [r7, #7]
 8011824:	b29b      	uxth	r3, r3
 8011826:	4313      	orrs	r3, r2
 8011828:	b29a      	uxth	r2, r3
 801182a:	693b      	ldr	r3, [r7, #16]
 801182c:	68dc      	ldr	r4, [r3, #12]
 801182e:	4610      	mov	r0, r2
 8011830:	f7fa faee 	bl	800be10 <lwip_htons>
 8011834:	4603      	mov	r3, r0
 8011836:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8011838:	693b      	ldr	r3, [r7, #16]
 801183a:	68db      	ldr	r3, [r3, #12]
 801183c:	2200      	movs	r2, #0
 801183e:	749a      	strb	r2, [r3, #18]
 8011840:	2200      	movs	r2, #0
 8011842:	74da      	strb	r2, [r3, #19]
  return seg;
 8011844:	693b      	ldr	r3, [r7, #16]
}
 8011846:	4618      	mov	r0, r3
 8011848:	371c      	adds	r7, #28
 801184a:	46bd      	mov	sp, r7
 801184c:	bd90      	pop	{r4, r7, pc}
 801184e:	bf00      	nop
 8011850:	08018d54 	.word	0x08018d54
 8011854:	08018d88 	.word	0x08018d88
 8011858:	08018da8 	.word	0x08018da8
 801185c:	08018dd0 	.word	0x08018dd0
 8011860:	08018df4 	.word	0x08018df4

08011864 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8011864:	b590      	push	{r4, r7, lr}
 8011866:	b08b      	sub	sp, #44	; 0x2c
 8011868:	af02      	add	r7, sp, #8
 801186a:	6078      	str	r0, [r7, #4]
 801186c:	460b      	mov	r3, r1
 801186e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8011870:	2300      	movs	r3, #0
 8011872:	61fb      	str	r3, [r7, #28]
 8011874:	2300      	movs	r3, #0
 8011876:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8011878:	2300      	movs	r3, #0
 801187a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	2b00      	cmp	r3, #0
 8011880:	d106      	bne.n	8011890 <tcp_split_unsent_seg+0x2c>
 8011882:	4b95      	ldr	r3, [pc, #596]	; (8011ad8 <tcp_split_unsent_seg+0x274>)
 8011884:	f240 324b 	movw	r2, #843	; 0x34b
 8011888:	4994      	ldr	r1, [pc, #592]	; (8011adc <tcp_split_unsent_seg+0x278>)
 801188a:	4895      	ldr	r0, [pc, #596]	; (8011ae0 <tcp_split_unsent_seg+0x27c>)
 801188c:	f004 fe3a 	bl	8016504 <iprintf>

  useg = pcb->unsent;
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011894:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8011896:	697b      	ldr	r3, [r7, #20]
 8011898:	2b00      	cmp	r3, #0
 801189a:	d102      	bne.n	80118a2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801189c:	f04f 33ff 	mov.w	r3, #4294967295
 80118a0:	e116      	b.n	8011ad0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80118a2:	887b      	ldrh	r3, [r7, #2]
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d109      	bne.n	80118bc <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80118a8:	4b8b      	ldr	r3, [pc, #556]	; (8011ad8 <tcp_split_unsent_seg+0x274>)
 80118aa:	f240 3253 	movw	r2, #851	; 0x353
 80118ae:	498d      	ldr	r1, [pc, #564]	; (8011ae4 <tcp_split_unsent_seg+0x280>)
 80118b0:	488b      	ldr	r0, [pc, #556]	; (8011ae0 <tcp_split_unsent_seg+0x27c>)
 80118b2:	f004 fe27 	bl	8016504 <iprintf>
    return ERR_VAL;
 80118b6:	f06f 0305 	mvn.w	r3, #5
 80118ba:	e109      	b.n	8011ad0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80118bc:	697b      	ldr	r3, [r7, #20]
 80118be:	891b      	ldrh	r3, [r3, #8]
 80118c0:	887a      	ldrh	r2, [r7, #2]
 80118c2:	429a      	cmp	r2, r3
 80118c4:	d301      	bcc.n	80118ca <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80118c6:	2300      	movs	r3, #0
 80118c8:	e102      	b.n	8011ad0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80118ce:	887a      	ldrh	r2, [r7, #2]
 80118d0:	429a      	cmp	r2, r3
 80118d2:	d906      	bls.n	80118e2 <tcp_split_unsent_seg+0x7e>
 80118d4:	4b80      	ldr	r3, [pc, #512]	; (8011ad8 <tcp_split_unsent_seg+0x274>)
 80118d6:	f240 325b 	movw	r2, #859	; 0x35b
 80118da:	4983      	ldr	r1, [pc, #524]	; (8011ae8 <tcp_split_unsent_seg+0x284>)
 80118dc:	4880      	ldr	r0, [pc, #512]	; (8011ae0 <tcp_split_unsent_seg+0x27c>)
 80118de:	f004 fe11 	bl	8016504 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80118e2:	697b      	ldr	r3, [r7, #20]
 80118e4:	891b      	ldrh	r3, [r3, #8]
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d106      	bne.n	80118f8 <tcp_split_unsent_seg+0x94>
 80118ea:	4b7b      	ldr	r3, [pc, #492]	; (8011ad8 <tcp_split_unsent_seg+0x274>)
 80118ec:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80118f0:	497e      	ldr	r1, [pc, #504]	; (8011aec <tcp_split_unsent_seg+0x288>)
 80118f2:	487b      	ldr	r0, [pc, #492]	; (8011ae0 <tcp_split_unsent_seg+0x27c>)
 80118f4:	f004 fe06 	bl	8016504 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80118f8:	697b      	ldr	r3, [r7, #20]
 80118fa:	7a9b      	ldrb	r3, [r3, #10]
 80118fc:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80118fe:	7bfb      	ldrb	r3, [r7, #15]
 8011900:	009b      	lsls	r3, r3, #2
 8011902:	b2db      	uxtb	r3, r3
 8011904:	f003 0304 	and.w	r3, r3, #4
 8011908:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801190a:	697b      	ldr	r3, [r7, #20]
 801190c:	891a      	ldrh	r2, [r3, #8]
 801190e:	887b      	ldrh	r3, [r7, #2]
 8011910:	1ad3      	subs	r3, r2, r3
 8011912:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8011914:	7bbb      	ldrb	r3, [r7, #14]
 8011916:	b29a      	uxth	r2, r3
 8011918:	89bb      	ldrh	r3, [r7, #12]
 801191a:	4413      	add	r3, r2
 801191c:	b29b      	uxth	r3, r3
 801191e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011922:	4619      	mov	r1, r3
 8011924:	2036      	movs	r0, #54	; 0x36
 8011926:	f7fb fac3 	bl	800ceb0 <pbuf_alloc>
 801192a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801192c:	693b      	ldr	r3, [r7, #16]
 801192e:	2b00      	cmp	r3, #0
 8011930:	f000 80b7 	beq.w	8011aa2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8011934:	697b      	ldr	r3, [r7, #20]
 8011936:	685b      	ldr	r3, [r3, #4]
 8011938:	891a      	ldrh	r2, [r3, #8]
 801193a:	697b      	ldr	r3, [r7, #20]
 801193c:	891b      	ldrh	r3, [r3, #8]
 801193e:	1ad3      	subs	r3, r2, r3
 8011940:	b29a      	uxth	r2, r3
 8011942:	887b      	ldrh	r3, [r7, #2]
 8011944:	4413      	add	r3, r2
 8011946:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8011948:	697b      	ldr	r3, [r7, #20]
 801194a:	6858      	ldr	r0, [r3, #4]
 801194c:	693b      	ldr	r3, [r7, #16]
 801194e:	685a      	ldr	r2, [r3, #4]
 8011950:	7bbb      	ldrb	r3, [r7, #14]
 8011952:	18d1      	adds	r1, r2, r3
 8011954:	897b      	ldrh	r3, [r7, #10]
 8011956:	89ba      	ldrh	r2, [r7, #12]
 8011958:	f7fb ff84 	bl	800d864 <pbuf_copy_partial>
 801195c:	4603      	mov	r3, r0
 801195e:	461a      	mov	r2, r3
 8011960:	89bb      	ldrh	r3, [r7, #12]
 8011962:	4293      	cmp	r3, r2
 8011964:	f040 809f 	bne.w	8011aa6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8011968:	697b      	ldr	r3, [r7, #20]
 801196a:	68db      	ldr	r3, [r3, #12]
 801196c:	899b      	ldrh	r3, [r3, #12]
 801196e:	b29b      	uxth	r3, r3
 8011970:	4618      	mov	r0, r3
 8011972:	f7fa fa4d 	bl	800be10 <lwip_htons>
 8011976:	4603      	mov	r3, r0
 8011978:	b2db      	uxtb	r3, r3
 801197a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801197e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8011980:	2300      	movs	r3, #0
 8011982:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8011984:	7efb      	ldrb	r3, [r7, #27]
 8011986:	f003 0308 	and.w	r3, r3, #8
 801198a:	2b00      	cmp	r3, #0
 801198c:	d007      	beq.n	801199e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801198e:	7efb      	ldrb	r3, [r7, #27]
 8011990:	f023 0308 	bic.w	r3, r3, #8
 8011994:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8011996:	7ebb      	ldrb	r3, [r7, #26]
 8011998:	f043 0308 	orr.w	r3, r3, #8
 801199c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801199e:	7efb      	ldrb	r3, [r7, #27]
 80119a0:	f003 0301 	and.w	r3, r3, #1
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d007      	beq.n	80119b8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80119a8:	7efb      	ldrb	r3, [r7, #27]
 80119aa:	f023 0301 	bic.w	r3, r3, #1
 80119ae:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80119b0:	7ebb      	ldrb	r3, [r7, #26]
 80119b2:	f043 0301 	orr.w	r3, r3, #1
 80119b6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80119b8:	697b      	ldr	r3, [r7, #20]
 80119ba:	68db      	ldr	r3, [r3, #12]
 80119bc:	685b      	ldr	r3, [r3, #4]
 80119be:	4618      	mov	r0, r3
 80119c0:	f7fa fa3b 	bl	800be3a <lwip_htonl>
 80119c4:	4602      	mov	r2, r0
 80119c6:	887b      	ldrh	r3, [r7, #2]
 80119c8:	18d1      	adds	r1, r2, r3
 80119ca:	7eba      	ldrb	r2, [r7, #26]
 80119cc:	7bfb      	ldrb	r3, [r7, #15]
 80119ce:	9300      	str	r3, [sp, #0]
 80119d0:	460b      	mov	r3, r1
 80119d2:	6939      	ldr	r1, [r7, #16]
 80119d4:	6878      	ldr	r0, [r7, #4]
 80119d6:	f7ff fea7 	bl	8011728 <tcp_create_segment>
 80119da:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80119dc:	69fb      	ldr	r3, [r7, #28]
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d063      	beq.n	8011aaa <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80119e2:	697b      	ldr	r3, [r7, #20]
 80119e4:	685b      	ldr	r3, [r3, #4]
 80119e6:	4618      	mov	r0, r3
 80119e8:	f7fb fdd4 	bl	800d594 <pbuf_clen>
 80119ec:	4603      	mov	r3, r0
 80119ee:	461a      	mov	r2, r3
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80119f6:	1a9b      	subs	r3, r3, r2
 80119f8:	b29a      	uxth	r2, r3
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8011a00:	697b      	ldr	r3, [r7, #20]
 8011a02:	6858      	ldr	r0, [r3, #4]
 8011a04:	697b      	ldr	r3, [r7, #20]
 8011a06:	685b      	ldr	r3, [r3, #4]
 8011a08:	891a      	ldrh	r2, [r3, #8]
 8011a0a:	89bb      	ldrh	r3, [r7, #12]
 8011a0c:	1ad3      	subs	r3, r2, r3
 8011a0e:	b29b      	uxth	r3, r3
 8011a10:	4619      	mov	r1, r3
 8011a12:	f7fb fbab 	bl	800d16c <pbuf_realloc>
  useg->len -= remainder;
 8011a16:	697b      	ldr	r3, [r7, #20]
 8011a18:	891a      	ldrh	r2, [r3, #8]
 8011a1a:	89bb      	ldrh	r3, [r7, #12]
 8011a1c:	1ad3      	subs	r3, r2, r3
 8011a1e:	b29a      	uxth	r2, r3
 8011a20:	697b      	ldr	r3, [r7, #20]
 8011a22:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8011a24:	697b      	ldr	r3, [r7, #20]
 8011a26:	68db      	ldr	r3, [r3, #12]
 8011a28:	899b      	ldrh	r3, [r3, #12]
 8011a2a:	b29c      	uxth	r4, r3
 8011a2c:	7efb      	ldrb	r3, [r7, #27]
 8011a2e:	b29b      	uxth	r3, r3
 8011a30:	4618      	mov	r0, r3
 8011a32:	f7fa f9ed 	bl	800be10 <lwip_htons>
 8011a36:	4603      	mov	r3, r0
 8011a38:	461a      	mov	r2, r3
 8011a3a:	697b      	ldr	r3, [r7, #20]
 8011a3c:	68db      	ldr	r3, [r3, #12]
 8011a3e:	4322      	orrs	r2, r4
 8011a40:	b292      	uxth	r2, r2
 8011a42:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8011a44:	697b      	ldr	r3, [r7, #20]
 8011a46:	685b      	ldr	r3, [r3, #4]
 8011a48:	4618      	mov	r0, r3
 8011a4a:	f7fb fda3 	bl	800d594 <pbuf_clen>
 8011a4e:	4603      	mov	r3, r0
 8011a50:	461a      	mov	r2, r3
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011a58:	4413      	add	r3, r2
 8011a5a:	b29a      	uxth	r2, r3
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011a62:	69fb      	ldr	r3, [r7, #28]
 8011a64:	685b      	ldr	r3, [r3, #4]
 8011a66:	4618      	mov	r0, r3
 8011a68:	f7fb fd94 	bl	800d594 <pbuf_clen>
 8011a6c:	4603      	mov	r3, r0
 8011a6e:	461a      	mov	r2, r3
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011a76:	4413      	add	r3, r2
 8011a78:	b29a      	uxth	r2, r3
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8011a80:	697b      	ldr	r3, [r7, #20]
 8011a82:	681a      	ldr	r2, [r3, #0]
 8011a84:	69fb      	ldr	r3, [r7, #28]
 8011a86:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8011a88:	697b      	ldr	r3, [r7, #20]
 8011a8a:	69fa      	ldr	r2, [r7, #28]
 8011a8c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8011a8e:	69fb      	ldr	r3, [r7, #28]
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d103      	bne.n	8011a9e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	2200      	movs	r2, #0
 8011a9a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8011a9e:	2300      	movs	r3, #0
 8011aa0:	e016      	b.n	8011ad0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8011aa2:	bf00      	nop
 8011aa4:	e002      	b.n	8011aac <tcp_split_unsent_seg+0x248>
    goto memerr;
 8011aa6:	bf00      	nop
 8011aa8:	e000      	b.n	8011aac <tcp_split_unsent_seg+0x248>
    goto memerr;
 8011aaa:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8011aac:	69fb      	ldr	r3, [r7, #28]
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d006      	beq.n	8011ac0 <tcp_split_unsent_seg+0x25c>
 8011ab2:	4b09      	ldr	r3, [pc, #36]	; (8011ad8 <tcp_split_unsent_seg+0x274>)
 8011ab4:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8011ab8:	490d      	ldr	r1, [pc, #52]	; (8011af0 <tcp_split_unsent_seg+0x28c>)
 8011aba:	4809      	ldr	r0, [pc, #36]	; (8011ae0 <tcp_split_unsent_seg+0x27c>)
 8011abc:	f004 fd22 	bl	8016504 <iprintf>
  if (p != NULL) {
 8011ac0:	693b      	ldr	r3, [r7, #16]
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d002      	beq.n	8011acc <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8011ac6:	6938      	ldr	r0, [r7, #16]
 8011ac8:	f7fb fcd6 	bl	800d478 <pbuf_free>
  }

  return ERR_MEM;
 8011acc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011ad0:	4618      	mov	r0, r3
 8011ad2:	3724      	adds	r7, #36	; 0x24
 8011ad4:	46bd      	mov	sp, r7
 8011ad6:	bd90      	pop	{r4, r7, pc}
 8011ad8:	08018d54 	.word	0x08018d54
 8011adc:	080190e8 	.word	0x080190e8
 8011ae0:	08018da8 	.word	0x08018da8
 8011ae4:	0801910c 	.word	0x0801910c
 8011ae8:	08019130 	.word	0x08019130
 8011aec:	08019140 	.word	0x08019140
 8011af0:	08019150 	.word	0x08019150

08011af4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8011af4:	b590      	push	{r4, r7, lr}
 8011af6:	b085      	sub	sp, #20
 8011af8:	af00      	add	r7, sp, #0
 8011afa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d106      	bne.n	8011b10 <tcp_send_fin+0x1c>
 8011b02:	4b21      	ldr	r3, [pc, #132]	; (8011b88 <tcp_send_fin+0x94>)
 8011b04:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8011b08:	4920      	ldr	r1, [pc, #128]	; (8011b8c <tcp_send_fin+0x98>)
 8011b0a:	4821      	ldr	r0, [pc, #132]	; (8011b90 <tcp_send_fin+0x9c>)
 8011b0c:	f004 fcfa 	bl	8016504 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d02e      	beq.n	8011b76 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b1c:	60fb      	str	r3, [r7, #12]
 8011b1e:	e002      	b.n	8011b26 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8011b20:	68fb      	ldr	r3, [r7, #12]
 8011b22:	681b      	ldr	r3, [r3, #0]
 8011b24:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011b26:	68fb      	ldr	r3, [r7, #12]
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d1f8      	bne.n	8011b20 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8011b2e:	68fb      	ldr	r3, [r7, #12]
 8011b30:	68db      	ldr	r3, [r3, #12]
 8011b32:	899b      	ldrh	r3, [r3, #12]
 8011b34:	b29b      	uxth	r3, r3
 8011b36:	4618      	mov	r0, r3
 8011b38:	f7fa f96a 	bl	800be10 <lwip_htons>
 8011b3c:	4603      	mov	r3, r0
 8011b3e:	b2db      	uxtb	r3, r3
 8011b40:	f003 0307 	and.w	r3, r3, #7
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d116      	bne.n	8011b76 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8011b48:	68fb      	ldr	r3, [r7, #12]
 8011b4a:	68db      	ldr	r3, [r3, #12]
 8011b4c:	899b      	ldrh	r3, [r3, #12]
 8011b4e:	b29c      	uxth	r4, r3
 8011b50:	2001      	movs	r0, #1
 8011b52:	f7fa f95d 	bl	800be10 <lwip_htons>
 8011b56:	4603      	mov	r3, r0
 8011b58:	461a      	mov	r2, r3
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	68db      	ldr	r3, [r3, #12]
 8011b5e:	4322      	orrs	r2, r4
 8011b60:	b292      	uxth	r2, r2
 8011b62:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	8b5b      	ldrh	r3, [r3, #26]
 8011b68:	f043 0320 	orr.w	r3, r3, #32
 8011b6c:	b29a      	uxth	r2, r3
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8011b72:	2300      	movs	r3, #0
 8011b74:	e004      	b.n	8011b80 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8011b76:	2101      	movs	r1, #1
 8011b78:	6878      	ldr	r0, [r7, #4]
 8011b7a:	f000 f80b 	bl	8011b94 <tcp_enqueue_flags>
 8011b7e:	4603      	mov	r3, r0
}
 8011b80:	4618      	mov	r0, r3
 8011b82:	3714      	adds	r7, #20
 8011b84:	46bd      	mov	sp, r7
 8011b86:	bd90      	pop	{r4, r7, pc}
 8011b88:	08018d54 	.word	0x08018d54
 8011b8c:	0801915c 	.word	0x0801915c
 8011b90:	08018da8 	.word	0x08018da8

08011b94 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8011b94:	b580      	push	{r7, lr}
 8011b96:	b08a      	sub	sp, #40	; 0x28
 8011b98:	af02      	add	r7, sp, #8
 8011b9a:	6078      	str	r0, [r7, #4]
 8011b9c:	460b      	mov	r3, r1
 8011b9e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8011ba0:	2300      	movs	r3, #0
 8011ba2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8011ba4:	2300      	movs	r3, #0
 8011ba6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8011ba8:	78fb      	ldrb	r3, [r7, #3]
 8011baa:	f003 0303 	and.w	r3, r3, #3
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	d106      	bne.n	8011bc0 <tcp_enqueue_flags+0x2c>
 8011bb2:	4b67      	ldr	r3, [pc, #412]	; (8011d50 <tcp_enqueue_flags+0x1bc>)
 8011bb4:	f240 4211 	movw	r2, #1041	; 0x411
 8011bb8:	4966      	ldr	r1, [pc, #408]	; (8011d54 <tcp_enqueue_flags+0x1c0>)
 8011bba:	4867      	ldr	r0, [pc, #412]	; (8011d58 <tcp_enqueue_flags+0x1c4>)
 8011bbc:	f004 fca2 	bl	8016504 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d106      	bne.n	8011bd4 <tcp_enqueue_flags+0x40>
 8011bc6:	4b62      	ldr	r3, [pc, #392]	; (8011d50 <tcp_enqueue_flags+0x1bc>)
 8011bc8:	f240 4213 	movw	r2, #1043	; 0x413
 8011bcc:	4963      	ldr	r1, [pc, #396]	; (8011d5c <tcp_enqueue_flags+0x1c8>)
 8011bce:	4862      	ldr	r0, [pc, #392]	; (8011d58 <tcp_enqueue_flags+0x1c4>)
 8011bd0:	f004 fc98 	bl	8016504 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8011bd4:	78fb      	ldrb	r3, [r7, #3]
 8011bd6:	f003 0302 	and.w	r3, r3, #2
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d001      	beq.n	8011be2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8011bde:	2301      	movs	r3, #1
 8011be0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011be2:	7ffb      	ldrb	r3, [r7, #31]
 8011be4:	009b      	lsls	r3, r3, #2
 8011be6:	b2db      	uxtb	r3, r3
 8011be8:	f003 0304 	and.w	r3, r3, #4
 8011bec:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011bee:	7dfb      	ldrb	r3, [r7, #23]
 8011bf0:	b29b      	uxth	r3, r3
 8011bf2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011bf6:	4619      	mov	r1, r3
 8011bf8:	2036      	movs	r0, #54	; 0x36
 8011bfa:	f7fb f959 	bl	800ceb0 <pbuf_alloc>
 8011bfe:	6138      	str	r0, [r7, #16]
 8011c00:	693b      	ldr	r3, [r7, #16]
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d109      	bne.n	8011c1a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	8b5b      	ldrh	r3, [r3, #26]
 8011c0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011c0e:	b29a      	uxth	r2, r3
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011c14:	f04f 33ff 	mov.w	r3, #4294967295
 8011c18:	e095      	b.n	8011d46 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8011c1a:	693b      	ldr	r3, [r7, #16]
 8011c1c:	895a      	ldrh	r2, [r3, #10]
 8011c1e:	7dfb      	ldrb	r3, [r7, #23]
 8011c20:	b29b      	uxth	r3, r3
 8011c22:	429a      	cmp	r2, r3
 8011c24:	d206      	bcs.n	8011c34 <tcp_enqueue_flags+0xa0>
 8011c26:	4b4a      	ldr	r3, [pc, #296]	; (8011d50 <tcp_enqueue_flags+0x1bc>)
 8011c28:	f240 4239 	movw	r2, #1081	; 0x439
 8011c2c:	494c      	ldr	r1, [pc, #304]	; (8011d60 <tcp_enqueue_flags+0x1cc>)
 8011c2e:	484a      	ldr	r0, [pc, #296]	; (8011d58 <tcp_enqueue_flags+0x1c4>)
 8011c30:	f004 fc68 	bl	8016504 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8011c38:	78fa      	ldrb	r2, [r7, #3]
 8011c3a:	7ffb      	ldrb	r3, [r7, #31]
 8011c3c:	9300      	str	r3, [sp, #0]
 8011c3e:	460b      	mov	r3, r1
 8011c40:	6939      	ldr	r1, [r7, #16]
 8011c42:	6878      	ldr	r0, [r7, #4]
 8011c44:	f7ff fd70 	bl	8011728 <tcp_create_segment>
 8011c48:	60f8      	str	r0, [r7, #12]
 8011c4a:	68fb      	ldr	r3, [r7, #12]
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d109      	bne.n	8011c64 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	8b5b      	ldrh	r3, [r3, #26]
 8011c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011c58:	b29a      	uxth	r2, r3
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8011c62:	e070      	b.n	8011d46 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	68db      	ldr	r3, [r3, #12]
 8011c68:	f003 0303 	and.w	r3, r3, #3
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d006      	beq.n	8011c7e <tcp_enqueue_flags+0xea>
 8011c70:	4b37      	ldr	r3, [pc, #220]	; (8011d50 <tcp_enqueue_flags+0x1bc>)
 8011c72:	f240 4242 	movw	r2, #1090	; 0x442
 8011c76:	493b      	ldr	r1, [pc, #236]	; (8011d64 <tcp_enqueue_flags+0x1d0>)
 8011c78:	4837      	ldr	r0, [pc, #220]	; (8011d58 <tcp_enqueue_flags+0x1c4>)
 8011c7a:	f004 fc43 	bl	8016504 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8011c7e:	68fb      	ldr	r3, [r7, #12]
 8011c80:	891b      	ldrh	r3, [r3, #8]
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	d006      	beq.n	8011c94 <tcp_enqueue_flags+0x100>
 8011c86:	4b32      	ldr	r3, [pc, #200]	; (8011d50 <tcp_enqueue_flags+0x1bc>)
 8011c88:	f240 4243 	movw	r2, #1091	; 0x443
 8011c8c:	4936      	ldr	r1, [pc, #216]	; (8011d68 <tcp_enqueue_flags+0x1d4>)
 8011c8e:	4832      	ldr	r0, [pc, #200]	; (8011d58 <tcp_enqueue_flags+0x1c4>)
 8011c90:	f004 fc38 	bl	8016504 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d103      	bne.n	8011ca4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	68fa      	ldr	r2, [r7, #12]
 8011ca0:	66da      	str	r2, [r3, #108]	; 0x6c
 8011ca2:	e00d      	b.n	8011cc0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ca8:	61bb      	str	r3, [r7, #24]
 8011caa:	e002      	b.n	8011cb2 <tcp_enqueue_flags+0x11e>
 8011cac:	69bb      	ldr	r3, [r7, #24]
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	61bb      	str	r3, [r7, #24]
 8011cb2:	69bb      	ldr	r3, [r7, #24]
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d1f8      	bne.n	8011cac <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8011cba:	69bb      	ldr	r3, [r7, #24]
 8011cbc:	68fa      	ldr	r2, [r7, #12]
 8011cbe:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	2200      	movs	r2, #0
 8011cc4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8011cc8:	78fb      	ldrb	r3, [r7, #3]
 8011cca:	f003 0302 	and.w	r3, r3, #2
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d104      	bne.n	8011cdc <tcp_enqueue_flags+0x148>
 8011cd2:	78fb      	ldrb	r3, [r7, #3]
 8011cd4:	f003 0301 	and.w	r3, r3, #1
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d004      	beq.n	8011ce6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011ce0:	1c5a      	adds	r2, r3, #1
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8011ce6:	78fb      	ldrb	r3, [r7, #3]
 8011ce8:	f003 0301 	and.w	r3, r3, #1
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d006      	beq.n	8011cfe <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	8b5b      	ldrh	r3, [r3, #26]
 8011cf4:	f043 0320 	orr.w	r3, r3, #32
 8011cf8:	b29a      	uxth	r2, r3
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	685b      	ldr	r3, [r3, #4]
 8011d02:	4618      	mov	r0, r3
 8011d04:	f7fb fc46 	bl	800d594 <pbuf_clen>
 8011d08:	4603      	mov	r3, r0
 8011d0a:	461a      	mov	r2, r3
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011d12:	4413      	add	r3, r2
 8011d14:	b29a      	uxth	r2, r3
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d00e      	beq.n	8011d44 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d10a      	bne.n	8011d44 <tcp_enqueue_flags+0x1b0>
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d106      	bne.n	8011d44 <tcp_enqueue_flags+0x1b0>
 8011d36:	4b06      	ldr	r3, [pc, #24]	; (8011d50 <tcp_enqueue_flags+0x1bc>)
 8011d38:	f240 4265 	movw	r2, #1125	; 0x465
 8011d3c:	490b      	ldr	r1, [pc, #44]	; (8011d6c <tcp_enqueue_flags+0x1d8>)
 8011d3e:	4806      	ldr	r0, [pc, #24]	; (8011d58 <tcp_enqueue_flags+0x1c4>)
 8011d40:	f004 fbe0 	bl	8016504 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8011d44:	2300      	movs	r3, #0
}
 8011d46:	4618      	mov	r0, r3
 8011d48:	3720      	adds	r7, #32
 8011d4a:	46bd      	mov	sp, r7
 8011d4c:	bd80      	pop	{r7, pc}
 8011d4e:	bf00      	nop
 8011d50:	08018d54 	.word	0x08018d54
 8011d54:	08019178 	.word	0x08019178
 8011d58:	08018da8 	.word	0x08018da8
 8011d5c:	080191d0 	.word	0x080191d0
 8011d60:	080191f0 	.word	0x080191f0
 8011d64:	0801922c 	.word	0x0801922c
 8011d68:	08019244 	.word	0x08019244
 8011d6c:	08019270 	.word	0x08019270

08011d70 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8011d70:	b5b0      	push	{r4, r5, r7, lr}
 8011d72:	b08a      	sub	sp, #40	; 0x28
 8011d74:	af00      	add	r7, sp, #0
 8011d76:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d106      	bne.n	8011d8c <tcp_output+0x1c>
 8011d7e:	4b9e      	ldr	r3, [pc, #632]	; (8011ff8 <tcp_output+0x288>)
 8011d80:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8011d84:	499d      	ldr	r1, [pc, #628]	; (8011ffc <tcp_output+0x28c>)
 8011d86:	489e      	ldr	r0, [pc, #632]	; (8012000 <tcp_output+0x290>)
 8011d88:	f004 fbbc 	bl	8016504 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	7d1b      	ldrb	r3, [r3, #20]
 8011d90:	2b01      	cmp	r3, #1
 8011d92:	d106      	bne.n	8011da2 <tcp_output+0x32>
 8011d94:	4b98      	ldr	r3, [pc, #608]	; (8011ff8 <tcp_output+0x288>)
 8011d96:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8011d9a:	499a      	ldr	r1, [pc, #616]	; (8012004 <tcp_output+0x294>)
 8011d9c:	4898      	ldr	r0, [pc, #608]	; (8012000 <tcp_output+0x290>)
 8011d9e:	f004 fbb1 	bl	8016504 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8011da2:	4b99      	ldr	r3, [pc, #612]	; (8012008 <tcp_output+0x298>)
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	687a      	ldr	r2, [r7, #4]
 8011da8:	429a      	cmp	r2, r3
 8011daa:	d101      	bne.n	8011db0 <tcp_output+0x40>
    return ERR_OK;
 8011dac:	2300      	movs	r3, #0
 8011dae:	e1ce      	b.n	801214e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011dbc:	4293      	cmp	r3, r2
 8011dbe:	bf28      	it	cs
 8011dc0:	4613      	movcs	r3, r2
 8011dc2:	b29b      	uxth	r3, r3
 8011dc4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011dca:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8011dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d10b      	bne.n	8011dea <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	8b5b      	ldrh	r3, [r3, #26]
 8011dd6:	f003 0302 	and.w	r3, r3, #2
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	f000 81aa 	beq.w	8012134 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8011de0:	6878      	ldr	r0, [r7, #4]
 8011de2:	f000 fdcb 	bl	801297c <tcp_send_empty_ack>
 8011de6:	4603      	mov	r3, r0
 8011de8:	e1b1      	b.n	801214e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8011dea:	6879      	ldr	r1, [r7, #4]
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	3304      	adds	r3, #4
 8011df0:	461a      	mov	r2, r3
 8011df2:	6878      	ldr	r0, [r7, #4]
 8011df4:	f7ff fc7c 	bl	80116f0 <tcp_route>
 8011df8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8011dfa:	697b      	ldr	r3, [r7, #20]
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d102      	bne.n	8011e06 <tcp_output+0x96>
    return ERR_RTE;
 8011e00:	f06f 0303 	mvn.w	r3, #3
 8011e04:	e1a3      	b.n	801214e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d003      	beq.n	8011e14 <tcp_output+0xa4>
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d111      	bne.n	8011e38 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8011e14:	697b      	ldr	r3, [r7, #20]
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d002      	beq.n	8011e20 <tcp_output+0xb0>
 8011e1a:	697b      	ldr	r3, [r7, #20]
 8011e1c:	3304      	adds	r3, #4
 8011e1e:	e000      	b.n	8011e22 <tcp_output+0xb2>
 8011e20:	2300      	movs	r3, #0
 8011e22:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8011e24:	693b      	ldr	r3, [r7, #16]
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d102      	bne.n	8011e30 <tcp_output+0xc0>
      return ERR_RTE;
 8011e2a:	f06f 0303 	mvn.w	r3, #3
 8011e2e:	e18e      	b.n	801214e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8011e30:	693b      	ldr	r3, [r7, #16]
 8011e32:	681a      	ldr	r2, [r3, #0]
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8011e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e3a:	68db      	ldr	r3, [r3, #12]
 8011e3c:	685b      	ldr	r3, [r3, #4]
 8011e3e:	4618      	mov	r0, r3
 8011e40:	f7f9 fffb 	bl	800be3a <lwip_htonl>
 8011e44:	4602      	mov	r2, r0
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011e4a:	1ad3      	subs	r3, r2, r3
 8011e4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011e4e:	8912      	ldrh	r2, [r2, #8]
 8011e50:	4413      	add	r3, r2
 8011e52:	69ba      	ldr	r2, [r7, #24]
 8011e54:	429a      	cmp	r2, r3
 8011e56:	d227      	bcs.n	8011ea8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011e5e:	461a      	mov	r2, r3
 8011e60:	69bb      	ldr	r3, [r7, #24]
 8011e62:	4293      	cmp	r3, r2
 8011e64:	d114      	bne.n	8011e90 <tcp_output+0x120>
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d110      	bne.n	8011e90 <tcp_output+0x120>
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d10b      	bne.n	8011e90 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	2200      	movs	r2, #0
 8011e7c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	2201      	movs	r2, #1
 8011e84:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	2200      	movs	r2, #0
 8011e8c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	8b5b      	ldrh	r3, [r3, #26]
 8011e94:	f003 0302 	and.w	r3, r3, #2
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	f000 814d 	beq.w	8012138 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8011e9e:	6878      	ldr	r0, [r7, #4]
 8011ea0:	f000 fd6c 	bl	801297c <tcp_send_empty_ack>
 8011ea4:	4603      	mov	r3, r0
 8011ea6:	e152      	b.n	801214e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	2200      	movs	r2, #0
 8011eac:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011eb4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8011eb6:	6a3b      	ldr	r3, [r7, #32]
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	f000 811c 	beq.w	80120f6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8011ebe:	e002      	b.n	8011ec6 <tcp_output+0x156>
 8011ec0:	6a3b      	ldr	r3, [r7, #32]
 8011ec2:	681b      	ldr	r3, [r3, #0]
 8011ec4:	623b      	str	r3, [r7, #32]
 8011ec6:	6a3b      	ldr	r3, [r7, #32]
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d1f8      	bne.n	8011ec0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8011ece:	e112      	b.n	80120f6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8011ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ed2:	68db      	ldr	r3, [r3, #12]
 8011ed4:	899b      	ldrh	r3, [r3, #12]
 8011ed6:	b29b      	uxth	r3, r3
 8011ed8:	4618      	mov	r0, r3
 8011eda:	f7f9 ff99 	bl	800be10 <lwip_htons>
 8011ede:	4603      	mov	r3, r0
 8011ee0:	b2db      	uxtb	r3, r3
 8011ee2:	f003 0304 	and.w	r3, r3, #4
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d006      	beq.n	8011ef8 <tcp_output+0x188>
 8011eea:	4b43      	ldr	r3, [pc, #268]	; (8011ff8 <tcp_output+0x288>)
 8011eec:	f240 5236 	movw	r2, #1334	; 0x536
 8011ef0:	4946      	ldr	r1, [pc, #280]	; (801200c <tcp_output+0x29c>)
 8011ef2:	4843      	ldr	r0, [pc, #268]	; (8012000 <tcp_output+0x290>)
 8011ef4:	f004 fb06 	bl	8016504 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d01f      	beq.n	8011f40 <tcp_output+0x1d0>
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	8b5b      	ldrh	r3, [r3, #26]
 8011f04:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	d119      	bne.n	8011f40 <tcp_output+0x1d0>
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	d00b      	beq.n	8011f2c <tcp_output+0x1bc>
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f18:	681b      	ldr	r3, [r3, #0]
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d110      	bne.n	8011f40 <tcp_output+0x1d0>
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f22:	891a      	ldrh	r2, [r3, #8]
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011f28:	429a      	cmp	r2, r3
 8011f2a:	d209      	bcs.n	8011f40 <tcp_output+0x1d0>
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d004      	beq.n	8011f40 <tcp_output+0x1d0>
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011f3c:	2b08      	cmp	r3, #8
 8011f3e:	d901      	bls.n	8011f44 <tcp_output+0x1d4>
 8011f40:	2301      	movs	r3, #1
 8011f42:	e000      	b.n	8011f46 <tcp_output+0x1d6>
 8011f44:	2300      	movs	r3, #0
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d106      	bne.n	8011f58 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	8b5b      	ldrh	r3, [r3, #26]
 8011f4e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	f000 80e4 	beq.w	8012120 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	7d1b      	ldrb	r3, [r3, #20]
 8011f5c:	2b02      	cmp	r3, #2
 8011f5e:	d00d      	beq.n	8011f7c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8011f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f62:	68db      	ldr	r3, [r3, #12]
 8011f64:	899b      	ldrh	r3, [r3, #12]
 8011f66:	b29c      	uxth	r4, r3
 8011f68:	2010      	movs	r0, #16
 8011f6a:	f7f9 ff51 	bl	800be10 <lwip_htons>
 8011f6e:	4603      	mov	r3, r0
 8011f70:	461a      	mov	r2, r3
 8011f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f74:	68db      	ldr	r3, [r3, #12]
 8011f76:	4322      	orrs	r2, r4
 8011f78:	b292      	uxth	r2, r2
 8011f7a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8011f7c:	697a      	ldr	r2, [r7, #20]
 8011f7e:	6879      	ldr	r1, [r7, #4]
 8011f80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011f82:	f000 f909 	bl	8012198 <tcp_output_segment>
 8011f86:	4603      	mov	r3, r0
 8011f88:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8011f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d009      	beq.n	8011fa6 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	8b5b      	ldrh	r3, [r3, #26]
 8011f96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011f9a:	b29a      	uxth	r2, r3
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	835a      	strh	r2, [r3, #26]
      return err;
 8011fa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011fa4:	e0d3      	b.n	801214e <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8011fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fa8:	681a      	ldr	r2, [r3, #0]
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	7d1b      	ldrb	r3, [r3, #20]
 8011fb2:	2b02      	cmp	r3, #2
 8011fb4:	d006      	beq.n	8011fc4 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	8b5b      	ldrh	r3, [r3, #26]
 8011fba:	f023 0303 	bic.w	r3, r3, #3
 8011fbe:	b29a      	uxth	r2, r3
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fc6:	68db      	ldr	r3, [r3, #12]
 8011fc8:	685b      	ldr	r3, [r3, #4]
 8011fca:	4618      	mov	r0, r3
 8011fcc:	f7f9 ff35 	bl	800be3a <lwip_htonl>
 8011fd0:	4604      	mov	r4, r0
 8011fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fd4:	891b      	ldrh	r3, [r3, #8]
 8011fd6:	461d      	mov	r5, r3
 8011fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fda:	68db      	ldr	r3, [r3, #12]
 8011fdc:	899b      	ldrh	r3, [r3, #12]
 8011fde:	b29b      	uxth	r3, r3
 8011fe0:	4618      	mov	r0, r3
 8011fe2:	f7f9 ff15 	bl	800be10 <lwip_htons>
 8011fe6:	4603      	mov	r3, r0
 8011fe8:	b2db      	uxtb	r3, r3
 8011fea:	f003 0303 	and.w	r3, r3, #3
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d00e      	beq.n	8012010 <tcp_output+0x2a0>
 8011ff2:	2301      	movs	r3, #1
 8011ff4:	e00d      	b.n	8012012 <tcp_output+0x2a2>
 8011ff6:	bf00      	nop
 8011ff8:	08018d54 	.word	0x08018d54
 8011ffc:	08019298 	.word	0x08019298
 8012000:	08018da8 	.word	0x08018da8
 8012004:	080192b0 	.word	0x080192b0
 8012008:	2000af70 	.word	0x2000af70
 801200c:	080192d8 	.word	0x080192d8
 8012010:	2300      	movs	r3, #0
 8012012:	442b      	add	r3, r5
 8012014:	4423      	add	r3, r4
 8012016:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801201c:	68bb      	ldr	r3, [r7, #8]
 801201e:	1ad3      	subs	r3, r2, r3
 8012020:	2b00      	cmp	r3, #0
 8012022:	da02      	bge.n	801202a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	68ba      	ldr	r2, [r7, #8]
 8012028:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801202a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801202c:	891b      	ldrh	r3, [r3, #8]
 801202e:	461c      	mov	r4, r3
 8012030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012032:	68db      	ldr	r3, [r3, #12]
 8012034:	899b      	ldrh	r3, [r3, #12]
 8012036:	b29b      	uxth	r3, r3
 8012038:	4618      	mov	r0, r3
 801203a:	f7f9 fee9 	bl	800be10 <lwip_htons>
 801203e:	4603      	mov	r3, r0
 8012040:	b2db      	uxtb	r3, r3
 8012042:	f003 0303 	and.w	r3, r3, #3
 8012046:	2b00      	cmp	r3, #0
 8012048:	d001      	beq.n	801204e <tcp_output+0x2de>
 801204a:	2301      	movs	r3, #1
 801204c:	e000      	b.n	8012050 <tcp_output+0x2e0>
 801204e:	2300      	movs	r3, #0
 8012050:	4423      	add	r3, r4
 8012052:	2b00      	cmp	r3, #0
 8012054:	d049      	beq.n	80120ea <tcp_output+0x37a>
      seg->next = NULL;
 8012056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012058:	2200      	movs	r2, #0
 801205a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012060:	2b00      	cmp	r3, #0
 8012062:	d105      	bne.n	8012070 <tcp_output+0x300>
        pcb->unacked = seg;
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012068:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801206a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801206c:	623b      	str	r3, [r7, #32]
 801206e:	e03f      	b.n	80120f0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8012070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012072:	68db      	ldr	r3, [r3, #12]
 8012074:	685b      	ldr	r3, [r3, #4]
 8012076:	4618      	mov	r0, r3
 8012078:	f7f9 fedf 	bl	800be3a <lwip_htonl>
 801207c:	4604      	mov	r4, r0
 801207e:	6a3b      	ldr	r3, [r7, #32]
 8012080:	68db      	ldr	r3, [r3, #12]
 8012082:	685b      	ldr	r3, [r3, #4]
 8012084:	4618      	mov	r0, r3
 8012086:	f7f9 fed8 	bl	800be3a <lwip_htonl>
 801208a:	4603      	mov	r3, r0
 801208c:	1ae3      	subs	r3, r4, r3
 801208e:	2b00      	cmp	r3, #0
 8012090:	da24      	bge.n	80120dc <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	3370      	adds	r3, #112	; 0x70
 8012096:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012098:	e002      	b.n	80120a0 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801209a:	69fb      	ldr	r3, [r7, #28]
 801209c:	681b      	ldr	r3, [r3, #0]
 801209e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80120a0:	69fb      	ldr	r3, [r7, #28]
 80120a2:	681b      	ldr	r3, [r3, #0]
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d011      	beq.n	80120cc <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80120a8:	69fb      	ldr	r3, [r7, #28]
 80120aa:	681b      	ldr	r3, [r3, #0]
 80120ac:	68db      	ldr	r3, [r3, #12]
 80120ae:	685b      	ldr	r3, [r3, #4]
 80120b0:	4618      	mov	r0, r3
 80120b2:	f7f9 fec2 	bl	800be3a <lwip_htonl>
 80120b6:	4604      	mov	r4, r0
 80120b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120ba:	68db      	ldr	r3, [r3, #12]
 80120bc:	685b      	ldr	r3, [r3, #4]
 80120be:	4618      	mov	r0, r3
 80120c0:	f7f9 febb 	bl	800be3a <lwip_htonl>
 80120c4:	4603      	mov	r3, r0
 80120c6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	dbe6      	blt.n	801209a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80120cc:	69fb      	ldr	r3, [r7, #28]
 80120ce:	681a      	ldr	r2, [r3, #0]
 80120d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120d2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80120d4:	69fb      	ldr	r3, [r7, #28]
 80120d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80120d8:	601a      	str	r2, [r3, #0]
 80120da:	e009      	b.n	80120f0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80120dc:	6a3b      	ldr	r3, [r7, #32]
 80120de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80120e0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80120e2:	6a3b      	ldr	r3, [r7, #32]
 80120e4:	681b      	ldr	r3, [r3, #0]
 80120e6:	623b      	str	r3, [r7, #32]
 80120e8:	e002      	b.n	80120f0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80120ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80120ec:	f7fc fc43 	bl	800e976 <tcp_seg_free>
    }
    seg = pcb->unsent;
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80120f4:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80120f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d012      	beq.n	8012122 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80120fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120fe:	68db      	ldr	r3, [r3, #12]
 8012100:	685b      	ldr	r3, [r3, #4]
 8012102:	4618      	mov	r0, r3
 8012104:	f7f9 fe99 	bl	800be3a <lwip_htonl>
 8012108:	4602      	mov	r2, r0
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801210e:	1ad3      	subs	r3, r2, r3
 8012110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012112:	8912      	ldrh	r2, [r2, #8]
 8012114:	4413      	add	r3, r2
  while (seg != NULL &&
 8012116:	69ba      	ldr	r2, [r7, #24]
 8012118:	429a      	cmp	r2, r3
 801211a:	f4bf aed9 	bcs.w	8011ed0 <tcp_output+0x160>
 801211e:	e000      	b.n	8012122 <tcp_output+0x3b2>
      break;
 8012120:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012126:	2b00      	cmp	r3, #0
 8012128:	d108      	bne.n	801213c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	2200      	movs	r2, #0
 801212e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8012132:	e004      	b.n	801213e <tcp_output+0x3ce>
    goto output_done;
 8012134:	bf00      	nop
 8012136:	e002      	b.n	801213e <tcp_output+0x3ce>
    goto output_done;
 8012138:	bf00      	nop
 801213a:	e000      	b.n	801213e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801213c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	8b5b      	ldrh	r3, [r3, #26]
 8012142:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012146:	b29a      	uxth	r2, r3
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801214c:	2300      	movs	r3, #0
}
 801214e:	4618      	mov	r0, r3
 8012150:	3728      	adds	r7, #40	; 0x28
 8012152:	46bd      	mov	sp, r7
 8012154:	bdb0      	pop	{r4, r5, r7, pc}
 8012156:	bf00      	nop

08012158 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8012158:	b580      	push	{r7, lr}
 801215a:	b082      	sub	sp, #8
 801215c:	af00      	add	r7, sp, #0
 801215e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	2b00      	cmp	r3, #0
 8012164:	d106      	bne.n	8012174 <tcp_output_segment_busy+0x1c>
 8012166:	4b09      	ldr	r3, [pc, #36]	; (801218c <tcp_output_segment_busy+0x34>)
 8012168:	f240 529a 	movw	r2, #1434	; 0x59a
 801216c:	4908      	ldr	r1, [pc, #32]	; (8012190 <tcp_output_segment_busy+0x38>)
 801216e:	4809      	ldr	r0, [pc, #36]	; (8012194 <tcp_output_segment_busy+0x3c>)
 8012170:	f004 f9c8 	bl	8016504 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	685b      	ldr	r3, [r3, #4]
 8012178:	7b9b      	ldrb	r3, [r3, #14]
 801217a:	2b01      	cmp	r3, #1
 801217c:	d001      	beq.n	8012182 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801217e:	2301      	movs	r3, #1
 8012180:	e000      	b.n	8012184 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8012182:	2300      	movs	r3, #0
}
 8012184:	4618      	mov	r0, r3
 8012186:	3708      	adds	r7, #8
 8012188:	46bd      	mov	sp, r7
 801218a:	bd80      	pop	{r7, pc}
 801218c:	08018d54 	.word	0x08018d54
 8012190:	080192f0 	.word	0x080192f0
 8012194:	08018da8 	.word	0x08018da8

08012198 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012198:	b5b0      	push	{r4, r5, r7, lr}
 801219a:	b08c      	sub	sp, #48	; 0x30
 801219c:	af04      	add	r7, sp, #16
 801219e:	60f8      	str	r0, [r7, #12]
 80121a0:	60b9      	str	r1, [r7, #8]
 80121a2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80121a4:	68fb      	ldr	r3, [r7, #12]
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d106      	bne.n	80121b8 <tcp_output_segment+0x20>
 80121aa:	4b63      	ldr	r3, [pc, #396]	; (8012338 <tcp_output_segment+0x1a0>)
 80121ac:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80121b0:	4962      	ldr	r1, [pc, #392]	; (801233c <tcp_output_segment+0x1a4>)
 80121b2:	4863      	ldr	r0, [pc, #396]	; (8012340 <tcp_output_segment+0x1a8>)
 80121b4:	f004 f9a6 	bl	8016504 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80121b8:	68bb      	ldr	r3, [r7, #8]
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d106      	bne.n	80121cc <tcp_output_segment+0x34>
 80121be:	4b5e      	ldr	r3, [pc, #376]	; (8012338 <tcp_output_segment+0x1a0>)
 80121c0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80121c4:	495f      	ldr	r1, [pc, #380]	; (8012344 <tcp_output_segment+0x1ac>)
 80121c6:	485e      	ldr	r0, [pc, #376]	; (8012340 <tcp_output_segment+0x1a8>)
 80121c8:	f004 f99c 	bl	8016504 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d106      	bne.n	80121e0 <tcp_output_segment+0x48>
 80121d2:	4b59      	ldr	r3, [pc, #356]	; (8012338 <tcp_output_segment+0x1a0>)
 80121d4:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80121d8:	495b      	ldr	r1, [pc, #364]	; (8012348 <tcp_output_segment+0x1b0>)
 80121da:	4859      	ldr	r0, [pc, #356]	; (8012340 <tcp_output_segment+0x1a8>)
 80121dc:	f004 f992 	bl	8016504 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80121e0:	68f8      	ldr	r0, [r7, #12]
 80121e2:	f7ff ffb9 	bl	8012158 <tcp_output_segment_busy>
 80121e6:	4603      	mov	r3, r0
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d001      	beq.n	80121f0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80121ec:	2300      	movs	r3, #0
 80121ee:	e09f      	b.n	8012330 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80121f0:	68bb      	ldr	r3, [r7, #8]
 80121f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80121f4:	68fb      	ldr	r3, [r7, #12]
 80121f6:	68dc      	ldr	r4, [r3, #12]
 80121f8:	4610      	mov	r0, r2
 80121fa:	f7f9 fe1e 	bl	800be3a <lwip_htonl>
 80121fe:	4603      	mov	r3, r0
 8012200:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8012202:	68bb      	ldr	r3, [r7, #8]
 8012204:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012206:	68fb      	ldr	r3, [r7, #12]
 8012208:	68dc      	ldr	r4, [r3, #12]
 801220a:	4610      	mov	r0, r2
 801220c:	f7f9 fe00 	bl	800be10 <lwip_htons>
 8012210:	4603      	mov	r3, r0
 8012212:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012214:	68bb      	ldr	r3, [r7, #8]
 8012216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012218:	68ba      	ldr	r2, [r7, #8]
 801221a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801221c:	441a      	add	r2, r3
 801221e:	68bb      	ldr	r3, [r7, #8]
 8012220:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8012222:	68fb      	ldr	r3, [r7, #12]
 8012224:	68db      	ldr	r3, [r3, #12]
 8012226:	3314      	adds	r3, #20
 8012228:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801222a:	68fb      	ldr	r3, [r7, #12]
 801222c:	7a9b      	ldrb	r3, [r3, #10]
 801222e:	f003 0301 	and.w	r3, r3, #1
 8012232:	2b00      	cmp	r3, #0
 8012234:	d015      	beq.n	8012262 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8012236:	68bb      	ldr	r3, [r7, #8]
 8012238:	3304      	adds	r3, #4
 801223a:	461a      	mov	r2, r3
 801223c:	6879      	ldr	r1, [r7, #4]
 801223e:	f44f 7006 	mov.w	r0, #536	; 0x218
 8012242:	f7fc fe8f 	bl	800ef64 <tcp_eff_send_mss_netif>
 8012246:	4603      	mov	r3, r0
 8012248:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801224a:	8b7b      	ldrh	r3, [r7, #26]
 801224c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8012250:	4618      	mov	r0, r3
 8012252:	f7f9 fdf2 	bl	800be3a <lwip_htonl>
 8012256:	4602      	mov	r2, r0
 8012258:	69fb      	ldr	r3, [r7, #28]
 801225a:	601a      	str	r2, [r3, #0]
    opts += 1;
 801225c:	69fb      	ldr	r3, [r7, #28]
 801225e:	3304      	adds	r3, #4
 8012260:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8012262:	68bb      	ldr	r3, [r7, #8]
 8012264:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012268:	2b00      	cmp	r3, #0
 801226a:	da02      	bge.n	8012272 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801226c:	68bb      	ldr	r3, [r7, #8]
 801226e:	2200      	movs	r2, #0
 8012270:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8012272:	68bb      	ldr	r3, [r7, #8]
 8012274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012276:	2b00      	cmp	r3, #0
 8012278:	d10c      	bne.n	8012294 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801227a:	4b34      	ldr	r3, [pc, #208]	; (801234c <tcp_output_segment+0x1b4>)
 801227c:	681a      	ldr	r2, [r3, #0]
 801227e:	68bb      	ldr	r3, [r7, #8]
 8012280:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8012282:	68fb      	ldr	r3, [r7, #12]
 8012284:	68db      	ldr	r3, [r3, #12]
 8012286:	685b      	ldr	r3, [r3, #4]
 8012288:	4618      	mov	r0, r3
 801228a:	f7f9 fdd6 	bl	800be3a <lwip_htonl>
 801228e:	4602      	mov	r2, r0
 8012290:	68bb      	ldr	r3, [r7, #8]
 8012292:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012294:	68fb      	ldr	r3, [r7, #12]
 8012296:	68da      	ldr	r2, [r3, #12]
 8012298:	68fb      	ldr	r3, [r7, #12]
 801229a:	685b      	ldr	r3, [r3, #4]
 801229c:	685b      	ldr	r3, [r3, #4]
 801229e:	1ad3      	subs	r3, r2, r3
 80122a0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	685b      	ldr	r3, [r3, #4]
 80122a6:	8959      	ldrh	r1, [r3, #10]
 80122a8:	68fb      	ldr	r3, [r7, #12]
 80122aa:	685b      	ldr	r3, [r3, #4]
 80122ac:	8b3a      	ldrh	r2, [r7, #24]
 80122ae:	1a8a      	subs	r2, r1, r2
 80122b0:	b292      	uxth	r2, r2
 80122b2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80122b4:	68fb      	ldr	r3, [r7, #12]
 80122b6:	685b      	ldr	r3, [r3, #4]
 80122b8:	8919      	ldrh	r1, [r3, #8]
 80122ba:	68fb      	ldr	r3, [r7, #12]
 80122bc:	685b      	ldr	r3, [r3, #4]
 80122be:	8b3a      	ldrh	r2, [r7, #24]
 80122c0:	1a8a      	subs	r2, r1, r2
 80122c2:	b292      	uxth	r2, r2
 80122c4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80122c6:	68fb      	ldr	r3, [r7, #12]
 80122c8:	685b      	ldr	r3, [r3, #4]
 80122ca:	68fa      	ldr	r2, [r7, #12]
 80122cc:	68d2      	ldr	r2, [r2, #12]
 80122ce:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80122d0:	68fb      	ldr	r3, [r7, #12]
 80122d2:	68db      	ldr	r3, [r3, #12]
 80122d4:	2200      	movs	r2, #0
 80122d6:	741a      	strb	r2, [r3, #16]
 80122d8:	2200      	movs	r2, #0
 80122da:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	68db      	ldr	r3, [r3, #12]
 80122e0:	f103 0214 	add.w	r2, r3, #20
 80122e4:	68fb      	ldr	r3, [r7, #12]
 80122e6:	7a9b      	ldrb	r3, [r3, #10]
 80122e8:	009b      	lsls	r3, r3, #2
 80122ea:	f003 0304 	and.w	r3, r3, #4
 80122ee:	4413      	add	r3, r2
 80122f0:	69fa      	ldr	r2, [r7, #28]
 80122f2:	429a      	cmp	r2, r3
 80122f4:	d006      	beq.n	8012304 <tcp_output_segment+0x16c>
 80122f6:	4b10      	ldr	r3, [pc, #64]	; (8012338 <tcp_output_segment+0x1a0>)
 80122f8:	f240 621c 	movw	r2, #1564	; 0x61c
 80122fc:	4914      	ldr	r1, [pc, #80]	; (8012350 <tcp_output_segment+0x1b8>)
 80122fe:	4810      	ldr	r0, [pc, #64]	; (8012340 <tcp_output_segment+0x1a8>)
 8012300:	f004 f900 	bl	8016504 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8012304:	68fb      	ldr	r3, [r7, #12]
 8012306:	6858      	ldr	r0, [r3, #4]
 8012308:	68b9      	ldr	r1, [r7, #8]
 801230a:	68bb      	ldr	r3, [r7, #8]
 801230c:	1d1c      	adds	r4, r3, #4
 801230e:	68bb      	ldr	r3, [r7, #8]
 8012310:	7add      	ldrb	r5, [r3, #11]
 8012312:	68bb      	ldr	r3, [r7, #8]
 8012314:	7a9b      	ldrb	r3, [r3, #10]
 8012316:	687a      	ldr	r2, [r7, #4]
 8012318:	9202      	str	r2, [sp, #8]
 801231a:	2206      	movs	r2, #6
 801231c:	9201      	str	r2, [sp, #4]
 801231e:	9300      	str	r3, [sp, #0]
 8012320:	462b      	mov	r3, r5
 8012322:	4622      	mov	r2, r4
 8012324:	f002 fa66 	bl	80147f4 <ip4_output_if>
 8012328:	4603      	mov	r3, r0
 801232a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801232c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012330:	4618      	mov	r0, r3
 8012332:	3720      	adds	r7, #32
 8012334:	46bd      	mov	sp, r7
 8012336:	bdb0      	pop	{r4, r5, r7, pc}
 8012338:	08018d54 	.word	0x08018d54
 801233c:	08019318 	.word	0x08019318
 8012340:	08018da8 	.word	0x08018da8
 8012344:	08019338 	.word	0x08019338
 8012348:	08019358 	.word	0x08019358
 801234c:	2000af60 	.word	0x2000af60
 8012350:	0801937c 	.word	0x0801937c

08012354 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8012354:	b5b0      	push	{r4, r5, r7, lr}
 8012356:	b084      	sub	sp, #16
 8012358:	af00      	add	r7, sp, #0
 801235a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	2b00      	cmp	r3, #0
 8012360:	d106      	bne.n	8012370 <tcp_rexmit_rto_prepare+0x1c>
 8012362:	4b31      	ldr	r3, [pc, #196]	; (8012428 <tcp_rexmit_rto_prepare+0xd4>)
 8012364:	f240 6263 	movw	r2, #1635	; 0x663
 8012368:	4930      	ldr	r1, [pc, #192]	; (801242c <tcp_rexmit_rto_prepare+0xd8>)
 801236a:	4831      	ldr	r0, [pc, #196]	; (8012430 <tcp_rexmit_rto_prepare+0xdc>)
 801236c:	f004 f8ca 	bl	8016504 <iprintf>

  if (pcb->unacked == NULL) {
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012374:	2b00      	cmp	r3, #0
 8012376:	d102      	bne.n	801237e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8012378:	f06f 0305 	mvn.w	r3, #5
 801237c:	e050      	b.n	8012420 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012382:	60fb      	str	r3, [r7, #12]
 8012384:	e00b      	b.n	801239e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8012386:	68f8      	ldr	r0, [r7, #12]
 8012388:	f7ff fee6 	bl	8012158 <tcp_output_segment_busy>
 801238c:	4603      	mov	r3, r0
 801238e:	2b00      	cmp	r3, #0
 8012390:	d002      	beq.n	8012398 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8012392:	f06f 0305 	mvn.w	r3, #5
 8012396:	e043      	b.n	8012420 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012398:	68fb      	ldr	r3, [r7, #12]
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	60fb      	str	r3, [r7, #12]
 801239e:	68fb      	ldr	r3, [r7, #12]
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d1ef      	bne.n	8012386 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80123a6:	68f8      	ldr	r0, [r7, #12]
 80123a8:	f7ff fed6 	bl	8012158 <tcp_output_segment_busy>
 80123ac:	4603      	mov	r3, r0
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d002      	beq.n	80123b8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80123b2:	f06f 0305 	mvn.w	r3, #5
 80123b6:	e033      	b.n	8012420 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80123bc:	68fb      	ldr	r3, [r7, #12]
 80123be:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	2200      	movs	r2, #0
 80123cc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	8b5b      	ldrh	r3, [r3, #26]
 80123d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80123d6:	b29a      	uxth	r2, r3
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80123dc:	68fb      	ldr	r3, [r7, #12]
 80123de:	68db      	ldr	r3, [r3, #12]
 80123e0:	685b      	ldr	r3, [r3, #4]
 80123e2:	4618      	mov	r0, r3
 80123e4:	f7f9 fd29 	bl	800be3a <lwip_htonl>
 80123e8:	4604      	mov	r4, r0
 80123ea:	68fb      	ldr	r3, [r7, #12]
 80123ec:	891b      	ldrh	r3, [r3, #8]
 80123ee:	461d      	mov	r5, r3
 80123f0:	68fb      	ldr	r3, [r7, #12]
 80123f2:	68db      	ldr	r3, [r3, #12]
 80123f4:	899b      	ldrh	r3, [r3, #12]
 80123f6:	b29b      	uxth	r3, r3
 80123f8:	4618      	mov	r0, r3
 80123fa:	f7f9 fd09 	bl	800be10 <lwip_htons>
 80123fe:	4603      	mov	r3, r0
 8012400:	b2db      	uxtb	r3, r3
 8012402:	f003 0303 	and.w	r3, r3, #3
 8012406:	2b00      	cmp	r3, #0
 8012408:	d001      	beq.n	801240e <tcp_rexmit_rto_prepare+0xba>
 801240a:	2301      	movs	r3, #1
 801240c:	e000      	b.n	8012410 <tcp_rexmit_rto_prepare+0xbc>
 801240e:	2300      	movs	r3, #0
 8012410:	442b      	add	r3, r5
 8012412:	18e2      	adds	r2, r4, r3
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	2200      	movs	r2, #0
 801241c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801241e:	2300      	movs	r3, #0
}
 8012420:	4618      	mov	r0, r3
 8012422:	3710      	adds	r7, #16
 8012424:	46bd      	mov	sp, r7
 8012426:	bdb0      	pop	{r4, r5, r7, pc}
 8012428:	08018d54 	.word	0x08018d54
 801242c:	08019390 	.word	0x08019390
 8012430:	08018da8 	.word	0x08018da8

08012434 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8012434:	b580      	push	{r7, lr}
 8012436:	b082      	sub	sp, #8
 8012438:	af00      	add	r7, sp, #0
 801243a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	2b00      	cmp	r3, #0
 8012440:	d106      	bne.n	8012450 <tcp_rexmit_rto_commit+0x1c>
 8012442:	4b0d      	ldr	r3, [pc, #52]	; (8012478 <tcp_rexmit_rto_commit+0x44>)
 8012444:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8012448:	490c      	ldr	r1, [pc, #48]	; (801247c <tcp_rexmit_rto_commit+0x48>)
 801244a:	480d      	ldr	r0, [pc, #52]	; (8012480 <tcp_rexmit_rto_commit+0x4c>)
 801244c:	f004 f85a 	bl	8016504 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012456:	2bff      	cmp	r3, #255	; 0xff
 8012458:	d007      	beq.n	801246a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012460:	3301      	adds	r3, #1
 8012462:	b2da      	uxtb	r2, r3
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801246a:	6878      	ldr	r0, [r7, #4]
 801246c:	f7ff fc80 	bl	8011d70 <tcp_output>
}
 8012470:	bf00      	nop
 8012472:	3708      	adds	r7, #8
 8012474:	46bd      	mov	sp, r7
 8012476:	bd80      	pop	{r7, pc}
 8012478:	08018d54 	.word	0x08018d54
 801247c:	080193b4 	.word	0x080193b4
 8012480:	08018da8 	.word	0x08018da8

08012484 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8012484:	b580      	push	{r7, lr}
 8012486:	b082      	sub	sp, #8
 8012488:	af00      	add	r7, sp, #0
 801248a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	2b00      	cmp	r3, #0
 8012490:	d106      	bne.n	80124a0 <tcp_rexmit_rto+0x1c>
 8012492:	4b0a      	ldr	r3, [pc, #40]	; (80124bc <tcp_rexmit_rto+0x38>)
 8012494:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8012498:	4909      	ldr	r1, [pc, #36]	; (80124c0 <tcp_rexmit_rto+0x3c>)
 801249a:	480a      	ldr	r0, [pc, #40]	; (80124c4 <tcp_rexmit_rto+0x40>)
 801249c:	f004 f832 	bl	8016504 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80124a0:	6878      	ldr	r0, [r7, #4]
 80124a2:	f7ff ff57 	bl	8012354 <tcp_rexmit_rto_prepare>
 80124a6:	4603      	mov	r3, r0
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d102      	bne.n	80124b2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80124ac:	6878      	ldr	r0, [r7, #4]
 80124ae:	f7ff ffc1 	bl	8012434 <tcp_rexmit_rto_commit>
  }
}
 80124b2:	bf00      	nop
 80124b4:	3708      	adds	r7, #8
 80124b6:	46bd      	mov	sp, r7
 80124b8:	bd80      	pop	{r7, pc}
 80124ba:	bf00      	nop
 80124bc:	08018d54 	.word	0x08018d54
 80124c0:	080193d8 	.word	0x080193d8
 80124c4:	08018da8 	.word	0x08018da8

080124c8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80124c8:	b590      	push	{r4, r7, lr}
 80124ca:	b085      	sub	sp, #20
 80124cc:	af00      	add	r7, sp, #0
 80124ce:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d106      	bne.n	80124e4 <tcp_rexmit+0x1c>
 80124d6:	4b2f      	ldr	r3, [pc, #188]	; (8012594 <tcp_rexmit+0xcc>)
 80124d8:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80124dc:	492e      	ldr	r1, [pc, #184]	; (8012598 <tcp_rexmit+0xd0>)
 80124de:	482f      	ldr	r0, [pc, #188]	; (801259c <tcp_rexmit+0xd4>)
 80124e0:	f004 f810 	bl	8016504 <iprintf>

  if (pcb->unacked == NULL) {
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d102      	bne.n	80124f2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 80124ec:	f06f 0305 	mvn.w	r3, #5
 80124f0:	e04c      	b.n	801258c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80124f6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80124f8:	68b8      	ldr	r0, [r7, #8]
 80124fa:	f7ff fe2d 	bl	8012158 <tcp_output_segment_busy>
 80124fe:	4603      	mov	r3, r0
 8012500:	2b00      	cmp	r3, #0
 8012502:	d002      	beq.n	801250a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8012504:	f06f 0305 	mvn.w	r3, #5
 8012508:	e040      	b.n	801258c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801250a:	68bb      	ldr	r3, [r7, #8]
 801250c:	681a      	ldr	r2, [r3, #0]
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	336c      	adds	r3, #108	; 0x6c
 8012516:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012518:	e002      	b.n	8012520 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801251a:	68fb      	ldr	r3, [r7, #12]
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012520:	68fb      	ldr	r3, [r7, #12]
 8012522:	681b      	ldr	r3, [r3, #0]
 8012524:	2b00      	cmp	r3, #0
 8012526:	d011      	beq.n	801254c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012528:	68fb      	ldr	r3, [r7, #12]
 801252a:	681b      	ldr	r3, [r3, #0]
 801252c:	68db      	ldr	r3, [r3, #12]
 801252e:	685b      	ldr	r3, [r3, #4]
 8012530:	4618      	mov	r0, r3
 8012532:	f7f9 fc82 	bl	800be3a <lwip_htonl>
 8012536:	4604      	mov	r4, r0
 8012538:	68bb      	ldr	r3, [r7, #8]
 801253a:	68db      	ldr	r3, [r3, #12]
 801253c:	685b      	ldr	r3, [r3, #4]
 801253e:	4618      	mov	r0, r3
 8012540:	f7f9 fc7b 	bl	800be3a <lwip_htonl>
 8012544:	4603      	mov	r3, r0
 8012546:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8012548:	2b00      	cmp	r3, #0
 801254a:	dbe6      	blt.n	801251a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801254c:	68fb      	ldr	r3, [r7, #12]
 801254e:	681a      	ldr	r2, [r3, #0]
 8012550:	68bb      	ldr	r3, [r7, #8]
 8012552:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8012554:	68fb      	ldr	r3, [r7, #12]
 8012556:	68ba      	ldr	r2, [r7, #8]
 8012558:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801255a:	68bb      	ldr	r3, [r7, #8]
 801255c:	681b      	ldr	r3, [r3, #0]
 801255e:	2b00      	cmp	r3, #0
 8012560:	d103      	bne.n	801256a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	2200      	movs	r2, #0
 8012566:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012570:	2bff      	cmp	r3, #255	; 0xff
 8012572:	d007      	beq.n	8012584 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801257a:	3301      	adds	r3, #1
 801257c:	b2da      	uxtb	r2, r3
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	2200      	movs	r2, #0
 8012588:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801258a:	2300      	movs	r3, #0
}
 801258c:	4618      	mov	r0, r3
 801258e:	3714      	adds	r7, #20
 8012590:	46bd      	mov	sp, r7
 8012592:	bd90      	pop	{r4, r7, pc}
 8012594:	08018d54 	.word	0x08018d54
 8012598:	080193f4 	.word	0x080193f4
 801259c:	08018da8 	.word	0x08018da8

080125a0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80125a0:	b580      	push	{r7, lr}
 80125a2:	b082      	sub	sp, #8
 80125a4:	af00      	add	r7, sp, #0
 80125a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d106      	bne.n	80125bc <tcp_rexmit_fast+0x1c>
 80125ae:	4b2a      	ldr	r3, [pc, #168]	; (8012658 <tcp_rexmit_fast+0xb8>)
 80125b0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80125b4:	4929      	ldr	r1, [pc, #164]	; (801265c <tcp_rexmit_fast+0xbc>)
 80125b6:	482a      	ldr	r0, [pc, #168]	; (8012660 <tcp_rexmit_fast+0xc0>)
 80125b8:	f003 ffa4 	bl	8016504 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d044      	beq.n	801264e <tcp_rexmit_fast+0xae>
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	8b5b      	ldrh	r3, [r3, #26]
 80125c8:	f003 0304 	and.w	r3, r3, #4
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d13e      	bne.n	801264e <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80125d0:	6878      	ldr	r0, [r7, #4]
 80125d2:	f7ff ff79 	bl	80124c8 <tcp_rexmit>
 80125d6:	4603      	mov	r3, r0
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d138      	bne.n	801264e <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80125e8:	4293      	cmp	r3, r2
 80125ea:	bf28      	it	cs
 80125ec:	4613      	movcs	r3, r2
 80125ee:	b29b      	uxth	r3, r3
 80125f0:	0fda      	lsrs	r2, r3, #31
 80125f2:	4413      	add	r3, r2
 80125f4:	105b      	asrs	r3, r3, #1
 80125f6:	b29a      	uxth	r2, r3
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8012604:	461a      	mov	r2, r3
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801260a:	005b      	lsls	r3, r3, #1
 801260c:	429a      	cmp	r2, r3
 801260e:	d206      	bcs.n	801261e <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012614:	005b      	lsls	r3, r3, #1
 8012616:	b29a      	uxth	r2, r3
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012628:	4619      	mov	r1, r3
 801262a:	0049      	lsls	r1, r1, #1
 801262c:	440b      	add	r3, r1
 801262e:	b29b      	uxth	r3, r3
 8012630:	4413      	add	r3, r2
 8012632:	b29a      	uxth	r2, r3
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	8b5b      	ldrh	r3, [r3, #26]
 801263e:	f043 0304 	orr.w	r3, r3, #4
 8012642:	b29a      	uxth	r2, r3
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	2200      	movs	r2, #0
 801264c:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801264e:	bf00      	nop
 8012650:	3708      	adds	r7, #8
 8012652:	46bd      	mov	sp, r7
 8012654:	bd80      	pop	{r7, pc}
 8012656:	bf00      	nop
 8012658:	08018d54 	.word	0x08018d54
 801265c:	0801940c 	.word	0x0801940c
 8012660:	08018da8 	.word	0x08018da8

08012664 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8012664:	b580      	push	{r7, lr}
 8012666:	b086      	sub	sp, #24
 8012668:	af00      	add	r7, sp, #0
 801266a:	60f8      	str	r0, [r7, #12]
 801266c:	607b      	str	r3, [r7, #4]
 801266e:	460b      	mov	r3, r1
 8012670:	817b      	strh	r3, [r7, #10]
 8012672:	4613      	mov	r3, r2
 8012674:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8012676:	897a      	ldrh	r2, [r7, #10]
 8012678:	893b      	ldrh	r3, [r7, #8]
 801267a:	4413      	add	r3, r2
 801267c:	b29b      	uxth	r3, r3
 801267e:	3314      	adds	r3, #20
 8012680:	b29b      	uxth	r3, r3
 8012682:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012686:	4619      	mov	r1, r3
 8012688:	2022      	movs	r0, #34	; 0x22
 801268a:	f7fa fc11 	bl	800ceb0 <pbuf_alloc>
 801268e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8012690:	697b      	ldr	r3, [r7, #20]
 8012692:	2b00      	cmp	r3, #0
 8012694:	d04d      	beq.n	8012732 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8012696:	897b      	ldrh	r3, [r7, #10]
 8012698:	3313      	adds	r3, #19
 801269a:	697a      	ldr	r2, [r7, #20]
 801269c:	8952      	ldrh	r2, [r2, #10]
 801269e:	4293      	cmp	r3, r2
 80126a0:	db06      	blt.n	80126b0 <tcp_output_alloc_header_common+0x4c>
 80126a2:	4b26      	ldr	r3, [pc, #152]	; (801273c <tcp_output_alloc_header_common+0xd8>)
 80126a4:	f240 7223 	movw	r2, #1827	; 0x723
 80126a8:	4925      	ldr	r1, [pc, #148]	; (8012740 <tcp_output_alloc_header_common+0xdc>)
 80126aa:	4826      	ldr	r0, [pc, #152]	; (8012744 <tcp_output_alloc_header_common+0xe0>)
 80126ac:	f003 ff2a 	bl	8016504 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80126b0:	697b      	ldr	r3, [r7, #20]
 80126b2:	685b      	ldr	r3, [r3, #4]
 80126b4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80126b6:	8c3b      	ldrh	r3, [r7, #32]
 80126b8:	4618      	mov	r0, r3
 80126ba:	f7f9 fba9 	bl	800be10 <lwip_htons>
 80126be:	4603      	mov	r3, r0
 80126c0:	461a      	mov	r2, r3
 80126c2:	693b      	ldr	r3, [r7, #16]
 80126c4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80126c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80126c8:	4618      	mov	r0, r3
 80126ca:	f7f9 fba1 	bl	800be10 <lwip_htons>
 80126ce:	4603      	mov	r3, r0
 80126d0:	461a      	mov	r2, r3
 80126d2:	693b      	ldr	r3, [r7, #16]
 80126d4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80126d6:	693b      	ldr	r3, [r7, #16]
 80126d8:	687a      	ldr	r2, [r7, #4]
 80126da:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80126dc:	68f8      	ldr	r0, [r7, #12]
 80126de:	f7f9 fbac 	bl	800be3a <lwip_htonl>
 80126e2:	4602      	mov	r2, r0
 80126e4:	693b      	ldr	r3, [r7, #16]
 80126e6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80126e8:	897b      	ldrh	r3, [r7, #10]
 80126ea:	089b      	lsrs	r3, r3, #2
 80126ec:	b29b      	uxth	r3, r3
 80126ee:	3305      	adds	r3, #5
 80126f0:	b29b      	uxth	r3, r3
 80126f2:	031b      	lsls	r3, r3, #12
 80126f4:	b29a      	uxth	r2, r3
 80126f6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80126fa:	b29b      	uxth	r3, r3
 80126fc:	4313      	orrs	r3, r2
 80126fe:	b29b      	uxth	r3, r3
 8012700:	4618      	mov	r0, r3
 8012702:	f7f9 fb85 	bl	800be10 <lwip_htons>
 8012706:	4603      	mov	r3, r0
 8012708:	461a      	mov	r2, r3
 801270a:	693b      	ldr	r3, [r7, #16]
 801270c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801270e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012710:	4618      	mov	r0, r3
 8012712:	f7f9 fb7d 	bl	800be10 <lwip_htons>
 8012716:	4603      	mov	r3, r0
 8012718:	461a      	mov	r2, r3
 801271a:	693b      	ldr	r3, [r7, #16]
 801271c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801271e:	693b      	ldr	r3, [r7, #16]
 8012720:	2200      	movs	r2, #0
 8012722:	741a      	strb	r2, [r3, #16]
 8012724:	2200      	movs	r2, #0
 8012726:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8012728:	693b      	ldr	r3, [r7, #16]
 801272a:	2200      	movs	r2, #0
 801272c:	749a      	strb	r2, [r3, #18]
 801272e:	2200      	movs	r2, #0
 8012730:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8012732:	697b      	ldr	r3, [r7, #20]
}
 8012734:	4618      	mov	r0, r3
 8012736:	3718      	adds	r7, #24
 8012738:	46bd      	mov	sp, r7
 801273a:	bd80      	pop	{r7, pc}
 801273c:	08018d54 	.word	0x08018d54
 8012740:	0801942c 	.word	0x0801942c
 8012744:	08018da8 	.word	0x08018da8

08012748 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8012748:	b5b0      	push	{r4, r5, r7, lr}
 801274a:	b08a      	sub	sp, #40	; 0x28
 801274c:	af04      	add	r7, sp, #16
 801274e:	60f8      	str	r0, [r7, #12]
 8012750:	607b      	str	r3, [r7, #4]
 8012752:	460b      	mov	r3, r1
 8012754:	817b      	strh	r3, [r7, #10]
 8012756:	4613      	mov	r3, r2
 8012758:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801275a:	68fb      	ldr	r3, [r7, #12]
 801275c:	2b00      	cmp	r3, #0
 801275e:	d106      	bne.n	801276e <tcp_output_alloc_header+0x26>
 8012760:	4b15      	ldr	r3, [pc, #84]	; (80127b8 <tcp_output_alloc_header+0x70>)
 8012762:	f240 7242 	movw	r2, #1858	; 0x742
 8012766:	4915      	ldr	r1, [pc, #84]	; (80127bc <tcp_output_alloc_header+0x74>)
 8012768:	4815      	ldr	r0, [pc, #84]	; (80127c0 <tcp_output_alloc_header+0x78>)
 801276a:	f003 fecb 	bl	8016504 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801276e:	68fb      	ldr	r3, [r7, #12]
 8012770:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8012772:	68fb      	ldr	r3, [r7, #12]
 8012774:	8adb      	ldrh	r3, [r3, #22]
 8012776:	68fa      	ldr	r2, [r7, #12]
 8012778:	8b12      	ldrh	r2, [r2, #24]
 801277a:	68f9      	ldr	r1, [r7, #12]
 801277c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801277e:	893d      	ldrh	r5, [r7, #8]
 8012780:	897c      	ldrh	r4, [r7, #10]
 8012782:	9103      	str	r1, [sp, #12]
 8012784:	2110      	movs	r1, #16
 8012786:	9102      	str	r1, [sp, #8]
 8012788:	9201      	str	r2, [sp, #4]
 801278a:	9300      	str	r3, [sp, #0]
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	462a      	mov	r2, r5
 8012790:	4621      	mov	r1, r4
 8012792:	f7ff ff67 	bl	8012664 <tcp_output_alloc_header_common>
 8012796:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8012798:	697b      	ldr	r3, [r7, #20]
 801279a:	2b00      	cmp	r3, #0
 801279c:	d006      	beq.n	80127ac <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801279e:	68fb      	ldr	r3, [r7, #12]
 80127a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127a2:	68fa      	ldr	r2, [r7, #12]
 80127a4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80127a6:	441a      	add	r2, r3
 80127a8:	68fb      	ldr	r3, [r7, #12]
 80127aa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80127ac:	697b      	ldr	r3, [r7, #20]
}
 80127ae:	4618      	mov	r0, r3
 80127b0:	3718      	adds	r7, #24
 80127b2:	46bd      	mov	sp, r7
 80127b4:	bdb0      	pop	{r4, r5, r7, pc}
 80127b6:	bf00      	nop
 80127b8:	08018d54 	.word	0x08018d54
 80127bc:	0801945c 	.word	0x0801945c
 80127c0:	08018da8 	.word	0x08018da8

080127c4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80127c4:	b580      	push	{r7, lr}
 80127c6:	b088      	sub	sp, #32
 80127c8:	af00      	add	r7, sp, #0
 80127ca:	60f8      	str	r0, [r7, #12]
 80127cc:	60b9      	str	r1, [r7, #8]
 80127ce:	4611      	mov	r1, r2
 80127d0:	461a      	mov	r2, r3
 80127d2:	460b      	mov	r3, r1
 80127d4:	71fb      	strb	r3, [r7, #7]
 80127d6:	4613      	mov	r3, r2
 80127d8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80127da:	2300      	movs	r3, #0
 80127dc:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80127de:	68bb      	ldr	r3, [r7, #8]
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d106      	bne.n	80127f2 <tcp_output_fill_options+0x2e>
 80127e4:	4b13      	ldr	r3, [pc, #76]	; (8012834 <tcp_output_fill_options+0x70>)
 80127e6:	f240 7256 	movw	r2, #1878	; 0x756
 80127ea:	4913      	ldr	r1, [pc, #76]	; (8012838 <tcp_output_fill_options+0x74>)
 80127ec:	4813      	ldr	r0, [pc, #76]	; (801283c <tcp_output_fill_options+0x78>)
 80127ee:	f003 fe89 	bl	8016504 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80127f2:	68bb      	ldr	r3, [r7, #8]
 80127f4:	685b      	ldr	r3, [r3, #4]
 80127f6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80127f8:	69bb      	ldr	r3, [r7, #24]
 80127fa:	3314      	adds	r3, #20
 80127fc:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80127fe:	69bb      	ldr	r3, [r7, #24]
 8012800:	f103 0214 	add.w	r2, r3, #20
 8012804:	8bfb      	ldrh	r3, [r7, #30]
 8012806:	009b      	lsls	r3, r3, #2
 8012808:	4619      	mov	r1, r3
 801280a:	79fb      	ldrb	r3, [r7, #7]
 801280c:	009b      	lsls	r3, r3, #2
 801280e:	f003 0304 	and.w	r3, r3, #4
 8012812:	440b      	add	r3, r1
 8012814:	4413      	add	r3, r2
 8012816:	697a      	ldr	r2, [r7, #20]
 8012818:	429a      	cmp	r2, r3
 801281a:	d006      	beq.n	801282a <tcp_output_fill_options+0x66>
 801281c:	4b05      	ldr	r3, [pc, #20]	; (8012834 <tcp_output_fill_options+0x70>)
 801281e:	f240 7275 	movw	r2, #1909	; 0x775
 8012822:	4907      	ldr	r1, [pc, #28]	; (8012840 <tcp_output_fill_options+0x7c>)
 8012824:	4805      	ldr	r0, [pc, #20]	; (801283c <tcp_output_fill_options+0x78>)
 8012826:	f003 fe6d 	bl	8016504 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801282a:	bf00      	nop
 801282c:	3720      	adds	r7, #32
 801282e:	46bd      	mov	sp, r7
 8012830:	bd80      	pop	{r7, pc}
 8012832:	bf00      	nop
 8012834:	08018d54 	.word	0x08018d54
 8012838:	08019484 	.word	0x08019484
 801283c:	08018da8 	.word	0x08018da8
 8012840:	0801937c 	.word	0x0801937c

08012844 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8012844:	b580      	push	{r7, lr}
 8012846:	b08a      	sub	sp, #40	; 0x28
 8012848:	af04      	add	r7, sp, #16
 801284a:	60f8      	str	r0, [r7, #12]
 801284c:	60b9      	str	r1, [r7, #8]
 801284e:	607a      	str	r2, [r7, #4]
 8012850:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8012852:	68bb      	ldr	r3, [r7, #8]
 8012854:	2b00      	cmp	r3, #0
 8012856:	d106      	bne.n	8012866 <tcp_output_control_segment+0x22>
 8012858:	4b1c      	ldr	r3, [pc, #112]	; (80128cc <tcp_output_control_segment+0x88>)
 801285a:	f240 7287 	movw	r2, #1927	; 0x787
 801285e:	491c      	ldr	r1, [pc, #112]	; (80128d0 <tcp_output_control_segment+0x8c>)
 8012860:	481c      	ldr	r0, [pc, #112]	; (80128d4 <tcp_output_control_segment+0x90>)
 8012862:	f003 fe4f 	bl	8016504 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8012866:	683a      	ldr	r2, [r7, #0]
 8012868:	6879      	ldr	r1, [r7, #4]
 801286a:	68f8      	ldr	r0, [r7, #12]
 801286c:	f7fe ff40 	bl	80116f0 <tcp_route>
 8012870:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8012872:	693b      	ldr	r3, [r7, #16]
 8012874:	2b00      	cmp	r3, #0
 8012876:	d102      	bne.n	801287e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8012878:	23fc      	movs	r3, #252	; 0xfc
 801287a:	75fb      	strb	r3, [r7, #23]
 801287c:	e01c      	b.n	80128b8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801287e:	68fb      	ldr	r3, [r7, #12]
 8012880:	2b00      	cmp	r3, #0
 8012882:	d006      	beq.n	8012892 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8012884:	68fb      	ldr	r3, [r7, #12]
 8012886:	7adb      	ldrb	r3, [r3, #11]
 8012888:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801288a:	68fb      	ldr	r3, [r7, #12]
 801288c:	7a9b      	ldrb	r3, [r3, #10]
 801288e:	757b      	strb	r3, [r7, #21]
 8012890:	e003      	b.n	801289a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8012892:	23ff      	movs	r3, #255	; 0xff
 8012894:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8012896:	2300      	movs	r3, #0
 8012898:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801289a:	7dba      	ldrb	r2, [r7, #22]
 801289c:	693b      	ldr	r3, [r7, #16]
 801289e:	9302      	str	r3, [sp, #8]
 80128a0:	2306      	movs	r3, #6
 80128a2:	9301      	str	r3, [sp, #4]
 80128a4:	7d7b      	ldrb	r3, [r7, #21]
 80128a6:	9300      	str	r3, [sp, #0]
 80128a8:	4613      	mov	r3, r2
 80128aa:	683a      	ldr	r2, [r7, #0]
 80128ac:	6879      	ldr	r1, [r7, #4]
 80128ae:	68b8      	ldr	r0, [r7, #8]
 80128b0:	f001 ffa0 	bl	80147f4 <ip4_output_if>
 80128b4:	4603      	mov	r3, r0
 80128b6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80128b8:	68b8      	ldr	r0, [r7, #8]
 80128ba:	f7fa fddd 	bl	800d478 <pbuf_free>
  return err;
 80128be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80128c2:	4618      	mov	r0, r3
 80128c4:	3718      	adds	r7, #24
 80128c6:	46bd      	mov	sp, r7
 80128c8:	bd80      	pop	{r7, pc}
 80128ca:	bf00      	nop
 80128cc:	08018d54 	.word	0x08018d54
 80128d0:	080194ac 	.word	0x080194ac
 80128d4:	08018da8 	.word	0x08018da8

080128d8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80128d8:	b590      	push	{r4, r7, lr}
 80128da:	b08b      	sub	sp, #44	; 0x2c
 80128dc:	af04      	add	r7, sp, #16
 80128de:	60f8      	str	r0, [r7, #12]
 80128e0:	60b9      	str	r1, [r7, #8]
 80128e2:	607a      	str	r2, [r7, #4]
 80128e4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80128e6:	683b      	ldr	r3, [r7, #0]
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d106      	bne.n	80128fa <tcp_rst+0x22>
 80128ec:	4b1f      	ldr	r3, [pc, #124]	; (801296c <tcp_rst+0x94>)
 80128ee:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80128f2:	491f      	ldr	r1, [pc, #124]	; (8012970 <tcp_rst+0x98>)
 80128f4:	481f      	ldr	r0, [pc, #124]	; (8012974 <tcp_rst+0x9c>)
 80128f6:	f003 fe05 	bl	8016504 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80128fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	d106      	bne.n	801290e <tcp_rst+0x36>
 8012900:	4b1a      	ldr	r3, [pc, #104]	; (801296c <tcp_rst+0x94>)
 8012902:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8012906:	491c      	ldr	r1, [pc, #112]	; (8012978 <tcp_rst+0xa0>)
 8012908:	481a      	ldr	r0, [pc, #104]	; (8012974 <tcp_rst+0x9c>)
 801290a:	f003 fdfb 	bl	8016504 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801290e:	2300      	movs	r3, #0
 8012910:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8012912:	f246 0308 	movw	r3, #24584	; 0x6008
 8012916:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8012918:	7dfb      	ldrb	r3, [r7, #23]
 801291a:	b29c      	uxth	r4, r3
 801291c:	68b8      	ldr	r0, [r7, #8]
 801291e:	f7f9 fa8c 	bl	800be3a <lwip_htonl>
 8012922:	4602      	mov	r2, r0
 8012924:	8abb      	ldrh	r3, [r7, #20]
 8012926:	9303      	str	r3, [sp, #12]
 8012928:	2314      	movs	r3, #20
 801292a:	9302      	str	r3, [sp, #8]
 801292c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801292e:	9301      	str	r3, [sp, #4]
 8012930:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012932:	9300      	str	r3, [sp, #0]
 8012934:	4613      	mov	r3, r2
 8012936:	2200      	movs	r2, #0
 8012938:	4621      	mov	r1, r4
 801293a:	6878      	ldr	r0, [r7, #4]
 801293c:	f7ff fe92 	bl	8012664 <tcp_output_alloc_header_common>
 8012940:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8012942:	693b      	ldr	r3, [r7, #16]
 8012944:	2b00      	cmp	r3, #0
 8012946:	d00c      	beq.n	8012962 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012948:	7dfb      	ldrb	r3, [r7, #23]
 801294a:	2200      	movs	r2, #0
 801294c:	6939      	ldr	r1, [r7, #16]
 801294e:	68f8      	ldr	r0, [r7, #12]
 8012950:	f7ff ff38 	bl	80127c4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8012954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012956:	683a      	ldr	r2, [r7, #0]
 8012958:	6939      	ldr	r1, [r7, #16]
 801295a:	68f8      	ldr	r0, [r7, #12]
 801295c:	f7ff ff72 	bl	8012844 <tcp_output_control_segment>
 8012960:	e000      	b.n	8012964 <tcp_rst+0x8c>
    return;
 8012962:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8012964:	371c      	adds	r7, #28
 8012966:	46bd      	mov	sp, r7
 8012968:	bd90      	pop	{r4, r7, pc}
 801296a:	bf00      	nop
 801296c:	08018d54 	.word	0x08018d54
 8012970:	080194d8 	.word	0x080194d8
 8012974:	08018da8 	.word	0x08018da8
 8012978:	080194f4 	.word	0x080194f4

0801297c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801297c:	b590      	push	{r4, r7, lr}
 801297e:	b087      	sub	sp, #28
 8012980:	af00      	add	r7, sp, #0
 8012982:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8012984:	2300      	movs	r3, #0
 8012986:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8012988:	2300      	movs	r3, #0
 801298a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	2b00      	cmp	r3, #0
 8012990:	d106      	bne.n	80129a0 <tcp_send_empty_ack+0x24>
 8012992:	4b28      	ldr	r3, [pc, #160]	; (8012a34 <tcp_send_empty_ack+0xb8>)
 8012994:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8012998:	4927      	ldr	r1, [pc, #156]	; (8012a38 <tcp_send_empty_ack+0xbc>)
 801299a:	4828      	ldr	r0, [pc, #160]	; (8012a3c <tcp_send_empty_ack+0xc0>)
 801299c:	f003 fdb2 	bl	8016504 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80129a0:	7dfb      	ldrb	r3, [r7, #23]
 80129a2:	009b      	lsls	r3, r3, #2
 80129a4:	b2db      	uxtb	r3, r3
 80129a6:	f003 0304 	and.w	r3, r3, #4
 80129aa:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80129ac:	7d7b      	ldrb	r3, [r7, #21]
 80129ae:	b29c      	uxth	r4, r3
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80129b4:	4618      	mov	r0, r3
 80129b6:	f7f9 fa40 	bl	800be3a <lwip_htonl>
 80129ba:	4603      	mov	r3, r0
 80129bc:	2200      	movs	r2, #0
 80129be:	4621      	mov	r1, r4
 80129c0:	6878      	ldr	r0, [r7, #4]
 80129c2:	f7ff fec1 	bl	8012748 <tcp_output_alloc_header>
 80129c6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80129c8:	693b      	ldr	r3, [r7, #16]
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d109      	bne.n	80129e2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	8b5b      	ldrh	r3, [r3, #26]
 80129d2:	f043 0303 	orr.w	r3, r3, #3
 80129d6:	b29a      	uxth	r2, r3
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80129dc:	f06f 0301 	mvn.w	r3, #1
 80129e0:	e023      	b.n	8012a2a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80129e2:	7dbb      	ldrb	r3, [r7, #22]
 80129e4:	7dfa      	ldrb	r2, [r7, #23]
 80129e6:	6939      	ldr	r1, [r7, #16]
 80129e8:	6878      	ldr	r0, [r7, #4]
 80129ea:	f7ff feeb 	bl	80127c4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80129ee:	687a      	ldr	r2, [r7, #4]
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	3304      	adds	r3, #4
 80129f4:	6939      	ldr	r1, [r7, #16]
 80129f6:	6878      	ldr	r0, [r7, #4]
 80129f8:	f7ff ff24 	bl	8012844 <tcp_output_control_segment>
 80129fc:	4603      	mov	r3, r0
 80129fe:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8012a00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d007      	beq.n	8012a18 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	8b5b      	ldrh	r3, [r3, #26]
 8012a0c:	f043 0303 	orr.w	r3, r3, #3
 8012a10:	b29a      	uxth	r2, r3
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	835a      	strh	r2, [r3, #26]
 8012a16:	e006      	b.n	8012a26 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	8b5b      	ldrh	r3, [r3, #26]
 8012a1c:	f023 0303 	bic.w	r3, r3, #3
 8012a20:	b29a      	uxth	r2, r3
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8012a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012a2a:	4618      	mov	r0, r3
 8012a2c:	371c      	adds	r7, #28
 8012a2e:	46bd      	mov	sp, r7
 8012a30:	bd90      	pop	{r4, r7, pc}
 8012a32:	bf00      	nop
 8012a34:	08018d54 	.word	0x08018d54
 8012a38:	08019510 	.word	0x08019510
 8012a3c:	08018da8 	.word	0x08018da8

08012a40 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8012a40:	b590      	push	{r4, r7, lr}
 8012a42:	b087      	sub	sp, #28
 8012a44:	af00      	add	r7, sp, #0
 8012a46:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012a48:	2300      	movs	r3, #0
 8012a4a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d106      	bne.n	8012a60 <tcp_keepalive+0x20>
 8012a52:	4b18      	ldr	r3, [pc, #96]	; (8012ab4 <tcp_keepalive+0x74>)
 8012a54:	f640 0224 	movw	r2, #2084	; 0x824
 8012a58:	4917      	ldr	r1, [pc, #92]	; (8012ab8 <tcp_keepalive+0x78>)
 8012a5a:	4818      	ldr	r0, [pc, #96]	; (8012abc <tcp_keepalive+0x7c>)
 8012a5c:	f003 fd52 	bl	8016504 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8012a60:	7dfb      	ldrb	r3, [r7, #23]
 8012a62:	b29c      	uxth	r4, r3
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012a68:	3b01      	subs	r3, #1
 8012a6a:	4618      	mov	r0, r3
 8012a6c:	f7f9 f9e5 	bl	800be3a <lwip_htonl>
 8012a70:	4603      	mov	r3, r0
 8012a72:	2200      	movs	r2, #0
 8012a74:	4621      	mov	r1, r4
 8012a76:	6878      	ldr	r0, [r7, #4]
 8012a78:	f7ff fe66 	bl	8012748 <tcp_output_alloc_header>
 8012a7c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012a7e:	693b      	ldr	r3, [r7, #16]
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d102      	bne.n	8012a8a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8012a84:	f04f 33ff 	mov.w	r3, #4294967295
 8012a88:	e010      	b.n	8012aac <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012a8a:	7dfb      	ldrb	r3, [r7, #23]
 8012a8c:	2200      	movs	r2, #0
 8012a8e:	6939      	ldr	r1, [r7, #16]
 8012a90:	6878      	ldr	r0, [r7, #4]
 8012a92:	f7ff fe97 	bl	80127c4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012a96:	687a      	ldr	r2, [r7, #4]
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	3304      	adds	r3, #4
 8012a9c:	6939      	ldr	r1, [r7, #16]
 8012a9e:	6878      	ldr	r0, [r7, #4]
 8012aa0:	f7ff fed0 	bl	8012844 <tcp_output_control_segment>
 8012aa4:	4603      	mov	r3, r0
 8012aa6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012aa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012aac:	4618      	mov	r0, r3
 8012aae:	371c      	adds	r7, #28
 8012ab0:	46bd      	mov	sp, r7
 8012ab2:	bd90      	pop	{r4, r7, pc}
 8012ab4:	08018d54 	.word	0x08018d54
 8012ab8:	08019530 	.word	0x08019530
 8012abc:	08018da8 	.word	0x08018da8

08012ac0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8012ac0:	b590      	push	{r4, r7, lr}
 8012ac2:	b08b      	sub	sp, #44	; 0x2c
 8012ac4:	af00      	add	r7, sp, #0
 8012ac6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012ac8:	2300      	movs	r3, #0
 8012aca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d106      	bne.n	8012ae2 <tcp_zero_window_probe+0x22>
 8012ad4:	4b4c      	ldr	r3, [pc, #304]	; (8012c08 <tcp_zero_window_probe+0x148>)
 8012ad6:	f640 024f 	movw	r2, #2127	; 0x84f
 8012ada:	494c      	ldr	r1, [pc, #304]	; (8012c0c <tcp_zero_window_probe+0x14c>)
 8012adc:	484c      	ldr	r0, [pc, #304]	; (8012c10 <tcp_zero_window_probe+0x150>)
 8012ade:	f003 fd11 	bl	8016504 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012ae6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8012ae8:	6a3b      	ldr	r3, [r7, #32]
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d101      	bne.n	8012af2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8012aee:	2300      	movs	r3, #0
 8012af0:	e086      	b.n	8012c00 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012af8:	2bff      	cmp	r3, #255	; 0xff
 8012afa:	d007      	beq.n	8012b0c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012b02:	3301      	adds	r3, #1
 8012b04:	b2da      	uxtb	r2, r3
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8012b0c:	6a3b      	ldr	r3, [r7, #32]
 8012b0e:	68db      	ldr	r3, [r3, #12]
 8012b10:	899b      	ldrh	r3, [r3, #12]
 8012b12:	b29b      	uxth	r3, r3
 8012b14:	4618      	mov	r0, r3
 8012b16:	f7f9 f97b 	bl	800be10 <lwip_htons>
 8012b1a:	4603      	mov	r3, r0
 8012b1c:	b2db      	uxtb	r3, r3
 8012b1e:	f003 0301 	and.w	r3, r3, #1
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d005      	beq.n	8012b32 <tcp_zero_window_probe+0x72>
 8012b26:	6a3b      	ldr	r3, [r7, #32]
 8012b28:	891b      	ldrh	r3, [r3, #8]
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d101      	bne.n	8012b32 <tcp_zero_window_probe+0x72>
 8012b2e:	2301      	movs	r3, #1
 8012b30:	e000      	b.n	8012b34 <tcp_zero_window_probe+0x74>
 8012b32:	2300      	movs	r3, #0
 8012b34:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8012b36:	7ffb      	ldrb	r3, [r7, #31]
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	bf0c      	ite	eq
 8012b3c:	2301      	moveq	r3, #1
 8012b3e:	2300      	movne	r3, #0
 8012b40:	b2db      	uxtb	r3, r3
 8012b42:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8012b44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012b48:	b299      	uxth	r1, r3
 8012b4a:	6a3b      	ldr	r3, [r7, #32]
 8012b4c:	68db      	ldr	r3, [r3, #12]
 8012b4e:	685b      	ldr	r3, [r3, #4]
 8012b50:	8bba      	ldrh	r2, [r7, #28]
 8012b52:	6878      	ldr	r0, [r7, #4]
 8012b54:	f7ff fdf8 	bl	8012748 <tcp_output_alloc_header>
 8012b58:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8012b5a:	69bb      	ldr	r3, [r7, #24]
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d102      	bne.n	8012b66 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8012b60:	f04f 33ff 	mov.w	r3, #4294967295
 8012b64:	e04c      	b.n	8012c00 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8012b66:	69bb      	ldr	r3, [r7, #24]
 8012b68:	685b      	ldr	r3, [r3, #4]
 8012b6a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8012b6c:	7ffb      	ldrb	r3, [r7, #31]
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d011      	beq.n	8012b96 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8012b72:	697b      	ldr	r3, [r7, #20]
 8012b74:	899b      	ldrh	r3, [r3, #12]
 8012b76:	b29b      	uxth	r3, r3
 8012b78:	b21b      	sxth	r3, r3
 8012b7a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012b7e:	b21c      	sxth	r4, r3
 8012b80:	2011      	movs	r0, #17
 8012b82:	f7f9 f945 	bl	800be10 <lwip_htons>
 8012b86:	4603      	mov	r3, r0
 8012b88:	b21b      	sxth	r3, r3
 8012b8a:	4323      	orrs	r3, r4
 8012b8c:	b21b      	sxth	r3, r3
 8012b8e:	b29a      	uxth	r2, r3
 8012b90:	697b      	ldr	r3, [r7, #20]
 8012b92:	819a      	strh	r2, [r3, #12]
 8012b94:	e010      	b.n	8012bb8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8012b96:	69bb      	ldr	r3, [r7, #24]
 8012b98:	685b      	ldr	r3, [r3, #4]
 8012b9a:	3314      	adds	r3, #20
 8012b9c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8012b9e:	6a3b      	ldr	r3, [r7, #32]
 8012ba0:	6858      	ldr	r0, [r3, #4]
 8012ba2:	6a3b      	ldr	r3, [r7, #32]
 8012ba4:	685b      	ldr	r3, [r3, #4]
 8012ba6:	891a      	ldrh	r2, [r3, #8]
 8012ba8:	6a3b      	ldr	r3, [r7, #32]
 8012baa:	891b      	ldrh	r3, [r3, #8]
 8012bac:	1ad3      	subs	r3, r2, r3
 8012bae:	b29b      	uxth	r3, r3
 8012bb0:	2201      	movs	r2, #1
 8012bb2:	6939      	ldr	r1, [r7, #16]
 8012bb4:	f7fa fe56 	bl	800d864 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8012bb8:	6a3b      	ldr	r3, [r7, #32]
 8012bba:	68db      	ldr	r3, [r3, #12]
 8012bbc:	685b      	ldr	r3, [r3, #4]
 8012bbe:	4618      	mov	r0, r3
 8012bc0:	f7f9 f93b 	bl	800be3a <lwip_htonl>
 8012bc4:	4603      	mov	r3, r0
 8012bc6:	3301      	adds	r3, #1
 8012bc8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012bce:	68fb      	ldr	r3, [r7, #12]
 8012bd0:	1ad3      	subs	r3, r2, r3
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	da02      	bge.n	8012bdc <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	68fa      	ldr	r2, [r7, #12]
 8012bda:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012bdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012be0:	2200      	movs	r2, #0
 8012be2:	69b9      	ldr	r1, [r7, #24]
 8012be4:	6878      	ldr	r0, [r7, #4]
 8012be6:	f7ff fded 	bl	80127c4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012bea:	687a      	ldr	r2, [r7, #4]
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	3304      	adds	r3, #4
 8012bf0:	69b9      	ldr	r1, [r7, #24]
 8012bf2:	6878      	ldr	r0, [r7, #4]
 8012bf4:	f7ff fe26 	bl	8012844 <tcp_output_control_segment>
 8012bf8:	4603      	mov	r3, r0
 8012bfa:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012bfc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012c00:	4618      	mov	r0, r3
 8012c02:	372c      	adds	r7, #44	; 0x2c
 8012c04:	46bd      	mov	sp, r7
 8012c06:	bd90      	pop	{r4, r7, pc}
 8012c08:	08018d54 	.word	0x08018d54
 8012c0c:	0801954c 	.word	0x0801954c
 8012c10:	08018da8 	.word	0x08018da8

08012c14 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8012c14:	b580      	push	{r7, lr}
 8012c16:	b082      	sub	sp, #8
 8012c18:	af00      	add	r7, sp, #0
 8012c1a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8012c1c:	f7fa ff10 	bl	800da40 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8012c20:	4b0a      	ldr	r3, [pc, #40]	; (8012c4c <tcpip_tcp_timer+0x38>)
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	d103      	bne.n	8012c30 <tcpip_tcp_timer+0x1c>
 8012c28:	4b09      	ldr	r3, [pc, #36]	; (8012c50 <tcpip_tcp_timer+0x3c>)
 8012c2a:	681b      	ldr	r3, [r3, #0]
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	d005      	beq.n	8012c3c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012c30:	2200      	movs	r2, #0
 8012c32:	4908      	ldr	r1, [pc, #32]	; (8012c54 <tcpip_tcp_timer+0x40>)
 8012c34:	20fa      	movs	r0, #250	; 0xfa
 8012c36:	f000 f8f3 	bl	8012e20 <sys_timeout>
 8012c3a:	e003      	b.n	8012c44 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8012c3c:	4b06      	ldr	r3, [pc, #24]	; (8012c58 <tcpip_tcp_timer+0x44>)
 8012c3e:	2200      	movs	r2, #0
 8012c40:	601a      	str	r2, [r3, #0]
  }
}
 8012c42:	bf00      	nop
 8012c44:	bf00      	nop
 8012c46:	3708      	adds	r7, #8
 8012c48:	46bd      	mov	sp, r7
 8012c4a:	bd80      	pop	{r7, pc}
 8012c4c:	2000af5c 	.word	0x2000af5c
 8012c50:	2000af6c 	.word	0x2000af6c
 8012c54:	08012c15 	.word	0x08012c15
 8012c58:	20004254 	.word	0x20004254

08012c5c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8012c5c:	b580      	push	{r7, lr}
 8012c5e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8012c60:	4b0a      	ldr	r3, [pc, #40]	; (8012c8c <tcp_timer_needed+0x30>)
 8012c62:	681b      	ldr	r3, [r3, #0]
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d10f      	bne.n	8012c88 <tcp_timer_needed+0x2c>
 8012c68:	4b09      	ldr	r3, [pc, #36]	; (8012c90 <tcp_timer_needed+0x34>)
 8012c6a:	681b      	ldr	r3, [r3, #0]
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d103      	bne.n	8012c78 <tcp_timer_needed+0x1c>
 8012c70:	4b08      	ldr	r3, [pc, #32]	; (8012c94 <tcp_timer_needed+0x38>)
 8012c72:	681b      	ldr	r3, [r3, #0]
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d007      	beq.n	8012c88 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8012c78:	4b04      	ldr	r3, [pc, #16]	; (8012c8c <tcp_timer_needed+0x30>)
 8012c7a:	2201      	movs	r2, #1
 8012c7c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012c7e:	2200      	movs	r2, #0
 8012c80:	4905      	ldr	r1, [pc, #20]	; (8012c98 <tcp_timer_needed+0x3c>)
 8012c82:	20fa      	movs	r0, #250	; 0xfa
 8012c84:	f000 f8cc 	bl	8012e20 <sys_timeout>
  }
}
 8012c88:	bf00      	nop
 8012c8a:	bd80      	pop	{r7, pc}
 8012c8c:	20004254 	.word	0x20004254
 8012c90:	2000af5c 	.word	0x2000af5c
 8012c94:	2000af6c 	.word	0x2000af6c
 8012c98:	08012c15 	.word	0x08012c15

08012c9c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8012c9c:	b580      	push	{r7, lr}
 8012c9e:	b086      	sub	sp, #24
 8012ca0:	af00      	add	r7, sp, #0
 8012ca2:	60f8      	str	r0, [r7, #12]
 8012ca4:	60b9      	str	r1, [r7, #8]
 8012ca6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8012ca8:	200a      	movs	r0, #10
 8012caa:	f7f9 fd67 	bl	800c77c <memp_malloc>
 8012cae:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8012cb0:	693b      	ldr	r3, [r7, #16]
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	d109      	bne.n	8012cca <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8012cb6:	693b      	ldr	r3, [r7, #16]
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d151      	bne.n	8012d60 <sys_timeout_abs+0xc4>
 8012cbc:	4b2a      	ldr	r3, [pc, #168]	; (8012d68 <sys_timeout_abs+0xcc>)
 8012cbe:	22be      	movs	r2, #190	; 0xbe
 8012cc0:	492a      	ldr	r1, [pc, #168]	; (8012d6c <sys_timeout_abs+0xd0>)
 8012cc2:	482b      	ldr	r0, [pc, #172]	; (8012d70 <sys_timeout_abs+0xd4>)
 8012cc4:	f003 fc1e 	bl	8016504 <iprintf>
    return;
 8012cc8:	e04a      	b.n	8012d60 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8012cca:	693b      	ldr	r3, [r7, #16]
 8012ccc:	2200      	movs	r2, #0
 8012cce:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8012cd0:	693b      	ldr	r3, [r7, #16]
 8012cd2:	68ba      	ldr	r2, [r7, #8]
 8012cd4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8012cd6:	693b      	ldr	r3, [r7, #16]
 8012cd8:	687a      	ldr	r2, [r7, #4]
 8012cda:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8012cdc:	693b      	ldr	r3, [r7, #16]
 8012cde:	68fa      	ldr	r2, [r7, #12]
 8012ce0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8012ce2:	4b24      	ldr	r3, [pc, #144]	; (8012d74 <sys_timeout_abs+0xd8>)
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d103      	bne.n	8012cf2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8012cea:	4a22      	ldr	r2, [pc, #136]	; (8012d74 <sys_timeout_abs+0xd8>)
 8012cec:	693b      	ldr	r3, [r7, #16]
 8012cee:	6013      	str	r3, [r2, #0]
    return;
 8012cf0:	e037      	b.n	8012d62 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8012cf2:	693b      	ldr	r3, [r7, #16]
 8012cf4:	685a      	ldr	r2, [r3, #4]
 8012cf6:	4b1f      	ldr	r3, [pc, #124]	; (8012d74 <sys_timeout_abs+0xd8>)
 8012cf8:	681b      	ldr	r3, [r3, #0]
 8012cfa:	685b      	ldr	r3, [r3, #4]
 8012cfc:	1ad3      	subs	r3, r2, r3
 8012cfe:	0fdb      	lsrs	r3, r3, #31
 8012d00:	f003 0301 	and.w	r3, r3, #1
 8012d04:	b2db      	uxtb	r3, r3
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d007      	beq.n	8012d1a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8012d0a:	4b1a      	ldr	r3, [pc, #104]	; (8012d74 <sys_timeout_abs+0xd8>)
 8012d0c:	681a      	ldr	r2, [r3, #0]
 8012d0e:	693b      	ldr	r3, [r7, #16]
 8012d10:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8012d12:	4a18      	ldr	r2, [pc, #96]	; (8012d74 <sys_timeout_abs+0xd8>)
 8012d14:	693b      	ldr	r3, [r7, #16]
 8012d16:	6013      	str	r3, [r2, #0]
 8012d18:	e023      	b.n	8012d62 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8012d1a:	4b16      	ldr	r3, [pc, #88]	; (8012d74 <sys_timeout_abs+0xd8>)
 8012d1c:	681b      	ldr	r3, [r3, #0]
 8012d1e:	617b      	str	r3, [r7, #20]
 8012d20:	e01a      	b.n	8012d58 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8012d22:	697b      	ldr	r3, [r7, #20]
 8012d24:	681b      	ldr	r3, [r3, #0]
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d00b      	beq.n	8012d42 <sys_timeout_abs+0xa6>
 8012d2a:	693b      	ldr	r3, [r7, #16]
 8012d2c:	685a      	ldr	r2, [r3, #4]
 8012d2e:	697b      	ldr	r3, [r7, #20]
 8012d30:	681b      	ldr	r3, [r3, #0]
 8012d32:	685b      	ldr	r3, [r3, #4]
 8012d34:	1ad3      	subs	r3, r2, r3
 8012d36:	0fdb      	lsrs	r3, r3, #31
 8012d38:	f003 0301 	and.w	r3, r3, #1
 8012d3c:	b2db      	uxtb	r3, r3
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d007      	beq.n	8012d52 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8012d42:	697b      	ldr	r3, [r7, #20]
 8012d44:	681a      	ldr	r2, [r3, #0]
 8012d46:	693b      	ldr	r3, [r7, #16]
 8012d48:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8012d4a:	697b      	ldr	r3, [r7, #20]
 8012d4c:	693a      	ldr	r2, [r7, #16]
 8012d4e:	601a      	str	r2, [r3, #0]
        break;
 8012d50:	e007      	b.n	8012d62 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8012d52:	697b      	ldr	r3, [r7, #20]
 8012d54:	681b      	ldr	r3, [r3, #0]
 8012d56:	617b      	str	r3, [r7, #20]
 8012d58:	697b      	ldr	r3, [r7, #20]
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d1e1      	bne.n	8012d22 <sys_timeout_abs+0x86>
 8012d5e:	e000      	b.n	8012d62 <sys_timeout_abs+0xc6>
    return;
 8012d60:	bf00      	nop
      }
    }
  }
}
 8012d62:	3718      	adds	r7, #24
 8012d64:	46bd      	mov	sp, r7
 8012d66:	bd80      	pop	{r7, pc}
 8012d68:	08019570 	.word	0x08019570
 8012d6c:	080195a4 	.word	0x080195a4
 8012d70:	080195e4 	.word	0x080195e4
 8012d74:	2000424c 	.word	0x2000424c

08012d78 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8012d78:	b580      	push	{r7, lr}
 8012d7a:	b086      	sub	sp, #24
 8012d7c:	af00      	add	r7, sp, #0
 8012d7e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8012d84:	697b      	ldr	r3, [r7, #20]
 8012d86:	685b      	ldr	r3, [r3, #4]
 8012d88:	4798      	blx	r3

  now = sys_now();
 8012d8a:	f7f4 fb35 	bl	80073f8 <sys_now>
 8012d8e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8012d90:	697b      	ldr	r3, [r7, #20]
 8012d92:	681a      	ldr	r2, [r3, #0]
 8012d94:	4b0f      	ldr	r3, [pc, #60]	; (8012dd4 <lwip_cyclic_timer+0x5c>)
 8012d96:	681b      	ldr	r3, [r3, #0]
 8012d98:	4413      	add	r3, r2
 8012d9a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8012d9c:	68fa      	ldr	r2, [r7, #12]
 8012d9e:	693b      	ldr	r3, [r7, #16]
 8012da0:	1ad3      	subs	r3, r2, r3
 8012da2:	0fdb      	lsrs	r3, r3, #31
 8012da4:	f003 0301 	and.w	r3, r3, #1
 8012da8:	b2db      	uxtb	r3, r3
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d009      	beq.n	8012dc2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8012dae:	697b      	ldr	r3, [r7, #20]
 8012db0:	681a      	ldr	r2, [r3, #0]
 8012db2:	693b      	ldr	r3, [r7, #16]
 8012db4:	4413      	add	r3, r2
 8012db6:	687a      	ldr	r2, [r7, #4]
 8012db8:	4907      	ldr	r1, [pc, #28]	; (8012dd8 <lwip_cyclic_timer+0x60>)
 8012dba:	4618      	mov	r0, r3
 8012dbc:	f7ff ff6e 	bl	8012c9c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8012dc0:	e004      	b.n	8012dcc <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8012dc2:	687a      	ldr	r2, [r7, #4]
 8012dc4:	4904      	ldr	r1, [pc, #16]	; (8012dd8 <lwip_cyclic_timer+0x60>)
 8012dc6:	68f8      	ldr	r0, [r7, #12]
 8012dc8:	f7ff ff68 	bl	8012c9c <sys_timeout_abs>
}
 8012dcc:	bf00      	nop
 8012dce:	3718      	adds	r7, #24
 8012dd0:	46bd      	mov	sp, r7
 8012dd2:	bd80      	pop	{r7, pc}
 8012dd4:	20004250 	.word	0x20004250
 8012dd8:	08012d79 	.word	0x08012d79

08012ddc <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8012ddc:	b580      	push	{r7, lr}
 8012dde:	b082      	sub	sp, #8
 8012de0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012de2:	2301      	movs	r3, #1
 8012de4:	607b      	str	r3, [r7, #4]
 8012de6:	e00e      	b.n	8012e06 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8012de8:	4a0b      	ldr	r2, [pc, #44]	; (8012e18 <sys_timeouts_init+0x3c>)
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	00db      	lsls	r3, r3, #3
 8012df4:	4a08      	ldr	r2, [pc, #32]	; (8012e18 <sys_timeouts_init+0x3c>)
 8012df6:	4413      	add	r3, r2
 8012df8:	461a      	mov	r2, r3
 8012dfa:	4908      	ldr	r1, [pc, #32]	; (8012e1c <sys_timeouts_init+0x40>)
 8012dfc:	f000 f810 	bl	8012e20 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	3301      	adds	r3, #1
 8012e04:	607b      	str	r3, [r7, #4]
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	2b02      	cmp	r3, #2
 8012e0a:	d9ed      	bls.n	8012de8 <sys_timeouts_init+0xc>
  }
}
 8012e0c:	bf00      	nop
 8012e0e:	bf00      	nop
 8012e10:	3708      	adds	r7, #8
 8012e12:	46bd      	mov	sp, r7
 8012e14:	bd80      	pop	{r7, pc}
 8012e16:	bf00      	nop
 8012e18:	0801a1d8 	.word	0x0801a1d8
 8012e1c:	08012d79 	.word	0x08012d79

08012e20 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8012e20:	b580      	push	{r7, lr}
 8012e22:	b086      	sub	sp, #24
 8012e24:	af00      	add	r7, sp, #0
 8012e26:	60f8      	str	r0, [r7, #12]
 8012e28:	60b9      	str	r1, [r7, #8]
 8012e2a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8012e2c:	68fb      	ldr	r3, [r7, #12]
 8012e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012e32:	d306      	bcc.n	8012e42 <sys_timeout+0x22>
 8012e34:	4b0a      	ldr	r3, [pc, #40]	; (8012e60 <sys_timeout+0x40>)
 8012e36:	f240 1229 	movw	r2, #297	; 0x129
 8012e3a:	490a      	ldr	r1, [pc, #40]	; (8012e64 <sys_timeout+0x44>)
 8012e3c:	480a      	ldr	r0, [pc, #40]	; (8012e68 <sys_timeout+0x48>)
 8012e3e:	f003 fb61 	bl	8016504 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8012e42:	f7f4 fad9 	bl	80073f8 <sys_now>
 8012e46:	4602      	mov	r2, r0
 8012e48:	68fb      	ldr	r3, [r7, #12]
 8012e4a:	4413      	add	r3, r2
 8012e4c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8012e4e:	687a      	ldr	r2, [r7, #4]
 8012e50:	68b9      	ldr	r1, [r7, #8]
 8012e52:	6978      	ldr	r0, [r7, #20]
 8012e54:	f7ff ff22 	bl	8012c9c <sys_timeout_abs>
#endif
}
 8012e58:	bf00      	nop
 8012e5a:	3718      	adds	r7, #24
 8012e5c:	46bd      	mov	sp, r7
 8012e5e:	bd80      	pop	{r7, pc}
 8012e60:	08019570 	.word	0x08019570
 8012e64:	0801960c 	.word	0x0801960c
 8012e68:	080195e4 	.word	0x080195e4

08012e6c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8012e6c:	b580      	push	{r7, lr}
 8012e6e:	b084      	sub	sp, #16
 8012e70:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8012e72:	f7f4 fac1 	bl	80073f8 <sys_now>
 8012e76:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8012e78:	4b17      	ldr	r3, [pc, #92]	; (8012ed8 <sys_check_timeouts+0x6c>)
 8012e7a:	681b      	ldr	r3, [r3, #0]
 8012e7c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8012e7e:	68bb      	ldr	r3, [r7, #8]
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d022      	beq.n	8012eca <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8012e84:	68bb      	ldr	r3, [r7, #8]
 8012e86:	685b      	ldr	r3, [r3, #4]
 8012e88:	68fa      	ldr	r2, [r7, #12]
 8012e8a:	1ad3      	subs	r3, r2, r3
 8012e8c:	0fdb      	lsrs	r3, r3, #31
 8012e8e:	f003 0301 	and.w	r3, r3, #1
 8012e92:	b2db      	uxtb	r3, r3
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	d11a      	bne.n	8012ece <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8012e98:	68bb      	ldr	r3, [r7, #8]
 8012e9a:	681b      	ldr	r3, [r3, #0]
 8012e9c:	4a0e      	ldr	r2, [pc, #56]	; (8012ed8 <sys_check_timeouts+0x6c>)
 8012e9e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8012ea0:	68bb      	ldr	r3, [r7, #8]
 8012ea2:	689b      	ldr	r3, [r3, #8]
 8012ea4:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8012ea6:	68bb      	ldr	r3, [r7, #8]
 8012ea8:	68db      	ldr	r3, [r3, #12]
 8012eaa:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8012eac:	68bb      	ldr	r3, [r7, #8]
 8012eae:	685b      	ldr	r3, [r3, #4]
 8012eb0:	4a0a      	ldr	r2, [pc, #40]	; (8012edc <sys_check_timeouts+0x70>)
 8012eb2:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8012eb4:	68b9      	ldr	r1, [r7, #8]
 8012eb6:	200a      	movs	r0, #10
 8012eb8:	f7f9 fcb2 	bl	800c820 <memp_free>
    if (handler != NULL) {
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	d0da      	beq.n	8012e78 <sys_check_timeouts+0xc>
      handler(arg);
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	6838      	ldr	r0, [r7, #0]
 8012ec6:	4798      	blx	r3
  do {
 8012ec8:	e7d6      	b.n	8012e78 <sys_check_timeouts+0xc>
      return;
 8012eca:	bf00      	nop
 8012ecc:	e000      	b.n	8012ed0 <sys_check_timeouts+0x64>
      return;
 8012ece:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8012ed0:	3710      	adds	r7, #16
 8012ed2:	46bd      	mov	sp, r7
 8012ed4:	bd80      	pop	{r7, pc}
 8012ed6:	bf00      	nop
 8012ed8:	2000424c 	.word	0x2000424c
 8012edc:	20004250 	.word	0x20004250

08012ee0 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8012ee0:	b580      	push	{r7, lr}
 8012ee2:	b082      	sub	sp, #8
 8012ee4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8012ee6:	4b16      	ldr	r3, [pc, #88]	; (8012f40 <sys_timeouts_sleeptime+0x60>)
 8012ee8:	681b      	ldr	r3, [r3, #0]
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d102      	bne.n	8012ef4 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8012eee:	f04f 33ff 	mov.w	r3, #4294967295
 8012ef2:	e020      	b.n	8012f36 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8012ef4:	f7f4 fa80 	bl	80073f8 <sys_now>
 8012ef8:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8012efa:	4b11      	ldr	r3, [pc, #68]	; (8012f40 <sys_timeouts_sleeptime+0x60>)
 8012efc:	681b      	ldr	r3, [r3, #0]
 8012efe:	685a      	ldr	r2, [r3, #4]
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	1ad3      	subs	r3, r2, r3
 8012f04:	0fdb      	lsrs	r3, r3, #31
 8012f06:	f003 0301 	and.w	r3, r3, #1
 8012f0a:	b2db      	uxtb	r3, r3
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d001      	beq.n	8012f14 <sys_timeouts_sleeptime+0x34>
    return 0;
 8012f10:	2300      	movs	r3, #0
 8012f12:	e010      	b.n	8012f36 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8012f14:	4b0a      	ldr	r3, [pc, #40]	; (8012f40 <sys_timeouts_sleeptime+0x60>)
 8012f16:	681b      	ldr	r3, [r3, #0]
 8012f18:	685a      	ldr	r2, [r3, #4]
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	1ad3      	subs	r3, r2, r3
 8012f1e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8012f20:	683b      	ldr	r3, [r7, #0]
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	da06      	bge.n	8012f34 <sys_timeouts_sleeptime+0x54>
 8012f26:	4b07      	ldr	r3, [pc, #28]	; (8012f44 <sys_timeouts_sleeptime+0x64>)
 8012f28:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8012f2c:	4906      	ldr	r1, [pc, #24]	; (8012f48 <sys_timeouts_sleeptime+0x68>)
 8012f2e:	4807      	ldr	r0, [pc, #28]	; (8012f4c <sys_timeouts_sleeptime+0x6c>)
 8012f30:	f003 fae8 	bl	8016504 <iprintf>
    return ret;
 8012f34:	683b      	ldr	r3, [r7, #0]
  }
}
 8012f36:	4618      	mov	r0, r3
 8012f38:	3708      	adds	r7, #8
 8012f3a:	46bd      	mov	sp, r7
 8012f3c:	bd80      	pop	{r7, pc}
 8012f3e:	bf00      	nop
 8012f40:	2000424c 	.word	0x2000424c
 8012f44:	08019570 	.word	0x08019570
 8012f48:	08019644 	.word	0x08019644
 8012f4c:	080195e4 	.word	0x080195e4

08012f50 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8012f50:	b580      	push	{r7, lr}
 8012f52:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8012f54:	f003 faee 	bl	8016534 <rand>
 8012f58:	4603      	mov	r3, r0
 8012f5a:	b29b      	uxth	r3, r3
 8012f5c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8012f60:	b29b      	uxth	r3, r3
 8012f62:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8012f66:	b29a      	uxth	r2, r3
 8012f68:	4b01      	ldr	r3, [pc, #4]	; (8012f70 <udp_init+0x20>)
 8012f6a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8012f6c:	bf00      	nop
 8012f6e:	bd80      	pop	{r7, pc}
 8012f70:	20000128 	.word	0x20000128

08012f74 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8012f74:	b580      	push	{r7, lr}
 8012f76:	b084      	sub	sp, #16
 8012f78:	af00      	add	r7, sp, #0
 8012f7a:	60f8      	str	r0, [r7, #12]
 8012f7c:	60b9      	str	r1, [r7, #8]
 8012f7e:	4613      	mov	r3, r2
 8012f80:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8012f82:	68fb      	ldr	r3, [r7, #12]
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d105      	bne.n	8012f94 <udp_input_local_match+0x20>
 8012f88:	4b27      	ldr	r3, [pc, #156]	; (8013028 <udp_input_local_match+0xb4>)
 8012f8a:	2287      	movs	r2, #135	; 0x87
 8012f8c:	4927      	ldr	r1, [pc, #156]	; (801302c <udp_input_local_match+0xb8>)
 8012f8e:	4828      	ldr	r0, [pc, #160]	; (8013030 <udp_input_local_match+0xbc>)
 8012f90:	f003 fab8 	bl	8016504 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8012f94:	68bb      	ldr	r3, [r7, #8]
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d105      	bne.n	8012fa6 <udp_input_local_match+0x32>
 8012f9a:	4b23      	ldr	r3, [pc, #140]	; (8013028 <udp_input_local_match+0xb4>)
 8012f9c:	2288      	movs	r2, #136	; 0x88
 8012f9e:	4925      	ldr	r1, [pc, #148]	; (8013034 <udp_input_local_match+0xc0>)
 8012fa0:	4823      	ldr	r0, [pc, #140]	; (8013030 <udp_input_local_match+0xbc>)
 8012fa2:	f003 faaf 	bl	8016504 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012fa6:	68fb      	ldr	r3, [r7, #12]
 8012fa8:	7a1b      	ldrb	r3, [r3, #8]
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	d00b      	beq.n	8012fc6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012fae:	68fb      	ldr	r3, [r7, #12]
 8012fb0:	7a1a      	ldrb	r2, [r3, #8]
 8012fb2:	4b21      	ldr	r3, [pc, #132]	; (8013038 <udp_input_local_match+0xc4>)
 8012fb4:	685b      	ldr	r3, [r3, #4]
 8012fb6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012fba:	3301      	adds	r3, #1
 8012fbc:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012fbe:	429a      	cmp	r2, r3
 8012fc0:	d001      	beq.n	8012fc6 <udp_input_local_match+0x52>
    return 0;
 8012fc2:	2300      	movs	r3, #0
 8012fc4:	e02b      	b.n	801301e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8012fc6:	79fb      	ldrb	r3, [r7, #7]
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d018      	beq.n	8012ffe <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	d013      	beq.n	8012ffa <udp_input_local_match+0x86>
 8012fd2:	68fb      	ldr	r3, [r7, #12]
 8012fd4:	681b      	ldr	r3, [r3, #0]
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d00f      	beq.n	8012ffa <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012fda:	4b17      	ldr	r3, [pc, #92]	; (8013038 <udp_input_local_match+0xc4>)
 8012fdc:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012fe2:	d00a      	beq.n	8012ffa <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8012fe4:	68fb      	ldr	r3, [r7, #12]
 8012fe6:	681a      	ldr	r2, [r3, #0]
 8012fe8:	4b13      	ldr	r3, [pc, #76]	; (8013038 <udp_input_local_match+0xc4>)
 8012fea:	695b      	ldr	r3, [r3, #20]
 8012fec:	405a      	eors	r2, r3
 8012fee:	68bb      	ldr	r3, [r7, #8]
 8012ff0:	3308      	adds	r3, #8
 8012ff2:	681b      	ldr	r3, [r3, #0]
 8012ff4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d110      	bne.n	801301c <udp_input_local_match+0xa8>
          return 1;
 8012ffa:	2301      	movs	r3, #1
 8012ffc:	e00f      	b.n	801301e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012ffe:	68fb      	ldr	r3, [r7, #12]
 8013000:	2b00      	cmp	r3, #0
 8013002:	d009      	beq.n	8013018 <udp_input_local_match+0xa4>
 8013004:	68fb      	ldr	r3, [r7, #12]
 8013006:	681b      	ldr	r3, [r3, #0]
 8013008:	2b00      	cmp	r3, #0
 801300a:	d005      	beq.n	8013018 <udp_input_local_match+0xa4>
 801300c:	68fb      	ldr	r3, [r7, #12]
 801300e:	681a      	ldr	r2, [r3, #0]
 8013010:	4b09      	ldr	r3, [pc, #36]	; (8013038 <udp_input_local_match+0xc4>)
 8013012:	695b      	ldr	r3, [r3, #20]
 8013014:	429a      	cmp	r2, r3
 8013016:	d101      	bne.n	801301c <udp_input_local_match+0xa8>
        return 1;
 8013018:	2301      	movs	r3, #1
 801301a:	e000      	b.n	801301e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801301c:	2300      	movs	r3, #0
}
 801301e:	4618      	mov	r0, r3
 8013020:	3710      	adds	r7, #16
 8013022:	46bd      	mov	sp, r7
 8013024:	bd80      	pop	{r7, pc}
 8013026:	bf00      	nop
 8013028:	08019658 	.word	0x08019658
 801302c:	08019688 	.word	0x08019688
 8013030:	080196ac 	.word	0x080196ac
 8013034:	080196d4 	.word	0x080196d4
 8013038:	20007848 	.word	0x20007848

0801303c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801303c:	b590      	push	{r4, r7, lr}
 801303e:	b08d      	sub	sp, #52	; 0x34
 8013040:	af02      	add	r7, sp, #8
 8013042:	6078      	str	r0, [r7, #4]
 8013044:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8013046:	2300      	movs	r3, #0
 8013048:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	2b00      	cmp	r3, #0
 801304e:	d105      	bne.n	801305c <udp_input+0x20>
 8013050:	4b7c      	ldr	r3, [pc, #496]	; (8013244 <udp_input+0x208>)
 8013052:	22cf      	movs	r2, #207	; 0xcf
 8013054:	497c      	ldr	r1, [pc, #496]	; (8013248 <udp_input+0x20c>)
 8013056:	487d      	ldr	r0, [pc, #500]	; (801324c <udp_input+0x210>)
 8013058:	f003 fa54 	bl	8016504 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801305c:	683b      	ldr	r3, [r7, #0]
 801305e:	2b00      	cmp	r3, #0
 8013060:	d105      	bne.n	801306e <udp_input+0x32>
 8013062:	4b78      	ldr	r3, [pc, #480]	; (8013244 <udp_input+0x208>)
 8013064:	22d0      	movs	r2, #208	; 0xd0
 8013066:	497a      	ldr	r1, [pc, #488]	; (8013250 <udp_input+0x214>)
 8013068:	4878      	ldr	r0, [pc, #480]	; (801324c <udp_input+0x210>)
 801306a:	f003 fa4b 	bl	8016504 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	895b      	ldrh	r3, [r3, #10]
 8013072:	2b07      	cmp	r3, #7
 8013074:	d803      	bhi.n	801307e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8013076:	6878      	ldr	r0, [r7, #4]
 8013078:	f7fa f9fe 	bl	800d478 <pbuf_free>
    goto end;
 801307c:	e0de      	b.n	801323c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	685b      	ldr	r3, [r3, #4]
 8013082:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8013084:	4b73      	ldr	r3, [pc, #460]	; (8013254 <udp_input+0x218>)
 8013086:	695b      	ldr	r3, [r3, #20]
 8013088:	4a72      	ldr	r2, [pc, #456]	; (8013254 <udp_input+0x218>)
 801308a:	6812      	ldr	r2, [r2, #0]
 801308c:	4611      	mov	r1, r2
 801308e:	4618      	mov	r0, r3
 8013090:	f001 fc88 	bl	80149a4 <ip4_addr_isbroadcast_u32>
 8013094:	4603      	mov	r3, r0
 8013096:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8013098:	697b      	ldr	r3, [r7, #20]
 801309a:	881b      	ldrh	r3, [r3, #0]
 801309c:	b29b      	uxth	r3, r3
 801309e:	4618      	mov	r0, r3
 80130a0:	f7f8 feb6 	bl	800be10 <lwip_htons>
 80130a4:	4603      	mov	r3, r0
 80130a6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80130a8:	697b      	ldr	r3, [r7, #20]
 80130aa:	885b      	ldrh	r3, [r3, #2]
 80130ac:	b29b      	uxth	r3, r3
 80130ae:	4618      	mov	r0, r3
 80130b0:	f7f8 feae 	bl	800be10 <lwip_htons>
 80130b4:	4603      	mov	r3, r0
 80130b6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80130b8:	2300      	movs	r3, #0
 80130ba:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80130bc:	2300      	movs	r3, #0
 80130be:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80130c0:	2300      	movs	r3, #0
 80130c2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80130c4:	4b64      	ldr	r3, [pc, #400]	; (8013258 <udp_input+0x21c>)
 80130c6:	681b      	ldr	r3, [r3, #0]
 80130c8:	627b      	str	r3, [r7, #36]	; 0x24
 80130ca:	e054      	b.n	8013176 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80130cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130ce:	8a5b      	ldrh	r3, [r3, #18]
 80130d0:	89fa      	ldrh	r2, [r7, #14]
 80130d2:	429a      	cmp	r2, r3
 80130d4:	d14a      	bne.n	801316c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80130d6:	7cfb      	ldrb	r3, [r7, #19]
 80130d8:	461a      	mov	r2, r3
 80130da:	6839      	ldr	r1, [r7, #0]
 80130dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80130de:	f7ff ff49 	bl	8012f74 <udp_input_local_match>
 80130e2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d041      	beq.n	801316c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80130e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130ea:	7c1b      	ldrb	r3, [r3, #16]
 80130ec:	f003 0304 	and.w	r3, r3, #4
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d11d      	bne.n	8013130 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80130f4:	69fb      	ldr	r3, [r7, #28]
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d102      	bne.n	8013100 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80130fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130fc:	61fb      	str	r3, [r7, #28]
 80130fe:	e017      	b.n	8013130 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8013100:	7cfb      	ldrb	r3, [r7, #19]
 8013102:	2b00      	cmp	r3, #0
 8013104:	d014      	beq.n	8013130 <udp_input+0xf4>
 8013106:	4b53      	ldr	r3, [pc, #332]	; (8013254 <udp_input+0x218>)
 8013108:	695b      	ldr	r3, [r3, #20]
 801310a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801310e:	d10f      	bne.n	8013130 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8013110:	69fb      	ldr	r3, [r7, #28]
 8013112:	681a      	ldr	r2, [r3, #0]
 8013114:	683b      	ldr	r3, [r7, #0]
 8013116:	3304      	adds	r3, #4
 8013118:	681b      	ldr	r3, [r3, #0]
 801311a:	429a      	cmp	r2, r3
 801311c:	d008      	beq.n	8013130 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801311e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013120:	681a      	ldr	r2, [r3, #0]
 8013122:	683b      	ldr	r3, [r7, #0]
 8013124:	3304      	adds	r3, #4
 8013126:	681b      	ldr	r3, [r3, #0]
 8013128:	429a      	cmp	r2, r3
 801312a:	d101      	bne.n	8013130 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801312c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801312e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8013130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013132:	8a9b      	ldrh	r3, [r3, #20]
 8013134:	8a3a      	ldrh	r2, [r7, #16]
 8013136:	429a      	cmp	r2, r3
 8013138:	d118      	bne.n	801316c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801313a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801313c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801313e:	2b00      	cmp	r3, #0
 8013140:	d005      	beq.n	801314e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8013142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013144:	685a      	ldr	r2, [r3, #4]
 8013146:	4b43      	ldr	r3, [pc, #268]	; (8013254 <udp_input+0x218>)
 8013148:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801314a:	429a      	cmp	r2, r3
 801314c:	d10e      	bne.n	801316c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801314e:	6a3b      	ldr	r3, [r7, #32]
 8013150:	2b00      	cmp	r3, #0
 8013152:	d014      	beq.n	801317e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8013154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013156:	68da      	ldr	r2, [r3, #12]
 8013158:	6a3b      	ldr	r3, [r7, #32]
 801315a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801315c:	4b3e      	ldr	r3, [pc, #248]	; (8013258 <udp_input+0x21c>)
 801315e:	681a      	ldr	r2, [r3, #0]
 8013160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013162:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8013164:	4a3c      	ldr	r2, [pc, #240]	; (8013258 <udp_input+0x21c>)
 8013166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013168:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801316a:	e008      	b.n	801317e <udp_input+0x142>
      }
    }

    prev = pcb;
 801316c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801316e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013172:	68db      	ldr	r3, [r3, #12]
 8013174:	627b      	str	r3, [r7, #36]	; 0x24
 8013176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013178:	2b00      	cmp	r3, #0
 801317a:	d1a7      	bne.n	80130cc <udp_input+0x90>
 801317c:	e000      	b.n	8013180 <udp_input+0x144>
        break;
 801317e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8013180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013182:	2b00      	cmp	r3, #0
 8013184:	d101      	bne.n	801318a <udp_input+0x14e>
    pcb = uncon_pcb;
 8013186:	69fb      	ldr	r3, [r7, #28]
 8013188:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801318a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801318c:	2b00      	cmp	r3, #0
 801318e:	d002      	beq.n	8013196 <udp_input+0x15a>
    for_us = 1;
 8013190:	2301      	movs	r3, #1
 8013192:	76fb      	strb	r3, [r7, #27]
 8013194:	e00a      	b.n	80131ac <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8013196:	683b      	ldr	r3, [r7, #0]
 8013198:	3304      	adds	r3, #4
 801319a:	681a      	ldr	r2, [r3, #0]
 801319c:	4b2d      	ldr	r3, [pc, #180]	; (8013254 <udp_input+0x218>)
 801319e:	695b      	ldr	r3, [r3, #20]
 80131a0:	429a      	cmp	r2, r3
 80131a2:	bf0c      	ite	eq
 80131a4:	2301      	moveq	r3, #1
 80131a6:	2300      	movne	r3, #0
 80131a8:	b2db      	uxtb	r3, r3
 80131aa:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80131ac:	7efb      	ldrb	r3, [r7, #27]
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d041      	beq.n	8013236 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80131b2:	2108      	movs	r1, #8
 80131b4:	6878      	ldr	r0, [r7, #4]
 80131b6:	f7fa f8d9 	bl	800d36c <pbuf_remove_header>
 80131ba:	4603      	mov	r3, r0
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d00a      	beq.n	80131d6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80131c0:	4b20      	ldr	r3, [pc, #128]	; (8013244 <udp_input+0x208>)
 80131c2:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80131c6:	4925      	ldr	r1, [pc, #148]	; (801325c <udp_input+0x220>)
 80131c8:	4820      	ldr	r0, [pc, #128]	; (801324c <udp_input+0x210>)
 80131ca:	f003 f99b 	bl	8016504 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80131ce:	6878      	ldr	r0, [r7, #4]
 80131d0:	f7fa f952 	bl	800d478 <pbuf_free>
      goto end;
 80131d4:	e032      	b.n	801323c <udp_input+0x200>
    }

    if (pcb != NULL) {
 80131d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d012      	beq.n	8013202 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80131dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131de:	699b      	ldr	r3, [r3, #24]
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d00a      	beq.n	80131fa <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80131e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131e6:	699c      	ldr	r4, [r3, #24]
 80131e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131ea:	69d8      	ldr	r0, [r3, #28]
 80131ec:	8a3b      	ldrh	r3, [r7, #16]
 80131ee:	9300      	str	r3, [sp, #0]
 80131f0:	4b1b      	ldr	r3, [pc, #108]	; (8013260 <udp_input+0x224>)
 80131f2:	687a      	ldr	r2, [r7, #4]
 80131f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80131f6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80131f8:	e021      	b.n	801323e <udp_input+0x202>
        pbuf_free(p);
 80131fa:	6878      	ldr	r0, [r7, #4]
 80131fc:	f7fa f93c 	bl	800d478 <pbuf_free>
        goto end;
 8013200:	e01c      	b.n	801323c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8013202:	7cfb      	ldrb	r3, [r7, #19]
 8013204:	2b00      	cmp	r3, #0
 8013206:	d112      	bne.n	801322e <udp_input+0x1f2>
 8013208:	4b12      	ldr	r3, [pc, #72]	; (8013254 <udp_input+0x218>)
 801320a:	695b      	ldr	r3, [r3, #20]
 801320c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013210:	2be0      	cmp	r3, #224	; 0xe0
 8013212:	d00c      	beq.n	801322e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8013214:	4b0f      	ldr	r3, [pc, #60]	; (8013254 <udp_input+0x218>)
 8013216:	899b      	ldrh	r3, [r3, #12]
 8013218:	3308      	adds	r3, #8
 801321a:	b29b      	uxth	r3, r3
 801321c:	b21b      	sxth	r3, r3
 801321e:	4619      	mov	r1, r3
 8013220:	6878      	ldr	r0, [r7, #4]
 8013222:	f7fa f916 	bl	800d452 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8013226:	2103      	movs	r1, #3
 8013228:	6878      	ldr	r0, [r7, #4]
 801322a:	f001 f89b 	bl	8014364 <icmp_dest_unreach>
      pbuf_free(p);
 801322e:	6878      	ldr	r0, [r7, #4]
 8013230:	f7fa f922 	bl	800d478 <pbuf_free>
  return;
 8013234:	e003      	b.n	801323e <udp_input+0x202>
    pbuf_free(p);
 8013236:	6878      	ldr	r0, [r7, #4]
 8013238:	f7fa f91e 	bl	800d478 <pbuf_free>
  return;
 801323c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801323e:	372c      	adds	r7, #44	; 0x2c
 8013240:	46bd      	mov	sp, r7
 8013242:	bd90      	pop	{r4, r7, pc}
 8013244:	08019658 	.word	0x08019658
 8013248:	080196fc 	.word	0x080196fc
 801324c:	080196ac 	.word	0x080196ac
 8013250:	08019714 	.word	0x08019714
 8013254:	20007848 	.word	0x20007848
 8013258:	2000af74 	.word	0x2000af74
 801325c:	08019730 	.word	0x08019730
 8013260:	20007858 	.word	0x20007858

08013264 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013264:	b480      	push	{r7}
 8013266:	b085      	sub	sp, #20
 8013268:	af00      	add	r7, sp, #0
 801326a:	6078      	str	r0, [r7, #4]
 801326c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	2b00      	cmp	r3, #0
 8013272:	d01e      	beq.n	80132b2 <udp_netif_ip_addr_changed+0x4e>
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	681b      	ldr	r3, [r3, #0]
 8013278:	2b00      	cmp	r3, #0
 801327a:	d01a      	beq.n	80132b2 <udp_netif_ip_addr_changed+0x4e>
 801327c:	683b      	ldr	r3, [r7, #0]
 801327e:	2b00      	cmp	r3, #0
 8013280:	d017      	beq.n	80132b2 <udp_netif_ip_addr_changed+0x4e>
 8013282:	683b      	ldr	r3, [r7, #0]
 8013284:	681b      	ldr	r3, [r3, #0]
 8013286:	2b00      	cmp	r3, #0
 8013288:	d013      	beq.n	80132b2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801328a:	4b0d      	ldr	r3, [pc, #52]	; (80132c0 <udp_netif_ip_addr_changed+0x5c>)
 801328c:	681b      	ldr	r3, [r3, #0]
 801328e:	60fb      	str	r3, [r7, #12]
 8013290:	e00c      	b.n	80132ac <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8013292:	68fb      	ldr	r3, [r7, #12]
 8013294:	681a      	ldr	r2, [r3, #0]
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	681b      	ldr	r3, [r3, #0]
 801329a:	429a      	cmp	r2, r3
 801329c:	d103      	bne.n	80132a6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801329e:	683b      	ldr	r3, [r7, #0]
 80132a0:	681a      	ldr	r2, [r3, #0]
 80132a2:	68fb      	ldr	r3, [r7, #12]
 80132a4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80132a6:	68fb      	ldr	r3, [r7, #12]
 80132a8:	68db      	ldr	r3, [r3, #12]
 80132aa:	60fb      	str	r3, [r7, #12]
 80132ac:	68fb      	ldr	r3, [r7, #12]
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d1ef      	bne.n	8013292 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80132b2:	bf00      	nop
 80132b4:	3714      	adds	r7, #20
 80132b6:	46bd      	mov	sp, r7
 80132b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132bc:	4770      	bx	lr
 80132be:	bf00      	nop
 80132c0:	2000af74 	.word	0x2000af74

080132c4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80132c4:	b580      	push	{r7, lr}
 80132c6:	b082      	sub	sp, #8
 80132c8:	af00      	add	r7, sp, #0
 80132ca:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80132cc:	4915      	ldr	r1, [pc, #84]	; (8013324 <etharp_free_entry+0x60>)
 80132ce:	687a      	ldr	r2, [r7, #4]
 80132d0:	4613      	mov	r3, r2
 80132d2:	005b      	lsls	r3, r3, #1
 80132d4:	4413      	add	r3, r2
 80132d6:	00db      	lsls	r3, r3, #3
 80132d8:	440b      	add	r3, r1
 80132da:	681b      	ldr	r3, [r3, #0]
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d013      	beq.n	8013308 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80132e0:	4910      	ldr	r1, [pc, #64]	; (8013324 <etharp_free_entry+0x60>)
 80132e2:	687a      	ldr	r2, [r7, #4]
 80132e4:	4613      	mov	r3, r2
 80132e6:	005b      	lsls	r3, r3, #1
 80132e8:	4413      	add	r3, r2
 80132ea:	00db      	lsls	r3, r3, #3
 80132ec:	440b      	add	r3, r1
 80132ee:	681b      	ldr	r3, [r3, #0]
 80132f0:	4618      	mov	r0, r3
 80132f2:	f7fa f8c1 	bl	800d478 <pbuf_free>
    arp_table[i].q = NULL;
 80132f6:	490b      	ldr	r1, [pc, #44]	; (8013324 <etharp_free_entry+0x60>)
 80132f8:	687a      	ldr	r2, [r7, #4]
 80132fa:	4613      	mov	r3, r2
 80132fc:	005b      	lsls	r3, r3, #1
 80132fe:	4413      	add	r3, r2
 8013300:	00db      	lsls	r3, r3, #3
 8013302:	440b      	add	r3, r1
 8013304:	2200      	movs	r2, #0
 8013306:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8013308:	4906      	ldr	r1, [pc, #24]	; (8013324 <etharp_free_entry+0x60>)
 801330a:	687a      	ldr	r2, [r7, #4]
 801330c:	4613      	mov	r3, r2
 801330e:	005b      	lsls	r3, r3, #1
 8013310:	4413      	add	r3, r2
 8013312:	00db      	lsls	r3, r3, #3
 8013314:	440b      	add	r3, r1
 8013316:	3314      	adds	r3, #20
 8013318:	2200      	movs	r2, #0
 801331a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801331c:	bf00      	nop
 801331e:	3708      	adds	r7, #8
 8013320:	46bd      	mov	sp, r7
 8013322:	bd80      	pop	{r7, pc}
 8013324:	20004258 	.word	0x20004258

08013328 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8013328:	b580      	push	{r7, lr}
 801332a:	b082      	sub	sp, #8
 801332c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801332e:	2300      	movs	r3, #0
 8013330:	607b      	str	r3, [r7, #4]
 8013332:	e096      	b.n	8013462 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8013334:	494f      	ldr	r1, [pc, #316]	; (8013474 <etharp_tmr+0x14c>)
 8013336:	687a      	ldr	r2, [r7, #4]
 8013338:	4613      	mov	r3, r2
 801333a:	005b      	lsls	r3, r3, #1
 801333c:	4413      	add	r3, r2
 801333e:	00db      	lsls	r3, r3, #3
 8013340:	440b      	add	r3, r1
 8013342:	3314      	adds	r3, #20
 8013344:	781b      	ldrb	r3, [r3, #0]
 8013346:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8013348:	78fb      	ldrb	r3, [r7, #3]
 801334a:	2b00      	cmp	r3, #0
 801334c:	f000 8086 	beq.w	801345c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8013350:	4948      	ldr	r1, [pc, #288]	; (8013474 <etharp_tmr+0x14c>)
 8013352:	687a      	ldr	r2, [r7, #4]
 8013354:	4613      	mov	r3, r2
 8013356:	005b      	lsls	r3, r3, #1
 8013358:	4413      	add	r3, r2
 801335a:	00db      	lsls	r3, r3, #3
 801335c:	440b      	add	r3, r1
 801335e:	3312      	adds	r3, #18
 8013360:	881b      	ldrh	r3, [r3, #0]
 8013362:	3301      	adds	r3, #1
 8013364:	b298      	uxth	r0, r3
 8013366:	4943      	ldr	r1, [pc, #268]	; (8013474 <etharp_tmr+0x14c>)
 8013368:	687a      	ldr	r2, [r7, #4]
 801336a:	4613      	mov	r3, r2
 801336c:	005b      	lsls	r3, r3, #1
 801336e:	4413      	add	r3, r2
 8013370:	00db      	lsls	r3, r3, #3
 8013372:	440b      	add	r3, r1
 8013374:	3312      	adds	r3, #18
 8013376:	4602      	mov	r2, r0
 8013378:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801337a:	493e      	ldr	r1, [pc, #248]	; (8013474 <etharp_tmr+0x14c>)
 801337c:	687a      	ldr	r2, [r7, #4]
 801337e:	4613      	mov	r3, r2
 8013380:	005b      	lsls	r3, r3, #1
 8013382:	4413      	add	r3, r2
 8013384:	00db      	lsls	r3, r3, #3
 8013386:	440b      	add	r3, r1
 8013388:	3312      	adds	r3, #18
 801338a:	881b      	ldrh	r3, [r3, #0]
 801338c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8013390:	d215      	bcs.n	80133be <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013392:	4938      	ldr	r1, [pc, #224]	; (8013474 <etharp_tmr+0x14c>)
 8013394:	687a      	ldr	r2, [r7, #4]
 8013396:	4613      	mov	r3, r2
 8013398:	005b      	lsls	r3, r3, #1
 801339a:	4413      	add	r3, r2
 801339c:	00db      	lsls	r3, r3, #3
 801339e:	440b      	add	r3, r1
 80133a0:	3314      	adds	r3, #20
 80133a2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80133a4:	2b01      	cmp	r3, #1
 80133a6:	d10e      	bne.n	80133c6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80133a8:	4932      	ldr	r1, [pc, #200]	; (8013474 <etharp_tmr+0x14c>)
 80133aa:	687a      	ldr	r2, [r7, #4]
 80133ac:	4613      	mov	r3, r2
 80133ae:	005b      	lsls	r3, r3, #1
 80133b0:	4413      	add	r3, r2
 80133b2:	00db      	lsls	r3, r3, #3
 80133b4:	440b      	add	r3, r1
 80133b6:	3312      	adds	r3, #18
 80133b8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80133ba:	2b04      	cmp	r3, #4
 80133bc:	d903      	bls.n	80133c6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80133be:	6878      	ldr	r0, [r7, #4]
 80133c0:	f7ff ff80 	bl	80132c4 <etharp_free_entry>
 80133c4:	e04a      	b.n	801345c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80133c6:	492b      	ldr	r1, [pc, #172]	; (8013474 <etharp_tmr+0x14c>)
 80133c8:	687a      	ldr	r2, [r7, #4]
 80133ca:	4613      	mov	r3, r2
 80133cc:	005b      	lsls	r3, r3, #1
 80133ce:	4413      	add	r3, r2
 80133d0:	00db      	lsls	r3, r3, #3
 80133d2:	440b      	add	r3, r1
 80133d4:	3314      	adds	r3, #20
 80133d6:	781b      	ldrb	r3, [r3, #0]
 80133d8:	2b03      	cmp	r3, #3
 80133da:	d10a      	bne.n	80133f2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80133dc:	4925      	ldr	r1, [pc, #148]	; (8013474 <etharp_tmr+0x14c>)
 80133de:	687a      	ldr	r2, [r7, #4]
 80133e0:	4613      	mov	r3, r2
 80133e2:	005b      	lsls	r3, r3, #1
 80133e4:	4413      	add	r3, r2
 80133e6:	00db      	lsls	r3, r3, #3
 80133e8:	440b      	add	r3, r1
 80133ea:	3314      	adds	r3, #20
 80133ec:	2204      	movs	r2, #4
 80133ee:	701a      	strb	r2, [r3, #0]
 80133f0:	e034      	b.n	801345c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80133f2:	4920      	ldr	r1, [pc, #128]	; (8013474 <etharp_tmr+0x14c>)
 80133f4:	687a      	ldr	r2, [r7, #4]
 80133f6:	4613      	mov	r3, r2
 80133f8:	005b      	lsls	r3, r3, #1
 80133fa:	4413      	add	r3, r2
 80133fc:	00db      	lsls	r3, r3, #3
 80133fe:	440b      	add	r3, r1
 8013400:	3314      	adds	r3, #20
 8013402:	781b      	ldrb	r3, [r3, #0]
 8013404:	2b04      	cmp	r3, #4
 8013406:	d10a      	bne.n	801341e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8013408:	491a      	ldr	r1, [pc, #104]	; (8013474 <etharp_tmr+0x14c>)
 801340a:	687a      	ldr	r2, [r7, #4]
 801340c:	4613      	mov	r3, r2
 801340e:	005b      	lsls	r3, r3, #1
 8013410:	4413      	add	r3, r2
 8013412:	00db      	lsls	r3, r3, #3
 8013414:	440b      	add	r3, r1
 8013416:	3314      	adds	r3, #20
 8013418:	2202      	movs	r2, #2
 801341a:	701a      	strb	r2, [r3, #0]
 801341c:	e01e      	b.n	801345c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801341e:	4915      	ldr	r1, [pc, #84]	; (8013474 <etharp_tmr+0x14c>)
 8013420:	687a      	ldr	r2, [r7, #4]
 8013422:	4613      	mov	r3, r2
 8013424:	005b      	lsls	r3, r3, #1
 8013426:	4413      	add	r3, r2
 8013428:	00db      	lsls	r3, r3, #3
 801342a:	440b      	add	r3, r1
 801342c:	3314      	adds	r3, #20
 801342e:	781b      	ldrb	r3, [r3, #0]
 8013430:	2b01      	cmp	r3, #1
 8013432:	d113      	bne.n	801345c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8013434:	490f      	ldr	r1, [pc, #60]	; (8013474 <etharp_tmr+0x14c>)
 8013436:	687a      	ldr	r2, [r7, #4]
 8013438:	4613      	mov	r3, r2
 801343a:	005b      	lsls	r3, r3, #1
 801343c:	4413      	add	r3, r2
 801343e:	00db      	lsls	r3, r3, #3
 8013440:	440b      	add	r3, r1
 8013442:	3308      	adds	r3, #8
 8013444:	6818      	ldr	r0, [r3, #0]
 8013446:	687a      	ldr	r2, [r7, #4]
 8013448:	4613      	mov	r3, r2
 801344a:	005b      	lsls	r3, r3, #1
 801344c:	4413      	add	r3, r2
 801344e:	00db      	lsls	r3, r3, #3
 8013450:	4a08      	ldr	r2, [pc, #32]	; (8013474 <etharp_tmr+0x14c>)
 8013452:	4413      	add	r3, r2
 8013454:	3304      	adds	r3, #4
 8013456:	4619      	mov	r1, r3
 8013458:	f000 fe6e 	bl	8014138 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	3301      	adds	r3, #1
 8013460:	607b      	str	r3, [r7, #4]
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	2b09      	cmp	r3, #9
 8013466:	f77f af65 	ble.w	8013334 <etharp_tmr+0xc>
      }
    }
  }
}
 801346a:	bf00      	nop
 801346c:	bf00      	nop
 801346e:	3708      	adds	r7, #8
 8013470:	46bd      	mov	sp, r7
 8013472:	bd80      	pop	{r7, pc}
 8013474:	20004258 	.word	0x20004258

08013478 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8013478:	b580      	push	{r7, lr}
 801347a:	b08a      	sub	sp, #40	; 0x28
 801347c:	af00      	add	r7, sp, #0
 801347e:	60f8      	str	r0, [r7, #12]
 8013480:	460b      	mov	r3, r1
 8013482:	607a      	str	r2, [r7, #4]
 8013484:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8013486:	230a      	movs	r3, #10
 8013488:	84fb      	strh	r3, [r7, #38]	; 0x26
 801348a:	230a      	movs	r3, #10
 801348c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801348e:	230a      	movs	r3, #10
 8013490:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8013492:	2300      	movs	r3, #0
 8013494:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8013496:	230a      	movs	r3, #10
 8013498:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801349a:	2300      	movs	r3, #0
 801349c:	83bb      	strh	r3, [r7, #28]
 801349e:	2300      	movs	r3, #0
 80134a0:	837b      	strh	r3, [r7, #26]
 80134a2:	2300      	movs	r3, #0
 80134a4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80134a6:	2300      	movs	r3, #0
 80134a8:	843b      	strh	r3, [r7, #32]
 80134aa:	e0ae      	b.n	801360a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80134ac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80134b0:	49a6      	ldr	r1, [pc, #664]	; (801374c <etharp_find_entry+0x2d4>)
 80134b2:	4613      	mov	r3, r2
 80134b4:	005b      	lsls	r3, r3, #1
 80134b6:	4413      	add	r3, r2
 80134b8:	00db      	lsls	r3, r3, #3
 80134ba:	440b      	add	r3, r1
 80134bc:	3314      	adds	r3, #20
 80134be:	781b      	ldrb	r3, [r3, #0]
 80134c0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80134c2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80134c6:	2b0a      	cmp	r3, #10
 80134c8:	d105      	bne.n	80134d6 <etharp_find_entry+0x5e>
 80134ca:	7dfb      	ldrb	r3, [r7, #23]
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d102      	bne.n	80134d6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80134d0:	8c3b      	ldrh	r3, [r7, #32]
 80134d2:	847b      	strh	r3, [r7, #34]	; 0x22
 80134d4:	e095      	b.n	8013602 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80134d6:	7dfb      	ldrb	r3, [r7, #23]
 80134d8:	2b00      	cmp	r3, #0
 80134da:	f000 8092 	beq.w	8013602 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80134de:	7dfb      	ldrb	r3, [r7, #23]
 80134e0:	2b01      	cmp	r3, #1
 80134e2:	d009      	beq.n	80134f8 <etharp_find_entry+0x80>
 80134e4:	7dfb      	ldrb	r3, [r7, #23]
 80134e6:	2b01      	cmp	r3, #1
 80134e8:	d806      	bhi.n	80134f8 <etharp_find_entry+0x80>
 80134ea:	4b99      	ldr	r3, [pc, #612]	; (8013750 <etharp_find_entry+0x2d8>)
 80134ec:	f240 1223 	movw	r2, #291	; 0x123
 80134f0:	4998      	ldr	r1, [pc, #608]	; (8013754 <etharp_find_entry+0x2dc>)
 80134f2:	4899      	ldr	r0, [pc, #612]	; (8013758 <etharp_find_entry+0x2e0>)
 80134f4:	f003 f806 	bl	8016504 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80134f8:	68fb      	ldr	r3, [r7, #12]
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	d020      	beq.n	8013540 <etharp_find_entry+0xc8>
 80134fe:	68fb      	ldr	r3, [r7, #12]
 8013500:	6819      	ldr	r1, [r3, #0]
 8013502:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013506:	4891      	ldr	r0, [pc, #580]	; (801374c <etharp_find_entry+0x2d4>)
 8013508:	4613      	mov	r3, r2
 801350a:	005b      	lsls	r3, r3, #1
 801350c:	4413      	add	r3, r2
 801350e:	00db      	lsls	r3, r3, #3
 8013510:	4403      	add	r3, r0
 8013512:	3304      	adds	r3, #4
 8013514:	681b      	ldr	r3, [r3, #0]
 8013516:	4299      	cmp	r1, r3
 8013518:	d112      	bne.n	8013540 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	2b00      	cmp	r3, #0
 801351e:	d00c      	beq.n	801353a <etharp_find_entry+0xc2>
 8013520:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013524:	4989      	ldr	r1, [pc, #548]	; (801374c <etharp_find_entry+0x2d4>)
 8013526:	4613      	mov	r3, r2
 8013528:	005b      	lsls	r3, r3, #1
 801352a:	4413      	add	r3, r2
 801352c:	00db      	lsls	r3, r3, #3
 801352e:	440b      	add	r3, r1
 8013530:	3308      	adds	r3, #8
 8013532:	681b      	ldr	r3, [r3, #0]
 8013534:	687a      	ldr	r2, [r7, #4]
 8013536:	429a      	cmp	r2, r3
 8013538:	d102      	bne.n	8013540 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801353a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801353e:	e100      	b.n	8013742 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8013540:	7dfb      	ldrb	r3, [r7, #23]
 8013542:	2b01      	cmp	r3, #1
 8013544:	d140      	bne.n	80135c8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8013546:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801354a:	4980      	ldr	r1, [pc, #512]	; (801374c <etharp_find_entry+0x2d4>)
 801354c:	4613      	mov	r3, r2
 801354e:	005b      	lsls	r3, r3, #1
 8013550:	4413      	add	r3, r2
 8013552:	00db      	lsls	r3, r3, #3
 8013554:	440b      	add	r3, r1
 8013556:	681b      	ldr	r3, [r3, #0]
 8013558:	2b00      	cmp	r3, #0
 801355a:	d01a      	beq.n	8013592 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801355c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013560:	497a      	ldr	r1, [pc, #488]	; (801374c <etharp_find_entry+0x2d4>)
 8013562:	4613      	mov	r3, r2
 8013564:	005b      	lsls	r3, r3, #1
 8013566:	4413      	add	r3, r2
 8013568:	00db      	lsls	r3, r3, #3
 801356a:	440b      	add	r3, r1
 801356c:	3312      	adds	r3, #18
 801356e:	881b      	ldrh	r3, [r3, #0]
 8013570:	8bba      	ldrh	r2, [r7, #28]
 8013572:	429a      	cmp	r2, r3
 8013574:	d845      	bhi.n	8013602 <etharp_find_entry+0x18a>
            old_queue = i;
 8013576:	8c3b      	ldrh	r3, [r7, #32]
 8013578:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801357a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801357e:	4973      	ldr	r1, [pc, #460]	; (801374c <etharp_find_entry+0x2d4>)
 8013580:	4613      	mov	r3, r2
 8013582:	005b      	lsls	r3, r3, #1
 8013584:	4413      	add	r3, r2
 8013586:	00db      	lsls	r3, r3, #3
 8013588:	440b      	add	r3, r1
 801358a:	3312      	adds	r3, #18
 801358c:	881b      	ldrh	r3, [r3, #0]
 801358e:	83bb      	strh	r3, [r7, #28]
 8013590:	e037      	b.n	8013602 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8013592:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013596:	496d      	ldr	r1, [pc, #436]	; (801374c <etharp_find_entry+0x2d4>)
 8013598:	4613      	mov	r3, r2
 801359a:	005b      	lsls	r3, r3, #1
 801359c:	4413      	add	r3, r2
 801359e:	00db      	lsls	r3, r3, #3
 80135a0:	440b      	add	r3, r1
 80135a2:	3312      	adds	r3, #18
 80135a4:	881b      	ldrh	r3, [r3, #0]
 80135a6:	8b7a      	ldrh	r2, [r7, #26]
 80135a8:	429a      	cmp	r2, r3
 80135aa:	d82a      	bhi.n	8013602 <etharp_find_entry+0x18a>
            old_pending = i;
 80135ac:	8c3b      	ldrh	r3, [r7, #32]
 80135ae:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80135b0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80135b4:	4965      	ldr	r1, [pc, #404]	; (801374c <etharp_find_entry+0x2d4>)
 80135b6:	4613      	mov	r3, r2
 80135b8:	005b      	lsls	r3, r3, #1
 80135ba:	4413      	add	r3, r2
 80135bc:	00db      	lsls	r3, r3, #3
 80135be:	440b      	add	r3, r1
 80135c0:	3312      	adds	r3, #18
 80135c2:	881b      	ldrh	r3, [r3, #0]
 80135c4:	837b      	strh	r3, [r7, #26]
 80135c6:	e01c      	b.n	8013602 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80135c8:	7dfb      	ldrb	r3, [r7, #23]
 80135ca:	2b01      	cmp	r3, #1
 80135cc:	d919      	bls.n	8013602 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80135ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80135d2:	495e      	ldr	r1, [pc, #376]	; (801374c <etharp_find_entry+0x2d4>)
 80135d4:	4613      	mov	r3, r2
 80135d6:	005b      	lsls	r3, r3, #1
 80135d8:	4413      	add	r3, r2
 80135da:	00db      	lsls	r3, r3, #3
 80135dc:	440b      	add	r3, r1
 80135de:	3312      	adds	r3, #18
 80135e0:	881b      	ldrh	r3, [r3, #0]
 80135e2:	8b3a      	ldrh	r2, [r7, #24]
 80135e4:	429a      	cmp	r2, r3
 80135e6:	d80c      	bhi.n	8013602 <etharp_find_entry+0x18a>
            old_stable = i;
 80135e8:	8c3b      	ldrh	r3, [r7, #32]
 80135ea:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80135ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80135f0:	4956      	ldr	r1, [pc, #344]	; (801374c <etharp_find_entry+0x2d4>)
 80135f2:	4613      	mov	r3, r2
 80135f4:	005b      	lsls	r3, r3, #1
 80135f6:	4413      	add	r3, r2
 80135f8:	00db      	lsls	r3, r3, #3
 80135fa:	440b      	add	r3, r1
 80135fc:	3312      	adds	r3, #18
 80135fe:	881b      	ldrh	r3, [r3, #0]
 8013600:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013602:	8c3b      	ldrh	r3, [r7, #32]
 8013604:	3301      	adds	r3, #1
 8013606:	b29b      	uxth	r3, r3
 8013608:	843b      	strh	r3, [r7, #32]
 801360a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801360e:	2b09      	cmp	r3, #9
 8013610:	f77f af4c 	ble.w	80134ac <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8013614:	7afb      	ldrb	r3, [r7, #11]
 8013616:	f003 0302 	and.w	r3, r3, #2
 801361a:	2b00      	cmp	r3, #0
 801361c:	d108      	bne.n	8013630 <etharp_find_entry+0x1b8>
 801361e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013622:	2b0a      	cmp	r3, #10
 8013624:	d107      	bne.n	8013636 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8013626:	7afb      	ldrb	r3, [r7, #11]
 8013628:	f003 0301 	and.w	r3, r3, #1
 801362c:	2b00      	cmp	r3, #0
 801362e:	d102      	bne.n	8013636 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8013630:	f04f 33ff 	mov.w	r3, #4294967295
 8013634:	e085      	b.n	8013742 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8013636:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801363a:	2b09      	cmp	r3, #9
 801363c:	dc02      	bgt.n	8013644 <etharp_find_entry+0x1cc>
    i = empty;
 801363e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013640:	843b      	strh	r3, [r7, #32]
 8013642:	e039      	b.n	80136b8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8013644:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8013648:	2b09      	cmp	r3, #9
 801364a:	dc14      	bgt.n	8013676 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801364c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801364e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8013650:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013654:	493d      	ldr	r1, [pc, #244]	; (801374c <etharp_find_entry+0x2d4>)
 8013656:	4613      	mov	r3, r2
 8013658:	005b      	lsls	r3, r3, #1
 801365a:	4413      	add	r3, r2
 801365c:	00db      	lsls	r3, r3, #3
 801365e:	440b      	add	r3, r1
 8013660:	681b      	ldr	r3, [r3, #0]
 8013662:	2b00      	cmp	r3, #0
 8013664:	d018      	beq.n	8013698 <etharp_find_entry+0x220>
 8013666:	4b3a      	ldr	r3, [pc, #232]	; (8013750 <etharp_find_entry+0x2d8>)
 8013668:	f240 126d 	movw	r2, #365	; 0x16d
 801366c:	493b      	ldr	r1, [pc, #236]	; (801375c <etharp_find_entry+0x2e4>)
 801366e:	483a      	ldr	r0, [pc, #232]	; (8013758 <etharp_find_entry+0x2e0>)
 8013670:	f002 ff48 	bl	8016504 <iprintf>
 8013674:	e010      	b.n	8013698 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8013676:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801367a:	2b09      	cmp	r3, #9
 801367c:	dc02      	bgt.n	8013684 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801367e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013680:	843b      	strh	r3, [r7, #32]
 8013682:	e009      	b.n	8013698 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8013684:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8013688:	2b09      	cmp	r3, #9
 801368a:	dc02      	bgt.n	8013692 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801368c:	8bfb      	ldrh	r3, [r7, #30]
 801368e:	843b      	strh	r3, [r7, #32]
 8013690:	e002      	b.n	8013698 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8013692:	f04f 33ff 	mov.w	r3, #4294967295
 8013696:	e054      	b.n	8013742 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013698:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801369c:	2b09      	cmp	r3, #9
 801369e:	dd06      	ble.n	80136ae <etharp_find_entry+0x236>
 80136a0:	4b2b      	ldr	r3, [pc, #172]	; (8013750 <etharp_find_entry+0x2d8>)
 80136a2:	f240 127f 	movw	r2, #383	; 0x17f
 80136a6:	492e      	ldr	r1, [pc, #184]	; (8013760 <etharp_find_entry+0x2e8>)
 80136a8:	482b      	ldr	r0, [pc, #172]	; (8013758 <etharp_find_entry+0x2e0>)
 80136aa:	f002 ff2b 	bl	8016504 <iprintf>
    etharp_free_entry(i);
 80136ae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80136b2:	4618      	mov	r0, r3
 80136b4:	f7ff fe06 	bl	80132c4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80136b8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80136bc:	2b09      	cmp	r3, #9
 80136be:	dd06      	ble.n	80136ce <etharp_find_entry+0x256>
 80136c0:	4b23      	ldr	r3, [pc, #140]	; (8013750 <etharp_find_entry+0x2d8>)
 80136c2:	f240 1283 	movw	r2, #387	; 0x183
 80136c6:	4926      	ldr	r1, [pc, #152]	; (8013760 <etharp_find_entry+0x2e8>)
 80136c8:	4823      	ldr	r0, [pc, #140]	; (8013758 <etharp_find_entry+0x2e0>)
 80136ca:	f002 ff1b 	bl	8016504 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80136ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80136d2:	491e      	ldr	r1, [pc, #120]	; (801374c <etharp_find_entry+0x2d4>)
 80136d4:	4613      	mov	r3, r2
 80136d6:	005b      	lsls	r3, r3, #1
 80136d8:	4413      	add	r3, r2
 80136da:	00db      	lsls	r3, r3, #3
 80136dc:	440b      	add	r3, r1
 80136de:	3314      	adds	r3, #20
 80136e0:	781b      	ldrb	r3, [r3, #0]
 80136e2:	2b00      	cmp	r3, #0
 80136e4:	d006      	beq.n	80136f4 <etharp_find_entry+0x27c>
 80136e6:	4b1a      	ldr	r3, [pc, #104]	; (8013750 <etharp_find_entry+0x2d8>)
 80136e8:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80136ec:	491d      	ldr	r1, [pc, #116]	; (8013764 <etharp_find_entry+0x2ec>)
 80136ee:	481a      	ldr	r0, [pc, #104]	; (8013758 <etharp_find_entry+0x2e0>)
 80136f0:	f002 ff08 	bl	8016504 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80136f4:	68fb      	ldr	r3, [r7, #12]
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d00b      	beq.n	8013712 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80136fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80136fe:	68fb      	ldr	r3, [r7, #12]
 8013700:	6819      	ldr	r1, [r3, #0]
 8013702:	4812      	ldr	r0, [pc, #72]	; (801374c <etharp_find_entry+0x2d4>)
 8013704:	4613      	mov	r3, r2
 8013706:	005b      	lsls	r3, r3, #1
 8013708:	4413      	add	r3, r2
 801370a:	00db      	lsls	r3, r3, #3
 801370c:	4403      	add	r3, r0
 801370e:	3304      	adds	r3, #4
 8013710:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8013712:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013716:	490d      	ldr	r1, [pc, #52]	; (801374c <etharp_find_entry+0x2d4>)
 8013718:	4613      	mov	r3, r2
 801371a:	005b      	lsls	r3, r3, #1
 801371c:	4413      	add	r3, r2
 801371e:	00db      	lsls	r3, r3, #3
 8013720:	440b      	add	r3, r1
 8013722:	3312      	adds	r3, #18
 8013724:	2200      	movs	r2, #0
 8013726:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8013728:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801372c:	4907      	ldr	r1, [pc, #28]	; (801374c <etharp_find_entry+0x2d4>)
 801372e:	4613      	mov	r3, r2
 8013730:	005b      	lsls	r3, r3, #1
 8013732:	4413      	add	r3, r2
 8013734:	00db      	lsls	r3, r3, #3
 8013736:	440b      	add	r3, r1
 8013738:	3308      	adds	r3, #8
 801373a:	687a      	ldr	r2, [r7, #4]
 801373c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801373e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8013742:	4618      	mov	r0, r3
 8013744:	3728      	adds	r7, #40	; 0x28
 8013746:	46bd      	mov	sp, r7
 8013748:	bd80      	pop	{r7, pc}
 801374a:	bf00      	nop
 801374c:	20004258 	.word	0x20004258
 8013750:	080199bc 	.word	0x080199bc
 8013754:	080199f4 	.word	0x080199f4
 8013758:	08019a34 	.word	0x08019a34
 801375c:	08019a5c 	.word	0x08019a5c
 8013760:	08019a74 	.word	0x08019a74
 8013764:	08019a88 	.word	0x08019a88

08013768 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8013768:	b580      	push	{r7, lr}
 801376a:	b088      	sub	sp, #32
 801376c:	af02      	add	r7, sp, #8
 801376e:	60f8      	str	r0, [r7, #12]
 8013770:	60b9      	str	r1, [r7, #8]
 8013772:	607a      	str	r2, [r7, #4]
 8013774:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8013776:	68fb      	ldr	r3, [r7, #12]
 8013778:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801377c:	2b06      	cmp	r3, #6
 801377e:	d006      	beq.n	801378e <etharp_update_arp_entry+0x26>
 8013780:	4b48      	ldr	r3, [pc, #288]	; (80138a4 <etharp_update_arp_entry+0x13c>)
 8013782:	f240 12a9 	movw	r2, #425	; 0x1a9
 8013786:	4948      	ldr	r1, [pc, #288]	; (80138a8 <etharp_update_arp_entry+0x140>)
 8013788:	4848      	ldr	r0, [pc, #288]	; (80138ac <etharp_update_arp_entry+0x144>)
 801378a:	f002 febb 	bl	8016504 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801378e:	68bb      	ldr	r3, [r7, #8]
 8013790:	2b00      	cmp	r3, #0
 8013792:	d012      	beq.n	80137ba <etharp_update_arp_entry+0x52>
 8013794:	68bb      	ldr	r3, [r7, #8]
 8013796:	681b      	ldr	r3, [r3, #0]
 8013798:	2b00      	cmp	r3, #0
 801379a:	d00e      	beq.n	80137ba <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801379c:	68bb      	ldr	r3, [r7, #8]
 801379e:	681b      	ldr	r3, [r3, #0]
 80137a0:	68f9      	ldr	r1, [r7, #12]
 80137a2:	4618      	mov	r0, r3
 80137a4:	f001 f8fe 	bl	80149a4 <ip4_addr_isbroadcast_u32>
 80137a8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d105      	bne.n	80137ba <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80137ae:	68bb      	ldr	r3, [r7, #8]
 80137b0:	681b      	ldr	r3, [r3, #0]
 80137b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80137b6:	2be0      	cmp	r3, #224	; 0xe0
 80137b8:	d102      	bne.n	80137c0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80137ba:	f06f 030f 	mvn.w	r3, #15
 80137be:	e06c      	b.n	801389a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80137c0:	78fb      	ldrb	r3, [r7, #3]
 80137c2:	68fa      	ldr	r2, [r7, #12]
 80137c4:	4619      	mov	r1, r3
 80137c6:	68b8      	ldr	r0, [r7, #8]
 80137c8:	f7ff fe56 	bl	8013478 <etharp_find_entry>
 80137cc:	4603      	mov	r3, r0
 80137ce:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80137d0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	da02      	bge.n	80137de <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80137d8:	8afb      	ldrh	r3, [r7, #22]
 80137da:	b25b      	sxtb	r3, r3
 80137dc:	e05d      	b.n	801389a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80137de:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80137e2:	4933      	ldr	r1, [pc, #204]	; (80138b0 <etharp_update_arp_entry+0x148>)
 80137e4:	4613      	mov	r3, r2
 80137e6:	005b      	lsls	r3, r3, #1
 80137e8:	4413      	add	r3, r2
 80137ea:	00db      	lsls	r3, r3, #3
 80137ec:	440b      	add	r3, r1
 80137ee:	3314      	adds	r3, #20
 80137f0:	2202      	movs	r2, #2
 80137f2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80137f4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80137f8:	492d      	ldr	r1, [pc, #180]	; (80138b0 <etharp_update_arp_entry+0x148>)
 80137fa:	4613      	mov	r3, r2
 80137fc:	005b      	lsls	r3, r3, #1
 80137fe:	4413      	add	r3, r2
 8013800:	00db      	lsls	r3, r3, #3
 8013802:	440b      	add	r3, r1
 8013804:	3308      	adds	r3, #8
 8013806:	68fa      	ldr	r2, [r7, #12]
 8013808:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801380a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801380e:	4613      	mov	r3, r2
 8013810:	005b      	lsls	r3, r3, #1
 8013812:	4413      	add	r3, r2
 8013814:	00db      	lsls	r3, r3, #3
 8013816:	3308      	adds	r3, #8
 8013818:	4a25      	ldr	r2, [pc, #148]	; (80138b0 <etharp_update_arp_entry+0x148>)
 801381a:	4413      	add	r3, r2
 801381c:	3304      	adds	r3, #4
 801381e:	2206      	movs	r2, #6
 8013820:	6879      	ldr	r1, [r7, #4]
 8013822:	4618      	mov	r0, r3
 8013824:	f002 fe58 	bl	80164d8 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8013828:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801382c:	4920      	ldr	r1, [pc, #128]	; (80138b0 <etharp_update_arp_entry+0x148>)
 801382e:	4613      	mov	r3, r2
 8013830:	005b      	lsls	r3, r3, #1
 8013832:	4413      	add	r3, r2
 8013834:	00db      	lsls	r3, r3, #3
 8013836:	440b      	add	r3, r1
 8013838:	3312      	adds	r3, #18
 801383a:	2200      	movs	r2, #0
 801383c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801383e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013842:	491b      	ldr	r1, [pc, #108]	; (80138b0 <etharp_update_arp_entry+0x148>)
 8013844:	4613      	mov	r3, r2
 8013846:	005b      	lsls	r3, r3, #1
 8013848:	4413      	add	r3, r2
 801384a:	00db      	lsls	r3, r3, #3
 801384c:	440b      	add	r3, r1
 801384e:	681b      	ldr	r3, [r3, #0]
 8013850:	2b00      	cmp	r3, #0
 8013852:	d021      	beq.n	8013898 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8013854:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013858:	4915      	ldr	r1, [pc, #84]	; (80138b0 <etharp_update_arp_entry+0x148>)
 801385a:	4613      	mov	r3, r2
 801385c:	005b      	lsls	r3, r3, #1
 801385e:	4413      	add	r3, r2
 8013860:	00db      	lsls	r3, r3, #3
 8013862:	440b      	add	r3, r1
 8013864:	681b      	ldr	r3, [r3, #0]
 8013866:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8013868:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801386c:	4910      	ldr	r1, [pc, #64]	; (80138b0 <etharp_update_arp_entry+0x148>)
 801386e:	4613      	mov	r3, r2
 8013870:	005b      	lsls	r3, r3, #1
 8013872:	4413      	add	r3, r2
 8013874:	00db      	lsls	r3, r3, #3
 8013876:	440b      	add	r3, r1
 8013878:	2200      	movs	r2, #0
 801387a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801387c:	68fb      	ldr	r3, [r7, #12]
 801387e:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8013882:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013886:	9300      	str	r3, [sp, #0]
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	6939      	ldr	r1, [r7, #16]
 801388c:	68f8      	ldr	r0, [r7, #12]
 801388e:	f001 ff91 	bl	80157b4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8013892:	6938      	ldr	r0, [r7, #16]
 8013894:	f7f9 fdf0 	bl	800d478 <pbuf_free>
  }
  return ERR_OK;
 8013898:	2300      	movs	r3, #0
}
 801389a:	4618      	mov	r0, r3
 801389c:	3718      	adds	r7, #24
 801389e:	46bd      	mov	sp, r7
 80138a0:	bd80      	pop	{r7, pc}
 80138a2:	bf00      	nop
 80138a4:	080199bc 	.word	0x080199bc
 80138a8:	08019ab4 	.word	0x08019ab4
 80138ac:	08019a34 	.word	0x08019a34
 80138b0:	20004258 	.word	0x20004258

080138b4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80138b4:	b580      	push	{r7, lr}
 80138b6:	b084      	sub	sp, #16
 80138b8:	af00      	add	r7, sp, #0
 80138ba:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80138bc:	2300      	movs	r3, #0
 80138be:	60fb      	str	r3, [r7, #12]
 80138c0:	e01e      	b.n	8013900 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80138c2:	4913      	ldr	r1, [pc, #76]	; (8013910 <etharp_cleanup_netif+0x5c>)
 80138c4:	68fa      	ldr	r2, [r7, #12]
 80138c6:	4613      	mov	r3, r2
 80138c8:	005b      	lsls	r3, r3, #1
 80138ca:	4413      	add	r3, r2
 80138cc:	00db      	lsls	r3, r3, #3
 80138ce:	440b      	add	r3, r1
 80138d0:	3314      	adds	r3, #20
 80138d2:	781b      	ldrb	r3, [r3, #0]
 80138d4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80138d6:	7afb      	ldrb	r3, [r7, #11]
 80138d8:	2b00      	cmp	r3, #0
 80138da:	d00e      	beq.n	80138fa <etharp_cleanup_netif+0x46>
 80138dc:	490c      	ldr	r1, [pc, #48]	; (8013910 <etharp_cleanup_netif+0x5c>)
 80138de:	68fa      	ldr	r2, [r7, #12]
 80138e0:	4613      	mov	r3, r2
 80138e2:	005b      	lsls	r3, r3, #1
 80138e4:	4413      	add	r3, r2
 80138e6:	00db      	lsls	r3, r3, #3
 80138e8:	440b      	add	r3, r1
 80138ea:	3308      	adds	r3, #8
 80138ec:	681b      	ldr	r3, [r3, #0]
 80138ee:	687a      	ldr	r2, [r7, #4]
 80138f0:	429a      	cmp	r2, r3
 80138f2:	d102      	bne.n	80138fa <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80138f4:	68f8      	ldr	r0, [r7, #12]
 80138f6:	f7ff fce5 	bl	80132c4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80138fa:	68fb      	ldr	r3, [r7, #12]
 80138fc:	3301      	adds	r3, #1
 80138fe:	60fb      	str	r3, [r7, #12]
 8013900:	68fb      	ldr	r3, [r7, #12]
 8013902:	2b09      	cmp	r3, #9
 8013904:	dddd      	ble.n	80138c2 <etharp_cleanup_netif+0xe>
    }
  }
}
 8013906:	bf00      	nop
 8013908:	bf00      	nop
 801390a:	3710      	adds	r7, #16
 801390c:	46bd      	mov	sp, r7
 801390e:	bd80      	pop	{r7, pc}
 8013910:	20004258 	.word	0x20004258

08013914 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8013914:	b5b0      	push	{r4, r5, r7, lr}
 8013916:	b08a      	sub	sp, #40	; 0x28
 8013918:	af04      	add	r7, sp, #16
 801391a:	6078      	str	r0, [r7, #4]
 801391c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801391e:	683b      	ldr	r3, [r7, #0]
 8013920:	2b00      	cmp	r3, #0
 8013922:	d107      	bne.n	8013934 <etharp_input+0x20>
 8013924:	4b3d      	ldr	r3, [pc, #244]	; (8013a1c <etharp_input+0x108>)
 8013926:	f240 228a 	movw	r2, #650	; 0x28a
 801392a:	493d      	ldr	r1, [pc, #244]	; (8013a20 <etharp_input+0x10c>)
 801392c:	483d      	ldr	r0, [pc, #244]	; (8013a24 <etharp_input+0x110>)
 801392e:	f002 fde9 	bl	8016504 <iprintf>
 8013932:	e06f      	b.n	8013a14 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	685b      	ldr	r3, [r3, #4]
 8013938:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801393a:	693b      	ldr	r3, [r7, #16]
 801393c:	881b      	ldrh	r3, [r3, #0]
 801393e:	b29b      	uxth	r3, r3
 8013940:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013944:	d10c      	bne.n	8013960 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8013946:	693b      	ldr	r3, [r7, #16]
 8013948:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801394a:	2b06      	cmp	r3, #6
 801394c:	d108      	bne.n	8013960 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801394e:	693b      	ldr	r3, [r7, #16]
 8013950:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8013952:	2b04      	cmp	r3, #4
 8013954:	d104      	bne.n	8013960 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8013956:	693b      	ldr	r3, [r7, #16]
 8013958:	885b      	ldrh	r3, [r3, #2]
 801395a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801395c:	2b08      	cmp	r3, #8
 801395e:	d003      	beq.n	8013968 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8013960:	6878      	ldr	r0, [r7, #4]
 8013962:	f7f9 fd89 	bl	800d478 <pbuf_free>
    return;
 8013966:	e055      	b.n	8013a14 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8013968:	693b      	ldr	r3, [r7, #16]
 801396a:	330e      	adds	r3, #14
 801396c:	681b      	ldr	r3, [r3, #0]
 801396e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8013970:	693b      	ldr	r3, [r7, #16]
 8013972:	3318      	adds	r3, #24
 8013974:	681b      	ldr	r3, [r3, #0]
 8013976:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013978:	683b      	ldr	r3, [r7, #0]
 801397a:	3304      	adds	r3, #4
 801397c:	681b      	ldr	r3, [r3, #0]
 801397e:	2b00      	cmp	r3, #0
 8013980:	d102      	bne.n	8013988 <etharp_input+0x74>
    for_us = 0;
 8013982:	2300      	movs	r3, #0
 8013984:	75fb      	strb	r3, [r7, #23]
 8013986:	e009      	b.n	801399c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8013988:	68ba      	ldr	r2, [r7, #8]
 801398a:	683b      	ldr	r3, [r7, #0]
 801398c:	3304      	adds	r3, #4
 801398e:	681b      	ldr	r3, [r3, #0]
 8013990:	429a      	cmp	r2, r3
 8013992:	bf0c      	ite	eq
 8013994:	2301      	moveq	r3, #1
 8013996:	2300      	movne	r3, #0
 8013998:	b2db      	uxtb	r3, r3
 801399a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801399c:	693b      	ldr	r3, [r7, #16]
 801399e:	f103 0208 	add.w	r2, r3, #8
 80139a2:	7dfb      	ldrb	r3, [r7, #23]
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d001      	beq.n	80139ac <etharp_input+0x98>
 80139a8:	2301      	movs	r3, #1
 80139aa:	e000      	b.n	80139ae <etharp_input+0x9a>
 80139ac:	2302      	movs	r3, #2
 80139ae:	f107 010c 	add.w	r1, r7, #12
 80139b2:	6838      	ldr	r0, [r7, #0]
 80139b4:	f7ff fed8 	bl	8013768 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80139b8:	693b      	ldr	r3, [r7, #16]
 80139ba:	88db      	ldrh	r3, [r3, #6]
 80139bc:	b29b      	uxth	r3, r3
 80139be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80139c2:	d003      	beq.n	80139cc <etharp_input+0xb8>
 80139c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80139c8:	d01e      	beq.n	8013a08 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80139ca:	e020      	b.n	8013a0e <etharp_input+0xfa>
      if (for_us) {
 80139cc:	7dfb      	ldrb	r3, [r7, #23]
 80139ce:	2b00      	cmp	r3, #0
 80139d0:	d01c      	beq.n	8013a0c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80139d2:	683b      	ldr	r3, [r7, #0]
 80139d4:	f103 0022 	add.w	r0, r3, #34	; 0x22
 80139d8:	693b      	ldr	r3, [r7, #16]
 80139da:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80139de:	683b      	ldr	r3, [r7, #0]
 80139e0:	f103 0522 	add.w	r5, r3, #34	; 0x22
 80139e4:	683b      	ldr	r3, [r7, #0]
 80139e6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80139e8:	693a      	ldr	r2, [r7, #16]
 80139ea:	3208      	adds	r2, #8
        etharp_raw(netif,
 80139ec:	2102      	movs	r1, #2
 80139ee:	9103      	str	r1, [sp, #12]
 80139f0:	f107 010c 	add.w	r1, r7, #12
 80139f4:	9102      	str	r1, [sp, #8]
 80139f6:	9201      	str	r2, [sp, #4]
 80139f8:	9300      	str	r3, [sp, #0]
 80139fa:	462b      	mov	r3, r5
 80139fc:	4622      	mov	r2, r4
 80139fe:	4601      	mov	r1, r0
 8013a00:	6838      	ldr	r0, [r7, #0]
 8013a02:	f000 faeb 	bl	8013fdc <etharp_raw>
      break;
 8013a06:	e001      	b.n	8013a0c <etharp_input+0xf8>
      break;
 8013a08:	bf00      	nop
 8013a0a:	e000      	b.n	8013a0e <etharp_input+0xfa>
      break;
 8013a0c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8013a0e:	6878      	ldr	r0, [r7, #4]
 8013a10:	f7f9 fd32 	bl	800d478 <pbuf_free>
}
 8013a14:	3718      	adds	r7, #24
 8013a16:	46bd      	mov	sp, r7
 8013a18:	bdb0      	pop	{r4, r5, r7, pc}
 8013a1a:	bf00      	nop
 8013a1c:	080199bc 	.word	0x080199bc
 8013a20:	08019b0c 	.word	0x08019b0c
 8013a24:	08019a34 	.word	0x08019a34

08013a28 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8013a28:	b580      	push	{r7, lr}
 8013a2a:	b086      	sub	sp, #24
 8013a2c:	af02      	add	r7, sp, #8
 8013a2e:	60f8      	str	r0, [r7, #12]
 8013a30:	60b9      	str	r1, [r7, #8]
 8013a32:	4613      	mov	r3, r2
 8013a34:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8013a36:	79fa      	ldrb	r2, [r7, #7]
 8013a38:	4944      	ldr	r1, [pc, #272]	; (8013b4c <etharp_output_to_arp_index+0x124>)
 8013a3a:	4613      	mov	r3, r2
 8013a3c:	005b      	lsls	r3, r3, #1
 8013a3e:	4413      	add	r3, r2
 8013a40:	00db      	lsls	r3, r3, #3
 8013a42:	440b      	add	r3, r1
 8013a44:	3314      	adds	r3, #20
 8013a46:	781b      	ldrb	r3, [r3, #0]
 8013a48:	2b01      	cmp	r3, #1
 8013a4a:	d806      	bhi.n	8013a5a <etharp_output_to_arp_index+0x32>
 8013a4c:	4b40      	ldr	r3, [pc, #256]	; (8013b50 <etharp_output_to_arp_index+0x128>)
 8013a4e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8013a52:	4940      	ldr	r1, [pc, #256]	; (8013b54 <etharp_output_to_arp_index+0x12c>)
 8013a54:	4840      	ldr	r0, [pc, #256]	; (8013b58 <etharp_output_to_arp_index+0x130>)
 8013a56:	f002 fd55 	bl	8016504 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8013a5a:	79fa      	ldrb	r2, [r7, #7]
 8013a5c:	493b      	ldr	r1, [pc, #236]	; (8013b4c <etharp_output_to_arp_index+0x124>)
 8013a5e:	4613      	mov	r3, r2
 8013a60:	005b      	lsls	r3, r3, #1
 8013a62:	4413      	add	r3, r2
 8013a64:	00db      	lsls	r3, r3, #3
 8013a66:	440b      	add	r3, r1
 8013a68:	3314      	adds	r3, #20
 8013a6a:	781b      	ldrb	r3, [r3, #0]
 8013a6c:	2b02      	cmp	r3, #2
 8013a6e:	d153      	bne.n	8013b18 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8013a70:	79fa      	ldrb	r2, [r7, #7]
 8013a72:	4936      	ldr	r1, [pc, #216]	; (8013b4c <etharp_output_to_arp_index+0x124>)
 8013a74:	4613      	mov	r3, r2
 8013a76:	005b      	lsls	r3, r3, #1
 8013a78:	4413      	add	r3, r2
 8013a7a:	00db      	lsls	r3, r3, #3
 8013a7c:	440b      	add	r3, r1
 8013a7e:	3312      	adds	r3, #18
 8013a80:	881b      	ldrh	r3, [r3, #0]
 8013a82:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8013a86:	d919      	bls.n	8013abc <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8013a88:	79fa      	ldrb	r2, [r7, #7]
 8013a8a:	4613      	mov	r3, r2
 8013a8c:	005b      	lsls	r3, r3, #1
 8013a8e:	4413      	add	r3, r2
 8013a90:	00db      	lsls	r3, r3, #3
 8013a92:	4a2e      	ldr	r2, [pc, #184]	; (8013b4c <etharp_output_to_arp_index+0x124>)
 8013a94:	4413      	add	r3, r2
 8013a96:	3304      	adds	r3, #4
 8013a98:	4619      	mov	r1, r3
 8013a9a:	68f8      	ldr	r0, [r7, #12]
 8013a9c:	f000 fb4c 	bl	8014138 <etharp_request>
 8013aa0:	4603      	mov	r3, r0
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d138      	bne.n	8013b18 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013aa6:	79fa      	ldrb	r2, [r7, #7]
 8013aa8:	4928      	ldr	r1, [pc, #160]	; (8013b4c <etharp_output_to_arp_index+0x124>)
 8013aaa:	4613      	mov	r3, r2
 8013aac:	005b      	lsls	r3, r3, #1
 8013aae:	4413      	add	r3, r2
 8013ab0:	00db      	lsls	r3, r3, #3
 8013ab2:	440b      	add	r3, r1
 8013ab4:	3314      	adds	r3, #20
 8013ab6:	2203      	movs	r2, #3
 8013ab8:	701a      	strb	r2, [r3, #0]
 8013aba:	e02d      	b.n	8013b18 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8013abc:	79fa      	ldrb	r2, [r7, #7]
 8013abe:	4923      	ldr	r1, [pc, #140]	; (8013b4c <etharp_output_to_arp_index+0x124>)
 8013ac0:	4613      	mov	r3, r2
 8013ac2:	005b      	lsls	r3, r3, #1
 8013ac4:	4413      	add	r3, r2
 8013ac6:	00db      	lsls	r3, r3, #3
 8013ac8:	440b      	add	r3, r1
 8013aca:	3312      	adds	r3, #18
 8013acc:	881b      	ldrh	r3, [r3, #0]
 8013ace:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8013ad2:	d321      	bcc.n	8013b18 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8013ad4:	79fa      	ldrb	r2, [r7, #7]
 8013ad6:	4613      	mov	r3, r2
 8013ad8:	005b      	lsls	r3, r3, #1
 8013ada:	4413      	add	r3, r2
 8013adc:	00db      	lsls	r3, r3, #3
 8013ade:	4a1b      	ldr	r2, [pc, #108]	; (8013b4c <etharp_output_to_arp_index+0x124>)
 8013ae0:	4413      	add	r3, r2
 8013ae2:	1d19      	adds	r1, r3, #4
 8013ae4:	79fa      	ldrb	r2, [r7, #7]
 8013ae6:	4613      	mov	r3, r2
 8013ae8:	005b      	lsls	r3, r3, #1
 8013aea:	4413      	add	r3, r2
 8013aec:	00db      	lsls	r3, r3, #3
 8013aee:	3308      	adds	r3, #8
 8013af0:	4a16      	ldr	r2, [pc, #88]	; (8013b4c <etharp_output_to_arp_index+0x124>)
 8013af2:	4413      	add	r3, r2
 8013af4:	3304      	adds	r3, #4
 8013af6:	461a      	mov	r2, r3
 8013af8:	68f8      	ldr	r0, [r7, #12]
 8013afa:	f000 fafb 	bl	80140f4 <etharp_request_dst>
 8013afe:	4603      	mov	r3, r0
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	d109      	bne.n	8013b18 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013b04:	79fa      	ldrb	r2, [r7, #7]
 8013b06:	4911      	ldr	r1, [pc, #68]	; (8013b4c <etharp_output_to_arp_index+0x124>)
 8013b08:	4613      	mov	r3, r2
 8013b0a:	005b      	lsls	r3, r3, #1
 8013b0c:	4413      	add	r3, r2
 8013b0e:	00db      	lsls	r3, r3, #3
 8013b10:	440b      	add	r3, r1
 8013b12:	3314      	adds	r3, #20
 8013b14:	2203      	movs	r2, #3
 8013b16:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8013b18:	68fb      	ldr	r3, [r7, #12]
 8013b1a:	f103 0122 	add.w	r1, r3, #34	; 0x22
 8013b1e:	79fa      	ldrb	r2, [r7, #7]
 8013b20:	4613      	mov	r3, r2
 8013b22:	005b      	lsls	r3, r3, #1
 8013b24:	4413      	add	r3, r2
 8013b26:	00db      	lsls	r3, r3, #3
 8013b28:	3308      	adds	r3, #8
 8013b2a:	4a08      	ldr	r2, [pc, #32]	; (8013b4c <etharp_output_to_arp_index+0x124>)
 8013b2c:	4413      	add	r3, r2
 8013b2e:	3304      	adds	r3, #4
 8013b30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013b34:	9200      	str	r2, [sp, #0]
 8013b36:	460a      	mov	r2, r1
 8013b38:	68b9      	ldr	r1, [r7, #8]
 8013b3a:	68f8      	ldr	r0, [r7, #12]
 8013b3c:	f001 fe3a 	bl	80157b4 <ethernet_output>
 8013b40:	4603      	mov	r3, r0
}
 8013b42:	4618      	mov	r0, r3
 8013b44:	3710      	adds	r7, #16
 8013b46:	46bd      	mov	sp, r7
 8013b48:	bd80      	pop	{r7, pc}
 8013b4a:	bf00      	nop
 8013b4c:	20004258 	.word	0x20004258
 8013b50:	080199bc 	.word	0x080199bc
 8013b54:	08019b2c 	.word	0x08019b2c
 8013b58:	08019a34 	.word	0x08019a34

08013b5c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8013b5c:	b580      	push	{r7, lr}
 8013b5e:	b08a      	sub	sp, #40	; 0x28
 8013b60:	af02      	add	r7, sp, #8
 8013b62:	60f8      	str	r0, [r7, #12]
 8013b64:	60b9      	str	r1, [r7, #8]
 8013b66:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8013b6c:	68fb      	ldr	r3, [r7, #12]
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d106      	bne.n	8013b80 <etharp_output+0x24>
 8013b72:	4b73      	ldr	r3, [pc, #460]	; (8013d40 <etharp_output+0x1e4>)
 8013b74:	f240 321e 	movw	r2, #798	; 0x31e
 8013b78:	4972      	ldr	r1, [pc, #456]	; (8013d44 <etharp_output+0x1e8>)
 8013b7a:	4873      	ldr	r0, [pc, #460]	; (8013d48 <etharp_output+0x1ec>)
 8013b7c:	f002 fcc2 	bl	8016504 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8013b80:	68bb      	ldr	r3, [r7, #8]
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d106      	bne.n	8013b94 <etharp_output+0x38>
 8013b86:	4b6e      	ldr	r3, [pc, #440]	; (8013d40 <etharp_output+0x1e4>)
 8013b88:	f240 321f 	movw	r2, #799	; 0x31f
 8013b8c:	496f      	ldr	r1, [pc, #444]	; (8013d4c <etharp_output+0x1f0>)
 8013b8e:	486e      	ldr	r0, [pc, #440]	; (8013d48 <etharp_output+0x1ec>)
 8013b90:	f002 fcb8 	bl	8016504 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	d106      	bne.n	8013ba8 <etharp_output+0x4c>
 8013b9a:	4b69      	ldr	r3, [pc, #420]	; (8013d40 <etharp_output+0x1e4>)
 8013b9c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8013ba0:	496b      	ldr	r1, [pc, #428]	; (8013d50 <etharp_output+0x1f4>)
 8013ba2:	4869      	ldr	r0, [pc, #420]	; (8013d48 <etharp_output+0x1ec>)
 8013ba4:	f002 fcae 	bl	8016504 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	681b      	ldr	r3, [r3, #0]
 8013bac:	68f9      	ldr	r1, [r7, #12]
 8013bae:	4618      	mov	r0, r3
 8013bb0:	f000 fef8 	bl	80149a4 <ip4_addr_isbroadcast_u32>
 8013bb4:	4603      	mov	r3, r0
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d002      	beq.n	8013bc0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8013bba:	4b66      	ldr	r3, [pc, #408]	; (8013d54 <etharp_output+0x1f8>)
 8013bbc:	61fb      	str	r3, [r7, #28]
 8013bbe:	e0af      	b.n	8013d20 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	681b      	ldr	r3, [r3, #0]
 8013bc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013bc8:	2be0      	cmp	r3, #224	; 0xe0
 8013bca:	d118      	bne.n	8013bfe <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8013bcc:	2301      	movs	r3, #1
 8013bce:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8013bd0:	2300      	movs	r3, #0
 8013bd2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8013bd4:	235e      	movs	r3, #94	; 0x5e
 8013bd6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	3301      	adds	r3, #1
 8013bdc:	781b      	ldrb	r3, [r3, #0]
 8013bde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013be2:	b2db      	uxtb	r3, r3
 8013be4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	3302      	adds	r3, #2
 8013bea:	781b      	ldrb	r3, [r3, #0]
 8013bec:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	3303      	adds	r3, #3
 8013bf2:	781b      	ldrb	r3, [r3, #0]
 8013bf4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8013bf6:	f107 0310 	add.w	r3, r7, #16
 8013bfa:	61fb      	str	r3, [r7, #28]
 8013bfc:	e090      	b.n	8013d20 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	681a      	ldr	r2, [r3, #0]
 8013c02:	68fb      	ldr	r3, [r7, #12]
 8013c04:	3304      	adds	r3, #4
 8013c06:	681b      	ldr	r3, [r3, #0]
 8013c08:	405a      	eors	r2, r3
 8013c0a:	68fb      	ldr	r3, [r7, #12]
 8013c0c:	3308      	adds	r3, #8
 8013c0e:	681b      	ldr	r3, [r3, #0]
 8013c10:	4013      	ands	r3, r2
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	d012      	beq.n	8013c3c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	681b      	ldr	r3, [r3, #0]
 8013c1a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8013c1c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8013c20:	4293      	cmp	r3, r2
 8013c22:	d00b      	beq.n	8013c3c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8013c24:	68fb      	ldr	r3, [r7, #12]
 8013c26:	330c      	adds	r3, #12
 8013c28:	681b      	ldr	r3, [r3, #0]
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d003      	beq.n	8013c36 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8013c2e:	68fb      	ldr	r3, [r7, #12]
 8013c30:	330c      	adds	r3, #12
 8013c32:	61bb      	str	r3, [r7, #24]
 8013c34:	e002      	b.n	8013c3c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8013c36:	f06f 0303 	mvn.w	r3, #3
 8013c3a:	e07d      	b.n	8013d38 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8013c3c:	4b46      	ldr	r3, [pc, #280]	; (8013d58 <etharp_output+0x1fc>)
 8013c3e:	781b      	ldrb	r3, [r3, #0]
 8013c40:	4619      	mov	r1, r3
 8013c42:	4a46      	ldr	r2, [pc, #280]	; (8013d5c <etharp_output+0x200>)
 8013c44:	460b      	mov	r3, r1
 8013c46:	005b      	lsls	r3, r3, #1
 8013c48:	440b      	add	r3, r1
 8013c4a:	00db      	lsls	r3, r3, #3
 8013c4c:	4413      	add	r3, r2
 8013c4e:	3314      	adds	r3, #20
 8013c50:	781b      	ldrb	r3, [r3, #0]
 8013c52:	2b01      	cmp	r3, #1
 8013c54:	d925      	bls.n	8013ca2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8013c56:	4b40      	ldr	r3, [pc, #256]	; (8013d58 <etharp_output+0x1fc>)
 8013c58:	781b      	ldrb	r3, [r3, #0]
 8013c5a:	4619      	mov	r1, r3
 8013c5c:	4a3f      	ldr	r2, [pc, #252]	; (8013d5c <etharp_output+0x200>)
 8013c5e:	460b      	mov	r3, r1
 8013c60:	005b      	lsls	r3, r3, #1
 8013c62:	440b      	add	r3, r1
 8013c64:	00db      	lsls	r3, r3, #3
 8013c66:	4413      	add	r3, r2
 8013c68:	3308      	adds	r3, #8
 8013c6a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8013c6c:	68fa      	ldr	r2, [r7, #12]
 8013c6e:	429a      	cmp	r2, r3
 8013c70:	d117      	bne.n	8013ca2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8013c72:	69bb      	ldr	r3, [r7, #24]
 8013c74:	681a      	ldr	r2, [r3, #0]
 8013c76:	4b38      	ldr	r3, [pc, #224]	; (8013d58 <etharp_output+0x1fc>)
 8013c78:	781b      	ldrb	r3, [r3, #0]
 8013c7a:	4618      	mov	r0, r3
 8013c7c:	4937      	ldr	r1, [pc, #220]	; (8013d5c <etharp_output+0x200>)
 8013c7e:	4603      	mov	r3, r0
 8013c80:	005b      	lsls	r3, r3, #1
 8013c82:	4403      	add	r3, r0
 8013c84:	00db      	lsls	r3, r3, #3
 8013c86:	440b      	add	r3, r1
 8013c88:	3304      	adds	r3, #4
 8013c8a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8013c8c:	429a      	cmp	r2, r3
 8013c8e:	d108      	bne.n	8013ca2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8013c90:	4b31      	ldr	r3, [pc, #196]	; (8013d58 <etharp_output+0x1fc>)
 8013c92:	781b      	ldrb	r3, [r3, #0]
 8013c94:	461a      	mov	r2, r3
 8013c96:	68b9      	ldr	r1, [r7, #8]
 8013c98:	68f8      	ldr	r0, [r7, #12]
 8013c9a:	f7ff fec5 	bl	8013a28 <etharp_output_to_arp_index>
 8013c9e:	4603      	mov	r3, r0
 8013ca0:	e04a      	b.n	8013d38 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8013ca2:	2300      	movs	r3, #0
 8013ca4:	75fb      	strb	r3, [r7, #23]
 8013ca6:	e031      	b.n	8013d0c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013ca8:	7dfa      	ldrb	r2, [r7, #23]
 8013caa:	492c      	ldr	r1, [pc, #176]	; (8013d5c <etharp_output+0x200>)
 8013cac:	4613      	mov	r3, r2
 8013cae:	005b      	lsls	r3, r3, #1
 8013cb0:	4413      	add	r3, r2
 8013cb2:	00db      	lsls	r3, r3, #3
 8013cb4:	440b      	add	r3, r1
 8013cb6:	3314      	adds	r3, #20
 8013cb8:	781b      	ldrb	r3, [r3, #0]
 8013cba:	2b01      	cmp	r3, #1
 8013cbc:	d923      	bls.n	8013d06 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8013cbe:	7dfa      	ldrb	r2, [r7, #23]
 8013cc0:	4926      	ldr	r1, [pc, #152]	; (8013d5c <etharp_output+0x200>)
 8013cc2:	4613      	mov	r3, r2
 8013cc4:	005b      	lsls	r3, r3, #1
 8013cc6:	4413      	add	r3, r2
 8013cc8:	00db      	lsls	r3, r3, #3
 8013cca:	440b      	add	r3, r1
 8013ccc:	3308      	adds	r3, #8
 8013cce:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013cd0:	68fa      	ldr	r2, [r7, #12]
 8013cd2:	429a      	cmp	r2, r3
 8013cd4:	d117      	bne.n	8013d06 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8013cd6:	69bb      	ldr	r3, [r7, #24]
 8013cd8:	6819      	ldr	r1, [r3, #0]
 8013cda:	7dfa      	ldrb	r2, [r7, #23]
 8013cdc:	481f      	ldr	r0, [pc, #124]	; (8013d5c <etharp_output+0x200>)
 8013cde:	4613      	mov	r3, r2
 8013ce0:	005b      	lsls	r3, r3, #1
 8013ce2:	4413      	add	r3, r2
 8013ce4:	00db      	lsls	r3, r3, #3
 8013ce6:	4403      	add	r3, r0
 8013ce8:	3304      	adds	r3, #4
 8013cea:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8013cec:	4299      	cmp	r1, r3
 8013cee:	d10a      	bne.n	8013d06 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8013cf0:	4a19      	ldr	r2, [pc, #100]	; (8013d58 <etharp_output+0x1fc>)
 8013cf2:	7dfb      	ldrb	r3, [r7, #23]
 8013cf4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8013cf6:	7dfb      	ldrb	r3, [r7, #23]
 8013cf8:	461a      	mov	r2, r3
 8013cfa:	68b9      	ldr	r1, [r7, #8]
 8013cfc:	68f8      	ldr	r0, [r7, #12]
 8013cfe:	f7ff fe93 	bl	8013a28 <etharp_output_to_arp_index>
 8013d02:	4603      	mov	r3, r0
 8013d04:	e018      	b.n	8013d38 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8013d06:	7dfb      	ldrb	r3, [r7, #23]
 8013d08:	3301      	adds	r3, #1
 8013d0a:	75fb      	strb	r3, [r7, #23]
 8013d0c:	7dfb      	ldrb	r3, [r7, #23]
 8013d0e:	2b09      	cmp	r3, #9
 8013d10:	d9ca      	bls.n	8013ca8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8013d12:	68ba      	ldr	r2, [r7, #8]
 8013d14:	69b9      	ldr	r1, [r7, #24]
 8013d16:	68f8      	ldr	r0, [r7, #12]
 8013d18:	f000 f822 	bl	8013d60 <etharp_query>
 8013d1c:	4603      	mov	r3, r0
 8013d1e:	e00b      	b.n	8013d38 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8013d20:	68fb      	ldr	r3, [r7, #12]
 8013d22:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8013d26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013d2a:	9300      	str	r3, [sp, #0]
 8013d2c:	69fb      	ldr	r3, [r7, #28]
 8013d2e:	68b9      	ldr	r1, [r7, #8]
 8013d30:	68f8      	ldr	r0, [r7, #12]
 8013d32:	f001 fd3f 	bl	80157b4 <ethernet_output>
 8013d36:	4603      	mov	r3, r0
}
 8013d38:	4618      	mov	r0, r3
 8013d3a:	3720      	adds	r7, #32
 8013d3c:	46bd      	mov	sp, r7
 8013d3e:	bd80      	pop	{r7, pc}
 8013d40:	080199bc 	.word	0x080199bc
 8013d44:	08019b0c 	.word	0x08019b0c
 8013d48:	08019a34 	.word	0x08019a34
 8013d4c:	08019b5c 	.word	0x08019b5c
 8013d50:	08019afc 	.word	0x08019afc
 8013d54:	0801a1f4 	.word	0x0801a1f4
 8013d58:	20004348 	.word	0x20004348
 8013d5c:	20004258 	.word	0x20004258

08013d60 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8013d60:	b580      	push	{r7, lr}
 8013d62:	b08c      	sub	sp, #48	; 0x30
 8013d64:	af02      	add	r7, sp, #8
 8013d66:	60f8      	str	r0, [r7, #12]
 8013d68:	60b9      	str	r1, [r7, #8]
 8013d6a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8013d6c:	68fb      	ldr	r3, [r7, #12]
 8013d6e:	3322      	adds	r3, #34	; 0x22
 8013d70:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8013d72:	23ff      	movs	r3, #255	; 0xff
 8013d74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8013d78:	2300      	movs	r3, #0
 8013d7a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8013d7c:	68bb      	ldr	r3, [r7, #8]
 8013d7e:	681b      	ldr	r3, [r3, #0]
 8013d80:	68f9      	ldr	r1, [r7, #12]
 8013d82:	4618      	mov	r0, r3
 8013d84:	f000 fe0e 	bl	80149a4 <ip4_addr_isbroadcast_u32>
 8013d88:	4603      	mov	r3, r0
 8013d8a:	2b00      	cmp	r3, #0
 8013d8c:	d10c      	bne.n	8013da8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8013d8e:	68bb      	ldr	r3, [r7, #8]
 8013d90:	681b      	ldr	r3, [r3, #0]
 8013d92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8013d96:	2be0      	cmp	r3, #224	; 0xe0
 8013d98:	d006      	beq.n	8013da8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8013d9a:	68bb      	ldr	r3, [r7, #8]
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	d003      	beq.n	8013da8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8013da0:	68bb      	ldr	r3, [r7, #8]
 8013da2:	681b      	ldr	r3, [r3, #0]
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	d102      	bne.n	8013dae <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8013da8:	f06f 030f 	mvn.w	r3, #15
 8013dac:	e101      	b.n	8013fb2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8013dae:	68fa      	ldr	r2, [r7, #12]
 8013db0:	2101      	movs	r1, #1
 8013db2:	68b8      	ldr	r0, [r7, #8]
 8013db4:	f7ff fb60 	bl	8013478 <etharp_find_entry>
 8013db8:	4603      	mov	r3, r0
 8013dba:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8013dbc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	da02      	bge.n	8013dca <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8013dc4:	8a7b      	ldrh	r3, [r7, #18]
 8013dc6:	b25b      	sxtb	r3, r3
 8013dc8:	e0f3      	b.n	8013fb2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8013dca:	8a7b      	ldrh	r3, [r7, #18]
 8013dcc:	2b7e      	cmp	r3, #126	; 0x7e
 8013dce:	d906      	bls.n	8013dde <etharp_query+0x7e>
 8013dd0:	4b7a      	ldr	r3, [pc, #488]	; (8013fbc <etharp_query+0x25c>)
 8013dd2:	f240 32c1 	movw	r2, #961	; 0x3c1
 8013dd6:	497a      	ldr	r1, [pc, #488]	; (8013fc0 <etharp_query+0x260>)
 8013dd8:	487a      	ldr	r0, [pc, #488]	; (8013fc4 <etharp_query+0x264>)
 8013dda:	f002 fb93 	bl	8016504 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8013dde:	8a7b      	ldrh	r3, [r7, #18]
 8013de0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8013de2:	7c7a      	ldrb	r2, [r7, #17]
 8013de4:	4978      	ldr	r1, [pc, #480]	; (8013fc8 <etharp_query+0x268>)
 8013de6:	4613      	mov	r3, r2
 8013de8:	005b      	lsls	r3, r3, #1
 8013dea:	4413      	add	r3, r2
 8013dec:	00db      	lsls	r3, r3, #3
 8013dee:	440b      	add	r3, r1
 8013df0:	3314      	adds	r3, #20
 8013df2:	781b      	ldrb	r3, [r3, #0]
 8013df4:	2b00      	cmp	r3, #0
 8013df6:	d115      	bne.n	8013e24 <etharp_query+0xc4>
    is_new_entry = 1;
 8013df8:	2301      	movs	r3, #1
 8013dfa:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8013dfc:	7c7a      	ldrb	r2, [r7, #17]
 8013dfe:	4972      	ldr	r1, [pc, #456]	; (8013fc8 <etharp_query+0x268>)
 8013e00:	4613      	mov	r3, r2
 8013e02:	005b      	lsls	r3, r3, #1
 8013e04:	4413      	add	r3, r2
 8013e06:	00db      	lsls	r3, r3, #3
 8013e08:	440b      	add	r3, r1
 8013e0a:	3314      	adds	r3, #20
 8013e0c:	2201      	movs	r2, #1
 8013e0e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8013e10:	7c7a      	ldrb	r2, [r7, #17]
 8013e12:	496d      	ldr	r1, [pc, #436]	; (8013fc8 <etharp_query+0x268>)
 8013e14:	4613      	mov	r3, r2
 8013e16:	005b      	lsls	r3, r3, #1
 8013e18:	4413      	add	r3, r2
 8013e1a:	00db      	lsls	r3, r3, #3
 8013e1c:	440b      	add	r3, r1
 8013e1e:	3308      	adds	r3, #8
 8013e20:	68fa      	ldr	r2, [r7, #12]
 8013e22:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8013e24:	7c7a      	ldrb	r2, [r7, #17]
 8013e26:	4968      	ldr	r1, [pc, #416]	; (8013fc8 <etharp_query+0x268>)
 8013e28:	4613      	mov	r3, r2
 8013e2a:	005b      	lsls	r3, r3, #1
 8013e2c:	4413      	add	r3, r2
 8013e2e:	00db      	lsls	r3, r3, #3
 8013e30:	440b      	add	r3, r1
 8013e32:	3314      	adds	r3, #20
 8013e34:	781b      	ldrb	r3, [r3, #0]
 8013e36:	2b01      	cmp	r3, #1
 8013e38:	d011      	beq.n	8013e5e <etharp_query+0xfe>
 8013e3a:	7c7a      	ldrb	r2, [r7, #17]
 8013e3c:	4962      	ldr	r1, [pc, #392]	; (8013fc8 <etharp_query+0x268>)
 8013e3e:	4613      	mov	r3, r2
 8013e40:	005b      	lsls	r3, r3, #1
 8013e42:	4413      	add	r3, r2
 8013e44:	00db      	lsls	r3, r3, #3
 8013e46:	440b      	add	r3, r1
 8013e48:	3314      	adds	r3, #20
 8013e4a:	781b      	ldrb	r3, [r3, #0]
 8013e4c:	2b01      	cmp	r3, #1
 8013e4e:	d806      	bhi.n	8013e5e <etharp_query+0xfe>
 8013e50:	4b5a      	ldr	r3, [pc, #360]	; (8013fbc <etharp_query+0x25c>)
 8013e52:	f240 32cd 	movw	r2, #973	; 0x3cd
 8013e56:	495d      	ldr	r1, [pc, #372]	; (8013fcc <etharp_query+0x26c>)
 8013e58:	485a      	ldr	r0, [pc, #360]	; (8013fc4 <etharp_query+0x264>)
 8013e5a:	f002 fb53 	bl	8016504 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8013e5e:	6a3b      	ldr	r3, [r7, #32]
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d102      	bne.n	8013e6a <etharp_query+0x10a>
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	d10c      	bne.n	8013e84 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8013e6a:	68b9      	ldr	r1, [r7, #8]
 8013e6c:	68f8      	ldr	r0, [r7, #12]
 8013e6e:	f000 f963 	bl	8014138 <etharp_request>
 8013e72:	4603      	mov	r3, r0
 8013e74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	2b00      	cmp	r3, #0
 8013e7c:	d102      	bne.n	8013e84 <etharp_query+0x124>
      return result;
 8013e7e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013e82:	e096      	b.n	8013fb2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d106      	bne.n	8013e98 <etharp_query+0x138>
 8013e8a:	4b4c      	ldr	r3, [pc, #304]	; (8013fbc <etharp_query+0x25c>)
 8013e8c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8013e90:	494f      	ldr	r1, [pc, #316]	; (8013fd0 <etharp_query+0x270>)
 8013e92:	484c      	ldr	r0, [pc, #304]	; (8013fc4 <etharp_query+0x264>)
 8013e94:	f002 fb36 	bl	8016504 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8013e98:	7c7a      	ldrb	r2, [r7, #17]
 8013e9a:	494b      	ldr	r1, [pc, #300]	; (8013fc8 <etharp_query+0x268>)
 8013e9c:	4613      	mov	r3, r2
 8013e9e:	005b      	lsls	r3, r3, #1
 8013ea0:	4413      	add	r3, r2
 8013ea2:	00db      	lsls	r3, r3, #3
 8013ea4:	440b      	add	r3, r1
 8013ea6:	3314      	adds	r3, #20
 8013ea8:	781b      	ldrb	r3, [r3, #0]
 8013eaa:	2b01      	cmp	r3, #1
 8013eac:	d917      	bls.n	8013ede <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8013eae:	4a49      	ldr	r2, [pc, #292]	; (8013fd4 <etharp_query+0x274>)
 8013eb0:	7c7b      	ldrb	r3, [r7, #17]
 8013eb2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8013eb4:	7c7a      	ldrb	r2, [r7, #17]
 8013eb6:	4613      	mov	r3, r2
 8013eb8:	005b      	lsls	r3, r3, #1
 8013eba:	4413      	add	r3, r2
 8013ebc:	00db      	lsls	r3, r3, #3
 8013ebe:	3308      	adds	r3, #8
 8013ec0:	4a41      	ldr	r2, [pc, #260]	; (8013fc8 <etharp_query+0x268>)
 8013ec2:	4413      	add	r3, r2
 8013ec4:	3304      	adds	r3, #4
 8013ec6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013eca:	9200      	str	r2, [sp, #0]
 8013ecc:	697a      	ldr	r2, [r7, #20]
 8013ece:	6879      	ldr	r1, [r7, #4]
 8013ed0:	68f8      	ldr	r0, [r7, #12]
 8013ed2:	f001 fc6f 	bl	80157b4 <ethernet_output>
 8013ed6:	4603      	mov	r3, r0
 8013ed8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013edc:	e067      	b.n	8013fae <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8013ede:	7c7a      	ldrb	r2, [r7, #17]
 8013ee0:	4939      	ldr	r1, [pc, #228]	; (8013fc8 <etharp_query+0x268>)
 8013ee2:	4613      	mov	r3, r2
 8013ee4:	005b      	lsls	r3, r3, #1
 8013ee6:	4413      	add	r3, r2
 8013ee8:	00db      	lsls	r3, r3, #3
 8013eea:	440b      	add	r3, r1
 8013eec:	3314      	adds	r3, #20
 8013eee:	781b      	ldrb	r3, [r3, #0]
 8013ef0:	2b01      	cmp	r3, #1
 8013ef2:	d15c      	bne.n	8013fae <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8013ef4:	2300      	movs	r3, #0
 8013ef6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013efc:	e01c      	b.n	8013f38 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8013efe:	69fb      	ldr	r3, [r7, #28]
 8013f00:	895a      	ldrh	r2, [r3, #10]
 8013f02:	69fb      	ldr	r3, [r7, #28]
 8013f04:	891b      	ldrh	r3, [r3, #8]
 8013f06:	429a      	cmp	r2, r3
 8013f08:	d10a      	bne.n	8013f20 <etharp_query+0x1c0>
 8013f0a:	69fb      	ldr	r3, [r7, #28]
 8013f0c:	681b      	ldr	r3, [r3, #0]
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d006      	beq.n	8013f20 <etharp_query+0x1c0>
 8013f12:	4b2a      	ldr	r3, [pc, #168]	; (8013fbc <etharp_query+0x25c>)
 8013f14:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8013f18:	492f      	ldr	r1, [pc, #188]	; (8013fd8 <etharp_query+0x278>)
 8013f1a:	482a      	ldr	r0, [pc, #168]	; (8013fc4 <etharp_query+0x264>)
 8013f1c:	f002 faf2 	bl	8016504 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8013f20:	69fb      	ldr	r3, [r7, #28]
 8013f22:	7b1b      	ldrb	r3, [r3, #12]
 8013f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d002      	beq.n	8013f32 <etharp_query+0x1d2>
        copy_needed = 1;
 8013f2c:	2301      	movs	r3, #1
 8013f2e:	61bb      	str	r3, [r7, #24]
        break;
 8013f30:	e005      	b.n	8013f3e <etharp_query+0x1de>
      }
      p = p->next;
 8013f32:	69fb      	ldr	r3, [r7, #28]
 8013f34:	681b      	ldr	r3, [r3, #0]
 8013f36:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013f38:	69fb      	ldr	r3, [r7, #28]
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	d1df      	bne.n	8013efe <etharp_query+0x19e>
    }
    if (copy_needed) {
 8013f3e:	69bb      	ldr	r3, [r7, #24]
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	d007      	beq.n	8013f54 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8013f44:	687a      	ldr	r2, [r7, #4]
 8013f46:	f44f 7120 	mov.w	r1, #640	; 0x280
 8013f4a:	200e      	movs	r0, #14
 8013f4c:	f7f9 fcfc 	bl	800d948 <pbuf_clone>
 8013f50:	61f8      	str	r0, [r7, #28]
 8013f52:	e004      	b.n	8013f5e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8013f58:	69f8      	ldr	r0, [r7, #28]
 8013f5a:	f7f9 fb33 	bl	800d5c4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8013f5e:	69fb      	ldr	r3, [r7, #28]
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d021      	beq.n	8013fa8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8013f64:	7c7a      	ldrb	r2, [r7, #17]
 8013f66:	4918      	ldr	r1, [pc, #96]	; (8013fc8 <etharp_query+0x268>)
 8013f68:	4613      	mov	r3, r2
 8013f6a:	005b      	lsls	r3, r3, #1
 8013f6c:	4413      	add	r3, r2
 8013f6e:	00db      	lsls	r3, r3, #3
 8013f70:	440b      	add	r3, r1
 8013f72:	681b      	ldr	r3, [r3, #0]
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d00a      	beq.n	8013f8e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8013f78:	7c7a      	ldrb	r2, [r7, #17]
 8013f7a:	4913      	ldr	r1, [pc, #76]	; (8013fc8 <etharp_query+0x268>)
 8013f7c:	4613      	mov	r3, r2
 8013f7e:	005b      	lsls	r3, r3, #1
 8013f80:	4413      	add	r3, r2
 8013f82:	00db      	lsls	r3, r3, #3
 8013f84:	440b      	add	r3, r1
 8013f86:	681b      	ldr	r3, [r3, #0]
 8013f88:	4618      	mov	r0, r3
 8013f8a:	f7f9 fa75 	bl	800d478 <pbuf_free>
      }
      arp_table[i].q = p;
 8013f8e:	7c7a      	ldrb	r2, [r7, #17]
 8013f90:	490d      	ldr	r1, [pc, #52]	; (8013fc8 <etharp_query+0x268>)
 8013f92:	4613      	mov	r3, r2
 8013f94:	005b      	lsls	r3, r3, #1
 8013f96:	4413      	add	r3, r2
 8013f98:	00db      	lsls	r3, r3, #3
 8013f9a:	440b      	add	r3, r1
 8013f9c:	69fa      	ldr	r2, [r7, #28]
 8013f9e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8013fa0:	2300      	movs	r3, #0
 8013fa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013fa6:	e002      	b.n	8013fae <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8013fa8:	23ff      	movs	r3, #255	; 0xff
 8013faa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8013fae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8013fb2:	4618      	mov	r0, r3
 8013fb4:	3728      	adds	r7, #40	; 0x28
 8013fb6:	46bd      	mov	sp, r7
 8013fb8:	bd80      	pop	{r7, pc}
 8013fba:	bf00      	nop
 8013fbc:	080199bc 	.word	0x080199bc
 8013fc0:	08019b68 	.word	0x08019b68
 8013fc4:	08019a34 	.word	0x08019a34
 8013fc8:	20004258 	.word	0x20004258
 8013fcc:	08019b78 	.word	0x08019b78
 8013fd0:	08019b5c 	.word	0x08019b5c
 8013fd4:	20004348 	.word	0x20004348
 8013fd8:	08019ba0 	.word	0x08019ba0

08013fdc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8013fdc:	b580      	push	{r7, lr}
 8013fde:	b08a      	sub	sp, #40	; 0x28
 8013fe0:	af02      	add	r7, sp, #8
 8013fe2:	60f8      	str	r0, [r7, #12]
 8013fe4:	60b9      	str	r1, [r7, #8]
 8013fe6:	607a      	str	r2, [r7, #4]
 8013fe8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8013fea:	2300      	movs	r3, #0
 8013fec:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8013fee:	68fb      	ldr	r3, [r7, #12]
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	d106      	bne.n	8014002 <etharp_raw+0x26>
 8013ff4:	4b3a      	ldr	r3, [pc, #232]	; (80140e0 <etharp_raw+0x104>)
 8013ff6:	f240 4257 	movw	r2, #1111	; 0x457
 8013ffa:	493a      	ldr	r1, [pc, #232]	; (80140e4 <etharp_raw+0x108>)
 8013ffc:	483a      	ldr	r0, [pc, #232]	; (80140e8 <etharp_raw+0x10c>)
 8013ffe:	f002 fa81 	bl	8016504 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8014002:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014006:	211c      	movs	r1, #28
 8014008:	200e      	movs	r0, #14
 801400a:	f7f8 ff51 	bl	800ceb0 <pbuf_alloc>
 801400e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8014010:	69bb      	ldr	r3, [r7, #24]
 8014012:	2b00      	cmp	r3, #0
 8014014:	d102      	bne.n	801401c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8014016:	f04f 33ff 	mov.w	r3, #4294967295
 801401a:	e05d      	b.n	80140d8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801401c:	69bb      	ldr	r3, [r7, #24]
 801401e:	895b      	ldrh	r3, [r3, #10]
 8014020:	2b1b      	cmp	r3, #27
 8014022:	d806      	bhi.n	8014032 <etharp_raw+0x56>
 8014024:	4b2e      	ldr	r3, [pc, #184]	; (80140e0 <etharp_raw+0x104>)
 8014026:	f240 4262 	movw	r2, #1122	; 0x462
 801402a:	4930      	ldr	r1, [pc, #192]	; (80140ec <etharp_raw+0x110>)
 801402c:	482e      	ldr	r0, [pc, #184]	; (80140e8 <etharp_raw+0x10c>)
 801402e:	f002 fa69 	bl	8016504 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8014032:	69bb      	ldr	r3, [r7, #24]
 8014034:	685b      	ldr	r3, [r3, #4]
 8014036:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8014038:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801403a:	4618      	mov	r0, r3
 801403c:	f7f7 fee8 	bl	800be10 <lwip_htons>
 8014040:	4603      	mov	r3, r0
 8014042:	461a      	mov	r2, r3
 8014044:	697b      	ldr	r3, [r7, #20]
 8014046:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8014048:	68fb      	ldr	r3, [r7, #12]
 801404a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801404e:	2b06      	cmp	r3, #6
 8014050:	d006      	beq.n	8014060 <etharp_raw+0x84>
 8014052:	4b23      	ldr	r3, [pc, #140]	; (80140e0 <etharp_raw+0x104>)
 8014054:	f240 4269 	movw	r2, #1129	; 0x469
 8014058:	4925      	ldr	r1, [pc, #148]	; (80140f0 <etharp_raw+0x114>)
 801405a:	4823      	ldr	r0, [pc, #140]	; (80140e8 <etharp_raw+0x10c>)
 801405c:	f002 fa52 	bl	8016504 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8014060:	697b      	ldr	r3, [r7, #20]
 8014062:	3308      	adds	r3, #8
 8014064:	2206      	movs	r2, #6
 8014066:	6839      	ldr	r1, [r7, #0]
 8014068:	4618      	mov	r0, r3
 801406a:	f002 fa35 	bl	80164d8 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801406e:	697b      	ldr	r3, [r7, #20]
 8014070:	3312      	adds	r3, #18
 8014072:	2206      	movs	r2, #6
 8014074:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014076:	4618      	mov	r0, r3
 8014078:	f002 fa2e 	bl	80164d8 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801407c:	697b      	ldr	r3, [r7, #20]
 801407e:	330e      	adds	r3, #14
 8014080:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014082:	6812      	ldr	r2, [r2, #0]
 8014084:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8014086:	697b      	ldr	r3, [r7, #20]
 8014088:	3318      	adds	r3, #24
 801408a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801408c:	6812      	ldr	r2, [r2, #0]
 801408e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8014090:	697b      	ldr	r3, [r7, #20]
 8014092:	2200      	movs	r2, #0
 8014094:	701a      	strb	r2, [r3, #0]
 8014096:	2200      	movs	r2, #0
 8014098:	f042 0201 	orr.w	r2, r2, #1
 801409c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801409e:	697b      	ldr	r3, [r7, #20]
 80140a0:	2200      	movs	r2, #0
 80140a2:	f042 0208 	orr.w	r2, r2, #8
 80140a6:	709a      	strb	r2, [r3, #2]
 80140a8:	2200      	movs	r2, #0
 80140aa:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80140ac:	697b      	ldr	r3, [r7, #20]
 80140ae:	2206      	movs	r2, #6
 80140b0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80140b2:	697b      	ldr	r3, [r7, #20]
 80140b4:	2204      	movs	r2, #4
 80140b6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80140b8:	f640 0306 	movw	r3, #2054	; 0x806
 80140bc:	9300      	str	r3, [sp, #0]
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	68ba      	ldr	r2, [r7, #8]
 80140c2:	69b9      	ldr	r1, [r7, #24]
 80140c4:	68f8      	ldr	r0, [r7, #12]
 80140c6:	f001 fb75 	bl	80157b4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80140ca:	69b8      	ldr	r0, [r7, #24]
 80140cc:	f7f9 f9d4 	bl	800d478 <pbuf_free>
  p = NULL;
 80140d0:	2300      	movs	r3, #0
 80140d2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80140d4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80140d8:	4618      	mov	r0, r3
 80140da:	3720      	adds	r7, #32
 80140dc:	46bd      	mov	sp, r7
 80140de:	bd80      	pop	{r7, pc}
 80140e0:	080199bc 	.word	0x080199bc
 80140e4:	08019b0c 	.word	0x08019b0c
 80140e8:	08019a34 	.word	0x08019a34
 80140ec:	08019bbc 	.word	0x08019bbc
 80140f0:	08019bf0 	.word	0x08019bf0

080140f4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80140f4:	b580      	push	{r7, lr}
 80140f6:	b088      	sub	sp, #32
 80140f8:	af04      	add	r7, sp, #16
 80140fa:	60f8      	str	r0, [r7, #12]
 80140fc:	60b9      	str	r1, [r7, #8]
 80140fe:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014100:	68fb      	ldr	r3, [r7, #12]
 8014102:	f103 0122 	add.w	r1, r3, #34	; 0x22
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8014106:	68fb      	ldr	r3, [r7, #12]
 8014108:	f103 0022 	add.w	r0, r3, #34	; 0x22
 801410c:	68fb      	ldr	r3, [r7, #12]
 801410e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014110:	2201      	movs	r2, #1
 8014112:	9203      	str	r2, [sp, #12]
 8014114:	68ba      	ldr	r2, [r7, #8]
 8014116:	9202      	str	r2, [sp, #8]
 8014118:	4a06      	ldr	r2, [pc, #24]	; (8014134 <etharp_request_dst+0x40>)
 801411a:	9201      	str	r2, [sp, #4]
 801411c:	9300      	str	r3, [sp, #0]
 801411e:	4603      	mov	r3, r0
 8014120:	687a      	ldr	r2, [r7, #4]
 8014122:	68f8      	ldr	r0, [r7, #12]
 8014124:	f7ff ff5a 	bl	8013fdc <etharp_raw>
 8014128:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801412a:	4618      	mov	r0, r3
 801412c:	3710      	adds	r7, #16
 801412e:	46bd      	mov	sp, r7
 8014130:	bd80      	pop	{r7, pc}
 8014132:	bf00      	nop
 8014134:	0801a1fc 	.word	0x0801a1fc

08014138 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8014138:	b580      	push	{r7, lr}
 801413a:	b082      	sub	sp, #8
 801413c:	af00      	add	r7, sp, #0
 801413e:	6078      	str	r0, [r7, #4]
 8014140:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8014142:	4a05      	ldr	r2, [pc, #20]	; (8014158 <etharp_request+0x20>)
 8014144:	6839      	ldr	r1, [r7, #0]
 8014146:	6878      	ldr	r0, [r7, #4]
 8014148:	f7ff ffd4 	bl	80140f4 <etharp_request_dst>
 801414c:	4603      	mov	r3, r0
}
 801414e:	4618      	mov	r0, r3
 8014150:	3708      	adds	r7, #8
 8014152:	46bd      	mov	sp, r7
 8014154:	bd80      	pop	{r7, pc}
 8014156:	bf00      	nop
 8014158:	0801a1f4 	.word	0x0801a1f4

0801415c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801415c:	b580      	push	{r7, lr}
 801415e:	b08e      	sub	sp, #56	; 0x38
 8014160:	af04      	add	r7, sp, #16
 8014162:	6078      	str	r0, [r7, #4]
 8014164:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8014166:	4b79      	ldr	r3, [pc, #484]	; (801434c <icmp_input+0x1f0>)
 8014168:	689b      	ldr	r3, [r3, #8]
 801416a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801416c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801416e:	781b      	ldrb	r3, [r3, #0]
 8014170:	f003 030f 	and.w	r3, r3, #15
 8014174:	b2db      	uxtb	r3, r3
 8014176:	009b      	lsls	r3, r3, #2
 8014178:	b2db      	uxtb	r3, r3
 801417a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801417c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801417e:	2b13      	cmp	r3, #19
 8014180:	f240 80cd 	bls.w	801431e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	895b      	ldrh	r3, [r3, #10]
 8014188:	2b03      	cmp	r3, #3
 801418a:	f240 80ca 	bls.w	8014322 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	685b      	ldr	r3, [r3, #4]
 8014192:	781b      	ldrb	r3, [r3, #0]
 8014194:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8014198:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801419c:	2b00      	cmp	r3, #0
 801419e:	f000 80b7 	beq.w	8014310 <icmp_input+0x1b4>
 80141a2:	2b08      	cmp	r3, #8
 80141a4:	f040 80b7 	bne.w	8014316 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80141a8:	4b69      	ldr	r3, [pc, #420]	; (8014350 <icmp_input+0x1f4>)
 80141aa:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80141ac:	4b67      	ldr	r3, [pc, #412]	; (801434c <icmp_input+0x1f0>)
 80141ae:	695b      	ldr	r3, [r3, #20]
 80141b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80141b4:	2be0      	cmp	r3, #224	; 0xe0
 80141b6:	f000 80bb 	beq.w	8014330 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80141ba:	4b64      	ldr	r3, [pc, #400]	; (801434c <icmp_input+0x1f0>)
 80141bc:	695b      	ldr	r3, [r3, #20]
 80141be:	4a63      	ldr	r2, [pc, #396]	; (801434c <icmp_input+0x1f0>)
 80141c0:	6812      	ldr	r2, [r2, #0]
 80141c2:	4611      	mov	r1, r2
 80141c4:	4618      	mov	r0, r3
 80141c6:	f000 fbed 	bl	80149a4 <ip4_addr_isbroadcast_u32>
 80141ca:	4603      	mov	r3, r0
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	f040 80b1 	bne.w	8014334 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	891b      	ldrh	r3, [r3, #8]
 80141d6:	2b07      	cmp	r3, #7
 80141d8:	f240 80a5 	bls.w	8014326 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80141dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80141de:	330e      	adds	r3, #14
 80141e0:	4619      	mov	r1, r3
 80141e2:	6878      	ldr	r0, [r7, #4]
 80141e4:	f7f9 f8b2 	bl	800d34c <pbuf_add_header>
 80141e8:	4603      	mov	r3, r0
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	d04b      	beq.n	8014286 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	891a      	ldrh	r2, [r3, #8]
 80141f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80141f4:	4413      	add	r3, r2
 80141f6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	891b      	ldrh	r3, [r3, #8]
 80141fc:	8b7a      	ldrh	r2, [r7, #26]
 80141fe:	429a      	cmp	r2, r3
 8014200:	f0c0 809a 	bcc.w	8014338 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8014204:	8b7b      	ldrh	r3, [r7, #26]
 8014206:	f44f 7220 	mov.w	r2, #640	; 0x280
 801420a:	4619      	mov	r1, r3
 801420c:	200e      	movs	r0, #14
 801420e:	f7f8 fe4f 	bl	800ceb0 <pbuf_alloc>
 8014212:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8014214:	697b      	ldr	r3, [r7, #20]
 8014216:	2b00      	cmp	r3, #0
 8014218:	f000 8090 	beq.w	801433c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801421c:	697b      	ldr	r3, [r7, #20]
 801421e:	895b      	ldrh	r3, [r3, #10]
 8014220:	461a      	mov	r2, r3
 8014222:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014224:	3308      	adds	r3, #8
 8014226:	429a      	cmp	r2, r3
 8014228:	d203      	bcs.n	8014232 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801422a:	6978      	ldr	r0, [r7, #20]
 801422c:	f7f9 f924 	bl	800d478 <pbuf_free>
          goto icmperr;
 8014230:	e085      	b.n	801433e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8014232:	697b      	ldr	r3, [r7, #20]
 8014234:	685b      	ldr	r3, [r3, #4]
 8014236:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014238:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801423a:	4618      	mov	r0, r3
 801423c:	f002 f94c 	bl	80164d8 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8014240:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014242:	4619      	mov	r1, r3
 8014244:	6978      	ldr	r0, [r7, #20]
 8014246:	f7f9 f891 	bl	800d36c <pbuf_remove_header>
 801424a:	4603      	mov	r3, r0
 801424c:	2b00      	cmp	r3, #0
 801424e:	d009      	beq.n	8014264 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8014250:	4b40      	ldr	r3, [pc, #256]	; (8014354 <icmp_input+0x1f8>)
 8014252:	22b6      	movs	r2, #182	; 0xb6
 8014254:	4940      	ldr	r1, [pc, #256]	; (8014358 <icmp_input+0x1fc>)
 8014256:	4841      	ldr	r0, [pc, #260]	; (801435c <icmp_input+0x200>)
 8014258:	f002 f954 	bl	8016504 <iprintf>
          pbuf_free(r);
 801425c:	6978      	ldr	r0, [r7, #20]
 801425e:	f7f9 f90b 	bl	800d478 <pbuf_free>
          goto icmperr;
 8014262:	e06c      	b.n	801433e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8014264:	6879      	ldr	r1, [r7, #4]
 8014266:	6978      	ldr	r0, [r7, #20]
 8014268:	f7f9 fa2a 	bl	800d6c0 <pbuf_copy>
 801426c:	4603      	mov	r3, r0
 801426e:	2b00      	cmp	r3, #0
 8014270:	d003      	beq.n	801427a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8014272:	6978      	ldr	r0, [r7, #20]
 8014274:	f7f9 f900 	bl	800d478 <pbuf_free>
          goto icmperr;
 8014278:	e061      	b.n	801433e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801427a:	6878      	ldr	r0, [r7, #4]
 801427c:	f7f9 f8fc 	bl	800d478 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8014280:	697b      	ldr	r3, [r7, #20]
 8014282:	607b      	str	r3, [r7, #4]
 8014284:	e00f      	b.n	80142a6 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014286:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014288:	330e      	adds	r3, #14
 801428a:	4619      	mov	r1, r3
 801428c:	6878      	ldr	r0, [r7, #4]
 801428e:	f7f9 f86d 	bl	800d36c <pbuf_remove_header>
 8014292:	4603      	mov	r3, r0
 8014294:	2b00      	cmp	r3, #0
 8014296:	d006      	beq.n	80142a6 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8014298:	4b2e      	ldr	r3, [pc, #184]	; (8014354 <icmp_input+0x1f8>)
 801429a:	22c7      	movs	r2, #199	; 0xc7
 801429c:	4930      	ldr	r1, [pc, #192]	; (8014360 <icmp_input+0x204>)
 801429e:	482f      	ldr	r0, [pc, #188]	; (801435c <icmp_input+0x200>)
 80142a0:	f002 f930 	bl	8016504 <iprintf>
          goto icmperr;
 80142a4:	e04b      	b.n	801433e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80142a6:	687b      	ldr	r3, [r7, #4]
 80142a8:	685b      	ldr	r3, [r3, #4]
 80142aa:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80142ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80142ae:	4619      	mov	r1, r3
 80142b0:	6878      	ldr	r0, [r7, #4]
 80142b2:	f7f9 f84b 	bl	800d34c <pbuf_add_header>
 80142b6:	4603      	mov	r3, r0
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	d12b      	bne.n	8014314 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	685b      	ldr	r3, [r3, #4]
 80142c0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80142c2:	69fb      	ldr	r3, [r7, #28]
 80142c4:	681a      	ldr	r2, [r3, #0]
 80142c6:	68fb      	ldr	r3, [r7, #12]
 80142c8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80142ca:	4b20      	ldr	r3, [pc, #128]	; (801434c <icmp_input+0x1f0>)
 80142cc:	691a      	ldr	r2, [r3, #16]
 80142ce:	68fb      	ldr	r3, [r7, #12]
 80142d0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80142d2:	693b      	ldr	r3, [r7, #16]
 80142d4:	2200      	movs	r2, #0
 80142d6:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80142d8:	693b      	ldr	r3, [r7, #16]
 80142da:	2200      	movs	r2, #0
 80142dc:	709a      	strb	r2, [r3, #2]
 80142de:	2200      	movs	r2, #0
 80142e0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80142e2:	68fb      	ldr	r3, [r7, #12]
 80142e4:	22ff      	movs	r2, #255	; 0xff
 80142e6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80142e8:	68fb      	ldr	r3, [r7, #12]
 80142ea:	2200      	movs	r2, #0
 80142ec:	729a      	strb	r2, [r3, #10]
 80142ee:	2200      	movs	r2, #0
 80142f0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80142f2:	683b      	ldr	r3, [r7, #0]
 80142f4:	9302      	str	r3, [sp, #8]
 80142f6:	2301      	movs	r3, #1
 80142f8:	9301      	str	r3, [sp, #4]
 80142fa:	2300      	movs	r3, #0
 80142fc:	9300      	str	r3, [sp, #0]
 80142fe:	23ff      	movs	r3, #255	; 0xff
 8014300:	2200      	movs	r2, #0
 8014302:	69f9      	ldr	r1, [r7, #28]
 8014304:	6878      	ldr	r0, [r7, #4]
 8014306:	f000 fa75 	bl	80147f4 <ip4_output_if>
 801430a:	4603      	mov	r3, r0
 801430c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801430e:	e001      	b.n	8014314 <icmp_input+0x1b8>
      break;
 8014310:	bf00      	nop
 8014312:	e000      	b.n	8014316 <icmp_input+0x1ba>
      break;
 8014314:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8014316:	6878      	ldr	r0, [r7, #4]
 8014318:	f7f9 f8ae 	bl	800d478 <pbuf_free>
  return;
 801431c:	e013      	b.n	8014346 <icmp_input+0x1ea>
    goto lenerr;
 801431e:	bf00      	nop
 8014320:	e002      	b.n	8014328 <icmp_input+0x1cc>
    goto lenerr;
 8014322:	bf00      	nop
 8014324:	e000      	b.n	8014328 <icmp_input+0x1cc>
        goto lenerr;
 8014326:	bf00      	nop
lenerr:
  pbuf_free(p);
 8014328:	6878      	ldr	r0, [r7, #4]
 801432a:	f7f9 f8a5 	bl	800d478 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801432e:	e00a      	b.n	8014346 <icmp_input+0x1ea>
        goto icmperr;
 8014330:	bf00      	nop
 8014332:	e004      	b.n	801433e <icmp_input+0x1e2>
        goto icmperr;
 8014334:	bf00      	nop
 8014336:	e002      	b.n	801433e <icmp_input+0x1e2>
          goto icmperr;
 8014338:	bf00      	nop
 801433a:	e000      	b.n	801433e <icmp_input+0x1e2>
          goto icmperr;
 801433c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801433e:	6878      	ldr	r0, [r7, #4]
 8014340:	f7f9 f89a 	bl	800d478 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014344:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8014346:	3728      	adds	r7, #40	; 0x28
 8014348:	46bd      	mov	sp, r7
 801434a:	bd80      	pop	{r7, pc}
 801434c:	20007848 	.word	0x20007848
 8014350:	2000785c 	.word	0x2000785c
 8014354:	08019c34 	.word	0x08019c34
 8014358:	08019c6c 	.word	0x08019c6c
 801435c:	08019ca4 	.word	0x08019ca4
 8014360:	08019ccc 	.word	0x08019ccc

08014364 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8014364:	b580      	push	{r7, lr}
 8014366:	b082      	sub	sp, #8
 8014368:	af00      	add	r7, sp, #0
 801436a:	6078      	str	r0, [r7, #4]
 801436c:	460b      	mov	r3, r1
 801436e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8014370:	78fb      	ldrb	r3, [r7, #3]
 8014372:	461a      	mov	r2, r3
 8014374:	2103      	movs	r1, #3
 8014376:	6878      	ldr	r0, [r7, #4]
 8014378:	f000 f814 	bl	80143a4 <icmp_send_response>
}
 801437c:	bf00      	nop
 801437e:	3708      	adds	r7, #8
 8014380:	46bd      	mov	sp, r7
 8014382:	bd80      	pop	{r7, pc}

08014384 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8014384:	b580      	push	{r7, lr}
 8014386:	b082      	sub	sp, #8
 8014388:	af00      	add	r7, sp, #0
 801438a:	6078      	str	r0, [r7, #4]
 801438c:	460b      	mov	r3, r1
 801438e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8014390:	78fb      	ldrb	r3, [r7, #3]
 8014392:	461a      	mov	r2, r3
 8014394:	210b      	movs	r1, #11
 8014396:	6878      	ldr	r0, [r7, #4]
 8014398:	f000 f804 	bl	80143a4 <icmp_send_response>
}
 801439c:	bf00      	nop
 801439e:	3708      	adds	r7, #8
 80143a0:	46bd      	mov	sp, r7
 80143a2:	bd80      	pop	{r7, pc}

080143a4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80143a4:	b580      	push	{r7, lr}
 80143a6:	b08c      	sub	sp, #48	; 0x30
 80143a8:	af04      	add	r7, sp, #16
 80143aa:	6078      	str	r0, [r7, #4]
 80143ac:	460b      	mov	r3, r1
 80143ae:	70fb      	strb	r3, [r7, #3]
 80143b0:	4613      	mov	r3, r2
 80143b2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80143b4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80143b8:	2124      	movs	r1, #36	; 0x24
 80143ba:	2022      	movs	r0, #34	; 0x22
 80143bc:	f7f8 fd78 	bl	800ceb0 <pbuf_alloc>
 80143c0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80143c2:	69fb      	ldr	r3, [r7, #28]
 80143c4:	2b00      	cmp	r3, #0
 80143c6:	d04c      	beq.n	8014462 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80143c8:	69fb      	ldr	r3, [r7, #28]
 80143ca:	895b      	ldrh	r3, [r3, #10]
 80143cc:	2b23      	cmp	r3, #35	; 0x23
 80143ce:	d806      	bhi.n	80143de <icmp_send_response+0x3a>
 80143d0:	4b26      	ldr	r3, [pc, #152]	; (801446c <icmp_send_response+0xc8>)
 80143d2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80143d6:	4926      	ldr	r1, [pc, #152]	; (8014470 <icmp_send_response+0xcc>)
 80143d8:	4826      	ldr	r0, [pc, #152]	; (8014474 <icmp_send_response+0xd0>)
 80143da:	f002 f893 	bl	8016504 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	685b      	ldr	r3, [r3, #4]
 80143e2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80143e4:	69fb      	ldr	r3, [r7, #28]
 80143e6:	685b      	ldr	r3, [r3, #4]
 80143e8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80143ea:	697b      	ldr	r3, [r7, #20]
 80143ec:	78fa      	ldrb	r2, [r7, #3]
 80143ee:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80143f0:	697b      	ldr	r3, [r7, #20]
 80143f2:	78ba      	ldrb	r2, [r7, #2]
 80143f4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80143f6:	697b      	ldr	r3, [r7, #20]
 80143f8:	2200      	movs	r2, #0
 80143fa:	711a      	strb	r2, [r3, #4]
 80143fc:	2200      	movs	r2, #0
 80143fe:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8014400:	697b      	ldr	r3, [r7, #20]
 8014402:	2200      	movs	r2, #0
 8014404:	719a      	strb	r2, [r3, #6]
 8014406:	2200      	movs	r2, #0
 8014408:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801440a:	69fb      	ldr	r3, [r7, #28]
 801440c:	685b      	ldr	r3, [r3, #4]
 801440e:	f103 0008 	add.w	r0, r3, #8
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	685b      	ldr	r3, [r3, #4]
 8014416:	221c      	movs	r2, #28
 8014418:	4619      	mov	r1, r3
 801441a:	f002 f85d 	bl	80164d8 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801441e:	69bb      	ldr	r3, [r7, #24]
 8014420:	68db      	ldr	r3, [r3, #12]
 8014422:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8014424:	f107 030c 	add.w	r3, r7, #12
 8014428:	4618      	mov	r0, r3
 801442a:	f000 f825 	bl	8014478 <ip4_route>
 801442e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8014430:	693b      	ldr	r3, [r7, #16]
 8014432:	2b00      	cmp	r3, #0
 8014434:	d011      	beq.n	801445a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8014436:	697b      	ldr	r3, [r7, #20]
 8014438:	2200      	movs	r2, #0
 801443a:	709a      	strb	r2, [r3, #2]
 801443c:	2200      	movs	r2, #0
 801443e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8014440:	f107 020c 	add.w	r2, r7, #12
 8014444:	693b      	ldr	r3, [r7, #16]
 8014446:	9302      	str	r3, [sp, #8]
 8014448:	2301      	movs	r3, #1
 801444a:	9301      	str	r3, [sp, #4]
 801444c:	2300      	movs	r3, #0
 801444e:	9300      	str	r3, [sp, #0]
 8014450:	23ff      	movs	r3, #255	; 0xff
 8014452:	2100      	movs	r1, #0
 8014454:	69f8      	ldr	r0, [r7, #28]
 8014456:	f000 f9cd 	bl	80147f4 <ip4_output_if>
  }
  pbuf_free(q);
 801445a:	69f8      	ldr	r0, [r7, #28]
 801445c:	f7f9 f80c 	bl	800d478 <pbuf_free>
 8014460:	e000      	b.n	8014464 <icmp_send_response+0xc0>
    return;
 8014462:	bf00      	nop
}
 8014464:	3720      	adds	r7, #32
 8014466:	46bd      	mov	sp, r7
 8014468:	bd80      	pop	{r7, pc}
 801446a:	bf00      	nop
 801446c:	08019c34 	.word	0x08019c34
 8014470:	08019d00 	.word	0x08019d00
 8014474:	08019ca4 	.word	0x08019ca4

08014478 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8014478:	b480      	push	{r7}
 801447a:	b085      	sub	sp, #20
 801447c:	af00      	add	r7, sp, #0
 801447e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8014480:	4b33      	ldr	r3, [pc, #204]	; (8014550 <ip4_route+0xd8>)
 8014482:	681b      	ldr	r3, [r3, #0]
 8014484:	60fb      	str	r3, [r7, #12]
 8014486:	e036      	b.n	80144f6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014488:	68fb      	ldr	r3, [r7, #12]
 801448a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801448e:	f003 0301 	and.w	r3, r3, #1
 8014492:	b2db      	uxtb	r3, r3
 8014494:	2b00      	cmp	r3, #0
 8014496:	d02b      	beq.n	80144f0 <ip4_route+0x78>
 8014498:	68fb      	ldr	r3, [r7, #12]
 801449a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801449e:	089b      	lsrs	r3, r3, #2
 80144a0:	f003 0301 	and.w	r3, r3, #1
 80144a4:	b2db      	uxtb	r3, r3
 80144a6:	2b00      	cmp	r3, #0
 80144a8:	d022      	beq.n	80144f0 <ip4_route+0x78>
 80144aa:	68fb      	ldr	r3, [r7, #12]
 80144ac:	3304      	adds	r3, #4
 80144ae:	681b      	ldr	r3, [r3, #0]
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	d01d      	beq.n	80144f0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	681a      	ldr	r2, [r3, #0]
 80144b8:	68fb      	ldr	r3, [r7, #12]
 80144ba:	3304      	adds	r3, #4
 80144bc:	681b      	ldr	r3, [r3, #0]
 80144be:	405a      	eors	r2, r3
 80144c0:	68fb      	ldr	r3, [r7, #12]
 80144c2:	3308      	adds	r3, #8
 80144c4:	681b      	ldr	r3, [r3, #0]
 80144c6:	4013      	ands	r3, r2
 80144c8:	2b00      	cmp	r3, #0
 80144ca:	d101      	bne.n	80144d0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80144cc:	68fb      	ldr	r3, [r7, #12]
 80144ce:	e038      	b.n	8014542 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80144d0:	68fb      	ldr	r3, [r7, #12]
 80144d2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80144d6:	f003 0302 	and.w	r3, r3, #2
 80144da:	2b00      	cmp	r3, #0
 80144dc:	d108      	bne.n	80144f0 <ip4_route+0x78>
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	681a      	ldr	r2, [r3, #0]
 80144e2:	68fb      	ldr	r3, [r7, #12]
 80144e4:	330c      	adds	r3, #12
 80144e6:	681b      	ldr	r3, [r3, #0]
 80144e8:	429a      	cmp	r2, r3
 80144ea:	d101      	bne.n	80144f0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80144ec:	68fb      	ldr	r3, [r7, #12]
 80144ee:	e028      	b.n	8014542 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80144f0:	68fb      	ldr	r3, [r7, #12]
 80144f2:	681b      	ldr	r3, [r3, #0]
 80144f4:	60fb      	str	r3, [r7, #12]
 80144f6:	68fb      	ldr	r3, [r7, #12]
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d1c5      	bne.n	8014488 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80144fc:	4b15      	ldr	r3, [pc, #84]	; (8014554 <ip4_route+0xdc>)
 80144fe:	681b      	ldr	r3, [r3, #0]
 8014500:	2b00      	cmp	r3, #0
 8014502:	d01a      	beq.n	801453a <ip4_route+0xc2>
 8014504:	4b13      	ldr	r3, [pc, #76]	; (8014554 <ip4_route+0xdc>)
 8014506:	681b      	ldr	r3, [r3, #0]
 8014508:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801450c:	f003 0301 	and.w	r3, r3, #1
 8014510:	2b00      	cmp	r3, #0
 8014512:	d012      	beq.n	801453a <ip4_route+0xc2>
 8014514:	4b0f      	ldr	r3, [pc, #60]	; (8014554 <ip4_route+0xdc>)
 8014516:	681b      	ldr	r3, [r3, #0]
 8014518:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801451c:	f003 0304 	and.w	r3, r3, #4
 8014520:	2b00      	cmp	r3, #0
 8014522:	d00a      	beq.n	801453a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8014524:	4b0b      	ldr	r3, [pc, #44]	; (8014554 <ip4_route+0xdc>)
 8014526:	681b      	ldr	r3, [r3, #0]
 8014528:	3304      	adds	r3, #4
 801452a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801452c:	2b00      	cmp	r3, #0
 801452e:	d004      	beq.n	801453a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	681b      	ldr	r3, [r3, #0]
 8014534:	b2db      	uxtb	r3, r3
 8014536:	2b7f      	cmp	r3, #127	; 0x7f
 8014538:	d101      	bne.n	801453e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801453a:	2300      	movs	r3, #0
 801453c:	e001      	b.n	8014542 <ip4_route+0xca>
  }

  return netif_default;
 801453e:	4b05      	ldr	r3, [pc, #20]	; (8014554 <ip4_route+0xdc>)
 8014540:	681b      	ldr	r3, [r3, #0]
}
 8014542:	4618      	mov	r0, r3
 8014544:	3714      	adds	r7, #20
 8014546:	46bd      	mov	sp, r7
 8014548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801454c:	4770      	bx	lr
 801454e:	bf00      	nop
 8014550:	2000af4c 	.word	0x2000af4c
 8014554:	2000af50 	.word	0x2000af50

08014558 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8014558:	b580      	push	{r7, lr}
 801455a:	b082      	sub	sp, #8
 801455c:	af00      	add	r7, sp, #0
 801455e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8014566:	f003 0301 	and.w	r3, r3, #1
 801456a:	b2db      	uxtb	r3, r3
 801456c:	2b00      	cmp	r3, #0
 801456e:	d016      	beq.n	801459e <ip4_input_accept+0x46>
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	3304      	adds	r3, #4
 8014574:	681b      	ldr	r3, [r3, #0]
 8014576:	2b00      	cmp	r3, #0
 8014578:	d011      	beq.n	801459e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801457a:	4b0b      	ldr	r3, [pc, #44]	; (80145a8 <ip4_input_accept+0x50>)
 801457c:	695a      	ldr	r2, [r3, #20]
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	3304      	adds	r3, #4
 8014582:	681b      	ldr	r3, [r3, #0]
 8014584:	429a      	cmp	r2, r3
 8014586:	d008      	beq.n	801459a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8014588:	4b07      	ldr	r3, [pc, #28]	; (80145a8 <ip4_input_accept+0x50>)
 801458a:	695b      	ldr	r3, [r3, #20]
 801458c:	6879      	ldr	r1, [r7, #4]
 801458e:	4618      	mov	r0, r3
 8014590:	f000 fa08 	bl	80149a4 <ip4_addr_isbroadcast_u32>
 8014594:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8014596:	2b00      	cmp	r3, #0
 8014598:	d001      	beq.n	801459e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801459a:	2301      	movs	r3, #1
 801459c:	e000      	b.n	80145a0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801459e:	2300      	movs	r3, #0
}
 80145a0:	4618      	mov	r0, r3
 80145a2:	3708      	adds	r7, #8
 80145a4:	46bd      	mov	sp, r7
 80145a6:	bd80      	pop	{r7, pc}
 80145a8:	20007848 	.word	0x20007848

080145ac <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80145ac:	b580      	push	{r7, lr}
 80145ae:	b086      	sub	sp, #24
 80145b0:	af00      	add	r7, sp, #0
 80145b2:	6078      	str	r0, [r7, #4]
 80145b4:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	685b      	ldr	r3, [r3, #4]
 80145ba:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80145bc:	697b      	ldr	r3, [r7, #20]
 80145be:	781b      	ldrb	r3, [r3, #0]
 80145c0:	091b      	lsrs	r3, r3, #4
 80145c2:	b2db      	uxtb	r3, r3
 80145c4:	2b04      	cmp	r3, #4
 80145c6:	d004      	beq.n	80145d2 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80145c8:	6878      	ldr	r0, [r7, #4]
 80145ca:	f7f8 ff55 	bl	800d478 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80145ce:	2300      	movs	r3, #0
 80145d0:	e107      	b.n	80147e2 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80145d2:	697b      	ldr	r3, [r7, #20]
 80145d4:	781b      	ldrb	r3, [r3, #0]
 80145d6:	f003 030f 	and.w	r3, r3, #15
 80145da:	b2db      	uxtb	r3, r3
 80145dc:	009b      	lsls	r3, r3, #2
 80145de:	b2db      	uxtb	r3, r3
 80145e0:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80145e2:	697b      	ldr	r3, [r7, #20]
 80145e4:	885b      	ldrh	r3, [r3, #2]
 80145e6:	b29b      	uxth	r3, r3
 80145e8:	4618      	mov	r0, r3
 80145ea:	f7f7 fc11 	bl	800be10 <lwip_htons>
 80145ee:	4603      	mov	r3, r0
 80145f0:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	891b      	ldrh	r3, [r3, #8]
 80145f6:	89ba      	ldrh	r2, [r7, #12]
 80145f8:	429a      	cmp	r2, r3
 80145fa:	d204      	bcs.n	8014606 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80145fc:	89bb      	ldrh	r3, [r7, #12]
 80145fe:	4619      	mov	r1, r3
 8014600:	6878      	ldr	r0, [r7, #4]
 8014602:	f7f8 fdb3 	bl	800d16c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	895b      	ldrh	r3, [r3, #10]
 801460a:	89fa      	ldrh	r2, [r7, #14]
 801460c:	429a      	cmp	r2, r3
 801460e:	d807      	bhi.n	8014620 <ip4_input+0x74>
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	891b      	ldrh	r3, [r3, #8]
 8014614:	89ba      	ldrh	r2, [r7, #12]
 8014616:	429a      	cmp	r2, r3
 8014618:	d802      	bhi.n	8014620 <ip4_input+0x74>
 801461a:	89fb      	ldrh	r3, [r7, #14]
 801461c:	2b13      	cmp	r3, #19
 801461e:	d804      	bhi.n	801462a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8014620:	6878      	ldr	r0, [r7, #4]
 8014622:	f7f8 ff29 	bl	800d478 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8014626:	2300      	movs	r3, #0
 8014628:	e0db      	b.n	80147e2 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801462a:	697b      	ldr	r3, [r7, #20]
 801462c:	691b      	ldr	r3, [r3, #16]
 801462e:	4a6f      	ldr	r2, [pc, #444]	; (80147ec <ip4_input+0x240>)
 8014630:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8014632:	697b      	ldr	r3, [r7, #20]
 8014634:	68db      	ldr	r3, [r3, #12]
 8014636:	4a6d      	ldr	r2, [pc, #436]	; (80147ec <ip4_input+0x240>)
 8014638:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801463a:	4b6c      	ldr	r3, [pc, #432]	; (80147ec <ip4_input+0x240>)
 801463c:	695b      	ldr	r3, [r3, #20]
 801463e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014642:	2be0      	cmp	r3, #224	; 0xe0
 8014644:	d112      	bne.n	801466c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8014646:	683b      	ldr	r3, [r7, #0]
 8014648:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801464c:	f003 0301 	and.w	r3, r3, #1
 8014650:	b2db      	uxtb	r3, r3
 8014652:	2b00      	cmp	r3, #0
 8014654:	d007      	beq.n	8014666 <ip4_input+0xba>
 8014656:	683b      	ldr	r3, [r7, #0]
 8014658:	3304      	adds	r3, #4
 801465a:	681b      	ldr	r3, [r3, #0]
 801465c:	2b00      	cmp	r3, #0
 801465e:	d002      	beq.n	8014666 <ip4_input+0xba>
      netif = inp;
 8014660:	683b      	ldr	r3, [r7, #0]
 8014662:	613b      	str	r3, [r7, #16]
 8014664:	e02a      	b.n	80146bc <ip4_input+0x110>
    } else {
      netif = NULL;
 8014666:	2300      	movs	r3, #0
 8014668:	613b      	str	r3, [r7, #16]
 801466a:	e027      	b.n	80146bc <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801466c:	6838      	ldr	r0, [r7, #0]
 801466e:	f7ff ff73 	bl	8014558 <ip4_input_accept>
 8014672:	4603      	mov	r3, r0
 8014674:	2b00      	cmp	r3, #0
 8014676:	d002      	beq.n	801467e <ip4_input+0xd2>
      netif = inp;
 8014678:	683b      	ldr	r3, [r7, #0]
 801467a:	613b      	str	r3, [r7, #16]
 801467c:	e01e      	b.n	80146bc <ip4_input+0x110>
    } else {
      netif = NULL;
 801467e:	2300      	movs	r3, #0
 8014680:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8014682:	4b5a      	ldr	r3, [pc, #360]	; (80147ec <ip4_input+0x240>)
 8014684:	695b      	ldr	r3, [r3, #20]
 8014686:	b2db      	uxtb	r3, r3
 8014688:	2b7f      	cmp	r3, #127	; 0x7f
 801468a:	d017      	beq.n	80146bc <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801468c:	4b58      	ldr	r3, [pc, #352]	; (80147f0 <ip4_input+0x244>)
 801468e:	681b      	ldr	r3, [r3, #0]
 8014690:	613b      	str	r3, [r7, #16]
 8014692:	e00e      	b.n	80146b2 <ip4_input+0x106>
          if (netif == inp) {
 8014694:	693a      	ldr	r2, [r7, #16]
 8014696:	683b      	ldr	r3, [r7, #0]
 8014698:	429a      	cmp	r2, r3
 801469a:	d006      	beq.n	80146aa <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801469c:	6938      	ldr	r0, [r7, #16]
 801469e:	f7ff ff5b 	bl	8014558 <ip4_input_accept>
 80146a2:	4603      	mov	r3, r0
 80146a4:	2b00      	cmp	r3, #0
 80146a6:	d108      	bne.n	80146ba <ip4_input+0x10e>
 80146a8:	e000      	b.n	80146ac <ip4_input+0x100>
            continue;
 80146aa:	bf00      	nop
        NETIF_FOREACH(netif) {
 80146ac:	693b      	ldr	r3, [r7, #16]
 80146ae:	681b      	ldr	r3, [r3, #0]
 80146b0:	613b      	str	r3, [r7, #16]
 80146b2:	693b      	ldr	r3, [r7, #16]
 80146b4:	2b00      	cmp	r3, #0
 80146b6:	d1ed      	bne.n	8014694 <ip4_input+0xe8>
 80146b8:	e000      	b.n	80146bc <ip4_input+0x110>
            break;
 80146ba:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80146bc:	4b4b      	ldr	r3, [pc, #300]	; (80147ec <ip4_input+0x240>)
 80146be:	691b      	ldr	r3, [r3, #16]
 80146c0:	6839      	ldr	r1, [r7, #0]
 80146c2:	4618      	mov	r0, r3
 80146c4:	f000 f96e 	bl	80149a4 <ip4_addr_isbroadcast_u32>
 80146c8:	4603      	mov	r3, r0
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	d105      	bne.n	80146da <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80146ce:	4b47      	ldr	r3, [pc, #284]	; (80147ec <ip4_input+0x240>)
 80146d0:	691b      	ldr	r3, [r3, #16]
 80146d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80146d6:	2be0      	cmp	r3, #224	; 0xe0
 80146d8:	d104      	bne.n	80146e4 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80146da:	6878      	ldr	r0, [r7, #4]
 80146dc:	f7f8 fecc 	bl	800d478 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80146e0:	2300      	movs	r3, #0
 80146e2:	e07e      	b.n	80147e2 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80146e4:	693b      	ldr	r3, [r7, #16]
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	d104      	bne.n	80146f4 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80146ea:	6878      	ldr	r0, [r7, #4]
 80146ec:	f7f8 fec4 	bl	800d478 <pbuf_free>
    return ERR_OK;
 80146f0:	2300      	movs	r3, #0
 80146f2:	e076      	b.n	80147e2 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80146f4:	697b      	ldr	r3, [r7, #20]
 80146f6:	88db      	ldrh	r3, [r3, #6]
 80146f8:	b29b      	uxth	r3, r3
 80146fa:	461a      	mov	r2, r3
 80146fc:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8014700:	4013      	ands	r3, r2
 8014702:	2b00      	cmp	r3, #0
 8014704:	d00b      	beq.n	801471e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8014706:	6878      	ldr	r0, [r7, #4]
 8014708:	f000 fc92 	bl	8015030 <ip4_reass>
 801470c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	2b00      	cmp	r3, #0
 8014712:	d101      	bne.n	8014718 <ip4_input+0x16c>
      return ERR_OK;
 8014714:	2300      	movs	r3, #0
 8014716:	e064      	b.n	80147e2 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	685b      	ldr	r3, [r3, #4]
 801471c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801471e:	4a33      	ldr	r2, [pc, #204]	; (80147ec <ip4_input+0x240>)
 8014720:	693b      	ldr	r3, [r7, #16]
 8014722:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8014724:	4a31      	ldr	r2, [pc, #196]	; (80147ec <ip4_input+0x240>)
 8014726:	683b      	ldr	r3, [r7, #0]
 8014728:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801472a:	4a30      	ldr	r2, [pc, #192]	; (80147ec <ip4_input+0x240>)
 801472c:	697b      	ldr	r3, [r7, #20]
 801472e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8014730:	697b      	ldr	r3, [r7, #20]
 8014732:	781b      	ldrb	r3, [r3, #0]
 8014734:	f003 030f 	and.w	r3, r3, #15
 8014738:	b2db      	uxtb	r3, r3
 801473a:	009b      	lsls	r3, r3, #2
 801473c:	b2db      	uxtb	r3, r3
 801473e:	b29a      	uxth	r2, r3
 8014740:	4b2a      	ldr	r3, [pc, #168]	; (80147ec <ip4_input+0x240>)
 8014742:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8014744:	89fb      	ldrh	r3, [r7, #14]
 8014746:	4619      	mov	r1, r3
 8014748:	6878      	ldr	r0, [r7, #4]
 801474a:	f7f8 fe0f 	bl	800d36c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801474e:	697b      	ldr	r3, [r7, #20]
 8014750:	7a5b      	ldrb	r3, [r3, #9]
 8014752:	2b11      	cmp	r3, #17
 8014754:	d006      	beq.n	8014764 <ip4_input+0x1b8>
 8014756:	2b11      	cmp	r3, #17
 8014758:	dc13      	bgt.n	8014782 <ip4_input+0x1d6>
 801475a:	2b01      	cmp	r3, #1
 801475c:	d00c      	beq.n	8014778 <ip4_input+0x1cc>
 801475e:	2b06      	cmp	r3, #6
 8014760:	d005      	beq.n	801476e <ip4_input+0x1c2>
 8014762:	e00e      	b.n	8014782 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8014764:	6839      	ldr	r1, [r7, #0]
 8014766:	6878      	ldr	r0, [r7, #4]
 8014768:	f7fe fc68 	bl	801303c <udp_input>
        break;
 801476c:	e026      	b.n	80147bc <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801476e:	6839      	ldr	r1, [r7, #0]
 8014770:	6878      	ldr	r0, [r7, #4]
 8014772:	f7fa fcb5 	bl	800f0e0 <tcp_input>
        break;
 8014776:	e021      	b.n	80147bc <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8014778:	6839      	ldr	r1, [r7, #0]
 801477a:	6878      	ldr	r0, [r7, #4]
 801477c:	f7ff fcee 	bl	801415c <icmp_input>
        break;
 8014780:	e01c      	b.n	80147bc <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8014782:	4b1a      	ldr	r3, [pc, #104]	; (80147ec <ip4_input+0x240>)
 8014784:	695b      	ldr	r3, [r3, #20]
 8014786:	6939      	ldr	r1, [r7, #16]
 8014788:	4618      	mov	r0, r3
 801478a:	f000 f90b 	bl	80149a4 <ip4_addr_isbroadcast_u32>
 801478e:	4603      	mov	r3, r0
 8014790:	2b00      	cmp	r3, #0
 8014792:	d10f      	bne.n	80147b4 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014794:	4b15      	ldr	r3, [pc, #84]	; (80147ec <ip4_input+0x240>)
 8014796:	695b      	ldr	r3, [r3, #20]
 8014798:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801479c:	2be0      	cmp	r3, #224	; 0xe0
 801479e:	d009      	beq.n	80147b4 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80147a0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80147a4:	4619      	mov	r1, r3
 80147a6:	6878      	ldr	r0, [r7, #4]
 80147a8:	f7f8 fe53 	bl	800d452 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80147ac:	2102      	movs	r1, #2
 80147ae:	6878      	ldr	r0, [r7, #4]
 80147b0:	f7ff fdd8 	bl	8014364 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80147b4:	6878      	ldr	r0, [r7, #4]
 80147b6:	f7f8 fe5f 	bl	800d478 <pbuf_free>
        break;
 80147ba:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80147bc:	4b0b      	ldr	r3, [pc, #44]	; (80147ec <ip4_input+0x240>)
 80147be:	2200      	movs	r2, #0
 80147c0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80147c2:	4b0a      	ldr	r3, [pc, #40]	; (80147ec <ip4_input+0x240>)
 80147c4:	2200      	movs	r2, #0
 80147c6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80147c8:	4b08      	ldr	r3, [pc, #32]	; (80147ec <ip4_input+0x240>)
 80147ca:	2200      	movs	r2, #0
 80147cc:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80147ce:	4b07      	ldr	r3, [pc, #28]	; (80147ec <ip4_input+0x240>)
 80147d0:	2200      	movs	r2, #0
 80147d2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80147d4:	4b05      	ldr	r3, [pc, #20]	; (80147ec <ip4_input+0x240>)
 80147d6:	2200      	movs	r2, #0
 80147d8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80147da:	4b04      	ldr	r3, [pc, #16]	; (80147ec <ip4_input+0x240>)
 80147dc:	2200      	movs	r2, #0
 80147de:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80147e0:	2300      	movs	r3, #0
}
 80147e2:	4618      	mov	r0, r3
 80147e4:	3718      	adds	r7, #24
 80147e6:	46bd      	mov	sp, r7
 80147e8:	bd80      	pop	{r7, pc}
 80147ea:	bf00      	nop
 80147ec:	20007848 	.word	0x20007848
 80147f0:	2000af4c 	.word	0x2000af4c

080147f4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80147f4:	b580      	push	{r7, lr}
 80147f6:	b08a      	sub	sp, #40	; 0x28
 80147f8:	af04      	add	r7, sp, #16
 80147fa:	60f8      	str	r0, [r7, #12]
 80147fc:	60b9      	str	r1, [r7, #8]
 80147fe:	607a      	str	r2, [r7, #4]
 8014800:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8014802:	68bb      	ldr	r3, [r7, #8]
 8014804:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	2b00      	cmp	r3, #0
 801480a:	d009      	beq.n	8014820 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801480c:	68bb      	ldr	r3, [r7, #8]
 801480e:	2b00      	cmp	r3, #0
 8014810:	d003      	beq.n	801481a <ip4_output_if+0x26>
 8014812:	68bb      	ldr	r3, [r7, #8]
 8014814:	681b      	ldr	r3, [r3, #0]
 8014816:	2b00      	cmp	r3, #0
 8014818:	d102      	bne.n	8014820 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801481a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801481c:	3304      	adds	r3, #4
 801481e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8014820:	78fa      	ldrb	r2, [r7, #3]
 8014822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014824:	9302      	str	r3, [sp, #8]
 8014826:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801482a:	9301      	str	r3, [sp, #4]
 801482c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014830:	9300      	str	r3, [sp, #0]
 8014832:	4613      	mov	r3, r2
 8014834:	687a      	ldr	r2, [r7, #4]
 8014836:	6979      	ldr	r1, [r7, #20]
 8014838:	68f8      	ldr	r0, [r7, #12]
 801483a:	f000 f805 	bl	8014848 <ip4_output_if_src>
 801483e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8014840:	4618      	mov	r0, r3
 8014842:	3718      	adds	r7, #24
 8014844:	46bd      	mov	sp, r7
 8014846:	bd80      	pop	{r7, pc}

08014848 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8014848:	b580      	push	{r7, lr}
 801484a:	b088      	sub	sp, #32
 801484c:	af00      	add	r7, sp, #0
 801484e:	60f8      	str	r0, [r7, #12]
 8014850:	60b9      	str	r1, [r7, #8]
 8014852:	607a      	str	r2, [r7, #4]
 8014854:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8014856:	68fb      	ldr	r3, [r7, #12]
 8014858:	7b9b      	ldrb	r3, [r3, #14]
 801485a:	2b01      	cmp	r3, #1
 801485c:	d006      	beq.n	801486c <ip4_output_if_src+0x24>
 801485e:	4b4b      	ldr	r3, [pc, #300]	; (801498c <ip4_output_if_src+0x144>)
 8014860:	f44f 7255 	mov.w	r2, #852	; 0x354
 8014864:	494a      	ldr	r1, [pc, #296]	; (8014990 <ip4_output_if_src+0x148>)
 8014866:	484b      	ldr	r0, [pc, #300]	; (8014994 <ip4_output_if_src+0x14c>)
 8014868:	f001 fe4c 	bl	8016504 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	2b00      	cmp	r3, #0
 8014870:	d060      	beq.n	8014934 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8014872:	2314      	movs	r3, #20
 8014874:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8014876:	2114      	movs	r1, #20
 8014878:	68f8      	ldr	r0, [r7, #12]
 801487a:	f7f8 fd67 	bl	800d34c <pbuf_add_header>
 801487e:	4603      	mov	r3, r0
 8014880:	2b00      	cmp	r3, #0
 8014882:	d002      	beq.n	801488a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8014884:	f06f 0301 	mvn.w	r3, #1
 8014888:	e07c      	b.n	8014984 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801488a:	68fb      	ldr	r3, [r7, #12]
 801488c:	685b      	ldr	r3, [r3, #4]
 801488e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8014890:	68fb      	ldr	r3, [r7, #12]
 8014892:	895b      	ldrh	r3, [r3, #10]
 8014894:	2b13      	cmp	r3, #19
 8014896:	d806      	bhi.n	80148a6 <ip4_output_if_src+0x5e>
 8014898:	4b3c      	ldr	r3, [pc, #240]	; (801498c <ip4_output_if_src+0x144>)
 801489a:	f44f 7262 	mov.w	r2, #904	; 0x388
 801489e:	493e      	ldr	r1, [pc, #248]	; (8014998 <ip4_output_if_src+0x150>)
 80148a0:	483c      	ldr	r0, [pc, #240]	; (8014994 <ip4_output_if_src+0x14c>)
 80148a2:	f001 fe2f 	bl	8016504 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80148a6:	69fb      	ldr	r3, [r7, #28]
 80148a8:	78fa      	ldrb	r2, [r7, #3]
 80148aa:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80148ac:	69fb      	ldr	r3, [r7, #28]
 80148ae:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80148b2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	681a      	ldr	r2, [r3, #0]
 80148b8:	69fb      	ldr	r3, [r7, #28]
 80148ba:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80148bc:	8b7b      	ldrh	r3, [r7, #26]
 80148be:	089b      	lsrs	r3, r3, #2
 80148c0:	b29b      	uxth	r3, r3
 80148c2:	b2db      	uxtb	r3, r3
 80148c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80148c8:	b2da      	uxtb	r2, r3
 80148ca:	69fb      	ldr	r3, [r7, #28]
 80148cc:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80148ce:	69fb      	ldr	r3, [r7, #28]
 80148d0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80148d4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80148d6:	68fb      	ldr	r3, [r7, #12]
 80148d8:	891b      	ldrh	r3, [r3, #8]
 80148da:	4618      	mov	r0, r3
 80148dc:	f7f7 fa98 	bl	800be10 <lwip_htons>
 80148e0:	4603      	mov	r3, r0
 80148e2:	461a      	mov	r2, r3
 80148e4:	69fb      	ldr	r3, [r7, #28]
 80148e6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80148e8:	69fb      	ldr	r3, [r7, #28]
 80148ea:	2200      	movs	r2, #0
 80148ec:	719a      	strb	r2, [r3, #6]
 80148ee:	2200      	movs	r2, #0
 80148f0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80148f2:	4b2a      	ldr	r3, [pc, #168]	; (801499c <ip4_output_if_src+0x154>)
 80148f4:	881b      	ldrh	r3, [r3, #0]
 80148f6:	4618      	mov	r0, r3
 80148f8:	f7f7 fa8a 	bl	800be10 <lwip_htons>
 80148fc:	4603      	mov	r3, r0
 80148fe:	461a      	mov	r2, r3
 8014900:	69fb      	ldr	r3, [r7, #28]
 8014902:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8014904:	4b25      	ldr	r3, [pc, #148]	; (801499c <ip4_output_if_src+0x154>)
 8014906:	881b      	ldrh	r3, [r3, #0]
 8014908:	3301      	adds	r3, #1
 801490a:	b29a      	uxth	r2, r3
 801490c:	4b23      	ldr	r3, [pc, #140]	; (801499c <ip4_output_if_src+0x154>)
 801490e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8014910:	68bb      	ldr	r3, [r7, #8]
 8014912:	2b00      	cmp	r3, #0
 8014914:	d104      	bne.n	8014920 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8014916:	4b22      	ldr	r3, [pc, #136]	; (80149a0 <ip4_output_if_src+0x158>)
 8014918:	681a      	ldr	r2, [r3, #0]
 801491a:	69fb      	ldr	r3, [r7, #28]
 801491c:	60da      	str	r2, [r3, #12]
 801491e:	e003      	b.n	8014928 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8014920:	68bb      	ldr	r3, [r7, #8]
 8014922:	681a      	ldr	r2, [r3, #0]
 8014924:	69fb      	ldr	r3, [r7, #28]
 8014926:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8014928:	69fb      	ldr	r3, [r7, #28]
 801492a:	2200      	movs	r2, #0
 801492c:	729a      	strb	r2, [r3, #10]
 801492e:	2200      	movs	r2, #0
 8014930:	72da      	strb	r2, [r3, #11]
 8014932:	e00f      	b.n	8014954 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8014934:	68fb      	ldr	r3, [r7, #12]
 8014936:	895b      	ldrh	r3, [r3, #10]
 8014938:	2b13      	cmp	r3, #19
 801493a:	d802      	bhi.n	8014942 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801493c:	f06f 0301 	mvn.w	r3, #1
 8014940:	e020      	b.n	8014984 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8014942:	68fb      	ldr	r3, [r7, #12]
 8014944:	685b      	ldr	r3, [r3, #4]
 8014946:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8014948:	69fb      	ldr	r3, [r7, #28]
 801494a:	691b      	ldr	r3, [r3, #16]
 801494c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801494e:	f107 0314 	add.w	r3, r7, #20
 8014952:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8014954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014956:	8c1b      	ldrh	r3, [r3, #32]
 8014958:	2b00      	cmp	r3, #0
 801495a:	d00c      	beq.n	8014976 <ip4_output_if_src+0x12e>
 801495c:	68fb      	ldr	r3, [r7, #12]
 801495e:	891a      	ldrh	r2, [r3, #8]
 8014960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014962:	8c1b      	ldrh	r3, [r3, #32]
 8014964:	429a      	cmp	r2, r3
 8014966:	d906      	bls.n	8014976 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8014968:	687a      	ldr	r2, [r7, #4]
 801496a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801496c:	68f8      	ldr	r0, [r7, #12]
 801496e:	f000 fd4d 	bl	801540c <ip4_frag>
 8014972:	4603      	mov	r3, r0
 8014974:	e006      	b.n	8014984 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8014976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014978:	695b      	ldr	r3, [r3, #20]
 801497a:	687a      	ldr	r2, [r7, #4]
 801497c:	68f9      	ldr	r1, [r7, #12]
 801497e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014980:	4798      	blx	r3
 8014982:	4603      	mov	r3, r0
}
 8014984:	4618      	mov	r0, r3
 8014986:	3720      	adds	r7, #32
 8014988:	46bd      	mov	sp, r7
 801498a:	bd80      	pop	{r7, pc}
 801498c:	08019d2c 	.word	0x08019d2c
 8014990:	08019d60 	.word	0x08019d60
 8014994:	08019d6c 	.word	0x08019d6c
 8014998:	08019d94 	.word	0x08019d94
 801499c:	2000434a 	.word	0x2000434a
 80149a0:	0801a1f0 	.word	0x0801a1f0

080149a4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80149a4:	b480      	push	{r7}
 80149a6:	b085      	sub	sp, #20
 80149a8:	af00      	add	r7, sp, #0
 80149aa:	6078      	str	r0, [r7, #4]
 80149ac:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80149ae:	687b      	ldr	r3, [r7, #4]
 80149b0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80149b8:	d002      	beq.n	80149c0 <ip4_addr_isbroadcast_u32+0x1c>
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	2b00      	cmp	r3, #0
 80149be:	d101      	bne.n	80149c4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80149c0:	2301      	movs	r3, #1
 80149c2:	e02a      	b.n	8014a1a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80149c4:	683b      	ldr	r3, [r7, #0]
 80149c6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80149ca:	f003 0302 	and.w	r3, r3, #2
 80149ce:	2b00      	cmp	r3, #0
 80149d0:	d101      	bne.n	80149d6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80149d2:	2300      	movs	r3, #0
 80149d4:	e021      	b.n	8014a1a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80149d6:	683b      	ldr	r3, [r7, #0]
 80149d8:	3304      	adds	r3, #4
 80149da:	681b      	ldr	r3, [r3, #0]
 80149dc:	687a      	ldr	r2, [r7, #4]
 80149de:	429a      	cmp	r2, r3
 80149e0:	d101      	bne.n	80149e6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80149e2:	2300      	movs	r3, #0
 80149e4:	e019      	b.n	8014a1a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80149e6:	68fa      	ldr	r2, [r7, #12]
 80149e8:	683b      	ldr	r3, [r7, #0]
 80149ea:	3304      	adds	r3, #4
 80149ec:	681b      	ldr	r3, [r3, #0]
 80149ee:	405a      	eors	r2, r3
 80149f0:	683b      	ldr	r3, [r7, #0]
 80149f2:	3308      	adds	r3, #8
 80149f4:	681b      	ldr	r3, [r3, #0]
 80149f6:	4013      	ands	r3, r2
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	d10d      	bne.n	8014a18 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80149fc:	683b      	ldr	r3, [r7, #0]
 80149fe:	3308      	adds	r3, #8
 8014a00:	681b      	ldr	r3, [r3, #0]
 8014a02:	43da      	mvns	r2, r3
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8014a08:	683b      	ldr	r3, [r7, #0]
 8014a0a:	3308      	adds	r3, #8
 8014a0c:	681b      	ldr	r3, [r3, #0]
 8014a0e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014a10:	429a      	cmp	r2, r3
 8014a12:	d101      	bne.n	8014a18 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8014a14:	2301      	movs	r3, #1
 8014a16:	e000      	b.n	8014a1a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8014a18:	2300      	movs	r3, #0
  }
}
 8014a1a:	4618      	mov	r0, r3
 8014a1c:	3714      	adds	r7, #20
 8014a1e:	46bd      	mov	sp, r7
 8014a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a24:	4770      	bx	lr
	...

08014a28 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8014a28:	b580      	push	{r7, lr}
 8014a2a:	b084      	sub	sp, #16
 8014a2c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8014a2e:	2300      	movs	r3, #0
 8014a30:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8014a32:	4b12      	ldr	r3, [pc, #72]	; (8014a7c <ip_reass_tmr+0x54>)
 8014a34:	681b      	ldr	r3, [r3, #0]
 8014a36:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8014a38:	e018      	b.n	8014a6c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8014a3a:	68fb      	ldr	r3, [r7, #12]
 8014a3c:	7fdb      	ldrb	r3, [r3, #31]
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	d00b      	beq.n	8014a5a <ip_reass_tmr+0x32>
      r->timer--;
 8014a42:	68fb      	ldr	r3, [r7, #12]
 8014a44:	7fdb      	ldrb	r3, [r3, #31]
 8014a46:	3b01      	subs	r3, #1
 8014a48:	b2da      	uxtb	r2, r3
 8014a4a:	68fb      	ldr	r3, [r7, #12]
 8014a4c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8014a4e:	68fb      	ldr	r3, [r7, #12]
 8014a50:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8014a52:	68fb      	ldr	r3, [r7, #12]
 8014a54:	681b      	ldr	r3, [r3, #0]
 8014a56:	60fb      	str	r3, [r7, #12]
 8014a58:	e008      	b.n	8014a6c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8014a5a:	68fb      	ldr	r3, [r7, #12]
 8014a5c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8014a5e:	68fb      	ldr	r3, [r7, #12]
 8014a60:	681b      	ldr	r3, [r3, #0]
 8014a62:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8014a64:	68b9      	ldr	r1, [r7, #8]
 8014a66:	6878      	ldr	r0, [r7, #4]
 8014a68:	f000 f80a 	bl	8014a80 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8014a6c:	68fb      	ldr	r3, [r7, #12]
 8014a6e:	2b00      	cmp	r3, #0
 8014a70:	d1e3      	bne.n	8014a3a <ip_reass_tmr+0x12>
    }
  }
}
 8014a72:	bf00      	nop
 8014a74:	bf00      	nop
 8014a76:	3710      	adds	r7, #16
 8014a78:	46bd      	mov	sp, r7
 8014a7a:	bd80      	pop	{r7, pc}
 8014a7c:	2000434c 	.word	0x2000434c

08014a80 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014a80:	b580      	push	{r7, lr}
 8014a82:	b088      	sub	sp, #32
 8014a84:	af00      	add	r7, sp, #0
 8014a86:	6078      	str	r0, [r7, #4]
 8014a88:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8014a8a:	2300      	movs	r3, #0
 8014a8c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8014a8e:	683a      	ldr	r2, [r7, #0]
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	429a      	cmp	r2, r3
 8014a94:	d105      	bne.n	8014aa2 <ip_reass_free_complete_datagram+0x22>
 8014a96:	4b45      	ldr	r3, [pc, #276]	; (8014bac <ip_reass_free_complete_datagram+0x12c>)
 8014a98:	22ab      	movs	r2, #171	; 0xab
 8014a9a:	4945      	ldr	r1, [pc, #276]	; (8014bb0 <ip_reass_free_complete_datagram+0x130>)
 8014a9c:	4845      	ldr	r0, [pc, #276]	; (8014bb4 <ip_reass_free_complete_datagram+0x134>)
 8014a9e:	f001 fd31 	bl	8016504 <iprintf>
  if (prev != NULL) {
 8014aa2:	683b      	ldr	r3, [r7, #0]
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	d00a      	beq.n	8014abe <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8014aa8:	683b      	ldr	r3, [r7, #0]
 8014aaa:	681b      	ldr	r3, [r3, #0]
 8014aac:	687a      	ldr	r2, [r7, #4]
 8014aae:	429a      	cmp	r2, r3
 8014ab0:	d005      	beq.n	8014abe <ip_reass_free_complete_datagram+0x3e>
 8014ab2:	4b3e      	ldr	r3, [pc, #248]	; (8014bac <ip_reass_free_complete_datagram+0x12c>)
 8014ab4:	22ad      	movs	r2, #173	; 0xad
 8014ab6:	4940      	ldr	r1, [pc, #256]	; (8014bb8 <ip_reass_free_complete_datagram+0x138>)
 8014ab8:	483e      	ldr	r0, [pc, #248]	; (8014bb4 <ip_reass_free_complete_datagram+0x134>)
 8014aba:	f001 fd23 	bl	8016504 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8014abe:	687b      	ldr	r3, [r7, #4]
 8014ac0:	685b      	ldr	r3, [r3, #4]
 8014ac2:	685b      	ldr	r3, [r3, #4]
 8014ac4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8014ac6:	697b      	ldr	r3, [r7, #20]
 8014ac8:	889b      	ldrh	r3, [r3, #4]
 8014aca:	b29b      	uxth	r3, r3
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	d12a      	bne.n	8014b26 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	685b      	ldr	r3, [r3, #4]
 8014ad4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8014ad6:	697b      	ldr	r3, [r7, #20]
 8014ad8:	681a      	ldr	r2, [r3, #0]
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8014ade:	69bb      	ldr	r3, [r7, #24]
 8014ae0:	6858      	ldr	r0, [r3, #4]
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	3308      	adds	r3, #8
 8014ae6:	2214      	movs	r2, #20
 8014ae8:	4619      	mov	r1, r3
 8014aea:	f001 fcf5 	bl	80164d8 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8014aee:	2101      	movs	r1, #1
 8014af0:	69b8      	ldr	r0, [r7, #24]
 8014af2:	f7ff fc47 	bl	8014384 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8014af6:	69b8      	ldr	r0, [r7, #24]
 8014af8:	f7f8 fd4c 	bl	800d594 <pbuf_clen>
 8014afc:	4603      	mov	r3, r0
 8014afe:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014b00:	8bfa      	ldrh	r2, [r7, #30]
 8014b02:	8a7b      	ldrh	r3, [r7, #18]
 8014b04:	4413      	add	r3, r2
 8014b06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014b0a:	db05      	blt.n	8014b18 <ip_reass_free_complete_datagram+0x98>
 8014b0c:	4b27      	ldr	r3, [pc, #156]	; (8014bac <ip_reass_free_complete_datagram+0x12c>)
 8014b0e:	22bc      	movs	r2, #188	; 0xbc
 8014b10:	492a      	ldr	r1, [pc, #168]	; (8014bbc <ip_reass_free_complete_datagram+0x13c>)
 8014b12:	4828      	ldr	r0, [pc, #160]	; (8014bb4 <ip_reass_free_complete_datagram+0x134>)
 8014b14:	f001 fcf6 	bl	8016504 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014b18:	8bfa      	ldrh	r2, [r7, #30]
 8014b1a:	8a7b      	ldrh	r3, [r7, #18]
 8014b1c:	4413      	add	r3, r2
 8014b1e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8014b20:	69b8      	ldr	r0, [r7, #24]
 8014b22:	f7f8 fca9 	bl	800d478 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	685b      	ldr	r3, [r3, #4]
 8014b2a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8014b2c:	e01f      	b.n	8014b6e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8014b2e:	69bb      	ldr	r3, [r7, #24]
 8014b30:	685b      	ldr	r3, [r3, #4]
 8014b32:	617b      	str	r3, [r7, #20]
    pcur = p;
 8014b34:	69bb      	ldr	r3, [r7, #24]
 8014b36:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8014b38:	697b      	ldr	r3, [r7, #20]
 8014b3a:	681b      	ldr	r3, [r3, #0]
 8014b3c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8014b3e:	68f8      	ldr	r0, [r7, #12]
 8014b40:	f7f8 fd28 	bl	800d594 <pbuf_clen>
 8014b44:	4603      	mov	r3, r0
 8014b46:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014b48:	8bfa      	ldrh	r2, [r7, #30]
 8014b4a:	8a7b      	ldrh	r3, [r7, #18]
 8014b4c:	4413      	add	r3, r2
 8014b4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014b52:	db05      	blt.n	8014b60 <ip_reass_free_complete_datagram+0xe0>
 8014b54:	4b15      	ldr	r3, [pc, #84]	; (8014bac <ip_reass_free_complete_datagram+0x12c>)
 8014b56:	22cc      	movs	r2, #204	; 0xcc
 8014b58:	4918      	ldr	r1, [pc, #96]	; (8014bbc <ip_reass_free_complete_datagram+0x13c>)
 8014b5a:	4816      	ldr	r0, [pc, #88]	; (8014bb4 <ip_reass_free_complete_datagram+0x134>)
 8014b5c:	f001 fcd2 	bl	8016504 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014b60:	8bfa      	ldrh	r2, [r7, #30]
 8014b62:	8a7b      	ldrh	r3, [r7, #18]
 8014b64:	4413      	add	r3, r2
 8014b66:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8014b68:	68f8      	ldr	r0, [r7, #12]
 8014b6a:	f7f8 fc85 	bl	800d478 <pbuf_free>
  while (p != NULL) {
 8014b6e:	69bb      	ldr	r3, [r7, #24]
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	d1dc      	bne.n	8014b2e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8014b74:	6839      	ldr	r1, [r7, #0]
 8014b76:	6878      	ldr	r0, [r7, #4]
 8014b78:	f000 f8c2 	bl	8014d00 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8014b7c:	4b10      	ldr	r3, [pc, #64]	; (8014bc0 <ip_reass_free_complete_datagram+0x140>)
 8014b7e:	881b      	ldrh	r3, [r3, #0]
 8014b80:	8bfa      	ldrh	r2, [r7, #30]
 8014b82:	429a      	cmp	r2, r3
 8014b84:	d905      	bls.n	8014b92 <ip_reass_free_complete_datagram+0x112>
 8014b86:	4b09      	ldr	r3, [pc, #36]	; (8014bac <ip_reass_free_complete_datagram+0x12c>)
 8014b88:	22d2      	movs	r2, #210	; 0xd2
 8014b8a:	490e      	ldr	r1, [pc, #56]	; (8014bc4 <ip_reass_free_complete_datagram+0x144>)
 8014b8c:	4809      	ldr	r0, [pc, #36]	; (8014bb4 <ip_reass_free_complete_datagram+0x134>)
 8014b8e:	f001 fcb9 	bl	8016504 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8014b92:	4b0b      	ldr	r3, [pc, #44]	; (8014bc0 <ip_reass_free_complete_datagram+0x140>)
 8014b94:	881a      	ldrh	r2, [r3, #0]
 8014b96:	8bfb      	ldrh	r3, [r7, #30]
 8014b98:	1ad3      	subs	r3, r2, r3
 8014b9a:	b29a      	uxth	r2, r3
 8014b9c:	4b08      	ldr	r3, [pc, #32]	; (8014bc0 <ip_reass_free_complete_datagram+0x140>)
 8014b9e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8014ba0:	8bfb      	ldrh	r3, [r7, #30]
}
 8014ba2:	4618      	mov	r0, r3
 8014ba4:	3720      	adds	r7, #32
 8014ba6:	46bd      	mov	sp, r7
 8014ba8:	bd80      	pop	{r7, pc}
 8014baa:	bf00      	nop
 8014bac:	08019dc4 	.word	0x08019dc4
 8014bb0:	08019e00 	.word	0x08019e00
 8014bb4:	08019e0c 	.word	0x08019e0c
 8014bb8:	08019e34 	.word	0x08019e34
 8014bbc:	08019e48 	.word	0x08019e48
 8014bc0:	20004350 	.word	0x20004350
 8014bc4:	08019e68 	.word	0x08019e68

08014bc8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8014bc8:	b580      	push	{r7, lr}
 8014bca:	b08a      	sub	sp, #40	; 0x28
 8014bcc:	af00      	add	r7, sp, #0
 8014bce:	6078      	str	r0, [r7, #4]
 8014bd0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8014bd2:	2300      	movs	r3, #0
 8014bd4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8014bd6:	2300      	movs	r3, #0
 8014bd8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8014bda:	2300      	movs	r3, #0
 8014bdc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8014bde:	2300      	movs	r3, #0
 8014be0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8014be2:	2300      	movs	r3, #0
 8014be4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8014be6:	4b28      	ldr	r3, [pc, #160]	; (8014c88 <ip_reass_remove_oldest_datagram+0xc0>)
 8014be8:	681b      	ldr	r3, [r3, #0]
 8014bea:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8014bec:	e030      	b.n	8014c50 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8014bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bf0:	695a      	ldr	r2, [r3, #20]
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	68db      	ldr	r3, [r3, #12]
 8014bf6:	429a      	cmp	r2, r3
 8014bf8:	d10c      	bne.n	8014c14 <ip_reass_remove_oldest_datagram+0x4c>
 8014bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bfc:	699a      	ldr	r2, [r3, #24]
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	691b      	ldr	r3, [r3, #16]
 8014c02:	429a      	cmp	r2, r3
 8014c04:	d106      	bne.n	8014c14 <ip_reass_remove_oldest_datagram+0x4c>
 8014c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c08:	899a      	ldrh	r2, [r3, #12]
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	889b      	ldrh	r3, [r3, #4]
 8014c0e:	b29b      	uxth	r3, r3
 8014c10:	429a      	cmp	r2, r3
 8014c12:	d014      	beq.n	8014c3e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8014c14:	693b      	ldr	r3, [r7, #16]
 8014c16:	3301      	adds	r3, #1
 8014c18:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8014c1a:	6a3b      	ldr	r3, [r7, #32]
 8014c1c:	2b00      	cmp	r3, #0
 8014c1e:	d104      	bne.n	8014c2a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8014c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c22:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8014c24:	69fb      	ldr	r3, [r7, #28]
 8014c26:	61bb      	str	r3, [r7, #24]
 8014c28:	e009      	b.n	8014c3e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8014c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c2c:	7fda      	ldrb	r2, [r3, #31]
 8014c2e:	6a3b      	ldr	r3, [r7, #32]
 8014c30:	7fdb      	ldrb	r3, [r3, #31]
 8014c32:	429a      	cmp	r2, r3
 8014c34:	d803      	bhi.n	8014c3e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8014c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c38:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8014c3a:	69fb      	ldr	r3, [r7, #28]
 8014c3c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8014c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c40:	681b      	ldr	r3, [r3, #0]
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	d001      	beq.n	8014c4a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8014c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c48:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8014c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c4c:	681b      	ldr	r3, [r3, #0]
 8014c4e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8014c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	d1cb      	bne.n	8014bee <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8014c56:	6a3b      	ldr	r3, [r7, #32]
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d008      	beq.n	8014c6e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8014c5c:	69b9      	ldr	r1, [r7, #24]
 8014c5e:	6a38      	ldr	r0, [r7, #32]
 8014c60:	f7ff ff0e 	bl	8014a80 <ip_reass_free_complete_datagram>
 8014c64:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8014c66:	697a      	ldr	r2, [r7, #20]
 8014c68:	68fb      	ldr	r3, [r7, #12]
 8014c6a:	4413      	add	r3, r2
 8014c6c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8014c6e:	697a      	ldr	r2, [r7, #20]
 8014c70:	683b      	ldr	r3, [r7, #0]
 8014c72:	429a      	cmp	r2, r3
 8014c74:	da02      	bge.n	8014c7c <ip_reass_remove_oldest_datagram+0xb4>
 8014c76:	693b      	ldr	r3, [r7, #16]
 8014c78:	2b01      	cmp	r3, #1
 8014c7a:	dcac      	bgt.n	8014bd6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8014c7c:	697b      	ldr	r3, [r7, #20]
}
 8014c7e:	4618      	mov	r0, r3
 8014c80:	3728      	adds	r7, #40	; 0x28
 8014c82:	46bd      	mov	sp, r7
 8014c84:	bd80      	pop	{r7, pc}
 8014c86:	bf00      	nop
 8014c88:	2000434c 	.word	0x2000434c

08014c8c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8014c8c:	b580      	push	{r7, lr}
 8014c8e:	b084      	sub	sp, #16
 8014c90:	af00      	add	r7, sp, #0
 8014c92:	6078      	str	r0, [r7, #4]
 8014c94:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8014c96:	2004      	movs	r0, #4
 8014c98:	f7f7 fd70 	bl	800c77c <memp_malloc>
 8014c9c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8014c9e:	68fb      	ldr	r3, [r7, #12]
 8014ca0:	2b00      	cmp	r3, #0
 8014ca2:	d110      	bne.n	8014cc6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8014ca4:	6839      	ldr	r1, [r7, #0]
 8014ca6:	6878      	ldr	r0, [r7, #4]
 8014ca8:	f7ff ff8e 	bl	8014bc8 <ip_reass_remove_oldest_datagram>
 8014cac:	4602      	mov	r2, r0
 8014cae:	683b      	ldr	r3, [r7, #0]
 8014cb0:	4293      	cmp	r3, r2
 8014cb2:	dc03      	bgt.n	8014cbc <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8014cb4:	2004      	movs	r0, #4
 8014cb6:	f7f7 fd61 	bl	800c77c <memp_malloc>
 8014cba:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8014cbc:	68fb      	ldr	r3, [r7, #12]
 8014cbe:	2b00      	cmp	r3, #0
 8014cc0:	d101      	bne.n	8014cc6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8014cc2:	2300      	movs	r3, #0
 8014cc4:	e016      	b.n	8014cf4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8014cc6:	2220      	movs	r2, #32
 8014cc8:	2100      	movs	r1, #0
 8014cca:	68f8      	ldr	r0, [r7, #12]
 8014ccc:	f001 fc12 	bl	80164f4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8014cd0:	68fb      	ldr	r3, [r7, #12]
 8014cd2:	220f      	movs	r2, #15
 8014cd4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8014cd6:	4b09      	ldr	r3, [pc, #36]	; (8014cfc <ip_reass_enqueue_new_datagram+0x70>)
 8014cd8:	681a      	ldr	r2, [r3, #0]
 8014cda:	68fb      	ldr	r3, [r7, #12]
 8014cdc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8014cde:	4a07      	ldr	r2, [pc, #28]	; (8014cfc <ip_reass_enqueue_new_datagram+0x70>)
 8014ce0:	68fb      	ldr	r3, [r7, #12]
 8014ce2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8014ce4:	68fb      	ldr	r3, [r7, #12]
 8014ce6:	3308      	adds	r3, #8
 8014ce8:	2214      	movs	r2, #20
 8014cea:	6879      	ldr	r1, [r7, #4]
 8014cec:	4618      	mov	r0, r3
 8014cee:	f001 fbf3 	bl	80164d8 <memcpy>
  return ipr;
 8014cf2:	68fb      	ldr	r3, [r7, #12]
}
 8014cf4:	4618      	mov	r0, r3
 8014cf6:	3710      	adds	r7, #16
 8014cf8:	46bd      	mov	sp, r7
 8014cfa:	bd80      	pop	{r7, pc}
 8014cfc:	2000434c 	.word	0x2000434c

08014d00 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014d00:	b580      	push	{r7, lr}
 8014d02:	b082      	sub	sp, #8
 8014d04:	af00      	add	r7, sp, #0
 8014d06:	6078      	str	r0, [r7, #4]
 8014d08:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8014d0a:	4b10      	ldr	r3, [pc, #64]	; (8014d4c <ip_reass_dequeue_datagram+0x4c>)
 8014d0c:	681b      	ldr	r3, [r3, #0]
 8014d0e:	687a      	ldr	r2, [r7, #4]
 8014d10:	429a      	cmp	r2, r3
 8014d12:	d104      	bne.n	8014d1e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	681b      	ldr	r3, [r3, #0]
 8014d18:	4a0c      	ldr	r2, [pc, #48]	; (8014d4c <ip_reass_dequeue_datagram+0x4c>)
 8014d1a:	6013      	str	r3, [r2, #0]
 8014d1c:	e00d      	b.n	8014d3a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8014d1e:	683b      	ldr	r3, [r7, #0]
 8014d20:	2b00      	cmp	r3, #0
 8014d22:	d106      	bne.n	8014d32 <ip_reass_dequeue_datagram+0x32>
 8014d24:	4b0a      	ldr	r3, [pc, #40]	; (8014d50 <ip_reass_dequeue_datagram+0x50>)
 8014d26:	f240 1245 	movw	r2, #325	; 0x145
 8014d2a:	490a      	ldr	r1, [pc, #40]	; (8014d54 <ip_reass_dequeue_datagram+0x54>)
 8014d2c:	480a      	ldr	r0, [pc, #40]	; (8014d58 <ip_reass_dequeue_datagram+0x58>)
 8014d2e:	f001 fbe9 	bl	8016504 <iprintf>
    prev->next = ipr->next;
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	681a      	ldr	r2, [r3, #0]
 8014d36:	683b      	ldr	r3, [r7, #0]
 8014d38:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8014d3a:	6879      	ldr	r1, [r7, #4]
 8014d3c:	2004      	movs	r0, #4
 8014d3e:	f7f7 fd6f 	bl	800c820 <memp_free>
}
 8014d42:	bf00      	nop
 8014d44:	3708      	adds	r7, #8
 8014d46:	46bd      	mov	sp, r7
 8014d48:	bd80      	pop	{r7, pc}
 8014d4a:	bf00      	nop
 8014d4c:	2000434c 	.word	0x2000434c
 8014d50:	08019dc4 	.word	0x08019dc4
 8014d54:	08019e8c 	.word	0x08019e8c
 8014d58:	08019e0c 	.word	0x08019e0c

08014d5c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8014d5c:	b580      	push	{r7, lr}
 8014d5e:	b08c      	sub	sp, #48	; 0x30
 8014d60:	af00      	add	r7, sp, #0
 8014d62:	60f8      	str	r0, [r7, #12]
 8014d64:	60b9      	str	r1, [r7, #8]
 8014d66:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8014d68:	2300      	movs	r3, #0
 8014d6a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8014d6c:	2301      	movs	r3, #1
 8014d6e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8014d70:	68bb      	ldr	r3, [r7, #8]
 8014d72:	685b      	ldr	r3, [r3, #4]
 8014d74:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8014d76:	69fb      	ldr	r3, [r7, #28]
 8014d78:	885b      	ldrh	r3, [r3, #2]
 8014d7a:	b29b      	uxth	r3, r3
 8014d7c:	4618      	mov	r0, r3
 8014d7e:	f7f7 f847 	bl	800be10 <lwip_htons>
 8014d82:	4603      	mov	r3, r0
 8014d84:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8014d86:	69fb      	ldr	r3, [r7, #28]
 8014d88:	781b      	ldrb	r3, [r3, #0]
 8014d8a:	f003 030f 	and.w	r3, r3, #15
 8014d8e:	b2db      	uxtb	r3, r3
 8014d90:	009b      	lsls	r3, r3, #2
 8014d92:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8014d94:	7e7b      	ldrb	r3, [r7, #25]
 8014d96:	b29b      	uxth	r3, r3
 8014d98:	8b7a      	ldrh	r2, [r7, #26]
 8014d9a:	429a      	cmp	r2, r3
 8014d9c:	d202      	bcs.n	8014da4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8014da2:	e135      	b.n	8015010 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8014da4:	7e7b      	ldrb	r3, [r7, #25]
 8014da6:	b29b      	uxth	r3, r3
 8014da8:	8b7a      	ldrh	r2, [r7, #26]
 8014daa:	1ad3      	subs	r3, r2, r3
 8014dac:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8014dae:	69fb      	ldr	r3, [r7, #28]
 8014db0:	88db      	ldrh	r3, [r3, #6]
 8014db2:	b29b      	uxth	r3, r3
 8014db4:	4618      	mov	r0, r3
 8014db6:	f7f7 f82b 	bl	800be10 <lwip_htons>
 8014dba:	4603      	mov	r3, r0
 8014dbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014dc0:	b29b      	uxth	r3, r3
 8014dc2:	00db      	lsls	r3, r3, #3
 8014dc4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8014dc6:	68bb      	ldr	r3, [r7, #8]
 8014dc8:	685b      	ldr	r3, [r3, #4]
 8014dca:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8014dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014dce:	2200      	movs	r2, #0
 8014dd0:	701a      	strb	r2, [r3, #0]
 8014dd2:	2200      	movs	r2, #0
 8014dd4:	705a      	strb	r2, [r3, #1]
 8014dd6:	2200      	movs	r2, #0
 8014dd8:	709a      	strb	r2, [r3, #2]
 8014dda:	2200      	movs	r2, #0
 8014ddc:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8014dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014de0:	8afa      	ldrh	r2, [r7, #22]
 8014de2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8014de4:	8afa      	ldrh	r2, [r7, #22]
 8014de6:	8b7b      	ldrh	r3, [r7, #26]
 8014de8:	4413      	add	r3, r2
 8014dea:	b29a      	uxth	r2, r3
 8014dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014dee:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8014df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014df2:	88db      	ldrh	r3, [r3, #6]
 8014df4:	b29b      	uxth	r3, r3
 8014df6:	8afa      	ldrh	r2, [r7, #22]
 8014df8:	429a      	cmp	r2, r3
 8014dfa:	d902      	bls.n	8014e02 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8014e00:	e106      	b.n	8015010 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8014e02:	68fb      	ldr	r3, [r7, #12]
 8014e04:	685b      	ldr	r3, [r3, #4]
 8014e06:	627b      	str	r3, [r7, #36]	; 0x24
 8014e08:	e068      	b.n	8014edc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8014e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e0c:	685b      	ldr	r3, [r3, #4]
 8014e0e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8014e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e12:	889b      	ldrh	r3, [r3, #4]
 8014e14:	b29a      	uxth	r2, r3
 8014e16:	693b      	ldr	r3, [r7, #16]
 8014e18:	889b      	ldrh	r3, [r3, #4]
 8014e1a:	b29b      	uxth	r3, r3
 8014e1c:	429a      	cmp	r2, r3
 8014e1e:	d235      	bcs.n	8014e8c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8014e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014e24:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8014e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	d020      	beq.n	8014e6e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8014e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e2e:	889b      	ldrh	r3, [r3, #4]
 8014e30:	b29a      	uxth	r2, r3
 8014e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e34:	88db      	ldrh	r3, [r3, #6]
 8014e36:	b29b      	uxth	r3, r3
 8014e38:	429a      	cmp	r2, r3
 8014e3a:	d307      	bcc.n	8014e4c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8014e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e3e:	88db      	ldrh	r3, [r3, #6]
 8014e40:	b29a      	uxth	r2, r3
 8014e42:	693b      	ldr	r3, [r7, #16]
 8014e44:	889b      	ldrh	r3, [r3, #4]
 8014e46:	b29b      	uxth	r3, r3
 8014e48:	429a      	cmp	r2, r3
 8014e4a:	d902      	bls.n	8014e52 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8014e50:	e0de      	b.n	8015010 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8014e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e54:	68ba      	ldr	r2, [r7, #8]
 8014e56:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8014e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e5a:	88db      	ldrh	r3, [r3, #6]
 8014e5c:	b29a      	uxth	r2, r3
 8014e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e60:	889b      	ldrh	r3, [r3, #4]
 8014e62:	b29b      	uxth	r3, r3
 8014e64:	429a      	cmp	r2, r3
 8014e66:	d03d      	beq.n	8014ee4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8014e68:	2300      	movs	r3, #0
 8014e6a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8014e6c:	e03a      	b.n	8014ee4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8014e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e70:	88db      	ldrh	r3, [r3, #6]
 8014e72:	b29a      	uxth	r2, r3
 8014e74:	693b      	ldr	r3, [r7, #16]
 8014e76:	889b      	ldrh	r3, [r3, #4]
 8014e78:	b29b      	uxth	r3, r3
 8014e7a:	429a      	cmp	r2, r3
 8014e7c:	d902      	bls.n	8014e84 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8014e82:	e0c5      	b.n	8015010 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8014e84:	68fb      	ldr	r3, [r7, #12]
 8014e86:	68ba      	ldr	r2, [r7, #8]
 8014e88:	605a      	str	r2, [r3, #4]
      break;
 8014e8a:	e02b      	b.n	8014ee4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8014e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e8e:	889b      	ldrh	r3, [r3, #4]
 8014e90:	b29a      	uxth	r2, r3
 8014e92:	693b      	ldr	r3, [r7, #16]
 8014e94:	889b      	ldrh	r3, [r3, #4]
 8014e96:	b29b      	uxth	r3, r3
 8014e98:	429a      	cmp	r2, r3
 8014e9a:	d102      	bne.n	8014ea2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8014ea0:	e0b6      	b.n	8015010 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8014ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ea4:	889b      	ldrh	r3, [r3, #4]
 8014ea6:	b29a      	uxth	r2, r3
 8014ea8:	693b      	ldr	r3, [r7, #16]
 8014eaa:	88db      	ldrh	r3, [r3, #6]
 8014eac:	b29b      	uxth	r3, r3
 8014eae:	429a      	cmp	r2, r3
 8014eb0:	d202      	bcs.n	8014eb8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8014eb6:	e0ab      	b.n	8015010 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8014eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014eba:	2b00      	cmp	r3, #0
 8014ebc:	d009      	beq.n	8014ed2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8014ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ec0:	88db      	ldrh	r3, [r3, #6]
 8014ec2:	b29a      	uxth	r2, r3
 8014ec4:	693b      	ldr	r3, [r7, #16]
 8014ec6:	889b      	ldrh	r3, [r3, #4]
 8014ec8:	b29b      	uxth	r3, r3
 8014eca:	429a      	cmp	r2, r3
 8014ecc:	d001      	beq.n	8014ed2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8014ece:	2300      	movs	r3, #0
 8014ed0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8014ed2:	693b      	ldr	r3, [r7, #16]
 8014ed4:	681b      	ldr	r3, [r3, #0]
 8014ed6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8014ed8:	693b      	ldr	r3, [r7, #16]
 8014eda:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8014edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ede:	2b00      	cmp	r3, #0
 8014ee0:	d193      	bne.n	8014e0a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8014ee2:	e000      	b.n	8014ee6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8014ee4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8014ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ee8:	2b00      	cmp	r3, #0
 8014eea:	d12d      	bne.n	8014f48 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8014eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	d01c      	beq.n	8014f2c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8014ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ef4:	88db      	ldrh	r3, [r3, #6]
 8014ef6:	b29a      	uxth	r2, r3
 8014ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014efa:	889b      	ldrh	r3, [r3, #4]
 8014efc:	b29b      	uxth	r3, r3
 8014efe:	429a      	cmp	r2, r3
 8014f00:	d906      	bls.n	8014f10 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8014f02:	4b45      	ldr	r3, [pc, #276]	; (8015018 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014f04:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8014f08:	4944      	ldr	r1, [pc, #272]	; (801501c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8014f0a:	4845      	ldr	r0, [pc, #276]	; (8015020 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014f0c:	f001 fafa 	bl	8016504 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8014f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f12:	68ba      	ldr	r2, [r7, #8]
 8014f14:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8014f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f18:	88db      	ldrh	r3, [r3, #6]
 8014f1a:	b29a      	uxth	r2, r3
 8014f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f1e:	889b      	ldrh	r3, [r3, #4]
 8014f20:	b29b      	uxth	r3, r3
 8014f22:	429a      	cmp	r2, r3
 8014f24:	d010      	beq.n	8014f48 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8014f26:	2300      	movs	r3, #0
 8014f28:	623b      	str	r3, [r7, #32]
 8014f2a:	e00d      	b.n	8014f48 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8014f2c:	68fb      	ldr	r3, [r7, #12]
 8014f2e:	685b      	ldr	r3, [r3, #4]
 8014f30:	2b00      	cmp	r3, #0
 8014f32:	d006      	beq.n	8014f42 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8014f34:	4b38      	ldr	r3, [pc, #224]	; (8015018 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014f36:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8014f3a:	493a      	ldr	r1, [pc, #232]	; (8015024 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8014f3c:	4838      	ldr	r0, [pc, #224]	; (8015020 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014f3e:	f001 fae1 	bl	8016504 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8014f42:	68fb      	ldr	r3, [r7, #12]
 8014f44:	68ba      	ldr	r2, [r7, #8]
 8014f46:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	d105      	bne.n	8014f5a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8014f4e:	68fb      	ldr	r3, [r7, #12]
 8014f50:	7f9b      	ldrb	r3, [r3, #30]
 8014f52:	f003 0301 	and.w	r3, r3, #1
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	d059      	beq.n	801500e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8014f5a:	6a3b      	ldr	r3, [r7, #32]
 8014f5c:	2b00      	cmp	r3, #0
 8014f5e:	d04f      	beq.n	8015000 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8014f60:	68fb      	ldr	r3, [r7, #12]
 8014f62:	685b      	ldr	r3, [r3, #4]
 8014f64:	2b00      	cmp	r3, #0
 8014f66:	d006      	beq.n	8014f76 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8014f68:	68fb      	ldr	r3, [r7, #12]
 8014f6a:	685b      	ldr	r3, [r3, #4]
 8014f6c:	685b      	ldr	r3, [r3, #4]
 8014f6e:	889b      	ldrh	r3, [r3, #4]
 8014f70:	b29b      	uxth	r3, r3
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	d002      	beq.n	8014f7c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8014f76:	2300      	movs	r3, #0
 8014f78:	623b      	str	r3, [r7, #32]
 8014f7a:	e041      	b.n	8015000 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8014f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f7e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8014f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f82:	681b      	ldr	r3, [r3, #0]
 8014f84:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8014f86:	e012      	b.n	8014fae <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8014f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f8a:	685b      	ldr	r3, [r3, #4]
 8014f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8014f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f90:	88db      	ldrh	r3, [r3, #6]
 8014f92:	b29a      	uxth	r2, r3
 8014f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f96:	889b      	ldrh	r3, [r3, #4]
 8014f98:	b29b      	uxth	r3, r3
 8014f9a:	429a      	cmp	r2, r3
 8014f9c:	d002      	beq.n	8014fa4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8014f9e:	2300      	movs	r3, #0
 8014fa0:	623b      	str	r3, [r7, #32]
            break;
 8014fa2:	e007      	b.n	8014fb4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8014fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fa6:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8014fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014faa:	681b      	ldr	r3, [r3, #0]
 8014fac:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8014fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fb0:	2b00      	cmp	r3, #0
 8014fb2:	d1e9      	bne.n	8014f88 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8014fb4:	6a3b      	ldr	r3, [r7, #32]
 8014fb6:	2b00      	cmp	r3, #0
 8014fb8:	d022      	beq.n	8015000 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8014fba:	68fb      	ldr	r3, [r7, #12]
 8014fbc:	685b      	ldr	r3, [r3, #4]
 8014fbe:	2b00      	cmp	r3, #0
 8014fc0:	d106      	bne.n	8014fd0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8014fc2:	4b15      	ldr	r3, [pc, #84]	; (8015018 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014fc4:	f240 12df 	movw	r2, #479	; 0x1df
 8014fc8:	4917      	ldr	r1, [pc, #92]	; (8015028 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8014fca:	4815      	ldr	r0, [pc, #84]	; (8015020 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014fcc:	f001 fa9a 	bl	8016504 <iprintf>
          LWIP_ASSERT("sanity check",
 8014fd0:	68fb      	ldr	r3, [r7, #12]
 8014fd2:	685b      	ldr	r3, [r3, #4]
 8014fd4:	685b      	ldr	r3, [r3, #4]
 8014fd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014fd8:	429a      	cmp	r2, r3
 8014fda:	d106      	bne.n	8014fea <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8014fdc:	4b0e      	ldr	r3, [pc, #56]	; (8015018 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014fde:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8014fe2:	4911      	ldr	r1, [pc, #68]	; (8015028 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8014fe4:	480e      	ldr	r0, [pc, #56]	; (8015020 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014fe6:	f001 fa8d 	bl	8016504 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8014fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fec:	681b      	ldr	r3, [r3, #0]
 8014fee:	2b00      	cmp	r3, #0
 8014ff0:	d006      	beq.n	8015000 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8014ff2:	4b09      	ldr	r3, [pc, #36]	; (8015018 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014ff4:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8014ff8:	490c      	ldr	r1, [pc, #48]	; (801502c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8014ffa:	4809      	ldr	r0, [pc, #36]	; (8015020 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014ffc:	f001 fa82 	bl	8016504 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8015000:	6a3b      	ldr	r3, [r7, #32]
 8015002:	2b00      	cmp	r3, #0
 8015004:	bf14      	ite	ne
 8015006:	2301      	movne	r3, #1
 8015008:	2300      	moveq	r3, #0
 801500a:	b2db      	uxtb	r3, r3
 801500c:	e000      	b.n	8015010 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801500e:	2300      	movs	r3, #0
}
 8015010:	4618      	mov	r0, r3
 8015012:	3730      	adds	r7, #48	; 0x30
 8015014:	46bd      	mov	sp, r7
 8015016:	bd80      	pop	{r7, pc}
 8015018:	08019dc4 	.word	0x08019dc4
 801501c:	08019ea8 	.word	0x08019ea8
 8015020:	08019e0c 	.word	0x08019e0c
 8015024:	08019ec8 	.word	0x08019ec8
 8015028:	08019f00 	.word	0x08019f00
 801502c:	08019f10 	.word	0x08019f10

08015030 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8015030:	b580      	push	{r7, lr}
 8015032:	b08e      	sub	sp, #56	; 0x38
 8015034:	af00      	add	r7, sp, #0
 8015036:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	685b      	ldr	r3, [r3, #4]
 801503c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801503e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015040:	781b      	ldrb	r3, [r3, #0]
 8015042:	f003 030f 	and.w	r3, r3, #15
 8015046:	b2db      	uxtb	r3, r3
 8015048:	009b      	lsls	r3, r3, #2
 801504a:	b2db      	uxtb	r3, r3
 801504c:	2b14      	cmp	r3, #20
 801504e:	f040 8167 	bne.w	8015320 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8015052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015054:	88db      	ldrh	r3, [r3, #6]
 8015056:	b29b      	uxth	r3, r3
 8015058:	4618      	mov	r0, r3
 801505a:	f7f6 fed9 	bl	800be10 <lwip_htons>
 801505e:	4603      	mov	r3, r0
 8015060:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015064:	b29b      	uxth	r3, r3
 8015066:	00db      	lsls	r3, r3, #3
 8015068:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801506a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801506c:	885b      	ldrh	r3, [r3, #2]
 801506e:	b29b      	uxth	r3, r3
 8015070:	4618      	mov	r0, r3
 8015072:	f7f6 fecd 	bl	800be10 <lwip_htons>
 8015076:	4603      	mov	r3, r0
 8015078:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801507a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801507c:	781b      	ldrb	r3, [r3, #0]
 801507e:	f003 030f 	and.w	r3, r3, #15
 8015082:	b2db      	uxtb	r3, r3
 8015084:	009b      	lsls	r3, r3, #2
 8015086:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801508a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801508e:	b29b      	uxth	r3, r3
 8015090:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015092:	429a      	cmp	r2, r3
 8015094:	f0c0 8146 	bcc.w	8015324 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8015098:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801509c:	b29b      	uxth	r3, r3
 801509e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80150a0:	1ad3      	subs	r3, r2, r3
 80150a2:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80150a4:	6878      	ldr	r0, [r7, #4]
 80150a6:	f7f8 fa75 	bl	800d594 <pbuf_clen>
 80150aa:	4603      	mov	r3, r0
 80150ac:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80150ae:	4b9f      	ldr	r3, [pc, #636]	; (801532c <ip4_reass+0x2fc>)
 80150b0:	881b      	ldrh	r3, [r3, #0]
 80150b2:	461a      	mov	r2, r3
 80150b4:	8c3b      	ldrh	r3, [r7, #32]
 80150b6:	4413      	add	r3, r2
 80150b8:	2b0a      	cmp	r3, #10
 80150ba:	dd10      	ble.n	80150de <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80150bc:	8c3b      	ldrh	r3, [r7, #32]
 80150be:	4619      	mov	r1, r3
 80150c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80150c2:	f7ff fd81 	bl	8014bc8 <ip_reass_remove_oldest_datagram>
 80150c6:	4603      	mov	r3, r0
 80150c8:	2b00      	cmp	r3, #0
 80150ca:	f000 812d 	beq.w	8015328 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80150ce:	4b97      	ldr	r3, [pc, #604]	; (801532c <ip4_reass+0x2fc>)
 80150d0:	881b      	ldrh	r3, [r3, #0]
 80150d2:	461a      	mov	r2, r3
 80150d4:	8c3b      	ldrh	r3, [r7, #32]
 80150d6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80150d8:	2b0a      	cmp	r3, #10
 80150da:	f300 8125 	bgt.w	8015328 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80150de:	4b94      	ldr	r3, [pc, #592]	; (8015330 <ip4_reass+0x300>)
 80150e0:	681b      	ldr	r3, [r3, #0]
 80150e2:	633b      	str	r3, [r7, #48]	; 0x30
 80150e4:	e015      	b.n	8015112 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80150e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150e8:	695a      	ldr	r2, [r3, #20]
 80150ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150ec:	68db      	ldr	r3, [r3, #12]
 80150ee:	429a      	cmp	r2, r3
 80150f0:	d10c      	bne.n	801510c <ip4_reass+0xdc>
 80150f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150f4:	699a      	ldr	r2, [r3, #24]
 80150f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150f8:	691b      	ldr	r3, [r3, #16]
 80150fa:	429a      	cmp	r2, r3
 80150fc:	d106      	bne.n	801510c <ip4_reass+0xdc>
 80150fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015100:	899a      	ldrh	r2, [r3, #12]
 8015102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015104:	889b      	ldrh	r3, [r3, #4]
 8015106:	b29b      	uxth	r3, r3
 8015108:	429a      	cmp	r2, r3
 801510a:	d006      	beq.n	801511a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801510c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801510e:	681b      	ldr	r3, [r3, #0]
 8015110:	633b      	str	r3, [r7, #48]	; 0x30
 8015112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015114:	2b00      	cmp	r3, #0
 8015116:	d1e6      	bne.n	80150e6 <ip4_reass+0xb6>
 8015118:	e000      	b.n	801511c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801511a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801511c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801511e:	2b00      	cmp	r3, #0
 8015120:	d109      	bne.n	8015136 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8015122:	8c3b      	ldrh	r3, [r7, #32]
 8015124:	4619      	mov	r1, r3
 8015126:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015128:	f7ff fdb0 	bl	8014c8c <ip_reass_enqueue_new_datagram>
 801512c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801512e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015130:	2b00      	cmp	r3, #0
 8015132:	d11c      	bne.n	801516e <ip4_reass+0x13e>
      goto nullreturn;
 8015134:	e109      	b.n	801534a <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015138:	88db      	ldrh	r3, [r3, #6]
 801513a:	b29b      	uxth	r3, r3
 801513c:	4618      	mov	r0, r3
 801513e:	f7f6 fe67 	bl	800be10 <lwip_htons>
 8015142:	4603      	mov	r3, r0
 8015144:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015148:	2b00      	cmp	r3, #0
 801514a:	d110      	bne.n	801516e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801514c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801514e:	89db      	ldrh	r3, [r3, #14]
 8015150:	4618      	mov	r0, r3
 8015152:	f7f6 fe5d 	bl	800be10 <lwip_htons>
 8015156:	4603      	mov	r3, r0
 8015158:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801515c:	2b00      	cmp	r3, #0
 801515e:	d006      	beq.n	801516e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8015160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015162:	3308      	adds	r3, #8
 8015164:	2214      	movs	r2, #20
 8015166:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015168:	4618      	mov	r0, r3
 801516a:	f001 f9b5 	bl	80164d8 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801516e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015170:	88db      	ldrh	r3, [r3, #6]
 8015172:	b29b      	uxth	r3, r3
 8015174:	f003 0320 	and.w	r3, r3, #32
 8015178:	2b00      	cmp	r3, #0
 801517a:	bf0c      	ite	eq
 801517c:	2301      	moveq	r3, #1
 801517e:	2300      	movne	r3, #0
 8015180:	b2db      	uxtb	r3, r3
 8015182:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8015184:	69fb      	ldr	r3, [r7, #28]
 8015186:	2b00      	cmp	r3, #0
 8015188:	d00e      	beq.n	80151a8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801518a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801518c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801518e:	4413      	add	r3, r2
 8015190:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8015192:	8b7a      	ldrh	r2, [r7, #26]
 8015194:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015196:	429a      	cmp	r2, r3
 8015198:	f0c0 80a0 	bcc.w	80152dc <ip4_reass+0x2ac>
 801519c:	8b7b      	ldrh	r3, [r7, #26]
 801519e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80151a2:	4293      	cmp	r3, r2
 80151a4:	f200 809a 	bhi.w	80152dc <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80151a8:	69fa      	ldr	r2, [r7, #28]
 80151aa:	6879      	ldr	r1, [r7, #4]
 80151ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80151ae:	f7ff fdd5 	bl	8014d5c <ip_reass_chain_frag_into_datagram_and_validate>
 80151b2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80151b4:	697b      	ldr	r3, [r7, #20]
 80151b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80151ba:	f000 8091 	beq.w	80152e0 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80151be:	4b5b      	ldr	r3, [pc, #364]	; (801532c <ip4_reass+0x2fc>)
 80151c0:	881a      	ldrh	r2, [r3, #0]
 80151c2:	8c3b      	ldrh	r3, [r7, #32]
 80151c4:	4413      	add	r3, r2
 80151c6:	b29a      	uxth	r2, r3
 80151c8:	4b58      	ldr	r3, [pc, #352]	; (801532c <ip4_reass+0x2fc>)
 80151ca:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80151cc:	69fb      	ldr	r3, [r7, #28]
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	d00d      	beq.n	80151ee <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80151d2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80151d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80151d6:	4413      	add	r3, r2
 80151d8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80151da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151dc:	8a7a      	ldrh	r2, [r7, #18]
 80151de:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80151e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151e2:	7f9b      	ldrb	r3, [r3, #30]
 80151e4:	f043 0301 	orr.w	r3, r3, #1
 80151e8:	b2da      	uxtb	r2, r3
 80151ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151ec:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80151ee:	697b      	ldr	r3, [r7, #20]
 80151f0:	2b01      	cmp	r3, #1
 80151f2:	d171      	bne.n	80152d8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80151f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151f6:	8b9b      	ldrh	r3, [r3, #28]
 80151f8:	3314      	adds	r3, #20
 80151fa:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80151fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151fe:	685b      	ldr	r3, [r3, #4]
 8015200:	685b      	ldr	r3, [r3, #4]
 8015202:	681b      	ldr	r3, [r3, #0]
 8015204:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8015206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015208:	685b      	ldr	r3, [r3, #4]
 801520a:	685b      	ldr	r3, [r3, #4]
 801520c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801520e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015210:	3308      	adds	r3, #8
 8015212:	2214      	movs	r2, #20
 8015214:	4619      	mov	r1, r3
 8015216:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015218:	f001 f95e 	bl	80164d8 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801521c:	8a3b      	ldrh	r3, [r7, #16]
 801521e:	4618      	mov	r0, r3
 8015220:	f7f6 fdf6 	bl	800be10 <lwip_htons>
 8015224:	4603      	mov	r3, r0
 8015226:	461a      	mov	r2, r3
 8015228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801522a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801522c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801522e:	2200      	movs	r2, #0
 8015230:	719a      	strb	r2, [r3, #6]
 8015232:	2200      	movs	r2, #0
 8015234:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8015236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015238:	2200      	movs	r2, #0
 801523a:	729a      	strb	r2, [r3, #10]
 801523c:	2200      	movs	r2, #0
 801523e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8015240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015242:	685b      	ldr	r3, [r3, #4]
 8015244:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8015246:	e00d      	b.n	8015264 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8015248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801524a:	685b      	ldr	r3, [r3, #4]
 801524c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801524e:	2114      	movs	r1, #20
 8015250:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8015252:	f7f8 f88b 	bl	800d36c <pbuf_remove_header>
      pbuf_cat(p, r);
 8015256:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015258:	6878      	ldr	r0, [r7, #4]
 801525a:	f7f8 f9db 	bl	800d614 <pbuf_cat>
      r = iprh->next_pbuf;
 801525e:	68fb      	ldr	r3, [r7, #12]
 8015260:	681b      	ldr	r3, [r3, #0]
 8015262:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8015264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015266:	2b00      	cmp	r3, #0
 8015268:	d1ee      	bne.n	8015248 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801526a:	4b31      	ldr	r3, [pc, #196]	; (8015330 <ip4_reass+0x300>)
 801526c:	681b      	ldr	r3, [r3, #0]
 801526e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015270:	429a      	cmp	r2, r3
 8015272:	d102      	bne.n	801527a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8015274:	2300      	movs	r3, #0
 8015276:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015278:	e010      	b.n	801529c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801527a:	4b2d      	ldr	r3, [pc, #180]	; (8015330 <ip4_reass+0x300>)
 801527c:	681b      	ldr	r3, [r3, #0]
 801527e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015280:	e007      	b.n	8015292 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8015282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015284:	681b      	ldr	r3, [r3, #0]
 8015286:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015288:	429a      	cmp	r2, r3
 801528a:	d006      	beq.n	801529a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801528c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801528e:	681b      	ldr	r3, [r3, #0]
 8015290:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015294:	2b00      	cmp	r3, #0
 8015296:	d1f4      	bne.n	8015282 <ip4_reass+0x252>
 8015298:	e000      	b.n	801529c <ip4_reass+0x26c>
          break;
 801529a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801529c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801529e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80152a0:	f7ff fd2e 	bl	8014d00 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80152a4:	6878      	ldr	r0, [r7, #4]
 80152a6:	f7f8 f975 	bl	800d594 <pbuf_clen>
 80152aa:	4603      	mov	r3, r0
 80152ac:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80152ae:	4b1f      	ldr	r3, [pc, #124]	; (801532c <ip4_reass+0x2fc>)
 80152b0:	881b      	ldrh	r3, [r3, #0]
 80152b2:	8c3a      	ldrh	r2, [r7, #32]
 80152b4:	429a      	cmp	r2, r3
 80152b6:	d906      	bls.n	80152c6 <ip4_reass+0x296>
 80152b8:	4b1e      	ldr	r3, [pc, #120]	; (8015334 <ip4_reass+0x304>)
 80152ba:	f240 229b 	movw	r2, #667	; 0x29b
 80152be:	491e      	ldr	r1, [pc, #120]	; (8015338 <ip4_reass+0x308>)
 80152c0:	481e      	ldr	r0, [pc, #120]	; (801533c <ip4_reass+0x30c>)
 80152c2:	f001 f91f 	bl	8016504 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80152c6:	4b19      	ldr	r3, [pc, #100]	; (801532c <ip4_reass+0x2fc>)
 80152c8:	881a      	ldrh	r2, [r3, #0]
 80152ca:	8c3b      	ldrh	r3, [r7, #32]
 80152cc:	1ad3      	subs	r3, r2, r3
 80152ce:	b29a      	uxth	r2, r3
 80152d0:	4b16      	ldr	r3, [pc, #88]	; (801532c <ip4_reass+0x2fc>)
 80152d2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80152d4:	687b      	ldr	r3, [r7, #4]
 80152d6:	e03c      	b.n	8015352 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80152d8:	2300      	movs	r3, #0
 80152da:	e03a      	b.n	8015352 <ip4_reass+0x322>
      goto nullreturn_ipr;
 80152dc:	bf00      	nop
 80152de:	e000      	b.n	80152e2 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 80152e0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80152e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	d106      	bne.n	80152f6 <ip4_reass+0x2c6>
 80152e8:	4b12      	ldr	r3, [pc, #72]	; (8015334 <ip4_reass+0x304>)
 80152ea:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80152ee:	4914      	ldr	r1, [pc, #80]	; (8015340 <ip4_reass+0x310>)
 80152f0:	4812      	ldr	r0, [pc, #72]	; (801533c <ip4_reass+0x30c>)
 80152f2:	f001 f907 	bl	8016504 <iprintf>
  if (ipr->p == NULL) {
 80152f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152f8:	685b      	ldr	r3, [r3, #4]
 80152fa:	2b00      	cmp	r3, #0
 80152fc:	d124      	bne.n	8015348 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80152fe:	4b0c      	ldr	r3, [pc, #48]	; (8015330 <ip4_reass+0x300>)
 8015300:	681b      	ldr	r3, [r3, #0]
 8015302:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015304:	429a      	cmp	r2, r3
 8015306:	d006      	beq.n	8015316 <ip4_reass+0x2e6>
 8015308:	4b0a      	ldr	r3, [pc, #40]	; (8015334 <ip4_reass+0x304>)
 801530a:	f240 22ab 	movw	r2, #683	; 0x2ab
 801530e:	490d      	ldr	r1, [pc, #52]	; (8015344 <ip4_reass+0x314>)
 8015310:	480a      	ldr	r0, [pc, #40]	; (801533c <ip4_reass+0x30c>)
 8015312:	f001 f8f7 	bl	8016504 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8015316:	2100      	movs	r1, #0
 8015318:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801531a:	f7ff fcf1 	bl	8014d00 <ip_reass_dequeue_datagram>
 801531e:	e014      	b.n	801534a <ip4_reass+0x31a>
    goto nullreturn;
 8015320:	bf00      	nop
 8015322:	e012      	b.n	801534a <ip4_reass+0x31a>
    goto nullreturn;
 8015324:	bf00      	nop
 8015326:	e010      	b.n	801534a <ip4_reass+0x31a>
      goto nullreturn;
 8015328:	bf00      	nop
 801532a:	e00e      	b.n	801534a <ip4_reass+0x31a>
 801532c:	20004350 	.word	0x20004350
 8015330:	2000434c 	.word	0x2000434c
 8015334:	08019dc4 	.word	0x08019dc4
 8015338:	08019f34 	.word	0x08019f34
 801533c:	08019e0c 	.word	0x08019e0c
 8015340:	08019f50 	.word	0x08019f50
 8015344:	08019f5c 	.word	0x08019f5c
  }

nullreturn:
 8015348:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801534a:	6878      	ldr	r0, [r7, #4]
 801534c:	f7f8 f894 	bl	800d478 <pbuf_free>
  return NULL;
 8015350:	2300      	movs	r3, #0
}
 8015352:	4618      	mov	r0, r3
 8015354:	3738      	adds	r7, #56	; 0x38
 8015356:	46bd      	mov	sp, r7
 8015358:	bd80      	pop	{r7, pc}
 801535a:	bf00      	nop

0801535c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801535c:	b580      	push	{r7, lr}
 801535e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8015360:	2005      	movs	r0, #5
 8015362:	f7f7 fa0b 	bl	800c77c <memp_malloc>
 8015366:	4603      	mov	r3, r0
}
 8015368:	4618      	mov	r0, r3
 801536a:	bd80      	pop	{r7, pc}

0801536c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801536c:	b580      	push	{r7, lr}
 801536e:	b082      	sub	sp, #8
 8015370:	af00      	add	r7, sp, #0
 8015372:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	2b00      	cmp	r3, #0
 8015378:	d106      	bne.n	8015388 <ip_frag_free_pbuf_custom_ref+0x1c>
 801537a:	4b07      	ldr	r3, [pc, #28]	; (8015398 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801537c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8015380:	4906      	ldr	r1, [pc, #24]	; (801539c <ip_frag_free_pbuf_custom_ref+0x30>)
 8015382:	4807      	ldr	r0, [pc, #28]	; (80153a0 <ip_frag_free_pbuf_custom_ref+0x34>)
 8015384:	f001 f8be 	bl	8016504 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8015388:	6879      	ldr	r1, [r7, #4]
 801538a:	2005      	movs	r0, #5
 801538c:	f7f7 fa48 	bl	800c820 <memp_free>
}
 8015390:	bf00      	nop
 8015392:	3708      	adds	r7, #8
 8015394:	46bd      	mov	sp, r7
 8015396:	bd80      	pop	{r7, pc}
 8015398:	08019dc4 	.word	0x08019dc4
 801539c:	08019f7c 	.word	0x08019f7c
 80153a0:	08019e0c 	.word	0x08019e0c

080153a4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80153a4:	b580      	push	{r7, lr}
 80153a6:	b084      	sub	sp, #16
 80153a8:	af00      	add	r7, sp, #0
 80153aa:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80153b0:	68fb      	ldr	r3, [r7, #12]
 80153b2:	2b00      	cmp	r3, #0
 80153b4:	d106      	bne.n	80153c4 <ipfrag_free_pbuf_custom+0x20>
 80153b6:	4b11      	ldr	r3, [pc, #68]	; (80153fc <ipfrag_free_pbuf_custom+0x58>)
 80153b8:	f240 22ce 	movw	r2, #718	; 0x2ce
 80153bc:	4910      	ldr	r1, [pc, #64]	; (8015400 <ipfrag_free_pbuf_custom+0x5c>)
 80153be:	4811      	ldr	r0, [pc, #68]	; (8015404 <ipfrag_free_pbuf_custom+0x60>)
 80153c0:	f001 f8a0 	bl	8016504 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80153c4:	68fa      	ldr	r2, [r7, #12]
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	429a      	cmp	r2, r3
 80153ca:	d006      	beq.n	80153da <ipfrag_free_pbuf_custom+0x36>
 80153cc:	4b0b      	ldr	r3, [pc, #44]	; (80153fc <ipfrag_free_pbuf_custom+0x58>)
 80153ce:	f240 22cf 	movw	r2, #719	; 0x2cf
 80153d2:	490d      	ldr	r1, [pc, #52]	; (8015408 <ipfrag_free_pbuf_custom+0x64>)
 80153d4:	480b      	ldr	r0, [pc, #44]	; (8015404 <ipfrag_free_pbuf_custom+0x60>)
 80153d6:	f001 f895 	bl	8016504 <iprintf>
  if (pcr->original != NULL) {
 80153da:	68fb      	ldr	r3, [r7, #12]
 80153dc:	695b      	ldr	r3, [r3, #20]
 80153de:	2b00      	cmp	r3, #0
 80153e0:	d004      	beq.n	80153ec <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80153e2:	68fb      	ldr	r3, [r7, #12]
 80153e4:	695b      	ldr	r3, [r3, #20]
 80153e6:	4618      	mov	r0, r3
 80153e8:	f7f8 f846 	bl	800d478 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80153ec:	68f8      	ldr	r0, [r7, #12]
 80153ee:	f7ff ffbd 	bl	801536c <ip_frag_free_pbuf_custom_ref>
}
 80153f2:	bf00      	nop
 80153f4:	3710      	adds	r7, #16
 80153f6:	46bd      	mov	sp, r7
 80153f8:	bd80      	pop	{r7, pc}
 80153fa:	bf00      	nop
 80153fc:	08019dc4 	.word	0x08019dc4
 8015400:	08019f88 	.word	0x08019f88
 8015404:	08019e0c 	.word	0x08019e0c
 8015408:	08019f94 	.word	0x08019f94

0801540c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801540c:	b580      	push	{r7, lr}
 801540e:	b094      	sub	sp, #80	; 0x50
 8015410:	af02      	add	r7, sp, #8
 8015412:	60f8      	str	r0, [r7, #12]
 8015414:	60b9      	str	r1, [r7, #8]
 8015416:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8015418:	2300      	movs	r3, #0
 801541a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801541e:	68bb      	ldr	r3, [r7, #8]
 8015420:	8c1b      	ldrh	r3, [r3, #32]
 8015422:	3b14      	subs	r3, #20
 8015424:	2b00      	cmp	r3, #0
 8015426:	da00      	bge.n	801542a <ip4_frag+0x1e>
 8015428:	3307      	adds	r3, #7
 801542a:	10db      	asrs	r3, r3, #3
 801542c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801542e:	2314      	movs	r3, #20
 8015430:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8015432:	68fb      	ldr	r3, [r7, #12]
 8015434:	685b      	ldr	r3, [r3, #4]
 8015436:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8015438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801543a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801543c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801543e:	781b      	ldrb	r3, [r3, #0]
 8015440:	f003 030f 	and.w	r3, r3, #15
 8015444:	b2db      	uxtb	r3, r3
 8015446:	009b      	lsls	r3, r3, #2
 8015448:	b2db      	uxtb	r3, r3
 801544a:	2b14      	cmp	r3, #20
 801544c:	d002      	beq.n	8015454 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801544e:	f06f 0305 	mvn.w	r3, #5
 8015452:	e110      	b.n	8015676 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8015454:	68fb      	ldr	r3, [r7, #12]
 8015456:	895b      	ldrh	r3, [r3, #10]
 8015458:	2b13      	cmp	r3, #19
 801545a:	d809      	bhi.n	8015470 <ip4_frag+0x64>
 801545c:	4b88      	ldr	r3, [pc, #544]	; (8015680 <ip4_frag+0x274>)
 801545e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8015462:	4988      	ldr	r1, [pc, #544]	; (8015684 <ip4_frag+0x278>)
 8015464:	4888      	ldr	r0, [pc, #544]	; (8015688 <ip4_frag+0x27c>)
 8015466:	f001 f84d 	bl	8016504 <iprintf>
 801546a:	f06f 0305 	mvn.w	r3, #5
 801546e:	e102      	b.n	8015676 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8015470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015472:	88db      	ldrh	r3, [r3, #6]
 8015474:	b29b      	uxth	r3, r3
 8015476:	4618      	mov	r0, r3
 8015478:	f7f6 fcca 	bl	800be10 <lwip_htons>
 801547c:	4603      	mov	r3, r0
 801547e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8015480:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015482:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015486:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801548a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801548c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015490:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8015492:	68fb      	ldr	r3, [r7, #12]
 8015494:	891b      	ldrh	r3, [r3, #8]
 8015496:	3b14      	subs	r3, #20
 8015498:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801549c:	e0e1      	b.n	8015662 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801549e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80154a0:	00db      	lsls	r3, r3, #3
 80154a2:	b29b      	uxth	r3, r3
 80154a4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80154a8:	4293      	cmp	r3, r2
 80154aa:	bf28      	it	cs
 80154ac:	4613      	movcs	r3, r2
 80154ae:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80154b0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80154b4:	2114      	movs	r1, #20
 80154b6:	200e      	movs	r0, #14
 80154b8:	f7f7 fcfa 	bl	800ceb0 <pbuf_alloc>
 80154bc:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80154be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154c0:	2b00      	cmp	r3, #0
 80154c2:	f000 80d5 	beq.w	8015670 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80154c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154c8:	895b      	ldrh	r3, [r3, #10]
 80154ca:	2b13      	cmp	r3, #19
 80154cc:	d806      	bhi.n	80154dc <ip4_frag+0xd0>
 80154ce:	4b6c      	ldr	r3, [pc, #432]	; (8015680 <ip4_frag+0x274>)
 80154d0:	f44f 7249 	mov.w	r2, #804	; 0x324
 80154d4:	496d      	ldr	r1, [pc, #436]	; (801568c <ip4_frag+0x280>)
 80154d6:	486c      	ldr	r0, [pc, #432]	; (8015688 <ip4_frag+0x27c>)
 80154d8:	f001 f814 	bl	8016504 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80154dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154de:	685b      	ldr	r3, [r3, #4]
 80154e0:	2214      	movs	r2, #20
 80154e2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80154e4:	4618      	mov	r0, r3
 80154e6:	f000 fff7 	bl	80164d8 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80154ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154ec:	685b      	ldr	r3, [r3, #4]
 80154ee:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80154f0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80154f2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80154f6:	e064      	b.n	80155c2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80154f8:	68fb      	ldr	r3, [r7, #12]
 80154fa:	895a      	ldrh	r2, [r3, #10]
 80154fc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80154fe:	1ad3      	subs	r3, r2, r3
 8015500:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8015502:	68fb      	ldr	r3, [r7, #12]
 8015504:	895b      	ldrh	r3, [r3, #10]
 8015506:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8015508:	429a      	cmp	r2, r3
 801550a:	d906      	bls.n	801551a <ip4_frag+0x10e>
 801550c:	4b5c      	ldr	r3, [pc, #368]	; (8015680 <ip4_frag+0x274>)
 801550e:	f240 322d 	movw	r2, #813	; 0x32d
 8015512:	495f      	ldr	r1, [pc, #380]	; (8015690 <ip4_frag+0x284>)
 8015514:	485c      	ldr	r0, [pc, #368]	; (8015688 <ip4_frag+0x27c>)
 8015516:	f000 fff5 	bl	8016504 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801551a:	8bfa      	ldrh	r2, [r7, #30]
 801551c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015520:	4293      	cmp	r3, r2
 8015522:	bf28      	it	cs
 8015524:	4613      	movcs	r3, r2
 8015526:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801552a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801552e:	2b00      	cmp	r3, #0
 8015530:	d105      	bne.n	801553e <ip4_frag+0x132>
        poff = 0;
 8015532:	2300      	movs	r3, #0
 8015534:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8015536:	68fb      	ldr	r3, [r7, #12]
 8015538:	681b      	ldr	r3, [r3, #0]
 801553a:	60fb      	str	r3, [r7, #12]
        continue;
 801553c:	e041      	b.n	80155c2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801553e:	f7ff ff0d 	bl	801535c <ip_frag_alloc_pbuf_custom_ref>
 8015542:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8015544:	69bb      	ldr	r3, [r7, #24]
 8015546:	2b00      	cmp	r3, #0
 8015548:	d103      	bne.n	8015552 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801554a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801554c:	f7f7 ff94 	bl	800d478 <pbuf_free>
        goto memerr;
 8015550:	e08f      	b.n	8015672 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015552:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8015554:	68fb      	ldr	r3, [r7, #12]
 8015556:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015558:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801555a:	4413      	add	r3, r2
 801555c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8015560:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8015564:	9201      	str	r2, [sp, #4]
 8015566:	9300      	str	r3, [sp, #0]
 8015568:	4603      	mov	r3, r0
 801556a:	2241      	movs	r2, #65	; 0x41
 801556c:	2000      	movs	r0, #0
 801556e:	f7f7 fdc9 	bl	800d104 <pbuf_alloced_custom>
 8015572:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8015574:	697b      	ldr	r3, [r7, #20]
 8015576:	2b00      	cmp	r3, #0
 8015578:	d106      	bne.n	8015588 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801557a:	69b8      	ldr	r0, [r7, #24]
 801557c:	f7ff fef6 	bl	801536c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8015580:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015582:	f7f7 ff79 	bl	800d478 <pbuf_free>
        goto memerr;
 8015586:	e074      	b.n	8015672 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8015588:	68f8      	ldr	r0, [r7, #12]
 801558a:	f7f8 f81b 	bl	800d5c4 <pbuf_ref>
      pcr->original = p;
 801558e:	69bb      	ldr	r3, [r7, #24]
 8015590:	68fa      	ldr	r2, [r7, #12]
 8015592:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8015594:	69bb      	ldr	r3, [r7, #24]
 8015596:	4a3f      	ldr	r2, [pc, #252]	; (8015694 <ip4_frag+0x288>)
 8015598:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801559a:	6979      	ldr	r1, [r7, #20]
 801559c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801559e:	f7f8 f839 	bl	800d614 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80155a2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80155a6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80155aa:	1ad3      	subs	r3, r2, r3
 80155ac:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80155b0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	d004      	beq.n	80155c2 <ip4_frag+0x1b6>
        poff = 0;
 80155b8:	2300      	movs	r3, #0
 80155ba:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80155bc:	68fb      	ldr	r3, [r7, #12]
 80155be:	681b      	ldr	r3, [r3, #0]
 80155c0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80155c2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80155c6:	2b00      	cmp	r3, #0
 80155c8:	d196      	bne.n	80154f8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80155ca:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80155cc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80155d0:	4413      	add	r3, r2
 80155d2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80155d4:	68bb      	ldr	r3, [r7, #8]
 80155d6:	8c1b      	ldrh	r3, [r3, #32]
 80155d8:	f1a3 0213 	sub.w	r2, r3, #19
 80155dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80155e0:	429a      	cmp	r2, r3
 80155e2:	bfcc      	ite	gt
 80155e4:	2301      	movgt	r3, #1
 80155e6:	2300      	movle	r3, #0
 80155e8:	b2db      	uxtb	r3, r3
 80155ea:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80155ec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80155f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80155f4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80155f6:	6a3b      	ldr	r3, [r7, #32]
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	d002      	beq.n	8015602 <ip4_frag+0x1f6>
 80155fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155fe:	2b00      	cmp	r3, #0
 8015600:	d003      	beq.n	801560a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8015602:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015604:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8015608:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801560a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801560c:	4618      	mov	r0, r3
 801560e:	f7f6 fbff 	bl	800be10 <lwip_htons>
 8015612:	4603      	mov	r3, r0
 8015614:	461a      	mov	r2, r3
 8015616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015618:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801561a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801561c:	3314      	adds	r3, #20
 801561e:	b29b      	uxth	r3, r3
 8015620:	4618      	mov	r0, r3
 8015622:	f7f6 fbf5 	bl	800be10 <lwip_htons>
 8015626:	4603      	mov	r3, r0
 8015628:	461a      	mov	r2, r3
 801562a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801562c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801562e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015630:	2200      	movs	r2, #0
 8015632:	729a      	strb	r2, [r3, #10]
 8015634:	2200      	movs	r2, #0
 8015636:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8015638:	68bb      	ldr	r3, [r7, #8]
 801563a:	695b      	ldr	r3, [r3, #20]
 801563c:	687a      	ldr	r2, [r7, #4]
 801563e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015640:	68b8      	ldr	r0, [r7, #8]
 8015642:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8015644:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015646:	f7f7 ff17 	bl	800d478 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801564a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801564e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015650:	1ad3      	subs	r3, r2, r3
 8015652:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8015656:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801565a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801565c:	4413      	add	r3, r2
 801565e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8015662:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015666:	2b00      	cmp	r3, #0
 8015668:	f47f af19 	bne.w	801549e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801566c:	2300      	movs	r3, #0
 801566e:	e002      	b.n	8015676 <ip4_frag+0x26a>
      goto memerr;
 8015670:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8015672:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015676:	4618      	mov	r0, r3
 8015678:	3748      	adds	r7, #72	; 0x48
 801567a:	46bd      	mov	sp, r7
 801567c:	bd80      	pop	{r7, pc}
 801567e:	bf00      	nop
 8015680:	08019dc4 	.word	0x08019dc4
 8015684:	08019fa0 	.word	0x08019fa0
 8015688:	08019e0c 	.word	0x08019e0c
 801568c:	08019fbc 	.word	0x08019fbc
 8015690:	08019fdc 	.word	0x08019fdc
 8015694:	080153a5 	.word	0x080153a5

08015698 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8015698:	b580      	push	{r7, lr}
 801569a:	b086      	sub	sp, #24
 801569c:	af00      	add	r7, sp, #0
 801569e:	6078      	str	r0, [r7, #4]
 80156a0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80156a2:	230e      	movs	r3, #14
 80156a4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	895b      	ldrh	r3, [r3, #10]
 80156aa:	2b0e      	cmp	r3, #14
 80156ac:	d96e      	bls.n	801578c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	7bdb      	ldrb	r3, [r3, #15]
 80156b2:	2b00      	cmp	r3, #0
 80156b4:	d106      	bne.n	80156c4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80156b6:	683b      	ldr	r3, [r7, #0]
 80156b8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80156bc:	3301      	adds	r3, #1
 80156be:	b2da      	uxtb	r2, r3
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80156c4:	687b      	ldr	r3, [r7, #4]
 80156c6:	685b      	ldr	r3, [r3, #4]
 80156c8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80156ca:	693b      	ldr	r3, [r7, #16]
 80156cc:	7b1a      	ldrb	r2, [r3, #12]
 80156ce:	7b5b      	ldrb	r3, [r3, #13]
 80156d0:	021b      	lsls	r3, r3, #8
 80156d2:	4313      	orrs	r3, r2
 80156d4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80156d6:	693b      	ldr	r3, [r7, #16]
 80156d8:	781b      	ldrb	r3, [r3, #0]
 80156da:	f003 0301 	and.w	r3, r3, #1
 80156de:	2b00      	cmp	r3, #0
 80156e0:	d023      	beq.n	801572a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80156e2:	693b      	ldr	r3, [r7, #16]
 80156e4:	781b      	ldrb	r3, [r3, #0]
 80156e6:	2b01      	cmp	r3, #1
 80156e8:	d10f      	bne.n	801570a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80156ea:	693b      	ldr	r3, [r7, #16]
 80156ec:	785b      	ldrb	r3, [r3, #1]
 80156ee:	2b00      	cmp	r3, #0
 80156f0:	d11b      	bne.n	801572a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80156f2:	693b      	ldr	r3, [r7, #16]
 80156f4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80156f6:	2b5e      	cmp	r3, #94	; 0x5e
 80156f8:	d117      	bne.n	801572a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80156fa:	687b      	ldr	r3, [r7, #4]
 80156fc:	7b5b      	ldrb	r3, [r3, #13]
 80156fe:	f043 0310 	orr.w	r3, r3, #16
 8015702:	b2da      	uxtb	r2, r3
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	735a      	strb	r2, [r3, #13]
 8015708:	e00f      	b.n	801572a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801570a:	693b      	ldr	r3, [r7, #16]
 801570c:	2206      	movs	r2, #6
 801570e:	4928      	ldr	r1, [pc, #160]	; (80157b0 <ethernet_input+0x118>)
 8015710:	4618      	mov	r0, r3
 8015712:	f000 fed3 	bl	80164bc <memcmp>
 8015716:	4603      	mov	r3, r0
 8015718:	2b00      	cmp	r3, #0
 801571a:	d106      	bne.n	801572a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	7b5b      	ldrb	r3, [r3, #13]
 8015720:	f043 0308 	orr.w	r3, r3, #8
 8015724:	b2da      	uxtb	r2, r3
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801572a:	89fb      	ldrh	r3, [r7, #14]
 801572c:	2b08      	cmp	r3, #8
 801572e:	d003      	beq.n	8015738 <ethernet_input+0xa0>
 8015730:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8015734:	d014      	beq.n	8015760 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8015736:	e032      	b.n	801579e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015738:	683b      	ldr	r3, [r7, #0]
 801573a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801573e:	f003 0308 	and.w	r3, r3, #8
 8015742:	2b00      	cmp	r3, #0
 8015744:	d024      	beq.n	8015790 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8015746:	8afb      	ldrh	r3, [r7, #22]
 8015748:	4619      	mov	r1, r3
 801574a:	6878      	ldr	r0, [r7, #4]
 801574c:	f7f7 fe0e 	bl	800d36c <pbuf_remove_header>
 8015750:	4603      	mov	r3, r0
 8015752:	2b00      	cmp	r3, #0
 8015754:	d11e      	bne.n	8015794 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8015756:	6839      	ldr	r1, [r7, #0]
 8015758:	6878      	ldr	r0, [r7, #4]
 801575a:	f7fe ff27 	bl	80145ac <ip4_input>
      break;
 801575e:	e013      	b.n	8015788 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015760:	683b      	ldr	r3, [r7, #0]
 8015762:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8015766:	f003 0308 	and.w	r3, r3, #8
 801576a:	2b00      	cmp	r3, #0
 801576c:	d014      	beq.n	8015798 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801576e:	8afb      	ldrh	r3, [r7, #22]
 8015770:	4619      	mov	r1, r3
 8015772:	6878      	ldr	r0, [r7, #4]
 8015774:	f7f7 fdfa 	bl	800d36c <pbuf_remove_header>
 8015778:	4603      	mov	r3, r0
 801577a:	2b00      	cmp	r3, #0
 801577c:	d10e      	bne.n	801579c <ethernet_input+0x104>
        etharp_input(p, netif);
 801577e:	6839      	ldr	r1, [r7, #0]
 8015780:	6878      	ldr	r0, [r7, #4]
 8015782:	f7fe f8c7 	bl	8013914 <etharp_input>
      break;
 8015786:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8015788:	2300      	movs	r3, #0
 801578a:	e00c      	b.n	80157a6 <ethernet_input+0x10e>
    goto free_and_return;
 801578c:	bf00      	nop
 801578e:	e006      	b.n	801579e <ethernet_input+0x106>
        goto free_and_return;
 8015790:	bf00      	nop
 8015792:	e004      	b.n	801579e <ethernet_input+0x106>
        goto free_and_return;
 8015794:	bf00      	nop
 8015796:	e002      	b.n	801579e <ethernet_input+0x106>
        goto free_and_return;
 8015798:	bf00      	nop
 801579a:	e000      	b.n	801579e <ethernet_input+0x106>
        goto free_and_return;
 801579c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801579e:	6878      	ldr	r0, [r7, #4]
 80157a0:	f7f7 fe6a 	bl	800d478 <pbuf_free>
  return ERR_OK;
 80157a4:	2300      	movs	r3, #0
}
 80157a6:	4618      	mov	r0, r3
 80157a8:	3718      	adds	r7, #24
 80157aa:	46bd      	mov	sp, r7
 80157ac:	bd80      	pop	{r7, pc}
 80157ae:	bf00      	nop
 80157b0:	0801a1f4 	.word	0x0801a1f4

080157b4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80157b4:	b580      	push	{r7, lr}
 80157b6:	b086      	sub	sp, #24
 80157b8:	af00      	add	r7, sp, #0
 80157ba:	60f8      	str	r0, [r7, #12]
 80157bc:	60b9      	str	r1, [r7, #8]
 80157be:	607a      	str	r2, [r7, #4]
 80157c0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80157c2:	8c3b      	ldrh	r3, [r7, #32]
 80157c4:	4618      	mov	r0, r3
 80157c6:	f7f6 fb23 	bl	800be10 <lwip_htons>
 80157ca:	4603      	mov	r3, r0
 80157cc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80157ce:	210e      	movs	r1, #14
 80157d0:	68b8      	ldr	r0, [r7, #8]
 80157d2:	f7f7 fdbb 	bl	800d34c <pbuf_add_header>
 80157d6:	4603      	mov	r3, r0
 80157d8:	2b00      	cmp	r3, #0
 80157da:	d125      	bne.n	8015828 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80157dc:	68bb      	ldr	r3, [r7, #8]
 80157de:	685b      	ldr	r3, [r3, #4]
 80157e0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80157e2:	693b      	ldr	r3, [r7, #16]
 80157e4:	8afa      	ldrh	r2, [r7, #22]
 80157e6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80157e8:	693b      	ldr	r3, [r7, #16]
 80157ea:	2206      	movs	r2, #6
 80157ec:	6839      	ldr	r1, [r7, #0]
 80157ee:	4618      	mov	r0, r3
 80157f0:	f000 fe72 	bl	80164d8 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80157f4:	693b      	ldr	r3, [r7, #16]
 80157f6:	3306      	adds	r3, #6
 80157f8:	2206      	movs	r2, #6
 80157fa:	6879      	ldr	r1, [r7, #4]
 80157fc:	4618      	mov	r0, r3
 80157fe:	f000 fe6b 	bl	80164d8 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8015802:	68fb      	ldr	r3, [r7, #12]
 8015804:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015808:	2b06      	cmp	r3, #6
 801580a:	d006      	beq.n	801581a <ethernet_output+0x66>
 801580c:	4b0a      	ldr	r3, [pc, #40]	; (8015838 <ethernet_output+0x84>)
 801580e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8015812:	490a      	ldr	r1, [pc, #40]	; (801583c <ethernet_output+0x88>)
 8015814:	480a      	ldr	r0, [pc, #40]	; (8015840 <ethernet_output+0x8c>)
 8015816:	f000 fe75 	bl	8016504 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801581a:	68fb      	ldr	r3, [r7, #12]
 801581c:	699b      	ldr	r3, [r3, #24]
 801581e:	68b9      	ldr	r1, [r7, #8]
 8015820:	68f8      	ldr	r0, [r7, #12]
 8015822:	4798      	blx	r3
 8015824:	4603      	mov	r3, r0
 8015826:	e002      	b.n	801582e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8015828:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801582a:	f06f 0301 	mvn.w	r3, #1
}
 801582e:	4618      	mov	r0, r3
 8015830:	3718      	adds	r7, #24
 8015832:	46bd      	mov	sp, r7
 8015834:	bd80      	pop	{r7, pc}
 8015836:	bf00      	nop
 8015838:	08019fec 	.word	0x08019fec
 801583c:	0801a024 	.word	0x0801a024
 8015840:	0801a058 	.word	0x0801a058

08015844 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8015844:	b580      	push	{r7, lr}
 8015846:	b086      	sub	sp, #24
 8015848:	af00      	add	r7, sp, #0
 801584a:	6078      	str	r0, [r7, #4]
 801584c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801584e:	683b      	ldr	r3, [r7, #0]
 8015850:	60bb      	str	r3, [r7, #8]
 8015852:	2304      	movs	r3, #4
 8015854:	60fb      	str	r3, [r7, #12]
 8015856:	2300      	movs	r3, #0
 8015858:	613b      	str	r3, [r7, #16]
 801585a:	2300      	movs	r3, #0
 801585c:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801585e:	f107 0308 	add.w	r3, r7, #8
 8015862:	2100      	movs	r1, #0
 8015864:	4618      	mov	r0, r3
 8015866:	f7f3 fc1f 	bl	80090a8 <osMessageCreate>
 801586a:	4602      	mov	r2, r0
 801586c:	687b      	ldr	r3, [r7, #4]
 801586e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	681b      	ldr	r3, [r3, #0]
 8015874:	2b00      	cmp	r3, #0
 8015876:	d102      	bne.n	801587e <sys_mbox_new+0x3a>
    return ERR_MEM;
 8015878:	f04f 33ff 	mov.w	r3, #4294967295
 801587c:	e000      	b.n	8015880 <sys_mbox_new+0x3c>

  return ERR_OK;
 801587e:	2300      	movs	r3, #0
}
 8015880:	4618      	mov	r0, r3
 8015882:	3718      	adds	r7, #24
 8015884:	46bd      	mov	sp, r7
 8015886:	bd80      	pop	{r7, pc}

08015888 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8015888:	b580      	push	{r7, lr}
 801588a:	b084      	sub	sp, #16
 801588c:	af00      	add	r7, sp, #0
 801588e:	6078      	str	r0, [r7, #4]
 8015890:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8015892:	687b      	ldr	r3, [r7, #4]
 8015894:	681b      	ldr	r3, [r3, #0]
 8015896:	6839      	ldr	r1, [r7, #0]
 8015898:	2200      	movs	r2, #0
 801589a:	4618      	mov	r0, r3
 801589c:	f7f3 fc2c 	bl	80090f8 <osMessagePut>
 80158a0:	4603      	mov	r3, r0
 80158a2:	2b00      	cmp	r3, #0
 80158a4:	d102      	bne.n	80158ac <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 80158a6:	2300      	movs	r3, #0
 80158a8:	73fb      	strb	r3, [r7, #15]
 80158aa:	e001      	b.n	80158b0 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80158ac:	23ff      	movs	r3, #255	; 0xff
 80158ae:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80158b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80158b4:	4618      	mov	r0, r3
 80158b6:	3710      	adds	r7, #16
 80158b8:	46bd      	mov	sp, r7
 80158ba:	bd80      	pop	{r7, pc}

080158bc <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80158bc:	b580      	push	{r7, lr}
 80158be:	b08c      	sub	sp, #48	; 0x30
 80158c0:	af00      	add	r7, sp, #0
 80158c2:	61f8      	str	r0, [r7, #28]
 80158c4:	61b9      	str	r1, [r7, #24]
 80158c6:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 80158c8:	f7f3 fa2c 	bl	8008d24 <osKernelSysTick>
 80158cc:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80158ce:	697b      	ldr	r3, [r7, #20]
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	d017      	beq.n	8015904 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 80158d4:	69fb      	ldr	r3, [r7, #28]
 80158d6:	6819      	ldr	r1, [r3, #0]
 80158d8:	f107 0320 	add.w	r3, r7, #32
 80158dc:	697a      	ldr	r2, [r7, #20]
 80158de:	4618      	mov	r0, r3
 80158e0:	f7f3 fc4a 	bl	8009178 <osMessageGet>

    if(event.status == osEventMessage)
 80158e4:	6a3b      	ldr	r3, [r7, #32]
 80158e6:	2b10      	cmp	r3, #16
 80158e8:	d109      	bne.n	80158fe <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 80158ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158ec:	461a      	mov	r2, r3
 80158ee:	69bb      	ldr	r3, [r7, #24]
 80158f0:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 80158f2:	f7f3 fa17 	bl	8008d24 <osKernelSysTick>
 80158f6:	4602      	mov	r2, r0
 80158f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158fa:	1ad3      	subs	r3, r2, r3
 80158fc:	e019      	b.n	8015932 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80158fe:	f04f 33ff 	mov.w	r3, #4294967295
 8015902:	e016      	b.n	8015932 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8015904:	69fb      	ldr	r3, [r7, #28]
 8015906:	6819      	ldr	r1, [r3, #0]
 8015908:	463b      	mov	r3, r7
 801590a:	f04f 32ff 	mov.w	r2, #4294967295
 801590e:	4618      	mov	r0, r3
 8015910:	f7f3 fc32 	bl	8009178 <osMessageGet>
 8015914:	f107 0320 	add.w	r3, r7, #32
 8015918:	463a      	mov	r2, r7
 801591a:	ca07      	ldmia	r2, {r0, r1, r2}
 801591c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8015920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015922:	461a      	mov	r2, r3
 8015924:	69bb      	ldr	r3, [r7, #24]
 8015926:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8015928:	f7f3 f9fc 	bl	8008d24 <osKernelSysTick>
 801592c:	4602      	mov	r2, r0
 801592e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015930:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8015932:	4618      	mov	r0, r3
 8015934:	3730      	adds	r7, #48	; 0x30
 8015936:	46bd      	mov	sp, r7
 8015938:	bd80      	pop	{r7, pc}

0801593a <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801593a:	b480      	push	{r7}
 801593c:	b083      	sub	sp, #12
 801593e:	af00      	add	r7, sp, #0
 8015940:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	681b      	ldr	r3, [r3, #0]
 8015946:	2b00      	cmp	r3, #0
 8015948:	d101      	bne.n	801594e <sys_mbox_valid+0x14>
    return 0;
 801594a:	2300      	movs	r3, #0
 801594c:	e000      	b.n	8015950 <sys_mbox_valid+0x16>
  else
    return 1;
 801594e:	2301      	movs	r3, #1
}
 8015950:	4618      	mov	r0, r3
 8015952:	370c      	adds	r7, #12
 8015954:	46bd      	mov	sp, r7
 8015956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801595a:	4770      	bx	lr

0801595c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801595c:	b580      	push	{r7, lr}
 801595e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8015960:	4803      	ldr	r0, [pc, #12]	; (8015970 <sys_init+0x14>)
 8015962:	f7f3 fa4f 	bl	8008e04 <osMutexCreate>
 8015966:	4603      	mov	r3, r0
 8015968:	4a02      	ldr	r2, [pc, #8]	; (8015974 <sys_init+0x18>)
 801596a:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801596c:	bf00      	nop
 801596e:	bd80      	pop	{r7, pc}
 8015970:	0801a204 	.word	0x0801a204
 8015974:	2000af7c 	.word	0x2000af7c

08015978 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8015978:	b580      	push	{r7, lr}
 801597a:	b084      	sub	sp, #16
 801597c:	af00      	add	r7, sp, #0
 801597e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8015980:	2300      	movs	r3, #0
 8015982:	60bb      	str	r3, [r7, #8]
 8015984:	2300      	movs	r3, #0
 8015986:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8015988:	f107 0308 	add.w	r3, r7, #8
 801598c:	4618      	mov	r0, r3
 801598e:	f7f3 fa39 	bl	8008e04 <osMutexCreate>
 8015992:	4602      	mov	r2, r0
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8015998:	687b      	ldr	r3, [r7, #4]
 801599a:	681b      	ldr	r3, [r3, #0]
 801599c:	2b00      	cmp	r3, #0
 801599e:	d102      	bne.n	80159a6 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80159a0:	f04f 33ff 	mov.w	r3, #4294967295
 80159a4:	e000      	b.n	80159a8 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80159a6:	2300      	movs	r3, #0
}
 80159a8:	4618      	mov	r0, r3
 80159aa:	3710      	adds	r7, #16
 80159ac:	46bd      	mov	sp, r7
 80159ae:	bd80      	pop	{r7, pc}

080159b0 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80159b0:	b580      	push	{r7, lr}
 80159b2:	b082      	sub	sp, #8
 80159b4:	af00      	add	r7, sp, #0
 80159b6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	681b      	ldr	r3, [r3, #0]
 80159bc:	f04f 31ff 	mov.w	r1, #4294967295
 80159c0:	4618      	mov	r0, r3
 80159c2:	f7f3 fa37 	bl	8008e34 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 80159c6:	bf00      	nop
 80159c8:	3708      	adds	r7, #8
 80159ca:	46bd      	mov	sp, r7
 80159cc:	bd80      	pop	{r7, pc}

080159ce <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80159ce:	b580      	push	{r7, lr}
 80159d0:	b082      	sub	sp, #8
 80159d2:	af00      	add	r7, sp, #0
 80159d4:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	681b      	ldr	r3, [r3, #0]
 80159da:	4618      	mov	r0, r3
 80159dc:	f7f3 fa78 	bl	8008ed0 <osMutexRelease>
}
 80159e0:	bf00      	nop
 80159e2:	3708      	adds	r7, #8
 80159e4:	46bd      	mov	sp, r7
 80159e6:	bd80      	pop	{r7, pc}

080159e8 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80159e8:	b580      	push	{r7, lr}
 80159ea:	b08c      	sub	sp, #48	; 0x30
 80159ec:	af00      	add	r7, sp, #0
 80159ee:	60f8      	str	r0, [r7, #12]
 80159f0:	60b9      	str	r1, [r7, #8]
 80159f2:	607a      	str	r2, [r7, #4]
 80159f4:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 80159f6:	f107 0314 	add.w	r3, r7, #20
 80159fa:	2200      	movs	r2, #0
 80159fc:	601a      	str	r2, [r3, #0]
 80159fe:	605a      	str	r2, [r3, #4]
 8015a00:	609a      	str	r2, [r3, #8]
 8015a02:	60da      	str	r2, [r3, #12]
 8015a04:	611a      	str	r2, [r3, #16]
 8015a06:	615a      	str	r2, [r3, #20]
 8015a08:	619a      	str	r2, [r3, #24]
 8015a0a:	68fb      	ldr	r3, [r7, #12]
 8015a0c:	617b      	str	r3, [r7, #20]
 8015a0e:	68bb      	ldr	r3, [r7, #8]
 8015a10:	61bb      	str	r3, [r7, #24]
 8015a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a14:	b21b      	sxth	r3, r3
 8015a16:	83bb      	strh	r3, [r7, #28]
 8015a18:	683b      	ldr	r3, [r7, #0]
 8015a1a:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8015a1c:	f107 0314 	add.w	r3, r7, #20
 8015a20:	6879      	ldr	r1, [r7, #4]
 8015a22:	4618      	mov	r0, r3
 8015a24:	f7f3 f98e 	bl	8008d44 <osThreadCreate>
 8015a28:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8015a2a:	4618      	mov	r0, r3
 8015a2c:	3730      	adds	r7, #48	; 0x30
 8015a2e:	46bd      	mov	sp, r7
 8015a30:	bd80      	pop	{r7, pc}
	...

08015a34 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8015a34:	b580      	push	{r7, lr}
 8015a36:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8015a38:	4b04      	ldr	r3, [pc, #16]	; (8015a4c <sys_arch_protect+0x18>)
 8015a3a:	681b      	ldr	r3, [r3, #0]
 8015a3c:	f04f 31ff 	mov.w	r1, #4294967295
 8015a40:	4618      	mov	r0, r3
 8015a42:	f7f3 f9f7 	bl	8008e34 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8015a46:	2301      	movs	r3, #1
}
 8015a48:	4618      	mov	r0, r3
 8015a4a:	bd80      	pop	{r7, pc}
 8015a4c:	2000af7c 	.word	0x2000af7c

08015a50 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8015a50:	b580      	push	{r7, lr}
 8015a52:	b082      	sub	sp, #8
 8015a54:	af00      	add	r7, sp, #0
 8015a56:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8015a58:	4b04      	ldr	r3, [pc, #16]	; (8015a6c <sys_arch_unprotect+0x1c>)
 8015a5a:	681b      	ldr	r3, [r3, #0]
 8015a5c:	4618      	mov	r0, r3
 8015a5e:	f7f3 fa37 	bl	8008ed0 <osMutexRelease>
}
 8015a62:	bf00      	nop
 8015a64:	3708      	adds	r7, #8
 8015a66:	46bd      	mov	sp, r7
 8015a68:	bd80      	pop	{r7, pc}
 8015a6a:	bf00      	nop
 8015a6c:	2000af7c 	.word	0x2000af7c

08015a70 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8015a70:	b580      	push	{r7, lr}
 8015a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8015a74:	2200      	movs	r2, #0
 8015a76:	4912      	ldr	r1, [pc, #72]	; (8015ac0 <MX_USB_DEVICE_Init+0x50>)
 8015a78:	4812      	ldr	r0, [pc, #72]	; (8015ac4 <MX_USB_DEVICE_Init+0x54>)
 8015a7a:	f7f1 ffb9 	bl	80079f0 <USBD_Init>
 8015a7e:	4603      	mov	r3, r0
 8015a80:	2b00      	cmp	r3, #0
 8015a82:	d001      	beq.n	8015a88 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8015a84:	f7eb f814 	bl	8000ab0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8015a88:	490f      	ldr	r1, [pc, #60]	; (8015ac8 <MX_USB_DEVICE_Init+0x58>)
 8015a8a:	480e      	ldr	r0, [pc, #56]	; (8015ac4 <MX_USB_DEVICE_Init+0x54>)
 8015a8c:	f7f1 ffe0 	bl	8007a50 <USBD_RegisterClass>
 8015a90:	4603      	mov	r3, r0
 8015a92:	2b00      	cmp	r3, #0
 8015a94:	d001      	beq.n	8015a9a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8015a96:	f7eb f80b 	bl	8000ab0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8015a9a:	490c      	ldr	r1, [pc, #48]	; (8015acc <MX_USB_DEVICE_Init+0x5c>)
 8015a9c:	4809      	ldr	r0, [pc, #36]	; (8015ac4 <MX_USB_DEVICE_Init+0x54>)
 8015a9e:	f7f1 ff31 	bl	8007904 <USBD_CDC_RegisterInterface>
 8015aa2:	4603      	mov	r3, r0
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	d001      	beq.n	8015aac <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8015aa8:	f7eb f802 	bl	8000ab0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8015aac:	4805      	ldr	r0, [pc, #20]	; (8015ac4 <MX_USB_DEVICE_Init+0x54>)
 8015aae:	f7f1 fff6 	bl	8007a9e <USBD_Start>
 8015ab2:	4603      	mov	r3, r0
 8015ab4:	2b00      	cmp	r3, #0
 8015ab6:	d001      	beq.n	8015abc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8015ab8:	f7ea fffa 	bl	8000ab0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8015abc:	bf00      	nop
 8015abe:	bd80      	pop	{r7, pc}
 8015ac0:	20000140 	.word	0x20000140
 8015ac4:	2000af80 	.word	0x2000af80
 8015ac8:	20000018 	.word	0x20000018
 8015acc:	2000012c 	.word	0x2000012c

08015ad0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8015ad0:	b580      	push	{r7, lr}
 8015ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8015ad4:	2200      	movs	r2, #0
 8015ad6:	4905      	ldr	r1, [pc, #20]	; (8015aec <CDC_Init_FS+0x1c>)
 8015ad8:	4805      	ldr	r0, [pc, #20]	; (8015af0 <CDC_Init_FS+0x20>)
 8015ada:	f7f1 ff28 	bl	800792e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8015ade:	4905      	ldr	r1, [pc, #20]	; (8015af4 <CDC_Init_FS+0x24>)
 8015ae0:	4803      	ldr	r0, [pc, #12]	; (8015af0 <CDC_Init_FS+0x20>)
 8015ae2:	f7f1 ff42 	bl	800796a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8015ae6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8015ae8:	4618      	mov	r0, r3
 8015aea:	bd80      	pop	{r7, pc}
 8015aec:	2000ba50 	.word	0x2000ba50
 8015af0:	2000af80 	.word	0x2000af80
 8015af4:	2000b250 	.word	0x2000b250

08015af8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8015af8:	b480      	push	{r7}
 8015afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8015afc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8015afe:	4618      	mov	r0, r3
 8015b00:	46bd      	mov	sp, r7
 8015b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b06:	4770      	bx	lr

08015b08 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8015b08:	b480      	push	{r7}
 8015b0a:	b083      	sub	sp, #12
 8015b0c:	af00      	add	r7, sp, #0
 8015b0e:	4603      	mov	r3, r0
 8015b10:	6039      	str	r1, [r7, #0]
 8015b12:	71fb      	strb	r3, [r7, #7]
 8015b14:	4613      	mov	r3, r2
 8015b16:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8015b18:	79fb      	ldrb	r3, [r7, #7]
 8015b1a:	2b23      	cmp	r3, #35	; 0x23
 8015b1c:	d84a      	bhi.n	8015bb4 <CDC_Control_FS+0xac>
 8015b1e:	a201      	add	r2, pc, #4	; (adr r2, 8015b24 <CDC_Control_FS+0x1c>)
 8015b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015b24:	08015bb5 	.word	0x08015bb5
 8015b28:	08015bb5 	.word	0x08015bb5
 8015b2c:	08015bb5 	.word	0x08015bb5
 8015b30:	08015bb5 	.word	0x08015bb5
 8015b34:	08015bb5 	.word	0x08015bb5
 8015b38:	08015bb5 	.word	0x08015bb5
 8015b3c:	08015bb5 	.word	0x08015bb5
 8015b40:	08015bb5 	.word	0x08015bb5
 8015b44:	08015bb5 	.word	0x08015bb5
 8015b48:	08015bb5 	.word	0x08015bb5
 8015b4c:	08015bb5 	.word	0x08015bb5
 8015b50:	08015bb5 	.word	0x08015bb5
 8015b54:	08015bb5 	.word	0x08015bb5
 8015b58:	08015bb5 	.word	0x08015bb5
 8015b5c:	08015bb5 	.word	0x08015bb5
 8015b60:	08015bb5 	.word	0x08015bb5
 8015b64:	08015bb5 	.word	0x08015bb5
 8015b68:	08015bb5 	.word	0x08015bb5
 8015b6c:	08015bb5 	.word	0x08015bb5
 8015b70:	08015bb5 	.word	0x08015bb5
 8015b74:	08015bb5 	.word	0x08015bb5
 8015b78:	08015bb5 	.word	0x08015bb5
 8015b7c:	08015bb5 	.word	0x08015bb5
 8015b80:	08015bb5 	.word	0x08015bb5
 8015b84:	08015bb5 	.word	0x08015bb5
 8015b88:	08015bb5 	.word	0x08015bb5
 8015b8c:	08015bb5 	.word	0x08015bb5
 8015b90:	08015bb5 	.word	0x08015bb5
 8015b94:	08015bb5 	.word	0x08015bb5
 8015b98:	08015bb5 	.word	0x08015bb5
 8015b9c:	08015bb5 	.word	0x08015bb5
 8015ba0:	08015bb5 	.word	0x08015bb5
 8015ba4:	08015bb5 	.word	0x08015bb5
 8015ba8:	08015bb5 	.word	0x08015bb5
 8015bac:	08015bb5 	.word	0x08015bb5
 8015bb0:	08015bb5 	.word	0x08015bb5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8015bb4:	bf00      	nop
  }

  return (USBD_OK);
 8015bb6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8015bb8:	4618      	mov	r0, r3
 8015bba:	370c      	adds	r7, #12
 8015bbc:	46bd      	mov	sp, r7
 8015bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bc2:	4770      	bx	lr

08015bc4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8015bc4:	b580      	push	{r7, lr}
 8015bc6:	b082      	sub	sp, #8
 8015bc8:	af00      	add	r7, sp, #0
 8015bca:	6078      	str	r0, [r7, #4]
 8015bcc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8015bce:	6879      	ldr	r1, [r7, #4]
 8015bd0:	4805      	ldr	r0, [pc, #20]	; (8015be8 <CDC_Receive_FS+0x24>)
 8015bd2:	f7f1 feca 	bl	800796a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8015bd6:	4804      	ldr	r0, [pc, #16]	; (8015be8 <CDC_Receive_FS+0x24>)
 8015bd8:	f7f1 fee0 	bl	800799c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8015bdc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8015bde:	4618      	mov	r0, r3
 8015be0:	3708      	adds	r7, #8
 8015be2:	46bd      	mov	sp, r7
 8015be4:	bd80      	pop	{r7, pc}
 8015be6:	bf00      	nop
 8015be8:	2000af80 	.word	0x2000af80

08015bec <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8015bec:	b480      	push	{r7}
 8015bee:	b087      	sub	sp, #28
 8015bf0:	af00      	add	r7, sp, #0
 8015bf2:	60f8      	str	r0, [r7, #12]
 8015bf4:	60b9      	str	r1, [r7, #8]
 8015bf6:	4613      	mov	r3, r2
 8015bf8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8015bfa:	2300      	movs	r3, #0
 8015bfc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8015bfe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015c02:	4618      	mov	r0, r3
 8015c04:	371c      	adds	r7, #28
 8015c06:	46bd      	mov	sp, r7
 8015c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c0c:	4770      	bx	lr
	...

08015c10 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015c10:	b480      	push	{r7}
 8015c12:	b083      	sub	sp, #12
 8015c14:	af00      	add	r7, sp, #0
 8015c16:	4603      	mov	r3, r0
 8015c18:	6039      	str	r1, [r7, #0]
 8015c1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8015c1c:	683b      	ldr	r3, [r7, #0]
 8015c1e:	2212      	movs	r2, #18
 8015c20:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8015c22:	4b03      	ldr	r3, [pc, #12]	; (8015c30 <USBD_FS_DeviceDescriptor+0x20>)
}
 8015c24:	4618      	mov	r0, r3
 8015c26:	370c      	adds	r7, #12
 8015c28:	46bd      	mov	sp, r7
 8015c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c2e:	4770      	bx	lr
 8015c30:	2000015c 	.word	0x2000015c

08015c34 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015c34:	b480      	push	{r7}
 8015c36:	b083      	sub	sp, #12
 8015c38:	af00      	add	r7, sp, #0
 8015c3a:	4603      	mov	r3, r0
 8015c3c:	6039      	str	r1, [r7, #0]
 8015c3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8015c40:	683b      	ldr	r3, [r7, #0]
 8015c42:	2204      	movs	r2, #4
 8015c44:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8015c46:	4b03      	ldr	r3, [pc, #12]	; (8015c54 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8015c48:	4618      	mov	r0, r3
 8015c4a:	370c      	adds	r7, #12
 8015c4c:	46bd      	mov	sp, r7
 8015c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c52:	4770      	bx	lr
 8015c54:	20000170 	.word	0x20000170

08015c58 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015c58:	b580      	push	{r7, lr}
 8015c5a:	b082      	sub	sp, #8
 8015c5c:	af00      	add	r7, sp, #0
 8015c5e:	4603      	mov	r3, r0
 8015c60:	6039      	str	r1, [r7, #0]
 8015c62:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015c64:	79fb      	ldrb	r3, [r7, #7]
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	d105      	bne.n	8015c76 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015c6a:	683a      	ldr	r2, [r7, #0]
 8015c6c:	4907      	ldr	r1, [pc, #28]	; (8015c8c <USBD_FS_ProductStrDescriptor+0x34>)
 8015c6e:	4808      	ldr	r0, [pc, #32]	; (8015c90 <USBD_FS_ProductStrDescriptor+0x38>)
 8015c70:	f7f2 ff47 	bl	8008b02 <USBD_GetString>
 8015c74:	e004      	b.n	8015c80 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015c76:	683a      	ldr	r2, [r7, #0]
 8015c78:	4904      	ldr	r1, [pc, #16]	; (8015c8c <USBD_FS_ProductStrDescriptor+0x34>)
 8015c7a:	4805      	ldr	r0, [pc, #20]	; (8015c90 <USBD_FS_ProductStrDescriptor+0x38>)
 8015c7c:	f7f2 ff41 	bl	8008b02 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015c80:	4b02      	ldr	r3, [pc, #8]	; (8015c8c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8015c82:	4618      	mov	r0, r3
 8015c84:	3708      	adds	r7, #8
 8015c86:	46bd      	mov	sp, r7
 8015c88:	bd80      	pop	{r7, pc}
 8015c8a:	bf00      	nop
 8015c8c:	2000c250 	.word	0x2000c250
 8015c90:	0801a080 	.word	0x0801a080

08015c94 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015c94:	b580      	push	{r7, lr}
 8015c96:	b082      	sub	sp, #8
 8015c98:	af00      	add	r7, sp, #0
 8015c9a:	4603      	mov	r3, r0
 8015c9c:	6039      	str	r1, [r7, #0]
 8015c9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8015ca0:	683a      	ldr	r2, [r7, #0]
 8015ca2:	4904      	ldr	r1, [pc, #16]	; (8015cb4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8015ca4:	4804      	ldr	r0, [pc, #16]	; (8015cb8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8015ca6:	f7f2 ff2c 	bl	8008b02 <USBD_GetString>
  return USBD_StrDesc;
 8015caa:	4b02      	ldr	r3, [pc, #8]	; (8015cb4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8015cac:	4618      	mov	r0, r3
 8015cae:	3708      	adds	r7, #8
 8015cb0:	46bd      	mov	sp, r7
 8015cb2:	bd80      	pop	{r7, pc}
 8015cb4:	2000c250 	.word	0x2000c250
 8015cb8:	0801a098 	.word	0x0801a098

08015cbc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015cbc:	b580      	push	{r7, lr}
 8015cbe:	b082      	sub	sp, #8
 8015cc0:	af00      	add	r7, sp, #0
 8015cc2:	4603      	mov	r3, r0
 8015cc4:	6039      	str	r1, [r7, #0]
 8015cc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8015cc8:	683b      	ldr	r3, [r7, #0]
 8015cca:	221a      	movs	r2, #26
 8015ccc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8015cce:	f000 f843 	bl	8015d58 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8015cd2:	4b02      	ldr	r3, [pc, #8]	; (8015cdc <USBD_FS_SerialStrDescriptor+0x20>)
}
 8015cd4:	4618      	mov	r0, r3
 8015cd6:	3708      	adds	r7, #8
 8015cd8:	46bd      	mov	sp, r7
 8015cda:	bd80      	pop	{r7, pc}
 8015cdc:	20000174 	.word	0x20000174

08015ce0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015ce0:	b580      	push	{r7, lr}
 8015ce2:	b082      	sub	sp, #8
 8015ce4:	af00      	add	r7, sp, #0
 8015ce6:	4603      	mov	r3, r0
 8015ce8:	6039      	str	r1, [r7, #0]
 8015cea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8015cec:	79fb      	ldrb	r3, [r7, #7]
 8015cee:	2b00      	cmp	r3, #0
 8015cf0:	d105      	bne.n	8015cfe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015cf2:	683a      	ldr	r2, [r7, #0]
 8015cf4:	4907      	ldr	r1, [pc, #28]	; (8015d14 <USBD_FS_ConfigStrDescriptor+0x34>)
 8015cf6:	4808      	ldr	r0, [pc, #32]	; (8015d18 <USBD_FS_ConfigStrDescriptor+0x38>)
 8015cf8:	f7f2 ff03 	bl	8008b02 <USBD_GetString>
 8015cfc:	e004      	b.n	8015d08 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015cfe:	683a      	ldr	r2, [r7, #0]
 8015d00:	4904      	ldr	r1, [pc, #16]	; (8015d14 <USBD_FS_ConfigStrDescriptor+0x34>)
 8015d02:	4805      	ldr	r0, [pc, #20]	; (8015d18 <USBD_FS_ConfigStrDescriptor+0x38>)
 8015d04:	f7f2 fefd 	bl	8008b02 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015d08:	4b02      	ldr	r3, [pc, #8]	; (8015d14 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8015d0a:	4618      	mov	r0, r3
 8015d0c:	3708      	adds	r7, #8
 8015d0e:	46bd      	mov	sp, r7
 8015d10:	bd80      	pop	{r7, pc}
 8015d12:	bf00      	nop
 8015d14:	2000c250 	.word	0x2000c250
 8015d18:	0801a0ac 	.word	0x0801a0ac

08015d1c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015d1c:	b580      	push	{r7, lr}
 8015d1e:	b082      	sub	sp, #8
 8015d20:	af00      	add	r7, sp, #0
 8015d22:	4603      	mov	r3, r0
 8015d24:	6039      	str	r1, [r7, #0]
 8015d26:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015d28:	79fb      	ldrb	r3, [r7, #7]
 8015d2a:	2b00      	cmp	r3, #0
 8015d2c:	d105      	bne.n	8015d3a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8015d2e:	683a      	ldr	r2, [r7, #0]
 8015d30:	4907      	ldr	r1, [pc, #28]	; (8015d50 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8015d32:	4808      	ldr	r0, [pc, #32]	; (8015d54 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015d34:	f7f2 fee5 	bl	8008b02 <USBD_GetString>
 8015d38:	e004      	b.n	8015d44 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8015d3a:	683a      	ldr	r2, [r7, #0]
 8015d3c:	4904      	ldr	r1, [pc, #16]	; (8015d50 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8015d3e:	4805      	ldr	r0, [pc, #20]	; (8015d54 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015d40:	f7f2 fedf 	bl	8008b02 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015d44:	4b02      	ldr	r3, [pc, #8]	; (8015d50 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8015d46:	4618      	mov	r0, r3
 8015d48:	3708      	adds	r7, #8
 8015d4a:	46bd      	mov	sp, r7
 8015d4c:	bd80      	pop	{r7, pc}
 8015d4e:	bf00      	nop
 8015d50:	2000c250 	.word	0x2000c250
 8015d54:	0801a0b8 	.word	0x0801a0b8

08015d58 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8015d58:	b580      	push	{r7, lr}
 8015d5a:	b084      	sub	sp, #16
 8015d5c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8015d5e:	4b0f      	ldr	r3, [pc, #60]	; (8015d9c <Get_SerialNum+0x44>)
 8015d60:	681b      	ldr	r3, [r3, #0]
 8015d62:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8015d64:	4b0e      	ldr	r3, [pc, #56]	; (8015da0 <Get_SerialNum+0x48>)
 8015d66:	681b      	ldr	r3, [r3, #0]
 8015d68:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8015d6a:	4b0e      	ldr	r3, [pc, #56]	; (8015da4 <Get_SerialNum+0x4c>)
 8015d6c:	681b      	ldr	r3, [r3, #0]
 8015d6e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8015d70:	68fa      	ldr	r2, [r7, #12]
 8015d72:	687b      	ldr	r3, [r7, #4]
 8015d74:	4413      	add	r3, r2
 8015d76:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8015d78:	68fb      	ldr	r3, [r7, #12]
 8015d7a:	2b00      	cmp	r3, #0
 8015d7c:	d009      	beq.n	8015d92 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8015d7e:	2208      	movs	r2, #8
 8015d80:	4909      	ldr	r1, [pc, #36]	; (8015da8 <Get_SerialNum+0x50>)
 8015d82:	68f8      	ldr	r0, [r7, #12]
 8015d84:	f000 f814 	bl	8015db0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8015d88:	2204      	movs	r2, #4
 8015d8a:	4908      	ldr	r1, [pc, #32]	; (8015dac <Get_SerialNum+0x54>)
 8015d8c:	68b8      	ldr	r0, [r7, #8]
 8015d8e:	f000 f80f 	bl	8015db0 <IntToUnicode>
  }
}
 8015d92:	bf00      	nop
 8015d94:	3710      	adds	r7, #16
 8015d96:	46bd      	mov	sp, r7
 8015d98:	bd80      	pop	{r7, pc}
 8015d9a:	bf00      	nop
 8015d9c:	1fff7a10 	.word	0x1fff7a10
 8015da0:	1fff7a14 	.word	0x1fff7a14
 8015da4:	1fff7a18 	.word	0x1fff7a18
 8015da8:	20000176 	.word	0x20000176
 8015dac:	20000186 	.word	0x20000186

08015db0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8015db0:	b480      	push	{r7}
 8015db2:	b087      	sub	sp, #28
 8015db4:	af00      	add	r7, sp, #0
 8015db6:	60f8      	str	r0, [r7, #12]
 8015db8:	60b9      	str	r1, [r7, #8]
 8015dba:	4613      	mov	r3, r2
 8015dbc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8015dbe:	2300      	movs	r3, #0
 8015dc0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8015dc2:	2300      	movs	r3, #0
 8015dc4:	75fb      	strb	r3, [r7, #23]
 8015dc6:	e027      	b.n	8015e18 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8015dc8:	68fb      	ldr	r3, [r7, #12]
 8015dca:	0f1b      	lsrs	r3, r3, #28
 8015dcc:	2b09      	cmp	r3, #9
 8015dce:	d80b      	bhi.n	8015de8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8015dd0:	68fb      	ldr	r3, [r7, #12]
 8015dd2:	0f1b      	lsrs	r3, r3, #28
 8015dd4:	b2da      	uxtb	r2, r3
 8015dd6:	7dfb      	ldrb	r3, [r7, #23]
 8015dd8:	005b      	lsls	r3, r3, #1
 8015dda:	4619      	mov	r1, r3
 8015ddc:	68bb      	ldr	r3, [r7, #8]
 8015dde:	440b      	add	r3, r1
 8015de0:	3230      	adds	r2, #48	; 0x30
 8015de2:	b2d2      	uxtb	r2, r2
 8015de4:	701a      	strb	r2, [r3, #0]
 8015de6:	e00a      	b.n	8015dfe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8015de8:	68fb      	ldr	r3, [r7, #12]
 8015dea:	0f1b      	lsrs	r3, r3, #28
 8015dec:	b2da      	uxtb	r2, r3
 8015dee:	7dfb      	ldrb	r3, [r7, #23]
 8015df0:	005b      	lsls	r3, r3, #1
 8015df2:	4619      	mov	r1, r3
 8015df4:	68bb      	ldr	r3, [r7, #8]
 8015df6:	440b      	add	r3, r1
 8015df8:	3237      	adds	r2, #55	; 0x37
 8015dfa:	b2d2      	uxtb	r2, r2
 8015dfc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8015dfe:	68fb      	ldr	r3, [r7, #12]
 8015e00:	011b      	lsls	r3, r3, #4
 8015e02:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8015e04:	7dfb      	ldrb	r3, [r7, #23]
 8015e06:	005b      	lsls	r3, r3, #1
 8015e08:	3301      	adds	r3, #1
 8015e0a:	68ba      	ldr	r2, [r7, #8]
 8015e0c:	4413      	add	r3, r2
 8015e0e:	2200      	movs	r2, #0
 8015e10:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8015e12:	7dfb      	ldrb	r3, [r7, #23]
 8015e14:	3301      	adds	r3, #1
 8015e16:	75fb      	strb	r3, [r7, #23]
 8015e18:	7dfa      	ldrb	r2, [r7, #23]
 8015e1a:	79fb      	ldrb	r3, [r7, #7]
 8015e1c:	429a      	cmp	r2, r3
 8015e1e:	d3d3      	bcc.n	8015dc8 <IntToUnicode+0x18>
  }
}
 8015e20:	bf00      	nop
 8015e22:	bf00      	nop
 8015e24:	371c      	adds	r7, #28
 8015e26:	46bd      	mov	sp, r7
 8015e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e2c:	4770      	bx	lr
	...

08015e30 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8015e30:	b580      	push	{r7, lr}
 8015e32:	b08a      	sub	sp, #40	; 0x28
 8015e34:	af00      	add	r7, sp, #0
 8015e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015e38:	f107 0314 	add.w	r3, r7, #20
 8015e3c:	2200      	movs	r2, #0
 8015e3e:	601a      	str	r2, [r3, #0]
 8015e40:	605a      	str	r2, [r3, #4]
 8015e42:	609a      	str	r2, [r3, #8]
 8015e44:	60da      	str	r2, [r3, #12]
 8015e46:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8015e48:	687b      	ldr	r3, [r7, #4]
 8015e4a:	681b      	ldr	r3, [r3, #0]
 8015e4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8015e50:	d147      	bne.n	8015ee2 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015e52:	2300      	movs	r3, #0
 8015e54:	613b      	str	r3, [r7, #16]
 8015e56:	4b25      	ldr	r3, [pc, #148]	; (8015eec <HAL_PCD_MspInit+0xbc>)
 8015e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e5a:	4a24      	ldr	r2, [pc, #144]	; (8015eec <HAL_PCD_MspInit+0xbc>)
 8015e5c:	f043 0301 	orr.w	r3, r3, #1
 8015e60:	6313      	str	r3, [r2, #48]	; 0x30
 8015e62:	4b22      	ldr	r3, [pc, #136]	; (8015eec <HAL_PCD_MspInit+0xbc>)
 8015e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e66:	f003 0301 	and.w	r3, r3, #1
 8015e6a:	613b      	str	r3, [r7, #16]
 8015e6c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8015e6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015e72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8015e74:	2300      	movs	r3, #0
 8015e76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015e78:	2300      	movs	r3, #0
 8015e7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015e7c:	f107 0314 	add.w	r3, r7, #20
 8015e80:	4619      	mov	r1, r3
 8015e82:	481b      	ldr	r0, [pc, #108]	; (8015ef0 <HAL_PCD_MspInit+0xc0>)
 8015e84:	f7ec fa30 	bl	80022e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8015e88:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8015e8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015e8e:	2302      	movs	r3, #2
 8015e90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015e92:	2300      	movs	r3, #0
 8015e94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015e96:	2303      	movs	r3, #3
 8015e98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8015e9a:	230a      	movs	r3, #10
 8015e9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015e9e:	f107 0314 	add.w	r3, r7, #20
 8015ea2:	4619      	mov	r1, r3
 8015ea4:	4812      	ldr	r0, [pc, #72]	; (8015ef0 <HAL_PCD_MspInit+0xc0>)
 8015ea6:	f7ec fa1f 	bl	80022e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8015eaa:	4b10      	ldr	r3, [pc, #64]	; (8015eec <HAL_PCD_MspInit+0xbc>)
 8015eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015eae:	4a0f      	ldr	r2, [pc, #60]	; (8015eec <HAL_PCD_MspInit+0xbc>)
 8015eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015eb4:	6353      	str	r3, [r2, #52]	; 0x34
 8015eb6:	2300      	movs	r3, #0
 8015eb8:	60fb      	str	r3, [r7, #12]
 8015eba:	4b0c      	ldr	r3, [pc, #48]	; (8015eec <HAL_PCD_MspInit+0xbc>)
 8015ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015ebe:	4a0b      	ldr	r2, [pc, #44]	; (8015eec <HAL_PCD_MspInit+0xbc>)
 8015ec0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8015ec4:	6453      	str	r3, [r2, #68]	; 0x44
 8015ec6:	4b09      	ldr	r3, [pc, #36]	; (8015eec <HAL_PCD_MspInit+0xbc>)
 8015ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015eca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015ece:	60fb      	str	r3, [r7, #12]
 8015ed0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8015ed2:	2200      	movs	r2, #0
 8015ed4:	2105      	movs	r1, #5
 8015ed6:	2043      	movs	r0, #67	; 0x43
 8015ed8:	f7eb f9ca 	bl	8001270 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8015edc:	2043      	movs	r0, #67	; 0x43
 8015ede:	f7eb f9e3 	bl	80012a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8015ee2:	bf00      	nop
 8015ee4:	3728      	adds	r7, #40	; 0x28
 8015ee6:	46bd      	mov	sp, r7
 8015ee8:	bd80      	pop	{r7, pc}
 8015eea:	bf00      	nop
 8015eec:	40023800 	.word	0x40023800
 8015ef0:	40020000 	.word	0x40020000

08015ef4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015ef4:	b580      	push	{r7, lr}
 8015ef6:	b082      	sub	sp, #8
 8015ef8:	af00      	add	r7, sp, #0
 8015efa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8015f08:	4619      	mov	r1, r3
 8015f0a:	4610      	mov	r0, r2
 8015f0c:	f7f1 fe12 	bl	8007b34 <USBD_LL_SetupStage>
}
 8015f10:	bf00      	nop
 8015f12:	3708      	adds	r7, #8
 8015f14:	46bd      	mov	sp, r7
 8015f16:	bd80      	pop	{r7, pc}

08015f18 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015f18:	b580      	push	{r7, lr}
 8015f1a:	b082      	sub	sp, #8
 8015f1c:	af00      	add	r7, sp, #0
 8015f1e:	6078      	str	r0, [r7, #4]
 8015f20:	460b      	mov	r3, r1
 8015f22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8015f24:	687b      	ldr	r3, [r7, #4]
 8015f26:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8015f2a:	78fa      	ldrb	r2, [r7, #3]
 8015f2c:	6879      	ldr	r1, [r7, #4]
 8015f2e:	4613      	mov	r3, r2
 8015f30:	00db      	lsls	r3, r3, #3
 8015f32:	1a9b      	subs	r3, r3, r2
 8015f34:	009b      	lsls	r3, r3, #2
 8015f36:	440b      	add	r3, r1
 8015f38:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8015f3c:	681a      	ldr	r2, [r3, #0]
 8015f3e:	78fb      	ldrb	r3, [r7, #3]
 8015f40:	4619      	mov	r1, r3
 8015f42:	f7f1 fe4c 	bl	8007bde <USBD_LL_DataOutStage>
}
 8015f46:	bf00      	nop
 8015f48:	3708      	adds	r7, #8
 8015f4a:	46bd      	mov	sp, r7
 8015f4c:	bd80      	pop	{r7, pc}

08015f4e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015f4e:	b580      	push	{r7, lr}
 8015f50:	b082      	sub	sp, #8
 8015f52:	af00      	add	r7, sp, #0
 8015f54:	6078      	str	r0, [r7, #4]
 8015f56:	460b      	mov	r3, r1
 8015f58:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8015f5a:	687b      	ldr	r3, [r7, #4]
 8015f5c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8015f60:	78fa      	ldrb	r2, [r7, #3]
 8015f62:	6879      	ldr	r1, [r7, #4]
 8015f64:	4613      	mov	r3, r2
 8015f66:	00db      	lsls	r3, r3, #3
 8015f68:	1a9b      	subs	r3, r3, r2
 8015f6a:	009b      	lsls	r3, r3, #2
 8015f6c:	440b      	add	r3, r1
 8015f6e:	3348      	adds	r3, #72	; 0x48
 8015f70:	681a      	ldr	r2, [r3, #0]
 8015f72:	78fb      	ldrb	r3, [r7, #3]
 8015f74:	4619      	mov	r1, r3
 8015f76:	f7f1 fe95 	bl	8007ca4 <USBD_LL_DataInStage>
}
 8015f7a:	bf00      	nop
 8015f7c:	3708      	adds	r7, #8
 8015f7e:	46bd      	mov	sp, r7
 8015f80:	bd80      	pop	{r7, pc}

08015f82 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015f82:	b580      	push	{r7, lr}
 8015f84:	b082      	sub	sp, #8
 8015f86:	af00      	add	r7, sp, #0
 8015f88:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015f90:	4618      	mov	r0, r3
 8015f92:	f7f1 ffa9 	bl	8007ee8 <USBD_LL_SOF>
}
 8015f96:	bf00      	nop
 8015f98:	3708      	adds	r7, #8
 8015f9a:	46bd      	mov	sp, r7
 8015f9c:	bd80      	pop	{r7, pc}

08015f9e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015f9e:	b580      	push	{r7, lr}
 8015fa0:	b084      	sub	sp, #16
 8015fa2:	af00      	add	r7, sp, #0
 8015fa4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8015fa6:	2301      	movs	r3, #1
 8015fa8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8015faa:	687b      	ldr	r3, [r7, #4]
 8015fac:	68db      	ldr	r3, [r3, #12]
 8015fae:	2b00      	cmp	r3, #0
 8015fb0:	d102      	bne.n	8015fb8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8015fb2:	2300      	movs	r3, #0
 8015fb4:	73fb      	strb	r3, [r7, #15]
 8015fb6:	e008      	b.n	8015fca <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	68db      	ldr	r3, [r3, #12]
 8015fbc:	2b02      	cmp	r3, #2
 8015fbe:	d102      	bne.n	8015fc6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8015fc0:	2301      	movs	r3, #1
 8015fc2:	73fb      	strb	r3, [r7, #15]
 8015fc4:	e001      	b.n	8015fca <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8015fc6:	f7ea fd73 	bl	8000ab0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8015fca:	687b      	ldr	r3, [r7, #4]
 8015fcc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015fd0:	7bfa      	ldrb	r2, [r7, #15]
 8015fd2:	4611      	mov	r1, r2
 8015fd4:	4618      	mov	r0, r3
 8015fd6:	f7f1 ff49 	bl	8007e6c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8015fda:	687b      	ldr	r3, [r7, #4]
 8015fdc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015fe0:	4618      	mov	r0, r3
 8015fe2:	f7f1 fef5 	bl	8007dd0 <USBD_LL_Reset>
}
 8015fe6:	bf00      	nop
 8015fe8:	3710      	adds	r7, #16
 8015fea:	46bd      	mov	sp, r7
 8015fec:	bd80      	pop	{r7, pc}
	...

08015ff0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015ff0:	b580      	push	{r7, lr}
 8015ff2:	b082      	sub	sp, #8
 8015ff4:	af00      	add	r7, sp, #0
 8015ff6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8015ff8:	687b      	ldr	r3, [r7, #4]
 8015ffa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015ffe:	4618      	mov	r0, r3
 8016000:	f7f1 ff44 	bl	8007e8c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	681b      	ldr	r3, [r3, #0]
 8016008:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801600c:	681b      	ldr	r3, [r3, #0]
 801600e:	687a      	ldr	r2, [r7, #4]
 8016010:	6812      	ldr	r2, [r2, #0]
 8016012:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8016016:	f043 0301 	orr.w	r3, r3, #1
 801601a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	6a1b      	ldr	r3, [r3, #32]
 8016020:	2b00      	cmp	r3, #0
 8016022:	d005      	beq.n	8016030 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016024:	4b04      	ldr	r3, [pc, #16]	; (8016038 <HAL_PCD_SuspendCallback+0x48>)
 8016026:	691b      	ldr	r3, [r3, #16]
 8016028:	4a03      	ldr	r2, [pc, #12]	; (8016038 <HAL_PCD_SuspendCallback+0x48>)
 801602a:	f043 0306 	orr.w	r3, r3, #6
 801602e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8016030:	bf00      	nop
 8016032:	3708      	adds	r7, #8
 8016034:	46bd      	mov	sp, r7
 8016036:	bd80      	pop	{r7, pc}
 8016038:	e000ed00 	.word	0xe000ed00

0801603c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801603c:	b580      	push	{r7, lr}
 801603e:	b082      	sub	sp, #8
 8016040:	af00      	add	r7, sp, #0
 8016042:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801604a:	4618      	mov	r0, r3
 801604c:	f7f1 ff34 	bl	8007eb8 <USBD_LL_Resume>
}
 8016050:	bf00      	nop
 8016052:	3708      	adds	r7, #8
 8016054:	46bd      	mov	sp, r7
 8016056:	bd80      	pop	{r7, pc}

08016058 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016058:	b580      	push	{r7, lr}
 801605a:	b082      	sub	sp, #8
 801605c:	af00      	add	r7, sp, #0
 801605e:	6078      	str	r0, [r7, #4]
 8016060:	460b      	mov	r3, r1
 8016062:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016064:	687b      	ldr	r3, [r7, #4]
 8016066:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801606a:	78fa      	ldrb	r2, [r7, #3]
 801606c:	4611      	mov	r1, r2
 801606e:	4618      	mov	r0, r3
 8016070:	f7f1 ff82 	bl	8007f78 <USBD_LL_IsoOUTIncomplete>
}
 8016074:	bf00      	nop
 8016076:	3708      	adds	r7, #8
 8016078:	46bd      	mov	sp, r7
 801607a:	bd80      	pop	{r7, pc}

0801607c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801607c:	b580      	push	{r7, lr}
 801607e:	b082      	sub	sp, #8
 8016080:	af00      	add	r7, sp, #0
 8016082:	6078      	str	r0, [r7, #4]
 8016084:	460b      	mov	r3, r1
 8016086:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801608e:	78fa      	ldrb	r2, [r7, #3]
 8016090:	4611      	mov	r1, r2
 8016092:	4618      	mov	r0, r3
 8016094:	f7f1 ff4a 	bl	8007f2c <USBD_LL_IsoINIncomplete>
}
 8016098:	bf00      	nop
 801609a:	3708      	adds	r7, #8
 801609c:	46bd      	mov	sp, r7
 801609e:	bd80      	pop	{r7, pc}

080160a0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80160a0:	b580      	push	{r7, lr}
 80160a2:	b082      	sub	sp, #8
 80160a4:	af00      	add	r7, sp, #0
 80160a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80160ae:	4618      	mov	r0, r3
 80160b0:	f7f1 ff88 	bl	8007fc4 <USBD_LL_DevConnected>
}
 80160b4:	bf00      	nop
 80160b6:	3708      	adds	r7, #8
 80160b8:	46bd      	mov	sp, r7
 80160ba:	bd80      	pop	{r7, pc}

080160bc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80160bc:	b580      	push	{r7, lr}
 80160be:	b082      	sub	sp, #8
 80160c0:	af00      	add	r7, sp, #0
 80160c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80160c4:	687b      	ldr	r3, [r7, #4]
 80160c6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80160ca:	4618      	mov	r0, r3
 80160cc:	f7f1 ff85 	bl	8007fda <USBD_LL_DevDisconnected>
}
 80160d0:	bf00      	nop
 80160d2:	3708      	adds	r7, #8
 80160d4:	46bd      	mov	sp, r7
 80160d6:	bd80      	pop	{r7, pc}

080160d8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80160d8:	b580      	push	{r7, lr}
 80160da:	b082      	sub	sp, #8
 80160dc:	af00      	add	r7, sp, #0
 80160de:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	781b      	ldrb	r3, [r3, #0]
 80160e4:	2b00      	cmp	r3, #0
 80160e6:	d13c      	bne.n	8016162 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80160e8:	4a20      	ldr	r2, [pc, #128]	; (801616c <USBD_LL_Init+0x94>)
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80160f0:	687b      	ldr	r3, [r7, #4]
 80160f2:	4a1e      	ldr	r2, [pc, #120]	; (801616c <USBD_LL_Init+0x94>)
 80160f4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80160f8:	4b1c      	ldr	r3, [pc, #112]	; (801616c <USBD_LL_Init+0x94>)
 80160fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80160fe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8016100:	4b1a      	ldr	r3, [pc, #104]	; (801616c <USBD_LL_Init+0x94>)
 8016102:	2204      	movs	r2, #4
 8016104:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8016106:	4b19      	ldr	r3, [pc, #100]	; (801616c <USBD_LL_Init+0x94>)
 8016108:	2202      	movs	r2, #2
 801610a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801610c:	4b17      	ldr	r3, [pc, #92]	; (801616c <USBD_LL_Init+0x94>)
 801610e:	2200      	movs	r2, #0
 8016110:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8016112:	4b16      	ldr	r3, [pc, #88]	; (801616c <USBD_LL_Init+0x94>)
 8016114:	2202      	movs	r2, #2
 8016116:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8016118:	4b14      	ldr	r3, [pc, #80]	; (801616c <USBD_LL_Init+0x94>)
 801611a:	2200      	movs	r2, #0
 801611c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801611e:	4b13      	ldr	r3, [pc, #76]	; (801616c <USBD_LL_Init+0x94>)
 8016120:	2200      	movs	r2, #0
 8016122:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8016124:	4b11      	ldr	r3, [pc, #68]	; (801616c <USBD_LL_Init+0x94>)
 8016126:	2200      	movs	r2, #0
 8016128:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 801612a:	4b10      	ldr	r3, [pc, #64]	; (801616c <USBD_LL_Init+0x94>)
 801612c:	2201      	movs	r2, #1
 801612e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8016130:	4b0e      	ldr	r3, [pc, #56]	; (801616c <USBD_LL_Init+0x94>)
 8016132:	2200      	movs	r2, #0
 8016134:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8016136:	480d      	ldr	r0, [pc, #52]	; (801616c <USBD_LL_Init+0x94>)
 8016138:	f7ec fa8b 	bl	8002652 <HAL_PCD_Init>
 801613c:	4603      	mov	r3, r0
 801613e:	2b00      	cmp	r3, #0
 8016140:	d001      	beq.n	8016146 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8016142:	f7ea fcb5 	bl	8000ab0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8016146:	2180      	movs	r1, #128	; 0x80
 8016148:	4808      	ldr	r0, [pc, #32]	; (801616c <USBD_LL_Init+0x94>)
 801614a:	f7ed fbe8 	bl	800391e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801614e:	2240      	movs	r2, #64	; 0x40
 8016150:	2100      	movs	r1, #0
 8016152:	4806      	ldr	r0, [pc, #24]	; (801616c <USBD_LL_Init+0x94>)
 8016154:	f7ed fb9c 	bl	8003890 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8016158:	2280      	movs	r2, #128	; 0x80
 801615a:	2101      	movs	r1, #1
 801615c:	4803      	ldr	r0, [pc, #12]	; (801616c <USBD_LL_Init+0x94>)
 801615e:	f7ed fb97 	bl	8003890 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8016162:	2300      	movs	r3, #0
}
 8016164:	4618      	mov	r0, r3
 8016166:	3708      	adds	r7, #8
 8016168:	46bd      	mov	sp, r7
 801616a:	bd80      	pop	{r7, pc}
 801616c:	2000c450 	.word	0x2000c450

08016170 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016170:	b580      	push	{r7, lr}
 8016172:	b084      	sub	sp, #16
 8016174:	af00      	add	r7, sp, #0
 8016176:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016178:	2300      	movs	r3, #0
 801617a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801617c:	2300      	movs	r3, #0
 801617e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8016180:	687b      	ldr	r3, [r7, #4]
 8016182:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016186:	4618      	mov	r0, r3
 8016188:	f7ec fb80 	bl	800288c <HAL_PCD_Start>
 801618c:	4603      	mov	r3, r0
 801618e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016190:	7bfb      	ldrb	r3, [r7, #15]
 8016192:	4618      	mov	r0, r3
 8016194:	f000 f942 	bl	801641c <USBD_Get_USB_Status>
 8016198:	4603      	mov	r3, r0
 801619a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801619c:	7bbb      	ldrb	r3, [r7, #14]
}
 801619e:	4618      	mov	r0, r3
 80161a0:	3710      	adds	r7, #16
 80161a2:	46bd      	mov	sp, r7
 80161a4:	bd80      	pop	{r7, pc}

080161a6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80161a6:	b580      	push	{r7, lr}
 80161a8:	b084      	sub	sp, #16
 80161aa:	af00      	add	r7, sp, #0
 80161ac:	6078      	str	r0, [r7, #4]
 80161ae:	4608      	mov	r0, r1
 80161b0:	4611      	mov	r1, r2
 80161b2:	461a      	mov	r2, r3
 80161b4:	4603      	mov	r3, r0
 80161b6:	70fb      	strb	r3, [r7, #3]
 80161b8:	460b      	mov	r3, r1
 80161ba:	70bb      	strb	r3, [r7, #2]
 80161bc:	4613      	mov	r3, r2
 80161be:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80161c0:	2300      	movs	r3, #0
 80161c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80161c4:	2300      	movs	r3, #0
 80161c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80161c8:	687b      	ldr	r3, [r7, #4]
 80161ca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80161ce:	78bb      	ldrb	r3, [r7, #2]
 80161d0:	883a      	ldrh	r2, [r7, #0]
 80161d2:	78f9      	ldrb	r1, [r7, #3]
 80161d4:	f7ec ff64 	bl	80030a0 <HAL_PCD_EP_Open>
 80161d8:	4603      	mov	r3, r0
 80161da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80161dc:	7bfb      	ldrb	r3, [r7, #15]
 80161de:	4618      	mov	r0, r3
 80161e0:	f000 f91c 	bl	801641c <USBD_Get_USB_Status>
 80161e4:	4603      	mov	r3, r0
 80161e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80161e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80161ea:	4618      	mov	r0, r3
 80161ec:	3710      	adds	r7, #16
 80161ee:	46bd      	mov	sp, r7
 80161f0:	bd80      	pop	{r7, pc}

080161f2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80161f2:	b580      	push	{r7, lr}
 80161f4:	b084      	sub	sp, #16
 80161f6:	af00      	add	r7, sp, #0
 80161f8:	6078      	str	r0, [r7, #4]
 80161fa:	460b      	mov	r3, r1
 80161fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80161fe:	2300      	movs	r3, #0
 8016200:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016202:	2300      	movs	r3, #0
 8016204:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8016206:	687b      	ldr	r3, [r7, #4]
 8016208:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801620c:	78fa      	ldrb	r2, [r7, #3]
 801620e:	4611      	mov	r1, r2
 8016210:	4618      	mov	r0, r3
 8016212:	f7ec ffad 	bl	8003170 <HAL_PCD_EP_Close>
 8016216:	4603      	mov	r3, r0
 8016218:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801621a:	7bfb      	ldrb	r3, [r7, #15]
 801621c:	4618      	mov	r0, r3
 801621e:	f000 f8fd 	bl	801641c <USBD_Get_USB_Status>
 8016222:	4603      	mov	r3, r0
 8016224:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016226:	7bbb      	ldrb	r3, [r7, #14]
}
 8016228:	4618      	mov	r0, r3
 801622a:	3710      	adds	r7, #16
 801622c:	46bd      	mov	sp, r7
 801622e:	bd80      	pop	{r7, pc}

08016230 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016230:	b580      	push	{r7, lr}
 8016232:	b084      	sub	sp, #16
 8016234:	af00      	add	r7, sp, #0
 8016236:	6078      	str	r0, [r7, #4]
 8016238:	460b      	mov	r3, r1
 801623a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801623c:	2300      	movs	r3, #0
 801623e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016240:	2300      	movs	r3, #0
 8016242:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801624a:	78fa      	ldrb	r2, [r7, #3]
 801624c:	4611      	mov	r1, r2
 801624e:	4618      	mov	r0, r3
 8016250:	f7ed f885 	bl	800335e <HAL_PCD_EP_SetStall>
 8016254:	4603      	mov	r3, r0
 8016256:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016258:	7bfb      	ldrb	r3, [r7, #15]
 801625a:	4618      	mov	r0, r3
 801625c:	f000 f8de 	bl	801641c <USBD_Get_USB_Status>
 8016260:	4603      	mov	r3, r0
 8016262:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016264:	7bbb      	ldrb	r3, [r7, #14]
}
 8016266:	4618      	mov	r0, r3
 8016268:	3710      	adds	r7, #16
 801626a:	46bd      	mov	sp, r7
 801626c:	bd80      	pop	{r7, pc}

0801626e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801626e:	b580      	push	{r7, lr}
 8016270:	b084      	sub	sp, #16
 8016272:	af00      	add	r7, sp, #0
 8016274:	6078      	str	r0, [r7, #4]
 8016276:	460b      	mov	r3, r1
 8016278:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801627a:	2300      	movs	r3, #0
 801627c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801627e:	2300      	movs	r3, #0
 8016280:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016282:	687b      	ldr	r3, [r7, #4]
 8016284:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016288:	78fa      	ldrb	r2, [r7, #3]
 801628a:	4611      	mov	r1, r2
 801628c:	4618      	mov	r0, r3
 801628e:	f7ed f8ca 	bl	8003426 <HAL_PCD_EP_ClrStall>
 8016292:	4603      	mov	r3, r0
 8016294:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016296:	7bfb      	ldrb	r3, [r7, #15]
 8016298:	4618      	mov	r0, r3
 801629a:	f000 f8bf 	bl	801641c <USBD_Get_USB_Status>
 801629e:	4603      	mov	r3, r0
 80162a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80162a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80162a4:	4618      	mov	r0, r3
 80162a6:	3710      	adds	r7, #16
 80162a8:	46bd      	mov	sp, r7
 80162aa:	bd80      	pop	{r7, pc}

080162ac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80162ac:	b480      	push	{r7}
 80162ae:	b085      	sub	sp, #20
 80162b0:	af00      	add	r7, sp, #0
 80162b2:	6078      	str	r0, [r7, #4]
 80162b4:	460b      	mov	r3, r1
 80162b6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80162b8:	687b      	ldr	r3, [r7, #4]
 80162ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80162be:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80162c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80162c4:	2b00      	cmp	r3, #0
 80162c6:	da0b      	bge.n	80162e0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80162c8:	78fb      	ldrb	r3, [r7, #3]
 80162ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80162ce:	68f9      	ldr	r1, [r7, #12]
 80162d0:	4613      	mov	r3, r2
 80162d2:	00db      	lsls	r3, r3, #3
 80162d4:	1a9b      	subs	r3, r3, r2
 80162d6:	009b      	lsls	r3, r3, #2
 80162d8:	440b      	add	r3, r1
 80162da:	333e      	adds	r3, #62	; 0x3e
 80162dc:	781b      	ldrb	r3, [r3, #0]
 80162de:	e00b      	b.n	80162f8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80162e0:	78fb      	ldrb	r3, [r7, #3]
 80162e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80162e6:	68f9      	ldr	r1, [r7, #12]
 80162e8:	4613      	mov	r3, r2
 80162ea:	00db      	lsls	r3, r3, #3
 80162ec:	1a9b      	subs	r3, r3, r2
 80162ee:	009b      	lsls	r3, r3, #2
 80162f0:	440b      	add	r3, r1
 80162f2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80162f6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80162f8:	4618      	mov	r0, r3
 80162fa:	3714      	adds	r7, #20
 80162fc:	46bd      	mov	sp, r7
 80162fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016302:	4770      	bx	lr

08016304 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016304:	b580      	push	{r7, lr}
 8016306:	b084      	sub	sp, #16
 8016308:	af00      	add	r7, sp, #0
 801630a:	6078      	str	r0, [r7, #4]
 801630c:	460b      	mov	r3, r1
 801630e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016310:	2300      	movs	r3, #0
 8016312:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016314:	2300      	movs	r3, #0
 8016316:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016318:	687b      	ldr	r3, [r7, #4]
 801631a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801631e:	78fa      	ldrb	r2, [r7, #3]
 8016320:	4611      	mov	r1, r2
 8016322:	4618      	mov	r0, r3
 8016324:	f7ec fe97 	bl	8003056 <HAL_PCD_SetAddress>
 8016328:	4603      	mov	r3, r0
 801632a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801632c:	7bfb      	ldrb	r3, [r7, #15]
 801632e:	4618      	mov	r0, r3
 8016330:	f000 f874 	bl	801641c <USBD_Get_USB_Status>
 8016334:	4603      	mov	r3, r0
 8016336:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016338:	7bbb      	ldrb	r3, [r7, #14]
}
 801633a:	4618      	mov	r0, r3
 801633c:	3710      	adds	r7, #16
 801633e:	46bd      	mov	sp, r7
 8016340:	bd80      	pop	{r7, pc}

08016342 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016342:	b580      	push	{r7, lr}
 8016344:	b086      	sub	sp, #24
 8016346:	af00      	add	r7, sp, #0
 8016348:	60f8      	str	r0, [r7, #12]
 801634a:	607a      	str	r2, [r7, #4]
 801634c:	603b      	str	r3, [r7, #0]
 801634e:	460b      	mov	r3, r1
 8016350:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016352:	2300      	movs	r3, #0
 8016354:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016356:	2300      	movs	r3, #0
 8016358:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801635a:	68fb      	ldr	r3, [r7, #12]
 801635c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016360:	7af9      	ldrb	r1, [r7, #11]
 8016362:	683b      	ldr	r3, [r7, #0]
 8016364:	687a      	ldr	r2, [r7, #4]
 8016366:	f7ec ffb0 	bl	80032ca <HAL_PCD_EP_Transmit>
 801636a:	4603      	mov	r3, r0
 801636c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801636e:	7dfb      	ldrb	r3, [r7, #23]
 8016370:	4618      	mov	r0, r3
 8016372:	f000 f853 	bl	801641c <USBD_Get_USB_Status>
 8016376:	4603      	mov	r3, r0
 8016378:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801637a:	7dbb      	ldrb	r3, [r7, #22]
}
 801637c:	4618      	mov	r0, r3
 801637e:	3718      	adds	r7, #24
 8016380:	46bd      	mov	sp, r7
 8016382:	bd80      	pop	{r7, pc}

08016384 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016384:	b580      	push	{r7, lr}
 8016386:	b086      	sub	sp, #24
 8016388:	af00      	add	r7, sp, #0
 801638a:	60f8      	str	r0, [r7, #12]
 801638c:	607a      	str	r2, [r7, #4]
 801638e:	603b      	str	r3, [r7, #0]
 8016390:	460b      	mov	r3, r1
 8016392:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016394:	2300      	movs	r3, #0
 8016396:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016398:	2300      	movs	r3, #0
 801639a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801639c:	68fb      	ldr	r3, [r7, #12]
 801639e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80163a2:	7af9      	ldrb	r1, [r7, #11]
 80163a4:	683b      	ldr	r3, [r7, #0]
 80163a6:	687a      	ldr	r2, [r7, #4]
 80163a8:	f7ec ff2c 	bl	8003204 <HAL_PCD_EP_Receive>
 80163ac:	4603      	mov	r3, r0
 80163ae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80163b0:	7dfb      	ldrb	r3, [r7, #23]
 80163b2:	4618      	mov	r0, r3
 80163b4:	f000 f832 	bl	801641c <USBD_Get_USB_Status>
 80163b8:	4603      	mov	r3, r0
 80163ba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80163bc:	7dbb      	ldrb	r3, [r7, #22]
}
 80163be:	4618      	mov	r0, r3
 80163c0:	3718      	adds	r7, #24
 80163c2:	46bd      	mov	sp, r7
 80163c4:	bd80      	pop	{r7, pc}

080163c6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80163c6:	b580      	push	{r7, lr}
 80163c8:	b082      	sub	sp, #8
 80163ca:	af00      	add	r7, sp, #0
 80163cc:	6078      	str	r0, [r7, #4]
 80163ce:	460b      	mov	r3, r1
 80163d0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80163d2:	687b      	ldr	r3, [r7, #4]
 80163d4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80163d8:	78fa      	ldrb	r2, [r7, #3]
 80163da:	4611      	mov	r1, r2
 80163dc:	4618      	mov	r0, r3
 80163de:	f7ec ff5c 	bl	800329a <HAL_PCD_EP_GetRxCount>
 80163e2:	4603      	mov	r3, r0
}
 80163e4:	4618      	mov	r0, r3
 80163e6:	3708      	adds	r7, #8
 80163e8:	46bd      	mov	sp, r7
 80163ea:	bd80      	pop	{r7, pc}

080163ec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80163ec:	b480      	push	{r7}
 80163ee:	b083      	sub	sp, #12
 80163f0:	af00      	add	r7, sp, #0
 80163f2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80163f4:	4b03      	ldr	r3, [pc, #12]	; (8016404 <USBD_static_malloc+0x18>)
}
 80163f6:	4618      	mov	r0, r3
 80163f8:	370c      	adds	r7, #12
 80163fa:	46bd      	mov	sp, r7
 80163fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016400:	4770      	bx	lr
 8016402:	bf00      	nop
 8016404:	20004354 	.word	0x20004354

08016408 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8016408:	b480      	push	{r7}
 801640a:	b083      	sub	sp, #12
 801640c:	af00      	add	r7, sp, #0
 801640e:	6078      	str	r0, [r7, #4]

}
 8016410:	bf00      	nop
 8016412:	370c      	adds	r7, #12
 8016414:	46bd      	mov	sp, r7
 8016416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801641a:	4770      	bx	lr

0801641c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801641c:	b480      	push	{r7}
 801641e:	b085      	sub	sp, #20
 8016420:	af00      	add	r7, sp, #0
 8016422:	4603      	mov	r3, r0
 8016424:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016426:	2300      	movs	r3, #0
 8016428:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801642a:	79fb      	ldrb	r3, [r7, #7]
 801642c:	2b03      	cmp	r3, #3
 801642e:	d817      	bhi.n	8016460 <USBD_Get_USB_Status+0x44>
 8016430:	a201      	add	r2, pc, #4	; (adr r2, 8016438 <USBD_Get_USB_Status+0x1c>)
 8016432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016436:	bf00      	nop
 8016438:	08016449 	.word	0x08016449
 801643c:	0801644f 	.word	0x0801644f
 8016440:	08016455 	.word	0x08016455
 8016444:	0801645b 	.word	0x0801645b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016448:	2300      	movs	r3, #0
 801644a:	73fb      	strb	r3, [r7, #15]
    break;
 801644c:	e00b      	b.n	8016466 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801644e:	2303      	movs	r3, #3
 8016450:	73fb      	strb	r3, [r7, #15]
    break;
 8016452:	e008      	b.n	8016466 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016454:	2301      	movs	r3, #1
 8016456:	73fb      	strb	r3, [r7, #15]
    break;
 8016458:	e005      	b.n	8016466 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801645a:	2303      	movs	r3, #3
 801645c:	73fb      	strb	r3, [r7, #15]
    break;
 801645e:	e002      	b.n	8016466 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8016460:	2303      	movs	r3, #3
 8016462:	73fb      	strb	r3, [r7, #15]
    break;
 8016464:	bf00      	nop
  }
  return usb_status;
 8016466:	7bfb      	ldrb	r3, [r7, #15]
}
 8016468:	4618      	mov	r0, r3
 801646a:	3714      	adds	r7, #20
 801646c:	46bd      	mov	sp, r7
 801646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016472:	4770      	bx	lr

08016474 <__libc_init_array>:
 8016474:	b570      	push	{r4, r5, r6, lr}
 8016476:	4d0d      	ldr	r5, [pc, #52]	; (80164ac <__libc_init_array+0x38>)
 8016478:	4c0d      	ldr	r4, [pc, #52]	; (80164b0 <__libc_init_array+0x3c>)
 801647a:	1b64      	subs	r4, r4, r5
 801647c:	10a4      	asrs	r4, r4, #2
 801647e:	2600      	movs	r6, #0
 8016480:	42a6      	cmp	r6, r4
 8016482:	d109      	bne.n	8016498 <__libc_init_array+0x24>
 8016484:	4d0b      	ldr	r5, [pc, #44]	; (80164b4 <__libc_init_array+0x40>)
 8016486:	4c0c      	ldr	r4, [pc, #48]	; (80164b8 <__libc_init_array+0x44>)
 8016488:	f001 f856 	bl	8017538 <_init>
 801648c:	1b64      	subs	r4, r4, r5
 801648e:	10a4      	asrs	r4, r4, #2
 8016490:	2600      	movs	r6, #0
 8016492:	42a6      	cmp	r6, r4
 8016494:	d105      	bne.n	80164a2 <__libc_init_array+0x2e>
 8016496:	bd70      	pop	{r4, r5, r6, pc}
 8016498:	f855 3b04 	ldr.w	r3, [r5], #4
 801649c:	4798      	blx	r3
 801649e:	3601      	adds	r6, #1
 80164a0:	e7ee      	b.n	8016480 <__libc_init_array+0xc>
 80164a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80164a6:	4798      	blx	r3
 80164a8:	3601      	adds	r6, #1
 80164aa:	e7f2      	b.n	8016492 <__libc_init_array+0x1e>
 80164ac:	0801a360 	.word	0x0801a360
 80164b0:	0801a360 	.word	0x0801a360
 80164b4:	0801a360 	.word	0x0801a360
 80164b8:	0801a364 	.word	0x0801a364

080164bc <memcmp>:
 80164bc:	b530      	push	{r4, r5, lr}
 80164be:	3901      	subs	r1, #1
 80164c0:	2400      	movs	r4, #0
 80164c2:	42a2      	cmp	r2, r4
 80164c4:	d101      	bne.n	80164ca <memcmp+0xe>
 80164c6:	2000      	movs	r0, #0
 80164c8:	e005      	b.n	80164d6 <memcmp+0x1a>
 80164ca:	5d03      	ldrb	r3, [r0, r4]
 80164cc:	3401      	adds	r4, #1
 80164ce:	5d0d      	ldrb	r5, [r1, r4]
 80164d0:	42ab      	cmp	r3, r5
 80164d2:	d0f6      	beq.n	80164c2 <memcmp+0x6>
 80164d4:	1b58      	subs	r0, r3, r5
 80164d6:	bd30      	pop	{r4, r5, pc}

080164d8 <memcpy>:
 80164d8:	440a      	add	r2, r1
 80164da:	4291      	cmp	r1, r2
 80164dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80164e0:	d100      	bne.n	80164e4 <memcpy+0xc>
 80164e2:	4770      	bx	lr
 80164e4:	b510      	push	{r4, lr}
 80164e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80164ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80164ee:	4291      	cmp	r1, r2
 80164f0:	d1f9      	bne.n	80164e6 <memcpy+0xe>
 80164f2:	bd10      	pop	{r4, pc}

080164f4 <memset>:
 80164f4:	4402      	add	r2, r0
 80164f6:	4603      	mov	r3, r0
 80164f8:	4293      	cmp	r3, r2
 80164fa:	d100      	bne.n	80164fe <memset+0xa>
 80164fc:	4770      	bx	lr
 80164fe:	f803 1b01 	strb.w	r1, [r3], #1
 8016502:	e7f9      	b.n	80164f8 <memset+0x4>

08016504 <iprintf>:
 8016504:	b40f      	push	{r0, r1, r2, r3}
 8016506:	4b0a      	ldr	r3, [pc, #40]	; (8016530 <iprintf+0x2c>)
 8016508:	b513      	push	{r0, r1, r4, lr}
 801650a:	681c      	ldr	r4, [r3, #0]
 801650c:	b124      	cbz	r4, 8016518 <iprintf+0x14>
 801650e:	69a3      	ldr	r3, [r4, #24]
 8016510:	b913      	cbnz	r3, 8016518 <iprintf+0x14>
 8016512:	4620      	mov	r0, r4
 8016514:	f000 f8c4 	bl	80166a0 <__sinit>
 8016518:	ab05      	add	r3, sp, #20
 801651a:	9a04      	ldr	r2, [sp, #16]
 801651c:	68a1      	ldr	r1, [r4, #8]
 801651e:	9301      	str	r3, [sp, #4]
 8016520:	4620      	mov	r0, r4
 8016522:	f000 fa4b 	bl	80169bc <_vfiprintf_r>
 8016526:	b002      	add	sp, #8
 8016528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801652c:	b004      	add	sp, #16
 801652e:	4770      	bx	lr
 8016530:	20000190 	.word	0x20000190

08016534 <rand>:
 8016534:	4b17      	ldr	r3, [pc, #92]	; (8016594 <rand+0x60>)
 8016536:	b510      	push	{r4, lr}
 8016538:	681c      	ldr	r4, [r3, #0]
 801653a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801653c:	b9b3      	cbnz	r3, 801656c <rand+0x38>
 801653e:	2018      	movs	r0, #24
 8016540:	f000 f960 	bl	8016804 <malloc>
 8016544:	63a0      	str	r0, [r4, #56]	; 0x38
 8016546:	b928      	cbnz	r0, 8016554 <rand+0x20>
 8016548:	4602      	mov	r2, r0
 801654a:	4b13      	ldr	r3, [pc, #76]	; (8016598 <rand+0x64>)
 801654c:	4813      	ldr	r0, [pc, #76]	; (801659c <rand+0x68>)
 801654e:	214e      	movs	r1, #78	; 0x4e
 8016550:	f000 f830 	bl	80165b4 <__assert_func>
 8016554:	4a12      	ldr	r2, [pc, #72]	; (80165a0 <rand+0x6c>)
 8016556:	4b13      	ldr	r3, [pc, #76]	; (80165a4 <rand+0x70>)
 8016558:	e9c0 2300 	strd	r2, r3, [r0]
 801655c:	4b12      	ldr	r3, [pc, #72]	; (80165a8 <rand+0x74>)
 801655e:	6083      	str	r3, [r0, #8]
 8016560:	230b      	movs	r3, #11
 8016562:	8183      	strh	r3, [r0, #12]
 8016564:	2201      	movs	r2, #1
 8016566:	2300      	movs	r3, #0
 8016568:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801656c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801656e:	480f      	ldr	r0, [pc, #60]	; (80165ac <rand+0x78>)
 8016570:	690a      	ldr	r2, [r1, #16]
 8016572:	694b      	ldr	r3, [r1, #20]
 8016574:	4c0e      	ldr	r4, [pc, #56]	; (80165b0 <rand+0x7c>)
 8016576:	4350      	muls	r0, r2
 8016578:	fb04 0003 	mla	r0, r4, r3, r0
 801657c:	fba2 3404 	umull	r3, r4, r2, r4
 8016580:	1c5a      	adds	r2, r3, #1
 8016582:	4404      	add	r4, r0
 8016584:	f144 0000 	adc.w	r0, r4, #0
 8016588:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801658c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8016590:	bd10      	pop	{r4, pc}
 8016592:	bf00      	nop
 8016594:	20000190 	.word	0x20000190
 8016598:	0801a210 	.word	0x0801a210
 801659c:	0801a227 	.word	0x0801a227
 80165a0:	abcd330e 	.word	0xabcd330e
 80165a4:	e66d1234 	.word	0xe66d1234
 80165a8:	0005deec 	.word	0x0005deec
 80165ac:	5851f42d 	.word	0x5851f42d
 80165b0:	4c957f2d 	.word	0x4c957f2d

080165b4 <__assert_func>:
 80165b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80165b6:	4614      	mov	r4, r2
 80165b8:	461a      	mov	r2, r3
 80165ba:	4b09      	ldr	r3, [pc, #36]	; (80165e0 <__assert_func+0x2c>)
 80165bc:	681b      	ldr	r3, [r3, #0]
 80165be:	4605      	mov	r5, r0
 80165c0:	68d8      	ldr	r0, [r3, #12]
 80165c2:	b14c      	cbz	r4, 80165d8 <__assert_func+0x24>
 80165c4:	4b07      	ldr	r3, [pc, #28]	; (80165e4 <__assert_func+0x30>)
 80165c6:	9100      	str	r1, [sp, #0]
 80165c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80165cc:	4906      	ldr	r1, [pc, #24]	; (80165e8 <__assert_func+0x34>)
 80165ce:	462b      	mov	r3, r5
 80165d0:	f000 f8e4 	bl	801679c <fiprintf>
 80165d4:	f000 fddc 	bl	8017190 <abort>
 80165d8:	4b04      	ldr	r3, [pc, #16]	; (80165ec <__assert_func+0x38>)
 80165da:	461c      	mov	r4, r3
 80165dc:	e7f3      	b.n	80165c6 <__assert_func+0x12>
 80165de:	bf00      	nop
 80165e0:	20000190 	.word	0x20000190
 80165e4:	0801a286 	.word	0x0801a286
 80165e8:	0801a293 	.word	0x0801a293
 80165ec:	0801a2c1 	.word	0x0801a2c1

080165f0 <std>:
 80165f0:	2300      	movs	r3, #0
 80165f2:	b510      	push	{r4, lr}
 80165f4:	4604      	mov	r4, r0
 80165f6:	e9c0 3300 	strd	r3, r3, [r0]
 80165fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80165fe:	6083      	str	r3, [r0, #8]
 8016600:	8181      	strh	r1, [r0, #12]
 8016602:	6643      	str	r3, [r0, #100]	; 0x64
 8016604:	81c2      	strh	r2, [r0, #14]
 8016606:	6183      	str	r3, [r0, #24]
 8016608:	4619      	mov	r1, r3
 801660a:	2208      	movs	r2, #8
 801660c:	305c      	adds	r0, #92	; 0x5c
 801660e:	f7ff ff71 	bl	80164f4 <memset>
 8016612:	4b05      	ldr	r3, [pc, #20]	; (8016628 <std+0x38>)
 8016614:	6263      	str	r3, [r4, #36]	; 0x24
 8016616:	4b05      	ldr	r3, [pc, #20]	; (801662c <std+0x3c>)
 8016618:	62a3      	str	r3, [r4, #40]	; 0x28
 801661a:	4b05      	ldr	r3, [pc, #20]	; (8016630 <std+0x40>)
 801661c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801661e:	4b05      	ldr	r3, [pc, #20]	; (8016634 <std+0x44>)
 8016620:	6224      	str	r4, [r4, #32]
 8016622:	6323      	str	r3, [r4, #48]	; 0x30
 8016624:	bd10      	pop	{r4, pc}
 8016626:	bf00      	nop
 8016628:	08016f65 	.word	0x08016f65
 801662c:	08016f87 	.word	0x08016f87
 8016630:	08016fbf 	.word	0x08016fbf
 8016634:	08016fe3 	.word	0x08016fe3

08016638 <_cleanup_r>:
 8016638:	4901      	ldr	r1, [pc, #4]	; (8016640 <_cleanup_r+0x8>)
 801663a:	f000 b8c1 	b.w	80167c0 <_fwalk_reent>
 801663e:	bf00      	nop
 8016640:	080172cd 	.word	0x080172cd

08016644 <__sfmoreglue>:
 8016644:	b570      	push	{r4, r5, r6, lr}
 8016646:	1e4a      	subs	r2, r1, #1
 8016648:	2568      	movs	r5, #104	; 0x68
 801664a:	4355      	muls	r5, r2
 801664c:	460e      	mov	r6, r1
 801664e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016652:	f000 f92f 	bl	80168b4 <_malloc_r>
 8016656:	4604      	mov	r4, r0
 8016658:	b140      	cbz	r0, 801666c <__sfmoreglue+0x28>
 801665a:	2100      	movs	r1, #0
 801665c:	e9c0 1600 	strd	r1, r6, [r0]
 8016660:	300c      	adds	r0, #12
 8016662:	60a0      	str	r0, [r4, #8]
 8016664:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016668:	f7ff ff44 	bl	80164f4 <memset>
 801666c:	4620      	mov	r0, r4
 801666e:	bd70      	pop	{r4, r5, r6, pc}

08016670 <__sfp_lock_acquire>:
 8016670:	4801      	ldr	r0, [pc, #4]	; (8016678 <__sfp_lock_acquire+0x8>)
 8016672:	f000 b8c5 	b.w	8016800 <__retarget_lock_acquire_recursive>
 8016676:	bf00      	nop
 8016678:	2000c860 	.word	0x2000c860

0801667c <__sfp_lock_release>:
 801667c:	4801      	ldr	r0, [pc, #4]	; (8016684 <__sfp_lock_release+0x8>)
 801667e:	f000 b8c0 	b.w	8016802 <__retarget_lock_release_recursive>
 8016682:	bf00      	nop
 8016684:	2000c860 	.word	0x2000c860

08016688 <__sinit_lock_acquire>:
 8016688:	4801      	ldr	r0, [pc, #4]	; (8016690 <__sinit_lock_acquire+0x8>)
 801668a:	f000 b8b9 	b.w	8016800 <__retarget_lock_acquire_recursive>
 801668e:	bf00      	nop
 8016690:	2000c85b 	.word	0x2000c85b

08016694 <__sinit_lock_release>:
 8016694:	4801      	ldr	r0, [pc, #4]	; (801669c <__sinit_lock_release+0x8>)
 8016696:	f000 b8b4 	b.w	8016802 <__retarget_lock_release_recursive>
 801669a:	bf00      	nop
 801669c:	2000c85b 	.word	0x2000c85b

080166a0 <__sinit>:
 80166a0:	b510      	push	{r4, lr}
 80166a2:	4604      	mov	r4, r0
 80166a4:	f7ff fff0 	bl	8016688 <__sinit_lock_acquire>
 80166a8:	69a3      	ldr	r3, [r4, #24]
 80166aa:	b11b      	cbz	r3, 80166b4 <__sinit+0x14>
 80166ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80166b0:	f7ff bff0 	b.w	8016694 <__sinit_lock_release>
 80166b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80166b8:	6523      	str	r3, [r4, #80]	; 0x50
 80166ba:	4b13      	ldr	r3, [pc, #76]	; (8016708 <__sinit+0x68>)
 80166bc:	4a13      	ldr	r2, [pc, #76]	; (801670c <__sinit+0x6c>)
 80166be:	681b      	ldr	r3, [r3, #0]
 80166c0:	62a2      	str	r2, [r4, #40]	; 0x28
 80166c2:	42a3      	cmp	r3, r4
 80166c4:	bf04      	itt	eq
 80166c6:	2301      	moveq	r3, #1
 80166c8:	61a3      	streq	r3, [r4, #24]
 80166ca:	4620      	mov	r0, r4
 80166cc:	f000 f820 	bl	8016710 <__sfp>
 80166d0:	6060      	str	r0, [r4, #4]
 80166d2:	4620      	mov	r0, r4
 80166d4:	f000 f81c 	bl	8016710 <__sfp>
 80166d8:	60a0      	str	r0, [r4, #8]
 80166da:	4620      	mov	r0, r4
 80166dc:	f000 f818 	bl	8016710 <__sfp>
 80166e0:	2200      	movs	r2, #0
 80166e2:	60e0      	str	r0, [r4, #12]
 80166e4:	2104      	movs	r1, #4
 80166e6:	6860      	ldr	r0, [r4, #4]
 80166e8:	f7ff ff82 	bl	80165f0 <std>
 80166ec:	68a0      	ldr	r0, [r4, #8]
 80166ee:	2201      	movs	r2, #1
 80166f0:	2109      	movs	r1, #9
 80166f2:	f7ff ff7d 	bl	80165f0 <std>
 80166f6:	68e0      	ldr	r0, [r4, #12]
 80166f8:	2202      	movs	r2, #2
 80166fa:	2112      	movs	r1, #18
 80166fc:	f7ff ff78 	bl	80165f0 <std>
 8016700:	2301      	movs	r3, #1
 8016702:	61a3      	str	r3, [r4, #24]
 8016704:	e7d2      	b.n	80166ac <__sinit+0xc>
 8016706:	bf00      	nop
 8016708:	0801a20c 	.word	0x0801a20c
 801670c:	08016639 	.word	0x08016639

08016710 <__sfp>:
 8016710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016712:	4607      	mov	r7, r0
 8016714:	f7ff ffac 	bl	8016670 <__sfp_lock_acquire>
 8016718:	4b1e      	ldr	r3, [pc, #120]	; (8016794 <__sfp+0x84>)
 801671a:	681e      	ldr	r6, [r3, #0]
 801671c:	69b3      	ldr	r3, [r6, #24]
 801671e:	b913      	cbnz	r3, 8016726 <__sfp+0x16>
 8016720:	4630      	mov	r0, r6
 8016722:	f7ff ffbd 	bl	80166a0 <__sinit>
 8016726:	3648      	adds	r6, #72	; 0x48
 8016728:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801672c:	3b01      	subs	r3, #1
 801672e:	d503      	bpl.n	8016738 <__sfp+0x28>
 8016730:	6833      	ldr	r3, [r6, #0]
 8016732:	b30b      	cbz	r3, 8016778 <__sfp+0x68>
 8016734:	6836      	ldr	r6, [r6, #0]
 8016736:	e7f7      	b.n	8016728 <__sfp+0x18>
 8016738:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801673c:	b9d5      	cbnz	r5, 8016774 <__sfp+0x64>
 801673e:	4b16      	ldr	r3, [pc, #88]	; (8016798 <__sfp+0x88>)
 8016740:	60e3      	str	r3, [r4, #12]
 8016742:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016746:	6665      	str	r5, [r4, #100]	; 0x64
 8016748:	f000 f859 	bl	80167fe <__retarget_lock_init_recursive>
 801674c:	f7ff ff96 	bl	801667c <__sfp_lock_release>
 8016750:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016754:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016758:	6025      	str	r5, [r4, #0]
 801675a:	61a5      	str	r5, [r4, #24]
 801675c:	2208      	movs	r2, #8
 801675e:	4629      	mov	r1, r5
 8016760:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016764:	f7ff fec6 	bl	80164f4 <memset>
 8016768:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801676c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016770:	4620      	mov	r0, r4
 8016772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016774:	3468      	adds	r4, #104	; 0x68
 8016776:	e7d9      	b.n	801672c <__sfp+0x1c>
 8016778:	2104      	movs	r1, #4
 801677a:	4638      	mov	r0, r7
 801677c:	f7ff ff62 	bl	8016644 <__sfmoreglue>
 8016780:	4604      	mov	r4, r0
 8016782:	6030      	str	r0, [r6, #0]
 8016784:	2800      	cmp	r0, #0
 8016786:	d1d5      	bne.n	8016734 <__sfp+0x24>
 8016788:	f7ff ff78 	bl	801667c <__sfp_lock_release>
 801678c:	230c      	movs	r3, #12
 801678e:	603b      	str	r3, [r7, #0]
 8016790:	e7ee      	b.n	8016770 <__sfp+0x60>
 8016792:	bf00      	nop
 8016794:	0801a20c 	.word	0x0801a20c
 8016798:	ffff0001 	.word	0xffff0001

0801679c <fiprintf>:
 801679c:	b40e      	push	{r1, r2, r3}
 801679e:	b503      	push	{r0, r1, lr}
 80167a0:	4601      	mov	r1, r0
 80167a2:	ab03      	add	r3, sp, #12
 80167a4:	4805      	ldr	r0, [pc, #20]	; (80167bc <fiprintf+0x20>)
 80167a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80167aa:	6800      	ldr	r0, [r0, #0]
 80167ac:	9301      	str	r3, [sp, #4]
 80167ae:	f000 f905 	bl	80169bc <_vfiprintf_r>
 80167b2:	b002      	add	sp, #8
 80167b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80167b8:	b003      	add	sp, #12
 80167ba:	4770      	bx	lr
 80167bc:	20000190 	.word	0x20000190

080167c0 <_fwalk_reent>:
 80167c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80167c4:	4606      	mov	r6, r0
 80167c6:	4688      	mov	r8, r1
 80167c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80167cc:	2700      	movs	r7, #0
 80167ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80167d2:	f1b9 0901 	subs.w	r9, r9, #1
 80167d6:	d505      	bpl.n	80167e4 <_fwalk_reent+0x24>
 80167d8:	6824      	ldr	r4, [r4, #0]
 80167da:	2c00      	cmp	r4, #0
 80167dc:	d1f7      	bne.n	80167ce <_fwalk_reent+0xe>
 80167de:	4638      	mov	r0, r7
 80167e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80167e4:	89ab      	ldrh	r3, [r5, #12]
 80167e6:	2b01      	cmp	r3, #1
 80167e8:	d907      	bls.n	80167fa <_fwalk_reent+0x3a>
 80167ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80167ee:	3301      	adds	r3, #1
 80167f0:	d003      	beq.n	80167fa <_fwalk_reent+0x3a>
 80167f2:	4629      	mov	r1, r5
 80167f4:	4630      	mov	r0, r6
 80167f6:	47c0      	blx	r8
 80167f8:	4307      	orrs	r7, r0
 80167fa:	3568      	adds	r5, #104	; 0x68
 80167fc:	e7e9      	b.n	80167d2 <_fwalk_reent+0x12>

080167fe <__retarget_lock_init_recursive>:
 80167fe:	4770      	bx	lr

08016800 <__retarget_lock_acquire_recursive>:
 8016800:	4770      	bx	lr

08016802 <__retarget_lock_release_recursive>:
 8016802:	4770      	bx	lr

08016804 <malloc>:
 8016804:	4b02      	ldr	r3, [pc, #8]	; (8016810 <malloc+0xc>)
 8016806:	4601      	mov	r1, r0
 8016808:	6818      	ldr	r0, [r3, #0]
 801680a:	f000 b853 	b.w	80168b4 <_malloc_r>
 801680e:	bf00      	nop
 8016810:	20000190 	.word	0x20000190

08016814 <_free_r>:
 8016814:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016816:	2900      	cmp	r1, #0
 8016818:	d048      	beq.n	80168ac <_free_r+0x98>
 801681a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801681e:	9001      	str	r0, [sp, #4]
 8016820:	2b00      	cmp	r3, #0
 8016822:	f1a1 0404 	sub.w	r4, r1, #4
 8016826:	bfb8      	it	lt
 8016828:	18e4      	addlt	r4, r4, r3
 801682a:	f000 fe01 	bl	8017430 <__malloc_lock>
 801682e:	4a20      	ldr	r2, [pc, #128]	; (80168b0 <_free_r+0x9c>)
 8016830:	9801      	ldr	r0, [sp, #4]
 8016832:	6813      	ldr	r3, [r2, #0]
 8016834:	4615      	mov	r5, r2
 8016836:	b933      	cbnz	r3, 8016846 <_free_r+0x32>
 8016838:	6063      	str	r3, [r4, #4]
 801683a:	6014      	str	r4, [r2, #0]
 801683c:	b003      	add	sp, #12
 801683e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016842:	f000 bdfb 	b.w	801743c <__malloc_unlock>
 8016846:	42a3      	cmp	r3, r4
 8016848:	d90b      	bls.n	8016862 <_free_r+0x4e>
 801684a:	6821      	ldr	r1, [r4, #0]
 801684c:	1862      	adds	r2, r4, r1
 801684e:	4293      	cmp	r3, r2
 8016850:	bf04      	itt	eq
 8016852:	681a      	ldreq	r2, [r3, #0]
 8016854:	685b      	ldreq	r3, [r3, #4]
 8016856:	6063      	str	r3, [r4, #4]
 8016858:	bf04      	itt	eq
 801685a:	1852      	addeq	r2, r2, r1
 801685c:	6022      	streq	r2, [r4, #0]
 801685e:	602c      	str	r4, [r5, #0]
 8016860:	e7ec      	b.n	801683c <_free_r+0x28>
 8016862:	461a      	mov	r2, r3
 8016864:	685b      	ldr	r3, [r3, #4]
 8016866:	b10b      	cbz	r3, 801686c <_free_r+0x58>
 8016868:	42a3      	cmp	r3, r4
 801686a:	d9fa      	bls.n	8016862 <_free_r+0x4e>
 801686c:	6811      	ldr	r1, [r2, #0]
 801686e:	1855      	adds	r5, r2, r1
 8016870:	42a5      	cmp	r5, r4
 8016872:	d10b      	bne.n	801688c <_free_r+0x78>
 8016874:	6824      	ldr	r4, [r4, #0]
 8016876:	4421      	add	r1, r4
 8016878:	1854      	adds	r4, r2, r1
 801687a:	42a3      	cmp	r3, r4
 801687c:	6011      	str	r1, [r2, #0]
 801687e:	d1dd      	bne.n	801683c <_free_r+0x28>
 8016880:	681c      	ldr	r4, [r3, #0]
 8016882:	685b      	ldr	r3, [r3, #4]
 8016884:	6053      	str	r3, [r2, #4]
 8016886:	4421      	add	r1, r4
 8016888:	6011      	str	r1, [r2, #0]
 801688a:	e7d7      	b.n	801683c <_free_r+0x28>
 801688c:	d902      	bls.n	8016894 <_free_r+0x80>
 801688e:	230c      	movs	r3, #12
 8016890:	6003      	str	r3, [r0, #0]
 8016892:	e7d3      	b.n	801683c <_free_r+0x28>
 8016894:	6825      	ldr	r5, [r4, #0]
 8016896:	1961      	adds	r1, r4, r5
 8016898:	428b      	cmp	r3, r1
 801689a:	bf04      	itt	eq
 801689c:	6819      	ldreq	r1, [r3, #0]
 801689e:	685b      	ldreq	r3, [r3, #4]
 80168a0:	6063      	str	r3, [r4, #4]
 80168a2:	bf04      	itt	eq
 80168a4:	1949      	addeq	r1, r1, r5
 80168a6:	6021      	streq	r1, [r4, #0]
 80168a8:	6054      	str	r4, [r2, #4]
 80168aa:	e7c7      	b.n	801683c <_free_r+0x28>
 80168ac:	b003      	add	sp, #12
 80168ae:	bd30      	pop	{r4, r5, pc}
 80168b0:	20004574 	.word	0x20004574

080168b4 <_malloc_r>:
 80168b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80168b6:	1ccd      	adds	r5, r1, #3
 80168b8:	f025 0503 	bic.w	r5, r5, #3
 80168bc:	3508      	adds	r5, #8
 80168be:	2d0c      	cmp	r5, #12
 80168c0:	bf38      	it	cc
 80168c2:	250c      	movcc	r5, #12
 80168c4:	2d00      	cmp	r5, #0
 80168c6:	4606      	mov	r6, r0
 80168c8:	db01      	blt.n	80168ce <_malloc_r+0x1a>
 80168ca:	42a9      	cmp	r1, r5
 80168cc:	d903      	bls.n	80168d6 <_malloc_r+0x22>
 80168ce:	230c      	movs	r3, #12
 80168d0:	6033      	str	r3, [r6, #0]
 80168d2:	2000      	movs	r0, #0
 80168d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80168d6:	f000 fdab 	bl	8017430 <__malloc_lock>
 80168da:	4921      	ldr	r1, [pc, #132]	; (8016960 <_malloc_r+0xac>)
 80168dc:	680a      	ldr	r2, [r1, #0]
 80168de:	4614      	mov	r4, r2
 80168e0:	b99c      	cbnz	r4, 801690a <_malloc_r+0x56>
 80168e2:	4f20      	ldr	r7, [pc, #128]	; (8016964 <_malloc_r+0xb0>)
 80168e4:	683b      	ldr	r3, [r7, #0]
 80168e6:	b923      	cbnz	r3, 80168f2 <_malloc_r+0x3e>
 80168e8:	4621      	mov	r1, r4
 80168ea:	4630      	mov	r0, r6
 80168ec:	f000 fb2a 	bl	8016f44 <_sbrk_r>
 80168f0:	6038      	str	r0, [r7, #0]
 80168f2:	4629      	mov	r1, r5
 80168f4:	4630      	mov	r0, r6
 80168f6:	f000 fb25 	bl	8016f44 <_sbrk_r>
 80168fa:	1c43      	adds	r3, r0, #1
 80168fc:	d123      	bne.n	8016946 <_malloc_r+0x92>
 80168fe:	230c      	movs	r3, #12
 8016900:	6033      	str	r3, [r6, #0]
 8016902:	4630      	mov	r0, r6
 8016904:	f000 fd9a 	bl	801743c <__malloc_unlock>
 8016908:	e7e3      	b.n	80168d2 <_malloc_r+0x1e>
 801690a:	6823      	ldr	r3, [r4, #0]
 801690c:	1b5b      	subs	r3, r3, r5
 801690e:	d417      	bmi.n	8016940 <_malloc_r+0x8c>
 8016910:	2b0b      	cmp	r3, #11
 8016912:	d903      	bls.n	801691c <_malloc_r+0x68>
 8016914:	6023      	str	r3, [r4, #0]
 8016916:	441c      	add	r4, r3
 8016918:	6025      	str	r5, [r4, #0]
 801691a:	e004      	b.n	8016926 <_malloc_r+0x72>
 801691c:	6863      	ldr	r3, [r4, #4]
 801691e:	42a2      	cmp	r2, r4
 8016920:	bf0c      	ite	eq
 8016922:	600b      	streq	r3, [r1, #0]
 8016924:	6053      	strne	r3, [r2, #4]
 8016926:	4630      	mov	r0, r6
 8016928:	f000 fd88 	bl	801743c <__malloc_unlock>
 801692c:	f104 000b 	add.w	r0, r4, #11
 8016930:	1d23      	adds	r3, r4, #4
 8016932:	f020 0007 	bic.w	r0, r0, #7
 8016936:	1ac2      	subs	r2, r0, r3
 8016938:	d0cc      	beq.n	80168d4 <_malloc_r+0x20>
 801693a:	1a1b      	subs	r3, r3, r0
 801693c:	50a3      	str	r3, [r4, r2]
 801693e:	e7c9      	b.n	80168d4 <_malloc_r+0x20>
 8016940:	4622      	mov	r2, r4
 8016942:	6864      	ldr	r4, [r4, #4]
 8016944:	e7cc      	b.n	80168e0 <_malloc_r+0x2c>
 8016946:	1cc4      	adds	r4, r0, #3
 8016948:	f024 0403 	bic.w	r4, r4, #3
 801694c:	42a0      	cmp	r0, r4
 801694e:	d0e3      	beq.n	8016918 <_malloc_r+0x64>
 8016950:	1a21      	subs	r1, r4, r0
 8016952:	4630      	mov	r0, r6
 8016954:	f000 faf6 	bl	8016f44 <_sbrk_r>
 8016958:	3001      	adds	r0, #1
 801695a:	d1dd      	bne.n	8016918 <_malloc_r+0x64>
 801695c:	e7cf      	b.n	80168fe <_malloc_r+0x4a>
 801695e:	bf00      	nop
 8016960:	20004574 	.word	0x20004574
 8016964:	20004578 	.word	0x20004578

08016968 <__sfputc_r>:
 8016968:	6893      	ldr	r3, [r2, #8]
 801696a:	3b01      	subs	r3, #1
 801696c:	2b00      	cmp	r3, #0
 801696e:	b410      	push	{r4}
 8016970:	6093      	str	r3, [r2, #8]
 8016972:	da08      	bge.n	8016986 <__sfputc_r+0x1e>
 8016974:	6994      	ldr	r4, [r2, #24]
 8016976:	42a3      	cmp	r3, r4
 8016978:	db01      	blt.n	801697e <__sfputc_r+0x16>
 801697a:	290a      	cmp	r1, #10
 801697c:	d103      	bne.n	8016986 <__sfputc_r+0x1e>
 801697e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016982:	f000 bb33 	b.w	8016fec <__swbuf_r>
 8016986:	6813      	ldr	r3, [r2, #0]
 8016988:	1c58      	adds	r0, r3, #1
 801698a:	6010      	str	r0, [r2, #0]
 801698c:	7019      	strb	r1, [r3, #0]
 801698e:	4608      	mov	r0, r1
 8016990:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016994:	4770      	bx	lr

08016996 <__sfputs_r>:
 8016996:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016998:	4606      	mov	r6, r0
 801699a:	460f      	mov	r7, r1
 801699c:	4614      	mov	r4, r2
 801699e:	18d5      	adds	r5, r2, r3
 80169a0:	42ac      	cmp	r4, r5
 80169a2:	d101      	bne.n	80169a8 <__sfputs_r+0x12>
 80169a4:	2000      	movs	r0, #0
 80169a6:	e007      	b.n	80169b8 <__sfputs_r+0x22>
 80169a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80169ac:	463a      	mov	r2, r7
 80169ae:	4630      	mov	r0, r6
 80169b0:	f7ff ffda 	bl	8016968 <__sfputc_r>
 80169b4:	1c43      	adds	r3, r0, #1
 80169b6:	d1f3      	bne.n	80169a0 <__sfputs_r+0xa>
 80169b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080169bc <_vfiprintf_r>:
 80169bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169c0:	460d      	mov	r5, r1
 80169c2:	b09d      	sub	sp, #116	; 0x74
 80169c4:	4614      	mov	r4, r2
 80169c6:	4698      	mov	r8, r3
 80169c8:	4606      	mov	r6, r0
 80169ca:	b118      	cbz	r0, 80169d4 <_vfiprintf_r+0x18>
 80169cc:	6983      	ldr	r3, [r0, #24]
 80169ce:	b90b      	cbnz	r3, 80169d4 <_vfiprintf_r+0x18>
 80169d0:	f7ff fe66 	bl	80166a0 <__sinit>
 80169d4:	4b89      	ldr	r3, [pc, #548]	; (8016bfc <_vfiprintf_r+0x240>)
 80169d6:	429d      	cmp	r5, r3
 80169d8:	d11b      	bne.n	8016a12 <_vfiprintf_r+0x56>
 80169da:	6875      	ldr	r5, [r6, #4]
 80169dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80169de:	07d9      	lsls	r1, r3, #31
 80169e0:	d405      	bmi.n	80169ee <_vfiprintf_r+0x32>
 80169e2:	89ab      	ldrh	r3, [r5, #12]
 80169e4:	059a      	lsls	r2, r3, #22
 80169e6:	d402      	bmi.n	80169ee <_vfiprintf_r+0x32>
 80169e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80169ea:	f7ff ff09 	bl	8016800 <__retarget_lock_acquire_recursive>
 80169ee:	89ab      	ldrh	r3, [r5, #12]
 80169f0:	071b      	lsls	r3, r3, #28
 80169f2:	d501      	bpl.n	80169f8 <_vfiprintf_r+0x3c>
 80169f4:	692b      	ldr	r3, [r5, #16]
 80169f6:	b9eb      	cbnz	r3, 8016a34 <_vfiprintf_r+0x78>
 80169f8:	4629      	mov	r1, r5
 80169fa:	4630      	mov	r0, r6
 80169fc:	f000 fb5a 	bl	80170b4 <__swsetup_r>
 8016a00:	b1c0      	cbz	r0, 8016a34 <_vfiprintf_r+0x78>
 8016a02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016a04:	07dc      	lsls	r4, r3, #31
 8016a06:	d50e      	bpl.n	8016a26 <_vfiprintf_r+0x6a>
 8016a08:	f04f 30ff 	mov.w	r0, #4294967295
 8016a0c:	b01d      	add	sp, #116	; 0x74
 8016a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a12:	4b7b      	ldr	r3, [pc, #492]	; (8016c00 <_vfiprintf_r+0x244>)
 8016a14:	429d      	cmp	r5, r3
 8016a16:	d101      	bne.n	8016a1c <_vfiprintf_r+0x60>
 8016a18:	68b5      	ldr	r5, [r6, #8]
 8016a1a:	e7df      	b.n	80169dc <_vfiprintf_r+0x20>
 8016a1c:	4b79      	ldr	r3, [pc, #484]	; (8016c04 <_vfiprintf_r+0x248>)
 8016a1e:	429d      	cmp	r5, r3
 8016a20:	bf08      	it	eq
 8016a22:	68f5      	ldreq	r5, [r6, #12]
 8016a24:	e7da      	b.n	80169dc <_vfiprintf_r+0x20>
 8016a26:	89ab      	ldrh	r3, [r5, #12]
 8016a28:	0598      	lsls	r0, r3, #22
 8016a2a:	d4ed      	bmi.n	8016a08 <_vfiprintf_r+0x4c>
 8016a2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016a2e:	f7ff fee8 	bl	8016802 <__retarget_lock_release_recursive>
 8016a32:	e7e9      	b.n	8016a08 <_vfiprintf_r+0x4c>
 8016a34:	2300      	movs	r3, #0
 8016a36:	9309      	str	r3, [sp, #36]	; 0x24
 8016a38:	2320      	movs	r3, #32
 8016a3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016a3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8016a42:	2330      	movs	r3, #48	; 0x30
 8016a44:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8016c08 <_vfiprintf_r+0x24c>
 8016a48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016a4c:	f04f 0901 	mov.w	r9, #1
 8016a50:	4623      	mov	r3, r4
 8016a52:	469a      	mov	sl, r3
 8016a54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016a58:	b10a      	cbz	r2, 8016a5e <_vfiprintf_r+0xa2>
 8016a5a:	2a25      	cmp	r2, #37	; 0x25
 8016a5c:	d1f9      	bne.n	8016a52 <_vfiprintf_r+0x96>
 8016a5e:	ebba 0b04 	subs.w	fp, sl, r4
 8016a62:	d00b      	beq.n	8016a7c <_vfiprintf_r+0xc0>
 8016a64:	465b      	mov	r3, fp
 8016a66:	4622      	mov	r2, r4
 8016a68:	4629      	mov	r1, r5
 8016a6a:	4630      	mov	r0, r6
 8016a6c:	f7ff ff93 	bl	8016996 <__sfputs_r>
 8016a70:	3001      	adds	r0, #1
 8016a72:	f000 80aa 	beq.w	8016bca <_vfiprintf_r+0x20e>
 8016a76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016a78:	445a      	add	r2, fp
 8016a7a:	9209      	str	r2, [sp, #36]	; 0x24
 8016a7c:	f89a 3000 	ldrb.w	r3, [sl]
 8016a80:	2b00      	cmp	r3, #0
 8016a82:	f000 80a2 	beq.w	8016bca <_vfiprintf_r+0x20e>
 8016a86:	2300      	movs	r3, #0
 8016a88:	f04f 32ff 	mov.w	r2, #4294967295
 8016a8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016a90:	f10a 0a01 	add.w	sl, sl, #1
 8016a94:	9304      	str	r3, [sp, #16]
 8016a96:	9307      	str	r3, [sp, #28]
 8016a98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016a9c:	931a      	str	r3, [sp, #104]	; 0x68
 8016a9e:	4654      	mov	r4, sl
 8016aa0:	2205      	movs	r2, #5
 8016aa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016aa6:	4858      	ldr	r0, [pc, #352]	; (8016c08 <_vfiprintf_r+0x24c>)
 8016aa8:	f7e9 fb92 	bl	80001d0 <memchr>
 8016aac:	9a04      	ldr	r2, [sp, #16]
 8016aae:	b9d8      	cbnz	r0, 8016ae8 <_vfiprintf_r+0x12c>
 8016ab0:	06d1      	lsls	r1, r2, #27
 8016ab2:	bf44      	itt	mi
 8016ab4:	2320      	movmi	r3, #32
 8016ab6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016aba:	0713      	lsls	r3, r2, #28
 8016abc:	bf44      	itt	mi
 8016abe:	232b      	movmi	r3, #43	; 0x2b
 8016ac0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016ac4:	f89a 3000 	ldrb.w	r3, [sl]
 8016ac8:	2b2a      	cmp	r3, #42	; 0x2a
 8016aca:	d015      	beq.n	8016af8 <_vfiprintf_r+0x13c>
 8016acc:	9a07      	ldr	r2, [sp, #28]
 8016ace:	4654      	mov	r4, sl
 8016ad0:	2000      	movs	r0, #0
 8016ad2:	f04f 0c0a 	mov.w	ip, #10
 8016ad6:	4621      	mov	r1, r4
 8016ad8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016adc:	3b30      	subs	r3, #48	; 0x30
 8016ade:	2b09      	cmp	r3, #9
 8016ae0:	d94e      	bls.n	8016b80 <_vfiprintf_r+0x1c4>
 8016ae2:	b1b0      	cbz	r0, 8016b12 <_vfiprintf_r+0x156>
 8016ae4:	9207      	str	r2, [sp, #28]
 8016ae6:	e014      	b.n	8016b12 <_vfiprintf_r+0x156>
 8016ae8:	eba0 0308 	sub.w	r3, r0, r8
 8016aec:	fa09 f303 	lsl.w	r3, r9, r3
 8016af0:	4313      	orrs	r3, r2
 8016af2:	9304      	str	r3, [sp, #16]
 8016af4:	46a2      	mov	sl, r4
 8016af6:	e7d2      	b.n	8016a9e <_vfiprintf_r+0xe2>
 8016af8:	9b03      	ldr	r3, [sp, #12]
 8016afa:	1d19      	adds	r1, r3, #4
 8016afc:	681b      	ldr	r3, [r3, #0]
 8016afe:	9103      	str	r1, [sp, #12]
 8016b00:	2b00      	cmp	r3, #0
 8016b02:	bfbb      	ittet	lt
 8016b04:	425b      	neglt	r3, r3
 8016b06:	f042 0202 	orrlt.w	r2, r2, #2
 8016b0a:	9307      	strge	r3, [sp, #28]
 8016b0c:	9307      	strlt	r3, [sp, #28]
 8016b0e:	bfb8      	it	lt
 8016b10:	9204      	strlt	r2, [sp, #16]
 8016b12:	7823      	ldrb	r3, [r4, #0]
 8016b14:	2b2e      	cmp	r3, #46	; 0x2e
 8016b16:	d10c      	bne.n	8016b32 <_vfiprintf_r+0x176>
 8016b18:	7863      	ldrb	r3, [r4, #1]
 8016b1a:	2b2a      	cmp	r3, #42	; 0x2a
 8016b1c:	d135      	bne.n	8016b8a <_vfiprintf_r+0x1ce>
 8016b1e:	9b03      	ldr	r3, [sp, #12]
 8016b20:	1d1a      	adds	r2, r3, #4
 8016b22:	681b      	ldr	r3, [r3, #0]
 8016b24:	9203      	str	r2, [sp, #12]
 8016b26:	2b00      	cmp	r3, #0
 8016b28:	bfb8      	it	lt
 8016b2a:	f04f 33ff 	movlt.w	r3, #4294967295
 8016b2e:	3402      	adds	r4, #2
 8016b30:	9305      	str	r3, [sp, #20]
 8016b32:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8016c18 <_vfiprintf_r+0x25c>
 8016b36:	7821      	ldrb	r1, [r4, #0]
 8016b38:	2203      	movs	r2, #3
 8016b3a:	4650      	mov	r0, sl
 8016b3c:	f7e9 fb48 	bl	80001d0 <memchr>
 8016b40:	b140      	cbz	r0, 8016b54 <_vfiprintf_r+0x198>
 8016b42:	2340      	movs	r3, #64	; 0x40
 8016b44:	eba0 000a 	sub.w	r0, r0, sl
 8016b48:	fa03 f000 	lsl.w	r0, r3, r0
 8016b4c:	9b04      	ldr	r3, [sp, #16]
 8016b4e:	4303      	orrs	r3, r0
 8016b50:	3401      	adds	r4, #1
 8016b52:	9304      	str	r3, [sp, #16]
 8016b54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016b58:	482c      	ldr	r0, [pc, #176]	; (8016c0c <_vfiprintf_r+0x250>)
 8016b5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016b5e:	2206      	movs	r2, #6
 8016b60:	f7e9 fb36 	bl	80001d0 <memchr>
 8016b64:	2800      	cmp	r0, #0
 8016b66:	d03f      	beq.n	8016be8 <_vfiprintf_r+0x22c>
 8016b68:	4b29      	ldr	r3, [pc, #164]	; (8016c10 <_vfiprintf_r+0x254>)
 8016b6a:	bb1b      	cbnz	r3, 8016bb4 <_vfiprintf_r+0x1f8>
 8016b6c:	9b03      	ldr	r3, [sp, #12]
 8016b6e:	3307      	adds	r3, #7
 8016b70:	f023 0307 	bic.w	r3, r3, #7
 8016b74:	3308      	adds	r3, #8
 8016b76:	9303      	str	r3, [sp, #12]
 8016b78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016b7a:	443b      	add	r3, r7
 8016b7c:	9309      	str	r3, [sp, #36]	; 0x24
 8016b7e:	e767      	b.n	8016a50 <_vfiprintf_r+0x94>
 8016b80:	fb0c 3202 	mla	r2, ip, r2, r3
 8016b84:	460c      	mov	r4, r1
 8016b86:	2001      	movs	r0, #1
 8016b88:	e7a5      	b.n	8016ad6 <_vfiprintf_r+0x11a>
 8016b8a:	2300      	movs	r3, #0
 8016b8c:	3401      	adds	r4, #1
 8016b8e:	9305      	str	r3, [sp, #20]
 8016b90:	4619      	mov	r1, r3
 8016b92:	f04f 0c0a 	mov.w	ip, #10
 8016b96:	4620      	mov	r0, r4
 8016b98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016b9c:	3a30      	subs	r2, #48	; 0x30
 8016b9e:	2a09      	cmp	r2, #9
 8016ba0:	d903      	bls.n	8016baa <_vfiprintf_r+0x1ee>
 8016ba2:	2b00      	cmp	r3, #0
 8016ba4:	d0c5      	beq.n	8016b32 <_vfiprintf_r+0x176>
 8016ba6:	9105      	str	r1, [sp, #20]
 8016ba8:	e7c3      	b.n	8016b32 <_vfiprintf_r+0x176>
 8016baa:	fb0c 2101 	mla	r1, ip, r1, r2
 8016bae:	4604      	mov	r4, r0
 8016bb0:	2301      	movs	r3, #1
 8016bb2:	e7f0      	b.n	8016b96 <_vfiprintf_r+0x1da>
 8016bb4:	ab03      	add	r3, sp, #12
 8016bb6:	9300      	str	r3, [sp, #0]
 8016bb8:	462a      	mov	r2, r5
 8016bba:	4b16      	ldr	r3, [pc, #88]	; (8016c14 <_vfiprintf_r+0x258>)
 8016bbc:	a904      	add	r1, sp, #16
 8016bbe:	4630      	mov	r0, r6
 8016bc0:	f3af 8000 	nop.w
 8016bc4:	4607      	mov	r7, r0
 8016bc6:	1c78      	adds	r0, r7, #1
 8016bc8:	d1d6      	bne.n	8016b78 <_vfiprintf_r+0x1bc>
 8016bca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016bcc:	07d9      	lsls	r1, r3, #31
 8016bce:	d405      	bmi.n	8016bdc <_vfiprintf_r+0x220>
 8016bd0:	89ab      	ldrh	r3, [r5, #12]
 8016bd2:	059a      	lsls	r2, r3, #22
 8016bd4:	d402      	bmi.n	8016bdc <_vfiprintf_r+0x220>
 8016bd6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016bd8:	f7ff fe13 	bl	8016802 <__retarget_lock_release_recursive>
 8016bdc:	89ab      	ldrh	r3, [r5, #12]
 8016bde:	065b      	lsls	r3, r3, #25
 8016be0:	f53f af12 	bmi.w	8016a08 <_vfiprintf_r+0x4c>
 8016be4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016be6:	e711      	b.n	8016a0c <_vfiprintf_r+0x50>
 8016be8:	ab03      	add	r3, sp, #12
 8016bea:	9300      	str	r3, [sp, #0]
 8016bec:	462a      	mov	r2, r5
 8016bee:	4b09      	ldr	r3, [pc, #36]	; (8016c14 <_vfiprintf_r+0x258>)
 8016bf0:	a904      	add	r1, sp, #16
 8016bf2:	4630      	mov	r0, r6
 8016bf4:	f000 f880 	bl	8016cf8 <_printf_i>
 8016bf8:	e7e4      	b.n	8016bc4 <_vfiprintf_r+0x208>
 8016bfa:	bf00      	nop
 8016bfc:	0801a2e4 	.word	0x0801a2e4
 8016c00:	0801a304 	.word	0x0801a304
 8016c04:	0801a2c4 	.word	0x0801a2c4
 8016c08:	0801a324 	.word	0x0801a324
 8016c0c:	0801a32e 	.word	0x0801a32e
 8016c10:	00000000 	.word	0x00000000
 8016c14:	08016997 	.word	0x08016997
 8016c18:	0801a32a 	.word	0x0801a32a

08016c1c <_printf_common>:
 8016c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016c20:	4616      	mov	r6, r2
 8016c22:	4699      	mov	r9, r3
 8016c24:	688a      	ldr	r2, [r1, #8]
 8016c26:	690b      	ldr	r3, [r1, #16]
 8016c28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016c2c:	4293      	cmp	r3, r2
 8016c2e:	bfb8      	it	lt
 8016c30:	4613      	movlt	r3, r2
 8016c32:	6033      	str	r3, [r6, #0]
 8016c34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016c38:	4607      	mov	r7, r0
 8016c3a:	460c      	mov	r4, r1
 8016c3c:	b10a      	cbz	r2, 8016c42 <_printf_common+0x26>
 8016c3e:	3301      	adds	r3, #1
 8016c40:	6033      	str	r3, [r6, #0]
 8016c42:	6823      	ldr	r3, [r4, #0]
 8016c44:	0699      	lsls	r1, r3, #26
 8016c46:	bf42      	ittt	mi
 8016c48:	6833      	ldrmi	r3, [r6, #0]
 8016c4a:	3302      	addmi	r3, #2
 8016c4c:	6033      	strmi	r3, [r6, #0]
 8016c4e:	6825      	ldr	r5, [r4, #0]
 8016c50:	f015 0506 	ands.w	r5, r5, #6
 8016c54:	d106      	bne.n	8016c64 <_printf_common+0x48>
 8016c56:	f104 0a19 	add.w	sl, r4, #25
 8016c5a:	68e3      	ldr	r3, [r4, #12]
 8016c5c:	6832      	ldr	r2, [r6, #0]
 8016c5e:	1a9b      	subs	r3, r3, r2
 8016c60:	42ab      	cmp	r3, r5
 8016c62:	dc26      	bgt.n	8016cb2 <_printf_common+0x96>
 8016c64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016c68:	1e13      	subs	r3, r2, #0
 8016c6a:	6822      	ldr	r2, [r4, #0]
 8016c6c:	bf18      	it	ne
 8016c6e:	2301      	movne	r3, #1
 8016c70:	0692      	lsls	r2, r2, #26
 8016c72:	d42b      	bmi.n	8016ccc <_printf_common+0xb0>
 8016c74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016c78:	4649      	mov	r1, r9
 8016c7a:	4638      	mov	r0, r7
 8016c7c:	47c0      	blx	r8
 8016c7e:	3001      	adds	r0, #1
 8016c80:	d01e      	beq.n	8016cc0 <_printf_common+0xa4>
 8016c82:	6823      	ldr	r3, [r4, #0]
 8016c84:	68e5      	ldr	r5, [r4, #12]
 8016c86:	6832      	ldr	r2, [r6, #0]
 8016c88:	f003 0306 	and.w	r3, r3, #6
 8016c8c:	2b04      	cmp	r3, #4
 8016c8e:	bf08      	it	eq
 8016c90:	1aad      	subeq	r5, r5, r2
 8016c92:	68a3      	ldr	r3, [r4, #8]
 8016c94:	6922      	ldr	r2, [r4, #16]
 8016c96:	bf0c      	ite	eq
 8016c98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016c9c:	2500      	movne	r5, #0
 8016c9e:	4293      	cmp	r3, r2
 8016ca0:	bfc4      	itt	gt
 8016ca2:	1a9b      	subgt	r3, r3, r2
 8016ca4:	18ed      	addgt	r5, r5, r3
 8016ca6:	2600      	movs	r6, #0
 8016ca8:	341a      	adds	r4, #26
 8016caa:	42b5      	cmp	r5, r6
 8016cac:	d11a      	bne.n	8016ce4 <_printf_common+0xc8>
 8016cae:	2000      	movs	r0, #0
 8016cb0:	e008      	b.n	8016cc4 <_printf_common+0xa8>
 8016cb2:	2301      	movs	r3, #1
 8016cb4:	4652      	mov	r2, sl
 8016cb6:	4649      	mov	r1, r9
 8016cb8:	4638      	mov	r0, r7
 8016cba:	47c0      	blx	r8
 8016cbc:	3001      	adds	r0, #1
 8016cbe:	d103      	bne.n	8016cc8 <_printf_common+0xac>
 8016cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8016cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016cc8:	3501      	adds	r5, #1
 8016cca:	e7c6      	b.n	8016c5a <_printf_common+0x3e>
 8016ccc:	18e1      	adds	r1, r4, r3
 8016cce:	1c5a      	adds	r2, r3, #1
 8016cd0:	2030      	movs	r0, #48	; 0x30
 8016cd2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016cd6:	4422      	add	r2, r4
 8016cd8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016cdc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016ce0:	3302      	adds	r3, #2
 8016ce2:	e7c7      	b.n	8016c74 <_printf_common+0x58>
 8016ce4:	2301      	movs	r3, #1
 8016ce6:	4622      	mov	r2, r4
 8016ce8:	4649      	mov	r1, r9
 8016cea:	4638      	mov	r0, r7
 8016cec:	47c0      	blx	r8
 8016cee:	3001      	adds	r0, #1
 8016cf0:	d0e6      	beq.n	8016cc0 <_printf_common+0xa4>
 8016cf2:	3601      	adds	r6, #1
 8016cf4:	e7d9      	b.n	8016caa <_printf_common+0x8e>
	...

08016cf8 <_printf_i>:
 8016cf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016cfc:	460c      	mov	r4, r1
 8016cfe:	4691      	mov	r9, r2
 8016d00:	7e27      	ldrb	r7, [r4, #24]
 8016d02:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016d04:	2f78      	cmp	r7, #120	; 0x78
 8016d06:	4680      	mov	r8, r0
 8016d08:	469a      	mov	sl, r3
 8016d0a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016d0e:	d807      	bhi.n	8016d20 <_printf_i+0x28>
 8016d10:	2f62      	cmp	r7, #98	; 0x62
 8016d12:	d80a      	bhi.n	8016d2a <_printf_i+0x32>
 8016d14:	2f00      	cmp	r7, #0
 8016d16:	f000 80d8 	beq.w	8016eca <_printf_i+0x1d2>
 8016d1a:	2f58      	cmp	r7, #88	; 0x58
 8016d1c:	f000 80a3 	beq.w	8016e66 <_printf_i+0x16e>
 8016d20:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8016d24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8016d28:	e03a      	b.n	8016da0 <_printf_i+0xa8>
 8016d2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8016d2e:	2b15      	cmp	r3, #21
 8016d30:	d8f6      	bhi.n	8016d20 <_printf_i+0x28>
 8016d32:	a001      	add	r0, pc, #4	; (adr r0, 8016d38 <_printf_i+0x40>)
 8016d34:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8016d38:	08016d91 	.word	0x08016d91
 8016d3c:	08016da5 	.word	0x08016da5
 8016d40:	08016d21 	.word	0x08016d21
 8016d44:	08016d21 	.word	0x08016d21
 8016d48:	08016d21 	.word	0x08016d21
 8016d4c:	08016d21 	.word	0x08016d21
 8016d50:	08016da5 	.word	0x08016da5
 8016d54:	08016d21 	.word	0x08016d21
 8016d58:	08016d21 	.word	0x08016d21
 8016d5c:	08016d21 	.word	0x08016d21
 8016d60:	08016d21 	.word	0x08016d21
 8016d64:	08016eb1 	.word	0x08016eb1
 8016d68:	08016dd5 	.word	0x08016dd5
 8016d6c:	08016e93 	.word	0x08016e93
 8016d70:	08016d21 	.word	0x08016d21
 8016d74:	08016d21 	.word	0x08016d21
 8016d78:	08016ed3 	.word	0x08016ed3
 8016d7c:	08016d21 	.word	0x08016d21
 8016d80:	08016dd5 	.word	0x08016dd5
 8016d84:	08016d21 	.word	0x08016d21
 8016d88:	08016d21 	.word	0x08016d21
 8016d8c:	08016e9b 	.word	0x08016e9b
 8016d90:	680b      	ldr	r3, [r1, #0]
 8016d92:	1d1a      	adds	r2, r3, #4
 8016d94:	681b      	ldr	r3, [r3, #0]
 8016d96:	600a      	str	r2, [r1, #0]
 8016d98:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8016d9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016da0:	2301      	movs	r3, #1
 8016da2:	e0a3      	b.n	8016eec <_printf_i+0x1f4>
 8016da4:	6825      	ldr	r5, [r4, #0]
 8016da6:	6808      	ldr	r0, [r1, #0]
 8016da8:	062e      	lsls	r6, r5, #24
 8016daa:	f100 0304 	add.w	r3, r0, #4
 8016dae:	d50a      	bpl.n	8016dc6 <_printf_i+0xce>
 8016db0:	6805      	ldr	r5, [r0, #0]
 8016db2:	600b      	str	r3, [r1, #0]
 8016db4:	2d00      	cmp	r5, #0
 8016db6:	da03      	bge.n	8016dc0 <_printf_i+0xc8>
 8016db8:	232d      	movs	r3, #45	; 0x2d
 8016dba:	426d      	negs	r5, r5
 8016dbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016dc0:	485e      	ldr	r0, [pc, #376]	; (8016f3c <_printf_i+0x244>)
 8016dc2:	230a      	movs	r3, #10
 8016dc4:	e019      	b.n	8016dfa <_printf_i+0x102>
 8016dc6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8016dca:	6805      	ldr	r5, [r0, #0]
 8016dcc:	600b      	str	r3, [r1, #0]
 8016dce:	bf18      	it	ne
 8016dd0:	b22d      	sxthne	r5, r5
 8016dd2:	e7ef      	b.n	8016db4 <_printf_i+0xbc>
 8016dd4:	680b      	ldr	r3, [r1, #0]
 8016dd6:	6825      	ldr	r5, [r4, #0]
 8016dd8:	1d18      	adds	r0, r3, #4
 8016dda:	6008      	str	r0, [r1, #0]
 8016ddc:	0628      	lsls	r0, r5, #24
 8016dde:	d501      	bpl.n	8016de4 <_printf_i+0xec>
 8016de0:	681d      	ldr	r5, [r3, #0]
 8016de2:	e002      	b.n	8016dea <_printf_i+0xf2>
 8016de4:	0669      	lsls	r1, r5, #25
 8016de6:	d5fb      	bpl.n	8016de0 <_printf_i+0xe8>
 8016de8:	881d      	ldrh	r5, [r3, #0]
 8016dea:	4854      	ldr	r0, [pc, #336]	; (8016f3c <_printf_i+0x244>)
 8016dec:	2f6f      	cmp	r7, #111	; 0x6f
 8016dee:	bf0c      	ite	eq
 8016df0:	2308      	moveq	r3, #8
 8016df2:	230a      	movne	r3, #10
 8016df4:	2100      	movs	r1, #0
 8016df6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016dfa:	6866      	ldr	r6, [r4, #4]
 8016dfc:	60a6      	str	r6, [r4, #8]
 8016dfe:	2e00      	cmp	r6, #0
 8016e00:	bfa2      	ittt	ge
 8016e02:	6821      	ldrge	r1, [r4, #0]
 8016e04:	f021 0104 	bicge.w	r1, r1, #4
 8016e08:	6021      	strge	r1, [r4, #0]
 8016e0a:	b90d      	cbnz	r5, 8016e10 <_printf_i+0x118>
 8016e0c:	2e00      	cmp	r6, #0
 8016e0e:	d04d      	beq.n	8016eac <_printf_i+0x1b4>
 8016e10:	4616      	mov	r6, r2
 8016e12:	fbb5 f1f3 	udiv	r1, r5, r3
 8016e16:	fb03 5711 	mls	r7, r3, r1, r5
 8016e1a:	5dc7      	ldrb	r7, [r0, r7]
 8016e1c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016e20:	462f      	mov	r7, r5
 8016e22:	42bb      	cmp	r3, r7
 8016e24:	460d      	mov	r5, r1
 8016e26:	d9f4      	bls.n	8016e12 <_printf_i+0x11a>
 8016e28:	2b08      	cmp	r3, #8
 8016e2a:	d10b      	bne.n	8016e44 <_printf_i+0x14c>
 8016e2c:	6823      	ldr	r3, [r4, #0]
 8016e2e:	07df      	lsls	r7, r3, #31
 8016e30:	d508      	bpl.n	8016e44 <_printf_i+0x14c>
 8016e32:	6923      	ldr	r3, [r4, #16]
 8016e34:	6861      	ldr	r1, [r4, #4]
 8016e36:	4299      	cmp	r1, r3
 8016e38:	bfde      	ittt	le
 8016e3a:	2330      	movle	r3, #48	; 0x30
 8016e3c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8016e40:	f106 36ff 	addle.w	r6, r6, #4294967295
 8016e44:	1b92      	subs	r2, r2, r6
 8016e46:	6122      	str	r2, [r4, #16]
 8016e48:	f8cd a000 	str.w	sl, [sp]
 8016e4c:	464b      	mov	r3, r9
 8016e4e:	aa03      	add	r2, sp, #12
 8016e50:	4621      	mov	r1, r4
 8016e52:	4640      	mov	r0, r8
 8016e54:	f7ff fee2 	bl	8016c1c <_printf_common>
 8016e58:	3001      	adds	r0, #1
 8016e5a:	d14c      	bne.n	8016ef6 <_printf_i+0x1fe>
 8016e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8016e60:	b004      	add	sp, #16
 8016e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016e66:	4835      	ldr	r0, [pc, #212]	; (8016f3c <_printf_i+0x244>)
 8016e68:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8016e6c:	6823      	ldr	r3, [r4, #0]
 8016e6e:	680e      	ldr	r6, [r1, #0]
 8016e70:	061f      	lsls	r7, r3, #24
 8016e72:	f856 5b04 	ldr.w	r5, [r6], #4
 8016e76:	600e      	str	r6, [r1, #0]
 8016e78:	d514      	bpl.n	8016ea4 <_printf_i+0x1ac>
 8016e7a:	07d9      	lsls	r1, r3, #31
 8016e7c:	bf44      	itt	mi
 8016e7e:	f043 0320 	orrmi.w	r3, r3, #32
 8016e82:	6023      	strmi	r3, [r4, #0]
 8016e84:	b91d      	cbnz	r5, 8016e8e <_printf_i+0x196>
 8016e86:	6823      	ldr	r3, [r4, #0]
 8016e88:	f023 0320 	bic.w	r3, r3, #32
 8016e8c:	6023      	str	r3, [r4, #0]
 8016e8e:	2310      	movs	r3, #16
 8016e90:	e7b0      	b.n	8016df4 <_printf_i+0xfc>
 8016e92:	6823      	ldr	r3, [r4, #0]
 8016e94:	f043 0320 	orr.w	r3, r3, #32
 8016e98:	6023      	str	r3, [r4, #0]
 8016e9a:	2378      	movs	r3, #120	; 0x78
 8016e9c:	4828      	ldr	r0, [pc, #160]	; (8016f40 <_printf_i+0x248>)
 8016e9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016ea2:	e7e3      	b.n	8016e6c <_printf_i+0x174>
 8016ea4:	065e      	lsls	r6, r3, #25
 8016ea6:	bf48      	it	mi
 8016ea8:	b2ad      	uxthmi	r5, r5
 8016eaa:	e7e6      	b.n	8016e7a <_printf_i+0x182>
 8016eac:	4616      	mov	r6, r2
 8016eae:	e7bb      	b.n	8016e28 <_printf_i+0x130>
 8016eb0:	680b      	ldr	r3, [r1, #0]
 8016eb2:	6826      	ldr	r6, [r4, #0]
 8016eb4:	6960      	ldr	r0, [r4, #20]
 8016eb6:	1d1d      	adds	r5, r3, #4
 8016eb8:	600d      	str	r5, [r1, #0]
 8016eba:	0635      	lsls	r5, r6, #24
 8016ebc:	681b      	ldr	r3, [r3, #0]
 8016ebe:	d501      	bpl.n	8016ec4 <_printf_i+0x1cc>
 8016ec0:	6018      	str	r0, [r3, #0]
 8016ec2:	e002      	b.n	8016eca <_printf_i+0x1d2>
 8016ec4:	0671      	lsls	r1, r6, #25
 8016ec6:	d5fb      	bpl.n	8016ec0 <_printf_i+0x1c8>
 8016ec8:	8018      	strh	r0, [r3, #0]
 8016eca:	2300      	movs	r3, #0
 8016ecc:	6123      	str	r3, [r4, #16]
 8016ece:	4616      	mov	r6, r2
 8016ed0:	e7ba      	b.n	8016e48 <_printf_i+0x150>
 8016ed2:	680b      	ldr	r3, [r1, #0]
 8016ed4:	1d1a      	adds	r2, r3, #4
 8016ed6:	600a      	str	r2, [r1, #0]
 8016ed8:	681e      	ldr	r6, [r3, #0]
 8016eda:	6862      	ldr	r2, [r4, #4]
 8016edc:	2100      	movs	r1, #0
 8016ede:	4630      	mov	r0, r6
 8016ee0:	f7e9 f976 	bl	80001d0 <memchr>
 8016ee4:	b108      	cbz	r0, 8016eea <_printf_i+0x1f2>
 8016ee6:	1b80      	subs	r0, r0, r6
 8016ee8:	6060      	str	r0, [r4, #4]
 8016eea:	6863      	ldr	r3, [r4, #4]
 8016eec:	6123      	str	r3, [r4, #16]
 8016eee:	2300      	movs	r3, #0
 8016ef0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016ef4:	e7a8      	b.n	8016e48 <_printf_i+0x150>
 8016ef6:	6923      	ldr	r3, [r4, #16]
 8016ef8:	4632      	mov	r2, r6
 8016efa:	4649      	mov	r1, r9
 8016efc:	4640      	mov	r0, r8
 8016efe:	47d0      	blx	sl
 8016f00:	3001      	adds	r0, #1
 8016f02:	d0ab      	beq.n	8016e5c <_printf_i+0x164>
 8016f04:	6823      	ldr	r3, [r4, #0]
 8016f06:	079b      	lsls	r3, r3, #30
 8016f08:	d413      	bmi.n	8016f32 <_printf_i+0x23a>
 8016f0a:	68e0      	ldr	r0, [r4, #12]
 8016f0c:	9b03      	ldr	r3, [sp, #12]
 8016f0e:	4298      	cmp	r0, r3
 8016f10:	bfb8      	it	lt
 8016f12:	4618      	movlt	r0, r3
 8016f14:	e7a4      	b.n	8016e60 <_printf_i+0x168>
 8016f16:	2301      	movs	r3, #1
 8016f18:	4632      	mov	r2, r6
 8016f1a:	4649      	mov	r1, r9
 8016f1c:	4640      	mov	r0, r8
 8016f1e:	47d0      	blx	sl
 8016f20:	3001      	adds	r0, #1
 8016f22:	d09b      	beq.n	8016e5c <_printf_i+0x164>
 8016f24:	3501      	adds	r5, #1
 8016f26:	68e3      	ldr	r3, [r4, #12]
 8016f28:	9903      	ldr	r1, [sp, #12]
 8016f2a:	1a5b      	subs	r3, r3, r1
 8016f2c:	42ab      	cmp	r3, r5
 8016f2e:	dcf2      	bgt.n	8016f16 <_printf_i+0x21e>
 8016f30:	e7eb      	b.n	8016f0a <_printf_i+0x212>
 8016f32:	2500      	movs	r5, #0
 8016f34:	f104 0619 	add.w	r6, r4, #25
 8016f38:	e7f5      	b.n	8016f26 <_printf_i+0x22e>
 8016f3a:	bf00      	nop
 8016f3c:	0801a335 	.word	0x0801a335
 8016f40:	0801a346 	.word	0x0801a346

08016f44 <_sbrk_r>:
 8016f44:	b538      	push	{r3, r4, r5, lr}
 8016f46:	4d06      	ldr	r5, [pc, #24]	; (8016f60 <_sbrk_r+0x1c>)
 8016f48:	2300      	movs	r3, #0
 8016f4a:	4604      	mov	r4, r0
 8016f4c:	4608      	mov	r0, r1
 8016f4e:	602b      	str	r3, [r5, #0]
 8016f50:	f7e9 fffc 	bl	8000f4c <_sbrk>
 8016f54:	1c43      	adds	r3, r0, #1
 8016f56:	d102      	bne.n	8016f5e <_sbrk_r+0x1a>
 8016f58:	682b      	ldr	r3, [r5, #0]
 8016f5a:	b103      	cbz	r3, 8016f5e <_sbrk_r+0x1a>
 8016f5c:	6023      	str	r3, [r4, #0]
 8016f5e:	bd38      	pop	{r3, r4, r5, pc}
 8016f60:	2000af78 	.word	0x2000af78

08016f64 <__sread>:
 8016f64:	b510      	push	{r4, lr}
 8016f66:	460c      	mov	r4, r1
 8016f68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f6c:	f000 fa6c 	bl	8017448 <_read_r>
 8016f70:	2800      	cmp	r0, #0
 8016f72:	bfab      	itete	ge
 8016f74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016f76:	89a3      	ldrhlt	r3, [r4, #12]
 8016f78:	181b      	addge	r3, r3, r0
 8016f7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016f7e:	bfac      	ite	ge
 8016f80:	6563      	strge	r3, [r4, #84]	; 0x54
 8016f82:	81a3      	strhlt	r3, [r4, #12]
 8016f84:	bd10      	pop	{r4, pc}

08016f86 <__swrite>:
 8016f86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f8a:	461f      	mov	r7, r3
 8016f8c:	898b      	ldrh	r3, [r1, #12]
 8016f8e:	05db      	lsls	r3, r3, #23
 8016f90:	4605      	mov	r5, r0
 8016f92:	460c      	mov	r4, r1
 8016f94:	4616      	mov	r6, r2
 8016f96:	d505      	bpl.n	8016fa4 <__swrite+0x1e>
 8016f98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f9c:	2302      	movs	r3, #2
 8016f9e:	2200      	movs	r2, #0
 8016fa0:	f000 f9d0 	bl	8017344 <_lseek_r>
 8016fa4:	89a3      	ldrh	r3, [r4, #12]
 8016fa6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016faa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016fae:	81a3      	strh	r3, [r4, #12]
 8016fb0:	4632      	mov	r2, r6
 8016fb2:	463b      	mov	r3, r7
 8016fb4:	4628      	mov	r0, r5
 8016fb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016fba:	f000 b869 	b.w	8017090 <_write_r>

08016fbe <__sseek>:
 8016fbe:	b510      	push	{r4, lr}
 8016fc0:	460c      	mov	r4, r1
 8016fc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016fc6:	f000 f9bd 	bl	8017344 <_lseek_r>
 8016fca:	1c43      	adds	r3, r0, #1
 8016fcc:	89a3      	ldrh	r3, [r4, #12]
 8016fce:	bf15      	itete	ne
 8016fd0:	6560      	strne	r0, [r4, #84]	; 0x54
 8016fd2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016fd6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016fda:	81a3      	strheq	r3, [r4, #12]
 8016fdc:	bf18      	it	ne
 8016fde:	81a3      	strhne	r3, [r4, #12]
 8016fe0:	bd10      	pop	{r4, pc}

08016fe2 <__sclose>:
 8016fe2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016fe6:	f000 b8db 	b.w	80171a0 <_close_r>
	...

08016fec <__swbuf_r>:
 8016fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016fee:	460e      	mov	r6, r1
 8016ff0:	4614      	mov	r4, r2
 8016ff2:	4605      	mov	r5, r0
 8016ff4:	b118      	cbz	r0, 8016ffe <__swbuf_r+0x12>
 8016ff6:	6983      	ldr	r3, [r0, #24]
 8016ff8:	b90b      	cbnz	r3, 8016ffe <__swbuf_r+0x12>
 8016ffa:	f7ff fb51 	bl	80166a0 <__sinit>
 8016ffe:	4b21      	ldr	r3, [pc, #132]	; (8017084 <__swbuf_r+0x98>)
 8017000:	429c      	cmp	r4, r3
 8017002:	d12b      	bne.n	801705c <__swbuf_r+0x70>
 8017004:	686c      	ldr	r4, [r5, #4]
 8017006:	69a3      	ldr	r3, [r4, #24]
 8017008:	60a3      	str	r3, [r4, #8]
 801700a:	89a3      	ldrh	r3, [r4, #12]
 801700c:	071a      	lsls	r2, r3, #28
 801700e:	d52f      	bpl.n	8017070 <__swbuf_r+0x84>
 8017010:	6923      	ldr	r3, [r4, #16]
 8017012:	b36b      	cbz	r3, 8017070 <__swbuf_r+0x84>
 8017014:	6923      	ldr	r3, [r4, #16]
 8017016:	6820      	ldr	r0, [r4, #0]
 8017018:	1ac0      	subs	r0, r0, r3
 801701a:	6963      	ldr	r3, [r4, #20]
 801701c:	b2f6      	uxtb	r6, r6
 801701e:	4283      	cmp	r3, r0
 8017020:	4637      	mov	r7, r6
 8017022:	dc04      	bgt.n	801702e <__swbuf_r+0x42>
 8017024:	4621      	mov	r1, r4
 8017026:	4628      	mov	r0, r5
 8017028:	f000 f950 	bl	80172cc <_fflush_r>
 801702c:	bb30      	cbnz	r0, 801707c <__swbuf_r+0x90>
 801702e:	68a3      	ldr	r3, [r4, #8]
 8017030:	3b01      	subs	r3, #1
 8017032:	60a3      	str	r3, [r4, #8]
 8017034:	6823      	ldr	r3, [r4, #0]
 8017036:	1c5a      	adds	r2, r3, #1
 8017038:	6022      	str	r2, [r4, #0]
 801703a:	701e      	strb	r6, [r3, #0]
 801703c:	6963      	ldr	r3, [r4, #20]
 801703e:	3001      	adds	r0, #1
 8017040:	4283      	cmp	r3, r0
 8017042:	d004      	beq.n	801704e <__swbuf_r+0x62>
 8017044:	89a3      	ldrh	r3, [r4, #12]
 8017046:	07db      	lsls	r3, r3, #31
 8017048:	d506      	bpl.n	8017058 <__swbuf_r+0x6c>
 801704a:	2e0a      	cmp	r6, #10
 801704c:	d104      	bne.n	8017058 <__swbuf_r+0x6c>
 801704e:	4621      	mov	r1, r4
 8017050:	4628      	mov	r0, r5
 8017052:	f000 f93b 	bl	80172cc <_fflush_r>
 8017056:	b988      	cbnz	r0, 801707c <__swbuf_r+0x90>
 8017058:	4638      	mov	r0, r7
 801705a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801705c:	4b0a      	ldr	r3, [pc, #40]	; (8017088 <__swbuf_r+0x9c>)
 801705e:	429c      	cmp	r4, r3
 8017060:	d101      	bne.n	8017066 <__swbuf_r+0x7a>
 8017062:	68ac      	ldr	r4, [r5, #8]
 8017064:	e7cf      	b.n	8017006 <__swbuf_r+0x1a>
 8017066:	4b09      	ldr	r3, [pc, #36]	; (801708c <__swbuf_r+0xa0>)
 8017068:	429c      	cmp	r4, r3
 801706a:	bf08      	it	eq
 801706c:	68ec      	ldreq	r4, [r5, #12]
 801706e:	e7ca      	b.n	8017006 <__swbuf_r+0x1a>
 8017070:	4621      	mov	r1, r4
 8017072:	4628      	mov	r0, r5
 8017074:	f000 f81e 	bl	80170b4 <__swsetup_r>
 8017078:	2800      	cmp	r0, #0
 801707a:	d0cb      	beq.n	8017014 <__swbuf_r+0x28>
 801707c:	f04f 37ff 	mov.w	r7, #4294967295
 8017080:	e7ea      	b.n	8017058 <__swbuf_r+0x6c>
 8017082:	bf00      	nop
 8017084:	0801a2e4 	.word	0x0801a2e4
 8017088:	0801a304 	.word	0x0801a304
 801708c:	0801a2c4 	.word	0x0801a2c4

08017090 <_write_r>:
 8017090:	b538      	push	{r3, r4, r5, lr}
 8017092:	4d07      	ldr	r5, [pc, #28]	; (80170b0 <_write_r+0x20>)
 8017094:	4604      	mov	r4, r0
 8017096:	4608      	mov	r0, r1
 8017098:	4611      	mov	r1, r2
 801709a:	2200      	movs	r2, #0
 801709c:	602a      	str	r2, [r5, #0]
 801709e:	461a      	mov	r2, r3
 80170a0:	f7e9 ff03 	bl	8000eaa <_write>
 80170a4:	1c43      	adds	r3, r0, #1
 80170a6:	d102      	bne.n	80170ae <_write_r+0x1e>
 80170a8:	682b      	ldr	r3, [r5, #0]
 80170aa:	b103      	cbz	r3, 80170ae <_write_r+0x1e>
 80170ac:	6023      	str	r3, [r4, #0]
 80170ae:	bd38      	pop	{r3, r4, r5, pc}
 80170b0:	2000af78 	.word	0x2000af78

080170b4 <__swsetup_r>:
 80170b4:	4b32      	ldr	r3, [pc, #200]	; (8017180 <__swsetup_r+0xcc>)
 80170b6:	b570      	push	{r4, r5, r6, lr}
 80170b8:	681d      	ldr	r5, [r3, #0]
 80170ba:	4606      	mov	r6, r0
 80170bc:	460c      	mov	r4, r1
 80170be:	b125      	cbz	r5, 80170ca <__swsetup_r+0x16>
 80170c0:	69ab      	ldr	r3, [r5, #24]
 80170c2:	b913      	cbnz	r3, 80170ca <__swsetup_r+0x16>
 80170c4:	4628      	mov	r0, r5
 80170c6:	f7ff faeb 	bl	80166a0 <__sinit>
 80170ca:	4b2e      	ldr	r3, [pc, #184]	; (8017184 <__swsetup_r+0xd0>)
 80170cc:	429c      	cmp	r4, r3
 80170ce:	d10f      	bne.n	80170f0 <__swsetup_r+0x3c>
 80170d0:	686c      	ldr	r4, [r5, #4]
 80170d2:	89a3      	ldrh	r3, [r4, #12]
 80170d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80170d8:	0719      	lsls	r1, r3, #28
 80170da:	d42c      	bmi.n	8017136 <__swsetup_r+0x82>
 80170dc:	06dd      	lsls	r5, r3, #27
 80170de:	d411      	bmi.n	8017104 <__swsetup_r+0x50>
 80170e0:	2309      	movs	r3, #9
 80170e2:	6033      	str	r3, [r6, #0]
 80170e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80170e8:	81a3      	strh	r3, [r4, #12]
 80170ea:	f04f 30ff 	mov.w	r0, #4294967295
 80170ee:	e03e      	b.n	801716e <__swsetup_r+0xba>
 80170f0:	4b25      	ldr	r3, [pc, #148]	; (8017188 <__swsetup_r+0xd4>)
 80170f2:	429c      	cmp	r4, r3
 80170f4:	d101      	bne.n	80170fa <__swsetup_r+0x46>
 80170f6:	68ac      	ldr	r4, [r5, #8]
 80170f8:	e7eb      	b.n	80170d2 <__swsetup_r+0x1e>
 80170fa:	4b24      	ldr	r3, [pc, #144]	; (801718c <__swsetup_r+0xd8>)
 80170fc:	429c      	cmp	r4, r3
 80170fe:	bf08      	it	eq
 8017100:	68ec      	ldreq	r4, [r5, #12]
 8017102:	e7e6      	b.n	80170d2 <__swsetup_r+0x1e>
 8017104:	0758      	lsls	r0, r3, #29
 8017106:	d512      	bpl.n	801712e <__swsetup_r+0x7a>
 8017108:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801710a:	b141      	cbz	r1, 801711e <__swsetup_r+0x6a>
 801710c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017110:	4299      	cmp	r1, r3
 8017112:	d002      	beq.n	801711a <__swsetup_r+0x66>
 8017114:	4630      	mov	r0, r6
 8017116:	f7ff fb7d 	bl	8016814 <_free_r>
 801711a:	2300      	movs	r3, #0
 801711c:	6363      	str	r3, [r4, #52]	; 0x34
 801711e:	89a3      	ldrh	r3, [r4, #12]
 8017120:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017124:	81a3      	strh	r3, [r4, #12]
 8017126:	2300      	movs	r3, #0
 8017128:	6063      	str	r3, [r4, #4]
 801712a:	6923      	ldr	r3, [r4, #16]
 801712c:	6023      	str	r3, [r4, #0]
 801712e:	89a3      	ldrh	r3, [r4, #12]
 8017130:	f043 0308 	orr.w	r3, r3, #8
 8017134:	81a3      	strh	r3, [r4, #12]
 8017136:	6923      	ldr	r3, [r4, #16]
 8017138:	b94b      	cbnz	r3, 801714e <__swsetup_r+0x9a>
 801713a:	89a3      	ldrh	r3, [r4, #12]
 801713c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017140:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017144:	d003      	beq.n	801714e <__swsetup_r+0x9a>
 8017146:	4621      	mov	r1, r4
 8017148:	4630      	mov	r0, r6
 801714a:	f000 f931 	bl	80173b0 <__smakebuf_r>
 801714e:	89a0      	ldrh	r0, [r4, #12]
 8017150:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017154:	f010 0301 	ands.w	r3, r0, #1
 8017158:	d00a      	beq.n	8017170 <__swsetup_r+0xbc>
 801715a:	2300      	movs	r3, #0
 801715c:	60a3      	str	r3, [r4, #8]
 801715e:	6963      	ldr	r3, [r4, #20]
 8017160:	425b      	negs	r3, r3
 8017162:	61a3      	str	r3, [r4, #24]
 8017164:	6923      	ldr	r3, [r4, #16]
 8017166:	b943      	cbnz	r3, 801717a <__swsetup_r+0xc6>
 8017168:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801716c:	d1ba      	bne.n	80170e4 <__swsetup_r+0x30>
 801716e:	bd70      	pop	{r4, r5, r6, pc}
 8017170:	0781      	lsls	r1, r0, #30
 8017172:	bf58      	it	pl
 8017174:	6963      	ldrpl	r3, [r4, #20]
 8017176:	60a3      	str	r3, [r4, #8]
 8017178:	e7f4      	b.n	8017164 <__swsetup_r+0xb0>
 801717a:	2000      	movs	r0, #0
 801717c:	e7f7      	b.n	801716e <__swsetup_r+0xba>
 801717e:	bf00      	nop
 8017180:	20000190 	.word	0x20000190
 8017184:	0801a2e4 	.word	0x0801a2e4
 8017188:	0801a304 	.word	0x0801a304
 801718c:	0801a2c4 	.word	0x0801a2c4

08017190 <abort>:
 8017190:	b508      	push	{r3, lr}
 8017192:	2006      	movs	r0, #6
 8017194:	f000 f992 	bl	80174bc <raise>
 8017198:	2001      	movs	r0, #1
 801719a:	f7e9 fe5f 	bl	8000e5c <_exit>
	...

080171a0 <_close_r>:
 80171a0:	b538      	push	{r3, r4, r5, lr}
 80171a2:	4d06      	ldr	r5, [pc, #24]	; (80171bc <_close_r+0x1c>)
 80171a4:	2300      	movs	r3, #0
 80171a6:	4604      	mov	r4, r0
 80171a8:	4608      	mov	r0, r1
 80171aa:	602b      	str	r3, [r5, #0]
 80171ac:	f7e9 fe99 	bl	8000ee2 <_close>
 80171b0:	1c43      	adds	r3, r0, #1
 80171b2:	d102      	bne.n	80171ba <_close_r+0x1a>
 80171b4:	682b      	ldr	r3, [r5, #0]
 80171b6:	b103      	cbz	r3, 80171ba <_close_r+0x1a>
 80171b8:	6023      	str	r3, [r4, #0]
 80171ba:	bd38      	pop	{r3, r4, r5, pc}
 80171bc:	2000af78 	.word	0x2000af78

080171c0 <__sflush_r>:
 80171c0:	898a      	ldrh	r2, [r1, #12]
 80171c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80171c6:	4605      	mov	r5, r0
 80171c8:	0710      	lsls	r0, r2, #28
 80171ca:	460c      	mov	r4, r1
 80171cc:	d458      	bmi.n	8017280 <__sflush_r+0xc0>
 80171ce:	684b      	ldr	r3, [r1, #4]
 80171d0:	2b00      	cmp	r3, #0
 80171d2:	dc05      	bgt.n	80171e0 <__sflush_r+0x20>
 80171d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80171d6:	2b00      	cmp	r3, #0
 80171d8:	dc02      	bgt.n	80171e0 <__sflush_r+0x20>
 80171da:	2000      	movs	r0, #0
 80171dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80171e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80171e2:	2e00      	cmp	r6, #0
 80171e4:	d0f9      	beq.n	80171da <__sflush_r+0x1a>
 80171e6:	2300      	movs	r3, #0
 80171e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80171ec:	682f      	ldr	r7, [r5, #0]
 80171ee:	602b      	str	r3, [r5, #0]
 80171f0:	d032      	beq.n	8017258 <__sflush_r+0x98>
 80171f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80171f4:	89a3      	ldrh	r3, [r4, #12]
 80171f6:	075a      	lsls	r2, r3, #29
 80171f8:	d505      	bpl.n	8017206 <__sflush_r+0x46>
 80171fa:	6863      	ldr	r3, [r4, #4]
 80171fc:	1ac0      	subs	r0, r0, r3
 80171fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017200:	b10b      	cbz	r3, 8017206 <__sflush_r+0x46>
 8017202:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017204:	1ac0      	subs	r0, r0, r3
 8017206:	2300      	movs	r3, #0
 8017208:	4602      	mov	r2, r0
 801720a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801720c:	6a21      	ldr	r1, [r4, #32]
 801720e:	4628      	mov	r0, r5
 8017210:	47b0      	blx	r6
 8017212:	1c43      	adds	r3, r0, #1
 8017214:	89a3      	ldrh	r3, [r4, #12]
 8017216:	d106      	bne.n	8017226 <__sflush_r+0x66>
 8017218:	6829      	ldr	r1, [r5, #0]
 801721a:	291d      	cmp	r1, #29
 801721c:	d82c      	bhi.n	8017278 <__sflush_r+0xb8>
 801721e:	4a2a      	ldr	r2, [pc, #168]	; (80172c8 <__sflush_r+0x108>)
 8017220:	40ca      	lsrs	r2, r1
 8017222:	07d6      	lsls	r6, r2, #31
 8017224:	d528      	bpl.n	8017278 <__sflush_r+0xb8>
 8017226:	2200      	movs	r2, #0
 8017228:	6062      	str	r2, [r4, #4]
 801722a:	04d9      	lsls	r1, r3, #19
 801722c:	6922      	ldr	r2, [r4, #16]
 801722e:	6022      	str	r2, [r4, #0]
 8017230:	d504      	bpl.n	801723c <__sflush_r+0x7c>
 8017232:	1c42      	adds	r2, r0, #1
 8017234:	d101      	bne.n	801723a <__sflush_r+0x7a>
 8017236:	682b      	ldr	r3, [r5, #0]
 8017238:	b903      	cbnz	r3, 801723c <__sflush_r+0x7c>
 801723a:	6560      	str	r0, [r4, #84]	; 0x54
 801723c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801723e:	602f      	str	r7, [r5, #0]
 8017240:	2900      	cmp	r1, #0
 8017242:	d0ca      	beq.n	80171da <__sflush_r+0x1a>
 8017244:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017248:	4299      	cmp	r1, r3
 801724a:	d002      	beq.n	8017252 <__sflush_r+0x92>
 801724c:	4628      	mov	r0, r5
 801724e:	f7ff fae1 	bl	8016814 <_free_r>
 8017252:	2000      	movs	r0, #0
 8017254:	6360      	str	r0, [r4, #52]	; 0x34
 8017256:	e7c1      	b.n	80171dc <__sflush_r+0x1c>
 8017258:	6a21      	ldr	r1, [r4, #32]
 801725a:	2301      	movs	r3, #1
 801725c:	4628      	mov	r0, r5
 801725e:	47b0      	blx	r6
 8017260:	1c41      	adds	r1, r0, #1
 8017262:	d1c7      	bne.n	80171f4 <__sflush_r+0x34>
 8017264:	682b      	ldr	r3, [r5, #0]
 8017266:	2b00      	cmp	r3, #0
 8017268:	d0c4      	beq.n	80171f4 <__sflush_r+0x34>
 801726a:	2b1d      	cmp	r3, #29
 801726c:	d001      	beq.n	8017272 <__sflush_r+0xb2>
 801726e:	2b16      	cmp	r3, #22
 8017270:	d101      	bne.n	8017276 <__sflush_r+0xb6>
 8017272:	602f      	str	r7, [r5, #0]
 8017274:	e7b1      	b.n	80171da <__sflush_r+0x1a>
 8017276:	89a3      	ldrh	r3, [r4, #12]
 8017278:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801727c:	81a3      	strh	r3, [r4, #12]
 801727e:	e7ad      	b.n	80171dc <__sflush_r+0x1c>
 8017280:	690f      	ldr	r7, [r1, #16]
 8017282:	2f00      	cmp	r7, #0
 8017284:	d0a9      	beq.n	80171da <__sflush_r+0x1a>
 8017286:	0793      	lsls	r3, r2, #30
 8017288:	680e      	ldr	r6, [r1, #0]
 801728a:	bf08      	it	eq
 801728c:	694b      	ldreq	r3, [r1, #20]
 801728e:	600f      	str	r7, [r1, #0]
 8017290:	bf18      	it	ne
 8017292:	2300      	movne	r3, #0
 8017294:	eba6 0807 	sub.w	r8, r6, r7
 8017298:	608b      	str	r3, [r1, #8]
 801729a:	f1b8 0f00 	cmp.w	r8, #0
 801729e:	dd9c      	ble.n	80171da <__sflush_r+0x1a>
 80172a0:	6a21      	ldr	r1, [r4, #32]
 80172a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80172a4:	4643      	mov	r3, r8
 80172a6:	463a      	mov	r2, r7
 80172a8:	4628      	mov	r0, r5
 80172aa:	47b0      	blx	r6
 80172ac:	2800      	cmp	r0, #0
 80172ae:	dc06      	bgt.n	80172be <__sflush_r+0xfe>
 80172b0:	89a3      	ldrh	r3, [r4, #12]
 80172b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80172b6:	81a3      	strh	r3, [r4, #12]
 80172b8:	f04f 30ff 	mov.w	r0, #4294967295
 80172bc:	e78e      	b.n	80171dc <__sflush_r+0x1c>
 80172be:	4407      	add	r7, r0
 80172c0:	eba8 0800 	sub.w	r8, r8, r0
 80172c4:	e7e9      	b.n	801729a <__sflush_r+0xda>
 80172c6:	bf00      	nop
 80172c8:	20400001 	.word	0x20400001

080172cc <_fflush_r>:
 80172cc:	b538      	push	{r3, r4, r5, lr}
 80172ce:	690b      	ldr	r3, [r1, #16]
 80172d0:	4605      	mov	r5, r0
 80172d2:	460c      	mov	r4, r1
 80172d4:	b913      	cbnz	r3, 80172dc <_fflush_r+0x10>
 80172d6:	2500      	movs	r5, #0
 80172d8:	4628      	mov	r0, r5
 80172da:	bd38      	pop	{r3, r4, r5, pc}
 80172dc:	b118      	cbz	r0, 80172e6 <_fflush_r+0x1a>
 80172de:	6983      	ldr	r3, [r0, #24]
 80172e0:	b90b      	cbnz	r3, 80172e6 <_fflush_r+0x1a>
 80172e2:	f7ff f9dd 	bl	80166a0 <__sinit>
 80172e6:	4b14      	ldr	r3, [pc, #80]	; (8017338 <_fflush_r+0x6c>)
 80172e8:	429c      	cmp	r4, r3
 80172ea:	d11b      	bne.n	8017324 <_fflush_r+0x58>
 80172ec:	686c      	ldr	r4, [r5, #4]
 80172ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80172f2:	2b00      	cmp	r3, #0
 80172f4:	d0ef      	beq.n	80172d6 <_fflush_r+0xa>
 80172f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80172f8:	07d0      	lsls	r0, r2, #31
 80172fa:	d404      	bmi.n	8017306 <_fflush_r+0x3a>
 80172fc:	0599      	lsls	r1, r3, #22
 80172fe:	d402      	bmi.n	8017306 <_fflush_r+0x3a>
 8017300:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017302:	f7ff fa7d 	bl	8016800 <__retarget_lock_acquire_recursive>
 8017306:	4628      	mov	r0, r5
 8017308:	4621      	mov	r1, r4
 801730a:	f7ff ff59 	bl	80171c0 <__sflush_r>
 801730e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017310:	07da      	lsls	r2, r3, #31
 8017312:	4605      	mov	r5, r0
 8017314:	d4e0      	bmi.n	80172d8 <_fflush_r+0xc>
 8017316:	89a3      	ldrh	r3, [r4, #12]
 8017318:	059b      	lsls	r3, r3, #22
 801731a:	d4dd      	bmi.n	80172d8 <_fflush_r+0xc>
 801731c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801731e:	f7ff fa70 	bl	8016802 <__retarget_lock_release_recursive>
 8017322:	e7d9      	b.n	80172d8 <_fflush_r+0xc>
 8017324:	4b05      	ldr	r3, [pc, #20]	; (801733c <_fflush_r+0x70>)
 8017326:	429c      	cmp	r4, r3
 8017328:	d101      	bne.n	801732e <_fflush_r+0x62>
 801732a:	68ac      	ldr	r4, [r5, #8]
 801732c:	e7df      	b.n	80172ee <_fflush_r+0x22>
 801732e:	4b04      	ldr	r3, [pc, #16]	; (8017340 <_fflush_r+0x74>)
 8017330:	429c      	cmp	r4, r3
 8017332:	bf08      	it	eq
 8017334:	68ec      	ldreq	r4, [r5, #12]
 8017336:	e7da      	b.n	80172ee <_fflush_r+0x22>
 8017338:	0801a2e4 	.word	0x0801a2e4
 801733c:	0801a304 	.word	0x0801a304
 8017340:	0801a2c4 	.word	0x0801a2c4

08017344 <_lseek_r>:
 8017344:	b538      	push	{r3, r4, r5, lr}
 8017346:	4d07      	ldr	r5, [pc, #28]	; (8017364 <_lseek_r+0x20>)
 8017348:	4604      	mov	r4, r0
 801734a:	4608      	mov	r0, r1
 801734c:	4611      	mov	r1, r2
 801734e:	2200      	movs	r2, #0
 8017350:	602a      	str	r2, [r5, #0]
 8017352:	461a      	mov	r2, r3
 8017354:	f7e9 fdec 	bl	8000f30 <_lseek>
 8017358:	1c43      	adds	r3, r0, #1
 801735a:	d102      	bne.n	8017362 <_lseek_r+0x1e>
 801735c:	682b      	ldr	r3, [r5, #0]
 801735e:	b103      	cbz	r3, 8017362 <_lseek_r+0x1e>
 8017360:	6023      	str	r3, [r4, #0]
 8017362:	bd38      	pop	{r3, r4, r5, pc}
 8017364:	2000af78 	.word	0x2000af78

08017368 <__swhatbuf_r>:
 8017368:	b570      	push	{r4, r5, r6, lr}
 801736a:	460e      	mov	r6, r1
 801736c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017370:	2900      	cmp	r1, #0
 8017372:	b096      	sub	sp, #88	; 0x58
 8017374:	4614      	mov	r4, r2
 8017376:	461d      	mov	r5, r3
 8017378:	da07      	bge.n	801738a <__swhatbuf_r+0x22>
 801737a:	2300      	movs	r3, #0
 801737c:	602b      	str	r3, [r5, #0]
 801737e:	89b3      	ldrh	r3, [r6, #12]
 8017380:	061a      	lsls	r2, r3, #24
 8017382:	d410      	bmi.n	80173a6 <__swhatbuf_r+0x3e>
 8017384:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017388:	e00e      	b.n	80173a8 <__swhatbuf_r+0x40>
 801738a:	466a      	mov	r2, sp
 801738c:	f000 f8b2 	bl	80174f4 <_fstat_r>
 8017390:	2800      	cmp	r0, #0
 8017392:	dbf2      	blt.n	801737a <__swhatbuf_r+0x12>
 8017394:	9a01      	ldr	r2, [sp, #4]
 8017396:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801739a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801739e:	425a      	negs	r2, r3
 80173a0:	415a      	adcs	r2, r3
 80173a2:	602a      	str	r2, [r5, #0]
 80173a4:	e7ee      	b.n	8017384 <__swhatbuf_r+0x1c>
 80173a6:	2340      	movs	r3, #64	; 0x40
 80173a8:	2000      	movs	r0, #0
 80173aa:	6023      	str	r3, [r4, #0]
 80173ac:	b016      	add	sp, #88	; 0x58
 80173ae:	bd70      	pop	{r4, r5, r6, pc}

080173b0 <__smakebuf_r>:
 80173b0:	898b      	ldrh	r3, [r1, #12]
 80173b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80173b4:	079d      	lsls	r5, r3, #30
 80173b6:	4606      	mov	r6, r0
 80173b8:	460c      	mov	r4, r1
 80173ba:	d507      	bpl.n	80173cc <__smakebuf_r+0x1c>
 80173bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80173c0:	6023      	str	r3, [r4, #0]
 80173c2:	6123      	str	r3, [r4, #16]
 80173c4:	2301      	movs	r3, #1
 80173c6:	6163      	str	r3, [r4, #20]
 80173c8:	b002      	add	sp, #8
 80173ca:	bd70      	pop	{r4, r5, r6, pc}
 80173cc:	ab01      	add	r3, sp, #4
 80173ce:	466a      	mov	r2, sp
 80173d0:	f7ff ffca 	bl	8017368 <__swhatbuf_r>
 80173d4:	9900      	ldr	r1, [sp, #0]
 80173d6:	4605      	mov	r5, r0
 80173d8:	4630      	mov	r0, r6
 80173da:	f7ff fa6b 	bl	80168b4 <_malloc_r>
 80173de:	b948      	cbnz	r0, 80173f4 <__smakebuf_r+0x44>
 80173e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80173e4:	059a      	lsls	r2, r3, #22
 80173e6:	d4ef      	bmi.n	80173c8 <__smakebuf_r+0x18>
 80173e8:	f023 0303 	bic.w	r3, r3, #3
 80173ec:	f043 0302 	orr.w	r3, r3, #2
 80173f0:	81a3      	strh	r3, [r4, #12]
 80173f2:	e7e3      	b.n	80173bc <__smakebuf_r+0xc>
 80173f4:	4b0d      	ldr	r3, [pc, #52]	; (801742c <__smakebuf_r+0x7c>)
 80173f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80173f8:	89a3      	ldrh	r3, [r4, #12]
 80173fa:	6020      	str	r0, [r4, #0]
 80173fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017400:	81a3      	strh	r3, [r4, #12]
 8017402:	9b00      	ldr	r3, [sp, #0]
 8017404:	6163      	str	r3, [r4, #20]
 8017406:	9b01      	ldr	r3, [sp, #4]
 8017408:	6120      	str	r0, [r4, #16]
 801740a:	b15b      	cbz	r3, 8017424 <__smakebuf_r+0x74>
 801740c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017410:	4630      	mov	r0, r6
 8017412:	f000 f881 	bl	8017518 <_isatty_r>
 8017416:	b128      	cbz	r0, 8017424 <__smakebuf_r+0x74>
 8017418:	89a3      	ldrh	r3, [r4, #12]
 801741a:	f023 0303 	bic.w	r3, r3, #3
 801741e:	f043 0301 	orr.w	r3, r3, #1
 8017422:	81a3      	strh	r3, [r4, #12]
 8017424:	89a0      	ldrh	r0, [r4, #12]
 8017426:	4305      	orrs	r5, r0
 8017428:	81a5      	strh	r5, [r4, #12]
 801742a:	e7cd      	b.n	80173c8 <__smakebuf_r+0x18>
 801742c:	08016639 	.word	0x08016639

08017430 <__malloc_lock>:
 8017430:	4801      	ldr	r0, [pc, #4]	; (8017438 <__malloc_lock+0x8>)
 8017432:	f7ff b9e5 	b.w	8016800 <__retarget_lock_acquire_recursive>
 8017436:	bf00      	nop
 8017438:	2000c85c 	.word	0x2000c85c

0801743c <__malloc_unlock>:
 801743c:	4801      	ldr	r0, [pc, #4]	; (8017444 <__malloc_unlock+0x8>)
 801743e:	f7ff b9e0 	b.w	8016802 <__retarget_lock_release_recursive>
 8017442:	bf00      	nop
 8017444:	2000c85c 	.word	0x2000c85c

08017448 <_read_r>:
 8017448:	b538      	push	{r3, r4, r5, lr}
 801744a:	4d07      	ldr	r5, [pc, #28]	; (8017468 <_read_r+0x20>)
 801744c:	4604      	mov	r4, r0
 801744e:	4608      	mov	r0, r1
 8017450:	4611      	mov	r1, r2
 8017452:	2200      	movs	r2, #0
 8017454:	602a      	str	r2, [r5, #0]
 8017456:	461a      	mov	r2, r3
 8017458:	f7e9 fd0a 	bl	8000e70 <_read>
 801745c:	1c43      	adds	r3, r0, #1
 801745e:	d102      	bne.n	8017466 <_read_r+0x1e>
 8017460:	682b      	ldr	r3, [r5, #0]
 8017462:	b103      	cbz	r3, 8017466 <_read_r+0x1e>
 8017464:	6023      	str	r3, [r4, #0]
 8017466:	bd38      	pop	{r3, r4, r5, pc}
 8017468:	2000af78 	.word	0x2000af78

0801746c <_raise_r>:
 801746c:	291f      	cmp	r1, #31
 801746e:	b538      	push	{r3, r4, r5, lr}
 8017470:	4604      	mov	r4, r0
 8017472:	460d      	mov	r5, r1
 8017474:	d904      	bls.n	8017480 <_raise_r+0x14>
 8017476:	2316      	movs	r3, #22
 8017478:	6003      	str	r3, [r0, #0]
 801747a:	f04f 30ff 	mov.w	r0, #4294967295
 801747e:	bd38      	pop	{r3, r4, r5, pc}
 8017480:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8017482:	b112      	cbz	r2, 801748a <_raise_r+0x1e>
 8017484:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017488:	b94b      	cbnz	r3, 801749e <_raise_r+0x32>
 801748a:	4620      	mov	r0, r4
 801748c:	f000 f830 	bl	80174f0 <_getpid_r>
 8017490:	462a      	mov	r2, r5
 8017492:	4601      	mov	r1, r0
 8017494:	4620      	mov	r0, r4
 8017496:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801749a:	f000 b817 	b.w	80174cc <_kill_r>
 801749e:	2b01      	cmp	r3, #1
 80174a0:	d00a      	beq.n	80174b8 <_raise_r+0x4c>
 80174a2:	1c59      	adds	r1, r3, #1
 80174a4:	d103      	bne.n	80174ae <_raise_r+0x42>
 80174a6:	2316      	movs	r3, #22
 80174a8:	6003      	str	r3, [r0, #0]
 80174aa:	2001      	movs	r0, #1
 80174ac:	e7e7      	b.n	801747e <_raise_r+0x12>
 80174ae:	2400      	movs	r4, #0
 80174b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80174b4:	4628      	mov	r0, r5
 80174b6:	4798      	blx	r3
 80174b8:	2000      	movs	r0, #0
 80174ba:	e7e0      	b.n	801747e <_raise_r+0x12>

080174bc <raise>:
 80174bc:	4b02      	ldr	r3, [pc, #8]	; (80174c8 <raise+0xc>)
 80174be:	4601      	mov	r1, r0
 80174c0:	6818      	ldr	r0, [r3, #0]
 80174c2:	f7ff bfd3 	b.w	801746c <_raise_r>
 80174c6:	bf00      	nop
 80174c8:	20000190 	.word	0x20000190

080174cc <_kill_r>:
 80174cc:	b538      	push	{r3, r4, r5, lr}
 80174ce:	4d07      	ldr	r5, [pc, #28]	; (80174ec <_kill_r+0x20>)
 80174d0:	2300      	movs	r3, #0
 80174d2:	4604      	mov	r4, r0
 80174d4:	4608      	mov	r0, r1
 80174d6:	4611      	mov	r1, r2
 80174d8:	602b      	str	r3, [r5, #0]
 80174da:	f7e9 fcad 	bl	8000e38 <_kill>
 80174de:	1c43      	adds	r3, r0, #1
 80174e0:	d102      	bne.n	80174e8 <_kill_r+0x1c>
 80174e2:	682b      	ldr	r3, [r5, #0]
 80174e4:	b103      	cbz	r3, 80174e8 <_kill_r+0x1c>
 80174e6:	6023      	str	r3, [r4, #0]
 80174e8:	bd38      	pop	{r3, r4, r5, pc}
 80174ea:	bf00      	nop
 80174ec:	2000af78 	.word	0x2000af78

080174f0 <_getpid_r>:
 80174f0:	f7e9 bc9a 	b.w	8000e28 <_getpid>

080174f4 <_fstat_r>:
 80174f4:	b538      	push	{r3, r4, r5, lr}
 80174f6:	4d07      	ldr	r5, [pc, #28]	; (8017514 <_fstat_r+0x20>)
 80174f8:	2300      	movs	r3, #0
 80174fa:	4604      	mov	r4, r0
 80174fc:	4608      	mov	r0, r1
 80174fe:	4611      	mov	r1, r2
 8017500:	602b      	str	r3, [r5, #0]
 8017502:	f7e9 fcfa 	bl	8000efa <_fstat>
 8017506:	1c43      	adds	r3, r0, #1
 8017508:	d102      	bne.n	8017510 <_fstat_r+0x1c>
 801750a:	682b      	ldr	r3, [r5, #0]
 801750c:	b103      	cbz	r3, 8017510 <_fstat_r+0x1c>
 801750e:	6023      	str	r3, [r4, #0]
 8017510:	bd38      	pop	{r3, r4, r5, pc}
 8017512:	bf00      	nop
 8017514:	2000af78 	.word	0x2000af78

08017518 <_isatty_r>:
 8017518:	b538      	push	{r3, r4, r5, lr}
 801751a:	4d06      	ldr	r5, [pc, #24]	; (8017534 <_isatty_r+0x1c>)
 801751c:	2300      	movs	r3, #0
 801751e:	4604      	mov	r4, r0
 8017520:	4608      	mov	r0, r1
 8017522:	602b      	str	r3, [r5, #0]
 8017524:	f7e9 fcf9 	bl	8000f1a <_isatty>
 8017528:	1c43      	adds	r3, r0, #1
 801752a:	d102      	bne.n	8017532 <_isatty_r+0x1a>
 801752c:	682b      	ldr	r3, [r5, #0]
 801752e:	b103      	cbz	r3, 8017532 <_isatty_r+0x1a>
 8017530:	6023      	str	r3, [r4, #0]
 8017532:	bd38      	pop	{r3, r4, r5, pc}
 8017534:	2000af78 	.word	0x2000af78

08017538 <_init>:
 8017538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801753a:	bf00      	nop
 801753c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801753e:	bc08      	pop	{r3}
 8017540:	469e      	mov	lr, r3
 8017542:	4770      	bx	lr

08017544 <_fini>:
 8017544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017546:	bf00      	nop
 8017548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801754a:	bc08      	pop	{r3}
 801754c:	469e      	mov	lr, r3
 801754e:	4770      	bx	lr
